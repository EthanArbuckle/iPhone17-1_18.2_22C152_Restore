uint64_t sub_100433918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v7;
  void *v8;
  uint64_t v10;

  v7 = type metadata accessor for DIPError.Code();
  v4[2] = v7;
  v4[3] = *(void *)(v7 - 8);
  v4[4] = swift_task_alloc();
  v8 = (void *)swift_task_alloc();
  v4[5] = v8;
  *v8 = v4;
  v8[1] = sub_100433A20;
  return sub_100022764(a3, a4);
}

uint64_t sub_100433A20()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100433B5C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100433B5C()
{
  (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for DIPError.Code.internalError(_:), v0[2]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10043AB74((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100433CEC(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  NSString v5 = String._bridgeToObjectiveC()();
  v2[18] = v5;
  v2[2] = v2;
  v2[3] = sub_100433E68;
  uint64_t v6 = swift_continuation_init();
  v2[10] = _NSConcreteStackBlock;
  v2[11] = 0x40000000;
  v2[12] = sub_100529EC4;
  v2[13] = &unk_100705378;
  v2[14] = v6;
  [a2 deleteCredential:v5 completion:v2 + 10];
  return _swift_continuation_await(v2 + 2);
}

uint64_t sub_100433E68()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 152) = v3;
  uint64_t v4 = *(void **)(v1 + 144);
  if (v3)
  {
    swift_willThrow();

    return _swift_task_switch(sub_100433FD8, 0, 0);
  }
  else
  {

    swift_task_dealloc();
    NSString v5 = *(uint64_t (**)(void))(v2 + 8);
    return v5();
  }
}

uint64_t sub_100433FD8()
{
  (*(void (**)(void, void, void))(v0[16] + 104))(v0[17], enum case for DIPError.Code.internalError(_:), v0[15]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10043AB74((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_100434168(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = a2;
  uint64_t v3 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v3 - 8);
  NSString v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v49 - v11;
  id v13 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 initWithEntityName:v14];

  sub_100007764(&qword_1007232F0);
  unint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    return;
  }
  v65 = v12;
  v66 = v10;
  v68 = v5;
  unint64_t v17 = (unint64_t)sub_10052F04C(v16);

  swift_bridgeObjectRelease();
  if (v17)
  {
    uint64_t v49 = 0;
    uint64_t v52 = v17 & 0xFFFFFFFFFFFFFF8;
    if (v17 >> 62) {
      goto LABEL_51;
    }
    uint64_t v18 = v67;
    uint64_t v19 = (uint64_t)v68;
    uint64_t v55 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v55)
    {
      while (1)
      {
        unint64_t v20 = 0;
        uint64_t v50 = v18 + 16;
        unint64_t v54 = v17 & 0xC000000000000001;
        v51 = (char *)(v17 + 32);
        v59 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
        v63 = (void (**)(char *, char *, uint64_t))(v7 + 32);
        v64 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
        v62 = (char *)&type metadata for Any + 8;
        uint64_t v67 = v6;
        uint64_t v60 = v7;
        unint64_t v53 = v17;
        while (1)
        {
          if (v54)
          {
            id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v20 >= *(void *)(v52 + 16)) {
              goto LABEL_49;
            }
            id v21 = *(id *)&v51[8 * v20];
          }
          v22 = v21;
          if (__OFADD__(v20++, 1)) {
            break;
          }
          id v24 = [v21 uploadAssets];
          if (v24)
          {
            id v57 = v22;
            unint64_t v58 = v20;
            id v25 = v24;
            sub_100530DA4(v25);
            uint64_t v27 = v26;
            id v56 = v25;

            v71 = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)();
            unint64_t v17 = *(void *)(v27 + 16);
            if (v17)
            {
              uint64_t v28 = v27 + 32;
              while (1)
              {
                sub_10003BC28(v28, (uint64_t)v70);
                type metadata accessor for StoredUploadAsset();
                if (!swift_dynamicCast()) {
                  break;
                }
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
                v28 += 32;
                if (!--v17) {
                  goto LABEL_19;
                }
              }
              v69 = 0;
              swift_release();
              v43 = v69;

              swift_release();
              goto LABEL_47;
            }
LABEL_19:
            unint64_t v29 = (unint64_t)v71;
            swift_release();
            if ((v29 & 0x8000000000000000) != 0 || (v29 & 0x4000000000000000) != 0)
            {
              swift_bridgeObjectRetain();
              uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
              if (v44 <= 0) {
                goto LABEL_43;
              }
              swift_retain();
              uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
              if (v45)
              {
                uint64_t v7 = v45;
                if (v45 < 1) {
                  goto LABEL_50;
                }
LABEL_23:
                uint64_t v30 = 0;
                unint64_t v31 = v29 & 0xC000000000000001;
                v32 = _swiftEmptyArrayStorage;
                unint64_t v61 = v29 & 0xC000000000000001;
                do
                {
                  if (v31) {
                    id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v33 = *(id *)(v29 + 8 * v30 + 32);
                  }
                  v34 = v33;
                  id v35 = [v33 assetFileURL:v49, v50];
                  if (v35)
                  {
                    v36 = v35;
                    static String._unconditionallyBridgeFromObjectiveC(_:)();

                    uint64_t v19 = (uint64_t)v68;
                    URL.init(string:)();

                    uint64_t v6 = v67;
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    (*v59)(v19, 1, 1, v6);
                  }
                  v37 = v65;
                  if ((*v64)(v19, 1, v6) == 1)
                  {
                    sub_100106158(v19);
                  }
                  else
                  {
                    uint64_t v38 = v6;
                    v39 = *v63;
                    (*v63)(v37, (char *)v19, v38);
                    v39(v66, v37, v38);
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      v32 = (void *)sub_100110B14(0, v32[2] + 1, 1, (unint64_t)v32);
                    }
                    unint64_t v41 = v32[2];
                    unint64_t v40 = v32[3];
                    if (v41 >= v40 >> 1) {
                      v32 = (void *)sub_100110B14(v40 > 1, v41 + 1, 1, (unint64_t)v32);
                    }
                    v32[2] = v41 + 1;
                    uint64_t v42 = v67;
                    ((void (*)(char *))v39)((char *)v32+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v41);
                    uint64_t v6 = v42;
                    unint64_t v31 = v61;
                  }
                  ++v30;
                }
                while (v7 != v30);
              }
              else
              {
                v32 = _swiftEmptyArrayStorage;
              }
              swift_release_n();
              swift_beginAccess();
              sub_1001635C0((uint64_t)v32);
              swift_endAccess();

              id v46 = v56;
            }
            else
            {
              uint64_t v7 = *(void *)(v29 + 16);
              if (v7)
              {
                swift_retain();
                goto LABEL_23;
              }
LABEL_43:

              swift_release();
              id v46 = v57;
            }

LABEL_47:
            unint64_t v17 = v53;
            unint64_t v20 = v58;
            goto LABEL_8;
          }

LABEL_8:
          if (v20 == v55) {
            goto LABEL_53;
          }
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        swift_bridgeObjectRetain();
        uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v67;
        uint64_t v19 = (uint64_t)v68;
        if (v47 >= 1)
        {
          swift_bridgeObjectRetain();
          uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v55 = v48;
          if (v48) {
            continue;
          }
        }
        break;
      }
    }
LABEL_53:
    swift_bridgeObjectRelease();
  }
}

void sub_100434844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v84 = type metadata accessor for Logger();
  uint64_t v78 = *(void *)(v84 - 8);
  uint64_t v8 = __chkstk_darwin(v84);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v68 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (char *)&v68 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v68 - v17;
  uint64_t v19 = v83;
  sub_10010096C(a2, a3);
  if (v19) {
    return;
  }
  id v21 = v18;
  uint64_t v82 = a4;
  uint64_t v83 = a2;
  uint64_t v22 = v84;
  v76 = v16;
  v77 = v13;
  uint64_t v70 = a1;
  uint64_t v71 = 0;
  unint64_t v72 = a3;
  if (!v20)
  {
    uint64_t v48 = v21;
    defaultLogger()();
    unint64_t v49 = v72;
    swift_bridgeObjectRetain_n();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v50, v51))
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v48, v22);
      return;
    }
    uint64_t v52 = swift_slowAlloc();
    uint64_t v86 = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 136315394;
    v81 = v48;
    swift_bridgeObjectRetain();
    uint64_t v85 = sub_100110D58(v83, v49, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v52 + 12) = 2080;
    uint64_t v53 = IdentityTarget.debugDescription.getter();
    uint64_t v85 = sub_100110D58(v53, v54, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "proofing session for %s and %s doesn't exist", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_27;
  }
  uint64_t v23 = a2;
  id v69 = v20;
  id v24 = [v20 uploadAssets];
  uint64_t v25 = v22;
  if (!v24)
  {
LABEL_25:
    uint64_t v55 = v10;
    defaultLogger()();
    unint64_t v56 = v72;
    swift_bridgeObjectRetain_n();
    id v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v57, v58))
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v10, v25);
      return;
    }
    uint64_t v59 = swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    v81 = v55;
    uint64_t v86 = v60;
    *(_DWORD *)uint64_t v59 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v85 = sub_100110D58(v83, v56, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v59 + 12) = 2080;
    uint64_t v61 = IdentityTarget.debugDescription.getter();
    uint64_t v85 = sub_100110D58(v61, v62, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "No assets exists for proofing session %s and %s to be deleted.", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_27:
    (*(void (**)(char *, uint64_t))(v78 + 8))(v81, v84);
    return;
  }
  id v26 = v24;
  sub_100530DA4(v26);
  uint64_t v28 = v27;

  unint64_t v29 = (unint64_t)sub_10052EF50(v28);
  swift_release();
  if (!v29)
  {

    goto LABEL_25;
  }
  id v68 = v26;
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v32 = v72;
  id v33 = v76;
  v34 = v77;
  if (v31)
  {
    if (v31 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v35 = 0;
    v36 = *(char **)(v70 + 16);
    unint64_t v80 = v29 & 0xC000000000000001;
    v81 = v36;
    v79 = (void (**)(char *, uint64_t))(v78 + 8);
    *(void *)&long long v30 = 136315138;
    long long v74 = v30;
    v73 = (char *)&type metadata for Any + 8;
    v75 = (void *)v29;
    uint64_t v82 = v31;
    do
    {
      if (v80) {
        id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v37 = *(id *)(v29 + 8 * v35 + 32);
      }
      uint64_t v38 = v37;
      [v81 deleteObject:v37, v68];
      defaultLogger()();
      id v39 = v38;
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = v74;
        id v43 = [v39 assetType];
        if (v43)
        {
          uint64_t v44 = v43;
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v47 = v46;
        }
        else
        {
          uint64_t v45 = 0;
          unint64_t v47 = 0xE000000000000000;
        }
        *(void *)(v42 + 4) = sub_100110D58(v45, v47, &v86);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Delete called on StoredUploadAsset with type %s", (uint8_t *)v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v33 = v76;
        uint64_t v25 = v84;
        (*v79)(v76, v84);
        v34 = v77;
        unint64_t v29 = (unint64_t)v75;
      }
      else
      {

        (*v79)(v33, v25);
      }
      uint64_t v23 = v83;
      ++v35;
    }
    while (v82 != v35);
    swift_bridgeObjectRelease();
    unint64_t v32 = v72;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v63 = v69;
  StoredProofingSession.update(shouldScheduleUploads:)(0);
  v87.value = IdentityProofingActionStatus.rawValue.getter();
  v87.is_nil = 0;
  StoredProofingSession.update(proofingActionStatus:)(v87);
  uint64_t v64 = v71;
  sub_1000FFAB4();
  if (v64)
  {
  }
  else
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v85 = sub_100110D58(v23, v32, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Cleanup after uploads complete for proofingSessionID -> %s", v67, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v25);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v34, v25);
    }
  }
}

uint64_t sub_100435184(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v43 - v13;
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v43 - v15;
  id v17 = [a1 credentialIdentifier];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v43 = v3;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    [a1 target];
    uint64_t v22 = IdentityTarget.init(rawValue:)();
    if (v23)
    {
      swift_bridgeObjectRelease();
      defaultLogger()();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        id v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "invalid target, cannot delete the session", v33, 2u);
        swift_slowDealloc();
      }

      v34 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
      uint64_t v35 = v11;
    }
    else if (v22 == 2)
    {
      uint64_t v36 = *(void *)(v1 + 16);
      if (v36)
      {
        id v24 = objc_retain(*(id *)(v36
                                + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService));
        uint64_t v25 = &unk_1007053A0;
        id v26 = &unk_10072E560;
LABEL_16:
        sub_100439024(v19, v21, v24, (uint64_t)v25, (uint64_t)v26);

        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      defaultLogger()();
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "No watch connection available, ignoring deleteCredential on Watch", v42, 2u);
        swift_slowDealloc();
      }

      v34 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
      uint64_t v35 = v16;
    }
    else
    {
      if (v22 == 1)
      {
        if (qword_10071F498 != -1) {
          swift_once();
        }
        id v24 = *(id *)(qword_100760290 + 16);
        uint64_t v25 = &unk_100705360;
        id v26 = &unk_10072E548;
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
      defaultLogger()();
      id v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        id v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unknown target, cannot delete the session", v39, 2u);
        swift_slowDealloc();
      }

      v34 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
      uint64_t v35 = v14;
    }
    return v34(v35, v43);
  }
  defaultLogger()();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "credentialIdentifier doesn't exist, cannot delete the crendential", v29, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
}

void sub_1004357B8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v37 - v8;
  id v10 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 initWithEntityName:v11];

  uint64_t v13 = *(void **)(a1 + 16);
  sub_100007764(&qword_1007232F0);
  unint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return;
  }
  uint64_t v42 = v13;
  uint64_t v43 = v9;
  unint64_t v15 = (unint64_t)sub_10052F064(v14);

  swift_bridgeObjectRelease();
  if (v15)
  {
    unint64_t v41 = v15;
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_6:
        v37[1] = a1;
        v37[2] = 0;
        uint64_t v40 = v17;
        if (v17 < 1)
        {
          __break(1u);
        }
        else
        {
          uint64_t v18 = 0;
          unint64_t v20 = v41;
          uint64_t v19 = v42;
          uint64_t v44 = (void (**)(char *, uint64_t))(v4 + 8);
          unint64_t v45 = v41 & 0xC000000000000001;
          *(void *)&long long v16 = 136315138;
          long long v38 = v16;
          v37[3] = (char *)&type metadata for Any + 8;
          unint64_t v21 = v43;
          uint64_t v22 = v40;
          uint64_t v39 = v3;
          do
          {
            if (v45) {
              id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v23 = *(id *)(v20 + 8 * v18 + 32);
            }
            id v24 = v23;
            [v19 deleteObject:v23];
            defaultLogger()();
            id v25 = v24;
            id v26 = Logger.logObject.getter();
            os_log_type_t v27 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v26, v27))
            {
              uint64_t v28 = swift_slowAlloc();
              uint64_t v46 = swift_slowAlloc();
              *(_DWORD *)uint64_t v28 = v38;
              id v29 = [v25 proofingSessionID];
              if (v29)
              {
                long long v30 = v29;
                uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v33 = v32;
              }
              else
              {
                uint64_t v31 = 0;
                unint64_t v33 = 0xE000000000000000;
              }
              *(void *)(v28 + 4) = sub_100110D58(v31, v33, &v46);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully deleted biome metadata for proofingSessionID: %s", (uint8_t *)v28, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              unint64_t v21 = v43;
              uint64_t v3 = v39;
              (*v44)(v43, v39);
              unint64_t v20 = v41;
              uint64_t v19 = v42;
              uint64_t v22 = v40;
            }
            else
            {

              (*v44)(v21, v3);
            }
            ++v18;
          }
          while (v22 != v18);
          swift_bridgeObjectRelease();
          sub_1000E4160();
        }
        return;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v17) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
  }
  defaultLogger()();
  v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "No biome metadata exists in the database", v36, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_100435C4C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v37 - v8;
  id v10 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 initWithEntityName:v11];

  uint64_t v13 = *(void **)(a1 + 16);
  sub_100007764(&qword_1007232F0);
  unint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return;
  }
  uint64_t v42 = v13;
  uint64_t v43 = v9;
  unint64_t v15 = (unint64_t)sub_10052EF38(v14);

  swift_bridgeObjectRelease();
  if (v15)
  {
    unint64_t v41 = v15;
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_6:
        v37[1] = a1;
        v37[2] = 0;
        uint64_t v40 = v17;
        if (v17 < 1)
        {
          __break(1u);
        }
        else
        {
          uint64_t v18 = 0;
          unint64_t v20 = v41;
          uint64_t v19 = v42;
          uint64_t v44 = (void (**)(char *, uint64_t))(v4 + 8);
          unint64_t v45 = v41 & 0xC000000000000001;
          *(void *)&long long v16 = 136315138;
          long long v38 = v16;
          v37[3] = (char *)&type metadata for Any + 8;
          unint64_t v21 = v43;
          uint64_t v22 = v40;
          uint64_t v39 = v3;
          do
          {
            if (v45) {
              id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v23 = *(id *)(v20 + 8 * v18 + 32);
            }
            id v24 = v23;
            [v19 deleteObject:v23];
            defaultLogger()();
            id v25 = v24;
            id v26 = Logger.logObject.getter();
            os_log_type_t v27 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v26, v27))
            {
              uint64_t v28 = swift_slowAlloc();
              uint64_t v46 = swift_slowAlloc();
              *(_DWORD *)uint64_t v28 = v38;
              id v29 = [v25 proofingSessionID];
              if (v29)
              {
                long long v30 = v29;
                uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v33 = v32;
              }
              else
              {
                uint64_t v31 = 0;
                unint64_t v33 = 0xE000000000000000;
              }
              *(void *)(v28 + 4) = sub_100110D58(v31, v33, &v46);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully deleted proofing biome data for proofingSessionID: %s", (uint8_t *)v28, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              unint64_t v21 = v43;
              uint64_t v3 = v39;
              (*v44)(v43, v39);
              unint64_t v20 = v41;
              uint64_t v19 = v42;
              uint64_t v22 = v40;
            }
            else
            {

              (*v44)(v21, v3);
            }
            ++v18;
          }
          while (v22 != v18);
          swift_bridgeObjectRelease();
          sub_1000FFAB4();
        }
        return;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v17) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
  }
  defaultLogger()();
  v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "No proofing biome data exists in the database", v36, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1004360D8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  id v10 = (char *)&v35 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v35 - v12;
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v35 - v14;
  uint64_t v16 = sub_100101DD8();
  if (!v1)
  {
    uint64_t v37 = v4;
    if (v16)
    {
      uint64_t v17 = v16;
      defaultLogger()();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = v3;
        *(_WORD *)unint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Proofing Biome data exists to be cleaned. Checking if it consists of a proofing decision.", v20, 2u);
        uint64_t v3 = v36;
        swift_slowDealloc();
      }

      unint64_t v21 = *(void (**)(char *, uint64_t))(v37 + 8);
      uint64_t v22 = v13;
      uint64_t v23 = v37 + 8;
      v21(v22, v3);
      id v24 = [v17 proofingDecision];
      if (v24)
      {
      }
      else
      {
        uint64_t v37 = v23;
        defaultLogger()();
        unint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc();
          uint64_t v36 = v3;
          *(_WORD *)v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Proofing decision doesn't exist for the proofing biome data. Will clear data.", v34, 2u);
          uint64_t v3 = v36;
          swift_slowDealloc();
        }

        v21(v10, v3);
        [*(id *)(a1 + 16) deleteObject:v17];
        sub_1000FFAB4();
      }
      defaultLogger()();
      id v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully cleared proofing biome data.", v27, 2u);
        swift_slowDealloc();
        uint64_t v28 = v17;
      }
      else
      {
        uint64_t v28 = v25;
        id v25 = v17;
      }

      v21(v7, v3);
    }
    else
    {
      defaultLogger()();
      id v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "No clearing of proofing biome data required on proofing cancellation as it doesn't exist.", v31, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v3);
    }
  }
}

uint64_t sub_1004364F8()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingCleanupProvider()
{
  return self;
}

uint64_t sub_100436564(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000C494;
  return sub_100433918(a1, v8, a3, a4);
}

uint64_t sub_10043661C(uint64_t a1, void **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025D64;
  return sub_100433CEC(a1, v4);
}

uint64_t sub_1004366D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  __chkstk_darwin(v8);
  id v10 = (char *)&v18 - v9;
  defaultLogger()();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting upload assets meta data cleanup...", v13, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v15 = v14;
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000FFE3C((uint64_t)sub_10043AC1C, (uint64_t)v16);
  swift_release();
  return swift_release();
}

uint64_t sub_100436A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720A68);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v31 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v37 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v40 = (char *)v31 - v15;
  uint64_t result = __chkstk_darwin(v14);
  unint64_t v47 = (char *)v31 - v17;
  uint64_t v50 = _swiftEmptyArrayStorage;
  uint64_t v36 = *(void *)(a1 + 16);
  if (v36)
  {
    unint64_t v18 = 0;
    uint64_t v43 = v11 + 48;
    uint64_t v44 = v11 + 16;
    unint64_t v49 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    unint64_t v41 = (uint64_t (**)(char *, uint64_t))(v11 + 8);
    uint64_t v46 = v11 + 56;
    v31[1] = (v11 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v33 = a2;
    v34 = v9;
    uint64_t v35 = a1;
    uint64_t v32 = v11;
    os_log_type_t v19 = v40;
    while (v18 < *(void *)(a1 + 16))
    {
      unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      unint64_t v38 = v18;
      unint64_t v39 = v20;
      uint64_t v45 = *(void *)(v11 + 72);
      uint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
      v42(v9, a1 + v20 + v45 * v18, v10);
      unint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v21(v9, 0, 1, v10);
      uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      if (v22(v9, 1, v10) == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
      uint64_t v48 = *v49;
      v48(v47, v9, v10);
      uint64_t v23 = a2;
      uint64_t v24 = *(void *)(a2 + 16);
      if (v24)
      {
        unint64_t v25 = v23 + v39;
        swift_bridgeObjectRetain();
        while (1)
        {
          v42(v7, v25, v10);
          v21(v7, 0, 1, v10);
          if (v22(v7, 1, v10) == 1) {
            break;
          }
          v48(v19, v7, v10);
          sub_10043AB74((unint64_t *)&unk_10072E5A0, (void (*)(uint64_t))&type metadata accessor for URL);
          char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
          os_log_type_t v27 = *v41;
          (*v41)(v19, v10);
          if (v26)
          {
            a2 = v33;
            swift_bridgeObjectRelease();
            uint64_t result = v27(v47, v10);
            goto LABEL_4;
          }
          v25 += v45;
          if (!--v24) {
            goto LABEL_14;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_14:
        v21(v7, 1, 1, v10);
      }
      a2 = v33;
      swift_bridgeObjectRelease();
      v48(v37, v47, v10);
      uint64_t v28 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011148C(0, v28[2] + 1, 1);
        uint64_t v28 = v50;
      }
      unint64_t v30 = v28[2];
      unint64_t v29 = v28[3];
      if (v30 >= v29 >> 1)
      {
        sub_10011148C(v29 > 1, v30 + 1, 1);
        uint64_t v28 = v50;
      }
      v28[2] = v30 + 1;
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v48)((char *)v28 + v39 + v30 * v45, v37, v10);
      uint64_t v50 = v28;
LABEL_4:
      unint64_t v18 = v38 + 1;
      a1 = v35;
      uint64_t v9 = v34;
      uint64_t v11 = v32;
      if (v38 + 1 == v36) {
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  else
  {
    unint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
LABEL_22:
    v21(v9, 1, 1, v10);
    swift_bridgeObjectRelease();
LABEL_23:
    sub_100106158((uint64_t)v9);
    return (uint64_t)v50;
  }
  return result;
}

uint64_t sub_100436F8C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v26 - v4;
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v26 - v6;
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "fetchAssetFilesFromDatabase called", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  uint64_t v11 = v1 + 8;
  v12(v7, v0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = _swiftEmptyArrayStorage;
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v28 = v5;
  uint64_t v29 = v0;
  os_log_type_t v27 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = v13;
  swift_retain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_10043ABC0, v16);
  swift_release();
  swift_release();
  uint64_t v17 = v12;
  defaultLogger()();
  swift_retain_n();
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v20 = 136315138;
    v26[1] = v20 + 4;
    swift_beginAccess();
    type metadata accessor for URL();
    swift_bridgeObjectRetain();
    uint64_t v21 = Array.description.getter();
    v26[2] = v11;
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_100110D58(v21, v23, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Asset URLs from database are %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v27(v28, v29);
  }
  else
  {

    swift_release_n();
    v17(v5, v0);
  }
  swift_beginAccess();
  uint64_t v24 = *(void *)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v24;
}

uint64_t sub_100437570()
{
  uint64_t v149 = type metadata accessor for DaemonAnalytics.GarbageCollectionEventType();
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v140 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v1 - 8);
  v158 = (char *)&v140 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v162 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  v156 = (char *)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v140 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  v164 = (char *)&v140 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v165 = (char *)&v140 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v140 - v13;
  uint64_t v161 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v161 - 8);
  uint64_t v16 = __chkstk_darwin(v161);
  unint64_t v18 = (char *)&v140 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  v157 = (char *)&v140 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v142 = (char *)&v140 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v153 = (char *)&v140 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v154 = (char *)&v140 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v163 = (char *)&v140 - v28;
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v140 - v29;
  defaultLogger()();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "deleteStaleFiles called", v33, 2u);
    swift_slowDealloc();
  }

  v34 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v160 = v15 + 8;
  v159 = v34;
  v34(v30, v161);
  uint64_t v35 = sub_100436F8C();
  uint64_t v36 = v165;
  static URL.libraryDirectory.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v37 = v162 + 8;
  unint64_t v38 = *(void (**)(char *, uint64_t))(v162 + 8);
  v38(v36, v3);
  id v155 = self;
  id v39 = [v155 defaultManager];
  URL._bridgeToObjectiveC()(v40);
  uint64_t v42 = v41;
  *(void *)&long long v170 = 0;
  id v43 = [v39 contentsOfDirectoryAtURL:v41 includingPropertiesForKeys:0 options:4 error:&v170];

  uint64_t v44 = (void *)v170;
  if (v43)
  {
    uint64_t v151 = v35;
    v166 = v38;
    uint64_t v167 = v37;
    v152 = v8;
    uint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v46 = v44;

    unint64_t v47 = v163;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v168 = v3;
    v141 = v18;
    if (v50)
    {
      uint64_t v51 = v45;
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v170 = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136315138;
      v150 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v52 + 4);
      swift_bridgeObjectRetain();
      uint64_t v53 = Array.description.getter();
      unint64_t v55 = v54;
      swift_bridgeObjectRelease();
      uint64_t v56 = v53;
      uint64_t v45 = v51;
      uint64_t v169 = sub_100110D58(v56, v55, (uint64_t *)&v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v3 = v168;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Asset URLs from coreidvd/uploads are: %s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v159(v47, v161);
    int64_t v58 = *(void *)(v45 + 16);
    v143 = v14;
    if (v58)
    {
      *(void *)&long long v170 = _swiftEmptyArrayStorage;
      sub_10011148C(0, v58, 0);
      v163 = *(char **)(v162 + 16);
      unint64_t v59 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
      v150 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v45;
      unint64_t v60 = v45 + v59;
      uint64_t v61 = *(void *)(v162 + 72);
      unint64_t v62 = (void (**)(char *, char *, uint64_t))(v162 + 32);
      do
      {
        id v63 = v165;
        ((void (*)(char *, unint64_t, uint64_t))v163)(v165, v60, v3);
        URL.resolvingSymlinksInPath()();
        v166(v63, v3);
        uint64_t v64 = (char *)v170;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10011148C(0, *((void *)v64 + 2) + 1, 1);
          uint64_t v64 = (char *)v170;
        }
        unint64_t v66 = *((void *)v64 + 2);
        unint64_t v65 = *((void *)v64 + 3);
        if (v66 >= v65 >> 1)
        {
          sub_10011148C(v65 > 1, v66 + 1, 1);
          uint64_t v64 = (char *)v170;
        }
        *((void *)v64 + 2) = v66 + 1;
        uint64_t v3 = v168;
        (*v62)(&v64[v59 + v66 * v61], v164, v168);
        *(void *)&long long v170 = v64;
        v60 += v61;
        --v58;
      }
      while (v58);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v64 = (char *)_swiftEmptyArrayStorage;
    }
    uint64_t v67 = v154;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    id v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v170 = swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v71 = Array.description.getter();
      unint64_t v73 = v72;
      swift_bridgeObjectRelease();
      uint64_t v169 = sub_100110D58(v71, v73, (uint64_t *)&v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Asset SymLinks resolved URLs from coreidvd/uploads are: %s", v70, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      long long v74 = v154;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      long long v74 = v67;
    }
    v159(v74, v161);
    v75 = v158;
    v76 = v153;
    v77 = 0;
    uint64_t v78 = sub_100436A68((uint64_t)v64, v151);
    swift_bridgeObjectRelease();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.debug.getter();
    BOOL v81 = os_log_type_enabled(v79, v80);
    uint64_t v144 = v78;
    if (v81)
    {
      uint64_t v82 = v76;
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v170 = swift_slowAlloc();
      *(_DWORD *)uint64_t v83 = 136315138;
      v165 = (char *)(v83 + 4);
      swift_bridgeObjectRetain();
      uint64_t v84 = Array.description.getter();
      unint64_t v86 = v85;
      swift_bridgeObjectRelease();
      uint64_t v87 = v84;
      uint64_t v78 = v144;
      uint64_t v169 = sub_100110D58(v87, v86, (uint64_t *)&v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Unknown asset URLs are: %s", v83, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v88 = v82;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v88 = v76;
    }
    v159(v88, v161);
    v90 = v152;
    v91 = v157;
    v163 = *(char **)(v78 + 16);
    if (!v163)
    {
      uint64_t v94 = v168;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v75, 1, 1, v168);
LABEL_46:
      uint64_t v121 = v148;
      v122 = v147;
      v123 = v166;
LABEL_47:
      swift_bridgeObjectRelease();
      v123(v143, v94);
      goto LABEL_48;
    }
    v165 = 0;
    v92 = *(void (**)(char *, unint64_t, uint64_t))(v162 + 16);
    unint64_t v93 = v78 + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
    uint64_t v151 = *(void *)(v162 + 72);
    v153 = (char *)(v162 + 48);
    v152 = (char *)(v162 + 32);
    v154 = (char *)(v162 + 56);
    unint64_t v140 = (v162 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    *(void *)&long long v89 = 136315138;
    long long v146 = v89;
    v145 = (char *)&type metadata for Any + 8;
    uint64_t v94 = v168;
    v162 += 16;
    v92(v75, v93, v168);
    while (1)
    {
      v150 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v154;
      v150(v75, 0, 1, v94);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v153)(v75, 1, v94) == 1)
      {
        uint64_t v121 = v148;
        v122 = v147;
        v123 = v166;
        goto LABEL_47;
      }
      (*(void (**)(char *, char *, uint64_t))v152)(v90, v75, v94);
      if (qword_10071F4B0 != -1) {
        swift_once();
      }
      v96 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
      uint64_t v97 = (uint64_t)&v96[4];
      v98 = v96 + 52;
      os_unfair_lock_lock(v96 + 52);
      sub_1000262B4(v97, &v170);
      os_unfair_lock_unlock(v98);
      uint64_t v99 = v171;
      swift_retain();
      sub_1000262D0((uint64_t)&v170);
      v100 = *(os_unfair_lock_s **)(v99 + 16);
      v101 = v100 + 4;
      v102 = v100 + 6;
      os_unfair_lock_lock(v100 + 6);
      sub_100006754(v101, &v169);
      os_unfair_lock_unlock(v102);
      uint64_t v103 = v169;
      swift_release();
      v104 = v156;
      if (v103 >= 1) {
        break;
      }
      id v105 = [v155 defaultManager:v140];
      URL._bridgeToObjectiveC()(v106);
      v108 = v107;
      *(void *)&long long v170 = 0;
      unsigned int v109 = [v105 removeItemAtURL:v107 error:&v170];

      if (!v109)
      {
        id v129 = (id)v170;
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        v130 = v166;
        v166(v90, v94);
        v130(v143, v94);
        unint64_t v18 = v141;
        goto LABEL_41;
      }
      v164 = v77;
      id v110 = (id)v170;
      defaultLogger()();
      v111 = v92;
      v92(v104, (unint64_t)v90, v94);
      v112 = Logger.logObject.getter();
      v113 = v91;
      v114 = v90;
      os_log_type_t v115 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v112, v115))
      {
        uint64_t v116 = swift_slowAlloc();
        *(void *)&long long v170 = swift_slowAlloc();
        *(_DWORD *)uint64_t v116 = v146;
        uint64_t v117 = URL.absoluteString.getter();
        *(void *)(v116 + 4) = sub_100110D58(v117, v118, (uint64_t *)&v170);
        swift_bridgeObjectRelease();
        v119 = v104;
        v120 = v166;
        v166(v119, v168);
        _os_log_impl((void *)&_mh_execute_header, v112, v115, "Successfully removed stale asset file with url :%s", (uint8_t *)v116, 0xCu);
        swift_arrayDestroy();
        uint64_t v94 = v168;
        swift_slowDealloc();
        swift_slowDealloc();

        v159(v113, v161);
        v120(v114, v94);
      }
      else
      {

        v95 = v166;
        v166(v104, v94);
        v159(v113, v161);
        v95(v114, v94);
      }
      v90 = v114;
      v93 += v151;
      ++v165;
      v75 = v158;
      v91 = v157;
      v92 = v111;
      v77 = v164;
      if (v163 == v165)
      {
        v150(v158, 1, 1, v94);
        goto LABEL_46;
      }
      v92(v158, v93, v94);
    }
    swift_bridgeObjectRelease();
    v124 = v142;
    defaultLogger()();
    v125 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v125, v126))
    {
      v127 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v127 = 0;
      _os_log_impl((void *)&_mh_execute_header, v125, v126, "Breaking out of gc as number of assets persisted on disk counter is non-zero", v127, 2u);
      swift_slowDealloc();
    }

    v159(v124, v161);
    v128 = v166;
    v166(v90, v94);
    v128(v143, v94);
LABEL_44:
    uint64_t v121 = v148;
    v122 = v147;
LABEL_48:
    uint64_t v138 = v149;
    goto LABEL_49;
  }
  id v57 = (id)v170;
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  swift_willThrow();
  v38(v14, v3);
LABEL_41:
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  v131 = Logger.logObject.getter();
  v132 = v18;
  os_log_type_t v133 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v131, v133))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v159(v132, v161);
    goto LABEL_44;
  }
  v134 = (uint8_t *)swift_slowAlloc();
  *(void *)&long long v170 = swift_slowAlloc();
  *(_DWORD *)v134 = 136315138;
  swift_getErrorValue();
  uint64_t v135 = Error.localizedDescription.getter();
  uint64_t v169 = sub_100110D58(v135, v136, (uint64_t *)&v170);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v131, v133, "Error occurred in removing stale file: %s", v134, 0xCu);
  swift_arrayDestroy();
  uint64_t v137 = v149;
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  uint64_t v138 = v137;
  v159(v132, v161);
  uint64_t v121 = v148;
  v122 = v147;
LABEL_49:
  type metadata accessor for DaemonAnalytics();
  (*(void (**)(char *, void, uint64_t))(v121 + 104))(v122, enum case for DaemonAnalytics.GarbageCollectionEventType.staleAssetFile(_:), v138);
  static DaemonAnalytics.sendGarbageCollectedEvent(eventType:count:)();
  return (*(uint64_t (**)(char *, uint64_t))(v121 + 8))(v122, v138);
}

uint64_t sub_100438B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v26 = a6;
  uint64_t v24 = a3;
  uint64_t v25 = a5;
  uint64_t v23 = a1;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v27 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DIPError();
  uint64_t v30 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v14 = v13;
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = a4;
  uint64_t v17 = a2;
  uint64_t v18 = v15;
  *(void *)(v15 + 16) = v23;
  *(void *)(v15 + 24) = v17;
  uint64_t v19 = v24;
  *(void *)(v15 + 32) = v14;
  *(void *)(v15 + 40) = v19;
  uint64_t v20 = v25;
  *(void *)(v15 + 48) = v16;
  *(void *)(v15 + 56) = v20;
  *(unsigned char *)(v15 + 64) = v26 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_10043A5F0, v18);
  swift_release();

  return swift_release();
}

uint64_t sub_100439024(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a1;
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v25 = a5;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v24 = v5;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v23 = a3;
    uint64_t v29 = v17;
    v22[1] = a4;
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_100110D58(v27, a2, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Deleting credential %s", v16, 0xCu);
    swift_arrayDestroy();
    a3 = v23;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v26);
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v19 = v27;
  v18[2] = a3;
  v18[3] = v19;
  v18[4] = a2;
  swift_bridgeObjectRetain();
  id v20 = a3;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  return swift_release();
}

uint64_t sub_1004392F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  __chkstk_darwin(v2);
  uint64_t v25 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DIPError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = v7;
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "clearBiomeMetadata called", v14, 2u);
    uint64_t v1 = v0;
    uint64_t v7 = v22;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  type metadata accessor for IdentityBiomeDataContext();
  swift_allocObject();
  sub_1000E3ECC();
  if (v1)
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v17._countAndFlagsBits = 0xD000000000000036;
    v17._object = (void *)0x8000000100636350;
    String.append(_:)(v17);
    swift_getErrorValue();
    v18._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v23 + 104))(v25, enum case for DIPError.Code.failedToDeleteBiomeMetadata(_:), v24);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10043AB74((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v19, v7, v4);
    swift_willThrow();
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    uint64_t v16 = v15;
    swift_retain();
    sub_1000E44E8((uint64_t)sub_10043975C, v16);
    return swift_release_n();
  }
}

void sub_10043975C()
{
  sub_1004357B8(v0);
}

uint64_t sub_100439778()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v11 - v3;
  defaultLogger()();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Checking if proofing biome data exists to cleaned up after proofing cancellation.", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v9 = v8;
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_10043AB58, v9);
  return swift_release_n();
}

uint64_t sub_100439ACC()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  v0[6] = v1;
  v0[7] = *(void *)(v1 - 8);
  v0[8] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for DIPError();
  v0[9] = v2;
  v0[10] = *(void *)(v2 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v0[12] = v3;
  v0[13] = *(void *)(v3 - 8);
  v0[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v0[15] = v4;
  v0[16] = *(void *)(v4 - 8);
  v0[17] = swift_task_alloc();
  return _swift_task_switch(sub_100439C9C, 0, 0);
}

uint64_t sub_100439C9C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "clearProofingBiomeData called", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v6 = v0[15];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  v0[18] = v7;
  uint64_t v8 = v7;
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v11 = v0[12];
  uint64_t v12 = swift_allocObject();
  v0[19] = v12;
  *(void *)(v12 + 16) = sub_10043A554;
  *(void *)(v12 + 24) = v8;
  uint64_t v13 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  os_log_type_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104);
  swift_retain();
  v14(v9, v13, v11);
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[20] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_10043A0D4;
  uint64_t v16 = v0[14];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v15, v16, sub_1000FE8C4, v12, (char *)&type metadata for () + 8);
}

uint64_t sub_10043A0D4()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[13] + 8))(v2[14], v2[12]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_10043A2E8;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_10043A250;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10043A250()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10043A2E8()
{
  swift_release_n();
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[7];
  uint64_t v11 = v0[6];
  _StringGuts.grow(_:)(61);
  v6._countAndFlagsBits = 0xD00000000000003BLL;
  v6._object = (void *)0x80000001006362F0;
  String.append(_:)(v6);
  swift_getErrorValue();
  v7._countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v3, enum case for DIPError.Code.failedToDeleteProofingBiomeData(_:), v11);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10043AB74((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v8, v1, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_10043A554()
{
  sub_100435C4C(v0);
}

uint64_t sub_10043A570()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10043A5A8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 65, 7);
}

void sub_10043A5F0()
{
  sub_100431780(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(char **)(v0 + 56), *(unsigned char *)(v0 + 64));
}

uint64_t sub_10043A61C(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(uint64_t, void **))((char *)&dword_10072E540 + dword_10072E540);
  return v5(a1, (void **)(v1 + 16));
}

uint64_t sub_10043A6E8(uint64_t a1)
{
  uint64_t v4 = v1 + 2;
  uint64_t v6 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000C494;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))((char *)&dword_10072E558 + dword_10072E558);
  return v8(a1, v4, v6, v5);
}

uint64_t sub_10043A7B0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10043A800()
{
  return sub_100433140(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_10043A814(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10043A824()
{
  return swift_release();
}

uint64_t sub_10043A82C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 56) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 128, 7);
}

uint64_t sub_10043A8A4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + 24;
  long long v8 = *(_OWORD *)(v0 + 96);
  long long v9 = *(_OWORD *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 64) = v5;
  *(void *)(v6 + 72) = v4;
  *(_OWORD *)(v6 + 32) = v9;
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = v3;
  *(void *)(v6 + 8) = sub_100025D64;
  return _swift_task_switch(sub_100433658, 0, 0);
}

uint64_t sub_10043A984(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1004042FC(v2);
  return a1;
}

uint64_t sub_10043A9E4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10043AA1C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10043AA6C()
{
  return sub_1004320F8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(__objc2_prop **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_10043AA98()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10043AAD0()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10043AB18()
{
  sub_100431078(v0[2], v0[3], v0[4]);
}

void sub_10043AB3C()
{
  sub_100430984(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10043AB58()
{
  sub_1004360D8(v0);
}

uint64_t sub_10043AB74(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10043ABC0()
{
  sub_100434168(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10043ABDC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10043AC1C()
{
  sub_100434844(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10043AC40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v78 = a3;
  uint64_t v66 = a2;
  uint64_t v71 = a1;
  uint64_t v3 = type metadata accessor for ISO18013DigestAlgorithm();
  uint64_t v76 = *(void *)(v3 - 8);
  uint64_t v77 = v3;
  __chkstk_darwin(v3);
  v75 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CredentialBuilderTimePolicy();
  uint64_t v72 = *(void *)(v5 - 8);
  uint64_t v73 = v5;
  __chkstk_darwin(v5);
  long long v74 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CredentialBuilderSignatureAlgorithm();
  uint64_t v68 = *(void *)(v7 - 8);
  uint64_t v69 = v7;
  __chkstk_darwin(v7);
  uint64_t v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007764(&qword_10072E5B0);
  __chkstk_darwin(v9 - 8);
  uint64_t v67 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for COSEKey();
  uint64_t v63 = *(void *)(v11 - 8);
  uint64_t v64 = v11;
  __chkstk_darwin(v11);
  unint64_t v65 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for CredentialBuilderPayloadFormat();
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  BOOL v81 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for DeveloperTestJapanNationalIDCardCredentialBuilder();
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  unint64_t v54 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for ISO18013KnownDocTypes();
  unint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100007764(&qword_1007239B0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v61 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v54 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v54 - v23;
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v82 = (char *)&v54 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v54 - v30;
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v54 - v32;
  id v34 = [objc_allocWithZone((Class)NSISO8601DateFormatter) init];
  NSString v35 = String._bridgeToObjectiveC()();
  id v80 = v34;
  id v36 = [v34 dateFromString:v35];

  v79 = v31;
  if (!v36)
  {
    id v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    v39(v24, 1, 1, v25);
    goto LABEL_5;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v37 = v31;
  unint64_t v38 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v38(v24, v37, v25);
  id v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  v39(v24, 0, 1, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    uint64_t v31 = v79;
LABEL_5:
    Date.init()();
    sub_100027994((uint64_t)v24);
    goto LABEL_7;
  }
  v38(v33, v24, v25);
  uint64_t v31 = v79;
LABEL_7:
  NSString v40 = String._bridgeToObjectiveC()();
  id v41 = [v80 dateFromString:v40];

  if (v41)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v42(v22, v31, v25);
    v39(v22, 0, 1, v25);
    int v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v22, 1, v25);
    unint64_t v44 = v58;
    if (v43 != 1)
    {
      v42(v82, v22, v25);
      goto LABEL_12;
    }
  }
  else
  {
    v39(v22, 1, 1, v25);
    unint64_t v44 = v58;
  }
  Date.init()();
  sub_100027994((uint64_t)v22);
LABEL_12:
  uint64_t v45 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v16, v66, v59);
  int v46 = (*(uint64_t (**)(char *, uint64_t))(v44 + 88))(v16, v45);
  if (v46 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
  {
    unint64_t v58 = static DeveloperTestMDLCredentialBuilder.payloadElements.getter();
  }
  else if (v46 == enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
  {
    unint64_t v47 = v54;
    DeveloperTestJapanNationalIDCardCredentialBuilder.init()();
    unint64_t v58 = DeveloperTestJapanNationalIDCardCredentialBuilder.payloadElements.getter();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v56);
  }
  else
  {
    unint64_t v58 = sub_10015D508((uint64_t)_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v45);
  }
  (*(void (**)(char *, void, uint64_t))(v60 + 104))(v81, enum case for CredentialBuilderPayloadFormat.ISO18013_5_1(_:), v62);
  uint64_t v66 = ISO18013KnownDocTypes.rawValue.getter();
  uint64_t v62 = v48;
  os_log_type_t v49 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  BOOL v50 = v61;
  id v57 = v33;
  v49(v61, v33, v25);
  v39(v50, 0, 1, v25);
  v49(v79, v82, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v65, v71, v64);
  uint64_t v51 = type metadata accessor for CredentialBuilderPayloadDetails.KeyAuthorizations();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v67, 1, 1, v51);
  (*(void (**)(char *, void, uint64_t))(v68 + 104))(v70, enum case for CredentialBuilderSignatureAlgorithm.ES256(_:), v69);
  (*(void (**)(char *, void, uint64_t))(v72 + 104))(v74, enum case for CredentialBuilderTimePolicy.notSpecified(_:), v73);
  (*(void (**)(char *, void, uint64_t))(v76 + 104))(v75, enum case for ISO18013DigestAlgorithm.sha256(_:), v77);
  CredentialBuilderPayloadDetails.init(format:docType:elements:validFrom:validUntil:timePolicy:deviceKey:deviceKeyAuthorizations:signingAlgorithm:digestAlgorithm:)();

  uint64_t v52 = *(void (**)(char *, uint64_t))(v26 + 8);
  v52(v82, v25);
  return ((uint64_t (*)(char *, uint64_t))v52)(v57, v25);
}

uint64_t sub_10043B6E0@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v101 = a6;
  uint64_t v108 = a5;
  v109._rawValue = a4;
  uint64_t v99 = a3;
  v113 = a1;
  uint64_t v90 = a7;
  uint64_t v103 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v107 = *(void *)(v103 - 8);
  uint64_t v8 = __chkstk_darwin(v103);
  v100 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  v98 = (char *)&v84 - v11;
  __chkstk_darwin(v10);
  uint64_t v97 = (char *)&v84 - v12;
  uint64_t v106 = sub_100007764(&qword_100720298);
  uint64_t v94 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  id v110 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for ProofingData(0);
  uint64_t v14 = __chkstk_darwin(v95);
  uint64_t v96 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v112 = (uint64_t)&v84 - v16;
  uint64_t v17 = type metadata accessor for AEADKey();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  long long v89 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v102 = (char *)&v84 - v21;
  uint64_t v22 = sub_100007764(&qword_100728588);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  v88 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v84 - v26;
  uint64_t v111 = type metadata accessor for Logger();
  uint64_t v114 = *(void *)(v111 - 8);
  uint64_t v28 = __chkstk_darwin(v111);
  v91 = (char *)&v84 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v84 - v31;
  __chkstk_darwin(v30);
  id v34 = (char *)&v84 - v33;
  uint64_t v35 = sub_100007764(&qword_100728590);
  uint64_t v36 = __chkstk_darwin(v35 - 8);
  uint64_t v87 = (uint64_t)&v84 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  id v39 = (char *)&v84 - v38;
  uint64_t v40 = sub_100007764(&qword_100728598);
  __chkstk_darwin(v40 - 8);
  uint64_t v104 = v23;
  uint64_t v105 = v22;
  uint64_t v42 = *(void (**)(void))(v23 + 56);
  uint64_t v116 = (uint64_t)&v84 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v86 = v42;
  v42();
  uint64_t v92 = v18;
  int v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  os_log_type_t v115 = v39;
  uint64_t v93 = v17;
  v43(v39, 1, 1, v17);
  unint64_t v85 = v32;
  if (a2)
  {
    uint64_t v84 = v43;
    defaultLogger()();
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      int v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "encrypt idv data with aead", v46, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v114 + 8))(v34, v111);
    sub_10000C728(v113, v113[3]);
    uint64_t v119 = a2;
    sub_100007764(&qword_1007285A0);
    sub_100263154(&qword_1007285A8, (void (*)(void))sub_100263100);
    sub_100263154(&qword_1007285B8, (void (*)(void))sub_1002631C4);
    unint64_t v47 = v102;
    uint64_t v48 = v117;
    dispatch thunk of HPKESuite.sealMessageAEAD<A>(message:)();
    uint64_t v49 = (uint64_t)v115;
    sub_10000C6CC((uint64_t)v115, &qword_100728590);
    uint64_t v50 = v116;
    uint64_t v117 = v48;
    if (v48) {
      goto LABEL_21;
    }
    sub_10000C6CC(v116, &qword_100728598);
    uint64_t v51 = v105;
    (*(void (**)(uint64_t, char *, uint64_t))(v104 + 32))(v50, v27, v105);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v86)(v50, 0, 1, v51);
    uint64_t v52 = v93;
    (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(v49, v47, v93);
    v84((char *)v49, 0, 1, v52);
    uint64_t v53 = v110;
    uint64_t v54 = v103;
  }
  else
  {
    uint64_t v53 = v110;
    uint64_t v54 = v103;
    uint64_t v50 = v116;
  }
  uint64_t v55 = v112;
  sub_100048D6C(v50, v112, &qword_100728598);
  *(void *)(v55 + *(int *)(v95 + 20)) = v99;
  uint64_t v56 = v107;
  id v57 = *(void (**)(void))(v107 + 16);
  v102 = (char *)(v107 + 16);
  unint64_t v86 = v57;
  ((void (*)(char *, uint64_t, uint64_t))v57)(v97, v108, v54);
  sub_10043C440(v55, v96);
  (*(void (**)(char *, void, uint64_t))(v56 + 104))(v98, enum case for EncryptedMessageEntity.device(_:), v54);
  sub_10043C4A4(&qword_100720320);
  sub_10043C4A4((unint64_t *)&unk_100720328);
  swift_bridgeObjectRetain();
  HPKEEncryptedMessageWithKeyWrap.init(sender:recipient:messages:)();
  uint64_t v59 = v104;
  uint64_t v58 = v105;
  int v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v50, 1, v105);
  uint64_t v61 = v100;
  uint64_t v62 = v114;
  if (!v60)
  {
    uint64_t v63 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v88, v116, v58);
    SealedMessage.keyID.getter();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v63, v58);
    uint64_t v64 = v87;
    sub_100048D6C((uint64_t)v115, v87, &qword_100728590);
    uint64_t v65 = v92;
    uint64_t v66 = v93;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v64, 1, v93) == 1)
    {
      swift_bridgeObjectRelease();
      sub_10000C6CC(v64, &qword_100728590);
      uint64_t v53 = v110;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v89, v64, v66);
      uint64_t v67 = v85;
      defaultLogger()();
      uint64_t v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "add idv data encryption key", v70, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v62 + 8))(v67, v111);
      uint64_t v71 = v89;
      uint64_t v72 = v110;
      HPKEEncryptedMessageWithKeyWrap.addMessageEncryptionKey(keyID:key:)();
      uint64_t v53 = v72;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v92 + 8))(v71, v93);
    }
    uint64_t v54 = v103;
  }
  uint64_t v73 = v106;
  if (v109._rawValue)
  {
    long long v74 = v91;
    defaultLogger()();
    ((void (*)(char *, uint64_t, uint64_t))v86)(v61, v108, v54);
    v75 = Logger.logObject.getter();
    uint64_t v76 = v54;
    os_log_type_t v77 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v75, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      uint64_t v119 = swift_slowAlloc();
      *(_DWORD *)uint64_t v78 = 136315138;
      uint64_t v79 = EncryptedMessageEntity.rawValue.getter();
      uint64_t v118 = sub_100110D58(v79, v80, &v119);
      uint64_t v73 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v61, v76);
      _os_log_impl((void *)&_mh_execute_header, v75, v77, "add uploaded data encryption keys to encryptedIDVData for %s", v78, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v53 = v110;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v111);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v107 + 8))(v61, v76);

      (*(void (**)(char *, uint64_t))(v62 + 8))(v74, v111);
    }
    HPKEEncryptedMessageWithKeyWrap.addMessageEncryptionKeys(keys:)(v109);
  }
  uint64_t v81 = v117;
  HPKEEncryptedMessageWithKeyWrap.sealKeys(to:encryptor:)();
  uint64_t v117 = v81;
  if (!v81)
  {
    sub_10043C4E8(v112);
    sub_10000C6CC((uint64_t)v115, &qword_100728590);
    (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v90, v53, v73);
    uint64_t v82 = v116;
    return sub_10000C6CC(v82, &qword_100728598);
  }
  (*(void (**)(char *, uint64_t))(v94 + 8))(v53, v73);
  sub_10043C4E8(v112);
  sub_10000C6CC((uint64_t)v115, &qword_100728590);
  uint64_t v50 = v116;
LABEL_21:
  uint64_t v82 = v50;
  return sub_10000C6CC(v82, &qword_100728598);
}

uint64_t type metadata accessor for TopekaHPKEEncryptor()
{
  return self;
}

uint64_t sub_10043C440(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ProofingData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10043C4A4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ProofingData(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10043C4E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ProofingData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10043C544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, unint64_t a11)
{
  uint64_t v66 = a1;
  uint64_t v72 = a2;
  uint64_t v73 = a5;
  uint64_t v71 = a4;
  uint64_t v67 = a3;
  unint64_t v75 = a11;
  uint64_t v76 = a7;
  uint64_t v74 = a10;
  uint64_t v79 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  os_log_type_t v69 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007764(&qword_100722DD0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v68 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DIPError.Code();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a6 >> 62))
  {
    uint64_t v27 = *(void *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v77 = a8;
    if (v27) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, void, uint64_t))(v24 + 104))(v26, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v23);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  unint64_t v77 = a8;
  if (!result) {
    goto LABEL_21;
  }
LABEL_3:
  uint64_t v64 = a9;
  if ((a6 & 0xC000000000000001) != 0)
  {
    id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v29 = *(id *)(a6 + 32);
  }
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  SecCertificateRef.expirationDate.getter();
  uint64_t v31 = v70;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v70) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC((uint64_t)v20, &qword_1007239B0);
    (*(void (**)(char *, void, uint64_t))(v24 + 104))(v26, enum case for DIPError.Code.documentReaderCertificateValidationFailed(_:), v23);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

LABEL_22:
    sub_10000C5E0(v74, v75);
    sub_100130188(v76, v77);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v73, v79);
  }
  uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v62(v68, v20, v31);
  uint64_t v32 = SecCertificateRef.pseudonym.getter();
  uint64_t v34 = v33;
  uint64_t v35 = countAndFlagsBits;
  SecCertificateRef.logotype.getter();
  uint64_t v63 = v34;
  uint64_t v60 = v32;
  if (v35)
  {
    swift_errorRelease();
    uint64_t v36 = type metadata accessor for Logotype();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v17, 1, 1, v36);
    BOOL v37 = 0;
  }
  else
  {
    uint64_t v38 = type metadata accessor for Logotype();
    BOOL v37 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v17, 1, v38) != 1
       && v34 != 0;
  }
  uint64_t v40 = v64;
  sub_10000C6CC((uint64_t)v17, &qword_100722DD0);
  uint64_t v41 = v78;
  uint64_t v42 = v73;
  uint64_t v43 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v69, v73, v79);
  Swift::String_optional v44 = SecCertificateRef.uid()();
  uint64_t countAndFlagsBits = v44.value._countAndFlagsBits;
  object = v44.value._object;

  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
  if (v37)
  {
    uint64_t v45 = v74;
    unint64_t v46 = v75;
    uint64_t v47 = v70;
    uint64_t v48 = v60;
  }
  else
  {
    sub_10000C5E0(v74, v75);
    swift_bridgeObjectRelease();
    uint64_t v48 = 0;
    uint64_t v63 = 0;
    uint64_t v45 = 0;
    unint64_t v46 = 0xF000000000000000;
    uint64_t v47 = v70;
  }
  uint64_t v49 = (int *)type metadata accessor for MobileDocumentReaderAuthenticationSession();
  v62(&v40[v49[12]], v68, v47);
  uint64_t v50 = v72;
  *(void *)uint64_t v40 = v66;
  *((void *)v40 + 1) = v50;
  uint64_t v51 = v71;
  *((void *)v40 + 2) = v67;
  *((void *)v40 + 3) = v51;
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v78 + 32))(&v40[v49[6]], v69, v79);
  *(void *)&v40[v49[7]] = a6;
  uint64_t v52 = &v40[v49[8]];
  unint64_t v53 = v77;
  *(void *)uint64_t v52 = v76;
  *((void *)v52 + 1) = v53;
  uint64_t v54 = (uint64_t *)&v40[v49[9]];
  uint64_t v55 = (uint64_t)object;
  *uint64_t v54 = countAndFlagsBits;
  v54[1] = v55;
  uint64_t v56 = (uint64_t *)&v40[v49[10]];
  *uint64_t v56 = v45;
  v56[1] = v46;
  id v57 = (uint64_t *)&v40[v49[11]];
  uint64_t v58 = v63;
  *id v57 = v48;
  v57[1] = v58;
  return result;
}

uint64_t type metadata accessor for MobileDocumentReaderAuthenticationSession()
{
  uint64_t result = qword_10072E6B0;
  if (!qword_10072E6B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_10043CD1C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = *(uint64_t *)((char *)a2 + v14);
    unint64_t v17 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain();
    sub_100184A0C(v16, v17);
    *uint64_t v15 = v16;
    v15[1] = v17;
    uint64_t v18 = a3[9];
    uint64_t v19 = a3[10];
    uint64_t v20 = (uint64_t *)((char *)v4 + v18);
    uint64_t v21 = (uint64_t *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (char *)v4 + v19;
    uint64_t v24 = (_OWORD *)((char *)a2 + v19);
    unint64_t v25 = *(uint64_t *)((char *)a2 + v19 + 8);
    swift_bridgeObjectRetain();
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v23 = *v24;
    }
    else
    {
      uint64_t v27 = *(void *)v24;
      sub_10002CEB0(v27, v25);
      *(void *)uint64_t v23 = v27;
      *((void *)v23 + 1) = v25;
    }
    uint64_t v28 = a3[11];
    uint64_t v29 = a3[12];
    uint64_t v30 = (uint64_t *)((char *)v4 + v28);
    uint64_t v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = (char *)v4 + v29;
    uint64_t v34 = (char *)a2 + v29;
    uint64_t v35 = type metadata accessor for Date();
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16);
    swift_bridgeObjectRetain();
    v36(v33, v34, v35);
  }
  return v4;
}

uint64_t sub_10043CF04(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  sub_100130188(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(a1 + a2[10]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10000C5F4(*v6, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[12];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

void *sub_10043D028(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = *(void *)((char *)a2 + v13);
  unint64_t v16 = *(void *)((char *)a2 + v13 + 8);
  swift_bridgeObjectRetain();
  sub_100184A0C(v15, v16);
  *uint64_t v14 = v15;
  v14[1] = v16;
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = (void *)((char *)a1 + v17);
  uint64_t v20 = (void *)((char *)a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (char *)a1 + v18;
  uint64_t v23 = (_OWORD *)((char *)a2 + v18);
  unint64_t v24 = *(void *)((char *)a2 + v18 + 8);
  swift_bridgeObjectRetain();
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v22 = *v23;
  }
  else
  {
    uint64_t v25 = *(void *)v23;
    sub_10002CEB0(v25, v24);
    *(void *)uint64_t v22 = v25;
    *((void *)v22 + 1) = v24;
  }
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = (void *)((char *)a1 + v26);
  uint64_t v29 = (void *)((char *)a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = (char *)a1 + v27;
  uint64_t v32 = (char *)a2 + v27;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
  swift_bridgeObjectRetain();
  v34(v31, v32, v33);
  return a1;
}

void *sub_10043D1C0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_100184A0C(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_100130188(v15, v16);
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  unint64_t v23 = *(void *)((char *)a2 + v20 + 8);
  if (*(void *)((char *)a1 + v20 + 8) >> 60 != 15)
  {
    if (v23 >> 60 != 15)
    {
      uint64_t v25 = *v22;
      sub_10002CEB0(v25, v23);
      uint64_t v26 = *v21;
      unint64_t v27 = v21[1];
      *uint64_t v21 = v25;
      v21[1] = v23;
      sub_10000C5F4(v26, v27);
      goto LABEL_8;
    }
    sub_10004D25C((uint64_t)v21);
    goto LABEL_6;
  }
  if (v23 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    goto LABEL_8;
  }
  uint64_t v24 = *v22;
  sub_10002CEB0(v24, v23);
  *uint64_t v21 = v24;
  v21[1] = v23;
LABEL_8:
  uint64_t v28 = a3[11];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[12];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24))(v32, v33, v34);
  return a1;
}

_OWORD *sub_10043D3E8(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  uint64_t v13 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  unint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

void *sub_10043D4EC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[8];
  uint64_t v13 = *(void *)((char *)a1 + v12);
  unint64_t v14 = *(void *)((char *)a1 + v12 + 8);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  sub_100130188(v13, v14);
  uint64_t v15 = a3[9];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  unint64_t v23 = *(void *)((char *)a1 + v20 + 8);
  if (v23 >> 60 != 15)
  {
    unint64_t v24 = v22[1];
    if (v24 >> 60 != 15)
    {
      uint64_t v25 = *v21;
      *uint64_t v21 = *v22;
      v21[1] = v24;
      sub_10000C5F4(v25, v23);
      goto LABEL_6;
    }
    sub_10004D25C((uint64_t)v21);
  }
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
LABEL_6:
  uint64_t v26 = a3[11];
  unint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *unint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[12];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 40))(v32, v33, v34);
  return a1;
}

uint64_t sub_10043D68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10043D6A0);
}

uint64_t sub_10043D6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for Date();
      unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 48);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10043D7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10043D7E0);
}

uint64_t sub_10043D7E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for Date();
      unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 48);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_10043D90C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MobileDocumentReaderAuthenticationSession.Key(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100184A0C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

void destroy for MobileDocumentReaderAuthenticationSession.Key(uint64_t a1)
{
}

uint64_t *assignWithCopy for MobileDocumentReaderAuthenticationSession.Key(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100184A0C(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100130188(v5, v6);
  return a1;
}

uint64_t *assignWithTake for MobileDocumentReaderAuthenticationSession.Key(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100130188(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MobileDocumentReaderAuthenticationSession.Key(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MobileDocumentReaderAuthenticationSession.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_10043DB78(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_10043DB84(uint64_t result)
{
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_10043DB94(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for MobileDocumentReaderAuthenticationSession.Key()
{
  return &type metadata for MobileDocumentReaderAuthenticationSession.Key;
}

uint64_t sub_10043DBC0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v25 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v25 - v12;
  defaultLogger()();
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Checking if Wallet was deleted", v16, 2u);
    swift_slowDealloc();
  }

  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v13, v4);
  if (sub_10020F0CC(*(void *)(v2 + 24), *(void *)(v2 + 32), a1))
  {
    defaultLogger()();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Wallet has been deleted, will clear all the proofing sessions locally", v20, 2u);
      swift_slowDealloc();
    }

    v17(v11, v4);
    swift_retain();
    sub_100430684();
    return swift_release();
  }
  else
  {
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Wallet not deleted. Moving on...", v24, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(char *, uint64_t))v17)(v8, v4);
  }
}

uint64_t sub_10043DE90()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingWalletDeletionManager()
{
  return self;
}

unint64_t sub_10043DEF4()
{
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (!v0.value._object)
  {
    unsigned int v3 = _swiftEmptyArrayStorage;
LABEL_20:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  unint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
  object = v0.value._object;
  unsigned int v3 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (countAndFlagsBits == 2573 && object == (void *)0xE200000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v6) = 10;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_14;
      }
      goto LABEL_18;
    }
    if (Character._isSingleScalar.getter())
    {
      unint64_t result = sub_10043F848(countAndFlagsBits, (unint64_t)object);
      if ((result & 0x100000000) != 0) {
        goto LABEL_22;
      }
      if ((result & 0xFFFFFF80) == 0) {
        break;
      }
    }
    swift_bridgeObjectRelease();
LABEL_4:
    Swift::String_optional v4 = String.Iterator.next()();
    unint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
    object = v4.value._object;
    if (!v4.value._object) {
      goto LABEL_20;
    }
  }
  unint64_t result = sub_10043F848(countAndFlagsBits, (unint64_t)object);
  if ((result & 0x100000000) != 0) {
    goto LABEL_23;
  }
  int v6 = result;
  unint64_t result = swift_bridgeObjectRelease();
  if ((v6 & 0xFFFFFF00) == 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_14:
      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1) {
        unsigned int v3 = sub_10010F508((void *)(v7 > 1), v8 + 1, 1, v3);
      }
      v3[2] = v8 + 1;
      *((unsigned char *)v3 + v8 + 32) = v6;
      goto LABEL_4;
    }
LABEL_18:
    unsigned int v3 = sub_10010F508(0, v3[2] + 1, 1, v3);
    goto LABEL_14;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10043E0AC(size_t a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = sub_10027E1B4(0, a1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v6 = sub_10010F508(0, v6[2], 0, v6);
  }
  int v7 = SecRandomCopyBytes(kSecRandomDefault, a1, v6 + 4);
  if (v7)
  {
    int v8 = v7;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.systemSecError(_:), v2);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v9 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v10 = (*(unsigned __int8 *)(*(void *)v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v9 + 80);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_100610730;
    unint64_t v12 = v11 + v10;
    unint64_t v13 = v12 + v9[14];
    uint64_t v14 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v15 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v12, v14, v15);
    *(void *)(v13 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v13 = v8;
    sub_10015C504(v11);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  else
  {
    uint64_t v17 = sub_10014D4E0((uint64_t)v6);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = Data.base16EncodedString()()._countAndFlagsBits;
    sub_10000C5F4(v17, v19);
    return countAndFlagsBits;
  }
}

uint64_t sub_10043E3CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10043F1C0(a1, a2, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    uint64_t v35 = a1;
    uint64_t v36 = v6;
    uint64_t v38 = v15;
    id v39 = a3;
    uint64_t v37 = v16;
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v20(v18, v14, v15);
    uint64_t v21 = URL.host.getter();
    if (v22)
    {
      BOOL v23 = v21 == 0x6F632E656C707061 && v22 == 0xE90000000000006DLL;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
LABEL_10:
        uint64_t v15 = v38;
        a3 = v39;
        v20(v39, v18, v38);
        uint64_t v19 = 0;
        uint64_t v16 = v37;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(a3, v19, 1, v15);
      }
      v29._uint64_t countAndFlagsBits = 0x632E656C7070612ELL;
      v29._object = (void *)0xEA00000000006D6FLL;
      Swift::Bool v30 = String.hasSuffix(_:)(v29);
      swift_bridgeObjectRelease();
      if (v30) {
        goto LABEL_10;
      }
      uint64_t v31 = v11;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v41 = sub_100110D58(v35, a2, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "URL %{public}s is not an Apple url", v34, 0xCu);
        uint64_t v19 = 1;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v36);
        uint64_t v16 = v37;
        uint64_t v15 = v38;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v38);
        goto LABEL_15;
      }
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v36);
    }
    else
    {
      unint64_t v24 = v9;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)unint64_t v27 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v41 = sub_100110D58(v35, a2, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "URL %{public}s is not a valid HTTPS URL because it does not have a host", v27, 0xCu);
        uint64_t v19 = 1;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v40 + 8))(v24, v36);
        uint64_t v16 = v37;
        uint64_t v15 = v38;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v38);
LABEL_15:
        a3 = v39;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(a3, v19, 1, v15);
      }
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v40 + 8))(v24, v36);
    }
    uint64_t v16 = v37;
    uint64_t v15 = v38;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v38);
    uint64_t v19 = 1;
    goto LABEL_15;
  }
  sub_100106158((uint64_t)v14);
  uint64_t v19 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(a3, v19, 1, v15);
}

uint64_t sub_10043E9FC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v53 - v9;
  uint64_t v61 = -1;
  if (String.count.getter() != 2)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      BOOL v23 = (uint8_t *)swift_slowAlloc();
      v60[0] = swift_slowAlloc();
      uint64_t v58 = v4;
      *(_DWORD *)BOOL v23 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_100110D58(a1, a2, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to convert country code %{public}s to ASCII due to invalid length.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v58);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
LABEL_62:
    swift_beginAccess();
    return v61;
  }
  uint64_t v55 = v5;
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_10043DEF4();
  unint64_t v57 = a2;
  swift_bridgeObjectRelease();
  int64_t v12 = *(void *)(v11 + 16);
  uint64_t v56 = v10;
  if (v12)
  {
    uint64_t v53 = 0;
    uint64_t v54 = a1;
    uint64_t v58 = v4;
    v60[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_10011144C(0, v12, 0);
    uint64_t v13 = 0;
    uint64_t v14 = (void *)v60[0];
    do
    {
      LOBYTE(v59) = *(unsigned char *)(v11 + v13 + 32);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v17 = v16;
      v60[0] = (uint64_t)v14;
      unint64_t v19 = v14[2];
      unint64_t v18 = v14[3];
      if (v19 >= v18 >> 1)
      {
        sub_10011144C(v18 > 1, v19 + 1, 1);
        uint64_t v14 = (void *)v60[0];
      }
      ++v13;
      v14[2] = v19 + 1;
      uint64_t v20 = &v14[2 * v19];
      v20[4] = v15;
      v20[5] = v17;
    }
    while (v12 != v13);
    swift_bridgeObjectRelease();
    uint64_t v4 = v58;
    a1 = v54;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  v60[0] = (uint64_t)v14;
  sub_100007764(&qword_1007268F0);
  sub_1001061E4();
  uint64_t v24 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v26 = v25;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v28 = HIBYTE(v26) & 0xF;
  uint64_t v29 = v24 & 0xFFFFFFFFFFFFLL;
  if ((v26 & 0x2000000000000000) != 0) {
    uint64_t v30 = HIBYTE(v26) & 0xF;
  }
  else {
    uint64_t v30 = v24 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v31 = v57;
  if (!v30)
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = -1;
    uint64_t v32 = v56;
    goto LABEL_58;
  }
  uint64_t v32 = v56;
  if ((v26 & 0x1000000000000000) != 0)
  {
    uint64_t v34 = (uint64_t)sub_1005D7B64(v24, v26, 10);
    LOBYTE(v24) = v52;
LABEL_55:
    swift_bridgeObjectRelease();
    if (v24) {
      uint64_t v45 = -1;
    }
    else {
      uint64_t v45 = v34;
    }
LABEL_58:
    uint64_t v61 = v45;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      v60[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_100110D58(a1, v31, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v48 + 12) = 2048;
      uint64_t v59 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Converted country code: %{public}s to ASCII value: %ld", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v4);
    goto LABEL_62;
  }
  if ((v26 & 0x2000000000000000) == 0)
  {
    if ((v24 & 0x1000000000000000) != 0) {
      os_log_type_t v33 = (unsigned __int8 *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      os_log_type_t v33 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v34 = (uint64_t)sub_1005D7B4C(v33, v29, 10);
    LOBYTE(v24) = v35 & 1;
    goto LABEL_55;
  }
  v60[0] = v24;
  v60[1] = v26 & 0xFFFFFFFFFFFFFFLL;
  if (v24 == 43)
  {
    if (!v28) {
      goto LABEL_73;
    }
    if (v28 == 1 || (BYTE1(v24) - 48) > 9u) {
      goto LABEL_42;
    }
    uint64_t v34 = (BYTE1(v24) - 48);
    if (v28 != 2)
    {
      if ((BYTE2(v24) - 48) > 9u) {
        goto LABEL_42;
      }
      uint64_t v34 = 10 * (BYTE1(v24) - 48) + (BYTE2(v24) - 48);
      uint64_t v36 = v28 - 3;
      if (v36)
      {
        uint64_t v37 = (unsigned __int8 *)v60 + 3;
        while (1)
        {
          unsigned int v38 = *v37 - 48;
          if (v38 > 9) {
            goto LABEL_42;
          }
          uint64_t v39 = 10 * v34;
          if ((unsigned __int128)(v34 * (__int128)10) >> 64 != (10 * v34) >> 63) {
            goto LABEL_42;
          }
          uint64_t v34 = v39 + v38;
          if (__OFADD__(v39, v38)) {
            goto LABEL_42;
          }
          LOBYTE(v24) = 0;
          ++v37;
          if (!--v36) {
            goto LABEL_55;
          }
        }
      }
    }
LABEL_54:
    LOBYTE(v24) = 0;
    goto LABEL_55;
  }
  if (v24 != 45)
  {
    if (!v28 || (v24 - 48) > 9u) {
      goto LABEL_42;
    }
    uint64_t v34 = (v24 - 48);
    if (v28 != 1)
    {
      if ((BYTE1(v24) - 48) > 9u) {
        goto LABEL_42;
      }
      uint64_t v34 = 10 * (v24 - 48) + (BYTE1(v24) - 48);
      uint64_t v40 = v28 - 2;
      if (v40)
      {
        uint64_t v41 = (unsigned __int8 *)v60 + 2;
        while (1)
        {
          unsigned int v42 = *v41 - 48;
          if (v42 > 9) {
            goto LABEL_42;
          }
          uint64_t v43 = 10 * v34;
          if ((unsigned __int128)(v34 * (__int128)10) >> 64 != (10 * v34) >> 63) {
            goto LABEL_42;
          }
          uint64_t v34 = v43 + v42;
          if (__OFADD__(v43, v42)) {
            goto LABEL_42;
          }
          LOBYTE(v24) = 0;
          ++v41;
          if (!--v40) {
            goto LABEL_55;
          }
        }
      }
    }
    goto LABEL_54;
  }
  if (v28)
  {
    if (v28 != 1 && (BYTE1(v24) - 48) <= 9u)
    {
      if (v28 == 2)
      {
        LOBYTE(v24) = 0;
        uint64_t v34 = -(uint64_t)(BYTE1(v24) - 48);
        goto LABEL_55;
      }
      if ((BYTE2(v24) - 48) <= 9u)
      {
        uint64_t v34 = -10 * (BYTE1(v24) - 48) - (BYTE2(v24) - 48);
        uint64_t v44 = v28 - 3;
        if (!v44) {
          goto LABEL_54;
        }
        uint64_t v49 = (unsigned __int8 *)v60 + 3;
        while (1)
        {
          unsigned int v50 = *v49 - 48;
          if (v50 > 9) {
            break;
          }
          uint64_t v51 = 10 * v34;
          if ((unsigned __int128)(v34 * (__int128)10) >> 64 != (10 * v34) >> 63) {
            break;
          }
          uint64_t v34 = v51 - v50;
          if (__OFSUB__(v51, v50)) {
            break;
          }
          LOBYTE(v24) = 0;
          ++v49;
          if (!--v44) {
            goto LABEL_55;
          }
        }
      }
    }
LABEL_42:
    uint64_t v34 = 0;
    LOBYTE(v24) = 1;
    goto LABEL_55;
  }
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

uint64_t sub_10043F1C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  int64_t v12 = (char *)v41 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v41 - v13;
  uint64_t v15 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v22 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22)
  {
    defaultLogger()();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "URL is not a valid HTTPS URL because it is an empty string", v30, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v45);
    goto LABEL_19;
  }
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100106158((uint64_t)v17);
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    BOOL v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v43 = a3;
      uint64_t v47 = v26;
      *(_DWORD *)unint64_t v25 = 136446210;
      uint64_t v42 = (uint64_t)(v25 + 4);
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_100110D58(a1, a2, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "URL %{public}s is not a valid HTTPS URL because it is not a url", v25, 0xCu);
      uint64_t v27 = 1;
      swift_arrayDestroy();
      a3 = v43;
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, v27, 1, v18);
    }

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
LABEL_19:
    uint64_t v27 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, v27, 1, v18);
  }
  uint64_t v43 = a3;
  unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v31(v21, v17, v18);
  uint64_t v32 = URL.scheme.getter();
  if (v33)
  {
    if (v32 == 0x7370747468 && v33 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0) {
        goto LABEL_16;
      }
    }
    uint64_t v39 = v43;
    v31(v43, v21, v18);
    a3 = v39;
    uint64_t v27 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, v27, 1, v18);
  }
LABEL_16:
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    unsigned int v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    uint64_t v47 = v42;
    *(_DWORD *)unsigned int v38 = 136446210;
    v41[1] = v38 + 4;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_100110D58(a1, a2, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "URL %{public}s is not a valid HTTPS URL because it does not have the https scheme", v38, 0xCu);
    uint64_t v27 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v45);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v45);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    uint64_t v27 = 1;
  }
  a3 = v43;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, v27, 1, v18);
}

unint64_t sub_10043F848(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_10043F928(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t sub_10043F928(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = sub_10043F9C8(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_10043FA38(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_10043F9C8(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = sub_100111260(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_10043FA38(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }
  return result;
}

uint64_t type metadata accessor for IdentityProofingImageQualityMetricsProvider()
{
  return self;
}

uint64_t sub_10043FB80@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = dispatch thunk of ImageQualityMetrics.originalVertices.getter();
  if (!v2)
  {
    unint64_t v7 = 0;
    goto LABEL_16;
  }
  unint64_t v3 = v2;
  if (v2 >> 62)
  {
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    unint64_t v7 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t result = sub_100111640(0, v4 & ~(v4 >> 63), 0);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_84;
  }
  uint64_t v6 = 0;
  unint64_t v7 = _swiftEmptyArrayStorage;
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v3 + 8 * v6 + 32);
    }
    uint64_t v9 = v8;
    dispatch thunk of IQPoint.x.getter();
    unsigned int v160 = v10;
    dispatch thunk of IQPoint.y.getter();
    unsigned int v155 = v11;

    v215 = _swiftEmptyArrayStorage;
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1) {
      sub_100111640(v12 > 1, v13 + 1, 1);
    }
    ++v6;
    _swiftEmptyArrayStorage[2] = v13 + 1;
    *(float64x2_t *)&_swiftEmptyArrayStorage[2 * v13 + 4] = vcvtq_f64_f32((float32x2_t)__PAIR64__(v155, v160));
  }
  while (v4 != v6);
  swift_bridgeObjectRelease();
LABEL_16:
  unint64_t v14 = dispatch thunk of ImageQualityMetrics.targetVertices.getter();
  if (!v14)
  {
    uint64_t v18 = 0;
    goto LABEL_31;
  }
  unint64_t v15 = v14;
  if (!(v14 >> 62))
  {
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_19;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_31;
  }
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  if (!v16) {
    goto LABEL_30;
  }
LABEL_19:
  uint64_t result = sub_100111640(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  uint64_t v17 = 0;
  uint64_t v18 = _swiftEmptyArrayStorage;
  do
  {
    if ((v15 & 0xC000000000000001) != 0) {
      id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v19 = *(id *)(v15 + 8 * v17 + 32);
    }
    uint64_t v20 = v19;
    dispatch thunk of IQPoint.x.getter();
    unsigned int v161 = v21;
    dispatch thunk of IQPoint.y.getter();
    unsigned int v156 = v22;

    v215 = _swiftEmptyArrayStorage;
    unint64_t v24 = _swiftEmptyArrayStorage[2];
    unint64_t v23 = _swiftEmptyArrayStorage[3];
    if (v24 >= v23 >> 1) {
      sub_100111640(v23 > 1, v24 + 1, 1);
    }
    ++v17;
    _swiftEmptyArrayStorage[2] = v24 + 1;
    *(float64x2_t *)&_swiftEmptyArrayStorage[2 * v24 + 4] = vcvtq_f64_f32((float32x2_t)__PAIR64__(v156, v161));
  }
  while (v16 != v17);
  swift_bridgeObjectRelease();
LABEL_31:
  unint64_t v25 = dispatch thunk of ImageQualityMetrics.rectangleCorners.getter();
  v153 = v18;
  if (!v25)
  {
    os_log_type_t v29 = 0;
    goto LABEL_46;
  }
  unint64_t v26 = v25;
  if (!(v25 >> 62))
  {
    uint64_t v27 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v27) {
      goto LABEL_34;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    os_log_type_t v29 = _swiftEmptyArrayStorage;
    goto LABEL_46;
  }
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  if (!v27) {
    goto LABEL_45;
  }
LABEL_34:
  uint64_t result = sub_100111640(0, v27 & ~(v27 >> 63), 0);
  if (v27 < 0)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v28 = 0;
  os_log_type_t v29 = _swiftEmptyArrayStorage;
  do
  {
    if ((v26 & 0xC000000000000001) != 0) {
      id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v30 = *(id *)(v26 + 8 * v28 + 32);
    }
    unint64_t v31 = v30;
    dispatch thunk of IQPoint.x.getter();
    unsigned int v162 = v32;
    dispatch thunk of IQPoint.y.getter();
    unsigned int v157 = v33;

    v215 = _swiftEmptyArrayStorage;
    unint64_t v35 = _swiftEmptyArrayStorage[2];
    unint64_t v34 = _swiftEmptyArrayStorage[3];
    if (v35 >= v34 >> 1) {
      sub_100111640(v34 > 1, v35 + 1, 1);
    }
    ++v28;
    _swiftEmptyArrayStorage[2] = v35 + 1;
    *(float64x2_t *)&_swiftEmptyArrayStorage[2 * v35 + 4] = vcvtq_f64_f32((float32x2_t)__PAIR64__(v157, v162));
    uint64_t v18 = v153;
  }
  while (v27 != v28);
  swift_bridgeObjectRelease();
LABEL_46:
  unint64_t v36 = dispatch thunk of ImageQualityMetrics.documentCorners.getter();
  if (v36)
  {
    unint64_t v37 = v36;
    if (v36 >> 62)
    {
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      if (v38)
      {
LABEL_49:
        uint64_t result = sub_100111640(0, v38 & ~(v38 >> 63), 0);
        if ((v38 & 0x8000000000000000) == 0)
        {
          v150 = v29;
          uint64_t v39 = 0;
          uint64_t v40 = _swiftEmptyArrayStorage;
          uint64_t v41 = v7;
          do
          {
            if ((v37 & 0xC000000000000001) != 0) {
              id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v42 = *(id *)(v37 + 8 * v39 + 32);
            }
            uint64_t v43 = v42;
            dispatch thunk of IQPoint.x.getter();
            unsigned int v163 = v44;
            dispatch thunk of IQPoint.y.getter();
            unsigned int v158 = v45;

            v215 = _swiftEmptyArrayStorage;
            unint64_t v47 = _swiftEmptyArrayStorage[2];
            unint64_t v46 = _swiftEmptyArrayStorage[3];
            if (v47 >= v46 >> 1) {
              sub_100111640(v46 > 1, v47 + 1, 1);
            }
            ++v39;
            _swiftEmptyArrayStorage[2] = v47 + 1;
            *(float64x2_t *)&_swiftEmptyArrayStorage[2 * v47 + 4] = vcvtq_f64_f32((float32x2_t)__PAIR64__(v158, v163));
          }
          while (v38 != v39);
          unint64_t v7 = v41;
          swift_bridgeObjectRelease();
          uint64_t v18 = v153;
          os_log_type_t v29 = v150;
          goto LABEL_61;
        }
LABEL_86:
        __break(1u);
        return result;
      }
    }
    else
    {
      uint64_t v38 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v38) {
        goto LABEL_49;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v40 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v40 = 0;
  }
LABEL_61:
  uint64_t matched = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter();
  if (matched)
  {
    uint64_t v49 = (void *)matched;
    uint64_t v112 = dispatch thunk of FuzzyMatchAssessment.firstName.getter();
    char v51 = v50;

    uint64_t v52 = v51 & 1;
  }
  else
  {
    uint64_t v112 = 0;
    uint64_t v52 = 1;
  }
  uint64_t v111 = v52;
  uint64_t v53 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter();
  if (v53)
  {
    uint64_t v54 = (void *)v53;
    uint64_t v110 = dispatch thunk of FuzzyMatchAssessment.lastName.getter();
    char v56 = v55;

    uint64_t v57 = v56 & 1;
  }
  else
  {
    uint64_t v110 = 0;
    uint64_t v57 = 1;
  }
  uint64_t v109 = v57;
  uint64_t v58 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter();
  if (v58)
  {
    uint64_t v59 = (void *)v58;
    uint64_t v108 = dispatch thunk of FuzzyMatchAssessment.state.getter();
    char v61 = v60;

    uint64_t v62 = v61 & 1;
  }
  else
  {
    uint64_t v108 = 0;
    uint64_t v62 = 1;
  }
  uint64_t v107 = v62;
  uint64_t v63 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter();
  if (v63)
  {
    uint64_t v64 = (void *)v63;
    uint64_t v106 = dispatch thunk of FuzzyMatchAssessment.houseNumber.getter();
    char v66 = v65;

    uint64_t v67 = v66 & 1;
  }
  else
  {
    uint64_t v106 = 0;
    uint64_t v67 = 1;
  }
  uint64_t v105 = v67;
  uint64_t v68 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter();
  if (v68)
  {
    os_log_type_t v69 = (void *)v68;
    uint64_t v104 = dispatch thunk of FuzzyMatchAssessment.street.getter();
    char v71 = v70;

    uint64_t v72 = v71 & 1;
  }
  else
  {
    uint64_t v104 = 0;
    uint64_t v72 = 1;
  }
  uint64_t v103 = v72;
  uint64_t v73 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter();
  if (v73)
  {
    uint64_t v74 = (void *)v73;
    uint64_t v102 = dispatch thunk of FuzzyMatchAssessment.dob.getter();
    char v76 = v75;

    uint64_t v77 = v76 & 1;
  }
  else
  {
    uint64_t v102 = 0;
    uint64_t v77 = 1;
  }
  uint64_t v101 = v77;
  uint64_t v78 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter();
  if (v78)
  {
    uint64_t v79 = (void *)v78;
    uint64_t v100 = dispatch thunk of FuzzyMatchAssessment.postalCode.getter();
    char v81 = v80;

    char v82 = v81 & 1;
  }
  else
  {
    uint64_t v100 = 0;
    char v82 = 1;
  }
  char v99 = v82;
  uint64_t v154 = dispatch thunk of ImageQualityMetrics.blurriness.getter();
  uint64_t v152 = dispatch thunk of ImageQualityMetrics.exposure.getter();
  uint64_t v151 = dispatch thunk of ImageQualityMetrics.cardDistortion.getter();
  uint64_t v149 = dispatch thunk of ImageQualityMetrics.faceToImageRatio.getter();
  uint64_t v148 = dispatch thunk of ImageQualityMetrics.faceCenteredRatio.getter();
  uint64_t v147 = dispatch thunk of ImageQualityMetrics.headPitch.getter();
  uint64_t v146 = dispatch thunk of ImageQualityMetrics.headRoll.getter();
  uint64_t v131 = dispatch thunk of ImageQualityMetrics.headYaw.getter();
  uint64_t v132 = dispatch thunk of ImageQualityMetrics.blinkingConfidence.getter();
  uint64_t v133 = dispatch thunk of ImageQualityMetrics.prescriptionConfidence.getter();
  uint64_t v134 = dispatch thunk of ImageQualityMetrics.sunglassesConfidence.getter();
  uint64_t v135 = dispatch thunk of ImageQualityMetrics.facemaskConfidence.getter();
  uint64_t v136 = dispatch thunk of ImageQualityMetrics.headgearConfidence.getter();
  uint64_t v137 = dispatch thunk of ImageQualityMetrics.captureTime.getter();
  uint64_t v138 = dispatch thunk of ImageQualityMetrics.faceCaptureQuality.getter();
  uint64_t v139 = dispatch thunk of ImageQualityMetrics.documentSize.getter();
  uint64_t v140 = dispatch thunk of ImageQualityMetrics.documentRotation.getter();
  uint64_t v141 = dispatch thunk of ImageQualityMetrics.documentSkew.getter();
  uint64_t v142 = dispatch thunk of ImageQualityMetrics.leftDrift.getter();
  uint64_t v143 = dispatch thunk of ImageQualityMetrics.rightDrift.getter();
  uint64_t v144 = dispatch thunk of ImageQualityMetrics.upDrift.getter();
  uint64_t v145 = dispatch thunk of ImageQualityMetrics.downDrift.getter();
  uint64_t v127 = dispatch thunk of ImageQualityMetrics.faceConfidences.getter();
  uint64_t v126 = dispatch thunk of ImageQualityMetrics.headgearConfidences.getter();
  uint64_t v125 = dispatch thunk of ImageQualityMetrics.numFaces.getter();
  char v130 = v83;
  uint64_t v124 = dispatch thunk of ImageQualityMetrics.luxLevel.getter();
  char v129 = v84;
  char v123 = dispatch thunk of ImageQualityMetrics.pdf417Detected.getter();
  char v122 = dispatch thunk of ImageQualityMetrics.isAAMVACompliant.getter();
  char v121 = dispatch thunk of ImageQualityMetrics.isAutoCaptured.getter();
  char v120 = dispatch thunk of ImageQualityMetrics.isFlashEnabled.getter();
  uint64_t v85 = dispatch thunk of ImageQualityMetrics.issuerNumber.getter();
  uint64_t v118 = v86;
  uint64_t v119 = v85;
  uint64_t v87 = dispatch thunk of ImageQualityMetrics.documentType.getter();
  uint64_t v115 = v88;
  uint64_t v116 = v87;
  uint64_t v117 = dispatch thunk of ImageQualityMetrics.closestMatchAssessments.getter();
  uint64_t v89 = dispatch thunk of ImageQualityMetrics.modelDecision.getter();
  uint64_t v113 = v90;
  uint64_t v114 = v89;
  uint64_t v91 = dispatch thunk of ImageQualityMetrics.modelVersion.getter();
  uint64_t v93 = v92;
  char v94 = dispatch thunk of ImageQualityMetrics.exploration.getter();
  uint64_t v95 = dispatch thunk of ImageQualityMetrics.rescanCount.getter();
  char v128 = v96;
  uint64_t v164 = dispatch thunk of ImageQualityMetrics.livenessChute.getter();
  uint64_t v159 = v97;
  uint64_t result = dispatch thunk of ImageQualityMetrics.errorCode.getter();
  *(void *)(a1 + 176) = v127;
  *(void *)(a1 + 184) = v126;
  *(void *)(a1 + 192) = v125;
  *(void *)(a1 + 208) = v124;
  *(unsigned char *)(a1 + 217) = v123;
  *(unsigned char *)(a1 + 218) = v122;
  *(unsigned char *)(a1 + 219) = v121;
  *(unsigned char *)(a1 + 220) = v120;
  *(void *)(a1 + 224) = v119;
  *(void *)(a1 + 232) = v118;
  *(void *)(a1 + 240) = v116;
  *(void *)(a1 + 248) = v115;
  *(void *)(a1 + 256) = v7;
  *(void *)(a1 + 264) = v18;
  *(void *)(a1 + 272) = v29;
  *(void *)(a1 + 280) = v40;
  *(void *)(a1 + 288) = v112;
  *(void *)(a1 + 296) = v111;
  *(void *)(a1 + 304) = v110;
  *(void *)(a1 + 312) = v109;
  *(void *)(a1 + 320) = v108;
  *(void *)(a1 + 328) = v107;
  *(void *)(a1 + 336) = v106;
  *(void *)(a1 + 344) = v105;
  *(void *)(a1 + 352) = v104;
  *(void *)(a1 + 360) = v103;
  *(void *)(a1 + 368) = v102;
  *(void *)(a1 + 376) = v101;
  *(void *)(a1 + 384) = v100;
  *(unsigned char *)(a1 + 392) = v99;
  *(void *)(a1 + 400) = v117;
  *(void *)(a1 + 408) = v114;
  *(void *)(a1 + 416) = v113;
  *(void *)(a1 + 424) = v91;
  *(void *)(a1 + 432) = v93;
  *(unsigned char *)(a1 + 440) = v94;
  *(void *)(a1 + 448) = v95;
  *(_DWORD *)a1 = v154;
  *(unsigned char *)(a1 + 4) = BYTE4(v154) & 1;
  *(_WORD *)(a1 + 5) = v213;
  *(unsigned char *)(a1 + 7) = v214;
  *(_DWORD *)(a1 + 8) = v152;
  *(unsigned char *)(a1 + 12) = BYTE4(v152) & 1;
  *(_WORD *)(a1 + 13) = v211;
  *(unsigned char *)(a1 + 15) = v212;
  *(_DWORD *)(a1 + 16) = v151;
  *(unsigned char *)(a1 + 20) = BYTE4(v151) & 1;
  *(_WORD *)(a1 + 21) = v209;
  *(unsigned char *)(a1 + 23) = v210;
  *(_DWORD *)(a1 + 24) = v149;
  *(unsigned char *)(a1 + 28) = BYTE4(v149) & 1;
  *(unsigned char *)(a1 + 31) = v208;
  *(_WORD *)(a1 + 29) = v207;
  *(_DWORD *)(a1 + 32) = v148;
  *(unsigned char *)(a1 + 36) = BYTE4(v148) & 1;
  *(unsigned char *)(a1 + 39) = v206;
  *(_WORD *)(a1 + 37) = v205;
  *(_DWORD *)(a1 + 40) = v147;
  *(unsigned char *)(a1 + 44) = BYTE4(v147) & 1;
  *(unsigned char *)(a1 + 47) = v204;
  *(_WORD *)(a1 + 45) = v203;
  *(_DWORD *)(a1 + 48) = v146;
  *(unsigned char *)(a1 + 52) = BYTE4(v146) & 1;
  *(unsigned char *)(a1 + 55) = v202;
  *(_WORD *)(a1 + 53) = v201;
  *(_DWORD *)(a1 + 56) = v131;
  *(unsigned char *)(a1 + 60) = BYTE4(v131) & 1;
  *(unsigned char *)(a1 + 63) = v200;
  *(_WORD *)(a1 + 61) = v199;
  *(_DWORD *)(a1 + 64) = v132;
  *(unsigned char *)(a1 + 68) = BYTE4(v132) & 1;
  *(unsigned char *)(a1 + 71) = v198;
  *(_WORD *)(a1 + 69) = v197;
  *(_DWORD *)(a1 + 72) = v133;
  *(unsigned char *)(a1 + 76) = BYTE4(v133) & 1;
  *(unsigned char *)(a1 + 79) = v196;
  *(_WORD *)(a1 + 77) = v195;
  *(_DWORD *)(a1 + 80) = v134;
  *(unsigned char *)(a1 + 84) = BYTE4(v134) & 1;
  *(unsigned char *)(a1 + 87) = v194;
  *(_WORD *)(a1 + 85) = v193;
  *(_DWORD *)(a1 + 88) = v135;
  *(unsigned char *)(a1 + 92) = BYTE4(v135) & 1;
  *(unsigned char *)(a1 + 95) = v192;
  *(_WORD *)(a1 + 93) = v191;
  *(_DWORD *)(a1 + 96) = v136;
  *(unsigned char *)(a1 + 100) = BYTE4(v136) & 1;
  *(unsigned char *)(a1 + 103) = v190;
  *(_WORD *)(a1 + 101) = v189;
  *(_DWORD *)(a1 + 104) = v137;
  *(unsigned char *)(a1 + 108) = BYTE4(v137) & 1;
  *(unsigned char *)(a1 + 111) = v188;
  *(_WORD *)(a1 + 109) = v187;
  *(_DWORD *)(a1 + 112) = v138;
  *(unsigned char *)(a1 + 116) = BYTE4(v138) & 1;
  *(unsigned char *)(a1 + 119) = v186;
  *(_WORD *)(a1 + 117) = v185;
  *(_DWORD *)(a1 + 120) = v139;
  *(unsigned char *)(a1 + 124) = BYTE4(v139) & 1;
  *(unsigned char *)(a1 + 127) = v184;
  *(_WORD *)(a1 + 125) = v183;
  *(_DWORD *)(a1 + 128) = v140;
  *(unsigned char *)(a1 + 132) = BYTE4(v140) & 1;
  *(unsigned char *)(a1 + 135) = v182;
  *(_WORD *)(a1 + 133) = v181;
  *(_DWORD *)(a1 + 136) = v141;
  *(unsigned char *)(a1 + 140) = BYTE4(v141) & 1;
  *(unsigned char *)(a1 + 143) = v180;
  *(_WORD *)(a1 + 141) = v179;
  *(_DWORD *)(a1 + 144) = v142;
  *(unsigned char *)(a1 + 148) = BYTE4(v142) & 1;
  *(unsigned char *)(a1 + 151) = v178;
  *(_WORD *)(a1 + 149) = v177;
  *(_DWORD *)(a1 + 152) = v143;
  *(unsigned char *)(a1 + 156) = BYTE4(v143) & 1;
  *(unsigned char *)(a1 + 159) = v176;
  *(_WORD *)(a1 + 157) = v175;
  *(_DWORD *)(a1 + 160) = v144;
  *(unsigned char *)(a1 + 164) = BYTE4(v144) & 1;
  *(unsigned char *)(a1 + 167) = v174;
  *(_WORD *)(a1 + 165) = v173;
  *(_DWORD *)(a1 + 168) = v145;
  *(unsigned char *)(a1 + 172) = BYTE4(v145) & 1;
  *(unsigned char *)(a1 + 175) = v172;
  *(_WORD *)(a1 + 173) = v171;
  *(unsigned char *)(a1 + 200) = v130 & 1;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)((char *)&v215 + 3);
  *(_DWORD *)(a1 + 201) = v215;
  *(unsigned char *)(a1 + 216) = v129 & 1;
  *(unsigned char *)(a1 + 223) = v170;
  *(_WORD *)(a1 + 221) = v169;
  *(unsigned char *)(a1 + 393) = 0;
  *(_WORD *)(a1 + 398) = v168;
  *(_DWORD *)(a1 + 394) = v167;
  *(_DWORD *)(a1 + 441) = *(_DWORD *)v166;
  *(_DWORD *)(a1 + 444) = *(_DWORD *)&v166[3];
  *(unsigned char *)(a1 + 456) = v128 & 1;
  *(_DWORD *)(a1 + 457) = *(_DWORD *)v165;
  *(_DWORD *)(a1 + 460) = *(_DWORD *)&v165[3];
  *(void *)(a1 + 464) = v164;
  *(void *)(a1 + 472) = v159;
  *(void *)(a1 + 480) = result;
  *(unsigned char *)(a1 + 488) = v98 & 1;
  return result;
}

void *sub_100440834(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IQImageType();
  uint64_t v91 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  unsigned int v10 = (char *)&v90 - v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (uint64_t *)((char *)&v90 - v11);
  uint64_t v114 = type metadata accessor for Logger();
  uint64_t v90 = *(void *)(v114 - 8);
  uint64_t v13 = __chkstk_darwin(v114);
  unint64_t v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (uint64_t *)((char *)&v90 - v17);
  __chkstk_darwin(v16);
  uint64_t v117 = (char *)&v90 - v19;
  unint64_t v98 = a1;
  unint64_t v20 = IdentityImageQualityMetrics.inlineMetrics.getter();
  unint64_t v22 = v20;
  if (v20 >> 62) {
    goto LABEL_78;
  }
  uint64_t v23 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  uint64_t v105 = a2;
  uint64_t v106 = v15;
  uint64_t v115 = v4;
  uint64_t v116 = v10;
  uint64_t v113 = v7;
  uint64_t v111 = v18;
  if (v23)
  {
    unint64_t v7 = 0;
    unint64_t v110 = v22 & 0xC000000000000001;
    uint64_t v107 = (void (**)(char *, uint64_t))(v91 + 16);
    uint64_t v104 = (void (**)(void *, uint64_t))(v91 + 8);
    *(void *)&long long v103 = v90 + 8;
    uint64_t v101 = _swiftEmptyArrayStorage;
    *(void *)&long long v21 = 136315650;
    long long v100 = v21;
    id v99 = (char *)&type metadata for Any + 8;
    uint64_t v108 = (void (**)(char *, uint64_t))v23;
    uint64_t v109 = (char *)v22;
    do
    {
      if (v110) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v24 = *(id *)(v22 + 8 * (void)v7 + 32);
      }
      unint64_t v25 = v24;
      if (__OFADD__(v7, 1)) {
        goto LABEL_74;
      }
      unint64_t v112 = (unint64_t)(v7 + 1);
      defaultLogger()();
      ((void (*)(void *, uint64_t, uint64_t))*v107)(v12, a2, v4);
      id v26 = v25;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = v4;
        uint64_t v30 = swift_slowAlloc();
        *(void *)&long long v102 = swift_slowAlloc();
        v121[0] = v102;
        *(_DWORD *)uint64_t v30 = v100;
        uint64_t v31 = IQImageType.rawValue.getter();
        *(void *)(v30 + 4) = sub_100110D58(v31, v32, v121);
        swift_bridgeObjectRelease();
        (*v104)(v12, v29);
        *(_WORD *)(v30 + 12) = 2048;
        *(void *)(v30 + 14) = v7;
        *(_WORD *)(v30 + 22) = 2080;
        id v33 = [v26 debugDescription];
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v12;
        unint64_t v37 = v36;

        uint64_t v38 = v34;
        unsigned int v10 = v116;
        *(void *)(v30 + 24) = sub_100110D58(v38, v37, v121);

        unint64_t v12 = v35;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s inline %ld:\n%s", (uint8_t *)v30, 0x20u);
        swift_arrayDestroy();
        a2 = v105;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*v104)(v12, v4);
      }
      (*(void (**)(char *, uint64_t))v103)(v117, v114);
      sub_10043FB80((uint64_t)v119);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v15 = v106;
      uint64_t v18 = v111;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v101 = sub_10011054C(0, v101[2] + 1, 1, v101);
      }
      unint64_t v41 = v101[2];
      unint64_t v40 = v101[3];
      if (v41 >= v40 >> 1) {
        uint64_t v101 = sub_10011054C((void *)(v40 > 1), v41 + 1, 1, v101);
      }
      id v42 = v101;
      v101[2] = v41 + 1;
      memcpy(&v42[62 * v41 + 4], v119, 0x1E9uLL);

      ++v7;
      unint64_t v22 = (unint64_t)v109;
      uint64_t v4 = v115;
    }
    while ((void (**)(char *, uint64_t))v112 != v108);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v101 = _swiftEmptyArrayStorage;
  }
  unint64_t v43 = IdentityImageQualityMetrics.captureMetrics.getter();
  unint64_t v22 = v43;
  if (v43 >> 62) {
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v45 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v45)
  {
    unint64_t v7 = 0;
    unint64_t v112 = v22 & 0xC000000000000001;
    uint64_t v107 = (void (**)(char *, uint64_t))(v91 + 8);
    uint64_t v108 = (void (**)(char *, uint64_t))(v91 + 16);
    uint64_t v104 = (void (**)(void *, uint64_t))(v90 + 8);
    unint64_t v12 = _swiftEmptyArrayStorage;
    *(void *)&long long v44 = 136315650;
    long long v102 = v44;
    *(void *)&long long v100 = (char *)&type metadata for Any + 8;
    uint64_t v109 = (char *)v45;
    unint64_t v110 = v22;
    do
    {
      if (v112) {
        id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v46 = *(id *)(v22 + 8 * (void)v7 + 32);
      }
      unint64_t v47 = v46;
      if (__OFADD__(v7, 1)) {
        goto LABEL_75;
      }
      uint64_t v117 = v7 + 1;
      defaultLogger()();
      ((void (*)(char *, uint64_t, uint64_t))*v108)(v10, a2, v4);
      id v48 = v47;
      uint64_t v49 = v18;
      char v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = v4;
        uint64_t v53 = swift_slowAlloc();
        *(void *)&long long v103 = swift_slowAlloc();
        v121[0] = v103;
        *(_DWORD *)uint64_t v53 = v102;
        uint64_t v54 = IQImageType.rawValue.getter();
        *(void *)(v53 + 4) = sub_100110D58(v54, v55, v121);
        swift_bridgeObjectRelease();
        (*v107)(v116, v52);
        *(_WORD *)(v53 + 12) = 2048;
        *(void *)(v53 + 14) = v7;
        *(_WORD *)(v53 + 22) = 2080;
        id v56 = [v48 debugDescription];
        uint64_t v57 = v12;
        uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v60 = v59;

        uint64_t v61 = v58;
        unint64_t v12 = v57;
        *(void *)(v53 + 24) = sub_100110D58(v61, v60, v121);

        unsigned int v10 = v116;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s captured %ld:\n%s", (uint8_t *)v53, 0x20u);
        swift_arrayDestroy();
        a2 = v105;
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v18 = v111;
        (*v104)(v111, v114);
      }
      else
      {
        (*v107)(v10, v4);

        (*v104)(v49, v114);
        uint64_t v18 = v49;
      }
      sub_10043FB80((uint64_t)v120);
      char v62 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v15 = v106;
      if ((v62 & 1) == 0) {
        unint64_t v12 = sub_10011054C(0, v12[2] + 1, 1, v12);
      }
      unint64_t v64 = v12[2];
      unint64_t v63 = v12[3];
      if (v64 >= v63 >> 1) {
        unint64_t v12 = sub_10011054C((void *)(v63 > 1), v64 + 1, 1, v12);
      }
      v12[2] = v64 + 1;
      memcpy(&v12[62 * v64 + 4], v120, 0x1E9uLL);

      ++v7;
      unint64_t v22 = v110;
      uint64_t v4 = v115;
    }
    while (v117 != v109);
  }
  else
  {
    unint64_t v12 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  unint64_t v65 = IdentityImageQualityMetrics.videoMetrics.getter();
  unint64_t v94 = v65;
  if (v65 >> 62) {
    uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v67 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v7 = v113;
  if (v67)
  {
    unint64_t v22 = 0;
    unint64_t v97 = v94 & 0xC000000000000001;
    unint64_t v92 = v94 + 32;
    uint64_t v93 = v94 & 0xFFFFFFFFFFFFFF8;
    uint64_t v108 = (void (**)(char *, uint64_t))(v91 + 8);
    uint64_t v109 = (char *)(v91 + 16);
    uint64_t v107 = (void (**)(char *, uint64_t))(v90 + 8);
    *(void *)&long long v66 = 136315906;
    long long v103 = v66;
    *(void *)&long long v102 = (char *)&type metadata for Any + 8;
    *(void *)&long long v100 = _swiftEmptyArrayStorage;
    uint64_t v95 = v67;
    char v96 = v12;
    while (1)
    {
      if (v97)
      {
        id v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v69 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_76;
        }
      }
      else
      {
        if (v22 >= *(void *)(v93 + 16)) {
          goto LABEL_77;
        }
        id v68 = *(id *)(v92 + 8 * v22);
        unint64_t v69 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_76;
        }
      }
      unint64_t v98 = v69;
      id v99 = v68;
      uint64_t v104 = (void (**)(void *, uint64_t))v22;
      unint64_t v70 = MetricsSequence.sequence.getter();
      unint64_t v22 = v70;
      if (v70 >> 62)
      {
        unsigned int v10 = (char *)_CocoaArrayWrapper.endIndex.getter();
        if (v10)
        {
LABEL_49:
          unint64_t v12 = 0;
          unint64_t v112 = v22 & 0xC000000000000001;
          uint64_t v18 = _swiftEmptyArrayStorage;
          unint64_t v110 = (unint64_t)v10;
          uint64_t v111 = (void *)v22;
          while (1)
          {
            id v71 = v112
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v22 + 8 * (void)v12 + 32);
            uint64_t v72 = v71;
            if (__OFADD__(v12, 1)) {
              break;
            }
            uint64_t v116 = (char *)v12 + 1;
            uint64_t v117 = (char *)v18;
            defaultLogger()();
            (*(void (**)(char *, uint64_t, uint64_t))v109)(v7, a2, v4);
            id v73 = v72;
            uint64_t v74 = Logger.logObject.getter();
            os_log_type_t v75 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v74, v75))
            {
              uint64_t v76 = swift_slowAlloc();
              uint64_t v118 = swift_slowAlloc();
              *(_DWORD *)uint64_t v76 = v103;
              uint64_t v77 = IQImageType.rawValue.getter();
              *(void *)(v76 + 4) = sub_100110D58(v77, v78, &v118);
              swift_bridgeObjectRelease();
              (*v108)(v7, v115);
              *(_WORD *)(v76 + 12) = 2048;
              *(void *)(v76 + 14) = v104;
              *(_WORD *)(v76 + 22) = 2048;
              *(void *)(v76 + 24) = v12;
              *(_WORD *)(v76 + 32) = 2080;
              id v79 = [v73 debugDescription];
              uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v82 = v81;

              *(void *)(v76 + 34) = sub_100110D58(v80, v82, &v118);
              a2 = v105;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v74, v75, "%s video, sequence: %ld, metric: %ld:\n%s", (uint8_t *)v76, 0x2Au);
              swift_arrayDestroy();
              unint64_t v15 = v106;
              swift_slowDealloc();
              uint64_t v4 = v115;
              swift_slowDealloc();
            }
            else
            {
              (*v108)(v7, v4);
            }
            (*v107)(v15, v114);
            sub_10043FB80((uint64_t)v121);
            uint64_t v18 = v117;
            char v83 = swift_isUniquelyReferenced_nonNull_native();
            unsigned int v10 = (char *)v110;
            if ((v83 & 1) == 0) {
              uint64_t v18 = sub_10011054C(0, v18[2] + 1, 1, v18);
            }
            unint64_t v85 = v18[2];
            unint64_t v84 = v18[3];
            if (v85 >= v84 >> 1) {
              uint64_t v18 = sub_10011054C((void *)(v84 > 1), v85 + 1, 1, v18);
            }
            v18[2] = v85 + 1;
            memcpy(&v18[62 * v85 + 4], v121, 0x1E9uLL);

            unint64_t v12 = (void *)((char *)v12 + 1);
            unint64_t v7 = v113;
            unint64_t v22 = (unint64_t)v111;
            if (v116 == v10) {
              goto LABEL_65;
            }
          }
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_3;
        }
      }
      else
      {
        unsigned int v10 = *(char **)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v10) {
          goto LABEL_49;
        }
      }
      uint64_t v18 = _swiftEmptyArrayStorage;
LABEL_65:
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        *(void *)&long long v100 = sub_10011043C(0, *(void *)(v100 + 16) + 1, 1, (void *)v100);
      }
      unint64_t v12 = v96;
      unint64_t v87 = *(void *)(v100 + 16);
      unint64_t v86 = *(void *)(v100 + 24);
      if (v87 >= v86 >> 1) {
        *(void *)&long long v100 = sub_10011043C((void *)(v86 > 1), v87 + 1, 1, (void *)v100);
      }
      uint64_t v88 = v100;
      *(void *)(v100 + 16) = v87 + 1;
      *(void *)(v88 + 8 * v87 + 32) = v18;

      unint64_t v22 = v98;
      unint64_t v7 = v113;
      if (v98 == v95) {
        goto LABEL_72;
      }
    }
  }
  *(void *)&long long v100 = _swiftEmptyArrayStorage;
LABEL_72:
  swift_bridgeObjectRelease();
  return v101;
}

unint64_t sub_1004415C0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v120 = (void *)a6;
  char v121 = (void *)a7;
  uint64_t v118 = (void *)a4;
  uint64_t v119 = (void *)a5;
  uint64_t v117 = (void *)a3;
  uint64_t v9 = type metadata accessor for IQImageType();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v114 - v14;
  unint64_t v16 = sub_10015E30C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v122 = v10;
  if (a1)
  {
    uint64_t v17 = enum case for IQImageType.frontScan(_:);
    uint64_t v116 = a2;
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
    v18(v15, enum case for IQImageType.frontScan(_:), v9);
    id v19 = a1;
    uint64_t v20 = IQImageType.rawValue.getter();
    uint64_t v114 = v21;
    uint64_t v115 = v20;
    unint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
    v22(v15, v9);
    v18(v13, v17, v9);
    uint64_t v23 = sub_100440834((unint64_t)v19, (uint64_t)v13);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    v22(v13, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v123 = v16;
    uint64_t v29 = v27;
    a2 = v116;
    sub_1005635C4((uint64_t)v23, v25, v29, v115, v114, isUniquelyReferenced_nonNull_native);
    unint64_t v16 = v123;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a2)
  {
    uint64_t v30 = enum case for IQImageType.backScan(_:);
    uint64_t v31 = v122;
    unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 104);
    v32(v15, enum case for IQImageType.backScan(_:), v9);
    id v33 = a2;
    uint64_t v34 = IQImageType.rawValue.getter();
    uint64_t v115 = v35;
    uint64_t v116 = (void *)v34;
    unint64_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
    v36(v15, v9);
    v32(v13, v30, v9);
    unint64_t v37 = sub_100440834((unint64_t)v33, (uint64_t)v13);
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    v36(v13, v9);
    char v42 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v123 = v16;
    sub_1005635C4((uint64_t)v37, v39, v41, (uint64_t)v116, v115, v42);
    unint64_t v16 = v123;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v43 = v117;
  if (v117)
  {
    uint64_t v44 = enum case for IQImageType.idFront(_:);
    uint64_t v45 = v122;
    id v46 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 104);
    v46(v15, enum case for IQImageType.idFront(_:), v9);
    id v47 = v43;
    uint64_t v48 = IQImageType.rawValue.getter();
    uint64_t v116 = (void *)v49;
    uint64_t v117 = (void *)v48;
    char v50 = *(void (**)(char *, uint64_t))(v45 + 8);
    v50(v15, v9);
    v46(v13, v44, v9);
    os_log_type_t v51 = sub_100440834((unint64_t)v47, (uint64_t)v13);
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    v50(v13, v9);
    char v56 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v123 = v16;
    sub_1005635C4((uint64_t)v51, v53, v55, (uint64_t)v117, (uint64_t)v116, v56);
    unint64_t v16 = v123;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v57 = v118;
  if (v118)
  {
    uint64_t v58 = enum case for IQImageType.idBack(_:);
    uint64_t v59 = v122;
    unint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 104);
    v60(v15, enum case for IQImageType.idBack(_:), v9);
    id v61 = v57;
    uint64_t v62 = IQImageType.rawValue.getter();
    uint64_t v117 = (void *)v63;
    uint64_t v118 = (void *)v62;
    unint64_t v64 = *(void (**)(char *, uint64_t))(v59 + 8);
    v64(v15, v9);
    v60(v13, v58, v9);
    unint64_t v65 = sub_100440834((unint64_t)v61, (uint64_t)v13);
    uint64_t v67 = v66;
    uint64_t v69 = v68;
    v64(v13, v9);
    char v70 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v123 = v16;
    sub_1005635C4((uint64_t)v65, v67, v69, (uint64_t)v118, (uint64_t)v117, v70);
    unint64_t v16 = v123;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  id v71 = v119;
  if (v119)
  {
    uint64_t v72 = enum case for IQImageType.selfie(_:);
    uint64_t v73 = v122;
    uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 104);
    v74(v15, enum case for IQImageType.selfie(_:), v9);
    id v75 = v71;
    uint64_t v76 = IQImageType.rawValue.getter();
    uint64_t v118 = (void *)v77;
    uint64_t v119 = (void *)v76;
    unint64_t v78 = *(void (**)(char *, uint64_t))(v73 + 8);
    v78(v15, v9);
    v74(v13, v72, v9);
    id v79 = sub_100440834((unint64_t)v75, (uint64_t)v13);
    uint64_t v81 = v80;
    uint64_t v83 = v82;
    v78(v13, v9);
    char v84 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v123 = v16;
    sub_1005635C4((uint64_t)v79, v81, v83, (uint64_t)v119, (uint64_t)v118, v84);
    unint64_t v16 = v123;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v85 = v120;
  if (v120)
  {
    uint64_t v86 = enum case for IQImageType.liveness(_:);
    uint64_t v87 = v122;
    uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 104);
    v88(v15, enum case for IQImageType.liveness(_:), v9);
    id v89 = v85;
    uint64_t v90 = IQImageType.rawValue.getter();
    uint64_t v119 = (void *)v91;
    char v120 = (void *)v90;
    unint64_t v92 = *(void (**)(char *, uint64_t))(v87 + 8);
    v92(v15, v9);
    v88(v13, v86, v9);
    uint64_t v93 = sub_100440834((unint64_t)v89, (uint64_t)v13);
    uint64_t v95 = v94;
    uint64_t v97 = v96;
    v92(v13, v9);
    char v98 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v123 = v16;
    sub_1005635C4((uint64_t)v93, v95, v97, (uint64_t)v120, (uint64_t)v119, v98);
    unint64_t v16 = v123;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  id v99 = v121;
  if (v121)
  {
    uint64_t v100 = enum case for IQImageType.passive(_:);
    uint64_t v101 = v122;
    long long v102 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 104);
    v102(v15, enum case for IQImageType.passive(_:), v9);
    id v103 = v99;
    uint64_t v104 = IQImageType.rawValue.getter();
    char v120 = (void *)v105;
    char v121 = (void *)v104;
    uint64_t v106 = *(void (**)(char *, uint64_t))(v101 + 8);
    v106(v15, v9);
    v102(v13, v100, v9);
    uint64_t v107 = sub_100440834((unint64_t)v103, (uint64_t)v13);
    uint64_t v109 = v108;
    uint64_t v111 = v110;
    v106(v13, v9);
    char v112 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v123 = v16;
    sub_1005635C4((uint64_t)v107, v109, v111, (uint64_t)v121, (uint64_t)v120, v112);
    unint64_t v16 = v123;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v16;
}

void *sub_100441D50()
{
  uint64_t v0 = type metadata accessor for IdentityBMUserProofingStreamWrapper();
  uint64_t v1 = swift_allocObject();
  id v2 = [(id)BiomeLibrary() WalletPaymentsCommerce];
  swift_unknownObjectRelease();
  id v3 = [v2 UserProofing];
  swift_unknownObjectRelease();
  id v4 = [v3 Result];
  swift_unknownObjectRelease();
  *(void *)(v1 + 16) = v4;
  type metadata accessor for BMUserProofingEventFactory();
  uint64_t v5 = swift_allocObject();
  id v6 = [objc_allocWithZone((Class)IdentityProofingBiomeDataDeletionManager) init];
  v17[3] = v0;
  v17[4] = &off_1006F8EA0;
  v17[0] = v1;
  type metadata accessor for IdentityProofingBiomeManager();
  unint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = sub_1000279F4((uint64_t)v17, v0);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = *v10;
  uint64_t v15 = v0;
  unint64_t v16 = &off_1006F8EA0;
  *(void *)&long long v14 = v12;
  v7[9] = 90;
  sub_10000C6B4(&v14, (uint64_t)(v7 + 2));
  v7[7] = v5;
  v7[8] = v6;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v17);
  return v7;
}

char *sub_100441F3C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0;
  machServiceIdentityProofingDataSharing.getter();
  id v6 = objc_allocWithZone((Class)NSXPCListener);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithMachServiceName:v7];

  *(void *)&v5[OBJC_IVAR____TtC8coreidvd35IdentityProofingDataSharingListener_xpcListener] = v8;
  uint64_t v9 = (objc_class *)type metadata accessor for IdentityProofingDataSharingListener();
  v17.receiver = v5;
  v17.super_class = v9;
  uint64_t v10 = (char *)[super init];
  uint64_t v11 = *(void **)&v10[OBJC_IVAR____TtC8coreidvd35IdentityProofingDataSharingListener_xpcListener];
  uint64_t v12 = v10;
  [v11 setDelegate:v12];
  [v11 resume];
  defaultLogger()();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "IdentityProofingDataSharingListener has started", v15, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

id sub_100442160()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "IdentityProofingDataSharingListener is tearing down", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [*(id *)&v1[OBJC_IVAR____TtC8coreidvd35IdentityProofingDataSharingListener_xpcListener] invalidate];
  uint64_t v9 = (objc_class *)type metadata accessor for IdentityProofingDataSharingListener();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_10044230C()
{
  return sub_100442324("coreidvd: IdentityProofingDataSharingListener connection invalidated");
}

uint64_t sub_100442318()
{
  return sub_100442324("IdentityProofingDataSharingListener connection interrupted");
}

uint64_t sub_100442324(const char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a1, v8, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t type metadata accessor for IdentityProofingDataSharingListener()
{
  return self;
}

uint64_t sub_1004424E4(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v45 - v8;
  __chkstk_darwin(v7);
  objc_super v11 = (char *)&v45 - v10;
  swift_unknownObjectWeakInit();
  defaultLogger()();
  uint64_t v12 = a1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v48 = v6;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 67109120;
    LODWORD(aBlock) = [v12 processIdentifier];
    id v6 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "IdentityProofingDataSharingListener connection received from %d", v15, 8u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v13 = v12;
  }

  uint64_t v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  objc_super v17 = (char *)(v3 + 8);
  unint64_t v16 = v18;
  v18(v11, v2);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    defaultLogger()();
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "coreidvd (no description: -1):IdentityProofingDataSharingListener received", v34, 2u);
      swift_slowDealloc();
    }

    uint64_t v35 = v6;
    goto LABEL_11;
  }
  uint64_t v20 = (void *)Strong;
  defaultLogger()();
  id v21 = v20;
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v22, v23))
  {

    uint64_t v35 = v9;
LABEL_11:
    v16(v35, v2);
    goto LABEL_12;
  }
  uint64_t v24 = swift_slowAlloc();
  uint64_t aBlock = swift_slowAlloc();
  *(_DWORD *)uint64_t v24 = 136315394;
  uint64_t v45 = v24 + 4;
  id v25 = v21;
  id v26 = [v25 description];
  uint64_t v48 = v17;
  id v27 = v26;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v46 = v9;
  uint64_t v47 = v2;
  uint64_t v29 = v28;
  unint64_t v31 = v30;

  uint64_t v49 = sub_100110D58(v29, v31, &aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v24 + 12) = 1024;
  LODWORD(v29) = [v25 processIdentifier];

  LODWORD(v49) = v29;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  _os_log_impl((void *)&_mh_execute_header, v22, v23, "coreidvd (%s:%d): IdentityProofingDataSharingListener connection received", (uint8_t *)v24, 0x12u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  v16(v46, v47);
LABEL_12:
  type metadata accessor for IdentityProofingDataSharingInterface();
  unint64_t v36 = (void *)static IdentityProofingDataSharingInterface.interface()();
  [v12 setExportedInterface:v36];

  unint64_t v37 = sub_100441D50();
  type metadata accessor for IdentityProofingPassManager();
  uint64_t v38 = swift_allocObject();
  type metadata accessor for IdentityProofingDataSharingManager();
  uint64_t v39 = (void *)swift_allocObject();
  v39[2] = 90;
  v39[3] = v37;
  v39[4] = v38;
  type metadata accessor for IdentityProofingDataSharingSessionProxy();
  swift_allocObject();
  uint64_t v40 = v12;
  uint64_t v41 = sub_100133BB4((uint64_t)v12, (uint64_t)&protocol witness table for NSXPCConnection, (uint64_t)v39);

  swift_release();
  [v40 setExportedObject:v41];
  swift_release();
  uint64_t v54 = sub_10044230C;
  uint64_t v55 = 0;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_100593800;
  uint64_t v53 = &unk_100705660;
  char v42 = _Block_copy(&aBlock);
  [v40 setInvalidationHandler:v42];
  _Block_release(v42);
  uint64_t v54 = sub_100442318;
  uint64_t v55 = 0;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_100593800;
  uint64_t v53 = &unk_100705688;
  unint64_t v43 = _Block_copy(&aBlock);
  [v40 setInterruptionHandler:v43];
  _Block_release(v43);
  [v40 resume];
  swift_unknownObjectWeakDestroy();
  return 1;
}

uint64_t sub_100442B40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100442B50()
{
  return swift_release();
}

void sub_100442B60(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v2 = sub_100007764(&qword_10072B400);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100722C18);
  __chkstk_darwin(v5 - 8);
  unint64_t v37 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for ActionRequest(0);
  uint64_t v7 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [self standardUserDefaults];
  v15._object = (void *)0x800000010064C400;
  v15._uint64_t countAndFlagsBits = 0xD000000000000021;
  Swift::Bool v16 = NSUserDefaults.internalBool(forKey:)(v15);

  if (v16)
  {
    uint64_t v35 = v7;
    unint64_t v36 = (unint64_t *)v1;
    defaultLogger()();
    objc_super v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Internal setting for Inject Liveness Assessments is enabled", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v20 = v38;
    uint64_t v21 = (uint64_t)&v9[*(int *)(v38 + 20)];
    v40[0] = xmmword_100622FD0;
    uint64_t v22 = type metadata accessor for WorkflowRecommendationResponse();
    memset(&v40[1], 0, 48);
    uint64_t v23 = (uint64_t)v37;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v37, 1, 1, v22);
    memset(v41, 0, sizeof(v41));
    v42[0] = xmmword_100622FE0;
    v42[1] = xmmword_100622FF0;
    v42[2] = xmmword_100623000;
    v42[3] = xmmword_100623010;
    uint64_t v24 = sub_100007764(&qword_100723988);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v4, 1, 1, v24);
    sub_1000ABB90(v39);
    sub_1002392C4((uint64_t)v39, (uint64_t)v43);
    *(void *)&long long v33 = 0;
    *((void *)&v33 + 1) = 1;
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 1;
    sub_10031FAA4(0, 0, 0, 0, 0, 0, 0, 0, v21, 0, 0, 2, 0, 0, (uint64_t)v40, v32, 0, 0, 0,
      v33,
      0,
      0,
      v23,
      3,
      0,
      5,
      0,
      5,
      0,
      0,
      0,
      1,
      0,
      1,
      (uint64_t)v41,
      (uint64_t)v42,
      0,
      0,
      (uint64_t)v4,
      (uint64_t)v43);
    uint64_t v25 = type metadata accessor for PendingActionContext(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v21, 0, 1, v25);
    strcpy(v9, "SEND_TO_BIOME");
    *((_WORD *)v9 + 7) = -4864;
    id v26 = &v9[*(int *)(v20 + 24)];
    *(void *)id v26 = 0;
    *((void *)v26 + 1) = 0;
    id v27 = v36;
    unint64_t v28 = *v36;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v28 = sub_100110B48(0, *(void *)(v28 + 16) + 1, 1, v28);
    }
    uint64_t v29 = v35;
    unint64_t v31 = *(void *)(v28 + 16);
    unint64_t v30 = *(void *)(v28 + 24);
    if (v31 >= v30 >> 1) {
      unint64_t v28 = sub_100110B48(v30 > 1, v31 + 1, 1, v28);
    }
    *(void *)(v28 + 16) = v31 + 1;
    sub_100443AF8((uint64_t)v9, v28+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v31);
    *id v27 = v28;
  }
}

void sub_1004430E8(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v2 = sub_100007764(&qword_10072B400);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100722C18);
  __chkstk_darwin(v5 - 8);
  unint64_t v37 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for ActionRequest(0);
  uint64_t v7 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [self standardUserDefaults];
  v15._object = (void *)0x800000010064C3C0;
  v15._uint64_t countAndFlagsBits = 0xD000000000000031;
  Swift::Bool v16 = NSUserDefaults.internalBool(forKey:)(v15);

  if (v16)
  {
    uint64_t v35 = v7;
    unint64_t v36 = (unint64_t *)v1;
    defaultLogger()();
    objc_super v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Internal setting for Inject Passive Liveness step up Assessments is enabled", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v20 = v38;
    uint64_t v21 = (uint64_t)&v9[*(int *)(v38 + 20)];
    v40[0] = xmmword_100622FD0;
    uint64_t v22 = type metadata accessor for WorkflowRecommendationResponse();
    memset(&v40[1], 0, 48);
    uint64_t v23 = (uint64_t)v37;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v37, 1, 1, v22);
    v41[0] = xmmword_100622FE0;
    v41[1] = xmmword_100623020;
    void v41[2] = xmmword_100623000;
    v41[3] = xmmword_100623010;
    memset(v42, 0, 64);
    uint64_t v24 = sub_100007764(&qword_100723988);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v4, 1, 1, v24);
    sub_1000ABB90(v39);
    sub_1002392C4((uint64_t)v39, (uint64_t)v43);
    *(void *)&long long v33 = 0;
    *((void *)&v33 + 1) = 1;
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 1;
    sub_10031FAA4(0, 0, 0, 0, 0, 0, 0, 0, v21, 0, 0, 2, 0, 0, (uint64_t)v40, v32, 0, 0, 0,
      v33,
      0,
      0,
      v23,
      3,
      0,
      5,
      0,
      1,
      0,
      1,
      3,
      0,
      3,
      0,
      (uint64_t)v41,
      (uint64_t)v42,
      0,
      0,
      (uint64_t)v4,
      (uint64_t)v43);
    uint64_t v25 = type metadata accessor for PendingActionContext(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v21, 0, 1, v25);
    strcpy(v9, "SEND_TO_BIOME");
    *((_WORD *)v9 + 7) = -4864;
    id v26 = &v9[*(int *)(v20 + 24)];
    *(void *)id v26 = 0;
    *((void *)v26 + 1) = 0;
    id v27 = v36;
    unint64_t v28 = *v36;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v28 = sub_100110B48(0, *(void *)(v28 + 16) + 1, 1, v28);
    }
    uint64_t v29 = v35;
    unint64_t v31 = *(void *)(v28 + 16);
    unint64_t v30 = *(void *)(v28 + 24);
    if (v31 >= v30 >> 1) {
      unint64_t v28 = sub_100110B48(v30 > 1, v31 + 1, 1, v28);
    }
    *(void *)(v28 + 16) = v31 + 1;
    sub_100443AF8((uint64_t)v9, v28+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v31);
    *id v27 = v28;
  }
}

void sub_100443674(uint64_t a1)
{
  unint64_t v31 = (unint64_t *)__chkstk_darwin(a1);
  uint64_t v1 = sub_100007764(&qword_10072B400);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007764(&qword_100722C18);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ActionRequest(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = self;
  id v12 = [v11 standardUserDefaults];
  v13._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v13._object = (void *)0x800000010064C3A0;
  Swift::Bool v14 = NSUserDefaults.internalBool(forKey:)(v13);

  if (v14)
  {
    uint64_t v30 = v8;
    uint64_t v29 = (uint64_t)v10 + *(int *)(v7 + 20);
    v33[0] = xmmword_100622FD0;
    uint64_t v15 = type metadata accessor for WorkflowRecommendationResponse();
    memset(&v33[1], 0, 48);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 1, 1, v15);
    memset(v34, 0, 64);
    id v16 = [v11 standardUserDefaults];
    v17._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v17._object = (void *)0x800000010064C3A0;
    Swift::String_optional v18 = NSUserDefaults.internalString(forKey:)(v17);

    uint64_t v19 = sub_100007764(&qword_100723988);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v3, 1, 1, v19);
    sub_1000ABB90(v32);
    sub_1002392C4((uint64_t)v32, (uint64_t)v35);
    *(void *)&long long v28 = 0;
    *((void *)&v28 + 1) = 1;
    *(void *)&long long v27 = 0;
    *((void *)&v27 + 1) = 1;
    uint64_t v20 = v29;
    sub_10031FAA4(0, 0, 0, 0, 0, 0, 0, 0, v29, 0, 0, 2, 0, 0, (uint64_t)v33, v27, 0, 0, 0,
      v28,
      0,
      0,
      (uint64_t)v6,
      3,
      0,
      5,
      0,
      5,
      0,
      2,
      0,
      1,
      0,
      1,
      (uint64_t)v34,
      (uint64_t)v34,
      v18.value._countAndFlagsBits,
      (uint64_t)v18.value._object,
      (uint64_t)v3,
      (uint64_t)v35);
    uint64_t v21 = type metadata accessor for PendingActionContext(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
    void *v10 = 0xD000000000000011;
    v10[1] = 0x800000010062A940;
    uint64_t v22 = (void *)((char *)v10 + *(int *)(v7 + 24));
    void *v22 = 0;
    v22[1] = 0;
    uint64_t v23 = v31;
    unint64_t v24 = *v31;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v24 = sub_100110B48(0, *(void *)(v24 + 16) + 1, 1, v24);
    }
    unint64_t v26 = *(void *)(v24 + 16);
    unint64_t v25 = *(void *)(v24 + 24);
    if (v26 >= v25 >> 1) {
      unint64_t v24 = sub_100110B48(v25 > 1, v26 + 1, 1, v24);
    }
    *(void *)(v24 + 16) = v26 + 1;
    sub_100443AF8((uint64_t)v10, v24+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v26);
    *uint64_t v23 = v24;
  }
}

uint64_t sub_100443AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100443B5C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100443C50()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = v0;
    uint64_t v7 = (uint8_t *)v6;
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    uint64_t v13 = sub_100110D58(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "error received while fetching proxy for the exported client %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v12);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

void sub_100443E84(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v21 = v4;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v22 = v2;
    aBlock[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    if (v3) {
      uint64_t v13 = 0xD00000000000001DLL;
    }
    else {
      uint64_t v13 = 0xD000000000000015;
    }
    if (v3) {
      unint64_t v14 = 0x800000010064C4E0;
    }
    else {
      unint64_t v14 = 0x800000010064C500;
    }
    uint64_t v23 = sub_100110D58(v13, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Add Observer called for %s", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v22;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  id v15 = [self defaultCenter];
  NSString v16 = String._bridgeToObjectiveC()();
  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = v3;
  *(void *)(v17 + 24) = v2;
  aBlock[4] = (uint64_t)sub_10044461C;
  aBlock[5] = v17;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100443B5C;
  aBlock[3] = (uint64_t)&unk_100705700;
  Swift::String_optional v18 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v19 = [v15 addObserverForName:v16 object:0 queue:0 usingBlock:v18];
  _Block_release(v18);
  swift_unknownObjectRelease();
}

uint64_t sub_1004441E8()
{
  return sub_100444210("received a request to update UI for proofing status changed event", (SEL *)&selRef_didChangeProofingStatus);
}

uint64_t sub_1004441FC()
{
  return sub_100444210("received a request to log the event of extended review notification shown", (SEL *)&selRef_didShowExtendedReviewNotification);
}

uint64_t sub_100444210(const char *a1, SEL *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = *(void **)(v2 + 16);
  if (v12)
  {
    swift_unknownObjectRetain();
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, a1, v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    [v12 *a2];
    return swift_unknownObjectRelease();
  }
  else
  {
    defaultLogger()();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "cannot connect to client proxy", v19, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_100444434()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityManagementSessionDelegate()
{
  return self;
}

uint64_t sub_100444490(void *a1)
{
  type metadata accessor for IdentityManagementSessionDelegate();
  uint64_t v2 = swift_allocObject();
  if (a1)
  {
    aBlock[4] = sub_100443C50;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1005938A8;
    aBlock[3] = &unk_1007056B0;
    int v3 = _Block_copy(aBlock);
    id v4 = a1;
    id v5 = [v4 remoteObjectProxyWithErrorHandler:v3];
    _Block_release(v3);

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();

    sub_100007764((uint64_t *)&unk_100733960);
    int v6 = swift_dynamicCast();
    uint64_t v7 = v9;
    if (!v6) {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(void *)(v2 + 16) = v7;
  return v2;
}

uint64_t sub_1004445CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004445DC()
{
  return swift_release();
}

uint64_t sub_1004445E4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10044461C()
{
  if (*(unsigned char *)(v0 + 16)) {
    return sub_1004441FC();
  }
  else {
    return sub_1004441E8();
  }
}

uint64_t sub_100444658()
{
  return dispatch thunk of Error._code.getter();
}

unint64_t sub_1004446C8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_1007257A0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1004457C8(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1004447F4(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000078A8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004447F4(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10044486C(a1, a2, v4);
}

unint64_t sub_10044486C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1004449B4(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100723600);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v29 - v10;
  v29[1] = a1;
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    int v15 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
    if (v15 == enum case for DIPError.Code.missingEntitlement(_:))
    {
      type metadata accessor for DIIdentityFatalError(0);
      uint64_t v31 = 0;
      sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
      sub_100445780(&qword_10071F968, type metadata accessor for DIIdentityFatalError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v13 = v32;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      unint64_t v12 = 0xD000000000000048;
      uint64_t v16 = "This app has crashed because it called an API it is not entitled to use.";
    }
    else if (v15 == enum case for DIPError.Code.networkTimeOut(_:) {
           || v15 == enum case for DIPError.Code.serverUnavailable(_:))
    }
    {
      unint64_t v12 = 0xD000000000000013;
      type metadata accessor for DIIdentityError(0);
      uint64_t v31 = 3;
      sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
      sub_100445780(&qword_10071F9A0, type metadata accessor for DIIdentityError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v13 = v32;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      uint64_t v16 = "Network unavailable";
    }
    else
    {
      if (v15 == enum case for DIPError.Code.digitalPresentmentNoCredentialAvailable(_:)) {
        goto LABEL_13;
      }
      if (v15 == enum case for DIPError.Code.digitalPresentmentRequestAlreadyInProgress(_:))
      {
        type metadata accessor for DIIdentityError(0);
        uint64_t v31 = 5;
        sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
        sub_100445780(&qword_10071F9A0, type metadata accessor for DIIdentityError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v13 = v32;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        unint64_t v12 = 0xD00000000000001BLL;
        uint64_t v16 = "Request already in progress";
        goto LABEL_18;
      }
      if (v15 == enum case for DIPError.Code.digitalPresentmentNoElementsRequested(_:))
      {
        type metadata accessor for DIIdentityError(0);
        uint64_t v31 = 4;
        sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
        sub_100445780(&qword_10071F9A0, type metadata accessor for DIIdentityError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v13 = v32;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        unint64_t v12 = 0xD000000000000015;
        uint64_t v16 = "No elements requested";
        goto LABEL_18;
      }
      if (v15 == enum case for DIPError.Code.digitalPresentmentUserCancelled(_:)
        || v15 == enum case for DIPError.Code.digitalPresentmentAppCancelled(_:))
      {
        goto LABEL_13;
      }
      if (v15 == enum case for DIPError.Code.digitalPresentmentInvalidNonce(_:))
      {
        unint64_t v12 = 0x2064696C61766E49;
        type metadata accessor for DIIdentityError(0);
        uint64_t v31 = 6;
        sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
        sub_100445780(&qword_10071F9A0, type metadata accessor for DIIdentityError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v13 = v32;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        unint64_t v14 = 0xED000065636E6F6ELL;
        goto LABEL_19;
      }
      if (v15 == enum case for DIPError.Code.digitalPresentmentInvalidElement(_:))
      {
        unint64_t v12 = 0x2064696C61766E49;
        type metadata accessor for DIIdentityError(0);
        uint64_t v31 = 7;
        sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
        sub_100445780(&qword_10071F9A0, type metadata accessor for DIIdentityError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v13 = v32;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        unint64_t v14 = 0xEF746E656D656C65;
        goto LABEL_19;
      }
      if (v15 == enum case for DIPError.Code.digitalPresentmentInvalidMerchantID(_:))
      {
        type metadata accessor for DIIdentityFatalError(0);
        uint64_t v31 = 1;
        sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
        sub_100445780(&qword_10071F968, type metadata accessor for DIIdentityFatalError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v13 = v32;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        unint64_t v12 = 0xD00000000000006FLL;
        uint64_t v16 = "This app has crashed because it attempted to access privacy-sensitive data without a valid merchant identifier.";
        goto LABEL_18;
      }
      if (v15 == enum case for DIPError.Code.digitalPresentmentNotAvailableOnIPad(_:))
      {
        type metadata accessor for DIIdentityError(0);
        uint64_t v31 = 1;
        sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
        sub_100445780(&qword_10071F9A0, type metadata accessor for DIIdentityError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v13 = v32;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        unint64_t v14 = 0xED0000646574726FLL;
        unint64_t v12 = 0x7070757320746F4ELL;
        goto LABEL_19;
      }
      if (v15 == enum case for DIPError.Code.digitalPresentmentBiometricsPermissionDenied(_:))
      {
LABEL_13:
        type metadata accessor for DIIdentityError(0);
        uint64_t v31 = 2;
        sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
        sub_100445780(&qword_10071F9A0, type metadata accessor for DIIdentityError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v13 = v32;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        unint64_t v14 = 0xE900000000000064;
        unint64_t v12 = 0x656C6C65636E6143;
        goto LABEL_19;
      }
      if (v15 == enum case for DIPError.Code.digitalPresentmentInvalidUsageDescription(_:))
      {
        type metadata accessor for DIIdentityFatalError(0);
        uint64_t v31 = 2;
        sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
        sub_100445780(&qword_10071F968, type metadata accessor for DIIdentityFatalError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v13 = v32;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        unint64_t v12 = 0xD0000000000000F2;
        uint64_t v16 = "This app has crashed because it attempted to access privacy-sensitive data without a usage description. Th"
              "e app's Info.plist must contain an NSIdentityUsageDescription key with a string value explaining to the us"
              "er how the app uses this data.";
      }
      else if (v15 == enum case for DIPError.Code.digitalPresentmentInvalidFirstPartyValue(_:))
      {
        type metadata accessor for DIIdentityFatalError(0);
        uint64_t v31 = 3;
        sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
        sub_100445780(&qword_10071F968, type metadata accessor for DIIdentityFatalError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v13 = v32;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        unint64_t v12 = 0xD000000000000053;
        uint64_t v16 = "This app has crashed because one or more first-party values specified were invalid.";
      }
      else
      {
        unint64_t v26 = (void (**)(char *, uint64_t))(v6 + 8);
        if (v15 != enum case for DIPError.Code.digitalPresentmentRegionNotSupported(_:))
        {
          long long v27 = v9;
          unint64_t v12 = 0x6E776F6E6B6E55;
          type metadata accessor for DIIdentityError(0);
          uint64_t v31 = 0;
          sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
          sub_100445780(&qword_10071F9A0, type metadata accessor for DIIdentityError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v13 = v32;
          long long v28 = *v26;
          (*v26)(v11, v5);
          v28(v27, v5);
          goto LABEL_3;
        }
        type metadata accessor for DIIdentityError(0);
        uint64_t v31 = 8;
        sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
        sub_100445780(&qword_10071F9A0, type metadata accessor for DIIdentityError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v13 = v32;
        (*v26)(v11, v5);
        unint64_t v12 = 0xD000000000000026;
        uint64_t v16 = "The requested region is not supported.";
      }
    }
LABEL_18:
    unint64_t v14 = (unint64_t)(v16 - 32) | 0x8000000000000000;
    goto LABEL_19;
  }
  unint64_t v12 = 0x6E776F6E6B6E55;
  sub_1001746FC((uint64_t)v4);
  type metadata accessor for DIIdentityError(0);
  uint64_t v31 = 0;
  sub_1004446C8((uint64_t)_swiftEmptyArrayStorage);
  sub_100445780(&qword_10071F9A0, type metadata accessor for DIIdentityError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v13 = v32;
LABEL_3:
  unint64_t v14 = 0xE700000000000000;
LABEL_19:
  sub_100445734();
  uint64_t ErrorValue = swift_getErrorValue();
  uint64_t v19 = v30;
  uint64_t v20 = *(void *)(v30 - 8);
  __chkstk_darwin(ErrorValue);
  uint64_t v22 = (char *)v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v22);
  dispatch thunk of Error._domain.getter();
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  __chkstk_darwin(v23);
  v29[-4] = v13;
  v29[-3] = v12;
  v29[-2] = v14;
  uint64_t v24 = static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  return v24;
}

unint64_t sub_100445734()
{
  unint64_t result = qword_100724510;
  if (!qword_100724510)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100724510);
  }
  return result;
}

uint64_t sub_100445774()
{
  return sub_100444658();
}

uint64_t sub_100445780(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004457C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007257A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100445830()
{
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IdentityProofingPendingActionsWebService();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  id v5 = [objc_allocWithZone((Class)PKPaymentService) init];
  type metadata accessor for IdentityProofingConfigProvider();
  uint64_t v6 = swift_allocObject();
  type metadata accessor for IdentityProofingTextReplacementProvider();
  swift_allocObject();
  uint64_t v7 = IdentityProofingTextReplacementProvider.init()();
  type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  uint64_t v8 = swift_allocObject();
  type metadata accessor for IdentityProofingWorkflowProvider();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  type metadata accessor for IdentityProofingUserNotificationProvider();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = sub_1005EBED8((uint64_t)v5, (uint64_t)v20, v6, v7, v9, v10);
  uint64_t v12 = sub_1005E8390();
  type metadata accessor for IdentityProofingActionNotificationFlow();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  sub_1000309D0();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchQoS.QoSClass.default(_:), v0);
  uint64_t v14 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v15 = sub_1005EC0D0(0, v13, v14);
  uint64_t v16 = sub_1005E860C();
  if (qword_10071F580 != -1) {
    swift_once();
  }
  long long v17 = (void *)qword_1007607E8;
  type metadata accessor for IdentityWatchProvisioningManagerFactory();
  uint64_t v18 = swift_allocObject();
  type metadata accessor for IdentityProofingPendingActionsFlow();
  swift_allocObject();
  return sub_100473B6C(1, v4, v11, v12, 0, v15, (uint64_t)v16, v17, 0, v18);
}

void *sub_100445B04@<X0>(void *a1@<X8>)
{
  type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  uint64_t v2 = swift_allocObject();
  type metadata accessor for IdentityProofingWorkflowProvider();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  type metadata accessor for IdentityProofingConfigProvider();
  uint64_t v4 = swift_allocObject();
  id v5 = [objc_allocWithZone((Class)PKPaymentService) init:0:0];
  uint64_t v6 = swift_allocObject();
  type metadata accessor for IdentityProofingTextReplacementProvider();
  swift_allocObject();
  uint64_t v7 = IdentityProofingTextReplacementProvider.init()();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  type metadata accessor for IdentityProofingUserNotificationProvider();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = sub_1005EBED8((uint64_t)v5, (uint64_t)&v13, v6, v7, v9, v10);
  a1[3] = &type metadata for IdentityProofingConnectToWifiAlertProvider;
  a1[4] = &off_100706028;
  uint64_t result = (void *)swift_allocObject();
  *a1 = result;
  result[2] = v3;
  result[3] = v4;
  result[4] = v11;
  result[5] = 0x4024000000000000;
  return result;
}

uint64_t sub_100445C90()
{
  uint64_t v0 = sub_100445CD0();
  type metadata accessor for IdentityProofingBackgroundActivityManager();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  qword_100760780 = result;
  return result;
}

void *sub_100445CD0()
{
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IdentityProofingBackgroundActivityScheduler();
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = 3600;
  type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  uint64_t v7 = swift_allocObject();
  type metadata accessor for IdentityProofingWorkflowProvider();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  type metadata accessor for IdentityProofingUploadsHelper();
  uint64_t v9 = swift_allocObject();
  type metadata accessor for NetworkMonitor();
  *(void *)(v9 + 16) = static NetworkMonitor.shared.getter();
  *(void *)(v9 + 24) = v8;
  type metadata accessor for DIPBackgroundActivityManager();
  uint64_t v37 = static DIPBackgroundActivityManager.sharedInstance.getter();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  uint64_t v39 = v6;
  static Locale.current.getter();
  uint64_t v10 = swift_allocObject();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v10;
  type metadata accessor for IdentityProofingAttributeConfigHelper();
  swift_allocObject();
  uint64_t v11 = IdentityProofingAttributeConfigHelper.init()();
  type metadata accessor for IdentityProofingAssetsProvider();
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v11;
  if (qword_10071F460 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1007600E0;
  swift_retain();
  uint64_t v34 = sub_100445830();
  sub_100445B04(v41);
  type metadata accessor for IdentityProofingDatabaseProvider();
  uint64_t v13 = swift_allocObject();
  id v14 = [objc_allocWithZone((Class)PKPaymentService) init];
  type metadata accessor for IdentityPendingProvisioningManager();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  *(void *)(v15 + 24) = v14;
  type metadata accessor for PassManager();
  uint64_t v16 = swift_allocObject();
  type metadata accessor for IdentityProofingActionNotificationFlow();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0;
  sub_1000309D0();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchQoS.QoSClass.default(_:), v0);
  uint64_t v18 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v19 = sub_1005EC0D0(0, v17, v18);
  uint64_t v20 = sub_1000279F4((uint64_t)v41, v41[3]);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v23 + 16))(v22);
  uint64_t v24 = *((void *)v22 + 2);
  uint64_t v25 = *((void *)v22 + 3);
  v40[3] = &type metadata for IdentityProofingConnectToWifiAlertProvider;
  _OWORD v40[4] = &off_100706028;
  uint64_t v26 = swift_allocObject();
  v40[0] = v26;
  *(_OWORD *)(v26 + 16) = *(_OWORD *)v22;
  *(void *)(v26 + 32) = v24;
  *(void *)(v26 + 40) = v25;
  type metadata accessor for IdentityProofingBackgroundActivityProvider();
  long long v27 = (void *)swift_allocObject();
  uint64_t v28 = sub_1000279F4((uint64_t)v40, (uint64_t)&type metadata for IdentityProofingConnectToWifiAlertProvider);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v34 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v31 + 16))(v30);
  uint64_t v32 = sub_1004463E8(v38, v9, v37, v42, (uint64_t)v39, v36, v35, v12, *((double *)v30 + 3), v34, *(_OWORD *)v30, *((void *)v30 + 2), v15, v16, v19, v27);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v40);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v41);
  return v32;
}

uint64_t sub_100446248()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100030A10(v1 + 40, (uint64_t)v3);
  sub_10000C728(v3, v4);
  swift_retain_n();
  dispatch thunk of DIPBackgroundActivityManagerProtocol.registerActivity(identifier:activity:)();
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v3);
  sub_100030A10(v1 + 40, (uint64_t)v3);
  sub_10000C728(v3, v4);
  swift_retain();
  dispatch thunk of DIPBackgroundActivityManagerProtocol.registerActivity(identifier:activity:)();
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v3);
  return swift_release();
}

uint64_t type metadata accessor for IdentityProofingBackgroundActivityManager()
{
  return self;
}

uint64_t sub_1004463A0()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void *sub_1004463E8(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  uint64_t v33 = type metadata accessor for DIPBackgroundActivityManager();
  uint64_t v34 = &protocol witness table for DIPBackgroundActivityManager;
  *(void *)&long long v32 = a3;
  uint64_t v30 = &type metadata for IdentityProofingConnectToWifiAlertProvider;
  uint64_t v31 = &off_100706028;
  uint64_t v24 = swift_allocObject();
  *(void *)&long long v29 = v24;
  *(_OWORD *)(v24 + 16) = a11;
  *(void *)(v24 + 32) = a12;
  *(double *)(v24 + 40) = a9;
  a16[2] = &off_1006F11D8;
  a16[3] = a1;
  a16[4] = a2;
  sub_10000C6B4(&v32, (uint64_t)(a16 + 5));
  sub_10000C6B4(a4, (uint64_t)(a16 + 10));
  uint64_t v25 = (char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_locale;
  uint64_t v26 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v25, a5, v26);
  *(void *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_workflowProvider) = a6;
  *(void *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_assetProvider) = a7;
  *(void *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_proofingUpdateManager) = a8;
  *(void *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_pendingActionsFlow) = a10;
  sub_10000C6B4(&v29, (uint64_t)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_connectToWifiAlertProvider);
  *(void *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_pendingProvisioning) = a13;
  *(void *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_passManager) = a14;
  *(void *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_cleanupProvider) = a15;
  return a16;
}

uint64_t sub_1004465C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025D64;
  return sub_1000E0038(a1, a2);
}

uint64_t sub_10044666C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000C494;
  return sub_1000E0038(a1, a2);
}

uint64_t sub_100446714()
{
  v1[94] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[95] = v2;
  v1[96] = *(void *)(v2 - 8);
  v1[97] = swift_task_alloc();
  v1[98] = swift_task_alloc();
  v1[99] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CoreIDVFeatureFlag();
  v1[100] = v3;
  v1[101] = *(void *)(v3 - 8);
  v1[102] = swift_task_alloc();
  return _swift_task_switch(sub_10044684C, 0, 0);
}

uint64_t sub_10044684C()
{
  uint64_t v1 = v0[102];
  uint64_t v2 = v0[101];
  uint64_t v3 = v0[100];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for CoreIDVFeatureFlag.krl(_:), v3);
  char v4 = FeatureFlagProvider.isEnabled(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 1) == 0)
  {
    defaultLogger()();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v12, "KRL FeatureFlag is disabled; KRL is disabled", v13, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = v0[97];
    goto LABEL_9;
  }
  id v5 = [self standardUserDefaults];
  v6._object = (void *)0x800000010064C850;
  v6._uint64_t countAndFlagsBits = 0xD000000000000015;
  Swift::Bool v7 = NSUserDefaults.internalBool(forKey:)(v6);

  if (v7)
  {
    defaultLogger()();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Internal settings forced disabled KRL; KRL is disabled",
        v10,
        2u);
      swift_slowDealloc();
    }
    uint64_t v11 = v0[99];
LABEL_9:
    uint64_t v14 = v0[96];
    uint64_t v15 = v0[95];

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16(0);
  }
  uint64_t v18 = (void *)swift_task_alloc();
  v0[103] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100446B28;
  v18[377] = v0 + 48;
  return _swift_task_switch(sub_100446DB8, 0, 0);
}

uint64_t sub_100446B28()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100446C24, 0, 0);
}

uint64_t sub_100446C24()
{
  sub_1000BEA14(v0 + 384, v0 + 16, &qword_100729958);
  if (sub_100447190(v0 + 16) != 1
    && (char v1 = *(unsigned char *)(v0 + 361), sub_1002B66AC((uint64_t *)(v0 + 384)), (v1 & 1) != 0))
  {
    defaultLogger()();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Active config disabled KRL; KRL is disabled", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = *(void *)(v0 + 784);
    uint64_t v7 = *(void *)(v0 + 768);
    uint64_t v8 = *(void *)(v0 + 760);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 1;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v9(v2);
}

uint64_t sub_100446D98(uint64_t a1)
{
  *(void *)(v1 + 3016) = a1;
  return _swift_task_switch(sub_100446DB8, 0, 0);
}

uint64_t sub_100446DB8()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 52;
  os_unfair_lock_lock(v1 + 52);
  sub_1000262B4(v2, (_OWORD *)(v0 + 2784));
  os_unfair_lock_unlock(v3);
  sub_100030A10(v0 + 2784, v0 + 2976);
  sub_1000262D0(v0 + 2784);
  sub_10000C728((void *)(v0 + 2976), *(void *)(v0 + 3000));
  os_log_type_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 3024) = v4;
  *os_log_type_t v4 = v0;
  v4[1] = sub_100446F20;
  return sub_100141B30(v0 + 880);
}

uint64_t sub_100446F20()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10044701C, 0, 0);
}

uint64_t sub_10044701C()
{
  sub_1000BEA14(v0 + 880, v0 + 448, &qword_100722350);
  if (sub_100044CCC(v0 + 448) == 1)
  {
    sub_100447154((_OWORD *)(v0 + 1680));
    uint64_t v1 = v0 + 1680;
  }
  else
  {
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    memcpy((void *)(v0 + 2416), (const void *)(v0 + 48), 0x169uLL);
    sub_100044CE4(v0 + 2416);
    sub_100044D90((uint64_t *)(v0 + 880));
    memcpy((void *)(v0 + 2048), (const void *)(v0 + 2416), 0x169uLL);
    nullsub_7(v0 + 2048);
    uint64_t v1 = v0 + 2048;
  }
  sub_1000BEA14(v1, v0 + 1312, &qword_100729958);
  uint64_t v2 = *(void *)(v0 + 3016);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 2976);
  sub_1000BEA14(v0 + 1312, v2, &qword_100729958);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

double sub_100447154(_OWORD *a1)
{
  double result = 0.0;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  *(_OWORD *)((char *)a1 + 345) = 0u;
  return result;
}

uint64_t sub_100447190(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1004471A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004471BC);
}

uint64_t sub_1004471BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureFlagProvider();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100447228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10044723C);
}

uint64_t sub_10044723C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureFlagProvider();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for KRLConfigurationProvider()
{
  uint64_t result = qword_10072EAE0;
  if (!qword_10072EAE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004472F8()
{
  uint64_t v0 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  sub_10004440C((uint64_t)v0, qword_10072EB18);
  unint64_t v1 = (void *)sub_1000443D4((uint64_t)v0, (uint64_t)qword_10072EB18);
  uint64_t v2 = (void *)((char *)v1 + v0[6]);
  *uint64_t v2 = 0x3FF0000000000000;
  uint64_t v3 = enum case for DIPBackoffStrategy.exponential(_:);
  uint64_t v4 = type metadata accessor for DIPBackoffStrategy();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(v2, v3, v4);
  void *v1 = 0x4024000000000000;
  v1[1] = 3;
  *((unsigned char *)v1 + v0[7]) = 0;
  *((unsigned char *)v1 + v0[8]) = 0;
  *((unsigned char *)v1 + v0[9]) = 1;
  uint64_t v6 = (void *)((char *)v1 + v0[10]);
  *uint64_t v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t sub_1004473D4(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  v2[8] = sub_100007764(&qword_100722D90);
  v2[9] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Milestone();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for COSE_Sign1();
  v2[19] = v5;
  v2[20] = *(void *)(v5 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v2[22] = v6;
  v2[23] = *(void *)(v6 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URLRequest();
  v2[25] = v7;
  v2[26] = *(void *)(v7 - 8);
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_100447684, 0, 0);
}

uint64_t sub_100447684()
{
  if (qword_10071F5A0 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = (void *)qword_100760850;
  (*(void (**)(void, uint64_t, void))(v0[23] + 16))(v0[24], v0[7] + OBJC_IVAR____TtC8coreidvd15VICALWebService_url, v0[22]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 cachedResponseForRequest:isa];
  v0[28] = v6;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6)
  {
    id v7 = [v6 data];
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    sub_10002CEB0(v8, v10);
    COSE_Sign1.init(fromHexData:)();
    uint64_t v33 = v0[7];
    sub_10000C5F4(v8, v10);
    uint64_t v34 = (void *)(v33 + OBJC_IVAR____TtC8coreidvd15VICALWebService_validator);
    uint64_t v35 = *(void *)(v33 + OBJC_IVAR____TtC8coreidvd15VICALWebService_validator + 24);
    uint64_t v36 = *(void *)(v33 + OBJC_IVAR____TtC8coreidvd15VICALWebService_validator + 32);
    sub_10000C728(v34, v35);
    uint64_t v37 = (void *)swift_task_alloc();
    v0[29] = v37;
    uint64_t v38 = type metadata accessor for VICALDocument();
    uint64_t v39 = sub_10044B318(&qword_100725328, (void (*)(uint64_t))&type metadata accessor for VICALDocument);
    sub_10044B318(&qword_10072EB78, (void (*)(uint64_t))&type metadata accessor for VICALDocument);
    void *v37 = v0;
    v37[1] = sub_100448194;
    uint64_t v40 = v0[21];
    uint64_t v41 = v0[6];
    return sub_10000A8B0(v41, v40, v35, v38, v36, v39);
  }
  uint64_t v12 = v0[17];
  uint64_t v11 = v0[18];
  uint64_t v13 = v0[15];
  uint64_t v14 = v0[16];
  uint64_t v15 = v0[13];
  uint64_t v16 = v0[14];
  static VICALMilestone.missingDocument.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v15);
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v11, enum case for DIPError.Code.vicalMissing(_:), v14);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10044B318((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  uint64_t v17 = v0[17];
  uint64_t v18 = v0[11];
  uint64_t v52 = v0[12];
  uint64_t v53 = v0[16];
  uint64_t v19 = v0[9];
  uint64_t v55 = v0[8];
  swift_getErrorValue();
  uint64_t v20 = v0[2];
  uint64_t v21 = v0[3];
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v23, v20, v21);
  swift_errorRetain();
  Error.dipErrorCode.getter();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v21);
  char v56 = *(void (**)(uint64_t, void, uint64_t))(v17 + 104);
  v56(v18, enum case for DIPError.Code.coseCannotParseResponse(_:), v53);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v18, 0, 1, v53);
  uint64_t v24 = v19 + *(int *)(v55 + 48);
  sub_100174A64(v52, v19);
  sub_100174A64(v18, v24);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  int v26 = v25(v19, 1, v53);
  uint64_t v27 = v0[16];
  if (v26 == 1)
  {
    uint64_t v28 = v0[12];
    sub_10000C6CC(v0[11], &qword_100723600);
    sub_10000C6CC(v28, &qword_100723600);
    if (v25(v24, 1, v27) == 1)
    {
      sub_10000C6CC(v0[9], &qword_100723600);
      swift_task_dealloc();
LABEL_15:
      v56(v0[18], enum case for DIPError.Code.vicalCannotParseDocument(_:), v0[16]);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10044B318((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_errorRelease();
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  sub_100174A64(v0[9], v0[10]);
  if (v25(v24, 1, v27) == 1)
  {
    uint64_t v29 = v0[16];
    uint64_t v30 = v0[17];
    uint64_t v31 = v0[12];
    uint64_t v32 = v0[10];
    sub_10000C6CC(v0[11], &qword_100723600);
    sub_10000C6CC(v31, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v29);
LABEL_10:
    sub_10000C6CC(v0[9], &qword_100722D90);
    swift_task_dealloc();
    goto LABEL_16;
  }
  uint64_t v44 = v0[17];
  uint64_t v43 = v0[18];
  uint64_t v45 = v0[16];
  uint64_t v47 = v0[11];
  uint64_t v46 = v0[12];
  uint64_t v48 = v0[10];
  uint64_t v54 = v0[9];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v43, v24, v45);
  sub_10044B318(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v50 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v50(v43, v45);
  sub_10000C6CC(v47, &qword_100723600);
  sub_10000C6CC(v46, &qword_100723600);
  v50(v48, v45);
  sub_10000C6CC(v54, &qword_100723600);
  swift_task_dealloc();
  if (v49) {
    goto LABEL_15;
  }
LABEL_16:
  v56(v0[18], enum case for DIPError.Code.vicalMissing(_:), v0[16]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10044B318((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = (uint64_t (*)(void))v0[1];
  return v51();
}

uint64_t sub_100448194()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004483AC;
  }
  else {
    uint64_t v2 = sub_1004482A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004482A8()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1004483AC()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v31 = *(void *)(v0 + 96);
  uint64_t v33 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v34 = *(void *)(v0 + 64);
  swift_getErrorValue();
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v7, v8);
  swift_errorRetain();
  Error.dipErrorCode.getter();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
  uint64_t v11 = *(void (**)(uint64_t, void, uint64_t))(v4 + 104);
  v11(v5, enum case for DIPError.Code.coseCannotParseResponse(_:), v33);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v5, 0, 1, v33);
  uint64_t v12 = v6 + *(int *)(v34 + 48);
  sub_100174A64(v31, v6);
  sub_100174A64(v5, v12);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  int v14 = v13(v6, 1, v33);
  uint64_t v15 = *(void *)(v0 + 128);
  if (v14 != 1)
  {
    uint64_t v35 = v11;
    sub_100174A64(*(void *)(v0 + 72), *(void *)(v0 + 80));
    if (v13(v12, 1, v15) != 1)
    {
      uint64_t v22 = *(void *)(v0 + 136);
      uint64_t v21 = *(void *)(v0 + 144);
      uint64_t v23 = *(void *)(v0 + 128);
      uint64_t v25 = *(void *)(v0 + 88);
      uint64_t v24 = *(void *)(v0 + 96);
      uint64_t v26 = *(void *)(v0 + 80);
      uint64_t v32 = *(void *)(v0 + 72);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v12, v23);
      sub_10044B318(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
      char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v28(v21, v23);
      sub_10000C6CC(v25, &qword_100723600);
      sub_10000C6CC(v24, &qword_100723600);
      v28(v26, v23);
      sub_10000C6CC(v32, &qword_100723600);
      swift_task_dealloc();
      uint64_t v11 = v35;
      if ((v27 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v17 = *(void *)(v0 + 128);
    uint64_t v18 = *(void *)(v0 + 136);
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 80);
    sub_10000C6CC(*(void *)(v0 + 88), &qword_100723600);
    sub_10000C6CC(v19, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v17);
    uint64_t v11 = v35;
LABEL_6:
    sub_10000C6CC(*(void *)(v0 + 72), &qword_100722D90);
    swift_task_dealloc();
    goto LABEL_9;
  }
  uint64_t v16 = *(void *)(v0 + 96);
  sub_10000C6CC(*(void *)(v0 + 88), &qword_100723600);
  sub_10000C6CC(v16, &qword_100723600);
  if (v13(v12, 1, v15) != 1) {
    goto LABEL_6;
  }
  sub_10000C6CC(*(void *)(v0 + 72), &qword_100723600);
  swift_task_dealloc();
LABEL_8:
  v11(*(void *)(v0 + 144), enum case for DIPError.Code.vicalCannotParseDocument(_:), *(void *)(v0 + 128));
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10044B318((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_errorRelease();
LABEL_9:
  v11(*(void *)(v0 + 144), enum case for DIPError.Code.vicalMissing(_:), *(void *)(v0 + 128));
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10044B318((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_100448A34()
{
  v1[11] = v0;
  v1[12] = sub_100007764(&qword_100722D90);
  v1[13] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for VICALDocument();
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for COSE_Sign1();
  v1[20] = v3;
  v1[21] = *(void *)(v3 - 8);
  v1[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v1[23] = v4;
  v1[24] = *(void *)(v4 - 8);
  v1[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v1[26] = v5;
  v1[27] = *(void *)(v5 - 8);
  v1[28] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URLRequest();
  v1[29] = v6;
  v1[30] = *(void *)(v6 - 8);
  v1[31] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v1[32] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPSignpost();
  v1[33] = v7;
  v1[34] = *(void *)(v7 - 8);
  v1[35] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Milestone();
  v1[36] = v8;
  v1[37] = *(void *)(v8 - 8);
  v1[38] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v1[39] = v9;
  v1[40] = *(void *)(v9 - 8);
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  return _swift_task_switch(sub_100448E40, 0, 0);
}

uint64_t sub_100448E40()
{
  uint64_t v31 = v0;
  uint64_t v1 = (void *)v0[11];
  defaultLogger()();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v26 = v0[39];
    uint64_t v27 = v0[43];
    uint64_t v25 = v0[40];
    uint64_t v5 = (void *)v0[11];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_10044B318((unint64_t *)&qword_100723C08, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[10] = sub_100110D58(v7, v8, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "VICALWebService loadVICALDocument at URL %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v9(v27, v26);
  }
  else
  {
    uint64_t v10 = v0[43];
    uint64_t v11 = v0[39];
    uint64_t v12 = v0[40];
    uint64_t v13 = (void *)v0[11];

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  v0[44] = v9;
  uint64_t v15 = v0[37];
  uint64_t v14 = v0[38];
  uint64_t v16 = v0[36];
  uint64_t v18 = v0[27];
  uint64_t v17 = v0[28];
  uint64_t v28 = v0[26];
  uint64_t v19 = v0[11];
  static VICALMilestone.loadDocument.getter();
  Milestone.log()();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v0[45] = v20;
  v0[46] = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v20(v14, v16);
  static DaemonSignposts.VICAL.loadDocument.getter();
  DIPSignpost.init(_:)();
  uint64_t v21 = OBJC_IVAR____TtC8coreidvd15VICALWebService_url;
  v0[47] = OBJC_IVAR____TtC8coreidvd15VICALWebService_url;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v19 + v21, v28);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.cachePolicy.setter();
  URLRequest.httpMethod.setter();
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  uint64_t v22 = (void *)swift_task_alloc();
  v0[48] = v22;
  void *v22 = v0;
  v22[1] = sub_1004491AC;
  uint64_t v23 = v0[31];
  return v29(v23, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
}

uint64_t sub_1004491AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = *v5;
  *(void *)(v6 + 392) = a1;
  *(void *)(v6 + 400) = a2;
  *(unsigned char *)(v6 + 456) = a4;
  *(void *)(v6 + 408) = a3;
  *(void *)(v6 + 416) = v4;
  swift_task_dealloc();
  if (v4) {
    uint64_t v7 = sub_100449BF8;
  }
  else {
    uint64_t v7 = sub_1004492C8;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1004492C8()
{
  char v1 = *(unsigned char *)(v0 + 456);
  unint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void **)(v0 + 408);
  uint64_t v4 = *(void *)(v0 + 392);
  sub_10002CEB0(v4, v2);
  id v5 = v3;
  uint64_t v6 = sub_10044B360(v4, v2);
  unint64_t v8 = v7;
  *(void *)(v0 + 424) = v6;
  *(void *)(v0 + 432) = v7;
  sub_10000C5F4(v4, v2);
  if (v1) {
    static VICALMilestone.cacheReturnedDocument.getter();
  }
  else {
    static VICALMilestone.cdnReturnedDocument.getter();
  }
  uint64_t v9 = *(void *)(v0 + 416);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
  uint64_t v11 = *(void *)(v0 + 304);
  uint64_t v12 = *(void *)(v0 + 288);
  Milestone.log()();
  v10(v11, v12);
  sub_10002CEB0(v6, v8);
  COSE_Sign1.init(fromHexData:)();
  if (v9)
  {
    uint64_t v13 = *(void **)(v0 + 408);
    unsigned int v63 = enum case for DIPError.Code.vicalCannotParseDocument(_:);
    (*(void (**)(void))(*(void *)(v0 + 192) + 104))(*(void *)(v0 + 200));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10044B318((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_10000C5F4(v6, v8);

    unint64_t v64 = (char *)(v0 + 456);
    if (*(unsigned char *)(v0 + 456))
    {
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      uint64_t v14 = (void *)qword_100760850;
      Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
      [v14 removeCachedResponseForRequest:isa, 0xD000000000000019, 0x800000010064C9D0, 185];
    }
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 192);
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 104);
    swift_getErrorValue();
    Error.dipErrorCode.getter();
    uint64_t v66 = *(void (**)(uint64_t, void, uint64_t))(v17 + 104);
    v66(v19, enum case for DIPError.Code.coseCannotParseResponse(_:), v16);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v16);
    uint64_t v22 = v20 + *(int *)(v21 + 48);
    sub_100174A64(v18, v20);
    sub_100174A64(v19, v22);
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    int v24 = v23(v20, 1, v16);
    uint64_t v25 = *(void *)(v0 + 184);
    if (v24 == 1)
    {
      uint64_t v26 = *(void *)(v0 + 128);
      sub_10000C6CC(*(void *)(v0 + 120), &qword_100723600);
      sub_10000C6CC(v26, &qword_100723600);
      uint64_t v27 = v66;
      if (v23(v22, 1, v25) == 1)
      {
        sub_10000C6CC(*(void *)(v0 + 104), &qword_100723600);
LABEL_19:
        char v49 = *v64;
        unint64_t v65 = *(void *)(v0 + 400);
        unint64_t v60 = *(void **)(v0 + 408);
        uint64_t v62 = *(void *)(v0 + 392);
        v27(*(void *)(v0 + 200), v63, *(void *)(v0 + 184));
        swift_errorRetain();
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
        DIPSignpost.end(fromCache:)(v49);

        sub_10000C5F4(v62, v65);
LABEL_21:
        uint64_t v55 = *(void *)(v0 + 272);
        uint64_t v54 = *(void *)(v0 + 280);
        uint64_t v56 = *(void *)(v0 + 264);
        uint64_t v57 = *(void *)(v0 + 200);
        uint64_t v58 = *(void *)(v0 + 184);
        (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
        v66(v57, enum case for DIPError.Code.vicalCouldNotFetch(_:), v58);
        swift_errorRetain();
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v59 = *(uint64_t (**)(void))(v0 + 8);
        return v59();
      }
    }
    else
    {
      sub_100174A64(*(void *)(v0 + 104), *(void *)(v0 + 112));
      if (v23(v22, 1, v25) != 1)
      {
        uint64_t v42 = *(void *)(v0 + 192);
        uint64_t v41 = *(void *)(v0 + 200);
        uint64_t v43 = *(void *)(v0 + 184);
        uint64_t v45 = *(void *)(v0 + 120);
        uint64_t v44 = *(void *)(v0 + 128);
        uint64_t v46 = *(void *)(v0 + 112);
        uint64_t v61 = *(void *)(v0 + 104);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v41, v22, v43);
        sub_10044B318(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
        char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        v48(v41, v43);
        sub_10000C6CC(v45, &qword_100723600);
        sub_10000C6CC(v44, &qword_100723600);
        v48(v46, v43);
        sub_10000C6CC(v61, &qword_100723600);
        uint64_t v27 = v66;
        if (v47) {
          goto LABEL_19;
        }
LABEL_20:
        char v50 = *v64;
        unint64_t v51 = *(void *)(v0 + 400);
        uint64_t v52 = *(void **)(v0 + 408);
        uint64_t v53 = *(void *)(v0 + 392);
        swift_willThrow();
        DIPSignpost.end(fromCache:)(v50);

        sub_10000C5F4(v53, v51);
        goto LABEL_21;
      }
      uint64_t v37 = *(void *)(v0 + 184);
      uint64_t v38 = *(void *)(v0 + 192);
      uint64_t v39 = *(void *)(v0 + 128);
      uint64_t v40 = *(void *)(v0 + 112);
      sub_10000C6CC(*(void *)(v0 + 120), &qword_100723600);
      sub_10000C6CC(v39, &qword_100723600);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v37);
    }
    sub_10000C6CC(*(void *)(v0 + 104), &qword_100722D90);
    goto LABEL_20;
  }
  uint64_t v28 = (void *)(*(void *)(v0 + 88) + OBJC_IVAR____TtC8coreidvd15VICALWebService_validator);
  uint64_t v30 = v28[3];
  uint64_t v29 = v28[4];
  sub_10000C728(v28, v30);
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 440) = v31;
  uint64_t v32 = sub_10044B318(&qword_100725328, (void (*)(uint64_t))&type metadata accessor for VICALDocument);
  sub_10044B318(&qword_10072EB78, (void (*)(uint64_t))&type metadata accessor for VICALDocument);
  *uint64_t v31 = v0;
  v31[1] = sub_100449FE4;
  uint64_t v33 = *(void *)(v0 + 176);
  uint64_t v34 = *(void *)(v0 + 152);
  uint64_t v35 = *(void *)(v0 + 136);
  return sub_10000A8B0(v34, v33, v30, v35, v29, v32);
}

uint64_t sub_100449BF8()
{
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v2 = v0[24];
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  sub_10044B318((unint64_t *)&qword_100723C08, (void (*)(uint64_t))&type metadata accessor for URL);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void (**)(uint64_t, void, uint64_t))(v2 + 104);
  v13(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10044B318((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(fromCache:)(0);
  uint64_t v6 = v0[34];
  uint64_t v5 = v0[35];
  uint64_t v7 = v0[33];
  uint64_t v8 = v0[25];
  uint64_t v9 = v0[23];
  (*(void (**)(void, void, uint64_t))(v0[30] + 8))(v0[31], v0[29], v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v13(v8, enum case for DIPError.Code.vicalCouldNotFetch(_:), v9);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100449FE4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 448) = v0;
  swift_task_dealloc();
  if (v0)
  {

    uint64_t v3 = sub_10044A70C;
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v2 + 144) + 8))(*(void *)(v2 + 152), *(void *)(v2 + 136));
    uint64_t v3 = sub_10044A118;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10044A118()
{
  if (*(unsigned char *)(v0 + 456))
  {

    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "VICALWebService found VICAL response in cache", v3, 2u);
      swift_slowDealloc();
    }
    Swift::String v4 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v5 = *(void *)(v0 + 328);
    uint64_t v6 = *(void *)(v0 + 312);
    sub_10000C5F4(*(void *)(v0 + 424), *(void *)(v0 + 432));

    v4(v5, v6);
  }
  else
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v9 = *(void *)(v0 + 288);
    static VICALMilestone.storeDocument.getter();
    Milestone.log()();
    v7(v8, v9);
    id v10 = [self standardUserDefaults];
    v11._uint64_t countAndFlagsBits = 0xD000000000000022;
    v11._object = (void *)0x800000010064CA30;
    object = NSUserDefaults.internalString(forKey:)(v11).value._object;

    if (object
      && (uint64_t v13 = (void *)sub_10058F57C(0xD000000000000019, 0x8000000100636B30), swift_bridgeObjectRelease(), v13))
    {

      defaultLogger()();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "VICALWebService cache control override found, overriding and caching.", v16, 2u);
        swift_slowDealloc();
      }
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
      uint64_t v18 = *(void *)(v0 + 336);
      uint64_t v19 = *(void *)(v0 + 312);

      v17(v18, v19);
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      uint64_t v21 = *(void *)(v0 + 424);
      unint64_t v20 = *(void *)(v0 + 432);
      uint64_t v22 = qword_100760850;
      id v23 = objc_allocWithZone((Class)NSCachedURLResponse);
      sub_10002CEB0(v21, v20);
      id v24 = v13;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      Class v26 = (Class)[v23 initWithResponse:v24 data:isa];
      sub_10000C5F4(v21, v20);

      id v27 = sub_1005200D8(v26, 1);
      if (v27)
      {
        uint64_t v28 = v27;
        Class v29 = URLRequest._bridgeToObjectiveC()().super.isa;
        uint64_t v30 = type metadata accessor for DIPURLCache();
        *(void *)(v0 + 56) = v22;
        *(void *)(v0 + 64) = v30;
        [super storeCachedResponse:v28 forRequest:v29];

        Class v26 = v29;
      }
      uint64_t v32 = *(void *)(v0 + 424);
      unint64_t v31 = *(void *)(v0 + 432);

      sub_10000C5F4(v32, v31);
    }
    else
    {
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      uint64_t v34 = *(void *)(v0 + 424);
      unint64_t v33 = *(void *)(v0 + 432);
      uint64_t v35 = *(void **)(v0 + 408);
      uint64_t v36 = qword_100760850;
      id v37 = objc_allocWithZone((Class)NSCachedURLResponse);
      id v38 = v35;
      sub_10002CEB0(v34, v33);
      Class v39 = Data._bridgeToObjectiveC()().super.isa;
      Class v40 = (Class)[v37 initWithResponse:v38 data:v39];
      sub_10000C5F4(v34, v33);

      id v41 = sub_1005200D8(v40, 1);
      if (v41)
      {
        uint64_t v42 = v41;
        Class v43 = URLRequest._bridgeToObjectiveC()().super.isa;
        uint64_t v44 = type metadata accessor for DIPURLCache();
        *(void *)(v0 + 40) = v36;
        *(void *)(v0 + 48) = v44;
        [super storeCachedResponse:v42 forRequest:v43];

        Class v40 = v43;
      }
      uint64_t v46 = *(void *)(v0 + 424);
      unint64_t v45 = *(void *)(v0 + 432);
      char v47 = *(void **)(v0 + 408);

      sub_10000C5F4(v46, v45);
    }
  }
  uint64_t v48 = *(unsigned __int8 *)(v0 + 456);
  unint64_t v49 = *(void *)(v0 + 400);
  char v50 = *(void **)(v0 + 408);
  uint64_t v51 = *(void *)(v0 + 392);
  uint64_t v53 = *(void *)(v0 + 272);
  uint64_t v52 = *(void *)(v0 + 280);
  uint64_t v59 = *(void *)(v0 + 264);
  uint64_t v54 = *(void *)(v0 + 248);
  uint64_t v56 = *(void *)(v0 + 232);
  uint64_t v55 = *(void *)(v0 + 240);
  (*(void (**)(void))(*(void *)(v0 + 168) + 8))();
  DIPSignpost.end(fromCache:)(v48);

  sub_10000C5F4(v51, v49);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v59);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v57 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v57(v48);
}

uint64_t sub_10044A70C()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  sub_10000C5F4(*(void *)(v0 + 424), *(void *)(v0 + 432));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (*(unsigned char *)(v0 + 456))
  {
    if (qword_10071F5A0 != -1) {
      swift_once();
    }
    Swift::String v4 = (void *)qword_100760850;
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    [v4 removeCachedResponseForRequest:isa];
  }
  unint64_t v45 = (char *)(v0 + 456);
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 104);
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  char v47 = *(void (**)(uint64_t, void, uint64_t))(v7 + 104);
  v47(v9, enum case for DIPError.Code.coseCannotParseResponse(_:), v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  uint64_t v12 = v11 + *(int *)(v10 + 48);
  sub_100174A64(v8, v11);
  sub_100174A64(v9, v12);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v14 = v13(v11, 1, v6);
  uint64_t v15 = *(void *)(v0 + 184);
  if (v14 == 1)
  {
    uint64_t v16 = *(void *)(v0 + 128);
    sub_10000C6CC(*(void *)(v0 + 120), &qword_100723600);
    sub_10000C6CC(v16, &qword_100723600);
    uint64_t v17 = v47;
    if (v13(v12, 1, v15) == 1)
    {
      sub_10000C6CC(*(void *)(v0 + 104), &qword_100723600);
LABEL_12:
      char v31 = *v45;
      uint64_t v32 = *(void *)(v0 + 392);
      uint64_t v44 = *(void **)(v0 + 408);
      unint64_t v46 = *(void *)(v0 + 400);
      v17(*(void *)(v0 + 200), enum case for DIPError.Code.vicalCannotParseDocument(_:), *(void *)(v0 + 184));
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10044B318((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      DIPSignpost.end(fromCache:)(v31);

      sub_10000C5F4(v32, v46);
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  sub_100174A64(*(void *)(v0 + 104), *(void *)(v0 + 112));
  if (v13(v12, 1, v15) == 1)
  {
    uint64_t v19 = *(void *)(v0 + 184);
    uint64_t v18 = *(void *)(v0 + 192);
    uint64_t v20 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 112);
    sub_10000C6CC(*(void *)(v0 + 120), &qword_100723600);
    sub_10000C6CC(v20, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v19);
LABEL_10:
    sub_10000C6CC(*(void *)(v0 + 104), &qword_100722D90);
    goto LABEL_13;
  }
  uint64_t v23 = *(void *)(v0 + 192);
  uint64_t v22 = *(void *)(v0 + 200);
  uint64_t v24 = *(void *)(v0 + 184);
  uint64_t v26 = *(void *)(v0 + 120);
  uint64_t v25 = *(void *)(v0 + 128);
  uint64_t v28 = *(void *)(v0 + 104);
  uint64_t v27 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v22, v12, v24);
  sub_10044B318(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v30(v22, v24);
  sub_10000C6CC(v26, &qword_100723600);
  sub_10000C6CC(v25, &qword_100723600);
  v30(v27, v24);
  sub_10000C6CC(v28, &qword_100723600);
  uint64_t v17 = v47;
  if (v29) {
    goto LABEL_12;
  }
LABEL_13:
  char v33 = *v45;
  unint64_t v35 = *(void *)(v0 + 400);
  uint64_t v34 = *(void **)(v0 + 408);
  uint64_t v36 = *(void *)(v0 + 392);
  swift_willThrow();
  DIPSignpost.end(fromCache:)(v33);

  sub_10000C5F4(v36, v35);
LABEL_14:
  uint64_t v37 = *(void *)(v0 + 272);
  uint64_t v38 = *(void *)(v0 + 280);
  uint64_t v39 = *(void *)(v0 + 264);
  uint64_t v40 = *(void *)(v0 + 200);
  uint64_t v41 = *(void *)(v0 + 184);
  (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 232));
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
  v47(v40, enum case for DIPError.Code.vicalCouldNotFetch(_:), v41);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10044B318((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
  return v42();
}

uint64_t sub_10044AE14()
{
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for URLRequest();
  uint64_t v18 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    v16[0] = v0;
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "VICALWebService removeCache", v12, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v16[1] + OBJC_IVAR____TtC8coreidvd15VICALWebService_url, v17);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.cachePolicy.setter();
  URLRequest.httpMethod.setter();
  if (qword_10071F5A0 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_100760850;
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  [v13 removeCachedResponseForRequest:isa];

  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v5, v19);
}

uint64_t sub_10044B130()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd15VICALWebService_url;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC8coreidvd15VICALWebService_validator;

  return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v3);
}

uint64_t sub_10044B22C()
{
  return type metadata accessor for VICALWebService();
}

uint64_t type metadata accessor for VICALWebService()
{
  uint64_t result = qword_10072EB60;
  if (!qword_10072EB60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10044B280()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10044B318(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10044B360(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v39 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v37 = (char *)&v34 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v34 - v14;
  id v16 = [self standardUserDefaults];
  v17._object = (void *)0x800000010064CA60;
  v17._uint64_t countAndFlagsBits = 0xD000000000000026;
  Swift::String_optional v18 = NSUserDefaults.internalString(forKey:)(v17);
  uint64_t countAndFlagsBits = v18.value._countAndFlagsBits;

  if (!v18.value._object)
  {
LABEL_8:
    sub_10002CEB0(a1, a2);
    return a1;
  }
  uint64_t v36 = v4;
  uint64_t v34 = v11;
  defaultLogger()();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "VICALWebService found override document string. Attempting to parse", v21, 2u);
    swift_slowDealloc();
  }

  unint64_t v35 = *(void (**)(char *, uint64_t))(v8 + 8);
  v35(v15, v7);
  static String.Encoding.utf8.getter();
  uint64_t v22 = String.data(using:allowLossyConversion:)();
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v6, v36);
  if (v24 >> 60 == 15)
  {
    uint64_t v25 = v34;
    defaultLogger()();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "VICALWebService could not convert override string to data. Returning same data", v28, 2u);
      uint64_t v25 = v34;
      swift_slowDealloc();
    }

    v35(v25, v7);
    goto LABEL_8;
  }
  char v29 = v37;
  defaultLogger()();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "VICALWebService parsed override string. Using instead of returned data", v32, 2u);
    swift_slowDealloc();
  }

  v35(v29, v7);
  return v22;
}

uint64_t sub_10044B79C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = *(uint64_t **)(*(void *)(v3 + 64) + 40);
    *uint64_t v9 = v8;
    v9[1] = v10;
    return swift_continuation_throwingResume();
  }
}

char *sub_10044B858()
{
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  unint64_t v24 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionTimeout] = 0x403E000000000000;
  uint64_t v8 = &v0[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = v0;
  defaultLogger()();
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "IdentityWatchSessionManagementListener init called", v13, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (qword_10071F5A8 != -1) {
    swift_once();
  }
  uint64_t v14 = *(void **)(qword_100760858 + 16);
  *(void *)&v10[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_biometricStore] = v14;
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  id v15 = v14;
  static DispatchQoS.unspecified.getter();
  os_log_type_t v27 = _swiftEmptyArrayStorage;
  sub_100464150((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007764((uint64_t *)&unk_100726420);
  sub_100025CAC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v24, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v25);
  uint64_t v16 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v10[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingQueue] = v16;
  id v17 = [objc_allocWithZone((Class)SFAuthenticationManager) initWithQueue:v16];
  *(void *)&v10[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingManager] = v17;
  *(void *)&v10[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_deviceLockStateMonitor] = [objc_allocWithZone((Class)type metadata accessor for DIPLockStateMonitor()) init];
  *(void *)&v10[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService] = [objc_allocWithZone((Class)type metadata accessor for DIPWatch()) init];

  Swift::String_optional v18 = (objc_class *)type metadata accessor for IdentityWatchSessionManagementListener();
  v26.receiver = v10;
  v26.super_class = v18;
  uint64_t v19 = (char *)[super init];
  os_log_type_t v20 = *(void **)&v19[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingManager];
  uint64_t v21 = v19;
  [v20 setDelegate:v21];
  swift_unknownObjectWeakAssign();
  *(void *)(*(void *)&v21[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService]
            + OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate
            + 8) = &off_100705798;
  swift_unknownObjectWeakAssign();

  return v21;
}

void sub_10044BD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void (***)(char *, uint64_t))(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v36 - v13;
  sub_100100188();
  if (!v3)
  {
    unint64_t v16 = v15;
    uint64_t v40 = v9;
    uint64_t v41 = v12;
    uint64_t v43 = a2;
    uint64_t v38 = a1;
    if (v15)
    {
      unint64_t v17 = v15 & 0xFFFFFFFFFFFFFF8;
      if (v15 >> 62)
      {
LABEL_34:
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v18) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v18 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v18) {
          goto LABEL_35;
        }
      }
      unint64_t v42 = v17;
      uint64_t v36 = v8;
      int v37 = 0;
      unint64_t v19 = 0;
      unint64_t v44 = v16 & 0xC000000000000001;
      uint64_t v39 = v4;
      ++v40;
      while (1)
      {
        unint64_t v17 = v19;
        while (1)
        {
          if (v44)
          {
            os_log_type_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v17 >= *(void *)(v42 + 16)) {
              goto LABEL_33;
            }
            os_log_type_t v20 = *(id *)(v16 + 8 * v17 + 32);
          }
          uint64_t v21 = v20;
          unint64_t v19 = v17 + 1;
          if (__OFADD__(v17, 1))
          {
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          id v22 = [v20 pairingID];
          if (!v22) {
            goto LABEL_7;
          }
          uint64_t v4 = (uint64_t)v22;
          uint64_t v23 = v18;
          uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v25 = v24;

          if (v8 == v43 && v25 == a3) {
            break;
          }
          uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v18 = v23;
          if (v4) {
            goto LABEL_21;
          }
LABEL_7:

          ++v17;
          if (v19 == v18) {
            goto LABEL_35;
          }
        }
        swift_bridgeObjectRelease();
LABEL_21:
        [*(id *)(v38 + 16) deleteObject:v21, v36];
        uint64_t v27 = v39;
        sub_1000FFAB4();
        uint64_t v39 = v27;
        if (v27)
        {

          swift_bridgeObjectRelease();
          return;
        }
        defaultLogger()();
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v4 = swift_slowAlloc();
          *(_WORD *)uint64_t v4 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully deleted proofing session for watch", (uint8_t *)v4, 2u);
          swift_slowDealloc();
          uint64_t v30 = v21;
        }
        else
        {
          uint64_t v30 = v28;
          uint64_t v28 = v21;
        }

        (*v40)(v41, v36);
        int v37 = 1;
        uint64_t v18 = v23;
        if (v19 == v23)
        {
LABEL_35:
          swift_bridgeObjectRelease();
          goto LABEL_36;
        }
      }
    }
    defaultLogger()();
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v34 = v40;
    if (v33)
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Error occurred in retrieving proofing sessions for watch", v35, 2u);
      swift_slowDealloc();
    }

    v34[1](v14, v8);
LABEL_36:
    type metadata accessor for DaemonAnalytics();
    static DaemonAnalytics.sendWatchUnpairedEvent(hasMatchingSession:)();
  }
}

uint64_t sub_10044C1B0(uint64_t a1, uint64_t a2)
{
  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[29] = v4;
  v3[30] = *(void *)(v4 - 8);
  v3[31] = swift_task_alloc();
  return _swift_task_switch(sub_10044C274, 0, 0);
}

uint64_t sub_10044C274()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 52;
  os_unfair_lock_lock(v1 + 52);
  sub_1000262B4(v2, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v3);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 208);
  *(void *)(v0 + 256) = *(void *)(v0 + 80);
  swift_retain();
  sub_1000262D0(v0 + 16);
  uint64_t v7 = *(void *)(*(void *)(v5
                             + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService)
                 + OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession);
  *(void *)(v0 + 264) = v7;
  uint64_t v8 = (void *)swift_allocObject();
  *(void *)(v0 + 272) = v8;
  v8[2] = v6;
  v8[3] = v4;
  v8[4] = v7;
  v8[5] = 0x403E000000000000;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 280) = v9;
  *(void *)(v9 + 16) = &unk_10072EDC8;
  *(void *)(v9 + 24) = v8;
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v10;
  void *v10 = v0;
  v10[1] = sub_10044C484;
  return AsyncCoreDataContainer.write<A>(_:)();
}

uint64_t sub_10044C484()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10044C61C;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_10044C5A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10044C5A8()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10044C61C()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  uint64_t v3 = v0[29];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10044C714(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(double *)(v6 + 112) = a1;
  *(void *)(v6 + 96) = a5;
  *(void *)(v6 + 104) = a6;
  *(void *)(v6 + 80) = a3;
  *(void *)(v6 + 88) = a4;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 120) = v7;
  *(void *)(v6 + 128) = *(void *)(v7 - 8);
  *(void *)(v6 + 136) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v6 + 144) = v8;
  *(void *)(v6 + 152) = *(void *)(v8 - 8);
  *(void *)(v6 + 160) = swift_task_alloc();
  *(void *)(v6 + 168) = swift_task_alloc();
  *(void *)(v6 + 176) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v6 + 184) = v9;
  *(void *)(v6 + 192) = *(void *)(v9 - 8);
  *(void *)(v6 + 200) = swift_task_alloc();
  *(void *)(v6 + 208) = swift_task_alloc();
  return _swift_task_switch(sub_10044C8C0, 0, 0);
}

uint64_t sub_10044C8C0()
{
  uint64_t v14 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  *(void *)(v0 + 216) = v6;
  v6[2] = v5;
  v6[3] = v3;
  v6[4] = v4;
  *(void *)(v0 + 224) = *(void *)(v5 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 232) = v7;
  *(void *)(v7 + 16) = sub_1004632E4;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_DWORD *)(v0 + 352) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  *(void *)(v0 + 240) = v9;
  *(void *)(v0 + 248) = (v1 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  swift_retain();
  swift_bridgeObjectRetain();
  v9(v14, v8, v2);
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v10;
  uint64_t v11 = sub_100007764(&qword_10072EDE0);
  void *v10 = v0;
  v10[1] = sub_10044CA6C;
  uint64_t v12 = *(void *)(v0 + 208);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 40, v12, sub_100463304, v7, v11);
}

uint64_t sub_10044CA6C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[24] + 8))(v2[26], v2[23]);
    swift_release();
    uint64_t v3 = sub_10044CBEC;
  }
  else
  {
    uint64_t v4 = v2[26];
    uint64_t v5 = v2[23];
    uint64_t v6 = v2[24];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v2[34] = v7;
    v2[35] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v5);
    swift_release();
    swift_release();
    v2[36] = v2[5];
    uint64_t v3 = sub_10044CC9C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10044CBEC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10044CC9C()
{
  uint64_t v30 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *((void *)v0 + 19);
    uint64_t v26 = *((void *)v0 + 18);
    uint64_t v28 = *((void *)v0 + 22);
    uint64_t v5 = *((void *)v0 + 11);
    unint64_t v4 = *((void *)v0 + 12);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    *((void *)v0 + 9) = sub_100110D58(v5, v4, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Trying to validate prearm trust for watch with pairingID: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(v28, v26);
  }
  else
  {
    uint64_t v8 = *((void *)v0 + 22);
    uint64_t v9 = *((void *)v0 + 18);
    uint64_t v10 = *((void *)v0 + 19);
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  *((void *)v0 + 37) = v7;
  uint64_t v11 = (void *)*((void *)v0 + 36);
  if (v11)
  {
    id v12 = v11;
    if ([v12 requiresDeletion])
    {
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      BOOL v15 = os_log_type_enabled(v13, v14);
      uint64_t v16 = *((void *)v0 + 21);
      uint64_t v17 = *((void *)v0 + 18);
      unint64_t v18 = *((void *)v0 + 12);
      if (v15)
      {
        uint64_t v19 = *((void *)v0 + 11);
        uint64_t v27 = *((void *)v0 + 21);
        os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v20 = 136315138;
        swift_bridgeObjectRetain();
        *((void *)v0 + 8) = sub_100110D58(v19, v18, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Trying to delete acl for watch with pairingID: %s", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v21 = v27;
      }
      else
      {
        swift_bridgeObjectRelease_n();

        uint64_t v21 = v16;
      }
      v7(v21, v17);
      uint64_t v24 = (void *)swift_task_alloc();
      *((void *)v0 + 38) = v24;
      *uint64_t v24 = v0;
      v24[1] = sub_10044D0DC;
      double v25 = v0[14];
      return sub_10001B124(v25);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v22 = (uint64_t (*)(void))*((void *)v0 + 1);
  return v22();
}

uint64_t sub_10044D0DC()
{
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10044D95C;
  }
  else {
    os_log_type_t v2 = sub_10044D1F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10044D1F0()
{
  uint64_t v27 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v24 = *(void *)(v0 + 160);
    double v25 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
    uint64_t v23 = *(void *)(v0 + 144);
    uint64_t v4 = *(void *)(v0 + 88);
    unint64_t v3 = *(void *)(v0 + 96);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 56) = sub_100110D58(v4, v3, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully deleted acl for watch with pairingID: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v25(v24, v23);
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 144);
    swift_bridgeObjectRelease_n();

    v6(v7, v8);
  }
  uint64_t v9 = *(void **)(v0 + 288);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
  uint64_t v11 = *(unsigned int *)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 200);
  uint64_t v13 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  *(void *)(v0 + 320) = v17;
  v17[2] = v16;
  v17[3] = v9;
  v17[4] = v15;
  void v17[5] = v14;
  uint64_t v18 = swift_allocObject();
  *(void *)(v0 + 328) = v18;
  *(void *)(v18 + 16) = sub_100463390;
  *(void *)(v18 + 24) = v17;
  swift_retain();
  swift_bridgeObjectRetain();
  id v19 = v9;
  v10(v12, v11, v13);
  swift_retain();
  os_log_type_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v20;
  *os_log_type_t v20 = v0;
  v20[1] = sub_10044D4F4;
  uint64_t v21 = *(void *)(v0 + 200);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v20, v21, sub_1000FE8C4, v18, (char *)&type metadata for () + 8);
}

uint64_t sub_10044D4F4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 272))(*(void *)(v2 + 200), *(void *)(v2 + 184));
  swift_release();
  if (v0)
  {
    unint64_t v3 = sub_10044D714;
  }
  else
  {
    swift_release();
    unint64_t v3 = sub_10044D660;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10044D660()
{
  uint64_t v1 = *(void **)(v0 + 288);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10044D714()
{
  swift_release();
  uint64_t v1 = (void *)v0[36];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[15];
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v5._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.unableToDeleteACLInWatch(_:), v4);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10044D95C()
{
  uint64_t v1 = (void *)v0[36];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[15];
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v5._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.unableToDeleteACLInWatch(_:), v4);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10044DB9C@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_100276ED0(a1, a2);
  if (!v3)
  {
    uint64_t v12 = result;
    if (!result)
    {
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      int v21 = v14;
      if (os_log_type_enabled(v13, v14))
      {
        os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        uint64_t v23 = v19;
        os_log_t v18 = v13;
        uint64_t v15 = v20;
        *(_DWORD *)os_log_type_t v20 = 136315138;
        uint64_t v17 = v15 + 4;
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_100110D58(a1, (unint64_t)a2, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v16 = v18;
        _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v21, "validateStoredPrearmTrust called for watch with pairingID: %s but no prearm trust exsts between phone and watch", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    *a3 = v12;
  }
  return result;
}

id sub_10044DDEC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*(id *)(a1 + 16) deleteObject:a2];
  id result = sub_100143ED8();
  if (!v4)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v19 = a3;
      uint64_t v17 = (uint8_t *)v16;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v22 = v20;
      *(_DWORD *)uint64_t v17 = 136315138;
      os_log_t v18 = v17 + 4;
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_100110D58(v19, a4, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfully deleted prearm trust with watch with pairingID: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (id)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

void sub_10044E034(uint64_t a1@<X1>, uint64_t a2@<X2>, char **a3@<X8>)
{
  sub_100100188();
  if (v3) {
    return;
  }
  unint64_t v8 = v7;
  if (!v7)
  {
    uint64_t v51 = (char *)&_swiftEmptyArrayStorage;
LABEL_47:
    *a3 = v51;
    return;
  }
  uint64_t v52 = a3;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }
  uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
  {
LABEL_45:
    uint64_t v66 = (char *)&_swiftEmptyArrayStorage;
LABEL_46:
    swift_bridgeObjectRelease();
    a3 = v52;
    uint64_t v51 = v66;
    goto LABEL_47;
  }
LABEL_5:
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    unint64_t v65 = v8 & 0xC000000000000001;
    uint64_t v66 = (char *)&_swiftEmptyArrayStorage;
    unint64_t v54 = v8;
    uint64_t v55 = a2;
    uint64_t v53 = v9;
    while (1)
    {
      if (v65) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v8 + 8 * v10 + 32);
      }
      uint64_t v13 = v12;
      id v14 = [v12 proofingSessionID];
      if (!v14) {
        goto LABEL_8;
      }
      os_log_type_t v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      if (v16 == a1 && v18 == a2) {
        break;
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_20;
      }
LABEL_8:
      ++v10;

      if (v9 == v10) {
        goto LABEL_46;
      }
    }
    swift_bridgeObjectRelease();
LABEL_20:
    unsigned __int8 v21 = [v13 shouldShowNotificationOnWatch];
    id v22 = [v13 proofingSessionID];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v63 = v24;
    }
    else
    {
      uint64_t v64 = 0;
      uint64_t v63 = 0;
    }
    id v25 = [v13 provisioningCredentialID];
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v61 = v28;
      uint64_t v62 = v27;
    }
    else
    {
      uint64_t v61 = 0;
      uint64_t v62 = 0;
    }
    id v29 = [v13 partnerSchemeID];
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v59 = v32;
      uint64_t v60 = v31;
    }
    else
    {
      uint64_t v59 = 0;
      uint64_t v60 = 0;
    }
    id v33 = [v13 provisioningTargetInstanceID];
    if (v33)
    {
      uint64_t v34 = v33;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v57 = v36;
      uint64_t v58 = v35;
    }
    else
    {
      uint64_t v57 = 0;
      uint64_t v58 = 0;
    }
    id v37 = [v13 credentialIdentifier];
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v39;
    }
    else
    {
      uint64_t v56 = 0;
      uint64_t v40 = 0;
    }
    uint64_t v41 = a1;
    id v42 = [v13 pairingID];
    if (v42)
    {
      uint64_t v43 = v42;
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v46 = v45;
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v46 = 0;
    }
    unsigned __int8 v47 = v21;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v48 = v66;
    }
    else {
      uint64_t v48 = sub_100110B7C(0, *((void *)v66 + 2) + 1, 1, v66);
    }
    unint64_t v50 = *((void *)v48 + 2);
    unint64_t v49 = *((void *)v48 + 3);
    if (v50 >= v49 >> 1) {
      uint64_t v48 = sub_100110B7C((char *)(v49 > 1), v50 + 1, 1, v48);
    }
    *((void *)v48 + 2) = v50 + 1;
    uint64_t v66 = v48;
    uint64_t v11 = &v48[104 * v50];
    v11[32] = v47;
    *((void *)v11 + 5) = v64;
    *((void *)v11 + 6) = v63;
    *((void *)v11 + 7) = v62;
    *((void *)v11 + 8) = v61;
    *((void *)v11 + 9) = v60;
    *((void *)v11 + 10) = v59;
    *((void *)v11 + 11) = v58;
    *((void *)v11 + 12) = v57;
    a2 = v55;
    *((void *)v11 + 13) = v56;
    *((void *)v11 + 14) = v40;
    *((void *)v11 + 15) = v44;
    *((void *)v11 + 16) = v46;
    a1 = v41;
    uint64_t v9 = v53;
    unint64_t v8 = v54;
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_10044E3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  return _swift_task_switch(sub_10044E420, 0, 0);
}

uint64_t sub_10044E420()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = (void *)v0[17];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v4 = NPKIDVRemoteDeviceServiceEventsFromStringsArray();

  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10044E558;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100021C10;
  v0[13] = &unk_100705D48;
  v0[14] = v5;
  [v2 registerForEvents:v4 withSession:v1 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10044E558()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    uint64_t v2 = sub_10044E6F8;
  }
  else {
    uint64_t v2 = sub_10044E668;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10044E668()
{
  uint64_t v1 = *(uint64_t **)(v0 + 128);
  id v2 = (id)stringsArrayFromNPKIDVRemoteDeviceServiceEvents();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t *v1 = v3;
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10044E6F8()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10044E764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  return _swift_task_switch(sub_10044E788, 0, 0);
}

uint64_t sub_10044E788()
{
  uint64_t v1 = v0[19];
  id v2 = (void *)v0[17];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v4 = NPKIDVRemoteDeviceServiceEventsFromStringsArray();

  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10044E8C0;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100021C10;
  v0[13] = &unk_100705D88;
  v0[14] = v5;
  [v2 unregisterFromEvents:v4 withSession:v1 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10044E8C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    id v2 = sub_1004649B8;
  }
  else {
    id v2 = sub_1004649B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

void *sub_10044E9D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v39 = a4;
  uint64_t v43 = a3;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v37 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  id v42 = (char *)&v34 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v34 - v16;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v34 = v4;
    char v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v40 = v10;
    uint64_t v41 = v11;
    v44[0] = v21;
    *(_DWORD *)char v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_100110D58(a1, (unint64_t)a2, v44);
    uint64_t v5 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Trying to retrieve prearm trust key and certificate for watch with pairingID: %s", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v40;
    uint64_t v11 = v41;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v17, v10);
  id result = (void *)sub_100100EB4(a1, a2);
  if (!v5)
  {
    uint64_t v24 = a1;
    id v25 = result;
    uint64_t v43 = v24;

    if (v25)
    {
      uint64_t v26 = v42;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v41 = v11;
        id v29 = (uint8_t *)swift_slowAlloc();
        v44[0] = swift_slowAlloc();
        uint64_t v40 = v10;
        *(_DWORD *)id v29 = 136315138;
        uint64_t v38 = (char *)(v29 + 4);
        swift_bridgeObjectRetain();
        uint64_t v30 = v43;
        uint64_t v45 = sub_100110D58(v43, (unint64_t)a2, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Successfully retrieved prearm trust key and certificate for watch with pairingID: %s", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v22(v42, v40);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        v22(v26, v10);
        uint64_t v30 = v43;
      }
      return (void *)sub_1005F6D60(v30, a2);
    }
    else
    {
      v44[0] = 0;
      v44[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(103);
      v31._uint64_t countAndFlagsBits = 0xD000000000000065;
      v31._object = (void *)0x800000010064D5D0;
      String.append(_:)(v31);
      v32._uint64_t countAndFlagsBits = v43;
      v32._object = a2;
      String.append(_:)(v32);
      (*(void (**)(char *, void, uint64_t))(v35 + 104))(v38, enum case for DIPError.Code.watchPrearmTrustDoesNotExist(_:), v36);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      id v33 = v37;
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      v22(v33, v10);
      return (void *)swift_errorRelease();
    }
  }
  return result;
}

uint64_t sub_10044F000(uint64_t a1, uint64_t a2, uint64_t a3, uint8_t *a4, uint64_t a5)
{
  unint64_t v50 = a4;
  uint64_t v51 = a5;
  uint64_t v49 = a3;
  uint64_t v7 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v7 - 8);
  uint64_t v48 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  uint64_t v53 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v48 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v48 - v17;
  uint64_t v19 = sub_100007764((uint64_t *)&unk_1007264F0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  os_log_type_t v28 = (char *)&v48 - v27;
  sub_10045CE5C(a1, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_10045CEC4((uint64_t)v21);
    uint64_t v29 = v52;
    if (a2)
    {
      swift_errorRetain();
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v16, v29);
    }
    defaultLogger()();
    unint64_t v30 = (unint64_t)v50;
    swift_bridgeObjectRetain_n();
    Swift::String v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      *(_DWORD *)id v33 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v34 = v49;
      uint64_t v54 = sub_100110D58(v49, v30, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Secure ranging is not supported for watch with pairingID: %s, will continue to prearm the watch without it.", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v29);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v29);
      uint64_t v34 = v49;
    }
    uint64_t v42 = type metadata accessor for TaskPriority();
    uint64_t v43 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v48, 1, 1, v42);
    uint64_t v44 = (void *)swift_allocObject();
    uint64_t v44[2] = 0;
    v44[3] = 0;
    uint64_t v45 = (void *)v51;
    v44[4] = v51;
    v44[5] = v34;
    v44[6] = v30;
    swift_bridgeObjectRetain();
    id v46 = v45;
    sub_10014043C(v43, (uint64_t)&unk_10072EE10, (uint64_t)v44);
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v28, v21, v22);
    defaultLogger()();
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v28, v22);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      id v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v55 = v51;
      *(_DWORD *)id v37 = 136315138;
      unint64_t v50 = v37 + 4;
      uint64_t v38 = UUID.uuidString.getter();
      uint64_t v54 = sub_100110D58(v38, v39, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v23 + 8);
      v40(v26, v22);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Secure ranging session established with watch, sessionID: %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v53 + 8))(v18, v52);
      return ((uint64_t (*)(char *, uint64_t))v40)(v28, v22);
    }
    else
    {

      unsigned __int8 v47 = *(void (**)(char *, uint64_t))(v23 + 8);
      v47(v26, v22);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v18, v52);
      return ((uint64_t (*)(char *, uint64_t))v47)(v28, v22);
    }
  }
}

uint64_t sub_10044F720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  uint64_t v9 = type metadata accessor for Logger();
  v6[5] = v9;
  v6[6] = *(void *)(v9 - 8);
  v6[7] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v6[8] = v10;
  void *v10 = v6;
  v10[1] = sub_10044F830;
  return sub_1004535F8(a5, a6);
}

uint64_t sub_10044F830()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_10044F9C0;
  }
  else {
    id v2 = sub_10044F944;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10044F944()
{
  sub_1005F7878(v0[3], v0[4]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10044F9C0()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1005F7878(v0[3], v0[4]);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10044FA8C(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[24] = v4;
  v3[25] = *(void *)(v4 - 8);
  v3[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[27] = v5;
  v3[28] = *(void *)(v5 - 8);
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  return _swift_task_switch(sub_10044FBBC, 0, 0);
}

uint64_t sub_10044FBBC()
{
  uint64_t v16 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v12 = v0[28];
    uint64_t v13 = v0[27];
    uint64_t v14 = v0[30];
    unint64_t v3 = v0[22];
    uint64_t v4 = v0[21];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[20] = sub_100110D58(v4, v3, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Trying to establish prearm trust with watch with pairingID: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v6(v14, v13);
  }
  else
  {
    uint64_t v7 = v0[30];
    uint64_t v8 = v0[27];
    uint64_t v9 = v0[28];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[31] = v6;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[32] = v10;
  void *v10 = v0;
  v10[1] = sub_10044FE00;
  return sub_10001BBB4();
}

uint64_t sub_10044FE00(uint64_t a1)
{
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10044FF00, 0, 0);
}

uint64_t sub_10044FF00()
{
  uint64_t v1 = (void *)v0[33];
  if (v1)
  {
    v0[34] = *(void *)(v0[23] + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_biometricStore);
    uint64_t v2 = swift_allocObject();
    v0[35] = v2;
    *(void *)(v2 + 16) = v1;
    id v3 = v1;
    uint64_t v4 = (void *)swift_task_alloc();
    v0[36] = v4;
    uint64_t v5 = sub_100025C28(0, &qword_10072ED20);
    *uint64_t v4 = v0;
    v4[1] = sub_100450184;
    v6.n128_u64[0] = 30.0;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 17, &unk_10072ED60, v2, v5, v6);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[25] + 104))(v0[26], enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v0[24]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100450184()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_100451114;
  }
  else {
    uint64_t v2 = sub_1004502B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004502B8()
{
  uint64_t v2 = (void *)v0[33];
  uint64_t v1 = (void *)v0[34];
  id v3 = (void *)v0[17];
  v0[38] = v3;
  uint64_t v4 = (void *)swift_allocObject();
  v0[39] = v4;
  v4[2] = v2;
  v4[3] = v1;
  v4[4] = v3;
  id v5 = v2;
  id v6 = v1;
  id v7 = v3;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[40] = v8;
  uint64_t v9 = sub_100025C28(0, &qword_10072ED78);
  *uint64_t v8 = v0;
  v8[1] = sub_1004503DC;
  v10.n128_u64[0] = 30.0;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 19, &unk_10072ED70, v4, v9, v10);
}

uint64_t sub_1004503DC()
{
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_10045119C;
  }
  else {
    uint64_t v2 = sub_100450510;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100450510()
{
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = (void *)v0[19];
  v0[42] = v2;
  uint64_t v3 = swift_allocObject();
  v0[43] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  id v4 = v1;
  id v5 = v2;
  id v6 = (void *)swift_task_alloc();
  v0[44] = v6;
  uint64_t v7 = sub_100007764(&qword_10072ED90);
  *id v6 = v0;
  v6[1] = sub_100450620;
  v8.n128_u64[0] = 30.0;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 18, &unk_10072ED88, v3, v7, v8);
}

uint64_t sub_100450620()
{
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_10045122C;
  }
  else {
    uint64_t v2 = sub_100450754;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100450754()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void **)(v0 + 144);
  *(void *)(v0 + 368) = v1;
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 264);
    id v3 = [v1 attestationData];
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    *(void *)(v0 + 376) = v4;
    *(void *)(v0 + 384) = v6;
    uint64_t v7 = swift_allocObject();
    *(void *)(v0 + 392) = v7;
    *(void *)(v7 + 16) = v2;
    id v8 = v2;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100450AD4;
    v10.n128_u64[0] = 30.0;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 96, &unk_10072EDA0, v7, &type metadata for Data, v10);
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + 264);
    defaultLogger()();
    id v12 = v11;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void **)(v0 + 368);
    uint64_t v17 = *(void **)(v0 + 264);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v19 = *(void *)(v0 + 232);
    uint64_t v20 = *(void *)(v0 + 216);
    if (v15)
    {
      os_log_type_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
      unint64_t v30 = *(void **)(v0 + 304);
      uint64_t v31 = *(void *)(v0 + 232);
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v29 = v16;
      id v22 = [v17 deviceID];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      *(void *)(v0 + 128) = sub_100110D58(v23, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Successfully established prearm trust with watch with pairingID: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v32(v31, v20);
    }
    else
    {

      v18(v19, v20);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(uint64_t, void))(v0 + 8);
    uint64_t v27 = *(void *)(v0 + 336);
    return v26(v27, 0);
  }
}

uint64_t sub_100450AD4()
{
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004512C4;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100450BF0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100450BF0()
{
  uint64_t v1 = *(void **)(v0 + 264);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 96);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 432) = v2;
  *(void *)(v2 + 16) = v1;
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 440) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100450CEC;
  v5.n128_u64[0] = 30.0;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 112, &unk_10072EDB0, v2, &type metadata for String, v5);
}

uint64_t sub_100450CEC()
{
  *(void *)(*(void *)v1 + 448) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100451384;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100450E08;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100450E08()
{
  uint64_t v35 = v0;
  uint64_t v2 = *(void *)(v0 + 416);
  unint64_t v1 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 376);
  unint64_t v3 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  sub_100007764(&qword_10072EDB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100610730;
  *(void *)(inited + 32) = v5;
  *(void *)(inited + 40) = v6;
  Swift::String v8 = Data.base16EncodedString()();
  Swift::String v9 = Data.base16EncodedString()();
  *(Swift::String *)(inited + 48) = v8;
  *(Swift::String *)(inited + 64) = v9;
  unint64_t v10 = sub_10015E458(inited);
  sub_10000C5F4(v2, v1);
  sub_10000C5F4(v4, v3);
  uint64_t v11 = *(void **)(v0 + 264);
  defaultLogger()();
  id v12 = v11;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    BOOL v15 = *(void **)(v0 + 264);
    os_log_type_t v32 = *(void **)(v0 + 368);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v29 = *(void **)(v0 + 304);
    uint64_t v30 = *(void *)(v0 + 216);
    uint64_t v31 = *(void *)(v0 + 232);
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    id v17 = [v15 deviceID];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    *(void *)(v0 + 128) = sub_100110D58(v18, v20, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Successfully established prearm trust with watch with pairingID: %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v33(v31, v30);
  }
  else
  {
    uint64_t v21 = *(void **)(v0 + 368);
    id v22 = *(void **)(v0 + 264);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v24 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 216);

    v23(v24, v25);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  uint64_t v27 = *(void *)(v0 + 336);
  return v26(v27, v10);
}

uint64_t sub_100451114()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10045119C()
{
  unint64_t v1 = *(void **)(v0 + 264);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10045122C()
{
  unint64_t v1 = *(void **)(v0 + 336);
  uint64_t v2 = *(void **)(v0 + 264);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1004512C4()
{
  unint64_t v1 = *(void *)(v0 + 384);
  uint64_t v3 = *(void **)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v4 = *(void **)(v0 + 336);
  uint64_t v5 = *(void **)(v0 + 264);

  sub_10000C5F4(v2, v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100451384()
{
  unint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 376);
  unint64_t v3 = *(void *)(v0 + 384);
  uint64_t v5 = *(void **)(v0 + 368);
  uint64_t v6 = *(void **)(v0 + 336);
  uint64_t v7 = *(void **)(v0 + 264);

  sub_10000C5F4(v2, v1);
  sub_10000C5F4(v4, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100451460(uint64_t a1, uint64_t a2)
{
  v2[22] = a1;
  v2[23] = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[27] = v4;
  v2[28] = *(void *)(v4 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  return _swift_task_switch(sub_10045158C, 0, 0);
}

uint64_t sub_10045158C()
{
  uint64_t v23 = v0;
  unint64_t v1 = (void *)v0[23];
  defaultLogger()();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v19 = v0[28];
    uint64_t v20 = v0[27];
    uint64_t v21 = v0[30];
    uint64_t v5 = (void *)v0[23];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    id v7 = [v5 deviceID];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    v0[21] = sub_100110D58(v8, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying to generate nonce in watch with pairingID: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v11(v21, v20);
  }
  else
  {
    uint64_t v12 = v0[30];
    uint64_t v13 = v0[27];
    uint64_t v14 = v0[28];
    BOOL v15 = (void *)v0[23];

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  v0[31] = v11;
  uint64_t v16 = (void *)v0[23];
  v0[2] = v0;
  v0[7] = v0 + 17;
  v0[3] = sub_100451848;
  uint64_t v17 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10001C898;
  v0[13] = &unk_100705B78;
  v0[14] = v17;
  [v16 nonceForAuthorizationTokenWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100451848()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 256) = v1;
  if (v1) {
    id v2 = sub_100451C5C;
  }
  else {
    id v2 = sub_100451958;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100451958()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 184);
  id v2 = *(void **)(v0 + 136);
  defaultLogger()();
  id v3 = v1;
  id v4 = v2;
  id v5 = v3;
  id v6 = v4;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v32 = *(void *)(v0 + 232);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v31 = *(void *)(v0 + 216);
    unint64_t v9 = *(void **)(v0 + 184);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    os_log_type_t type = v8;
    id v11 = [v6 credentialNonce];
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    uint64_t v15 = Data.description.getter();
    unint64_t v17 = v16;
    sub_10000C5F4(v12, v14);
    *(void *)(v0 + 152) = sub_100110D58(v15, v17, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 12) = 2080;
    log = v7;
    uint64_t v18 = v9;
    id v19 = [v9 deviceID];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    *(void *)(v0 + 160) = sub_100110D58(v20, v22, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully generated nonce in watch: %s with pairingID: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v33(v32, v31);
  }
  else
  {
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v24 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 216);
    uint64_t v26 = *(void **)(v0 + 184);

    v23(v24, v25);
  }
  **(void **)(v0 + 176) = v6;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_100451C5C()
{
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[25];
  uint64_t v2 = v0[26];
  uint64_t v4 = v0[24];
  swift_willThrow();
  _StringGuts.grow(_:)(47);
  v0[15] = 0;
  v0[16] = 0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v5._object = (void *)0x800000010064D280;
  String.append(_:)(v5);
  v0[18] = v1;
  sub_100007764((uint64_t *)&unk_100723450);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.unableToGenerateNonceOnWatch(_:), v4);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100451E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[22] = a3;
  v4[23] = a4;
  v4[20] = a1;
  v4[21] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[24] = v5;
  v4[25] = *(void *)(v5 - 8);
  v4[26] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[27] = v6;
  v4[28] = *(void *)(v6 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  return _swift_task_switch(sub_100451FA8, 0, 0);
}

uint64_t sub_100451FA8()
{
  uint64_t v32 = v0;
  uint64_t v1 = (objc_class *)&v0[15];
  Class isa = v0[21].super.isa;
  defaultLogger()();
  uint64_t v3 = isa;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = &stru_10071A000;
  if (os_log_type_enabled(v4, v5))
  {
    Class v28 = v0[28].super.isa;
    Class v29 = v0[27].super.isa;
    Class v30 = v0[30].super.isa;
    Class v7 = v0[21].super.isa;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = [(objc_class *)v7 deviceID];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    v0[19].super.Class isa = (Class)sub_100110D58(v10, v12, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v6 = &stru_10071A000;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Trying to generate prearm trust key and certificate on phone for watch with pairingID: %s", v8, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = (objc_class *)&v0[15];
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v13 = (objc_class *)*((void *)v28 + 1);
    ((void (*)(Class, Class))v13)(v30, v29);
  }
  else
  {
    Class v14 = v0[30].super.isa;
    Class v15 = v0[27].super.isa;
    Class v16 = v0[28].super.isa;
    Class v17 = v0[21].super.isa;

    unint64_t v13 = (objc_class *)*((void *)v16 + 1);
    ((void (*)(Class, Class))v13)(v14, v15);
  }
  v0[31].super.Class isa = v13;
  Class v18 = v0[21].super.isa;
  id v19 = [(objc_class *)v0[23].super.isa credentialNonce];
  uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  v23.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[32].super.Class isa = v23.super.isa;
  sub_10000C5F4(v20, v22);
  uint64_t v24 = (objc_class *)[v18 v6[137].attr];
  if (!v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = (objc_class *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v0[33].super.Class isa = v24;
  Class v25 = v0[22].super.isa;
  v0[2].super.Class isa = (Class)v0;
  v0[7].super.Class isa = v1;
  v0[3].super.Class isa = (Class)sub_1004522FC;
  uint64_t v26 = swift_continuation_init();
  v0[10].super.Class isa = (Class)_NSConcreteStackBlock;
  v0[11].super.Class isa = (Class)0x40000000;
  v0[12].super.Class isa = (Class)sub_10001C898;
  v0[13].super.Class isa = (Class)&unk_100705B60;
  v0[14].super.Class isa = (Class)v26;
  [(objc_class *)v25 generatePrearmTrustCertificateWithNonce:v23.super.isa pairingID:v24 completion:&v0[10]];
  return _swift_continuation_await(&v0[2]);
}

uint64_t sub_1004522FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 272) = v1;
  if (v1) {
    uint64_t v2 = sub_1004527D4;
  }
  else {
    uint64_t v2 = sub_10045240C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10045240C()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void **)(v0 + 256);
  uint64_t v2 = *(void **)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 120);

  defaultLogger()();
  id v4 = v3;
  id v5 = v2;
  id v6 = v4;
  id v7 = v5;
  id v8 = v6;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v33 = *(void *)(v0 + 224);
    uint64_t v34 = *(void *)(v0 + 216);
    uint64_t v35 = *(void *)(v0 + 232);
    id v32 = *(id *)(v0 + 168);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315650;
    id v12 = [v8 credentialKeyBlob];
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    Swift::String v16 = Data.base64EncodedString(options:)(0);
    sub_10000C5F4(v13, v15);
    *(void *)(v0 + 128) = sub_100110D58(v16._countAndFlagsBits, (unint64_t)v16._object, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 12) = 2080;
    id v17 = [v8 credentialBAACertificate];
    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    Swift::String v21 = Data.base64EncodedString(options:)(0);
    sub_10000C5F4(v18, v20);
    *(void *)(v0 + 136) = sub_100110D58(v21._countAndFlagsBits, (unint64_t)v21._object, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 22) = 2080;
    id v22 = [v32 deviceID];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    *(void *)(v0 + 144) = sub_100110D58(v23, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Successfully generated prearm trust key: %s and certificate: %s on phone for watch with pairingID: %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
  }
  else
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v27 = *(void *)(v0 + 232);
    uint64_t v28 = *(void *)(v0 + 216);
    Class v29 = *(void **)(v0 + 168);

    v26(v27, v28);
  }
  **(void **)(v0 + 160) = v8;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Class v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_1004527D4()
{
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = (void *)v0[32];
  uint64_t v4 = v0[25];
  uint64_t v3 = v0[26];
  uint64_t v5 = v0[24];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.unableToGeneratePrearmTrustKeyOnPhone(_:), v5);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100452994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return _swift_task_switch(sub_1004529B8, 0, 0);
}

uint64_t sub_1004529B8()
{
  uint64_t v2 = (void *)v0[17];
  uint64_t v1 = v0[18];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100452AB8;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10001C898;
  v0[13] = &unk_100705B48;
  v0[14] = v3;
  [v2 establishPrearmTrustV2:v1 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100452AB8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_100452BE8;
  }
  else {
    uint64_t v2 = sub_100452BC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100452BC8()
{
  **(void **)(v0 + 128) = *(void *)(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100452BE8()
{
  swift_willThrow();
  swift_errorRelease();
  **(void **)(v0 + 128) = 0;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100452C68(uint64_t a1, uint64_t a2)
{
  v2[17] = a1;
  v2[18] = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_100452D28, 0, 0);
}

uint64_t sub_100452D28()
{
  uint64_t v1 = (void *)v0[18];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100452E24;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10059400C;
  v0[13] = &unk_100705B30;
  v0[14] = v2;
  [v1 getCASDCertificateWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100452E24()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    uint64_t v2 = sub_100452FA4;
  }
  else {
    uint64_t v2 = sub_100452F34;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100452F34()
{
  *(_OWORD *)*(void *)(v0 + 136) = *(_OWORD *)(v0 + 120);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100452FA4()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[20];
  swift_willThrow();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for DIPError.Code.unableToGetCASDCertificateWithWatch(_:), v2);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100453130(uint64_t a1, uint64_t a2)
{
  v2[17] = a1;
  v2[18] = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_1004531F0, 0, 0);
}

uint64_t sub_1004531F0()
{
  uint64_t v1 = (void *)v0[18];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1004532EC;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10044B79C;
  v0[13] = &unk_100705B18;
  v0[14] = v2;
  [v1 pairedWatchSEIDWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1004532EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    uint64_t v2 = sub_10045346C;
  }
  else {
    uint64_t v2 = sub_1004533FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004533FC()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = (void *)v0[17];
  void *v1 = v0[15];
  v1[1] = v2;
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10045346C()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[20];
  swift_willThrow();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for DIPError.Code.unableToGetSEIDWithWatch(_:), v2);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004535F8(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[28] = v4;
  v3[29] = *(void *)(v4 - 8);
  v3[30] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[31] = v5;
  v3[32] = *(void *)(v5 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  return _swift_task_switch(sub_100453740, 0, 0);
}

uint64_t sub_100453740()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v1;
  void *v1 = v0;
  v1[1] = sub_1004537DC;
  return sub_10001BBB4();
}

uint64_t sub_1004537DC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 304) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1004538DC, 0, 0);
}

uint64_t sub_1004538DC()
{
  unint64_t v25 = v0;
  uint64_t v1 = (void *)v0[38];
  if (v1)
  {
    uint64_t v2 = (uint64_t)(v0 + 17);
    v0[39] = *(void *)(v0[27] + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_biometricStore);
    defaultLogger()();
    id v3 = v1;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = v0[36];
    uint64_t v8 = v0[31];
    uint64_t v9 = v0[32];
    if (v6)
    {
      uint64_t v22 = v0[36];
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v10 = 136315138;
      id v11 = [v3 deviceID];
      uint64_t v21 = v8;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      uint64_t v2 = (uint64_t)(v0 + 17);
      v0[24] = sub_100110D58(v12, v14, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Trying to prearm the watch with pairingID: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v15(v22, v21);
    }
    else
    {

      unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v15(v7, v8);
    }
    v0[40] = v15;
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10072ED00 + dword_10072ED00);
    uint64_t v18 = (void *)swift_task_alloc();
    v0[41] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_100453CCC;
    uint64_t v19 = v0[25];
    uint64_t v20 = v0[26];
    return v23(v2, v19, v20);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[29] + 104))(v0[30], enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v0[28]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_100453CCC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  *(_OWORD *)(v1 + 336) = *(_OWORD *)(v1 + 136);
  *(void *)(v1 + 352) = *(void *)(v1 + 160);
  return _swift_task_switch(sub_100453DF0, 0, 0);
}

uint64_t sub_100453DF0()
{
  sub_1004628A4(v0 + 136, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = v0 + 16;
    unint64_t v2 = *(void *)(v0 + 344);
    uint64_t v3 = *(void *)(v0 + 336);
    long long v4 = *(_OWORD *)(v0 + 72);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
    *(_OWORD *)(v0 + 32) = v4;
    *(_WORD *)(v0 + 48) = *(_WORD *)(v0 + 88);
    defaultLogger()();
    sub_10002CEB0(v3, v2);
    swift_bridgeObjectRetain();
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 33554688;
      *(_WORD *)(v0 + 52) = *(_WORD *)(v0 + 48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10046290C(v0 + 136);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "existing prearmtrust version = %hd", v7, 6u);
      swift_slowDealloc();
    }
    else
    {
      sub_10046290C(v0 + 136);
    }
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v19 = *(void *)(v0 + 280);
    uint64_t v20 = *(void *)(v0 + 248);
    uint64_t v21 = *(void *)(v0 + 256);

    *(void *)(v0 + 360) = (v21 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v18(v19, v20);
    int v22 = *(unsigned __int16 *)(v0 + 48);
    if (v22 == 1)
    {
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      uint64_t v24 = *(void *)(v0 + 272);
      uint64_t v25 = *(void *)(v0 + 248);
      defaultLogger()();
      *(void *)(swift_task_alloc() + 16) = v1;
      Logger.sensitive(_:)();
      swift_task_dealloc();
      v23(v24, v25);
      uint64_t v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v26;
      *uint64_t v26 = v0;
      v26[1] = sub_10045441C;
      return sub_100457474(v0 + 96, v1);
    }
    else
    {
      uint64_t v28 = *(void *)(v0 + 336);
      unint64_t v27 = *(void *)(v0 + 344);
      defaultLogger()();
      sub_10002CEB0(v28, v27);
      swift_bridgeObjectRetain();
      Class v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 33554688;
        *(_WORD *)(v0 + 50) = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10046290C(v0 + 136);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "using existing prearmtrust version = %hd", v31, 6u);
        swift_slowDealloc();
      }
      else
      {
        sub_10046290C(v0 + 136);
      }
      uint64_t v33 = *(void *)(v0 + 336);
      unint64_t v32 = *(void *)(v0 + 344);
      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      uint64_t v35 = *(void *)(v0 + 264);
      uint64_t v36 = *(void *)(v0 + 248);

      v34(v35, v36);
      uint64_t v37 = *(void *)(v0 + 32);
      uint64_t v38 = *(void *)(v0 + 40);
      long long v45 = *(_OWORD *)(v0 + 16);
      sub_10002CEB0(v33, v32);
      *(_WORD *)(v0 + 54) = v22;
      *(void *)(v0 + 400) = v37;
      *(void *)(v0 + 408) = v38;
      *(_OWORD *)(v0 + 384) = v45;
      unint64_t v39 = *(void **)(v0 + 304);
      swift_bridgeObjectRetain();
      uint64_t v40 = swift_allocObject();
      *(void *)(v0 + 416) = v40;
      *(void *)(v40 + 16) = v39;
      id v41 = v39;
      uint64_t v42 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v42;
      uint64_t v43 = sub_100025C28(0, &qword_10072ED20);
      *uint64_t v42 = v0;
      v42[1] = sub_1004546D0;
      v44.n128_u64[0] = 30.0;
      return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 176, &unk_10072ED18, v40, v43, v44);
    }
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v12 = *(void **)(v0 + 208);
    _StringGuts.grow(_:)(88);
    v14._uint64_t countAndFlagsBits = 0xD000000000000056;
    v14._object = (void *)0x800000010064CF60;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = v13;
    v15._object = v12;
    String.append(_:)(v15);
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.watchPrearmTrustDoesNotExist(_:), v11);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_10045441C()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_100454DD4;
  }
  else {
    unint64_t v2 = sub_100454530;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100454530()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 248);
  sub_10045D19C(v0 + 96);
  defaultLogger()();
  *(void *)(swift_task_alloc() + 16) = v0 + 96;
  Logger.sensitive(_:)();
  sub_100462BD8(v0 + 96);
  swift_task_dealloc();
  v1(v2, v3);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 120);
  *(_WORD *)(v0 + 54) = *(_WORD *)(v0 + 128);
  *(void *)(v0 + 400) = v4;
  *(void *)(v0 + 408) = v5;
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 96);
  os_log_type_t v6 = *(void **)(v0 + 304);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 416) = v7;
  *(void *)(v7 + 16) = v6;
  id v8 = v6;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v9;
  uint64_t v10 = sub_100025C28(0, &qword_10072ED20);
  *uint64_t v9 = v0;
  v9[1] = sub_1004546D0;
  v11.n128_u64[0] = 30.0;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 176, &unk_10072ED18, v7, v10, v11);
}

uint64_t sub_1004546D0()
{
  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_100454FA0;
  }
  else {
    uint64_t v2 = sub_100454804;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100454804()
{
  __int16 v18 = *(_WORD *)(v0 + 54);
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v17 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 384);
  unint64_t v2 = *(void *)(v0 + 392);
  uint64_t v4 = *(void **)(v0 + 304);
  uint64_t v5 = *(void **)(v0 + 312);
  uint64_t v7 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 208);
  id v8 = *(void **)(v0 + 176);
  *(void *)(v0 + 440) = v8;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 448) = v9;
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = v5;
  *(void *)(v9 + 32) = v8;
  *(void *)(v9 + 40) = v3;
  *(void *)(v9 + 48) = v2;
  *(void *)(v9 + 56) = v17;
  *(void *)(v9 + 64) = v1;
  *(_WORD *)(v9 + 72) = v18;
  *(void *)(v9 + 80) = v7;
  *(void *)(v9 + 88) = v6;
  id v10 = v4;
  id v11 = v5;
  id v12 = v8;
  sub_10002CEB0(v3, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v13;
  uint64_t v14 = sub_100025C28(0, &qword_10072ED38);
  *uint64_t v13 = v0;
  v13[1] = sub_100454988;
  v15.n128_u64[0] = 30.0;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 184, &unk_10072ED30, v9, v14, v15);
}

uint64_t sub_100454988()
{
  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    unint64_t v2 = sub_100455064;
  }
  else {
    unint64_t v2 = sub_100454ABC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100454ABC()
{
  uint64_t v1 = (void *)v0[38];
  unint64_t v2 = (void *)v0[23];
  v0[59] = v2;
  uint64_t v3 = swift_allocObject();
  v0[60] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = v1;
  id v5 = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[61] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100454BB4;
  v7.n128_u64[0] = 30.0;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v6, &unk_10072ED48, v3, (char *)&type metadata for () + 8, v7);
}

uint64_t sub_100454BB4()
{
  *(void *)(*(void *)v1 + 496) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    unint64_t v2 = sub_100455130;
  }
  else {
    unint64_t v2 = sub_100454CE8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100454CE8()
{
  uint64_t v1 = (void *)v0[59];
  unint64_t v2 = (void *)v0[55];
  uint64_t v3 = (void *)v0[38];
  sub_10000C5F4(v0[48], v0[49]);
  swift_bridgeObjectRelease();

  sub_10046290C((uint64_t)(v0 + 17));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100454DD4()
{
  uint64_t v1 = (void *)v0[38];
  (*(void (**)(void, void, void))(v0[29] + 104))(v0[30], enum case for DIPError.Code.watchPrearmTrustMigrationError(_:), v0[28]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();

  sub_10046290C((uint64_t)(v0 + 17));
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100454FA0()
{
  uint64_t v1 = (void *)v0[38];
  sub_10000C5F4(v0[48], v0[49]);
  swift_bridgeObjectRelease();

  sub_10046290C((uint64_t)(v0 + 17));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100455064()
{
  uint64_t v1 = (void *)v0[55];
  unint64_t v2 = (void *)v0[38];
  sub_10000C5F4(v0[48], v0[49]);
  swift_bridgeObjectRelease();

  sub_10046290C((uint64_t)(v0 + 17));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100455130()
{
  uint64_t v1 = (void *)v0[59];
  unint64_t v2 = (void *)v0[55];
  uint64_t v3 = (void *)v0[38];
  sub_10000C5F4(v0[48], v0[49]);
  swift_bridgeObjectRelease();

  sub_10046290C((uint64_t)(v0 + 17));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

unint64_t sub_100455204()
{
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000018;
}

unint64_t sub_100455284()
{
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  Swift::String v0 = Data.base16EncodedString()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

uint64_t sub_100455310(uint64_t a1, uint64_t a2)
{
  v2[19] = a1;
  v2[20] = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[21] = v3;
  v2[22] = *(void *)(v3 - 8);
  v2[23] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[24] = v4;
  v2[25] = *(void *)(v4 - 8);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_10045543C, 0, 0);
}

uint64_t sub_10045543C()
{
  uint64_t v23 = v0;
  uint64_t v1 = (void *)v0[20];
  defaultLogger()();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v19 = v0[25];
    uint64_t v20 = v0[24];
    uint64_t v21 = v0[27];
    uint64_t v5 = (void *)v0[20];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    id v7 = [v5 deviceID];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    v0[18] = sub_100110D58(v8, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying to generate nonce in watch with pairingID: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v11 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v11(v21, v20);
  }
  else
  {
    uint64_t v12 = v0[27];
    uint64_t v13 = v0[24];
    uint64_t v14 = v0[25];
    __n128 v15 = (void *)v0[20];

    id v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  v0[28] = v11;
  Swift::String v16 = (void *)v0[20];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1004556F8;
  uint64_t v17 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10001C898;
  v0[13] = &unk_1007059C0;
  v0[14] = v17;
  [v16 nonceForAuthorizationTokenWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1004556F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 232) = v1;
  if (v1) {
    id v2 = sub_100455B0C;
  }
  else {
    id v2 = sub_100455808;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100455808()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 160);
  id v2 = *(void **)(v0 + 120);
  defaultLogger()();
  id v3 = v1;
  id v4 = v2;
  id v5 = v3;
  id v6 = v4;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v32 = *(void *)(v0 + 208);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    uint64_t v31 = *(void *)(v0 + 192);
    unint64_t v9 = *(void **)(v0 + 160);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    os_log_type_t type = v8;
    id v11 = [v6 credentialNonce];
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    uint64_t v15 = Data.description.getter();
    unint64_t v17 = v16;
    sub_10000C5F4(v12, v14);
    *(void *)(v0 + 128) = sub_100110D58(v15, v17, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 12) = 2080;
    log = v7;
    __int16 v18 = v9;
    id v19 = [v9 deviceID];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    *(void *)(v0 + 136) = sub_100110D58(v20, v22, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully generated nonce in watch: %s with pairingID: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v33(v32, v31);
  }
  else
  {
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    uint64_t v24 = *(void *)(v0 + 208);
    uint64_t v25 = *(void *)(v0 + 192);
    uint64_t v26 = *(void **)(v0 + 160);

    v23(v24, v25);
  }
  **(void **)(v0 + 152) = v6;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_100455B0C()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  swift_willThrow();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.unableToGenerateNonceOnWatch(_:), v3);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100455CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[24] = a6;
  v7[25] = a7;
  v7[22] = a4;
  v7[23] = a5;
  v7[20] = a2;
  v7[21] = a3;
  v7[19] = a1;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v7[26] = v8;
  v7[27] = *(void *)(v8 - 8);
  v7[28] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v7[29] = v9;
  v7[30] = *(void *)(v9 - 8);
  v7[31] = swift_task_alloc();
  v7[32] = swift_task_alloc();
  return _swift_task_switch(sub_100455DEC, 0, 0);
}

uint64_t sub_100455DEC()
{
  uint64_t v26 = v0;
  uint64_t v1 = (void *)v0[20];
  defaultLogger()();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v22 = v0[30];
    uint64_t v23 = v0[29];
    uint64_t v24 = v0[32];
    id v5 = (void *)v0[20];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    id v7 = [v5 deviceID];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    v0[18] = sub_100110D58(v8, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying to generate credential authorization token in phone for watch with pairingID: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v11(v24, v23);
  }
  else
  {
    uint64_t v12 = v0[32];
    uint64_t v13 = v0[29];
    uint64_t v14 = v0[30];
    uint64_t v15 = (void *)v0[20];

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  v0[33] = v11;
  uint64_t v16 = v0[22];
  unint64_t v17 = (void *)v0[21];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[34] = isa;
  NSString v19 = String._bridgeToObjectiveC()();
  v0[35] = v19;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1004560E0;
  uint64_t v20 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10001C898;
  v0[13] = &unk_1007059A8;
  v0[14] = v20;
  [v17 generatePhoneTokenWithNonce:v16 keyBlob:isa pairingID:v19 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1004560E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 288) = v1;
  if (v1) {
    id v2 = sub_100456500;
  }
  else {
    id v2 = sub_1004561F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004561F0()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(void **)(v0 + 272);
  id v2 = *(void **)(v0 + 160);
  uint64_t v3 = *(void **)(v0 + 120);

  defaultLogger()();
  id v4 = v2;
  id v5 = v3;
  id v6 = v4;
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v33 = *(void *)(v0 + 248);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    uint64_t v32 = *(void *)(v0 + 232);
    unint64_t v10 = *(void **)(v0 + 160);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    os_log_type_t type = v9;
    id v12 = [v7 credentialAuthorizationToken];
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    uint64_t v16 = Data.description.getter();
    unint64_t v18 = v17;
    sub_10000C5F4(v13, v15);
    *(void *)(v0 + 128) = sub_100110D58(v16, v18, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 12) = 2080;
    log = v8;
    NSString v19 = v10;
    id v20 = [v10 deviceID];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    *(void *)(v0 + 136) = sub_100110D58(v21, v23, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully generated credential authorization token in phone: %s for watch with pairingID: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v34(v33, v32);
  }
  else
  {
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    uint64_t v25 = *(void *)(v0 + 248);
    uint64_t v26 = *(void *)(v0 + 232);
    uint64_t v27 = *(void **)(v0 + 160);

    v24(v25, v26);
  }
  **(void **)(v0 + 152) = v7;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_100456500()
{
  uint64_t v1 = (void *)v0[35];
  id v2 = (void *)v0[34];
  uint64_t v4 = v0[27];
  uint64_t v3 = v0[28];
  uint64_t v5 = v0[26];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.unableToGenerateAuthorizationTokenOnPhone(_:), v5);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1004566BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[19] = a2;
  v3[20] = a3;
  uint64_t v4 = type metadata accessor for Logger();
  v3[21] = v4;
  v3[22] = *(void *)(v4 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  return _swift_task_switch(sub_10045678C, 0, 0);
}

uint64_t sub_10045678C()
{
  uint64_t v34 = v0;
  uint64_t v1 = (void *)v0[19];
  id v2 = (void *)v0[20];
  defaultLogger()();
  id v3 = v1;
  id v4 = v2;
  id v5 = v3;
  id v6 = v4;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v30 = v0[22];
    uint64_t v31 = v0[21];
    uint64_t v32 = v0[24];
    id v26 = (id)v0[20];
    os_log_type_t type = v8;
    os_log_type_t v9 = (void *)v0[19];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v0[17] = v9;
    uint64_t v33 = v29;
    *(_DWORD *)uint64_t v10 = 138412546;
    id v11 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v9;

    *(_WORD *)(v10 + 12) = 2080;
    id v12 = [v26 deviceID];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    v0[18] = sub_100110D58(v13, v15, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v7, type, "Trying to prearm watch with authorization token: %@ with pairingID: %s", (uint8_t *)v10, 0x16u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v16(v32, v31);
  }
  else
  {
    uint64_t v17 = v0[24];
    uint64_t v18 = v0[21];
    uint64_t v19 = v0[22];
    uint64_t v21 = (void *)v0[19];
    id v20 = (void *)v0[20];

    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v16(v17, v18);
  }
  v0[25] = v16;
  uint64_t v23 = v0[19];
  unint64_t v22 = (void *)v0[20];
  v0[2] = v0;
  v0[3] = sub_100456AF8;
  uint64_t v24 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100529EC4;
  v0[13] = &unk_100705990;
  v0[14] = v24;
  [v22 prearmCredentialWithAuthorizationToken:v23 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100456AF8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    id v2 = sub_100456EE0;
  }
  else {
    id v2 = sub_100456C08;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100456C08()
{
  uint64_t v31 = v0;
  uint64_t v1 = (void *)v0[19];
  id v2 = (void *)v0[20];
  defaultLogger()();
  id v3 = v1;
  id v4 = v2;
  id v5 = v3;
  id v6 = v4;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v28 = v0[23];
    uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[25];
    uint64_t v27 = v0[21];
    os_log_type_t v9 = (void *)v0[19];
    id v24 = (id)v0[20];
    uint64_t v10 = swift_slowAlloc();
    log = v7;
    id v11 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    v0[15] = v9;
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v10 = 138412546;
    id v12 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v11 = v9;

    *(_WORD *)(v10 + 12) = 2080;
    id v13 = [v24 deviceID];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    v0[16] = sub_100110D58(v14, v16, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, log, v8, "Successfully prearmed watch with token: %@ with pairingID: %s", (uint8_t *)v10, 0x16u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v29(v28, v27);
  }
  else
  {
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[25];
    uint64_t v18 = v0[23];
    id v20 = (void *)v0[20];
    uint64_t v19 = v0[21];
    uint64_t v21 = (void *)v0[19];

    v17(v18, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_100456EE0()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100456F60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = (void *)sub_100100EB4(a2, a3);
  if (!v4 && v6)
  {
    id v7 = v6;
    id v8 = [v7 keyBlob];
    if (v8)
    {
      os_log_type_t v9 = v8;
      uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      id v13 = [v7 pairingID];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        LOWORD(v14) = (unsigned __int16)[v7 version];
        swift_beginAccess();
        uint64_t v18 = *(void *)(a4 + 16);
        unint64_t v19 = *(void *)(a4 + 24);
        uint64_t v20 = *(void *)(a4 + 32);
        uint64_t v21 = *(void *)(a4 + 40);
        *(void *)(a4 + 16) = v10;
        *(void *)(a4 + 24) = v12;
        *(void *)(a4 + 32) = v15;
        *(void *)(a4 + 40) = v17;
        *(_WORD *)(a4 + 48) = (_WORD)v14;
        sub_1000D79D0(v18, v19, v20, v21);
        return;
      }

      sub_10000C5F4(v10, v12);
    }
    else
    {
    }
  }
}

uint64_t sub_10045709C()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_10045715C, 0, 0);
}

uint64_t sub_10045715C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Trying to delete global auth acl in watch", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v7 = v0[2];
  uint64_t v6 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v0[6] = *(void *)(*(void *)(v7
                                + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService)
                    + OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession);
  swift_retain();
  id v8 = (void *)swift_task_alloc();
  v0[7] = v8;
  *id v8 = v0;
  v8[1] = sub_1004572C0;
  return sub_10001B124(30.0);
}

uint64_t sub_1004572C0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100457408, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100457408()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100457474(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  return _swift_task_switch(sub_100457538, 0, 0);
}

uint64_t sub_100457538()
{
  uint64_t v20 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[12];
    uint64_t v3 = v0[13];
    uint64_t v5 = v0[11];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[7] = sub_100110D58(0xD00000000000001CLL, 0x800000010064CEE0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s called", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    uint64_t v8 = v0[12];
    uint64_t v7 = v0[13];
    uint64_t v9 = v0[11];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  uint64_t v10 = v0[9];
  unint64_t v11 = *(void **)(v0[10] + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_biometricStore);
  uint64_t v12 = swift_allocObject();
  v0[14] = v12;
  *(void *)(v12 + 16) = v11;
  long long v14 = *(_OWORD *)v10;
  long long v13 = *(_OWORD *)(v10 + 16);
  *(_WORD *)(v12 + 56) = *(_WORD *)(v10 + 32);
  *(_OWORD *)(v12 + 24) = v14;
  *(_OWORD *)(v12 + 40) = v13;
  id v15 = v11;
  sub_10045D19C(v10);
  uint64_t v16 = (void *)swift_task_alloc();
  v0[15] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1004577B4;
  v17.n128_u64[0] = 30.0;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 2, &unk_10072ECF8, v12, &type metadata for PrearmTrustWrapper, v17);
}

uint64_t sub_1004577B4()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_100457968;
  }
  else
  {
    swift_release();
    os_log_type_t v2 = sub_1004578D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004578D0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  long long v7 = *(_OWORD *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  __int16 v4 = *(_WORD *)(v0 + 48);
  swift_task_dealloc();
  *(_OWORD *)uint64_t v1 = v7;
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(_WORD *)(v1 + 32) = v4;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100457968()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004579D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[20] = v4;
  v3[21] = *(void *)(v4 - 8);
  v3[22] = swift_task_alloc();
  return _swift_task_switch(sub_100457A98, 0, 0);
}

uint64_t sub_100457A98()
{
  uint64_t v1 = (void *)v0[18];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[23] = isa;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100457BB0;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10059400C;
  v0[13] = &unk_1007058B0;
  v0[14] = v3;
  [v1 migratePrearmTrustBlob:isa completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100457BB0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    uint64_t v2 = sub_100458198;
  }
  else {
    uint64_t v2 = sub_100457CC0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100457CC0()
{
  uint64_t v1 = (void *)v0[23];
  uint64_t v2 = v0[15];
  unint64_t v3 = v0[16];
  v0[25] = v2;
  v0[26] = v3;

  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  v0[27] = v4;
  uint64_t v5 = v4;
  uint64_t v7 = v0[21];
  uint64_t v6 = v0[22];
  uint64_t v9 = v0[19];
  uint64_t v8 = v0[20];
  uint64_t v10 = swift_allocObject();
  v0[28] = v10;
  *(void *)(v10 + 16) = v5;
  long long v12 = *(_OWORD *)v9;
  long long v11 = *(_OWORD *)(v9 + 16);
  *(_WORD *)(v10 + 56) = *(_WORD *)(v9 + 32);
  *(_OWORD *)(v10 + 24) = v12;
  *(_OWORD *)(v10 + 40) = v11;
  *(void *)(v10 + 64) = v2;
  *(void *)(v10 + 72) = v3;
  swift_retain();
  sub_10045D19C(v9);
  sub_10002CEB0(v2, v3);
  uint64_t v13 = swift_allocObject();
  v0[29] = v13;
  *(void *)(v13 + 16) = sub_10045D228;
  *(void *)(v13 + 24) = v10;
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v8);
  swift_retain();
  long long v14 = (void *)swift_task_alloc();
  v0[30] = v14;
  *long long v14 = v0;
  v14[1] = sub_100457EEC;
  uint64_t v15 = v0[22];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v14, v15, sub_100027978, v13, (char *)&type metadata for () + 8);
}

uint64_t sub_100457EEC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[21] + 8))(v2[22], v2[20]);
  swift_release();
  if (v0)
  {
    unint64_t v3 = sub_10045810C;
  }
  else
  {
    swift_release();
    unint64_t v3 = sub_100458068;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100458068()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[17];
  swift_release();
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = v1;
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = v5;
  *(_WORD *)(v4 + 32) = 2;
  swift_bridgeObjectRetain();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10045810C()
{
  uint64_t v2 = v0[25];
  unint64_t v1 = v0[26];
  swift_release();
  sub_10000C5F4(v2, v1);
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100458198()
{
  unint64_t v1 = *(void **)(v0 + 184);
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_100458210(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v48 = a4;
  uint64_t v49 = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  long long v12 = (char *)&v40 - v11;
  uint64_t v13 = type metadata accessor for DIPError.Code();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (void *)sub_100100EB4(*(void *)(a2 + 16), *(void **)(a2 + 24));
  if (!v4)
  {
    uint64_t v46 = a1;
    unsigned __int8 v47 = v12;
    uint64_t v18 = v49;
    uint64_t v19 = v50;
    __n128 v44 = v10;
    if (v17)
    {
      id v45 = v17;
      uint64_t v20 = v47;
      defaultLogger()();
      uint64_t v21 = v18;
      unint64_t v22 = v48;
      sub_10002CEB0(v18, v48);
      uint64_t v23 = Logger.logObject.getter();
      int v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, (os_log_type_t)v24))
      {
        int v42 = v24;
        os_log_t v43 = v23;
        uint64_t v25 = swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        uint64_t v52 = v41;
        *(_DWORD *)uint64_t v25 = 136315394;
        uint64_t v51 = sub_100110D58(0xD00000000000001CLL, 0x800000010064CEE0, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 12) = 2048;
        uint64_t v26 = 0;
        unint64_t v27 = v22 >> 62;
        unint64_t v22 = v48;
        switch(v27)
        {
          case 1uLL:
            LODWORD(v26) = HIDWORD(v21) - v21;
            if (__OFSUB__(HIDWORD(v21), v21))
            {
              __break(1u);
LABEL_17:
              __break(1u);
              JUMPOUT(0x100458840);
            }
            uint64_t v26 = (int)v26;
LABEL_11:
            uint64_t v51 = v26;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            sub_10000C5F4(v21, v22);
            os_log_t v32 = v43;
            _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v42, "%s updated blob size = %ld", (uint8_t *)v25, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v28 = *(void (**)(char *, uint64_t))(v19 + 8);
            v28(v47, v7);
            break;
          case 2uLL:
            uint64_t v30 = *(void *)(v21 + 16);
            uint64_t v29 = *(void *)(v21 + 24);
            BOOL v31 = __OFSUB__(v29, v30);
            uint64_t v26 = v29 - v30;
            if (!v31) {
              goto LABEL_11;
            }
            goto LABEL_17;
          case 3uLL:
            goto LABEL_11;
          default:
            uint64_t v26 = BYTE6(v48);
            goto LABEL_11;
        }
      }
      else
      {
        sub_10000C5F4(v21, v22);

        uint64_t v28 = *(void (**)(char *, uint64_t))(v19 + 8);
        v28(v20, v7);
      }
      StoredPrearmTrust.update(keyBlob:version:)(v21, v22, 2);
      sub_1000FFAB4();
      uint64_t v33 = v44;
      defaultLogger()();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v49 = v7;
        uint64_t v37 = (uint8_t *)v36;
        uint64_t v52 = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136315138;
        uint64_t v51 = sub_100110D58(0xD00000000000001CLL, 0x800000010064CEE0, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s updated blob saved", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v38 = v49;
        unint64_t v39 = v44;
      }
      else
      {

        unint64_t v39 = v33;
        uint64_t v38 = v7;
      }
      v28(v39, v38);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DIPError.Code.watchPrearmTrustDoesNotExist(_:), v13);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

uint64_t sub_100458850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[20] = v6;
  v5[21] = *(void *)(v6 - 8);
  v5[22] = swift_task_alloc();
  return _swift_task_switch(sub_100458918, 0, 0);
}

uint64_t sub_100458918()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v1;
  void *v1 = v0;
  v1[1] = sub_1004589B4;
  return sub_10001BBB4();
}

uint64_t sub_1004589B4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100458AB4, 0, 0);
}

uint64_t sub_100458AB4()
{
  uint64_t v1 = (void *)v0[24];
  if (v1)
  {
    uint64_t v3 = v0[15];
    uint64_t v2 = v0[16];
    NSString v4 = String._bridgeToObjectiveC()();
    v0[25] = v4;
    v0[2] = v0;
    v0[3] = sub_100458D28;
    uint64_t v5 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100529EC4;
    v0[13] = &unk_100705870;
    v0[14] = v5;
    [v1 addNotificationWithType:v3 documentType:v2 issuerName:v4 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[21] + 104))(v0[22], enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v0[20]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100458D28()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    uint64_t v2 = sub_100458EAC;
  }
  else {
    uint64_t v2 = sub_100458E38;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100458E38()
{
  uint64_t v1 = *(void **)(v0 + 192);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100458EAC()
{
  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = (void *)v0[24];
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100458F2C(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_100458FEC, 0, 0);
}

uint64_t sub_100458FEC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v1;
  void *v1 = v0;
  v1[1] = sub_100459088;
  return sub_10001BBB4();
}

uint64_t sub_100459088(uint64_t a1)
{
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100459188, 0, 0);
}

uint64_t sub_100459188()
{
  uint64_t v1 = (void *)v0[21];
  if (v1)
  {
    uint64_t v2 = v0[15];
    v0[2] = v0;
    v0[3] = sub_1004593D4;
    uint64_t v3 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100529EC4;
    v0[13] = &unk_100705858;
    v0[14] = v3;
    [v1 updateProofingConfiguration:v2 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v0[17]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1004593D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    uint64_t v2 = sub_100459554;
  }
  else {
    uint64_t v2 = sub_1004594E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004594E4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100459554()
{
  uint64_t v1 = *(void **)(v0 + 168);
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1004595CC()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_10045968C, 0, 0);
}

uint64_t sub_10045968C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  void *v1 = v0;
  v1[1] = sub_100459728;
  return sub_10001BBB4();
}

uint64_t sub_100459728(uint64_t a1)
{
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100459828, 0, 0);
}

uint64_t sub_100459828()
{
  uint64_t v1 = (void *)v0[9];
  if (v1)
  {
    uint64_t v2 = swift_allocObject();
    v0[10] = v2;
    *(void *)(v2 + 16) = v1;
    id v3 = v1;
    uint64_t v4 = (void *)swift_task_alloc();
    v0[11] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100459A6C;
    v5.n128_u64[0] = 30.0;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 2, &unk_10072ECE0, v2, &type metadata for String, v5);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v0[5]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100459A6C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100459C0C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100459B88;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100459B88()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_100459C0C()
{
  uint64_t v1 = *(void **)(v0 + 72);
  swift_release();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100459C7C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return _swift_task_switch(sub_100459C9C, 0, 0);
}

uint64_t sub_100459C9C()
{
  uint64_t v1 = (void *)v0[18];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100459D98;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10044B79C;
  v0[13] = &unk_100705840;
  v0[14] = v2;
  [v1 pairedWatchSEIDWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100459D98()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_100459ECC;
  }
  else {
    uint64_t v2 = sub_100459EA8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100459EA8()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void **)(v0 + 136);
  void *v1 = *(void *)(v0 + 120);
  v1[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100459ECC()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10045A030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100025D64;
  return sub_10045A308(a5);
}

uint64_t sub_10045A308(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  sub_100007764(&qword_10071FEE0);
  v2[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[15] = v5;
  v2[16] = *(void *)(v5 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_1007264F0);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v2[21] = v6;
  v2[22] = *(void *)(v6 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  return _swift_task_switch(sub_10045A578, 0, 0);
}

uint64_t sub_10045A578()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[7];
  uint64_t v5 = OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
  v0[26] = OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  sub_10045CE5C(v6, v3);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[27] = v7;
  v0[28] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v7(v3, 1, v1) == 1)
  {
    sub_10045CEC4(v0[20]);
LABEL_8:
    uint64_t v10 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[27];
    uint64_t v11 = v0[21];
    uint64_t v12 = v0[19];
    uint64_t v13 = v0[7] + v0[26];
    _StringGuts.grow(_:)(77);
    v14._uint64_t countAndFlagsBits = 0xD000000000000034;
    v14._object = (void *)0x800000010064CBA0;
    String.append(_:)(v14);
    sub_10045CE5C(v13, v12);
    if (v10(v12, 1, v11))
    {
      sub_10045CEC4(v0[19]);
      uint64_t v15 = 0;
      uint64_t v16 = (void *)0xE000000000000000;
    }
    else
    {
      uint64_t v18 = v0[22];
      uint64_t v17 = v0[23];
      uint64_t v19 = v0[21];
      uint64_t v20 = v0[19];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
      sub_10045CEC4(v20);
      uint64_t v15 = UUID.uuidString.getter();
      uint64_t v16 = v21;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    uint64_t v33 = v0[17];
    uint64_t v34 = v0[16];
    uint64_t v35 = v0[15];
    uint64_t v22 = v0[12];
    uint64_t v23 = v0[10];
    uint64_t v31 = v0[13];
    uint64_t v32 = v0[11];
    uint64_t v25 = v0[8];
    uint64_t v24 = v0[9];
    v26._uint64_t countAndFlagsBits = v15;
    v26._object = v16;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._object = (void *)0x800000010064CBE0;
    v27._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v27);
    sub_100464150((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v23, enum case for DIPError.Code.rangingSessionIDMismatch(_:), v25);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v29, v31, v32);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v31, v32);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = (uint64_t (*)(void))v0[1];
    return v30();
  }
  (*(void (**)(void, void, void))(v0[22] + 32))(v0[25], v0[20], v0[21]);
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    (*(void (**)(void, void))(v0[22] + 8))(v0[25], v0[21]);
    goto LABEL_8;
  }
  uint64_t v8 = (void *)swift_task_alloc();
  v0[29] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10045AA98;
  return sub_10001BBB4();
}

uint64_t sub_10045AA98(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10045AB98, 0, 0);
}

uint64_t sub_10045AB98()
{
  uint64_t v60 = v0;
  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 192);
    id v6 = [*(id *)(v0 + 240) deviceID];

    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v4, v2);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 192);
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 144);
    uint64_t v15 = *(void *)(v0 + 128);
    uint64_t v57 = v8;
    if (v11)
    {
      uint64_t v50 = *(void *)(v0 + 168);
      uint64_t v53 = *(void *)(v0 + 120);
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      v59[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v17 = UUID.uuidString.getter();
      *(void *)(v0 + 40) = sub_100110D58(v17, v18, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v19(v12, v50);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Completed secure ranging with watch with sessionID: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v53);
    }
    else
    {
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      uint64_t v27 = *(void *)(v0 + 120);
      v19(*(void *)(v0 + 192), *(void *)(v0 + 168));

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v27);
    }
    uint64_t v28 = *(void *)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 112);
    uint64_t v31 = *(void **)(v0 + 56);
    uint64_t v32 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v30, 1, 1, v32);
    uint64_t v33 = (void *)swift_allocObject();
    v33[2] = 0;
    v33[3] = 0;
    _OWORD v33[4] = v31;
    v33[5] = v55;
    v33[6] = v57;
    id v34 = v31;
    swift_bridgeObjectRetain();
    sub_10014043C(v30, (uint64_t)&unk_10072ECD0, (uint64_t)v33);
    swift_bridgeObjectRelease();
    swift_release();
    v19(v28, v29);
  }
  else
  {
    (*(void (**)(void, void))(v3 + 8))(*(void *)(v0 + 200), *(void *)(v0 + 168));
    uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
    uint64_t v21 = *(void *)(v0 + 168);
    uint64_t v22 = *(void *)(v0 + 152);
    uint64_t v23 = *(void *)(v0 + 56) + *(void *)(v0 + 208);
    v59[0] = 0;
    v59[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v24._uint64_t countAndFlagsBits = 0xD000000000000034;
    v24._object = (void *)0x800000010064CBA0;
    String.append(_:)(v24);
    sub_10045CE5C(v23, v22);
    if (v20(v22, 1, v21))
    {
      sub_10045CEC4(*(void *)(v0 + 152));
      uint64_t v25 = 0;
      Swift::String v26 = (void *)0xE000000000000000;
    }
    else
    {
      uint64_t v36 = *(void *)(v0 + 176);
      uint64_t v35 = *(void *)(v0 + 184);
      uint64_t v37 = *(void *)(v0 + 168);
      uint64_t v38 = *(void *)(v0 + 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v38, v37);
      sub_10045CEC4(v38);
      uint64_t v25 = UUID.uuidString.getter();
      Swift::String v26 = v39;
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    }
    uint64_t v54 = *(void *)(v0 + 136);
    uint64_t v56 = *(void *)(v0 + 128);
    uint64_t v58 = *(void *)(v0 + 120);
    uint64_t v40 = *(void *)(v0 + 96);
    uint64_t v41 = *(void *)(v0 + 80);
    os_log_t log = *(os_log_t *)(v0 + 104);
    uint64_t v52 = *(void *)(v0 + 88);
    uint64_t v43 = *(void *)(v0 + 64);
    uint64_t v42 = *(void *)(v0 + 72);
    v44._uint64_t countAndFlagsBits = v25;
    v44._object = v26;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._object = (void *)0x800000010064CBE0;
    v45._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v45);
    sub_100464150((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
    v46._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v42 + 104))(v41, enum case for DIPError.Code.rangingSessionIDMismatch(_:), v43);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, os_log_t, uint64_t))(v40 + 16))(v47, log, v52);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v58);
    (*(void (**)(os_log_t, uint64_t))(v40 + 8))(log, v52);
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
  return v48();
}

uint64_t sub_10045B254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_100025D64;
  return sub_10045B56C(a5, a6);
}

uint64_t sub_10045B56C(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  sub_100007764(&qword_10071FEE0);
  v3[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[17] = v4;
  v3[18] = *(void *)(v4 - 8);
  v3[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError();
  v3[20] = v5;
  v3[21] = *(void *)(v5 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[24] = v6;
  v3[25] = *(void *)(v6 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_1007264F0);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v3[30] = v7;
  v3[31] = *(void *)(v7 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  return _swift_task_switch(sub_10045B7E4, 0, 0);
}

uint64_t sub_10045B7E4()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[15];
  uint64_t v5 = OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
  v0[34] = OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  sub_10045CE5C(v6, v3);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[35] = v7;
  v0[36] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v7(v3, 1, v1) == 1)
  {
    sub_10045CEC4(v0[29]);
LABEL_8:
    os_log_type_t v10 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[35];
    uint64_t v11 = v0[30];
    uint64_t v12 = v0[28];
    uint64_t v13 = v0[15] + v0[34];
    _StringGuts.grow(_:)(77);
    v14._uint64_t countAndFlagsBits = 0xD000000000000034;
    v14._object = (void *)0x800000010064CBA0;
    String.append(_:)(v14);
    sub_10045CE5C(v13, v12);
    if (v10(v12, 1, v11))
    {
      sub_10045CEC4(v0[28]);
      uint64_t v15 = 0;
      uint64_t v16 = (void *)0xE000000000000000;
    }
    else
    {
      uint64_t v18 = v0[31];
      uint64_t v17 = v0[32];
      uint64_t v19 = v0[30];
      uint64_t v20 = v0[28];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
      sub_10045CEC4(v20);
      uint64_t v15 = UUID.uuidString.getter();
      uint64_t v16 = v21;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    uint64_t v33 = v0[26];
    uint64_t v34 = v0[25];
    uint64_t v35 = v0[24];
    uint64_t v22 = v0[21];
    uint64_t v23 = v0[19];
    uint64_t v31 = v0[22];
    uint64_t v32 = v0[20];
    uint64_t v25 = v0[17];
    uint64_t v24 = v0[18];
    v26._uint64_t countAndFlagsBits = v15;
    v26._object = v16;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._object = (void *)0x800000010064CBE0;
    v27._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v27);
    sub_100464150((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v23, enum case for DIPError.Code.rangingSessionIDMismatch(_:), v25);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v29, v31, v32);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v31, v32);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = (uint64_t (*)(void))v0[1];
    return v30();
  }
  (*(void (**)(void, void, void))(v0[31] + 32))(v0[33], v0[29], v0[30]);
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    (*(void (**)(void, void))(v0[31] + 8))(v0[33], v0[30]);
    goto LABEL_8;
  }
  uint64_t v8 = (void *)swift_task_alloc();
  v0[37] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10045BD04;
  return sub_10001BBB4();
}

uint64_t sub_10045BD04(uint64_t a1)
{
  *(void *)(*(void *)v1 + 304) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10045BE04, 0, 0);
}

uint64_t sub_10045BE04()
{
  uint64_t v1 = *(void **)(v0 + 304);
  if (!v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 248) + 8))(*(void *)(v0 + 264), *(void *)(v0 + 240));
    uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
    uint64_t v41 = *(void *)(v0 + 240);
    uint64_t v42 = *(void *)(v0 + 224);
    uint64_t v43 = *(void *)(v0 + 120) + *(void *)(v0 + 272);
    _StringGuts.grow(_:)(77);
    v44._uint64_t countAndFlagsBits = 0xD000000000000034;
    v44._object = (void *)0x800000010064CBA0;
    String.append(_:)(v44);
    sub_10045CE5C(v43, v42);
    if (v40(v42, 1, v41))
    {
      sub_10045CEC4(*(void *)(v0 + 224));
      uint64_t v45 = 0;
      Swift::String v46 = (void *)0xE000000000000000;
    }
    else
    {
      uint64_t v66 = *(void *)(v0 + 248);
      uint64_t v65 = *(void *)(v0 + 256);
      uint64_t v67 = *(void *)(v0 + 240);
      uint64_t v68 = *(void *)(v0 + 224);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v65, v68, v67);
      sub_10045CEC4(v68);
      uint64_t v45 = UUID.uuidString.getter();
      Swift::String v46 = v69;
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
    }
    uint64_t v94 = *(void *)(v0 + 208);
    uint64_t v96 = *(void *)(v0 + 200);
    uint64_t v98 = *(void *)(v0 + 192);
    uint64_t v70 = *(void *)(v0 + 168);
    uint64_t v71 = *(void *)(v0 + 152);
    uint64_t v90 = *(void *)(v0 + 176);
    uint64_t v92 = *(void *)(v0 + 160);
    uint64_t v73 = *(void *)(v0 + 136);
    uint64_t v72 = *(void *)(v0 + 144);
    v74._uint64_t countAndFlagsBits = v45;
    v74._object = v46;
    String.append(_:)(v74);
    swift_bridgeObjectRelease();
    v75._uint64_t countAndFlagsBits = 0xD000000000000015;
    v75._object = (void *)0x800000010064CBE0;
    String.append(_:)(v75);
    sub_100464150((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
    v76._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v72 + 104))(v71, enum case for DIPError.Code.rangingSessionIDMismatch(_:), v73);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v77, v90, v92);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v94, v98);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v90, v92);
    goto LABEL_13;
  }
  id v2 = [*(id *)(v0 + 304) deviceID];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t v6 = (void *)_convertErrorToNSError(_:)();
  unint64_t v7 = (unint64_t)[v6 code];

  if ((v7 & 0x8000000000000000) != 0 || HIDWORD(v7)) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v85 = v5;
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v10 = 67109120;
    *(_DWORD *)(v0 + 312) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, " SFError : %u", v10, 8u);
    swift_slowDealloc();
  }
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 200);

  uint64_t v88 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v88(v11, v12);
  uint64_t v95 = *(void *)(v0 + 264);
  uint64_t v97 = *(void *)(v0 + 248);
  uint64_t v93 = *(void *)(v0 + 240);
  uint64_t v86 = *(void *)(v0 + 192);
  uint64_t v87 = *(void *)(v0 + 208);
  uint64_t v84 = *(void *)(v0 + 168);
  uint64_t v14 = *(void *)(v0 + 152);
  uint64_t v89 = *(void *)(v0 + 160);
  uint64_t v91 = *(void *)(v0 + 184);
  uint64_t v16 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 144);
  if (v7 != 15)
  {
    uint64_t v82 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(136);
    v47._uint64_t countAndFlagsBits = 0xD000000000000073;
    v47._object = (void *)0x800000010064CCB0;
    String.append(_:)(v47);
    swift_getErrorValue();
    v48._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._uint64_t countAndFlagsBits = 0xD000000000000011;
    v49._object = (void *)0x800000010064CD30;
    String.append(_:)(v49);
    id v50 = (id)SFAuthenticationErrorToString();
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;

    v54._uint64_t countAndFlagsBits = v51;
    v54._object = v53;
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.failedToCompleteSecureRangingWithWatch(_:), v82);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v55 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v56 = (*(unsigned __int8 *)(*(void *)v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v55 + 80);
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_100610730;
    unint64_t v58 = v57 + v56;
    uint64_t v59 = (void *)(v57 + v56 + v55[14]);
    uint64_t v60 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v61 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104))(v58, v60, v61);
    uint64_t v62 = (void *)_convertErrorToNSError(_:)();
    id v63 = [v62 code];

    v59[3] = &type metadata for Int;
    *uint64_t v59 = v63;
    sub_10015C504(v57);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v64, v91, v89);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v88(v87, v86);
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v91, v89);
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v95, v93);
LABEL_13:
    swift_errorRelease();
    goto LABEL_14;
  }
  uint64_t v83 = v3;
  uint64_t v80 = *(char **)(v0 + 120);
  uint64_t v81 = *(void *)(v0 + 128);
  _StringGuts.grow(_:)(119);
  v17._uint64_t countAndFlagsBits = 0xD000000000000062;
  v17._object = (void *)0x800000010064CD50;
  String.append(_:)(v17);
  swift_getErrorValue();
  v18._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0xD000000000000011;
  v19._object = (void *)0x800000010064CD30;
  String.append(_:)(v19);
  id v20 = (id)SFAuthenticationErrorToString();
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  v24._uint64_t countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.failedToCompleteSecureRangingWithWatch(_:), v16);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v25 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v26 = (*(unsigned __int8 *)(*(void *)v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v25 + 80);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100610730;
  unint64_t v28 = v27 + v26;
  uint64_t v29 = (void *)(v27 + v26 + v25[14]);
  uint64_t v30 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  uint64_t v31 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104))(v28, v30, v31);
  uint64_t v32 = (void *)_convertErrorToNSError(_:)();
  id v33 = [v32 code];

  v29[3] = &type metadata for Int;
  *uint64_t v29 = v33;
  sub_10015C504(v27);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v34, v91, v89);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v88(v87, v86);
  swift_errorRelease();
  uint64_t v35 = *(void **)&v80[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingManager];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v35 cancelAuthenticationSessionWithID:isa, 0xD000000000000033, 0x800000010064CC70, 585];

  uint64_t v37 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v81, 1, 1, v37);
  uint64_t v38 = (void *)swift_allocObject();
  v38[2] = 0;
  v38[3] = 0;
  v38[4] = v80;
  v38[5] = v83;
  v38[6] = v85;
  unint64_t v39 = v80;
  swift_bridgeObjectRetain();
  sub_10014043C(v81, (uint64_t)&unk_10072ECC8, (uint64_t)v38);
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v91, v89);
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v95, v93);
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v78 = *(uint64_t (**)(void))(v0 + 8);
  return v78();
}

uint64_t sub_10045CB80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  return _swift_task_switch(sub_10045CBA4, 0, 0);
}

uint64_t sub_10045CBA4()
{
  sub_1002774A8(*(void *)(v0 + 24), *(void **)(v0 + 32));
  sub_100143ED8();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id sub_10045CC38()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IdentityWatchSessionManagementListener();
  return [super dealloc];
}

uint64_t sub_10045CCFC()
{
  return type metadata accessor for IdentityWatchSessionManagementListener();
}

uint64_t type metadata accessor for IdentityWatchSessionManagementListener()
{
  uint64_t result = qword_10072EC48;
  if (!qword_10072EC48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10045CD50()
{
  sub_10045CE04();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10045CE04()
{
  if (!qword_10072ECA8)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10072ECA8);
    }
  }
}

uint64_t sub_10045CE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_1007264F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10045CEC4(uint64_t a1)
{
  uint64_t v2 = sub_100007764((uint64_t *)&unk_1007264F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10045CF28(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  os_log_type_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *os_log_type_t v9 = v2;
  v9[1] = sub_100025D64;
  return sub_10044F720(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10045CFF4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025D64;
  v5[17] = a1;
  v5[18] = v4;
  return _swift_task_switch(sub_100459C9C, 0, 0);
}

uint64_t sub_10045D0A4()
{
  sub_10000C5F4(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 58, 7);
}

uint64_t sub_10045D0EC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025D64;
  return sub_1004579D4(a1, v4, v1 + 24);
}

uint64_t sub_10045D19C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10045D1D8()
{
  swift_release();
  sub_10000C5F4(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();
  sub_10000C5F4(*(void *)(v0 + 64), *(void *)(v0 + 72));

  return _swift_deallocObject(v0, 80, 7);
}

void sub_10045D228()
{
  sub_100458210(*(void *)(v0 + 16), v0 + 24, *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_10045D24C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = *a2;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10000C494;
  return v8(a1, v5);
}

uint64_t sub_10045D334(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v15[1] = v3;
    uint64_t v12 = swift_slowAlloc();
    v15[0] = v6;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    v15[2] = sub_100110D58(a1, a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Trying to unregister for phone lock notifications for watch with pairingID: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, void))(v7 + 8))(v9, v15[0]);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return sub_1005F7878(a1, a2);
}

uint64_t sub_10045D570(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  void v3[3] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_10045D644, 0, 0);
}

uint64_t sub_10045D644()
{
  uint64_t v16 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[9];
    uint64_t v4 = v0[6];
    uint64_t v5 = v0[7];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[2] = sub_100110D58(0xD000000000000042, 0x800000010064D580, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s called", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v7(v3, v4);
  }
  else
  {
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[6];
    uint64_t v10 = v0[7];

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[10] = v7;
  os_log_type_t v11 = (void *)swift_task_alloc();
  v0[11] = v11;
  *os_log_type_t v11 = v0;
  v11[1] = sub_10045D84C;
  uint64_t v12 = v0[4];
  uint64_t v13 = v0[3];
  return sub_10044C1B0(v13, v12);
}

uint64_t sub_10045D84C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10045DABC;
  }
  else {
    os_log_type_t v2 = sub_10045D960;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10045D960()
{
  uint64_t v1 = v0[12];
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  if (v1)
  {
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[10];
    uint64_t v10 = v0[8];
    uint64_t v11 = v0[6];
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    v9(v10, v11);
  }
  else
  {
    uint64_t v3 = v2;
    uint64_t v4 = v0[4];
    uint64_t v5 = (void *)v0[5];
    uint64_t v6 = v0[3];
    uint64_t v7 = (void *)swift_allocObject();
    v7[2] = v6;
    v7[3] = v4;
    v7[4] = v3;
    v7[5] = v5;
    swift_bridgeObjectRetain();
    swift_retain();
    id v8 = v5;
    sub_1000FFE3C((uint64_t)sub_1004643B8, (uint64_t)v7);
    swift_release();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10045DABC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10045DB80(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  __chkstk_darwin(v6);
  id v8 = (char *)&v19 - v7;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v21 = a1;
  if (v11)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v5;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    Swift::String v19 = v13 + 4;
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_100110D58(a1, a2, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Trying to remove proofing session for watch with pairingID: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v20;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v15 = v14;
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = v21;
  void v16[2] = v15;
  v16[3] = v17;
  v16[4] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1004643DC, (uint64_t)v16);
  swift_release();
  return swift_release();
}

uint64_t sub_10045DEB0(uint64_t a1, uint64_t a2)
{
  v3[65] = v2;
  v3[63] = a1;
  v3[64] = a2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v3[66] = v6;
  v3[67] = *(void *)(v6 - 8);
  v3[68] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v3[69] = v7;
  v3[70] = *(void *)(v7 - 8);
  v3[71] = swift_task_alloc();
  v3[72] = swift_task_alloc();
  v3[73] = swift_task_alloc();
  v3[74] = swift_task_alloc();
  v3[75] = swift_task_alloc();
  v3[76] = swift_task_alloc();
  id v8 = (void *)swift_task_alloc();
  v3[77] = v8;
  *id v8 = v3;
  v8[1] = sub_10045E054;
  return sub_10044C1B0(a1, a2);
}

uint64_t sub_10045E054()
{
  *(void *)(*(void *)v1 + 624) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10045F9C4;
  }
  else {
    uint64_t v2 = sub_10045E168;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10045E168()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v3 = (uint64_t)&v2[4];
  uint64_t v4 = v2 + 52;
  os_unfair_lock_lock(v2 + 52);
  sub_1000262B4(v3, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v4);
  if (!v1)
  {
    uint64_t v5 = *(void *)(v0 + 504);
    uint64_t v6 = *(void *)(v0 + 512);
    *(void *)(v0 + 632) = *(void *)(v0 + 80);
    swift_retain();
    sub_1000262D0(v0 + 16);
    uint64_t v7 = swift_allocObject();
    *(void *)(v0 + 640) = v7;
    *(void *)(v7 + 16) = v5;
    *(void *)(v7 + 24) = v6;
    uint64_t v8 = swift_allocObject();
    *(void *)(v0 + 648) = v8;
    *(void *)(v8 + 16) = sub_100464434;
    *(void *)(v8 + 24) = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 656) = v9;
    uint64_t v10 = sub_100007764(&qword_10072EE60);
    *uint64_t v9 = v0;
    v9[1] = sub_10045E350;
    AsyncCoreDataContainer.performRead<A>(_:)(v0 + 480, sub_100217DAC, v8, v10);
  }
}

uint64_t sub_10045E350()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 664) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10045EA3C;
  }
  else
  {
    swift_release();
    swift_release();
    *(void *)(v2 + 672) = *(void *)(v2 + 480);
    uint64_t v3 = sub_10045E480;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10045E480()
{
  uint64_t v1 = v0[84];
  uint64_t v2 = *(void *)(v1 + 16);
  v0[85] = v2;
  if (v2)
  {
    v0[86] = OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService;
    v0[87] = 0;
    uint64_t v4 = *(void *)(v1 + 40);
    uint64_t v3 = *(void *)(v1 + 48);
    v0[88] = *(void *)(v1 + 56);
    uint64_t v5 = *(void *)(v1 + 64);
    v0[89] = v5;
    v0[90] = *(void *)(v1 + 72);
    uint64_t v6 = *(void *)(v1 + 80);
    v0[91] = v6;
    v0[92] = *(void *)(v1 + 88);
    uint64_t v7 = *(void *)(v1 + 96);
    v0[93] = v7;
    v0[94] = *(void *)(v1 + 104);
    uint64_t v8 = *(void *)(v1 + 112);
    v0[95] = v8;
    int v9 = *(unsigned __int8 *)(v1 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 == 1)
    {
      uint64_t v38 = v4;
      uint64_t v39 = v8;
      defaultLogger()();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "there is a pending watch notification. Will send the notification to the watch", v12, 2u);
        swift_slowDealloc();
      }
      uint64_t v13 = v0[76];
      uint64_t v14 = v0[70];
      uint64_t v15 = v0[69];
      uint64_t v16 = (void *)v0[65];

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      v0[58] = type metadata accessor for IdentityWatchSessionManagementListener();
      v0[59] = &off_100708288;
      v0[55] = v16;
      id v17 = objc_allocWithZone((Class)PKPaymentService);
      id v18 = v16;
      id v19 = [v17 init];
      type metadata accessor for IdentityProofingConfigProvider();
      uint64_t v20 = swift_allocObject();
      type metadata accessor for IdentityProofingTextReplacementProvider();
      swift_allocObject();
      uint64_t v21 = IdentityProofingTextReplacementProvider.init()();
      type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
      uint64_t v22 = swift_allocObject();
      type metadata accessor for IdentityProofingWorkflowProvider();
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v22;
      type metadata accessor for IdentityProofingUserNotificationProvider();
      uint64_t v24 = swift_allocObject();
      sub_1005EBED8((uint64_t)v19, (uint64_t)(v0 + 55), v20, v21, v23, v24);
      if (v3) {
        uint64_t v25 = v38;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v3) {
        uint64_t v26 = v3;
      }
      else {
        uint64_t v26 = 0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      sub_10051BB20(0, 0, 0, 0, v25, v26, 0);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v8 = v39;
    }
    if (v5 && v6 && v7 && v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v27 = (void *)swift_task_alloc();
      v0[96] = v27;
      *uint64_t v27 = v0;
      v27[1] = sub_10045EB70;
      return sub_10001BBB4();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v33, "Unable to fetch provisioning identifiers for watch, skip retryProvisioning", v34, 2u);
      swift_slowDealloc();
    }
    uint64_t v32 = v0[72];
  }
  else
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "No proofing sessions exist for watch in the database, skip retryProvisioning.", v31, 2u);
      swift_slowDealloc();
    }
    uint64_t v32 = v0[71];
  }
  uint64_t v35 = v0[70];
  uint64_t v36 = v0[69];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v32, v36);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = (uint64_t (*)(void))v0[1];
  return v37();
}

uint64_t sub_10045EA3C()
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0[73];
  uint64_t v2 = v0[70];
  uint64_t v3 = v0[69];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10045EB70(uint64_t a1)
{
  *(void *)(*(void *)v1 + 776) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10045EC70, 0, 0);
}

uint64_t sub_10045EC70()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(void **)(v0 + 776);

  if (v1)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 600);
    uint64_t v6 = *(void *)(v0 + 560);
    uint64_t v7 = *(void *)(v0 + 552);
    unint64_t v8 = *(void *)(v0 + 512);
    if (v4)
    {
      uint64_t v9 = *(void *)(v0 + 504);
      uint64_t v33 = *(void *)(v0 + 600);
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 496) = sub_100110D58(v9, v8, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Trying to retry provisioning for watch with pairingID: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      os_log_type_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v11(v33, v7);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      os_log_type_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v11(v5, v7);
    }
    *(void *)(v0 + 784) = v11;
    long long v19 = *(_OWORD *)(v0 + 736);
    long long v21 = *(_OWORD *)(v0 + 704);
    long long v20 = *(_OWORD *)(v0 + 720);
    uint64_t v22 = *(void **)(v0 + 520);
    uint64_t v23 = *(void *)(v0 + 504);
    uint64_t v24 = *(void *)(v0 + 512);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 752);
    *(_OWORD *)(v0 + 224) = v21;
    *(_OWORD *)(v0 + 240) = v20;
    *(_OWORD *)(v0 + 256) = v19;
    *(void *)(v0 + 272) = v23;
    *(void *)(v0 + 280) = v24;
    *(void *)(v0 + 288) = 0;
    *(unsigned char *)(v0 + 296) = 1;
    *(_OWORD *)(v0 + 304) = xmmword_100610EF0;
    *(_OWORD *)(v0 + 320) = xmmword_100610EF0;
    *(void *)(v0 + 336) = v22;
    *(void *)(v0 + 424) = &type metadata for IdentityWatchProvisioningProvider;
    *(void *)(v0 + 432) = &off_1006F5CC0;
    uint64_t v25 = swift_allocObject();
    long long v26 = *(_OWORD *)(v0 + 288);
    long long v27 = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v25 + 112) = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v25 + 128) = v27;
    long long v28 = *(_OWORD *)(v0 + 224);
    long long v29 = *(_OWORD *)(v0 + 256);
    long long v30 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v25 + 48) = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v25 + 64) = v29;
    *(void *)(v0 + 400) = v25;
    *(void *)(v25 + 144) = *(void *)(v0 + 336);
    *(_OWORD *)(v25 + 80) = v30;
    *(_OWORD *)(v25 + 96) = v26;
    *(_OWORD *)(v25 + 16) = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v25 + 32) = v28;
    type metadata accessor for IdentityProvisioningManager();
    *(void *)(v0 + 792) = swift_initStackObject();
    swift_bridgeObjectRetain();
    id v31 = v22;
    sub_1002A8F60((void *)(v0 + 208));
    *(void *)(v0 + 800) = sub_1004DEDFC(v0 + 400);
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 808) = v32;
    void *v32 = v0;
    v32[1] = sub_10045F198;
    return sub_1004DF088();
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 584);
    uint64_t v13 = *(void *)(v0 + 560);
    uint64_t v34 = *(void *)(v0 + 552);
    uint64_t v14 = *(void *)(v0 + 544);
    uint64_t v15 = *(void *)(v0 + 536);
    uint64_t v16 = *(void *)(v0 + 528);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v16);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v34);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

uint64_t sub_10045F198()
{
  *(void *)(*(void *)v1 + 816) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10045FAD8;
  }
  else {
    uint64_t v2 = sub_10045F2AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10045F2AC()
{
  id v50 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v46 = v0[74];
    Swift::String v48 = (void (*)(uint64_t, uint64_t))v0[98];
    uint64_t v44 = v0[69];
    uint64_t v3 = v0[63];
    unint64_t v4 = v0[64];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[61] = sub_100110D58(v3, v4, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully provisioned watch with pairingID: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    sub_1002A90A0(v0 + 26);
    v48(v46, v44);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[98];
    uint64_t v7 = v0[74];
    uint64_t v8 = v0[69];
    sub_1002A90A0(v0 + 26);
    swift_bridgeObjectRelease_n();
    swift_release();

    v6(v7, v8);
  }
  uint64_t v9 = v0[87] + 1;
  if (v9 == v0[85])
  {
    swift_bridgeObjectRelease();
    swift_release();
LABEL_26:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v43 = (uint64_t (*)(void))v0[1];
    return v43();
  }
  v0[87] = v9;
  uint64_t v10 = v0[84] + 104 * v9;
  uint64_t v12 = *(void *)(v10 + 40);
  uint64_t v11 = *(void *)(v10 + 48);
  v0[88] = *(void *)(v10 + 56);
  uint64_t v13 = *(void *)(v10 + 64);
  v0[89] = v13;
  v0[90] = *(void *)(v10 + 72);
  uint64_t v14 = *(void *)(v10 + 80);
  v0[91] = v14;
  v0[92] = *(void *)(v10 + 88);
  uint64_t v15 = *(void *)(v10 + 96);
  v0[93] = v15;
  v0[94] = *(void *)(v10 + 104);
  uint64_t v16 = *(void *)(v10 + 112);
  v0[95] = v16;
  char v17 = *(unsigned char *)(v10 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17)
  {
    uint64_t v45 = v12;
    uint64_t v47 = v16;
    defaultLogger()();
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      long long v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "there is a pending watch notification. Will send the notification to the watch", v20, 2u);
      swift_slowDealloc();
    }
    uint64_t v21 = v0[76];
    uint64_t v22 = v0[70];
    uint64_t v23 = v0[69];
    uint64_t v24 = (void *)v0[65];

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    v0[58] = type metadata accessor for IdentityWatchSessionManagementListener();
    v0[59] = &off_100708288;
    v0[55] = v24;
    id v25 = objc_allocWithZone((Class)PKPaymentService);
    id v26 = v24;
    id v27 = [v25 init];
    type metadata accessor for IdentityProofingConfigProvider();
    uint64_t v28 = swift_allocObject();
    type metadata accessor for IdentityProofingTextReplacementProvider();
    swift_allocObject();
    uint64_t v29 = IdentityProofingTextReplacementProvider.init()();
    type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
    uint64_t v30 = swift_allocObject();
    type metadata accessor for IdentityProofingWorkflowProvider();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v30;
    type metadata accessor for IdentityProofingUserNotificationProvider();
    uint64_t v32 = swift_allocObject();
    sub_1005EBED8((uint64_t)v27, (uint64_t)(v0 + 55), v28, v29, v31, v32);
    if (v11) {
      uint64_t v33 = v45;
    }
    else {
      uint64_t v33 = 0;
    }
    if (v11) {
      uint64_t v34 = v11;
    }
    else {
      uint64_t v34 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    sub_10051BB20(0, 0, 0, 0, v33, v34, 0);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v16 = v47;
  }
  if (!v13 || !v14 || !v15 || !v16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unable to fetch provisioning identifiers for watch, skip retryProvisioning", v39, 2u);
      swift_slowDealloc();
    }
    uint64_t v40 = v0[72];
    uint64_t v41 = v0[70];
    uint64_t v42 = v0[69];
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)swift_task_alloc();
  v0[96] = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_10045EB70;
  return sub_10001BBB4();
}

uint64_t sub_10045F9C4()
{
  uint64_t v1 = v0[73];
  uint64_t v2 = v0[70];
  uint64_t v3 = v0[69];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10045FAD8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[98];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[69];
  swift_release();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  sub_1002A90A0(v0 + 26);
  v1(v2, v3);
  uint64_t v4 = v0[87] + 1;
  if (v4 == v0[85])
  {
    swift_bridgeObjectRelease();
    swift_release();
LABEL_23:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
  v0[87] = v4;
  uint64_t v5 = v0[84] + 104 * v4;
  uint64_t v7 = *(void *)(v5 + 40);
  uint64_t v6 = *(void *)(v5 + 48);
  v0[88] = *(void *)(v5 + 56);
  uint64_t v8 = *(void *)(v5 + 64);
  v0[89] = v8;
  v0[90] = *(void *)(v5 + 72);
  uint64_t v9 = *(void *)(v5 + 80);
  v0[91] = v9;
  v0[92] = *(void *)(v5 + 88);
  uint64_t v10 = *(void *)(v5 + 96);
  v0[93] = v10;
  v0[94] = *(void *)(v5 + 104);
  uint64_t v11 = *(void *)(v5 + 112);
  v0[95] = v11;
  char v12 = *(unsigned char *)(v5 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12)
  {
    uint64_t v39 = v7;
    uint64_t v40 = v11;
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "there is a pending watch notification. Will send the notification to the watch", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = v0[76];
    uint64_t v17 = v0[70];
    uint64_t v18 = v0[69];
    os_log_type_t v19 = (void *)v0[65];

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    v0[58] = type metadata accessor for IdentityWatchSessionManagementListener();
    v0[59] = &off_100708288;
    v0[55] = v19;
    id v20 = objc_allocWithZone((Class)PKPaymentService);
    id v21 = v19;
    id v22 = [v20 init];
    type metadata accessor for IdentityProofingConfigProvider();
    uint64_t v23 = swift_allocObject();
    type metadata accessor for IdentityProofingTextReplacementProvider();
    swift_allocObject();
    uint64_t v24 = IdentityProofingTextReplacementProvider.init()();
    type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
    uint64_t v25 = swift_allocObject();
    type metadata accessor for IdentityProofingWorkflowProvider();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v25;
    type metadata accessor for IdentityProofingUserNotificationProvider();
    uint64_t v27 = swift_allocObject();
    sub_1005EBED8((uint64_t)v22, (uint64_t)(v0 + 55), v23, v24, v26, v27);
    if (v6) {
      uint64_t v28 = v39;
    }
    else {
      uint64_t v28 = 0;
    }
    if (v6) {
      uint64_t v29 = v6;
    }
    else {
      uint64_t v29 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    sub_10051BB20(0, 0, 0, 0, v28, v29, 0);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v11 = v40;
  }
  if (!v8 || !v9 || !v10 || !v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unable to fetch provisioning identifiers for watch, skip retryProvisioning", v34, 2u);
      swift_slowDealloc();
    }
    uint64_t v35 = v0[72];
    uint64_t v36 = v0[70];
    uint64_t v37 = v0[69];
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = (void *)swift_task_alloc();
  v0[96] = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_10045EB70;
  return sub_10001BBB4();
}

uint64_t sub_10046008C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 208) = a1;
  *(void *)(v2 + 216) = a2;
  return _swift_task_switch(sub_1004600AC, 0, 0);
}

uint64_t sub_1004600AC()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 52;
  os_unfair_lock_lock(v1 + 52);
  sub_1000262B4(v2, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v3);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 216);
  *(void *)(v0 + 224) = *(void *)(v0 + 80);
  swift_retain();
  sub_1000262D0(v0 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 232) = v6;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v5;
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 240) = v7;
  *(void *)(v7 + 16) = &unk_10072EE78;
  *(void *)(v7 + 24) = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100460278;
  return AsyncCoreDataContainer.write<A>(_:)();
}

uint64_t sub_100460278()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100460400;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_10046039C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10046039C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100460400()
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100460478(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100460538, 0, 0);
}

uint64_t sub_100460538()
{
  v0[8] = *(void *)(v0[4] + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  void *v1 = v0;
  v1[1] = sub_1004605D8;
  return sub_10001BBB4();
}

uint64_t sub_1004605D8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1004606D8, 0, 0);
}

uint64_t sub_1004606D8()
{
  uint64_t v1 = (void *)v0[10];
  if (v1)
  {
    uint64_t v2 = *(void **)(v0[8] + OBJC_IVAR____TtC8coreidvd8DIPWatch_service);
    v0[11] = v2;
    if (v2)
    {
      uint64_t v3 = v0[3];
      uint64_t v4 = (void *)swift_allocObject();
      v0[12] = v4;
      v4[2] = v2;
      v4[3] = v3;
      v4[4] = v1;
      id v5 = v2;
      swift_bridgeObjectRetain();
      id v6 = v1;
      uint64_t v7 = (void *)swift_task_alloc();
      v0[13] = v7;
      uint64_t v8 = sub_100007764(&qword_1007268F0);
      *uint64_t v7 = v0;
      v7[1] = sub_100460A74;
      v9.n128_u64[0] = 30.0;
      return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 2, &unk_10072EE28, v4, v8, v9);
    }
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.failedToRegisterForWatchEvents(_:), v0[5]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v0[5]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100460A74()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100460C0C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100460B90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100460B90()
{
  uint64_t v1 = *(void **)(v0 + 80);

  uint64_t v2 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100460C0C()
{
  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = (void *)v0[10];
  swift_release();

  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100460C84(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_100460DA0, 0, 0);
}

uint64_t sub_100460DA0()
{
  v0[11] = *(void *)(v0[4] + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  void *v1 = v0;
  v1[1] = sub_100460E40;
  return sub_10001BBB4();
}

uint64_t sub_100460E40(uint64_t a1)
{
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100460F40, 0, 0);
}

uint64_t sub_100460F40()
{
  uint64_t v1 = (void *)v0[13];
  if (v1)
  {
    uint64_t v2 = *(void **)(v0[11] + OBJC_IVAR____TtC8coreidvd8DIPWatch_service);
    v0[14] = v2;
    if (v2)
    {
      id v3 = v2;
      defaultLogger()();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "IdentityWatchSessionManagementListener unregisterFromEvents called", v6, 2u);
        swift_slowDealloc();
      }
      uint64_t v8 = v0[9];
      uint64_t v7 = v0[10];
      uint64_t v9 = v0[8];
      uint64_t v10 = v0[3];

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      uint64_t v11 = (void *)swift_allocObject();
      v0[15] = v11;
      v11[2] = v3;
      v11[3] = v10;
      v11[4] = v1;
      id v12 = v3;
      swift_bridgeObjectRetain();
      id v13 = v1;
      os_log_type_t v14 = (void *)swift_task_alloc();
      v0[16] = v14;
      uint64_t v15 = sub_100007764(&qword_1007268F0);
      *os_log_type_t v14 = v0;
      v14[1] = sub_100461384;
      v16.n128_u64[0] = 30.0;
      return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 2, &unk_10072EE48, v11, v15, v16);
    }
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.failedToUnregisterForWatchEvents(_:), v0[5]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v0[5]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_100461384()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100461530;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1004614A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004614A0()
{
  uint64_t v1 = *(void **)(v0 + 104);

  uint64_t v2 = *(void *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100461530()
{
  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = (void *)v0[13];
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1004615B4(uint64_t a1, uint64_t a2, uint8_t *a3, uint64_t a4)
{
  uint64_t v38 = a1;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  __chkstk_darwin(v7);
  uint64_t v35 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPError();
  uint64_t v37 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v36 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007764((uint64_t *)&unk_1007264F0);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = v13;
    *(_WORD *)id v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Trying to check if secure ranging is supported for watch", v20, 2u);
    id v13 = v32;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v21 = v38;
  id v22 = *(void **)(v38 + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingManager);
  if ([v22 isSupportedForType:2]
    && [v22 isEnabledForType:2])
  {
    id v23 = [v22 authenticateForType:2];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v13, 0, 1, v24);
    uint64_t v25 = v21 + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
    swift_beginAccess();
    sub_1004640E4((uint64_t)v13, v25);
    swift_endAccess();
    sub_10045CE5C(v25, (uint64_t)v13);
    sub_10044F000((uint64_t)v13, 0, a2, a3, a4);
    return sub_10045CEC4((uint64_t)v13);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v33 + 104))(v35, enum case for DIPError.Code.rangingNotSupported(_:), v34);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v27 = v36;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v28 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v13, 1, 1, v28);
    sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v29 = swift_allocError();
    uint64_t v30 = v37;
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v31, v27, v9);
    sub_10044F000((uint64_t)v13, v29, a2, a3, a4);
    swift_errorRelease();
    sub_10045CEC4((uint64_t)v13);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v27, v9);
  }
}

uint64_t sub_100461B14(uint64_t a1, uint8_t *a2)
{
  uint64_t v4 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)&v33 - v12;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v38 = a1;
  if (v16)
  {
    uint64_t v36 = v6;
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v35 = v7;
    uint64_t v40 = v18;
    uint64_t v34 = v11;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_100110D58(a1, (unint64_t)a2, &v40);
    uint64_t v6 = v36;
    uint64_t v11 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Received unlock event from phone, trying to prearm watch with pairingID: %s", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v35;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  os_log_type_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v13, v7);
  id v20 = [self standardUserDefaults];
  v21._object = (void *)0x800000010064D380;
  v21._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  Swift::Bool v22 = NSUserDefaults.internalBool(forKey:)(v21);

  if (v22)
  {
    defaultLogger()();
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Secure ranging with watch is not enabled through IDV internal settings, will continue to prearm the watch without it", v25, 2u);
      swift_slowDealloc();
    }

    v19(v11, v7);
    uint64_t v26 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v6, 1, 1, v26);
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = 0;
    v27[3] = 0;
    id v29 = v37;
    uint64_t v28 = v38;
    v27[4] = v37;
    v27[5] = v28;
    v27[6] = a2;
    swift_bridgeObjectRetain();
    id v30 = v29;
    sub_10014043C((uint64_t)v6, (uint64_t)&unk_10072EE08, (uint64_t)v27);
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    id v32 = v37;
    sub_1004615B4((uint64_t)v32, v38, a2, (uint64_t)v32);

    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100461F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_10046207C, 0, 0);
}

uint64_t sub_10046207C()
{
  id v29 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[13];
    uint64_t v25 = v0[12];
    uint64_t v27 = v0[15];
    uint64_t v5 = v0[7];
    unint64_t v4 = v0[8];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    v0[5] = sub_100110D58(v5, v4, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Trying to retrieve prearm trust key for watch with pairingID: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(v27, v25);
  }
  else
  {
    uint64_t v8 = v0[15];
    uint64_t v9 = v0[12];
    uint64_t v10 = v0[13];
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[16] = v7;
  uint64_t v11 = swift_allocObject();
  v0[17] = v11;
  type metadata accessor for IdentityProofingDataContext();
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_WORD *)(v11 + 48) = 0;
  swift_allocObject();
  sub_1000FF820();
  v0[18] = v12;
  uint64_t v13 = v12;
  uint64_t v14 = v0[10];
  uint64_t v26 = v0[11];
  uint64_t v16 = v0[8];
  uint64_t v15 = v0[9];
  uint64_t v17 = v0[7];
  uint64_t v18 = (void *)swift_allocObject();
  v0[19] = v18;
  v18[2] = v13;
  v18[3] = v17;
  v18[4] = v16;
  v18[5] = v11;
  uint64_t v19 = swift_allocObject();
  v0[20] = v19;
  *(void *)(v19 + 16) = sub_100462CA4;
  *(void *)(v19 + 24) = v18;
  uint64_t v20 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  Swift::String v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v21(v26, v20, v15);
  swift_retain();
  Swift::Bool v22 = (void *)swift_task_alloc();
  v0[21] = v22;
  void *v22 = v0;
  v22[1] = sub_1004624DC;
  uint64_t v23 = v0[11];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v22, v23, sub_10013E108, v19, (char *)&type metadata for () + 8);
}

uint64_t sub_1004624DC()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[10] + 8))(v2[11], v2[9]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100462754;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_100462658;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100462658()
{
  swift_release();
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[6];
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  __int16 v7 = *(_WORD *)(v1 + 48);
  sub_100402504(v3, v4, v5, v6);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(void *)(v2 + 16) = v5;
  *(void *)(v2 + 24) = v6;
  *(_WORD *)(v2 + 32) = v7;
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100462754()
{
  swift_release();
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v3);
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[6];
  swift_beginAccess();
  uint64_t v6 = *(void *)(v4 + 16);
  unint64_t v7 = *(void *)(v4 + 24);
  uint64_t v8 = *(void *)(v4 + 32);
  uint64_t v9 = *(void *)(v4 + 40);
  __int16 v10 = *(_WORD *)(v4 + 48);
  sub_100402504(v6, v7, v8, v9);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)uint64_t v5 = v6;
  *(void *)(v5 + 8) = v7;
  *(void *)(v5 + 16) = v8;
  *(void *)(v5 + 24) = v9;
  *(_WORD *)(v5 + 32) = v10;
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1004628A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10072ED08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10046290C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100462944(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025D64;
  return sub_100455310(a1, v4);
}

uint64_t sub_1004629E4()
{
  sub_10000C5F4(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100462A44(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)(v1 + 5);
  uint64_t v9 = v1[10];
  uint64_t v8 = v1[11];
  __int16 v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100025D64;
  return sub_100455CB4(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100462B1C(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100025D64;
  return sub_1004566BC(a1, v5, v4);
}

unint64_t sub_100462BC8()
{
  return sub_100455204();
}

unint64_t sub_100462BD0()
{
  return sub_100455284();
}

uint64_t sub_100462BD8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100462C14()
{
  if (v0[5])
  {
    sub_10000C5F4(v0[2], v0[3]);
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 50, 7);
}

uint64_t sub_100462C5C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100462CA4()
{
  sub_100456F60(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100462CC4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100462CFC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025D64;
  return sub_100451460(a1, v4);
}

uint64_t sub_100462D9C()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100462DE4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100025D64;
  return sub_100451E78(a1, v4, v5, v6);
}

uint64_t sub_100462E98()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100462ED8(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_100025D64;
  *(_OWORD *)(v4 + 136) = v5;
  *(void *)(v4 + 128) = a1;
  return _swift_task_switch(sub_1004529B8, 0, 0);
}

uint64_t sub_100462F8C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = sub_100025D64;
  return sub_100452C68(a1, v4);
}

uint64_t sub_10046302C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = sub_100025D64;
  return sub_100453130(a1, v4);
}

uint64_t sub_1004630CC()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10046310C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v7 = *((void *)v2 + 3);
  uint64_t v8 = *((void *)v2 + 4);
  double v9 = v2[5];
  __int16 v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  void *v10 = v3;
  v10[1] = sub_100025D64;
  return sub_10044C714(v9, a1, a2, v6, v7, v8);
}

uint64_t sub_1004631E0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100463218(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100025D64;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_10072EDD0 + dword_10072EDD0);
  return v8(a1, a2, v6);
}

uint64_t sub_1004632E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10044DB9C(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

void *sub_100463304@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_100463348()
{
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

id sub_100463390()
{
  return sub_10044DDEC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1004633B0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1004634A0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (void *)swift_task_alloc();
  v6[2] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_100025D64;
  return sub_10045B56C(v4, v5);
}

uint64_t sub_1004635F0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004636C4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[2] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100025D64;
  return sub_10045A308(v3);
}

uint64_t sub_1004637E4(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v71 = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v66 = v3;
  __chkstk_darwin(v3);
  uint64_t v67 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPError();
  uint64_t v63 = *(void *)(v5 - 8);
  uint64_t v64 = v5;
  __chkstk_darwin(v5);
  uint64_t v62 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v7 - 8);
  uint64_t v70 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v68 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v60 - v10;
  uint64_t v12 = sub_100007764((uint64_t *)&unk_1007264F0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v60 - v16;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(char **)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v61 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  os_log_type_t v24 = (void (**)(char *, char *, uint64_t))((char *)&v60 - v23);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v60 - v25;
  uint64_t v27 = v2 + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
  swift_beginAccess();
  sub_10045CE5C(v27, (uint64_t)v17);
  uint64_t v28 = (unsigned int (*)(char *, uint64_t, uint64_t))*((void *)v19 + 6);
  if (v28(v17, 1, v18) == 1)
  {
    uint64_t v60 = (void (**)(char *, char *, uint64_t))v19;
    sub_10045CEC4((uint64_t)v17);
  }
  else
  {
    uint64_t v60 = v24;
    id v29 = v11;
    (*((void (**)(char *, char *, uint64_t))v19 + 4))(v26, v17, v18);
    uint64_t v30 = v71;
    if (static UUID.== infix(_:_:)())
    {
      uint64_t v31 = v29;
      defaultLogger()();
      id v32 = v60;
      (*((void (**)(char *, char *, uint64_t))v19 + 2))((char *)v60, v30, v18);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      BOOL v35 = os_log_type_enabled(v33, v34);
      uint64_t v36 = v70;
      if (v35)
      {
        id v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        uint64_t v68 = v31;
        v73[0] = v38;
        uint64_t v71 = v26;
        *(_DWORD *)id v37 = 136315138;
        uint64_t v39 = UUID.uuidString.getter();
        uint64_t v72 = sub_100110D58(v39, v40, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v41 = (void (*)(void (**)(char *, char *, uint64_t), uint64_t))*((void *)v19 + 1);
        v41(v32, v18);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Initiated secure ranging with watch with sessionID: %s", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v70);
        return ((uint64_t (*)(char *, uint64_t))v41)(v71, v18);
      }
      else
      {

        uint64_t v59 = (void (*)(void (**)(char *, char *, uint64_t), uint64_t))*((void *)v19 + 1);
        v59(v32, v18);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v31, v36);
        return ((uint64_t (*)(char *, uint64_t))v59)(v26, v18);
      }
    }
    uint64_t v60 = (void (**)(char *, char *, uint64_t))v19;
    (*((void (**)(char *, uint64_t))v19 + 1))(v26, v18);
  }
  v73[0] = 0;
  v73[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v43._uint64_t countAndFlagsBits = 0xD000000000000034;
  v43._object = (void *)0x800000010064CBA0;
  String.append(_:)(v43);
  sub_10045CE5C(v27, (uint64_t)v15);
  if (v28(v15, 1, v18))
  {
    sub_10045CEC4((uint64_t)v15);
    uint64_t v44 = 0;
    uint64_t v45 = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v47 = v60;
    uint64_t v46 = v61;
    v60[2](v61, v15, v18);
    sub_10045CEC4((uint64_t)v15);
    uint64_t v44 = UUID.uuidString.getter();
    uint64_t v45 = v48;
    ((void (*)(char *, uint64_t))v47[1])(v46, v18);
  }
  uint64_t v50 = v69;
  uint64_t v49 = v70;
  uint64_t v52 = v63;
  uint64_t v51 = v64;
  uint64_t v53 = v62;
  v54._uint64_t countAndFlagsBits = v44;
  v54._object = v45;
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._object = (void *)0x800000010064CBE0;
  v55._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v55);
  sub_100464150((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
  v56._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v65 + 104))(v67, enum case for DIPError.Code.rangingSessionIDMismatch(_:), v66);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_100464150((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v57, v53, v51);
  unint64_t v58 = v68;
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v58, v49);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v51);
  return swift_errorRelease();
}

uint64_t sub_10046401C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000C494;
  return sub_10044F720(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1004640E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_1007264F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100464150(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10046419C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100025D64;
  *(void *)(v5 + 152) = v4;
  *(_OWORD *)(v5 + 136) = v6;
  *(void *)(v5 + 128) = a1;
  return _swift_task_switch(sub_10044E420, 0, 0);
}

uint64_t sub_100464264()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004642AC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100025D64;
  *(void *)(v5 + 152) = v4;
  *(_OWORD *)(v5 + 136) = v6;
  *(void *)(v5 + 128) = a1;
  return _swift_task_switch(sub_10044E788, 0, 0);
}

uint64_t sub_100464370()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void *sub_1004643B8()
{
  return sub_10044E9D0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_1004643DC()
{
  sub_10044BD88(v0[2], v0[3], v0[4]);
}

uint64_t sub_1004643FC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100464434(char **a1@<X8>)
{
  sub_10044E034(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100464450()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 120);
  if (v1 >> 60 != 15) {
    sub_10000C5F4(*(void *)(v0 + 112), v1);
  }
  unint64_t v2 = *(void *)(v0 + 136);
  if (v2 >> 60 != 15) {
    sub_10000C5F4(*(void *)(v0 + 128), v2);
  }

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t sub_1004644E0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[3] = v6;
  v7[4] = v5;
  v7[1] = sub_100025D64;
  v7[2] = a2;
  return _swift_task_switch(sub_10045CBA4, 0, 0);
}

uint64_t sub_100464598(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000C494;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_10072EDD0 + dword_10072EDD0);
  return v8(a1, a2, v6);
}

uint64_t destroy for IdentityWatchSessionManagementListener.DBProofingSession()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IdentityWatchSessionManagementListener.DBProofingSession(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IdentityWatchSessionManagementListener.DBProofingSession(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IdentityWatchSessionManagementListener.DBProofingSession(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityWatchSessionManagementListener.DBProofingSession(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityWatchSessionManagementListener.DBProofingSession(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityWatchSessionManagementListener.DBProofingSession()
{
  return &type metadata for IdentityWatchSessionManagementListener.DBProofingSession;
}

uint64_t sub_1004649EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v17 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    (*(void (**)(char *, void))(v18 + 104))(v20, enum case for DIPError.Code.proofingSessionIDUnavailable(_:));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
LABEL_7:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  if (a4)
  {
    (*(void (**)(char *, void))(v18 + 104))(v20, enum case for DIPError.Code.targetUnavailable(_:));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    goto LABEL_7;
  }
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  swift_bridgeObjectRetain();
  sub_1000FF820();
  if (v8) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v23 = v21;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  *(void *)(v24 + 24) = a1;
  *(void *)(v24 + 32) = a2;
  *(void *)(v24 + 40) = a3;
  *(void *)(v24 + 48) = a5;
  *(void *)(v24 + 56) = a6;
  *(void *)(v24 + 64) = a7;
  *(double *)(v24 + 72) = a8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_100465DC8, v24);
  swift_release();
  return swift_release();
}

void sub_100464D0C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v114 = a1;
  uint64_t v110 = a7;
  uint64_t v108 = a6;
  uint64_t v106 = a5;
  uint64_t v12 = sub_100007764(&qword_100727FB8);
  __chkstk_darwin(v12 - 8);
  long long v102 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for IdentityProofingUnorderedUIElement();
  uint64_t v103 = *(void *)(v14 - 8);
  uint64_t v104 = v14;
  __chkstk_darwin(v14);
  uint64_t v99 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  __chkstk_darwin(v107);
  uint64_t v109 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v100 = *(void *)(v17 - 8);
  uint64_t v101 = v17;
  __chkstk_darwin(v17);
  uint64_t v105 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v19 - 8);
  uint64_t v111 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v112 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v92 - v25;
  uint64_t v27 = type metadata accessor for DIPError.Code();
  uint64_t v113 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  id v29 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v115;
  sub_10010096C(a2, (uint64_t)a3);
  if (v30) {
    return;
  }
  uint64_t v97 = v24;
  id v94 = a4;
  uint64_t v115 = (void (*)(void, void))v27;
  v96._uint64_t countAndFlagsBits = a2;
  v96._object = a3;
  uint64_t v32 = v112;
  uint64_t v114 = (uint64_t)v29;
  uint64_t v95 = v26;
  uint64_t v98 = v21;
  if (!v31)
  {
    uint64_t v116 = 0;
    unint64_t v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    uint64_t v116 = 0xD000000000000023;
    unint64_t v117 = 0x800000010064D850;
    String.append(_:)(v96);
    v55._uint64_t countAndFlagsBits = 0x20646E6120;
    v55._object = (void *)0xE500000000000000;
    String.append(_:)(v55);
    v56._uint64_t countAndFlagsBits = IdentityTarget.debugDescription.getter();
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, void (*)(void, void)))(v113 + 104))(v114, enum case for DIPError.Code.internalError(_:), v115);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  uint64_t v93 = 0;
  id v94 = v31;
  id v33 = [v31 createdAt];
  os_log_type_t v34 = v115;
  uint64_t v35 = v113;
  if (!v33)
  {
    uint64_t v40 = (uint64_t)v111;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v111, 1, 1, v98);
    goto LABEL_11;
  }
  uint64_t v36 = v33;
  id v37 = v97;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v38 = v32;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  uint64_t v40 = (uint64_t)v111;
  uint64_t v41 = v37;
  uint64_t v42 = v98;
  v39(v111, v41, v98);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v40, 0, 1, v42);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v40, 1, v42) == 1)
  {
LABEL_11:
    sub_10000C6CC(v40, &qword_1007239B0);
    (*(void (**)(uint64_t, void, void (*)(void, void)))(v35 + 104))(v114, enum case for DIPError.Code.createdAtDateUnavailable(_:), v34);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return;
  }
  Swift::String v43 = v95;
  v39(v95, (char *)v40, v42);
  id v44 = [self standardUserDefaults];
  v45._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v45._object = (void *)0x800000010064D8E0;
  Swift::Bool v46 = NSUserDefaults.internalBool(forKey:)(v45);

  uint64_t v47 = v97;
  if (!v46)
  {
    Date.init()();
    [v94 connectToWifiReminderInDays];
    char v48 = Date.isAtLeast(days:after:)();
    uint64_t v49 = *(void (**)(char *, uint64_t))(v32 + 8);
    v49(v47, v42);
    if ((v48 & 1) == 0)
    {
      Date.init()();
      Date.timeIntervalSinceReferenceDate.getter();
      double v66 = v65;
      uint64_t v115 = (void (*)(void, void))v49;
      v49(v47, v42);
      Date.timeIntervalSinceReferenceDate.getter();
      double v68 = v66 - v67;
      if ((~*(void *)&v68 & 0x7FF0000000000000) != 0)
      {
        uint64_t v69 = v43;
        uint64_t v70 = v101;
        uint64_t v71 = v105;
        if (v68 > -9.22337204e18)
        {
          uint64_t v72 = v100;
          if (v68 < 9.22337204e18)
          {
            defaultLogger()();
            uint64_t v73 = Logger.logObject.getter();
            os_log_type_t v74 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v73, v74))
            {
              int v75 = (uint64_t)v68 % 3600;
              uint64_t v114 = (__int16)(v75
                             - 60
                             * (((__int16)((34953 * (__int16)v75) >> 16) >> 5)
                              + (((v75 + ((-30583 * (__int16)v75) >> 16)) & 0x8000) >> 15)));
              uint64_t v76 = (int)(((__int16)((34953 * (__int16)v75) >> 16) >> 5)
                        + (((v75 + ((-30583 * (__int16)v75) >> 16)) & 0x8000) >> 15));
              uint64_t v77 = swift_slowAlloc();
              *(_DWORD *)uint64_t v77 = 134218496;
              uint64_t v116 = (uint64_t)v68 / 3600;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v77 + 12) = 2048;
              uint64_t v116 = v76;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v77 + 22) = 2048;
              uint64_t v69 = v95;
              uint64_t v42 = v98;
              uint64_t v116 = v114;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v73, v74, "%ld hour(s) %ld minute(s) %ld second(s) is the time left before which the connect to wifi alert can be triggered.", (uint8_t *)v77, 0x20u);
              uint64_t v71 = v105;
              swift_slowDealloc();
            }

            (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v70);
            v115(v69, v42);
            return;
          }
LABEL_35:
          __break(1u);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_35;
    }
  }
  uint64_t v50 = swift_allocObject();
  uint64_t v51 = v108;
  *(void *)(v50 + 16) = v106;
  *(void *)(v50 + 24) = v51;
  *(void *)(v50 + 32) = v110;
  *(double *)(v50 + 40) = a8;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v52 = v107;
  uint64_t v53 = (uint64_t)v109;
  uint64_t v54 = v93;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v95, v98);
    swift_release();

    return;
  }
  swift_release();
  uint64_t v57 = *(void *)(v53 + *(int *)(v52 + 48));
  if (!v57 || !*(void *)(v57 + 16))
  {
    uint64_t v63 = (uint64_t)v102;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56))(v102, 1, 1, v104);
    uint64_t v78 = v98;
    id v79 = v95;
    uint64_t v59 = v114;
LABEL_26:
    uint64_t v81 = v78;
    uint64_t v82 = v79;
    sub_10000C6CC(v63, &qword_100727FB8);
    (*(void (**)(uint64_t, void, void (*)(void, void)))(v113 + 104))(v59, enum case for DIPError.Code.attributeConfigUnavailable(_:), v115);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    sub_100009C98(v53);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v82, v81);
    return;
  }
  swift_bridgeObjectRetain();
  unint64_t v58 = sub_100590548(0xD00000000000001BLL, 0x800000010064D9C0);
  uint64_t v59 = v114;
  uint64_t v60 = v104;
  if (v61)
  {
    uint64_t v63 = (uint64_t)v102;
    uint64_t v62 = v103;
    (*(void (**)(char *, unint64_t, uint64_t))(v103 + 16))(v102, *(void *)(v57 + 56) + *(void *)(v103 + 72) * v58, v104);
    uint64_t v64 = 0;
  }
  else
  {
    uint64_t v64 = 1;
    uint64_t v63 = (uint64_t)v102;
    uint64_t v62 = v103;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, v64, 1, v60);
  swift_bridgeObjectRelease();
  int v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1, v60);
  uint64_t v78 = v98;
  id v79 = v95;
  if (v80 == 1) {
    goto LABEL_26;
  }
  uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 32);
  uint64_t v84 = v99;
  v83(v99, v63, v60);
  uint64_t v85 = IdentityProofingUnorderedUIElement.title.getter();
  uint64_t v87 = v86;
  uint64_t v88 = (void *)IdentityProofingUnorderedUIElement.messages.getter();
  if (v88)
  {
    uint64_t v89 = v98;
    if (v88[2])
    {
      uint64_t v90 = v88[4];
      uint64_t v91 = v88[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v90 = 0;
      uint64_t v91 = 0;
    }
  }
  else
  {
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    uint64_t v89 = v98;
  }
  sub_10051BB20(v85, v87, v90, v91, v96._countAndFlagsBits, (uint64_t)v96._object, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v84, v104);
  sub_100009C98(v53);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v95, v89);
}

uint64_t sub_100465AD4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100465AF4, 0, 0);
}

uint64_t sub_100465AF4()
{
  sub_10052E944();
  swift_release();
  v0[3] = sub_10052E944();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  void *v1 = v0;
  v1[1] = sub_100465BD0;
  uint64_t v2 = v0[2];
  return sub_10052DED8(v2, 0xD000000000000024, 0x800000010062AD00, 0xD000000000000027, 0x800000010062AD30);
}

uint64_t sub_100465BD0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100465D0C, 0, 0);
  }
  else
  {
    swift_release();
    unint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100465D0C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100465D70()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

void sub_100465DC8()
{
  sub_100464D0C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(double *)(v0 + 72));
}

uint64_t sub_100465DF4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100465E3C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000C494;
  v3[2] = a1;
  return _swift_task_switch(sub_100465AF4, 0, 0);
}

uint64_t destroy for IdentityProofingConnectToWifiAlertProvider()
{
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for IdentityProofingConnectToWifiAlertProvider(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for IdentityProofingConnectToWifiAlertProvider(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for IdentityProofingConnectToWifiAlertProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for IdentityProofingConnectToWifiAlertProvider()
{
  return &type metadata for IdentityProofingConnectToWifiAlertProvider;
}

uint64_t sub_100466060()
{
  uint64_t v1 = v0;
  uint64_t v26 = type metadata accessor for DIPHTTPSession.Configuration(0);
  __chkstk_darwin(v26);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2;
  uint64_t v9 = sub_100007764(&qword_100723988);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_livenessConfigV2, 1, 1, v9);
  uint64_t v11 = (void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_proofingSessionId);
  *uint64_t v11 = 0;
  v11[1] = 0;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_disabledGestureSequence) = _swiftEmptyArrayStorage;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_disabledGestureCount) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTimeToSkipAX) = 50;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTimeToAlertAX) = 100;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTutorialVideoDelay) = 2000;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTutorialVideoDuration) = 2000;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultFaceOutOfBoundFrames) = 30;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTutorialResumeDelay) = 1000;
  *(void *)(v1
            + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultGestureDetectedSuccessDuration) = 3000;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultLastGestureExtraFrameDuration) = 1000;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultRequiresGoodLuxFlag) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultEnablePrintReplayFlag) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultEnableIDMatchingFlag) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultSelfieRequirement) = 1;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTotalFrameCount) = 150;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultMinimumValidFrameCount) = 146;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultDisplayPassiveLivenessFlag) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultEnableAutoFlashFlag) = 1;
  uint64_t v12 = (objc_class *)type metadata accessor for IdentitySelfHealer();
  uint64_t v13 = (char *)objc_allocWithZone(v12);
  uint64_t v14 = &v13[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  v28.receiver = v13;
  v28.super_class = v12;
  id v15 = [super init];
  uint64_t v16 = (char *)objc_allocWithZone(v12);
  uint64_t v17 = &v16[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  v27.receiver = v16;
  v27.super_class = v12;
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_selfHealer) = [v27 init];
  UUID.init()();
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (qword_10071F5E8 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_1000443D4(v26, (uint64_t)qword_100760888);
  sub_100468344(v21, (uint64_t)v3, type metadata accessor for DIPHTTPSession.Configuration);
  id v22 = objc_allocWithZone((Class)type metadata accessor for DIPTopekaWebService());
  uint64_t v23 = (char *)sub_1002B92C4(v18, v20, (uint64_t)v3);
  *(void *)(v1 + 16) = v23;
  *(void *)&v23[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer + 8] = &off_100708438;
  swift_unknownObjectWeakAssign();

  return v1;
}

uint64_t sub_10046643C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[132] = v8;
  v9[131] = a8;
  v9[130] = a7;
  v9[129] = a6;
  v9[128] = a5;
  v9[127] = a4;
  v9[126] = a3;
  v9[125] = a2;
  v9[124] = a1;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  v9[133] = v10;
  v9[134] = *(void *)(v10 - 8);
  v9[135] = swift_task_alloc();
  sub_100007764(&qword_10072B400);
  v9[136] = swift_task_alloc();
  v9[137] = swift_task_alloc();
  v9[138] = swift_task_alloc();
  v9[139] = swift_task_alloc();
  v9[140] = type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
  v9[141] = swift_task_alloc();
  v9[142] = swift_task_alloc();
  v9[143] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DeviceInformationProvider();
  v9[144] = v11;
  v9[145] = *(void *)(v11 - 8);
  v9[146] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  v9[147] = v12;
  v9[148] = *(void *)(v12 - 8);
  v9[149] = swift_task_alloc();
  return _swift_task_switch(sub_100466678, 0, 0);
}

uint64_t sub_100466678()
{
  uint64_t v1 = *(void *)(v0 + 1192);
  uint64_t v2 = *(void *)(v0 + 1184);
  uint64_t v38 = *(void *)(v0 + 1176);
  uint64_t v3 = *(void *)(v0 + 1168);
  uint64_t v31 = *(void *)(v0 + 1160);
  uint64_t v33 = *(void *)(v0 + 1152);
  uint64_t v4 = *(void *)(v0 + 1056);
  uint64_t v36 = *(void *)(v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_proofingSessionId);
  uint64_t v37 = *(void *)(v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_proofingSessionId + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v5 = UUID.uuidString.getter();
  uint64_t v34 = v6;
  uint64_t v35 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v38);
  uint64_t v39 = *(void *)(v4 + 16);
  uint64_t v7 = *(void *)(v39 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  uint64_t v30 = *(void *)(v39 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  type metadata accessor for DIPAccountManager();
  swift_bridgeObjectRetain();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728((void *)(v0 + 880), *(void *)(v0 + 904));
  uint64_t v8 = dispatch thunk of DIPAccountManagerProtocol.appleAuthHeader(_:)();
  uint64_t v28 = v9;
  uint64_t v29 = v8;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 880);
  DeviceInformationProvider.init()();
  uint64_t v10 = DeviceInformationProvider.uniqueDeviceID.getter();
  uint64_t v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v3, v33);
  if (qword_10071F5F8 != -1) {
    swift_once();
  }
  uint64_t v13 = *(void *)(v0 + 1048);
  uint64_t v14 = *(void *)(v0 + 1040);
  long long v32 = *(_OWORD *)(v0 + 1024);
  uint64_t v15 = *(void *)(v0 + 1016);
  uint64_t v16 = *(void *)(v0 + 1008);
  long long v27 = *(_OWORD *)(v0 + 992);
  uint64_t v17 = qword_1007608B8;
  uint64_t v18 = unk_1007608C0;
  swift_bridgeObjectRetain();
  sub_1000AAC30(0, 0);
  *(void *)(v0 + 720) = v30;
  *(void *)(v0 + 728) = v7;
  *(void *)(v0 + 736) = v35;
  *(void *)(v0 + 744) = v34;
  *(void *)(v0 + 752) = v29;
  *(void *)(v0 + 760) = v28;
  *(void *)(v0 + 768) = v10;
  *(void *)(v0 + 776) = v12;
  *(void *)(v0 + 784) = v17;
  *(void *)(v0 + 792) = v18;
  *(_OWORD *)(v0 + 800) = v27;
  *(void *)(v0 + 816) = v16;
  *(void *)(v0 + 824) = v15;
  *(_OWORD *)(v0 + 832) = v32;
  *(void *)(v0 + 848) = v14;
  *(void *)(v0 + 856) = v13;
  *(void *)(v0 + 864) = v36;
  *(void *)(v0 + 872) = v37;
  long long v19 = *(_OWORD *)(v0 + 800);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 640) = v19;
  long long v20 = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 608) = v20;
  long long v21 = *(_OWORD *)(v0 + 864);
  *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 848);
  *(_OWORD *)(v0 + 704) = v21;
  long long v22 = *(_OWORD *)(v0 + 832);
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 816);
  *(_OWORD *)(v0 + 672) = v22;
  long long v23 = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 576) = v23;
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 1200) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100466998;
  uint64_t v25 = *(void *)(v0 + 1136);
  return sub_1002C4ED8(v25, v0 + 560);
}

uint64_t sub_100466998()
{
  uint64_t v2 = *(void *)v1 + 720;
  *(void *)(*(void *)v1 + 1208) = v0;
  swift_task_dealloc();
  sub_1002D4020(v2);
  if (v0) {
    uint64_t v3 = sub_100466F44;
  }
  else {
    uint64_t v3 = sub_100466AB8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100466AB8()
{
  uint64_t v1 = v0[143];
  uint64_t v2 = v0[141];
  uint64_t v3 = v0[138];
  uint64_t v4 = v0[132];
  sub_100468278(v0[142], v1);
  uint64_t v5 = v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_livenessConfigV2;
  swift_beginAccess();
  sub_1004682DC(v5, v3);
  sub_100468344(v1, v2, type metadata accessor for IdentityProofingLivenessConfigResponseV2);
  uint64_t v6 = sub_100007764(&qword_100723988);
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6);
  uint64_t v9 = v0[141];
  __dst = v0 + 36;
  uint64_t v27 = v5;
  if (v8 == 1)
  {
    uint64_t v10 = v0[138];
    (*(void (**)(void, uint64_t, uint64_t))(v7 + 16))(v0[139], v9 + *(int *)(v0[140] + 24), v6);
    sub_1004683AC(v9);
    sub_100468408(v10);
  }
  else
  {
    uint64_t v11 = v0[139];
    uint64_t v12 = v0[138];
    sub_1004683AC(v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11, v12, v6);
  }
  uint64_t v25 = v0[143];
  uint64_t v13 = v0[140];
  uint64_t v14 = v0[139];
  uint64_t v15 = v0[137];
  uint64_t v16 = v0[136];
  uint64_t v17 = v0[132];
  uint64_t v26 = v0[151];
  uint64_t v18 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  v18(v14, 0, 1, v6);
  sub_1000BEA14(v14, v15, &qword_10072B400);
  uint64_t v19 = v17 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2;
  swift_beginAccess();
  sub_100468128(v15, v19);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v15, v25 + *(int *)(v13 + 24), v6);
  v18(v15, 0, 1, v6);
  sub_1000BEA14(v15, v16, &qword_10072B400);
  swift_beginAccess();
  sub_100468128(v16, v27);
  swift_endAccess();
  JWSSignedJSON.payload.getter();
  memcpy(__dst, v0 + 2, 0x10AuLL);
  uint64_t v20 = sub_100467398((uint64_t)__dst);
  if (v26)
  {
    sub_1004683AC(v0[143]);
    sub_100468190((uint64_t *)__dst);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  else
  {
    uint64_t v23 = v20;
    sub_1004683AC(v0[143]);
    sub_100468190((uint64_t *)__dst);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(uint64_t))v0[1];
    return v24(v23);
  }
}

uint64_t sub_100466F44()
{
  (*(void (**)(void, void, void))(v0[134] + 104))(v0[135], enum case for DIPError.Code.internalError(_:), v0[133]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100467120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v21 = a1;
  uint64_t v5 = sub_100007764(&qword_10072B400);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  int v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = sub_100007764(&qword_100723988);
  uint64_t v12 = *(void *)(v11 - 8);
  long long v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v22(v10, a1, v11);
  uint64_t v13 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
  v13(v10, 0, 1, v11);
  sub_1000BEA14((uint64_t)v10, (uint64_t)v8, &qword_10072B400);
  uint64_t v14 = v3 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2;
  swift_beginAccess();
  sub_100468128((uint64_t)v8, v14);
  swift_endAccess();
  v22(v10, v21, v11);
  v13(v10, 0, 1, v11);
  sub_1000BEA14((uint64_t)v10, (uint64_t)v8, &qword_10072B400);
  uint64_t v15 = v3 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_livenessConfigV2;
  swift_beginAccess();
  sub_100468128((uint64_t)v8, v15);
  swift_endAccess();
  uint64_t v16 = (void *)(v3 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_proofingSessionId);
  uint64_t v17 = v24;
  *uint64_t v16 = v23;
  v16[1] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  JWSSignedJSON.payload.getter();
  memcpy(v26, v25, 0x10AuLL);
  uint64_t v18 = sub_100467398((uint64_t)v26);
  sub_100468190(v26);
  return v18;
}

uint64_t sub_100467398(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self standardUserDefaults];
  v10._uint64_t countAndFlagsBits = 0xD000000000000026;
  v10._object = (void *)0x800000010064DCF0;
  Swift::Bool v11 = NSUserDefaults.internalBool(forKey:)(v10);

  if (v11)
  {
    defaultLogger()();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Using custom liveness config from internal settings.", v14, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return sub_10001A6A4();
  }
  else
  {
    uint64_t v16 = v2;
    uint64_t v17 = v20;
    sub_1000BEA14(v20, (uint64_t)v23, &qword_10072B108);
    sub_1000BEA14((uint64_t)v23, (uint64_t)v24, &qword_10072B108);
    if (sub_10027F5A8((uint64_t)v24) == 1)
    {
      sub_1000BEA14(v17 + 176, (uint64_t)v26, &qword_10072B128);
      sub_1000BEA14((uint64_t)v26, (uint64_t)v30, &qword_10072B128);
      if (!v30[3])
      {
        (*(void (**)(char *, void, uint64_t))(v16 + 104))(v4, enum case for DIPError.Code.livenessConfigV2MissingFields(_:), v1);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        return swift_willThrow();
      }
    }
    else
    {
      sub_1000BEA14((uint64_t)v23, (uint64_t)v21, &qword_10072B108);
      v28[8] = v21[8];
      v29[0] = v22[0];
      *(_OWORD *)((char *)v29 + 14) = *(_OWORD *)((char *)v22 + 14);
      v28[4] = v21[4];
      v28[5] = v21[5];
      v28[6] = v21[6];
      v28[7] = v21[7];
      v28[0] = v21[0];
      v28[1] = v21[1];
      v28[2] = v21[2];
      v28[3] = v21[3];
      sub_1004677FC((uint64_t)v28);
    }
    sub_1000BEA14(v17 + 176, (uint64_t)v25, &qword_10072B128);
    sub_1000BEA14((uint64_t)v25, (uint64_t)&v31, &qword_10072B128);
    if (*((void *)&v32 + 1))
    {
      v26[8] = v33;
      v26[9] = v34;
      v27[0] = v35[0];
      *(_OWORD *)((char *)v27 + 10) = *(_OWORD *)((char *)v35 + 10);
      v26[6] = v31;
      v26[7] = v32;
      sub_100467EEC();
    }
    id v18 = objc_allocWithZone((Class)type metadata accessor for IdentityLivenessConfig());
    return IdentityLivenessConfig.init(active:passive:)();
  }
}

uint64_t sub_1004677FC(uint64_t a1)
{
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v40 - 8);
  uint64_t v3 = __chkstk_darwin(v40);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v44 = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  Swift::String v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    Swift::String v43 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    Swift::Bool v11 = (objc_class *)type metadata accessor for IdentityGesture();
    uint64_t v12 = v8 + 40;
    do
    {
      id v13 = objc_allocWithZone(v11);
      IdentityGesture.init(gesture:type:)();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v12 += 16;
      --v9;
    }
    while (v9);
    Swift::String v10 = v43;
    sub_10009F534((uint64_t)&v44);
  }
  uint64_t v42 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 80);
  int v41 = (*(unsigned char *)(a1 + 173) == 2) | *(unsigned __int8 *)(a1 + 173);
  uint64_t v15 = self;
  id v16 = [v15 standardUserDefaults];
  v17._object = (void *)0x800000010064DCD0;
  v17._uint64_t countAndFlagsBits = 0xD000000000000016;
  Swift::Bool v18 = NSUserDefaults.internalBool(forKey:)(v17);

  if (v18)
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Internal settings has been set to disable liveness.", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v40);
    Swift::String v10 = *(void **)((char *)v39
                     + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_disabledGestureSequence);
    swift_bridgeObjectRetain();
    uint64_t v42 = 0;
  }
  uint64_t v39 = v10;
  id v22 = [v15 standardUserDefaults];
  v23._uint64_t countAndFlagsBits = 0xD000000000000021;
  v23._object = (void *)0x800000010062EFC0;
  Swift::Bool v24 = NSUserDefaults.internalBool(forKey:)(v23);

  if (v24)
  {
    defaultLogger()();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Internal settings has been set to disable auto flash.", v27, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v40);
    int v41 = 0;
  }
  uint64_t v40 = v14 & ~(v14 >> 63);
  if (*(unsigned char *)(a1 + 136)) {
    uint64_t v28 = 1000;
  }
  else {
    uint64_t v28 = *(void *)(a1 + 128);
  }
  uint64_t v29 = *(void *)(a1 + 144);
  if (*(unsigned char *)(a1 + 152)) {
    uint64_t v29 = 3000;
  }
  uint64_t v37 = v29;
  uint64_t v38 = v28;
  if (*(unsigned char *)(a1 + 168)) {
    uint64_t v30 = 1000;
  }
  else {
    uint64_t v30 = *(void *)(a1 + 160);
  }
  uint64_t v31 = *(void *)(a1 + 88);
  uint64_t v35 = v30;
  uint64_t v36 = v31;
  long long v34 = *(_OWORD *)(a1 + 96);
  id v32 = objc_allocWithZone((Class)type metadata accessor for IdentityActiveLivenessConfig());
  return IdentityActiveLivenessConfig.init(gestureSequence:minRequiredGestureCount:timeToSkipOption:timeToSkipAccessible:timeToAlert:timeToAlertAccessible:maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:gestureCompletionDelay:tutorialVideoDelay:tutorialVideoDuration:tutorialResumeDelay:gestureDetectedSuccessDuration:lastGestureExtraFrameDuration:requiresGoodLux:enablePrintReplay:enableIDMatching:requireSelfie:enableAutoFlash:)();
}

uint64_t sub_100467C98()
{
  sub_100468408(v0 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2);
  sub_100468408(v0 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_livenessConfigV2);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100467D48()
{
  return type metadata accessor for IdentityProofingLivenessConfigProvider();
}

uint64_t type metadata accessor for IdentityProofingLivenessConfigProvider()
{
  uint64_t result = qword_10072EF78;
  if (!qword_10072EF78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100467D9C()
{
  sub_100467E90();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100467E90()
{
  if (!qword_10072BD28)
  {
    sub_100019364(&qword_100723988);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10072BD28);
    }
  }
}

uint64_t sub_100467EEC()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self standardUserDefaults];
  v5._object = (void *)0x800000010062EFC0;
  v5._uint64_t countAndFlagsBits = 0xD000000000000021;
  Swift::Bool v6 = NSUserDefaults.internalBool(forKey:)(v5);

  if (v6)
  {
    defaultLogger()();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Internal settings has been set to disable auto flash.", v9, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  id v10 = objc_allocWithZone((Class)type metadata accessor for IdentityPassiveLivenessConfig());
  return IdentityPassiveLivenessConfig.init(maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:totalFrameCount:minimumValidFrameCount:requiresGoodLux:enablePrintReplay:disableStitchDetection:enableAutoFlash:)();
}

uint64_t sub_100468128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10072B400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100468190(uint64_t *a1)
{
  uint64_t v2 = a1[23];
  uint64_t v6 = a1[22];
  uint64_t v3 = a1[24];
  uint64_t v4 = a1[25];
  sub_100349678(*a1, a1[1], a1[2]);
  sub_100349804(v6, v2, v3, v4);
  return a1;
}

uint64_t sub_100468278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004682DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10072B400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100468344(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004683AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100468408(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_10072B400);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100468468(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1;
  machServiceDigitalPresentmentXPC.getter();
  id v8 = objc_allocWithZone((Class)NSXPCListener);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithMachServiceName:v9];

  *(void *)&v7[OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_xpcListener] = v10;
  Swift::Bool v11 = &v7[OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment];
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)Swift::Bool v11 = *(_OWORD *)a1;
  *((_OWORD *)v11 + 1) = v12;
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v11 + 5) = v13;
  *((_OWORD *)v11 + 2) = v15;
  *((_OWORD *)v11 + 3) = v14;
  long long v16 = *(_OWORD *)(a1 + 144);
  long long v18 = *(_OWORD *)(a1 + 96);
  long long v17 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v11 + 8) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)v11 + 9) = v16;
  *((_OWORD *)v11 + 6) = v18;
  *((_OWORD *)v11 + 7) = v17;
  sub_10003BCD4((uint64_t *)a1);

  uint64_t v19 = (objc_class *)type metadata accessor for DigitalPresentmentListener();
  v27.receiver = v7;
  v27.super_class = v19;
  os_log_type_t v20 = (char *)[v27 init];
  uint64_t v21 = *(void **)&v20[OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_xpcListener];
  id v22 = v20;
  [v21 setDelegate:v22];
  [v21 resume];
  defaultLogger()();
  Swift::String v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Digital presentment XPC listener is started", v25, 2u);
    swift_slowDealloc();
  }

  sub_10003BDE0((uint64_t *)a1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v22;
}

id sub_1004686B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Digital presentment listener is tearing down", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [*(id *)&v1[OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_xpcListener] invalidate];
  NSString v9 = (objc_class *)type metadata accessor for DigitalPresentmentListener();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_1004688C0()
{
  return sub_1004688D8("digital presentment connection invalidated");
}

uint64_t sub_1004688CC()
{
  return sub_1004688D8("digital presentment connection interrupted");
}

uint64_t sub_1004688D8(const char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a1, v8, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t type metadata accessor for DigitalPresentmentListener()
{
  return self;
}

_OWORD *sub_100468AC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Destroying DigitalPresentmentSessionProxy", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_unknownObjectWeakDestroy();
  swift_release();
  long long v9 = v1[9];
  v15[6] = v1[8];
  v15[7] = v9;
  long long v10 = v1[11];
  v15[8] = v1[10];
  v15[9] = v10;
  long long v11 = v1[5];
  v15[2] = v1[4];
  void v15[3] = v11;
  long long v12 = v1[7];
  v15[4] = v1[6];
  v15[5] = v12;
  long long v13 = v1[3];
  v15[0] = v1[2];
  v15[1] = v13;
  sub_10003BDE0((uint64_t *)v15);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_100468C58()
{
  sub_100468AC8();

  return swift_deallocClassInstance();
}

uint64_t sub_100468C8C(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for IdentityDocumentDescriptor();
  v2[14] = v5;
  v2[15] = *(void *)(v5 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DigitalPresentmentDocumentType();
  v2[18] = v6;
  v2[19] = *(void *)(v6 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v2[21] = v7;
  v2[22] = *(void *)(v7 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  return _swift_task_switch(sub_100468EE8, 0, 0);
}

uint64_t sub_100468EE8()
{
  uint64_t v28 = v0;
  uint64_t v1 = (void *)v0[6];
  defaultLogger()();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v24 = v0[22];
    uint64_t v5 = v0[20];
    uint64_t v25 = v0[21];
    uint64_t v26 = v0[25];
    uint64_t v6 = v0[19];
    uint64_t v7 = v0[17];
    uint64_t v8 = v0[15];
    uint64_t v21 = v0[14];
    uint64_t v22 = v0[18];
    Swift::String v23 = (void *)v0[6];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    XPCIdentityDocumentDescriptor.value.getter();
    IdentityDocumentDescriptor.documentType.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v21);
    sub_10046C1B4(&qword_100723518, (void (*)(uint64_t))&type metadata accessor for DigitalPresentmentDocumentType);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v22);
    v0[5] = sub_100110D58(v10, v12, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DigitalPresentmentSessionProxy canRequestDocument %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    long long v13 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v13(v26, v25);
  }
  else
  {
    uint64_t v14 = v0[25];
    uint64_t v15 = v0[21];
    uint64_t v16 = v0[22];
    long long v17 = (void *)v0[6];

    long long v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  v0[26] = v13;
  sub_10046BA80();
  XPCIdentityDocumentDescriptor.value.getter();
  long long v18 = (void *)swift_task_alloc();
  v0[27] = v18;
  *long long v18 = v0;
  v18[1] = sub_100469490;
  uint64_t v19 = v0[16];
  return sub_1002825AC(v19);
}

uint64_t sub_100469490(char a1)
{
  uint64_t v3 = (void *)*v2;
  os_log_type_t v4 = (void *)*v2;
  v4[4] = v1;
  *((unsigned char *)v4 + 24) = a1;
  v4[2] = v2;
  v4[28] = v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v3[15] + 8))(v3[16], v3[14]);
  if (v1) {
    uint64_t v5 = sub_100469780;
  }
  else {
    uint64_t v5 = sub_100469604;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100469604()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DigitalPresentmentSessionProxy canRequestDocument returning successfully", v3, 2u);
    swift_slowDealloc();
  }
  unsigned int v9 = *(unsigned __int8 *)(v0 + 24);
  os_log_type_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 168);

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7(v9);
}

uint64_t sub_100469780()
{
  uint64_t v1 = v0[23];
  uint64_t v11 = v0[21];
  unint64_t v12 = (void (*)(uint64_t, uint64_t))v0[26];
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[11];
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10046C1B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v12(v1, v11);
  swift_errorRelease();
  uint64_t v7 = swift_allocError();
  v5(v8, v2, v4);
  sub_1004449B4(v7);
  swift_errorRelease();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v9 = (uint64_t (*)(void))v0[1];
  return v9(0);
}

uint64_t sub_100469BC0(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100469C84;
  return sub_100468C8C((uint64_t)v5);
}

uint64_t sub_100469C84(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  swift_release();
  uint64_t v9 = *(void *)(v5 + 32);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 32));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_100469E38(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[13] = v5;
  v2[14] = *(void *)(v5 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  return _swift_task_switch(sub_100469FCC, 0, 0);
}

uint64_t sub_100469FCC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DigitalPresentmentSessionProxy present (callback)", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[14];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[18] = v7;
  v0[19] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10046BA80();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[20] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10046A398;
  uint64_t v9 = v0[5];
  return sub_100285B54(v9);
}

uint64_t sub_10046A398(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  void v3[3] = a1;
  v3[4] = v1;
  v3[21] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10046A5FC;
  }
  else {
    uint64_t v4 = sub_10046A4B4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10046A4B4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DigitalPresentmentSessionProxy requestDocument returning successfully", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[3];
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[18];
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[13];

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v9);
}

uint64_t sub_10046A5FC()
{
  unint64_t v12 = (void (*)(uint64_t, uint64_t))v0[18];
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[12];
  uint64_t v11 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.internalError(_:), v0[7]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10046C1B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v12(v1, v11);
  swift_errorRelease();
  uint64_t v7 = swift_allocError();
  v5(v8, v2, v4);
  sub_1004449B4(v7);
  swift_errorRelease();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10046AA00(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10046AAC4;
  return sub_100469E38((uint64_t)v5);
}

uint64_t sub_10046AAC4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  swift_release();
  uint64_t v8 = *(void (***)(void, void, void))(v5 + 32);
  if (v3)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v8)[2](v8, 0, v9);

    _Block_release(v8);
  }
  else
  {
    ((void (**)(void, void *, void))v8)[2](v8, a1, 0);
    _Block_release(v8);
  }
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_10046AC80()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_10046AE14, 0, 0);
}

uint64_t sub_10046AE14()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DigitalPresentmentProxy dismiss", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[14] = v7;
  v0[15] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_10046BA80();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[16] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10046B1DC;
  return sub_100290394();
}

uint64_t sub_10046B1DC()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10046B42C;
  }
  else {
    os_log_type_t v2 = sub_10046B2F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10046B2F0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DigitalPresentmentSessionProxy cancelRequest returning successfully", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[14];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[9];

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10046B42C()
{
  uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[14];
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10046C1B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v7, v2, v5);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v12(v1, v3);
  swift_errorRelease();
  uint64_t v8 = swift_allocError();
  v6(v9, v2, v5);
  sub_1004449B4(v8);
  swift_errorRelease();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t type metadata accessor for DigitalPresentmentSessionProxy()
{
  return self;
}

uint64_t sub_10046B850(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10046B8F8;
  return sub_10046AC80();
}

uint64_t sub_10046B8F8()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v6 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v8 = *(uint64_t (**)(void))(v5 + 8);
  return v8();
}

void sub_10046BA80()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v36 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v37 - 8);
  uint64_t v5 = __chkstk_darwin(v37);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v31 - v8;
  id v10 = [self standardUserDefaults];
  v11._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v11._object = (void *)0x800000010064DFE0;
  Swift::Bool v12 = NSUserDefaults.internalBool(forKey:)(v11);

  if (v12)
  {
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Forcing digital presentment entitlement due to user defaults setting", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v37);
  }
  else
  {
    defaultLogger()();
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v35 = v0;
      uint64_t v19 = (uint8_t *)v18;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v39 = v33;
      *(_DWORD *)uint64_t v19 = 136315138;
      v31[1] = v19 + 4;
      id v32 = v19;
      uint64_t v20 = v1;
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      uint64_t v38 = (uint64_t)Strong;
      sub_100007764(&qword_10072F290);
      uint64_t v22 = Optional.debugDescription.getter();
      long long v34 = v3;
      unint64_t v24 = v23;

      uint64_t v1 = v20;
      uint64_t v38 = sub_100110D58(v22, v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v3 = v34;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Checking connection %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v37);
    uint64_t v25 = swift_unknownObjectWeakLoadStrong();
    if (v25)
    {
      uint64_t v26 = (void *)v25;
      v27._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
      v27._object = (void *)0x800000010064E080;
      if (!NSXPCConnection.isEntitled(_:)(v27)
        && (v28._uint64_t countAndFlagsBits = 0xD000000000000026,
            v28._object = (void *)0x800000010064E0B0,
            !NSXPCConnection.isEntitled(_:)(v28))
        || (v29._uint64_t countAndFlagsBits = 0xD000000000000044,
            v29._object = (void *)0x800000010064E120,
            !NSXPCConnection.isEntitled(_:)(v29))
        && (v30._uint64_t countAndFlagsBits = 0xD000000000000030,
            v30._object = (void *)0x800000010064E170,
            !NSXPCConnection.isEntitled(_:)(v30)))
      {
        (*(void (**)(char *, void, uint64_t))(v36 + 104))(v3, enum case for DIPError.Code.missingEntitlement(_:), v1);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10046C1B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v36 + 104))(v3, enum case for DIPError.Code.missingEntitlement(_:), v1);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10046C1B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

uint64_t sub_10046C1B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10046C1FC()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10046C23C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10000C494;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_10072F298 + dword_10072F298);
  return v5(v2, v3);
}

uint64_t sub_10046C2F4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10072F2A8 + dword_10072F2A8);
  return v6(v2, v3, v4);
}

uint64_t sub_10046C3B4()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10046C3FC()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10072F2C8 + dword_10072F2C8);
  return v6(v2, v3, v4);
}

void *sub_10046C4B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v63 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v58 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  Swift::String v11 = (char *)&v58 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  os_log_type_t v14 = (char *)&v58 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v58 - v15;
  v17._uint64_t countAndFlagsBits = 0xD000000000000044;
  v17._object = (void *)0x800000010064E120;
  unint64_t v18 = (unint64_t)NSXPCConnection.getArrayEntitlement(name:)(v17);
  uint64_t v62 = v3;
  if (v18)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v61 = a1;
      uint64_t v22 = (uint8_t *)v21;
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v59 = v22 + 4;
      swift_bridgeObjectRetain();
      uint64_t v23 = v2;
      uint64_t v24 = Array.description.getter();
      uint64_t v60 = v8;
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      uint64_t v27 = v24;
      uint64_t v2 = v23;
      uint64_t v64 = sub_100110D58(v27, v26, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v8 = v60;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Using external merchants entitlement, values: %s", v22, 0xCu);
      swift_arrayDestroy();
      uint64_t v3 = v62;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = *(void (**)(char *, uint64_t))(v3 + 8);
    v35(v16, v2);
  }
  else
  {
    v28._uint64_t countAndFlagsBits = 0xD000000000000030;
    v28._object = (void *)0x800000010064E170;
    if ((unint64_t)NSXPCConnection.getArrayEntitlement(name:)(v28))
    {
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      Swift::String v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v61 = v2;
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v65 = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136315138;
        uint64_t v59 = v31 + 4;
        swift_bridgeObjectRetain();
        uint64_t v32 = Array.description.getter();
        uint64_t v60 = v8;
        unint64_t v34 = v33;
        swift_bridgeObjectRelease();
        uint64_t v64 = sub_100110D58(v32, v34, &v65);
        uint64_t v2 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v8 = v60;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Using internal merchants entitlement, values: %s", v31, 0xCu);
        swift_arrayDestroy();
        uint64_t v3 = v62;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v35 = *(void (**)(char *, uint64_t))(v3 + 8);
      v35(v14, v2);
    }
    else
    {
      uint64_t v36 = v3;
      defaultLogger()();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "No merchants entitlement is present, defaulting to empty value", v39, 2u);
        swift_slowDealloc();
      }

      uint64_t v40 = v11;
      uint64_t v35 = *(void (**)(char *, uint64_t))(v36 + 8);
      v35(v40, v2);
    }
  }
  int v41 = v63;
  v42._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v42._object = (void *)0x800000010064E080;
  uint64_t v43 = (unint64_t)NSXPCConnection.getDictionaryOfStringArraysEntitlement(name:)(v42);
  if (v43)
  {
    uint64_t v44 = sub_1000D8A48(v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v45._object = (void *)0x800000010064E0B0;
    v45._uint64_t countAndFlagsBits = 0xD000000000000026;
    if (NSXPCConnection.isEntitled(_:)(v45))
    {
      uint64_t v44 = &off_1006F1D40;
    }
    else
    {
      swift_bridgeObjectRelease();
      defaultLogger()();
      Swift::Bool v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        char v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "No digital presentment entitlement is present, defaulting to empty value", v48, 2u);
        swift_slowDealloc();
      }

      v35(v8, v2);
      uint64_t v44 = _swiftEmptyArrayStorage;
    }
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    uint64_t v60 = (char *)v35;
    uint64_t v65 = v52;
    *(_DWORD *)uint64_t v51 = 136315138;
    uint64_t v59 = v51 + 4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v53 = sub_1000D8848();
    uint64_t v61 = v2;
    uint64_t v54 = v53;
    unint64_t v56 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v64 = sub_100110D58(v54, v56, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Digital presentment: calling process has entitlements: %s", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v60)(v63, v61);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v35(v41, v2);
  }
  return v44;
}

BOOL sub_10046CD54()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v18 - v5;
  id v7 = [self standardUserDefaults];
  v8._object = (void *)0x800000010064DFE0;
  v8._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  Swift::Bool v9 = NSUserDefaults.internalBool(forKey:)(v8);

  if (v9)
  {
    defaultLogger()();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v10, v11))
    {
      Swift::Bool v13 = 1;
      goto LABEL_9;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Forcing digital presentment first party client due to user defaults setting", v12, 2u);
    Swift::Bool v13 = 1;
  }
  else
  {
    v14._uint64_t countAndFlagsBits = 0xD000000000000037;
    v14._object = (void *)0x800000010064E320;
    Swift::Bool v13 = NSXPCConnection.isEntitled(_:)(v14);
    defaultLogger()();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v10, v15))
    {
      uint64_t v6 = v4;
      goto LABEL_9;
    }
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 67109120;
    v18[3] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v15, "DigitalPresentmentSessionProxy.hasFirstPartyClientEntitlement: uint64_t result = %{BOOL}d", v16, 8u);
    uint64_t v6 = v4;
  }
  swift_slowDealloc();
LABEL_9:

  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return v13;
}

uint64_t sub_10046CFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for FeatureFlagProvider();
  uint64_t v42 = v14;
  uint64_t v43 = &protocol witness table for FeatureFlagProvider;
  os_log_type_t v15 = sub_10002C2D8((uint64_t *)&v41);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v15, a3, v14);
  uint64_t v39 = type metadata accessor for DigitalPresentmentRequestValidator();
  uint64_t v40 = &off_1006FC320;
  *(void *)&long long v38 = a4;
  swift_defaultActor_initialize();
  *(void *)(a7 + 312) = 0;
  *(_OWORD *)(a7 + 280) = 0u;
  *(_OWORD *)(a7 + 296) = 0u;
  *(unsigned char *)(a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_requestInProgress) = 0;
  uint64_t v16 = (void *)(a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_mockPassID);
  *uint64_t v16 = 808464432;
  v16[1] = 0xE400000000000000;
  long long v17 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a7 + 208) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a7 + 224) = v17;
  long long v18 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a7 + 240) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a7 + 256) = v18;
  long long v19 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a7 + 144) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a7 + 160) = v19;
  long long v20 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a7 + 176) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a7 + 192) = v20;
  long long v21 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a7 + 112) = *(_OWORD *)a1;
  *(_OWORD *)(a7 + 128) = v21;
  sub_100060860(a2, a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_callingClientConfig);
  sub_10003BCD4((uint64_t *)a1);
  char v22 = sub_100282478();
  *(unsigned char *)(a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_shouldPresentTestMDL) = v22 & 1;
  if ((v22 & 1) == 0)
  {
    if (qword_10071F520 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    uint64_t v23 = *(uint64_t (**)(uint64_t))(a1 + 16);
    if (v23) {
      goto LABEL_3;
    }
LABEL_7:
    type metadata accessor for DigitalPresentmentSessionManager();
    uint64_t v25 = swift_allocObject();
    id v26 = objc_allocWithZone((Class)DCPresentmentSessionOptions);
    sub_10003BCD4((uint64_t *)a1);
    swift_bridgeObjectRetain();
    id v27 = [v26 init];
    [v27 setSessionEncryptionMode:1];
    [v27 setResponseEncryptionMode:1];
    [v27 setReaderAuthenticationPolicy:0];
    [v27 setElementFallbackModes:1];
    id v28 = objc_allocWithZone((Class)DCPresentmentSession);
    id v29 = v27;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v31 = [v28 initWithPartitions:isa presentmentType:1 options:v29];

    *(void *)(v25 + 16) = v31;
    goto LABEL_8;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t))(a1 + 16);
  if (!v23) {
    goto LABEL_7;
  }
LABEL_3:
  sub_10003BCD4((uint64_t *)a1);
  uint64_t v24 = sub_10003BDD0((uint64_t)v23);
  uint64_t v25 = v23(v24);
  sub_10003BEDC((uint64_t)v23);
LABEL_8:
  swift_bridgeObjectRelease();
  sub_10003BDE0((uint64_t *)a1);
  *(void *)(a7 + 272) = v25;
  uint64_t v32 = type metadata accessor for BiometricsHelper();
  swift_allocObject();
  uint64_t v36 = v32;
  uint64_t v37 = &protocol witness table for BiometricsHelper;
  *(void *)&long long v35 = BiometricsHelper.init()();
  sub_1000608C4(a2);
  sub_10000C6B4(&v35, a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_localAuthenticationManager);
  sub_10000C6B4(&v41, a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_featureFlagProvider);
  sub_10000C6B4(&v38, a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_requestValidator);
  unint64_t v33 = (void *)(a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_displayConfigurationBuilder);
  *unint64_t v33 = a5;
  v33[1] = a6;
  return a7;
}

uint64_t sub_10046D36C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v56 = (char *)a1;
  uint64_t v55 = type metadata accessor for FeatureFlagProvider();
  uint64_t v5 = *(void *)(v55 - 8);
  uint64_t v6 = __chkstk_darwin(v55);
  uint64_t v53 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v50 - v8;
  uint64_t v51 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  uint64_t v9 = __chkstk_darwin(v51);
  uint64_t v52 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v50 - v11;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  defaultLogger()();
  long long v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    long long v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = v5;
    *(_WORD *)long long v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Creating DigitalPresentmentSessionProxy", v19, 2u);
    uint64_t v5 = v50;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  long long v20 = v56;
  swift_unknownObjectWeakAssign();
  long long v21 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v3 + 128) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v3 + 144) = v21;
  long long v22 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v3 + 160) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v3 + 176) = v22;
  long long v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 80) = v23;
  long long v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 112) = v24;
  long long v25 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 48) = v25;
  sub_10003BCD4((uint64_t *)a2);
  uint64_t result = os_transaction_create();
  if (result)
  {
    *(void *)(v3 + 192) = result;
    id v27 = sub_10046C4B8((uint64_t)v20);
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    [v20 auditToken];
    AuditToken.init(auditToken:)();
    BOOL v32 = sub_10046CD54();
    uint64_t v33 = v51;
    v12[*(int *)(v51 + 20)] = v32;
    unint64_t v34 = &v12[*(int *)(v33 + 24)];
    *(void *)unint64_t v34 = v27;
    *((void *)v34 + 1) = v29;
    *((void *)v34 + 2) = v31;
    uint64_t v35 = v52;
    sub_100060860((uint64_t)v12, v52);
    sub_10003BCD4((uint64_t *)a2);
    unint64_t v56 = v12;
    uint64_t v36 = v54;
    FeatureFlagProvider.init()();
    uint64_t v37 = type metadata accessor for DigitalPresentmentRequestValidator();
    uint64_t v38 = swift_allocObject();
    uint64_t v51 = type metadata accessor for DigitalPresentmentDisplayConfigurationBuilder();
    v57[3] = v37;
    v57[4] = &off_1006FC320;
    v57[0] = v38;
    type metadata accessor for DigitalPresentmentFlow(0);
    uint64_t v39 = swift_allocObject();
    uint64_t v40 = sub_1000279F4((uint64_t)v57, v37);
    uint64_t v50 = (uint64_t)&v50;
    __chkstk_darwin(v40);
    uint64_t v42 = (uint64_t *)((char *)&v50 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v43 + 16))(v42);
    uint64_t v44 = *v42;
    uint64_t v45 = v5;
    Swift::Bool v46 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    uint64_t v47 = (uint64_t)v53;
    uint64_t v48 = v55;
    v46(v53, v36, v55);
    swift_retain();
    uint64_t v49 = sub_10046CFE0(a2, v35, v47, v44, v51, (uint64_t)&off_1006F8850, v39);
    sub_10003BDE0((uint64_t *)a2);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v48);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v57);
    swift_release();
    sub_1000608C4((uint64_t)v56);
    *(void *)(v3 + 24) = v49;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10046D864(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 67109120;
    LODWORD(v29[0]) = [v8 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "DigitalPresentmentListener connection received from %d", v11, 8u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v9 = v8;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  type metadata accessor for DigitalPresentmentXPCInterface();
  uint64_t v12 = (void *)static DigitalPresentmentXPCInterface.interface()();
  [v8 setExportedInterface:v12];

  long long v13 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 112);
  v29[6] = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 96);
  v29[7] = v13;
  long long v14 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 144);
  v29[8] = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 128);
  v29[9] = v14;
  long long v15 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 48);
  _OWORD v29[2] = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 32);
  v29[3] = v15;
  long long v16 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 80);
  v29[4] = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 64);
  v29[5] = v16;
  long long v17 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 16);
  v29[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment);
  v29[1] = v17;
  type metadata accessor for DigitalPresentmentSessionProxy();
  swift_allocObject();
  os_log_type_t v18 = v8;
  sub_10003BCD4((uint64_t *)v29);
  uint64_t v19 = sub_10046D36C((uint64_t)v18, (uint64_t)v29);
  sub_10003BDE0((uint64_t *)v29);

  [v18 setExportedObject:v19];
  swift_release();
  id v27 = sub_1004688C0;
  uint64_t v28 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  long long v25 = sub_100593800;
  id v26 = &unk_1007061A0;
  long long v20 = _Block_copy(&aBlock);
  [v18 setInvalidationHandler:v20];
  _Block_release(v20);
  id v27 = sub_1004688CC;
  uint64_t v28 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  long long v25 = sub_100593800;
  id v26 = &unk_1007061C8;
  long long v21 = _Block_copy(&aBlock);
  [v18 setInterruptionHandler:v21];
  _Block_release(v21);
  [v18 resume];
  return 1;
}

uint64_t sub_10046DC20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10046DC30()
{
  return swift_release();
}

uint64_t sub_10046DC40(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = &_swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  long long v13 = &_swiftEmptyArrayStorage;
  uint64_t result = sub_10011142C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        type metadata accessor for StoredUploadAsset();
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10011142C(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_10011142C(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_1000078A8(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      type metadata accessor for StoredUploadAsset();
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10011142C(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_10011142C(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_1000078A8(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_10046DE74(uint64_t a1)
{
  return sub_10046DE80(a1, &qword_10072F3B8);
}

void *sub_10046DE80(uint64_t a1, uint64_t *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100111600(0, v2, 0);
    uint64_t v5 = a1 + 32;
    do
    {
      sub_100007764(a2);
      sub_100007764(&qword_10072F398);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100111600(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      if (v7 >= v6 >> 1) {
        sub_100111600(v6 > 1, v7 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      _swiftEmptyArrayStorage[v7 + 4] = v9;
      v5 += 8;
      --v2;
    }
    while (v2);
  }
  return _swiftEmptyArrayStorage;
}

char *sub_10046DFAC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_allocWithZone((Class)NSXPCListener);
  unint64_t v6 = v0;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v5 initWithMachServiceName:v7];

  *(void *)&v6[OBJC_IVAR____TtC8coreidvd18IDVServiceListener_listener] = v8;
  uint64_t v9 = (objc_class *)type metadata accessor for IDVServiceListener();
  v17.receiver = v6;
  v17.super_class = v9;
  unint64_t v10 = (char *)[super init];
  unint64_t v11 = *(void **)&v10[OBJC_IVAR____TtC8coreidvd18IDVServiceListener_listener];
  uint64_t v12 = v10;
  [v11 setDelegate:v12];
  [v11 resume];
  defaultLogger()();
  long long v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    long long v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "IDV service listener is started", v15, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

id sub_10046E1CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "IDV service listener is tearing down", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [*(id *)&v1[OBJC_IVAR____TtC8coreidvd18IDVServiceListener_listener] invalidate];
  uint64_t v9 = (objc_class *)type metadata accessor for IDVServiceListener();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_10046E378(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  objc_super v11 = (char *)&v30 - v10;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    long long v13 = (void *)Strong;
    defaultLogger()();
    id v14 = v13;
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v32 = v5;
      uint64_t v34 = v18;
      *(_DWORD *)uint64_t v17 = 136446466;
      uint64_t v30 = v17 + 4;
      id v19 = v14;
      id v20 = [v19 description];
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = a2;
      unint64_t v23 = v22;

      uint64_t v33 = sub_100110D58(v21, v23, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 1026;
      LODWORD(v21) = [v19 processIdentifier];

      LODWORD(v33) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v15, v16, v31, (uint8_t *)v17, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v32);
    }

    uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    uint64_t v29 = v9;
  }
  else
  {
    defaultLogger()();
    long long v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, a3, v27, 2u);
      swift_slowDealloc();
    }

    uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    uint64_t v29 = v11;
  }
  return v28(v29, v5);
}

uint64_t type metadata accessor for IDVServiceListener()
{
  return self;
}

uint64_t sub_10046E758()
{
  uint64_t v0 = sub_100007764(&qword_10072F398);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = &qword_100730C60;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_10072F3B0;
  }

  return sub_100007764(v2);
}

uint64_t sub_10046E7B8()
{
  uint64_t v0 = sub_100007764(&qword_10072F3B8);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = &qword_100730C60;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_10072F3C0;
  }

  return sub_100007764(v2);
}

uint64_t sub_10046E818()
{
  uint64_t v0 = sub_100007764(&qword_10072F390);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = &qword_100730C60;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_10072F3A0;
  }

  return sub_100007764(v2);
}

uint64_t sub_10046E878(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v46 - v7;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [a1 valueForEntitlement:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v59, 0, 32);
  }
  sub_10046F254((uint64_t)v59, (uint64_t)&aBlock);
  if (!v56)
  {
    sub_100145FA4((uint64_t)&aBlock);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    defaultLogger()();
    long long v13 = a1;
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = v6;
      uint64_t v17 = a1;
      uint64_t v18 = v16;
      *(_DWORD *)os_log_type_t v16 = 67240192;
      LODWORD(aBlock) = [v13 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "coreidvd: could not find caller's application identifier, pid %{public}d", v18, 8u);
      a1 = v17;
      uint64_t v6 = v50;
      swift_slowDealloc();
    }
    else
    {

      id v14 = v13;
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    uint64_t v12 = 0;
    unint64_t v11 = 0;
    goto LABEL_12;
  }
  uint64_t v12 = v51;
  unint64_t v11 = v52;
LABEL_12:
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v48 = v3;
    unint64_t v22 = (uint8_t *)v21;
    unint64_t v23 = (void **)swift_slowAlloc();
    uint64_t v49 = a1;
    *(_DWORD *)unint64_t v22 = 136446210;
    uint64_t aBlock = v23;
    uint64_t v47 = v2;
    if (v11) {
      uint64_t v24 = v12;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v50 = v6;
    if (v11) {
      unint64_t v25 = v11;
    }
    else {
      unint64_t v25 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    *(void *)&v59[0] = sub_100110D58(v24, v25, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "IDV service listener received connection from application id = [%{public}s]", v22, 0xCu);
    swift_arrayDestroy();
    a1 = v49;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  sub_10046E758();
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_100623370;
  uint64_t v27 = sub_100025C28(0, &qword_100724520);
  *(void *)(v26 + 32) = v27;
  uint64_t v28 = sub_100025C28(0, &qword_1007264E0);
  *(void *)(v26 + 40) = v28;
  *(void *)(v26 + 48) = sub_100025C28(0, (unint64_t *)&unk_10072F328);
  *(void *)(v26 + 56) = sub_100025C28(0, &qword_1007223C0);
  *(void *)(v26 + 64) = sub_100025C28(0, &qword_10072F338);
  *(void *)(v26 + 72) = sub_100025C28(0, &qword_10072F340);
  *(void *)(v26 + 80) = sub_100025C28(0, (unint64_t *)&unk_100726910);
  *(void *)(v26 + 88) = sub_100025C28(0, &qword_1007225E0);
  *(void *)(v26 + 96) = sub_100025C28(0, &qword_1007225F0);
  *(void *)(v26 + 104) = sub_100025C28(0, (unint64_t *)&unk_100722640);
  *(void *)(v26 + 112) = sub_100025C28(0, &qword_10072F348);
  *(void *)(v26 + 120) = sub_100025C28(0, &qword_10072F350);
  *(void *)(v26 + 128) = sub_100025C28(0, &qword_10072F358);
  *(void *)(v26 + 136) = sub_100025C28(0, (unint64_t *)&unk_10072F360);
  *(void *)(v26 + 144) = sub_100025C28(0, &qword_1007225B0);
  *(void *)(v26 + 152) = sub_100025C28(0, (unint64_t *)&unk_10072F370);
  uint64_t v29 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v30 = [self interfaceWithProtocol:&OBJC_PROTOCOL___DIVerificationServerSideProtocol];
  [a1 setExportedInterface:v30];

  id v31 = [a1 exportedInterface];
  if (v31)
  {
    uint64_t v32 = v31;
    NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  }
  swift_bridgeObjectRelease();
  sub_10046E758();
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_100611000;
  *(void *)(v33 + 32) = v28;
  *(void *)(v33 + 40) = sub_100025C28(0, &qword_100726CD0);
  *(void *)(v33 + 48) = v27;
  *(void *)(v33 + 56) = sub_100025C28(0, &qword_10072F380);
  id v34 = [a1 exportedInterface];
  if (v34)
  {
    uint64_t v35 = v34;
    NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  }
  swift_bridgeObjectRelease();
  sub_10046E818();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100610730;
  *(void *)(inited + 32) = sub_100025C28(0, &qword_10072F388);
  id v37 = [a1 exportedInterface];
  if (v37)
  {
    uint64_t v38 = v37;
    sub_10046DE80(inited, &qword_10072F390);
    swift_setDeallocating();
    NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_setDeallocating();
  }
  if (v11) {
    uint64_t v39 = v12;
  }
  else {
    uint64_t v39 = 0x414C494156414E55;
  }
  if (v11) {
    uint64_t v40 = v11;
  }
  else {
    uint64_t v40 = 0xEB00000000454C42;
  }
  objc_allocWithZone((Class)type metadata accessor for IDVSessionProxy(0));
  id v41 = a1;
  id v42 = sub_1001C1328((uint64_t)a1, v39, v40);

  [v41 setExportedObject:v42];
  uint64_t v57 = sub_10046F2F4;
  uint64_t v58 = v29;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v54 = 1107296256;
  uint64_t v55 = sub_100593800;
  unint64_t v56 = &unk_100706218;
  uint64_t v43 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v41 setInvalidationHandler:v43];
  _Block_release(v43);
  uint64_t v57 = sub_10046F338;
  uint64_t v58 = v29;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v54 = 1107296256;
  uint64_t v55 = sub_100593800;
  unint64_t v56 = &unk_100706240;
  uint64_t v44 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v41 setInterruptionHandler:v44];
  _Block_release(v44);
  [v41 resume];
  swift_release();
  return 1;
}

uint64_t sub_10046F254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100727200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10046F2BC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10046F2F4()
{
  return sub_10046E378(v0, "coreidvd (%{public}s:%{public}d): connection invalidated", "coreidvd (no description: -1): connection invalidated");
}

uint64_t sub_10046F320(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10046F330()
{
  return swift_release();
}

uint64_t sub_10046F338()
{
  return sub_10046E378(v0, "coreidvd (%{public}s:%{public}d): connection interupted", "coreidvd (no description: -1): connection interupted");
}

uint64_t sub_10046F36C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v93 = *(void *)(v5 - 8);
  uint64_t v94 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (char *)v85 - v10;
  __chkstk_darwin(v9);
  uint64_t v92 = (char *)v85 - v12;
  uint64_t v13 = sub_100007764(&qword_10072B400);
  __chkstk_darwin(v13 - 8);
  os_log_type_t v15 = (char *)v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100007764(&qword_100723988);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    defaultLogger()();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Missing results for liveness attestation", v27, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v93 + 8))(v8, v94);
    goto LABEL_9;
  }
  uint64_t v20 = *(void *)(v2 + 16) + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2;
  swift_beginAccess();
  sub_1004682DC(v20, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    id v21 = a1;
    sub_100468408((uint64_t)v15);
    defaultLogger()();
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Missing signed config v2 from LivenessConfigProvider", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v93 + 8))(v11, v94);
LABEL_9:
    uint64_t v28 = type metadata accessor for LivenessDataV2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a2, 1, 1, v28);
  }
  id v30 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
  uint64_t v91 = v19;
  uint64_t v87 = v17 + 32;
  uint64_t v88 = a2;
  uint64_t v86 = v30;
  v30((uint64_t)v19, v15, v16);
  id v90 = a1;
  unint64_t v31 = IdentityLivenessResults.timestampsFAC.getter();
  unint64_t v32 = v31;
  if (v31 >> 62) {
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v33 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v89 = v16;
  if (v33)
  {
    v98[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t result = sub_100111680(0, v33 & ~(v33 >> 63), 0);
    if (v33 < 0)
    {
      __break(1u);
      goto LABEL_44;
    }
    uint64_t v34 = 0;
    uint64_t v35 = (void *)v98[0];
    do
    {
      if ((v32 & 0xC000000000000001) != 0) {
        id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v36 = *(id *)(v32 + 8 * v34 + 32);
      }
      id v37 = v36;
      uint64_t v38 = GestureTimestamps.timestamps.getter();

      v98[0] = (uint64_t)v35;
      unint64_t v40 = v35[2];
      unint64_t v39 = v35[3];
      if (v40 >= v39 >> 1)
      {
        sub_100111680(v39 > 1, v40 + 1, 1);
        uint64_t v35 = (void *)v98[0];
      }
      ++v34;
      v35[2] = v40 + 1;
      v35[v40 + 4] = v38;
    }
    while (v33 != v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = _swiftEmptyArrayStorage;
  }
  uint64_t v100 = v35;
  id v41 = [self standardUserDefaults];
  v42._object = (void *)0x800000010064DCD0;
  v42._uint64_t countAndFlagsBits = 0xD000000000000016;
  Swift::Bool v43 = NSUserDefaults.internalBool(forKey:)(v42);

  if (v43)
  {
    JWSSignedJSON.payload.getter();
    memcpy(v98, v97, 0x10AuLL);
    sub_100349600((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, unint64_t))sub_10034955C);
    sub_100468190(v98);
    sub_10046FD40((uint64_t)v98, (uint64_t)v99);
    if (sub_10027F5A8((uint64_t)v99) != 1)
    {
      uint64_t v44 = v99[2];
      swift_bridgeObjectRetain();
      sub_100349600((uint64_t)v98, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, unint64_t))sub_100349678);
      uint64_t v45 = *(void *)(v44 + 16);
      swift_bridgeObjectRelease();
      uint64_t v46 = sub_10027E270((uint64_t)_swiftEmptyArrayStorage, v45);
      swift_bridgeObjectRelease();
      uint64_t v100 = v46;
      uint64_t v47 = v92;
      defaultLogger()();
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        v97[0] = v45;
        *(_DWORD *)uint64_t v50 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v50 + 12) = 2080;
        v85[1] = v50 + 14;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        sub_100007764(&qword_1007240D8);
        uint64_t v51 = Array.description.getter();
        unint64_t v53 = v52;
        swift_bridgeObjectRelease();
        uint64_t v95 = sub_100110D58(v51, v53, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "IdentityProofingLivenessDataProvider: liveness disabled. Gesture count: %ld Timestamps FAC: %s", (uint8_t *)v50, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v93 + 8))(v47, v94);
    }
  }
  unint64_t v54 = IdentityLivenessResults.assessmentsPRD.getter();
  unint64_t v55 = v54;
  if (!(v54 >> 62))
  {
    uint64_t v56 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v56) {
      goto LABEL_30;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    uint64_t v58 = _swiftEmptyArrayStorage;
LABEL_42:
    double v67 = v90;
    uint64_t v94 = IdentityLivenessResults.livenessLabel.getter();
    uint64_t v68 = IdentityLivenessResults.assessmentsFAC.getter();
    swift_beginAccess();
    uint64_t v69 = v100;
    swift_bridgeObjectRetain();
    IdentityLivenessResults.assessmentTA.getter();
    int v71 = v70;
    IdentityLivenessResults.maxNccLow.getter();
    int v73 = v72;
    IdentityLivenessResults.maxNccHigh.getter();
    int v75 = v74;
    uint64_t v76 = IdentityLivenessResults.ignoredStitches.getter();
    IdentityLivenessResults.assessmentID.getter();
    int v78 = v77;
    uint64_t v79 = IdentityLivenessResults.timestampsID.getter();
    uint64_t v80 = IdentityLivenessResults.timestampsButtonPressed.getter();
    uint64_t v81 = IdentityLivenessResults.luxValues.getter();

    uint64_t v82 = v88;
    v86(v88, v91, v89);
    uint64_t v83 = type metadata accessor for LivenessDataV2(0);
    uint64_t v84 = v82 + *(int *)(v83 + 20);
    *(void *)uint64_t v84 = v94;
    *(unsigned char *)(v84 + 8) = 0;
    *(void *)(v84 + 16) = v68;
    *(void *)(v84 + 24) = v69;
    *(_DWORD *)(v84 + 32) = v71;
    *(unsigned char *)(v84 + 36) = 0;
    *(_DWORD *)(v84 + 40) = v73;
    *(unsigned char *)(v84 + 44) = 0;
    *(_DWORD *)(v84 + 48) = v75;
    *(unsigned char *)(v84 + 52) = 0;
    *(void *)(v84 + 56) = v76;
    *(unsigned char *)(v84 + 64) = 0;
    *(void *)(v84 + 72) = v58;
    *(_DWORD *)(v84 + 80) = v78;
    *(unsigned char *)(v84 + 84) = 0;
    *(void *)(v84 + 88) = v79;
    *(void *)(v84 + 96) = v80;
    *(void *)(v84 + 104) = v81;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v82, 0, 1, v83);
    return swift_bridgeObjectRelease();
  }
  uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
  if (!v56) {
    goto LABEL_41;
  }
LABEL_30:
  v98[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t result = sub_100111660(0, v56 & ~(v56 >> 63), 0);
  if ((v56 & 0x8000000000000000) == 0)
  {
    uint64_t v57 = 0;
    uint64_t v58 = (void *)v98[0];
    do
    {
      if ((v55 & 0xC000000000000001) != 0) {
        id v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v59 = *(id *)(v55 + 8 * v57 + 32);
      }
      uint64_t v60 = v59;
      PRDMetadata.stage2.getter();
      int v62 = v61;
      uint64_t v63 = PRDMetadata.timestamp.getter();

      v98[0] = (uint64_t)v58;
      unint64_t v65 = v58[2];
      unint64_t v64 = v58[3];
      if (v65 >= v64 >> 1)
      {
        sub_100111660(v64 > 1, v65 + 1, 1);
        uint64_t v58 = (void *)v98[0];
      }
      ++v57;
      v58[2] = v65 + 1;
      double v66 = &v58[2 * v65];
      *((_DWORD *)v66 + 8) = v62;
      v66[5] = v63;
    }
    while (v56 != v57);
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IdentityProofingLivenessDataProvider()
{
  return self;
}

uint64_t sub_10046FD40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10072B108);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10046FDA8(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x6E776F6E6B6E75;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6E776F6E6B6E75;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x756F72676B636162;
      unint64_t v3 = 0xEA0000000000646ELL;
      break;
    case 2:
      unint64_t v3 = 0x800000010062A960;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v5 = 0x6974634172657375;
      unint64_t v3 = 0xEA00000000006E6FLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEA0000000000646ELL;
      if (v5 == 0x756F72676B636162) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0x800000010062A960;
      unint64_t v2 = 0xD000000000000010;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEA00000000006E6FLL;
      if (v5 == 0x6974634172657375) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10046FF60(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEE00726564616548;
  unint64_t v3 = 0x65736E6F70736572;
  uint64_t v4 = a1;
  unint64_t v5 = 0x65736E6F70736572;
  unint64_t v6 = 0xEE00726564616548;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x776F6C666B726F77;
      break;
    case 2:
      unint64_t v5 = 0xD000000000000014;
      unint64_t v6 = 0x8000000100629EB0;
      break;
    case 3:
      char v7 = "assessmentProfile";
      goto LABEL_7;
    case 4:
      unint64_t v5 = 0x656D737365737361;
      unint64_t v6 = 0xEF7344495547746ELL;
      break;
    case 5:
      char v7 = "assessmentBaseURL";
LABEL_7:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000011;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      unint64_t v3 = 0x776F6C666B726F77;
      break;
    case 2:
      unint64_t v3 = 0xD000000000000014;
      unint64_t v2 = 0x8000000100629EB0;
      break;
    case 3:
      uint64_t v8 = "assessmentProfile";
      goto LABEL_14;
    case 4:
      unint64_t v3 = 0x656D737365737361;
      unint64_t v2 = 0xEF7344495547746ELL;
      break;
    case 5:
      uint64_t v8 = "assessmentBaseURL";
LABEL_14:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000011;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_100470180(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x80000001006297B0;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000013;
    }
    else {
      unint64_t v5 = 1701736302;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x80000001006297D0;
    }
    else {
      unint64_t v6 = 0xE400000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000012;
  unint64_t v6 = 0x80000001006297B0;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD000000000000013;
    }
    else {
      unint64_t v2 = 1701736302;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x80000001006297D0;
    }
    else {
      unint64_t v3 = 0xE400000000000000;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100470270(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x44495F4554415453;
  }
  else {
    uint64_t v3 = 0x5F474E4956495244;
  }
  if (v2) {
    unint64_t v4 = 0xEF45534E4543494CLL;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x44495F4554415453;
  }
  else {
    uint64_t v5 = 0x5F474E4956495244;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xEF45534E4543494CLL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100470324(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x800000010062A860;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000012;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x65636E6F6ELL;
      break;
    case 2:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x64696C61567369;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000016;
      unint64_t v3 = 0x800000010062A890;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x800000010062A860;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x65636E6F6ELL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      unint64_t v2 = 0x64696C61567369;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0x800000010062A890;
      if (v5 == 0xD000000000000016) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1004704A8(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 30771;
  }
  else {
    uint64_t v2 = 30770;
  }
  if (a2) {
    uint64_t v3 = 30771;
  }
  else {
    uint64_t v3 = 30770;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_10047050C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEB00000000644965;
  uint64_t v3 = 0x7475626972747461;
  uint64_t v4 = a1;
  uint64_t v5 = 0x7475626972747461;
  unint64_t v6 = 0xEB00000000644965;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x64657669726564;
      break;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1953259891;
      break;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x65756C6176;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      if (v5 == 0x64657669726564) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1953259891;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE500000000000000;
      if (v5 == 0x65756C6176) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100470694(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xED00006E69616843;
  unint64_t v3 = 0x776F6C666B726F77;
  uint64_t v4 = a1;
  unint64_t v5 = 0x776F6C666B726F77;
  unint64_t v6 = 0xED00006E69616843;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      break;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      unint64_t v5 = 0x7365636E6F6ELL;
      break;
    case 3:
      unint64_t v5 = 0x726F576F73726570;
      unint64_t v6 = 0xED0000776F6C666BLL;
      break;
    case 4:
      char v7 = "assessmentProfile";
      goto LABEL_8;
    case 5:
      unint64_t v5 = 0x656D737365737361;
      unint64_t v6 = 0xEF7344495547746ELL;
      break;
    case 6:
      char v7 = "assessmentBaseURL";
LABEL_8:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 7:
      unint64_t v5 = 0xD000000000000014;
      unint64_t v6 = 0x8000000100629EB0;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      if (v5 == 0x776F6C666B726F77) {
        goto LABEL_23;
      }
      goto LABEL_26;
    case 2:
      unint64_t v2 = 0xE600000000000000;
      if (v5 != 0x7365636E6F6ELL) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 3:
      unint64_t v2 = 0xED0000776F6C666BLL;
      if (v5 != 0x726F576F73726570) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 4:
      char v8 = "assessmentProfile";
      goto LABEL_21;
    case 5:
      unint64_t v2 = 0xEF7344495547746ELL;
      if (v5 != 0x656D737365737361) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 6:
      char v8 = "assessmentBaseURL";
LABEL_21:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000011;
      goto LABEL_22;
    case 7:
      unint64_t v2 = 0x8000000100629EB0;
      if (v5 != 0xD000000000000014) {
        goto LABEL_26;
      }
      goto LABEL_23;
    default:
LABEL_22:
      if (v5 != v3) {
        goto LABEL_26;
      }
LABEL_23:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_26:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_100470938(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0x800000010062AA20;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD00000000000001CLL;
    }
    else {
      unint64_t v5 = 0xD000000000000014;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x800000010062AA40;
    }
    else {
      unint64_t v6 = 0x800000010062AA60;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000010;
  unint64_t v6 = 0x800000010062AA20;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD00000000000001CLL;
    }
    else {
      unint64_t v2 = 0xD000000000000014;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x800000010062AA40;
    }
    else {
      unint64_t v3 = 0x800000010062AA60;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100470A38(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6F436E6F69676552;
  }
  else {
    uint64_t v3 = 0x43746C7561666544;
  }
  if (v2) {
    unint64_t v4 = 0xEE00736769666E6FLL;
  }
  else {
    unint64_t v4 = 0xED0000736769666ELL;
  }
  if (a2) {
    uint64_t v5 = 0x6F436E6F69676552;
  }
  else {
    uint64_t v5 = 0x43746C7561666544;
  }
  if (a2) {
    unint64_t v6 = 0xED0000736769666ELL;
  }
  else {
    unint64_t v6 = 0xEE00736769666E6FLL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100470AF8(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6E6F6973726576;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E6F6973726576;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 25705;
      break;
    case 2:
      uint64_t v5 = 0x6C4368636E75616CLL;
      unint64_t v3 = 0xEE007364496D6961;
      break;
    case 3:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x726575737369;
      break;
    case 4:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x646575737369;
      break;
    case 5:
      uint64_t v5 = 0x6974617269707865;
      unint64_t v3 = 0xEA00000000006E6FLL;
      break;
    case 6:
      uint64_t v5 = 0x776F6C666B726F77;
      unint64_t v3 = 0xEA00000000006449;
      break;
    case 7:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1919248756;
      break;
    case 8:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6D69616C63;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE200000000000000;
      if (v5 == 25705) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      unint64_t v6 = 0xEE007364496D6961;
      if (v5 != 0x6C4368636E75616CLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x726575737369) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x646575737369) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v6 = 0xEA00000000006E6FLL;
      if (v5 != 0x6974617269707865) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v6 = 0xEA00000000006449;
      if (v5 != 0x776F6C666B726F77) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1919248756;
      goto LABEL_24;
    case 8:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6D69616C63) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v2) {
        goto LABEL_28;
      }
LABEL_25:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_28:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100470DBC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0x45444F4348545541;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0x45444F4348545541;
    }
    else {
      unint64_t v4 = 0xD000000000000010;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xEE0059525445525FLL;
    }
    else {
      unint64_t v5 = 0x8000000100629010;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
      {
        unint64_t v7 = 0xEE0059525445525FLL;
      }
      else
      {
        unint64_t v2 = 0xD000000000000010;
        unint64_t v7 = 0x8000000100629010;
      }
      if (v4 != v2) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v5 = 0xE800000000000000;
    unint64_t v4 = 0x45444F4348545541;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v4 != 0x45444F4348545541)
  {
LABEL_18:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_19;
  }
LABEL_16:
  if (v5 != v7) {
    goto LABEL_18;
  }
  char v8 = 1;
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100470ED0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xE900000000000068;
  uint64_t v3 = 0x74615070756F7267;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x7475626972747461;
    }
    else {
      uint64_t v5 = 25705;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEB00000000644965;
    }
    else {
      unint64_t v6 = 0xE200000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x74615070756F7267;
  unint64_t v6 = 0xE900000000000068;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x7475626972747461;
    }
    else {
      uint64_t v3 = 25705;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEB00000000644965;
    }
    else {
      unint64_t v2 = 0xE200000000000000;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100470FE4(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1752392040;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1752392040;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x70756F7267;
      break;
    case 2:
      uint64_t v5 = 1635017060;
      break;
    case 3:
      uint64_t v5 = 1952867692;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x7468676972;
      break;
    case 5:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x6465686361746564;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x70756F7267) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      if (v5 != 1635017060) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      if (v5 != 1952867692) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x7468676972;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x6465686361746564) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1004711A0(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 6645601;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 6645601;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 7890291;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x6574617473;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1701011826;
      break;
    case 4:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x656E6F546E696B73;
      break;
    case 5:
      unint64_t v3 = 0x8000000100629FC0;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 6:
      unint64_t v5 = 0xD000000000000012;
      unint64_t v3 = 0x8000000100629FE0;
      break;
    case 7:
      unint64_t v5 = 0x6E69747465537861;
      unint64_t v3 = 0xEA00000000007367;
      break;
    case 8:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1701736302;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 7890291) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6574617473) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1701011826) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x656E6F546E696B73) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v6 = 0x8000000100629FC0;
      if (v5 != 0xD000000000000010) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v6 = 0x8000000100629FE0;
      if (v5 != 0xD000000000000012) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      uint64_t v2 = 0x6E69747465537861;
      unint64_t v6 = 0xEA00000000007367;
      goto LABEL_24;
    case 8:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1701736302) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v2) {
        goto LABEL_28;
      }
LABEL_25:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_28:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10047143C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x7373657373416F6ELL;
    }
    else {
      uint64_t v3 = 0x64656C6261736964;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEC000000746E656DLL;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x7373657373416F6ELL;
      }
      else {
        uint64_t v6 = 0x64656C6261736964;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEC000000746E656DLL;
      }
      else {
        unint64_t v7 = 0xE800000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x6C616D726F6ELL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x6C616D726F6ELL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100471560(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x44454C4542414CLL;
    }
    else {
      uint64_t v3 = 0x44454C494146;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE700000000000000;
    }
    else {
      unint64_t v4 = 0xE600000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x44454C4542414CLL;
      }
      else {
        uint64_t v6 = 0x44454C494146;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE700000000000000;
      }
      else {
        unint64_t v7 = 0xE600000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 5719374;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE300000000000000;
  if (v3 != 5719374)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100471664(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1954047348;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 1954047348;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x72656B636970;
      break;
    case 2:
      unint64_t v5 = 1702125924;
      break;
    case 3:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x6172656D6163;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x6F746F6870;
      break;
    case 5:
      unint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 7369839;
      break;
    case 6:
      unint64_t v3 = 0x800000010062A670;
      unint64_t v5 = 0xD000000000000010;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x72656B636970) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      if (v5 != 1702125924) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x6172656D6163) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6F746F6870) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 7369839;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0x800000010062A670;
      if (v5 != 0xD000000000000010) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100471868(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x44496574617473;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x44496574617473;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 27748;
      break;
    case 2:
      uint64_t v5 = 0x6E776F6E6B6E75;
      break;
    case 3:
      uint64_t v5 = 0x6C616E6F6974616ELL;
      unint64_t v3 = 0xEA00000000004449;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE200000000000000;
      if (v5 == 27748) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x6E776F6E6B6E75;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEA00000000004449;
      if (v5 == 0x6C616E6F6974616ELL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1004719E0(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x64756F6C4369;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x64756F6C4369;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x73656E755469;
      break;
    case 2:
      uint64_t v5 = 0x64726143656DLL;
      break;
    case 3:
      uint64_t v5 = 0x6D754E656E6F6870;
      uint64_t v6 = 7497058;
      goto LABEL_6;
    case 4:
      uint64_t v5 = 0x726F707075736E75;
      uint64_t v6 = 6579572;
LABEL_6:
      unint64_t v3 = v6 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 0x73656E755469) {
        goto LABEL_14;
      }
      goto LABEL_17;
    case 2:
      if (v5 != 0x64726143656DLL) {
        goto LABEL_17;
      }
      goto LABEL_14;
    case 3:
      uint64_t v2 = 0x6D754E656E6F6870;
      unint64_t v7 = 0xEB00000000726562;
      goto LABEL_13;
    case 4:
      unint64_t v7 = 0xEB00000000646574;
      if (v5 != 0x726F707075736E75) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
LABEL_13:
      if (v5 != v2) {
        goto LABEL_17;
      }
LABEL_14:
      if (v3 == v7) {
        char v8 = 1;
      }
      else {
LABEL_17:
      }
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8 & 1;
  }
}

uint64_t sub_100471BA0(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 0x73656E755469;
  }
  else {
    uint64_t v2 = 0x64756F6C4369;
  }
  if (a2) {
    uint64_t v3 = 0x73656E755469;
  }
  else {
    uint64_t v3 = 0x64756F6C4369;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_100471C18(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x73746E756F636341;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x73746E756F636341;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xEF64756F6C43692ELL;
      break;
    case 2:
      unint64_t v3 = 0xEF73656E7554692ELL;
      break;
    case 3:
      uint64_t v5 = 0x656C655465726F43;
      unint64_t v3 = 0xED0000796E6F6870;
      break;
    case 4:
      uint64_t v5 = 0x797469746E656449;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x64726143654DLL;
      break;
    case 6:
      uint64_t v5 = 0x726F707075736E75;
      unint64_t v3 = 0xEB00000000646574;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEF64756F6C43692ELL;
      if (v5 == 0x73746E756F636341) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xEF73656E7554692ELL;
      if (v5 != 0x73746E756F636341) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xED0000796E6F6870;
      if (v5 != 0x656C655465726F43) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      if (v5 != 0x797469746E656449) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x64726143654DLL;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xEB00000000646574;
      if (v5 != 0x726F707075736E75) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100471E6C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0xD000000000000018;
    }
    else {
      unint64_t v3 = 0x6146737961776C61;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x800000010062A750;
    }
    else {
      unint64_t v4 = 0xEE006B6361626C6CLL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0xD000000000000018;
      }
      else {
        unint64_t v6 = 0x6146737961776C61;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x800000010062A750;
      }
      else {
        unint64_t v7 = 0xEE006B6361626C6CLL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    unint64_t v3 = 0x746C7561666564;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x746C7561666564)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100471FA0(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1701736302;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1701736302;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x64496F6962;
      break;
    case 2:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x65646F6373736170;
      break;
    case 3:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 7958113;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x64496F6962) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v2 = 0x65646F6373736170;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE300000000000000;
      if (v5 == 7958113) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100472108(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x4D49536C617564;
  }
  else {
    uint64_t v3 = 0x4953656C676E6973;
  }
  if (v2) {
    unint64_t v4 = 0xE90000000000004DLL;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x4D49536C617564;
  }
  else {
    uint64_t v5 = 0x4953656C676E6973;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE90000000000004DLL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1004721B4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7961506D69616C63;
  }
  else {
    uint64_t v3 = 0x6165486D69616C63;
  }
  if (v2) {
    unint64_t v4 = 0xEB00000000726564;
  }
  else {
    unint64_t v4 = 0xEC00000064616F6CLL;
  }
  if (a2) {
    uint64_t v5 = 0x7961506D69616C63;
  }
  else {
    uint64_t v5 = 0x6165486D69616C63;
  }
  if (a2) {
    unint64_t v6 = 0xEC00000064616F6CLL;
  }
  else {
    unint64_t v6 = 0xEB00000000726564;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10047226C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 5919309;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 5919309;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 5391183;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x454349564544;
      break;
    case 3:
      unint64_t v3 = 0x800000010062A1E0;
      unint64_t v5 = 0xD000000000000013;
      break;
    case 4:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x4E495F444559454BLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 5391183) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x454349564544) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0x800000010062A1E0;
      unint64_t v2 = 0xD000000000000013;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x4E495F444559454BLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100472410(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 50;
  }
  else {
    uint64_t v2 = 49;
  }
  if (a2) {
    uint64_t v3 = 50;
  }
  else {
    uint64_t v3 = 49;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_100472474(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x676E6972616873;
  }
  else {
    uint64_t v3 = 0x676E69666F6F7270;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x676E6972616873;
  }
  else {
    uint64_t v5 = 0x676E69666F6F7270;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10047251C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEF746E6F7246746ELL;
  uint64_t v3 = 0x656D75636F446469;
  uint64_t v4 = a1;
  uint64_t v5 = 0x656D75636F446469;
  unint64_t v6 = 0xEF746E6F7246746ELL;
  switch(v4)
  {
    case 1:
      uint64_t v7 = 0x6B636142746ELL;
      goto LABEL_6;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v5 = 0x6569666C6573;
      break;
    case 3:
      uint64_t v5 = 0x7373656E6576696CLL;
      unint64_t v6 = 0xED00006F65646956;
      break;
    case 4:
      uint64_t v5 = 0x7261696C69787561;
      uint64_t v7 = 0x6F6564695679;
LABEL_6:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v8 = 0x6B636142746ELL;
      goto LABEL_15;
    case 2:
      unint64_t v2 = 0xE600000000000000;
      if (v5 != 0x6569666C6573) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 3:
      uint64_t v3 = 0x7373656E6576696CLL;
      unint64_t v2 = 0xED00006F65646956;
      goto LABEL_12;
    case 4:
      uint64_t v3 = 0x7261696C69787561;
      uint64_t v8 = 0x6F6564695679;
LABEL_15:
      unint64_t v2 = v8 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      if (v5 == v3) {
        goto LABEL_16;
      }
      goto LABEL_18;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_18;
      }
LABEL_16:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_18:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_100472714(char a1, char a2)
{
  if (a1 == a2) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_100472778(char a1, char a2)
{
  if (a1) {
    unint64_t v2 = 0x800000010062A6B0;
  }
  else {
    unint64_t v2 = 0x800000010062A690;
  }
  if (a2) {
    unint64_t v3 = 0x800000010062A6B0;
  }
  else {
    unint64_t v3 = 0x800000010062A690;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

Swift::Int sub_100472818()
{
  return Hasher._finalize()();
}

Swift::Int sub_1004728B8()
{
  return Hasher._finalize()();
}

Swift::Int sub_1004729E4()
{
  return Hasher._finalize()();
}

Swift::Int sub_100472AC8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100472B48()
{
  return Hasher._finalize()();
}

Swift::Int sub_100472C30()
{
  return Hasher._finalize()();
}

Swift::Int sub_100472D20()
{
  return Hasher._finalize()();
}

Swift::Int sub_100472E0C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100472EB8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100472F34()
{
  return Hasher._finalize()();
}

Swift::Int sub_100472F88()
{
  return Hasher._finalize()();
}

Swift::Int sub_100473068()
{
  return Hasher._finalize()();
}

Swift::Int sub_1004731A4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1004732AC()
{
  return Hasher._finalize()();
}

Swift::Int sub_100473394()
{
  return Hasher._finalize()();
}

Swift::Int sub_10047343C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1004735A0()
{
  return Hasher._finalize()();
}

Swift::Int sub_100473684()
{
  return Hasher._finalize()();
}

Swift::Int sub_100473720()
{
  return Hasher._finalize()();
}

Swift::Int sub_100473848()
{
  return Hasher._finalize()();
}

uint64_t sub_100473934()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingMetadata()
{
  return self;
}

uint64_t sub_100473998(unsigned __int8 *a1, char *a2)
{
  return sub_10046FDA8(*a1, *a2);
}

Swift::Int sub_1004739A4()
{
  return sub_100472C30();
}

uint64_t sub_1004739AC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100473A84()
{
  return sub_100473848();
}

unint64_t sub_100473A8C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100483298(*a1);
  *a2 = result;
  return result;
}

void sub_100473ABC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x6E776F6E6B6E75;
  switch(*v1)
  {
    case 1:
      uint64_t v3 = 0x756F72676B636162;
      unint64_t v2 = 0xEA0000000000646ELL;
      goto LABEL_3;
    case 2:
      *a1 = 0xD000000000000010;
      a1[1] = 0x800000010062A960;
      break;
    case 3:
      *a1 = 0x6974634172657375;
      a1[1] = 0xEA00000000006E6FLL;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_100473B6C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v53 = a7;
  id v47 = a9;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v19 - 8);
  uint64_t v52 = v19;
  __chkstk_darwin(v19);
  unint64_t v54 = (char *)v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  uint64_t v21 = v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse;
  uint64_t v22 = type metadata accessor for WorkflowRecommendationResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessConfigProvider;
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessConfigProvider) = 0;
  uint64_t v24 = v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_staticWorkflow;
  uint64_t v25 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  uint64_t v26 = v24;
  uint64_t v27 = a5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v26, 1, 1, v25);
  uint64_t v28 = OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_watchListener;
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_watchListener) = 0;
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpConfig) = 0;
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpIQSettings) = 0;
  *(unsigned char *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_trigger) = a1;
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_pendingActionsWebService) = a2;
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_userNotificationProvider) = a3;
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_expirationActionProvider) = a4;
  *(void *)(v11 + v23) = v27;
  uint64_t v48 = a2;
  uint64_t v29 = v53;
  swift_retain();
  uint64_t v49 = a3;
  swift_retain();
  uint64_t v50 = a4;
  id v30 = v47;
  swift_retain();
  swift_retain();
  swift_release();
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_cleanupProvider) = a6;
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_biomeManager) = v29;
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_deviceInfo) = a8;
  if (v30)
  {
    swift_retain();
    swift_retain();
    id v31 = a8;
    unint64_t v32 = v30;
  }
  else if (qword_1007600C0)
  {
    swift_retain();
    swift_retain();
    id v33 = a8;
    swift_retain();
    unint64_t v32 = (void *)sub_10003A450();
    id v34 = v32;
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain();
    id v35 = a8;
    unint64_t v32 = 0;
  }
  id v36 = *(void **)(v11 + v28);
  *(void *)(v11 + v28) = v32;
  id v47 = v30;

  if (qword_10071F5A8 != -1) {
    swift_once();
  }
  uint64_t v37 = qword_100760858;
  v55[3] = type metadata accessor for IdentityBiometricStoreHelper();
  v55[4] = &off_100708388;
  v55[0] = v37;
  type metadata accessor for IdentityProofingCredentialProvider();
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = 0;
  sub_1000BEA14((uint64_t)v55, v38 + 24, (uint64_t *)&unk_100733680);
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_credentialProvider) = v38;
  *(void *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_identityWatchProvisioningManagerFactory) = a10;
  swift_retain();
  swift_retain();
  defaultLogger()();
  swift_retain_n();
  unint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v46[2] = a10;
    v46[3] = a6;
    id v41 = (uint8_t *)swift_slowAlloc();
    Swift::String v42 = (void *)swift_slowAlloc();
    *(_DWORD *)id v41 = 138412290;
    Swift::Bool v43 = *(void **)(v11 + v28);
    if (v43)
    {
      v46[1] = v27;
      v55[0] = v43;
      id v44 = v43;
    }
    else
    {
      v55[0] = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *Swift::String v42 = v43;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "IdentityProofingPendingActionsFlow: watchListener = %@", v41, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {

    swift_release();
    swift_release_n();
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v51 + 8))(v54, v52);
  return v11;
}

void *sub_1004740E8(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v44 = a7;
  uint64_t v45 = a8;
  uint64_t v48 = a5;
  unint64_t v49 = a6;
  uint64_t v46 = a4;
  uint64_t v43 = a3;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v40 = *(void *)(v11 - 8);
  uint64_t v41 = v11;
  __chkstk_darwin(v11);
  Swift::String v42 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Preparing pending actions request", v19, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v20 = (void *)swift_allocObject();
  uint64_t v21 = v43;
  _OWORD v20[2] = v61;
  v20[3] = v21;
  v20[4] = v46;
  v20[5] = a1;
  uint64_t v23 = v48;
  unint64_t v22 = v49;
  v20[6] = a2;
  v20[7] = v23;
  uint64_t v24 = v44;
  v20[8] = v22;
  v20[9] = v24;
  v20[10] = v45;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v25 = v47;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v46 = " from the server";
  if (v25)
  {
    unint64_t v49 = v25;
    swift_release();
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v26 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v27 = *(void *)v26;
    uint64_t v61 = *(void *)(*(void *)v26 + 72);
    unint64_t v28 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_100611020;
    unint64_t v30 = v29 + v28;
    id v31 = (void *)(v30 + v26[14]);
    uint64_t v32 = enum case for DIPError.PropertyKey.inoProviderID(_:);
    uint64_t v33 = type metadata accessor for DIPError.PropertyKey();
    id v34 = *(void (**)(void))(*(void *)(v33 - 8) + 104);
    ((void (*)(unint64_t, uint64_t, uint64_t))v34)(v30, v32, v33);
    v31[3] = &type metadata for String;
    *id v31 = 0x61746E6567616DLL;
    v31[1] = 0xE700000000000000;
    id v35 = (void *)(v30 + v61 + v26[14]);
    v34();
    _OWORD v35[3] = &type metadata for String;
    uint64_t v36 = v39;
    *id v35 = v38;
    v35[1] = v36;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_10015C504(v29);
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v42, enum case for DIPError.Code.internalError(_:), v41);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (void *)swift_errorRelease();
  }
  else
  {
    swift_release();
    v60[6] = v56;
    v60[7] = v57;
    v60[8] = v58;
    v60[9] = v59;
    v60[2] = v52;
    uint64_t v60[3] = v53;
    v60[4] = v54;
    v60[5] = v55;
    v60[0] = v50;
    v60[1] = v51;
    sub_100486440((uint64_t)v60, v23, v22, a9);
    sub_10047B3F8((uint64_t)v60, v23, v22, a9);
    return sub_1002D514C(v60);
  }
}

uint64_t sub_100474684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[30] = v10;
  v8[31] = v11;
  v8[28] = a7;
  v8[29] = a8;
  v8[26] = a5;
  v8[27] = a6;
  v8[24] = a3;
  v8[25] = a4;
  v8[22] = a1;
  v8[23] = a2;
  return _swift_task_switch(sub_1004746BC, 0, 0);
}

uint64_t sub_1004746BC()
{
  v0[32] = *(void *)(v0[23] + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_pendingActionsWebService);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[33] = v1;
  void *v1 = v0;
  v1[1] = sub_100474798;
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[26];
  uint64_t v6 = v0[27];
  uint64_t v7 = v0[24];
  uint64_t v8 = v0[25];
  return sub_10053FAB0((uint64_t)(v0 + 2), v7, v8, v5, v6, v3, v4, v2);
}

uint64_t sub_100474798()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004748F8;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1004748B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004748B4()
{
  uint64_t v1 = *(_OWORD **)(v0 + 176);
  long long v2 = *(_OWORD *)(v0 + 32);
  _OWORD *v1 = *(_OWORD *)(v0 + 16);
  v1[1] = v2;
  long long v3 = *(_OWORD *)(v0 + 48);
  long long v4 = *(_OWORD *)(v0 + 64);
  long long v5 = *(_OWORD *)(v0 + 96);
  v1[4] = *(_OWORD *)(v0 + 80);
  v1[5] = v5;
  v1[2] = v3;
  v1[3] = v4;
  long long v6 = *(_OWORD *)(v0 + 112);
  long long v7 = *(_OWORD *)(v0 + 128);
  long long v8 = *(_OWORD *)(v0 + 160);
  v1[8] = *(_OWORD *)(v0 + 144);
  v1[9] = v8;
  v1[6] = v6;
  v1[7] = v7;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004748F8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10047495C(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = a5;
  uint64_t v8 = type metadata accessor for IdentityProofingIDType();
  uint64_t v44 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = v46;
  sub_10010096C((uint64_t)a2, a3);
  if (!v17)
  {
    uint64_t v46 = a1;
    id v39 = a2;
    uint64_t v40 = v8;
    uint64_t v19 = v16;
    uint64_t v20 = v44;
    uint64_t v41 = v14;
    uint64_t v42 = v11;
    if (v18)
    {
      uint64_t v21 = v45;
      unint64_t v22 = v18;
      v23._uint64_t countAndFlagsBits = IdentityProofingIDType.rawValue.getter();
      StoredProofingSession.update(idType:)(v23);
      swift_bridgeObjectRelease();
      sub_1000FFAB4();
      id v39 = v22;
      uint64_t v28 = v21;
      uint64_t v29 = v41;
      defaultLogger()();
      uint64_t v30 = v20;
      id v31 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
      uint64_t v32 = v40;
      v31(v10, v28, v40);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        id v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        uint64_t v46 = 0;
        *(_DWORD *)id v35 = 136315138;
        uint64_t v36 = IdentityProofingIDType.rawValue.getter();
        uint64_t v47 = sub_100110D58(v36, v37, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v40);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Successfully saved the idType %s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v32);

        (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v42);
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v24 = v19;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      unint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v47 = sub_100110D58((uint64_t)v39, a3, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "unable to find proofing session. non fatal error %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v42);
    }
  }
}

void sub_100474E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v107 = a6;
  uint64_t v119 = a5;
  uint64_t v113 = a4;
  uint64_t v9 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v9 - 8);
  uint64_t v112 = (char *)v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for Date();
  uint64_t v110 = *(void (***)(char *, uint64_t))(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v116 = (char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v115 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)v91 - v20;
  __chkstk_darwin(v19);
  Swift::String v23 = (char *)v91 - v22;
  uint64_t v24 = v118;
  sub_1001002FC(a2, a3);
  if (!v24)
  {
    unint64_t v27 = v25;
    uint64_t v97 = a2;
    unint64_t v108 = a3;
    uint64_t v114 = v15;
    uint64_t v109 = v21;
    uint64_t v111 = v18;
    uint64_t v106 = v14;
    uint64_t v105 = a1;
    uint64_t v118 = 0;
    if (v25)
    {
      unint64_t v104 = v25;
      if (v25 >> 62) {
        goto LABEL_50;
      }
      uint64_t v28 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
      uint64_t v29 = (uint64_t)v112;
      id v31 = v116;
      uint64_t v30 = v117;
      if (v28)
      {
        unint64_t v103 = v27 & 0xC000000000000001;
        uint64_t v100 = (void (**)(char *, char *, uint64_t))(v110 + 4);
        long long v102 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 7);
        uint64_t v99 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 6);
        uint64_t v110 = (void (**)(char *, uint64_t))(v115 + 8);
        uint64_t v93 = &v123;
        uint64_t v98 = v121;
        uint64_t v32 = 4;
        uint64_t v33 = &stru_10071A000;
        *(void *)&long long v26 = 136315650;
        long long v92 = v26;
        v91[1] = (char *)&type metadata for Any + 8;
        *(void *)&long long v26 = 134217984;
        long long v96 = v26;
        uint64_t v95 = (char *)&type metadata for () + 8;
        uint64_t v101 = v28;
        while (1)
        {
          if (v103) {
            os_log_type_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            os_log_type_t v34 = *(id *)(v27 + 8 * v32);
          }
          id v35 = v34;
          if (__OFADD__(v32 - 4, 1))
          {
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            swift_bridgeObjectRetain();
            uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            unint64_t v27 = v104;
            goto LABEL_5;
          }
          uint64_t v115 = v32 - 3;
          id v36 = [v34 v33[247].name];
          if (v36 == (id)IdentityProofingActionStatus.rawValue.getter()
            || (id v37 = [v35 v33[247].name], v37 == (id)IdentityProofingActionStatus.rawValue.getter()))
          {

            swift_bridgeObjectRelease();
            return;
          }
          id v38 = [v35 provisioningAttemptDate];
          if (!v38) {
            break;
          }
          id v39 = v38;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v40 = (uint64_t)v106;
          (*v100)(v106, v31, v30);
          (*v102)(v40, 0, 1, v30);
          int v41 = (*v99)(v40, 1, v30);
          uint64_t v42 = v109;
          unint64_t v43 = v108;
          if (v41 == 1) {
            goto LABEL_20;
          }
          sub_10000C6CC(v40, &qword_1007239B0);
          uint64_t v44 = IdentityProofingActionStatus.rawValue.getter();
          if (v44 == IdentityProofingActionStatus.rawValue.getter()) {
            goto LABEL_18;
          }
LABEL_21:
          [v35 target];
          IdentityTarget.init(rawValue:)();
          if ((v45 & 1) == 0)
          {
            defaultLogger()();
            swift_bridgeObjectRetain_n();
            uint64_t v46 = Logger.logObject.getter();
            os_log_type_t v47 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v46, v47))
            {
              uint64_t v48 = swift_slowAlloc();
              uint64_t v94 = swift_slowAlloc();
              aBlock[0] = v94;
              *(_DWORD *)uint64_t v48 = v92;
              swift_bridgeObjectRetain();
              uint64_t v122 = sub_100110D58(v97, v43, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v48 + 12) = 2080;
              uint64_t v49 = IdentityTarget.debugDescription.getter();
              uint64_t v122 = sub_100110D58(v49, v50, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v48 + 22) = 2080;
              uint64_t v51 = IdentityProofingActionStatus.debugDescription.getter();
              uint64_t v122 = sub_100110D58(v51, v52, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v29 = (uint64_t)v112;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v46, v47, "Storing the current proofing action status for proofingSessionID: %s and target: %s to: %s", (uint8_t *)v48, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*v110)(v109, v114);
            }
            else
            {
              swift_bridgeObjectRelease_n();

              (*v110)(v42, v114);
            }
            uint64_t v30 = v117;
          }
          uint64_t v53 = IdentityProofingActionStatus.rawValue.getter();
          id v54 = [v35 managedObjectContext];
          if (v54)
          {
            long long v55 = v54;
            uint64_t v56 = swift_allocObject();
            *(void *)(v56 + 16) = v35;
            *(void *)(v56 + 24) = v53;
            *(unsigned char *)(v56 + 32) = 0;
            uint64_t v57 = swift_allocObject();
            *(void *)(v57 + 16) = sub_100486348;
            *(void *)(v57 + 24) = v56;
            v121[2] = sub_1000E4EA0;
            v121[3] = v57;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            v121[0] = sub_100032314;
            v121[1] = &unk_100706410;
            long long v58 = _Block_copy(aBlock);
            long long v59 = v35;
            swift_retain();
            swift_release();
            [v55 performBlockAndWait:v58];

            _Block_release(v58);
            LOBYTE(v55) = swift_isEscapingClosureAtFileLocation();
            swift_release();
            swift_release();
            if (v55) {
              goto LABEL_49;
            }
          }
          uint64_t v60 = v111;
          defaultLogger()();
          id v35 = v35;
          uint64_t v61 = Logger.logObject.getter();
          os_log_type_t v62 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v61, v62))
          {
            uint64_t v63 = swift_slowAlloc();
            *(_DWORD *)uint64_t v63 = v96;
            *(void *)(v63 + 4) = [v35 proofingActionStatus];

            _os_log_impl((void *)&_mh_execute_header, v61, v62, "the current proofingActionStatus is %lld", (uint8_t *)v63, 0xCu);
            uint64_t v60 = v111;
            swift_slowDealloc();
          }
          else
          {

            uint64_t v61 = v35;
          }

          (*v110)(v60, v114);
          uint64_t v64 = v118;
          sub_1000FFAB4();
          if (v64)
          {
LABEL_18:
            swift_bridgeObjectRelease();

            return;
          }
          uint64_t v118 = 0;
          uint64_t v65 = IdentityTarget.rawValue.getter();
          if (v65 == IdentityTarget.rawValue.getter())
          {
            uint64_t v66 = type metadata accessor for TaskPriority();
            uint64_t v67 = *(void *)(v66 - 8);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v29, 1, 1, v66);
            uint64_t v68 = (void *)swift_allocObject();
            v68[2] = 0;
            uint64_t v69 = v68 + 2;
            uint64_t v70 = v107;
            v68[3] = 0;
            v68[4] = v70;
            int v71 = v119;
            v68[5] = v35;
            v68[6] = v71;
            int v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v29, 1, v66);
            int v73 = v35;
            swift_retain();
            if (v72 == 1)
            {
              sub_10000C6CC(v29, &qword_10071FEE0);
              if (*v69) {
                goto LABEL_35;
              }
LABEL_37:
              uint64_t v74 = 0;
              uint64_t v76 = 0;
            }
            else
            {
              TaskPriority.rawValue.getter();
              (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v29, v66);
              if (!*v69) {
                goto LABEL_37;
              }
LABEL_35:
              swift_getObjectType();
              swift_unknownObjectRetain();
              uint64_t v74 = dispatch thunk of Actor.unownedExecutor.getter();
              uint64_t v76 = v75;
              swift_unknownObjectRelease();
            }
            uint64_t v29 = (uint64_t)v112;
            id v31 = v116;
            uint64_t v30 = v117;
            uint64_t v77 = swift_allocObject();
            *(void *)(v77 + 16) = &unk_10072F958;
            *(void *)(v77 + 24) = v68;
            if (v76 | v74)
            {
              v121[4] = 0;
              v121[5] = 0;
              v121[6] = v74;
              v121[7] = v76;
            }
            uint64_t v33 = &stru_10071A000;
            swift_task_create();

            swift_release();
            goto LABEL_8;
          }

          id v31 = v116;
          uint64_t v33 = &stru_10071A000;
LABEL_8:
          ++v32;
          unint64_t v27 = v104;
          if (v115 == v101) {
            goto LABEL_43;
          }
        }
        uint64_t v40 = (uint64_t)v106;
        (*v102)((uint64_t)v106, 1, 1, v30);
        uint64_t v42 = v109;
        unint64_t v43 = v108;
LABEL_20:
        sub_10000C6CC(v40, &qword_1007239B0);
        goto LABEL_21;
      }
LABEL_43:
      swift_bridgeObjectRelease();
      uint64_t v88 = type metadata accessor for IdentityManagementSessionDelegate();
      id v89 = [self defaultCenter];
      NSString v90 = String._bridgeToObjectiveC()();
      aBlock[0] = v88;
      sub_100007764((uint64_t *)&unk_10072E590);
      [v89 postNotificationName:v90 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
    }
    else
    {
      defaultLogger()();
      unint64_t v78 = v108;
      swift_bridgeObjectRetain_n();
      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.debug.getter();
      BOOL v81 = os_log_type_enabled(v79, v80);
      uint64_t v82 = v97;
      uint64_t v83 = v115;
      if (v81)
      {
        uint64_t v84 = swift_slowAlloc();
        uint64_t v119 = v23;
        uint64_t v85 = v84;
        uint64_t v117 = swift_slowAlloc();
        aBlock[0] = v117;
        *(_DWORD *)uint64_t v85 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v122 = sub_100110D58(v82, v78, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v85 + 12) = 2080;
        uint64_t v86 = IdentityTarget.debugDescription.getter();
        uint64_t v122 = sub_100110D58(v86, v87, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Stored proofing session doesnt exist for proofingSessionID: %s and target: %s", (uint8_t *)v85, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v83 + 8))(v119, v114);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        (*(void (**)(char *, uint64_t))(v83 + 8))(v23, v114);
      }
    }
  }
}

uint64_t sub_100475CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_100025D64;
  return sub_100475D64(a5, a6);
}

uint64_t sub_100475D64(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  sub_100007764(&qword_100720A68);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v3[14] = v4;
  v3[15] = *(void *)(v4 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  return _swift_task_switch(sub_100475EB4, 0, 0);
}

uint64_t sub_100475EB4()
{
  uint64_t v85 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Watch only mode - will update status on the watch", v3, 2u);
    swift_slowDealloc();
  }
  long long v5 = (id *)(v0 + 8);
  uint64_t v4 = (void *)v0[8];
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[15];

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v0[22] = v9;
  v0[23] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v83 = v9;
  v9(v6, v7);
  id v10 = [v4 state];
  if (!v10)
  {
    uint64_t v28 = v0 + 17;
    defaultLogger()();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v29, v30)) {
      goto LABEL_15;
    }
    id v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v31 = 0;
    uint64_t v32 = "unable to update status on watch as state is nil";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v29, v30, v32, v31, 2u);
    swift_slowDealloc();
    goto LABEL_15;
  }
  uint64_t v11 = v10;
  id v12 = *v5;
  uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  id v15 = [v12 country];
  if (!v15)
  {
    uint64_t v28 = v0 + 18;
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v29, v30)) {
      goto LABEL_15;
    }
    id v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v31 = 0;
    uint64_t v32 = "unable to update status on watch as country is nil";
    goto LABEL_14;
  }
  uint64_t v16 = v15;
  uint64_t v17 = v0[10];
  uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  uint64_t v20 = IdentityProofingActionStatus.rawValue.getter();
  uint64_t v21 = *(void **)(v17 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_watchListener);
  v0[24] = v21;
  if (v21)
  {
    uint64_t v22 = v20;
    id v23 = *v5;
    v21;
    id v24 = [v23 credentialIdentifier];
    if (v24)
    {
      unint64_t v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v81 = v27;
    }
    else
    {
      uint64_t v26 = 0;
      unint64_t v81 = 0xE000000000000000;
    }
    id v37 = [*v5 productIdentifier];
    uint64_t v76 = v26;
    if (v37)
    {
      id v38 = v37;
      uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v73 = v39;
    }
    else
    {
      uint64_t v72 = 0;
      unint64_t v73 = 0xE000000000000000;
    }
    id v40 = [*v5 idType];
    uint64_t v79 = v22;
    if (v40)
    {
      int v41 = v40;
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = v43;
    }
    else
    {
      uint64_t v42 = 0;
      uint64_t v44 = 0;
    }
    uint64_t v45 = v0[13];
    uint64_t v46 = (void *)v0[8];
    uint64_t v78 = sub_10048C860(v42, v44);
    swift_bridgeObjectRelease();
    uint64_t v47 = type metadata accessor for URL();
    uint64_t v74 = *(void *)(v47 - 8);
    uint64_t v75 = v47;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 56))(v45, 1, 1);
    id v48 = [v46 extendedReviewURLString];
    if (v48)
    {
      uint64_t v49 = v48;
      uint64_t v51 = v0[12];
      uint64_t v50 = v0[13];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URL.init(string:)();
      swift_bridgeObjectRelease();
      sub_10000C6CC(v50, &qword_100720A68);
      sub_1000BEA14(v51, v50, &qword_100720A68);
    }
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v52 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.debug.getter();
    BOOL v53 = os_log_type_enabled(v52, type);
    uint64_t v54 = v0[20];
    uint64_t v55 = v0[14];
    if (v53)
    {
      uint64_t v70 = v0[14];
      unint64_t v77 = v19;
      uint64_t v56 = swift_slowAlloc();
      v84[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136316418;
      swift_bridgeObjectRetain();
      v0[2] = sub_100110D58(v82, v14, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v56 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[3] = sub_100110D58(v80, v77, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v56 + 22) = 2048;
      v0[4] = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v56 + 32) = 2080;
      swift_bridgeObjectRetain();
      v0[5] = sub_100110D58(v76, v81, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v56 + 42) = 2080;
      swift_bridgeObjectRetain();
      v0[6] = sub_100110D58(v72, v73, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v56 + 52) = 2048;
      v0[7] = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v52, type, "state %s country %s status %ld credentialIdentifier %s productIdentifier %s idType %ld", (uint8_t *)v56, 0x3Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v83(v54, v70);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      v83(v54, v55);
    }
    uint64_t v57 = v0[11];
    sub_100048D6C(v0[13], v57, &qword_100720A68);
    NSString v58 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v62 = String._bridgeToObjectiveC()();
    int v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v57, 1, v75);
    uint64_t v65 = 0;
    if (v63 != 1)
    {
      uint64_t v66 = v0[11];
      URL._bridgeToObjectiveC()(v64);
      uint64_t v65 = v67;
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v66, v75);
    }
    id v68 = [objc_allocWithZone((Class)PKIdentityProofingConfiguration) initWithState:v58 country:v59 target:2 credentialIdentifier:v60 status:v79 productIdentifier:v61 accountKeyIdentifier:v62 idType:v78 learnMoreURL:v65];
    v0[25] = v68;

    uint64_t v69 = (void *)swift_task_alloc();
    v0[26] = v69;
    void *v69 = v0;
    v69[1] = sub_1004768B8;
    return sub_100458F2C((uint64_t)v68);
  }
  uint64_t v28 = v0 + 19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  defaultLogger()();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    id v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v31 = 0;
    uint64_t v32 = "unable to update status on watch as listener is nil";
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v33 = *v28;
  uint64_t v34 = v0[14];

  v83(v33, v34);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v35 = (uint64_t (*)(void))v0[1];
  return v35();
}

uint64_t sub_1004768B8()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100476AB4;
  }
  else {
    os_log_type_t v2 = sub_1004769CC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004769CC()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 104);

  sub_10000C6CC(v2, &qword_100720A68);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100476AB4()
{
  uint64_t v2 = (void *)v0[24];
  uint64_t v1 = (void *)v0[25];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[22];
  uint64_t v4 = v0[16];
  uint64_t v6 = v0[13];
  uint64_t v5 = v0[14];
  defaultLogger()();
  DIPRecordError(_:message:log:)();

  swift_errorRelease();
  v3(v4, v5);
  sub_10000C6CC(v6, &qword_100720A68);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100476BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[91] = v4;
  v5[90] = a4;
  v5[89] = a3;
  v5[88] = a2;
  v5[87] = a1;
  uint64_t v6 = type metadata accessor for DIPError();
  v5[92] = v6;
  v5[93] = *(void *)(v6 - 8);
  v5[94] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v5[95] = v7;
  v5[96] = *(void *)(v7 - 8);
  v5[97] = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_100723978);
  v5[98] = swift_task_alloc();
  v5[99] = swift_task_alloc();
  v5[100] = swift_task_alloc();
  v5[101] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[102] = v8;
  v5[103] = *(void *)(v8 - 8);
  v5[104] = swift_task_alloc();
  v5[105] = swift_task_alloc();
  v5[106] = swift_task_alloc();
  v5[107] = swift_task_alloc();
  v5[108] = swift_task_alloc();
  v5[109] = swift_task_alloc();
  return _swift_task_switch(sub_100476DF8, 0, 0);
}

uint64_t sub_100476DF8()
{
  uint64_t v140 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  uint64_t v137 = v0;
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v132 = v0[102];
    uint64_t v134 = v0[109];
    uint64_t v129 = v0[103];
    unint64_t v3 = v0[89];
    uint64_t v4 = v0[88];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v138 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    swift_bridgeObjectRetain();
    v0[85] = sub_100110D58(v4, v3, &v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t v6 = IdentityTarget.debugDescription.getter();
    v0[86] = sub_100110D58(v6, v7, &v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Start provisioning called for proofingSessionID: %s and target: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
    v8(v134, v132);
  }
  else
  {
    uint64_t v9 = v0[109];
    uint64_t v10 = v0[103];
    uint64_t v11 = v0[102];

    swift_bridgeObjectRelease_n();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v8(v9, v11);
  }
  v0[110] = v8;
  uint64_t v12 = v0[101];
  uint64_t v13 = v0[87];
  sub_100478A8C(v0[88], v0[89], v13);
  sub_100048D6C(v13, v12, (uint64_t *)&unk_100723978);
  uint64_t v14 = type metadata accessor for PendingActionContext(0);
  id v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  int v16 = v15(v12, 1, v14);
  uint64_t v17 = (uint64_t *)v0[101];
  uint64_t v133 = v8;
  if (v16 == 1)
  {
    sub_10000C6CC((uint64_t)v17, (uint64_t *)&unk_100723978);
LABEL_9:
    char v130 = *(void (**)(uint64_t, void, uint64_t))(v0[96] + 104);
    v130(v0[97], enum case for DIPError.Code.provisioningCredentialIdentifierUnavailable(_:), v0[95]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10000C588();
    swift_allocError();
    goto LABEL_21;
  }
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  swift_bridgeObjectRetain();
  sub_1004863E0((uint64_t)v17, type metadata accessor for PendingActionContext);
  if (!v18) {
    goto LABEL_9;
  }
  uint64_t v20 = v0[100];
  sub_100048D6C(v0[87], v20, (uint64_t *)&unk_100723978);
  int v21 = v15(v20, 1, v14);
  uint64_t v22 = v0[100];
  if (v21 == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000C6CC(v22, (uint64_t *)&unk_100723978);
LABEL_14:
    char v130 = *(void (**)(uint64_t, void, uint64_t))(v0[96] + 104);
    v130(v0[97], enum case for DIPError.Code.targetInstanceIdentifierUnavailable(_:), v0[95]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10000C588();
    swift_allocError();
    goto LABEL_21;
  }
  uint64_t v135 = v19;
  uint64_t v23 = *(void *)(v22 + 24);
  uint64_t v131 = *(void *)(v22 + 16);
  swift_bridgeObjectRetain();
  sub_1004863E0(v22, type metadata accessor for PendingActionContext);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v24 = v0[99];
  sub_100048D6C(v0[87], v24, (uint64_t *)&unk_100723978);
  int v25 = v15(v24, 1, v14);
  uint64_t v26 = v0[99];
  if (v25 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v26, (uint64_t *)&unk_100723978);
LABEL_20:
    char v130 = *(void (**)(uint64_t, void, uint64_t))(v0[96] + 104);
    v130(v0[97], enum case for DIPError.Code.parterSchemeIdentifierUnavailable(_:), v0[95]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10000C588();
    swift_allocError();
    goto LABEL_21;
  }
  uint64_t v127 = *(void *)(v26 + 32);
  uint64_t v128 = v18;
  uint64_t v27 = *(void *)(v26 + 40);
  swift_bridgeObjectRetain();
  sub_1004863E0(v26, type metadata accessor for PendingActionContext);
  if (!v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v124 = v0 + 68;
  v0[68] = v135;
  v0[69] = v128;
  v0[70] = v131;
  v0[71] = v23;
  v0[72] = v127;
  v0[73] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = IdentityTarget.rawValue.getter();
  uint64_t v29 = IdentityTarget.rawValue.getter();
  uint64_t v126 = v23;
  unint64_t v30 = v0[89];
  uint64_t v31 = v0[88];
  if (v28 != v29)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10048CC34(v31, v30, 2, v124, v0 + 21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000BEA14((uint64_t)(v0 + 21), (uint64_t)(v0 + 31), &qword_10072F990);
    uint64_t v51 = v0[32];
    if (v51 != 1)
    {
      uint64_t v52 = v0[31];
      uint64_t v53 = v0[34];
      uint64_t v54 = v0[39];
      unint64_t v55 = v0[40];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000338D4(v54, v55);
      sub_10000C5E0(v54, v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v51)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000338D4(v54, v55);
        sub_10000C5E0(v54, v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v53)
        {
          swift_bridgeObjectRelease();
          sub_1002A8CD0();
          sub_1002A6F94(v52, v51);
          swift_bridgeObjectRelease();
          swift_release();
          sub_10048FFB8(v0 + 21, sub_10048FF38);
          goto LABEL_22;
        }
        swift_bridgeObjectRelease();
      }
      sub_10048FFB8(v0 + 21, sub_10048FF38);
    }
    uint64_t v71 = v0[97];
    uint64_t v72 = v0[96];
    uint64_t v73 = v0[95];
    uint64_t v74 = (void *)v0[89];
    uint64_t v75 = v0[88];
    uint64_t v138 = 0;
    unint64_t v139 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v76._uint64_t countAndFlagsBits = 0xD000000000000032;
    v76._object = (void *)0x800000010064EBA0;
    String.append(_:)(v76);
    v77._uint64_t countAndFlagsBits = v75;
    v77._object = v74;
    String.append(_:)(v77);
    char v130 = *(void (**)(uint64_t, void, uint64_t))(v72 + 104);
    v130(v71, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v73);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10000C588();
    swift_allocError();
LABEL_21:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v34 = v0[97];
    uint64_t v35 = v0[95];
    swift_willThrow();
    sub_100007764((uint64_t *)&unk_1007225C0);
    id v36 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v37 = (*(unsigned __int8 *)(*(void *)v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v36 + 80);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_100610730;
    unint64_t v39 = v38 + v37;
    id v40 = (void *)(v39 + v36[14]);
    uint64_t v41 = enum case for DIPError.PropertyKey.inoProviderID(_:);
    uint64_t v42 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104))(v39, v41, v42);
    v40[3] = &type metadata for String;
    *id v40 = 0x61746E6567616DLL;
    v40[1] = 0xE700000000000000;
    sub_10015C504(v38);
    v130(v34, enum case for DIPError.Code.internalError(_:), v35);
    swift_errorRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v0 = v137;
    uint64_t v43 = v137[104];
    uint64_t v44 = v137[102];
    uint64_t v45 = v137[94];
    uint64_t v46 = v137[93];
    uint64_t v47 = v137[92];
    type metadata accessor for DaemonAnalytics();
    static DaemonAnalytics.sendIdentityProvisioningAttemptedEvent(workflowID:trigger:target:wasSuccessful:)();
    swift_bridgeObjectRelease();
    sub_10000C588();
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v48, v45, v47);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    v133(v43, v44);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    swift_errorRelease();
LABEL_22:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v49 = (uint64_t (*)(void))v0[1];
    return v49();
  }
  sub_10048CC34(v0[88], v0[89], 1, v124, v0 + 51);
  uint64_t v32 = v0[59];
  unint64_t v122 = v0[60];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v123 = v0 + 51;
  sub_1000BEA14((uint64_t)(v0 + 51), (uint64_t)(v0 + 41), &qword_10072F990);
  uint64_t v33 = v0[42];
  if (v33 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_42:
    uint64_t v78 = v0[97];
    uint64_t v79 = v0[96];
    uint64_t v80 = v0[95];
    unint64_t v81 = (void *)v0[89];
    uint64_t v82 = v0[88];
    uint64_t v138 = 0;
    unint64_t v139 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v83._uint64_t countAndFlagsBits = 0xD000000000000032;
    v83._object = (void *)0x800000010064EBE0;
    String.append(_:)(v83);
    v84._uint64_t countAndFlagsBits = v82;
    v84._object = v81;
    String.append(_:)(v84);
    char v130 = *(void (**)(uint64_t, void, uint64_t))(v79 + 104);
    v130(v78, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v80);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10000C588();
    swift_allocError();
    goto LABEL_21;
  }
  uint64_t v119 = v27;
  uint64_t v117 = v32;
  uint64_t v118 = v0[41];
  uint64_t v56 = v0[44];
  uint64_t v57 = v0[48];
  v0[111] = v0[47];
  uint64_t v125 = v33;
  uint64_t v58 = v0[49];
  unint64_t v59 = v0[50];
  v0[112] = v57;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000338D4(v58, v59);
  uint64_t v120 = v58;
  unint64_t v121 = v59;
  sub_10000C5E0(v58, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v33)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10048FFB8(v123, sub_10048FF38);
    goto LABEL_42;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000338D4(v58, v59);
  sub_10000C5E0(v58, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v56)
  {
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  uint64_t v60 = v0[91];
  swift_bridgeObjectRelease();
  id v61 = *(id *)(v60 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_deviceInfo);
  uint64_t v62 = sub_1004E7C64();
  uint64_t v64 = v63;
  sub_10013FEE4(v62, v63);
  if (v64 == 1) {
    sub_1004E995C();
  }
  uint64_t v65 = sub_1004E7C64();
  unint64_t v67 = v66;

  if (v67 < 2)
  {
    sub_10013FEE4(v65, v67);
    uint64_t v65 = 0;
    unint64_t v67 = 0xE000000000000000;
  }
  uint64_t v68 = v0[98];
  sub_100048D6C(v0[87], v68, (uint64_t *)&unk_100723978);
  int v69 = v15(v68, 1, v14);
  uint64_t v70 = v0[98];
  if (v69 == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000C6CC(v70, (uint64_t *)&unk_100723978);
LABEL_49:
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    unint64_t v91 = 0xF000000000000000;
    uint64_t v116 = 1;
    goto LABEL_50;
  }
  uint64_t v85 = *(void *)(v70 + *(int *)(v14 + 76));
  swift_bridgeObjectRetain();
  sub_1004863E0(v70, type metadata accessor for PendingActionContext);
  if (!v85)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  if (!*(void *)(v85 + 16) || (unint64_t v86 = sub_100590548(v65, v67), (v87 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  uint64_t v88 = (uint64_t *)(*(void *)(v85 + 56) + 24 * v86);
  uint64_t v89 = *v88;
  uint64_t v90 = v88[1];
  unint64_t v91 = v88[2];
  sub_10002CEB0(v90, v91);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v116 = v89;
LABEL_50:
  unint64_t v92 = v91;
  v0[115] = v91;
  uint64_t v93 = v90;
  v0[114] = v90;
  uint64_t v94 = v89;
  v0[113] = v89;
  defaultLogger()();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000338D4(v117, v122);
  uint64_t v95 = Logger.logObject.getter();
  os_log_type_t v96 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v97 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v97 = 67109120;
    *((_DWORD *)v0 + 242) = v121 >> 60 != 15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10048FFB8(v123, sub_10048FF38);
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "supplementalProvisioningData for phone exists ->%{BOOL}d", v97, 8u);
    uint64_t v98 = v0 + 51;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v98 = v0 + 51;
    sub_10048FFB8(v123, sub_10048FF38);
  }
  uint64_t v99 = v0[108];
  uint64_t v100 = v0[103];
  uint64_t v101 = v0[102];

  v0[116] = (v100 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v133(v99, v101);
  if (v92 >> 60 == 15) {
    uint64_t v102 = 0;
  }
  else {
    uint64_t v102 = v93;
  }
  if (v92 >> 60 == 15) {
    unint64_t v103 = 0xF000000000000000;
  }
  else {
    unint64_t v103 = v92;
  }
  sub_10048FFB8(v98, sub_10049000C);
  sub_10049008C(v94, v93, v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_10071F498 != -1) {
    swift_once();
  }
  unint64_t v104 = *(void **)(qword_100760290 + 16);
  v0[19] = sub_1004900A8();
  v0[20] = &off_100706ED8;
  v0[16] = v104;
  v0[2] = v118;
  v0[3] = v125;
  v0[4] = v135;
  v0[5] = v128;
  v0[6] = v127;
  v0[7] = v119;
  v0[8] = v131;
  v0[9] = v126;
  v0[10] = v116;
  *((unsigned char *)v0 + 88) = 0;
  v0[12] = v102;
  v0[13] = v103;
  v0[14] = v120;
  v0[15] = v121;
  v0[77] = &type metadata for IdentityPhoneProvisioningProvider;
  v0[78] = &off_1006F9040;
  uint64_t v105 = swift_allocObject();
  v0[74] = v105;
  sub_100490170((uint64_t)(v0 + 2), v105 + 16);
  type metadata accessor for IdentityProvisioningManager();
  v0[117] = swift_initStackObject();
  id v106 = v104;
  v0[118] = sub_1004DEDFC((uint64_t)(v0 + 74));
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v107 = Logger.logObject.getter();
  os_log_type_t v108 = static os_log_type_t.default.getter();
  BOOL v109 = os_log_type_enabled(v107, v108);
  uint64_t v110 = v0[107];
  uint64_t v111 = v0[102];
  unint64_t v112 = v0[89];
  if (v109)
  {
    uint64_t v113 = v0[88];
    uint64_t v136 = v137[102];
    uint64_t v114 = (uint8_t *)swift_slowAlloc();
    uint64_t v138 = swift_slowAlloc();
    *(_DWORD *)uint64_t v114 = 136315138;
    swift_bridgeObjectRetain();
    v137[84] = sub_100110D58(v113, v112, &v138);
    uint64_t v0 = v137;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "Trying to provision phone with proofingSessionID: %s", v114, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v133(v110, v136);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v133(v110, v111);
  }
  uint64_t v115 = (void *)swift_task_alloc();
  v0[119] = v115;
  *uint64_t v115 = v0;
  v115[1] = sub_10047844C;
  return sub_1004DF088();
}

uint64_t sub_10047844C()
{
  *(void *)(*(void *)v1 + 960) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100478804;
  }
  else {
    os_log_type_t v2 = sub_100478560;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100478560()
{
  uint64_t v1 = *(void *)(v0[91] + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_userNotificationProvider);
  swift_retain();
  defaultLogger()();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Attempting to clear the user notifications after provisioning completion", v4, 2u);
    swift_slowDealloc();
  }
  unint64_t v16 = v0[115];
  uint64_t v15 = v0[114];
  uint64_t v14 = v0[113];
  uint64_t v5 = v0[112];
  uint64_t v6 = v0[111];
  unint64_t v7 = (void (*)(uint64_t, uint64_t))v0[110];
  uint64_t v8 = v0[106];
  uint64_t v9 = v0[102];

  v7(v8, v9);
  sub_100030A10(v1 + 16, (uint64_t)(v0 + 79));
  uint64_t v10 = v0[82];
  uint64_t v11 = v0[83];
  sub_10000C728(v0 + 79, v10);
  (*(void (**)(uint64_t, uint64_t, void, void, void, void, void, uint64_t (*)(uint64_t), void, uint64_t, uint64_t))(v11 + 8))(v6, v5, 0, 0, 0, 0, 0, sub_10051B830, 0, v10, v11);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 79));
  swift_release();
  swift_release();
  sub_1004901CC(v14, v15, v16);
  sub_10048FFB8(v0 + 51, sub_10048FF38);
  sub_1004901E8((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100478804()
{
  swift_errorRetain();
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received a terminal state error from Wallet. Will clear the proofing session data", v3, 2u);
    swift_slowDealloc();
  }
  unint64_t v14 = v0[115];
  uint64_t v13 = v0[114];
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[110];
  uint64_t v5 = v0[105];
  uint64_t v6 = v0[104];
  uint64_t v7 = v0[102];
  uint64_t v11 = v0[89];
  uint64_t v12 = v0[113];
  uint64_t v8 = v0[88];

  v4(v5, v7);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v4(v6, v7);
  swift_retain();
  sub_100438B00(v8, v11, 0, 0, 0, 1);
  swift_release();
  swift_errorRelease();
  swift_release();
  sub_1004901CC(v12, v13, v14);
  sub_10048FFB8(v0 + 51, sub_10048FF38);
  swift_errorRelease();
  sub_1004901E8((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100478A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v5 = sub_100007764((uint64_t *)&unk_100723978);
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v24 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v25 = (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - v10;
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Will attempt to store the provisioning data in case there is a provisioning failure.", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v16 = v15;
  uint64_t v23 = v7;
  uint64_t v17 = a3;
  uint64_t v18 = v25;
  sub_100048D6C(v17, v25, (uint64_t *)&unk_100723978);
  unint64_t v19 = (*(unsigned __int8 *)(v24 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v20 = (void *)swift_allocObject();
  _OWORD v20[2] = v16;
  v20[3] = a1;
  uint64_t v21 = v27;
  v20[4] = v26;
  v20[5] = v21;
  sub_1000BEA14(v18, (uint64_t)v20 + v19, (uint64_t *)&unk_100723978);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_10048C790, (uint64_t)v20);
  swift_release();
  return swift_release();
}

void sub_100478DA8(void (**a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v128 = a1;
  uint64_t v119 = a5;
  uint64_t v120 = a4;
  uint64_t v112 = type metadata accessor for DispatchQoS();
  unint64_t v125 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v111 = (char *)v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v124 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  BOOL v109 = (char *)v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007764((uint64_t *)&unk_100723978);
  uint64_t v101 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v102 = v10;
  uint64_t v126 = (char *)v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for Logger();
  uint64_t v123 = *(void *)(v127 - 8);
  uint64_t v11 = __chkstk_darwin(v127);
  os_log_type_t v108 = (char *)v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v113 = (char *)v97 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v97 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v97 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v97 - v21;
  uint64_t v23 = type metadata accessor for DIPError.Code();
  unint64_t v122 = *(NSObject **)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (void *)a3;
  uint64_t v27 = v129;
  sub_1001002FC(a2, a3);
  if (!v27)
  {
    uint64_t v29 = v28;
    uint64_t v128 = (void (**)(char *, uint64_t))v23;
    uint64_t v129 = v25;
    uint64_t v100 = v26;
    unint64_t v121 = v22;
    uint64_t v116 = v20;
    uint64_t v115 = v17;
    uint64_t v118 = a2;
    if (v28)
    {
      v97[1] = 0;
      if (v28 >> 62) {
        goto LABEL_48;
      }
      uint64_t v30 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        uint64_t v32 = v119;
        uint64_t v31 = v120;
        uint64_t v34 = (uint64_t)v126;
        uint64_t v33 = v127;
        uint64_t v35 = v121;
        unint64_t v36 = v125;
        if (!v30) {
          break;
        }
        uint64_t v106 = OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_deviceInfo;
        unint64_t v125 = v29 & 0xC000000000000001;
        uint64_t v128 = (void (**)(char *, uint64_t))(v123 + 8);
        uint64_t v105 = OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_watchListener;
        uint64_t v117 = &v132;
        uint64_t v99 = (void (**)(char *, uint64_t))(v36 + 8);
        uint64_t v98 = (void (**)(char *, uint64_t))(v124 + 8);
        uint64_t v37 = 4;
        *((void *)&v38 + 1) = 1;
        long long v114 = xmmword_100611090;
        *(void *)&long long v38 = 136315138;
        long long v104 = v38;
        unint64_t v103 = (char *)&type metadata for Any + 8;
        uint64_t v39 = v118;
        uint64_t v123 = v30;
        uint64_t v124 = v29;
        while (1)
        {
          id v40 = v125 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v29 + 8 * v37);
          uint64_t v29 = (uint64_t)v40;
          if (__OFADD__(v37 - 4, 1)) {
            break;
          }
          uint64_t v129 = (char *)(v37 - 3);
          [v40 target];
          IdentityTarget.init(rawValue:)();
          if (v41)
          {
            defaultLogger()();
            id v52 = (id)v29;
            uint64_t v53 = Logger.logObject.getter();
            os_log_type_t v54 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v53, v54))
            {
              uint64_t v55 = swift_slowAlloc();
              uint64_t aBlock = swift_slowAlloc();
              *(_DWORD *)uint64_t v55 = v104;
              id v56 = [v52 proofingSessionID];
              if (v56)
              {
                uint64_t v57 = v56;
                uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v60 = v59;
              }
              else
              {
                uint64_t v58 = 0;
                unint64_t v60 = 0xE000000000000000;
              }
              *(void *)(v55 + 4) = sub_100110D58(v58, v60, &aBlock);
              swift_bridgeObjectRelease();

              _os_log_impl((void *)&_mh_execute_header, v53, v54, "unable to retrieve the target information from the proofing session with proofingSessionID -> %s", (uint8_t *)v55, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v33 = v127;
              uint64_t v35 = v121;
              (*v128)(v121, v127);
              uint64_t v39 = v118;
              uint64_t v32 = v119;
              uint64_t v31 = v120;
            }
            else
            {

              (*v128)(v35, v33);
            }
            uint64_t v34 = (uint64_t)v126;
          }
          else
          {
            unint64_t v122 = v29;
            uint64_t v42 = IdentityTarget.rawValue.getter();
            if (v42 == IdentityTarget.rawValue.getter())
            {
              defaultLogger()();
              uint64_t v43 = Logger.logObject.getter();
              os_log_type_t v44 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v43, v44))
              {
                uint64_t v45 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v45 = 0;
                _os_log_impl((void *)&_mh_execute_header, v43, v44, "Attempting to store the provisioning information for the watch target", v45, 2u);
                uint64_t v33 = v127;
                swift_slowDealloc();
              }

              uint64_t v46 = *v128;
              (*v128)(v116, v33);
              uint64_t v47 = *(void **)(v31 + v105);
              if (v47)
              {
                id v90 = v47;
                swift_bridgeObjectRelease();
                sub_100048D6C(v32, v34, (uint64_t *)&unk_100723978);
                unint64_t v91 = (*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
                unint64_t v92 = (v102 + v91 + 7) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v93 = swift_allocObject();
                *(void *)(v93 + 16) = v90;
                *(void *)(v93 + 24) = v31;
                sub_1000BEA14(v34, v93 + v91, (uint64_t *)&unk_100723978);
                uint64_t v94 = (uint64_t *)(v93 + v92);
                uint64_t v95 = (uint64_t)v100;
                *uint64_t v94 = v39;
                v94[1] = v95;
                id v96 = v90;
                swift_retain();
                swift_bridgeObjectRetain();
                runAsyncAndBlock<A>(timeout:file:function:line:_:)();

                swift_release();
                return;
              }
              defaultLogger()();
              uint64_t v48 = Logger.logObject.getter();
              os_log_type_t v49 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v48, v49))
              {
                uint64_t v50 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v50 = 0;
                _os_log_impl((void *)&_mh_execute_header, v48, v49, "Unable to retrieve watch listener. Cannot Store watch provisioning data.", v50, 2u);
                uint64_t v33 = v127;
                swift_slowDealloc();
                uint64_t v51 = v122;
              }
              else
              {
                uint64_t v51 = v48;
                uint64_t v48 = v122;
              }

              v46(v115, v33);
            }
            else
            {
              id v61 = v113;
              defaultLogger()();
              uint64_t v62 = Logger.logObject.getter();
              os_log_type_t v63 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v62, v63))
              {
                uint64_t v64 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v64 = 0;
                _os_log_impl((void *)&_mh_execute_header, v62, v63, "Attempting to store the provisioning information for the phone target", v64, 2u);
                uint64_t v33 = v127;
                swift_slowDealloc();
              }

              uint64_t v107 = *v128;
              v107(v61, v33);
              uint64_t v65 = *(char **)(v31 + v106);
              long long v136 = v114;
              char v138 = 0;
              int v137 = 0;
              uint64_t v66 = OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_seInfoQueue;
              unint64_t v67 = *(NSObject **)&v65[OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_seInfoQueue];
              uint64_t v29 = swift_allocObject();
              *(void *)(v29 + 16) = &v136;
              *(void *)(v29 + 24) = v65;
              uint64_t v68 = swift_allocObject();
              *(void *)(v68 + 16) = sub_10048C838;
              *(void *)(v68 + 24) = v29;
              uint64_t v134 = sub_10020AE08;
              uint64_t v135 = v68;
              uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
              unint64_t v131 = 1107296256;
              uint64_t v132 = sub_100032314;
              uint64_t v133 = &unk_100706568;
              int v69 = _Block_copy(&aBlock);
              uint64_t v70 = v65;
              swift_retain();
              swift_release();
              dispatch_sync(v67, v69);
              _Block_release(v69);
              LOBYTE(v67) = swift_isEscapingClosureAtFileLocation();
              swift_release();
              if (v67) {
                goto LABEL_46;
              }
              long long v71 = v136;
              swift_release();
              sub_10013FEE4(v71, *((uint64_t *)&v71 + 1));
              if (*((void *)&v71 + 1) == 1)
              {
                uint64_t v72 = v109;
                static DispatchWorkItemFlags.barrier.getter();
                uint64_t v73 = swift_allocObject();
                *(void *)(v73 + 16) = v70;
                uint64_t v134 = sub_10048E134;
                uint64_t v135 = v73;
                uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
                unint64_t v131 = 1107296256;
                uint64_t v132 = sub_100593800;
                uint64_t v133 = &unk_100706630;
                uint64_t v74 = _Block_copy(&aBlock);
                uint64_t v75 = v70;
                Swift::String v76 = v111;
                static DispatchQoS.unspecified.getter();
                OS_dispatch_queue.async(group:qos:flags:execute:)();
                _Block_release(v74);
                (*v99)(v76, v112);
                (*v98)(v72, v110);
                swift_release();
              }
              long long v136 = v114;
              char v138 = 0;
              int v137 = 0;
              Swift::String v77 = *(NSObject **)&v65[v66];
              uint64_t v29 = swift_allocObject();
              *(void *)(v29 + 16) = &v136;
              *(void *)(v29 + 24) = v70;
              uint64_t v78 = swift_allocObject();
              *(void *)(v78 + 16) = sub_100490678;
              *(void *)(v78 + 24) = v29;
              uint64_t v134 = sub_10020AE08;
              uint64_t v135 = v78;
              uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
              unint64_t v131 = 1107296256;
              uint64_t v132 = sub_100032314;
              uint64_t v133 = &unk_1007065E0;
              uint64_t v79 = _Block_copy(&aBlock);
              uint64_t v80 = v70;
              swift_retain();
              swift_release();
              dispatch_sync(v77, v79);
              _Block_release(v79);
              LOBYTE(v77) = swift_isEscapingClosureAtFileLocation();
              swift_release();
              if (v77) {
                goto LABEL_47;
              }
              long long v81 = v136;
              swift_release();

              if (*((void *)&v81 + 1) >= 2uLL)
              {
                uint64_t v39 = v118;
                uint64_t v32 = v119;
                sub_10048D788(v81, *((unint64_t *)&v81 + 1), v119, 1, v118, (uint64_t)v100);
                sub_10013FEE4(v81, *((uint64_t *)&v81 + 1));

                uint64_t v31 = v120;
                uint64_t v34 = (uint64_t)v126;
                uint64_t v33 = v127;
              }
              else
              {
                uint64_t v82 = v108;
                defaultLogger()();
                Swift::String v83 = Logger.logObject.getter();
                os_log_type_t v84 = static os_log_type_t.debug.getter();
                BOOL v85 = os_log_type_enabled(v83, v84);
                uint64_t v32 = v119;
                uint64_t v31 = v120;
                if (v85)
                {
                  unint64_t v86 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)unint64_t v86 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v83, v84, "Unable to retrieve the seid of the phone. Cannot store the provisioning identifiers", v86, 2u);
                  swift_slowDealloc();
                  char v87 = v122;
                }
                else
                {
                  char v87 = v83;
                  Swift::String v83 = v122;
                }
                uint64_t v39 = v118;
                uint64_t v34 = (uint64_t)v126;
                uint64_t v33 = v127;

                v107(v82, v33);
              }
            }
            uint64_t v35 = v121;
          }
          ++v37;
          uint64_t v29 = v124;
          if (v129 == (char *)v123) {
            goto LABEL_41;
          }
        }
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_41:
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t aBlock = 0;
      unint64_t v131 = 0xE000000000000000;
      _StringGuts.grow(_:)(96);
      v88._uint64_t countAndFlagsBits = 0xD00000000000005ELL;
      v88._object = (void *)0x800000010064EA00;
      String.append(_:)(v88);
      v89._uint64_t countAndFlagsBits = v118;
      v89._object = v100;
      String.append(_:)(v89);
      ((void (*)(char *, void, void (**)(char *, uint64_t)))v122[13].isa)(v129, enum case for DIPError.Code.internalError(_:), v128);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

uint64_t sub_100479D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[5] = v7;
  v6[6] = *(void *)(v7 - 8);
  v6[7] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v6[8] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_100479E90;
  return sub_1004595CC();
}

uint64_t sub_100479E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *v3;
  *(void *)(v4 + 72) = a1;
  *(void *)(v4 + 80) = a2;
  swift_task_dealloc();
  if (v2)
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    return _swift_task_switch(sub_100479FE0, 0, 0);
  }
}

uint64_t sub_100479FE0()
{
  if (v0[10])
  {
    sub_10048D788(v0[9], v0[10], v0[2], 2, v0[3], v0[4]);
    swift_bridgeObjectRelease();
  }
  else
  {
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to fetch the SEID from the watch, will not be able to save watch provisioning data", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[6];
    uint64_t v4 = v0[7];
    uint64_t v6 = v0[5];

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

void sub_10047A110(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13)
{
  uint64_t v51 = a7;
  id v52 = a8;
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v42 - v22;
  sub_10010096C(a2, a3);
  if (!v13)
  {
    uint64_t v47 = v17;
    uint64_t v48 = 0;
    uint64_t v43 = v21;
    uint64_t v44 = a2;
    uint64_t v45 = a4;
    uint64_t v46 = v18;
    if (v24)
    {
      uint64_t v25 = v24;
      StoredProofingSession.update(provisioningCredentialIdentifier:targetInstanceIdentifier:partnerSchemeIdentifier:serverAttestedProvisioningData:issuerCurrentCredentialCapacity:)(v49, v50, v51, (uint64_t)v52, a9, a10, a11, a12, a13);
      uint64_t v26 = v48;
      sub_1000FFAB4();
      if (v26)
      {
      }
      else
      {
        id v52 = v25;
        uint64_t v32 = v43;
        defaultLogger()();
        unint64_t v33 = a3;
        swift_bridgeObjectRetain_n();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.debug.getter();
        BOOL v36 = os_log_type_enabled(v34, v35);
        uint64_t v38 = v46;
        uint64_t v37 = v47;
        if (v36)
        {
          uint64_t v39 = swift_slowAlloc();
          uint64_t v51 = swift_slowAlloc();
          uint64_t v54 = v51;
          *(_DWORD *)uint64_t v39 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v53 = sub_100110D58(v44, v33, &v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v39 + 12) = 2080;
          uint64_t v40 = IdentityTarget.debugDescription.getter();
          uint64_t v53 = sub_100110D58(v40, v41, &v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Successfully saved provisioning identifiers for %s and target %s", (uint8_t *)v39, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v47);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v37);
        }
      }
    }
    else
    {
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v53 = sub_100110D58(v44, a3, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v29 + 12) = 2080;
        uint64_t v30 = IdentityTarget.debugDescription.getter();
        uint64_t v53 = sub_100110D58(v30, v31, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unable to find proofing session with proofingSessionID %s for target %s. Will not save provisioning identifiers", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v46 + 8))(v23, v47);
    }
  }
}

void sub_10047A5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, Swift::String_optional *a8, void *a9)
{
  uint64_t v135 = a8;
  uint64_t v139 = a7;
  uint64_t v137 = a6;
  uint64_t v133 = a5;
  uint64_t v146 = a1;
  uint64_t v129 = type metadata accessor for DIPError.Code();
  uint64_t v128 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  char v130 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for DIPError();
  uint64_t v132 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v134 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for Logger();
  uint64_t v138 = *(void *)(v140 - 8);
  uint64_t v14 = __chkstk_darwin(v140);
  uint64_t v16 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v115 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v115 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v115 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v115 - v26;
  uint64_t v136 = a2;
  uint64_t v28 = v141;
  sub_10010096C(a2, a3);
  if (v28) {
    return;
  }
  unint64_t v125 = v27;
  uint64_t v123 = v19;
  uint64_t v141 = 0;
  uint64_t v126 = v25;
  uint64_t v127 = a4;
  uint64_t v124 = v16;
  unint64_t v30 = a3;
  uint64_t v31 = v139;
  if (!v29) {
    goto LABEL_9;
  }
  uint64_t v32 = v29;
  id v33 = [v29 credentialIdentifier];
  if (!v33)
  {

LABEL_9:
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = swift_slowAlloc();
      uint64_t v145 = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = IdentityTarget.debugDescription.getter();
      uint64_t v144 = sub_100110D58(v54, v55, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v144 = sub_100110D58(v136, v30, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unable to retrieve proofing session for target: %s, proofingSessionID: %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v138 + 8))(v22, v140);
    return;
  }
  uint64_t v34 = v33;
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;

  id v38 = [v32 workflowID];
  if (!v38)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v39 = v38;
  uint64_t v118 = v35;
  uint64_t v119 = v37;
  id v122 = v32;
  uint64_t v40 = v133;
  uint64_t v121 = v137 + 16;
  uint64_t v120 = v31 + 16;
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;

  swift_beginAccess();
  uint64_t v117 = v41;
  v40[2] = v41;
  v40[3] = v43;
  uint64_t v116 = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v125;
  defaultLogger()();
  unint64_t v45 = v30;
  swift_bridgeObjectRetain_n();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = swift_slowAlloc();
    uint64_t v144 = swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 136315394;
    uint64_t v133 = (void *)(v48 + 4);
    uint64_t v49 = IdentityTarget.debugDescription.getter();
    v143[0] = sub_100110D58(v49, v50, &v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v48 + 12) = 2080;
    swift_bridgeObjectRetain();
    v143[0] = sub_100110D58(v136, v30, &v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Successfully fetched proofing session for target: %s, proofingSesionID: %s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v133 = *(void **)(v138 + 8);
  ((void (*)(char *, uint64_t))v133)(v44, v140);
  id v56 = v135;
  swift_beginAccess();
  uint64_t v57 = v137;
  uint64_t v58 = v119;
  *(void *)(v137 + 16) = v118;
  *(void *)(v57 + 24) = v58;
  swift_bridgeObjectRelease();
  uint64_t v59 = IdentityTarget.rawValue.getter();
  uint64_t v60 = IdentityTarget.rawValue.getter();
  id v61 = v126;
  if (v59 == v60)
  {
    id v62 = [v122 pairingID];
    if (v62)
    {
      os_log_type_t v63 = v62;
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v66 = v65;
    }
    else
    {
      uint64_t v64 = 0;
      uint64_t v66 = 0;
    }
    swift_beginAccess();
    uint64_t v67 = v139;
    *(void *)(v139 + 16) = v64;
    *(void *)(v67 + 24) = v66;
    swift_bridgeObjectRelease();
    id v56 = v135;
  }
  StoredProofingSession.update(_:_:_:)(*v56, v56[1], v56[2]);
  uint64_t v68 = v141;
  sub_1000FFAB4();
  if (v68)
  {
    v143[0] = 0;
    v143[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v69._object = (void *)0x800000010064EC70;
    v69._uint64_t countAndFlagsBits = 0xD000000000000040;
    String.append(_:)(v69);
    uint64_t v142 = v68;
    sub_100007764((uint64_t *)&unk_100723450);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, void, uint64_t))(v128 + 104))(v130, enum case for DIPError.Code.unableToSaveProvisioningIdentifiers(_:), v129);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v70 = v134;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C588();
    uint64_t v71 = v131;
    swift_allocError();
    uint64_t v72 = v132;
    (*(void (**)(uint64_t, char *, uint64_t))(v132 + 16))(v73, v70, v71);
    uint64_t v74 = v123;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    ((void (*)(char *, uint64_t))v133)(v74, v140);
    swift_errorRelease();
    uint64_t v75 = v124;
    defaultLogger()();
    Swift::String v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Ignoring the error and continuing the provisioning flow", v78, 2u);
      uint64_t v72 = v132;
      swift_slowDealloc();
    }
    swift_errorRelease();

    ((void (*)(char *, uint64_t))v133)(v75, v140);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v134, v71);
  }
  else
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v79 = v61;
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.default.getter();
    int v82 = v81;
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v83 = swift_slowAlloc();
      LODWORD(v146) = v82;
      uint64_t v84 = v83;
      v143[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v84 = 136315394;
      uint64_t v85 = IdentityTarget.debugDescription.getter();
      uint64_t v142 = sub_100110D58(v85, v86, v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v84 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v142 = sub_100110D58(v136, v45, v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v146, "Successfully updated provisioning identifiers for target: %s, proofingSesionID: %s", (uint8_t *)v84, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      char v87 = v126;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      char v87 = v79;
    }
    ((void (*)(char *, uint64_t))v133)(v87, v140);
  }
  uint64_t v88 = v137;
  uint64_t v140 = (uint64_t)(a9 + 2);
  swift_beginAccess();
  uint64_t v90 = *(void *)(v88 + 16);
  uint64_t v89 = *(void *)(v88 + 24);
  swift_beginAccess();
  uint64_t v92 = *(void *)(v139 + 16);
  uint64_t v91 = *(void *)(v139 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v93 = [v122 productIdentifier];
  uint64_t v146 = v90;
  uint64_t v141 = v92;
  if (v93)
  {
    uint64_t v94 = v93;
    uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v96 = v95;
  }
  else
  {
    uint64_t v139 = 0;
    uint64_t v96 = 0;
  }
  id v97 = v122;
  id v98 = [v122 supplementalProvisioningData];
  if (v98)
  {
    uint64_t v99 = v98;
    uint64_t v100 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v102 = v101;
  }
  else
  {

    uint64_t v100 = 0;
    unint64_t v102 = 0xF000000000000000;
  }
  uint64_t v103 = v117;
  uint64_t v104 = v116;
  swift_beginAccess();
  uint64_t v105 = a9[2];
  uint64_t v106 = a9[3];
  uint64_t v107 = a9[4];
  uint64_t v108 = a9[5];
  uint64_t v109 = a9[6];
  uint64_t v110 = a9[7];
  uint64_t v111 = a9[8];
  uint64_t v112 = a9[9];
  uint64_t v113 = a9[10];
  unint64_t v114 = a9[11];
  a9[2] = v146;
  a9[3] = v89;
  a9[4] = v103;
  a9[5] = v104;
  a9[6] = v141;
  a9[7] = v91;
  a9[8] = v139;
  a9[9] = v96;
  a9[10] = v100;
  a9[11] = v102;
  sub_10048FF38(v105, v106, v107, v108, v109, v110, v111, v112, v113, v114);
}

uint64_t sub_10047B3F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v344 = a4;
  unint64_t v346 = a3;
  uint64_t v336 = a2;
  uint64_t v7 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v7 - 8);
  v273 = (char *)v263 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007764(&qword_100722C18);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v302 = (uint64_t)v263 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v327 = (uint64_t)v263 - v12;
  uint64_t v13 = sub_100007764((uint64_t *)&unk_100723978);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v301 = (uint64_t)v263 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v278 = (uint64_t)v263 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v292 = (uint64_t)v263 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v326 = (uint64_t)v263 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v300 = (uint64_t)v263 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v299 = (char *)v263 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v277 = (uint64_t)v263 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v276 = (uint64_t)v263 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v298 = (uint64_t)v263 - v31;
  __chkstk_darwin(v30);
  id v33 = (char *)v263 - v32;
  uint64_t v345 = type metadata accessor for Logger();
  v343 = *(void (***)(char *, uint64_t))(v345 - 8);
  uint64_t v34 = __chkstk_darwin(v345);
  v325 = (char *)v263 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v34);
  v313 = (char *)v263 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v324 = (char *)v263 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v323 = (char *)v263 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v272 = (char *)v263 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v322 = (char *)v263 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  v312 = (char *)v263 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v311 = (char *)v263 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  v321 = (char *)v263 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  v297 = (char *)v263 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  v320 = (char *)v263 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  v291 = (char *)v263 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  v319 = (char *)v263 - v59;
  __chkstk_darwin(v58);
  v318 = (char *)v263 - v60;
  uint64_t v61 = type metadata accessor for ActionRequest(0);
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = *(void *)(v62 + 64);
  uint64_t v64 = __chkstk_darwin(v61);
  uint64_t v266 = (uint64_t)v263 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __chkstk_darwin(v64);
  uint64_t v310 = (uint64_t)v263 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v342 = (char *)v263 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  uint64_t v309 = (uint64_t)v263 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  uint64_t v73 = (char *)v263 - v72;
  uint64_t v74 = __chkstk_darwin(v71);
  uint64_t v296 = (uint64_t)v263 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  uint64_t v274 = (uint64_t)v263 - v77;
  __chkstk_darwin(v76);
  uint64_t v79 = (void *)((char *)v263 - v78);
  uint64_t v80 = sub_100007764(&qword_100727810);
  uint64_t v81 = __chkstk_darwin(v80 - 8);
  uint64_t v265 = (uint64_t)v263 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __chkstk_darwin(v81);
  v279 = (char *)v263 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  v295 = (char *)v263 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  uint64_t v317 = (uint64_t)v263 - v88;
  uint64_t v89 = __chkstk_darwin(v87);
  uint64_t v294 = (uint64_t)v263 - v90;
  uint64_t v91 = __chkstk_darwin(v89);
  v293 = (char *)v263 - v92;
  uint64_t v93 = __chkstk_darwin(v91);
  uint64_t v332 = (uint64_t)v263 - v94;
  __chkstk_darwin(v93);
  uint64_t v95 = v62;
  uint64_t v96 = *(void (**)(void))(v62 + 56);
  uint64_t v330 = (uint64_t)v263 - v97;
  uint64_t v337 = v61;
  uint64_t v329 = v62 + 56;
  v328 = v96;
  v96();
  uint64_t v351 = *(void *)(a1 + 128);
  uint64_t v349 = v351;
  v350 = &_swiftEmptySetSingleton;
  sub_100135DC4((uint64_t)&v351);
  sub_100442B60((uint64_t)&v349);
  sub_1004430E8((uint64_t)&v349);
  sub_100443674((uint64_t)&v349);
  uint64_t v98 = v349;
  uint64_t v341 = *(void *)(v349 + 16);
  uint64_t v334 = v5;
  if (!v341)
  {
    uint64_t v255 = v346;
    uint64_t v103 = v337;
    goto LABEL_124;
  }
  uint64_t v289 = OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_biomeManager;
  uint64_t v99 = *(unsigned __int8 *)(v62 + 80);
  uint64_t v275 = (v99 + 32) & ~v99;
  uint64_t v340 = v349 + v275;
  uint64_t v288 = v5 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse;
  ++v343;
  v271 = v348;
  v315 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  v270 = (char *)v347 + 4;
  uint64_t v303 = v99 | 7;
  uint64_t v287 = (v99 + 24) & ~v99;
  unint64_t v286 = (v63 + v287 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v285 = (v286 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v284 = v285 + 8;
  uint64_t v264 = (v99 + 48) & ~v99;
  v263[4] = v264 + v63;
  swift_bridgeObjectRetain();
  unint64_t v100 = 0;
  unsigned int v331 = 3;
  v283 = (char *)&type metadata for () + 8;
  unint64_t v282 = 0x800000010064E820;
  unint64_t v281 = 0x800000010064E860;
  v263[3] = "PENDING_WORKFLOW";
  unint64_t v269 = 0x8000000100629010;
  *(void *)&long long v101 = 136315138;
  long long v304 = v101;
  v268 = (char *)&type metadata for Any + 8;
  unint64_t v280 = 0x800000010064E8A0;
  *(void *)&long long v101 = 67109120;
  long long v267 = v101;
  v263[2] = "EXPIRED";
  v263[1] = "ERROR_PROCESSING_REQUEST";
  uint64_t v102 = v336;
  uint64_t v103 = v337;
  v305 = v73;
  uint64_t v104 = v346;
  v290 = v33;
  uint64_t v338 = v95;
  uint64_t v339 = v98;
  while (2)
  {
    if (v100 >= *(void *)(v98 + 16))
    {
      __break(1u);
      JUMPOUT(0x10047DFD0);
    }
    unint64_t v108 = v100;
    uint64_t v109 = *(void *)(v95 + 72);
    ++v100;
    sub_100487074(v340 + v109 * v108, (uint64_t)v79);
    sub_100486B34((uint64_t)v79, v102, v104, v344);
    Swift::Int v110 = *v79;
    uint64_t v111 = (void *)v79[1];
    swift_bridgeObjectRetain();
    sub_1005D83B4(v347, v110, (Swift::Int)v111);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v352._uint64_t countAndFlagsBits = v110;
    v352._object = v111;
    char v112 = sub_10048324C(v352);
    uint64_t v113 = v342;
    switch(v112)
    {
      case 1:
        defaultLogger()();
        uint64_t v117 = Logger.logObject.getter();
        os_log_type_t v118 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v117, v118))
        {
          uint64_t v119 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v119 = 0;
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "Starting Provisioning flow", v119, 2u);
          swift_slowDealloc();
        }

        (*v343)(v321, v345);
        uint64_t v105 = v296;
        sub_100487074((uint64_t)v79, v296);
        uint64_t v106 = swift_allocObject();
        *(void *)(v106 + 16) = v334;
        sub_10048FE30(v105, v106 + v287, type metadata accessor for ActionRequest);
        uint64_t v107 = (uint64_t *)(v106 + v286);
        uint64_t v104 = v346;
        uint64_t *v107 = v102;
        v107[1] = v104;
        *(void *)(v106 + v285) = v344;
        swift_bridgeObjectRetain();
        swift_retain();
        runAsyncAndBlock<A>(file:function:line:_:)();
        swift_release();
        goto LABEL_4;
      case 2:
        unint64_t v120 = v100;
        defaultLogger()();
        uint64_t v121 = Logger.logObject.getter();
        os_log_type_t v122 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v121, v122))
        {
          uint64_t v123 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v123 = 0;
          _os_log_impl((void *)&_mh_execute_header, v121, v122, "server requested an action to execute new workflow", v123, 2u);
          swift_slowDealloc();
        }

        v316 = *v343;
        v316(v320, v345);
        uint64_t v124 = (uint64_t)v79 + *(int *)(v103 + 20);
        uint64_t v125 = (uint64_t)v290;
        sub_100048D6C(v124, (uint64_t)v290, (uint64_t *)&unk_100723978);
        uint64_t v126 = type metadata accessor for PendingActionContext(0);
        uint64_t v127 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v126 - 8) + 48);
        if (v127(v125, 1, v126) == 1)
        {
          sub_10000C6CC(v125, (uint64_t *)&unk_100723978);
          unsigned int v331 = 3;
        }
        else
        {
          unsigned int v331 = *(unsigned __int8 *)(v125 + *(int *)(v126 + 72));
          sub_1004863E0(v125, type metadata accessor for PendingActionContext);
        }
        uint64_t v170 = v124;
        uint64_t v171 = v124;
        uint64_t v172 = v298;
        sub_100048D6C(v171, v298, (uint64_t *)&unk_100723978);
        unint64_t v100 = v120;
        if (v127(v172, 1, v126) == 1)
        {
          sub_10000C6CC(v172, (uint64_t *)&unk_100723978);
          uint64_t v173 = type metadata accessor for WorkflowRecommendationResponse();
          uint64_t v174 = v327;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v173 - 8) + 56))(v327, 1, 1, v173);
        }
        else
        {
          uint64_t v174 = v327;
          sub_100048D6C(v172 + *(int *)(v126 + 68), v327, &qword_100722C18);
          sub_1004863E0(v172, type metadata accessor for PendingActionContext);
        }
        uint64_t v104 = v346;
        uint64_t v175 = v288;
        swift_beginAccess();
        sub_100488F10(v174, v175);
        swift_endAccess();
        uint64_t v176 = v175;
        uint64_t v177 = v302;
        sub_100048D6C(v176, v302, &qword_100722C18);
        uint64_t v178 = type metadata accessor for WorkflowRecommendationResponse();
        int v179 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v178 - 8) + 48))(v177, 1, v178);
        sub_10000C6CC(v177, &qword_100722C18);
        uint64_t v180 = v170;
        uint64_t v102 = v336;
        if (v179 == 1)
        {
          defaultLogger()();
          __int16 v181 = Logger.logObject.getter();
          os_log_type_t v182 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v181, v182))
          {
            __int16 v183 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)__int16 v183 = 0;
            _os_log_impl((void *)&_mh_execute_header, v181, v182, "IdentityProofingPendingActionsFlow: updateProofingWorkflowStatus workflowRecommendationResponse is nil", v183, 2u);
            uint64_t v104 = v346;
            swift_slowDealloc();
          }

          v316(v297, v345);
        }
        sub_10000C6CC(v327, &qword_100722C18);
        switch(v331)
        {
          case 2u:
            swift_bridgeObjectRelease();
            goto LABEL_110;
          case 3u:
            goto LABEL_111;
          default:
            char v184 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v184 & 1) == 0) {
              goto LABEL_111;
            }
LABEL_110:
            uint64_t v246 = v335;
            sub_1004814E0(v180);
            uint64_t v335 = v246;
            if (v246) {
              goto LABEL_129;
            }
LABEL_111:
            sub_1004863E0((uint64_t)v79, type metadata accessor for ActionRequest);
            uint64_t v103 = v337;
            break;
        }
        goto LABEL_5;
      case 3:
        uint64_t v128 = v311;
        defaultLogger()();
        uint64_t v129 = (uint64_t)v305;
        sub_100487074((uint64_t)v79, (uint64_t)v305);
        char v130 = Logger.logObject.getter();
        os_log_type_t v131 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v130, v131))
        {
          unint64_t v333 = v100;
          uint64_t v132 = swift_slowAlloc();
          v347[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v132 = v304;
          uint64_t v133 = v276;
          sub_100048D6C(v129 + *(int *)(v337 + 20), v276, (uint64_t *)&unk_100723978);
          uint64_t v134 = type metadata accessor for PendingActionContext(0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v134 - 8) + 48))(v133, 1, v134) == 1)
          {
            sub_10000C6CC(v133, (uint64_t *)&unk_100723978);
          }
          else
          {
            uint64_t v191 = *(void *)(v133 + 56);
            swift_bridgeObjectRetain();
            sub_1004863E0(v133, type metadata accessor for PendingActionContext);
            if (v191)
            {
              uint64_t v192 = String.debugDescription.getter();
              unint64_t v194 = v193;
              swift_bridgeObjectRelease();
LABEL_61:
              *(void *)(v132 + 4) = sub_100110D58(v192, v194, v347);
              swift_bridgeObjectRelease();
              sub_1004863E0((uint64_t)v305, type metadata accessor for ActionRequest);
              _os_log_impl((void *)&_mh_execute_header, v130, v131, "server requested an action to self heal: %s", (uint8_t *)v132, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*v343)(v311, v345);
              sub_1004863E0((uint64_t)v79, type metadata accessor for ActionRequest);
              uint64_t v104 = v346;
              uint64_t v102 = v336;
              uint64_t v103 = v337;
              goto LABEL_108;
            }
          }
          uint64_t v192 = 0;
          unint64_t v194 = 0xE000000000000000;
          goto LABEL_61;
        }

        sub_1004863E0(v129, type metadata accessor for ActionRequest);
        (*v343)(v128, v345);
        sub_1004863E0((uint64_t)v79, type metadata accessor for ActionRequest);
        uint64_t v103 = v337;
LABEL_41:
        uint64_t v95 = v338;
        uint64_t v98 = v339;
        uint64_t v104 = v346;
        goto LABEL_6;
      case 4:
        defaultLogger()();
        uint64_t v135 = Logger.logObject.getter();
        os_log_type_t v136 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v135, v136))
        {
          uint64_t v137 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v137 = 0;
          _os_log_impl((void *)&_mh_execute_header, v135, v136, "display message received", v137, 2u);
          swift_slowDealloc();
        }

        uint64_t v138 = *v343;
        (*v343)(v319, v345);
        sub_10047F0E8((uint64_t)v79 + *(int *)(v103 + 20));
        type metadata accessor for IdentityProofingDataContext();
        swift_allocObject();
        uint64_t v139 = v335;
        sub_1000FF820();
        if (v139)
        {
          uint64_t v335 = 0;
          uint64_t v104 = v346;
          char v190 = v291;
          defaultLogger()();
          DIPRecordError(_:message:log:)();
          swift_errorRelease();
          v138(v190, v345);
        }
        else
        {
          uint64_t v185 = v140;
          uint64_t v186 = v274;
          sub_100487074((uint64_t)v79, v274);
          __int16 v187 = (void *)swift_allocObject();
          uint64_t v188 = v336;
          v187[2] = v185;
          v187[3] = v188;
          uint64_t v104 = v346;
          uint64_t v189 = v344;
          v187[4] = v346;
          v187[5] = v189;
          sub_10048FE30(v186, (uint64_t)v187 + v264, type metadata accessor for ActionRequest);
          swift_retain();
          swift_bridgeObjectRetain();
          sub_1000FFE3C((uint64_t)sub_100488F7C, (uint64_t)v187);
          uint64_t v335 = 0;
          swift_release();
          swift_release();
          uint64_t v103 = v337;
        }
        sub_1004863E0((uint64_t)v79, type metadata accessor for ActionRequest);
        uint64_t v102 = v336;
        goto LABEL_5;
      case 5:
        uint64_t v141 = v312;
        defaultLogger()();
        uint64_t v142 = v309;
        sub_100487074((uint64_t)v79, v309);
        uint64_t v143 = Logger.logObject.getter();
        os_log_type_t v144 = static os_log_type_t.debug.getter();
        BOOL v145 = os_log_type_enabled(v143, v144);
        unint64_t v333 = v100;
        if (!v145)
        {
          sub_1004863E0(v142, type metadata accessor for ActionRequest);

          v314 = *v343;
          v314(v141, v345);
          goto LABEL_66;
        }
        uint64_t v146 = v103;
        uint64_t v147 = (uint8_t *)swift_slowAlloc();
        v347[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v147 = v304;
        uint64_t v148 = v142 + *(int *)(v146 + 20);
        uint64_t v149 = v277;
        sub_100048D6C(v148, v277, (uint64_t *)&unk_100723978);
        uint64_t v150 = type metadata accessor for PendingActionContext(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 48))(v149, 1, v150) == 1)
        {
          sub_10000C6CC(v149, (uint64_t *)&unk_100723978);
        }
        else
        {
          uint64_t v195 = *(void *)(v149 + 72);
          swift_bridgeObjectRetain();
          sub_1004863E0(v149, type metadata accessor for PendingActionContext);
          if (v195)
          {
            uint64_t v196 = String.debugDescription.getter();
            unint64_t v198 = v197;
            swift_bridgeObjectRelease();
            goto LABEL_65;
          }
        }
        uint64_t v196 = 0;
        unint64_t v198 = 0xE000000000000000;
LABEL_65:
        v347[3] = sub_100110D58(v196, v198, v347);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1004863E0(v309, type metadata accessor for ActionRequest);
        _os_log_impl((void *)&_mh_execute_header, v143, v144, "server requested an action to set state:%s", v147, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v314 = *v343;
        v314(v312, v345);
        uint64_t v103 = v337;
        uint64_t v113 = v342;
LABEL_66:
        uint64_t v199 = *(void *)(v349 + 16);
        uint64_t v200 = v332;
        if (v199)
        {
          uint64_t v201 = v332;
          uint64_t v202 = v349 + v275;
          swift_bridgeObjectRetain();
          while (1)
          {
            sub_100487074(v202, (uint64_t)v113);
            BOOL v203 = *v113 == 0x5F4F545F444E4553 && v113[1] == 0xED0000454D4F4942;
            if (v203 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
            sub_1004863E0((uint64_t)v113, type metadata accessor for ActionRequest);
            v202 += v109;
            if (!--v199)
            {
              uint64_t v204 = 1;
              uint64_t v205 = (uint64_t)v293;
              uint64_t v200 = v201;
              uint64_t v103 = v337;
              goto LABEL_77;
            }
          }
          uint64_t v200 = v201;
          sub_10048FE30((uint64_t)v113, v201, type metadata accessor for ActionRequest);
          uint64_t v204 = 0;
          uint64_t v205 = (uint64_t)v293;
          uint64_t v103 = v337;
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v204 = 1;
          uint64_t v205 = (uint64_t)v293;
        }
LABEL_77:
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v328)(v200, v204, 1, v103);
        swift_bridgeObjectRelease();
        defaultLogger()();
        sub_100048D6C(v200, v205, &qword_100727810);
        char v206 = Logger.logObject.getter();
        os_log_type_t v207 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v206, v207))
        {
          char v208 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)char v208 = v267;
          __int16 v209 = v315;
          BOOL v203 = (*v315)(v205, 1, v103) == 1;
          uint64_t v210 = v205;
          int v211 = !v203;
          sub_10000C6CC(v210, &qword_100727810);
          LODWORD(v347[0]) = v211;
          uint64_t v103 = v337;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v206, v207, "Biome data exists to be donated? -> %{BOOL}d", v208, 8u);
          swift_slowDealloc();
          uint64_t v212 = v336;
          uint64_t v213 = (uint64_t)v299;
        }
        else
        {
          sub_10000C6CC(v205, &qword_100727810);
          uint64_t v212 = v336;
          uint64_t v213 = (uint64_t)v299;
          __int16 v209 = v315;
        }
        uint64_t v214 = v346;

        v314(v322, v345);
        uint64_t v215 = v294;
        sub_100048D6C(v332, v294, &qword_100727810);
        v308 = *v209;
        if (v308(v215, 1, v103) == 1)
        {
          swift_retain();
          sub_10000C6CC(v215, &qword_100727810);
          uint64_t v216 = type metadata accessor for PendingActionContext(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v216 - 8) + 56))(v213, 1, 1, v216);
        }
        else
        {
          sub_100048D6C(v215 + *(int *)(v103 + 20), v213, (uint64_t *)&unk_100723978);
          swift_retain();
          sub_1004863E0(v215, type metadata accessor for ActionRequest);
        }
        sub_1000FA0B8(v212, v214, v213);
        swift_release();
        sub_10000C6CC(v213, (uint64_t *)&unk_100723978);
        uint64_t v306 = (uint64_t)v79 + *(int *)(v103 + 20);
        uint64_t v217 = v300;
        sub_100048D6C(v306, v300, (uint64_t *)&unk_100723978);
        uint64_t v218 = type metadata accessor for PendingActionContext(0);
        uint64_t v219 = *(void *)(v218 - 8);
        v316 = *(void (**)(char *, uint64_t))(v219 + 48);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v316)(v217, 1, v218) == 1)
        {
          sub_10000C6CC(v217, (uint64_t *)&unk_100723978);
          uint64_t v307 = 0;
          v220 = 0;
        }
        else
        {
          v220 = *(void (***)(void, void, void))(v217 + 72);
          uint64_t v307 = *(void *)(v217 + 64);
          swift_bridgeObjectRetain();
          sub_1004863E0(v217, type metadata accessor for PendingActionContext);
        }
        uint64_t v221 = (uint64_t)v295;
        uint64_t v222 = (uint64_t)v350;
        sub_100048D6C(v330, v317, &qword_100727810);
        sub_100048D6C(v332, v221, &qword_100727810);
        uint64_t v223 = v337;
        if (v308(v221, 1, v337) == 1)
        {
          swift_bridgeObjectRetain();
          sub_10000C6CC(v221, &qword_100727810);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v219 + 56))(v326, 1, 1, v218);
        }
        else
        {
          uint64_t v224 = v326;
          sub_100048D6C(v221 + *(int *)(v223 + 20), v326, (uint64_t *)&unk_100723978);
          swift_bridgeObjectRetain();
          sub_1004863E0(v221, type metadata accessor for ActionRequest);
          unsigned __int8 v225 = 1;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v316)(v224, 1, v218) != 1) {
            goto LABEL_93;
          }
        }
        unsigned __int8 v225 = 0;
LABEL_93:
        sub_10000C6CC(v326, (uint64_t *)&unk_100723978);
        uint64_t v226 = v317;
        uint64_t v227 = v335;
        sub_10048031C(v307, v220, v222, v336, v346, v344, v331, v317, v225);
        uint64_t v335 = v227;
        if (!v227)
        {
          sub_10000C6CC(v226, &qword_100727810);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v228 = v292;
          sub_100048D6C(v306, v292, (uint64_t *)&unk_100723978);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v316)(v228, 1, v218) == 1)
          {
            sub_10000C6CC(v228, (uint64_t *)&unk_100723978);
            uint64_t v104 = v346;
            uint64_t v102 = v336;
            uint64_t v103 = v337;
            unint64_t v100 = v333;
          }
          else
          {
            uint64_t v229 = *(void *)(v228 + 64);
            v230 = *(void **)(v228 + 72);
            swift_bridgeObjectRetain();
            sub_1004863E0(v228, type metadata accessor for PendingActionContext);
            uint64_t v104 = v346;
            uint64_t v102 = v336;
            uint64_t v103 = v337;
            unint64_t v100 = v333;
            if (v230)
            {
              v353._uint64_t countAndFlagsBits = v229;
              v353._object = v230;
              switch(sub_100483200(v353))
              {
                case 1u:
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                  char v250 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((v250 & 1) == 0) {
                    goto LABEL_121;
                  }
                  break;
                case 6u:
                  goto LABEL_121;
                default:
                  swift_bridgeObjectRelease();
                  break;
              }
              defaultLogger()();
              v251 = Logger.logObject.getter();
              os_log_type_t v252 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v251, v252))
              {
                v253 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v253 = 0;
                _os_log_impl((void *)&_mh_execute_header, v251, v252, "Setting notificationAction to nil...", v253, 2u);
                uint64_t v104 = v346;
                swift_slowDealloc();
              }

              v314(v272, v345);
              sub_10000C6CC(v332, &qword_100727810);
              sub_1004863E0((uint64_t)v79, type metadata accessor for ActionRequest);
              uint64_t v254 = v330;
              sub_10000C6CC(v330, &qword_100727810);
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v328)(v254, 1, 1, v103);
              goto LABEL_5;
            }
          }
LABEL_121:
          sub_10000C6CC(v332, &qword_100727810);
LABEL_4:
          sub_1004863E0((uint64_t)v79, type metadata accessor for ActionRequest);
LABEL_5:
          uint64_t v95 = v338;
          uint64_t v98 = v339;
LABEL_6:
          if (v100 == v341)
          {
            uint64_t v255 = v104;
            swift_bridgeObjectRelease();
LABEL_124:
            uint64_t v256 = v330;
            uint64_t v257 = (uint64_t)v279;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_100048D6C(v256, v257, &qword_100727810);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v257, 1, v103) == 1)
            {
              sub_10000C6CC(v256, &qword_100727810);
              uint64_t v258 = v257;
            }
            else
            {
              uint64_t v259 = v257;
              uint64_t v260 = v266;
              sub_10048FE30(v259, v266, type metadata accessor for ActionRequest);
              uint64_t v261 = v265;
              sub_100487074(v260, v265);
              ((void (*)(uint64_t, void, uint64_t, uint64_t))v328)(v261, 0, 1, v103);
              sub_10047ED44(v261, v336, v255);
              sub_10000C6CC(v261, &qword_100727810);
              sub_1004863E0(v260, type metadata accessor for ActionRequest);
              uint64_t v258 = v256;
            }
            return sub_10000C6CC(v258, &qword_100727810);
          }
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000C6CC(v226, &qword_100727810);
        sub_10000C6CC(v332, &qword_100727810);
LABEL_129:
        sub_1004863E0((uint64_t)v79, type metadata accessor for ActionRequest);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_10000C6CC(v330, &qword_100727810);
      case 6:
        defaultLogger()();
        uint64_t v151 = Logger.logObject.getter();
        os_log_type_t v152 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v151, v152))
        {
          v153 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v153 = 0;
          _os_log_impl((void *)&_mh_execute_header, v151, v152, "display notification received", v153, 2u);
          swift_slowDealloc();
        }

        (*v343)(v318, v345);
        uint64_t v154 = v330;
        sub_10000C6CC(v330, &qword_100727810);
        sub_10048FE30((uint64_t)v79, v154, type metadata accessor for ActionRequest);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v328)(v154, 0, 1, v103);
        goto LABEL_41;
      case 7:
        defaultLogger()();
        unsigned int v155 = Logger.logObject.getter();
        os_log_type_t v156 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v155, v156))
        {
          unsigned int v157 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unsigned int v157 = 0;
          _os_log_impl((void *)&_mh_execute_header, v155, v156, "server requested an action to send liveness assessments to biome. The data has been saved.", v157, 2u);
          swift_slowDealloc();
        }

        (*v343)(v324, v345);
        goto LABEL_40;
      case 8:
        unsigned int v158 = v313;
        defaultLogger()();
        uint64_t v159 = v310;
        sub_100487074((uint64_t)v79, v310);
        unsigned int v160 = Logger.logObject.getter();
        os_log_type_t v161 = static os_log_type_t.info.getter();
        BOOL v162 = os_log_type_enabled(v160, v161);
        unint64_t v333 = v100;
        if (!v162)
        {
          sub_1004863E0(v159, type metadata accessor for ActionRequest);

          (*v343)(v158, v345);
          uint64_t v104 = v346;
          goto LABEL_102;
        }
        uint64_t v163 = swift_slowAlloc();
        v347[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v163 = v304;
        uint64_t v164 = v159 + *(int *)(v337 + 20);
        uint64_t v165 = v278;
        sub_100048D6C(v164, v278, (uint64_t *)&unk_100723978);
        uint64_t v166 = type metadata accessor for PendingActionContext(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 48))(v165, 1, v166) == 1)
        {
          sub_10000C6CC(v165, (uint64_t *)&unk_100723978);
        }
        else
        {
          v231 = (uint64_t *)(v165 + *(int *)(v166 + 108));
          uint64_t v232 = *v231;
          unint64_t v233 = v231[1];
          swift_bridgeObjectRetain();
          sub_1004863E0(v165, type metadata accessor for PendingActionContext);
          if (v233) {
            goto LABEL_101;
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v233 = 0xE300000000000000;
        uint64_t v232 = 4999502;
LABEL_101:
        *(void *)(v163 + 4) = sub_100110D58(v232, v233, v347);
        swift_bridgeObjectRelease();
        sub_1004863E0(v310, type metadata accessor for ActionRequest);
        _os_log_impl((void *)&_mh_execute_header, v160, v161, "server requested to delete the Account Key Signing Key with identifier %s", (uint8_t *)v163, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v343)(v313, v345);
        uint64_t v104 = v346;
        uint64_t v102 = v336;
LABEL_102:
        uint64_t v103 = v337;
        uint64_t v234 = v301;
        sub_100048D6C((uint64_t)v79 + *(int *)(v337 + 20), v301, (uint64_t *)&unk_100723978);
        uint64_t v235 = type metadata accessor for PendingActionContext(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v235 - 8) + 48))(v234, 1, v235) == 1)
        {
          sub_10000C6CC(v234, (uint64_t *)&unk_100723978);
        }
        else
        {
          v236 = (uint64_t *)(v234 + *(int *)(v235 + 108));
          uint64_t v237 = v234;
          uint64_t v239 = *v236;
          uint64_t v238 = v236[1];
          swift_bridgeObjectRetain();
          sub_1004863E0(v237, type metadata accessor for PendingActionContext);
          if (v238)
          {
            uint64_t v240 = type metadata accessor for TaskPriority();
            uint64_t v241 = *(void *)(v240 - 8);
            uint64_t v242 = (uint64_t)v273;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v241 + 56))(v273, 1, 1, v240);
            v243 = (void *)swift_allocObject();
            v243[2] = 0;
            uint64_t v244 = v334;
            v243[3] = 0;
            v243[4] = v244;
            v243[5] = v239;
            v243[6] = v238;
            int v245 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v241 + 48))(v242, 1, v240);
            swift_retain();
            if (v245 == 1)
            {
              sub_10000C6CC(v242, &qword_10071FEE0);
            }
            else
            {
              TaskPriority.rawValue.getter();
              (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v242, v240);
            }
            uint64_t v103 = v337;
            unint64_t v100 = v333;
            if (v243[2])
            {
              swift_getObjectType();
              swift_unknownObjectRetain();
              uint64_t v247 = dispatch thunk of Actor.unownedExecutor.getter();
              uint64_t v249 = v248;
              swift_unknownObjectRelease();
              if (v249 | v247)
              {
                v348[0] = 0;
                v348[1] = 0;
                v348[2] = v247;
                v348[3] = v249;
              }
            }
            uint64_t v95 = v338;
            uint64_t v98 = v339;
            uint64_t v104 = v346;
            swift_task_create();
            swift_release();
            sub_1004863E0((uint64_t)v79, type metadata accessor for ActionRequest);
            uint64_t v102 = v336;
            goto LABEL_6;
          }
        }
        sub_1004863E0((uint64_t)v79, type metadata accessor for ActionRequest);
LABEL_108:
        uint64_t v95 = v338;
        uint64_t v98 = v339;
        unint64_t v100 = v333;
        goto LABEL_6;
      case 9:
        defaultLogger()();
        int v167 = Logger.logObject.getter();
        os_log_type_t v168 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v167, v168))
        {
          __int16 v169 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)__int16 v169 = 0;
          _os_log_impl((void *)&_mh_execute_header, v167, v168, "INVALID ACTION REQUEST", v169, 2u);
          swift_slowDealloc();
        }

        (*v343)(v325, v345);
        goto LABEL_40;
      default:
        defaultLogger()();
        unint64_t v114 = Logger.logObject.getter();
        os_log_type_t v115 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v114, v115))
        {
          uint64_t v116 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v116 = 0;
          _os_log_impl((void *)&_mh_execute_header, v114, v115, "server requested an action to wait for update", v116, 2u);
          swift_slowDealloc();
        }

        (*v343)(v323, v345);
LABEL_40:
        sub_1004863E0((uint64_t)v79, type metadata accessor for ActionRequest);
        goto LABEL_41;
    }
  }
}

uint64_t sub_10047E024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a3 + *(int *)(type metadata accessor for ActionRequest(0) + 20);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v11;
  *uint64_t v11 = v6;
  v11[1] = sub_100025D64;
  return sub_100476BD8(v10, a4, a5, a6);
}

uint64_t sub_10047E0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  return _swift_task_switch(sub_10047E11C, 0, 0);
}

uint64_t sub_10047E11C()
{
  v0[18] = *(void *)(v0[15] + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_credentialProvider);
  uint64_t v1 = qword_10071F498;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  os_log_type_t v2 = *(void **)(qword_100760290 + 16);
  v0[19] = v2;
  id v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  v0[20] = v4;
  v0[2] = v0;
  v0[3] = sub_10047E290;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100529EC4;
  v0[13] = &unk_1007064B0;
  v0[14] = v5;
  [v3 deleteAccountKeySigningKeyForAccountKeyIdentifier:v4 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10047E290()
{
  uint64_t v1 = *v0;
  os_log_type_t v2 = *(void **)(*v0 + 160);
  id v3 = *(void **)(*v0 + 152);
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }

  swift_release();
  NSString v4 = *(uint64_t (**)(void))(v1 + 8);
  return v4();
}

void sub_10047E3F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v53 = a5;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764((uint64_t *)&unk_100723978);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (uint64_t *)((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for DIPError.Code();
  uint64_t v54 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v55;
  sub_10010096C(a2, a3);
  if (!v18)
  {
    uint64_t v48 = (void *)a3;
    id v49 = a4;
    uint64_t v50 = v15;
    uint64_t v46 = v11;
    uint64_t v47 = a1;
    uint64_t v55 = v17;
    if (!v19)
    {
      v56[0] = 0;
      v56[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v25._uint64_t countAndFlagsBits = 0xD000000000000023;
      v25._object = (void *)0x800000010064E8F0;
      String.append(_:)(v25);
      v26._uint64_t countAndFlagsBits = a2;
      v26._object = v48;
      String.append(_:)(v26);
      v27._uint64_t countAndFlagsBits = 0x72617420646E6120;
      v27._object = (void *)0xEC00000020746567;
      String.append(_:)(v27);
      v28._uint64_t countAndFlagsBits = IdentityTarget.debugDescription.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v54 + 104))(v55, enum case for DIPError.Code.internalError(_:), v50);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return;
    }
    uint64_t v48 = 0;
    id v49 = v19;
    uint64_t v20 = type metadata accessor for ActionRequest(0);
    sub_100048D6C((uint64_t)v53 + *(int *)(v20 + 20), (uint64_t)v14, (uint64_t *)&unk_100723978);
    uint64_t v21 = type metadata accessor for PendingActionContext(0);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v14, 1, v21) == 1)
    {
      sub_10000C6CC((uint64_t)v14, (uint64_t *)&unk_100723978);
      uint64_t v23 = v54;
      uint64_t v22 = v55;
      uint64_t v24 = v50;
LABEL_11:
      (*(void (**)(char *, void, uint64_t))(v23 + 104))(v22, enum case for DIPError.Code.extendedReviewProofingError(_:), v24);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();

      return;
    }
    uint64_t v30 = v14[14];
    uint64_t v29 = v14[15];
    uint64_t v31 = v14[16];
    uint64_t v32 = v14[18];
    uint64_t v33 = v14[19];
    uint64_t v34 = v14[21];
    uint64_t v53 = (void *)v14[17];
    uint64_t v35 = v32;
    v45[1] = v34;
    sub_10048637C(v30, v29, v31, (uint64_t)v53, v32, v33);
    sub_1004863E0((uint64_t)v14, type metadata accessor for PendingActionContext);
    uint64_t v23 = v54;
    uint64_t v22 = v55;
    uint64_t v24 = v50;
    if (v29 == 2) {
      goto LABEL_11;
    }
    v45[0] = v31;
    uint64_t v36 = (uint64_t)v53;
    sub_100403B30(v30, v29);
    sub_100403DB8(v30, v29, v45[0], v36, v35, v33);
    if (v29 == 1) {
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    if (!v53) {
      goto LABEL_11;
    }
    uint64_t v37 = v46;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      unint64_t v41 = (unint64_t)v53;
      swift_bridgeObjectRetain();
      uint64_t v42 = v45[0];
      v56[3] = sub_100110D58(v45[0], v41, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "The extended review URL string is %s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v51 + 8))(v37, v52);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v37, v52);
      uint64_t v42 = v45[0];
    }
    v43.value._uint64_t countAndFlagsBits = v42;
    v43.value._object = v53;
    id v44 = v49;
    StoredProofingSession.update(extendedReviewURLString:)(v43);
    swift_bridgeObjectRelease();
    sub_1000FFAB4();
  }
}

void sub_10047EACC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a5;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10010096C(a2, (uint64_t)a3);
  if (!v5)
  {
    uint64_t v13 = v12;
    uint64_t v20 = v8;
    uint64_t v21 = v11;
    uint64_t v14 = v25;
    uint64_t v22 = v9;
    if (v12)
    {
      Swift::String_optional v15 = *(Swift::String_optional *)(v14 + *(int *)(type metadata accessor for ActionRequest(0) + 24));
      StoredProofingSession.update(lastExecutedActionIdentifier:)(v15);
      sub_1000FFAB4();
    }
    else
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v16._object = (void *)0x800000010064E9D0;
      v16._uint64_t countAndFlagsBits = 0xD000000000000027;
      String.append(_:)(v16);
      v17._uint64_t countAndFlagsBits = a2;
      v17._object = a3;
      String.append(_:)(v17);
      v18._uint64_t countAndFlagsBits = 0x74276E73656F6420;
      v18._object = (void *)0xEE00747369786520;
      String.append(_:)(v18);
      (*(void (**)(char *, void, uint64_t))(v22 + 104))(v21, enum case for DIPError.Code.internalError(_:), v20);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

uint64_t sub_10047ED44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v4 = sub_100007764(&qword_100727810);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = sub_100007764((uint64_t *)&unk_100723978);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  Swift::String_optional v15 = (char *)&v29 - v14;
  uint64_t v30 = a1;
  sub_100048D6C(a1, (uint64_t)v9, &qword_100727810);
  uint64_t v16 = type metadata accessor for ActionRequest(0);
  Swift::String v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  if (v17(v9, 1, v16) == 1)
  {
    swift_retain();
    Swift::String v18 = &qword_100727810;
    uint64_t v19 = (uint64_t)v9;
LABEL_5:
    sub_10000C6CC(v19, v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    goto LABEL_7;
  }
  sub_100048D6C((uint64_t)&v9[*(int *)(v16 + 20)], (uint64_t)v15, (uint64_t *)&unk_100723978);
  swift_retain();
  sub_1004863E0((uint64_t)v9, type metadata accessor for ActionRequest);
  uint64_t v20 = type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v15, 1, v20) == 1)
  {
    Swift::String v18 = (uint64_t *)&unk_100723978;
    uint64_t v19 = (uint64_t)v15;
    goto LABEL_5;
  }
  uint64_t v21 = *((void *)v15 + 26);
  uint64_t v22 = *((void *)v15 + 27);
  swift_bridgeObjectRetain();
  sub_1004863E0((uint64_t)v15, type metadata accessor for PendingActionContext);
LABEL_7:
  sub_100048D6C(v30, (uint64_t)v7, &qword_100727810);
  if (v17(v7, 1, v16) == 1)
  {
    uint64_t v23 = &qword_100727810;
    uint64_t v24 = (uint64_t)v7;
  }
  else
  {
    sub_100048D6C((uint64_t)&v7[*(int *)(v16 + 20)], (uint64_t)v13, (uint64_t *)&unk_100723978);
    sub_1004863E0((uint64_t)v7, type metadata accessor for ActionRequest);
    uint64_t v25 = type metadata accessor for PendingActionContext(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v13, 1, v25) != 1)
    {
      uint64_t v26 = *((void *)v13 + 28);
      uint64_t v27 = *((void *)v13 + 29);
      swift_bridgeObjectRetain();
      sub_1004863E0((uint64_t)v13, type metadata accessor for PendingActionContext);
      goto LABEL_13;
    }
    uint64_t v23 = (uint64_t *)&unk_100723978;
    uint64_t v24 = (uint64_t)v13;
  }
  sub_10000C6CC(v24, v23);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
LABEL_13:
  sub_10051BB20(v21, v22, v26, v27, v31, v32, 0);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10047F0E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v152 = *(void *)(v2 - 8);
  unint64_t v153 = v2;
  __chkstk_darwin(v2);
  uint64_t v154 = (uint64_t)v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DIPError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v155 = v8;
  uint64_t v156 = v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v146 = (char *)v132 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v149 = (char *)v132 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v148 = (char *)v132 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  BOOL v145 = (char *)v132 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  os_log_type_t v144 = (char *)v132 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v143 = (char *)v132 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v132 - v25;
  uint64_t v27 = sub_100007764((uint64_t *)&unk_100723978);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  uint64_t v142 = (char *)v132 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v141 = (char *)v132 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)v132 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)v132 - v36;
  __chkstk_darwin(v35);
  os_log_type_t v39 = (char *)v132 - v38;
  uint64_t v150 = a1;
  sub_100048D6C(a1, (uint64_t)v132 - v38, (uint64_t *)&unk_100723978);
  uint64_t v40 = type metadata accessor for PendingActionContext(0);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  uint64_t v151 = (void (*)(char *, uint64_t))(v41 + 48);
  if (v42(v39, 1, v40) == 1)
  {
    uint64_t v43 = (uint64_t)v39;
LABEL_9:
    sub_10000C6CC(v43, (uint64_t *)&unk_100723978);
    goto LABEL_10;
  }
  uint64_t v44 = *((void *)v39 + 11);
  uint64_t v138 = v26;
  uint64_t v139 = v44;
  unint64_t v45 = *((void *)v39 + 12);
  swift_bridgeObjectRetain();
  sub_1004863E0((uint64_t)v39, type metadata accessor for PendingActionContext);
  unint64_t v140 = v45;
  if (!v45)
  {
LABEL_10:
    (*(void (**)(uint64_t, void, unint64_t))(v152 + 104))(v154, enum case for DIPError.Code.displayMessageDataUnavailable(_:), v153);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C588();
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v49, v7, v4);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(char *, uint64_t))(v156 + 8))(v12, v155);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_errorRelease();
  }
  uint64_t v46 = v42;
  uint64_t v47 = v150;
  sub_100048D6C(v150, (uint64_t)v37, (uint64_t *)&unk_100723978);
  if (v46(v37, 1, v40) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v43 = (uint64_t)v37;
    goto LABEL_9;
  }
  uint64_t v137 = v46;
  uint64_t v48 = *((void *)v37 + 13);
  swift_bridgeObjectRetain();
  sub_1004863E0((uint64_t)v37, type metadata accessor for PendingActionContext);
  if (!v48)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_100048D6C(v47, (uint64_t)v34, (uint64_t *)&unk_100723978);
  if (v137(v34, 1, v40) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = (uint64_t)v34;
    goto LABEL_9;
  }
  uint64_t v136 = v48;
  uint64_t v51 = *((void *)v34 + 14);
  uint64_t v52 = *((void *)v34 + 15);
  uint64_t v53 = *((void *)v34 + 16);
  uint64_t v54 = *((void *)v34 + 18);
  uint64_t v55 = *((void *)v34 + 19);
  uint64_t v56 = *((void *)v34 + 20);
  uint64_t v57 = *((void *)v34 + 21);
  uint64_t v58 = v53;
  uint64_t v135 = *((void *)v34 + 17);
  uint64_t v134 = v54;
  uint64_t v133 = v55;
  v132[2] = v56;
  v132[1] = v57;
  sub_10048637C(v51, v52, v53, v135, v54, v55);
  sub_1004863E0((uint64_t)v34, type metadata accessor for PendingActionContext);
  if (v52 == 2 || (uint64_t v59 = v135, sub_100403B30(v51, v52), sub_100403DB8(v51, v52, v58, v59, v134, v133), v52 == 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  unint64_t v60 = v140;
  if (!v52)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v152 = v51;
  unint64_t v153 = v52;
  uint64_t v61 = v141;
  sub_100048D6C(v47, (uint64_t)v141, (uint64_t *)&unk_100723978);
  if (v137(v61, 1, v40) == 1)
  {
    sub_10000C6CC((uint64_t)v61, (uint64_t *)&unk_100723978);
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = v156;
  }
  else
  {
    uint64_t v66 = *((void *)v61 + 14);
    uint64_t v65 = *((void *)v61 + 15);
    uint64_t v67 = *((void *)v61 + 16);
    uint64_t v68 = *((void *)v61 + 18);
    uint64_t v63 = *((void *)v61 + 19);
    uint64_t v154 = *((void *)v61 + 17);
    sub_10048637C(v66, v65, v67, v154, v68, v63);
    sub_1004863E0((uint64_t)v61, type metadata accessor for PendingActionContext);
    if (v65 == 2 || (sub_100403B30(v68, v63), sub_100403DB8(v66, v65, v67, v154, v68, v63), v63 == 1))
    {
      uint64_t v62 = 0;
      uint64_t v63 = 0;
    }
    else
    {
      uint64_t v62 = v68;
      swift_bridgeObjectRelease();
    }
    uint64_t v64 = v156;
    uint64_t v47 = v150;
  }
  uint64_t v69 = v142;
  sub_100048D6C(v47, (uint64_t)v142, (uint64_t *)&unk_100723978);
  unsigned int v70 = v137(v69, 1, v40);
  uint64_t v141 = (char *)v62;
  if (v70 == 1)
  {
    sub_10000C6CC((uint64_t)v69, (uint64_t *)&unk_100723978);
  }
  else
  {
    uint64_t v72 = *((void *)v69 + 14);
    uint64_t v71 = *((void *)v69 + 15);
    uint64_t v74 = *((void *)v69 + 16);
    uint64_t v73 = *((void *)v69 + 17);
    uint64_t v75 = *((void *)v69 + 18);
    uint64_t v76 = *((void *)v69 + 19);
    sub_10048637C(v72, v71, v74, v73, v75, v76);
    sub_1004863E0((uint64_t)v69, type metadata accessor for PendingActionContext);
    if (v71 != 2)
    {
      sub_100403B30(v72, v71);
      sub_100403DB8(v72, v71, v74, v73, v75, v76);
      if (v71 != 1) {
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v64 = v156;
    unint64_t v60 = v140;
  }
  type metadata accessor for IdentityProofingDisplayMessage();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v150 = v63;
  uint64_t v77 = IdentityProofingDisplayMessage.init(title:messages:primaryButtonTitle:secondaryButtonTitle:url:)();
  uint64_t v78 = v138;
  defaultLogger()();
  uint64_t v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.debug.getter();
  BOOL v81 = os_log_type_enabled(v79, v80);
  uint64_t v82 = v143;
  if (v81)
  {
    uint64_t v83 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v83 = 0;
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "----BEGIN LOGGING DISPLAY MESSAGE DATA-----", v83, 2u);
    swift_slowDealloc();
  }
  uint64_t v154 = v77;

  uint64_t v86 = *(void (**)(char *, uint64_t))(v64 + 8);
  uint64_t v85 = v64 + 8;
  uint64_t v84 = v86;
  uint64_t v87 = v155;
  v86(v78, v155);
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v88 = Logger.logObject.getter();
  os_log_type_t v89 = static os_log_type_t.debug.getter();
  BOOL v90 = os_log_type_enabled(v88, v89);
  uint64_t v151 = v86;
  if (v90)
  {
    uint64_t v91 = (uint8_t *)swift_slowAlloc();
    v158[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v91 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v157 = sub_100110D58(v139, v60, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "title: %s", v91, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v151(v82, v87);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v84(v82, v87);
  }
  uint64_t v92 = v144;
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v93 = Logger.logObject.getter();
  os_log_type_t v94 = static os_log_type_t.debug.getter();
  BOOL v95 = os_log_type_enabled(v93, v94);
  uint64_t v156 = v85;
  if (v95)
  {
    uint64_t v96 = (uint8_t *)swift_slowAlloc();
    v158[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v96 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v97 = Array.description.getter();
    unint64_t v99 = v98;
    swift_bridgeObjectRelease();
    uint64_t v157 = sub_100110D58(v97, v99, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "messages: %s", v96, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v100 = v92;
    uint64_t v101 = v155;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    unint64_t v100 = v92;
    uint64_t v101 = v87;
  }
  uint64_t v102 = v151;
  v151(v100, v101);
  uint64_t v103 = v145;
  defaultLogger()();
  unint64_t v104 = v153;
  swift_bridgeObjectRetain();
  uint64_t v105 = Logger.logObject.getter();
  os_log_type_t v106 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v105, v106))
  {
    uint64_t v107 = (uint8_t *)swift_slowAlloc();
    v158[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v107 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v157 = sub_100110D58(v152, v104, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v105, v106, "primaryButtonTitle: %s", v107, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v108 = v102;
  v102(v103, v155);
  uint64_t v109 = v148;
  defaultLogger()();
  uint64_t v110 = v150;
  swift_bridgeObjectRetain();
  uint64_t v111 = Logger.logObject.getter();
  os_log_type_t v112 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v111, v112))
  {
    uint64_t v113 = (uint8_t *)swift_slowAlloc();
    uint64_t v114 = swift_slowAlloc();
    *(_DWORD *)uint64_t v113 = 136315138;
    v158[0] = v114;
    if (v110) {
      uint64_t v115 = (uint64_t)v141;
    }
    else {
      uint64_t v115 = 0;
    }
    if (v110) {
      unint64_t v116 = v110;
    }
    else {
      unint64_t v116 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v157 = sub_100110D58(v115, v116, v158);
    uint64_t v117 = v155;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "secondaryButtonTitle: %s", v113, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    os_log_type_t v118 = v148;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    os_log_type_t v118 = v109;
    uint64_t v117 = v155;
  }
  v108(v118, v117);
  uint64_t v119 = v149;
  defaultLogger()();
  uint64_t v120 = v154;
  swift_retain_n();
  uint64_t v121 = Logger.logObject.getter();
  os_log_type_t v122 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v121, v122))
  {
    uint64_t v123 = (uint8_t *)swift_slowAlloc();
    v158[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v123 = 136315138;
    uint64_t v124 = IdentityProofingDisplayMessage.url.getter();
    if (v125)
    {
      unint64_t v126 = v125;
    }
    else
    {
      uint64_t v124 = 0;
      unint64_t v126 = 0xE000000000000000;
    }
    uint64_t v157 = sub_100110D58(v124, v126, v158);
    uint64_t v120 = v154;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v121, v122, "url: %s", v123, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v127 = v149;
  }
  else
  {

    swift_release_n();
    uint64_t v127 = v119;
  }
  v108(v127, v117);
  uint64_t v128 = v146;
  defaultLogger()();
  uint64_t v129 = Logger.logObject.getter();
  os_log_type_t v130 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v129, v130))
  {
    os_log_type_t v131 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v131 = 0;
    _os_log_impl((void *)&_mh_execute_header, v129, v130, "----END LOGGING DISPLAY MESSAGE DATA-----", v131, 2u);
    swift_slowDealloc();
  }

  v108(v128, v117);
  *(void *)(v147 + 24) = v120;
  return swift_release();
}

uint64_t sub_10048031C(uint64_t a1, void (**a2)(void, void, void), uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v83 = a8;
  uint64_t v85 = a6;
  uint64_t v86 = a7;
  uint64_t v89 = a3;
  uint64_t v13 = type metadata accessor for DIPError.Code();
  uint64_t v93 = *(void (***)(void, void, void))(v13 - 8);
  uint64_t v94 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = &v77[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v91 = *(void *)(v16 - 8);
  uint64_t v92 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = &v77[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = &v77[-v21];
  __chkstk_darwin(v20);
  uint64_t v24 = &v77[-v23];
  BOOL v90 = v15;
  if (a2)
  {
    uint64_t v84 = a4;
    swift_bridgeObjectRetain();
    v97._uint64_t countAndFlagsBits = a1;
    v97._object = a2;
    unint64_t v25 = sub_100483200(v97);
    int v26 = v25;
    uint64_t v82 = (unsigned char *)v25;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    unint64_t v80 = a5;
    if (v29)
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      uint64_t v96 = v81;
      *(_DWORD *)uint64_t v30 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v95 = sub_100110D58(v84, a5, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2080;
      uint64_t v31 = IdentityTarget.debugDescription.getter();
      uint64_t v95 = sub_100110D58(v31, v32, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 22) = 2080;
      unint64_t v33 = 0xE700000000000000;
      uint64_t v34 = 0x44455249505845;
      switch((int)v82)
      {
        case 1:
          uint64_t v34 = 0x45525F4D49414C43;
          unint64_t v33 = 0xEB00000000594441;
          break;
        case 2:
          uint64_t v34 = 0x474E49444E4550;
          break;
        case 3:
          uint64_t v34 = 0xD000000000000018;
          unint64_t v33 = 0x8000000100628FD0;
          break;
        case 4:
          uint64_t v42 = "PENDING_WORKFLOW";
          goto LABEL_18;
        case 5:
          uint64_t v42 = "LIVENESS_STEP_UP";
LABEL_18:
          unint64_t v33 = (unint64_t)(v42 - 32) | 0x8000000000000000;
          uint64_t v34 = 0xD000000000000010;
          break;
        default:
          break;
      }
      uint64_t v95 = sub_100110D58(v34, v33, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "updateProofingStatus called for proofingSessionID: %s and target: %s with status: %s", (uint8_t *)v30, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v79 = *(void (**)(unsigned char *, uint64_t))(v91 + 8);
    v79(v24, v92);
    uint64_t v19 = v82;
    a2 = v93;
    unint64_t v35 = v84;
    int v78 = a9;
    switch((char)v82)
    {
      case 0:
      case 1:
      case 3:
      case 4:
      case 5:
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v43) {
          goto LABEL_23;
        }
        goto LABEL_27;
      case 2:
        swift_bridgeObjectRelease();
LABEL_23:
        uint64_t v44 = v89;
        if (sub_1005D1D74(0x524F465F54494157, 0xEF4554414450555FLL, v89))
        {
          if (sub_1005D1D74(0x5F59414C50534944, 0xEF4547415353454DLL, v44)) {
            a1 = 1;
          }
          else {
            a1 = 3;
          }
        }
        else
        {
LABEL_27:
          a1 = 3;
        }
        uint64_t v81 = (uint64_t)"ERROR_PROCESSING_REQUEST";
        switch(v26)
        {
          case 0:
          case 1:
          case 2:
          case 3:
            goto LABEL_31;
          case 4:
            goto LABEL_30;
          case 5:
            if (0x8000000100629010 == (v81 | 0x8000000000000000))
            {
LABEL_30:
              uint64_t v45 = v19;
              swift_bridgeObjectRelease();
            }
            else
            {
LABEL_31:
              uint64_t v45 = v19;
              char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v46 & 1) == 0) {
                goto LABEL_36;
              }
            }
            defaultLogger()();
            uint64_t v47 = Logger.logObject.getter();
            os_log_type_t v48 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v47, v48))
            {
              uint64_t v49 = (uint8_t *)swift_slowAlloc();
              uint64_t v96 = swift_slowAlloc();
              *(_DWORD *)uint64_t v49 = 136315138;
              LOBYTE(v95) = v86;
              sub_100007764(&qword_10072F948);
              uint64_t v50 = Optional.debugDescription.getter();
              uint64_t v95 = sub_100110D58(v50, v51, &v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v47, v48, "the workflow type is %s", v49, 0xCu);
              swift_arrayDestroy();
              uint64_t v19 = v82;
              swift_slowDealloc();
              unint64_t v35 = v84;
              swift_slowDealloc();

              v79(v22, v92);
              char v52 = v86;
              a2 = v93;
            }
            else
            {

              v79(v22, v92);
              a2 = v93;
              char v52 = v86;
            }
            a1 = qword_100623578[v52];
LABEL_36:
            switch(v45)
            {
              case 0:
              case 1:
              case 3:
              case 4:
              case 5:
                char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v53) {
                  goto LABEL_39;
                }
                goto LABEL_42;
              case 2:
                swift_bridgeObjectRelease();
LABEL_39:
                uint64_t v54 = v89;
                if ((sub_1005D1D74(0x5F59414C50534944, 0xEF4547415353454DLL, v89) & 1) != 0
                  && (sub_1005D1D74(0x524F465F54494157, 0xEF4554414450555FLL, v54) & 1) == 0)
                {
                  a1 = 0;
                }
LABEL_42:
                switch((int)v19)
                {
                  case 0:
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    uint64_t v55 = v19;
                    char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v56) {
                      goto LABEL_45;
                    }
                    goto LABEL_46;
                  case 3:
                    uint64_t v55 = v19;
                    swift_bridgeObjectRelease();
LABEL_45:
                    a1 = 6;
LABEL_46:
                    switch(v55)
                    {
                      case 0:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                        uint64_t v57 = v19;
                        char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        if (v58) {
                          goto LABEL_49;
                        }
                        goto LABEL_50;
                      case 1:
                        uint64_t v57 = v19;
                        swift_bridgeObjectRelease();
LABEL_49:
                        a1 = 2;
                        break;
                      default:
                        goto LABEL_61;
                    }
                    break;
                  default:
                    goto LABEL_6;
                }
                break;
              default:
                goto LABEL_61;
            }
            break;
          default:
            goto LABEL_6;
        }
        break;
      default:
LABEL_61:
        JUMPOUT(0);
    }
LABEL_50:
    switch(v57)
    {
      case 0:
        swift_bridgeObjectRelease();
        goto LABEL_53;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v59)
        {
LABEL_53:
          swift_retain();
          uint64_t v60 = v87;
          sub_10020CEE4(v35, v80, v83);
          if (!v60) {
            return swift_release();
          }
          swift_release();
        }
        else
        {
          type metadata accessor for IdentityProofingDataContext();
          swift_allocObject();
          uint64_t v61 = v87;
          sub_1000FF820();
          uint64_t v63 = v88;
          if (!v61)
          {
            uint64_t v64 = v62;
            uint64_t v65 = (void *)swift_allocObject();
            v65[2] = v64;
            v65[3] = v35;
            uint64_t v66 = v35;
            uint64_t v67 = v80;
            uint64_t v68 = v85;
            v65[4] = v80;
            v65[5] = v68;
            v65[6] = a1;
            v65[7] = v63;
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            sub_1000FFE3C((uint64_t)sub_100486180, (uint64_t)v65);
            swift_release();
            swift_release();
            swift_retain();
            sub_1000F5200(v66, v67, (char)v82, v78 & 1);
            return swift_release();
          }
        }
        uint64_t v41 = v90;
        goto LABEL_59;
      default:
        goto LABEL_61;
    }
  }
  unint64_t v35 = 0xE300000000000000;
LABEL_6:
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136315138;
    uint64_t v96 = v39;
    if (a2) {
      uint64_t v40 = a1;
    }
    else {
      uint64_t v40 = 7104878;
    }
    swift_bridgeObjectRetain();
    uint64_t v95 = sub_100110D58(v40, v35, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Server sent an unknown pending status code: %s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(unsigned char *, uint64_t))(v91 + 8))(v19, v92);
  a2 = v93;
  uint64_t v41 = v90;
  ((void (**)(unsigned char *, void, uint64_t))v93)[13](v90, enum case for DIPError.Code.invalidPendingActionsProofingStatusCode(_:), v94);
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
LABEL_59:
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v69 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v70 = (*(unsigned __int8 *)(*(void *)v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v69 + 80);
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_100610730;
  unint64_t v72 = v71 + v70;
  uint64_t v73 = (void *)(v72 + v69[14]);
  uint64_t v74 = enum case for DIPError.PropertyKey.inoProviderID(_:);
  uint64_t v75 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 104))(v72, v74, v75);
  v73[3] = &type metadata for String;
  void *v73 = 0x61746E6567616DLL;
  v73[1] = 0xE700000000000000;
  swift_errorRetain();
  sub_10015C504(v71);
  ((void (**)(unsigned char *, void, uint64_t))a2)[13](v41, enum case for DIPError.Code.internalError(_:), v94);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return swift_errorRelease();
}

void sub_1004814E0(uint64_t a1)
{
  uint64_t v3 = __chkstk_darwin(a1);
  uint64_t v45 = v2;
  uint64_t v42 = v4;
  uint64_t v43 = v1;
  uint64_t v41 = v5;
  uint64_t v6 = v3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin(v7);
  os_log_type_t v37 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v46 = *(void *)(v9 - 8);
  uint64_t v47 = v9;
  __chkstk_darwin(v9);
  unint64_t v51 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007764((uint64_t *)&unk_100723978);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = sub_100007764(&qword_10072B400);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100007764(&qword_100723988);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v44 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v6;
  sub_100048D6C(v6, (uint64_t)v16, (uint64_t *)&unk_100723978);
  uint64_t v23 = type metadata accessor for PendingActionContext(0);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48);
  if (v24(v16, 1, v23) == 1)
  {
    sub_10000C6CC((uint64_t)v16, (uint64_t *)&unk_100723978);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
LABEL_4:
    sub_10000C6CC((uint64_t)v19, &qword_10072B400);
    (*(void (**)(char *, void, uint64_t))(v46 + 104))(v51, enum case for DIPError.Code.missingLivenessStepUpConfig(_:), v47);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  sub_100048D6C((uint64_t)&v16[*(int *)(v23 + 112)], (uint64_t)v19, &qword_10072B400);
  sub_1004863E0((uint64_t)v16, type metadata accessor for PendingActionContext);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
    goto LABEL_4;
  }
  uint64_t v25 = (uint64_t)v44;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v44, v19, v20);
  uint64_t v26 = v43;
  uint64_t v27 = *(void *)(v43 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessConfigProvider);
  uint64_t v36 = v20;
  if (v27)
  {
    swift_retain();
    uint64_t v28 = v45;
    uint64_t v29 = sub_100467120(v25, v41, v42);
    uint64_t v45 = v28;
    if (v28)
    {
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v36);
      swift_release();
      return;
    }
    uint64_t v30 = v29;
    swift_release();
    uint64_t v26 = v43;
  }
  else
  {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *(void **)(v26 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpConfig);
  *(void *)(v26 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpConfig) = v30;

  sub_100048D6C(v40, (uint64_t)v14, (uint64_t *)&unk_100723978);
  if (v24(v14, 1, v23) == 1)
  {
    sub_10000C6CC((uint64_t)v14, (uint64_t *)&unk_100723978);
LABEL_13:
    (*(void (**)(char *, void, uint64_t))(v46 + 104))(v51, enum case for DIPError.Code.missingLivenessStepUpIQModel(_:), v47);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    unint64_t v32 = v37;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v39);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v44, v36);
    swift_errorRelease();
    return;
  }
  sub_1000BEA14((uint64_t)&v14[*(int *)(v23 + 116)], (uint64_t)v48, &qword_1007222F8);
  sub_100483400(v48, sub_1000B21B4);
  sub_1004863E0((uint64_t)v14, type metadata accessor for PendingActionContext);
  sub_1000BEA14((uint64_t)v48, (uint64_t)v49, &qword_1007222F8);
  if (sub_1000FEA40((uint64_t)v49) == 1) {
    goto LABEL_13;
  }
  memcpy(v50, v49, 0x1721uLL);
  type metadata accessor for IdentityProofingImageQualitySettingsProvider();
  unint64_t v33 = (int64x2_t *)swift_allocObject();
  v33[1] = vdupq_n_s64(5uLL);
  v33[2].i64[0] = 5;
  v33[2].i32[2] = 1036831949;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  v33[3].i64[0] = JSONEncoder.init()();
  uint64_t v34 = sub_1004B52F8((uint64_t)v50);
  sub_100483400(v48, sub_1000ABBA4);
  swift_release();
  swift_setDeallocating();
  swift_deallocClassInstance();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v44, v36);
  unint64_t v35 = *(void **)(v43 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpIQSettings);
  *(void *)(v43 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpIQSettings) = v34;
}

uint64_t sub_100481CF8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = v4;
  uint64_t v11 = sub_100007764(&qword_100722C18);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for WorkflowRecommendationResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v6 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse;
  swift_beginAccess();
  sub_1004832E4((uint64_t)v13, v15);
  swift_endAccess();
  *(void *)(v6 + 24) = 0;
  swift_release();
  switch(*(unsigned char *)(v6 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_trigger))
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v16) {
LABEL_4:
      }
        sub_1005E8170();
      type metadata accessor for IdentityProofingDataContext();
      swift_allocObject();
      sub_1000FF820();
      if (!v5)
      {
        uint64_t v18 = v17;
        char v19 = a4;
        uint64_t v20 = swift_allocObject();
        *(void *)(v20 + 16) = 0;
        v23[5] = v20 + 16;
        uint64_t v21 = swift_allocObject();
        *(void *)(v21 + 16) = a3;
        *(unsigned char *)(v21 + 24) = v19 & 1;
        *(void *)(v21 + 32) = a1;
        *(void *)(v21 + 40) = a2;
        *(void *)(v21 + 48) = v18;
        *(void *)(v21 + 56) = v6;
        *(void *)(v21 + 64) = v20;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1000FFE3C((uint64_t)sub_1004833D4, v21);
        swift_release();
        swift_release();
        swift_beginAccess();
        uint64_t v6 = *(void *)(v20 + 16);
        swift_bridgeObjectRetain();
        swift_release();
      }
      return v6;
  }
}

void sub_100482020(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v121 = a6;
  uint64_t v122 = a5;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v111 - v17;
  __chkstk_darwin(v16);
  uint64_t v22 = (char *)&v111 - v21;
  uint64_t v23 = (unint64_t *)(a7 + 16);
  if (a2)
  {
    if (!a4) {
      return;
    }
    uint64_t v115 = v20;
    uint64_t v119 = a3;
    uint64_t v120 = v19;
    os_log_type_t v118 = v23;
    swift_bridgeObjectRetain();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v116 = v7;
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v123._uint64_t countAndFlagsBits = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v117 = v14;
      uint64_t v28 = v119;
      uint64_t v124 = sub_100110D58(v119, (unint64_t)a4, &v123._countAndFlagsBits);
      uint64_t v8 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Requesting pending actions with proofingSessionID: %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v29 = *(void (**)(char *))(v120 + 8);
      uint64_t v30 = v117;
      v29(v18);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      uint64_t v29 = *(void (**)(char *))(v120 + 8);
      uint64_t v30 = v14;
      ((void (*)(char *, uint64_t))v29)(v18, v14);
      uint64_t v28 = v119;
    }
    sub_1001002FC(v28, (uint64_t)a4);
    if (v8) {
      goto LABEL_10;
    }
    unint64_t v47 = v31;
    if (!v31) {
      goto LABEL_10;
    }
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v110 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v110) {
        goto LABEL_21;
      }
    }
    else if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_21:
      if ((v47 & 0xC000000000000001) != 0)
      {
        id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v48 = *(id *)(v47 + 32);
      }
      uint64_t v49 = v48;
      swift_bridgeObjectRelease();
      id v50 = [v49 workflowID];
      if (v50)
      {
        unint64_t v51 = v50;
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v54 = v53;

        [v49 target];
        uint64_t v55 = IdentityTarget.init(rawValue:)();
        if ((v56 & 1) != 0
          || (uint64_t v57 = v55, (v58 = [v49 credentialIdentifier]) == 0))
        {

          swift_bridgeObjectRelease();
        }
        else
        {
          char v59 = v58;
          uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v117 = v60;

          id v61 = [v49 country];
          uint64_t v122 = v57;
          if (v61)
          {
            uint64_t v62 = v61;
            uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v114 = v63;
          }
          else
          {
            uint64_t v113 = 0;
            uint64_t v114 = (char *)0xE000000000000000;
          }
          uint64_t v116 = v52;
          id v78 = [v49 lastExecutedActionIdentifier];
          if (v78)
          {
            uint64_t v79 = v78;
            uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v82 = v81;

            uint64_t v83 = v80;
          }
          else
          {
            uint64_t v83 = 0;
            uint64_t v82 = 0;
          }
          sub_1004740E8(v116, v54, v113, v114, v119, (unint64_t)a4, v83, v82, v122);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v84 = v115;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v85 = (char *)Logger.logObject.getter();
          os_log_type_t v86 = static os_log_type_t.debug.getter();
          int v87 = v86;
          if (os_log_type_enabled((os_log_t)v85, v86))
          {
            uint64_t v88 = swift_slowAlloc();
            uint64_t v114 = v85;
            uint64_t v89 = v88;
            uint64_t v121 = swift_slowAlloc();
            v123._uint64_t countAndFlagsBits = v121;
            *(_DWORD *)uint64_t v89 = 136315394;
            uint64_t v116 = 0;
            swift_bridgeObjectRetain();
            uint64_t v124 = sub_100110D58(v119, (unint64_t)a4, &v123._countAndFlagsBits);
            LODWORD(v113) = v87;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v89 + 12) = 2080;
            uint64_t v90 = v122;
            uint64_t v91 = IdentityTarget.debugDescription.getter();
            uint64_t v124 = sub_100110D58(v91, v92, &v123._countAndFlagsBits);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v93 = v114;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v114, (os_log_type_t)v113, "Successfully requested pending actions with %s for target: %s", (uint8_t *)v89, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v94 = v30;
            uint64_t v95 = v119;
            ((void (*)(uint64_t, uint64_t))v29)(v115, v94);
            uint64_t v96 = v118;
          }
          else
          {
            swift_bridgeObjectRelease_n();

            ((void (*)(uint64_t, uint64_t))v29)(v84, v30);
            uint64_t v96 = v118;
            uint64_t v95 = v119;
            uint64_t v90 = v122;
          }
          v123._uint64_t countAndFlagsBits = 0;
          v123._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(61);
          v101._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
          v101._object = (void *)0x800000010064E640;
          String.append(_:)(v101);
          v102._uint64_t countAndFlagsBits = v95;
          v102._object = a4;
          String.append(_:)(v102);
          v103._uint64_t countAndFlagsBits = 0x72617420726F6620;
          v103._object = (void *)0xED0000203A746567;
          String.append(_:)(v103);
          v104._uint64_t countAndFlagsBits = IdentityTarget.debugDescription.getter();
          String.append(_:)(v104);
          swift_bridgeObjectRelease();
          v105._uint64_t countAndFlagsBits = 0x3964373763333437;
          v105._object = (void *)0xE800000000000000;
          logMilestone(tag:description:)(v105, v123);
          swift_bridgeObjectRelease();
          sub_100007764(&qword_10072F940);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100610730;
          *(void *)(inited + 32) = 0xD000000000000010;
          *(void *)(inited + 40) = 0x80000001006349A0;
          type metadata accessor for IdentityProofingMetadata();
          uint64_t v107 = (void *)swift_allocObject();
          v107[2] = v95;
          v107[3] = a4;
          uint64_t v108 = v112;
          v107[4] = v90;
          v107[5] = v108;
          v107[6] = v117;
          *(void *)(inited + 48) = v107;
          unint64_t v109 = sub_10015E9DC(inited);

          swift_beginAccess();
          unint64_t *v96 = v109;
        }
      }
      else
      {
      }
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  if (a4)
  {
    uint64_t v120 = v19;
    swift_bridgeObjectRetain();
    sub_10010096C(a3, (uint64_t)a4);
    if (!v7)
    {
      unint64_t v32 = v24;
      uint64_t v119 = a3;
      if (v24)
      {
        os_log_type_t v118 = v23;
        id v33 = [v24 workflowID];
        if (v33)
        {
          uint64_t v34 = v33;
          uint64_t v117 = v14;
          uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v36 = v35;

          [v32 target];
          uint64_t v37 = IdentityTarget.init(rawValue:)();
          if ((v38 & 1) != 0
            || (v39 = v37, (id v40 = [v32 credentialIdentifier]) == 0))
          {

            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v41 = v40;
            uint64_t v112 = v39;
            uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v43 = v42;

            id v44 = [v32 country];
            uint64_t v115 = v43;
            if (v44)
            {
              uint64_t v45 = v44;
              uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v114 = v46;
            }
            else
            {
              uint64_t v116 = 0;
              uint64_t v114 = (char *)0xE000000000000000;
            }
            id v64 = [v32 lastExecutedActionIdentifier];
            if (v64)
            {
              uint64_t v65 = v64;
              uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v68 = v67;
            }
            else
            {
              uint64_t v66 = 0;
              uint64_t v68 = 0;
            }
            uint64_t v69 = v122;
            uint64_t v122 = v36;
            sub_1004740E8(v69, v36, v116, v114, v119, (unint64_t)a4, v66, v68, a1);
            uint64_t v116 = 0;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            defaultLogger()();
            swift_bridgeObjectRetain_n();
            unint64_t v70 = Logger.logObject.getter();
            os_log_type_t v71 = static os_log_type_t.debug.getter();
            int v72 = v71;
            if (os_log_type_enabled(v70, v71))
            {
              uint64_t v73 = swift_slowAlloc();
              uint64_t v122 = swift_slowAlloc();
              v123._uint64_t countAndFlagsBits = v122;
              *(_DWORD *)uint64_t v73 = 136315394;
              LODWORD(v121) = v72;
              swift_bridgeObjectRetain();
              uint64_t v124 = sub_100110D58(v119, (unint64_t)a4, &v123._countAndFlagsBits);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v73 + 12) = 2080;
              uint64_t v74 = IdentityTarget.debugDescription.getter();
              uint64_t v124 = sub_100110D58(v74, v75, &v123._countAndFlagsBits);
              uint64_t v76 = v119;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v121, "Successfully requested pending actions with %s for target: %s", (uint8_t *)v73, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v120 + 8))(v22, v117);
              uint64_t v77 = v118;
            }
            else
            {
              swift_bridgeObjectRelease_n();

              (*(void (**)(char *, uint64_t))(v120 + 8))(v22, v117);
              uint64_t v77 = v118;
              uint64_t v76 = v119;
            }
            sub_100007764(&qword_10072F940);
            uint64_t v97 = swift_initStackObject();
            *(_OWORD *)(v97 + 16) = xmmword_100610730;
            *(void *)(v97 + 32) = 0xD000000000000010;
            *(void *)(v97 + 40) = 0x80000001006349A0;
            type metadata accessor for IdentityProofingMetadata();
            unint64_t v98 = (void *)swift_allocObject();
            v98[2] = v76;
            v98[3] = a4;
            uint64_t v99 = v113;
            v98[4] = a1;
            v98[5] = v99;
            v98[6] = v115;
            *(void *)(v97 + 48) = v98;
            unint64_t v100 = sub_10015E9DC(v97);

            swift_beginAccess();
            unint64_t *v77 = v100;
          }
        }
        else
        {
        }
      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100482D40()
{
  swift_release();
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse, &qword_100722C18);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_staticWorkflow, &qword_10072F9B8);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100482E58()
{
  sub_100482D40();

  return swift_deallocClassInstance();
}

uint64_t sub_100482EB0()
{
  return type metadata accessor for IdentityProofingPendingActionsFlow();
}

uint64_t type metadata accessor for IdentityProofingPendingActionsFlow()
{
  uint64_t result = qword_10072F5C8;
  if (!qword_10072F5C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100482F04()
{
  sub_100483050(319, &qword_10072BD20, (void (*)(uint64_t))type metadata accessor for WorkflowRecommendationResponse);
  if (v0 <= 0x3F)
  {
    sub_100483050(319, (unint64_t *)&qword_10072F5E8, (void (*)(uint64_t))type metadata accessor for IdentityProofingStaticWorkflow);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100483050(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for IdentityProofingPendingActionsFlow.Trigger(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100483170);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingPendingActionsFlow.Trigger()
{
  return &type metadata for IdentityProofingPendingActionsFlow.Trigger;
}

unint64_t sub_1004831AC()
{
  unint64_t result = qword_10072F938;
  if (!qword_10072F938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072F938);
  }
  return result;
}

unint64_t sub_100483200(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F0E80, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unint64_t sub_10048324C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3918, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

unint64_t sub_100483298(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3A10, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_1004832E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100722C18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10048334C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100483384()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_1004833D4()
{
  sub_100482020(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

#error "10048610C: call analysis failed (funcsize=2893)"

uint64_t sub_100486138()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100486180()
{
  sub_100474E3C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(char **)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1004861A4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1004861EC()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[2] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100025D64;
  return sub_100475D64(v2, v3);
}

uint64_t sub_1004862D8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100486310()
{
  return _swift_deallocObject(v0, 33, 7);
}

id sub_100486348()
{
  return sub_100033160(*(id *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_100486354()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100486364(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100486374()
{
  return swift_release();
}

uint64_t sub_10048637C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != 2)
  {
    sub_100403B30(result, a2);
    return sub_100403B30(a5, a6);
  }
  return result;
}

uint64_t sub_1004863E0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100486440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a4;
  uint64_t v42 = a3;
  uint64_t v40 = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v38[1] = *(void *)(v5 - 8);
  v38[2] = v5;
  __chkstk_darwin(v5);
  v38[3] = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for IdentityProofingIDType();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  uint64_t v8 = *(void *)(v43 + 64);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v39 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v45 = (char *)v38 - v10;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v38 - v16;
  defaultLogger()();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Attempting to save the ID Type sent from the server", v20, 2u);
    swift_slowDealloc();
  }

  uint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v17, v11);
  sub_1000BEA14(a1 + 136, (uint64_t)v47, &qword_10072CF88);
  sub_1000BEA14((uint64_t)v47, (uint64_t)&v48, &qword_10072CF88);
  if (v49 == 1
    || (long long v50 = v48,
        uint64_t v51 = v49,
        sub_1000BEA14((uint64_t)&v50, (uint64_t)&v52, &qword_10072F9B0),
        sub_1000BEA14((uint64_t)&v52, (uint64_t)&v53, &qword_10072F9B0),
        v53 == 2))
  {
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "ID TYPE not sent from the server", v24, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(char *, uint64_t))v21)(v15, v11);
  }
  else
  {
    uint64_t v27 = v43;
    uint64_t v26 = v44;
    if (v53) {
      uint64_t v28 = (unsigned int *)&enum case for IdentityProofingIDType.stateID(_:);
    }
    else {
      uint64_t v28 = (unsigned int *)&enum case for IdentityProofingIDType.dl(_:);
    }
    uint64_t v29 = v45;
    (*(void (**)(char *, void, uint64_t))(v43 + 104))(v45, *v28, v44);
    type metadata accessor for IdentityProofingDataContext();
    swift_allocObject();
    uint64_t v30 = v46;
    sub_1000FF820();
    if (v30)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    }
    else
    {
      uint64_t v32 = v31;
      id v33 = v39;
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v39, v29, v26);
      unint64_t v34 = (*(unsigned __int8 *)(v27 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      uint64_t v35 = (char *)swift_allocObject();
      uint64_t v36 = v40;
      *((void *)v35 + 2) = v32;
      *((void *)v35 + 3) = v36;
      uint64_t v37 = v41;
      *((void *)v35 + 4) = v42;
      *((void *)v35 + 5) = v37;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v35[v34], v33, v26);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1000FFE3C((uint64_t)sub_1004905BC, (uint64_t)v35);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
      swift_release();
      return swift_release();
    }
  }
}

uint64_t sub_100486B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v21 = a3;
  uint64_t v19 = a2;
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v22 - 8);
  uint64_t v5 = __chkstk_darwin(v22);
  os_log_type_t v23 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for ActionRequest(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v12 = v11;
  sub_100487074(a1, (uint64_t)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v15 = v19;
  v14[2] = v12;
  v14[3] = v15;
  uint64_t v16 = v20;
  v14[4] = v21;
  v14[5] = v16;
  sub_10048FE30((uint64_t)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v14 + v13, type metadata accessor for ActionRequest);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000FFE3C((uint64_t)sub_10048ABA4, (uint64_t)v14);
  swift_release();
  return swift_release();
}

uint64_t sub_100487074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004870D8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100487120()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10000C494;
  *(void *)(v3 + 136) = v2;
  *(_OWORD *)(v3 + 120) = v5;
  return _swift_task_switch(sub_10047E11C, 0, 0);
}

uint64_t sub_1004871DC()
{
  uint64_t v1 = type metadata accessor for ActionRequest(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_bridgeObjectRelease();
  long long v5 = (void *)(v0 + v3 + *(int *)(v1 + 20));
  uint64_t v6 = (int *)type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(*((void *)v6 - 1) + 48))(v5, 1, v6)) {
    goto LABEL_727;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v5[15];
  if (v7 == 1) {
    goto LABEL_5;
  }
  if (v7 != 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    if (v5[19] != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (v5[23] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v23 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5[31] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = (char *)v5 + v6[17];
  uint64_t v9 = type metadata accessor for WorkflowRecommendationResponse();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v22 = (v2 + 24) & ~v2;
    uint64_t v10 = v2;
    if (*((void *)v8 + 3))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v11 = &v8[*(int *)(v9 + 20)];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = type metadata accessor for Workflow();
    unint64_t v13 = &v11[*(int *)(v12 + 72)];
    uint64_t v14 = type metadata accessor for HardwareAttestationType();
    uint64_t v15 = *(void *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = &v11[*(int *)(v12 + 152)];
    uint64_t v2 = v10;
    if (*((void *)v16 + 1) != 1)
    {
      swift_bridgeObjectRelease();
      if (*((void *)v16 + 104) != 1)
      {
        if (*((void *)v16 + 2) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 6) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 10) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 14) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 18) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 22) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 26) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 30) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 34) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 38) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 42) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 46) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 50) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 54) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 58) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 62) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 66) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 70) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 74) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 78) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 82) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 86) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 90) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 94) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v16 + 208) != 1)
      {
        if (*((void *)v16 + 106) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 110) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 114) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 118) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 122) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 126) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 130) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 134) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 138) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 142) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 146) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 150) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 154) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 158) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 162) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 166) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 170) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 174) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 178) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 182) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 186) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 190) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 194) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 198) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v16 + 312) != 1)
      {
        if (*((void *)v16 + 210) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 214) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 218) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 222) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 226) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 230) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 234) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 238) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 242) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 246) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 250) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 254) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 258) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 262) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 266) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 270) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 274) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 278) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 282) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 286) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 290) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 294) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 298) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 302) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v16 + 416) != 1)
      {
        if (*((void *)v16 + 314) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 318) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 322) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 326) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 330) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 334) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 338) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 342) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 346) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 350) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 354) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 358) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 362) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 366) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 370) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 374) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 378) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 382) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 386) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 390) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 394) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 398) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 402) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 406) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v16 + 520) != 1)
      {
        if (*((void *)v16 + 418) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 422) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 426) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 430) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 434) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 438) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 442) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 446) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 450) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 454) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 458) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 462) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 466) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 470) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 474) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 478) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 482) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 486) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 490) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 494) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 498) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 502) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 506) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 510) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v16 + 624) != 1)
      {
        if (*((void *)v16 + 522) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 526) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 530) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 534) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 538) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 542) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 546) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 550) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 554) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 558) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 562) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 566) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 570) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 574) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 578) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 582) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 586) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 590) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 594) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 598) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 602) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 606) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 610) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 614) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v16 + 728) != 1)
      {
        if (*((void *)v16 + 626) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 630) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 634) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 638) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 642) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 646) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 650) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 654) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 658) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 662) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 666) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 670) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 674) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 678) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 682) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 686) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 690) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 694) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 698) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 702) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 706) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 710) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 714) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v16 + 718) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v22;
  }
  swift_bridgeObjectRelease();
  if (*(void *)((char *)v5 + v6[25] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)((char *)v5 + v6[26] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = (char *)v5 + v6[28];
  uint64_t v18 = sub_100007764(&qword_100723988);
  uint64_t v19 = *(void *)(v18 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
  }
  uint64_t v20 = (void *)((char *)v5 + v6[29]);
  uint64_t v4 = v23;
  if (v20[1] != 1)
  {
    swift_bridgeObjectRelease();
    if (v20[104] != 1)
    {
      if (v20[2] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[6] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[10] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[14] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[18] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[22] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[26] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[30] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[34] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[38] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[42] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[46] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[50] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[54] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[58] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[62] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[66] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[70] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[74] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[78] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[82] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[86] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[90] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[94] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v20[208] != 1)
    {
      if (v20[106] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[110] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[114] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[118] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[122] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[126] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[130] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[134] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[138] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[142] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[146] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[150] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[154] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[158] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[162] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[166] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[170] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[174] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[178] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[182] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[186] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[190] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[194] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[198] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v20[312] != 1)
    {
      if (v20[210] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[214] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[218] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[222] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[226] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[230] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[234] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[238] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[242] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[246] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[250] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[254] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[258] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[262] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[266] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[270] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[274] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[278] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[282] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[286] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[290] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[294] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[298] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[302] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v20[416] != 1)
    {
      if (v20[314] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[318] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[322] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[326] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[330] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[334] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[338] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[342] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[346] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[350] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[354] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[358] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[362] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[366] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[370] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[374] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[378] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[382] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[386] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[390] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[394] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[398] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[402] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[406] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v20[520] != 1)
    {
      if (v20[418] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[422] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[426] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[430] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[434] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[438] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[442] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[446] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[450] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[454] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[458] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[462] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[466] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[470] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[474] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[478] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[482] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[486] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[490] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[494] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[498] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[502] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[506] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[510] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v20[624] != 1)
    {
      if (v20[522] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[526] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[530] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[534] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[538] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[542] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[546] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[550] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[554] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[558] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[562] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[566] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[570] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[574] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[578] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[582] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[586] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[590] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[594] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[598] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[602] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[606] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[610] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[614] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v20[728] != 1)
    {
      if (v20[626] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[630] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[634] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[638] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[642] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[646] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[650] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[654] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[658] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[662] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[666] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[670] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[674] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[678] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[682] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[686] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[690] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[694] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[698] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[702] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[706] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[710] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[714] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v20[718] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
LABEL_727:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100488DD8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ActionRequest(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + v6 + 8);
  uint64_t v11 = *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  void *v12 = v2;
  v12[1] = sub_10000C494;
  return sub_10047E024(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_100488F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100722C18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100488F7C()
{
  return sub_1004905FC(type metadata accessor for ActionRequest, (uint64_t (*)(void, void, void, void, char *))sub_10047E3F4);
}

uint64_t sub_100488FC0()
{
  uint64_t v1 = type metadata accessor for ActionRequest(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = (void *)(v0 + v3 + *(int *)(v1 + 20));
  unint64_t v6 = (int *)type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(*((void *)v6 - 1) + 48))(v5, 1, v6)) {
    goto LABEL_727;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v5[15];
  if (v7 == 1) {
    goto LABEL_5;
  }
  if (v7 != 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    if (v5[19] != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (v5[23] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5[31] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = (char *)v5 + v6[17];
  uint64_t v9 = type metadata accessor for WorkflowRecommendationResponse();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v23 = (v2 + 48) & ~v2;
    uint64_t v10 = v4;
    uint64_t v11 = v2;
    if (*((void *)v8 + 3))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = &v8[*(int *)(v9 + 20)];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = type metadata accessor for Workflow();
    uint64_t v14 = &v12[*(int *)(v13 + 72)];
    uint64_t v15 = type metadata accessor for HardwareAttestationType();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = &v12[*(int *)(v13 + 152)];
    uint64_t v2 = v11;
    uint64_t v4 = v10;
    if (*((void *)v17 + 1) != 1)
    {
      swift_bridgeObjectRelease();
      if (*((void *)v17 + 104) != 1)
      {
        if (*((void *)v17 + 2) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 6) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 10) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 14) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 18) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 22) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 26) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 30) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 34) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 38) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 42) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 46) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 50) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 54) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 58) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 62) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 66) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 70) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 74) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 78) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 82) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 86) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 90) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 94) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 208) != 1)
      {
        if (*((void *)v17 + 106) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 110) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 114) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 118) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 122) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 126) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 130) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 134) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 138) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 142) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 146) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 150) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 154) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 158) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 162) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 166) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 170) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 174) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 178) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 182) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 186) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 190) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 194) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 198) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 312) != 1)
      {
        if (*((void *)v17 + 210) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 214) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 218) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 222) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 226) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 230) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 234) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 238) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 242) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 246) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 250) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 254) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 258) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 262) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 266) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 270) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 274) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 278) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 282) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 286) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 290) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 294) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 298) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 302) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 416) != 1)
      {
        if (*((void *)v17 + 314) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 318) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 322) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 326) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 330) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 334) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 338) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 342) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 346) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 350) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 354) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 358) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 362) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 366) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 370) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 374) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 378) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 382) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 386) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 390) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 394) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 398) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 402) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 406) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 520) != 1)
      {
        if (*((void *)v17 + 418) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 422) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 426) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 430) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 434) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 438) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 442) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 446) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 450) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 454) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 458) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 462) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 466) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 470) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 474) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 478) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 482) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 486) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 490) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 494) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 498) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 502) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 506) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 510) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 624) != 1)
      {
        if (*((void *)v17 + 522) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 526) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 530) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 534) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 538) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 542) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 546) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 550) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 554) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 558) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 562) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 566) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 570) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 574) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 578) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 582) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 586) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 590) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 594) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 598) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 602) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 606) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 610) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 614) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 728) != 1)
      {
        if (*((void *)v17 + 626) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 630) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 634) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 638) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 642) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 646) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 650) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 654) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 658) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 662) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 666) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 670) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 674) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 678) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 682) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 686) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 690) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 694) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 698) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 702) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 706) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 710) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 714) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 718) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v23;
  }
  swift_bridgeObjectRelease();
  if (*(void *)((char *)v5 + v6[25] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)((char *)v5 + v6[26] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = (char *)v5 + v6[28];
  uint64_t v19 = sub_100007764(&qword_100723988);
  uint64_t v20 = *(void *)(v19 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  }
  uint64_t v21 = (void *)((char *)v5 + v6[29]);
  if (v21[1] != 1)
  {
    swift_bridgeObjectRelease();
    if (v21[104] != 1)
    {
      if (v21[2] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[6] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[10] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[14] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[18] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[22] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[26] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[30] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[34] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[38] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[42] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[46] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[50] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[54] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[58] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[62] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[66] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[70] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[74] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[78] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[82] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[86] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[90] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[94] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[208] != 1)
    {
      if (v21[106] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[110] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[114] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[118] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[122] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[126] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[130] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[134] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[138] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[142] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[146] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[150] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[154] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[158] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[162] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[166] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[170] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[174] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[178] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[182] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[186] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[190] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[194] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[198] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[312] != 1)
    {
      if (v21[210] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[214] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[218] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[222] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[226] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[230] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[234] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[238] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[242] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[246] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[250] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[254] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[258] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[262] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[266] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[270] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[274] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[278] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[282] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[286] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[290] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[294] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[298] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[302] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[416] != 1)
    {
      if (v21[314] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[318] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[322] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[326] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[330] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[334] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[338] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[342] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[346] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[350] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[354] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[358] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[362] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[366] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[370] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[374] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[378] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[382] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[386] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[390] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[394] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[398] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[402] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[406] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[520] != 1)
    {
      if (v21[418] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[422] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[426] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[430] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[434] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[438] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[442] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[446] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[450] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[454] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[458] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[462] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[466] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[470] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[474] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[478] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[482] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[486] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[490] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[494] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[498] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[502] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[506] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[510] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[624] != 1)
    {
      if (v21[522] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[526] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[530] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[534] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[538] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[542] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[546] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[550] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[554] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[558] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[562] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[566] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[570] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[574] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[578] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[582] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[586] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[590] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[594] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[598] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[602] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[606] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[610] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[614] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[728] != 1)
    {
      if (v21[626] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[630] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[634] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[638] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[642] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[646] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[650] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[654] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[658] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[662] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[666] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[670] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[674] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[678] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[682] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[686] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[690] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[694] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[698] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[702] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[706] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[710] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[714] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[718] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
LABEL_727:
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10048ABA4()
{
  return sub_1004905FC(type metadata accessor for ActionRequest, (uint64_t (*)(void, void, void, void, char *))sub_10047EACC);
}

uint64_t sub_10048ABE4()
{
  uint64_t v1 = *(void *)(sub_100007764((uint64_t *)&unk_100723978) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v5 = (void *)(v0 + v3);
  unint64_t v6 = (int *)type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48))(v0 + v3, 1, v6)) {
    goto LABEL_727;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v5[15];
  if (v7 == 1) {
    goto LABEL_5;
  }
  if (v7 != 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    if (v5[19] != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (v5[23] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5[31] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = (char *)v5 + v6[17];
  uint64_t v9 = type metadata accessor for WorkflowRecommendationResponse();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v23 = v2;
    uint64_t v10 = (v2 + 48) & ~v2;
    uint64_t v11 = v4;
    if (*((void *)v8 + 3))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = &v8[*(int *)(v9 + 20)];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = type metadata accessor for Workflow();
    uint64_t v14 = &v12[*(int *)(v13 + 72)];
    uint64_t v15 = type metadata accessor for HardwareAttestationType();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = &v12[*(int *)(v13 + 152)];
    uint64_t v4 = v11;
    uint64_t v3 = v10;
    uint64_t v2 = v23;
    if (*((void *)v17 + 1) != 1)
    {
      swift_bridgeObjectRelease();
      if (*((void *)v17 + 104) != 1)
      {
        if (*((void *)v17 + 2) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 6) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 10) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 14) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 18) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 22) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 26) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 30) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 34) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 38) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 42) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 46) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 50) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 54) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 58) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 62) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 66) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 70) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 74) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 78) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 82) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 86) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 90) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 94) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 208) != 1)
      {
        if (*((void *)v17 + 106) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 110) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 114) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 118) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 122) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 126) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 130) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 134) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 138) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 142) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 146) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 150) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 154) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 158) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 162) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 166) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 170) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 174) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 178) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 182) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 186) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 190) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 194) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 198) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 312) != 1)
      {
        if (*((void *)v17 + 210) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 214) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 218) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 222) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 226) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 230) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 234) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 238) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 242) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 246) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 250) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 254) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 258) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 262) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 266) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 270) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 274) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 278) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 282) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 286) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 290) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 294) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 298) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 302) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 416) != 1)
      {
        if (*((void *)v17 + 314) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 318) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 322) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 326) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 330) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 334) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 338) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 342) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 346) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 350) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 354) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 358) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 362) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 366) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 370) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 374) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 378) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 382) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 386) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 390) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 394) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 398) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 402) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 406) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 520) != 1)
      {
        if (*((void *)v17 + 418) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 422) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 426) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 430) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 434) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 438) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 442) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 446) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 450) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 454) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 458) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 462) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 466) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 470) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 474) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 478) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 482) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 486) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 490) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 494) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 498) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 502) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 506) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 510) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 624) != 1)
      {
        if (*((void *)v17 + 522) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 526) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 530) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 534) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 538) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 542) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 546) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 550) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 554) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 558) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 562) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 566) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 570) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 574) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 578) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 582) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 586) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 590) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 594) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 598) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 602) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 606) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 610) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 614) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 728) != 1)
      {
        if (*((void *)v17 + 626) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 630) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 634) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 638) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 642) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 646) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 650) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 654) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 658) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 662) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 666) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 670) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 674) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 678) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 682) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 686) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 690) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 694) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 698) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 702) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 706) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 710) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 714) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 718) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(void *)((char *)v5 + v6[25] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)((char *)v5 + v6[26] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = (char *)v5 + v6[28];
  uint64_t v19 = sub_100007764(&qword_100723988);
  uint64_t v20 = *(void *)(v19 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  }
  uint64_t v21 = (void *)((char *)v5 + v6[29]);
  if (v21[1] != 1)
  {
    swift_bridgeObjectRelease();
    if (v21[104] != 1)
    {
      if (v21[2] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[6] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[10] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[14] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[18] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[22] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[26] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[30] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[34] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[38] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[42] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[46] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[50] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[54] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[58] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[62] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[66] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[70] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[74] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[78] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[82] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[86] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[90] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[94] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[208] != 1)
    {
      if (v21[106] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[110] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[114] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[118] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[122] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[126] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[130] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[134] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[138] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[142] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[146] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[150] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[154] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[158] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[162] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[166] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[170] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[174] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[178] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[182] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[186] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[190] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[194] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[198] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[312] != 1)
    {
      if (v21[210] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[214] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[218] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[222] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[226] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[230] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[234] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[238] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[242] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[246] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[250] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[254] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[258] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[262] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[266] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[270] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[274] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[278] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[282] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[286] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[290] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[294] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[298] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[302] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[416] != 1)
    {
      if (v21[314] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[318] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[322] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[326] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[330] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[334] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[338] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[342] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[346] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[350] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[354] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[358] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[362] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[366] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[370] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[374] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[378] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[382] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[386] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[390] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[394] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[398] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[402] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[406] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[520] != 1)
    {
      if (v21[418] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[422] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[426] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[430] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[434] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[438] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[442] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[446] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[450] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[454] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[458] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[462] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[466] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[470] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[474] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[478] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[482] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[486] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[490] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[494] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[498] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[502] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[506] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[510] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[624] != 1)
    {
      if (v21[522] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[526] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[530] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[534] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[538] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[542] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[546] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[550] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[554] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[558] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[562] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[566] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[570] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[574] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[578] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[582] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[586] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[590] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[594] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[598] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[602] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[606] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[610] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[614] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[728] != 1)
    {
      if (v21[626] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[630] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[634] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[638] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[642] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[646] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[650] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[654] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[658] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[662] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[666] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[670] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[674] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[678] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[682] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[686] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[690] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[694] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[698] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[702] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[706] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[710] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[714] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[718] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
LABEL_727:

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_10048C790()
{
  uint64_t v1 = *(void *)(sub_100007764((uint64_t *)&unk_100723978) - 8);
  sub_100478DA8(*(void (***)(char *, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_10048C800()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10048C838()
{
  return sub_1004E7DEC(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10048C840()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10048C850()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10048C860(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v29 - 8);
  uint64_t v4 = __chkstk_darwin(v29);
  unint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t v9 = sub_100007764(&qword_1007285D0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for IdentityProofingIDType();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v28 - v17;
  if (a2)
  {
    swift_bridgeObjectRetain();
    IdentityProofingIDType.init(rawValue:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_10000C6CC((uint64_t)v11, &qword_1007285D0);
      defaultLogger()();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "identityTypeToIdentityPassType -> Invalid IDType in the proofing session", v21, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v29);
    }
    else
    {
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v26(v18, v11, v12);
      v26(v16, v18, v12);
      int v27 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
      if (v27 == enum case for IdentityProofingIDType.stateID(_:)) {
        return 2;
      }
      if (v27 == enum case for IdentityProofingIDType.dl(_:)) {
        return 1;
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    }
  }
  else
  {
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    uint64_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v23, "identityTypeToIdentityPassType -> IDType is nil in the proofing session ", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v29);
  }
  return 0;
}

uint64_t sub_10048CC34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  id v58 = a4;
  uint64_t v67 = a5;
  uint64_t v62 = type metadata accessor for DIPError.Code();
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v63 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPError();
  uint64_t v65 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v64 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v11 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  v54[1] = (char *)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v60 = (char *)v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v54 - v17;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v66 = v9;
  uint64_t v69 = v13;
  uint64_t v68 = v14;
  uint64_t v57 = a3;
  uint64_t v56 = a1;
  unint64_t v55 = a2;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v72 = sub_100110D58(a1, a2, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v23 = IdentityTarget.debugDescription.getter();
    uint64_t v72 = sub_100110D58(v23, v24, &v73);
    uint64_t v25 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "fetchAndUpdateProofingSession called for proofingSessionID: %s and target: %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    uint64_t v26 = v69;
    uint64_t v27 = v68;
    swift_slowDealloc();
    swift_slowDealloc();

    char v59 = *(void (**)(char *, uint64_t))(v27 + 8);
    v59(v18, v26);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    char v59 = *(void (**)(char *, uint64_t))(v14 + 8);
    v59(v18, v13);
    uint64_t v25 = v11;
  }
  uint64_t v28 = swift_allocObject();
  type metadata accessor for IdentityProofingDataContext();
  *(void *)(v28 + 16) = 0;
  *(void *)(v28 + 24) = 0;
  swift_allocObject();
  sub_1000FF820();
  uint64_t v71 = v28;
  uint64_t v30 = v29;
  v54[5] = v25;
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_100611090;
  v54[2] = v31 + 16;
  *(_OWORD *)(v31 + 32) = 0u;
  *(_OWORD *)(v31 + 48) = 0u;
  *(_OWORD *)(v31 + 64) = 0u;
  *(_OWORD *)(v31 + 80) = 0u;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = 0;
  *(void *)(v32 + 24) = 0;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = 0;
  *(void *)(v33 + 24) = 0;
  unint64_t v34 = v58;
  long long v35 = *v58;
  long long v75 = v58[1];
  long long v76 = v35;
  long long v74 = v58[2];
  uint64_t v36 = swift_allocObject();
  long long v37 = v34[1];
  *(_OWORD *)(v36 + 72) = *v34;
  uint64_t v38 = v56;
  *(void *)(v36 + 16) = v30;
  *(void *)(v36 + 24) = v38;
  uint64_t v39 = v57;
  *(void *)(v36 + 32) = v55;
  *(void *)(v36 + 40) = v39;
  *(void *)(v36 + 48) = v28;
  *(void *)(v36 + 56) = v33;
  *(void *)(v36 + 64) = v32;
  *(_OWORD *)(v36 + 88) = v37;
  long long v40 = v34[2];
  uint64_t v41 = v32;
  *(_OWORD *)(v36 + 104) = v40;
  *(void *)(v36 + 120) = v31;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1001061B8((uint64_t)&v76);
  sub_1001061B8((uint64_t)&v75);
  sub_1001061B8((uint64_t)&v74);
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_10049035C, v36);
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v44 = *(void *)(v31 + 24);
  uint64_t v68 = *(void *)(v31 + 16);
  uint64_t v45 = *(void *)(v31 + 32);
  uint64_t v46 = *(void *)(v31 + 40);
  uint64_t v70 = v33;
  uint64_t v69 = v41;
  uint64_t v48 = *(void *)(v31 + 48);
  uint64_t v47 = *(void *)(v31 + 56);
  uint64_t v50 = *(void *)(v31 + 64);
  uint64_t v49 = *(void *)(v31 + 72);
  uint64_t v51 = *(void *)(v31 + 80);
  unint64_t v52 = *(void *)(v31 + 88);
  sub_10049000C(v68, v44, v45, v46, v48, v47, v50, v49, v51, v52);
  swift_release();
  uint64_t v53 = v68;
  swift_release();
  swift_release();
  uint64_t v71 = v70;
  uint64_t result = swift_release();
  uint64_t v43 = v67;
  *uint64_t v67 = v53;
  v43[1] = v44;
  v43[2] = v45;
  v43[3] = v46;
  v43[4] = v48;
  v43[5] = v47;
  v43[6] = v50;
  v43[7] = v49;
  v43[8] = v51;
  v43[9] = v52;
  return result;
}

uint64_t sub_10048D788(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v73 = a6;
  uint64_t v69 = a5;
  uint64_t v70 = a4;
  uint64_t v82 = a3;
  uint64_t v8 = sub_100007764((uint64_t *)&unk_100723978);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for PendingActionContext(0);
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v12 = (uint64_t *)((char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  long long v74 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v79 = (char *)&v69 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v80 = (char *)&v69 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  long long v76 = (char *)&v69 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  long long v75 = (char *)&v69 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v71 = (char *)&v69 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v69 - v27;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v72 = v13;
    uint64_t v31 = swift_slowAlloc();
    uint64_t v77 = v14;
    uint64_t v32 = (uint8_t *)v31;
    uint64_t v33 = swift_slowAlloc();
    id v78 = v12;
    uint64_t v85 = v33;
    *(_DWORD *)uint64_t v32 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v84 = sub_100110D58(a1, a2, &v85);
    uint64_t v13 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "SEID is %s", v32, 0xCu);
    swift_arrayDestroy();
    uint64_t v12 = v78;
    swift_slowDealloc();
    uint64_t v14 = v77;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v34 = *(void (**)(char *, uint64_t))(v14 + 8);
  v34(v28, v13);
  sub_100048D6C(v82, (uint64_t)v10, (uint64_t *)&unk_100723978);
  uint64_t v35 = v83;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v10, 1, v83) != 1)
  {
    sub_10048FE30((uint64_t)v10, (uint64_t)v12, type metadata accessor for PendingActionContext);
    uint64_t v41 = *(uint64_t *)((char *)v12 + *(int *)(v35 + 76));
    uint64_t v42 = v80;
    if (v41 && *(void *)(v41 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v43 = sub_100590548(a1, a2);
      if (v44)
      {
        uint64_t v45 = (uint64_t *)(*(void *)(v41 + 56) + 24 * v43);
        uint64_t v47 = *v45;
        uint64_t v46 = v45[1];
        unint64_t v48 = v45[2];
        sub_10002CEB0(v46, v48);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v49 = v12[1];
        if (v49)
        {
          uint64_t v50 = v12;
          uint64_t v51 = v12[3];
          if (v51)
          {
            uint64_t v52 = v46;
            uint64_t v53 = v50[5];
            if (v53)
            {
              uint64_t v77 = v14;
              id v78 = v50;
              uint64_t v54 = *v50;
              uint64_t v82 = v50[2];
              uint64_t v83 = v54;
              uint64_t v81 = v50[4];
              type metadata accessor for IdentityProofingDataContext();
              swift_allocObject();
              sub_10002CEB0(v52, v48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_1000FF820();
              uint64_t v65 = v64;
              uint64_t v72 = v13;
              uint64_t v66 = (void *)swift_allocObject();
              uint64_t v67 = v69;
              v66[2] = v65;
              v66[3] = v67;
              uint64_t v68 = v70;
              v66[4] = v73;
              v66[5] = v68;
              v66[6] = v83;
              v66[7] = v49;
              v66[8] = v82;
              v66[9] = v51;
              v66[10] = v81;
              v66[11] = v53;
              v66[12] = v52;
              v66[13] = v48;
              v66[14] = v47;
              sub_10002CEB0(v52, v48);
              swift_retain();
              swift_bridgeObjectRetain();
              sub_1000FFE3C((uint64_t)sub_10048FEF8, (uint64_t)v66);
              sub_1004863E0((uint64_t)v78, type metadata accessor for PendingActionContext);
              sub_10000C5F4(v52, v48);
              swift_release();
              swift_release();
              return sub_10000C5F4(v52, v48);
            }
            uint64_t v12 = v50;
            uint64_t v46 = v52;
            sub_10002CEB0(v52, v48);
            char v59 = v71;
            defaultLogger()();
            uint64_t v60 = Logger.logObject.getter();
            os_log_type_t v61 = static os_log_type_t.debug.getter();
            if (!os_log_type_enabled(v60, v61)) {
              goto LABEL_28;
            }
            uint64_t v62 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v62 = 0;
            uint64_t v63 = "partnerSchemeIdentifier unavailable, will not be able to save watch provisioning data";
            goto LABEL_27;
          }
          uint64_t v12 = v50;
          sub_10002CEB0(v46, v48);
          char v59 = v75;
          defaultLogger()();
          uint64_t v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v60, v61))
          {
            uint64_t v62 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v62 = 0;
            uint64_t v63 = "targetInstanceIdentifier unavailable, will not be able to save watch provisioning data";
            goto LABEL_27;
          }
        }
        else
        {
          sub_10002CEB0(v46, v48);
          char v59 = v76;
          defaultLogger()();
          uint64_t v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v60, v61))
          {
            uint64_t v62 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v62 = 0;
            uint64_t v63 = "provisioningCredentialIdentifier unavailable, will not be able to save watch provisioning data";
LABEL_27:
            _os_log_impl((void *)&_mh_execute_header, v60, v61, v63, v62, 2u);
            swift_slowDealloc();
          }
        }
LABEL_28:

        sub_10000C5F4(v46, v48);
        sub_10000C5F4(v46, v48);
        id v58 = v59;
LABEL_19:
        v34(v58, v13);
        return sub_1004863E0((uint64_t)v12, type metadata accessor for PendingActionContext);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    defaultLogger()();
    unint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Unable to fetch provisioningContext from pendingActionsContext, will not be able to save watch provisioning data", v57, 2u);
      swift_slowDealloc();
    }

    id v58 = v42;
    goto LABEL_19;
  }
  sub_10000C6CC((uint64_t)v10, (uint64_t *)&unk_100723978);
  uint64_t v36 = v79;
  defaultLogger()();
  long long v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unable to fetch pendingActionsContext, will not be able to save watch provisioning data", v39, 2u);
    swift_slowDealloc();
  }

  return ((uint64_t (*)(char *, uint64_t))v34)(v36, v13);
}

uint64_t sub_10048E0FC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10048E134()
{
  return sub_1004E9B84(*(void *)(v0 + 16));
}

uint64_t sub_10048E13C()
{
  uint64_t v1 = *(void *)(sub_100007764((uint64_t *)&unk_100723978) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);

  swift_release();
  uint64_t v5 = (void *)(v0 + v3);
  unint64_t v6 = (int *)type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48))(v0 + v3, 1, v6)) {
    goto LABEL_727;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v5[15];
  if (v7 == 1) {
    goto LABEL_5;
  }
  if (v7 != 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    if (v5[19] != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (v5[23] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5[31] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = (char *)v5 + v6[17];
  uint64_t v9 = type metadata accessor for WorkflowRecommendationResponse();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v23 = v2;
    uint64_t v10 = (v2 + 32) & ~v2;
    uint64_t v11 = v4;
    if (*((void *)v8 + 3))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = &v8[*(int *)(v9 + 20)];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = type metadata accessor for Workflow();
    uint64_t v14 = &v12[*(int *)(v13 + 72)];
    uint64_t v15 = type metadata accessor for HardwareAttestationType();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = &v12[*(int *)(v13 + 152)];
    uint64_t v4 = v11;
    uint64_t v3 = v10;
    uint64_t v2 = v23;
    if (*((void *)v17 + 1) != 1)
    {
      swift_bridgeObjectRelease();
      if (*((void *)v17 + 104) != 1)
      {
        if (*((void *)v17 + 2) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 6) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 10) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 14) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 18) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 22) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 26) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 30) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 34) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 38) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 42) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 46) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 50) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 54) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 58) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 62) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 66) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 70) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 74) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 78) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 82) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 86) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 90) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 94) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 208) != 1)
      {
        if (*((void *)v17 + 106) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 110) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 114) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 118) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 122) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 126) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 130) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 134) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 138) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 142) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 146) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 150) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 154) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 158) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 162) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 166) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 170) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 174) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 178) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 182) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 186) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 190) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 194) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 198) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 312) != 1)
      {
        if (*((void *)v17 + 210) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 214) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 218) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 222) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 226) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 230) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 234) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 238) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 242) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 246) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 250) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 254) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 258) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 262) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 266) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 270) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 274) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 278) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 282) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 286) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 290) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 294) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 298) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 302) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 416) != 1)
      {
        if (*((void *)v17 + 314) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 318) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 322) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 326) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 330) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 334) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 338) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 342) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 346) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 350) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 354) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 358) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 362) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 366) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 370) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 374) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 378) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 382) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 386) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 390) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 394) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 398) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 402) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 406) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 520) != 1)
      {
        if (*((void *)v17 + 418) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 422) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 426) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 430) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 434) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 438) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 442) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 446) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 450) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 454) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 458) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 462) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 466) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 470) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 474) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 478) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 482) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 486) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 490) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 494) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 498) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 502) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 506) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 510) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 624) != 1)
      {
        if (*((void *)v17 + 522) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 526) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 530) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 534) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 538) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 542) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 546) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 550) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 554) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 558) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 562) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 566) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 570) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 574) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 578) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 582) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 586) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 590) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 594) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 598) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 602) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 606) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 610) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 614) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 728) != 1)
      {
        if (*((void *)v17 + 626) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 630) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 634) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 638) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 642) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 646) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 650) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 654) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 658) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 662) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 666) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 670) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 674) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 678) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 682) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 686) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 690) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 694) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 698) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 702) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 706) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 710) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 714) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 718) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(void *)((char *)v5 + v6[25] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)((char *)v5 + v6[26] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = (char *)v5 + v6[28];
  uint64_t v19 = sub_100007764(&qword_100723988);
  uint64_t v20 = *(void *)(v19 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  }
  uint64_t v21 = (void *)((char *)v5 + v6[29]);
  if (v21[1] != 1)
  {
    swift_bridgeObjectRelease();
    if (v21[104] != 1)
    {
      if (v21[2] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[6] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[10] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[14] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[18] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[22] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[26] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[30] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[34] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[38] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[42] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[46] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[50] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[54] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[58] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[62] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[66] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[70] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[74] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[78] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[82] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[86] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[90] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[94] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[208] != 1)
    {
      if (v21[106] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[110] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[114] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[118] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[122] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[126] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[130] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[134] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[138] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[142] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[146] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[150] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[154] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[158] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[162] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[166] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[170] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[174] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[178] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[182] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[186] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[190] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[194] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[198] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[312] != 1)
    {
      if (v21[210] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[214] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[218] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[222] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[226] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[230] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[234] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[238] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[242] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[246] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[250] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[254] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[258] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[262] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[266] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[270] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[274] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[278] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[282] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[286] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[290] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[294] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[298] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[302] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[416] != 1)
    {
      if (v21[314] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[318] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[322] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[326] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[330] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[334] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[338] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[342] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[346] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[350] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[354] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[358] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[362] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[366] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[370] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[374] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[378] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[382] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[386] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[390] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[394] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[398] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[402] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[406] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[520] != 1)
    {
      if (v21[418] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[422] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[426] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[430] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[434] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[438] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[442] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[446] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[450] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[454] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[458] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[462] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[466] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[470] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[474] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[478] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[482] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[486] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[490] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[494] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[498] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[502] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[506] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[510] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[624] != 1)
    {
      if (v21[522] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[526] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[530] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[534] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[538] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[542] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[546] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[550] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[554] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[558] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[562] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[566] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[570] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[574] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[578] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[582] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[586] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[590] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[594] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[598] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[602] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[606] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[610] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[614] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[728] != 1)
    {
      if (v21[626] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[630] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[634] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[638] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[642] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[646] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[650] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[654] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[658] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[662] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[666] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[670] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[674] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[678] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[682] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[686] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[690] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[694] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[698] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[702] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[706] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[710] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[714] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[718] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
LABEL_727:
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10048FD00(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100007764((uint64_t *)&unk_100723978) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  void *v12 = v2;
  v12[1] = sub_100025D64;
  return sub_100479D9C(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_10048FE30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10048FE98()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C5F4(*(void *)(v0 + 96), *(void *)(v0 + 104));

  return _swift_deallocObject(v0, 120, 7);
}

void sub_10048FEF8()
{
  sub_10047A110(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void **)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
}

void sub_10048FF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C5E0(a9, a10);
  }
}

void *sub_10048FFB8(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

void sub_10049000C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000338D4(a9, a10);
  }
}

uint64_t sub_10049008C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_10002CEB0(a2, a3);
  }
  return result;
}

unint64_t sub_1004900A8()
{
  unint64_t result = qword_10072F998;
  if (!qword_10072F998)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_10072F998);
  }
  return result;
}

uint64_t sub_1004900E8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = v0[13];
  if (v1 >> 60 != 15) {
    sub_10000C5F4(v0[12], v1);
  }
  unint64_t v2 = v0[15];
  if (v2 >> 60 != 15) {
    sub_10000C5F4(v0[14], v2);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 16));

  return _swift_deallocObject(v0, 168, 7);
}

uint64_t sub_100490170(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1004901CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_10000C5F4(a2, a3);
  }
  return result;
}

uint64_t sub_1004901E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10049023C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100490274()
{
  if (v0[3] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v1 = v0[11];
    if (v1 >> 60 != 15) {
      sub_10000C5F4(v0[10], v1);
    }
  }

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1004902E4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 128, 7);
}

void sub_10049035C()
{
  sub_10047A5CC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), (Swift::String_optional *)(v0 + 72), *(void **)(v0 + 120));
}

uint64_t sub_100490398()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1004903F0(uint64_t a1)
{
  long long v10 = *(_OWORD *)(v1 + 16);
  long long v8 = *(_OWORD *)(v1 + 48);
  long long v9 = *(_OWORD *)(v1 + 32);
  long long v7 = *(_OWORD *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100025D64;
  *(void *)(v5 + 248) = v4;
  *(_OWORD *)(v5 + 232) = v7;
  *(_OWORD *)(v5 + 216) = v8;
  *(_OWORD *)(v5 + 200) = v9;
  *(_OWORD *)(v5 + 184) = v10;
  *(void *)(v5 + 176) = a1;
  return _swift_task_switch(sub_1004746BC, 0, 0);
}

uint64_t sub_1004904E8()
{
  uint64_t v1 = type metadata accessor for IdentityProofingIDType();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004905BC()
{
  return sub_1004905FC((uint64_t (*)(void))&type metadata accessor for IdentityProofingIDType, (uint64_t (*)(void, void, void, void, char *))sub_10047495C);
}

uint64_t sub_1004905FC(uint64_t (*a1)(void), uint64_t (*a2)(void, void, void, void, char *))
{
  uint64_t v4 = *(void *)(a1(0) - 8);
  return a2(*((void *)v2 + 2), *((void *)v2 + 3), *((void *)v2 + 4), *((void *)v2 + 5), &v2[(*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)]);
}

uint64_t *sub_100490698(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for ValidatedDigitalPresentmentRequest();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = type metadata accessor for ISO18013KnownDocTypes();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + v6[5]) = *(uint64_t *)((char *)a2 + v6[5]);
    uint64_t v8 = v6[6];
    long long v9 = (char *)a1 + v8;
    long long v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Locale.Region();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = v6[7];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    sub_10002CEB0(*v15, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = v6[8];
    uint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = v6[9];
    uint64_t v23 = (uint64_t *)((char *)a1 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = v6[10];
    __dst = (char *)a1 + v26;
    uint64_t v27 = (char *)a2 + v26;
    uint64_t v28 = type metadata accessor for URL();
    uint64_t v29 = *(void *)(v28 - 8);
    os_log_type_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30(v27, 1, v28))
    {
      uint64_t v31 = sub_100007764(&qword_100720A68);
      memcpy(__dst, v27, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
    }
    uint64_t v33 = v6[11];
    unint64_t v34 = (uint64_t *)((char *)a1 + v33);
    uint64_t v35 = (uint64_t *)((char *)a2 + v33);
    uint64_t v36 = v35[1];
    void *v34 = *v35;
    v34[1] = v36;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100490930(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + v3[6];
  uint64_t v5 = type metadata accessor for Locale.Region();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_10000C5F4(*(void *)(a1 + v3[7]), *(void *)(a1 + v3[7] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + v3[10];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100490AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
  *(void *)(a1 + v5[5]) = *(void *)(a2 + v5[5]);
  uint64_t v6 = v5[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Locale.Region();
  long long v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = v5[7];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_10002CEB0(*v13, v15);
  uint64_t *v12 = v14;
  v12[1] = v15;
  uint64_t v16 = v5[8];
  unint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *unint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = v5[9];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = v5[10];
  __dst = (void *)(a1 + v24);
  uint64_t v25 = (const void *)(a2 + v24);
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v28(v25, 1, v26))
  {
    uint64_t v29 = sub_100007764(&qword_100720A68);
    memcpy(__dst, v25, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(__dst, v25, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
  }
  uint64_t v30 = v5[11];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100490D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
  *(void *)(a1 + v5[5]) = *(void *)(a2 + v5[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = v5[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Locale.Region();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = v5[7];
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_10002CEB0(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_10000C5F4(v15, v16);
  uint64_t v17 = v5[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = v5[9];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = v5[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v24, v25, v26);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_6;
  }
  if (v30)
  {
LABEL_6:
    uint64_t v31 = sub_100007764(&qword_100720A68);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_7:
  uint64_t v32 = v5[11];
  uint64_t v33 = (void *)(a1 + v32);
  unint64_t v34 = (void *)(a2 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100490FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
  *(void *)(a1 + v5[5]) = *(void *)(a2 + v5[5]);
  uint64_t v6 = v5[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Locale.Region();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  *(_OWORD *)(a1 + v5[8]) = *(_OWORD *)(a2 + v5[8]);
  *(_OWORD *)(a1 + v5[9]) = *(_OWORD *)(a2 + v5[9]);
  uint64_t v10 = v5[10];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_100007764(&qword_100720A68);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)(a1 + v5[11]) = *(_OWORD *)(a2 + v5[11]);
  return a1;
}

uint64_t sub_1004911B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
  *(void *)(a1 + v5[5]) = *(void *)(a2 + v5[5]);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Locale.Region();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = v5[7];
  uint64_t v11 = *(void *)(a1 + v10);
  unint64_t v12 = *(void *)(a1 + v10 + 8);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  sub_10000C5F4(v11, v12);
  uint64_t v13 = v5[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = v5[9];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = v5[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v24, v25, v26);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_6;
  }
  if (v30)
  {
LABEL_6:
    uint64_t v31 = sub_100007764(&qword_100720A68);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_7:
  uint64_t v32 = v5[11];
  uint64_t v33 = (void *)(a1 + v32);
  unint64_t v34 = (uint64_t *)(a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100491444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100491458);
}

uint64_t sub_100491458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ValidatedDigitalPresentmentRequest();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1004914C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004914D8);
}

uint64_t sub_1004914D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ValidatedDigitalPresentmentRequest();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DigitalPresentmentISOBuilder()
{
  uint64_t result = qword_10072FA18;
  if (!qword_10072FA18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100491594()
{
  uint64_t result = type metadata accessor for ValidatedDigitalPresentmentRequest();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100491620(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(sub_1000640F0(a1) + 16))
  {
    type metadata accessor for ISO18013KnownDocTypes();
    sub_1004939F0(&qword_10072FA78, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownDocTypes);
    dispatch thunk of RawRepresentable.rawValue.getter();
    return ISO18013ReaderRequest.ItemsRequest.init(docType:namespaces:requestInfo:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 0x3837316334333736;
    v7._object = (void *)0xE800000000000000;
    v8._uint64_t countAndFlagsBits = 0xD000000000000037;
    v8._object = (void *)0x800000010064EE80;
    logMilestone(tag:description:)(v7, v8);
    uint64_t v10 = *(void (**)(char *, void, uint64_t))(v3 + 104);
    v10(v5, enum case for DIPError.Code.digitalPresentmentNoElementsRequested(_:), v2);
    v9[1] = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004939F0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v10(v5, enum case for DIPError.Code.internalError(_:), v2);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
}

uint64_t sub_100491974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v39 = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  __chkstk_darwin(v5);
  long long v37 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100720B08);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v35 - v11;
  uint64_t v13 = *(int *)(type metadata accessor for ValidatedDigitalPresentmentRequest() + 20);
  uint64_t v38 = a1;
  uint64_t v14 = *(void *)(a1 + v13);
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_10015D158((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v16 = *(void *)(v14 + 64);
  unint64_t v40 = v14 + 64;
  unint64_t v41 = v15;
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v42 = (void (*)(char *, void, uint64_t))((unint64_t)(v17 + 63) >> 6);
  swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  if (!v19) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v21 | (v20 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    uint64_t v26 = *(void *)(v14 + 48);
    uint64_t v27 = type metadata accessor for IdentityElement();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v12, v26 + *(void *)(*(void *)(v27 - 8) + 72) * i, v27);
    uint64_t v28 = *(void *)(v14 + 56);
    uint64_t v29 = type metadata accessor for IdentityIntentToStore();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(&v12[*(int *)(v7 + 48)], v28 + *(void *)(*(void *)(v29 - 8) + 72) * i, v29);
    sub_100493A38((uint64_t)v12, (uint64_t)v10);
    sub_100130AF0(&v41, (uint64_t)v10);
    if (v3) {
      goto LABEL_30;
    }
    uint64_t v3 = 0;
    sub_100493AA0((uint64_t)v10);
    if (v19) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v20++, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      swift_bridgeObjectRelease();
      sub_100493AA0((uint64_t)v10);
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    if (v20 >= (uint64_t)v42) {
      goto LABEL_25;
    }
    unint64_t v24 = *(void *)(v40 + 8 * v20);
    if (!v24) {
      break;
    }
LABEL_17:
    unint64_t v19 = (v24 - 1) & v24;
  }
  uint64_t v25 = v20 + 1;
  if (v20 + 1 >= (uint64_t)v42) {
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v40 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  uint64_t v25 = v20 + 2;
  if (v20 + 2 >= (uint64_t)v42) {
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v40 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  uint64_t v25 = v20 + 3;
  if (v20 + 3 >= (uint64_t)v42) {
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v40 + 8 * v25);
  if (v24)
  {
LABEL_16:
    uint64_t v20 = v25;
    goto LABEL_17;
  }
  uint64_t v25 = v20 + 4;
  if (v20 + 4 < (uint64_t)v42)
  {
    unint64_t v24 = *(void *)(v40 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        uint64_t v20 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_29;
        }
        if (v20 >= (uint64_t)v42) {
          goto LABEL_25;
        }
        unint64_t v24 = *(void *)(v40 + 8 * v20);
        ++v25;
        if (v24) {
          goto LABEL_17;
        }
      }
    }
    goto LABEL_16;
  }
LABEL_25:
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v41 + 16))
  {
    type metadata accessor for ISO18013KnownDocTypes();
    sub_1004939F0(&qword_10072FA78, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownDocTypes);
    dispatch thunk of RawRepresentable.rawValue.getter();
    return ISO18013ReaderRequest.ItemsRequest.init(docType:namespaces:requestInfo:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 0x3837316334333736;
    v31._object = (void *)0xE800000000000000;
    v32._uint64_t countAndFlagsBits = 0xD000000000000037;
    v32._object = (void *)0x800000010064EE80;
    logMilestone(tag:description:)(v31, v32);
    uint64_t v33 = v36;
    uint64_t v42 = *(void (**)(char *, void, uint64_t))(v35 + 104);
    unint64_t v34 = v37;
    v42(v37, enum case for DIPError.Code.digitalPresentmentNoElementsRequested(_:), v36);
    unint64_t v40 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004939F0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v42(v34, enum case for DIPError.Code.internalError(_:), v33);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
}

char *sub_100491F84()
{
  uint64_t v73 = type metadata accessor for Logger();
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  long long v74 = (char *)&v71 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = sub_100007764(&qword_10072FA58);
  __chkstk_darwin(v1 - 8);
  long long v76 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for ISO18013SessionEstablishment();
  uint64_t v75 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v77 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for ISO18013ReaderRequest();
  uint64_t v79 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v83 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100725778);
  __chkstk_darwin(v5 - 8);
  uint64_t v81 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for ISO18013ReaderRequest.DocRequest();
  uint64_t v91 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v90 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_100725F80);
  uint64_t v96 = *(void *)(v8 - 8);
  uint64_t v97 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v95 = (char *)&v71 - v11;
  uint64_t v12 = type metadata accessor for DIPError.Code();
  uint64_t v85 = *(void *)(v12 - 8);
  uint64_t v86 = v12;
  __chkstk_darwin(v12);
  uint64_t v88 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ISO18013KnownDocTypes();
  os_log_t v99 = *(os_log_t *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  uint64_t v93 = *(void *)(v17 - 8);
  uint64_t v94 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v89 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v84 = (char *)&v71 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v24 = (char *)&v71 - v23;
  __chkstk_darwin(v22);
  unint64_t v92 = (char *)&v71 - v25;
  uint64_t v26 = sub_100007764(&qword_100725F90);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  uint64_t v29 = CBOREncoder.init()();
  uint64_t v30 = enum case for ISO18013PresentmentType.digital(_:);
  uint64_t v31 = type metadata accessor for ISO18013PresentmentType();
  uint64_t v32 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 104))(v28, v30, v31);
  uint64_t v33 = v31;
  uint64_t v34 = v100;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v33);
  os_log_t v35 = v99;
  CBOREncoder.presentmentType.setter();
  ((void (*)(char *, uint64_t, uint64_t))v35[2].isa)(v16, v34, v14);
  Class isa = (uint64_t (*)(char *, uint64_t))v35[11].isa;
  int v87 = v16;
  int v37 = isa(v16, v14);
  if (v37 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
  {
    uint64_t v38 = v101;
    sub_100491620(v34);
    uint64_t v39 = v38;
    if (v38) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v40 = v101;
    if (v37 != enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
    {
      v102[0] = 0;
      v102[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      v47._object = (void *)0x8000000100634D60;
      v47._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v47);
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(char *, void, uint64_t))(v85 + 104))(v88, enum case for DIPError.Code.digitalPresentmentInvalidDocumentDescriptor(_:), v86);
      unint64_t v24 = (char *)sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1004939F0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_release();
      ((void (*)(char *, uint64_t))v35[1].isa)(v87, v14);
      return v24;
    }
    unint64_t v24 = v84;
    sub_100491974(v34, (uint64_t)v84);
    uint64_t v39 = v40;
    if (v40) {
      goto LABEL_8;
    }
  }
  uint64_t v101 = v29;
  unint64_t v41 = v92;
  uint64_t v42 = v93;
  uint64_t v43 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v92, v24, v94);
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v89, v41, v43);
  swift_allocObject();
  CBOREncoder.init()();
  unint64_t v24 = (char *)sub_1004939F0(&qword_100725FC0, (void (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest);
  sub_1004939F0(&qword_100725FC8, (void (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest);
  char v44 = v95;
  CBOREncodedCBOR.init(value:tag:encoder:)();
  uint64_t v45 = v90;
  uint64_t v46 = v91;
  if (v39)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 8))(v41, v43, v97);
LABEL_8:
    swift_release();
    return v24;
  }
  uint64_t v48 = v98;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v80, v44, v97);
  uint64_t v49 = type metadata accessor for COSE_Sign1();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v81, 1, 1, v49);
  ISO18013ReaderRequest.DocRequest.init(itemsRequest:readerAuth:)();
  static ISO18013ReaderRequest.supportedVersion.getter();
  sub_100007764((uint64_t *)&unk_100725FD0);
  unint64_t v50 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_100610730;
  (*(void (**)(unint64_t, char *, uint64_t))(v46 + 16))(v51 + v50, v45, v48);
  ISO18013ReaderRequest.init(version:docRequests:)();
  sub_1004939F0(&qword_10072FA60, (void (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest);
  uint64_t v52 = v82;
  uint64_t v53 = v101;
  uint64_t v54 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  unint64_t v56 = v55;
  uint64_t v57 = sub_100007764(&qword_10072FA68);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v76, 1, 1, v57);
  sub_10002CEB0(v54, v56);
  ISO18013SessionEstablishment.init(readerKey:data:)();
  sub_1004939F0(&qword_10072FA70, (void (*)(uint64_t))&type metadata accessor for ISO18013SessionEstablishment);
  unint64_t v24 = (char *)dispatch thunk of CBOREncoder.encode<A>(_:)();
  unint64_t v60 = v59;
  unint64_t v100 = v56;
  uint64_t v101 = v53;
  os_log_type_t v61 = v74;
  defaultLogger()();
  sub_10002CEB0((uint64_t)v24, v60);
  sub_10002CEB0((uint64_t)v24, v60);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v62, v63))
  {
    os_log_t v99 = v62;
    uint64_t v64 = (uint8_t *)swift_slowAlloc();
    uint64_t v89 = (char *)swift_slowAlloc();
    v102[0] = (uint64_t)v89;
    *(_DWORD *)uint64_t v64 = 136315138;
    Swift::String v65 = Data.base16EncodedString()();
    v102[4] = sub_100110D58(v65._countAndFlagsBits, (unint64_t)v65._object, v102);
    uint64_t v52 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000C5F4((uint64_t)v24, v60);
    sub_10000C5F4((uint64_t)v24, v60);
    os_log_t v66 = v99;
    _os_log_impl((void *)&_mh_execute_header, v99, v63, "DigitalPresentmentISOBuilder built session establishment %s", v64, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v67 = v98;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v73);
    uint64_t v68 = v78;
  }
  else
  {
    sub_10000C5F4((uint64_t)v24, v60);
    sub_10000C5F4((uint64_t)v24, v60);

    (*(void (**)(char *, uint64_t))(v72 + 8))(v61, v73);
    uint64_t v68 = v78;
    uint64_t v67 = v98;
  }
  v69._uint64_t countAndFlagsBits = 0xD000000000000030;
  v69._object = (void *)0x800000010064EE40;
  v70._uint64_t countAndFlagsBits = 0x3936626464613939;
  v70._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v70, v69);
  swift_release();
  sub_10000C5F4(v54, v100);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v68);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v83, v52);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v90, v67);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v92, v94);
  return v24;
}

uint64_t sub_100492F20(uint64_t a1, void (*a2)(unsigned char *, uint64_t), uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v67 = a4;
  uint64_t v77 = a1;
  uint64_t v78 = a3;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v64 = *(void *)(v7 - 8);
  uint64_t v65 = v7;
  __chkstk_darwin(v7);
  os_log_t v66 = &v58[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v80 = type metadata accessor for ISO18013AppleSessionTranscript();
  uint64_t v72 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  long long v76 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for DigitalPresentmentISOBuilder();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = &v58[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v74 = *(void *)(v13 - 8);
  uint64_t v75 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  os_log_type_t v63 = &v58[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  uint64_t v17 = &v58[-v16];
  uint64_t v18 = sub_100007764(&qword_100725F90);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = &v58[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  uint64_t v21 = CBOREncoder.init()();
  uint64_t v22 = enum case for ISO18013PresentmentType.digital(_:);
  uint64_t v23 = type metadata accessor for ISO18013PresentmentType();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v24 + 104))(v20, v22, v23);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v24 + 56))(v20, 0, 1, v23);
  uint64_t v73 = v21;
  CBOREncoder.presentmentType.setter();
  uint64_t v25 = type metadata accessor for ValidatedDigitalPresentmentRequest();
  uint64_t v26 = (uint64_t *)(v5 + *(int *)(v25 + 28));
  uint64_t v27 = *v26;
  unint64_t v28 = v26[1];
  defaultLogger()();
  uint64_t v70 = v5;
  uint64_t v29 = v5;
  unint64_t v30 = v67;
  uint64_t v68 = v12;
  sub_100493930(v29, (uint64_t)v12);
  sub_10002CEB0(v27, v28);
  swift_bridgeObjectRetain();
  uint64_t v31 = v78;
  sub_10002CEB0(v78, v30);
  sub_10002CEB0(v27, v28);
  uint64_t v79 = a2;
  swift_bridgeObjectRetain();
  sub_10002CEB0(v31, v30);
  Swift::String v69 = v17;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  int v34 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v62 = v25;
    uint64_t v36 = v35;
    uint64_t v61 = swift_slowAlloc();
    uint64_t v82 = v61;
    *(_DWORD *)uint64_t v36 = 136315906;
    Swift::String v37 = Data.base16EncodedString()();
    os_log_t v60 = v32;
    uint64_t v81 = sub_100110D58(v37._countAndFlagsBits, (unint64_t)v37._object, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000C5F4(v27, v28);
    sub_10000C5F4(v27, v28);
    *(_WORD *)(v36 + 12) = 2080;
    uint64_t v38 = *(int *)(v62 + 32);
    int v59 = v34;
    uint64_t v39 = (uint64_t)v68;
    uint64_t v40 = (uint64_t *)&v68[v38];
    uint64_t v41 = *v40;
    unint64_t v42 = v40[1];
    swift_bridgeObjectRetain();
    uint64_t v81 = sub_100110D58(v41, v42, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100493994(v39);
    *(_WORD *)(v36 + 22) = 2080;
    unint64_t v43 = (unint64_t)v79;
    swift_bridgeObjectRetain();
    uint64_t v81 = sub_100110D58(v77, v43, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v36 + 32) = 2080;
    uint64_t v44 = v78;
    Swift::String v45 = Data.base16EncodedString()();
    uint64_t v81 = sub_100110D58(v45._countAndFlagsBits, (unint64_t)v45._object, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000C5F4(v44, v30);
    sub_10000C5F4(v44, v30);
    uint64_t v32 = v60;
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v59, "Building Apple session transcript with nonce %s, merchantID: %s, teamID: %s, encryption key hash: %s", (uint8_t *)v36, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10000C5F4(v27, v28);
    sub_10000C5F4(v27, v28);
    sub_100493994((uint64_t)v68);
    swift_bridgeObjectRelease_n();
    uint64_t v44 = v78;
    sub_10000C5F4(v78, v30);
    sub_10000C5F4(v44, v30);
  }

  uint64_t v46 = *(void (**)(unsigned char *, uint64_t))(v74 + 8);
  v46(v69, v75);
  sub_10002CEB0(v27, v28);
  swift_bridgeObjectRetain();
  sub_10002CEB0(v44, v30);
  swift_bridgeObjectRetain();
  Swift::String v47 = v76;
  ISO18013AppleSessionTranscript.init(nonce:merchantID:teamID:encryptionKeyHash:)();
  sub_1004939F0(&qword_10072FA50, (void (*)(uint64_t))&type metadata accessor for ISO18013AppleSessionTranscript);
  uint64_t v48 = v71;
  uint64_t v49 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  unint64_t v51 = v50;
  if (v48)
  {
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v72 + 8))(v47, v80);
    (*(void (**)(unsigned char *, void, uint64_t))(v64 + 104))(v66, enum case for DIPError.Code.internalError(_:), v65);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004939F0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v52 = v63;
    defaultLogger()();
    sub_10002CEB0(v49, v51);
    sub_10002CEB0(v49, v51);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v79 = v46;
      unint64_t v55 = (uint8_t *)swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      uint64_t v82 = v78;
      *(_DWORD *)unint64_t v55 = 136315138;
      Swift::String v56 = Data.base16EncodedString()();
      uint64_t v81 = sub_100110D58(v56._countAndFlagsBits, (unint64_t)v56._object, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000C5F4(v49, v51);
      sub_10000C5F4(v49, v51);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "DigitalPresentmentISOBuilder built session transcript %s", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      v79(v63, v75);
    }
    else
    {

      swift_release();
      sub_10000C5F4(v49, v51);
      sub_10000C5F4(v49, v51);
      v46(v52, v75);
    }
    (*(void (**)(unsigned char *, uint64_t))(v72 + 8))(v76, v80);
  }
  return v49;
}

uint64_t sub_100493930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DigitalPresentmentISOBuilder();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100493994(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DigitalPresentmentISOBuilder();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004939F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100493A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720B08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100493AA0(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100720B08);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100493B00@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v3);
  if (*(unsigned char *)(v1 + 256) == 1)
  {
    uint64_t v6 = v1 + 152;
    swift_beginAccess();
    sub_100048D6C(v1 + 152, (uint64_t)&v11, &qword_10072FB60);
    if (v12)
    {
      sub_10000C6B4(&v11, (uint64_t)&v13);
      return sub_10000C6B4(&v13, (uint64_t)a1);
    }
    else
    {
      sub_10000C6CC((uint64_t)&v11, &qword_10072FB60);
      uint64_t v8 = type metadata accessor for MobileDocumentReaderStorageFlow();
      swift_allocObject();
      uint64_t v9 = sub_1005E6750();
      uint64_t v14 = v8;
      uint64_t v15 = &off_100709D08;
      *(void *)&long long v13 = v9;
      swift_beginAccess();
      swift_retain();
      sub_1001D9214((uint64_t)&v13, v6, &qword_10072FB60);
      uint64_t result = swift_endAccess();
      a1[3] = v8;
      a1[4] = &off_100709D08;
      *a1 = v9;
    }
  }
  else
  {
    (*(void (**)(char *, void))(v5 + 104))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for DIPError.Code.missingEntitlement(_:));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100493DB4(uint64_t a1)
{
  v2[32] = a1;
  v2[33] = v1;
  v2[34] = type metadata accessor for DIPError();
  v2[35] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MobileDocumentReaderSession.Error();
  v2[36] = v3;
  v2[37] = *(void *)(v3 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[40] = v4;
  v2[41] = *(void *)(v4 - 8);
  v2[42] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AuditToken();
  v2[43] = v5;
  v2[44] = *(void *)(v5 - 8);
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v2[47] = v6;
  v2[48] = *(void *)(v6 - 8);
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  return _swift_task_switch(sub_100494000, v1, 0);
}

uint64_t sub_100494000()
{
  uint64_t v85 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 384);
    uint64_t v79 = *(void *)(v0 + 376);
    uint64_t v81 = *(void *)(v0 + 416);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 248) = sub_100110D58(0xD000000000000016, 0x800000010064F330, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v81, v79);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 416);
    uint64_t v7 = *(void *)(v0 + 376);
    uint64_t v8 = *(void *)(v0 + 384);

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  uint64_t v82 = v5;
  *(void *)(v0 + 424) = v5;
  uint64_t v9 = *(void *)(v0 + 264) + 112;
  swift_beginAccess();
  sub_100048D6C(v9, v0 + 56, &qword_10072FB48);
  uint64_t v10 = *(void *)(v0 + 80);
  sub_10000C6CC(v0 + 56, &qword_10072FB48);
  if (v10)
  {
    uint64_t v12 = *(void *)(v0 + 328);
    uint64_t v11 = *(void *)(v0 + 336);
    uint64_t v13 = *(void *)(v0 + 320);
    uint64_t v83 = 0;
    unint64_t v84 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v14._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v14._object = (void *)0x800000010064F350;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = 0xD000000000000016;
    v15._object = (void *)0x800000010064F330;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v16._object = (void *)0x800000010064F370;
    String.append(_:)(v16);
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v11, enum case for DIPError.Code.unexpectedDaemonState(_:), v13);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_11:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v44 = *(void *)(v0 + 400);
    uint64_t v67 = *(void *)(v0 + 376);
    uint64_t v45 = *(void *)(v0 + 328);
    uint64_t v46 = *(void *)(v0 + 336);
    uint64_t v69 = *(void *)(v0 + 312);
    uint64_t v47 = *(void *)(v0 + 296);
    uint64_t v71 = *(void *)(v0 + 288);
    uint64_t v75 = *(void *)(v0 + 304);
    uint64_t v77 = *(void *)(v0 + 280);
    uint64_t v80 = *(void *)(v0 + 320);
    uint64_t v83 = 0;
    unint64_t v84 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v48._uint64_t countAndFlagsBits = 0xD000000000000021;
    v48._object = (void *)0x800000010064F100;
    String.append(_:)(v48);
    v49._uint64_t countAndFlagsBits = 0xD000000000000016;
    v49._object = (void *)0x800000010064F330;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = 0xD000000000000015;
    v50._object = (void *)0x800000010064F150;
    String.append(_:)(v50);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_bridgeObjectRelease();
    v82(v44, v67);
    (*(void (**)(uint64_t, void, uint64_t))(v45 + 104))(v46, enum case for DIPError.Code.internalError(_:), v80);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001449B8(v77, v69);
    defaultLogger()();
    unint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
    v51(v75, v69, v71);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    BOOL v54 = os_log_type_enabled(v52, v53);
    uint64_t v55 = *(void *)(v0 + 392);
    uint64_t v57 = *(void *)(v0 + 296);
    uint64_t v56 = *(void *)(v0 + 304);
    uint64_t v58 = *(void *)(v0 + 288);
    uint64_t v78 = v51;
    if (v54)
    {
      uint64_t v72 = *(void *)(v0 + 376);
      uint64_t v70 = *(void *)(v0 + 392);
      uint64_t v59 = swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136315394;
      *(void *)(v0 + 232) = sub_100110D58(0xD000000000000016, 0x800000010064F330, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v59 + 12) = 2080;
      sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
      uint64_t v60 = Error.localizedDescription.getter();
      *(void *)(v0 + 224) = sub_100110D58(v60, v61, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v68(v56, v58);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "MobileDocumentReaderSessionProxy %s finished with error: %s", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v82(v70, v72);
    }
    else
    {
      uint64_t v62 = *(void *)(v0 + 376);
      uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v68(*(void *)(v0 + 304), v58);

      v82(v55, v62);
    }
    uint64_t v63 = *(void *)(v0 + 312);
    uint64_t v64 = *(void *)(v0 + 288);
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    swift_allocError();
    v78(v65, v63, v64);
    swift_willThrow();
    swift_errorRelease();
    v68(v63, v64);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_t v66 = *(uint64_t (**)(void))(v0 + 8);
    return v66();
  }
  uint64_t v17 = *(void *)(v0 + 368);
  uint64_t v18 = *(void *)(v0 + 352);
  uint64_t v73 = *(void *)(v0 + 344);
  sub_10000C728((void *)(*(void *)(v0 + 264) + 200), *(void *)(*(void *)(v0 + 264) + 224));
  XPCAuditToken.value.getter();
  uint64_t v19 = AuditToken.wrapped.getter();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = v73;
  uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v74(v17, v26);
  *(void *)(v0 + 136) = v19;
  *(void *)(v0 + 144) = v21;
  *(void *)(v0 + 152) = v23;
  *(void *)(v0 + 160) = v25;
  *(unsigned char *)(v0 + 168) = 0;
  if ((dispatch thunk of MobileDocumentReaderEntitlementChecking.checkPublicEntitlements(auditToken:)() & 1) == 0)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 328) + 104))(*(void *)(v0 + 336), enum case for DIPError.Code.missingEntitlement(_:), *(void *)(v0 + 320));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_11;
  }
  uint64_t v27 = *(void *)(v0 + 360);
  uint64_t v28 = *(void *)(v0 + 344);
  XPCAuditToken.value.getter();
  uint64_t v29 = AuditToken.wrapped.getter();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  v74(v27, v28);
  sub_1004AC1AC(v29, v31, v33, v35);
  uint64_t v36 = *(void *)(v0 + 368);
  uint64_t v37 = *(void *)(v0 + 264);
  uint64_t v39 = *(void *)(v37 + 240);
  uint64_t v38 = *(void *)(v37 + 248);
  XPCAuditToken.value.getter();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 8);
  *(void *)(v0 + 40) = v39;
  *(void *)(v0 + 48) = v38;
  sub_10002C2D8((uint64_t *)(v0 + 16));
  v40(v36, v39, v38);
  sub_100030A10(v0 + 16, v0 + 96);
  swift_beginAccess();
  sub_1001D9214(v0 + 96, v9, &qword_10072FB48);
  swift_endAccess();
  uint64_t v41 = swift_allocObject();
  *(void *)(v0 + 432) = v41;
  swift_unknownObjectWeakInit();
  long long v76 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 16)
                                                                                           + **(int **)(v38 + 16));
  swift_retain();
  unint64_t v42 = (void *)swift_task_alloc();
  *(void *)(v0 + 440) = v42;
  *unint64_t v42 = v0;
  v42[1] = sub_100494BC0;
  return v76(sub_1004AC6AC, v41, v39, v38);
}

uint64_t sub_100494BC0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 264);
  swift_task_dealloc();
  swift_release_n();
  return _swift_task_switch(sub_100494CF0, v1, 0);
}

uint64_t sub_100494CF0()
{
  uint64_t v13 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[53];
    uint64_t v3 = v0[51];
    uint64_t v4 = v0[47];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[30] = sub_100110D58(0xD000000000000016, 0x800000010064F330, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s returning successfully", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v11(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[53];
    uint64_t v7 = v0[51];
    uint64_t v8 = v0[47];

    v6(v7, v8);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100494F3C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MobileDocumentReaderSession.State();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v7 = (void *)result;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    id v8 = objc_allocWithZone((Class)type metadata accessor for XPCMobileDocumentReaderSessionState());
    uint64_t v9 = (void *)XPCMobileDocumentReaderSessionState.init(value:)();
    [v7 mobileDocumentReaderStateDidChange:v9];

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1004951F4(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1004AD23C;
  return sub_100493DB4((uint64_t)v5);
}

uint64_t sub_1004952B8()
{
  v1[24] = v0;
  v1[25] = type metadata accessor for DIPError();
  v1[26] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for MobileDocumentReaderSession.Error();
  v1[27] = v2;
  v1[28] = *(void *)(v2 - 8);
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[32] = v3;
  v1[33] = *(void *)(v3 - 8);
  v1[34] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[35] = v4;
  v1[36] = *(void *)(v4 - 8);
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  return _swift_task_switch(sub_1004954A4, v0, 0);
}

uint64_t sub_1004954A4()
{
  uint64_t v62 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v57 = *(void *)(v0 + 320);
    uint64_t v3 = *(void *)(v0 + 288);
    uint64_t v55 = *(void *)(v0 + 280);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v61[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 184) = sub_100110D58(0xD00000000000001ALL, 0x8000000100634490, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v57, v55);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 320);
    uint64_t v7 = *(void *)(v0 + 280);
    uint64_t v8 = *(void *)(v0 + 288);

    id v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  *(void *)(v0 + 328) = v5;
  uint64_t v9 = *(void *)(v0 + 192) + 112;
  swift_beginAccess();
  sub_100048D6C(v9, v0 + 56, &qword_10072FB48);
  if (*(void *)(v0 + 80))
  {
    sub_10000C6B4((long long *)(v0 + 56), v0 + 16);
    sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v10;
    void *v10 = v0;
    v10[1] = sub_100495DB4;
    return sub_100117260();
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 272);
    uint64_t v14 = *(void *)(v0 + 256);
    sub_10000C6CC(v0 + 56, &qword_10072FB48);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v12, enum case for DIPError.Code.unexpectedDaemonState(_:), v14);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v15 = *(void *)(v0 + 304);
    uint64_t v16 = *(void *)(v0 + 272);
    uint64_t v47 = *(void *)(v0 + 280);
    Swift::String v48 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    uint64_t v17 = *(void *)(v0 + 264);
    uint64_t v18 = *(void *)(v0 + 248);
    uint64_t v54 = *(void *)(v0 + 256);
    uint64_t v56 = *(void *)(v0 + 240);
    uint64_t v19 = *(void *)(v0 + 224);
    uint64_t v58 = *(void *)(v0 + 232);
    v61[0] = 0;
    uint64_t v49 = *(void *)(v0 + 208);
    uint64_t v51 = *(void *)(v0 + 216);
    v61[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v20._uint64_t countAndFlagsBits = 0xD000000000000021;
    v20._object = (void *)0x800000010064F100;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v21._object = (void *)0x8000000100634490;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = 0xD000000000000015;
    v22._object = (void *)0x800000010064F150;
    String.append(_:)(v22);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_bridgeObjectRelease();
    v48(v15, v47);
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v16, enum case for DIPError.Code.internalError(_:), v54);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001449B8(v49, v18);
    defaultLogger()();
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    v23(v56, v18, v51);
    os_log_type_t v53 = v23;
    v23(v58, v18, v51);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    uint64_t v28 = *(void *)(v0 + 296);
    uint64_t v29 = *(void *)(v0 + 280);
    uint64_t v30 = *(void *)(v0 + 240);
    uint64_t v59 = *(void *)(v0 + 232);
    uint64_t v32 = *(void *)(v0 + 216);
    uint64_t v31 = *(void *)(v0 + 224);
    if (v26)
    {
      uint64_t v52 = *(void *)(v0 + 280);
      uint64_t v50 = *(void *)(v0 + 296);
      uint64_t v33 = swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315650;
      *(void *)(v0 + 152) = sub_100110D58(0xD00000000000001ALL, 0x8000000100634490, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2080;
      sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
      uint64_t v34 = Error.localizedDescription.getter();
      *(void *)(v0 + 160) = sub_100110D58(v34, v35, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v36(v30, v32);
      *(_WORD *)(v33 + 22) = 2080;
      uint64_t v37 = v59;
      uint64_t v38 = MobileDocumentReaderSession.Error.debugDescription.getter();
      if (v39)
      {
        unint64_t v40 = v39;
      }
      else
      {
        uint64_t v38 = 7104878;
        unint64_t v40 = 0xE300000000000000;
      }
      *(void *)(v0 + 168) = sub_100110D58(v38, v40, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v60 = v36;
      v36(v37, v32);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v33, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v27(v50, v52);
    }
    else
    {
      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v41(v30, v32);
      uint64_t v42 = v59;
      uint64_t v60 = v41;
      v41(v42, v32);

      v27(v28, v29);
    }
    uint64_t v43 = *(void *)(v0 + 248);
    uint64_t v44 = *(void *)(v0 + 216);
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    swift_allocError();
    v53(v45, v43, v44);
    swift_willThrow();
    swift_errorRelease();
    v60(v43, v44);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
    return v46();
  }
}

uint64_t sub_100495DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  id v5 = (void *)*v3;
  v5[12] = v3;
  v5[13] = a1;
  v5[14] = a2;
  v5[15] = v2;
  v5[43] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[24];
  if (v2) {
    uint64_t v7 = sub_100496134;
  }
  else {
    uint64_t v7 = sub_100495EE8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100495EE8()
{
  uint64_t v15 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[41];
    uint64_t v3 = v0[39];
    uint64_t v4 = v0[35];
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    v0[22] = sub_100110D58(0xD00000000000001ALL, 0x8000000100634490, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s returning successfully", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v12(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[41];
    uint64_t v7 = v0[39];
    uint64_t v8 = v0[35];

    v6(v7, v8);
  }
  uint64_t v9 = v0[14];
  uint64_t v13 = v0[13];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v10(v13, v9);
}

uint64_t sub_100496134()
{
  uint64_t v50 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[38];
  typea = (void (*)(uint64_t, uint64_t))v0[41];
  uint64_t v2 = v0[34];
  uint64_t v46 = v0[35];
  uint64_t v3 = v0[33];
  uint64_t v48 = v0[32];
  v49[0] = 0;
  uint64_t v4 = v0[31];
  uint64_t v44 = v0[30];
  uint64_t v5 = v0[28];
  uint64_t v47 = v0[29];
  uint64_t v39 = v0[26];
  uint64_t v41 = v0[27];
  v49[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x800000010064F100;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v7._object = (void *)0x8000000100634490;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x800000010064F150;
  String.append(_:)(v8);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  typea(v1, v46);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v48);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001449B8(v39, v4);
  defaultLogger()();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9(v44, v4, v41);
  uint64_t v45 = v9;
  v9(v47, v4, v41);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v40 = (void (*)(uint64_t, uint64_t))v0[41];
    uint64_t v35 = v0[35];
    uint64_t v36 = v0[37];
    os_log_t log = v10;
    uint64_t v12 = v0[30];
    uint64_t v42 = v0[29];
    uint64_t v14 = v0[27];
    uint64_t v13 = v0[28];
    uint64_t v15 = swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315650;
    v0[19] = sub_100110D58(0xD00000000000001ALL, 0x8000000100634490, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    os_log_type_t type = v11;
    uint64_t v16 = Error.localizedDescription.getter();
    v0[20] = sub_100110D58(v16, v17, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v18(v12, v14);
    *(_WORD *)(v15 + 22) = 2080;
    uint64_t v19 = v42;
    uint64_t v20 = MobileDocumentReaderSession.Error.debugDescription.getter();
    if (v21)
    {
      unint64_t v22 = v21;
    }
    else
    {
      uint64_t v20 = 7104878;
      unint64_t v22 = 0xE300000000000000;
    }
    v0[21] = sub_100110D58(v20, v22, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v43 = v18;
    v18(v19, v14);
    _os_log_impl((void *)&_mh_execute_header, log, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v40(v36, v35);
  }
  else
  {
    uint64_t v23 = (void (*)(uint64_t, uint64_t))v0[41];
    uint64_t v24 = v0[37];
    uint64_t v25 = v0[35];
    uint64_t v26 = v0[29];
    uint64_t v27 = v0[27];
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0[28] + 8);
    v28(v0[30], v27);
    uint64_t v43 = v28;
    v28(v26, v27);

    v23(v24, v25);
  }
  uint64_t v29 = v0[31];
  uint64_t v30 = v0[27];
  sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
  swift_allocError();
  v45(v31, v29, v30);
  swift_willThrow();
  swift_errorRelease();
  v43(v29, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

uint64_t sub_1004968B4(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10049695C;
  return sub_1004952B8();
}

uint64_t sub_10049695C()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v2)
  {
    uint64_t v5 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    NSString v6 = 0;
    Swift::String v7 = (void *)v5;
  }
  else
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    Swift::String v7 = v6;
  }
  Swift::String v8 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, NSString, uint64_t))v8)[2](v8, v6, v5);

  _Block_release(v8);
  uint64_t v9 = *(uint64_t (**)(void))(v4 + 8);
  return v9();
}

uint64_t sub_100496AF4(uint64_t a1)
{
  v2[21] = a1;
  v2[22] = v1;
  v2[23] = type metadata accessor for DIPError();
  v2[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MobileDocumentReaderSession.Error();
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[30] = v4;
  v2[31] = *(void *)(v4 - 8);
  v2[32] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MobileDocumentReaderConfiguration();
  v2[33] = v5;
  v2[34] = *(void *)(v5 - 8);
  v2[35] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderConfigurationResponse();
  v2[36] = v6;
  v2[37] = *(void *)(v6 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v2[41] = v7;
  v2[42] = *(void *)(v7 - 8);
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  return _swift_task_switch(sub_100496DB4, v1, 0);
}

uint64_t sub_100496DB4()
{
  uint64_t v64 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v60 = *(void *)(v0 + 368);
    uint64_t v3 = *(void *)(v0 + 336);
    uint64_t v58 = *(void *)(v0 + 328);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v63[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 160) = sub_100110D58(0x2865726170657270, 0xEE00293A68746977, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v60, v58);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 368);
    uint64_t v7 = *(void *)(v0 + 328);
    uint64_t v8 = *(void *)(v0 + 336);

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  *(void *)(v0 + 376) = v5;
  uint64_t v9 = *(void *)(v0 + 176) + 112;
  swift_beginAccess();
  sub_100048D6C(v9, v0 + 56, &qword_10072FB48);
  if (*(void *)(v0 + 80))
  {
    sub_10000C6B4((long long *)(v0 + 56), v0 + 16);
    sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
    XPCMobileDocumentReaderConfiguration.value.getter();
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v10;
    void *v10 = v0;
    v10[1] = sub_100497754;
    uint64_t v11 = *(void *)(v0 + 320);
    uint64_t v12 = *(void *)(v0 + 280);
    return sub_100117C14(v11, v12);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 248);
    uint64_t v14 = *(void *)(v0 + 256);
    uint64_t v16 = *(void *)(v0 + 240);
    sub_10000C6CC(v0 + 56, &qword_10072FB48);
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.unexpectedDaemonState(_:), v16);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v17 = *(void *)(v0 + 352);
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    uint64_t v19 = *(void *)(v0 + 248);
    uint64_t v18 = *(void *)(v0 + 256);
    uint64_t v20 = *(void *)(v0 + 232);
    uint64_t v56 = *(void *)(v0 + 240);
    uint64_t v57 = *(void *)(v0 + 328);
    uint64_t v59 = *(void *)(v0 + 224);
    uint64_t v21 = *(void *)(v0 + 208);
    uint64_t v61 = *(void *)(v0 + 216);
    v63[0] = 0;
    uint64_t v22 = *(void *)(v0 + 192);
    uint64_t v54 = *(void *)(v0 + 200);
    v63[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v23._uint64_t countAndFlagsBits = 0xD000000000000021;
    v23._object = (void *)0x800000010064F100;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = 0x2865726170657270;
    v24._object = (void *)0xEE00293A68746977;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = 0xD000000000000015;
    v25._object = (void *)0x800000010064F150;
    String.append(_:)(v25);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_bridgeObjectRelease();
    v52(v17, v57);
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, enum case for DIPError.Code.internalError(_:), v56);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001449B8(v22, v20);
    defaultLogger()();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    uint64_t v27 = v54;
    v26(v59, v20, v54);
    uint64_t v55 = v26;
    v26(v61, v20, v27);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    uint64_t v32 = *(void *)(v0 + 344);
    uint64_t v33 = *(void *)(v0 + 328);
    uint64_t v35 = *(void *)(v0 + 216);
    uint64_t v34 = *(void *)(v0 + 224);
    uint64_t v37 = *(void *)(v0 + 200);
    uint64_t v36 = *(void *)(v0 + 208);
    if (v30)
    {
      uint64_t v53 = *(void *)(v0 + 328);
      os_log_type_t type = v29;
      uint64_t v38 = swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315650;
      uint64_t v51 = v32;
      *(void *)(v0 + 120) = sub_100110D58(0x2865726170657270, 0xEE00293A68746977, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 12) = 2080;
      sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
      uint64_t v39 = Error.localizedDescription.getter();
      *(void *)(v0 + 128) = sub_100110D58(v39, v40, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v41(v34, v37);
      *(_WORD *)(v38 + 22) = 2080;
      uint64_t v42 = MobileDocumentReaderSession.Error.debugDescription.getter();
      if (v43)
      {
        unint64_t v44 = v43;
      }
      else
      {
        uint64_t v42 = 7104878;
        unint64_t v44 = 0xE300000000000000;
      }
      *(void *)(v0 + 136) = sub_100110D58(v42, v44, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v62 = v41;
      v41(v35, v37);
      _os_log_impl((void *)&_mh_execute_header, v28, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v31(v51, v53);
    }
    else
    {
      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v45(v34, v37);
      uint64_t v62 = v45;
      v45(v35, v37);

      v31(v32, v33);
    }
    uint64_t v46 = *(void *)(v0 + 232);
    uint64_t v47 = *(void *)(v0 + 200);
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    swift_allocError();
    v55(v48, v46, v47);
    swift_willThrow();
    swift_errorRelease();
    v62(v46, v47);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v49 = *(uint64_t (**)(void))(v0 + 8);
    return v49();
  }
}

uint64_t sub_100497754()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[35];
  uint64_t v4 = v2[34];
  uint64_t v5 = v2[33];
  uint64_t v6 = v2[22];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_100497C90;
  }
  else {
    uint64_t v7 = sub_1004978D0;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1004978D0()
{
  BOOL v30 = v0;
  uint64_t v2 = v0[39];
  uint64_t v1 = v0[40];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[37];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v28(v2, v1, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v25 = v0[45];
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[47];
    uint64_t v24 = v0[41];
    os_log_t log = v5;
    uint64_t v8 = v0[38];
    uint64_t v7 = v0[39];
    uint64_t v9 = v0[36];
    uint64_t v10 = v0[37];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    v0[18] = sub_100110D58(0x2865726170657270, 0xEE00293A68746977, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    v28(v8, v7, v9);
    uint64_t v12 = String.init<A>(describing:)();
    v0[19] = sub_100110D58(v12, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v27(v7, v9);
    _os_log_impl((void *)&_mh_execute_header, log, v6, "MobileDocumentReaderSessionProxy %s returning successfully with response: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v26(v25, v24);
  }
  else
  {
    uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[47];
    uint64_t v15 = v0[45];
    uint64_t v16 = v0[41];
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0[37] + 8);
    v27(v0[39], v0[36]);

    v14(v15, v16);
  }
  uint64_t v17 = v0[40];
  uint64_t v18 = v0[36];
  v28(v0[38], v17, v18);
  id v19 = objc_allocWithZone((Class)type metadata accessor for XPCMobileDocumentReaderConfigurationResponse());
  uint64_t v20 = XPCMobileDocumentReaderConfigurationResponse.init(value:)();
  v27(v17, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t))v0[1];
  return v21(v20);
}

uint64_t sub_100497C90()
{
  uint64_t v50 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[44];
  uint64_t v39 = (void (*)(uint64_t, uint64_t))v0[47];
  uint64_t v46 = v0[41];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[29];
  uint64_t v48 = v0[30];
  v49[0] = 0;
  uint64_t v44 = v0[28];
  uint64_t v5 = v0[26];
  uint64_t v47 = v0[27];
  uint64_t v6 = v0[24];
  uint64_t v41 = v0[25];
  v49[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v7._uint64_t countAndFlagsBits = 0xD000000000000021;
  v7._object = (void *)0x800000010064F100;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0x2865726170657270;
  v8._object = (void *)0xEE00293A68746977;
  String.append(_:)(v8);
  v9._object = (void *)0x800000010064F150;
  v9._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v9);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  v39(v1, v46);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v3, enum case for DIPError.Code.internalError(_:), v48);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001449B8(v6, v4);
  defaultLogger()();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v10(v44, v4, v41);
  uint64_t v45 = v10;
  v10(v47, v4, v41);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v38 = v0[43];
    unint64_t v40 = (void (*)(uint64_t, uint64_t))v0[47];
    uint64_t v37 = v0[41];
    os_log_t log = v11;
    uint64_t v13 = v0[28];
    uint64_t v42 = v0[27];
    uint64_t v15 = v0[25];
    uint64_t v14 = v0[26];
    uint64_t v16 = swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315650;
    v0[15] = sub_100110D58(0x2865726170657270, 0xEE00293A68746977, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2080;
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    os_log_type_t type = v12;
    uint64_t v17 = Error.localizedDescription.getter();
    v0[16] = sub_100110D58(v17, v18, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v13, v15);
    *(_WORD *)(v16 + 22) = 2080;
    uint64_t v20 = v42;
    uint64_t v21 = MobileDocumentReaderSession.Error.debugDescription.getter();
    if (v22)
    {
      unint64_t v23 = v22;
    }
    else
    {
      uint64_t v21 = 7104878;
      unint64_t v23 = 0xE300000000000000;
    }
    v0[17] = sub_100110D58(v21, v23, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v43 = v19;
    v19(v20, v15);
    _os_log_impl((void *)&_mh_execute_header, log, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v40(v38, v37);
  }
  else
  {
    uint64_t v24 = (void (*)(uint64_t, uint64_t))v0[47];
    uint64_t v25 = v0[43];
    uint64_t v26 = v0[41];
    uint64_t v27 = v0[27];
    uint64_t v28 = v0[25];
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0[26] + 8);
    v29(v0[28], v28);
    unint64_t v43 = v29;
    v29(v27, v28);

    v24(v25, v26);
  }
  uint64_t v30 = v0[29];
  uint64_t v31 = v0[25];
  sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
  swift_allocError();
  v45(v32, v30, v31);
  swift_willThrow();
  swift_errorRelease();
  v43(v30, v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t sub_100498490(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10046AAC4;
  return sub_100496AF4((uint64_t)v5);
}

uint64_t sub_100498554(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v3[24] = type metadata accessor for DIPError();
  v3[25] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MobileDocumentReaderSession.Error();
  v3[26] = v4;
  v3[27] = *(void *)(v4 - 8);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MobileDocumentReaderMerchant();
  v3[31] = v5;
  v3[32] = *(void *)(v5 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v3[35] = v6;
  v3[36] = *(void *)(v6 - 8);
  v3[37] = swift_task_alloc();
  v3[38] = sub_100007764(&qword_10072FB58);
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v3[43] = v7;
  v3[44] = *(void *)(v7 - 8);
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  return _swift_task_switch(sub_10049880C, v2, 0);
}

uint64_t sub_10049880C()
{
  uint64_t v64 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 352);
    uint64_t v59 = *(void *)(v0 + 344);
    uint64_t v61 = *(void *)(v0 + 384);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v63[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 160) = sub_100110D58(0x746E61686372656DLL, 0xEE00293A726F6628, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v61, v59);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 384);
    uint64_t v7 = *(void *)(v0 + 344);
    uint64_t v8 = *(void *)(v0 + 352);

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  *(void *)(v0 + 392) = v5;
  uint64_t v9 = *(void *)(v0 + 184) + 112;
  swift_beginAccess();
  sub_100048D6C(v9, v0 + 56, &qword_10072FB48);
  if (*(void *)(v0 + 80))
  {
    sub_10000C6B4((long long *)(v0 + 56), v0 + 16);
    sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v10;
    void *v10 = v0;
    v10[1] = sub_1004991B4;
    uint64_t v11 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v13 = *(void *)(v0 + 176);
    return sub_100118BB4(v11, v12, v13);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 288);
    uint64_t v15 = *(void *)(v0 + 296);
    uint64_t v17 = *(void *)(v0 + 280);
    sub_10000C6CC(v0 + 56, &qword_10072FB48);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v15, enum case for DIPError.Code.unexpectedDaemonState(_:), v17);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v18 = *(void *)(v0 + 368);
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v60 = *(void *)(v0 + 344);
    uint64_t v20 = *(void *)(v0 + 288);
    uint64_t v19 = *(void *)(v0 + 296);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v57 = *(void *)(v0 + 232);
    uint64_t v58 = *(void *)(v0 + 280);
    uint64_t v22 = *(void *)(v0 + 216);
    uint64_t v62 = *(void *)(v0 + 224);
    v63[0] = 0;
    uint64_t v23 = *(void *)(v0 + 200);
    uint64_t v54 = *(void *)(v0 + 208);
    v63[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v24._uint64_t countAndFlagsBits = 0xD000000000000021;
    v24._object = (void *)0x800000010064F100;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = 0x746E61686372656DLL;
    v25._object = (void *)0xEE00293A726F6628;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = 0xD000000000000015;
    v26._object = (void *)0x800000010064F150;
    String.append(_:)(v26);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_bridgeObjectRelease();
    v52(v18, v60);
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v19, enum case for DIPError.Code.internalError(_:), v58);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001449B8(v23, v21);
    defaultLogger()();
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
    v27(v57, v21, v54);
    uint64_t v56 = v27;
    v27(v62, v21, v54);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v32 = *(void *)(v0 + 360);
    uint64_t v33 = *(void *)(v0 + 344);
    uint64_t v35 = *(void *)(v0 + 224);
    uint64_t v34 = *(void *)(v0 + 232);
    uint64_t v37 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 216);
    if (v30)
    {
      uint64_t v55 = *(void *)(v0 + 344);
      os_log_type_t type = v29;
      uint64_t v38 = swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315650;
      uint64_t v53 = v32;
      *(void *)(v0 + 120) = sub_100110D58(0x746E61686372656DLL, 0xEE00293A726F6628, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 12) = 2080;
      sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
      uint64_t v39 = Error.localizedDescription.getter();
      *(void *)(v0 + 128) = sub_100110D58(v39, v40, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v41(v34, v37);
      *(_WORD *)(v38 + 22) = 2080;
      uint64_t v42 = MobileDocumentReaderSession.Error.debugDescription.getter();
      if (v43)
      {
        unint64_t v44 = v43;
      }
      else
      {
        uint64_t v42 = 7104878;
        unint64_t v44 = 0xE300000000000000;
      }
      *(void *)(v0 + 136) = sub_100110D58(v42, v44, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v41(v35, v37);
      uint64_t v45 = v41;
      _os_log_impl((void *)&_mh_execute_header, v28, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v31(v53, v55);
    }
    else
    {
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v46(v34, v37);
      v46(v35, v37);
      uint64_t v45 = v46;

      v31(v32, v33);
    }
    uint64_t v47 = *(void *)(v0 + 240);
    uint64_t v48 = *(void *)(v0 + 208);
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    swift_allocError();
    v56(v49, v47, v48);
    swift_willThrow();
    swift_errorRelease();
    v45(v47, v48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
    return v50();
  }
}

uint64_t sub_1004991B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 408) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 184);
  if (v0) {
    uint64_t v4 = sub_1004996EC;
  }
  else {
    uint64_t v4 = sub_1004992E0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1004992E0()
{
  uint64_t v28 = v0;
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  sub_100048D6C(v1, v2, &qword_10072FB58);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v24 = v0[47];
    Swift::String v25 = (void (*)(uint64_t, uint64_t))v0[49];
    uint64_t v23 = v0[43];
    uint64_t v6 = v0[40];
    uint64_t v5 = v0[41];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    v0[18] = sub_100110D58(0x746E61686372656DLL, 0xEE00293A726F6628, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2080;
    sub_100048D6C(v5, v6, &qword_10072FB58);
    uint64_t v8 = String.init<A>(describing:)();
    v0[19] = sub_100110D58(v8, v9, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v5, &qword_10072FB58);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderSessionProxy %s returning successfully with response: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v25(v24, v23);
  }
  else
  {
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[49];
    uint64_t v11 = v0[47];
    uint64_t v12 = v0[43];
    sub_10000C6CC(v0[41], &qword_10072FB58);

    v10(v11, v12);
  }
  uint64_t v13 = v0[39];
  uint64_t v14 = v0[31];
  uint64_t v15 = v0[32];
  sub_100048D6C(v0[42], v13, &qword_10072FB58);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v17 = v0[33];
    uint64_t v16 = v0[34];
    uint64_t v18 = v0[31];
    uint64_t v19 = v0[32];
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 32))(v16, v0[39], v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, v16, v18);
    id v20 = objc_allocWithZone((Class)type metadata accessor for XPCMobileDocumentReaderMerchant());
    uint64_t v26 = XPCMobileDocumentReaderMerchant.init(value:)();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
  }
  sub_10000C6CC(v0[42], &qword_10072FB58);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(uint64_t))v0[1];
  return v21(v26);
}

uint64_t sub_1004996EC()
{
  uint64_t v50 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[46];
  uint64_t v39 = (void (*)(uint64_t, uint64_t))v0[49];
  uint64_t v46 = v0[43];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[37];
  uint64_t v48 = v0[35];
  v49[0] = 0;
  uint64_t v4 = v0[30];
  uint64_t v44 = v0[29];
  uint64_t v5 = v0[27];
  uint64_t v47 = v0[28];
  uint64_t v6 = v0[25];
  uint64_t v41 = v0[26];
  v49[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v7._uint64_t countAndFlagsBits = 0xD000000000000021;
  v7._object = (void *)0x800000010064F100;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0x746E61686372656DLL;
  v8._object = (void *)0xEE00293A726F6628;
  String.append(_:)(v8);
  v9._object = (void *)0x800000010064F150;
  v9._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v9);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  v39(v1, v46);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v3, enum case for DIPError.Code.internalError(_:), v48);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001449B8(v6, v4);
  defaultLogger()();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v10(v44, v4, v41);
  uint64_t v45 = v10;
  v10(v47, v4, v41);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v38 = v0[45];
    unint64_t v40 = (void (*)(uint64_t, uint64_t))v0[49];
    uint64_t v37 = v0[43];
    os_log_t log = v11;
    uint64_t v13 = v0[29];
    uint64_t v42 = v0[28];
    uint64_t v15 = v0[26];
    uint64_t v14 = v0[27];
    uint64_t v16 = swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315650;
    v0[15] = sub_100110D58(0x746E61686372656DLL, 0xEE00293A726F6628, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2080;
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    os_log_type_t type = v12;
    uint64_t v17 = Error.localizedDescription.getter();
    v0[16] = sub_100110D58(v17, v18, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v13, v15);
    *(_WORD *)(v16 + 22) = 2080;
    uint64_t v20 = v42;
    uint64_t v21 = MobileDocumentReaderSession.Error.debugDescription.getter();
    if (v22)
    {
      unint64_t v23 = v22;
    }
    else
    {
      uint64_t v21 = 7104878;
      unint64_t v23 = 0xE300000000000000;
    }
    v0[17] = sub_100110D58(v21, v23, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v43 = v19;
    v19(v20, v15);
    _os_log_impl((void *)&_mh_execute_header, log, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v40(v38, v37);
  }
  else
  {
    uint64_t v24 = (void (*)(uint64_t, uint64_t))v0[49];
    uint64_t v25 = v0[45];
    uint64_t v26 = v0[43];
    uint64_t v27 = v0[28];
    uint64_t v28 = v0[26];
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0[27] + 8);
    v29(v0[29], v28);
    unint64_t v43 = v29;
    v29(v27, v28);

    v24(v25, v26);
  }
  uint64_t v30 = v0[30];
  uint64_t v31 = v0[26];
  sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
  swift_allocError();
  v45(v32, v30, v31);
  swift_willThrow();
  swift_errorRelease();
  v43(v30, v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t sub_100499F08(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  void v3[3] = _Block_copy(aBlock);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  v3[4] = v5;
  swift_retain();
  Swift::String v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *Swift::String v7 = v3;
  v7[1] = sub_100499FDC;
  return sub_100498554(v4, v6);
}

uint64_t sub_100499FDC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  Swift::String v7 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    Swift::String v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v7)[2](v7, 0, v8);

    _Block_release(v7);
  }
  else
  {
    ((void (**)(void, void *, void))v7)[2](v7, a1, 0);
    _Block_release(v7);
  }
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_10049A19C(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  v2[22] = type metadata accessor for DIPError();
  v2[23] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MobileDocumentReaderSession.Error();
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[29] = v4;
  v2[30] = *(void *)(v4 - 8);
  v2[31] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Milestone();
  v2[32] = v5;
  v2[33] = *(void *)(v5 - 8);
  v2[34] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderRequest();
  v2[35] = v6;
  v2[36] = *(void *)(v6 - 8);
  v2[37] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v2[38] = v7;
  v2[39] = *(void *)(v7 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  return _swift_task_switch(sub_10049A440, v1, 0);
}

uint64_t sub_10049A440()
{
  uint64_t v63 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v58 = *(void *)(v0 + 344);
    uint64_t v3 = *(void *)(v0 + 312);
    uint64_t v56 = *(void *)(v0 + 304);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v62[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 152) = sub_100110D58(0xD000000000000016, 0x800000010064F2D0, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v58, v56);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 344);
    uint64_t v7 = *(void *)(v0 + 304);
    uint64_t v8 = *(void *)(v0 + 312);

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  *(void *)(v0 + 352) = v5;
  uint64_t v9 = *(void *)(v0 + 168) + 112;
  swift_beginAccess();
  sub_100048D6C(v9, v0 + 56, &qword_10072FB48);
  if (*(void *)(v0 + 80))
  {
    sub_10000C6B4((long long *)(v0 + 56), v0 + 16);
    uint64_t v10 = sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
    XPCMobileDocumentReaderRequest.value.getter();
    uint64_t v11 = *v10;
    *(void *)(v0 + 360) = *v10;
    return _swift_task_switch(sub_10049AD58, v11, 0);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 240);
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v14 = *(void *)(v0 + 232);
    sub_10000C6CC(v0 + 56, &qword_10072FB48);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v12, enum case for DIPError.Code.unexpectedDaemonState(_:), v14);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v15 = *(void *)(v0 + 328);
    uint64_t v48 = *(void *)(v0 + 304);
    uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v17 = *(void *)(v0 + 240);
    uint64_t v16 = *(void *)(v0 + 248);
    uint64_t v18 = *(void *)(v0 + 224);
    uint64_t v55 = *(void *)(v0 + 232);
    uint64_t v57 = *(void *)(v0 + 216);
    uint64_t v19 = *(void *)(v0 + 200);
    uint64_t v59 = *(void *)(v0 + 208);
    v62[0] = 0;
    uint64_t v50 = *(void *)(v0 + 184);
    uint64_t v52 = *(void *)(v0 + 192);
    v62[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v20._uint64_t countAndFlagsBits = 0xD000000000000021;
    v20._object = (void *)0x800000010064F100;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 0xD000000000000016;
    v21._object = (void *)0x800000010064F2D0;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = 0xD000000000000015;
    v22._object = (void *)0x800000010064F150;
    String.append(_:)(v22);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_bridgeObjectRelease();
    v49(v15, v48);
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v16, enum case for DIPError.Code.internalError(_:), v55);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001449B8(v50, v18);
    defaultLogger()();
    unint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    v23(v57, v18, v52);
    uint64_t v54 = v23;
    v23(v59, v18, v52);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v28 = *(void *)(v0 + 320);
    uint64_t v29 = *(void *)(v0 + 304);
    uint64_t v30 = *(void *)(v0 + 216);
    uint64_t v60 = *(void *)(v0 + 208);
    uint64_t v32 = *(void *)(v0 + 192);
    uint64_t v31 = *(void *)(v0 + 200);
    if (v26)
    {
      uint64_t v53 = *(void *)(v0 + 304);
      uint64_t v51 = *(void *)(v0 + 320);
      uint64_t v33 = swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315650;
      *(void *)(v0 + 120) = sub_100110D58(0xD000000000000016, 0x800000010064F2D0, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2080;
      sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
      uint64_t v34 = Error.localizedDescription.getter();
      *(void *)(v0 + 128) = sub_100110D58(v34, v35, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v36(v30, v32);
      *(_WORD *)(v33 + 22) = 2080;
      uint64_t v37 = v60;
      uint64_t v38 = MobileDocumentReaderSession.Error.debugDescription.getter();
      if (v39)
      {
        unint64_t v40 = v39;
      }
      else
      {
        uint64_t v38 = 7104878;
        unint64_t v40 = 0xE300000000000000;
      }
      *(void *)(v0 + 136) = sub_100110D58(v38, v40, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v61 = v36;
      v36(v37, v32);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v33, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v27(v51, v53);
    }
    else
    {
      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v41(v30, v32);
      uint64_t v42 = v60;
      uint64_t v61 = v41;
      v41(v42, v32);

      v27(v28, v29);
    }
    uint64_t v43 = *(void *)(v0 + 224);
    uint64_t v44 = *(void *)(v0 + 192);
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    swift_allocError();
    v54(v45, v43, v44);
    swift_willThrow();
    swift_errorRelease();
    v61(v43, v44);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
    return v46();
  }
}

uint64_t sub_10049AD58()
{
  uint64_t v2 = v0[33];
  uint64_t v1 = v0[34];
  uint64_t v3 = v0[32];
  static MobileDocumentReaderMilestone.canRequestDocumentCalled.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[46] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10049AE38;
  return sub_10011B02C(0xD000000000000016, 0x800000010064F2D0, 208);
}

uint64_t sub_10049AE38()
{
  uint64_t v2 = (void *)*v1;
  v2[47] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[45];
    return _swift_task_switch(sub_10049B0F8, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[48] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_10049AFAC;
    uint64_t v5 = v2[37];
    return sub_10011CBD4(v5);
  }
}

uint64_t sub_10049AFAC()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[49] = v0;
    uint64_t v3 = v2[21];
    (*(void (**)(void, void))(v2[36] + 8))(v2[37], v2[35]);
    uint64_t v4 = sub_10049B3D4;
  }
  else
  {
    uint64_t v3 = v2[21];
    (*(void (**)(void, void))(v2[36] + 8))(v2[37], v2[35]);
    uint64_t v4 = sub_10049B17C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10049B0F8()
{
  v0[49] = v0[47];
  uint64_t v1 = v0[21];
  (*(void (**)(void, void))(v0[36] + 8))(v0[37], v0[35]);
  return _swift_task_switch(sub_10049B3D4, v1, 0);
}

uint64_t sub_10049B17C()
{
  uint64_t v13 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v3 = v0[42];
    uint64_t v4 = v0[38];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[18] = sub_100110D58(0xD000000000000016, 0x800000010064F2D0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s returning successfully", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v11(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v7 = v0[42];
    uint64_t v8 = v0[38];

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10049B3D4()
{
  uint64_t v50 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[41];
  typea = (void (*)(uint64_t, uint64_t))v0[44];
  uint64_t v46 = v0[38];
  uint64_t v3 = v0[30];
  uint64_t v2 = v0[31];
  uint64_t v4 = v0[28];
  uint64_t v48 = v0[29];
  v49[0] = 0;
  uint64_t v44 = v0[27];
  uint64_t v5 = v0[25];
  uint64_t v47 = v0[26];
  uint64_t v39 = v0[23];
  uint64_t v41 = v0[24];
  v49[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x800000010064F100;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD000000000000016;
  v7._object = (void *)0x800000010064F2D0;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x800000010064F150;
  String.append(_:)(v8);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  typea(v1, v46);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v48);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001449B8(v39, v4);
  defaultLogger()();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9(v44, v4, v41);
  uint64_t v45 = v9;
  v9(v47, v4, v41);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v40 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v35 = v0[38];
    uint64_t v36 = v0[40];
    os_log_t log = v10;
    uint64_t v12 = v0[27];
    uint64_t v42 = v0[26];
    uint64_t v14 = v0[24];
    uint64_t v13 = v0[25];
    uint64_t v15 = swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315650;
    v0[15] = sub_100110D58(0xD000000000000016, 0x800000010064F2D0, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    os_log_type_t type = v11;
    uint64_t v16 = Error.localizedDescription.getter();
    v0[16] = sub_100110D58(v16, v17, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v18(v12, v14);
    *(_WORD *)(v15 + 22) = 2080;
    uint64_t v19 = v42;
    uint64_t v20 = MobileDocumentReaderSession.Error.debugDescription.getter();
    if (v21)
    {
      unint64_t v22 = v21;
    }
    else
    {
      uint64_t v20 = 7104878;
      unint64_t v22 = 0xE300000000000000;
    }
    v0[17] = sub_100110D58(v20, v22, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v43 = v18;
    v18(v19, v14);
    _os_log_impl((void *)&_mh_execute_header, log, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v40(v36, v35);
  }
  else
  {
    unint64_t v23 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v24 = v0[40];
    uint64_t v25 = v0[38];
    uint64_t v26 = v0[26];
    uint64_t v27 = v0[24];
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0[25] + 8);
    v28(v0[27], v27);
    uint64_t v43 = v28;
    v28(v26, v27);

    v23(v24, v25);
  }
  uint64_t v29 = v0[28];
  uint64_t v30 = v0[24];
  sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
  swift_allocError();
  v45(v31, v29, v30);
  swift_willThrow();
  swift_errorRelease();
  v43(v29, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

uint64_t sub_10049BB88(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  Swift::String v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *Swift::String v6 = v3;
  v6[1] = sub_10049BC4C;
  return sub_10049A19C((uint64_t)v5);
}

uint64_t sub_10049BC4C()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  id v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  swift_release();
  uint64_t v7 = *(void *)(v3 + 32);
  if (v2)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 32));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_10049BDEC(uint64_t a1, uint64_t a2)
{
  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  v3[23] = type metadata accessor for DIPError();
  v3[24] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MobileDocumentReaderSession.Error();
  v3[25] = v4;
  v3[26] = *(void *)(v4 - 8);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v3[30] = v5;
  v3[31] = *(void *)(v5 - 8);
  v3[32] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderDeviceEngagementType();
  v3[33] = v6;
  v3[34] = *(void *)(v6 - 8);
  v3[35] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileDocumentReaderRequest();
  v3[36] = v7;
  v3[37] = *(void *)(v7 - 8);
  v3[38] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MobileDocumentReaderResponse();
  v3[39] = v8;
  v3[40] = *(void *)(v8 - 8);
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v3[43] = v9;
  v3[44] = *(void *)(v9 - 8);
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  return _swift_task_switch(sub_10049C100, v2, 0);
}

uint64_t sub_10049C100()
{
  uint64_t v65 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v60 = *(void *)(v0 + 384);
    uint64_t v3 = *(void *)(v0 + 352);
    uint64_t v58 = *(void *)(v0 + 344);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v64[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 152) = sub_100110D58(0xD000000000000022, 0x8000000100637A20, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v60, v58);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 384);
    uint64_t v7 = *(void *)(v0 + 344);
    uint64_t v8 = *(void *)(v0 + 352);

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  *(void *)(v0 + 392) = v5;
  uint64_t v9 = *(void *)(v0 + 176) + 112;
  swift_beginAccess();
  sub_100048D6C(v9, v0 + 56, &qword_10072FB48);
  if (*(void *)(v0 + 80))
  {
    sub_10000C6B4((long long *)(v0 + 56), v0 + 16);
    sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
    XPCMobileDocumentReaderRequest.value.getter();
    XPCMobileDocumentReaderDeviceEngagementType.value.getter();
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v10;
    void *v10 = v0;
    v10[1] = sub_10049CA80;
    uint64_t v11 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v13 = *(void *)(v0 + 280);
    return sub_10011996C(v11, v12, v13);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 256);
    uint64_t v17 = *(void *)(v0 + 240);
    sub_10000C6CC(v0 + 56, &qword_10072FB48);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v15, enum case for DIPError.Code.unexpectedDaemonState(_:), v17);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v18 = *(void *)(v0 + 368);
    uint64_t v50 = *(void *)(v0 + 344);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v20 = *(void *)(v0 + 248);
    uint64_t v19 = *(void *)(v0 + 256);
    uint64_t v21 = *(void *)(v0 + 232);
    uint64_t v57 = *(void *)(v0 + 240);
    uint64_t v59 = *(void *)(v0 + 224);
    uint64_t v22 = *(void *)(v0 + 208);
    uint64_t v61 = *(void *)(v0 + 216);
    v64[0] = 0;
    uint64_t v52 = *(void *)(v0 + 192);
    uint64_t v54 = *(void *)(v0 + 200);
    v64[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v23._uint64_t countAndFlagsBits = 0xD000000000000021;
    v23._object = (void *)0x800000010064F100;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = 0xD000000000000022;
    v24._object = (void *)0x8000000100637A20;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = 0xD000000000000015;
    v25._object = (void *)0x800000010064F150;
    String.append(_:)(v25);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_bridgeObjectRelease();
    v51(v18, v50);
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v19, enum case for DIPError.Code.internalError(_:), v57);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001449B8(v52, v21);
    defaultLogger()();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
    v26(v59, v21, v54);
    uint64_t v56 = v26;
    v26(v61, v21, v54);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v31 = *(void *)(v0 + 360);
    uint64_t v32 = *(void *)(v0 + 344);
    uint64_t v33 = *(void *)(v0 + 224);
    uint64_t v62 = *(void *)(v0 + 216);
    uint64_t v35 = *(void *)(v0 + 200);
    uint64_t v34 = *(void *)(v0 + 208);
    if (v29)
    {
      uint64_t v55 = *(void *)(v0 + 344);
      uint64_t v53 = *(void *)(v0 + 360);
      uint64_t v36 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315650;
      *(void *)(v0 + 120) = sub_100110D58(0xD000000000000022, 0x8000000100637A20, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2080;
      sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
      uint64_t v37 = Error.localizedDescription.getter();
      *(void *)(v0 + 128) = sub_100110D58(v37, v38, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v39(v33, v35);
      *(_WORD *)(v36 + 22) = 2080;
      uint64_t v40 = v62;
      uint64_t v41 = MobileDocumentReaderSession.Error.debugDescription.getter();
      if (v42)
      {
        unint64_t v43 = v42;
      }
      else
      {
        uint64_t v41 = 7104878;
        unint64_t v43 = 0xE300000000000000;
      }
      *(void *)(v0 + 136) = sub_100110D58(v41, v43, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v63 = v39;
      v39(v40, v35);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v30(v53, v55);
    }
    else
    {
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v44(v33, v35);
      uint64_t v45 = v62;
      uint64_t v63 = v44;
      v44(v45, v35);

      v30(v31, v32);
    }
    uint64_t v46 = *(void *)(v0 + 232);
    uint64_t v47 = *(void *)(v0 + 200);
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    swift_allocError();
    v56(v48, v46, v47);
    swift_willThrow();
    swift_errorRelease();
    v63(v46, v47);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v49 = *(uint64_t (**)(void))(v0 + 8);
    return v49();
  }
}

uint64_t sub_10049CA80()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[38];
  uint64_t v4 = v2[37];
  uint64_t v5 = v2[36];
  uint64_t v6 = v2[35];
  uint64_t v7 = v2[34];
  uint64_t v8 = v2[33];
  uint64_t v9 = v2[22];
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v10 = sub_10049CF34;
  }
  else {
    uint64_t v10 = sub_10049CC58;
  }
  return _swift_task_switch(v10, v9, 0);
}

uint64_t sub_10049CC58()
{
  uint64_t v18 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[49];
    uint64_t v3 = v0[47];
    uint64_t v4 = v0[43];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[18] = sub_100110D58(0xD000000000000022, 0x8000000100637A20, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s returning successfully", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v16(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[49];
    uint64_t v7 = v0[47];
    uint64_t v8 = v0[43];

    v6(v7, v8);
  }
  uint64_t v9 = v0[42];
  uint64_t v10 = v0[39];
  uint64_t v11 = v0[40];
  (*(void (**)(void, uint64_t, uint64_t))(v11 + 16))(v0[41], v9, v10);
  id v12 = objc_allocWithZone((Class)type metadata accessor for XPCMobileDocumentReaderResponse());
  uint64_t v13 = XPCMobileDocumentReaderResponse.init(value:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v13);
}

uint64_t sub_10049CF34()
{
  uint64_t v50 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[46];
  typea = (void (*)(uint64_t, uint64_t))v0[49];
  uint64_t v46 = v0[43];
  uint64_t v3 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v4 = v0[29];
  uint64_t v48 = v0[30];
  v49[0] = 0;
  uint64_t v44 = v0[28];
  uint64_t v5 = v0[26];
  uint64_t v47 = v0[27];
  uint64_t v39 = v0[24];
  uint64_t v41 = v0[25];
  v49[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x800000010064F100;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD000000000000022;
  v7._object = (void *)0x8000000100637A20;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x800000010064F150;
  String.append(_:)(v8);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  typea(v1, v46);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v48);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001449B8(v39, v4);
  defaultLogger()();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9(v44, v4, v41);
  uint64_t v45 = v9;
  v9(v47, v4, v41);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v40 = (void (*)(uint64_t, uint64_t))v0[49];
    uint64_t v35 = v0[43];
    uint64_t v36 = v0[45];
    os_log_t log = v10;
    uint64_t v12 = v0[28];
    uint64_t v42 = v0[27];
    uint64_t v14 = v0[25];
    uint64_t v13 = v0[26];
    uint64_t v15 = swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315650;
    v0[15] = sub_100110D58(0xD000000000000022, 0x8000000100637A20, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    os_log_type_t type = v11;
    uint64_t v16 = Error.localizedDescription.getter();
    v0[16] = sub_100110D58(v16, v17, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v18(v12, v14);
    *(_WORD *)(v15 + 22) = 2080;
    uint64_t v19 = v42;
    uint64_t v20 = MobileDocumentReaderSession.Error.debugDescription.getter();
    if (v21)
    {
      unint64_t v22 = v21;
    }
    else
    {
      uint64_t v20 = 7104878;
      unint64_t v22 = 0xE300000000000000;
    }
    v0[17] = sub_100110D58(v20, v22, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v43 = v18;
    v18(v19, v14);
    _os_log_impl((void *)&_mh_execute_header, log, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v40(v36, v35);
  }
  else
  {
    Swift::String v23 = (void (*)(uint64_t, uint64_t))v0[49];
    uint64_t v24 = v0[45];
    uint64_t v25 = v0[43];
    uint64_t v26 = v0[27];
    uint64_t v27 = v0[25];
    os_log_type_t v28 = *(void (**)(uint64_t, uint64_t))(v0[26] + 8);
    v28(v0[28], v27);
    unint64_t v43 = v28;
    v28(v26, v27);

    v23(v24, v25);
  }
  uint64_t v29 = v0[29];
  uint64_t v30 = v0[25];
  sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
  swift_allocError();
  v45(v31, v29, v30);
  swift_willThrow();
  swift_errorRelease();
  v43(v29, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

uint64_t sub_10049D70C(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v7 = a1;
  id v8 = a2;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[6] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10049D7E4;
  return sub_10049BDEC((uint64_t)v7, (uint64_t)v8);
}

uint64_t sub_10049D7E4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  Swift::String v6 = *(void **)(*v2 + 24);
  id v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  swift_release();
  uint64_t v9 = *(void (***)(void, void, void))(v5 + 40);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0);
    _Block_release(v9);
  }
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_10049D9C0()
{
  v1[20] = v0;
  v1[21] = type metadata accessor for DIPError();
  v1[22] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for MobileDocumentReaderSession.Error();
  v1[23] = v2;
  v1[24] = *(void *)(v2 - 8);
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[28] = v3;
  v1[29] = *(void *)(v3 - 8);
  v1[30] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[31] = v4;
  v1[32] = *(void *)(v4 - 8);
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  return _swift_task_switch(sub_10049DBAC, v0, 0);
}

uint64_t sub_10049DBAC()
{
  uint64_t v62 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v56 = *(void *)(v0 + 248);
    uint64_t v58 = *(void *)(v0 + 288);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v61[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 152) = sub_100110D58(0x65526C65636E6163, 0xEC00000029286461, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v58, v56);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 288);
    uint64_t v7 = *(void *)(v0 + 248);
    uint64_t v8 = *(void *)(v0 + 256);

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  *(void *)(v0 + 296) = v5;
  uint64_t v9 = *(void *)(v0 + 160) + 112;
  swift_beginAccess();
  sub_100048D6C(v9, v0 + 56, &qword_10072FB48);
  if (*(void *)(v0 + 80))
  {
    sub_10000C6B4((long long *)(v0 + 56), v0 + 16);
    sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v10;
    void *v10 = v0;
    v10[1] = sub_10049E4D4;
    return sub_10011AA98();
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v14 = *(void *)(v0 + 224);
    sub_10000C6CC(v0 + 56, &qword_10072FB48);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v12, enum case for DIPError.Code.unexpectedDaemonState(_:), v14);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v15 = *(void *)(v0 + 272);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v17 = *(void *)(v0 + 232);
    uint64_t v54 = *(void *)(v0 + 224);
    uint64_t v55 = *(void *)(v0 + 248);
    uint64_t v18 = *(void *)(v0 + 216);
    uint64_t v19 = *(void *)(v0 + 192);
    uint64_t v57 = *(void *)(v0 + 208);
    uint64_t v59 = *(void *)(v0 + 200);
    uint64_t v20 = *(void *)(v0 + 176);
    uint64_t v52 = *(void *)(v0 + 184);
    v61[0] = 0;
    v61[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v21._uint64_t countAndFlagsBits = 0xD000000000000021;
    v21._object = (void *)0x800000010064F100;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = 0x65526C65636E6163;
    v22._object = (void *)0xEC00000029286461;
    String.append(_:)(v22);
    v23._uint64_t countAndFlagsBits = 0xD000000000000015;
    v23._object = (void *)0x800000010064F150;
    String.append(_:)(v23);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_bridgeObjectRelease();
    v50(v15, v55);
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v16, enum case for DIPError.Code.internalError(_:), v54);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001449B8(v20, v18);
    defaultLogger()();
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    uint64_t v25 = v52;
    v24(v57, v18, v52);
    uint64_t v53 = v24;
    v24(v59, v18, v25);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
    uint64_t v30 = *(void *)(v0 + 264);
    uint64_t v31 = *(void *)(v0 + 248);
    uint64_t v33 = *(void *)(v0 + 200);
    uint64_t v32 = *(void *)(v0 + 208);
    uint64_t v35 = *(void *)(v0 + 184);
    uint64_t v34 = *(void *)(v0 + 192);
    if (v28)
    {
      uint64_t v51 = *(void *)(v0 + 248);
      os_log_type_t type = v27;
      uint64_t v36 = swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315650;
      uint64_t v49 = v30;
      *(void *)(v0 + 120) = sub_100110D58(0x65526C65636E6163, 0xEC00000029286461, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2080;
      sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
      uint64_t v37 = Error.localizedDescription.getter();
      *(void *)(v0 + 128) = sub_100110D58(v37, v38, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v39(v32, v35);
      *(_WORD *)(v36 + 22) = 2080;
      uint64_t v40 = MobileDocumentReaderSession.Error.debugDescription.getter();
      if (v41)
      {
        unint64_t v42 = v41;
      }
      else
      {
        uint64_t v40 = 7104878;
        unint64_t v42 = 0xE300000000000000;
      }
      *(void *)(v0 + 136) = sub_100110D58(v40, v42, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v60 = v39;
      v39(v33, v35);
      _os_log_impl((void *)&_mh_execute_header, v26, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v29(v49, v51);
    }
    else
    {
      unint64_t v43 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v43(v32, v35);
      uint64_t v60 = v43;
      v43(v33, v35);

      v29(v30, v31);
    }
    uint64_t v44 = *(void *)(v0 + 216);
    uint64_t v45 = *(void *)(v0 + 184);
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    swift_allocError();
    v53(v46, v44, v45);
    swift_willThrow();
    swift_errorRelease();
    v60(v44, v45);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
    return v47();
  }
}

uint64_t sub_10049E4D4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 160);
  if (v0) {
    uint64_t v4 = sub_10049E840;
  }
  else {
    uint64_t v4 = sub_10049E600;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10049E600()
{
  uint64_t v13 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v3 = v0[35];
    uint64_t v4 = v0[31];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[18] = sub_100110D58(0x65526C65636E6163, 0xEC00000029286461, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s returning successfully", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v11(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[31];

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10049E840()
{
  uint64_t v50 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[34];
  uint64_t v39 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v2 = v0[30];
  uint64_t v46 = v0[31];
  uint64_t v3 = v0[29];
  uint64_t v48 = v0[28];
  v49[0] = 0;
  uint64_t v4 = v0[27];
  uint64_t v44 = v0[26];
  uint64_t v5 = v0[24];
  uint64_t v47 = v0[25];
  uint64_t v6 = v0[22];
  uint64_t v41 = v0[23];
  v49[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v7._uint64_t countAndFlagsBits = 0xD000000000000021;
  v7._object = (void *)0x800000010064F100;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0x65526C65636E6163;
  v8._object = (void *)0xEC00000029286461;
  String.append(_:)(v8);
  v9._object = (void *)0x800000010064F150;
  v9._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v9);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  v39(v1, v46);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v48);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001449B8(v6, v4);
  defaultLogger()();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v10(v44, v4, v41);
  uint64_t v45 = v10;
  v10(v47, v4, v41);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v38 = v0[33];
    uint64_t v40 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v37 = v0[31];
    os_log_t log = v11;
    uint64_t v13 = v0[26];
    uint64_t v42 = v0[25];
    uint64_t v15 = v0[23];
    uint64_t v14 = v0[24];
    uint64_t v16 = swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315650;
    v0[15] = sub_100110D58(0x65526C65636E6163, 0xEC00000029286461, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2080;
    sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
    os_log_type_t type = v12;
    uint64_t v17 = Error.localizedDescription.getter();
    v0[16] = sub_100110D58(v17, v18, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v13, v15);
    *(_WORD *)(v16 + 22) = 2080;
    uint64_t v20 = v42;
    uint64_t v21 = MobileDocumentReaderSession.Error.debugDescription.getter();
    if (v22)
    {
      unint64_t v23 = v22;
    }
    else
    {
      uint64_t v21 = 7104878;
      unint64_t v23 = 0xE300000000000000;
    }
    v0[17] = sub_100110D58(v21, v23, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v43 = v19;
    v19(v20, v15);
    _os_log_impl((void *)&_mh_execute_header, log, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v40(v38, v37);
  }
  else
  {
    uint64_t v24 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v25 = v0[33];
    uint64_t v26 = v0[31];
    uint64_t v27 = v0[25];
    uint64_t v28 = v0[23];
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0[24] + 8);
    v29(v0[26], v28);
    unint64_t v43 = v29;
    v29(v27, v28);

    v24(v25, v26);
  }
  uint64_t v30 = v0[27];
  uint64_t v31 = v0[23];
  sub_1004AC62C(&qword_10072FB50, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error);
  swift_allocError();
  v45(v32, v30, v31);
  swift_willThrow();
  swift_errorRelease();
  v43(v30, v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t sub_10049EFE8(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10046B8F8;
  return sub_10049D9C0();
}

uint64_t sub_10049F090()
{
  v1[24] = v0;
  uint64_t v2 = type metadata accessor for DIPError();
  v1[25] = v2;
  v1[26] = *(void *)(v2 - 8);
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[29] = v3;
  v1[30] = *(void *)(v3 - 8);
  v1[31] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[32] = v4;
  v1[33] = *(void *)(v4 - 8);
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  return _swift_task_switch(sub_10049F240, v0, 0);
}

uint64_t sub_10049F240()
{
  uint64_t v49 = v0;
  uint64_t v1 = v0[24] + 112;
  swift_beginAccess();
  sub_100048D6C(v1, (uint64_t)(v0 + 2), &qword_10072FB48);
  uint64_t v2 = v0[5];
  sub_10000C6CC((uint64_t)(v0 + 2), &qword_10072FB48);
  if (v2)
  {
    uint64_t v3 = (long long *)(v0 + 12);
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = v0[37];
    uint64_t v8 = v0[32];
    uint64_t v9 = v0[33];
    if (v6)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      v0[23] = sub_100110D58(0x6164696C61766E69, 0xEC00000029286574, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderSessionProxy %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v3 = (long long *)(v0 + 12);
      swift_slowDealloc();

      uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v11(v7, v8);
    }
    else
    {

      uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v11(v7, v8);
    }
    v0[38] = v11;
    sub_100048D6C(v1, (uint64_t)v3, &qword_10072FB48);
    if (v0[15])
    {
      sub_10000C6B4(v3, (uint64_t)(v0 + 7));
      unint64_t v18 = sub_10000C728(v0 + 7, v0[10]);
      v0[39] = v18;
      uint64_t v19 = *v18;
      return _swift_task_switch(sub_10049FA24, v19, 0);
    }
    uint64_t v20 = v0[30];
    uint64_t v21 = v0[31];
    uint64_t v22 = v0[29];
    uint64_t v43 = v0[28];
    uint64_t v23 = v0[26];
    uint64_t v45 = v0[27];
    uint64_t v47 = v11;
    uint64_t v41 = v0[25];
    sub_10000C6CC((uint64_t)v3, &qword_10072FB48);
    uint64_t v24 = *(void (**)(uint64_t, void, uint64_t))(v20 + 104);
    v24(v21, enum case for DIPError.Code.unexpectedDaemonState(_:), v22);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v24(v21, enum case for DIPError.Code.internalError(_:), v22);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
    v25(v45, v43, v41);
    uint64_t v26 = v11;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.error.getter();
    BOOL v28 = os_log_type_enabled(v27, type);
    uint64_t v46 = v0[32];
    uint64_t v29 = v0[27];
    uint64_t v42 = v0[36];
    uint64_t v44 = v0[28];
    uint64_t v30 = v0[25];
    uint64_t v31 = v0[26];
    if (v28)
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v39 = (void *)swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      v0[20] = sub_100110D58(0x6164696C61766E69, 0xEC00000029286574, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2112;
      swift_allocError();
      v25(v33, v29, v30);
      uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
      v0[21] = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v39 = v34;
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v35(v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v27, type, "MobileDocumentReaderSessionProxy %s finished with error: %@", (uint8_t *)v32, 0x16u);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      v47(v42, v46);
      v35(v44, v30);
    }
    else
    {

      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v36(v29, v30);
      swift_errorRelease();
      v26(v42, v46);
      v36(v44, v30);
    }
  }
  else
  {
    defaultLogger()();
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Invalidate called when mobileDocumentReaderFlow is nil, nothing to invalidate.", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = v0[33];
    uint64_t v15 = v0[34];
    uint64_t v17 = v0[32];

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = (uint64_t (*)(void))v0[1];
  return v37();
}

uint64_t sub_10049FA24()
{
  uint64_t v1 = **(void **)(v0 + 312);
  uint64_t v2 = OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask;
  if (*(void *)(v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask))
  {
    type metadata accessor for MobileDocumentReaderResponse();
    swift_retain();
    sub_100007764((uint64_t *)&unk_100723450);
    Task.cancel()();
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + 192);
  *(void *)(v1 + v2) = 0;
  swift_release();
  return _swift_task_switch(sub_10049FAFC, v3, 0);
}

uint64_t sub_10049FAFC()
{
  os_log_type_t v13 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 7));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[38];
    uint64_t v3 = v0[35];
    uint64_t v4 = v0[32];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[22] = sub_100110D58(0x6164696C61766E69, 0xEC00000029286574, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s completed", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v11(v3, v4);
  }
  else
  {
    BOOL v6 = (void (*)(uint64_t, uint64_t))v0[38];
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[32];

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10049FD20(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for MobileDocumentReaderStoreSession.Error.Code();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError();
  v2[19] = v5;
  v2[20] = *(void *)(v5 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderStoreSession.Error();
  v2[22] = v6;
  v2[23] = *(void *)(v6 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  sub_100007764(&qword_10072FB40);
  v2[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileDocumentReaderIdentityKeyResponse();
  v2[27] = v7;
  v2[28] = *(void *)(v7 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v2[31] = v8;
  v2[32] = *(void *)(v8 - 8);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  return _swift_task_switch(sub_1004A0024, v1, 0);
}

uint64_t sub_1004A0024()
{
  uint64_t v20 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = v0[36];
    uint64_t v4 = v0[31];
    uint64_t v3 = v0[32];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v19[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[10] = sub_100110D58(0x797469746E656469, 0xEF293A5F2879654BLL, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v6(v18, v4);
  }
  else
  {
    uint64_t v7 = v0[36];
    uint64_t v8 = v0[31];
    uint64_t v9 = v0[32];

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[37] = v6;
  sub_100493B00(v0 + 2);
  uint64_t v10 = v0[11];
  sub_10000C728(v0 + 2, v0[5]);
  uint64_t v11 = v0[26];
  if (v10)
  {
    XPCMobileDocumentReaderIdentityKeyRequest.value.getter();
    uint64_t v12 = type metadata accessor for MobileDocumentReaderIdentityKeyRequest();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  }
  else
  {
    uint64_t v13 = type metadata accessor for MobileDocumentReaderIdentityKeyRequest();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
  }
  uint64_t v14 = (void *)swift_task_alloc();
  v0[38] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1004A09DC;
  uint64_t v15 = v0[30];
  uint64_t v16 = v0[26];
  return sub_1005E1EAC(v15, v16);
}

uint64_t sub_1004A09DC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 208);
  uint64_t v4 = *(void *)(v2 + 96);
  sub_10000C6CC(v3, &qword_10072FB40);
  if (v0) {
    uint64_t v5 = sub_1004A0E00;
  }
  else {
    uint64_t v5 = sub_1004A0B2C;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1004A0B2C()
{
  uint64_t v18 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v3 = v0[35];
    uint64_t v4 = v0[31];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[9] = sub_100110D58(0x797469746E656469, 0xEF293A5F2879654BLL, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s completed", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v16(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[31];

    v6(v7, v8);
  }
  uint64_t v9 = v0[30];
  uint64_t v10 = v0[27];
  uint64_t v11 = v0[28];
  (*(void (**)(void, uint64_t, uint64_t))(v11 + 16))(v0[29], v9, v10);
  id v12 = objc_allocWithZone((Class)type metadata accessor for XPCMobileDocumentReaderIdentityKeyResponse());
  uint64_t v13 = XPCMobileDocumentReaderIdentityKeyResponse.init(value:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v13);
}

uint64_t sub_1004A0E00()
{
  uint64_t v46 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[34];
  uint64_t v40 = v0[31];
  uint64_t v41 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v33 = v0[25];
  uint64_t v42 = v0[24];
  uint64_t v44 = v0[23];
  v45[0] = 0;
  uint64_t v2 = v0[21];
  uint64_t v38 = v0[22];
  uint64_t v3 = v0[20];
  uint64_t v35 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[14];
  uint64_t v28 = v0[16];
  os_log_t log = (os_log_t)v0[15];
  uint64_t v32 = v0[13];
  v45[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v7._uint64_t countAndFlagsBits = 0xD000000000000021;
  v7._object = (void *)0x800000010064F100;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0x797469746E656469;
  v8._object = (void *)0xEF293A5F2879654BLL;
  String.append(_:)(v8);
  v9._object = (void *)0x800000010064F150;
  v9._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v9);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  v41(v1, v40);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v5, enum case for DIPError.Code.internalError(_:), v28);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  DIPError.code.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v28);
  (*(void (**)(os_log_t, void, uint64_t))(v6 + 104))(log, enum case for MobileDocumentReaderStoreSession.Error.Code.unknown(_:), v32);
  MobileDocumentReaderStoreSession.Error.init(code:underlyingError:)();
  sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v2, v35);
  MobileDocumentReaderStoreSession.Error.underlyingError.setter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v35);
  defaultLogger()();
  uint64_t v11 = v42;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
  v43(v11, v33, v38);
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v36 = v0[33];
    uint64_t v37 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v34 = v0[31];
    uint64_t v14 = v0[23];
    uint64_t v15 = v0[24];
    uint64_t v16 = v0[22];
    loga = v12;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315394;
    v0[7] = sub_100110D58(0x797469746E656469, 0xEF293A5F2879654BLL, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2112;
    sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
    swift_allocError();
    v43(v18, v15, v16);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v19;
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v39(v15, v16);
    _os_log_impl((void *)&_mh_execute_header, loga, v13, "MobileDocumentReaderSessionProxy %s finished with error: %@", (uint8_t *)v17, 0x16u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v37(v36, v34);
  }
  else
  {
    uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v21 = v0[33];
    uint64_t v22 = v0[31];
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v0[23] + 8);
    v39(v0[24], v0[22]);

    v20(v21, v22);
  }
  uint64_t v23 = v0[25];
  uint64_t v24 = v0[22];
  sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
  swift_allocError();
  v43(v25, v23, v24);
  swift_willThrow();
  swift_errorRelease();
  v39(v23, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_1004A16B0(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1004AD238;
  return sub_10049FD20((uint64_t)a1);
}

uint64_t sub_1004A1770(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for MobileDocumentReaderStoreSession.Error.Code();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError();
  v2[19] = v5;
  v2[20] = *(void *)(v5 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderStoreSession.Error();
  v2[22] = v6;
  v2[23] = *(void *)(v6 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileDocumentReaderIdentityKeyRequest();
  v2[26] = v7;
  v2[27] = *(void *)(v7 - 8);
  v2[28] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v2[29] = v8;
  v2[30] = *(void *)(v8 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  return _swift_task_switch(sub_1004A1A34, v1, 0);
}

uint64_t sub_1004A1A34()
{
  uint64_t v15 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = v0[34];
    uint64_t v3 = v0[30];
    uint64_t v12 = v0[29];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v14[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[10] = sub_100110D58(0xD000000000000015, 0x800000010064F200, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v13, v12);
  }
  else
  {
    uint64_t v6 = v0[34];
    uint64_t v7 = v0[29];
    uint64_t v8 = v0[30];

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  v0[35] = v5;
  sub_100493B00(v0 + 2);
  sub_10000C728(v0 + 2, v0[5]);
  XPCMobileDocumentReaderIdentityKeyRequest.value.getter();
  Swift::String v9 = (void *)swift_task_alloc();
  v0[36] = v9;
  *Swift::String v9 = v0;
  v9[1] = sub_1004A2304;
  uint64_t v10 = v0[28];
  return sub_1005E2EF0(v10);
}

uint64_t sub_1004A2304()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[28];
  uint64_t v4 = v2[27];
  uint64_t v5 = v2[26];
  uint64_t v6 = v2[12];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_1004A26C8;
  }
  else {
    uint64_t v7 = sub_1004A2480;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1004A2480()
{
  uint64_t v13 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[35];
    uint64_t v3 = v0[33];
    uint64_t v4 = v0[29];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[9] = sub_100110D58(0xD000000000000015, 0x800000010064F200, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s completed", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v11(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[35];
    uint64_t v7 = v0[33];
    uint64_t v8 = v0[29];

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1004A26C8()
{
  uint64_t v46 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v42 = (void (*)(uint64_t, uint64_t))v0[35];
  uint64_t v1 = v0[32];
  uint64_t v29 = v0[29];
  uint64_t v34 = v0[25];
  uint64_t v43 = v0[24];
  v45[0] = 0;
  uint64_t v27 = v0[23];
  uint64_t v2 = v0[21];
  uint64_t v40 = v0[22];
  uint64_t v3 = v0[18];
  uint64_t v35 = v0[19];
  uint64_t v37 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v28 = v0[16];
  uint64_t v5 = v0[14];
  uint64_t v30 = v0[15];
  os_log_t log = (os_log_t)v0[13];
  v45[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x800000010064F100;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD000000000000015;
  v7._object = (void *)0x800000010064F200;
  String.append(_:)(v7);
  v8._object = (void *)0x800000010064F150;
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v8);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  v42(v1, v29);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v28);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  DIPError.code.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v28);
  (*(void (**)(uint64_t, void, os_log_t))(v5 + 104))(v30, enum case for MobileDocumentReaderStoreSession.Error.Code.unknown(_:), log);
  MobileDocumentReaderStoreSession.Error.init(code:underlyingError:)();
  sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v9, v2, v35);
  MobileDocumentReaderStoreSession.Error.underlyingError.setter();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v2, v35);
  defaultLogger()();
  uint64_t v10 = v43;
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  v44(v10, v34, v40);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v38 = v0[31];
    uint64_t v39 = (void (*)(uint64_t, uint64_t))v0[35];
    uint64_t v36 = v0[29];
    loga = v11;
    uint64_t v14 = v0[23];
    uint64_t v13 = v0[24];
    uint64_t v15 = v0[22];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    v0[7] = sub_100110D58(0xD000000000000015, 0x800000010064F200, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2112;
    sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
    swift_allocError();
    v44(v17, v13, v15);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v18;
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v41(v13, v15);
    _os_log_impl((void *)&_mh_execute_header, loga, v12, "MobileDocumentReaderSessionProxy %s finished with error: %@", (uint8_t *)v16, 0x16u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v39(v38, v36);
  }
  else
  {
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[35];
    uint64_t v20 = v0[31];
    uint64_t v21 = v0[29];
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0[23] + 8);
    v41(v0[24], v0[22]);

    v19(v20, v21);
  }
  uint64_t v22 = v0[25];
  uint64_t v23 = v0[22];
  sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
  swift_allocError();
  v44(v24, v22, v23);
  swift_willThrow();
  swift_errorRelease();
  v41(v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_1004A2F34(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  Swift::String v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *Swift::String v6 = v3;
  v6[1] = sub_1004AD23C;
  return sub_1004A1770((uint64_t)v5);
}

uint64_t sub_1004A2FF8(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for MobileDocumentReaderStoreSession.Error.Code();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError();
  v2[19] = v5;
  v2[20] = *(void *)(v5 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderStoreSession.Error();
  v2[22] = v6;
  v2[23] = *(void *)(v6 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  sub_100007764(&qword_10072FB38);
  v2[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileDocumentReaderCertificateResponse();
  v2[27] = v7;
  v2[28] = *(void *)(v7 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v2[31] = v8;
  v2[32] = *(void *)(v8 - 8);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  return _swift_task_switch(sub_1004A32FC, v1, 0);
}

uint64_t sub_1004A32FC()
{
  uint64_t v20 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = v0[36];
    uint64_t v4 = v0[31];
    uint64_t v3 = v0[32];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v19[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[10] = sub_100110D58(0x6369666974726563, 0xEF293A5F28657461, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v6(v18, v4);
  }
  else
  {
    uint64_t v7 = v0[36];
    uint64_t v8 = v0[31];
    uint64_t v9 = v0[32];

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[37] = v6;
  sub_100493B00(v0 + 2);
  uint64_t v10 = v0[11];
  sub_10000C728(v0 + 2, v0[5]);
  uint64_t v11 = v0[26];
  if (v10)
  {
    XPCMobileDocumentReaderCertificateRequest.value.getter();
    uint64_t v12 = type metadata accessor for MobileDocumentReaderCertificateRequest();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  }
  else
  {
    uint64_t v13 = type metadata accessor for MobileDocumentReaderCertificateRequest();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
  }
  uint64_t v14 = (void *)swift_task_alloc();
  v0[38] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1004A3CB4;
  uint64_t v15 = v0[30];
  uint64_t v16 = v0[26];
  return sub_1005E3434(v15, v16);
}

uint64_t sub_1004A3CB4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 208);
  uint64_t v4 = *(void *)(v2 + 96);
  sub_10000C6CC(v3, &qword_10072FB38);
  if (v0) {
    uint64_t v5 = sub_1004A40D8;
  }
  else {
    uint64_t v5 = sub_1004A3E04;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1004A3E04()
{
  uint64_t v18 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v3 = v0[35];
    uint64_t v4 = v0[31];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[9] = sub_100110D58(0x6369666974726563, 0xEF293A5F28657461, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s completed", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v16(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[31];

    v6(v7, v8);
  }
  uint64_t v9 = v0[30];
  uint64_t v10 = v0[27];
  uint64_t v11 = v0[28];
  (*(void (**)(void, uint64_t, uint64_t))(v11 + 16))(v0[29], v9, v10);
  id v12 = objc_allocWithZone((Class)type metadata accessor for XPCMobileDocumentReaderCertificateResponse());
  uint64_t v13 = XPCMobileDocumentReaderCertificateResponse.init(value:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v13);
}

uint64_t sub_1004A40D8()
{
  uint64_t v46 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[34];
  uint64_t v40 = v0[31];
  uint64_t v41 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v33 = v0[25];
  uint64_t v42 = v0[24];
  uint64_t v44 = v0[23];
  v45[0] = 0;
  uint64_t v2 = v0[21];
  uint64_t v38 = v0[22];
  uint64_t v3 = v0[20];
  uint64_t v35 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[14];
  uint64_t v28 = v0[16];
  os_log_t log = (os_log_t)v0[15];
  uint64_t v32 = v0[13];
  v45[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v7._uint64_t countAndFlagsBits = 0xD000000000000021;
  v7._object = (void *)0x800000010064F100;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0x6369666974726563;
  v8._object = (void *)0xEF293A5F28657461;
  String.append(_:)(v8);
  v9._object = (void *)0x800000010064F150;
  v9._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v9);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  v41(v1, v40);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v5, enum case for DIPError.Code.internalError(_:), v28);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  DIPError.code.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v28);
  (*(void (**)(os_log_t, void, uint64_t))(v6 + 104))(log, enum case for MobileDocumentReaderStoreSession.Error.Code.unknown(_:), v32);
  MobileDocumentReaderStoreSession.Error.init(code:underlyingError:)();
  sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v2, v35);
  MobileDocumentReaderStoreSession.Error.underlyingError.setter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v35);
  defaultLogger()();
  uint64_t v11 = v42;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
  v43(v11, v33, v38);
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v36 = v0[33];
    uint64_t v37 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v34 = v0[31];
    uint64_t v14 = v0[23];
    uint64_t v15 = v0[24];
    uint64_t v16 = v0[22];
    loga = v12;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315394;
    v0[7] = sub_100110D58(0x6369666974726563, 0xEF293A5F28657461, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2112;
    sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
    swift_allocError();
    v43(v18, v15, v16);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v19;
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v39(v15, v16);
    _os_log_impl((void *)&_mh_execute_header, loga, v13, "MobileDocumentReaderSessionProxy %s finished with error: %@", (uint8_t *)v17, 0x16u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v37(v36, v34);
  }
  else
  {
    uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v21 = v0[33];
    uint64_t v22 = v0[31];
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v0[23] + 8);
    v39(v0[24], v0[22]);

    v20(v21, v22);
  }
  uint64_t v23 = v0[25];
  uint64_t v24 = v0[22];
  sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
  swift_allocError();
  v43(v25, v23, v24);
  swift_willThrow();
  swift_errorRelease();
  v39(v23, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_1004A4988(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10046AAC4;
  return sub_1004A2FF8((uint64_t)a1);
}

uint64_t sub_1004A4A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  uint64_t v5 = type metadata accessor for MobileDocumentReaderStoreSession.Error.Code();
  v4[15] = v5;
  v4[16] = *(void *)(v5 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v4[18] = v6;
  v4[19] = *(void *)(v6 - 8);
  v4[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError();
  v4[21] = v7;
  v4[22] = *(void *)(v7 - 8);
  v4[23] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MobileDocumentReaderStoreSession.Error();
  v4[24] = v8;
  v4[25] = *(void *)(v8 - 8);
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for MobileDocumentReaderCertificateRequest();
  v4[28] = v9;
  v4[29] = *(void *)(v9 - 8);
  v4[30] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v4[31] = v10;
  v4[32] = *(void *)(v10 - 8);
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  return _swift_task_switch(sub_1004A4D10, v3, 0);
}

uint64_t sub_1004A4D10()
{
  uint64_t v17 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = v0[36];
    uint64_t v3 = v0[32];
    uint64_t v14 = v0[31];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v16[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[10] = sub_100110D58(0xD000000000000023, 0x800000010064F1D0, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v15, v14);
  }
  else
  {
    uint64_t v6 = v0[36];
    uint64_t v7 = v0[31];
    uint64_t v8 = v0[32];

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  v0[37] = v5;
  sub_100493B00(v0 + 2);
  sub_10000C728(v0 + 2, v0[5]);
  XPCMobileDocumentReaderCertificateRequest.value.getter();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[38] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1004A55E8;
  uint64_t v10 = v0[30];
  uint64_t v11 = v0[12];
  uint64_t v12 = v0[13];
  return sub_1005E450C(v10, v11, v12);
}

uint64_t sub_1004A55E8()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[30];
  uint64_t v4 = v2[29];
  uint64_t v5 = v2[28];
  uint64_t v6 = v2[14];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_1004A59AC;
  }
  else {
    uint64_t v7 = sub_1004A5764;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1004A5764()
{
  os_log_type_t v13 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v3 = v0[35];
    uint64_t v4 = v0[31];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[9] = sub_100110D58(0xD000000000000023, 0x800000010064F1D0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s completed", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v11(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[31];

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1004A59AC()
{
  uint64_t v46 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v42 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v1 = v0[34];
  uint64_t v29 = v0[31];
  uint64_t v34 = v0[27];
  uint64_t v43 = v0[26];
  v45[0] = 0;
  uint64_t v27 = v0[25];
  uint64_t v2 = v0[23];
  uint64_t v40 = v0[24];
  uint64_t v3 = v0[20];
  uint64_t v35 = v0[21];
  uint64_t v37 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v28 = v0[18];
  uint64_t v5 = v0[16];
  uint64_t v30 = v0[17];
  os_log_t log = (os_log_t)v0[15];
  v45[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x800000010064F100;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD000000000000023;
  v7._object = (void *)0x800000010064F1D0;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x800000010064F150;
  String.append(_:)(v8);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  v42(v1, v29);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v28);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  DIPError.code.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v28);
  (*(void (**)(uint64_t, void, os_log_t))(v5 + 104))(v30, enum case for MobileDocumentReaderStoreSession.Error.Code.unknown(_:), log);
  MobileDocumentReaderStoreSession.Error.init(code:underlyingError:)();
  sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v9, v2, v35);
  MobileDocumentReaderStoreSession.Error.underlyingError.setter();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v2, v35);
  defaultLogger()();
  uint64_t v10 = v43;
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  v44(v10, v34, v40);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v38 = v0[33];
    uint64_t v39 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v36 = v0[31];
    loga = v11;
    uint64_t v14 = v0[25];
    uint64_t v13 = v0[26];
    uint64_t v15 = v0[24];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    v0[7] = sub_100110D58(0xD000000000000023, 0x800000010064F1D0, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2112;
    sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
    swift_allocError();
    v44(v17, v13, v15);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v18;
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v41(v13, v15);
    _os_log_impl((void *)&_mh_execute_header, loga, v12, "MobileDocumentReaderSessionProxy %s finished with error: %@", (uint8_t *)v16, 0x16u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v39(v38, v36);
  }
  else
  {
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v20 = v0[33];
    uint64_t v21 = v0[31];
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0[25] + 8);
    v41(v0[26], v0[24]);

    v19(v20, v21);
  }
  uint64_t v22 = v0[27];
  uint64_t v23 = v0[24];
  sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
  swift_allocError();
  v44(v24, v22, v23);
  swift_willThrow();
  swift_errorRelease();
  v41(v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_1004A6220(void *a1, int a2, void *aBlock, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  v4[5] = v7;
  id v9 = a1;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  void *v10 = v4;
  v10[1] = sub_1004A630C;
  return sub_1004A4A48((uint64_t)v9, v6, v8);
}

uint64_t sub_1004A630C()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v3 + 32);
  if (v2)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 32));
  id v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_1004A64D0(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for MobileDocumentReaderStoreSession.Error.Code();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError();
  v2[19] = v5;
  v2[20] = *(void *)(v5 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderStoreSession.Error();
  v2[22] = v6;
  v2[23] = *(void *)(v6 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileDocumentReaderCertificateRequest();
  v2[26] = v7;
  v2[27] = *(void *)(v7 - 8);
  v2[28] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v2[29] = v8;
  v2[30] = *(void *)(v8 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  return _swift_task_switch(sub_1004A6794, v1, 0);
}

uint64_t sub_1004A6794()
{
  uint64_t v14 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[30];
    uint64_t v11 = v0[29];
    uint64_t v12 = v0[34];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v13[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[10] = sub_100110D58(0xD000000000000015, 0x800000010064F1B0, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v12, v11);
  }
  else
  {
    uint64_t v6 = v0[34];
    uint64_t v7 = v0[29];
    uint64_t v8 = v0[30];

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  v0[35] = v5;
  sub_100493B00(v0 + 2);
  id v9 = sub_10000C728(v0 + 2, v0[5]);
  XPCMobileDocumentReaderCertificateRequest.value.getter();
  v0[36] = *v9;
  return _swift_task_switch(sub_1004A7018, 0, 0);
}

uint64_t sub_1004A7018()
{
  uint64_t v1 = MobileDocumentReaderCertificateRequest.sessionIdentifier.getter();
  uint64_t v3 = v2;
  *(void *)(v0 + 296) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1004A70D4;
  return sub_10012E390(v1, v3);
}

uint64_t sub_1004A70D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  uint64_t v2 = *(void *)(*(void *)v0 + 216);
  uint64_t v3 = *(void *)(*(void *)v0 + 208);
  uint64_t v4 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1004A7264, v4, 0);
}

uint64_t sub_1004A7264()
{
  uint64_t v13 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[35];
    uint64_t v3 = v0[33];
    uint64_t v4 = v0[29];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[9] = sub_100110D58(0xD000000000000015, 0x800000010064F1B0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s completed", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v11(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[35];
    uint64_t v7 = v0[33];
    uint64_t v8 = v0[29];

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1004A762C(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  void v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1004AD23C;
  return sub_1004A64D0((uint64_t)v5);
}

uint64_t sub_1004A76F0()
{
  v1[11] = v0;
  uint64_t v2 = type metadata accessor for MobileDocumentReaderStoreSession.Error.Code();
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v1[18] = v4;
  v1[19] = *(void *)(v4 - 8);
  v1[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MobileDocumentReaderStoreSession.Error();
  v1[21] = v5;
  v1[22] = *(void *)(v5 - 8);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderIssuerRootCertificateList();
  v1[25] = v6;
  v1[26] = *(void *)(v6 - 8);
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  sub_100007764(&qword_10072FB30);
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v1[31] = v7;
  v1[32] = *(void *)(v7 - 8);
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  return _swift_task_switch(sub_1004A7A04, v0, 0);
}

uint64_t sub_1004A7A04()
{
  uint64_t v15 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = v0[36];
    uint64_t v3 = v0[32];
    uint64_t v12 = v0[31];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v14[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[10] = sub_100110D58(0xD000000000000013, 0x800000010064F190, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v13, v12);
  }
  else
  {
    uint64_t v6 = v0[36];
    uint64_t v7 = v0[31];
    uint64_t v8 = v0[32];

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  v0[37] = v5;
  sub_100493B00(v0 + 2);
  sub_10000C728(v0 + 2, v0[5]);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[38] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1004A82EC;
  uint64_t v10 = v0[30];
  return sub_1005E630C(v10);
}

uint64_t sub_1004A82EC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v4 = sub_1004A8760;
  }
  else {
    uint64_t v4 = sub_1004A8418;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1004A8418()
{
  uint64_t v22 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v3 = v0[35];
    uint64_t v4 = v0[31];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[9] = sub_100110D58(0xD000000000000013, 0x800000010064F190, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s completed", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v19(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[31];

    v6(v7, v8);
  }
  uint64_t v9 = v0[29];
  uint64_t v10 = v0[25];
  uint64_t v11 = v0[26];
  sub_100048D6C(v0[30], v9, &qword_10072FB30);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v12 = v0[28];
    uint64_t v14 = v0[26];
    uint64_t v13 = v0[27];
    uint64_t v15 = v0[25];
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 32))(v12, v0[29], v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v15);
    id v16 = objc_allocWithZone((Class)type metadata accessor for XPCMobileDocumentReaderIssuerRootCertificateList());
    uint64_t v20 = XPCMobileDocumentReaderIssuerRootCertificateList.init(value:)();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v15);
  }
  sub_10000C6CC(v0[30], &qword_10072FB30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(uint64_t))v0[1];
  return v17(v20);
}

uint64_t sub_1004A8760()
{
  uint64_t v46 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[34];
  uint64_t v40 = v0[31];
  uint64_t v41 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v32 = v0[24];
  uint64_t v42 = v0[23];
  uint64_t v44 = v0[22];
  v45[0] = 0;
  uint64_t v2 = v0[20];
  uint64_t v38 = v0[21];
  uint64_t v3 = v0[17];
  uint64_t v33 = v0[18];
  uint64_t v35 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v27 = v0[15];
  uint64_t v28 = v0[14];
  os_log_t log = (os_log_t)v0[12];
  v45[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x800000010064F100;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD000000000000013;
  v7._object = (void *)0x800000010064F190;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x800000010064F150;
  String.append(_:)(v8);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  v41(v1, v40);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v27);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  DIPError.code.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v27);
  (*(void (**)(uint64_t, void, os_log_t))(v5 + 104))(v28, enum case for MobileDocumentReaderStoreSession.Error.Code.unknown(_:), log);
  MobileDocumentReaderStoreSession.Error.init(code:underlyingError:)();
  sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v9, v2, v33);
  MobileDocumentReaderStoreSession.Error.underlyingError.setter();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v2, v33);
  defaultLogger()();
  uint64_t v10 = v42;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
  v43(v10, v32, v38);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v36 = v0[33];
    uint64_t v37 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v34 = v0[31];
    uint64_t v14 = v0[22];
    uint64_t v13 = v0[23];
    loga = v11;
    uint64_t v15 = v0[21];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    v0[7] = sub_100110D58(0xD000000000000013, 0x800000010064F190, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2112;
    sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
    swift_allocError();
    v43(v17, v13, v15);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v18;
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v39(v13, v15);
    _os_log_impl((void *)&_mh_execute_header, loga, v12, "MobileDocumentReaderSessionProxy %s finished with error: %@", (uint8_t *)v16, 0x16u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v37(v36, v34);
  }
  else
  {
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v20 = v0[33];
    uint64_t v21 = v0[31];
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v0[22] + 8);
    v39(v0[23], v0[21]);

    v19(v20, v21);
  }
  uint64_t v22 = v0[24];
  uint64_t v23 = v0[21];
  sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
  swift_allocError();
  v43(v24, v22, v23);
  swift_willThrow();
  swift_errorRelease();
  v39(v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_1004A8FD0(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1004A9078;
  return sub_1004A76F0();
}

uint64_t sub_1004A9078(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  swift_task_dealloc();
  swift_release();
  Swift::String v7 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    Swift::String v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v7)[2](v7, 0, v8);

    _Block_release(v7);
  }
  else
  {
    ((void (**)(void, void *, void))v7)[2](v7, a1, 0);
    _Block_release(v7);
  }
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_1004A921C()
{
  v1[11] = v0;
  uint64_t v2 = type metadata accessor for MobileDocumentReaderStoreSession.Error.Code();
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v1[18] = v4;
  v1[19] = *(void *)(v4 - 8);
  v1[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MobileDocumentReaderStoreSession.Error();
  v1[21] = v5;
  v1[22] = *(void *)(v5 - 8);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v1[25] = v6;
  v1[26] = *(void *)(v6 - 8);
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  return _swift_task_switch(sub_1004A9484, v0, 0);
}

uint64_t sub_1004A9484()
{
  uint64_t v13 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = v0[30];
    uint64_t v3 = v0[26];
    uint64_t v10 = v0[25];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v12[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[10] = sub_100110D58(0xD000000000000018, 0x800000010064F170, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v11, v10);
  }
  else
  {
    uint64_t v6 = v0[30];
    uint64_t v7 = v0[25];
    uint64_t v8 = v0[26];

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  v0[31] = v5;
  sub_100493B00(v0 + 2);
  v0[32] = *sub_10000C728(v0 + 2, v0[5]);
  return _swift_task_switch(sub_1004A9D04, 0, 0);
}

uint64_t sub_1004A9D04()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v1;
  void *v1 = v0;
  v1[1] = sub_1004A9D98;
  return sub_10014C51C();
}

uint64_t sub_1004A9D98()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v4 = sub_1004AA100;
  }
  else {
    uint64_t v4 = sub_1004A9EC4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1004A9EC4()
{
  uint64_t v13 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[31];
    uint64_t v3 = v0[29];
    uint64_t v4 = v0[25];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[9] = sub_100110D58(0xD000000000000018, 0x800000010064F170, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s completed", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v11(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[31];
    uint64_t v7 = v0[29];
    uint64_t v8 = v0[25];

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1004AA100()
{
  uint64_t v46 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[28];
  uint64_t v40 = v0[25];
  uint64_t v41 = (void (*)(uint64_t, uint64_t))v0[31];
  uint64_t v32 = v0[24];
  uint64_t v42 = v0[23];
  uint64_t v44 = v0[22];
  v45[0] = 0;
  uint64_t v2 = v0[20];
  uint64_t v38 = v0[21];
  uint64_t v3 = v0[17];
  uint64_t v33 = v0[18];
  uint64_t v35 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v27 = v0[15];
  uint64_t v28 = v0[14];
  os_log_t log = (os_log_t)v0[12];
  v45[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x800000010064F100;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD000000000000018;
  v7._object = (void *)0x800000010064F170;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x800000010064F150;
  String.append(_:)(v8);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  v41(v1, v40);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v27);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  DIPError.code.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v27);
  (*(void (**)(uint64_t, void, os_log_t))(v5 + 104))(v28, enum case for MobileDocumentReaderStoreSession.Error.Code.unknown(_:), log);
  MobileDocumentReaderStoreSession.Error.init(code:underlyingError:)();
  sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v9, v2, v33);
  MobileDocumentReaderStoreSession.Error.underlyingError.setter();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v2, v33);
  defaultLogger()();
  uint64_t v10 = v42;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
  v43(v10, v32, v38);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v36 = v0[27];
    uint64_t v37 = (void (*)(uint64_t, uint64_t))v0[31];
    uint64_t v34 = v0[25];
    uint64_t v14 = v0[22];
    uint64_t v13 = v0[23];
    loga = v11;
    uint64_t v15 = v0[21];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    v0[7] = sub_100110D58(0xD000000000000018, 0x800000010064F170, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2112;
    sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
    swift_allocError();
    v43(v17, v13, v15);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v18;
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v39(v13, v15);
    _os_log_impl((void *)&_mh_execute_header, loga, v12, "MobileDocumentReaderSessionProxy %s finished with error: %@", (uint8_t *)v16, 0x16u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v37(v36, v34);
  }
  else
  {
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[31];
    uint64_t v20 = v0[27];
    uint64_t v21 = v0[25];
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v0[22] + 8);
    v39(v0[23], v0[21]);

    v19(v20, v21);
  }
  uint64_t v22 = v0[24];
  uint64_t v23 = v0[21];
  sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
  swift_allocError();
  v43(v24, v22, v23);
  swift_willThrow();
  swift_errorRelease();
  v39(v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_1004AA93C(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1004AD234;
  return sub_1004A921C();
}

uint64_t sub_1004AA9E4()
{
  v1[11] = v0;
  uint64_t v2 = type metadata accessor for MobileDocumentReaderStoreSession.Error.Code();
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v1[18] = v4;
  v1[19] = *(void *)(v4 - 8);
  v1[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MobileDocumentReaderStoreSession.Error();
  v1[21] = v5;
  v1[22] = *(void *)(v5 - 8);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v1[25] = v6;
  v1[26] = *(void *)(v6 - 8);
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  return _swift_task_switch(sub_1004AAC4C, v0, 0);
}

uint64_t sub_1004AAC4C()
{
  uint64_t v13 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = v0[30];
    uint64_t v3 = v0[26];
    uint64_t v10 = v0[25];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v12[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[10] = sub_100110D58(0xD000000000000011, 0x800000010064F130, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v5(v11, v10);
  }
  else
  {
    uint64_t v6 = v0[30];
    uint64_t v7 = v0[25];
    uint64_t v8 = v0[26];

    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5(v6, v7);
  }
  v0[31] = v5;
  sub_100493B00(v0 + 2);
  v0[32] = *sub_10000C728(v0 + 2, v0[5]);
  return _swift_task_switch(sub_1004AB4CC, 0, 0);
}

uint64_t sub_1004AB4CC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v1;
  void *v1 = v0;
  v1[1] = sub_1004AB560;
  return sub_10014B438();
}

uint64_t sub_1004AB560()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v4 = sub_1004AB8C8;
  }
  else {
    uint64_t v4 = sub_1004AB68C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1004AB68C()
{
  uint64_t v13 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[31];
    uint64_t v3 = v0[29];
    uint64_t v4 = v0[25];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[9] = sub_100110D58(0xD000000000000011, 0x800000010064F130, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderSessionProxy %s completed", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v11(v3, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[31];
    uint64_t v7 = v0[29];
    uint64_t v8 = v0[25];

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1004AB8C8()
{
  uint64_t v46 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[28];
  uint64_t v40 = v0[25];
  uint64_t v41 = (void (*)(uint64_t, uint64_t))v0[31];
  uint64_t v32 = v0[24];
  uint64_t v42 = v0[23];
  uint64_t v44 = v0[22];
  v45[0] = 0;
  uint64_t v2 = v0[20];
  uint64_t v38 = v0[21];
  uint64_t v3 = v0[17];
  uint64_t v33 = v0[18];
  uint64_t v35 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v27 = v0[15];
  uint64_t v28 = v0[14];
  os_log_t log = (os_log_t)v0[12];
  v45[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x800000010064F100;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD000000000000011;
  v7._object = (void *)0x800000010064F130;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x800000010064F150;
  String.append(_:)(v8);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_bridgeObjectRelease();
  v41(v1, v40);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v27);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  DIPError.code.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v27);
  (*(void (**)(uint64_t, void, os_log_t))(v5 + 104))(v28, enum case for MobileDocumentReaderStoreSession.Error.Code.unknown(_:), log);
  MobileDocumentReaderStoreSession.Error.init(code:underlyingError:)();
  sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v9, v2, v33);
  MobileDocumentReaderStoreSession.Error.underlyingError.setter();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v2, v33);
  defaultLogger()();
  uint64_t v10 = v42;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
  v43(v10, v32, v38);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v36 = v0[27];
    uint64_t v37 = (void (*)(uint64_t, uint64_t))v0[31];
    uint64_t v34 = v0[25];
    uint64_t v14 = v0[22];
    uint64_t v13 = v0[23];
    loga = v11;
    uint64_t v15 = v0[21];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    v0[7] = sub_100110D58(0xD000000000000011, 0x800000010064F130, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2112;
    sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
    swift_allocError();
    v43(v17, v13, v15);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v18;
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v39(v13, v15);
    _os_log_impl((void *)&_mh_execute_header, loga, v12, "MobileDocumentReaderSessionProxy %s finished with error: %@", (uint8_t *)v16, 0x16u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v37(v36, v34);
  }
  else
  {
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[31];
    uint64_t v20 = v0[27];
    uint64_t v21 = v0[25];
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v0[22] + 8);
    v39(v0[23], v0[21]);

    v19(v20, v21);
  }
  uint64_t v22 = v0[24];
  uint64_t v23 = v0[21];
  sub_1004AC62C(&qword_10072FB28, (void (*)(uint64_t))&type metadata accessor for MobileDocumentReaderStoreSession.Error);
  swift_allocError();
  v43(v24, v22, v23);
  swift_willThrow();
  swift_errorRelease();
  v39(v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_1004AC104(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1004AD234;
  return sub_1004AA9E4();
}

uint64_t sub_1004AC1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v16 = *(void *)(v8 - 8);
  uint64_t v17 = v8;
  __chkstk_darwin(v8);
  uint64_t v18 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MobileDocumentReaderBundleTypeCheckOutcome();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728((void *)(v4 + 200), *(void *)(v4 + 224));
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = v24;
  char v23 = 0;
  dispatch thunk of MobileDocumentReaderEntitlementChecking.checkBundleTypeSupported(auditToken:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (result != enum case for MobileDocumentReaderBundleTypeCheckOutcome.supported(_:))
  {
    if (result == enum case for MobileDocumentReaderBundleTypeCheckOutcome.unsupportedApplicationExtension(_:))
    {
      (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for DIPError.Code.documentReaderApplicationExtensionsNotPermitted(_:), v17);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    else
    {
      if (result != enum case for MobileDocumentReaderBundleTypeCheckOutcome.unknownBundleType(_:)) {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      }
      (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for DIPError.Code.documentReaderUnsupportedBundleType(_:), v17);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1004AC62C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004AC5A8()
{
  sub_10000C6CC(v0 + 112, &qword_10072FB48);
  sub_10000C6CC(v0 + 152, &qword_10072FB60);
  swift_unknownObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 200);
  swift_defaultActor_destroy();

  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for MobileDocumentReaderSessionProxy()
{
  return self;
}

uint64_t sub_1004AC62C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004AC674()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004AC6AC(uint64_t a1)
{
  return sub_100494F3C(a1);
}

uint64_t sub_1004AC6B8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_10072FB68 + dword_10072FB68);
  return v5(v2, v3);
}

uint64_t sub_1004AC770()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_10072FB78 + dword_10072FB78);
  return v5(v2, v3);
}

uint64_t sub_1004AC828()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_10072FB98 + dword_10072FB98);
  return v5(v2, v3);
}

uint64_t sub_1004AC8E0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  Swift::String v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10072FBB8 + dword_10072FBB8);
  return v6(v2, v3, v4);
}

uint64_t sub_1004AC9A0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  Swift::String v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *Swift::String v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (uint64_t (*)(void *, int, void *, uint64_t))((char *)&dword_10072FBD8 + dword_10072FBD8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1004ACA6C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  Swift::String v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10072FBF8 + dword_10072FBF8);
  return v6(v2, v3, v4);
}

uint64_t sub_1004ACB2C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  Swift::String v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10072FC18 + dword_10072FC18);
  return v6(v2, v3, v4);
}

uint64_t sub_1004ACBEC()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  Swift::String v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10072FC38 + dword_10072FC38);
  return v6(v2, v3, v4);
}

uint64_t sub_1004ACCAC()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_10072FC58 + dword_10072FC58);
  return v5(v2, v3);
}

uint64_t sub_1004ACD64()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004ACDB4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  Swift::String v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *Swift::String v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, uint64_t))((char *)&dword_10072FC78 + dword_10072FC78);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1004ACE80()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10000C494;
  Swift::String v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10072FC98 + dword_10072FC98);
  return v6(v2, v3, v4);
}

uint64_t sub_1004ACF40()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  Swift::String v6 = (uint64_t (*)(int, void *, uint64_t))((char *)&dword_10072FCB8 + dword_10072FCB8);
  return v6(v2, v3, v4);
}

uint64_t sub_1004AD000()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  Swift::String v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10072FCD8 + dword_10072FCD8);
  return v6(v2, v3, v4);
}

uint64_t sub_1004AD0C0()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_10072FCF8 + dword_10072FCF8);
  return v5(v2, v3);
}

uint64_t sub_1004AD178()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  Swift::String v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10072FD18 + dword_10072FD18);
  return v6(v2, v3, v4);
}

void *sub_1004AD240(uint64_t a1)
{
  uint64_t v3 = sub_100007764(&qword_10072FD48);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v33 = (uint64_t)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v34 = (char *)v30 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v7)
  {
    v30[1] = v1;
    uint64_t v38 = _swiftEmptyArrayStorage;
    sub_10011144C(0, v7, 0);
    uint64_t result = v38;
    int v32 = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
    int v31 = enum case for ISO18013KnownNamespaces.iso23220_1(_:);
    uint64_t v9 = (void **)(a1 + 56);
    do
    {
      uint64_t v35 = result;
      uint64_t v10 = (uint64_t)*(v9 - 3);
      uint64_t v11 = (uint64_t)*(v9 - 2);
      uint64_t v12 = (uint64_t)*(v9 - 1);
      uint64_t v13 = *v9;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v14 = (uint64_t)v34;
      ISO18013KnownNamespaces.init(rawValue:)();
      uint64_t v15 = type metadata accessor for ISO18013KnownNamespaces();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1) {
        goto LABEL_11;
      }
      uint64_t v17 = v14;
      uint64_t v18 = v33;
      sub_100048D6C(v17, v33, &qword_10072FD48);
      int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v18, v15);
      if (v19 == v32)
      {
        char v20 = static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)();
        uint64_t v14 = (uint64_t)v34;
        if ((v20 & 1) == 0) {
          goto LABEL_11;
        }
      }
      else
      {
        if (v19 != v31)
        {
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v33, v15);
          uint64_t v14 = (uint64_t)v34;
LABEL_11:
          uint64_t v36 = v10;
          uint64_t v37 = v11;
          swift_bridgeObjectRetain();
          v25._uint64_t countAndFlagsBits = 58;
          v25._object = (void *)0xE100000000000000;
          String.append(_:)(v25);
          v26._uint64_t countAndFlagsBits = v12;
          v26._object = v13;
          String.append(_:)(v26);
          uint64_t v24 = v36;
          uint64_t v23 = v37;
          sub_10000C6CC(v14, &qword_10072FD48);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        char v21 = static ISO23220_1_ElementIdentifier.isAgeOverElement(_:)();
        uint64_t v14 = (uint64_t)v34;
        if ((v21 & 1) == 0) {
          goto LABEL_11;
        }
      }
      sub_10000C6CC(v14, &qword_10072FD48);
      uint64_t v36 = v10;
      uint64_t v37 = v11;
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = 0x65766F5F6567613ALL;
      v22._object = (void *)0xEC0000004E4E5F72;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = v36;
      uint64_t v23 = v37;
LABEL_12:
      uint64_t result = v35;
      uint64_t v38 = v35;
      unint64_t v28 = v35[2];
      unint64_t v27 = v35[3];
      if (v28 >= v27 >> 1)
      {
        sub_10011144C(v27 > 1, v28 + 1, 1);
        uint64_t result = v38;
      }
      v9 += 4;
      result[2] = v28 + 1;
      uint64_t v29 = &result[2 * v28];
      v29[4] = v24;
      v29[5] = v23;
      --v7;
    }
    while (v7);
  }
  return result;
}

void *sub_1004AD578()
{
  sub_100007764(&qword_10072FD60);
  uint64_t v0 = (int *)(sub_100007764(&qword_100725990) - 8);
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100623650;
  unint64_t v4 = v3 + v2;
  uint64_t v5 = (void *)(v4 + v0[14]);
  uint64_t v6 = enum case for MobileDocumentElement.Element.address(_:);
  uint64_t v7 = type metadata accessor for MobileDocumentElement.Element();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v4, v6, v7);
  *uint64_t v5 = 0x73736572646461;
  v5[1] = 0xE700000000000000;
  uint64_t v9 = (void *)(v4 + v1 + v0[14]);
  v8();
  *uint64_t v9 = 6645601;
  v9[1] = 0xE300000000000000;
  uint64_t v10 = (void *)(v4 + 2 * v1 + v0[14]);
  v8();
  void *v10 = 0x6C616E6F6974616ELL;
  v10[1] = 0xEB00000000797469;
  uint64_t v11 = (void *)(v4 + 3 * v1 + v0[14]);
  v8();
  *uint64_t v11 = 7890291;
  v11[1] = 0xE300000000000000;
  uint64_t v12 = v4 + 4 * v1 + v0[14];
  v8();
  strcpy((char *)v12, "date-of-birth");
  *(_WORD *)(v12 + 14) = -4864;
  uint64_t v13 = (void *)(v4 + 5 * v1 + v0[14]);
  v8();
  *uint64_t v13 = 0xD00000000000001ELL;
  v13[1] = 0x8000000100629830;
  uint64_t v14 = (void *)(v4 + 6 * v1 + v0[14]);
  v8();
  *uint64_t v14 = 0xD000000000000018;
  v14[1] = 0x8000000100629850;
  uint64_t v15 = (void *)(v4 + 7 * v1 + v0[14]);
  v8();
  *uint64_t v15 = 0xD000000000000013;
  v15[1] = 0x8000000100629880;
  uint64_t v16 = (void *)(v4 + 8 * v1 + v0[14]);
  v8();
  *uint64_t v16 = 0x746E656D75636F64;
  v16[1] = 0xEF7265626D756E2DLL;
  uint64_t v17 = (void *)(v4 + 9 * v1 + v0[14]);
  v8();
  *uint64_t v17 = 0xD000000000000012;
  v17[1] = 0x80000001006298A0;
  uint64_t v18 = (void *)(v4 + 10 * v1 + v0[14]);
  v8();
  *uint64_t v18 = 0x6E2D796C696D6166;
  v18[1] = 0xEB00000000656D61;
  int v19 = (void *)(v4 + 11 * v1 + v0[14]);
  v8();
  *int v19 = 0x616E2D6E65766967;
  v19[1] = 0xEA0000000000656DLL;
  char v20 = (void *)(v4 + 12 * v1 + v0[14]);
  v8();
  *char v20 = 0xD000000000000011;
  v20[1] = 0x8000000100629810;
  char v21 = (void *)(v4 + 13 * v1 + v0[14]);
  v8();
  *char v21 = 0x7469617274726F70;
  v21[1] = 0xE800000000000000;
  uint64_t result = (void *)sub_10015D514(v3);
  off_10072FD38 = result;
  return result;
}

uint64_t sub_1004ADA50(unint64_t a1, void *a2, int a3)
{
  int v29 = a3;
  uint64_t v30 = a2;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v33 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MobileDocumentReaderRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v26 - v11;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v13 - 8);
  uint64_t v36 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
  unint64_t v38 = a1;
  v16(v12, a1, v6);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  uint64_t v34 = v17;
  if (os_log_type_enabled(v17, v18))
  {
    int v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v40 = v28;
    unint64_t v27 = v19;
    *(_DWORD *)int v19 = 136315138;
    v26[1] = v19 + 4;
    v16(v10, (unint64_t)v12, v6);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v39 = sub_100110D58(v20, v21, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    Swift::String v22 = v34;
    _os_log_impl((void *)&_mh_execute_header, v34, v18, "Validating request: %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v36);
  uint64_t v23 = v38;
  uint64_t v24 = v37;
  sub_1004ADF40(v38);
  if (v24)
  {
    (*(void (**)(char *, void, uint64_t))(v31 + 104))(v33, enum case for DIPError.Code.documentReaderInvalidRequest(_:), v32);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    sub_1004AFC48(v23);
    return sub_1004B1220(v23, v30, v29 & 1);
  }
}

uint64_t sub_1004ADF40(unint64_t a1)
{
  unint64_t v142 = a1;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = type metadata accessor for MobileDocumentElement.Element();
  uint64_t v128 = *(void (***)(uint64_t, void, uint64_t))(v135 - 8);
  uint64_t v7 = __chkstk_darwin(v135);
  os_log_type_t v131 = (char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v132 = (char *)&v125 - v10;
  __chkstk_darwin(v9);
  uint64_t v133 = (char *)&v125 - v11;
  uint64_t v130 = type metadata accessor for MobileDocumentElement();
  uint64_t v134 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v136 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for MobileDocumentType();
  uint64_t v138 = *(void (***)(char *, uint64_t))(v139 - 8);
  __chkstk_darwin(v139);
  unint64_t v140 = (uint64_t (**)(char *, uint64_t))((char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for DIPError.Code();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v147 = v14;
  uint64_t v148 = v15;
  __chkstk_darwin(v14);
  uint64_t v155 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v144 = (void *)type metadata accessor for MobileDocumentReaderRequest.Document();
  uint64_t v17 = *(v144 - 1);
  uint64_t v18 = __chkstk_darwin(v144);
  uint64_t v129 = (char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v137 = (char *)&v125 - v21;
  __chkstk_darwin(v20);
  uint64_t v141 = (char *)&v125 - v22;
  uint64_t v145 = type metadata accessor for BundleRecord();
  uint64_t v143 = *(void *)(v145 - 8);
  uint64_t v23 = __chkstk_darwin(v145);
  Swift::String v25 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v146 = (char *)&v125 - v26;
  uint64_t v27 = type metadata accessor for MobileDocumentReaderRequestValidator();
  v28._uint64_t countAndFlagsBits = 0xD000000000000037;
  v28._object = (void *)0x800000010064FA20;
  if (NSUserDefaults.internalBool(forKey:)(v28))
  {
    defaultLogger()();
    int v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Bypassing entitlement checks", v31, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_10000C728((void *)(v1 + *(int *)(v27 + 20)), *(void *)(v1 + *(int *)(v27 + 20) + 24));
  AuditToken.wrapped.getter();
  dispatch thunk of BundleRecordFetching.record(withAuditToken:)();
  if (v2)
  {
    v153[0] = 0;
    v153[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v33._uint64_t countAndFlagsBits = 0xD000000000000037;
    v33._object = (void *)0x800000010064FA60;
    String.append(_:)(v33);
    type metadata accessor for AuditToken();
    sub_1004B3700(&qword_10072FD50, (void (*)(uint64_t))&type metadata accessor for AuditToken);
    v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v148 + 104))(v155, enum case for DIPError.Code.internalError(_:), v147);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  uint64_t v35 = v143;
  uint64_t v36 = v146;
  uint64_t v37 = v145;
  (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v146, v25, v145);
  unint64_t v38 = v141;
  MobileDocumentReaderRequest.document.getter();
  char v39 = MobileDocumentReaderRequest.Document.isDisplayOnly.getter();
  uint64_t v42 = *(void (**)(char *, void *))(v17 + 8);
  uint64_t v41 = (void *)(v17 + 8);
  uint64_t v40 = v42;
  v42(v38, v144);
  if (v39)
  {
    uint64_t v43 = (void *)BundleRecord.entitlements.getter();
    v44._uint64_t countAndFlagsBits = static MobileDocumentReaderEntitlementChecker.Constant.displayOnlyEntitlementKey.getter();
    Swift::Bool v45 = LSPropertyList.BOOL(forKey:)(v44);

    swift_bridgeObjectRelease();
    if (v45)
    {
LABEL_21:
      uint64_t v55 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
      uint64_t v56 = v36;
      return v55(v56, v37);
    }
LABEL_20:
    (*(void (**)(char *, void, uint64_t))(v148 + 104))(v155, enum case for DIPError.Code.missingEntitlement(_:), v147);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_21;
  }
  uint64_t v46 = v40;
  uint64_t v127 = v41;
  uint64_t v126 = 0;
  uint64_t v47 = (void *)BundleRecord.entitlements.getter();
  static MobileDocumentReaderEntitlementChecker.Constant.dataTransferEntitlementKey.getter();
  NSString v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100025C28(0, &qword_100726CD0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  sub_100025C28(0, (unint64_t *)&qword_100730C50);
  id v50 = [v47 objectForKey:v48 ofClass:ObjCClassFromMetadata valuesOfClass:swift_getObjCClassFromMetadata()];

  if (v50)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v154, 0, sizeof(v154));
  }
  uint64_t v51 = (char *)v140;
  sub_10046F254((uint64_t)v154, (uint64_t)v153);
  if (!v153[3])
  {
    sub_10000C6CC((uint64_t)v153, (uint64_t *)&unk_100727200);
    goto LABEL_20;
  }
  sub_100007764(&qword_10072FD58);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v36 = v146;
    goto LABEL_20;
  }
  uint64_t v52 = v151;
  strcpy((char *)&v151, "document-types");
  HIBYTE(v151) = -18;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v52 + 16) && (unint64_t v53 = sub_100590504((uint64_t)v153), (v54 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v52 + 56) + 32 * v53, (uint64_t)&v151);
  }
  else
  {
    long long v151 = 0u;
    long long v152 = 0u;
  }
  sub_1001D90FC((uint64_t)v153);
  if (!*((void *)&v152 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10000C6CC((uint64_t)&v151, (uint64_t *)&unk_100727200);
    (*(void (**)(char *, void, uint64_t))(v148 + 104))(v155, enum case for DIPError.Code.missingEntitlement(_:), v147);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v55 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
    uint64_t v56 = v146;
    return v55(v56, v37);
  }
  sub_1000078A8(&v151, v154);
  sub_10003BC28((uint64_t)v154, (uint64_t)v153);
  sub_100007764(&qword_1007268F0);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v148 + 104))(v155, enum case for DIPError.Code.missingEntitlement(_:), v147);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_30:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_31:
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v154);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v146, v145);
  }
  uint64_t v57 = (void *)v151;
  uint64_t v58 = v137;
  MobileDocumentReaderRequest.document.getter();
  MobileDocumentReaderRequest.Document.type.getter();
  v46(v58, v144);
  uint64_t v59 = v126;
  uint64_t v60 = sub_1004B3748();
  if (v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v138[1](v51, v139);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v154);
    return (*(uint64_t (**)(char *, uint64_t))(v143 + 8))(v146, v145);
  }
  uint64_t v62 = v60;
  uint64_t v63 = v61;
  v138[1](v51, v139);
  LOBYTE(v62) = sub_10020F0CC(v62, v63, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v62 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v148 + 104))(v155, enum case for DIPError.Code.missingEntitlement(_:), v147);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v154);
    return (*(uint64_t (**)(char *, uint64_t))(v143 + 8))(v146, v145);
  }
  *(void *)&long long v149 = 0xD000000000000011;
  *((void *)&v149 + 1) = 0x800000010064FB60;
  AnyHashable.init<A>(_:)();
  uint64_t v35 = v143;
  if (*(void *)(v52 + 16) && (unint64_t v64 = sub_100590504((uint64_t)v153), (v65 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v52 + 56) + 32 * v64, (uint64_t)&v149);
  }
  else
  {
    long long v149 = 0u;
    long long v150 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1001D90FC((uint64_t)v153);
  if (!*((void *)&v150 + 1))
  {
    sub_10000C6CC((uint64_t)&v149, (uint64_t *)&unk_100727200);
    (*(void (**)(char *, void, uint64_t))(v148 + 104))(v155, enum case for DIPError.Code.missingEntitlement(_:), v147);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_30;
  }
  sub_1000078A8(&v149, &v151);
  sub_10003BC28((uint64_t)&v151, (uint64_t)v153);
  if (!swift_dynamicCast())
  {
    (*(void (**)(char *, void, uint64_t))(v148 + 104))(v155, enum case for DIPError.Code.missingEntitlement(_:), v147);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v151);
    goto LABEL_31;
  }
  uint64_t v66 = (void *)v149;
  uint64_t v67 = v141;
  MobileDocumentReaderRequest.document.getter();
  uint64_t v68 = MobileDocumentReaderRequest.Document.retainedElements.getter();
  uint64_t v69 = v67;
  uint64_t v70 = v144;
  v46(v69, v144);
  uint64_t v71 = v129;
  MobileDocumentReaderRequest.document.getter();
  uint64_t v72 = MobileDocumentReaderRequest.Document.nonRetainedElements.getter();
  v46(v71, v70);
  v153[0] = v68;
  sub_100162B40(v72);
  uint64_t result = v153[0];
  uint64_t v73 = *(char **)(v153[0] + 16);
  uint64_t v74 = v145;
  os_log_type_t v144 = v66;
  uint64_t v137 = v73;
  if (!v73)
  {
    swift_bridgeObjectRelease();
LABEL_104:
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v151);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v154);
    return (*(uint64_t (**)(char *, uint64_t))(v143 + 8))(v146, v74);
  }
  uint64_t v75 = 0;
  unint64_t v142 = v153[0] + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
  uint64_t v141 = (char *)(v134 + 16);
  unint64_t v140 = (uint64_t (**)(char *, uint64_t))(v128 + 11);
  LODWORD(v139) = enum case for MobileDocumentElement.Element.ageAtLeast(_:);
  long long v76 = (void (**)(uint64_t, uint64_t))(v128 + 1);
  LODWORD(v129) = enum case for MobileDocumentElement.Element.age(_:);
  v128 += 13;
  uint64_t v138 = (void (**)(char *, uint64_t))(v134 + 8);
  uint64_t v127 = v66 + 9;
  uint64_t v77 = v130;
  uint64_t v78 = v135;
  uint64_t v79 = (uint64_t)v132;
  uint64_t v80 = v153[0];
  while (1)
  {
    if ((unint64_t)v75 >= *(void *)(v80 + 16))
    {
      __break(1u);
      goto LABEL_114;
    }
    (*(void (**)(char *, unint64_t, uint64_t))(v134 + 16))(v136, v142 + *(void *)(v134 + 72) * (void)v75, v77);
    uint64_t v81 = v133;
    MobileDocumentElement.storage.getter();
    uint64_t v82 = v81;
    int v83 = (*v140)(v81, v78);
    if (v83 != v139)
    {
      os_log_t v99 = *v76;
      (*v76)((uint64_t)v82, v78);
      uint64_t v100 = (uint64_t)v131;
      if (qword_10071F568 != -1) {
        swift_once();
      }
      uint64_t v101 = off_10072FD38;
      MobileDocumentElement.storage.getter();
      if (v101[2] && (unint64_t v102 = sub_100590BFC(v100), (v103 & 1) != 0))
      {
        Swift::String v104 = (uint64_t *)(v101[7] + 16 * v102);
        uint64_t v106 = *v104;
        uint64_t v105 = v104[1];
        swift_bridgeObjectRetain();
        v99(v100, v135);
        uint64_t v107 = v144[2];
        if (!v107) {
          goto LABEL_106;
        }
        BOOL v108 = v144[4] == v106 && v144[5] == v105;
        uint64_t v79 = (uint64_t)v132;
        if (v108 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_46;
        }
        if (v107 != 1)
        {
          if (v144[6] == v106 && v144[7] == v105) {
            goto LABEL_46;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            goto LABEL_46;
          }
          uint64_t v126 = v80;
          if (v107 != 2)
          {
            uint64_t v110 = v127;
            uint64_t v111 = 2;
            do
            {
              uint64_t v112 = v111 + 1;
              if (__OFADD__(v111, 1)) {
                goto LABEL_115;
              }
              BOOL v113 = *(v110 - 1) == v106 && *v110 == v105;
              if (v113 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
LABEL_45:
                uint64_t v77 = v130;
                uint64_t v79 = (uint64_t)v132;
                uint64_t v80 = v126;
                goto LABEL_46;
              }
              v110 += 2;
              ++v111;
            }
            while (v112 != v107);
          }
          swift_bridgeObjectRelease();
          uint64_t v124 = v143;
          uint64_t v37 = v145;
          uint64_t v120 = v146;
          uint64_t v121 = v155;
          uint64_t v123 = v147;
          uint64_t v122 = v148;
LABEL_108:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v122 + 104))(v121, enum case for DIPError.Code.missingEntitlement(_:), v123);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          (*v138)(v136, v130);
          _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v151);
          _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v154);
          uint64_t v55 = *(uint64_t (**)(char *, uint64_t))(v124 + 8);
          uint64_t v56 = v120;
          return v55(v56, v37);
        }
LABEL_106:
        swift_bridgeObjectRelease();
      }
      else
      {
        v99(v100, v135);
      }
      uint64_t v120 = v146;
      uint64_t v121 = v155;
      uint64_t v123 = v147;
      uint64_t v122 = v148;
      uint64_t v37 = v145;
      uint64_t v124 = v143;
      goto LABEL_108;
    }
    if (qword_10071F568 != -1) {
      swift_once();
    }
    unint64_t v84 = off_10072FD38;
    (*v128)(v79, v129, v78);
    if (!v84[2] || (unint64_t v85 = sub_100590BFC(v79), (v86 & 1) == 0))
    {
      (*v76)(v79, v78);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v114 = v146;
      uint64_t v115 = v155;
      uint64_t v116 = v147;
      uint64_t v117 = v148;
      uint64_t v118 = v145;
      uint64_t v119 = v143;
LABEL_110:
      (*(void (**)(char *, void, uint64_t))(v117 + 104))(v115, enum case for DIPError.Code.missingEntitlement(_:), v116);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*v138)(v136, v130);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v151);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v154);
      return (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v114, v118);
    }
    int v87 = (uint64_t *)(v84[7] + 16 * v85);
    uint64_t v88 = v78;
    uint64_t v90 = *v87;
    uint64_t v89 = v87[1];
    uint64_t v91 = *v76;
    swift_bridgeObjectRetain();
    v91(v79, v88);
    uint64_t v92 = v144[2];
    if (!v92) {
      goto LABEL_109;
    }
    BOOL v93 = v144[4] == v90 && v144[5] == v89;
    if (!v93 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v92 == 1) {
        goto LABEL_109;
      }
      if (v144[6] != v90 || v144[7] != v89)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
      }
    }
LABEL_46:
    ++v75;
    swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v138)(v136, v77);
    uint64_t v78 = v135;
    if (v75 == v137)
    {
      swift_bridgeObjectRelease();
      uint64_t v74 = v145;
      goto LABEL_104;
    }
  }
  uint64_t v126 = v80;
  if (v92 == 2)
  {
LABEL_109:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v119 = v143;
    uint64_t v118 = v145;
    uint64_t v114 = v146;
    uint64_t v115 = v155;
    uint64_t v116 = v147;
    uint64_t v117 = v148;
    goto LABEL_110;
  }
  uint64_t v95 = v127;
  uint64_t v96 = 2;
  while (1)
  {
    uint64_t v97 = v96 + 1;
    if (__OFADD__(v96, 1)) {
      break;
    }
    if (*(v95 - 1) == v90 && *v95 == v89) {
      goto LABEL_45;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_45;
    }
    v95 += 2;
    ++v96;
    if (v97 == v92) {
      goto LABEL_109;
    }
  }
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
  return result;
}

uint64_t sub_1004AFC48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v123 = *(void *)(v2 - 8);
  uint64_t v124 = (void (*)(char *, uint64_t))v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for MobileDocumentElement.Element();
  uint64_t v101 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v114 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for MobileDocumentElement();
  uint64_t v105 = *(void *)(v104 - 8);
  uint64_t v6 = __chkstk_darwin(v104);
  unint64_t v102 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v112 = (char *)&v98 - v9;
  __chkstk_darwin(v8);
  BOOL v113 = (char *)&v98 - v10;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v120 = v11;
  uint64_t v121 = v12;
  __chkstk_darwin(v11);
  uint64_t v122 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v111 = type metadata accessor for MobileDocumentType.Identifier();
  uint64_t v108 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v110 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for MobileDocumentType();
  uint64_t v119 = *(char **)(v109 - 8);
  uint64_t v15 = __chkstk_darwin(v109);
  char v103 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v107 = (char *)&v98 - v17;
  uint64_t v18 = type metadata accessor for MobileDocumentReaderRequest.Document.RequestType();
  uint64_t v117 = *(void *)(v18 - 8);
  uint64_t v118 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for MobileDocumentReaderRequest.Document();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v106 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v116 = (char *)&v98 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  int v29 = (char *)&v98 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v98 - v31;
  __chkstk_darwin(v30);
  Swift::String v34 = (char *)&v98 - v33;
  type metadata accessor for MobileDocumentReaderRequestValidator();
  v35._uint64_t countAndFlagsBits = 0xD000000000000037;
  v35._object = (void *)0x800000010064F760;
  if (NSUserDefaults.internalBool(forKey:)(v35))
  {
    defaultLogger()();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Bypassing request validation", v38, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, void))(v123 + 8))(v4, v124);
  }
  os_log_t v99 = (uint64_t *)v20;
  MobileDocumentReaderRequest.document.getter();
  uint64_t v40 = MobileDocumentReaderRequest.Document.retainedElements.getter();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v22 + 8);
  v41(v34, v21);
  uint64_t v100 = a1;
  MobileDocumentReaderRequest.document.getter();
  uint64_t v42 = MobileDocumentReaderRequest.Document.nonRetainedElements.getter();
  uint64_t v123 = v21;
  uint64_t v124 = v41;
  v41(v32, v21);
  uint64_t v125 = v40;
  sub_100162B40(v42);
  uint64_t v43 = v125;
  if (!*(void *)(v125 + 16)) {
    goto LABEL_9;
  }
  uint64_t v44 = swift_bridgeObjectRetain();
  uint64_t v45 = sub_1005DDC58(v44);
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void *)(v45 + 16);
  swift_bridgeObjectRelease();
  if (v46 != *(void *)(v43 + 16))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v121 + 104))(v122, enum case for DIPError.Code.documentReaderDuplicateElementsInRequest(_:), v120);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_11;
  }
  if (sub_1004B2674(v43))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v121 + 104))(v122, enum case for DIPError.Code.documentReaderInvalidAgeAtLeastElement(_:), v120);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_11:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  MobileDocumentReaderRequest.document.getter();
  uint64_t v47 = v127;
  sub_1004B2930();
  if (v47)
  {
    v124(v29, v123);
    return swift_bridgeObjectRelease();
  }
  uint64_t v49 = v123;
  NSString v48 = v124;
  v124(v29, v123);
  id v50 = sub_100541DAC(v43);
  swift_bridgeObjectRelease();
  unint64_t v51 = *((void *)v50 + 2);
  swift_bridgeObjectRelease();
  if (v51 > 2)
  {
LABEL_16:
    (*(void (**)(char *, void, uint64_t))(v121 + 104))(v122, enum case for DIPError.Code.documentReaderTooManyAgeAtLeastElements(_:), v120);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_11;
  }
  uint64_t v52 = v116;
  MobileDocumentReaderRequest.document.getter();
  unint64_t v53 = v99;
  MobileDocumentReaderRequest.Document.requestType.getter();
  v48(v52, v49);
  uint64_t v55 = v117;
  uint64_t v54 = v118;
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v117 + 88))(v53, v118) != enum case for MobileDocumentReaderRequest.Document.RequestType.displayOnly(_:)) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v55 + 8))(v53, v54);
  }
  (*(void (**)(uint64_t *, uint64_t))(v55 + 96))(v53, v54);
  uint64_t v117 = *v53;
  uint64_t v56 = v106;
  MobileDocumentReaderRequest.document.getter();
  uint64_t v57 = v107;
  MobileDocumentReaderRequest.Document.type.getter();
  v48(v56, v49);
  uint64_t v58 = v110;
  MobileDocumentType.storage.getter();
  uint64_t v59 = (void (*)(char *, uint64_t))*((void *)v119 + 1);
  v119 += 8;
  v59(v57, v109);
  uint64_t v60 = v108;
  unint64_t v61 = v111;
  int v62 = (*(uint64_t (**)(char *, unint64_t))(v108 + 88))(v58, v111);
  if (v62 == enum case for MobileDocumentType.Identifier.nationalIDCard(_:))
  {
    (*(void (**)(char *, unint64_t))(v60 + 8))(v58, v61);
  }
  else if (v62 != enum case for MobileDocumentType.Identifier.driversLicense(_:))
  {
    swift_bridgeObjectRelease();
    uint64_t v125 = 0;
    unint64_t v126 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v75._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
    v75._object = (void *)0x800000010064F7F0;
    String.append(_:)(v75);
    MobileDocumentReaderRequest.document.getter();
    long long v76 = v103;
    MobileDocumentReaderRequest.Document.type.getter();
    v124(v34, v49);
    uint64_t v77 = v109;
    _print_unlocked<A, B>(_:_:)();
    v59(v76, v77);
    (*(void (**)(char *, void, uint64_t))(v121 + 104))(v122, enum case for DIPError.Code.documentReaderInvalidRequest(_:), v120);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (*(uint64_t (**)(char *, unint64_t))(v60 + 8))(v110, v111);
  }
  uint64_t v63 = v117;
  if (!*(void *)(v117 + 16))
  {
LABEL_9:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v121 + 104))(v122, enum case for DIPError.Code.documentReaderEmptyRequest(_:), v120);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_11;
  }
  uint64_t v127 = 0;
  unint64_t v64 = v113;
  static MobileDocumentElement.portrait.getter();
  uint64_t v116 = *(char **)(v63 + 16);
  if (!v116)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v64, v104);
LABEL_37:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v121 + 104))(v122, enum case for DIPError.Code.documentReaderInvalidRequest(_:), v120);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_11;
  }
  uint64_t v65 = v105;
  unint64_t v111 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  unint64_t v66 = v63 + v111;
  uint64_t v67 = *(char **)(v105 + 16);
  uint64_t v68 = v112;
  uint64_t v69 = v104;
  uint64_t v123 = v105 + 16;
  uint64_t v119 = v67;
  ((void (*)(char *, unint64_t, uint64_t))v67)(v112, v63 + v111, v104);
  sub_1004B3700(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  uint64_t v70 = v63;
  char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v74 = *(void (**)(char *, uint64_t))(v65 + 8);
  uint64_t v73 = v65 + 8;
  uint64_t v72 = v74;
  v74(v68, v69);
  uint64_t v118 = v73;
  if (v71)
  {
    uint64_t v124 = v72;
    swift_bridgeObjectRelease();
LABEL_39:
    v124(v64, v69);
    uint64_t v84 = *(void *)(v70 + 16);
    unint64_t v85 = v102;
    if (!v84) {
      goto LABEL_59;
    }
    char v86 = (uint64_t (**)(char *, uint64_t))(v101 + 88);
    LODWORD(v116) = enum case for MobileDocumentElement.Element.ageAtLeast(_:);
    LODWORD(v113) = enum case for MobileDocumentElement.Element.givenName(_:);
    LODWORD(v112) = enum case for MobileDocumentElement.Element.familyName(_:);
    int v87 = enum case for MobileDocumentElement.Element.portrait(_:);
    int v88 = enum case for MobileDocumentElement.Element.age(_:);
    uint64_t v89 = *(void *)(v105 + 72);
    swift_bridgeObjectRetain();
    uint64_t v90 = v114;
    do
    {
      ((void (*)(char *, unint64_t, uint64_t))v119)(v85, v66, v69);
      MobileDocumentElement.storage.getter();
      int v91 = (*v86)(v90, v115);
      if (v91 != v116 && v91 != v113 && v91 != v112 && v91 != v87 && v91 != v88)
      {
        (*(void (**)(char *, uint64_t))(v101 + 8))(v114, v115);
        v124(v85, v69);
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, void, uint64_t))(v121 + 104))(v122, enum case for DIPError.Code.documentReaderInvalidRequest(_:), v120);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_11;
      }
      v124(v85, v69);
      v66 += v89;
      --v84;
    }
    while (v84);
    uint64_t v96 = v117;
    swift_bridgeObjectRelease();
    if (*(void *)(v96 + 16) < 2uLL)
    {
LABEL_59:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v121 + 104))(v122, enum case for DIPError.Code.documentReaderRequestOnlyContainsPortrait(_:), v120);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_11;
    }
    BOOL v97 = sub_1004B2B88(v96);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v97) {
      return result;
    }
    goto LABEL_16;
  }
  uint64_t v78 = v73 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  if (v116 == (char *)1)
  {
    swift_bridgeObjectRelease();
LABEL_36:
    v72(v64, v69);
    goto LABEL_37;
  }
  uint64_t v110 = (char *)v78;
  uint64_t v124 = v72;
  uint64_t v79 = *(void *)(v105 + 72);
  unint64_t v80 = v117 + v79 + v111;
  uint64_t v81 = 1;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v119)(v68, v80, v69);
    uint64_t v82 = (char *)(v81 + 1);
    if (__OFADD__(v81, 1)) {
      break;
    }
    char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
    v124(v68, v69);
    if (v83)
    {
      uint64_t v70 = v117;
      swift_bridgeObjectRelease();
      unint64_t v64 = v113;
      goto LABEL_39;
    }
    ++v81;
    v80 += v79;
    uint64_t v68 = v112;
    if (v82 == v116)
    {
      swift_bridgeObjectRelease();
      unint64_t v64 = v113;
      uint64_t v72 = v124;
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1004B1220(uint64_t a1, void *a2, int a3)
{
  int v102 = a3;
  uint64_t v110 = a2;
  uint64_t v105 = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v96 = v4;
  uint64_t v97 = v5;
  __chkstk_darwin(v4);
  uint64_t v98 = (char *)v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MobileDocumentReaderRequest();
  uint64_t v100 = *(void *)(v7 - 8);
  uint64_t v101 = v7;
  __chkstk_darwin(v7);
  os_log_t v99 = (char *)v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v111 = *(void *)(v9 - 8);
  uint64_t v112 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v109 = (char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v108 = (char *)v89 - v13;
  __chkstk_darwin(v12);
  uint64_t v95 = (char *)v89 - v14;
  uint64_t v15 = type metadata accessor for ReaderAuthenticationAllowableElements();
  uint64_t v106 = *(void *)(v15 - 8);
  uint64_t v107 = v15;
  __chkstk_darwin(v15);
  char v103 = (char *)v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for MobileDocumentReaderRequest.Document();
  uint64_t v104 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100007764(&qword_10072FD40);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)v89 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  int v29 = (char *)v89 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)v89 - v31;
  __chkstk_darwin(v30);
  Swift::String v34 = (char *)v89 - v33;
  type metadata accessor for MobileDocumentReaderRequestValidator();
  v35._uint64_t countAndFlagsBits = 0xD000000000000040;
  v35._object = (void *)0x800000010064F540;
  if (!NSUserDefaults.internalBool(forKey:)(v35))
  {
    BOOL v93 = v29;
    uint64_t v90 = v23;
    int v91 = v19;
    uint64_t v92 = v17;
    uint64_t v41 = v108;
    v89[1] = v3;
    uint64_t v42 = v107;
    uint64_t v94 = v26;
    uint64_t v109 = v32;
    uint64_t v43 = v110;
    sub_10000C728(v110, v110[3]);
    uint64_t v44 = v113;
    uint64_t result = dispatch thunk of ReaderAuthenticationAllowableElementsProviding.allowableElementsForDisplayOnly.getter();
    uint64_t v113 = v44;
    if (v44) {
      return result;
    }
    v89[0] = v34;
    sub_10000C728(v43, v43[3]);
    uint64_t v45 = (uint64_t)v109;
    uint64_t v46 = v113;
    dispatch thunk of ReaderAuthenticationAllowableElementsProviding.allowableElementsForDataTransfer.getter();
    uint64_t v113 = v46;
    if (v46)
    {
      uint64_t v47 = v89[0];
      return sub_10000C6CC(v47, &qword_10072FD40);
    }
    NSString v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
    uint64_t v49 = v89[0];
    int v50 = v48(v89[0], 1, v42);
    uint64_t v51 = (uint64_t)v93;
    sub_100048D6C(v45, (uint64_t)v93, &qword_10072FD40);
    if (v50 == 1 && v48(v51, 1, v42) == 1)
    {
      sub_10000C6CC(v51, &qword_10072FD40);
      defaultLogger()();
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "TAC is missing allowable elements for both request types, bypassing allowable elements check.", v54, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v111 + 8))(v41, v112);
      sub_10000C6CC((uint64_t)v109, &qword_10072FD40);
      uint64_t v47 = v49;
      return sub_10000C6CC(v47, &qword_10072FD40);
    }
    sub_10000C6CC(v51, &qword_10072FD40);
    uint64_t v55 = v91;
    uint64_t v56 = v105;
    MobileDocumentReaderRequest.document.getter();
    char v57 = MobileDocumentReaderRequest.Document.isDisplayOnly.getter();
    uint64_t v58 = v55;
    uint64_t v59 = *(void (**)(char *, uint64_t))(v104 + 8);
    v59(v58, v92);
    if (v57) {
      uint64_t v60 = v49;
    }
    else {
      uint64_t v60 = (uint64_t)v109;
    }
    uint64_t v61 = (uint64_t)v94;
    sub_100048D6C(v60, (uint64_t)v94, &qword_10072FD40);
    uint64_t v62 = v61;
    uint64_t v63 = (uint64_t)v90;
    uint64_t v64 = v42;
    sub_100048D6C(v62, (uint64_t)v90, &qword_10072FD40);
    if (v48(v63, 1, v42) != 1)
    {
      uint64_t v77 = v106;
      uint64_t v78 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v106 + 32))(v103, v63, v42);
      uint64_t v79 = (void *)ReaderAuthenticationAllowableElements.documentTypes.getter();
      uint64_t v80 = v113;
      sub_1004B1DCC(v56, v79);
      uint64_t v113 = v80;
      if (v80)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v42);
        sub_10000C6CC((uint64_t)v94, &qword_10072FD40);
        sub_10000C6CC((uint64_t)v109, &qword_10072FD40);
        uint64_t v47 = v89[0];
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v81 = ReaderAuthenticationAllowableElements.elements.getter();
        uint64_t v82 = v113;
        sub_1004B216C(v56, v81);
        uint64_t v83 = v89[0];
        uint64_t v84 = (uint64_t)v109;
        uint64_t v113 = v82;
        if (v82)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v85 = v95;
          defaultLogger()();
          char v86 = Logger.logObject.getter();
          os_log_type_t v87 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v86, v87))
          {
            int v88 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)int v88 = 0;
            _os_log_impl((void *)&_mh_execute_header, v86, v87, "TAC contains requisite allowed document types and elements to perform the request", v88, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v111 + 8))(v85, v112);
        }
        (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v64);
        sub_10000C6CC((uint64_t)v94, &qword_10072FD40);
        sub_10000C6CC(v84, &qword_10072FD40);
        uint64_t v47 = v83;
      }
      return sub_10000C6CC(v47, &qword_10072FD40);
    }
    sub_10000C6CC(v63, &qword_10072FD40);
    unint64_t v66 = v99;
    uint64_t v65 = v100;
    uint64_t v67 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v99, v56, v101);
    if (v102)
    {
      uint64_t v68 = v59;
      uint64_t v69 = v91;
      MobileDocumentReaderRequest.document.getter();
      char v70 = MobileDocumentReaderRequest.Document.requiresReaderToken.getter();
      v68(v69, v92);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
      uint64_t v71 = v89[0];
      uint64_t v72 = (uint64_t)v109;
      uint64_t v73 = v97;
      uint64_t v74 = v98;
      uint64_t v75 = v96;
      if (v70)
      {
        (*(void (**)(char *, void, uint64_t))(v97 + 104))(v98, enum case for DIPError.Code.documentReaderTokenRequiredForRequest(_:), v96);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v76 = swift_allocError();
LABEL_24:
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        uint64_t v113 = v76;
        swift_willThrow();
        sub_10000C6CC((uint64_t)v94, &qword_10072FD40);
        sub_10000C6CC(v72, &qword_10072FD40);
        uint64_t v47 = v71;
        return sub_10000C6CC(v47, &qword_10072FD40);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
      uint64_t v71 = v89[0];
      uint64_t v72 = (uint64_t)v109;
      uint64_t v73 = v97;
      uint64_t v74 = v98;
      uint64_t v75 = v96;
    }
    (*(void (**)(char *, void, uint64_t))(v73 + 104))(v74, enum case for DIPError.Code.documentReaderAuthenticationCertificateNotAllowedToPerformRequest(_:), v75);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v76 = swift_allocError();
    goto LABEL_24;
  }
  uint64_t v36 = (uint64_t)v109;
  defaultLogger()();
  os_log_type_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    char v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Bypassing TAC allowed request checks", v39, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 8))(v36, v112);
}

uint64_t sub_1004B1DCC(uint64_t a1, void *a2)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MobileDocumentType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MobileDocumentReaderRequest.Document();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MobileDocumentReaderRequest.document.getter();
  MobileDocumentReaderRequest.Document.type.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v14 = MobileDocumentType.iso18013Identifier.getter();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v17 = v14;
  uint64_t v18 = v15;
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (sub_10020F0CC(v17, (uint64_t)v18, v26)) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  unint64_t v24 = 0xD00000000000002BLL;
  unint64_t v25 = 0x800000010064F6E0;
  v21._uint64_t countAndFlagsBits = v17;
  v21._object = v18;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v5, enum case for DIPError.Code.documentReaderAuthenticationCertificateNotAllowedToPerformRequest(_:), v20);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  return swift_willThrow();
}

uint64_t sub_1004B216C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for MobileDocumentType();
  uint64_t v7 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MobileDocumentReaderRequest.Document();
  uint64_t v36 = *(void *)(v10 - 8);
  uint64_t v37 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MobileDocumentReaderRequest.document.getter();
  uint64_t v13 = MobileDocumentReaderRequest.Document.retainedElements.getter();
  uint64_t v14 = MobileDocumentReaderRequest.Document.nonRetainedElements.getter();
  char v39 = (void *)v13;
  sub_100162B40(v14);
  uint64_t v15 = v39;
  char v39 = _swiftEmptyArrayStorage;
  uint64_t v16 = v15[2];
  if (v16)
  {
    uint64_t v31 = a2;
    uint64_t v32 = v6;
    uint64_t v17 = *(void *)(type metadata accessor for MobileDocumentElement() - 8);
    uint64_t v18 = (char *)v15 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    uint64_t v19 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v20 = *(void *)(v17 + 72);
    uint64_t v33 = v15;
    swift_bridgeObjectRetain();
    while (1)
    {
      MobileDocumentReaderRequest.Document.type.getter();
      char v21 = MobileDocumentReaderRequest.Document.isRawDataTransfer.getter();
      uint64_t v22 = sub_1002A1340((uint64_t)v9, v21 & 1);
      if (v2) {
        break;
      }
      uint64_t v23 = v22;
      (*v19)(v9, v38);
      sub_100162CF0(v23);
      v18 += v20;
      if (!--v16)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v24 = v39;
        a2 = v31;
        uint64_t v6 = v32;
        goto LABEL_7;
      }
    }
    (*v19)(v9, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v12, v37);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v24 = _swiftEmptyArrayStorage;
LABEL_7:
    uint64_t v26 = v36;
    uint64_t v25 = v37;
    uint64_t v27 = sub_1004AD240((uint64_t)v24);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v25);
    uint64_t v28 = sub_1005DDA6C((uint64_t)v27);
    swift_bridgeObjectRelease();
    if (sub_1004B2F28(a2, v28)[2])
    {
      char v39 = 0;
      unint64_t v40 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      char v39 = (void *)0xD000000000000026;
      unint64_t v40 = 0x800000010064F650;
      v29._uint64_t countAndFlagsBits = Set.description.getter();
      String.append(_:)(v29);
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v34 + 104))(v6, enum case for DIPError.Code.documentReaderAuthenticationCertificateNotAllowedToPerformRequest(_:), v35);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return swift_willThrow();
    }
    else
    {
      return swift_release();
    }
  }
}

uint64_t sub_1004B2674(uint64_t a1)
{
  uint64_t v31 = type metadata accessor for MobileDocumentElement.Element();
  uint64_t v2 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v4 = (unint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for MobileDocumentElement();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v11 = v6 + 16;
  uint64_t v10 = v12;
  uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
  uint64_t v14 = (uint64_t (**)(unint64_t *, uint64_t))(v2 + 88);
  int v29 = enum case for MobileDocumentElement.Element.ageAtLeast(_:);
  uint64_t v15 = a1;
  uint64_t v30 = (void (**)(char *, uint64_t))(v11 - 8);
  uint64_t v27 = (void (**)(unint64_t *, uint64_t))(v2 + 96);
  uint64_t v28 = (void (**)(unint64_t *, uint64_t))(v2 + 8);
  uint64_t v16 = *(void *)(v11 + 56);
  uint64_t v24 = v15;
  swift_bridgeObjectRetain();
  uint64_t v25 = v16;
  uint64_t v26 = (uint64_t (**)(unint64_t *, uint64_t))(v2 + 88);
  while (1)
  {
    v10(v8, v13, v5);
    MobileDocumentElement.storage.getter();
    int v17 = (*v14)(v4, v31);
    if (v17 != v29)
    {
      (*v28)(v4, v31);
      (*v30)(v8, v5);
      goto LABEL_4;
    }
    uint64_t v18 = v10;
    uint64_t v19 = v11;
    (*v27)(v4, v31);
    unint64_t v20 = *v4;
    if ((*v4 & 0x8000000000000000) != 0) {
      break;
    }
    (*v30)(v8, v5);
    BOOL v21 = v20 > 0x63;
    uint64_t v11 = v19;
    uint64_t v10 = v18;
    uint64_t v16 = v25;
    uint64_t v14 = v26;
    if (v21) {
      goto LABEL_13;
    }
LABEL_4:
    v13 += v16;
    if (!--v9)
    {
      uint64_t v22 = 0;
      goto LABEL_14;
    }
  }
  (*v30)(v8, v5);
LABEL_13:
  uint64_t v22 = 1;
LABEL_14:
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_1004B2930()
{
  uint64_t v25 = type metadata accessor for MobileDocumentType();
  uint64_t v2 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MobileDocumentElement();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MobileDocumentReaderRequest.Document.retainedElements.getter();
  uint64_t v26 = v0;
  uint64_t v10 = MobileDocumentReaderRequest.Document.nonRetainedElements.getter();
  uint64_t v27 = v9;
  sub_100162B40(v10);
  uint64_t v11 = *(void *)(v27 + 16);
  if (v11)
  {
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v12 = v6 + 16;
    unint64_t v14 = v27 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v15 = v12;
    uint64_t v16 = (void (**)(char *, uint64_t))(v2 + 8);
    int v17 = (void (**)(char *, uint64_t))(v15 - 8);
    uint64_t v23 = v13;
    uint64_t v24 = v15;
    uint64_t v18 = *(void *)(v15 + 56);
    uint64_t v21 = v27;
    uint64_t v22 = v18;
    while (1)
    {
      v23(v8, v14, v5);
      MobileDocumentReaderRequest.Document.type.getter();
      char v19 = MobileDocumentReaderRequest.Document.isRawDataTransfer.getter();
      sub_1002A1340((uint64_t)v4, v19 & 1);
      if (v1) {
        break;
      }
      swift_bridgeObjectRelease();
      (*v16)(v4, v25);
      (*v17)(v8, v5);
      v14 += v22;
      if (!--v11) {
        return swift_bridgeObjectRelease();
      }
    }
    (*v16)(v4, v25);
    (*v17)(v8, v5);
  }
  return swift_bridgeObjectRelease();
}

BOOL sub_1004B2B88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MobileDocumentElement.Element();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MobileDocumentElement();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v41 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v13)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v14 = v7 + 16;
    unint64_t v40 = v15;
    unint64_t v16 = (*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64);
    uint64_t v17 = *(void *)(v14 + 56);
    uint64_t v30 = a1;
    unint64_t v34 = v16;
    uint64_t v18 = a1 + v16;
    uint64_t v19 = v17;
    unint64_t v20 = (uint64_t (**)(char *, uint64_t))(v3 + 88);
    int v39 = enum case for MobileDocumentElement.Element.ageAtLeast(_:);
    int v38 = enum case for MobileDocumentElement.Element.age(_:);
    uint64_t v31 = (void (**)(char *, uint64_t))(v14 - 8);
    uint64_t v32 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v36 = v2;
    uint64_t v37 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v33 = v17;
    uint64_t v35 = v14;
    v15(v11, v18, v6);
    while (1)
    {
      MobileDocumentElement.storage.getter();
      int v21 = (*v20)(v5, v2);
      if (v21 == v39 || v21 == v38)
      {
        uint64_t v23 = *v37;
        (*v37)(v41, v11, v6);
        uint64_t v24 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100111554(0, v24[2] + 1, 1);
          uint64_t v24 = v42;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_100111554(v25 > 1, v26 + 1, 1);
          uint64_t v24 = v42;
        }
        v24[2] = v26 + 1;
        uint64_t v27 = (char *)v24 + v34 + v26 * v33;
        uint64_t v19 = v33;
        v23(v27, v41, v6);
        uint64_t v42 = v24;
        uint64_t v2 = v36;
      }
      else
      {
        (*v32)(v5, v2);
        (*v31)(v11, v6);
      }
      v18 += v19;
      if (!--v13) {
        break;
      }
      v40(v11, v18, v6);
    }
    uint64_t v12 = v42;
  }
  swift_bridgeObjectRelease();
  unint64_t v28 = v12[2];
  swift_release();
  return v28 > 1;
}

uint64_t type metadata accessor for MobileDocumentReaderRequestValidator()
{
  uint64_t result = qword_10072FDC0;
  if (!qword_10072FDC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t *sub_1004B2F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  uint64_t v26 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 56;
    v25[0] = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25[0] + 16 * v5);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      ++v5;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v9 = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v11 = v9 & ~v10;
      if ((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        uint64_t v12 = *(void *)(v2 + 48);
        uint64_t v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
          uint64_t v27 = v5;
LABEL_19:
          char v19 = *(unsigned char *)(v2 + 32);
          unint64_t v20 = (unint64_t)((1 << v19) + 63) >> 6;
          size_t v21 = 8 * v20;
          if ((v19 & 0x3Fu) < 0xE
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v21);
            uint64_t v22 = sub_1004B323C((void *)((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0)), v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v23 = (void *)swift_slowAlloc();
            memcpy(v23, (const void *)(v2 + 56), v21);
            uint64_t v22 = sub_1004B323C((unint64_t *)v23, v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
            swift_slowDealloc();
          }
          return v22;
        }
        uint64_t v15 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v15;
          if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
            break;
          }
          unint64_t v16 = (void *)(v12 + 16 * v11);
          BOOL v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t v27 = v5;
            uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return (unint64_t *)v2;
      }
    }
  }
  return (unint64_t *)v2;
}

unint64_t *sub_1004B323C(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v30 = result;
  uint64_t v31 = v6 - 1;
  uint64_t v8 = *a5;
  unint64_t v7 = a5[1];
  unint64_t v9 = *(void *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return (unint64_t *)sub_1004B3468(v30, a2, v31, a3);
  }
  uint64_t v32 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9) {
      goto LABEL_29;
    }
    uint64_t v11 = v8 + 16 * v7;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = *(void *)(v11 + 40);
    a5[1] = v7 + 1;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = 1 << v16;
    if (((1 << v16) & *(void *)(v32 + 8 * (v16 >> 6))) == 0) {
      goto LABEL_4;
    }
    uint64_t v19 = *(void *)(a3 + 48);
    unint64_t v20 = (void *)(v19 + 16 * v16);
    BOOL v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v15;
      for (unint64_t i = v16 + 1; ; unint64_t i = v26 + 1)
      {
        unint64_t v26 = i & v24;
        if (((*(void *)(v32 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v19 + 16 * v26);
        BOOL v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
          unint64_t v17 = v26 >> 6;
          uint64_t v18 = 1 << v26;
          goto LABEL_15;
        }
      }
LABEL_4:
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_15:
    unint64_t v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      uint64_t v23 = v31 - 1;
      if (__OFSUB__(v31, 1)) {
        goto LABEL_30;
      }
      --v31;
      if (!v23) {
        return (unint64_t *)&_swiftEmptySetSingleton;
      }
    }
LABEL_5:
    uint64_t v8 = *a5;
    unint64_t v7 = a5[1];
    unint64_t v9 = *(void *)(*a5 + 16);
    if (v7 == v9) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1004B3468(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100007764(&qword_100734040);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    BOOL v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *BOOL v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1004B3700(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004B3748()
{
  uint64_t v0 = type metadata accessor for DIPError.Code();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MobileDocumentType.Identifier();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MobileDocumentType.storage.getter();
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for MobileDocumentType.Identifier.nationalIDCard(_:))
  {
    unint64_t v9 = 0xD000000000000010;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else if (v8 == enum case for MobileDocumentType.Identifier.driversLicense(_:))
  {
    return 0x2D73726576697264;
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DIPError.Code.documentReaderInvalidRequest(_:), v0);
    unint64_t v9 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004B3700((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v9;
}

uint64_t *sub_1004B3A4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AuditToken();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = *(void **)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v10) = (uint64_t)v11;
    id v12 = v11;
  }
  return a1;
}

void sub_1004B3B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1 + *(int *)(a2 + 20));
  int v5 = *(void **)(a1 + *(int *)(a2 + 24));
}

uint64_t sub_1004B3BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  long long v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = *(void **)(a2 + v9);
  *(void *)(a1 + v9) = v10;
  id v11 = v10;
  return a1;
}

uint64_t sub_1004B3CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  sub_10000A128((uint64_t *)(a1 + *(int *)(a3 + 20)), (uint64_t *)(a2 + *(int *)(a3 + 20)));
  uint64_t v7 = *(int *)(a3 + 24);
  long long v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_1004B3D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  return a1;
}

uint64_t sub_1004B3DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = *(int *)(a3 + 24);
  id v12 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);

  return a1;
}

uint64_t sub_1004B3EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004B3EB4);
}

uint64_t sub_1004B3EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1004B3F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004B3F8C);
}

uint64_t sub_1004B3F8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AuditToken();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1004B404C()
{
  uint64_t result = type metadata accessor for AuditToken();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1004B40F0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v22 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 0x656E697272756C62 && a2 == (void *)0xEA00000000007373
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.blurriness(_:);
  }
  else if (a1 == 0x657275736F707865 && a2 == (void *)0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.exposure(_:);
  }
  else if (a1 == 0x7473694464726163 && a2 == (void *)0xEE006E6F6974726FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.cardDistortion(_:);
  }
  else if (a1 == 0xD000000000000010 && a2 == (void *)0x8000000100632F10 {
         || (unint64_t v21 = 0xD000000000000010, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.faceToImageRatio(_:);
  }
  else if (a1 == 0xD000000000000011 && a2 == (void *)0x8000000100632F30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.faceCenteredRatio(_:);
  }
  else if (a1 == 0x6374695064616568 && a2 == (void *)0xE900000000000068 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.headPitch(_:);
  }
  else if (a1 == 0x6C6C6F5264616568 && a2 == (void *)0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.headRoll(_:);
  }
  else if (a1 == 0x77615964616568 && a2 == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.headYaw(_:);
  }
  else if (a1 == 0xD000000000000012 && a2 == (void *)0x8000000100632F50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.blinkingConfidence(_:);
  }
  else if (a1 == 0xD000000000000016 && a2 == (void *)0x8000000100632F70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.prescriptionConfidence(_:);
  }
  else if (a1 == 0xD000000000000014 && a2 == (void *)0x8000000100632F90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.sunglassesConfidence(_:);
  }
  else if (a1 == 0xD000000000000012 && a2 == (void *)0x8000000100632FB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.facemaskConfidence(_:);
  }
  else if (a1 == 0xD000000000000012 && a2 == (void *)0x8000000100632FD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.headgearConfidence(_:);
  }
  else if (a1 == 0xD000000000000012 && a2 == (void *)0x800000010064A860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.faceCaptureQuality(_:);
  }
  else if (a1 == 0x746E656D75636F64 && a2 == (void *)0xEC000000657A6953 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.documentSize(_:);
  }
  else if (a1 == v21 && a2 == (void *)0x8000000100632FF0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.documentRotation(_:);
  }
  else if (a1 == 0x746E656D75636F64 && a2 == (void *)0xEC00000077656B53 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.documentSkew(_:);
  }
  else if (a1 == 0x666972447466656CLL && a2 == (void *)0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.leftDrift(_:);
  }
  else if (a1 == 0x6972447468676972 && a2 == (void *)0xEA00000000007466 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.rightDrift(_:);
  }
  else if (a1 == 0x74666972447075 && a2 == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.upDrift(_:);
  }
  else if (a1 == 0x666972446E776F64 && a2 == (void *)0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.downDrift(_:);
  }
  else if (a1 == 0x73656361466D756ELL && a2 == (void *)0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.numFaces(_:);
  }
  else if (a1 == 0x6C6576654C78756CLL && a2 == (void *)0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.luxLevel(_:);
  }
  else if (a1 == 0x6544373134666470 && a2 == (void *)0xEE00646574636574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.pdf417Detected(_:);
  }
  else if (a1 == v21 && a2 == (void *)0x8000000100633010 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v13 = (unsigned int *)&enum case for IQCType.isAAMVACompliant(_:);
  }
  else
  {
    if ((a1 != 0x754E726575737369 || a2 != (void *)0xEC0000007265626DLL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      unint64_t v23 = 0;
      unint64_t v24 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      unint64_t v23 = 0xD000000000000026;
      unint64_t v24 = 0x800000010064FEF0;
      v18._uint64_t countAndFlagsBits = a1;
      v18._object = a2;
      String.append(_:)(v18);
      unint64_t v21 = v24;
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.invalidIQCType(_:), v9);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1004BF1B0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
      swift_errorRelease();
      *a3 = a1;
      a3[1] = (uint64_t)a2;
      uint64_t v19 = enum case for IQCType.unknown(_:);
      uint64_t v20 = type metadata accessor for IQCType();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(a3, v19, v20);
      return swift_bridgeObjectRetain();
    }
    uint64_t v13 = (unsigned int *)&enum case for IQCType.issuerNumber(_:);
  }
  uint64_t v14 = *v13;
  uint64_t v15 = type metadata accessor for IQCType();
  uint64_t v16 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104);

  return v16(a3, v14, v15);
}

uint64_t sub_1004B4D78@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 0x6C61757165 && a2 == (void *)0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v14 = (unsigned int *)&enum case for IQComparator.equal(_:);
  }
  else if (a1 == 0x6C61757145746F6ELL && a2 == (void *)0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v14 = (unsigned int *)&enum case for IQComparator.notEqual(_:);
  }
  else if (a1 == 1936942444 && a2 == (void *)0xE400000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v14 = (unsigned int *)&enum case for IQComparator.less(_:);
  }
  else if (a1 == 0x72657461657267 && a2 == (void *)0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v14 = (unsigned int *)&enum case for IQComparator.greater(_:);
  }
  else if (a1 == 0x617571457373656CLL && a2 == (void *)0xE90000000000006CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t v14 = (unsigned int *)&enum case for IQComparator.lessEqual(_:);
  }
  else
  {
    if ((a1 != 0x4572657461657267 || a2 != (void *)0xEC0000006C617571)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v23[0] = 0;
      v23[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v19._object = (void *)0x800000010064FE20;
      v19._uint64_t countAndFlagsBits = 0xD000000000000031;
      String.append(_:)(v19);
      v20._uint64_t countAndFlagsBits = a1;
      v20._object = a2;
      String.append(_:)(v20);
      (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.invalidIQComparatorType(_:), v10);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1004BF1B0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_errorRelease();
      uint64_t v21 = enum case for IQComparator.unknown(_:);
      uint64_t v22 = type metadata accessor for IQComparator();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(a3, v21, v22);
    }
    uint64_t v14 = (unsigned int *)&enum case for IQComparator.greaterEqual(_:);
  }
  uint64_t v15 = *v14;
  uint64_t v16 = type metadata accessor for IQComparator();
  unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104);

  return v17(a3, v15, v16);
}

uint64_t sub_1004B52F8(uint64_t a1)
{
  uint64_t v2 = __chkstk_darwin(a1);
  uint64_t v116 = v1;
  uint64_t v95 = v3;
  uint64_t v96 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = (void *)v2;
  int v102 = (unsigned char *)(v2 + 5852);
  uint64_t v8 = type metadata accessor for ImageQualitySettings();
  uint64_t v118 = *(void *)(v8 - 8);
  uint64_t v119 = v8;
  __chkstk_darwin(v8);
  char v103 = (char *)v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = (void *)type metadata accessor for ImageQualityCriteria();
  uint64_t v10 = *(v112 - 1);
  uint64_t v11 = __chkstk_darwin(v112);
  uint64_t v100 = (uint64_t)v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v97 = (uint64_t)v86 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v94 = (uint64_t)v86 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v92 = (uint64_t)v86 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v91 = (uint64_t)v86 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v90 = (char *)v86 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v25 = (char *)v86 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)v86 - v26;
  sub_1004BAF0C(v6, 0xD00000000000001ALL, 0x80000001006370D0);
  id v101 = v28;
  sub_1004BAF0C(v6, 0xD000000000000019, 0x8000000100637060);
  id v99 = v29;
  sub_1004BAF0C(v6, 0x6569666C6573, 0xE600000000000000);
  id v98 = v30;
  sub_1000BEA14((uint64_t)(v7 + 418), (uint64_t)v127, &qword_100721310);
  uint64_t v31 = (void *)*v7;
  unint64_t v32 = v7[1];
  uint64_t v117 = v7;
  sub_1004B6530((uint64_t)v127, (uint64_t)v27);
  sub_1004BB594((uint64_t)v127);
  sub_1004BD098((uint64_t)v127);
  uint64_t v93 = (uint64_t)v31;
  if (v32)
  {
    unint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    unint64_t v33 = 0xE000000000000000;
  }
  unint64_t v34 = v112;
  uint64_t v114 = *(void (**)(char *, char *, void *))(v10 + 16);
  uint64_t v108 = v10 + 16;
  v114(v25, v27, v112);
  uint64_t v106 = v32;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v35 = v103;
  uint64_t v115 = v25;
  unint64_t v109 = v33;
  id v110 = v31;
  ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)();
  uint64_t v36 = sub_1004B8C48();
  unint64_t v104 = v37;
  uint64_t v105 = v36;
  swift_release();
  int v38 = *(void (**)(char *, uint64_t))(v118 + 8);
  int v39 = v35;
  uint64_t v40 = v118 + 8;
  v38(v39, v119);
  uint64_t v41 = *(void (**)(char *, void *))(v10 + 8);
  uint64_t v113 = v10 + 8;
  v41(v27, v34);
  id v42 = [self standardUserDefaults];
  v43._uint64_t countAndFlagsBits = 0xD000000000000022;
  v43._object = (void *)0x80000001006502D0;
  Swift::Bool v44 = NSUserDefaults.internalBool(forKey:)(v43);

  uint64_t v118 = v40;
  uint64_t v111 = v41;
  uint64_t v107 = v38;
  if (v44)
  {
    uint64_t v88 = 0x100000000;
    uint64_t v89 = 0x100000000;
    v86[10] = 0x100000000;
    uint64_t v87 = 0x100000000;
    v86[8] = 0x100000000;
    v86[9] = 0x100000000;
    v86[6] = 0x100000000;
    v86[7] = 0x100000000;
    v86[4] = 0x100000000;
    v86[5] = 0x100000000;
    v86[2] = 0x100000000;
    v86[3] = 0x100000000;
    v86[0] = 0x100000000;
    v86[1] = 0x100000000;
    v126[0] = 1;
    uint64_t v45 = v38;
    uint64_t v46 = v115;
    ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)();
    type metadata accessor for MetricsFlags();
    v125[0] = _swiftEmptyArrayStorage;
    sub_1004BF1B0(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
    sub_100007764(&qword_10072FF28);
    sub_1004BF08C();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v47 = v112;
    v114(v90, v46, v112);
    swift_retain();
    NSString v48 = v103;
    ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)();
    uint64_t v49 = sub_1004B8C48();
    unint64_t v51 = v50;
    swift_release();
    v45(v48, v119);
    v111(v46, v47);
    sub_10000C5E0(v105, v104);
    unint64_t v104 = v51;
    uint64_t v105 = v49;
  }
  else
  {
    NSString v48 = v103;
  }
  sub_1000BEA14((uint64_t)(v117 + 2), (uint64_t)v126, &qword_100721310);
  uint64_t v52 = v91;
  sub_1004B6530((uint64_t)v126, v91);
  sub_1004BB594((uint64_t)v126);
  sub_1004BD098((uint64_t)v126);
  os_log_type_t v53 = v112;
  v114(v115, (char *)v52, v112);
  swift_bridgeObjectRetain();
  swift_retain();
  ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)();
  uint64_t v54 = sub_1004B8C48();
  uint64_t v89 = v55;
  uint64_t v90 = (char *)v54;
  swift_release();
  v107(v48, v119);
  v111((char *)v52, v53);
  sub_1000BEA14((uint64_t)(v117 + 106), (uint64_t)v125, &qword_100721310);
  uint64_t v56 = v92;
  sub_1004B6530((uint64_t)v125, v92);
  sub_1004BB594((uint64_t)v125);
  sub_1004BD098((uint64_t)v125);
  char v57 = (void (*)(char *, uint64_t, void *))v114;
  v114(v115, (char *)v56, v53);
  swift_bridgeObjectRetain();
  swift_retain();
  ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)();
  uint64_t v91 = sub_1004B8C48();
  uint64_t v88 = v58;
  swift_release();
  uint64_t v59 = v107;
  v107(v48, v119);
  uint64_t v60 = v112;
  v111((char *)v56, v112);
  sub_1000BEA14((uint64_t)(v117 + 210), (uint64_t)v124, &qword_100721310);
  uint64_t v61 = v94;
  sub_1004B6530((uint64_t)v124, v94);
  uint64_t v92 = (uint64_t)sub_1004BB594((uint64_t)v124);
  sub_1004BD098((uint64_t)v124);
  v57(v115, v61, v60);
  uint64_t v62 = v106;
  swift_bridgeObjectRetain();
  swift_retain();
  ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)();
  uint64_t v92 = sub_1004B8C48();
  uint64_t v87 = v63;
  swift_release();
  v59(v48, v119);
  uint64_t v64 = v112;
  v111((char *)v61, v112);
  uint64_t v65 = v117;
  sub_1000BEA14((uint64_t)(v117 + 314), (uint64_t)v123, &qword_100721310);
  uint64_t v66 = sub_1004B6174((uint64_t)v123, v93, v62, v95, v96);
  uint64_t v95 = v67;
  uint64_t v96 = v66;
  sub_1000BEA14((uint64_t)(v65 + 522), (uint64_t)v122, &qword_100721310);
  uint64_t v68 = v97;
  sub_1004B6530((uint64_t)v122, v97);
  sub_1004BB594((uint64_t)v122);
  sub_1004BD098((uint64_t)v122);
  uint64_t v69 = v115;
  v114(v115, (char *)v68, v64);
  swift_bridgeObjectRetain();
  swift_retain();
  ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)();
  uint64_t v70 = sub_1004B8C48();
  uint64_t v93 = v71;
  uint64_t v94 = v70;
  swift_release();
  v107(v48, v119);
  uint64_t v72 = (void (*)(uint64_t, void *))v111;
  v111((char *)v68, v64);
  sub_1000BEA14((uint64_t)(v117 + 626), (uint64_t)v121, &qword_100721310);
  uint64_t v73 = v100;
  sub_1004B6530((uint64_t)v121, v100);
  sub_1004BB594((uint64_t)v121);
  sub_1004BD098((uint64_t)v121);
  v114(v69, (char *)v73, v64);
  swift_bridgeObjectRetain();
  swift_retain();
  ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)();
  uint64_t v74 = sub_1004B8C48();
  uint64_t v114 = v75;
  uint64_t v115 = (char *)v74;
  swift_release();
  v107(v48, v119);
  v72(v73, v64);
  uint64_t v76 = v117;
  uint64_t v77 = sub_1004B7920(v117[730]);
  uint64_t v118 = v78;
  uint64_t v119 = v77;
  uint64_t v79 = *((unsigned int *)v76 + 1462);
  uint64_t v80 = v102;
  unsigned __int8 v120 = *v102;
  LODWORD(v116) = sub_1004BE90C(v79 | ((unint64_t)v120 << 32));
  uint64_t v81 = v76[734];
  if (v80[28]) {
    uint64_t v81 = 5;
  }
  uint64_t v113 = v81;
  uint64_t v82 = v76[736];
  if (v80[44]) {
    uint64_t v82 = 5;
  }
  uint64_t v111 = (void (*)(char *, void *))v82;
  id v83 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingImageDimensions());
  uint64_t v112 = v98;
  uint64_t v117 = v101;
  id v110 = v99;
  IdentityProofingImageDimensions.init(idFront:idBack:selfie:)();
  objc_allocWithZone((Class)type metadata accessor for IdentityImageQuality());
  unsigned __int8 v120 = 0;
  uint64_t v84 = IdentityImageQuality.init(frontScanSettings:backScanSettings:frontIDSettings:backIDSettings:selfieSettings:livenessSettings:passiveSettings:livenessBlockingCodes:exploration:bufferSize:stableWindow:idScanFrameRate:videoFrameRate:maxRectTravel:resizeDimensions:)();

  return v84;
}

uint64_t sub_1004B6174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v28[1] = a4;
  uint64_t v31 = a2;
  uint64_t v33 = type metadata accessor for ImageQualitySettings();
  uint64_t v32 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  int v29 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IQCType();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for ImageQualityCriteria();
  uint64_t v13 = *(void *)(v30 - 8);
  uint64_t v14 = __chkstk_darwin(v30);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v28 - v17;
  sub_1004B6530(a1, (uint64_t)v28 - v17);
  unint64_t v19 = (unint64_t)sub_1004BB594(a1);
  sub_1004BD098(a1);
  if (a5)
  {
    swift_bridgeObjectRetain();
    v28[0] = a3;
    swift_bridgeObjectRetain();
    ImageQualityCriteria.issuerNumber.setter();
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for IQCType.issuerNumber(_:), v9);
    uint64_t v20 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v19 = sub_10010EFB0(0, *(void *)(v19 + 16) + 1, 1, v19);
    }
    unint64_t v22 = *(void *)(v19 + 16);
    unint64_t v21 = *(void *)(v19 + 24);
    if (v22 >= v21 >> 1) {
      unint64_t v19 = sub_10010EFB0(v21 > 1, v22 + 1, 1, v19);
    }
    *(void *)(v19 + 16) = v22 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v19+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v22, v20, v9);
    uint64_t v23 = v33;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = v33;
  }
  uint64_t v24 = v30;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v30);
  swift_retain();
  unint64_t v25 = v29;
  ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)();
  uint64_t v26 = sub_1004B8C48();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v23);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v24);
  return v26;
}

uint64_t sub_1004B6530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v97 = a1;
  uint64_t v79 = a2;
  uint64_t v72 = type metadata accessor for Logger();
  uint64_t v76 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v71 = (char *)v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for DIPError.Code();
  uint64_t v75 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v69 = (char *)v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for IQComparator();
  uint64_t v74 = *(char **)(v99 - 8);
  __chkstk_darwin(v99);
  id v98 = (char *)v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for IQCType();
  __chkstk_darwin(v5 - 8);
  int v102 = (void *)((char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for IQSignal();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v100 = v7;
  uint64_t v101 = v8;
  __chkstk_darwin(v7);
  char v103 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for IQACode();
  unint64_t v73 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v81 = (void *)((char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for IQComplexSignal();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v88 = v11;
  uint64_t v89 = v12;
  __chkstk_darwin(v11);
  uint64_t v93 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ImageQualityCriteria();
  uint64_t v77 = *(void *)(v14 - 8);
  uint64_t v78 = v14;
  __chkstk_darwin(v14);
  uint64_t v95 = 0x100000000;
  uint64_t v96 = 0x100000000;
  uint64_t v94 = 0x100000000;
  uint64_t v91 = 0x100000000;
  uint64_t v92 = 0x100000000;
  uint64_t v90 = 0x100000000;
  uint64_t v86 = 0x100000000;
  uint64_t v87 = 0x100000000;
  uint64_t v84 = 0x100000000;
  unint64_t v85 = (void (**)(uint64_t *, void, uint64_t))&_mh_execute_header;
  uint64_t v83 = 0x100000000;
  uint64_t v80 = 0x100000000;
  LOBYTE(v109[0]) = 1;
  uint64_t v16 = (char *)v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)();
  sub_1000BEA14(v97, (uint64_t)v108, &qword_100721310);
  if (sub_1004BF068((uint64_t)v108) == 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v77 + 32))(v79, v16, v78);
  }
  unint64_t v19 = v74;
  uint64_t v18 = v75;
  uint64_t v20 = v76;
  memcpy(v109, v108, sizeof(v109));
  sub_1004BB204(v109[0]);
  ImageQualityCriteria.minBlurriness.setter();
  ImageQualityCriteria.maxBlurriness.setter();
  sub_1004BB204(v109[4]);
  ImageQualityCriteria.minExposure.setter();
  ImageQualityCriteria.maxExposure.setter();
  sub_1004BB204(v109[8]);
  ImageQualityCriteria.minCardDistortion.setter();
  ImageQualityCriteria.maxCardDistortion.setter();
  sub_1004BB204(v109[12]);
  ImageQualityCriteria.minFaceToImageRatio.setter();
  ImageQualityCriteria.maxFaceToImageRatio.setter();
  sub_1004BB204(v109[16]);
  ImageQualityCriteria.minFaceCenteredRatio.setter();
  ImageQualityCriteria.maxFaceCenteredRatio.setter();
  sub_1004BB204(v109[20]);
  ImageQualityCriteria.minHeadPitch.setter();
  ImageQualityCriteria.maxHeadPitch.setter();
  sub_1004BB204(v109[24]);
  ImageQualityCriteria.minHeadRoll.setter();
  ImageQualityCriteria.maxHeadRoll.setter();
  sub_1004BB204(v109[28]);
  ImageQualityCriteria.minHeadYaw.setter();
  ImageQualityCriteria.maxHeadYaw.setter();
  sub_1004BB204(v109[40]);
  ImageQualityCriteria.minBlinkingConfidence.setter();
  ImageQualityCriteria.maxBlinkingConfidence.setter();
  sub_1004BB204(v109[44]);
  ImageQualityCriteria.minPrescriptionConfidence.setter();
  ImageQualityCriteria.maxPrescriptionConfidence.setter();
  sub_1004BB204(v109[48]);
  ImageQualityCriteria.minSunglassesConfidence.setter();
  ImageQualityCriteria.maxSunglassesConfidence.setter();
  sub_1004BB204(v109[52]);
  ImageQualityCriteria.minFacemaskConfidence.setter();
  ImageQualityCriteria.maxFacemaskConfidence.setter();
  sub_1004BB204(v109[56]);
  ImageQualityCriteria.minHeadgearConfidence.setter();
  ImageQualityCriteria.maxHeadgearConfidence.setter();
  sub_1004BB204(v109[60]);
  ImageQualityCriteria.minFaceConfidence.setter();
  ImageQualityCriteria.maxFaceConfidence.setter();
  sub_1004BB204(v109[64]);
  ImageQualityCriteria.minFaceCaptureQuality.setter();
  ImageQualityCriteria.maxFaceCaptureQuality.setter();
  sub_1004BB204(v109[68]);
  ImageQualityCriteria.minDocumentSize.setter();
  ImageQualityCriteria.maxDocumentSize.setter();
  sub_1004BB204(v109[72]);
  ImageQualityCriteria.minDocumentRotation.setter();
  ImageQualityCriteria.maxDocumentRotation.setter();
  sub_1004BB204(v109[76]);
  ImageQualityCriteria.minDocumentSkew.setter();
  ImageQualityCriteria.maxDocumentSkew.setter();
  sub_1004BB204(v109[80]);
  ImageQualityCriteria.maxLeftDrift.setter();
  sub_1004BB204(v109[84]);
  ImageQualityCriteria.maxRightDrift.setter();
  sub_1004BB204(v109[88]);
  ImageQualityCriteria.maxUpDrift.setter();
  sub_1004BB204(v109[92]);
  ImageQualityCriteria.maxDownDrift.setter();
  sub_1004BB4C8(v109[32]);
  ImageQualityCriteria.minNumFaces.setter();
  ImageQualityCriteria.maxNumFaces.setter();
  sub_1004BB4C8(v109[36]);
  ImageQualityCriteria.minLuxLevel.setter();
  ImageQualityCriteria.maxLuxLevel.setter();
  sub_1000BEA14((uint64_t)&v109[96], (uint64_t)v111, &qword_100722098);
  sub_1000BEA14((uint64_t)v111, (uint64_t)v112, &qword_100722098);
  ImageQualityCriteria.pdf417Detected.setter();
  sub_1000BEA14((uint64_t)&v109[99], (uint64_t)v110, &qword_100722098);
  sub_1000BEA14((uint64_t)v110, (uint64_t)v113, &qword_100722098);
  ImageQualityCriteria.isAAMVACompliant.setter();
  unint64_t v21 = v109[103];
  if (v109[103])
  {
    int64_t v22 = *(void *)(v109[103] + 16);
    if (v22)
    {
      uint64_t v68 = v16;
      uint64_t v107 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      uint64_t v87 = v22;
      sub_1001116A0(0, v22, 0);
      uint64_t v23 = 0;
      unint64_t v67 = v21;
      uint64_t v86 = v21 + 32;
      unsigned int v66 = enum case for DIPError.Code.invalidIQComparatorType(_:);
      uint64_t v65 = (void (**)(char *, void, uint64_t))(v18 + 104);
      uint64_t v64 = (void (**)(char *, uint64_t))(v20 + 8);
      unsigned int v63 = enum case for IQComparator.unknown(_:);
      uint64_t v24 = (void (**)(char *, uint64_t, uint64_t))(v19 + 104);
      LODWORD(v75) = enum case for IQComparator.greaterEqual(_:);
      LODWORD(v76) = enum case for IQComparator.lessEqual(_:);
      LODWORD(v80) = enum case for IQComparator.greater(_:);
      LODWORD(v92) = enum case for IQComparator.less(_:);
      uint64_t v84 = v89 + 32;
      unint64_t v85 = (void (**)(uint64_t *, void, uint64_t))(v73 + 104);
      uint64_t v74 = (char *)0x800000010064FE20;
      LODWORD(v97) = enum case for IQComparator.notEqual(_:);
      uint64_t v25 = enum case for IQComparator.equal(_:);
      LODWORD(v83) = enum case for IQACode.complex(_:);
      unint64_t v73 = 0x800000010064FE60;
      uint64_t v27 = v81;
      uint64_t v26 = v82;
      do
      {
        uint64_t v96 = v23;
        BOOL v28 = (uint64_t *)(v86 + 32 * v23);
        uint64_t v29 = v28[1];
        uint64_t v30 = v28[2];
        uint64_t v31 = v28[3];
        uint64_t v94 = *v28;
        uint64_t v95 = v30;
        int64_t v32 = *(void *)(v31 + 16);
        if (v32)
        {
          uint64_t v106 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain_n();
          uint64_t v90 = v29;
          swift_bridgeObjectRetain();
          sub_1001116DC(0, v32, 0);
          uint64_t v91 = v31;
          uint64_t v33 = v31 + 64;
          do
          {
            uint64_t v34 = *(void *)(v33 - 32);
            uint64_t v35 = *(void **)(v33 - 24);
            uint64_t v36 = *(void *)(v33 - 16);
            unint64_t v37 = *(void **)(v33 - 8);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1004B40F0(v34, v35, v102);
            BOOL v38 = v36 == 0x6C61757165 && v37 == (void *)0xE500000000000000;
            uint64_t v39 = v25;
            if (!v38)
            {
              char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v39 = v25;
              if ((v40 & 1) == 0)
              {
                if (v36 != 0x6C61757145746F6ELL || (uint64_t v39 = v97, v37 != (void *)0xE800000000000000))
                {
                  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  uint64_t v39 = v97;
                  if ((v41 & 1) == 0)
                  {
                    if (v36 != 1936942444 || (uint64_t v39 = v92, v37 != (void *)0xE400000000000000))
                    {
                      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      uint64_t v39 = v92;
                      if ((v42 & 1) == 0)
                      {
                        if (v36 != 0x72657461657267 || (uint64_t v39 = v80, v37 != (void *)0xE700000000000000))
                        {
                          char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          uint64_t v39 = v80;
                          if ((v43 & 1) == 0)
                          {
                            if (v36 != 0x617571457373656CLL
                              || (uint64_t v39 = v76, v37 != (void *)0xE90000000000006CLL))
                            {
                              char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
                              uint64_t v39 = v76;
                              if ((v44 & 1) == 0)
                              {
                                if (v36 != 0x4572657461657267
                                  || (uint64_t v39 = v75, v37 != (void *)0xEC0000006C617571))
                                {
                                  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  uint64_t v39 = v75;
                                  if ((v45 & 1) == 0)
                                  {
                                    uint64_t v104 = 0;
                                    unint64_t v105 = 0xE000000000000000;
                                    _StringGuts.grow(_:)(51);
                                    v46._uint64_t countAndFlagsBits = 0xD000000000000031;
                                    v46._object = v74;
                                    String.append(_:)(v46);
                                    v47._uint64_t countAndFlagsBits = v36;
                                    v47._object = v37;
                                    String.append(_:)(v47);
                                    v62[2] = v105;
                                    uint64_t v62[3] = v104;
                                    (*v65)(v69, v66, v70);
                                    v62[1] = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
                                    type metadata accessor for DIPError();
                                    sub_1004BF1B0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                                    swift_allocError();
                                    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
                                    NSString v48 = v71;
                                    defaultLogger()();
                                    DIPRecordError(_:message:log:)();
                                    (*v64)(v48, v72);
                                    swift_errorRelease();
                                    uint64_t v39 = v63;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            (*v24)(v98, v39, v99);
            IQSignal.init(type:comparator:threshold:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v49 = v106;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1001116DC(0, v49[2] + 1, 1);
              uint64_t v49 = v106;
            }
            uint64_t v50 = v101;
            unint64_t v52 = v49[2];
            unint64_t v51 = v49[3];
            if (v52 >= v51 >> 1)
            {
              sub_1001116DC(v51 > 1, v52 + 1, 1);
              uint64_t v49 = v106;
            }
            v49[2] = v52 + 1;
            (*(void (**)(unint64_t))(v50 + 32))((unint64_t)v49+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v52);
            uint64_t v106 = v49;
            v33 += 40;
            --v32;
          }
          while (v32);
          swift_bridgeObjectRelease();
          uint64_t v27 = v81;
          uint64_t v26 = v82;
          uint64_t v53 = v90;
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v53 = v29;
        }
        *uint64_t v27 = v94;
        v27[1] = v53;
        (*v85)(v27, v83, v26);
        IQComplexSignal.init(identifier:priority:signals:)();
        swift_bridgeObjectRelease();
        uint64_t v54 = v107;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001116A0(0, v54[2] + 1, 1);
          uint64_t v54 = v107;
        }
        uint64_t v55 = v89;
        uint64_t v56 = v96;
        unint64_t v58 = v54[2];
        unint64_t v57 = v54[3];
        if (v58 >= v57 >> 1)
        {
          sub_1001116A0(v57 > 1, v58 + 1, 1);
          uint64_t v56 = v96;
          uint64_t v55 = v89;
          uint64_t v54 = v107;
        }
        uint64_t v23 = v56 + 1;
        v54[2] = v58 + 1;
        (*(void (**)(unint64_t, char *))(v55 + 32))((unint64_t)v54+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v58, v93);
        uint64_t v107 = v54;
      }
      while (v23 != v87);
      swift_bridgeObjectRelease();
      uint64_t v16 = v68;
    }
  }
  uint64_t v60 = v78;
  uint64_t v59 = v79;
  uint64_t v61 = v77;
  ImageQualityCriteria.complexSignals.setter();
  swift_bridgeObjectRetain();
  ImageQualityCriteria.ocrKeywords.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v61 + 32))(v59, v16, v60);
}

uint64_t sub_1004B7920(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IQACode();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    int64_t v7 = *(void *)(a1 + 16);
    if (v7)
    {
      v14[2] = v1;
      uint64_t v15 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100111718(0, v7, 0);
      uint64_t v8 = v15;
      v14[1] = a1;
      uint64_t v9 = (uint64_t *)(a1 + 40);
      do
      {
        sub_1004B7AE0(*(v9 - 1), *v9, v6);
        uint64_t v15 = v8;
        unint64_t v11 = v8[2];
        unint64_t v10 = v8[3];
        if (v11 >= v10 >> 1)
        {
          sub_100111718(v10 > 1, v11 + 1, 1);
          uint64_t v8 = v15;
        }
        v9 += 2;
        v8[2] = v11 + 1;
        (*(void (**)(unint64_t, void *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v11, v6, v3);
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v12 = sub_1004B8F2C();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1004B7AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  BOOL v4 = a1 == 1936941424 && a2 == 0xE400000000000000;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.pass(_:);
LABEL_7:
    uint64_t v8 = *v7;
    uint64_t v9 = type metadata accessor for IQACode();
    unint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104);
    return v10(a3, v8, v9);
  }
  if (a1 == 0x656E697272756C62 && a2 == 0xED0000776F4C7373
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.blurrinessLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0x656E697272756C62 && a2 == 0xEE00686769487373
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.blurrinessHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0x657275736F707865 && a2 == 0xEB00000000776F4CLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.exposureLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0x657275736F707865 && a2 == 0xEC00000068676948
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.exposureHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000010064FF20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.cardDistortionLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000010064FF40
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.cardDistortionHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000010064FF60
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.faceToImageRatioLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000010064FF80
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.faceToImageRatioHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000010064FFA0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.faceCenteredRatioLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x800000010064FFC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.faceCenteredRatioHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0x6374695064616568 && a2 == 0xEC000000776F4C68
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.headPitchLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0x6374695064616568 && a2 == 0xED00006867694868
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.headPitchHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0x6C6C6F5264616568 && a2 == 0xEB00000000776F4CLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.headRollLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0x6C6C6F5264616568 && a2 == 0xEC00000068676948
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.headRollHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0x4C77615964616568 && a2 == 0xEA0000000000776FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.headYawLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0x4877615964616568 && a2 == 0xEB00000000686769
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.headYawHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x800000010064FFE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.blinkingConfidenceLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100650000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.blinkingConfidenceHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x8000000100650020
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.prescriptionConfidenceLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100650040
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.prescriptionConfidenceHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100650060
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.sunglassesConfidenceLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100650080
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.sunglassesConfidenceHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000001006500A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.facemaskConfidenceLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001006500C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.facemaskConfidenceHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000001006500E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.headgearConfidenceLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100650100
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.headgearConfidenceHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100650120
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.faceCaptureQualityLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100650140
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.faceCaptureQualityHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0x746E656D75636F64 && a2 == 0xEF776F4C657A6953
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.documentSizeLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100650160
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.documentSizeHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100650180
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.documentRotatedLeft(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001006501A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.documentRotatedRight(_:);
    goto LABEL_7;
  }
  if (a1 == 0x746E656D75636F64 && a2 == 0xEE00646577656B53
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.documentSkewed(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001006501C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.targetTooFarLeft(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001006501E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.targetTooFarRight(_:);
    goto LABEL_7;
  }
  if (a1 == 0x6F54746567726174 && a2 == 0xEE0070557261466FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.targetTooFarUp(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100650200
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.targetTooFarDown(_:);
    goto LABEL_7;
  }
  if (a1 == 0x73656361466D756ELL && a2 == 0xEB00000000776F4CLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.numFacesLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0x73656361466D756ELL && a2 == 0xEC00000068676948
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.numFacesHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0x6C6576654C78756CLL && a2 == 0xEB00000000776F4CLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.luxLevelLow(_:);
    goto LABEL_7;
  }
  if (a1 == 0x6C6576654C78756CLL && a2 == 0xEC00000068676948
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.luxLevelHigh(_:);
    goto LABEL_7;
  }
  if (a1 == 0x6F4E373134666470 && a2 == 0xEE00646E756F4674
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.pdf417NotFound(_:);
    goto LABEL_7;
  }
  if (a1 == 0x6F46373134666470 && a2 == 0xEB00000000646E75
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.pdf417Found(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100650220
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.notAAMVACompliant(_:);
    goto LABEL_7;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100633010
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.isAAMVACompliant(_:);
    goto LABEL_7;
  }
  if (a1 == 0x73694D6574617473 && a2 == 0xED0000686374616DLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.stateMismatch(_:);
    goto LABEL_7;
  }
  if (a1 == 0x756C636E6F636E69 && a2 == 0xEC00000065766973
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    int64_t v7 = (unsigned int *)&enum case for IQACode.inconclusive(_:);
    goto LABEL_7;
  }
  *a3 = a1;
  a3[1] = a2;
  uint64_t v12 = enum case for IQACode.complex(_:);
  uint64_t v13 = type metadata accessor for IQACode();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(a3, v12, v13);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1004B8C48()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v1);
  type metadata accessor for ImageQualitySettings();
  sub_1004BF1B0(&qword_10071FCC0, (void (*)(uint64_t))&type metadata accessor for ImageQualitySettings);
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t sub_1004B8F2C()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v1);
  sub_100007764(&qword_10071FC90);
  sub_1000192C0();
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t sub_1004B91E0()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingImageQualitySettingsProvider()
{
  return self;
}

Swift::Int sub_1004B923C(void **a1)
{
  uint64_t v2 = *(void *)(sub_100007764(&qword_1007240A0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1004ED538(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1004B92E8(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1004B92E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v139 = sub_100007764(&qword_1007240A0);
  uint64_t v133 = *(void *)(v139 - 8);
  uint64_t v4 = __chkstk_darwin(v139);
  uint64_t v130 = (uint64_t)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v140 = (uint64_t)&v124 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v136 = (uint64_t)&v124 - v9;
  __chkstk_darwin(v8);
  uint64_t v135 = (uint64_t)&v124 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_143;
    }
    if (v11) {
      return sub_1004B9D00(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_151;
  }
  Swift::Int v126 = result;
  if (v11 < 2)
  {
    uint64_t v17 = (char *)_swiftEmptyArrayStorage;
    unint64_t v132 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80));
    uint64_t v125 = _swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      unint64_t v19 = _swiftEmptyArrayStorage[2];
LABEL_109:
      uint64_t v117 = v17;
      if (v19 >= 2)
      {
        uint64_t v118 = *a1;
        do
        {
          unint64_t v119 = v19 - 2;
          if (v19 < 2) {
            goto LABEL_138;
          }
          if (!v118) {
            goto LABEL_150;
          }
          uint64_t v120 = *(void *)&v117[16 * v119 + 32];
          uint64_t v121 = *(void *)&v117[16 * v19 + 24];
          sub_1004B9F74(v118 + *(void *)(v133 + 72) * v120, v118 + *(void *)(v133 + 72) * *(void *)&v117[16 * v19 + 16], v118 + *(void *)(v133 + 72) * v121, v132);
          if (v2) {
            break;
          }
          if (v121 < v120) {
            goto LABEL_139;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v117 = sub_1004EC924((uint64_t)v117);
          }
          if (v119 >= *((void *)v117 + 2)) {
            goto LABEL_140;
          }
          uint64_t v122 = &v117[16 * v119 + 32];
          *(void *)uint64_t v122 = v120;
          *((void *)v122 + 1) = v121;
          unint64_t v123 = *((void *)v117 + 2);
          if (v19 > v123) {
            goto LABEL_141;
          }
          memmove(&v117[16 * v19 + 16], &v117[16 * v19 + 32], 16 * (v123 - v19));
          *((void *)v117 + 2) = v123 - 1;
          unint64_t v19 = v123 - 1;
        }
        while (v123 > 2);
      }
LABEL_120:
      swift_bridgeObjectRelease();
      v125[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v133 + 80);
    uint64_t v125 = (void *)v15;
    unint64_t v132 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  uint64_t v17 = (char *)_swiftEmptyArrayStorage;
  uint64_t v138 = a1;
  while (1)
  {
    Swift::Int v20 = v18 + 1;
    Swift::Int v131 = v18;
    if (v18 + 1 >= v11) {
      break;
    }
    uint64_t v128 = v2;
    uint64_t v21 = *a1;
    Swift::Int v22 = v18;
    uint64_t v23 = *(void *)(v133 + 72);
    uint64_t v24 = v135;
    sub_1004BF0E8(*a1 + v23 * v20, v135);
    uint64_t v25 = v136;
    sub_1004BF0E8(v21 + v23 * v22, v136);
    uint64_t v26 = *(int *)(v139 + 48);
    Swift::Int v141 = *(void *)(v24 + v26);
    Swift::Int v137 = *(void *)(v25 + v26);
    sub_1004BF150(v25);
    sub_1004BF150(v24);
    Swift::Int v27 = v22 + 2;
    uint64_t v134 = v21;
    uint64_t v142 = v23;
    if (v22 + 2 >= v11)
    {
      Swift::Int v30 = v22 + 2;
    }
    else
    {
      uint64_t v127 = v17;
      Swift::Int v28 = v23 * v20;
      uint64_t v29 = v21;
      Swift::Int v30 = v22 + 2;
      uint64_t v31 = v23 * v27;
      while (1)
      {
        Swift::Int v32 = v11;
        int v33 = v141 < v137;
        uint64_t v34 = v135;
        sub_1004BF0E8(v29 + v31, v135);
        uint64_t v35 = v136;
        sub_1004BF0E8(v29 + v28, v136);
        int v36 = *(void *)(v34 + *(int *)(v139 + 48)) >= *(void *)(v35 + *(int *)(v139 + 48));
        sub_1004BF150(v35);
        sub_1004BF150(v34);
        if (v33 == v36) {
          break;
        }
        uint64_t v23 = v142;
        v29 += v142;
        ++v30;
        Swift::Int v11 = v32;
        if (v32 == v30)
        {
          Swift::Int v30 = v32;
          a1 = v138;
          uint64_t v17 = v127;
          goto LABEL_23;
        }
      }
      a1 = v138;
      uint64_t v17 = v127;
      Swift::Int v11 = v32;
      uint64_t v23 = v142;
    }
LABEL_23:
    Swift::Int v18 = v131;
    if (v141 >= v137)
    {
      Swift::Int v20 = v30;
      uint64_t v2 = v128;
      if (v20 < v11) {
        goto LABEL_40;
      }
    }
    else
    {
      if (v30 < v131) {
        goto LABEL_144;
      }
      Swift::Int v20 = v30;
      if (v131 >= v30)
      {
        uint64_t v2 = v128;
        break;
      }
      Swift::Int v141 = v11;
      uint64_t v127 = v17;
      uint64_t v37 = 0;
      uint64_t v38 = v23 * (v30 - 1);
      Swift::Int v39 = v30 * v23;
      Swift::Int v40 = v131;
      uint64_t v41 = v131 * v23;
      do
      {
        if (v40 != v20 + v37 - 1)
        {
          uint64_t v42 = v134;
          if (!v134) {
            goto LABEL_149;
          }
          unint64_t v43 = v134 + v41;
          sub_1000BEA14(v134 + v41, v130, &qword_1007240A0);
          if (v41 < v38 || v43 >= v42 + v39)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v41 != v38)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          sub_1000BEA14(v130, v42 + v38, &qword_1007240A0);
          Swift::Int v20 = v30;
          uint64_t v23 = v142;
        }
        ++v40;
        --v37;
        v38 -= v23;
        v39 -= v23;
        v41 += v23;
      }
      while (v40 < v20 + v37);
      a1 = v138;
      uint64_t v17 = v127;
      uint64_t v2 = v128;
      Swift::Int v18 = v131;
      Swift::Int v11 = v141;
      if (v20 < v141) {
        goto LABEL_40;
      }
    }
LABEL_61:
    if (v20 < v18) {
      goto LABEL_137;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v137 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v17 = sub_1004EC56C(0, *((void *)v17 + 2) + 1, 1, v17);
    }
    unint64_t v66 = *((void *)v17 + 2);
    unint64_t v65 = *((void *)v17 + 3);
    unint64_t v19 = v66 + 1;
    if (v66 >= v65 >> 1) {
      uint64_t v17 = sub_1004EC56C((char *)(v65 > 1), v66 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v19;
    unint64_t v67 = v17 + 32;
    uint64_t v68 = &v17[16 * v66 + 32];
    Swift::Int v69 = v137;
    *(void *)uint64_t v68 = v131;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v19 - 1;
        if (v19 >= 4)
        {
          uint64_t v75 = &v67[16 * v19];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_126;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_127;
          }
          unint64_t v82 = v19 - 2;
          uint64_t v83 = &v67[16 * v19 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_129;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_132;
          }
          if (v87 >= v78)
          {
            unint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_136;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_98;
          }
        }
        else
        {
          if (v19 != 3)
          {
            uint64_t v99 = *((void *)v17 + 4);
            uint64_t v100 = *((void *)v17 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_92;
          }
          uint64_t v72 = *((void *)v17 + 4);
          uint64_t v71 = *((void *)v17 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_128;
        }
        unint64_t v82 = v19 - 2;
        uint64_t v88 = &v67[16 * v19 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_131;
        }
        uint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_134;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_135;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_98:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_100;
        }
LABEL_92:
        if (v93) {
          goto LABEL_130;
        }
        uint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_133;
        }
        if (v104 < v92) {
          goto LABEL_14;
        }
LABEL_100:
        unint64_t v109 = v17;
        unint64_t v110 = v70 - 1;
        if (v70 - 1 >= v19)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        uint64_t v111 = *a1;
        if (!*a1) {
          goto LABEL_148;
        }
        uint64_t v112 = &v67[16 * v110];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        sub_1004B9F74(v111 + *(void *)(v133 + 72) * *(void *)v112, v111 + *(void *)(v133 + 72) * *(void *)v114, v111 + *(void *)(v133 + 72) * v115, v132);
        if (v2) {
          goto LABEL_120;
        }
        if (v115 < v113) {
          goto LABEL_123;
        }
        if (v70 > *((void *)v109 + 2)) {
          goto LABEL_124;
        }
        *(void *)uint64_t v112 = v113;
        *(void *)&v67[16 * v110 + 8] = v115;
        unint64_t v116 = *((void *)v109 + 2);
        if (v70 >= v116) {
          goto LABEL_125;
        }
        uint64_t v17 = v109;
        unint64_t v19 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v109 + 2) = v116 - 1;
        a1 = v138;
        if (v116 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v19 = 1;
LABEL_14:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v137;
    if (v137 >= v11) {
      goto LABEL_109;
    }
  }
  if (v20 >= v11) {
    goto LABEL_61;
  }
LABEL_40:
  BOOL v81 = __OFSUB__(v20, v18);
  Swift::Int v44 = v20 - v18;
  if (v81) {
    goto LABEL_142;
  }
  if (v44 >= v126)
  {
LABEL_60:
    Swift::Int v18 = v131;
    goto LABEL_61;
  }
  if (__OFADD__(v131, v126)) {
    goto LABEL_145;
  }
  if (v131 + v126 >= v11) {
    Swift::Int v45 = v11;
  }
  else {
    Swift::Int v45 = v131 + v126;
  }
  if (v45 >= v131)
  {
    if (v20 == v45)
    {
      Swift::Int v18 = v131;
      goto LABEL_61;
    }
    uint64_t v127 = v17;
    uint64_t v128 = v2;
    uint64_t v46 = *(void *)(v133 + 72);
    uint64_t v47 = v46 * (v20 - 1);
    uint64_t v134 = v46;
    Swift::Int v48 = v20 * v46;
    Swift::Int v129 = v45;
    do
    {
      uint64_t v50 = 0;
      Swift::Int v51 = v131;
      Swift::Int v137 = v20;
      while (1)
      {
        Swift::Int v141 = v51;
        unint64_t v52 = v138;
        uint64_t v53 = *v138;
        Swift::Int v54 = v48;
        uint64_t v55 = v48 + v50 + *v138;
        uint64_t v56 = v135;
        sub_1004BF0E8(v55, v135);
        uint64_t v57 = v47;
        uint64_t v58 = v47 + v50 + v53;
        uint64_t v59 = v136;
        sub_1004BF0E8(v58, v136);
        uint64_t v60 = *(int *)(v139 + 48);
        uint64_t v142 = *(void *)(v56 + v60);
        uint64_t v61 = *(void *)(v59 + v60);
        sub_1004BF150(v59);
        sub_1004BF150(v56);
        if (v142 >= v61) {
          break;
        }
        uint64_t v62 = *v52;
        if (!*v52) {
          goto LABEL_147;
        }
        Swift::Int v48 = v54;
        uint64_t v47 = v57;
        uint64_t v63 = v62 + v57 + v50;
        sub_1000BEA14(v62 + v54 + v50, v140, &qword_1007240A0);
        swift_arrayInitWithTakeFrontToBack();
        sub_1000BEA14(v140, v63, &qword_1007240A0);
        v50 -= v134;
        Swift::Int v51 = v141 + 1;
        Swift::Int v49 = v137;
        if (v137 == v141 + 1) {
          goto LABEL_53;
        }
      }
      Swift::Int v49 = v137;
      uint64_t v47 = v57;
      Swift::Int v48 = v54;
LABEL_53:
      Swift::Int v20 = v49 + 1;
      v47 += v134;
      v48 += v134;
    }
    while (v20 != v129);
    Swift::Int v20 = v129;
    uint64_t v17 = v127;
    uint64_t v2 = v128;
    a1 = v138;
    goto LABEL_60;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004B9D00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v29 = a1;
  uint64_t v32 = sub_100007764(&qword_1007240A0);
  uint64_t v7 = __chkstk_darwin(v32);
  uint64_t v33 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::Int v11 = (char *)&v27 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v31 = a3;
  uint64_t v28 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v35 = v16 * (v31 - 1);
    uint64_t v30 = v16;
    uint64_t v34 = v16 * v31;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v29;
    while (1)
    {
      unint64_t v19 = a4;
      uint64_t v20 = *a4;
      sub_1004BF0E8(v34 + v17 + v20, (uint64_t)v15);
      sub_1004BF0E8(v35 + v17 + v20, (uint64_t)v11);
      uint64_t v21 = *(int *)(v32 + 48);
      uint64_t v22 = *(void *)&v15[v21];
      uint64_t v23 = *(void *)&v11[v21];
      sub_1004BF150((uint64_t)v11);
      uint64_t result = sub_1004BF150((uint64_t)v15);
      BOOL v24 = v22 < v23;
      a4 = v19;
      if (!v24)
      {
LABEL_4:
        v35 += v30;
        v34 += v30;
        if (++v31 == v28) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v25 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v26 = v25 + v35 + v17;
      sub_1000BEA14(v25 + v34 + v17, v33, &qword_1007240A0);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1000BEA14(v33, v26, &qword_1007240A0);
      v17 -= v30;
      ++v18;
      a4 = v19;
      if (v31 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1004B9F74(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_100007764(&qword_1007240A0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v49 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_71;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_72;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v52 = a1;
  unint64_t v51 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    unint64_t v48 = a1;
    if ((v17 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v30 = a4 + v19;
      unint64_t v50 = a4 + v19;
      unint64_t v52 = a2;
      if (v19 >= 1 && v48 < a2)
      {
        uint64_t v32 = -v14;
        uint64_t v46 = v8;
        unint64_t v47 = a4;
        do
        {
          unint64_t v33 = a3 + v32;
          sub_1004BF0E8(v30 + v32, (uint64_t)v12);
          unint64_t v34 = a2 + v32;
          uint64_t v35 = (uint64_t)v12;
          uint64_t v36 = v49;
          sub_1004BF0E8(a2 + v32, v49);
          uint64_t v37 = *(int *)(v8 + 48);
          uint64_t v38 = *(void *)(v35 + v37);
          uint64_t v39 = *(void *)(v36 + v37);
          uint64_t v40 = v36;
          uint64_t v12 = (char *)v35;
          sub_1004BF150(v40);
          sub_1004BF150(v35);
          if (v38 >= v39)
          {
            unint64_t v42 = v50;
            v50 += v32;
            if (a3 < v42 || v33 >= v42)
            {
              uint64_t v8 = v46;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v34 = a2;
              unint64_t v41 = v47;
            }
            else
            {
              uint64_t v8 = v46;
              unint64_t v41 = v47;
              if (a3 != v42) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v34 = a2;
            }
          }
          else
          {
            if (a3 < a2 || v33 >= a2)
            {
              uint64_t v8 = v46;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v41 = v47;
            }
            else
            {
              uint64_t v8 = v46;
              unint64_t v41 = v47;
              if (a3 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v52 += v32;
          }
          unint64_t v30 = v50;
          if (v50 <= v41) {
            break;
          }
          a2 = v34;
          a3 += v32;
        }
        while (v34 > v48);
      }
      goto LABEL_69;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v48 = a4 + v18;
    unint64_t v50 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      uint64_t v21 = v49;
      do
      {
        sub_1004BF0E8(a2, (uint64_t)v12);
        sub_1004BF0E8(a4, v21);
        uint64_t v22 = *(int *)(v8 + 48);
        uint64_t v23 = *(void *)&v12[v22];
        uint64_t v24 = *(void *)(v21 + v22);
        sub_1004BF150(v21);
        sub_1004BF150((uint64_t)v12);
        unint64_t v25 = v52;
        if (v23 >= v24)
        {
          unint64_t v28 = v51 + v14;
          if (v52 < v51 || v52 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v52 != v51)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v51 = v28;
          unint64_t v26 = a2;
        }
        else
        {
          unint64_t v26 = a2 + v14;
          if (v52 < a2 || v52 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v52 == a2)
          {
            unint64_t v25 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v52 = v25 + v14;
        a4 = v51;
        if (v51 >= v48) {
          break;
        }
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_69:
    sub_1004EC7E0(&v52, &v51, (uint64_t *)&v50);
    return 1;
  }
LABEL_73:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004BA420(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1004BA578((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_1004BA578((unint64_t *)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_1004BA578(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  unint64_t v28 = a1;
  uint64_t v38 = sub_100007764(&qword_1007240A0);
  __chkstk_darwin(v38);
  uint64_t v36 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for IQCType();
  uint64_t result = __chkstk_darwin(v35);
  unint64_t v33 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v6;
  int64_t v8 = 0;
  uint64_t v39 = (void *)a3;
  uint64_t v9 = *(void *)(a3 + 64);
  uint64_t v29 = 0;
  uint64_t v30 = a3 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  uint64_t v37 = v6 + 16;
  int64_t v31 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v32 = v6 + 8;
  uint64_t v13 = v6;
  uint64_t v14 = v33;
  uint64_t v16 = v35;
  uint64_t v15 = (uint64_t)v36;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v40 = v8;
      unint64_t v18 = v17 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v22 >= v31) {
      return sub_1004BAB3C(v28, v27, v29, v39);
    }
    unint64_t v23 = *(void *)(v30 + 8 * v22);
    int64_t v24 = v8 + 1;
    if (!v23)
    {
      int64_t v24 = v8 + 2;
      if (v8 + 2 >= v31) {
        return sub_1004BAB3C(v28, v27, v29, v39);
      }
      unint64_t v23 = *(void *)(v30 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v8 + 3;
        if (v8 + 3 >= v31) {
          return sub_1004BAB3C(v28, v27, v29, v39);
        }
        unint64_t v23 = *(void *)(v30 + 8 * v24);
        if (!v23) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v23 - 1) & v23;
    int64_t v40 = v24;
    unint64_t v18 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_5:
    uint64_t v19 = v39;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
    v20(v14, v39[6] + *(void *)(v13 + 72) * v18, v16);
    uint64_t v21 = *(void *)(v19[7] + 8 * v18);
    v20((char *)v15, (unint64_t)v14, v16);
    *(void *)(v15 + *(int *)(v38 + 48)) = v21;
    sub_1004BF150(v15);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v14, v16);
    int64_t v8 = v40;
    if ((v21 & 0x8000000000000000) == 0)
    {
      *(unint64_t *)((char *)v28 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      if (__OFADD__(v29++, 1))
      {
        __break(1u);
        return sub_1004BAB3C(v28, v27, v29, v39);
      }
    }
  }
  uint64_t v25 = v8 + 4;
  if (v8 + 4 >= v31) {
    return sub_1004BAB3C(v28, v27, v29, v39);
  }
  unint64_t v23 = *(void *)(v30 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v8 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v31) {
      return sub_1004BAB3C(v28, v27, v29, v39);
    }
    unint64_t v23 = *(void *)(v30 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1004BA8A0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100007764(&qword_1007258B0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_retain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1004BAB3C(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for IQCType();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v46 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v42 = (char *)&v37 - v11;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_100007764(&qword_100725890);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = result;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  if (a2 < 1) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *a1;
  }
  uint64_t v15 = 0;
  int64_t v40 = a4;
  uint64_t v41 = v43 + 16;
  uint64_t v45 = v43 + 32;
  uint64_t v16 = result + 64;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v44 = v15;
      unint64_t v18 = v17 | (v15 << 6);
    }
    else
    {
      uint64_t v19 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v39) {
        return v13;
      }
      unint64_t v20 = v38[v19];
      uint64_t v21 = v15 + 1;
      if (!v20)
      {
        uint64_t v21 = v15 + 2;
        if (v15 + 2 >= v39) {
          return v13;
        }
        unint64_t v20 = v38[v21];
        if (!v20)
        {
          uint64_t v21 = v15 + 3;
          if (v15 + 3 >= v39) {
            return v13;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            uint64_t v22 = v15 + 4;
            if (v15 + 4 >= v39) {
              return v13;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                uint64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v39) {
                  return v13;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v21 = v15 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v14 = (v20 - 1) & v20;
      uint64_t v44 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    unint64_t v23 = v42;
    uint64_t v24 = v43;
    uint64_t v25 = *(void *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, a4[6] + v25 * v18, v8);
    uint64_t v26 = *(void *)(a4[7] + 8 * v18);
    unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v27(v46, v23, v8);
    sub_1004BF1B0(&qword_100725898, (void (*)(uint64_t))&type metadata accessor for IQCType);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v31 = __clz(__rbit64((-1 << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v34 = v30 == v33;
        if (v30 == v33) {
          unint64_t v30 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v16 + 8 * v30);
      }
      while (v35 == -1);
      unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(void *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v13 + 48) + v31 * v25, v46, v8);
    *(void *)(*(void *)(v13 + 56) + 8 * v31) = v26;
    ++*(void *)(v13 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v40;
    uint64_t v15 = v44;
    if (!a3) {
      return v13;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_1004BAF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    for (unint64_t i = (uint64_t *)(a1 + 152); ; i += 19)
    {
      uint64_t v12 = *i;
      BOOL v13 = *(i - 15) == a2 && *(i - 14) == a3;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v12 && *(void *)(v12 + 16)) {
        break;
      }
      if (!--v10) {
        return;
      }
    }
    long long v14 = *(_OWORD *)(v12 + 128);
    v31[5] = *(_OWORD *)(v12 + 112);
    v31[6] = v14;
    *(_OWORD *)char v32 = *(_OWORD *)(v12 + 144);
    *(_OWORD *)&v32[9] = *(_OWORD *)(v12 + 153);
    long long v15 = *(_OWORD *)(v12 + 48);
    long long v16 = *(_OWORD *)(v12 + 80);
    long long v17 = *(_OWORD *)(v12 + 96);
    void v31[2] = *(_OWORD *)(v12 + 64);
    v31[3] = v16;
    uint64_t v31[4] = v17;
    v31[0] = *(_OWORD *)(v12 + 32);
    v31[1] = v15;
    long long v18 = v16;
    uint64_t v19 = self;
    sub_1000AB0CC((uint64_t)v31);
    id v20 = [v19 standardUserDefaults];
    v21._object = (void *)0x8000000100650300;
    v21._uint64_t countAndFlagsBits = 0xD000000000000026;
    Swift::Double_optional v33 = NSUserDefaults.internalDouble(forKey:)(v21);
    uint64_t v22 = *(void *)&v33.is_nil;
    char v24 = v23;

    if (v24)
    {
      if (((*((void *)&v18 + 1) | (unint64_t)v18) & 0x8000000000000000) == 0)
      {
        id v29 = objc_allocWithZone((Class)type metadata accessor for IdentityImageDimension());
        IdentityImageDimension.init(height:width:scale:)();
        sub_1000AB104((uint64_t)v31);
        return;
      }
    }
    else
    {
      sub_1000AB104((uint64_t)v31);
      defaultLogger()();
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v27 = 134217984;
        v30[1] = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "forcing resize scale to %f", v27, 0xCu);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if (((*((void *)&v18 + 1) | (unint64_t)v18) & 0x8000000000000000) == 0)
      {
        id v28 = objc_allocWithZone((Class)type metadata accessor for IdentityImageDimension());
        IdentityImageDimension.init(height:width:scale:)();
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

unint64_t sub_1004BB204(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v6);
  if (a1 >= 2)
  {
    if (*(void *)(a1 + 16) == 2)
    {
      float v9 = *(float *)(a1 + 32);
      if (v9 <= *(float *)(a1 + 36))
      {
        unsigned __int8 v11 = 0;
        uint64_t v10 = LODWORD(v9);
        goto LABEL_6;
      }
    }
    (*(void (**)(unsigned char *, void))(v8 + 104))(&v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], enum case for DIPError.Code.invalidImageQualitySettings(_:));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004BF1B0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    swift_errorRelease();
  }
  uint64_t v10 = 0;
  unsigned __int8 v11 = 1;
LABEL_6:
  v13[12] = v11;
  v13[8] = v11;
  return v10 | ((unint64_t)v11 << 32);
}

unint64_t sub_1004BB4C8(unint64_t a1)
{
  unint64_t result = sub_1004BB204(a1);
  if ((result & 0x100000000) != 0 || (v2 & 0x100000000) != 0) {
    return 0;
  }
  if (*(float *)&result <= -9.2234e18)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (*(float *)&result >= 9.2234e18)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((result & 0x7F800000) == 0x7F800000 || (v2 & 0x7F800000) == 0x7F800000) {
    goto LABEL_13;
  }
  if (*(float *)&v2 > -9.2234e18)
  {
    if (*(float *)&v2 < 9.2234e18) {
      return (uint64_t)*(float *)&result;
    }
    goto LABEL_15;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

void *sub_1004BB594(uint64_t a1)
{
  uint64_t v250 = sub_100007764(&qword_1007240A0);
  uint64_t v2 = *(void *)(v250 - 8);
  uint64_t v3 = __chkstk_darwin(v250);
  uint64_t v226 = (char *)&v224 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  unsigned __int8 v225 = (char *)&v224 - v6;
  __chkstk_darwin(v5);
  uint64_t v249 = (uint64_t)&v224 - v7;
  uint64_t v8 = type metadata accessor for IQCType();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v248 = (char *)&v224 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  long long v14 = (char *)&v224 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v228 = (char *)&v224 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v254 = (char *)&v224 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v252 = (uint64_t)&v224 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v244 = (char *)&v224 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v243 = (uint64_t)&v224 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v242 = (uint64_t)&v224 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v241 = (uint64_t)&v224 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v240 = (uint64_t)&v224 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v239 = (uint64_t)&v224 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v238 = (uint64_t)&v224 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v237 = (uint64_t)&v224 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v224 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  uint64_t v236 = (uint64_t)&v224 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v235 = (uint64_t)&v224 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v234 = (uint64_t)&v224 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v233 = (uint64_t)&v224 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v232 = (uint64_t)&v224 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v231 = (uint64_t)&v224 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v230 = (uint64_t)&v224 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t v227 = (char *)&v224 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v229 = (uint64_t)&v224 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  uint64_t v60 = (char *)&v224 - v59;
  uint64_t v61 = __chkstk_darwin(v58);
  uint64_t v63 = (char *)&v224 - v62;
  __chkstk_darwin(v61);
  unint64_t v65 = (char *)&v224 - v64;
  sub_1000BEA14(a1, (uint64_t)v256, &qword_100721310);
  if (sub_1004BF068((uint64_t)v256) == 1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v224 = v2;
  memcpy(v257, v256, sizeof(v257));
  unint64_t v67 = sub_10015E7E8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v251 = v9;
  uint64_t v68 = *(void (**)(char *, void, uint64_t))(v9 + 104);
  int v245 = (void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  uint64_t v246 = v68;
  v68(v65, enum case for IQCType.blurriness(_:), v8);
  sub_1000BEA14((uint64_t)v257, (uint64_t)v282, &qword_100722088);
  sub_1000BEA14((uint64_t)v282, (uint64_t)v283, &qword_100722088);
  if (v283[0] == 1 || (v284 & 1) != 0) {
    uint64_t v69 = -1;
  }
  else {
    uint64_t v69 = v283[2];
  }
  uint64_t v70 = (uint64_t)v39;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v67;
  sub_100563C84(v69, (uint64_t)v65, isUniquelyReferenced_nonNull_native);
  uint64_t v72 = v327[0];
  swift_bridgeObjectRelease();
  uint64_t v73 = *(void (**)(char *, uint64_t))(v251 + 8);
  uint64_t v247 = v251 + 8;
  v253 = v73;
  v73(v65, v8);
  v246(v63, enum case for IQCType.exposure(_:), v8);
  sub_1000BEA14((uint64_t)&v257[4], (uint64_t)v281, &qword_100722088);
  sub_1000BEA14((uint64_t)v281, (uint64_t)v285, &qword_100722088);
  uint64_t v74 = (uint64_t)v227;
  if (v285[0] == 1 || (v286 & 1) != 0) {
    uint64_t v75 = -1;
  }
  else {
    uint64_t v75 = v285[2];
  }
  char v76 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v72;
  sub_100563C84(v75, (uint64_t)v63, v76);
  uint64_t v77 = v327[0];
  swift_bridgeObjectRelease();
  v253(v63, v8);
  uint64_t v78 = (void (*)(uint64_t, void, uint64_t))v246;
  v246(v60, enum case for IQCType.cardDistortion(_:), v8);
  sub_1000BEA14((uint64_t)&v257[8], (uint64_t)v280, &qword_100722088);
  sub_1000BEA14((uint64_t)v280, (uint64_t)v287, &qword_100722088);
  if (v287[0] == 1 || (v288 & 1) != 0) {
    uint64_t v79 = -1;
  }
  else {
    uint64_t v79 = v287[2];
  }
  char v80 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v77;
  sub_100563C84(v79, (uint64_t)v60, v80);
  uint64_t v81 = v327[0];
  swift_bridgeObjectRelease();
  v253(v60, v8);
  v78(v229, enum case for IQCType.faceToImageRatio(_:), v8);
  sub_1000BEA14((uint64_t)&v257[12], (uint64_t)v279, &qword_100722088);
  sub_1000BEA14((uint64_t)v279, (uint64_t)v289, &qword_100722088);
  if (v289[0] == 1 || (v290 & 1) != 0) {
    uint64_t v82 = -1;
  }
  else {
    uint64_t v82 = v289[2];
  }
  uint64_t v83 = (uint64_t)v14;
  char v84 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v81;
  uint64_t v85 = v82;
  uint64_t v86 = v229;
  sub_100563C84(v85, v229, v84);
  uint64_t v87 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v86, v8);
  v78(v74, enum case for IQCType.faceCenteredRatio(_:), v8);
  sub_1000BEA14((uint64_t)&v257[16], (uint64_t)v278, &qword_100722088);
  sub_1000BEA14((uint64_t)v278, (uint64_t)v291, &qword_100722088);
  uint64_t v88 = (uint64_t)v228;
  if (v291[0] == 1 || (v292 & 1) != 0) {
    uint64_t v89 = -1;
  }
  else {
    uint64_t v89 = v291[2];
  }
  char v90 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v87;
  sub_100563C84(v89, v74, v90);
  uint64_t v91 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v74, v8);
  v78(v230, enum case for IQCType.headPitch(_:), v8);
  sub_1000BEA14((uint64_t)&v257[20], (uint64_t)v277, &qword_100722088);
  sub_1000BEA14((uint64_t)v277, (uint64_t)v293, &qword_100722088);
  if (v293[0] == 1 || (v294 & 1) != 0) {
    uint64_t v92 = -1;
  }
  else {
    uint64_t v92 = v293[2];
  }
  char v93 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v91;
  uint64_t v94 = v92;
  uint64_t v95 = v230;
  sub_100563C84(v94, v230, v93);
  uint64_t v96 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v95, v8);
  v78(v231, enum case for IQCType.headRoll(_:), v8);
  sub_1000BEA14((uint64_t)&v257[24], (uint64_t)v276, &qword_100722088);
  sub_1000BEA14((uint64_t)v276, (uint64_t)v295, &qword_100722088);
  if (v295[0] == 1 || (v296 & 1) != 0) {
    uint64_t v97 = -1;
  }
  else {
    uint64_t v97 = v295[2];
  }
  char v98 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v96;
  uint64_t v99 = v97;
  uint64_t v100 = v231;
  sub_100563C84(v99, v231, v98);
  uint64_t v101 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v100, v8);
  v78(v232, enum case for IQCType.headYaw(_:), v8);
  sub_1000BEA14((uint64_t)&v257[28], (uint64_t)v275, &qword_100722088);
  sub_1000BEA14((uint64_t)v275, (uint64_t)v297, &qword_100722088);
  if (v297[0] == 1 || (v298 & 1) != 0) {
    uint64_t v102 = -1;
  }
  else {
    uint64_t v102 = v297[2];
  }
  char v103 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v101;
  uint64_t v104 = v102;
  uint64_t v105 = v232;
  sub_100563C84(v104, v232, v103);
  uint64_t v106 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v105, v8);
  v78(v233, enum case for IQCType.blinkingConfidence(_:), v8);
  sub_1000BEA14((uint64_t)&v257[40], (uint64_t)v274, &qword_100722088);
  sub_1000BEA14((uint64_t)v274, (uint64_t)v299, &qword_100722088);
  if (v299[0] == 1 || (v300 & 1) != 0) {
    uint64_t v107 = -1;
  }
  else {
    uint64_t v107 = v299[2];
  }
  char v108 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v106;
  uint64_t v109 = v107;
  uint64_t v110 = v233;
  sub_100563C84(v109, v233, v108);
  uint64_t v111 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v110, v8);
  v78(v234, enum case for IQCType.prescriptionConfidence(_:), v8);
  sub_1000BEA14((uint64_t)&v257[44], (uint64_t)v273, &qword_100722088);
  sub_1000BEA14((uint64_t)v273, (uint64_t)v301, &qword_100722088);
  if (v301[0] == 1 || (v302 & 1) != 0) {
    uint64_t v112 = -1;
  }
  else {
    uint64_t v112 = v301[2];
  }
  char v113 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v111;
  uint64_t v114 = v112;
  uint64_t v115 = v234;
  sub_100563C84(v114, v234, v113);
  uint64_t v116 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v115, v8);
  v78(v235, enum case for IQCType.sunglassesConfidence(_:), v8);
  sub_1000BEA14((uint64_t)&v257[48], (uint64_t)v272, &qword_100722088);
  sub_1000BEA14((uint64_t)v272, (uint64_t)v303, &qword_100722088);
  if (v303[0] == 1 || (v304 & 1) != 0) {
    uint64_t v117 = -1;
  }
  else {
    uint64_t v117 = v303[2];
  }
  char v118 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v116;
  uint64_t v119 = v117;
  uint64_t v120 = v235;
  sub_100563C84(v119, v235, v118);
  uint64_t v121 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v120, v8);
  v78(v236, enum case for IQCType.facemaskConfidence(_:), v8);
  sub_1000BEA14((uint64_t)&v257[52], (uint64_t)v271, &qword_100722088);
  sub_1000BEA14((uint64_t)v271, (uint64_t)v305, &qword_100722088);
  if (v305[0] == 1 || (v306 & 1) != 0) {
    uint64_t v122 = -1;
  }
  else {
    uint64_t v122 = v305[2];
  }
  char v123 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v121;
  uint64_t v124 = v122;
  uint64_t v125 = v236;
  sub_100563C84(v124, v236, v123);
  uint64_t v126 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v125, v8);
  v78(v70, enum case for IQCType.headgearConfidence(_:), v8);
  sub_1000BEA14((uint64_t)&v257[56], (uint64_t)v270, &qword_100722088);
  sub_1000BEA14((uint64_t)v270, (uint64_t)v307, &qword_100722088);
  if (v307[0] == 1 || (v308 & 1) != 0) {
    uint64_t v127 = -1;
  }
  else {
    uint64_t v127 = v307[2];
  }
  char v128 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v126;
  sub_100563C84(v127, v70, v128);
  uint64_t v129 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v70, v8);
  v78(v237, enum case for IQCType.faceCaptureQuality(_:), v8);
  sub_1000BEA14((uint64_t)&v257[64], (uint64_t)v269, &qword_100722088);
  sub_1000BEA14((uint64_t)v269, (uint64_t)v309, &qword_100722088);
  if (v309[0] == 1 || (v310 & 1) != 0) {
    uint64_t v130 = -1;
  }
  else {
    uint64_t v130 = v309[2];
  }
  char v131 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v129;
  uint64_t v132 = v237;
  sub_100563C84(v130, v237, v131);
  uint64_t v133 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v132, v8);
  v78(v238, enum case for IQCType.documentSize(_:), v8);
  sub_1000BEA14((uint64_t)&v257[68], (uint64_t)v268, &qword_100722088);
  sub_1000BEA14((uint64_t)v268, (uint64_t)v311, &qword_100722088);
  if (v311[0] == 1 || (v312 & 1) != 0) {
    uint64_t v134 = -1;
  }
  else {
    uint64_t v134 = v311[2];
  }
  uint64_t v135 = v251;
  char v136 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v133;
  uint64_t v137 = v134;
  uint64_t v138 = v238;
  sub_100563C84(v137, v238, v136);
  uint64_t v139 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v138, v8);
  v78(v239, enum case for IQCType.documentRotation(_:), v8);
  sub_1000BEA14((uint64_t)&v257[72], (uint64_t)v267, &qword_100722088);
  sub_1000BEA14((uint64_t)v267, (uint64_t)v313, &qword_100722088);
  if (v313[0] == 1 || (v314 & 1) != 0) {
    uint64_t v140 = -1;
  }
  else {
    uint64_t v140 = v313[2];
  }
  char v141 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v139;
  uint64_t v142 = v140;
  uint64_t v143 = v239;
  sub_100563C84(v142, v239, v141);
  uint64_t v144 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v143, v8);
  v78(v240, enum case for IQCType.documentSkew(_:), v8);
  sub_1000BEA14((uint64_t)&v257[76], (uint64_t)v266, &qword_100722088);
  sub_1000BEA14((uint64_t)v266, (uint64_t)v315, &qword_100722088);
  if (v315[0] == 1 || (v316 & 1) != 0) {
    uint64_t v145 = -1;
  }
  else {
    uint64_t v145 = v315[2];
  }
  char v146 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v144;
  uint64_t v147 = v145;
  uint64_t v148 = v240;
  sub_100563C84(v147, v240, v146);
  uint64_t v149 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v148, v8);
  v78(v241, enum case for IQCType.leftDrift(_:), v8);
  sub_1000BEA14((uint64_t)&v257[80], (uint64_t)v265, &qword_100722088);
  sub_1000BEA14((uint64_t)v265, (uint64_t)v317, &qword_100722088);
  if (v317[0] == 1 || (v318 & 1) != 0) {
    uint64_t v150 = -1;
  }
  else {
    uint64_t v150 = v317[2];
  }
  char v151 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v149;
  uint64_t v152 = v150;
  uint64_t v153 = v241;
  sub_100563C84(v152, v241, v151);
  uint64_t v154 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v153, v8);
  v78(v242, enum case for IQCType.rightDrift(_:), v8);
  sub_1000BEA14((uint64_t)&v257[84], (uint64_t)v264, &qword_100722088);
  sub_1000BEA14((uint64_t)v264, (uint64_t)v319, &qword_100722088);
  if (v319[0] == 1 || (v320 & 1) != 0) {
    uint64_t v155 = -1;
  }
  else {
    uint64_t v155 = v319[2];
  }
  char v156 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v154;
  uint64_t v157 = v155;
  uint64_t v158 = v242;
  sub_100563C84(v157, v242, v156);
  uint64_t v159 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v158, v8);
  v78(v243, enum case for IQCType.upDrift(_:), v8);
  sub_1000BEA14((uint64_t)&v257[88], (uint64_t)v263, &qword_100722088);
  sub_1000BEA14((uint64_t)v263, (uint64_t)v321, &qword_100722088);
  if (v321[0] == 1 || (v322 & 1) != 0) {
    uint64_t v160 = -1;
  }
  else {
    uint64_t v160 = v321[2];
  }
  char v161 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v159;
  uint64_t v162 = v160;
  uint64_t v163 = v243;
  sub_100563C84(v162, v243, v161);
  uint64_t v164 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v163, v8);
  v78((uint64_t)v244, enum case for IQCType.downDrift(_:), v8);
  sub_1000BEA14((uint64_t)&v257[92], (uint64_t)v262, &qword_100722088);
  sub_1000BEA14((uint64_t)v262, (uint64_t)v323, &qword_100722088);
  if (v323[0] == 1 || (v324 & 1) != 0) {
    uint64_t v165 = -1;
  }
  else {
    uint64_t v165 = v323[2];
  }
  char v166 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v164;
  uint64_t v167 = v165;
  os_log_type_t v168 = v244;
  sub_100563C84(v167, (uint64_t)v244, v166);
  uint64_t v169 = v327[0];
  swift_bridgeObjectRelease();
  v253(v168, v8);
  v78(v252, enum case for IQCType.numFaces(_:), v8);
  sub_1000BEA14((uint64_t)&v257[32], (uint64_t)v261, &qword_100722088);
  sub_1000BEA14((uint64_t)v261, (uint64_t)v325, &qword_100722088);
  if (v325[0] == 1 || (v326 & 1) != 0) {
    uint64_t v170 = -1;
  }
  else {
    uint64_t v170 = v325[2];
  }
  char v171 = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v169;
  uint64_t v172 = v170;
  uint64_t v173 = v252;
  sub_100563C84(v172, v252, v171);
  uint64_t v174 = v327[0];
  swift_bridgeObjectRelease();
  v253((char *)v173, v8);
  v78((uint64_t)v254, enum case for IQCType.luxLevel(_:), v8);
  sub_1000BEA14((uint64_t)&v257[36], (uint64_t)v260, &qword_100722088);
  sub_1000BEA14((uint64_t)v260, (uint64_t)v327, &qword_100722088);
  if (v327[0] == 1 || (v328 & 1) != 0) {
    uint64_t v175 = -1;
  }
  else {
    uint64_t v175 = v327[2];
  }
  char v176 = swift_isUniquelyReferenced_nonNull_native();
  v332[0] = v174;
  uint64_t v177 = v175;
  uint64_t v178 = v254;
  sub_100563C84(v177, (uint64_t)v254, v176);
  uint64_t v179 = v332[0];
  swift_bridgeObjectRelease();
  v253(v178, v8);
  v78(v88, enum case for IQCType.pdf417Detected(_:), v8);
  sub_1000BEA14((uint64_t)&v257[96], (uint64_t)v259, &qword_100722098);
  sub_1000BEA14((uint64_t)v259, (uint64_t)v329, &qword_100722098);
  if (unint64_t)v329[1] << 8 == 512 || (v331) {
    uint64_t v180 = -1;
  }
  else {
    uint64_t v180 = v330;
  }
  char v181 = swift_isUniquelyReferenced_nonNull_native();
  v332[0] = v179;
  sub_100563C84(v180, v88, v181);
  os_log_type_t v182 = (char *)v332[0];
  swift_bridgeObjectRelease();
  v253((char *)v88, v8);
  v78(v83, enum case for IQCType.isAAMVACompliant(_:), v8);
  sub_1000BEA14((uint64_t)&v257[99], (uint64_t)v258, &qword_100722098);
  sub_1000BEA14((uint64_t)v258, (uint64_t)v332, &qword_100722098);
  if (unint64_t)BYTE1(v332[0]) << 8 == 512 || (v333) {
    uint64_t v183 = -1;
  }
  else {
    uint64_t v183 = v332[1];
  }
  char v184 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v255 = v182;
  sub_100563C84(v183, v83, v184);
  uint64_t v254 = v255;
  swift_bridgeObjectRelease();
  v253((char *)v83, v8);
  uint64_t v252 = v8;
  if (!v257[103] || (uint64_t v185 = *(void *)(v257[103] + 16)) == 0)
  {
LABEL_118:
    uint64_t v204 = swift_bridgeObjectRetain();
    sub_1004BA420(v204);
    swift_bridgeObjectRelease();
    uint64_t v205 = swift_bridgeObjectRetain();
    char v206 = (char *)sub_1004EB77C(v205);
    swift_release();
    uint64_t v255 = v206;
    sub_1004B923C((void **)&v255);
    swift_release();
    uint64_t v207 = *((void *)v255 + 2);
    if (v207)
    {
      uint64_t v208 = *(int *)(v250 + 48);
      __int16 v209 = &v255[(*(unsigned __int8 *)(v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80)];
      uint64_t v247 = *(void *)(v224 + 72);
      uint64_t v248 = (char *)v208;
      uint64_t v210 = (void (**)(char *, uint64_t))(v135 + 32);
      uint64_t v244 = v255;
      int v245 = (void (**)(char *, uint64_t, uint64_t))(v135 + 16);
      unint64_t v66 = _swiftEmptyArrayStorage;
      uint64_t v211 = (uint64_t)v225;
      uint64_t v212 = v226;
      uint64_t v246 = (void (*)(char *, void, uint64_t))(v135 + 32);
      uint64_t v213 = v250;
      do
      {
        uint64_t v214 = v249;
        sub_1004BF0E8((uint64_t)v209, v249);
        uint64_t v215 = v210;
        uint64_t v216 = *(void *)&v248[v214];
        uint64_t v217 = *(int *)(v213 + 48);
        uint64_t v218 = v214;
        uint64_t v219 = v252;
        v253 = *v215;
        ((void (*)(uint64_t, uint64_t, uint64_t))v253)(v211, v218, v252);
        *(void *)(v211 + v217) = v216;
        uint64_t v220 = *(int *)(v213 + 48);
        (*v245)(v212, v211, v219);
        *(void *)&v212[v220] = v216;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v66 = (void *)sub_10010EFB0(0, v66[2] + 1, 1, (unint64_t)v66);
        }
        unint64_t v222 = v66[2];
        unint64_t v221 = v66[3];
        if (v222 >= v221 >> 1) {
          unint64_t v66 = (void *)sub_10010EFB0(v221 > 1, v222 + 1, 1, (unint64_t)v66);
        }
        v66[2] = v222 + 1;
        uint64_t v210 = (void (**)(char *, uint64_t))v246;
        ((void (*)(char *, char *, uint64_t))v253)((char *)v66+ ((*(unsigned __int8 *)(v251 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v251 + 80))+ *(void *)(v251 + 72) * v222, v212, v219);
        sub_1004BF150(v211);
        v209 += v247;
        --v207;
      }
      while (v207);
      swift_release();
    }
    else
    {
      swift_release();
      unint64_t v66 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    return v66;
  }
  LODWORD(v244) = enum case for IQCType.complex(_:);
  uint64_t v243 = v135 + 16;
  uint64_t v242 = swift_bridgeObjectRetain();
  uint64_t v186 = v242 + 56;
  __int16 v187 = v248;
  while (1)
  {
    uint64_t v188 = *(void *)(v186 - 16);
    uint64_t v189 = *(void *)(v186 - 8);
    *(void *)__int16 v187 = *(void *)(v186 - 24);
    *((void *)v187 + 1) = v188;
    v246(v187, v244, v8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    char v190 = v254;
    int v191 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v255 = v190;
    unint64_t v193 = sub_100590E60((uint64_t)v187);
    uint64_t v194 = *((void *)v190 + 2);
    BOOL v195 = (v192 & 1) == 0;
    uint64_t v196 = v194 + v195;
    if (__OFADD__(v194, v195)) {
      break;
    }
    char v197 = v192;
    if (*((void *)v254 + 3) >= v196)
    {
      if ((v191 & 1) == 0) {
        sub_10016D244();
      }
    }
    else
    {
      sub_100169840(v196, v191);
      unint64_t v198 = sub_100590E60((uint64_t)v248);
      if ((v197 & 1) != (v199 & 1)) {
        goto LABEL_131;
      }
      unint64_t v193 = v198;
    }
    uint64_t v254 = v255;
    if (v197)
    {
      *(void *)(*((void *)v254 + 7) + 8 * v193) = v189;
      uint64_t v8 = v252;
      __int16 v187 = v248;
    }
    else
    {
      uint64_t v200 = v254;
      *(void *)&v254[8 * (v193 >> 6) + 64] |= 1 << v193;
      uint64_t v8 = v252;
      __int16 v187 = v248;
      (*(void (**)(unint64_t, char *, uint64_t))(v251 + 16))(*((void *)v200 + 6) + *(void *)(v251 + 72) * v193, v248, v252);
      *(void *)(*((void *)v200 + 7) + 8 * v193) = v189;
      uint64_t v201 = *((void *)v200 + 2);
      BOOL v202 = __OFADD__(v201, 1);
      uint64_t v203 = v201 + 1;
      if (v202) {
        goto LABEL_130;
      }
      *((void *)v254 + 2) = v203;
    }
    swift_bridgeObjectRelease();
    v253(v187, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v186 += 32;
    if (!--v185)
    {
      swift_bridgeObjectRelease();
      uint64_t v135 = v251;
      goto LABEL_118;
    }
  }
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  unint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1004BD098(uint64_t a1)
{
  type metadata accessor for MetricsFlags();
  __src[0] = _swiftEmptyArrayStorage;
  sub_1004BF1B0(&qword_10071FCC8, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
  sub_100007764(&qword_10072FF28);
  sub_1004BF08C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v2 = __dst[0];
  uint64_t v36 = __dst[0];
  sub_1000BEA14(a1, (uint64_t)__src, &qword_100721310);
  if (sub_1004BF068((uint64_t)__src) != 1)
  {
    memcpy(__dst, __src, sizeof(__dst));
    sub_1000BEA14((uint64_t)__dst, (uint64_t)v72, &qword_100722088);
    sub_1000BEA14((uint64_t)v72, (uint64_t)&v73, &qword_100722088);
    if (v73 != 1 && (v74 & 1) != 0)
    {
      uint64_t v3 = static MetricsFlags.blurriness.getter();
      uint64_t v119 = v3;
      uint64_t v115 = v2;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v3;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[4], (uint64_t)v71, &qword_100722088);
    sub_1000BEA14((uint64_t)v71, (uint64_t)&v75, &qword_100722088);
    if (v75 != 1 && (v76 & 1) != 0)
    {
      uint64_t v4 = static MetricsFlags.exposure.getter();
      uint64_t v119 = v4;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v4;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[8], (uint64_t)v70, &qword_100722088);
    sub_1000BEA14((uint64_t)v70, (uint64_t)&v77, &qword_100722088);
    if (v77 != 1 && (v78 & 1) != 0)
    {
      uint64_t v5 = static MetricsFlags.cardDistortion.getter();
      uint64_t v119 = v5;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v5;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[12], (uint64_t)v69, &qword_100722088);
    sub_1000BEA14((uint64_t)v69, (uint64_t)&v79, &qword_100722088);
    if (v79 != 1 && (v80 & 1) != 0)
    {
      uint64_t v6 = static MetricsFlags.faceToImageRatio.getter();
      uint64_t v119 = v6;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v6;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[16], (uint64_t)v68, &qword_100722088);
    sub_1000BEA14((uint64_t)v68, (uint64_t)&v81, &qword_100722088);
    if (v81 != 1 && (v82 & 1) != 0)
    {
      uint64_t v7 = static MetricsFlags.faceCenteredRatio.getter();
      uint64_t v119 = v7;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v7;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[20], (uint64_t)v67, &qword_100722088);
    sub_1000BEA14((uint64_t)v67, (uint64_t)&v83, &qword_100722088);
    if (v83 != 1 && (v84 & 1) != 0)
    {
      uint64_t v8 = static MetricsFlags.headPitch.getter();
      uint64_t v119 = v8;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v8;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[24], (uint64_t)v66, &qword_100722088);
    sub_1000BEA14((uint64_t)v66, (uint64_t)&v85, &qword_100722088);
    if (v85 != 1 && (v86 & 1) != 0)
    {
      uint64_t v9 = static MetricsFlags.headRoll.getter();
      uint64_t v119 = v9;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v9;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[28], (uint64_t)v65, &qword_100722088);
    sub_1000BEA14((uint64_t)v65, (uint64_t)&v87, &qword_100722088);
    if (v87 != 1 && (v88 & 1) != 0)
    {
      uint64_t v10 = static MetricsFlags.headYaw.getter();
      uint64_t v119 = v10;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v10;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[40], (uint64_t)v64, &qword_100722088);
    sub_1000BEA14((uint64_t)v64, (uint64_t)&v89, &qword_100722088);
    if (v89 != 1 && (v90 & 1) != 0)
    {
      uint64_t v11 = static MetricsFlags.blinkingConfidence.getter();
      uint64_t v119 = v11;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v11;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[44], (uint64_t)v63, &qword_100722088);
    sub_1000BEA14((uint64_t)v63, (uint64_t)&v91, &qword_100722088);
    if (v91 != 1 && (v92 & 1) != 0)
    {
      uint64_t v12 = static MetricsFlags.prescriptionConfidence.getter();
      uint64_t v119 = v12;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v12;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[48], (uint64_t)v62, &qword_100722088);
    sub_1000BEA14((uint64_t)v62, (uint64_t)&v93, &qword_100722088);
    if (v93 != 1 && (v94 & 1) != 0)
    {
      uint64_t v13 = static MetricsFlags.sunglassesConfidence.getter();
      uint64_t v119 = v13;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v13;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[52], (uint64_t)v61, &qword_100722088);
    sub_1000BEA14((uint64_t)v61, (uint64_t)&v95, &qword_100722088);
    if (v95 != 1 && (v96 & 1) != 0)
    {
      uint64_t v14 = static MetricsFlags.facemaskConfidence.getter();
      uint64_t v119 = v14;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v14;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[56], (uint64_t)v60, &qword_100722088);
    sub_1000BEA14((uint64_t)v60, (uint64_t)&v97, &qword_100722088);
    if (v97 != 1 && (v98 & 1) != 0)
    {
      uint64_t v15 = static MetricsFlags.headgearConfidence.getter();
      uint64_t v119 = v15;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v15;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[60], (uint64_t)v59, &qword_100722088);
    sub_1000BEA14((uint64_t)v59, (uint64_t)&v99, &qword_100722088);
    if (v99 != 1 && (v100 & 1) != 0)
    {
      uint64_t v16 = static MetricsFlags.faceConfidence.getter();
      uint64_t v119 = v16;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v16;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[64], (uint64_t)v58, &qword_100722088);
    sub_1000BEA14((uint64_t)v58, (uint64_t)&v101, &qword_100722088);
    if (v101 != 1 && (v102 & 1) != 0)
    {
      uint64_t v17 = static MetricsFlags.faceCaptureQuality.getter();
      uint64_t v119 = v17;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v17;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[68], (uint64_t)v57, &qword_100722088);
    sub_1000BEA14((uint64_t)v57, (uint64_t)&v103, &qword_100722088);
    if (v103 != 1 && (v104 & 1) != 0)
    {
      uint64_t v18 = static MetricsFlags.documentSize.getter();
      uint64_t v119 = v18;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v18;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[72], (uint64_t)v56, &qword_100722088);
    sub_1000BEA14((uint64_t)v56, (uint64_t)&v105, &qword_100722088);
    if (v105 != 1 && (v106 & 1) != 0)
    {
      uint64_t v19 = static MetricsFlags.documentRotation.getter();
      uint64_t v119 = v19;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v19;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[76], (uint64_t)v55, &qword_100722088);
    sub_1000BEA14((uint64_t)v55, (uint64_t)&v107, &qword_100722088);
    if (v107 != 1 && (v108 & 1) != 0)
    {
      uint64_t v20 = static MetricsFlags.documentSkew.getter();
      uint64_t v119 = v20;
      uint64_t v115 = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v115 = v20;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[80], (uint64_t)v54, &qword_100722088);
    sub_1000BEA14((uint64_t)v54, (uint64_t)&v109, &qword_100722088);
    if (v109 != 1 && (v110 & 1) != 0
      || (sub_1000BEA14((uint64_t)&__dst[84], (uint64_t)v53, &qword_100722088),
          sub_1000BEA14((uint64_t)v53, (uint64_t)&v111, &qword_100722088),
          v111 != 1)
      && (v112 & 1) != 0
      || (sub_1000BEA14((uint64_t)&__dst[88], (uint64_t)v52, &qword_100722088),
          sub_1000BEA14((uint64_t)v52, (uint64_t)&v113, &qword_100722088),
          v113 != 1)
      && (v114 & 1) != 0
      || (sub_1000BEA14((uint64_t)&__dst[92], (uint64_t)v51, &qword_100722088),
          sub_1000BEA14((uint64_t)v51, (uint64_t)&v115, &qword_100722088),
          v115 != 1)
      && (v116 & 1) != 0)
    {
      uint64_t v21 = static MetricsFlags.targetDrift.getter();
      uint64_t v119 = v21;
      v50[0] = v36;
      swift_retain();
      dispatch thunk of SetAlgebra.intersection(_:)();
      sub_1004BF1B0(&qword_10071FCD0, (void (*)(uint64_t))&type metadata accessor for MetricsFlags);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        v50[0] = v21;
        dispatch thunk of SetAlgebra.formUnion(_:)();
      }
    }
    sub_1000BEA14((uint64_t)&__dst[32], (uint64_t)v50, &qword_100722088);
    sub_1000BEA14((uint64_t)v50, (uint64_t)&v117, &qword_100722088);
    if (v117 != 1 && (v118 & 1) != 0)
    {
      uint64_t v22 = static MetricsFlags.numFaces.getter();
      sub_1000172D0(&v119, v22);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[36], (uint64_t)v49, &qword_100722088);
    sub_1000BEA14((uint64_t)v49, (uint64_t)&v119, &qword_100722088);
    if (v119 != 1 && (v120 & 1) != 0)
    {
      uint64_t v23 = static MetricsFlags.luxLevel.getter();
      sub_1000172D0(v122, v23);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[96], (uint64_t)v48, &qword_100722098);
    sub_1000BEA14((uint64_t)v48, (uint64_t)v121, &qword_100722098);
    if (v121[1])
    {
      uint64_t v24 = static MetricsFlags.pdf417Detected.getter();
      sub_1000172D0(v122, v24);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[99], (uint64_t)v47, &qword_100722098);
    sub_1000BEA14((uint64_t)v47, (uint64_t)v122, &qword_100722098);
    if ((v122[0] & 0x100) != 0)
    {
      uint64_t v25 = static MetricsFlags.isAAMVACompliant.getter();
      sub_1000172D0(&v130, v25);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[101] + 1, (uint64_t)&v46, &qword_10072A938);
    sub_1000BEA14((uint64_t)&v46, (uint64_t)&v123, &qword_10072A938);
    if (v123)
    {
      uint64_t v26 = static MetricsFlags.isAutoCaptured.getter();
      sub_1000172D0(&v130, v26);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[101] + 2, (uint64_t)&v45, &qword_10072A938);
    sub_1000BEA14((uint64_t)&v45, (uint64_t)&v124, &qword_10072A938);
    if (v124)
    {
      uint64_t v27 = static MetricsFlags.captureTime.getter();
      sub_1000172D0(&v130, v27);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[101] + 3, (uint64_t)&v44, &qword_10072A938);
    sub_1000BEA14((uint64_t)&v44, (uint64_t)&v125, &qword_10072A938);
    if (v125)
    {
      uint64_t v28 = static MetricsFlags.originalVertices.getter();
      sub_1000172D0(&v130, v28);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[101] + 4, (uint64_t)&v43, &qword_10072A938);
    sub_1000BEA14((uint64_t)&v43, (uint64_t)&v126, &qword_10072A938);
    if (v126)
    {
      uint64_t v29 = static MetricsFlags.targetVertices.getter();
      sub_1000172D0(&v130, v29);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[101] + 5, (uint64_t)&v42, &qword_10072A938);
    sub_1000BEA14((uint64_t)&v42, (uint64_t)&v127, &qword_10072A938);
    if (v127)
    {
      uint64_t v30 = static MetricsFlags.fuzzyMatch.getter();
      sub_1000172D0(&v130, v30);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[101] + 6, (uint64_t)&v41, &qword_10072A938);
    sub_1000BEA14((uint64_t)&v41, (uint64_t)&v128, &qword_10072A938);
    if (v128)
    {
      uint64_t v31 = static MetricsFlags.livenessChute.getter();
      sub_1000172D0(&v130, v31);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[101] + 7, (uint64_t)&v40, &qword_10072A938);
    sub_1000BEA14((uint64_t)&v40, (uint64_t)&v129, &qword_10072A938);
    if (v129)
    {
      uint64_t v32 = static MetricsFlags.isFlashEnabled.getter();
      sub_1000172D0(&v130, v32);
      swift_release();
      swift_release();
    }
    sub_1000BEA14((uint64_t)&__dst[102], (uint64_t)v39, (uint64_t *)&unk_100721320);
    sub_1000BEA14((uint64_t)v39, (uint64_t)&v130, (uint64_t *)&unk_100721320);
    if (v130 && *(void *)(v130 + 16))
    {
      uint64_t v33 = static MetricsFlags.closestMatches.getter();
      sub_1000172D0(&v35, v33);
      swift_release();
      swift_release();
    }
    return v36;
  }
  return v2;
}

BOOL sub_1004BE90C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v6 = (float)((float)sub_1005F50F0(16777217) * 0.000000059605) + 0.0;
  if ((a1 & (unint64_t)&_mh_execute_header) != 0) {
    float v7 = 0.0;
  }
  else {
    float v7 = *(float *)&a1;
  }
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67109378;
    LODWORD(v14) = v6 < v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 8) = 2080;
    LODWORD(v14) = a1;
    BYTE4(v14) = BYTE4(a1) & 1;
    sub_100007764(&qword_10072FF20);
    uint64_t v11 = Optional.debugDescription.getter();
    uint64_t v14 = sub_100110D58(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "IQ Exploration rolled a %{BOOL}d from probability %s", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6 < v7;
}

uint64_t sub_1004BEB60()
{
  uint64_t v0 = type metadata accessor for IQImageType();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10071F450 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1007600C8;
  uint64_t v5 = unk_1007600D0;
  double v6 = sub_1000193F4();
  char v39 = 0;
  BOOL v37 = sub_1004BE90C(LODWORD(v6));
  float v7 = *(void (**)(char *, void, uint64_t))(v1 + 104);
  v7(v3, enum case for IQImageType.frontScan(_:), v0);
  uint64_t v8 = sub_10000C790((uint64_t)v3, v4, v5);
  v36[14] = v9;
  v36[15] = v8;
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v3, v0);
  v7(v3, enum case for IQImageType.backScan(_:), v0);
  uint64_t v11 = sub_10000C790((uint64_t)v3, v4, v5);
  v36[12] = v12;
  v36[13] = v11;
  v10(v3, v0);
  v7(v3, enum case for IQImageType.idFront(_:), v0);
  uint64_t v13 = sub_10000C790((uint64_t)v3, v4, v5);
  v36[10] = v14;
  v36[11] = v13;
  v10(v3, v0);
  v7(v3, enum case for IQImageType.idBack(_:), v0);
  uint64_t v15 = sub_10000C790((uint64_t)v3, v4, v5);
  v36[8] = v16;
  v36[9] = v15;
  v10(v3, v0);
  v7(v3, enum case for IQImageType.selfie(_:), v0);
  uint64_t v17 = sub_10000C790((uint64_t)v3, v4, v5);
  v36[6] = v18;
  v36[7] = v17;
  v10(v3, v0);
  v7(v3, enum case for IQImageType.liveness(_:), v0);
  uint64_t v19 = sub_10000C790((uint64_t)v3, v4, v5);
  v36[4] = v20;
  v36[5] = v19;
  v10(v3, v0);
  v7(v3, enum case for IQImageType.passive(_:), v0);
  uint64_t v21 = sub_10000C790((uint64_t)v3, v4, v5);
  v36[2] = v22;
  v36[3] = v21;
  v10(v3, v0);
  uint64_t v23 = sub_100018904(v5);
  v36[0] = v24;
  v36[1] = v23;
  uint64_t v25 = self;
  id v26 = [v25 standardUserDefaults];
  v27._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v27._object = (void *)0x800000010064FD60;
  NSUserDefaults.internalInt(forKey:)(v27);

  id v28 = [v25 standardUserDefaults];
  v29._object = (void *)0x800000010064FD90;
  v29._uint64_t countAndFlagsBits = 0xD000000000000021;
  NSUserDefaults.internalInt(forKey:)(v29);

  id v30 = [v25 standardUserDefaults];
  v31._uint64_t countAndFlagsBits = 0xD000000000000026;
  v31._object = (void *)0x800000010064FDC0;
  NSUserDefaults.internalInt(forKey:)(v31);

  id v32 = [v25 standardUserDefaults];
  v33._uint64_t countAndFlagsBits = 0xD000000000000024;
  v33._object = (void *)0x800000010064FDF0;
  NSUserDefaults.internalInt(forKey:)(v33);

  id v34 = objc_allocWithZone((Class)type metadata accessor for IdentityImageQuality());
  char v38 = 0;
  return IdentityImageQuality.init(frontScanSettings:backScanSettings:frontIDSettings:backIDSettings:selfieSettings:livenessSettings:passiveSettings:livenessBlockingCodes:exploration:bufferSize:stableWindow:idScanFrameRate:videoFrameRate:maxRectTravel:resizeDimensions:)();
}

uint64_t sub_1004BF068(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 816);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

unint64_t sub_1004BF08C()
{
  unint64_t result = qword_10072FF30;
  if (!qword_10072FF30)
  {
    sub_100019364(&qword_10072FF28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072FF30);
  }
  return result;
}

uint64_t sub_1004BF0E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007240A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004BF150(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_1007240A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004BF1B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004BF1F8(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DigitalPresentmentAlertDisplayConfiguration();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = sub_100007764(&qword_10072FF58);
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_1004BF348, 0, 0);
}

uint64_t sub_1004BF348()
{
  if (qword_10071F570 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = sub_1000443D4(*(void *)(v0 + 96), (uint64_t)qword_10072FF38);
  swift_beginAccess();
  sub_1004BF94C(v2, v1);
  uint64_t v3 = sub_100007764(&qword_10072FF60);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v1, 1, v3);
  sub_1004BF9B4(v1);
  if (v4 == 1)
  {
    sub_10000C728(*(void **)(v0 + 40), *(void *)(*(void *)(v0 + 40) + 24));
    dispatch thunk of DeviceInformationProviding.isFaceIDDevice.getter();
    DigitalPresentmentAlertDisplayConfiguration.init(isFaceIDDevice:)();
    CFDictionaryRef v5 = (const __CFDictionary *)DigitalPresentmentAlertDisplayConfiguration.options.getter();
    double v6 = CFUserNotificationCreate(0, 0.0, 3uLL, 0, v5);
    *(void *)(v0 + 112) = v6;

    CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(0, v6, (CFUserNotificationCallBack)sub_1004BFA14, 0);
    *(void *)(v0 + 120) = RunLoopSource;
    v8._uint64_t countAndFlagsBits = 0xD000000000000019;
    v8._object = (void *)0x8000000100650330;
    v9._uint64_t countAndFlagsBits = 0x3163356437393166;
    v9._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v9, v8);
    uint64_t v10 = swift_task_alloc();
    *(void *)(v0 + 128) = v10;
    *(void *)(v10 + 16) = RunLoopSource;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1004BF6E4;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 56) + 104))(*(void *)(v0 + 64), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 48));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

uint64_t sub_1004BF6E4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1004BF7FC, 0, 0);
}

uint64_t sub_1004BF7FC()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  CFDictionaryRef v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1004BF8B0()
{
  uint64_t v0 = sub_100007764(&qword_10072FF58);
  sub_10004440C(v0, qword_10072FF38);
  uint64_t v1 = sub_1000443D4(v0, (uint64_t)qword_10072FF38);
  uint64_t v2 = sub_100007764(&qword_10072FF60);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_1004BF94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10072FF58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004BF9B4(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_10072FF58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004BFA14(uint64_t a1, uint64_t a2)
{
  return sub_1004BFC28(a2);
}

void sub_1004BFA1C(uint64_t a1, __CFRunLoopSource *a2)
{
  uint64_t v4 = sub_100007764(&qword_10072FF58);
  __chkstk_darwin(v4);
  double v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10071F570 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1000443D4(v4, (uint64_t)qword_10072FF38);
  uint64_t v8 = sub_100007764(&qword_10072FF60);
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  swift_beginAccess();
  sub_1004BFBC0((uint64_t)v6, v7);
  swift_endAccess();
  uint64_t v10 = CFRunLoopGetMain();
  CFRunLoopAddSource(v10, a2, kCFRunLoopCommonModes);
}

void sub_1004BFBB8(uint64_t a1)
{
  sub_1004BFA1C(a1, *(__CFRunLoopSource **)(v1 + 16));
}

uint64_t sub_1004BFBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10072FF58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004BFC28(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_10072FF58);
  __chkstk_darwin(v2);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_100007764(&qword_10072FF60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for PreferencesURLOpener();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a1)
  {
    PreferencesURLOpener.init()();
    PreferencesURLOpener.openFaceIDAndPasscodeSettings()();
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (qword_10071F570 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_1000443D4(v2, (uint64_t)qword_10072FF38);
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5))
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, v5);
    CheckedContinuation.resume(returning:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  swift_beginAccess();
  sub_1004BFBC0((uint64_t)v4, v13);
  return swift_endAccess();
}

uint64_t sub_1004BFEE8()
{
  uint64_t v2 = *v0;
  NSString v3 = String._bridgeToObjectiveC()();
  v1[16] = v3;
  v1[2] = v1;
  v1[7] = v1 + 15;
  v1[3] = sub_1004C027C;
  uint64_t v4 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_10001E4BC;
  v1[13] = &unk_100706FA0;
  v1[14] = v4;
  [v2 generateDeviceEncryptionKeyForCredential:v3 completion:v1 + 10];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_1004BFFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  NSString v7 = String._bridgeToObjectiveC()();
  v4[16] = v7;
  v4[2] = v4;
  v4[7] = v4 + 15;
  v4[3] = sub_1004C0118;
  uint64_t v8 = swift_continuation_init();
  v4[10] = _NSConcreteStackBlock;
  v4[11] = 0x40000000;
  v4[12] = sub_100024AAC;
  v4[13] = &unk_100706F88;
  v4[14] = v8;
  [v6 generatePresentmentKeysForCredential:v7 numKeys:a3 completion:v4 + 10];
  return _swift_continuation_await(v4 + 2);
}

uint64_t sub_1004C0118()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *v0;
  uint64_t v4 = *(void **)(*v0 + 128);
  if (*(void *)(v1 + 48))
  {
    swift_willThrow();

    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 120);

    uint64_t v8 = *(uint64_t (**)(uint64_t))(v3 + 8);
    return v8(v7);
  }
}

char *sub_1004C0280()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0;
  machServiceIdentityProvisioningXPC.getter();
  id v6 = objc_allocWithZone((Class)NSXPCListener);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithMachServiceName:v7];

  *(void *)&v5[OBJC_IVAR____TtC8coreidvd28IdentityProvisioningListener_xpcListener] = v8;
  uint64_t v9 = (objc_class *)type metadata accessor for IdentityProvisioningListener();
  v17.receiver = v5;
  v17.super_class = v9;
  uint64_t v10 = (char *)[super init];
  uint64_t v11 = *(void **)&v10[OBJC_IVAR____TtC8coreidvd28IdentityProvisioningListener_xpcListener];
  uint64_t v12 = v10;
  [v11 setDelegate:v12];
  [v11 resume];
  defaultLogger()();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Identity Provisioning XPC listener has started", v15, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

id sub_1004C04A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Identity Provisioning XPC listener is tearing down", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [*(id *)&v1[OBJC_IVAR____TtC8coreidvd28IdentityProvisioningListener_xpcListener] invalidate];
  uint64_t v9 = (objc_class *)type metadata accessor for IdentityProvisioningListener();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_1004C0650()
{
  return sub_1004C0668("Identity Provisioning connection invalidated");
}

uint64_t sub_1004C065C()
{
  return sub_1004C0668("Identity Provisioning connection interrupted");
}

uint64_t sub_1004C0668(const char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a1, v8, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t type metadata accessor for IdentityProvisioningListener()
{
  return self;
}

void sub_1004C0828()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_retain_n();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  int v10 = v9;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v11 = swift_slowAlloc();
    int v25 = v10;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v32 = v26;
    uint64_t v28 = v2;
    *(_DWORD *)uint64_t v12 = 136315138;
    v23[1] = v12 + 4;
    uint64_t v24 = v12;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v27 = v5;
    uint64_t v14 = v1;
    uint64_t v15 = v4;
    uint64_t v16 = (void *)Strong;
    uint64_t v31 = Strong;
    sub_100007764(&qword_10072F290);
    uint64_t v17 = Optional.debugDescription.getter();
    uint64_t v29 = v0;
    unint64_t v19 = v18;

    uint64_t v4 = v15;
    uint64_t v1 = v14;
    uint64_t v31 = sub_100110D58(v17, v19, &v32);
    uint64_t v2 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v25, "Checking connection %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v27);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  }
  uint64_t v20 = swift_unknownObjectWeakLoadStrong();
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    v22._uint64_t countAndFlagsBits = 0xD000000000000028;
    v22._object = (void *)0x80000001006505C0;
    if (!NSXPCConnection.isEntitled(_:)(v22))
    {
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

uint64_t sub_1004C0E84(int a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v4[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v6;
  if (a2)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  v4[6] = v7;
  v4[7] = v8;
  swift_retain();
  return _swift_task_switch(sub_1004C0F3C, 0, 0);
}

uint64_t sub_1004C0F3C()
{
  sub_1004C0828();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100730AD0 + dword_100730AD0);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  void *v1 = v0;
  v1[1] = sub_1004C108C;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  return v7(v5, v4, v2, v3);
}

uint64_t sub_1004C108C(void *a1)
{
  uint64_t v4 = (void *)*v2;
  v4[9] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1004C1220, 0, 0);
  }
  else
  {
    uint64_t v5 = (void (**)(void, void, void))v4[3];
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ((void (**)(void, void *, void))v5)[2](v5, a1, 0);
    _Block_release(v5);

    uint64_t v6 = (uint64_t (*)(void))v4[1];
    return v6();
  }
}

uint64_t sub_1004C1220()
{
  swift_release();
  uint64_t v1 = *(void (***)(void, void, void))(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  ((void (**)(void, void, void *))v1)[2](v1, 0, v2);

  _Block_release(v1);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1004C12DC()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProvisioningSessionProxy()
{
  return self;
}

uint64_t sub_1004C1348()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004C1398()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10000C494;
  uint64_t v7 = (uint64_t (*)(int, uint64_t, void *, uint64_t))((char *)&dword_100730090 + dword_100730090);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1004C1460()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Creating IdentityProvisioningSessionProxy", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_unknownObjectWeakAssign();
  uint64_t result = os_transaction_create();
  if (result)
  {
    *(void *)(v1 + 24) = result;
    type metadata accessor for IdentityProvisioningManager();
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
    swift_allocObject();
    *(void *)(v1 + 32) = sub_1004DEDFC((uint64_t)v10);
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004C1618(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = a1;
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 67109120;
    LODWORD(aBlock) = [v6 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "IdentityProvisioningListener connection received from %d", v9, 8u);
    swift_slowDealloc();
  }
  else
  {

    os_log_type_t v7 = v6;
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  type metadata accessor for DIIdentityProvisioningXPCInterface();
  uint64_t v10 = (void *)static DIIdentityProvisioningXPCInterface.interface()();
  [v6 setExportedInterface:v10];

  type metadata accessor for IdentityProvisioningSessionProxy();
  swift_allocObject();
  uint64_t v11 = v6;
  uint64_t v12 = sub_1004C1460();

  [v11 setExportedObject:v12];
  swift_release();
  uint64_t v20 = sub_1004C0650;
  uint64_t v21 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  unint64_t v18 = sub_100593800;
  unint64_t v19 = &unk_100707030;
  uint64_t v13 = _Block_copy(&aBlock);
  [v11 setInvalidationHandler:v13];
  _Block_release(v13);
  uint64_t v20 = sub_1004C065C;
  uint64_t v21 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  unint64_t v18 = sub_100593800;
  unint64_t v19 = &unk_100707058;
  uint64_t v14 = _Block_copy(&aBlock);
  [v11 setInterruptionHandler:v14];
  _Block_release(v14);
  [v11 resume];
  return 1;
}

uint64_t sub_1004C1938(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004C1948()
{
  return swift_release();
}

char *sub_1004C1958()
{
  uint64_t v0 = sub_100007764(&qword_1007300A0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v56 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v46 = (char *)v41 - v6;
  uint64_t v47 = type metadata accessor for AnyCodable();
  uint64_t v50 = *(void *)(v47 - 8);
  uint64_t v7 = __chkstk_darwin(v47);
  uint64_t v55 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v41 - v9;
  uint64_t v11 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007764(&qword_100725DE0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AnyCodableArray();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for ISO18013_AAMVA_ElementIdentifier.domesticDrivingPrivileges(_:), v11);
  sub_1002D9778((uint64_t)v14, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_10000C6CC((uint64_t)v17, &qword_100725DE0);
    return (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v57 = v10;
    uint64_t v23 = v50;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    uint64_t v24 = AnyCodableArray.value.getter();
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      char v42 = v21;
      uint64_t v43 = v19;
      uint64_t v44 = v18;
      uint64_t v26 = v49;
      uint64_t v27 = *(void (**)(void, void, void))(v23 + 16);
      unint64_t v28 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      v41[1] = v24;
      unint64_t v29 = v24 + v28;
      uint64_t v53 = *(void *)(v23 + 72);
      uint64_t v54 = v27;
      uint64_t v51 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
      uint64_t v52 = (void (**)(char *, uint64_t))(v23 + 8);
      uint64_t v30 = (void (**)(char *, char *, uint64_t))(v48 + 32);
      Swift::String v22 = (char *)_swiftEmptyArrayStorage;
      char v45 = v2;
      uint64_t v31 = v47;
      uint64_t v50 = v23 + 16;
      uint64_t v32 = (void (*)(char *, char *, uint64_t))v27;
      v27(v57, v24 + v28, v47);
      while (1)
      {
        Swift::String v33 = v55;
        v32(v55, v57, v31);
        uint64_t v34 = (uint64_t)v33;
        uint64_t v35 = v57;
        sub_1004C1F38(v34, (uint64_t)v2);
        (*v52)(v35, v31);
        if ((*v51)(v2, 1, v26) == 1)
        {
          sub_10000C6CC((uint64_t)v2, &qword_1007300A0);
        }
        else
        {
          uint64_t v36 = *v30;
          BOOL v37 = v46;
          (*v30)(v46, v2, v26);
          v36(v56, v37, v26);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v22 = (char *)sub_10010FB34(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
          }
          unint64_t v39 = *((void *)v22 + 2);
          unint64_t v38 = *((void *)v22 + 3);
          uint64_t v31 = v47;
          if (v39 >= v38 >> 1) {
            Swift::String v22 = (char *)sub_10010FB34(v38 > 1, v39 + 1, 1, (unint64_t)v22);
          }
          *((void *)v22 + 2) = v39 + 1;
          uint64_t v26 = v49;
          v36(&v22[((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v39], v56, v49);
          uint64_t v2 = v45;
        }
        v29 += v53;
        if (!--v25) {
          break;
        }
        v32(v35, (char *)v29, v31);
      }
      swift_bridgeObjectRelease();
      uint64_t v19 = v43;
      uint64_t v18 = v44;
      uint64_t v21 = v42;
    }
    else
    {
      swift_bridgeObjectRelease();
      Swift::String v22 = (char *)_swiftEmptyArrayStorage;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
  return v22;
}

uint64_t sub_1004C1F38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v105 = a2;
  uint64_t v3 = sub_100007764(&qword_1007300A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v93 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_1007300A8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  char v92 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v95 = (uint64_t)&v84 - v8;
  uint64_t v9 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleClass();
  uint64_t v96 = *(void *)(v9 - 8);
  uint64_t v97 = v9;
  __chkstk_darwin(v9);
  char v94 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier();
  uint64_t v99 = *(void *)(v11 - 8);
  uint64_t v100 = v11;
  __chkstk_darwin(v11);
  char v98 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100725DF0);
  __chkstk_darwin(v13 - 8);
  uint64_t v101 = (uint64_t *)((char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v102 = *(void *)(v15 - 8);
  uint64_t v103 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v91 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v84 - v19;
  __chkstk_darwin(v18);
  Swift::String v22 = (char *)&v84 - v21;
  uint64_t v23 = sub_100007764(&qword_100725DF8);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v26 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  unint64_t v28 = (char *)&v84 - v27;
  uint64_t v29 = type metadata accessor for AnyCodableDictionary();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  Swift::String v33 = (char *)&v84 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v84 - v35;
  __chkstk_darwin(v34);
  unint64_t v38 = (char *)&v84 - v37;
  uint64_t v104 = a1;
  AnyCodable.dictValue.getter();
  uint64_t v106 = v30;
  unint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v39(v28, 1, v29) == 1)
  {
    sub_10000C6CC((uint64_t)v28, &qword_100725DF8);
    defaultLogger()();
    char v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      char v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "MobileDocumentReaderResponse AAMVADrivingPrivilege expected an AnyCodableDictionary representation, returning nil.", v42, 2u);
      swift_slowDealloc();
    }

    uint64_t v43 = type metadata accessor for AnyCodable();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v104, v43);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v22, v103);
    goto LABEL_11;
  }
  uint64_t v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v39;
  uint64_t v85 = v33;
  char v90 = v26;
  char v88 = v20;
  char v86 = v36;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v106 + 32);
  v44(v38, v28, v29);
  char v46 = v98;
  uint64_t v45 = v99;
  uint64_t v47 = v100;
  (*(void (**)(char *, void, uint64_t))(v99 + 104))(v98, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.domesticVehicleClass(_:), v100);
  uint64_t v48 = (void (*)(void, void))v101;
  uint64_t v89 = v38;
  sub_1004C2A34((uint64_t)v101);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  uint64_t v49 = type metadata accessor for AnyCodable();
  uint64_t v50 = *(void *)(v49 - 8);
  if ((*(unsigned int (**)(void (*)(void, void), uint64_t, uint64_t))(v50 + 48))(v48, 1, v49) == 1)
  {
    sub_10000C6CC((uint64_t)v48, &qword_100725DF0);
    uint64_t v51 = v106;
    uint64_t v52 = (uint64_t)v90;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v90, 1, 1, v29);
LABEL_8:
    sub_10000C6CC(v52, &qword_100725DF8);
    uint64_t v57 = v88;
    defaultLogger()();
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "MobileDocumentReaderResponse AAMVADrivingPrivilege missing domestic_vehicle_class, returning nil.", v60, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v104, v49);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v57, v103);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v89, v29);
    goto LABEL_11;
  }
  uint64_t v53 = (uint64_t)v90;
  AnyCodable.dictValue.getter();
  uint64_t v54 = v48;
  uint64_t v55 = *(uint64_t **)(v50 + 8);
  uint64_t v52 = v53;
  ((void (*)(void, uint64_t))v55)(v54, v49);
  int v56 = v87(v53, 1, v29);
  uint64_t v51 = v106;
  if (v56 == 1) {
    goto LABEL_8;
  }
  uint64_t v101 = v55;
  uint64_t v64 = v86;
  v44(v86, (char *)v52, v29);
  uint64_t v65 = (uint64_t)v85;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v85, v64, v29);
  uint64_t v66 = v95;
  sub_1004C2BA4(v65, v95);
  uint64_t v68 = v96;
  uint64_t v67 = v97;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v66, 1, v97) == 1)
  {
    sub_10000C6CC(v66, &qword_1007300A8);
    uint64_t v69 = v91;
    defaultLogger()();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.debug.getter();
    BOOL v72 = os_log_type_enabled(v70, v71);
    uint64_t v73 = v89;
    if (v72)
    {
      char v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "MobileDocumentReaderResponse AAMVADrivingPrivilege missing domestic_vehicle_class, returning nil.", v74, 2u);
      uint64_t v64 = v86;
      swift_slowDealloc();
    }

    ((void (*)(uint64_t, uint64_t))v101)(v104, v49);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v69, v103);
    uint64_t v75 = *(void (**)(char *, uint64_t))(v51 + 8);
    v75(v64, v29);
    v75(v73, v29);
    goto LABEL_11;
  }
  char v76 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v94, v66, v67);
  uint64_t v77 = v92;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v92, v76, v67);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v77, 0, 1, v67);
  char v78 = v89;
  sub_1004C3838();
  sub_1004C3EF8();
  uint64_t v79 = (uint64_t)v93;
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.init(vehicleClass:vehicleRestrictions:vehicleEndorsements:)();
  ((void (*)(uint64_t, uint64_t))v101)(v104, v49);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v94, v67);
  char v80 = *(void (**)(char *, uint64_t))(v51 + 8);
  v80(v86, v29);
  v80(v78, v29);
  uint64_t v81 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege();
  uint64_t v82 = *(void *)(v81 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v79, 1, v81))
  {
    sub_10000C6CC(v79, &qword_1007300A0);
LABEL_11:
    uint64_t v61 = v105;
    uint64_t v62 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 1, 1, v62);
  }
  uint64_t v83 = v105;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 32))(v105, v79, v81);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56))(v83, 0, 1, v81);
}

uint64_t sub_1004C2A34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = AnyCodableDictionary.value.getter();
  uint64_t v3 = ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.rawValue.getter();
  if (*(void *)(v2 + 16) && (unint64_t v5 = sub_100590548(v3, v4), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(v2 + 56);
    uint64_t v9 = type metadata accessor for AnyCodable();
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))(a1, v8 + *(void *)(v10 + 72) * v7, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
  }
  else
  {
    uint64_t v11 = type metadata accessor for AnyCodable();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1004C2BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v126 = a2;
  uint64_t v3 = sub_100007764(&qword_1007239B0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  char v116 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v110 = (char *)&v101 - v6;
  uint64_t v7 = sub_100007764(&qword_100725DE8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v118 = (uint64_t)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v117 = (uint64_t)&v101 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v101 - v13;
  __chkstk_darwin(v12);
  uint64_t v111 = (char *)&v101 - v15;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v124 = *(void *)(v16 - 8);
  uint64_t v125 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v119 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v101 - v19;
  uint64_t v21 = type metadata accessor for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v115 = (char *)&v101 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v113 = (char *)&v101 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v101 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v101 - v30;
  uint64_t v32 = sub_100007764(&qword_100725DF0);
  uint64_t v33 = __chkstk_darwin(v32 - 8);
  uint64_t v114 = (uint64_t)&v101 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v112 = (uint64_t)&v101 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  unint64_t v39 = (char *)&v101 - v38;
  __chkstk_darwin(v37);
  os_log_type_t v41 = (char *)&v101 - v40;
  char v123 = *(void (**)(char *, void, uint64_t))(v22 + 104);
  v123(v31, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.domesticVehicleClassCode(_:), v21);
  uint64_t v127 = a1;
  sub_1004C2A34((uint64_t)v41);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v42 = v22 + 8;
  uint64_t v121 = v43;
  uint64_t v122 = v21;
  v43(v31, v21);
  uint64_t v44 = type metadata accessor for AnyCodable();
  uint64_t v45 = *(void *)(v44 - 8);
  char v120 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  if (v120(v41, 1, v44) == 1)
  {
    sub_10000C6CC((uint64_t)v41, &qword_100725DF0);
LABEL_7:
    defaultLogger()();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v61, v62))
    {
      uint64_t v64 = v20;
      uint64_t v65 = v126;
      uint64_t v57 = v127;
      uint64_t v67 = v124;
      uint64_t v66 = v125;
      goto LABEL_11;
    }
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "MobileDocumentReaderResponse AAMVADrivingPrivilege missing domestic_vehicle_class_code, returning nil.", v63, 2u);
    uint64_t v64 = v20;
    uint64_t v65 = v126;
    uint64_t v57 = v127;
    uint64_t v67 = v124;
    uint64_t v66 = v125;
LABEL_9:
    swift_slowDealloc();
LABEL_11:

    uint64_t v68 = type metadata accessor for AnyCodableDictionary();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(v57, v68);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v66);
    uint64_t v69 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleClass();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v65, 1, 1, v69);
  }
  uint64_t v109 = v42;
  uint64_t v106 = v14;
  uint64_t v46 = v44;
  uint64_t v47 = v45;
  uint64_t v48 = AnyCodable.stringValue.getter();
  uint64_t v50 = v49;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v52 = v41;
  uint64_t v53 = v46;
  uint64_t v108 = v47 + 8;
  uint64_t v107 = v51;
  v51(v52, v46);
  if (!v50) {
    goto LABEL_7;
  }
  uint64_t v128 = v48;
  uint64_t v129 = v50;
  unint64_t v54 = sub_1000D5D70();
  Collection.nilIfEmpty.getter();
  swift_bridgeObjectRelease();
  if (!v131) {
    goto LABEL_7;
  }
  unint64_t v104 = v54;
  uint64_t v105 = v131;
  uint64_t v55 = v130;
  uint64_t v56 = v122;
  v123(v29, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.domesticVehicleClassDescription(_:), v122);
  uint64_t v57 = v127;
  sub_1004C2A34((uint64_t)v39);
  uint64_t v58 = v29;
  os_log_type_t v59 = v121;
  v121(v58, v56);
  uint64_t v60 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v120;
  if (v120(v39, 1, v53) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000C6CC((uint64_t)v39, &qword_100725DF0);
LABEL_17:
    uint64_t v67 = v124;
    uint64_t v66 = v125;
    uint64_t v64 = v119;
    defaultLogger()();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v61, v82))
    {
      uint64_t v65 = v126;
      goto LABEL_11;
    }
    uint64_t v83 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v83 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v82, "MobileDocumentReaderResponse AAMVADrivingPrivilege missing domestic_vehicle_class_description, returning nil.", v83, 2u);
    uint64_t v65 = v126;
    goto LABEL_9;
  }
  uint64_t v103 = v55;
  uint64_t v71 = AnyCodable.stringValue.getter();
  uint64_t v73 = v72;
  uint64_t v102 = v53;
  v107(v39, v53);
  if (!v73 || (v128 = v71, uint64_t v129 = v73, Collection.nilIfEmpty.getter(), swift_bridgeObjectRelease(), !v131))
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v125 = v131;
  uint64_t v124 = v130;
  char v74 = v113;
  v123(v113, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.issueDate(_:), v56);
  uint64_t v75 = v112;
  sub_1004C2A34(v112);
  char v76 = v74;
  uint64_t v77 = v75;
  v59(v76, v56);
  uint64_t v78 = v102;
  if (v60(v75, 1, v102) == 1)
  {
    sub_10000C6CC(v75, &qword_100725DF0);
    uint64_t v79 = type metadata accessor for Date();
    uint64_t v80 = (uint64_t)v110;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v110, 1, 1, v79);
    uint64_t v81 = (uint64_t)v111;
LABEL_21:
    sub_10000C6CC(v80, &qword_1007239B0);
    uint64_t v88 = type metadata accessor for DateComponents();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v81, 1, 1, v88);
    goto LABEL_23;
  }
  uint64_t v84 = v110;
  AnyCodable.dateValue.getter();
  uint64_t v80 = (uint64_t)v84;
  v107((char *)v77, v78);
  uint64_t v85 = type metadata accessor for Date();
  uint64_t v86 = *(void *)(v85 - 8);
  int v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v80, 1, v85);
  uint64_t v81 = (uint64_t)v111;
  if (v87 == 1) {
    goto LABEL_21;
  }
  Date.utcDayRepresentation.getter();
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v80, v85);
LABEL_23:
  uint64_t v89 = v115;
  uint64_t v90 = (uint64_t)v116;
  uint64_t v91 = v122;
  v123(v115, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.expiryDate(_:), v122);
  uint64_t v92 = v114;
  sub_1004C2A34(v114);
  v121(v89, v91);
  if (v120((char *)v92, 1, v78) == 1)
  {
    sub_10000C6CC(v92, &qword_100725DF0);
    uint64_t v93 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v90, 1, 1, v93);
  }
  else
  {
    AnyCodable.dateValue.getter();
    v107((char *)v92, v78);
    uint64_t v94 = type metadata accessor for Date();
    uint64_t v95 = *(void *)(v94 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v90, 1, v94) != 1)
    {
      uint64_t v97 = (uint64_t)v106;
      Date.utcDayRepresentation.getter();
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v90, v94);
      goto LABEL_28;
    }
  }
  sub_10000C6CC(v90, &qword_1007239B0);
  uint64_t v96 = type metadata accessor for DateComponents();
  uint64_t v97 = (uint64_t)v106;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v106, 1, 1, v96);
LABEL_28:
  sub_1001793D8(v81, v117);
  sub_1001793D8(v97, v118);
  uint64_t v98 = v126;
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleClass.init(code:description:issueDate:expirationDate:)();
  uint64_t v99 = type metadata accessor for AnyCodableDictionary();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v57, v99);
  sub_10000C6CC(v97, &qword_100725DE8);
  sub_10000C6CC(v81, &qword_100725DE8);
  uint64_t v100 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleClass();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v98, 0, 1, v100);
}

void *sub_1004C3838()
{
  uint64_t v0 = sub_100007764(&qword_1007300B8);
  __chkstk_darwin(v0 - 8);
  unint64_t v54 = (char *)v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleRestriction();
  uint64_t v55 = *(void *)(v53 - 8);
  uint64_t v2 = __chkstk_darwin(v53);
  os_log_type_t v62 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v52 = (char *)v47 - v4;
  uint64_t v5 = type metadata accessor for AnyCodable();
  uint64_t v58 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v61 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v63 = (char *)v47 - v8;
  uint64_t v9 = type metadata accessor for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100725DF0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100007764(&qword_100725DE0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnyCodableArray();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.domesticVehicleRestrictions(_:), v9);
  sub_1004C2A34((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v23 = v58;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v15, 1, v5) == 1)
  {
    sub_10000C6CC((uint64_t)v15, &qword_100725DF0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
LABEL_4:
    sub_10000C6CC((uint64_t)v18, &qword_100725DE0);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v24 = v55;
  uint64_t v50 = v22;
  AnyCodable.arrayValue.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v23 + 8);
  v25(v15, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
    goto LABEL_4;
  }
  os_log_type_t v59 = v25;
  uint64_t v60 = v23 + 8;
  uint64_t v27 = v50;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v50, v18, v19);
  uint64_t v28 = AnyCodableArray.value.getter();
  uint64_t v29 = *(void *)(v28 + 16);
  if (v29)
  {
    uint64_t v48 = v20;
    uint64_t v49 = v19;
    uint64_t v31 = v23 + 16;
    uint64_t v30 = *(void *)(v23 + 16);
    unint64_t v32 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v47[1] = v28;
    unint64_t v33 = v28 + v32;
    uint64_t v57 = *(void *)(v23 + 72);
    uint64_t v58 = v30;
    uint64_t v56 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    uint64_t v34 = (void (**)(void))(v24 + 32);
    uint64_t v26 = _swiftEmptyArrayStorage;
    uint64_t v35 = v53;
    uint64_t v36 = (uint64_t)v54;
    uint64_t v37 = v63;
    uint64_t v51 = v5;
    do
    {
      uint64_t v38 = (void (*)(char *, char *, uint64_t))v58;
      ((void (*)(char *, unint64_t, uint64_t))v58)(v37, v33, v5);
      unint64_t v39 = v61;
      v38(v61, v63, v5);
      uint64_t v40 = (uint64_t)v39;
      uint64_t v37 = v63;
      sub_1004C45B8(v40, v36);
      v59(v37, v5);
      if ((*v56)(v36, 1, v35) == 1)
      {
        sub_10000C6CC(v36, &qword_1007300B8);
      }
      else
      {
        uint64_t v41 = v31;
        uint64_t v42 = *v34;
        uint64_t v43 = v52;
        (*v34)();
        ((void (*)(char *, char *, uint64_t))v42)(v62, v43, v35);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v26 = (void *)sub_100110CA8(0, v26[2] + 1, 1, (unint64_t)v26);
        }
        unint64_t v45 = v26[2];
        unint64_t v44 = v26[3];
        if (v45 >= v44 >> 1) {
          uint64_t v26 = (void *)sub_100110CA8(v44 > 1, v45 + 1, 1, (unint64_t)v26);
        }
        void v26[2] = v45 + 1;
        uint64_t v35 = v53;
        ((void (*)(char *, char *, uint64_t))v42)((char *)v26+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v45, v62, v53);
        uint64_t v36 = (uint64_t)v54;
        uint64_t v31 = v41;
        uint64_t v5 = v51;
      }
      v33 += v57;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    uint64_t v20 = v48;
    uint64_t v19 = v49;
    uint64_t v27 = v50;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
  return v26;
}

void *sub_1004C3EF8()
{
  uint64_t v0 = sub_100007764(&qword_1007300B0);
  __chkstk_darwin(v0 - 8);
  unint64_t v54 = (char *)v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleEndorsement();
  uint64_t v55 = *(void *)(v53 - 8);
  uint64_t v2 = __chkstk_darwin(v53);
  os_log_type_t v62 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v52 = (char *)v47 - v4;
  uint64_t v5 = type metadata accessor for AnyCodable();
  uint64_t v58 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v61 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v63 = (char *)v47 - v8;
  uint64_t v9 = type metadata accessor for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100725DF0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100007764(&qword_100725DE0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnyCodableArray();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.domesticVehicleEndorsements(_:), v9);
  sub_1004C2A34((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v23 = v58;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v15, 1, v5) == 1)
  {
    sub_10000C6CC((uint64_t)v15, &qword_100725DF0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
LABEL_4:
    sub_10000C6CC((uint64_t)v18, &qword_100725DE0);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v24 = v55;
  uint64_t v50 = v22;
  AnyCodable.arrayValue.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v23 + 8);
  v25(v15, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
    goto LABEL_4;
  }
  os_log_type_t v59 = v25;
  uint64_t v60 = v23 + 8;
  uint64_t v27 = v50;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v50, v18, v19);
  uint64_t v28 = AnyCodableArray.value.getter();
  uint64_t v29 = *(void *)(v28 + 16);
  if (v29)
  {
    uint64_t v48 = v20;
    uint64_t v49 = v19;
    uint64_t v31 = v23 + 16;
    uint64_t v30 = *(void *)(v23 + 16);
    unint64_t v32 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v47[1] = v28;
    unint64_t v33 = v28 + v32;
    uint64_t v57 = *(void *)(v23 + 72);
    uint64_t v58 = v30;
    uint64_t v56 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    uint64_t v34 = (void (**)(void))(v24 + 32);
    uint64_t v26 = _swiftEmptyArrayStorage;
    uint64_t v35 = v53;
    uint64_t v36 = (uint64_t)v54;
    uint64_t v37 = v63;
    uint64_t v51 = v5;
    do
    {
      uint64_t v38 = (void (*)(char *, char *, uint64_t))v58;
      ((void (*)(char *, unint64_t, uint64_t))v58)(v37, v33, v5);
      unint64_t v39 = v61;
      v38(v61, v63, v5);
      uint64_t v40 = (uint64_t)v39;
      uint64_t v37 = v63;
      sub_1004C4D54(v40, v36);
      v59(v37, v5);
      if ((*v56)(v36, 1, v35) == 1)
      {
        sub_10000C6CC(v36, &qword_1007300B0);
      }
      else
      {
        uint64_t v41 = v31;
        uint64_t v42 = *v34;
        uint64_t v43 = v52;
        (*v34)();
        ((void (*)(char *, char *, uint64_t))v42)(v62, v43, v35);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v26 = (void *)sub_100110CDC(0, v26[2] + 1, 1, (unint64_t)v26);
        }
        unint64_t v45 = v26[2];
        unint64_t v44 = v26[3];
        if (v45 >= v44 >> 1) {
          uint64_t v26 = (void *)sub_100110CDC(v44 > 1, v45 + 1, 1, (unint64_t)v26);
        }
        void v26[2] = v45 + 1;
        uint64_t v35 = v53;
        ((void (*)(char *, char *, uint64_t))v42)((char *)v26+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v45, v62, v53);
        uint64_t v36 = (uint64_t)v54;
        uint64_t v31 = v41;
        uint64_t v5 = v51;
      }
      v33 += v57;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    uint64_t v20 = v48;
    uint64_t v19 = v49;
    uint64_t v27 = v50;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
  return v26;
}

uint64_t sub_1004C45B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v3 = type metadata accessor for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v65 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v57 - v7;
  uint64_t v9 = sub_100007764(&qword_100725DF0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v66 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v57 - v12;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v67 = *(void *)(v14 - 8);
  uint64_t v68 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v64 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v57 - v17;
  uint64_t v19 = sub_100007764(&qword_100725DF8);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for AnyCodableDictionary();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = a1;
  AnyCodable.dictValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    uint64_t v26 = v70;
    sub_10000C6CC((uint64_t)v21, &qword_100725DF8);
    defaultLogger()();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "MobileDocumentReaderResponse AAMVADrivingPrivilege VehicleRestriction expected an AnyCodableDictionary representation, returning nil.", v29, 2u);
      swift_slowDealloc();
    }

    uint64_t v30 = type metadata accessor for AnyCodable();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v69, v30);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v18, v68);
  }
  else
  {
    uint64_t v59 = v23;
    uint64_t v60 = v22;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
    uint64_t v58 = *(void (**)(char *, void, uint64_t))(v4 + 104);
    v58(v8, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.domesticVehicleRestrictionCode(_:), v3);
    sub_1004C2A34((uint64_t)v13);
    uint64_t v57 = *(void (**)(char *, uint64_t))(v4 + 8);
    v57(v8, v3);
    uint64_t v31 = type metadata accessor for AnyCodable();
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
    int v33 = v61(v13, 1, v31);
    uint64_t v62 = v31;
    uint64_t v63 = v32;
    if (v33 == 1)
    {
      sub_10000C6CC((uint64_t)v13, &qword_100725DF0);
    }
    else
    {
      uint64_t v34 = AnyCodable.stringValue.getter();
      uint64_t v36 = v35;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v31);
      if (v36)
      {
        uint64_t v71 = v34;
        uint64_t v72 = v36;
        sub_1000D5D70();
        Collection.nilIfEmpty.getter();
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v37 = v25;
    uint64_t v38 = v57;
    unint64_t v39 = v65;
    v58(v65, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.domesticVehicleRestrictionDescription(_:), v3);
    uint64_t v40 = v66;
    sub_1004C2A34(v66);
    v38(v39, v3);
    uint64_t v41 = v62;
    if (v61((char *)v40, 1, v62) == 1)
    {
      swift_bridgeObjectRelease();
      sub_10000C6CC(v40, &qword_100725DF0);
      uint64_t v26 = v70;
    }
    else
    {
      uint64_t v42 = AnyCodable.stringValue.getter();
      uint64_t v43 = v40;
      uint64_t v45 = v44;
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      v46(v43, v41);
      uint64_t v26 = v70;
      if (v45)
      {
        uint64_t v71 = v42;
        uint64_t v72 = v45;
        sub_1000D5D70();
        Collection.nilIfEmpty.getter();
        swift_bridgeObjectRelease();
        if (v73)
        {
          MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleRestriction.init(code:description:)();
          v46(v69, v41);
          (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v60);
          uint64_t v47 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleRestriction();
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v26, 0, 1, v47);
        }
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v50 = v68;
    uint64_t v49 = v69;
    uint64_t v51 = v67;
    uint64_t v52 = v64;
    defaultLogger()();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "MobileDocumentReaderResponse AAMVADrivingPrivilege VehicleRestriction missing domestic_vehicle_restriction_description, returning nil.", v55, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v49, v41);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v60);
  }
  uint64_t v56 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleRestriction();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v26, 1, 1, v56);
}

uint64_t sub_1004C4D54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v3 = type metadata accessor for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v65 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v57 - v7;
  uint64_t v9 = sub_100007764(&qword_100725DF0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v66 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v57 - v12;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v67 = *(void *)(v14 - 8);
  uint64_t v68 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v64 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v57 - v17;
  uint64_t v19 = sub_100007764(&qword_100725DF8);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for AnyCodableDictionary();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = a1;
  AnyCodable.dictValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    uint64_t v26 = v70;
    sub_10000C6CC((uint64_t)v21, &qword_100725DF8);
    defaultLogger()();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "MobileDocumentReaderResponse AAMVADrivingPrivilege VehicleEndorsement expected an AnyCodableDictionary representation, returning nil.", v29, 2u);
      swift_slowDealloc();
    }

    uint64_t v30 = type metadata accessor for AnyCodable();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v69, v30);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v18, v68);
  }
  else
  {
    uint64_t v59 = v23;
    uint64_t v60 = v22;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
    uint64_t v58 = *(void (**)(char *, void, uint64_t))(v4 + 104);
    v58(v8, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.domesticVehicleEndorsementCode(_:), v3);
    sub_1004C2A34((uint64_t)v13);
    uint64_t v57 = *(void (**)(char *, uint64_t))(v4 + 8);
    v57(v8, v3);
    uint64_t v31 = type metadata accessor for AnyCodable();
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
    int v33 = v61(v13, 1, v31);
    uint64_t v62 = v31;
    uint64_t v63 = v32;
    if (v33 == 1)
    {
      sub_10000C6CC((uint64_t)v13, &qword_100725DF0);
    }
    else
    {
      uint64_t v34 = AnyCodable.stringValue.getter();
      uint64_t v36 = v35;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v31);
      if (v36)
      {
        uint64_t v71 = v34;
        uint64_t v72 = v36;
        sub_1000D5D70();
        Collection.nilIfEmpty.getter();
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v37 = v25;
    uint64_t v38 = v57;
    unint64_t v39 = v65;
    v58(v65, enum case for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.domesticVehicleEndorsementDescription(_:), v3);
    uint64_t v40 = v66;
    sub_1004C2A34(v66);
    v38(v39, v3);
    uint64_t v41 = v62;
    if (v61((char *)v40, 1, v62) == 1)
    {
      swift_bridgeObjectRelease();
      sub_10000C6CC(v40, &qword_100725DF0);
      uint64_t v26 = v70;
    }
    else
    {
      uint64_t v42 = AnyCodable.stringValue.getter();
      uint64_t v43 = v40;
      uint64_t v45 = v44;
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      v46(v43, v41);
      uint64_t v26 = v70;
      if (v45)
      {
        uint64_t v71 = v42;
        uint64_t v72 = v45;
        sub_1000D5D70();
        Collection.nilIfEmpty.getter();
        swift_bridgeObjectRelease();
        if (v73)
        {
          MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleEndorsement.init(code:description:)();
          v46(v69, v41);
          (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v60);
          uint64_t v47 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleEndorsement();
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v26, 0, 1, v47);
        }
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v50 = v68;
    uint64_t v49 = v69;
    uint64_t v51 = v67;
    uint64_t v52 = v64;
    defaultLogger()();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "MobileDocumentReaderResponse AAMVADrivingPrivilege VehicleEndorsement missing domestic_vehicle_endorsement_description, returning nil.", v55, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v49, v41);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v60);
  }
  uint64_t v56 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleEndorsement();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v26, 1, 1, v56);
}

uint64_t sub_1004C54F0()
{
  Swift::Int v0 = sub_1004C5B00((uint64_t)&off_1006F22E0);
  uint64_t result = swift_arrayDestroy();
  qword_100760798 = v0;
  return result;
}

void sub_1004C553C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a3 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a3 + 56);
  int64_t v24 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (v5)
  {
    unint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v8 = v7 | (v6 << 6);
LABEL_21:
    uint64_t v12 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v8);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    sub_100007764(&qword_100724858);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100614990;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v16;
    *(void *)(inited + 72) = &type metadata for Bool;
    *(unsigned char *)(inited + 48) = 1;
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 88) = v17;
    *(void *)(inited + 120) = &type metadata for String;
    *(void *)(inited + 96) = v13;
    *(void *)(inited + 104) = v14;
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 136) = v18;
    *(void *)(inited + 168) = &type metadata for Bool;
    *(unsigned char *)(inited + 144) = 1;
    swift_bridgeObjectRetain_n();
    sub_10015C3CC(inited);
    CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
    CFDictionaryRef v20 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v21 = CGImageSourceCreateWithData(isa, v20);

    if (v21)
    {
      CGImageSourceStatus Status = CGImageSourceGetStatus(v21);
      swift_bridgeObjectRelease();

      if (Status == kCGImageStatusComplete)
      {
LABEL_23:
        swift_release();
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  int64_t v9 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v9 >= v24) {
    goto LABEL_23;
  }
  unint64_t v10 = *(void *)(v23 + 8 * v9);
  ++v6;
  if (v10) {
    goto LABEL_20;
  }
  int64_t v6 = v9 + 1;
  if (v9 + 1 >= v24) {
    goto LABEL_23;
  }
  unint64_t v10 = *(void *)(v23 + 8 * v6);
  if (v10) {
    goto LABEL_20;
  }
  int64_t v6 = v9 + 2;
  if (v9 + 2 >= v24) {
    goto LABEL_23;
  }
  unint64_t v10 = *(void *)(v23 + 8 * v6);
  if (v10)
  {
LABEL_20:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
    goto LABEL_21;
  }
  int64_t v11 = v9 + 3;
  if (v11 >= v24) {
    goto LABEL_23;
  }
  unint64_t v10 = *(void *)(v23 + 8 * v11);
  if (v10)
  {
    int64_t v6 = v11;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v24) {
      goto LABEL_23;
    }
    unint64_t v10 = *(void *)(v23 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
}

void *sub_1004C5810(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  int64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100007764(&qword_1007300C0);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1004C5CA4(&qword_1007300C8);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1004C5CA4(&qword_1007300D0);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          int64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

Swift::Int sub_1004C5B00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100007764(&qword_100734040);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      int64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          unint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1004C5CA4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Calendar.Component();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1004C5CE8(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100007764(&qword_1007300D8);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = (char *)(v3 + 7);
  uint64_t v42 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v10 = __OFADD__(v8++, 1);
      if (v10)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v11 = v9;
      Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
      uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
      unint64_t v14 = v12 & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
      uint64_t v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        type metadata accessor for StoredMobileDocumentReaderSigningKey();
        id v18 = *(id *)(v3[6] + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v7[8 * v15] = v17 | v16;
      *(void *)(v3[6] + 8 * v14) = v11;
      uint64_t v23 = v3[2];
      BOOL v10 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (v10) {
        goto LABEL_37;
      }
      v3[2] = v24;
LABEL_12:
      if (v8 == v42) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  uint64_t v41 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v41)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(a1 + 32 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      type metadata accessor for StoredMobileDocumentReaderSigningKey();
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35) {
        goto LABEL_23;
      }
      uint64_t v36 = ~v29;
      unint64_t v30 = (v30 + 1) & v36;
      unint64_t v31 = v30 >> 6;
      uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
      uint64_t v33 = 1 << v30;
      if ((v32 & (1 << v30)) != 0)
      {
        while (1)
        {
          id v37 = *(id *)(v3[6] + 8 * v30);
          char v38 = static NSObject.== infix(_:_:)();

          if (v38) {
            break;
          }
          unint64_t v30 = (v30 + 1) & v36;
          unint64_t v31 = v30 >> 6;
          uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
          uint64_t v33 = 1 << v30;
          if ((v32 & (1 << v30)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v5 = v42;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v5 = v42;
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_24:
    if (++v25 == v5) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_1004C6040()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_1004C6110, v0, 0);
}

uint64_t sub_1004C6110()
{
  uint64_t v27 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v0 + 24) = sub_100110D58(0x656C62616E457369, 0xE900000000000064, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderBluetoothManager %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v7(v3, v4);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v10 = *(void *)(v0 + 48);

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  *(void *)(v0 + 72) = v7;
  uint64_t v11 = self;
  *(void *)(v0 + 80) = v11;
  if ([v11 isAvailable])
  {
    if ([*(id *)(v0 + 80) powerState] == (id)1)
    {
      Swift::Int v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 96) = v12;
      void *v12 = v0;
      v12[1] = sub_1004C6978;
      return sub_1004C7BE8();
    }
    else
    {
      id v15 = [*(id *)(v0 + 80) powerState];
      defaultLogger()();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      BOOL v18 = os_log_type_enabled(v16, v17);
      char v19 = *(void (**)(uint64_t, uint64_t))(v0 + 72);
      uint64_t v20 = *(void *)(v0 + 56);
      uint64_t v21 = *(void *)(v0 + 40);
      if (v18)
      {
        BOOL v24 = v15 == (id)2;
        id v25 = v15;
        uint64_t v22 = swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136315394;
        *(void *)(v0 + 16) = sub_100110D58(0x656C62616E457369, 0xE900000000000064, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v22 + 12) = 1024;
        *(_DWORD *)(v0 + 104) = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "MobileDocumentReaderBluetoothManager %s Bluetooth on: %{BOOL}d", (uint8_t *)v22, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v15 = v25;
        swift_slowDealloc();
      }

      v19(v20, v21);
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v23 = *(uint64_t (**)(BOOL))(v0 + 8);
      return v23(v15 == (id)2);
    }
  }
  else
  {
    unint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v14;
    *unint64_t v14 = v0;
    v14[1] = sub_1004C65B4;
    return sub_1004C6CA8();
  }
}

uint64_t sub_1004C65B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_1004C66C4, v1, 0);
}

uint64_t sub_1004C66C4()
{
  uint64_t v14 = v0;
  if ([*(id *)(v0 + 80) powerState] == (id)1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v1;
    void *v1 = v0;
    v1[1] = sub_1004C6978;
    return sub_1004C7BE8();
  }
  else
  {
    id v3 = [*(id *)(v0 + 80) powerState];
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v9 = *(void *)(v0 + 40);
    if (v6)
    {
      Swift::Int v12 = *(void (**)(uint64_t, uint64_t))(v0 + 72);
      uint64_t v10 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      *(void *)(v0 + 16) = sub_100110D58(0x656C62616E457369, 0xE900000000000064, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 1024;
      *(_DWORD *)(v0 + 104) = v3 == (id)2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderBluetoothManager %s Bluetooth on: %{BOOL}d", (uint8_t *)v10, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v12(v8, v9);
    }
    else
    {

      v7(v8, v9);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(BOOL))(v0 + 8);
    return v11(v3 == (id)2);
  }
}

uint64_t sub_1004C6978()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_1004C6A88, v1, 0);
}

uint64_t sub_1004C6A88()
{
  uint64_t v14 = v0;
  id v1 = [*(id *)(v0 + 80) powerState];
  defaultLogger()();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v11 = *(void *)(v0 + 56);
    Swift::Int v12 = *(void (**)(uint64_t, uint64_t))(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v0 + 16) = sub_100110D58(0x656C62616E457369, 0xE900000000000064, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v0 + 104) = v1 == (id)2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MobileDocumentReaderBluetoothManager %s Bluetooth on: %{BOOL}d", (uint8_t *)v5, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v12(v11, v4);
  }
  else
  {
    BOOL v6 = *(void (**)(uint64_t, uint64_t))(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = *(void *)(v0 + 40);

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v9(v1 == (id)2);
}

uint64_t sub_1004C6CA8()
{
  sub_100007764(&qword_1007301B0);
  v1[9] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Notification();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  v1[13] = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v1[14] = swift_task_alloc();
  uint64_t v3 = sub_100007764(&qword_1007301B8);
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  uint64_t v4 = sub_100007764(&qword_1007301C0);
  v1[18] = v4;
  v1[19] = *(void *)(v4 - 8);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v1[22] = v5;
  v1[23] = *(void *)(v5 - 8);
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  return _swift_task_switch(sub_1004C6F00, v0, 0);
}

uint64_t sub_1004C6F00()
{
  uint64_t v11 = v0;
  defaultLogger()();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[25];
    uint64_t v4 = v0[22];
    uint64_t v5 = v0[23];
    BOOL v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)BOOL v6 = 136315138;
    v0[8] = sub_100110D58(0xD00000000000001DLL, 0x80000001006506C0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderBluetoothManager %s awaiting available state", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v3 = v0[25];
    uint64_t v4 = v0[22];
    uint64_t v5 = v0[23];
  }

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v7(v3, v4);
  v0[26] = v5 + 8;
  v0[27] = v7;
  uint64_t v8 = self;
  v0[28] = v8;
  v0[29] = [v8 defaultCenter];
  v0[30] = @"BluetoothAvailabilityChangedNotification";
  return _swift_task_switch(sub_1004C70E8, 0, 0);
}

uint64_t sub_1004C70E8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  id v4 = [*(id *)(v0 + 224) defaultCenter];
  uint64_t v5 = NSNotificationCenter.notifications(named:object:)();

  *(void *)(v0 + 48) = v5;
  type metadata accessor for NSNotificationCenter.Notifications();
  sub_1004C8C3C(&qword_1007301D0, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications);
  AsyncMapSequence.init(_:transform:)();
  AsyncMapSequence.base.getter();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  *(void *)(v0 + 248) = *(void *)(v0 + 216);
  return _swift_task_switch(sub_1004C72B8, 0, 0);
}

uint64_t sub_1004C72B8()
{
  v0[32] = AsyncMapSequence.Iterator.baseIterator.modify();
  sub_1004C8C3C(&qword_1007301D8, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[33] = v1;
  void *v1 = v0;
  v1[1] = sub_1004C73B0;
  uint64_t v2 = v0[9];
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v2, 0, 0);
}

uint64_t sub_1004C73B0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1004C76C8;
  }
  else
  {
    (*(void (**)(void))(v2 + 256))();
    uint64_t v3 = sub_1004C74D8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004C74D8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_1004C8C84(v3);
    return _swift_task_switch(sub_1004C76E0, 0, 0);
  }
  else
  {
    uint64_t v5 = v0[20];
    uint64_t v4 = v0[21];
    uint64_t v6 = v0[18];
    uint64_t v7 = v0[19];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[12], v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4, v6);
    uint64_t v8 = (int *)AsyncMapSequence.Iterator.transform.getter();
    v0[34] = v9;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v0[35] = v10;
    v10(v5, v6);
    uint64_t v14 = (int *)((char *)v8 + *v8);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[36] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1004C77D0;
    uint64_t v12 = v0[12];
    return ((uint64_t (*)(void *, uint64_t))v14)(v0 + 37, v12);
  }
}

uint64_t sub_1004C76C8()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t sub_1004C76E0()
{
  uint64_t v1 = (void *)v0[29];
  (*(void (**)(void, void))(v0[19] + 8))(v0[21], v0[18]);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1004C77D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1004C7944, 0, 0);
}

uint64_t sub_1004C7944()
{
  return _swift_task_switch(sub_1004C7960, 0, 0);
}

uint64_t sub_1004C7960()
{
  uint64_t v15 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 176);
  if (v3)
  {
    uint64_t v6 = (uint64_t *)(v0 + 216);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v8 + 4) = sub_100110D58(0xD00000000000001DLL, 0x80000001006506C0, &v14);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderRadioManager %s availableStateDidChange", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v7(v4, v5);
  }
  else
  {
    uint64_t v6 = (uint64_t *)(v0 + 248);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 248);

    v9(v4, v5);
  }
  uint64_t v10 = *v6;
  if ([self isAvailable])
  {
    uint64_t v11 = *(void **)(v0 + 232);
    (*(void (**)(void, void))(v0 + 280))(*(void *)(v0 + 168), *(void *)(v0 + 144));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    *(void *)(v0 + 248) = v10;
    return _swift_task_switch(sub_1004C72B8, 0, 0);
  }
}

uint64_t sub_1004C7BE8()
{
  sub_100007764(&qword_1007301B0);
  v1[9] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Notification();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  v1[13] = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v1[14] = swift_task_alloc();
  uint64_t v3 = sub_100007764(&qword_1007301B8);
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  uint64_t v4 = sub_100007764(&qword_1007301C0);
  v1[18] = v4;
  v1[19] = *(void *)(v4 - 8);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v1[22] = v5;
  v1[23] = *(void *)(v5 - 8);
  v1[24] = swift_task_alloc();
  return _swift_task_switch(sub_1004C7E30, v0, 0);
}

uint64_t sub_1004C7E30()
{
  uint64_t v13 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[23];
    uint64_t v3 = v0[24];
    uint64_t v5 = v0[22];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[8] = sub_100110D58(0xD00000000000001BLL, 0x80000001006506A0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderBluetoothManager %s awaiting power state", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    uint64_t v8 = v0[23];
    uint64_t v7 = v0[24];
    uint64_t v9 = v0[22];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  uint64_t v10 = self;
  v0[25] = v10;
  v0[26] = [v10 defaultCenter];
  v0[27] = @"BluetoothPowerChangedNotification";
  return _swift_task_switch(sub_1004C8030, 0, 0);
}

uint64_t sub_1004C8030()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  id v4 = [*(id *)(v0 + 200) defaultCenter];
  uint64_t v5 = NSNotificationCenter.notifications(named:object:)();

  *(void *)(v0 + 48) = v5;
  type metadata accessor for NSNotificationCenter.Notifications();
  sub_1004C8C3C(&qword_1007301D0, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications);
  AsyncMapSequence.init(_:transform:)();
  AsyncMapSequence.base.getter();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  return _swift_task_switch(sub_1004C81F8, 0, 0);
}

uint64_t sub_1004C81F8()
{
  v0[28] = AsyncMapSequence.Iterator.baseIterator.modify();
  sub_1004C8C3C(&qword_1007301D8, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[29] = v1;
  void *v1 = v0;
  v1[1] = sub_1004C82F0;
  uint64_t v2 = v0[9];
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v2, 0, 0);
}

uint64_t sub_1004C82F0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1004C8608;
  }
  else
  {
    (*(void (**)(void))(v2 + 224))();
    uint64_t v3 = sub_1004C8418;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004C8418()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_1004C8C84(v3);
    return _swift_task_switch(sub_1004C8620, 0, 0);
  }
  else
  {
    uint64_t v5 = v0[20];
    uint64_t v4 = v0[21];
    uint64_t v6 = v0[18];
    uint64_t v7 = v0[19];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[12], v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4, v6);
    uint64_t v8 = (int *)AsyncMapSequence.Iterator.transform.getter();
    v0[30] = v9;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v0[31] = v10;
    v10(v5, v6);
    uint64_t v14 = (int *)((char *)v8 + *v8);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[32] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1004C8700;
    uint64_t v12 = v0[12];
    return ((uint64_t (*)(void *, uint64_t))v14)(v0 + 33, v12);
  }
}

uint64_t sub_1004C8608()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t sub_1004C8620()
{
  uint64_t v1 = (void *)v0[26];
  (*(void (**)(void, void))(v0[19] + 8))(v0[21], v0[18]);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1004C8700()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1004C8874, 0, 0);
}

uint64_t sub_1004C8874()
{
  return _swift_task_switch(sub_1004C8890, 0, 0);
}

uint64_t sub_1004C8890()
{
  if (sub_1004C89C0())
  {
    uint64_t v1 = *(void **)(v0 + 208);
    (*(void (**)(void, void))(v0 + 248))(*(void *)(v0 + 168), *(void *)(v0 + 144));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    return _swift_task_switch(sub_1004C81F8, 0, 0);
  }
}

BOOL sub_1004C89C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = sub_100110D58(0xD00000000000001BLL, 0x80000001006506A0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderBluetoothManager %s powerStateDidChange", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return [self powerState] != (id)1;
}

uint64_t sub_1004C8BB4()
{
  swift_defaultActor_destroy();

  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for MobileDocumentReaderBluetoothManager()
{
  return self;
}

uint64_t sub_1004C8C08()
{
  return sub_1004C8CE4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1004C8C3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004C8C84(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_1007301B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004C8CE4(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1004C8CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v148 = a2;
  uint64_t v150 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v150 - 8);
  uint64_t v3 = __chkstk_darwin(v150);
  uint64_t v149 = (char *)&v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v133 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v145 = (char *)&v133 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v144 = (char *)&v133 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  char v141 = (char *)&v133 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v142 = (char *)&v133 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v143 = (char *)&v133 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v140 = (char *)&v133 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v139 = (char *)&v133 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v138 = (char *)&v133 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  char v136 = (char *)&v133 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v135 = (char *)&v133 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v134 = (char *)&v133 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v137 = (char *)&v133 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  char v146 = (char *)&v133 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v133 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v133 - v38;
  __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v133 - v40;
  defaultLogger()();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Starting handleProvisioningCompletion", v44, 2u);
    swift_slowDealloc();
  }

  uint64_t v45 = *(void (**)(char *))(v2 + 8);
  uint64_t v46 = v150;
  v45(v41);
  defaultLogger()();
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unarchiving Provisioning Receipt Data", v49, 2u);
    swift_slowDealloc();
  }

  uint64_t v50 = v46;
  ((void (*)(char *, uint64_t))v45)(v39, v46);
  sub_100025C28(0, &qword_100726CB0);
  sub_100025C28(0, &qword_1007302E0);
  uint64_t v51 = (char *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (!v51)
  {
    defaultLogger()();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "the unarchived data object is not of type PKPendingProvisioningReceipt", v71, 2u);
      swift_slowDealloc();
    }

    goto LABEL_22;
  }
  defaultLogger()();
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    os_log_type_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Did receive the provisioning receipt. Checking for the receipt type to perform necessary actions", v54, 2u);
    uint64_t v50 = v46;
    swift_slowDealloc();
  }

  ((void (*)(char *, uint64_t))v45)(v36, v50);
  uint64_t v55 = (char *)[v51 pendingProvisioning];
  self;
  uint64_t v56 = (void *)swift_dynamicCastObjCClass();
  if (!v56)
  {

    uint64_t v7 = v145;
    defaultLogger()();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v72, v73))
    {
      char v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Receipt's pendingProvisioning is not of type PKPendingIdentityCredential. Cannot perform Post Provisioning Cleanup", v74, 2u);
      swift_slowDealloc();
    }

LABEL_22:
    uint64_t v75 = v7;
LABEL_35:
    ((void (*)(char *, uint64_t))v45)(v75, v50);
    return;
  }
  id v57 = [v56 credentialIdentifier];
  if (!v57)
  {
    char v76 = v144;
    defaultLogger()();
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v77, v78))
    {
LABEL_34:

      uint64_t v75 = v76;
      goto LABEL_35;
    }
    uint64_t v79 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v79 = 0;
    uint64_t v80 = "Credential Identifier doesn't exist in the pending provisioning Cannot perform Post Provisioning Cleanup";
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v77, v78, v80, v79, 2u);
    swift_slowDealloc();
    goto LABEL_34;
  }
  uint64_t v58 = v57;
  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v61 = v60;

  id v62 = [v51 type];
  if (v62 == (id)2)
  {
LABEL_13:
    uint64_t v148 = v59;
    defaultLogger()();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Provisioning has failed", v65, 2u);
      uint64_t v50 = v46;
      swift_slowDealloc();
    }

    uint64_t v66 = v146;
    char v146 = (char *)v45;
    ((void (*)(char *, uint64_t))v45)(v66, v50);
    uint64_t v67 = *(void *)(v147 + 32);
    uint64_t v68 = sub_10053BDAC(v148, v61);
    uint64_t v95 = v94;
    uint64_t v143 = v68;
    uint64_t v144 = v51;
    uint64_t v96 = swift_allocObject();
    *(unsigned char *)(v96 + 16) = 2;
    type metadata accessor for IdentityProofingDataContext();
    swift_allocObject();
    sub_1000FF820();
    uint64_t v98 = v97;
    uint64_t v145 = v55;
    uint64_t v99 = (void *)swift_allocObject();
    uint64_t v100 = v148;
    v99[2] = v98;
    v99[3] = v100;
    v99[4] = v61;
    v99[5] = v67;
    v99[6] = v96;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_1004CBF98, (uint64_t)v99);
    swift_release();
    swift_release();
    swift_beginAccess();
    int v101 = *(unsigned __int8 *)(v96 + 16);
    swift_release();
    if (v101 == 2)
    {
      swift_bridgeObjectRelease();
      uint64_t v102 = v138;
      defaultLogger()();
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.debug.getter();
      BOOL v105 = os_log_type_enabled(v103, v104);
      uint64_t v106 = v145;
      if (v105)
      {
        uint64_t v107 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v107 = 0;
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "Not a watch provisioning failure. Phone provisioning has failed. Will update status and show a notification", v107, 2u);
        swift_slowDealloc();
      }

      uint64_t v108 = v102;
      uint64_t v109 = v150;
      ((void (*)(char *, uint64_t))v146)(v108, v150);
      swift_bridgeObjectRetain();
      sub_10053C080((uint64_t)v143, v95, 2);
      swift_bridgeObjectRelease();
      char v110 = v139;
      defaultLogger()();
      uint64_t v111 = Logger.logObject.getter();
      os_log_type_t v112 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v111, v112))
      {
        uint64_t v113 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v113 = 0;
        _os_log_impl((void *)&_mh_execute_header, v111, v112, "Updated the proofing status to readyToAddID as provisioning as failed", v113, 2u);
        swift_slowDealloc();
      }

      ((void (*)(char *, uint64_t))v146)(v110, v109);
      sub_1004CBDB0((uint64_t)v143, v95);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v114 = v137;
      defaultLogger()();
      uint64_t v115 = Logger.logObject.getter();
      os_log_type_t v116 = static os_log_type_t.debug.getter();
      BOOL v117 = os_log_type_enabled(v115, v116);
      uint64_t v118 = v145;
      if (v117)
      {
        uint64_t v119 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v119 = 0;
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "This is a watch provisioning failure scenario. Checking for combo or watch only attempt...", v119, 2u);
        swift_slowDealloc();
      }

      ((void (*)(char *, uint64_t))v146)(v114, v150);
      if (v101)
      {
        swift_bridgeObjectRelease();
        uint64_t v124 = v135;
        defaultLogger()();
        uint64_t v125 = Logger.logObject.getter();
        os_log_type_t v126 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v125, v126))
        {
          uint64_t v127 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v127 = 0;
          _os_log_impl((void *)&_mh_execute_header, v125, v126, "Watch provisioning has failed in watch only provisioning scenario, setting the proofing status to terminal state", v127, 2u);
          swift_slowDealloc();
        }

        uint64_t v128 = v124;
        uint64_t v129 = v150;
        ((void (*)(char *, uint64_t))v146)(v128, v150);
        swift_bridgeObjectRetain();
        sub_10053C080((uint64_t)v143, v95, 7);
        swift_bridgeObjectRelease();
        defaultLogger()();
        uint64_t v130 = Logger.logObject.getter();
        os_log_type_t v131 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v130, v131))
        {
          uint64_t v132 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v132 = 0;
          _os_log_impl((void *)&_mh_execute_header, v130, v131, "Will attempt to show the provisioning failure notification on the watch", v132, 2u);
          swift_slowDealloc();
        }

        ((void (*)(char *, uint64_t))v146)(v136, v129);
        sub_1004CBDB0((uint64_t)v143, v95);

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        char v120 = v134;
        defaultLogger()();
        uint64_t v121 = Logger.logObject.getter();
        os_log_type_t v122 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v121, v122))
        {
          char v123 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v123 = 0;
          _os_log_impl((void *)&_mh_execute_header, v121, v122, "Watch provisioning has failed in combo provisioning scenario, deleting the watch proofing session", v123, 2u);
          swift_slowDealloc();
        }

        ((void (*)(char *, uint64_t))v146)(v120, v150);
        sub_1004C9F88(v148, v61);

        swift_bridgeObjectRelease();
      }
    }
    return;
  }
  if (v62 != (id)1)
  {
    if (!v62) {
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
    char v76 = v141;
    defaultLogger()();
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v77, v78)) {
      goto LABEL_34;
    }
    uint64_t v79 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v79 = 0;
    uint64_t v80 = "Unhandled type of receipt data";
    goto LABEL_33;
  }
  uint64_t v148 = v59;
  uint64_t v81 = v140;
  defaultLogger()();
  os_log_type_t v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v82, v83))
  {
    uint64_t v84 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v84 = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Provisioning success", v84, 2u);
    swift_slowDealloc();
  }

  ((void (*)(char *, uint64_t))v45)(v81, v50);
  sub_1004CA738(v148, v61);
  defaultLogger()();
  uint64_t v85 = Logger.logObject.getter();
  os_log_type_t v86 = static os_log_type_t.debug.getter();
  BOOL v87 = os_log_type_enabled(v85, v86);
  uint64_t v88 = v142;
  if (v87)
  {
    uint64_t v89 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v89 = 0;
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "Attempting to notify provisioning complete to the server", v89, 2u);
    swift_slowDealloc();
  }

  ((void (*)(char *, uint64_t))v45)(v143, v50);
  sub_1004CAE74(v148, v61);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v90, v91))
  {
    char v146 = (char *)v45;
    uint64_t v92 = (uint8_t *)swift_slowAlloc();
    uint64_t v93 = swift_slowAlloc();
    uint64_t v145 = v55;
    v151[0] = v93;
    *(_DWORD *)uint64_t v92 = 136315138;
    swift_bridgeObjectRetain();
    v151[3] = sub_100110D58(v148, v61, v151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Will attempt to delete the proofing session for the credential identifier %s", v92, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v55 = v145;
    ((void (*)(char *, uint64_t))v146)(v88, v150);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    ((void (*)(char *, uint64_t))v45)(v88, v50);
  }
  sub_100438B00(v148, v61, 0, 0, 0, 1);
  swift_bridgeObjectRelease();
}

uint64_t sub_1004C9F88(uint64_t a1, uint64_t a2)
{
  return sub_1004CAE94(a1, a2, (uint64_t)&unk_100707118, (uint64_t)sub_1004CBF18);
}

void sub_1004C9FA8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (uint8_t *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (uint8_t *)&v59 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v59 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v59 - v18;
  uint64_t v20 = v65;
  uint64_t v21 = (void *)sub_100100D10(a2, a3);
  if (!v20)
  {
    uint64_t v22 = v21;
    unint64_t v61 = v8;
    id v62 = (void (*)(void, void))v14;
    uint64_t v59 = v11;
    uint64_t v63 = a2;
    uint64_t v65 = v5;
    if (v21)
    {
      [v21 target];
      IdentityTarget.init(rawValue:)();
      if (v23)
      {
        id v62 = 0;
        id v60 = v22;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v47 = Logger.logObject.getter();
        os_log_type_t v48 = static os_log_type_t.debug.getter();
        BOOL v49 = os_log_type_enabled(v47, v48);
        uint64_t v50 = v65;
        if (v49)
        {
          uint64_t v51 = (uint8_t *)swift_slowAlloc();
          uint64_t v67 = swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v66 = sub_100110D58(v63, a3, &v67);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unable to retrieve the target from the proofing session for %s", v51, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v64 + 8))(v17, v50);
      }
      else
      {
        uint64_t v24 = IdentityTarget.rawValue.getter();
        uint64_t v25 = IdentityTarget.rawValue.getter();
        uint64_t v26 = v65;
        if (v24 != v25)
        {

          return;
        }
        id v60 = v22;
        uint64_t v27 = v62;
        defaultLogger()();
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "This is watch provisioning, will attempt to delete the proofing session.", v30, 2u);
          swift_slowDealloc();
        }

        uint64_t v32 = v64 + 8;
        uint64_t v31 = *(void (**)(void, uint64_t))(v64 + 8);
        v31(v27, v26);
        id v33 = [v60 proofingSessionID];
        if (v33)
        {
          uint64_t v34 = v33;
          uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v37 = v36;

          sub_100438B00(0, 0, v35, v37, 2, 0);
          swift_bridgeObjectRelease();
          uint64_t v38 = v61;
          defaultLogger()();
          uint64_t v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v39, v40))
          {
            uint64_t v41 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v41 = 0;
            _os_log_impl((void *)&_mh_execute_header, v39, v40, "Deletion of watch proofing session and the credential successful", v41, 2u);
            swift_slowDealloc();
          }

          uint64_t v42 = v38;
        }
        else
        {
          uint64_t v52 = v59;
          defaultLogger()();
          unint64_t v53 = a3;
          os_log_type_t v54 = v52;
          swift_bridgeObjectRetain_n();
          uint64_t v55 = Logger.logObject.getter();
          os_log_type_t v56 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v55, v56))
          {
            id v57 = (uint8_t *)swift_slowAlloc();
            uint64_t v58 = swift_slowAlloc();
            id v62 = v31;
            uint64_t v67 = v58;
            uint64_t v64 = v32;
            *(_DWORD *)id v57 = 136315138;
            unint64_t v61 = v57 + 4;
            swift_bridgeObjectRetain();
            uint64_t v66 = sub_100110D58(v63, v53, &v67);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v55, v56, "Unable to delete the proofing session for watch with credential identifier %s", v57, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v62(v54, v26);
            return;
          }

          swift_bridgeObjectRelease_n();
          uint64_t v42 = v54;
        }
        v31(v42, v26);
      }
    }
    else
    {
      defaultLogger()();
      unint64_t v43 = a3;
      swift_bridgeObjectRetain_n();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v66 = sub_100110D58(v63, v43, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Proofing Session doesn't exist for Credential ID %s", v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v64 + 8))(v19, v65);
    }
  }
}

uint64_t sub_1004CA738(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - v9;
  defaultLogger()();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Checking if provisioning on watch is necessary after initial provisioning completion.", v13, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v15 = v14;
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v15;
  uint64_t v16[3] = a1;
  v16[4] = a2;
  v16[5] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1004CBD90, (uint64_t)v16);
  swift_release();
  return swift_release();
}

void *sub_1004CA9A0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v29 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v29 - v14;
  uint64_t result = (void *)sub_100100D10(a2, a3);
  if (!v3)
  {
    uint64_t v17 = result;
    uint64_t v31 = v6;
    uint64_t v32 = v7;
    if (result)
    {
      [result target];
      IdentityTarget.init(rawValue:)();
      if (v18)
      {
        uint64_t v30 = 0;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          uint64_t v34 = swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 136315138;
          v29[1] = v28 + 4;
          swift_bridgeObjectRetain();
          uint64_t v33 = sub_100110D58(a2, a3, &v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to retrieve the target from the proofing session for %s", v28, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return (void *)(*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v13, v31);
      }
      else
      {
        uint64_t v19 = IdentityTarget.rawValue.getter();
        if (v19 == IdentityTarget.rawValue.getter())
        {
          defaultLogger()();
          uint64_t v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "Provisioning on watch is complete, do not attempt to reprovision", v22, 2u);
            swift_slowDealloc();
          }

          return (void *)(*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v10, v31);
        }
        else
        {
          sub_1002A8CD0();
          sub_1002A6F94(a2, a3);

          return (void *)swift_release();
        }
      }
    }
    else
    {
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      char v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315138;
        uint64_t v30 = v25 + 4;
        swift_bridgeObjectRetain();
        uint64_t v33 = sub_100110D58(a2, a3, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Proofing Session doesn't exist for Credential ID %s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return (void *)(*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, v31);
    }
  }
  return result;
}

uint64_t sub_1004CAE74(uint64_t a1, uint64_t a2)
{
  return sub_1004CAE94(a1, a2, (uint64_t)&unk_1007070A0, (uint64_t)sub_1004CBC48);
}

uint64_t sub_1004CAE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v9 = type metadata accessor for Logger();
  __chkstk_darwin(v9);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v11 = v10;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = v11;
  uint64_t v12[3] = a1;
  v12[4] = a2;
  v12[5] = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C(a4, (uint64_t)v12);
  swift_release();

  return swift_release();
}

void sub_1004CB054(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v60 = a4;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v58 = *(NSObject **)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v59 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v55 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v55 - v16;
  uint64_t v18 = v61;
  uint64_t v19 = sub_100100D10(a2, a3);
  if (v18) {
    return;
  }
  uint64_t v20 = v19;
  os_log_type_t v56 = v15;
  uint64_t v57 = a2;
  os_log_type_t v21 = v17;
  uint64_t v22 = v60;
  uint64_t v61 = v9;
  if (v19)
  {
    [v19 target];
    IdentityTarget.init(rawValue:)();
    char v23 = v20;
    if (v24)
    {
      ((void (*)(char *, void, uint64_t))v58[13].isa)(v8, enum case for DIPError.Code.targetUnavailable(_:), v6);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    else
    {
      uint64_t v58 = v20;
      if ([v20 didAttemptComboProofing])
      {
        uint64_t v25 = IdentityTarget.rawValue.getter();
        if (v25 == IdentityTarget.rawValue.getter())
        {
          uint64_t v26 = v56;
          defaultLogger()();
          os_log_type_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.debug.getter();
          BOOL v29 = os_log_type_enabled(v27, v28);
          uint64_t v30 = v59;
          uint64_t v31 = v61;
          if (v29)
          {
            uint64_t v32 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v32 = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "This is combo proofing session, don't notify the server", v32, 2u);
            swift_slowDealloc();
            uint64_t v33 = v58;
          }
          else
          {
            uint64_t v33 = v27;
            os_log_type_t v27 = v58;
          }

          (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v31);
          return;
        }
      }
      os_log_type_t v56 = 0;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
        v62._uint64_t countAndFlagsBits = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v40 = 136315138;
        v55[1] = v40 + 4;
        swift_bridgeObjectRetain();
        uint64_t v63 = sub_100110D58(v57, a3, &v62._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "notifyProvisionComplete called for credential identifier: %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v61);
      id v41 = [v58 provisioningCredentialID];
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v45 = v44;
      }
      else
      {
        uint64_t v43 = 0;
        uint64_t v45 = 0;
      }
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = v22;
      *(void *)(v46 + 24) = 0x4F495349564F5250;
      *(void *)(v46 + 32) = 0xEF4D49414C435F4ELL;
      *(_OWORD *)(v46 + 40) = xmmword_100610A70;
      *(void *)(v46 + 56) = 0;
      *(void *)(v46 + 64) = v43;
      char v23 = v58;
      *(void *)(v46 + 72) = v45;
      *(void *)(v46 + 80) = v23;
      swift_retain();
      uint64_t v47 = v23;
      os_log_type_t v48 = v56;
      runAsyncAndBlock<A>(timeout:file:function:line:_:)();
      swift_release();
      if (!v48)
      {
        v62._uint64_t countAndFlagsBits = 0;
        v62._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(27);
        [v47 target];
        v62._uint64_t countAndFlagsBits = IdentityTarget.init(rawValue:)();
        LOBYTE(v62._object) = v49 & 1;
        sub_100007764(&qword_1007302D8);
        uint64_t v50 = String.init<A>(describing:)();
        uint64_t v52 = v51;
        swift_bridgeObjectRelease();
        v62._uint64_t countAndFlagsBits = v50;
        v62._object = v52;
        v53._uint64_t countAndFlagsBits = 0xD000000000000019;
        v53._object = (void *)0x80000001006508A0;
        String.append(_:)(v53);
        v54._uint64_t countAndFlagsBits = 0x3837306634353632;
        v54._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v54, v62);

        swift_bridgeObjectRelease();
        return;
      }
    }

    return;
  }
  uint64_t v34 = v21;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    v62._uint64_t countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v63 = sub_100110D58(v57, a3, &v62._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to find proofing session with credentialIdentifier %s. Cannot notify server of provisioning completion", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v59 + 8))(v34, v61);
}

uint64_t sub_1004CB884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  return _swift_task_switch(sub_1004CB8A8, 0, 0);
}

uint64_t sub_1004CB8A8()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void **)(v0 + 32);
  sub_100007764(&qword_100720530);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 40) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_100610730;
  long long v4 = *(_OWORD *)v2;
  long long v5 = *(_OWORD *)(v2 + 16);
  long long v6 = *(_OWORD *)(v2 + 32);
  *(void *)(v3 + 80) = *(void *)(v2 + 48);
  *(_OWORD *)(v3 + 48) = v5;
  *(_OWORD *)(v3 + 64) = v6;
  *(_OWORD *)(v3 + 32) = v4;
  sub_10043A984(v2);
  id v7 = [v1 country];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0xE000000000000000;
  }
  *(void *)(v0 + 48) = v11;
  id v12 = [*(id *)(v0 + 32) workflowID];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  *(void *)(v0 + 56) = v16;
  id v17 = [*(id *)(v0 + 32) proofingSessionID];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  *(void *)(v0 + 64) = v21;
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v22;
  void *v22 = v0;
  v22[1] = sub_1004CBA88;
  return sub_1001FC910(v3, v9, v11, v14, v16, v19, v21);
}

uint64_t sub_1004CBA88()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t type metadata accessor for IdentityProvisioningCompletionManager()
{
  return self;
}

void sub_1004CBC48()
{
  sub_1004CB054(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1004CBC68()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 56) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1004CBCD0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + 24;
  uint64_t v4 = *(void *)(v0 + 80);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *long long v5 = v1;
  v5[3] = v3;
  v5[4] = v4;
  v5[1] = sub_10000C494;
  v5[2] = v2;
  return _swift_task_switch(sub_1004CB8A8, 0, 0);
}

void *sub_1004CBD90()
{
  return sub_1004CA9A0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1004CBDB0(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)PKPaymentService) init:0:0];
  type metadata accessor for IdentityProofingConfigProvider();
  uint64_t v5 = swift_allocObject();
  type metadata accessor for IdentityProofingTextReplacementProvider();
  swift_allocObject();
  uint64_t v6 = IdentityProofingTextReplacementProvider.init()();
  type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  uint64_t v7 = swift_allocObject();
  type metadata accessor for IdentityProofingWorkflowProvider();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  type metadata accessor for IdentityProofingUserNotificationProvider();
  uint64_t v9 = swift_allocObject();
  sub_1005EBED8((uint64_t)v4, (uint64_t)&v11, v5, v6, v8, v9);
  sub_10051BB20(0xD00000000000002CLL, 0x80000001006508F0, 0xD00000000000002ELL, 0x80000001006508C0, a1, a2, 0);

  return swift_release();
}

void sub_1004CBF18()
{
  sub_1004C9FA8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1004CBF38()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1004CBF48()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1004CBF98()
{
  sub_100537A00(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1004CBFBC(int a1, int a2, Swift::Int a3, uint64_t a4, void *a5)
{
  _StringGuts.grow(_:)(a3);
  v7._uint64_t countAndFlagsBits = a4;
  v7._object = a5;
  String.append(_:)(v7);
  Swift::String v8 = Data.base16EncodedString()();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1004CC050()
{
  v1[12] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[13] = v2;
  v1[14] = *(void *)(v2 - 8);
  v1[15] = swift_task_alloc();
  return _swift_task_switch(sub_1004CC110, 0, 0);
}

uint64_t sub_1004CC110()
{
  sub_1004CCAA4(*(void *)(v0 + 96) + 24, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10000C6B4((long long *)(v0 + 56), v0 + 16);
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    sub_10000C728((void *)(v0 + 16), v1);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 16) + **(int **)(v2 + 16));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1004CC39C;
    return v9(v1, v2);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 104);
    sub_10000C6CC(v0 + 56, (uint64_t *)&unk_100733680);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.biometricStoreUninitialized(_:), v7);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004CF4DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    Swift::String v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_1004CC39C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 136) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_1004CC544;
  }
  else
  {
    *(void *)(v6 + 144) = a2;
    *(void *)(v6 + 152) = a1;
    uint64_t v7 = sub_1004CC4D0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1004CC4D0()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  return v1(v2, v3);
}

uint64_t sub_1004CC544()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004CC5B0()
{
  v1[12] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[13] = v2;
  v1[14] = *(void *)(v2 - 8);
  v1[15] = swift_task_alloc();
  return _swift_task_switch(sub_1004CC670, 0, 0);
}

uint64_t sub_1004CC670()
{
  sub_1004CCAA4(*(void *)(v0 + 96) + 24, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10000C6B4((long long *)(v0 + 56), v0 + 16);
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    sub_10000C728((void *)(v0 + 16), v1);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 24) + **(int **)(v2 + 24));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1004CC904;
    return v9(v1, v2);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 104);
    sub_10000C6CC(v0 + 56, (uint64_t *)&unk_100733680);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.biometricStoreUninitialized(_:), v7);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004CF4DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    Swift::String v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_1004CC904(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 136) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_1004CFBE4;
  }
  else
  {
    *(void *)(v6 + 144) = a2;
    *(void *)(v6 + 152) = a1;
    uint64_t v7 = sub_1004CFBE0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1004CCA38()
{
  swift_release();
  sub_10000C6CC(v0 + 24, (uint64_t *)&unk_100733680);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingCredentialProvider()
{
  return self;
}

uint64_t sub_1004CCAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100733680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *sub_1004CCB0C(char *a1, unint64_t a2)
{
  uint64_t v124 = a1;
  uint64_t v115 = (void *)a2;
  uint64_t v106 = type metadata accessor for DIPError.Code();
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v108 = (char *)&v93 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_100007764(&qword_100725778);
  __chkstk_darwin(v107);
  uint64_t v109 = (uint64_t)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for SHA256();
  uint64_t v113 = *(uint8_t **)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v114 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for SHA256Digest();
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  char v110 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier();
  unint64_t v119 = *(void *)(v6 - 8);
  uint64_t v120 = v6;
  __chkstk_darwin(v6);
  unint64_t v121 = (unint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for RFC8152SigStructure();
  uint64_t v117 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v9 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v123 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v93 - v14;
  uint64_t v16 = sub_100007764(&qword_1007278F8);
  uint64_t v118 = *(void (***)(char *, uint64_t))(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  uint64_t v19 = CBOREncoder.init()();
  type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  sub_1004CF4DC(&qword_100730400, (void (*)(uint64_t))&type metadata accessor for KeyAuthorizationCOSE_Sign1Payload);
  uint64_t v20 = v125;
  uint64_t v21 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  if (v20) {
    goto LABEL_3;
  }
  uint64_t v103 = v15;
  int v101 = v13;
  uint64_t v125 = v10;
  uint64_t v104 = v19;
  uint64_t v124 = v9;
  *(void *)&long long v127 = v21;
  *((void *)&v127 + 1) = v22;
  unint64_t v23 = v22;
  uint64_t v24 = v21;
  swift_allocObject();
  sub_10002CEB0(v24, v23);
  CBOREncoder.init()();
  sub_10005D424();
  sub_10005D478();
  CBOREncodedCBOR.init(value:tag:encoder:)();
  uint64_t v100 = v24;
  unint64_t v99 = v23;
  uint64_t v102 = 0;
  uint64_t v26 = CBOREncodedCBOR.dataValue.getter();
  unint64_t v28 = v27;
  v118[1](v18, v16);
  BOOL v29 = v103;
  uint64_t v30 = defaultLogger()();
  __chkstk_darwin(v30);
  Logger.cryptoParam(_:)();
  uint64_t v31 = *(void (***)(char *, uint64_t))(v123 + 8);
  v123 += 8;
  uint64_t v118 = v31;
  ((void (*)(char *, uint64_t))v31)(v29, v125);
  sub_100007764(&qword_100730408);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100610730;
  *(void *)(inited + 32) = static RFC8152SigStructure.protectedHeaderAlg.getter();
  unint64_t v33 = v119;
  uint64_t v35 = v119 + 104;
  uint64_t v34 = *(void (**)(void))(v119 + 104);
  unint64_t v36 = v121;
  unsigned int v98 = enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:);
  uint64_t v37 = v120;
  uint64_t v97 = (void (*)(unint64_t, void, uint64_t))v34;
  v34(v121);
  uint64_t v38 = COSE_Sign1.AlgorithmIdentifier.rawValue.getter();
  (*(void (**)(unint64_t, uint64_t))(v33 + 8))(v36, v37);
  *(void *)(inited + 40) = v38;
  sub_10016DADC(inited);
  swift_setDeallocating();
  sub_10002CEB0(v26, v28);
  uint64_t v18 = v124;
  RFC8152SigStructure.init(protected:payload:)();
  sub_1004CF4DC(&qword_100725FA8, (void (*)(uint64_t))&type metadata accessor for RFC8152SigStructure);
  uint64_t v39 = v122;
  uint64_t v40 = v102;
  uint64_t v41 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v117 + 8))(v18, v39);
    sub_10000C5F4(v100, v99);
    sub_10000C5F4(v26, v28);
LABEL_3:
    swift_release();
    return v18;
  }
  uint64_t v43 = v41;
  uint64_t v93 = v35;
  uint64_t v96 = v26;
  unint64_t v95 = v28;
  uint64_t v102 = 0;
  unint64_t v119 = v42;
  uint64_t v44 = defaultLogger()();
  __chkstk_darwin(v44);
  Logger.cryptoParam(_:)();
  uint64_t v45 = v29;
  uint64_t v46 = v118;
  ((void (*)(char *, uint64_t))v118)(v45, v125);
  sub_1004CF4DC(&qword_100722DF8, (void (*)(uint64_t))&type metadata accessor for SHA256);
  uint64_t v47 = v114;
  dispatch thunk of HashFunction.init()();
  uint64_t v48 = v43;
  char v49 = v115;
  uint64_t v94 = v43;
  switch(v119 >> 62)
  {
    case 1uLL:
      uint64_t v63 = (int)v43;
      uint64_t v64 = v43 >> 32;
      uint64_t v57 = v113;
      if (v43 >> 32 < (int)v43) {
        __break(1u);
      }
      uint64_t v65 = v43;
      uint64_t v66 = v43;
      unint64_t v67 = v119;
      sub_10002CEB0(v66, v119);
      uint64_t v68 = v102;
      sub_10018451C(v63, v64);
      uint64_t v102 = v68;
      sub_10000C5F4(v65, v67);
      char v49 = v115;
      uint64_t v58 = v116;
      uint64_t v59 = v112;
      uint64_t v60 = v111;
      uint64_t v61 = v110;
      Swift::String v62 = v47;
      break;
    case 2uLL:
      uint64_t v51 = v43;
      uint64_t v52 = *(void *)(v43 + 16);
      uint64_t v53 = *(void *)(v43 + 24);
      uint64_t v54 = v43;
      unint64_t v55 = v119;
      sub_10002CEB0(v54, v119);
      swift_retain();
      swift_retain();
      uint64_t v56 = v102;
      sub_10018451C(v52, v53);
      uint64_t v102 = v56;
      uint64_t v57 = v113;
      if (v56)
      {
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x1004CDDD8);
      }
      swift_release();
      swift_release();
      sub_10000C5F4(v51, v55);
      char v49 = v115;
      uint64_t v58 = v116;
      uint64_t v59 = v112;
      uint64_t v60 = v111;
      uint64_t v61 = v110;
      Swift::String v62 = v114;
      break;
    case 3uLL:
      *(void *)((char *)&v127 + 6) = 0;
      *(void *)&long long v127 = 0;
      unint64_t v50 = v119;
      goto LABEL_12;
    default:
      *(void *)&long long v127 = v43;
      DWORD2(v127) = v119;
      WORD6(v127) = WORD2(v119);
      unint64_t v50 = v119;
LABEL_12:
      Swift::String v62 = v47;
      uint64_t v58 = v116;
      dispatch thunk of HashFunction.update(bufferPointer:)();
      sub_10000C5F4(v48, v50);
      uint64_t v59 = v112;
      uint64_t v60 = v111;
      uint64_t v57 = v113;
      uint64_t v61 = v110;
      break;
  }
  uint64_t v69 = v61;
  dispatch thunk of HashFunction.finalize()();
  (*((void (**)(char *, uint64_t))v57 + 1))(v62, v58);
  sub_1004CF4DC(&qword_100722E00, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  uint64_t v70 = Digest.data.getter();
  unint64_t v72 = v71;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v69, v59);
  os_log_type_t v73 = v103;
  uint64_t v74 = defaultLogger()();
  __chkstk_darwin(v74);
  Logger.cryptoParam(_:)();
  ((void (*)(char *, uint64_t))v46)(v73, v125);
  uint64_t v18 = (char *)v49[4];
  sub_10000C728(v49, v49[3]);
  uint64_t v75 = v102;
  uint64_t v76 = dispatch thunk of IdentityKey.sign(_:)();
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v117 + 8))(v124, v122);
    sub_10000C5F4(v100, v99);
    sub_10000C5F4(v96, v95);
    sub_10000C5F4(v94, v119);
    sub_10000C5F4(v70, v72);
    goto LABEL_3;
  }
  uint64_t v78 = v76;
  unint64_t v79 = v77;
  sub_10000C728(v49, v49[3]);
  uint64_t v80 = (void *)dispatch thunk of IdentityKey.getIdentityPrivateKey()();
  uint64_t v81 = SecKeyRef.publicKeyIdentifier.getter();
  unint64_t v83 = v82;

  if (v83 >> 60 == 15)
  {
    (*(void (**)(char *, void, uint64_t))(v105 + 104))(v108, enum case for DIPError.Code.failedToGenerateKeyIdentifier(_:), v106);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v18 = (char *)type metadata accessor for DIPError();
    sub_1004CF4DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v94, v119);
    sub_10000C5F4(v70, v72);
    swift_release();
    sub_10000C5F4(v78, v79);
    sub_10000C5F4(v96, v95);
    sub_10000C5F4(v100, v99);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v124, v122);
  }
  else
  {
    v97(v121, v98, v120);
    sub_10002CEB0(v96, v95);
    uint64_t v116 = v81;
    sub_1000338D4(v81, v83);
    sub_10002CEB0(v78, v79);
    uint64_t v120 = v78;
    unint64_t v121 = v79;
    COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)();
    sub_1004CF438();
    uint64_t v18 = (char *)dispatch thunk of CBOREncoder.encode<A>(_:)();
    unint64_t v85 = v84;
    uint64_t v115 = (void *)v83;
    uint64_t v102 = 0;
    os_log_type_t v86 = v101;
    defaultLogger()();
    sub_10002CEB0((uint64_t)v18, v85);
    sub_10002CEB0((uint64_t)v18, v85);
    BOOL v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.debug.getter();
    int v89 = v88;
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v90 = swift_slowAlloc();
      LODWORD(v114) = v89;
      os_log_type_t v91 = (uint8_t *)v90;
      uint64_t v112 = swift_slowAlloc();
      *(void *)&long long v127 = v112;
      *(_DWORD *)os_log_type_t v91 = 136315138;
      uint64_t v113 = v91 + 4;
      Swift::String v92 = Data.base16EncodedString()();
      uint64_t v126 = sub_100110D58(v92._countAndFlagsBits, (unint64_t)v92._object, (uint64_t *)&v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000C5F4((uint64_t)v18, v85);
      sub_10000C5F4((uint64_t)v18, v85);
      _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v114, "Created key authorization for phone's key signing key %s", v91, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10000C5F4(v94, v119);
      sub_10000C5F4(v70, v72);

      swift_release();
    }
    else
    {
      sub_10000C5F4(v94, v119);
      sub_10000C5F4(v70, v72);

      swift_release();
      sub_10000C5F4((uint64_t)v18, v85);
      sub_10000C5F4((uint64_t)v18, v85);
    }
    sub_10000C5F4(v120, v121);
    sub_10000C5E0(v116, (unint64_t)v115);
    sub_10000C5F4(v96, v95);
    sub_10000C5F4(v100, v99);
    ((void (*)(char *, uint64_t))v118)(v86, v125);
    sub_10000C6CC(v109, &qword_100725778);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v124, v122);
  }
  return v18;
}

unint64_t sub_1004CDDE8(void *a1, unint64_t a2)
{
  uint64_t v3 = v2;
  id v47 = a1;
  uint64_t v42 = type metadata accessor for DIPError.Code();
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType();
  uint64_t v45 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v43 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose();
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  __chkstk_darwin(v9);
  uint64_t v38 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  uint64_t v41 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v39 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_1007303F8);
  __chkstk_darwin(v12 - 8);
  uint64_t v46 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for COSEKey();
  uint64_t v48 = *(void *)(v49 - 8);
  uint64_t v14 = __chkstk_darwin(v49);
  uint64_t v34 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v35 = (char *)&v33 - v16;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = v7;
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "authorizeLocalKeySigningKey called", v23, 2u);
    uint64_t v3 = v2;
    uint64_t v7 = v33;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  id v24 = [v47 publicKeyCOSEKey];
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v25 = (uint64_t)v46;
  COSEKey.init(data:)();
  uint64_t v26 = v48;
  uint64_t v27 = v49;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v25, 1, v49) == 1)
  {
    sub_10000C6CC(v25, &qword_1007303F8);
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v6, enum case for DIPError.Code.failedToSerializeCOSEPublicKey(_:), v42);
    unint64_t v28 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004CF4DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    BOOL v29 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v35, v25, v27);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v34, v29, v27);
    unint64_t v28 = (unint64_t)v38;
    (*(void (**)(char *, void, uint64_t))(v36 + 104))(v38, enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.keySigningKey(_:), v37);
    (*(void (**)(char *, void, uint64_t))(v45 + 104))(v43, enum case for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.identityKey(_:), v7);
    uint64_t v30 = v39;
    KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)();
    uint64_t v31 = sub_1004CCB0C(v30, a2);
    if (!v3) {
      unint64_t v28 = (unint64_t)v31;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v44);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v27);
  }
  return v28;
}

unint64_t sub_1004CE510(void *a1, unint64_t a2)
{
  uint64_t v3 = v2;
  id v47 = a1;
  uint64_t v42 = type metadata accessor for DIPError.Code();
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType();
  uint64_t v45 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v43 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose();
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  __chkstk_darwin(v9);
  uint64_t v38 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  uint64_t v41 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v39 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_1007303F8);
  __chkstk_darwin(v12 - 8);
  uint64_t v46 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for COSEKey();
  uint64_t v48 = *(void *)(v49 - 8);
  uint64_t v14 = __chkstk_darwin(v49);
  uint64_t v34 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v35 = (char *)&v33 - v16;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = v7;
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "authorize AccountKeySigningKey called", v23, 2u);
    uint64_t v3 = v2;
    uint64_t v7 = v33;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  id v24 = [v47 publicKeyCOSEKey];
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v25 = (uint64_t)v46;
  COSEKey.init(data:)();
  uint64_t v26 = v48;
  uint64_t v27 = v49;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v25, 1, v49) == 1)
  {
    sub_10000C6CC(v25, &qword_1007303F8);
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v6, enum case for DIPError.Code.failedToSerializeCOSEPublicKey(_:), v42);
    unint64_t v28 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1004CF4DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    BOOL v29 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v35, v25, v27);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v34, v29, v27);
    unint64_t v28 = (unint64_t)v38;
    (*(void (**)(char *, void, uint64_t))(v36 + 104))(v38, enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.accountKeySigningKey(_:), v37);
    (*(void (**)(char *, void, uint64_t))(v45 + 104))(v43, enum case for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.identityKey(_:), v7);
    uint64_t v30 = v39;
    KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)();
    uint64_t v31 = sub_1004CCB0C(v30, a2);
    if (!v3) {
      unint64_t v28 = (unint64_t)v31;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v44);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v27);
  }
  return v28;
}

uint64_t sub_1004CEC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[21] = a4;
  v5[22] = a5;
  v5[19] = a2;
  v5[20] = a3;
  v5[18] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[23] = v6;
  v5[24] = *(void *)(v6 - 8);
  v5[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[26] = v7;
  v5[27] = *(void *)(v7 - 8);
  v5[28] = swift_task_alloc();
  return _swift_task_switch(sub_1004CED5C, 0, 0);
}

uint64_t sub_1004CED5C()
{
  uint64_t v18 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = v0[27];
    uint64_t v15 = v0[26];
    uint64_t v16 = v0[28];
    unint64_t v3 = v0[19];
    uint64_t v4 = v0[18];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[17] = sub_100110D58(v4, v3, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "authorizeDeviceKeySigningKey called for credential identifier : %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v7 = v0[27];
    uint64_t v6 = v0[28];
    uint64_t v8 = v0[26];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  uint64_t v9 = (void *)v0[22];
  NSString v10 = String._bridgeToObjectiveC()();
  v0[29] = v10;
  NSString v11 = String._bridgeToObjectiveC()();
  v0[30] = v11;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1004CF024;
  uint64_t v12 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10059400C;
  v0[13] = &unk_100707180;
  v0[14] = v12;
  [v9 authorizeDeviceKeySigningKeyOfCredential:v10 accountKeyIdentifier:v11 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1004CF024()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 248) = v1;
  if (v1) {
    os_log_type_t v2 = sub_1004CF1D0;
  }
  else {
    os_log_type_t v2 = sub_1004CF134;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004CF134()
{
  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v4(v2, v3);
}

uint64_t sub_1004CF1D0()
{
  uint64_t v1 = (void *)v0[30];
  uint64_t v2 = (void *)v0[29];
  uint64_t v4 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[23];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.unableToAuthorizeWatchKeySigningKey(_:), v5);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1004CF4DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1004CF390()
{
  return sub_1004CBFBC(*(void *)(v0 + 16), *(void *)(v0 + 24), 54, 0xD000000000000034, (void *)0x8000000100650BC0);
}

uint64_t sub_1004CF3C8()
{
  return sub_1004CBFBC(*(void *)(v0 + 16), *(void *)(v0 + 24), 61, 0xD00000000000003BLL, (void *)0x8000000100650B80);
}

uint64_t sub_1004CF400()
{
  return sub_1004CBFBC(*(void *)(v0 + 16), *(void *)(v0 + 24), 55, 0xD000000000000035, (void *)0x8000000100650B40);
}

unint64_t sub_1004CF438()
{
  unint64_t result = qword_100730410;
  if (!qword_100730410)
  {
    sub_100019364(&qword_100725778);
    sub_1004CF4DC(&qword_100730418, (void (*)(uint64_t))&type metadata accessor for COSE_Sign1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730410);
  }
  return result;
}

uint64_t sub_1004CF4DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004CF524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[21] = a4;
  v5[22] = a5;
  v5[19] = a2;
  v5[20] = a3;
  v5[18] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[23] = v6;
  v5[24] = *(void *)(v6 - 8);
  v5[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[26] = v7;
  v5[27] = *(void *)(v7 - 8);
  v5[28] = swift_task_alloc();
  return _swift_task_switch(sub_1004CF648, 0, 0);
}

uint64_t sub_1004CF648()
{
  uint64_t v18 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = v0[27];
    uint64_t v15 = v0[26];
    uint64_t v16 = v0[28];
    unint64_t v3 = v0[19];
    uint64_t v4 = v0[18];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[17] = sub_100110D58(v4, v3, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "authorizeRemoteKeySigningKey called for credential identifier : %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v7 = v0[27];
    uint64_t v6 = v0[28];
    uint64_t v8 = v0[26];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  uint64_t v9 = (void *)v0[22];
  NSString v10 = String._bridgeToObjectiveC()();
  v0[29] = v10;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[30] = isa;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1004CF910;
  uint64_t v12 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10059400C;
  v0[13] = &unk_100707198;
  v0[14] = v12;
  [v9 authorizeRemoteKeySigningKeyWithCredential:v10 remoteKey:isa completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1004CF910()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 248) = v1;
  if (v1) {
    os_log_type_t v2 = sub_1004CFA20;
  }
  else {
    os_log_type_t v2 = sub_1004CFBE8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004CFA20()
{
  uint64_t v1 = (void *)v0[30];
  os_log_type_t v2 = (void *)v0[29];
  uint64_t v4 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[23];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.unableToAuthorizeWatchKeySigningKey(_:), v5);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1004CF4DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1004CFBEC(uint64_t a1, char **a2)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v20 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v24 = (v4 - 1) & v4;
  int64_t v25 = v6;
  for (unint64_t i = __clz(__rbit64(v4)) | (v6 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 56) + 96 * i);
    uint64_t v13 = v12[1];
    uint64_t v23 = *v12;
    uint64_t v14 = *a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = sub_10010F3C4(0, *((void *)v14 + 2) + 1, 1, v14);
      *a2 = v14;
    }
    unint64_t v17 = *((void *)v14 + 2);
    unint64_t v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = sub_10010F3C4((char *)(v16 > 1), v17 + 1, 1, v14);
      *a2 = v14;
    }
    *((void *)v14 + 2) = v17 + 1;
    uint64_t v18 = &v14[16 * v17];
    *((void *)v18 + 4) = v23;
    *((void *)v18 + 5) = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v6 = v25;
    unint64_t v4 = v24;
    if (v24) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v8 >= v20) {
      return swift_release();
    }
    unint64_t v9 = *(void *)(v19 + 8 * v8);
    int64_t v10 = v6 + 1;
    if (!v9)
    {
      int64_t v10 = v6 + 2;
      if (v6 + 2 >= v20) {
        return swift_release();
      }
      unint64_t v9 = *(void *)(v19 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v6 + 3;
        if (v6 + 3 >= v20) {
          return swift_release();
        }
        unint64_t v9 = *(void *)(v19 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v6 + 4;
          if (v6 + 4 >= v20) {
            return swift_release();
          }
          unint64_t v9 = *(void *)(v19 + 8 * v10);
          if (!v9) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v24 = (v9 - 1) & v9;
    int64_t v25 = v10;
  }
  uint64_t v11 = v6 + 5;
  if (v6 + 5 >= v20) {
    return swift_release();
  }
  unint64_t v9 = *(void *)(v19 + 8 * v11);
  if (v9)
  {
    int64_t v10 = v6 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v10 >= v20) {
      return swift_release();
    }
    unint64_t v9 = *(void *)(v19 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1004CFEB0(uint64_t a1, char **a2)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v21 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    uint64_t v13 = *(void *)(v12 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_hash);
    uint64_t v14 = *(void *)(v12 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_hash + 8);
    uint64_t v15 = *a2;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v15 = sub_10010F3C4(0, *((void *)v15 + 2) + 1, 1, v15);
      *a2 = v15;
    }
    unint64_t v18 = *((void *)v15 + 2);
    unint64_t v17 = *((void *)v15 + 3);
    if (v18 >= v17 >> 1)
    {
      uint64_t v15 = sub_10010F3C4((char *)(v17 > 1), v18 + 1, 1, v15);
      *a2 = v15;
    }
    *((void *)v15 + 2) = v18 + 1;
    uint64_t v19 = &v15[16 * v18];
    *((void *)v19 + 4) = v13;
    *((void *)v19 + 5) = v14;
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v9 >= v21) {
      return swift_release();
    }
    unint64_t v10 = *(void *)(v20 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v21) {
        return swift_release();
      }
      unint64_t v10 = *(void *)(v20 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v21) {
          return swift_release();
        }
        unint64_t v10 = *(void *)(v20 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v21) {
            return swift_release();
          }
          unint64_t v10 = *(void *)(v20 + 8 * v6);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v10 - 1) & v10;
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v21) {
    return swift_release();
  }
  unint64_t v10 = *(void *)(v20 + 8 * v11);
  if (v10)
  {
    int64_t v6 = v11;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v21) {
      return swift_release();
    }
    unint64_t v10 = *(void *)(v20 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

char *sub_1004D0118(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = a1;
  unint64_t v15 = (unint64_t)a2;
  uint64_t v18 = 46;
  unint64_t v19 = 0xE100000000000000;
  sub_1000B5358();
  uint64_t v8 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    unint64_t v7 = *(char **)(v8 + 32 + 16 * v9 - 16);
    if (v9 == 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = 2 * v9 - 1;
    }
    unint64_t v14 = v8;
    unint64_t v15 = v8 + 32;
    uint64_t v16 = 0;
    uint64_t v17 = v10;
    swift_bridgeObjectRetain();
    sub_100007764(&qword_100730428);
    sub_1004D0D64();
    BidirectionalCollection<>.joined(separator:)();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD00000000000001BLL;
    unint64_t v15 = 0x8000000100650CD0;
    v11._uint64_t countAndFlagsBits = a1;
    v11._object = a2;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 41;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.invalidStoredData(_:), v4);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  return v7;
}

uint64_t sub_1004D03AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for VerifiedClaim(0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::String v12 = (char *)&v20 - v11;
  uint64_t v13 = sub_1004D0ED8(a2, a3);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  int64_t v21 = (char *)_swiftEmptyArrayStorage;
  sub_1004CFBEC(v13, &v21);
  sub_1004CFEB0(v17, &v21);
  sub_1004CFBEC(v15, &v21);
  sub_1004D1F28(a2 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim, (uint64_t)v10);
  uint64_t v18 = v21;
  swift_bridgeObjectRetain();
  sub_1004D0550((uint64_t)v10, v18, (uint64_t)v12);
  sub_1004D1F8C((uint64_t)v10);
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1004D1FE8((uint64_t)v12, a1);
  }
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1004D0550@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100007764(&qword_100723718);
  uint64_t v40 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for VerifiedClaim(0);
  uint64_t v10 = *(void *)(a1 + *(int *)(v41 + 20));
  uint64_t v11 = *(void *)(v10 + 104);
  if (v11)
  {
    uint64_t v12 = *(void *)(v10 + 112);
    if (v12)
    {
      swift_retain();
      swift_retain();
      uint64_t v13 = sub_1004D0898(v11, a2);
      if (v3)
      {
        swift_release();
        return swift_release();
      }
      LODWORD(v38) = v14;
      uint64_t v39 = (char *)v13;
      uint64_t v22 = sub_1004D0898(v12, a2);
      int v25 = v24;
      uint64_t v37 = v22;
      swift_release();
      swift_release();
      if ((v38 | v25))
      {
        uint64_t v27 = *(void *)(v10 + 16);
        uint64_t v26 = *(void *)(v10 + 24);
        uint64_t v28 = *(void *)(v10 + 40);
        uint64_t v36 = *(void *)(v10 + 32);
        LODWORD(v38) = *(unsigned __int8 *)(v10 + 120);
        type metadata accessor for MerkleTreeDetached();
        uint64_t v29 = swift_allocObject();
        uint64_t v10 = v29;
        *(void *)(v29 + 16) = v27;
        *(void *)(v29 + 24) = v26;
        *(void *)(v29 + 32) = v36;
        *(void *)(v29 + 40) = v28;
        *(_OWORD *)(v29 + 48) = 0u;
        *(_OWORD *)(v29 + 64) = 0u;
        *(_OWORD *)(v29 + 80) = 0u;
        uint64_t v30 = v39;
        *(void *)(v29 + 96) = 0;
        *(void *)(v29 + 104) = v30;
        *(void *)(v29 + 112) = v37;
        char v31 = v38;
      }
      else
      {
        swift_release();
        swift_release();
        uint64_t v33 = *(void *)(v10 + 16);
        uint64_t v32 = *(void *)(v10 + 24);
        uint64_t v34 = *(void *)(v10 + 40);
        uint64_t v38 = *(void *)(v10 + 32);
        LODWORD(v39) = *(unsigned __int8 *)(v10 + 120);
        type metadata accessor for MerkleTreeDetached();
        uint64_t v29 = swift_allocObject();
        uint64_t v10 = v29;
        *(void *)(v29 + 16) = v33;
        *(void *)(v29 + 24) = v32;
        *(void *)(v29 + 32) = v38;
        *(void *)(v29 + 40) = v34;
        *(_OWORD *)(v29 + 48) = 0u;
        *(_OWORD *)(v29 + 64) = 0u;
        *(_OWORD *)(v29 + 80) = 0u;
        *(_OWORD *)(v29 + 96) = 0u;
        *(void *)(v29 + 112) = 0;
        char v31 = (char)v39;
      }
      *(unsigned char *)(v29 + 120) = v31;
      goto LABEL_8;
    }
  }
  uint64_t v16 = *(void *)(v10 + 16);
  uint64_t v15 = *(void *)(v10 + 24);
  if ((sub_10020F0CC(v16, v15, a2) & 1) == 0)
  {
    uint64_t v39 = v9;
    uint64_t v17 = a1;
    uint64_t v18 = a3;
    uint64_t v19 = *(void *)(v10 + 32);
    uint64_t v20 = *(void *)(v10 + 40);
    LODWORD(v38) = *(unsigned __int8 *)(v10 + 120);
    type metadata accessor for MerkleTreeDetached();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v16;
    *(void *)(v10 + 24) = v15;
    *(void *)(v10 + 32) = v19;
    *(void *)(v10 + 40) = v20;
    a3 = v18;
    a1 = v17;
    uint64_t v9 = v39;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 96) = 0u;
    *(void *)(v10 + 112) = 0;
    *(unsigned char *)(v10 + 120) = v38;
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  swift_retain();
LABEL_9:
  uint64_t v21 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v9, a1, v7);
  sub_1004D204C();
  sub_1004D20A0();
  uint64_t result = JWSSignedJSON.init(_:)();
  *(void *)(a3 + *(int *)(v21 + 20)) = v10;
  return result;
}

uint64_t sub_1004D0898(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *(unsigned __int8 *)(a1 + 120);
  if (v10) {
    goto LABEL_2;
  }
  uint64_t v26 = *(void *)(a1 + 104);
  if (!v26)
  {
    if (!*(void *)(a1 + 112)) {
      goto LABEL_2;
    }
LABEL_11:
    uint64_t v60 = 0;
    unint64_t v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(74);
    v30._uint64_t countAndFlagsBits = 0x7254656C6B72654DLL;
    v30._object = (void *)0xEB000000005B6565;
    String.append(_:)(v30);
    uint64_t v32 = *(void *)(a1 + 16);
    char v31 = *(void **)(a1 + 24);
    swift_bridgeObjectRetain();
    v33._uint64_t countAndFlagsBits = v32;
    v33._object = v31;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
    v34._object = (void *)0x8000000100650D80;
    String.append(_:)(v34);
    a1 = v61;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.invalidClaim(_:), v6);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return a1;
  }
  uint64_t v27 = *(void *)(a1 + 112);
  if (!v27) {
    goto LABEL_11;
  }
  swift_retain();
  swift_retain();
  uint64_t v28 = sub_1004D0898(v26, a2);
  if (v2)
  {
    swift_release();
    swift_release();
    return a1;
  }
  uint64_t v12 = v28;
  int v47 = v29;
  uint64_t v62 = sub_1004D0898(v27, a2);
  int v49 = v48;
  uint64_t v3 = 0;
  swift_release();
  swift_release();
  uint64_t v11 = v62;
  if ((v47 | v49))
  {
    int v13 = 1;
    goto LABEL_3;
  }
  swift_release();
  swift_release();
LABEL_2:
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
LABEL_3:
  uint64_t v14 = *(void *)(a1 + 104);
  uint64_t v58 = v12;
  uint64_t v59 = v3;
  int v57 = v10;
  uint64_t v62 = v11;
  if (v14 || *(void *)(a1 + 112))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v54 = *(void *)(a1 + 32);
    uint64_t v55 = v15;
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v53 = *(void *)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 64);
    uint64_t v20 = *(void *)(a1 + 72);
    uint64_t v22 = *(void *)(a1 + 80);
    uint64_t v21 = *(void *)(a1 + 88);
    uint64_t v23 = *(void *)(a1 + 96);
    LODWORD(v56) = v13;
    type metadata accessor for MerkleTreeDetached();
    a1 = swift_allocObject();
    *(void *)(a1 + 16) = v55;
    *(void *)(a1 + 24) = v16;
    *(void *)(a1 + 32) = v54;
    *(void *)(a1 + 40) = v17;
    *(void *)(a1 + 48) = v18;
    uint64_t v24 = v53;
    *(void *)(a1 + 56) = v53;
    *(void *)(a1 + 64) = v19;
    *(void *)(a1 + 72) = v20;
    *(void *)(a1 + 80) = v22;
    *(void *)(a1 + 88) = v21;
    *(void *)(a1 + 96) = v23;
    uint64_t v25 = v62;
    *(void *)(a1 + 104) = v58;
    *(void *)(a1 + 112) = v25;
    *(unsigned char *)(a1 + 120) = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1004D20F4(v18, v24);
  }
  else
  {
    uint64_t v35 = *(void *)(a1 + 16);
    uint64_t v36 = *(void *)(a1 + 24);
    char v37 = sub_10020F0CC(v35, v36, a2);
    uint64_t v38 = *(void *)(a1 + 32);
    uint64_t v39 = *(void *)(a1 + 40);
    if (v37)
    {
      uint64_t v40 = *(void *)(a1 + 48);
      uint64_t v41 = *(void *)(a1 + 56);
      uint64_t v42 = *(void *)(a1 + 64);
      uint64_t v55 = *(void *)(a1 + 72);
      uint64_t v56 = v42;
      uint64_t v43 = *(void *)(a1 + 88);
      uint64_t v54 = *(void *)(a1 + 80);
      uint64_t v44 = *(void *)(a1 + 96);
      type metadata accessor for MerkleTreeDetached();
      a1 = swift_allocObject();
      *(void *)(a1 + 16) = v35;
      *(void *)(a1 + 24) = v36;
      *(void *)(a1 + 32) = v38;
      *(void *)(a1 + 40) = v39;
      *(void *)(a1 + 48) = v40;
      *(void *)(a1 + 56) = v41;
      uint64_t v45 = v55;
      *(void *)(a1 + 64) = v56;
      *(void *)(a1 + 72) = v45;
      *(void *)(a1 + 80) = v54;
      *(void *)(a1 + 88) = v43;
      uint64_t v46 = v58;
      *(void *)(a1 + 96) = v44;
      *(void *)(a1 + 104) = v46;
      *(void *)(a1 + 112) = v62;
      *(unsigned char *)(a1 + 120) = v57;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1004D20F4(v40, v41);
    }
    else
    {
      type metadata accessor for MerkleTreeDetached();
      a1 = swift_allocObject();
      *(void *)(a1 + 16) = v35;
      *(void *)(a1 + 24) = v36;
      *(void *)(a1 + 32) = v38;
      *(void *)(a1 + 40) = v39;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      uint64_t v51 = v58;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = v51;
      *(void *)(a1 + 112) = v11;
      *(unsigned char *)(a1 + 120) = 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

unint64_t sub_1004D0D64()
{
  unint64_t result = qword_100730430;
  if (!qword_100730430)
  {
    sub_100019364(&qword_100730428);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730430);
  }
  return result;
}

uint64_t sub_1004D0DC0(uint64_t result, void *a2)
{
  uint64_t v2 = (void *)result;
  unint64_t v3 = a2[2];
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(result + 16);
  if (!v4) {
    return 1;
  }
  unint64_t result = a2[4];
  uint64_t v6 = a2[5];
  if (result != v2[4] || v6 != v2[5])
  {
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v8 = 0;
    if ((result & 1) == 0) {
      return v8;
    }
  }
  unint64_t v9 = v3 - 1;
  if (v3 != 1)
  {
    uint64_t v11 = v4 - 1;
    uint64_t v12 = a2 + 7;
    int v13 = v2 + 7;
    while (v9)
    {
      BOOL v8 = v11 == 0;
      if (!v11) {
        return v8;
      }
      unint64_t result = *(v12 - 1);
      if (result != *(v13 - 1) || *v12 != *v13)
      {
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          return v8;
        }
      }
      --v11;
      v12 += 2;
      v13 += 2;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    unint64_t v10 = v2[2];
    BOOL v8 = v3 == v10;
    if (v3 == v10)
    {
      swift_bridgeObjectRelease();
      return v8;
    }
    if (v3 < v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v8;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1004D0ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (void **)(a2 + 56);
    uint64_t v5 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v6 = (uint64_t)*(v4 - 3);
      uint64_t v7 = (uint64_t)*(v4 - 2);
      uint64_t v9 = (uint64_t)*(v4 - 1);
      BOOL v8 = *v4;
      *(void *)&v143[0] = v6;
      *((void *)&v143[0] + 1) = v7;
      if (v8)
      {
        *(void *)&v141[0] = 46;
        *((void *)&v141[0] + 1) = 0xE100000000000000;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v10._uint64_t countAndFlagsBits = v9;
        v10._object = v8;
        String.append(_:)(v10);
        v11._uint64_t countAndFlagsBits = 46;
        v11._object = (void *)0xE100000000000000;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        uint64_t v12 = *((void *)&v143[0] + 1);
        uint64_t v6 = *(void *)&v143[0];
      }
      else
      {
        swift_bridgeObjectRetain_n();
        uint64_t v12 = v7;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_10010F3C4(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v14 = *((void *)v5 + 2);
      unint64_t v13 = *((void *)v5 + 3);
      if (v14 >= v13 >> 1) {
        uint64_t v5 = sub_10010F3C4((char *)(v13 > 1), v14 + 1, 1, v5);
      }
      v4 += 5;
      *((void *)v5 + 2) = v14 + 1;
      uint64_t v15 = &v5[16 * v14];
      *((void *)v15 + 4) = v6;
      *((void *)v15 + 5) = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    uint64_t v16 = v5;
  }
  else
  {
    uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v17 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claimData);
  uint64_t v119 = v17 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(v17 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(v17 + 64);
  int64_t v121 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v140 = v16 + 32;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v22 = 0;
  uint64_t v123 = v17;
  uint64_t v124 = &_swiftEmptyDictionarySingleton;
  uint64_t v139 = v16;
  if (!v20) {
    goto LABEL_20;
  }
  while (2)
  {
    while (1)
    {
      unint64_t v23 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v24 = v23 | (v22 << 6);
LABEL_38:
      uint64_t v28 = (void *)(*(void *)(v17 + 48) + 16 * v24);
      uint64_t v29 = v28[1];
      *(void *)&long long v134 = *v28;
      Swift::String v30 = (_OWORD *)(*(void *)(v17 + 56) + 96 * v24);
      long long v31 = v30[1];
      v141[0] = *v30;
      v141[1] = v31;
      long long v32 = v30[2];
      long long v33 = v30[3];
      long long v34 = v30[4];
      *(_OWORD *)&v142[9] = *(_OWORD *)((char *)v30 + 73);
      v141[3] = v33;
      *(_OWORD *)uint64_t v142 = v34;
      v141[2] = v32;
      uint64_t v35 = *((void *)v16 + 2);
      *((void *)&v134 + 1) = v29;
      swift_bridgeObjectRetain();
      sub_1001D7CB8((uint64_t)v141);
      if (v35) {
        break;
      }
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v20) {
        goto LABEL_20;
      }
    }
    unint64_t v128 = v20;
    int64_t v131 = v22;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v36 = 0;
    while (1)
    {
      if (v36 >= *((void *)v16 + 2)) {
        goto LABEL_204;
      }
      char v37 = &v140[2 * v36];
      uint64_t v38 = *v37;
      uint64_t v39 = v37[1];
      v143[0] = v134;
      sub_1000B5358();
      swift_bridgeObjectRetain();
      uint64_t v40 = (void *)StringProtocol.components<A>(separatedBy:)();
      *(void *)&v143[0] = v38;
      *((void *)&v143[0] + 1) = v39;
      uint64_t v41 = (void *)StringProtocol.components<A>(separatedBy:)();
      uint64_t v42 = v41;
      unint64_t v43 = v40[2];
      if (v43)
      {
        uint64_t v44 = v41[2];
        if (!v44) {
          goto LABEL_72;
        }
        BOOL v45 = v40[4] == v41[4] && v40[5] == v41[5];
        if (!v45 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
LABEL_40:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v16 = v139;
          goto LABEL_41;
        }
        if (v43 != 1) {
          break;
        }
      }
LABEL_58:
      unint64_t v48 = v42[2];
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      BOOL v49 = v43 >= v48;
      if (v43 == v48) {
        goto LABEL_73;
      }
      uint64_t v16 = v139;
      if (v49) {
        goto LABEL_207;
      }
LABEL_41:
      ++v36;
      uint64_t result = swift_bridgeObjectRelease();
      if (v36 == v35)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = v123;
        unint64_t v20 = v128;
        int64_t v22 = v131;
        goto LABEL_18;
      }
    }
    if (v44 != 1)
    {
      uint64_t result = v40[6];
      if (result != v42[6] || v40[7] != v42[7])
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          goto LABEL_40;
        }
      }
      unint64_t v47 = v43 - 2;
      if (v43 != 2)
      {
        uint64_t v50 = 0;
        uint64_t v51 = v44 - 2;
        while (v47)
        {
          if (!v51) {
            goto LABEL_72;
          }
          uint64_t result = v40[v50 + 8];
          if (result != v42[v50 + 8] || v40[v50 + 9] != v42[v50 + 9])
          {
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              goto LABEL_40;
            }
          }
          --v51;
          v50 += 2;
          if (!--v47) {
            goto LABEL_58;
          }
        }
        __break(1u);
LABEL_204:
        __break(1u);
        goto LABEL_205;
      }
      goto LABEL_58;
    }
LABEL_72:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_73:
    uint64_t v16 = v139;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001D7C4C((uint64_t)v141);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v143[0] = v124;
    sub_100562E48(v141, v134, *((uint64_t *)&v134 + 1), isUniquelyReferenced_nonNull_native);
    uint64_t v124 = *(void **)&v143[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v17 = v123;
    unint64_t v20 = v128;
    int64_t v22 = v131;
    if (v128) {
      continue;
    }
    break;
  }
LABEL_20:
  int64_t v25 = v22 + 1;
  if (__OFADD__(v22, 1)) {
    goto LABEL_212;
  }
  if (v25 < v121)
  {
    unint64_t v26 = *(void *)(v119 + 8 * v25);
    ++v22;
    if (v26) {
      goto LABEL_37;
    }
    int64_t v22 = v25 + 1;
    if (v25 + 1 < v121)
    {
      unint64_t v26 = *(void *)(v119 + 8 * v22);
      if (v26) {
        goto LABEL_37;
      }
      int64_t v22 = v25 + 2;
      if (v25 + 2 < v121)
      {
        unint64_t v26 = *(void *)(v119 + 8 * v22);
        if (v26) {
          goto LABEL_37;
        }
        int64_t v22 = v25 + 3;
        if (v25 + 3 < v121)
        {
          unint64_t v26 = *(void *)(v119 + 8 * v22);
          if (v26) {
            goto LABEL_37;
          }
          int64_t v22 = v25 + 4;
          if (v25 + 4 < v121)
          {
            unint64_t v26 = *(void *)(v119 + 8 * v22);
            if (v26) {
              goto LABEL_37;
            }
            int64_t v27 = v25 + 5;
            if (v27 < v121)
            {
              unint64_t v26 = *(void *)(v119 + 8 * v27);
              if (v26)
              {
                int64_t v22 = v27;
LABEL_37:
                unint64_t v20 = (v26 - 1) & v26;
                unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
                goto LABEL_38;
              }
              while (1)
              {
                int64_t v22 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  goto LABEL_215;
                }
                if (v22 >= v121) {
                  break;
                }
                unint64_t v26 = *(void *)(v119 + 8 * v22);
                ++v27;
                if (v26) {
                  goto LABEL_37;
                }
              }
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v54 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_unverifiedClaimData);
  uint64_t v118 = v54 + 64;
  uint64_t v55 = 1 << *(unsigned char *)(v54 + 32);
  uint64_t v56 = -1;
  if (v55 < 64) {
    uint64_t v56 = ~(-1 << v55);
  }
  unint64_t v57 = v56 & *(void *)(v54 + 64);
  int64_t v120 = (unint64_t)(v55 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v58 = 0;
  uint64_t v122 = v54;
  if (!v57) {
    goto LABEL_82;
  }
  while (2)
  {
    while (1)
    {
      unint64_t v59 = __clz(__rbit64(v57));
      v57 &= v57 - 1;
      unint64_t v60 = v59 | (v58 << 6);
LABEL_100:
      uint64_t v64 = (uint64_t *)(*(void *)(v54 + 48) + 16 * v60);
      uint64_t v65 = v64[1];
      uint64_t v137 = *v64;
      uint64_t v66 = (_OWORD *)(*(void *)(v54 + 56) + 96 * v60);
      long long v67 = v66[1];
      v143[0] = *v66;
      v143[1] = v67;
      long long v68 = v66[2];
      long long v69 = v66[3];
      long long v70 = v66[4];
      *(_OWORD *)&v144[9] = *(_OWORD *)((char *)v66 + 73);
      v143[3] = v69;
      *(_OWORD *)uint64_t v144 = v70;
      uint64_t v143[2] = v68;
      uint64_t v135 = *((void *)v16 + 2);
      if (v135) {
        break;
      }
      swift_bridgeObjectRetain();
      sub_1001D7CB8((uint64_t)v143);
LABEL_80:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v57) {
        goto LABEL_82;
      }
    }
    unint64_t v129 = v57;
    int64_t v132 = v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = sub_1001D7CB8((uint64_t)v143);
    unint64_t v71 = 0;
    while (2)
    {
      if (v71 >= *((void *)v16 + 2)) {
        goto LABEL_206;
      }
      uint64_t v72 = v65;
      sub_1000B5358();
      swift_bridgeObjectRetain();
      os_log_type_t v73 = (void *)StringProtocol.components<A>(separatedBy:)();
      uint64_t v74 = (void *)StringProtocol.components<A>(separatedBy:)();
      uint64_t v75 = v74;
      unint64_t v76 = v73[2];
      if (!v76)
      {
LABEL_120:
        unint64_t v81 = v75[2];
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v82 = v76 >= v81;
        if (v76 == v81) {
          goto LABEL_135;
        }
        uint64_t v16 = v139;
        uint64_t v65 = v72;
        if (v82) {
          goto LABEL_208;
        }
        goto LABEL_103;
      }
      uint64_t v77 = v74[2];
      if (!v77) {
        break;
      }
      BOOL v78 = v73[4] == v74[4] && v73[5] == v74[5];
      if (!v78 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_102;
      }
      if (v76 == 1) {
        goto LABEL_120;
      }
      if (v77 != 1)
      {
        uint64_t result = v73[6];
        BOOL v79 = result == v75[6] && v73[7] == v75[7];
        if (v79 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          unint64_t v80 = v76 - 2;
          if (v76 != 2)
          {
            uint64_t v83 = 0;
            uint64_t v84 = v77 - 2;
            while (v80)
            {
              if (!v84) {
                goto LABEL_134;
              }
              uint64_t result = v73[v83 + 8];
              if (result != v75[v83 + 8] || v73[v83 + 9] != v75[v83 + 9])
              {
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) == 0) {
                  goto LABEL_102;
                }
              }
              --v84;
              v83 += 2;
              if (!--v80) {
                goto LABEL_120;
              }
            }
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
            goto LABEL_209;
          }
          goto LABEL_120;
        }
LABEL_102:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v16 = v139;
        uint64_t v65 = v72;
LABEL_103:
        ++v71;
        uint64_t result = swift_bridgeObjectRelease();
        if (v71 == v135)
        {
          swift_bridgeObjectRelease();
          uint64_t v54 = v122;
          unint64_t v57 = v129;
          int64_t v58 = v132;
          goto LABEL_80;
        }
        continue;
      }
      break;
    }
LABEL_134:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_135:
    uint64_t v16 = v139;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001D7C4C((uint64_t)v143);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v86 = swift_isUniquelyReferenced_nonNull_native();
    sub_100562E48(v143, v137, v72, v86);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v54 = v122;
    unint64_t v57 = v129;
    int64_t v58 = v132;
    if (v129) {
      continue;
    }
    break;
  }
LABEL_82:
  int64_t v61 = v58 + 1;
  if (__OFADD__(v58, 1)) {
    goto LABEL_213;
  }
  if (v61 < v120)
  {
    unint64_t v62 = *(void *)(v118 + 8 * v61);
    ++v58;
    if (v62) {
      goto LABEL_99;
    }
    int64_t v58 = v61 + 1;
    if (v61 + 1 < v120)
    {
      unint64_t v62 = *(void *)(v118 + 8 * v58);
      if (v62) {
        goto LABEL_99;
      }
      int64_t v58 = v61 + 2;
      if (v61 + 2 < v120)
      {
        unint64_t v62 = *(void *)(v118 + 8 * v58);
        if (v62) {
          goto LABEL_99;
        }
        int64_t v58 = v61 + 3;
        if (v61 + 3 < v120)
        {
          unint64_t v62 = *(void *)(v118 + 8 * v58);
          if (v62) {
            goto LABEL_99;
          }
          int64_t v58 = v61 + 4;
          if (v61 + 4 < v120)
          {
            unint64_t v62 = *(void *)(v118 + 8 * v58);
            if (v62) {
              goto LABEL_99;
            }
            int64_t v63 = v61 + 5;
            if (v63 < v120)
            {
              unint64_t v62 = *(void *)(v118 + 8 * v63);
              if (v62)
              {
                int64_t v58 = v63;
LABEL_99:
                unint64_t v57 = (v62 - 1) & v62;
                unint64_t v60 = __clz(__rbit64(v62)) + (v58 << 6);
                goto LABEL_100;
              }
              while (1)
              {
                int64_t v58 = v63 + 1;
                if (__OFADD__(v63, 1)) {
                  goto LABEL_216;
                }
                if (v58 >= v120) {
                  break;
                }
                unint64_t v62 = *(void *)(v118 + 8 * v58);
                ++v63;
                if (v62) {
                  goto LABEL_99;
                }
              }
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v87 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData);
  if (!v87)
  {
    swift_bridgeObjectRelease();
    sub_10015DC98((uint64_t)_swiftEmptyArrayStorage);
    return (uint64_t)v124;
  }
  uint64_t v125 = v87 + 64;
  uint64_t v88 = 1 << *(unsigned char *)(v87 + 32);
  uint64_t v89 = -1;
  if (v88 < 64) {
    uint64_t v89 = ~(-1 << v88);
  }
  unint64_t v90 = v89 & *(void *)(v87 + 64);
  int64_t v126 = (unint64_t)(v88 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v91 = 0;
  uint64_t v127 = v87;
  do
  {
LABEL_144:
    while (v90)
    {
      unint64_t v92 = __clz(__rbit64(v90));
      v90 &= v90 - 1;
      unint64_t v93 = v92 | (v91 << 6);
      uint64_t v94 = *((void *)v16 + 2);
      if (v94) {
        goto LABEL_165;
      }
    }
    int64_t v95 = v91 + 1;
    if (__OFADD__(v91, 1)) {
      goto LABEL_214;
    }
    if (v95 >= v126) {
      goto LABEL_200;
    }
    unint64_t v96 = *(void *)(v125 + 8 * v95);
    ++v91;
    if (!v96)
    {
      int64_t v91 = v95 + 1;
      if (v95 + 1 >= v126) {
        goto LABEL_200;
      }
      unint64_t v96 = *(void *)(v125 + 8 * v91);
      if (!v96)
      {
        int64_t v91 = v95 + 2;
        if (v95 + 2 >= v126) {
          goto LABEL_200;
        }
        unint64_t v96 = *(void *)(v125 + 8 * v91);
        if (!v96)
        {
          int64_t v91 = v95 + 3;
          if (v95 + 3 >= v126) {
            goto LABEL_200;
          }
          unint64_t v96 = *(void *)(v125 + 8 * v91);
          if (!v96)
          {
            int64_t v91 = v95 + 4;
            if (v95 + 4 >= v126) {
              goto LABEL_200;
            }
            unint64_t v96 = *(void *)(v125 + 8 * v91);
            if (!v96)
            {
              int64_t v97 = v95 + 5;
              if (v97 >= v126) {
                goto LABEL_200;
              }
              unint64_t v96 = *(void *)(v125 + 8 * v97);
              if (!v96)
              {
                while (1)
                {
                  int64_t v91 = v97 + 1;
                  if (__OFADD__(v97, 1)) {
                    goto LABEL_217;
                  }
                  if (v91 >= v126) {
                    break;
                  }
                  unint64_t v96 = *(void *)(v125 + 8 * v91);
                  ++v97;
                  if (v96) {
                    goto LABEL_164;
                  }
                }
LABEL_200:
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                return (uint64_t)v124;
              }
              int64_t v91 = v97;
            }
          }
        }
      }
    }
LABEL_164:
    unint64_t v90 = (v96 - 1) & v96;
    unint64_t v93 = __clz(__rbit64(v96)) + (v91 << 6);
    uint64_t v94 = *((void *)v16 + 2);
  }
  while (!v94);
LABEL_165:
  unint64_t v130 = v90;
  int64_t v133 = v91;
  uint64_t v98 = *(void *)(v87 + 56);
  unint64_t v99 = (uint64_t *)(*(void *)(v87 + 48) + 16 * v93);
  uint64_t v100 = v99[1];
  uint64_t v136 = *v99;
  uint64_t v101 = *(void *)(v98 + 8 * v93);
  swift_bridgeObjectRetain();
  uint64_t v138 = v100;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  unint64_t v102 = 0;
  while (2)
  {
    if (v102 >= *((void *)v16 + 2)) {
      goto LABEL_210;
    }
    sub_1000B5358();
    swift_bridgeObjectRetain();
    uint64_t v103 = (void *)StringProtocol.components<A>(separatedBy:)();
    uint64_t v104 = (void *)StringProtocol.components<A>(separatedBy:)();
    uint64_t v105 = v104;
    unint64_t v106 = v103[2];
    if (!v106) {
      goto LABEL_184;
    }
    uint64_t v107 = v104[2];
    if (!v107) {
      goto LABEL_198;
    }
    BOOL v108 = v103[4] == v104[4] && v103[5] == v104[5];
    if (!v108 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
LABEL_166:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = v139;
LABEL_167:
      ++v102;
      uint64_t result = swift_bridgeObjectRelease();
      if (v102 != v94) {
        continue;
      }
      swift_release();
      swift_bridgeObjectRelease();
LABEL_143:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v87 = v127;
      unint64_t v90 = v130;
      int64_t v91 = v133;
      goto LABEL_144;
    }
    break;
  }
  if (v106 == 1)
  {
LABEL_184:
    unint64_t v111 = v105[2];
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v112 = v106 >= v111;
    if (v106 == v111) {
      goto LABEL_199;
    }
    uint64_t v16 = v139;
    if (v112) {
      goto LABEL_211;
    }
    goto LABEL_167;
  }
  if (v107 == 1)
  {
LABEL_198:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_199:
    uint64_t v16 = v139;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_retain();
    char v116 = swift_isUniquelyReferenced_nonNull_native();
    sub_100562E1C(v101, v136, v138, v116);
    swift_release();
    swift_bridgeObjectRelease_n();
    goto LABEL_143;
  }
  uint64_t result = v103[6];
  if (result != v105[6] || v103[7] != v105[7])
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0) {
      goto LABEL_166;
    }
  }
  unint64_t v110 = v106 - 2;
  if (v106 == 2) {
    goto LABEL_184;
  }
  uint64_t v113 = 0;
  uint64_t v114 = v107 - 2;
  while (v110)
  {
    if (!v114) {
      goto LABEL_198;
    }
    uint64_t result = v103[v113 + 8];
    if (result != v105[v113 + 8] || v103[v113 + 9] != v105[v113 + 9])
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        goto LABEL_166;
      }
    }
    --v114;
    v113 += 2;
    if (!--v110) {
      goto LABEL_184;
    }
  }
LABEL_209:
  __break(1u);
LABEL_210:
  __break(1u);
LABEL_211:
  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
  return result;
}

uint64_t sub_1004D1F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VerifiedClaim(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004D1F8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VerifiedClaim(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004D1FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VerifiedClaim(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1004D204C()
{
  unint64_t result = qword_100730438;
  if (!qword_100730438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730438);
  }
  return result;
}

unint64_t sub_1004D20A0()
{
  unint64_t result = qword_100730440;
  if (!qword_100730440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730440);
  }
  return result;
}

uint64_t sub_1004D20F4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_1004D2144(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned __int8 v3 = a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v44 = a1;
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (void **)(a3 + 56);
    uint64_t v7 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = (uint64_t)*(v6 - 3);
      uint64_t v9 = (uint64_t)*(v6 - 2);
      uint64_t v11 = (uint64_t)*(v6 - 1);
      Swift::String v10 = *v6;
      if (*v6)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v12._uint64_t countAndFlagsBits = v11;
        v12._object = v10;
        String.append(_:)(v12);
        v13._uint64_t countAndFlagsBits = 46;
        v13._object = (void *)0xE100000000000000;
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain_n();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_10010F3C4(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v14 = v7;
      unint64_t v15 = *((void *)v7 + 2);
      uint64_t v16 = v14;
      unint64_t v17 = *((void *)v14 + 3);
      if (v15 >= v17 >> 1) {
        uint64_t v16 = sub_10010F3C4((char *)(v17 > 1), v15 + 1, 1, v16);
      }
      v6 += 5;
      *((void *)v16 + 2) = v15 + 1;
      uint64_t v18 = &v16[16 * v15];
      uint64_t v7 = v16;
      *((void *)v18 + 4) = v8;
      *((void *)v18 + 5) = v9;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a1 = v44;
    unsigned __int8 v3 = a2;
  }
  else
  {
    uint64_t v7 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v48 = *(void *)(a1 + 16);
  if (!v48)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v47 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  uint64_t v46 = v3;
  BOOL v45 = v7;
  while (2)
  {
    uint64_t v20 = v47 + 40 * v19;
    uint64_t v21 = *(void *)v20;
    long long v53 = *(_OWORD *)(v20 + 8);
    int64_t v22 = (void *)0xE400000000000000;
    uint64_t v23 = 1701736302;
    uint64_t v50 = *(void *)(v20 + 24);
    switch(v46)
    {
      case 1:
        int64_t v22 = (void *)0xE800000000000000;
        uint64_t v23 = 0x6E692D646579656BLL;
        break;
      case 2:
        int64_t v22 = (void *)0xEA00000000006465;
        uint64_t v23 = 0x6966697265766E75;
        break;
      case 3:
        int64_t v22 = (void *)0xE800000000000000;
        uint64_t v23 = 0x746E656D75636F64;
        break;
      case 4:
        int64_t v22 = (void *)0x8000000100650DE0;
        uint64_t v23 = 0xD000000000000010;
        break;
      default:
        break;
    }
    uint64_t v52 = *(void *)(v20 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = v23;
    v24._object = v22;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 46;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    swift_bridgeObjectRetain();
    uint64_t v51 = v21;
    v26._uint64_t countAndFlagsBits = v21;
    v26._object = (void *)v53;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    uint64_t v27 = *((void *)v7 + 2);
    if (!v27)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    uint64_t v49 = v19;
    swift_bridgeObjectRetain();
    sub_1000B5358();
    uint64_t v28 = 0;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = (void *)StringProtocol.components<A>(separatedBy:)();
      Swift::String v30 = (void *)StringProtocol.components<A>(separatedBy:)();
      long long v31 = v30;
      unint64_t v32 = v29[2];
      if (!v32) {
        break;
      }
      uint64_t v33 = v30[2];
      if (!v33)
      {
LABEL_47:
        uint64_t v7 = v45;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      BOOL v34 = v29[4] == v30[4] && v29[5] == v30[5];
      if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        unint64_t v35 = v32 - 1;
        if (v32 != 1)
        {
          uint64_t v37 = 0;
          uint64_t v38 = v33 - 1;
          while (v35)
          {
            if (!v38) {
              goto LABEL_47;
            }
            BOOL v39 = v29[v37 + 6] == v31[v37 + 6] && v29[v37 + 7] == v31[v37 + 7];
            if (!v39 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_44;
            }
            --v38;
            v37 += 2;
            if (!--v35) {
              goto LABEL_32;
            }
          }
          __break(1u);
LABEL_58:
          __break(1u);
          JUMPOUT(0x1004D26FCLL);
        }
        break;
      }
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_45:
      if (++v28 == v27)
      {
        swift_bridgeObjectRelease();
        uint64_t v7 = v45;
        uint64_t v19 = v49;
        goto LABEL_15;
      }
    }
LABEL_32:
    unint64_t v36 = v31[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v32 != v36)
    {
      if (v32 >= v36) {
        goto LABEL_58;
      }
      goto LABEL_45;
    }
    uint64_t v7 = v45;
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v19 = v49;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1001115C0(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v41 = _swiftEmptyArrayStorage[2];
    unint64_t v40 = _swiftEmptyArrayStorage[3];
    if (v41 >= v40 >> 1) {
      sub_1001115C0(v40 > 1, v41 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v41 + 1;
    uint64_t v42 = &_swiftEmptyArrayStorage[5 * v41];
    _OWORD v42[4] = v51;
    *(_OWORD *)(v42 + 5) = v53;
    v42[7] = v50;
    v42[8] = v52;
LABEL_16:
    if (++v19 != v48) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t type metadata accessor for AssetsFetcher()
{
  return self;
}

uint64_t sub_1004D2734()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v0 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v1 = (uint64_t)&v0[4];
  uint64_t v2 = v0 + 52;
  os_unfair_lock_lock(v0 + 52);
  sub_1000262B4(v1, v7);
  os_unfair_lock_unlock(v2);
  unsigned __int8 v3 = v8;
  sub_10003BDD0((uint64_t)v8);
  uint64_t v4 = sub_1000262D0((uint64_t)v7);
  if (v3)
  {
    uint64_t v5 = v3(v4);
    sub_10003BEDC((uint64_t)v3);
  }
  else
  {
    type metadata accessor for AssetsFetcher();
    return swift_allocObject();
  }
  return v5;
}

uint64_t sub_1004D281C(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  sub_100007764(&qword_1007254C8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPSignpost.Config();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPSignpost();
  v2[11] = v5;
  v2[12] = *(void *)(v5 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v2[14] = v6;
  v2[15] = *(void *)(v6 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v2[17] = v7;
  v2[18] = *(void *)(v7 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_1004D2A8C, 0, 0);
}

uint64_t sub_1004D2A8C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Will attempt to get Identity Proofing Static asset meta data", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[18];
  uint64_t v8 = v0[15];
  uint64_t v7 = v0[16];
  uint64_t v9 = v0[14];

  Swift::String v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[21] = v10;
  v0[22] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v4, v5);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  uint64_t v11 = sub_10015A59C(1);
  v0[23] = v11;
  swift_bridgeObjectRelease();
  if (v11)
  {
    uint64_t v12 = v0[9];
    uint64_t v14 = v0[7];
    uint64_t v13 = v0[8];
    static DaemonSignposts.fetchIdentityStaticAssetTotal.getter();
    DIPSignpost.init(_:)();
    static DaemonSignposts.fetchIdentityStaticAssetRequest.getter();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v13);
    unint64_t v15 = (void *)swift_task_alloc();
    v0[24] = v15;
    *unint64_t v15 = v0;
    v15[1] = sub_1004D2E10;
    uint64_t v16 = v0[7];
    return sub_1001532EC(0xD000000000000024, 0x800000010062AD00, 0x6A2E737465737361, 0xEB000000006E6F73, 2, v16);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.staticWebServiceUnavailable(_:), v0[4]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_1004D2E10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[25] = a2;
  v5[26] = v2;
  swift_task_dealloc();
  uint64_t v6 = v5[7];
  if (v2)
  {
    sub_1002783F4(v6);
    uint64_t v7 = sub_1004D3780;
  }
  else
  {
    v5[27] = a1;
    sub_1002783F4(v6);
    uint64_t v7 = sub_1004D2F58;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1004D2F58()
{
  uint64_t v1 = v0[25];
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v2 = v0[25];
    if (*(void *)(v2 + 16))
    {
      uint64_t v4 = v0[2];
      uint64_t v3 = v0[3];
      swift_bridgeObjectRetain();
      unint64_t v5 = sub_100590548(v4, v3);
      if (v6)
      {
        uint64_t v7 = (uint64_t *)(*(void *)(v2 + 56) + 32 * v5);
        uint64_t v8 = *v7;
        uint64_t v9 = v7[1];
        v0[28] = v9;
        v0[29] = v7[2];
        v0[30] = v7[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Swift::String v10 = (void *)swift_task_alloc();
        v0[31] = v10;
        void *v10 = v0;
        v10[1] = sub_1004D3270;
        return sub_1001575E8(v8, v9);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = v0[12];
  uint64_t v18 = v0[11];
  uint64_t v19 = v0[13];
  uint64_t v13 = v0[5];
  uint64_t v14 = v0[6];
  uint64_t v15 = v0[4];
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16._object = (void *)0x8000000100650ED0;
  v16._uint64_t countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v16);
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v14, enum case for DIPError.Code.invalidStaticImageAssetData(_:), v15);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v19, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1004D3270(uint64_t a1, unint64_t a2)
{
  char v6 = (void *)*v3;
  v6[32] = a1;
  v6[33] = a2;
  v6[34] = v2;
  swift_task_dealloc();
  if (v2)
  {
    return _swift_task_switch(sub_1004D3954, 0, 0);
  }
  else
  {
    sub_10002CEB0(a1, a2);
    uint64_t v7 = (void *)swift_task_alloc();
    v6[35] = v7;
    *uint64_t v7 = v6;
    v7[1] = sub_1004D3408;
    uint64_t v8 = v6[30];
    uint64_t v9 = v6[29];
    return sub_1001575E8(v9, v8);
  }
}

uint64_t sub_1004D3408(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[36] = a1;
  v4[37] = a2;
  v4[38] = v2;
  swift_task_dealloc();
  if (v2)
  {
    unint64_t v5 = sub_1004D3A50;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v5 = sub_1004D3534;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1004D3534()
{
  sub_10002CEB0(v0[36], v0[37]);
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Asset data downloaded successfully", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[36];
  unint64_t v4 = v0[37];
  uint64_t v6 = v0[32];
  unint64_t v7 = v0[33];
  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[21];
  uint64_t v9 = v1;
  uint64_t v10 = v0[19];
  uint64_t v11 = v0[17];
  uint64_t v12 = v0[13];
  uint64_t v17 = v0[12];
  uint64_t v18 = v0[11];

  v8(v10, v11);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  id v13 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingAssetData());
  swift_bridgeObjectRetain();
  sub_10002CEB0(v6, v7);
  sub_10002CEB0(v5, v4);
  uint64_t v14 = IdentityProofingAssetData.init(twoX:threeX:assetId:)();
  swift_release();
  sub_10000C5F4(v5, v4);
  sub_10000C5F4(v6, v7);
  sub_10000C5F4(v5, v4);
  sub_10000C5F4(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v12, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
  return v15(v14);
}

uint64_t sub_1004D3780()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004D3954()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004D3A50()
{
  uint64_t v1 = v0[32];
  unint64_t v2 = v0[33];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v5 = v0[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000C5F4(v1, v2);
  sub_10000C5F4(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1004D3B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[12] = v7;
  v4[13] = *(void *)(v7 - 8);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_1004D3CE4, 0, 0);
}

uint64_t sub_1004D3CE4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Will attempt to refresh Identity Proofing Static asset ", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v7 = v0[11];
  uint64_t v6 = v0[12];
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[10];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  uint64_t v10 = sub_10015A59C(1);
  v0[15] = v10;
  swift_bridgeObjectRelease();
  if (v10)
  {
    uint64_t v11 = (void *)swift_task_alloc();
    v0[16] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1004D3FB0;
    uint64_t v12 = v0[4];
    uint64_t v13 = v0[5];
    uint64_t v15 = v0[2];
    uint64_t v14 = v0[3];
    return sub_100154948(v15, v14, v12, v13);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.staticWebServiceUnavailable(_:), v0[6]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_1004D3FB0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1004D40AC, 0, 0);
}

uint64_t sub_1004D40AC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004D4138(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100471560(*a1, *a2);
}

Swift::Int sub_1004D4144()
{
  return Hasher._finalize()();
}

uint64_t sub_1004D41DC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004D4260()
{
  return Hasher._finalize()();
}

unint64_t sub_1004D42F4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004DA83C(*a1);
  *a2 = result;
  return result;
}

void sub_1004D4324(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x44454C4542414CLL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x44454C494146;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 5719374;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1004D437C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1004D84D8(v0 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim, type metadata accessor for VerifiedClaim);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1004D4424()
{
  sub_1004D437C();

  return swift_deallocClassInstance();
}

uint64_t sub_1004D447C()
{
  return type metadata accessor for DIPStoredVerifiedClaim(0);
}

uint64_t type metadata accessor for DIPStoredVerifiedClaim(uint64_t a1)
{
  return sub_100048DF0(a1, qword_100730530);
}

uint64_t sub_1004D44A4()
{
  uint64_t result = type metadata accessor for VerifiedClaim(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004D4560()
{
  uint64_t v1 = 0x654B63696C627570;
  if (*v0 != 1) {
    uint64_t v1 = 1752392040;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t sub_1004D45B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004DA888(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004D45DC(uint64_t a1)
{
  unint64_t v2 = sub_1004D6028();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D4618(uint64_t a1)
{
  unint64_t v2 = sub_1004D6028();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D4654()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_value;
  uint64_t v2 = sub_100007764((uint64_t *)&unk_100726030);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1004D4720()
{
  return type metadata accessor for VerifiedEncryptedDataWrapper(0);
}

uint64_t type metadata accessor for VerifiedEncryptedDataWrapper(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100730700);
}

void sub_1004D4748()
{
  sub_1004D49D0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1004D47E4(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100730880);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1004D6028();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  sub_100007764((uint64_t *)&unk_100726030);
  sub_1000B6120(&qword_1007265D0, (uint64_t *)&unk_100726030);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1004D49D0()
{
  if (!qword_100730710)
  {
    sub_100019364(&qword_1007264A0);
    sub_1001D5D7C();
    sub_1001D5E1C();
    unint64_t v0 = type metadata accessor for EncryptedMessage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100730710);
    }
  }
}

uint64_t *sub_1004D4A4C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v49 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v49 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v4 + v13);
    Swift::String v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (uint64_t *)((char *)v4 + v14);
    uint64_t v19 = (uint64_t *)((char *)a2 + v14);
    uint64_t v51 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v51;
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    int64_t v22 = (uint64_t *)((char *)v4 + v20);
    uint64_t v23 = (uint64_t *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    void *v22 = *v23;
    v22[1] = v24;
    Swift::String v25 = (uint64_t *)((char *)v4 + v21);
    Swift::String v26 = (uint64_t *)((char *)a2 + v21);
    uint64_t v27 = v26[1];
    *Swift::String v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = a3[10];
    uint64_t v29 = a3[11];
    Swift::String v30 = (uint64_t *)((char *)v4 + v28);
    long long v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *Swift::String v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = (uint64_t *)((char *)v4 + v29);
    BOOL v34 = (uint64_t *)((char *)a2 + v29);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = a3[12];
    uint64_t v37 = a3[13];
    uint64_t v38 = (uint64_t *)((char *)v4 + v36);
    BOOL v39 = (uint64_t *)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    *(uint64_t *)((char *)v4 + v37) = *(uint64_t *)((char *)a2 + v37);
    uint64_t v41 = a3[15];
    *(uint64_t *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    uint64_t v42 = (uint64_t *)((char *)v4 + v41);
    unint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = a3[16];
    uint64_t v46 = (uint64_t *)((char *)v4 + v45);
    uint64_t v47 = (uint64_t *)((char *)a2 + v45);
    uint64_t v48 = v47[1];
    *uint64_t v46 = *v47;
    v46[1] = v48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1004D4C54(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1004D4D70(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)((char *)a1 + v13);
  uint64_t v18 = (void *)((char *)a2 + v13);
  uint64_t v49 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v49;
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)((char *)a1 + v19);
  int64_t v22 = (void *)((char *)a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = (void *)((char *)a1 + v20);
  Swift::String v25 = (void *)((char *)a2 + v20);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = a3[10];
  uint64_t v28 = a3[11];
  uint64_t v29 = (void *)((char *)a1 + v27);
  Swift::String v30 = (void *)((char *)a2 + v27);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = (void *)((char *)a1 + v28);
  uint64_t v33 = (void *)((char *)a2 + v28);
  uint64_t v34 = v33[1];
  void *v32 = *v33;
  v32[1] = v34;
  uint64_t v35 = a3[12];
  uint64_t v36 = a3[13];
  uint64_t v37 = (void *)((char *)a1 + v35);
  uint64_t v38 = (void *)((char *)a2 + v35);
  uint64_t v39 = v38[1];
  void *v37 = *v38;
  v37[1] = v39;
  *(void *)((char *)a1 + v36) = *(void *)((char *)a2 + v36);
  uint64_t v40 = a3[15];
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v43 = v42[1];
  *uint64_t v41 = *v42;
  v41[1] = v43;
  uint64_t v44 = a3[16];
  uint64_t v45 = (void *)((char *)a1 + v44);
  uint64_t v46 = (void *)((char *)a2 + v44);
  uint64_t v47 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1004D4F28(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[10];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[12];
  uint64_t v29 = (void *)((char *)a1 + v28);
  Swift::String v30 = (void *)((char *)a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[15];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  void *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[16];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1004D5180(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  uint64_t v13 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  uint64_t v14 = a3[15];
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)((char *)a2 + a3[16]);
  return a1;
}

void *sub_1004D527C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  void *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[8];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  void *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[9];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *uint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[10];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[11];
  uint64_t v37 = (void *)((char *)a1 + v36);
  uint64_t v38 = (void *)((char *)a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  void *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[12];
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)((char *)a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[14];
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  *(void *)((char *)a1 + v46) = *(void *)((char *)a2 + v46);
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[15];
  uint64_t v48 = (void *)((char *)a1 + v47);
  uint64_t v49 = (void *)((char *)a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  *uint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[16];
  long long v53 = (void *)((char *)a1 + v52);
  uint64_t v54 = (void *)((char *)a2 + v52);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  *long long v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004D5428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004D543C);
}

uint64_t sub_1004D543C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1004D54EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004D5500);
}

uint64_t sub_1004D5500(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for DIPPregeneratedAssessment(uint64_t a1)
{
  return sub_100048DF0(a1, qword_100730808);
}

uint64_t sub_1004D55C8()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1004D5690(void *a1)
{
  uint64_t v3 = sub_100007764((uint64_t *)&unk_100726030);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v21 = sub_100007764(&qword_100730870);
  uint64_t v4 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004D6028();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v7 = v22;
    type metadata accessor for VerifiedEncryptedDataWrapper(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v8 = v4;
    uint64_t v9 = v20;
    char v25 = 0;
    sub_1000B6120(&qword_1007265C8, (uint64_t *)&unk_100726030);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v22;
    uint64_t v10 = *(void (**)(void))(v9 + 32);
    uint64_t v19 = v22 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_value;
    v10();
    char v24 = 1;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v12 = (uint64_t *)(v7 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey);
    uint64_t *v12 = v11;
    v12[1] = v13;
    char v23 = 2;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v21);
    uint64_t v18 = (uint64_t *)(v7 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_hash);
    *uint64_t v18 = v15;
    v18[1] = v17;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v7;
}

uint64_t sub_1004D5A18@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for VerifiedEncryptedDataWrapper(0);
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1004D5690(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1004D5A74(void *a1)
{
  return sub_1004D47E4(a1);
}

Swift::Int sub_1004D5A98()
{
  return Hasher._finalize()();
}

uint64_t sub_1004D5AEC()
{
  return String.hash(into:)();
}

Swift::Int sub_1004D5B04()
{
  return Hasher._finalize()();
}

uint64_t sub_1004D5B54@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3AF8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1004D5BA8(void *a1@<X8>)
{
  *a1 = 0x73676E69646E6962;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1004D5BC4()
{
  return 0x73676E69646E6962;
}

uint64_t sub_1004D5BDC@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3B30, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1004D5C34(uint64_t a1)
{
  unint64_t v2 = sub_1004DA9D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D5C70(uint64_t a1)
{
  unint64_t v2 = sub_1004DA9D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D5CAC(void *a1)
{
  uint64_t v2 = sub_100007764(&qword_100730958);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::Int v5 = (char *)&v16[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004DA9D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v6 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v16[0] = 0;
  id v8 = [v6 dataWithJSONObject:isa options:0 error:v16];

  id v9 = v16[0];
  if (v8)
  {
    uint64_t v10 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    v16[0] = v10;
    v16[1] = v12;
    sub_10005D478();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return sub_10000C5F4((uint64_t)v10, (unint64_t)v12);
  }
  else
  {
    uint64_t v14 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

id sub_1004D5EE4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10051D8F4(*a1);
  id v3 = objc_allocWithZone((Class)NSDictionary);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithDictionary:isa];

  sub_10051D8F4(v2);
  Class v6 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [v5 isEqualToDictionary:v6];

  return v7;
}

id sub_1004D5FDC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = sub_1004DAA28(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1004D6008(void *a1)
{
  return sub_1004D5CAC(a1);
}

unint64_t sub_1004D6028()
{
  unint64_t result = qword_100730878;
  if (!qword_100730878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730878);
  }
  return result;
}

uint64_t sub_1004D607C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for DIPODINPair(0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v108 = (uint64_t)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v116 = (uint64_t)&v103 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v104 = (char *)&v103 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v105 = (char *)&v103 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v111 = (char *)&v103 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v109 = (char *)&v103 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v113 = (char *)&v103 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v110 = (uint64_t)&v103 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  BOOL v112 = (char *)&v103 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v115 = (uint64_t)&v103 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v103 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v103 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v35 = (char *)&v103 - v34;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v103 - v36;
  uint64_t v38 = (uint64_t)a1;
  uint64_t v39 = *a1;
  unint64_t v40 = a1[1];
  uint64_t v41 = *a2;
  unint64_t v42 = a2[1];
  uint64_t v114 = a2;
  uint64_t v106 = v44;
  uint64_t v107 = v43;
  uint64_t v103 = v38;
  if (v40 >> 60 != 15)
  {
    if (v42 >> 60 != 15)
    {
      sub_1000338D4(v39, v40);
      sub_1000338D4(v41, v42);
      char v48 = sub_100510850(v39, v40, v41, v42);
      sub_10000C5E0(v41, v42);
      sub_10000C5E0(v39, v40);
      uint64_t v47 = v38;
      sub_1004DAE60(v38, (uint64_t)v37, type metadata accessor for DIPODINPair);
      uint64_t v45 = (uint64_t)v114;
      sub_1004DAE60((uint64_t)v114, (uint64_t)v35, type metadata accessor for DIPODINPair);
      uint64_t v46 = (uint64_t)v112;
      if (v48) {
        goto LABEL_7;
      }
LABEL_10:
      sub_1004D84D8((uint64_t)v37, type metadata accessor for DIPODINPair);
      sub_1004D84D8((uint64_t)v35, type metadata accessor for DIPODINPair);
      sub_1004DAE60(v47, (uint64_t)v32, type metadata accessor for DIPODINPair);
      sub_1004DAE60(v45, (uint64_t)v29, type metadata accessor for DIPODINPair);
      uint64_t v49 = (uint64_t)v111;
      goto LABEL_11;
    }
LABEL_5:
    sub_1000338D4(v39, v40);
    sub_1000338D4(v41, v42);
    sub_10000C5E0(v39, v40);
    sub_10000C5E0(v41, v42);
    uint64_t v47 = v38;
    sub_1004DAE60(v38, (uint64_t)v37, type metadata accessor for DIPODINPair);
    uint64_t v45 = (uint64_t)v114;
    sub_1004DAE60((uint64_t)v114, (uint64_t)v35, type metadata accessor for DIPODINPair);
    uint64_t v46 = (uint64_t)v112;
    goto LABEL_10;
  }
  if (v42 >> 60 != 15) {
    goto LABEL_5;
  }
  sub_1004DAE60(v38, (uint64_t)&v103 - v36, type metadata accessor for DIPODINPair);
  uint64_t v45 = (uint64_t)v114;
  sub_1004DAE60((uint64_t)v114, (uint64_t)v35, type metadata accessor for DIPODINPair);
  uint64_t v46 = (uint64_t)v112;
LABEL_7:
  if (*((void *)v37 + 2) == *((void *)v35 + 2) && *((void *)v37 + 3) == *((void *)v35 + 3))
  {
    sub_1004D84D8((uint64_t)v37, type metadata accessor for DIPODINPair);
    sub_1004D84D8((uint64_t)v35, type metadata accessor for DIPODINPair);
    uint64_t v47 = v38;
    sub_1004DAE60(v38, (uint64_t)v32, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v45, (uint64_t)v29, type metadata accessor for DIPODINPair);
    uint64_t v49 = (uint64_t)v111;
    goto LABEL_24;
  }
  char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  sub_1004D84D8((uint64_t)v37, type metadata accessor for DIPODINPair);
  sub_1004D84D8((uint64_t)v35, type metadata accessor for DIPODINPair);
  uint64_t v47 = v38;
  sub_1004DAE60(v38, (uint64_t)v32, type metadata accessor for DIPODINPair);
  uint64_t v45 = (uint64_t)v114;
  sub_1004DAE60((uint64_t)v114, (uint64_t)v29, type metadata accessor for DIPODINPair);
  uint64_t v49 = (uint64_t)v111;
  if ((v69 & 1) == 0)
  {
LABEL_11:
    uint64_t v50 = v46;
    uint64_t v51 = v49;
    sub_1004D84D8((uint64_t)v29, type metadata accessor for DIPODINPair);
    sub_1004D84D8((uint64_t)v32, type metadata accessor for DIPODINPair);
    uint64_t v52 = (uint64_t)v104;
    long long v53 = v105;
    uint64_t v54 = v109;
LABEL_12:
    uint64_t v55 = (uint64_t)v113;
LABEL_13:
    uint64_t v56 = v47;
    uint64_t v57 = v107;
    sub_1004DAE60(v56, v107, type metadata accessor for DIPODINPair);
    uint64_t v58 = v106;
    sub_1004DAE60(v45, v106, type metadata accessor for DIPODINPair);
    uint64_t v59 = v58;
    uint64_t v60 = (uint64_t)v53;
    uint64_t v61 = (uint64_t)v54;
    uint64_t v49 = v51;
    uint64_t v46 = v50;
    goto LABEL_14;
  }
LABEL_24:
  uint64_t v70 = *((void *)v32 + 9);
  uint64_t v71 = *((void *)v29 + 9);
  uint64_t v61 = (uint64_t)v109;
  if (!v70)
  {
    swift_bridgeObjectRetain();
    sub_1004D84D8((uint64_t)v29, type metadata accessor for DIPODINPair);
    uint64_t v45 = (uint64_t)v114;
    sub_1004D84D8((uint64_t)v32, type metadata accessor for DIPODINPair);
    uint64_t v52 = (uint64_t)v104;
    uint64_t v60 = (uint64_t)v105;
    uint64_t v55 = (uint64_t)v113;
    if (!v71) {
      goto LABEL_31;
    }
    uint64_t v50 = v46;
    uint64_t v51 = v49;
    uint64_t v54 = (char *)v61;
    long long v53 = v105;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (!v71)
  {
    uint64_t v50 = v46;
    uint64_t v51 = v49;
    uint64_t v54 = v109;
    swift_bridgeObjectRetain();
    sub_1004D84D8((uint64_t)v29, type metadata accessor for DIPODINPair);
    sub_1004D84D8((uint64_t)v32, type metadata accessor for DIPODINPair);
    swift_bridgeObjectRelease();
    uint64_t v52 = (uint64_t)v104;
    long long v53 = v105;
    goto LABEL_12;
  }
  if (*((void *)v32 + 8) == *((void *)v29 + 8) && v70 == v71)
  {
    swift_bridgeObjectRetain();
    sub_1004D84D8((uint64_t)v29, type metadata accessor for DIPODINPair);
    sub_1004D84D8((uint64_t)v32, type metadata accessor for DIPODINPair);
    swift_bridgeObjectRelease();
    uint64_t v52 = (uint64_t)v104;
    uint64_t v60 = (uint64_t)v105;
LABEL_31:
    uint64_t v72 = v47;
    uint64_t v57 = v107;
    sub_1004DAE60(v72, v107, type metadata accessor for DIPODINPair);
    uint64_t v73 = v106;
    sub_1004DAE60(v45, v106, type metadata accessor for DIPODINPair);
    uint64_t v59 = v73;
    goto LABEL_34;
  }
  char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1004D84D8((uint64_t)v29, type metadata accessor for DIPODINPair);
  sub_1004D84D8((uint64_t)v32, type metadata accessor for DIPODINPair);
  swift_bridgeObjectRelease();
  uint64_t v75 = v47;
  uint64_t v57 = v107;
  sub_1004DAE60(v75, v107, type metadata accessor for DIPODINPair);
  uint64_t v76 = v106;
  uint64_t v45 = (uint64_t)v114;
  sub_1004DAE60((uint64_t)v114, v106, type metadata accessor for DIPODINPair);
  uint64_t v59 = v76;
  uint64_t v52 = (uint64_t)v104;
  uint64_t v60 = (uint64_t)v105;
  uint64_t v55 = (uint64_t)v113;
  if ((v74 & 1) == 0)
  {
LABEL_14:
    sub_1004D84D8(v59, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v57, type metadata accessor for DIPODINPair);
LABEL_15:
    uint64_t v62 = v115;
    uint64_t v63 = v103;
LABEL_16:
    sub_1004DAE60(v63, v62, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v45, v46, type metadata accessor for DIPODINPair);
    uint64_t v64 = v115;
    goto LABEL_17;
  }
LABEL_34:
  uint64_t v77 = *(void *)(v57 + 88);
  uint64_t v78 = *(void *)(v59 + 88);
  if (!v77)
  {
    uint64_t v86 = v59;
    swift_bridgeObjectRetain();
    sub_1004D84D8(v86, type metadata accessor for DIPODINPair);
    uint64_t v45 = (uint64_t)v114;
    sub_1004D84D8(v57, type metadata accessor for DIPODINPair);
    uint64_t v55 = (uint64_t)v113;
    uint64_t v63 = v103;
    if (!v78) {
      goto LABEL_41;
    }
    swift_bridgeObjectRelease();
    uint64_t v62 = v115;
    goto LABEL_16;
  }
  if (!v78)
  {
    uint64_t v87 = v57;
    uint64_t v88 = v59;
    swift_bridgeObjectRetain();
    sub_1004D84D8(v88, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v87, type metadata accessor for DIPODINPair);
    swift_bridgeObjectRelease();
    uint64_t v55 = (uint64_t)v113;
    goto LABEL_15;
  }
  if (*(void *)(v57 + 80) != *(void *)(v59 + 80) || v77 != v78)
  {
    uint64_t v89 = v57;
    uint64_t v90 = v59;
    char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    sub_1004D84D8(v90, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v89, type metadata accessor for DIPODINPair);
    swift_bridgeObjectRelease();
    uint64_t v63 = v103;
    uint64_t v64 = v115;
    sub_1004DAE60(v103, v115, type metadata accessor for DIPODINPair);
    uint64_t v45 = (uint64_t)v114;
    sub_1004DAE60((uint64_t)v114, v46, type metadata accessor for DIPODINPair);
    uint64_t v55 = (uint64_t)v113;
    if (v91) {
      goto LABEL_44;
    }
LABEL_17:
    sub_1004D84D8(v64, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v46, type metadata accessor for DIPODINPair);
    uint64_t v65 = v110;
    sub_1004DAE60(v63, v110, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v45, v55, type metadata accessor for DIPODINPair);
    goto LABEL_18;
  }
  uint64_t v79 = v46;
  uint64_t v80 = v49;
  uint64_t v81 = v61;
  uint64_t v82 = v52;
  uint64_t v83 = v60;
  uint64_t v84 = v59;
  swift_bridgeObjectRetain();
  uint64_t v85 = v84;
  uint64_t v60 = v83;
  uint64_t v52 = v82;
  uint64_t v61 = v81;
  uint64_t v49 = v80;
  uint64_t v46 = v79;
  sub_1004D84D8(v85, type metadata accessor for DIPODINPair);
  sub_1004D84D8(v57, type metadata accessor for DIPODINPair);
  swift_bridgeObjectRelease();
  uint64_t v55 = (uint64_t)v113;
  uint64_t v63 = v103;
LABEL_41:
  uint64_t v64 = v115;
  sub_1004DAE60(v63, v115, type metadata accessor for DIPODINPair);
  sub_1004DAE60(v45, v46, type metadata accessor for DIPODINPair);
LABEL_44:
  if (*(void *)(v64 + 96) != *(void *)(v46 + 96) || *(void *)(v64 + 104) != *(void *)(v46 + 104))
  {
    char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1004D84D8(v64, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v46, type metadata accessor for DIPODINPair);
    uint64_t v65 = v110;
    sub_1004DAE60(v63, v110, type metadata accessor for DIPODINPair);
    uint64_t v45 = (uint64_t)v114;
    sub_1004DAE60((uint64_t)v114, v55, type metadata accessor for DIPODINPair);
    if (v92) {
      goto LABEL_48;
    }
LABEL_18:
    sub_1004D84D8(v65, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v55, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v63, v61, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v45, v49, type metadata accessor for DIPODINPair);
    goto LABEL_19;
  }
  sub_1004D84D8(v64, type metadata accessor for DIPODINPair);
  sub_1004D84D8(v46, type metadata accessor for DIPODINPair);
  uint64_t v65 = v110;
  sub_1004DAE60(v63, v110, type metadata accessor for DIPODINPair);
  sub_1004DAE60(v45, v55, type metadata accessor for DIPODINPair);
LABEL_48:
  if (*(void *)(v65 + 112) == *(void *)(v55 + 112) && *(void *)(v65 + 120) == *(void *)(v55 + 120))
  {
    sub_1004D84D8(v65, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v55, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v63, v61, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v45, v49, type metadata accessor for DIPODINPair);
    goto LABEL_52;
  }
  char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
  sub_1004D84D8(v65, type metadata accessor for DIPODINPair);
  sub_1004D84D8(v55, type metadata accessor for DIPODINPair);
  sub_1004DAE60(v63, v61, type metadata accessor for DIPODINPair);
  uint64_t v45 = (uint64_t)v114;
  sub_1004DAE60((uint64_t)v114, v49, type metadata accessor for DIPODINPair);
  if ((v93 & 1) == 0)
  {
LABEL_19:
    sub_1004D84D8(v49, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v61, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v63, v60, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v45, v52, type metadata accessor for DIPODINPair);
    goto LABEL_20;
  }
LABEL_52:
  uint64_t v94 = 5719374;
  if (*(unsigned char *)(v61 + 128))
  {
    if (*(unsigned char *)(v61 + 128) == 1)
    {
      unint64_t v95 = 0xE700000000000000;
      uint64_t v96 = 0x44454C4542414CLL;
    }
    else
    {
      unint64_t v95 = 0xE600000000000000;
      uint64_t v96 = 0x44454C494146;
    }
  }
  else
  {
    unint64_t v95 = 0xE300000000000000;
    uint64_t v96 = 5719374;
  }
  if (*(unsigned char *)(v49 + 128))
  {
    if (*(unsigned char *)(v49 + 128) == 1)
    {
      unint64_t v97 = 0xE700000000000000;
      uint64_t v94 = 0x44454C4542414CLL;
    }
    else
    {
      unint64_t v97 = 0xE600000000000000;
      uint64_t v94 = 0x44454C494146;
    }
  }
  else
  {
    unint64_t v97 = 0xE300000000000000;
  }
  if (v96 == v94 && v95 == v97)
  {
    swift_bridgeObjectRelease_n();
    sub_1004D84D8(v49, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v61, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v63, v60, type metadata accessor for DIPODINPair);
    sub_1004DAE60((uint64_t)v114, v52, type metadata accessor for DIPODINPair);
    goto LABEL_66;
  }
  uint64_t v98 = v49;
  char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1004D84D8(v98, type metadata accessor for DIPODINPair);
  sub_1004D84D8(v61, type metadata accessor for DIPODINPair);
  sub_1004DAE60(v63, v60, type metadata accessor for DIPODINPair);
  uint64_t v45 = (uint64_t)v114;
  sub_1004DAE60((uint64_t)v114, v52, type metadata accessor for DIPODINPair);
  if ((v99 & 1) == 0)
  {
LABEL_20:
    sub_1004D84D8(v52, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v60, type metadata accessor for DIPODINPair);
LABEL_21:
    uint64_t v66 = v108;
    sub_1004DAE60(v63, v116, type metadata accessor for DIPODINPair);
    sub_1004DAE60(v45, v66, type metadata accessor for DIPODINPair);
    char v67 = 0;
    goto LABEL_22;
  }
LABEL_66:
  uint64_t v100 = *(void *)(v60 + 144);
  uint64_t v101 = *(void *)(v52 + 144);
  if (!v100)
  {
    swift_bridgeObjectRetain();
    sub_1004D84D8(v52, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v60, type metadata accessor for DIPODINPair);
    if (!v101) {
      goto LABEL_72;
    }
    goto LABEL_74;
  }
  if (!v101)
  {
    swift_bridgeObjectRetain();
    sub_1004D84D8(v52, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v60, type metadata accessor for DIPODINPair);
LABEL_74:
    swift_bridgeObjectRelease();
    uint64_t v45 = (uint64_t)v114;
    goto LABEL_21;
  }
  if (*(void *)(v60 + 136) != *(void *)(v52 + 136) || v100 != v101)
  {
    char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    sub_1004D84D8(v52, type metadata accessor for DIPODINPair);
    sub_1004D84D8(v60, type metadata accessor for DIPODINPair);
    swift_bridgeObjectRelease();
    sub_1004DAE60(v63, v116, type metadata accessor for DIPODINPair);
    uint64_t v66 = v108;
    sub_1004DAE60((uint64_t)v114, v108, type metadata accessor for DIPODINPair);
    char v67 = 0;
    if ((v102 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_76;
  }
  swift_bridgeObjectRetain();
  sub_1004D84D8(v52, type metadata accessor for DIPODINPair);
  sub_1004D84D8(v60, type metadata accessor for DIPODINPair);
  swift_bridgeObjectRelease();
LABEL_72:
  sub_1004DAE60(v63, v116, type metadata accessor for DIPODINPair);
  uint64_t v66 = v108;
  sub_1004DAE60((uint64_t)v114, v108, type metadata accessor for DIPODINPair);
LABEL_76:
  if (*(void *)(v116 + 152) == *(void *)(v66 + 152) && *(void *)(v116 + 160) == *(void *)(v66 + 160)) {
    char v67 = 1;
  }
  else {
    char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
LABEL_22:
  sub_1004D84D8(v116, type metadata accessor for DIPODINPair);
  sub_1004D84D8(v66, type metadata accessor for DIPODINPair);
  return v67 & 1;
}

uint64_t sub_1004D7238(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DIPPregeneratedAssessment(0);
  uint64_t v5 = __chkstk_darwin(v4);
  int64_t v132 = &v129[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __chkstk_darwin(v5);
  int64_t v133 = &v129[-v8];
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v139 = &v129[-v11];
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v137 = &v129[-v14];
  uint64_t v15 = __chkstk_darwin(v13);
  char v146 = &v129[-v16];
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v142 = &v129[-v19];
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v145 = &v129[-v22];
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v140 = &v129[-v24];
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v135 = &v129[-v26];
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v30 = &v129[-v29];
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v34 = &v129[-v33];
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = &v129[-v36];
  uint64_t v38 = __chkstk_darwin(v35);
  unint64_t v40 = &v129[-v39];
  __chkstk_darwin(v38);
  unint64_t v42 = &v129[-v41];
  uint64_t v43 = a1[1];
  uint64_t v44 = a2[1];
  BOOL v45 = *a1 == *a2;
  uint64_t v143 = v46;
  uint64_t v144 = v47;
  uint64_t v138 = v48;
  uint64_t v136 = v49;
  uint64_t v141 = v50;
  uint64_t v134 = v51;
  if (v45 && v43 == v44)
  {
    sub_1004DAE60((uint64_t)a1, (uint64_t)&v129[-v41], type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, (uint64_t)v40, type metadata accessor for DIPPregeneratedAssessment);
  }
  else
  {
    char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1004DAE60((uint64_t)a1, (uint64_t)v42, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, (uint64_t)v40, type metadata accessor for DIPPregeneratedAssessment);
    if ((v52 & 1) == 0)
    {
      sub_1004D84D8((uint64_t)v40, type metadata accessor for DIPPregeneratedAssessment);
      sub_1004D84D8((uint64_t)v42, type metadata accessor for DIPPregeneratedAssessment);
      sub_1004DAE60((uint64_t)a1, (uint64_t)v37, type metadata accessor for DIPPregeneratedAssessment);
      sub_1004DAE60((uint64_t)a2, (uint64_t)v34, type metadata accessor for DIPPregeneratedAssessment);
      goto LABEL_11;
    }
  }
  char v53 = static Date.== infix(_:_:)();
  sub_1004D84D8((uint64_t)v40, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004D84D8((uint64_t)v42, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004DAE60((uint64_t)a1, (uint64_t)v37, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004DAE60((uint64_t)a2, (uint64_t)v34, type metadata accessor for DIPPregeneratedAssessment);
  if ((v53 & 1) == 0)
  {
LABEL_11:
    sub_1004D84D8((uint64_t)v37, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8((uint64_t)v34, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v58 = v143;
    sub_1004DAE60((uint64_t)a1, v143, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, (uint64_t)v30, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v59 = v144;
    goto LABEL_12;
  }
  uint64_t v54 = *(int *)(v4 + 24);
  uint64_t v55 = *(void *)&v37[v54];
  uint64_t v56 = *(void *)&v37[v54 + 8];
  uint64_t v57 = &v34[v54];
  if (v55 == *v57 && v56 == v57[1])
  {
    sub_1004D84D8((uint64_t)v37, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8((uint64_t)v34, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v58 = v143;
    sub_1004DAE60((uint64_t)a1, v143, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, (uint64_t)v30, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v59 = v144;
    goto LABEL_24;
  }
  char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
  sub_1004D84D8((uint64_t)v37, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004D84D8((uint64_t)v34, type metadata accessor for DIPPregeneratedAssessment);
  uint64_t v58 = v143;
  sub_1004DAE60((uint64_t)a1, v143, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004DAE60((uint64_t)a2, (uint64_t)v30, type metadata accessor for DIPPregeneratedAssessment);
  uint64_t v59 = v144;
  if ((v81 & 1) == 0)
  {
LABEL_12:
    sub_1004D84D8((uint64_t)v30, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8(v58, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v61 = (uint64_t)v132;
    uint64_t v60 = (uint64_t)v133;
    uint64_t v63 = (uint64_t)v145;
    uint64_t v62 = v146;
LABEL_13:
    uint64_t v65 = v134;
    uint64_t v64 = v135;
    sub_1004DAE60((uint64_t)a1, v134, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, (uint64_t)v64, type metadata accessor for DIPPregeneratedAssessment);
    goto LABEL_14;
  }
LABEL_24:
  uint64_t v82 = *(int *)(v4 + 28);
  uint64_t v83 = (void *)(v58 + v82);
  uint64_t v84 = *(void *)(v58 + v82 + 8);
  uint64_t v85 = &v30[v82];
  uint64_t v86 = v85[1];
  if (!v84)
  {
    int64_t v131 = (int *)v4;
    swift_bridgeObjectRetain();
    sub_1004D84D8((uint64_t)v30, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8(v58, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v61 = (uint64_t)v132;
    uint64_t v60 = (uint64_t)v133;
    uint64_t v63 = (uint64_t)v145;
    uint64_t v62 = v146;
    if (!v86) {
      goto LABEL_32;
    }
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v63 = (uint64_t)v145;
  if (!v86)
  {
    swift_bridgeObjectRetain();
    sub_1004D84D8((uint64_t)v30, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8(v58, type metadata accessor for DIPPregeneratedAssessment);
    swift_bridgeObjectRelease();
    uint64_t v61 = (uint64_t)v132;
    uint64_t v60 = (uint64_t)v133;
    uint64_t v62 = v146;
    goto LABEL_13;
  }
  BOOL v45 = *v83 == *v85;
  int64_t v131 = (int *)v4;
  if (!v45 || v84 != v86)
  {
    int v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    sub_1004D84D8((uint64_t)v30, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v63 = (uint64_t)v145;
    sub_1004D84D8(v58, type metadata accessor for DIPPregeneratedAssessment);
    swift_bridgeObjectRelease();
    uint64_t v65 = v134;
    sub_1004DAE60((uint64_t)a1, v134, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v64 = v135;
    sub_1004DAE60((uint64_t)a2, (uint64_t)v135, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v61 = (uint64_t)v132;
    uint64_t v60 = (uint64_t)v133;
    uint64_t v62 = v146;
    if (v130) {
      goto LABEL_35;
    }
LABEL_14:
    sub_1004D84D8(v65, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8((uint64_t)v64, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v66 = v140;
    sub_1004DAE60((uint64_t)a1, (uint64_t)v140, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, v63, type metadata accessor for DIPPregeneratedAssessment);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  sub_1004D84D8((uint64_t)v30, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004D84D8(v58, type metadata accessor for DIPPregeneratedAssessment);
  swift_bridgeObjectRelease();
  uint64_t v61 = (uint64_t)v132;
  uint64_t v60 = (uint64_t)v133;
  uint64_t v62 = v146;
LABEL_32:
  uint64_t v65 = v134;
  sub_1004DAE60((uint64_t)a1, v134, type metadata accessor for DIPPregeneratedAssessment);
  uint64_t v64 = v135;
  sub_1004DAE60((uint64_t)a2, (uint64_t)v135, type metadata accessor for DIPPregeneratedAssessment);
LABEL_35:
  uint64_t v87 = v131[8];
  uint64_t v88 = *(void *)(v65 + v87);
  uint64_t v89 = *(void *)(v65 + v87 + 8);
  uint64_t v90 = &v64[v87];
  if (v88 != *v90 || v89 != v90[1])
  {
    char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1004D84D8(v65, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8((uint64_t)v64, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v66 = v140;
    sub_1004DAE60((uint64_t)a1, (uint64_t)v140, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v62 = v146;
    sub_1004DAE60((uint64_t)a2, v63, type metadata accessor for DIPPregeneratedAssessment);
    if (v91) {
      goto LABEL_39;
    }
LABEL_15:
    uint64_t v67 = (uint64_t)v66;
    uint64_t v68 = v59;
    sub_1004D84D8(v67, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8(v63, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v69 = v141;
    sub_1004DAE60((uint64_t)a1, v141, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v70 = v142;
    sub_1004DAE60((uint64_t)a2, (uint64_t)v142, type metadata accessor for DIPPregeneratedAssessment);
    goto LABEL_16;
  }
  sub_1004D84D8(v65, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004D84D8((uint64_t)v64, type metadata accessor for DIPPregeneratedAssessment);
  uint64_t v66 = v140;
  sub_1004DAE60((uint64_t)a1, (uint64_t)v140, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004DAE60((uint64_t)a2, v63, type metadata accessor for DIPPregeneratedAssessment);
LABEL_39:
  uint64_t v92 = v131[9];
  uint64_t v93 = *(void *)&v66[v92];
  uint64_t v94 = *(void *)&v66[v92 + 8];
  unint64_t v95 = (void *)(v63 + v92);
  if (v93 != *v95 || v94 != v95[1])
  {
    uint64_t v97 = v63;
    uint64_t v98 = (uint64_t)v66;
    uint64_t v68 = v59;
    char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1004D84D8(v98, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8(v97, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v69 = v141;
    sub_1004DAE60((uint64_t)a1, v141, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v70 = v142;
    uint64_t v62 = v146;
    sub_1004DAE60((uint64_t)a2, (uint64_t)v142, type metadata accessor for DIPPregeneratedAssessment);
    if (v99) {
      goto LABEL_43;
    }
LABEL_16:
    sub_1004D84D8(v69, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8((uint64_t)v70, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v71 = v61;
    uint64_t v72 = v60;
    uint64_t v73 = v136;
    sub_1004DAE60((uint64_t)a1, v136, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, (uint64_t)v62, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v74 = v73;
    uint64_t v60 = v72;
    uint64_t v61 = v71;
    uint64_t v75 = v68;
    uint64_t v76 = (uint64_t)v137;
    uint64_t v77 = v138;
    goto LABEL_17;
  }
  uint64_t v96 = (uint64_t)v66;
  uint64_t v68 = v59;
  sub_1004D84D8(v96, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004D84D8(v63, type metadata accessor for DIPPregeneratedAssessment);
  uint64_t v69 = v141;
  sub_1004DAE60((uint64_t)a1, v141, type metadata accessor for DIPPregeneratedAssessment);
  uint64_t v70 = v142;
  sub_1004DAE60((uint64_t)a2, (uint64_t)v142, type metadata accessor for DIPPregeneratedAssessment);
LABEL_43:
  uint64_t v100 = v131[10];
  uint64_t v101 = *(void *)(v69 + v100);
  uint64_t v102 = *(void *)(v69 + v100 + 8);
  uint64_t v103 = &v70[v100];
  if (v101 != *v103 || v102 != v103[1])
  {
    LODWORD(v145) = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1004D84D8(v69, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8((uint64_t)v70, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v105 = v136;
    sub_1004DAE60((uint64_t)a1, v136, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v62 = v146;
    sub_1004DAE60((uint64_t)a2, (uint64_t)v146, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v74 = v105;
    uint64_t v75 = v68;
    uint64_t v76 = (uint64_t)v137;
    uint64_t v77 = v138;
    if (v145) {
      goto LABEL_47;
    }
LABEL_17:
    sub_1004D84D8(v74, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8((uint64_t)v62, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a1, v76, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, v77, type metadata accessor for DIPPregeneratedAssessment);
    goto LABEL_18;
  }
  sub_1004D84D8(v69, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004D84D8((uint64_t)v70, type metadata accessor for DIPPregeneratedAssessment);
  uint64_t v104 = v136;
  sub_1004DAE60((uint64_t)a1, v136, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004DAE60((uint64_t)a2, (uint64_t)v62, type metadata accessor for DIPPregeneratedAssessment);
  uint64_t v74 = v104;
  uint64_t v75 = v68;
  uint64_t v76 = (uint64_t)v137;
  uint64_t v77 = v138;
LABEL_47:
  uint64_t v106 = v131[11];
  uint64_t v107 = *(void *)(v74 + v106);
  uint64_t v108 = *(void *)(v74 + v106 + 8);
  uint64_t v109 = &v62[v106];
  if (v107 != *v109 || v108 != v109[1])
  {
    uint64_t v110 = v74;
    char v111 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1004D84D8(v110, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8((uint64_t)v146, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a1, v76, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, v77, type metadata accessor for DIPPregeneratedAssessment);
    if (v111) {
      goto LABEL_51;
    }
LABEL_18:
    sub_1004D84D8(v76, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8(v77, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v78 = v139;
    sub_1004DAE60((uint64_t)a1, (uint64_t)v139, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, v75, type metadata accessor for DIPPregeneratedAssessment);
    goto LABEL_19;
  }
  sub_1004D84D8(v74, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004D84D8((uint64_t)v62, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004DAE60((uint64_t)a1, v76, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004DAE60((uint64_t)a2, v77, type metadata accessor for DIPPregeneratedAssessment);
LABEL_51:
  uint64_t v112 = v131[12];
  uint64_t v113 = *(void *)(v76 + v112);
  uint64_t v114 = *(void *)(v76 + v112 + 8);
  uint64_t v115 = (void *)(v77 + v112);
  if (v113 == *v115 && v114 == v115[1])
  {
    sub_1004D84D8(v76, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8(v77, type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v78 = v139;
    sub_1004DAE60((uint64_t)a1, (uint64_t)v139, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, v75, type metadata accessor for DIPPregeneratedAssessment);
    goto LABEL_55;
  }
  char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
  sub_1004D84D8(v76, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004D84D8(v77, type metadata accessor for DIPPregeneratedAssessment);
  uint64_t v78 = v139;
  sub_1004DAE60((uint64_t)a1, (uint64_t)v139, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004DAE60((uint64_t)a2, v75, type metadata accessor for DIPPregeneratedAssessment);
  if ((v116 & 1) == 0)
  {
LABEL_19:
    sub_1004D84D8(v75, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8((uint64_t)v78, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a1, v60, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004DAE60((uint64_t)a2, v61, type metadata accessor for DIPPregeneratedAssessment);
LABEL_20:
    sub_1004D84D8(v61, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8(v60, type metadata accessor for DIPPregeneratedAssessment);
    return 0;
  }
LABEL_55:
  uint64_t v117 = (uint64_t)a1;
  uint64_t v118 = (uint64_t)a2;
  uint64_t v119 = v131;
  uint64_t v120 = *(void *)&v78[v131[13]];
  sub_1004D84D8((uint64_t)v78, type metadata accessor for DIPPregeneratedAssessment);
  uint64_t v121 = *(void *)(v75 + v119[13]);
  sub_1004D84D8(v75, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004DAE60(v117, v60, type metadata accessor for DIPPregeneratedAssessment);
  sub_1004DAE60(v118, v61, type metadata accessor for DIPPregeneratedAssessment);
  if (v120 != v121) {
    goto LABEL_20;
  }
  uint64_t v122 = v119[14];
  uint64_t v123 = *(void *)(v60 + v122);
  uint64_t v124 = *(void *)(v61 + v122);
  if (v123)
  {
    if (v124)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_10051D8F4(v123);
      id v125 = objc_allocWithZone((Class)NSDictionary);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v127 = [v125 initWithDictionary:isa];

      sub_10051D8F4(v124);
      Class v128 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v79 = [v127 isEqualToDictionary:v128];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_1004D84D8(v61, type metadata accessor for DIPPregeneratedAssessment);
      sub_1004D84D8(v60, type metadata accessor for DIPPregeneratedAssessment);
      swift_bridgeObjectRelease();
      return (uint64_t)v79;
    }
    swift_bridgeObjectRetain();
    sub_1004D84D8(v61, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8(v60, type metadata accessor for DIPPregeneratedAssessment);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1004D84D8(v61, type metadata accessor for DIPPregeneratedAssessment);
    sub_1004D84D8(v60, type metadata accessor for DIPPregeneratedAssessment);
    if (!v124) {
      return 1;
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1004D84D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *sub_1004D8538(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (_OWORD *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 8);
    if (v6 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = a3;
      sub_10002CEB0(*(void *)a2, *(void *)(a2 + 8));
      a3 = v9;
      *(void *)uint64_t v4 = v8;
      *((void *)v4 + 1) = v6;
    }
    uint64_t v10 = *(void *)(a2 + 24);
    *((void *)v4 + 2) = *(void *)(a2 + 16);
    *((void *)v4 + 3) = v10;
    uint64_t v11 = *(void *)(a2 + 40);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
    *((void *)v4 + 5) = v11;
    uint64_t v12 = *(void *)(a2 + 56);
    *((void *)v4 + 6) = *(void *)(a2 + 48);
    *((void *)v4 + 7) = v12;
    uint64_t v13 = *(void *)(a2 + 72);
    *((void *)v4 + 8) = *(void *)(a2 + 64);
    *((void *)v4 + 9) = v13;
    uint64_t v14 = *(void *)(a2 + 88);
    *((void *)v4 + 10) = *(void *)(a2 + 80);
    *((void *)v4 + 11) = v14;
    uint64_t v15 = *(void *)(a2 + 104);
    *((void *)v4 + 12) = *(void *)(a2 + 96);
    *((void *)v4 + 13) = v15;
    uint64_t v16 = *(void *)(a2 + 120);
    *((void *)v4 + 14) = *(void *)(a2 + 112);
    *((void *)v4 + 15) = v16;
    *((unsigned char *)v4 + 128) = *(unsigned char *)(a2 + 128);
    uint64_t v17 = *(void *)(a2 + 144);
    *((void *)v4 + 17) = *(void *)(a2 + 136);
    *((void *)v4 + 18) = v17;
    uint64_t v18 = *(void *)(a2 + 160);
    uint64_t v19 = *(int *)(a3 + 52);
    __dst = (void *)((char *)v4 + v19);
    uint64_t v64 = a3;
    uint64_t v61 = (void *)(a2 + v19);
    *((void *)v4 + 19) = *(void *)(a2 + 152);
    *((void *)v4 + 20) = v18;
    uint64_t v20 = (int *)type metadata accessor for OTDRequest(0);
    uint64_t v60 = *((void *)v20 - 1);
    uint64_t v62 = *(unsigned int (**)(void *, uint64_t, int *))(v60 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v62(v61, 1, v20))
    {
      uint64_t v21 = sub_100007764(&qword_10072A888);
      memcpy(__dst, v61, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = v61[1];
      void *__dst = *v61;
      __dst[1] = v22;
      __dst[2] = v61[2];
      uint64_t v23 = v61[4];
      swift_bridgeObjectRetain();
      if (v23)
      {
        __dst[3] = v61[3];
        __dst[4] = v23;
        uint64_t v24 = v61[6];
        __dst[5] = v61[5];
        __dst[6] = v24;
        uint64_t v25 = v61[8];
        __dst[7] = v61[7];
        __dst[8] = v25;
        uint64_t v26 = v61[10];
        __dst[9] = v61[9];
        __dst[10] = v26;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v27 = *(_OWORD *)(v61 + 5);
        *(_OWORD *)(__dst + 3) = *(_OWORD *)(v61 + 3);
        *(_OWORD *)(__dst + 5) = v27;
        long long v28 = *(_OWORD *)(v61 + 9);
        *(_OWORD *)(__dst + 7) = *(_OWORD *)(v61 + 7);
        *(_OWORD *)(__dst + 9) = v28;
      }
      uint64_t v29 = v61[12];
      __dst[11] = v61[11];
      __dst[12] = v29;
      uint64_t v30 = v61[14];
      __dst[13] = v61[13];
      __dst[14] = v30;
      __dst[15] = v61[15];
      *((unsigned char *)__dst + 128) = *((unsigned char *)v61 + 128);
      uint64_t v31 = v20[10];
      uint64_t v32 = (char *)__dst + v31;
      uint64_t v33 = (char *)v61 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_100007764(&qword_10072A7F8);
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        uint64_t v36 = sub_100007764(&qword_10072A7D8);
        memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      uint64_t v37 = v20[11];
      uint64_t v38 = (char *)__dst + v37;
      uint64_t v39 = (char *)v61 + v37;
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v20[12];
      uint64_t v41 = (char *)__dst + v40;
      unint64_t v42 = (char *)v61 + v40;
      uint64_t v43 = *((void *)v42 + 4);
      if (v43 == 1)
      {
        long long v44 = *((_OWORD *)v42 + 1);
        *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
        *((_OWORD *)v41 + 1) = v44;
        *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
        *(_OWORD *)(v41 + 41) = *(_OWORD *)(v42 + 41);
      }
      else
      {
        uint64_t v45 = *((void *)v42 + 1);
        *(void *)uint64_t v41 = *(void *)v42;
        *((void *)v41 + 1) = v45;
        v41[16] = v42[16];
        *((void *)v41 + 3) = *((void *)v42 + 3);
        *((void *)v41 + 4) = v43;
        uint64_t v46 = *((void *)v42 + 6);
        *((void *)v41 + 5) = *((void *)v42 + 5);
        *((void *)v41 + 6) = v46;
        v41[56] = v42[56];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v47 = v20[13];
      uint64_t v48 = (char *)__dst + v47;
      uint64_t v49 = (char *)v61 + v47;
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      uint64_t v50 = v20[14];
      uint64_t v51 = (void *)((char *)__dst + v50);
      char v52 = (void *)((char *)v61 + v50);
      uint64_t v53 = v52[1];
      void *v51 = *v52;
      v51[1] = v53;
      uint64_t v54 = *(void (**)(void *, void, uint64_t, int *))(v60 + 56);
      swift_bridgeObjectRetain();
      v54(__dst, 0, 1, v20);
    }
    uint64_t v55 = *(int *)(v64 + 56);
    uint64_t v56 = (void *)((char *)v4 + v55);
    uint64_t v57 = (void *)(a2 + v55);
    uint64_t v58 = v57[1];
    *uint64_t v56 = *v57;
    v56[1] = v58;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1004D89E8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_10000C5F4(*a1, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v5 = (char *)a1 + *(int *)(a2 + 52);
  uint64_t v6 = type metadata accessor for OTDRequest(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    if (*((void *)v5 + 4))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = &v5[*(int *)(v6 + 40)];
    uint64_t v8 = sub_100007764(&qword_10072A7F8);
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    }
    if (*(void *)&v5[*(int *)(v6 + 48) + 32] != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1004D8BD8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5 = a2[1];
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v6 = *a2;
    sub_10002CEB0(*a2, a2[1]);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
  }
  uint64_t v7 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = a2[9];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = a2[11];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = v11;
  uint64_t v12 = a2[13];
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = v12;
  uint64_t v13 = a2[15];
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = v13;
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  uint64_t v14 = a2[18];
  *(void *)(a1 + 136) = a2[17];
  *(void *)(a1 + 144) = v14;
  uint64_t v15 = a2[20];
  uint64_t v16 = *(int *)(a3 + 52);
  __dst = (void *)(a1 + v16);
  uint64_t v58 = (uint64_t *)((char *)a2 + v16);
  *(void *)(a1 + 152) = a2[19];
  *(void *)(a1 + 160) = v15;
  uint64_t v17 = (int *)type metadata accessor for OTDRequest(0);
  uint64_t v57 = *((void *)v17 - 1);
  uint64_t v59 = *(unsigned int (**)(void *, uint64_t, int *))(v57 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v59(v58, 1, v17))
  {
    uint64_t v18 = sub_100007764(&qword_10072A888);
    memcpy(__dst, v58, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = v58[1];
    void *__dst = *v58;
    __dst[1] = v19;
    __dst[2] = v58[2];
    uint64_t v20 = v58[4];
    swift_bridgeObjectRetain();
    if (v20)
    {
      __dst[3] = v58[3];
      __dst[4] = v20;
      uint64_t v21 = v58[6];
      __dst[5] = v58[5];
      __dst[6] = v21;
      uint64_t v22 = v58[8];
      __dst[7] = v58[7];
      __dst[8] = v22;
      uint64_t v23 = v58[10];
      __dst[9] = v58[9];
      __dst[10] = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v24 = *(_OWORD *)(v58 + 5);
      *(_OWORD *)(__dst + 3) = *(_OWORD *)(v58 + 3);
      *(_OWORD *)(__dst + 5) = v24;
      long long v25 = *(_OWORD *)(v58 + 9);
      *(_OWORD *)(__dst + 7) = *(_OWORD *)(v58 + 7);
      *(_OWORD *)(__dst + 9) = v25;
    }
    uint64_t v26 = v58[12];
    __dst[11] = v58[11];
    __dst[12] = v26;
    uint64_t v27 = v58[14];
    __dst[13] = v58[13];
    __dst[14] = v27;
    __dst[15] = v58[15];
    *((unsigned char *)__dst + 128) = *((unsigned char *)v58 + 128);
    uint64_t v28 = v17[10];
    uint64_t v29 = (char *)__dst + v28;
    uint64_t v30 = (char *)v58 + v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_100007764(&qword_10072A7F8);
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = sub_100007764(&qword_10072A7D8);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    uint64_t v34 = v17[11];
    uint64_t v35 = (char *)__dst + v34;
    uint64_t v36 = (char *)v58 + v34;
    *(void *)uint64_t v35 = *(void *)v36;
    v35[8] = v36[8];
    uint64_t v37 = v17[12];
    uint64_t v38 = (char *)__dst + v37;
    uint64_t v39 = (char *)v58 + v37;
    uint64_t v40 = *((void *)v39 + 4);
    if (v40 == 1)
    {
      long long v41 = *((_OWORD *)v39 + 1);
      *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
      *((_OWORD *)v38 + 1) = v41;
      *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
      *(_OWORD *)(v38 + 41) = *(_OWORD *)(v39 + 41);
    }
    else
    {
      uint64_t v42 = *((void *)v39 + 1);
      *(void *)uint64_t v38 = *(void *)v39;
      *((void *)v38 + 1) = v42;
      v38[16] = v39[16];
      *((void *)v38 + 3) = *((void *)v39 + 3);
      *((void *)v38 + 4) = v40;
      uint64_t v43 = *((void *)v39 + 6);
      *((void *)v38 + 5) = *((void *)v39 + 5);
      *((void *)v38 + 6) = v43;
      v38[56] = v39[56];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v44 = v17[13];
    uint64_t v45 = (char *)__dst + v44;
    uint64_t v46 = (char *)v58 + v44;
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = v17[14];
    uint64_t v48 = (void *)((char *)__dst + v47);
    uint64_t v49 = (void *)((char *)v58 + v47);
    uint64_t v50 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v50;
    uint64_t v51 = *(void (**)(void *, void, uint64_t, int *))(v57 + 56);
    swift_bridgeObjectRetain();
    v51(__dst, 0, 1, v17);
  }
  uint64_t v52 = *(int *)(a3 + 56);
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = (uint64_t *)((char *)a2 + v52);
  uint64_t v55 = v54[1];
  *uint64_t v53 = *v54;
  v53[1] = v55;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1004D9038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)a2;
      sub_10002CEB0(*(void *)a2, *(void *)(a2 + 8));
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_10004D25C(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)a2;
  sub_10002CEB0(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v6;
  sub_10000C5F4(v9, v10);
LABEL_8:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 52);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for OTDRequest(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      uint64_t v96 = a3;
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      uint64_t v19 = *(void *)(v13 + 32);
      swift_bridgeObjectRetain();
      if (v19)
      {
        *(void *)(v12 + 24) = *(void *)(v13 + 24);
        *(void *)(v12 + 32) = *(void *)(v13 + 32);
        *(void *)(v12 + 40) = *(void *)(v13 + 40);
        *(void *)(v12 + 48) = *(void *)(v13 + 48);
        *(void *)(v12 + 56) = *(void *)(v13 + 56);
        *(void *)(v12 + 64) = *(void *)(v13 + 64);
        *(void *)(v12 + 72) = *(void *)(v13 + 72);
        *(void *)(v12 + 80) = *(void *)(v13 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v24 = *(_OWORD *)(v13 + 24);
        long long v25 = *(_OWORD *)(v13 + 40);
        long long v26 = *(_OWORD *)(v13 + 72);
        *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
        *(_OWORD *)(v12 + 72) = v26;
        *(_OWORD *)(v12 + 24) = v24;
        *(_OWORD *)(v12 + 40) = v25;
      }
      *(void *)(v12 + 88) = *(void *)(v13 + 88);
      *(void *)(v12 + 96) = *(void *)(v13 + 96);
      *(void *)(v12 + 104) = *(void *)(v13 + 104);
      *(void *)(v12 + 112) = *(void *)(v13 + 112);
      *(void *)(v12 + 120) = *(void *)(v13 + 120);
      *(unsigned char *)(v12 + 128) = *(unsigned char *)(v13 + 128);
      uint64_t v27 = v14[10];
      uint64_t v28 = (void *)(v12 + v27);
      uint64_t v29 = (const void *)(v13 + v27);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_100007764(&qword_10072A7F8);
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = sub_100007764(&qword_10072A7D8);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      a3 = v96;
      uint64_t v33 = v14[11];
      uint64_t v34 = v12 + v33;
      uint64_t v35 = (uint64_t *)(v13 + v33);
      uint64_t v36 = *v35;
      *(unsigned char *)(v34 + 8) = *((unsigned char *)v35 + 8);
      *(void *)uint64_t v34 = v36;
      uint64_t v37 = v14[12];
      uint64_t v38 = v12 + v37;
      uint64_t v39 = (long long *)(v13 + v37);
      if (*((void *)v39 + 4) == 1)
      {
        long long v40 = *v39;
        long long v41 = v39[1];
        long long v42 = v39[2];
        *(_OWORD *)(v38 + 41) = *(long long *)((char *)v39 + 41);
        *(_OWORD *)(v38 + 16) = v41;
        *(_OWORD *)(v38 + 32) = v42;
        *(_OWORD *)uint64_t v38 = v40;
      }
      else
      {
        *(void *)uint64_t v38 = *(void *)v39;
        uint64_t v43 = *((void *)v39 + 1);
        *(unsigned char *)(v38 + 16) = *((unsigned char *)v39 + 16);
        *(void *)(v38 + 8) = v43;
        *(void *)(v38 + 24) = *((void *)v39 + 3);
        *(void *)(v38 + 32) = *((void *)v39 + 4);
        *(void *)(v38 + 40) = *((void *)v39 + 5);
        *(void *)(v38 + 48) = *((void *)v39 + 6);
        *(unsigned char *)(v38 + 56) = *((unsigned char *)v39 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v44 = v14[13];
      uint64_t v45 = v12 + v44;
      uint64_t v46 = (uint64_t *)(v13 + v44);
      uint64_t v47 = *v46;
      *(unsigned char *)(v45 + 8) = *((unsigned char *)v46 + 8);
      *(void *)uint64_t v45 = v47;
      uint64_t v48 = v14[14];
      uint64_t v49 = (void *)(v12 + v48);
      uint64_t v50 = (void *)(v13 + v48);
      *uint64_t v49 = *v50;
      v49[1] = v50[1];
      uint64_t v51 = *(void (**)(uint64_t, void, uint64_t, int *))(v15 + 56);
      swift_bridgeObjectRetain();
      v51(v12, 0, 1, v14);
      goto LABEL_46;
    }
LABEL_14:
    uint64_t v20 = sub_100007764(&qword_10072A888);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_46;
  }
  if (v18)
  {
    sub_1004D84D8(v12, type metadata accessor for OTDRequest);
    goto LABEL_14;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  uint64_t v21 = (_OWORD *)(v12 + 24);
  uint64_t v22 = (long long *)(v13 + 24);
  uint64_t v23 = *(void *)(v13 + 32);
  uint64_t v97 = a3;
  if (*(void *)(v12 + 32))
  {
    if (v23)
    {
      *(void *)(v12 + 24) = *(void *)(v13 + 24);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 40) = *(void *)(v13 + 40);
      *(void *)(v12 + 48) = *(void *)(v13 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      *(void *)(v12 + 64) = *(void *)(v13 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 72) = *(void *)(v13 + 72);
      *(void *)(v12 + 80) = *(void *)(v13 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1002FD318(v12 + 24);
      long long v52 = *(_OWORD *)(v13 + 72);
      long long v54 = *v22;
      long long v53 = *(_OWORD *)(v13 + 40);
      *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
      *(_OWORD *)(v12 + 72) = v52;
      *uint64_t v21 = v54;
      *(_OWORD *)(v12 + 40) = v53;
    }
  }
  else if (v23)
  {
    *(void *)(v12 + 24) = *(void *)(v13 + 24);
    *(void *)(v12 + 32) = *(void *)(v13 + 32);
    *(void *)(v12 + 40) = *(void *)(v13 + 40);
    *(void *)(v12 + 48) = *(void *)(v13 + 48);
    *(void *)(v12 + 56) = *(void *)(v13 + 56);
    *(void *)(v12 + 64) = *(void *)(v13 + 64);
    *(void *)(v12 + 72) = *(void *)(v13 + 72);
    *(void *)(v12 + 80) = *(void *)(v13 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v55 = *v22;
    long long v56 = *(_OWORD *)(v13 + 40);
    long long v57 = *(_OWORD *)(v13 + 72);
    *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
    *(_OWORD *)(v12 + 72) = v57;
    *uint64_t v21 = v55;
    *(_OWORD *)(v12 + 40) = v56;
  }
  *(void *)(v12 + 88) = *(void *)(v13 + 88);
  *(void *)(v12 + 96) = *(void *)(v13 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v12 + 104) = *(void *)(v13 + 104);
  *(void *)(v12 + 112) = *(void *)(v13 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v12 + 120) = *(void *)(v13 + 120);
  *(unsigned char *)(v12 + 128) = *(unsigned char *)(v13 + 128);
  uint64_t v58 = v14[10];
  uint64_t v59 = (void *)(v12 + v58);
  uint64_t v60 = (void *)(v13 + v58);
  uint64_t v61 = sub_100007764(&qword_10072A7F8);
  uint64_t v94 = *(void *)(v61 - 8);
  uint64_t v62 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v94 + 48);
  unint64_t v95 = v59;
  LODWORD(v59) = v62(v59, 1, v61);
  int v63 = v62(v60, 1, v61);
  if (v59)
  {
    if (!v63)
    {
      (*(void (**)(void *, void *, uint64_t))(v94 + 16))(v95, v60, v61);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v94 + 56))(v95, 0, 1, v61);
      goto LABEL_38;
    }
    size_t v64 = *(void *)(*(void *)(sub_100007764(&qword_10072A7D8) - 8) + 64);
    uint64_t v65 = v95;
  }
  else
  {
    if (!v63)
    {
      (*(void (**)(void *, void *, uint64_t))(v94 + 24))(v95, v60, v61);
      goto LABEL_38;
    }
    (*(void (**)(void *, uint64_t))(v94 + 8))(v95, v61);
    size_t v64 = *(void *)(*(void *)(sub_100007764(&qword_10072A7D8) - 8) + 64);
    uint64_t v65 = v95;
  }
  memcpy(v65, v60, v64);
LABEL_38:
  uint64_t v66 = v14[11];
  uint64_t v67 = v12 + v66;
  uint64_t v68 = (uint64_t *)(v13 + v66);
  uint64_t v69 = *v68;
  *(unsigned char *)(v67 + 8) = *((unsigned char *)v68 + 8);
  *(void *)uint64_t v67 = v69;
  uint64_t v70 = v14[12];
  uint64_t v71 = v12 + v70;
  uint64_t v72 = (long long *)(v13 + v70);
  uint64_t v73 = *(void *)(v12 + v70 + 32);
  uint64_t v74 = *(void *)(v13 + v70 + 32);
  if (v73 == 1)
  {
    if (v74 == 1)
    {
      long long v75 = *v72;
      long long v76 = v72[1];
      long long v77 = v72[2];
      *(_OWORD *)(v71 + 41) = *(long long *)((char *)v72 + 41);
      *(_OWORD *)(v71 + 16) = v76;
      *(_OWORD *)(v71 + 32) = v77;
      *(_OWORD *)uint64_t v71 = v75;
    }
    else
    {
      *(void *)uint64_t v71 = *(void *)v72;
      uint64_t v81 = *((void *)v72 + 1);
      *(unsigned char *)(v71 + 16) = *((unsigned char *)v72 + 16);
      *(void *)(v71 + 8) = v81;
      *(void *)(v71 + 24) = *((void *)v72 + 3);
      *(void *)(v71 + 32) = *((void *)v72 + 4);
      *(void *)(v71 + 40) = *((void *)v72 + 5);
      *(void *)(v71 + 48) = *((void *)v72 + 6);
      *(unsigned char *)(v71 + 56) = *((unsigned char *)v72 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v74 == 1)
  {
    sub_1002FD2C4(v71);
    long long v79 = v72[1];
    long long v78 = v72[2];
    long long v80 = *v72;
    *(_OWORD *)(v71 + 41) = *(long long *)((char *)v72 + 41);
    *(_OWORD *)(v71 + 16) = v79;
    *(_OWORD *)(v71 + 32) = v78;
    *(_OWORD *)uint64_t v71 = v80;
  }
  else
  {
    *(void *)uint64_t v71 = *(void *)v72;
    uint64_t v82 = *((void *)v72 + 1);
    *(unsigned char *)(v71 + 16) = *((unsigned char *)v72 + 16);
    *(void *)(v71 + 8) = v82;
    *(void *)(v71 + 24) = *((void *)v72 + 3);
    *(void *)(v71 + 32) = *((void *)v72 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v71 + 40) = *((void *)v72 + 5);
    *(void *)(v71 + 48) = *((void *)v72 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v71 + 56) = *((unsigned char *)v72 + 56);
  }
  uint64_t v83 = v14[13];
  uint64_t v84 = v12 + v83;
  uint64_t v85 = (uint64_t *)(v13 + v83);
  uint64_t v86 = *v85;
  *(unsigned char *)(v84 + 8) = *((unsigned char *)v85 + 8);
  *(void *)uint64_t v84 = v86;
  uint64_t v87 = v14[14];
  uint64_t v88 = (void *)(v12 + v87);
  uint64_t v89 = (void *)(v13 + v87);
  void *v88 = *v89;
  v88[1] = v89[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a3 = v97;
LABEL_46:
  uint64_t v90 = *(int *)(a3 + 56);
  char v91 = (void *)(a1 + v90);
  uint64_t v92 = (void *)(a2 + v90);
  void *v91 = *v92;
  v91[1] = v92[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004D9A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v10 = *(int *)(a3 + 52);
  uint64_t v11 = (_OWORD *)(a1 + v10);
  uint64_t v12 = (_OWORD *)(a2 + v10);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  uint64_t v13 = (int *)type metadata accessor for OTDRequest(0);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_100007764(&qword_10072A888);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    *uint64_t v11 = *v12;
    *((void *)v11 + 2) = *((void *)v12 + 2);
    *(_OWORD *)((char *)v11 + 24) = *(_OWORD *)((char *)v12 + 24);
    *(_OWORD *)((char *)v11 + 40) = *(_OWORD *)((char *)v12 + 40);
    *(_OWORD *)((char *)v11 + 56) = *(_OWORD *)((char *)v12 + 56);
    *(_OWORD *)((char *)v11 + 72) = *(_OWORD *)((char *)v12 + 72);
    *(_OWORD *)((char *)v11 + 88) = *(_OWORD *)((char *)v12 + 88);
    *(_OWORD *)((char *)v11 + 104) = *(_OWORD *)((char *)v12 + 104);
    *((void *)v11 + 15) = *((void *)v12 + 15);
    *((unsigned char *)v11 + 128) = *((unsigned char *)v12 + 128);
    uint64_t v16 = v13[10];
    __dst = (char *)v11 + v16;
    int v17 = (char *)v12 + v16;
    uint64_t v18 = sub_100007764(&qword_10072A7F8);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_100007764(&qword_10072A7D8);
      memcpy(__dst, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(__dst, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    uint64_t v21 = v13[11];
    uint64_t v22 = (char *)v11 + v21;
    uint64_t v23 = (char *)v12 + v21;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v13[12];
    long long v25 = (_OWORD *)((char *)v11 + v24);
    long long v26 = (_OWORD *)((char *)v12 + v24);
    *(_OWORD *)((char *)v25 + 41) = *(long long *)((char *)v26 + 41);
    long long v27 = v26[2];
    long long v28 = *v26;
    v25[1] = v26[1];
    void v25[2] = v27;
    *long long v25 = v28;
    uint64_t v29 = v13[13];
    uint64_t v30 = (char *)v11 + v29;
    uint64_t v31 = (char *)v12 + v29;
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    *(_OWORD *)((char *)v11 + v13[14]) = *(_OWORD *)((char *)v12 + v13[14]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 56)) = *(_OWORD *)(a2 + *(int *)(a3 + 56));
  return a1;
}

uint64_t sub_1004D9D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_10004D25C(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_10000C5F4(v8, v6);
LABEL_6:
  uint64_t v9 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v15;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v16 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(int *)(a3 + 52);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = (int *)type metadata accessor for OTDRequest(0);
  uint64_t v22 = *((void *)v21 - 1);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (v25)
    {
      sub_1004D84D8(v19, type metadata accessor for OTDRequest);
      goto LABEL_12;
    }
    uint64_t v33 = *(void *)(v20 + 8);
    *(void *)uint64_t v19 = *(void *)v20;
    *(void *)(v19 + 8) = v33;
    swift_bridgeObjectRelease();
    *(void *)(v19 + 16) = *(void *)(v20 + 16);
    uint64_t v88 = a3;
    if (*(void *)(v19 + 32))
    {
      uint64_t v34 = *(void *)(v20 + 32);
      if (v34)
      {
        *(void *)(v19 + 24) = *(void *)(v20 + 24);
        *(void *)(v19 + 32) = v34;
        swift_bridgeObjectRelease();
        uint64_t v35 = *(void *)(v20 + 48);
        *(void *)(v19 + 40) = *(void *)(v20 + 40);
        *(void *)(v19 + 48) = v35;
        swift_bridgeObjectRelease();
        uint64_t v36 = *(void *)(v20 + 64);
        *(void *)(v19 + 56) = *(void *)(v20 + 56);
        *(void *)(v19 + 64) = v36;
        swift_bridgeObjectRelease();
        uint64_t v37 = *(void *)(v20 + 80);
        *(void *)(v19 + 72) = *(void *)(v20 + 72);
        *(void *)(v19 + 80) = v37;
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      sub_1002FD318(v19 + 24);
    }
    long long v49 = *(_OWORD *)(v20 + 40);
    *(_OWORD *)(v19 + 24) = *(_OWORD *)(v20 + 24);
    *(_OWORD *)(v19 + 40) = v49;
    long long v50 = *(_OWORD *)(v20 + 72);
    *(_OWORD *)(v19 + 56) = *(_OWORD *)(v20 + 56);
    *(_OWORD *)(v19 + 72) = v50;
LABEL_20:
    uint64_t v51 = *(void *)(v20 + 96);
    *(void *)(v19 + 88) = *(void *)(v20 + 88);
    *(void *)(v19 + 96) = v51;
    swift_bridgeObjectRelease();
    uint64_t v52 = *(void *)(v20 + 112);
    *(void *)(v19 + 104) = *(void *)(v20 + 104);
    *(void *)(v19 + 112) = v52;
    swift_bridgeObjectRelease();
    *(void *)(v19 + 120) = *(void *)(v20 + 120);
    *(unsigned char *)(v19 + 128) = *(unsigned char *)(v20 + 128);
    uint64_t v53 = v21[10];
    long long v54 = (void *)(v19 + v53);
    long long v55 = (void *)(v20 + v53);
    uint64_t v56 = sub_100007764(&qword_10072A7F8);
    uint64_t v85 = *(void *)(v56 - 8);
    long long v57 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v85 + 48);
    uint64_t v86 = v54;
    LODWORD(v54) = v57(v54, 1, v56);
    int v58 = v57(v55, 1, v56);
    if (v54)
    {
      if (v58)
      {
        size_t v59 = *(void *)(*(void *)(sub_100007764(&qword_10072A7D8) - 8) + 64);
        uint64_t v60 = v86;
LABEL_25:
        memcpy(v60, v55, v59);
        goto LABEL_28;
      }
      (*(void (**)(void *, void *, uint64_t))(v85 + 32))(v86, v55, v56);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v86, 0, 1, v56);
    }
    else
    {
      if (v58)
      {
        (*(void (**)(void *, uint64_t))(v85 + 8))(v86, v56);
        size_t v59 = *(void *)(*(void *)(sub_100007764(&qword_10072A7D8) - 8) + 64);
        uint64_t v60 = v86;
        goto LABEL_25;
      }
      (*(void (**)(void *, void *, uint64_t))(v85 + 40))(v86, v55, v56);
    }
LABEL_28:
    uint64_t v61 = v21[11];
    uint64_t v62 = v19 + v61;
    uint64_t v63 = v20 + v61;
    *(void *)uint64_t v62 = *(void *)v63;
    *(unsigned char *)(v62 + 8) = *(unsigned char *)(v63 + 8);
    uint64_t v64 = v21[12];
    uint64_t v65 = v19 + v64;
    uint64_t v66 = v20 + v64;
    a3 = v88;
    if (*(void *)(v19 + v64 + 32) != 1)
    {
      uint64_t v67 = *(void *)(v66 + 32);
      if (v67 != 1)
      {
        uint64_t v69 = *(void *)(v66 + 8);
        *(void *)uint64_t v65 = *(void *)v66;
        *(void *)(v65 + 8) = v69;
        *(unsigned char *)(v65 + 16) = *(unsigned char *)(v66 + 16);
        *(void *)(v65 + 24) = *(void *)(v66 + 24);
        *(void *)(v65 + 32) = v67;
        swift_bridgeObjectRelease();
        uint64_t v70 = *(void *)(v66 + 48);
        *(void *)(v65 + 40) = *(void *)(v66 + 40);
        *(void *)(v65 + 48) = v70;
        swift_bridgeObjectRelease();
        *(unsigned char *)(v65 + 56) = *(unsigned char *)(v66 + 56);
        goto LABEL_33;
      }
      sub_1002FD2C4(v65);
    }
    long long v68 = *(_OWORD *)(v66 + 16);
    *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
    *(_OWORD *)(v65 + 16) = v68;
    *(_OWORD *)(v65 + 32) = *(_OWORD *)(v66 + 32);
    *(_OWORD *)(v65 + 41) = *(_OWORD *)(v66 + 41);
LABEL_33:
    uint64_t v71 = v21[13];
    uint64_t v72 = v19 + v71;
    uint64_t v73 = v20 + v71;
    *(void *)uint64_t v72 = *(void *)v73;
    *(unsigned char *)(v72 + 8) = *(unsigned char *)(v73 + 8);
    uint64_t v74 = v21[14];
    long long v75 = (void *)(v19 + v74);
    long long v76 = (uint64_t *)(v20 + v74);
    uint64_t v78 = *v76;
    uint64_t v77 = v76[1];
    void *v75 = v78;
    v75[1] = v77;
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v32 = sub_100007764(&qword_10072A888);
    memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_34;
  }
  uint64_t v87 = a3;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(void *)(v19 + 16) = *(void *)(v20 + 16);
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(v20 + 24);
  *(_OWORD *)(v19 + 40) = *(_OWORD *)(v20 + 40);
  *(_OWORD *)(v19 + 56) = *(_OWORD *)(v20 + 56);
  *(_OWORD *)(v19 + 72) = *(_OWORD *)(v20 + 72);
  *(_OWORD *)(v19 + 88) = *(_OWORD *)(v20 + 88);
  *(_OWORD *)(v19 + 104) = *(_OWORD *)(v20 + 104);
  *(void *)(v19 + 120) = *(void *)(v20 + 120);
  *(unsigned char *)(v19 + 128) = *(unsigned char *)(v20 + 128);
  uint64_t v26 = v21[10];
  long long v27 = (void *)(v19 + v26);
  long long v28 = (const void *)(v20 + v26);
  uint64_t v29 = sub_100007764(&qword_10072A7F8);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = sub_100007764(&qword_10072A7D8);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  a3 = v87;
  uint64_t v38 = v21[11];
  uint64_t v39 = v19 + v38;
  uint64_t v40 = v20 + v38;
  *(void *)uint64_t v39 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  uint64_t v41 = v21[12];
  long long v42 = (_OWORD *)(v19 + v41);
  uint64_t v43 = (long long *)(v20 + v41);
  *(_OWORD *)((char *)v42 + 41) = *(long long *)((char *)v43 + 41);
  long long v44 = v43[2];
  long long v45 = *v43;
  v42[1] = v43[1];
  v42[2] = v44;
  *long long v42 = v45;
  uint64_t v46 = v21[13];
  uint64_t v47 = v19 + v46;
  uint64_t v48 = v20 + v46;
  *(void *)uint64_t v47 = *(void *)v48;
  *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
  *(_OWORD *)(v19 + v21[14]) = *(_OWORD *)(v20 + v21[14]);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
LABEL_34:
  uint64_t v79 = *(int *)(a3 + 56);
  long long v80 = (void *)(a1 + v79);
  uint64_t v81 = (uint64_t *)(a2 + v79);
  uint64_t v83 = *v81;
  uint64_t v82 = v81[1];
  *long long v80 = v83;
  v80[1] = v82;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004DA448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004DA45C);
}

uint64_t sub_1004DA45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100007764(&qword_10072A888);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 52);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1004DA510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004DA524);
}

uint64_t sub_1004DA524(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_10072A888);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 52);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for DIPODINPair(uint64_t a1)
{
  return sub_100048DF0(a1, qword_1007308E0);
}

void sub_1004DA5F0()
{
  sub_1004DA6B8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1004DA6B8()
{
  if (!qword_100729E70)
  {
    type metadata accessor for OTDRequest(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100729E70);
    }
  }
}

ValueMetadata *type metadata accessor for VerifiedEncryptedDataWrapper.CodingKeys()
{
  return &type metadata for VerifiedEncryptedDataWrapper.CodingKeys;
}

ValueMetadata *type metadata accessor for DIPAssessmentBindings()
{
  return &type metadata for DIPAssessmentBindings;
}

unint64_t sub_1004DA738()
{
  unint64_t result = qword_100730940;
  if (!qword_100730940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730940);
  }
  return result;
}

unint64_t sub_1004DA790()
{
  unint64_t result = qword_100730948;
  if (!qword_100730948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730948);
  }
  return result;
}

unint64_t sub_1004DA7E8()
{
  unint64_t result = qword_100730950;
  if (!qword_100730950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730950);
  }
  return result;
}

unint64_t sub_1004DA83C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3A90, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1004DA888(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1752392040 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_1004DA9D4()
{
  unint64_t result = qword_100730960;
  if (!qword_100730960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730960);
  }
  return result;
}

id sub_1004DAA28(void *a1)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v25 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_100730968);
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_10000C728(a1, a1[3]);
  sub_1004DA9D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v23 = v5;
    int v24 = a1;
    uint64_t v22 = v3;
    sub_10005D424();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v6;
    id v13 = v28[0];
    id v12 = v28[1];
    uint64_t v14 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v28[0] = 0;
    id v16 = [v14 JSONObjectWithData:isa options:0 error:v28];

    id v9 = v28[0];
    if (v16)
    {
      id v17 = v28[0];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100007764(&qword_100730970);
      char v18 = swift_dynamicCast();
      uint64_t v19 = v26;
      if (v18)
      {
        sub_10000C5F4((uint64_t)v13, (unint64_t)v12);
        id v9 = v27;
        (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v10);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v24);
        return v9;
      }
      (*(void (**)(char *, void, uint64_t))(v25 + 104))(v23, enum case for DIPError.Code.internalError(_:), v22);
      id v9 = (id)sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_10000C5F4((uint64_t)v13, (unint64_t)v12);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v10);
    }
    else
    {
      id v20 = v28[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_10000C5F4((uint64_t)v13, (unint64_t)v12);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v10);
    }
    a1 = v24;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v9;
}

uint64_t sub_1004DAE60(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for DIPAssessmentBindings.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004DAF64);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPAssessmentBindings.CodingKeys()
{
  return &type metadata for DIPAssessmentBindings.CodingKeys;
}

unsigned char *_s8coreidvd17DIPSignalMapStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004DB068);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPSignalMapState()
{
  return &type metadata for DIPSignalMapState;
}

unint64_t sub_1004DB0A4()
{
  unint64_t result = qword_100730978;
  if (!qword_100730978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730978);
  }
  return result;
}

unint64_t sub_1004DB0FC()
{
  unint64_t result = qword_100730980;
  if (!qword_100730980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730980);
  }
  return result;
}

unint64_t sub_1004DB154()
{
  unint64_t result = qword_100730988;
  if (!qword_100730988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730988);
  }
  return result;
}

unint64_t sub_1004DB1AC()
{
  unint64_t result = qword_100730990;
  if (!qword_100730990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730990);
  }
  return result;
}

ValueMetadata *type metadata accessor for IDCredBiometricStore()
{
  return &type metadata for IDCredBiometricStore;
}

uint64_t sub_1004DB210()
{
  *(void *)(v1 + 128) = *v0;
  return _swift_task_switch(sub_1004DB234, 0, 0);
}

uint64_t sub_1004DB234()
{
  uint64_t v1 = (void *)v0[16];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1004DB330;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100529F5C;
  v0[13] = &unk_1007073D0;
  v0[14] = v2;
  [v1 globalAuthACLWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1004DB330()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_1004DB45C;
  }
  else {
    uint64_t v2 = sub_1004DB440;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004DB440()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 120));
}

uint64_t sub_1004DB45C()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004DB4C8()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1007309B8 + dword_1007309B8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1002B7618;
  return v3();
}

uint64_t sub_1004DB568()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1007309B0 + dword_1007309B0);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1004DBA18;
  return v3();
}

uint64_t sub_1004DB608()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return _swift_task_switch(sub_1004DB6C4, 0, 0);
}

uint64_t sub_1004DB6C4()
{
  (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for DIPError.Code.featureNotSupported(_:), v0[2]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1004DB810()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return _swift_task_switch(sub_1004DB8CC, 0, 0);
}

uint64_t sub_1004DB8CC()
{
  (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for DIPError.Code.featureNotSupported(_:), v0[2]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1004DBA1C(uint64_t a1, unint64_t a2)
{
  return sub_1004DC318(a1, a2);
}

uint64_t sub_1004DBA70(uint64_t a1, unint64_t a2)
{
  uint64_t v35 = type metadata accessor for DIPError.Code();
  uint64_t v34 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPError();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v36 = (char *)v32 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v32 - v13;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v40 = v5;
  uint64_t v39 = v6;
  uint64_t v33 = a1;
  uint64_t v38 = v10;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v41 = v7;
    uint64_t v19 = v18;
    v32[0] = swift_slowAlloc();
    *(void *)&v43[0] = v32[0];
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v20 = IdentityTarget.debugDescription.getter();
    uint64_t v45 = sub_100110D58(v20, v21, (uint64_t *)v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_100110D58(a1, a2, (uint64_t *)v43);
    uint64_t v6 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Provisioning was initiated successfully for target: %s, credentialIdentifier: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v41;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v22 = (void (*)(char *, uint64_t))*((void *)v7 + 1);
  v22(v14, v6);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v41 = v22;
  uint64_t v24 = v23;
  sub_100490170(v32[1], (uint64_t)v43);
  uint64_t v25 = swift_allocObject();
  long long v26 = v43[7];
  *(_OWORD *)(v25 + 136) = v43[6];
  *(_OWORD *)(v25 + 152) = v26;
  *(_OWORD *)(v25 + 168) = v43[8];
  long long v27 = v43[3];
  *(_OWORD *)(v25 + 72) = v43[2];
  *(_OWORD *)(v25 + 88) = v27;
  long long v28 = v43[5];
  *(_OWORD *)(v25 + 104) = v43[4];
  *(_OWORD *)(v25 + 120) = v28;
  long long v29 = v43[1];
  *(_OWORD *)(v25 + 40) = v43[0];
  uint64_t v30 = v33;
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v30;
  *(void *)(v25 + 32) = a2;
  *(void *)(v25 + 184) = v44;
  *(_OWORD *)(v25 + 56) = v29;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1004DD460, v25);
  swift_release();
  return swift_release();
}

uint64_t sub_1004DC318(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  __chkstk_darwin(v6);
  uint64_t v41 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError();
  uint64_t v47 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v46 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v48 - 8);
  uint64_t v11 = __chkstk_darwin(v48);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v40 = (char *)&v36 - v15;
  __chkstk_darwin(v14);
  BOOL v17 = (char *)&v36 - v16;
  defaultLogger()();
  sub_1002A8F60(v3);
  swift_bridgeObjectRetain();
  sub_1002A8F60(v3);
  swift_bridgeObjectRetain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v44 = v3;
  uint64_t v45 = v10;
  uint64_t v42 = v13;
  uint64_t v43 = v8;
  uint64_t v37 = a1;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v50 = v36;
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v22 = IdentityTarget.debugDescription.getter();
    uint64_t v49 = sub_100110D58(v22, v23, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v24 = v48;
    swift_bridgeObjectRelease();
    sub_1002A90A0(v3);
    sub_1002A90A0(v3);
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_100110D58(a1, a2, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v25 = a2;
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Provisioning was initiated successfully for target: %s, credentialIdentifier: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v24);
  }
  else
  {
    sub_1002A90A0(v3);
    sub_1002A90A0(v3);

    unint64_t v25 = a2;
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v48);
  }
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v27 = v26;
  uint64_t v28 = swift_allocObject();
  long long v29 = v44;
  long long v30 = *((_OWORD *)v44 + 4);
  *(_OWORD *)(v28 + 120) = *((_OWORD *)v44 + 5);
  long long v31 = *((_OWORD *)v29 + 7);
  *(_OWORD *)(v28 + 136) = *((_OWORD *)v29 + 6);
  *(_OWORD *)(v28 + 152) = v31;
  long long v32 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 56) = *((_OWORD *)v29 + 1);
  long long v33 = *((_OWORD *)v29 + 3);
  *(_OWORD *)(v28 + 72) = *((_OWORD *)v29 + 2);
  *(_OWORD *)(v28 + 88) = v33;
  *(_OWORD *)(v28 + 104) = v30;
  uint64_t v34 = v37;
  *(void *)(v28 + 16) = v27;
  *(void *)(v28 + 24) = v34;
  *(void *)(v28 + 32) = v25;
  *(void *)(v28 + 168) = v29[16];
  *(_OWORD *)(v28 + 40) = v32;
  sub_1002A8F60(v29);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1004DD524, v28);
  swift_release();
  return swift_release();
}

uint64_t sub_1004DCB74()
{
  return 0;
}

void sub_1004DCB84(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10010099C(a2, a3);
  if (!v3)
  {
    uint64_t v11 = v10;
    if (v10)
    {
      id v12 = [v10 proofingSessionID];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v33 = v7;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v34 = v15;

        v37.value = IdentityProofingActionStatus.rawValue.getter();
        v37.is_nil = 0;
        StoredProofingSession.update(proofingActionStatus:)(v37);
        sub_1000FFAB4();
        uint64_t v32 = v14;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.debug.getter();
        int v18 = v17;
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v19 = swift_slowAlloc();
          os_log_t v30 = v16;
          uint64_t v20 = v19;
          uint64_t v31 = swift_slowAlloc();
          uint64_t v36 = v31;
          *(_DWORD *)uint64_t v20 = 136315650;
          uint64_t v28 = v20 + 4;
          uint64_t v21 = IdentityTarget.debugDescription.getter();
          uint64_t v35 = sub_100110D58(v21, v22, &v36);
          int v29 = v18;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2080;
          uint64_t v28 = v20 + 14;
          unint64_t v23 = v34;
          swift_bridgeObjectRetain();
          uint64_t v35 = sub_100110D58(v32, v23, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v20 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v35 = sub_100110D58(a2, a3, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          os_log_t v24 = v30;
          _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v29, "Successfully updated the proofing status for target: %s, with proofingSessionID: %s, credentialIdentifier: %s", (uint8_t *)v20, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v6);
        uint64_t v25 = type metadata accessor for IdentityManagementSessionDelegate();
        id v26 = [self defaultCenter];
        NSString v27 = String._bridgeToObjectiveC()();
        uint64_t v36 = v25;
        sub_100007764((uint64_t *)&unk_10072E590);
        [v26 postNotificationName:v27 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
  }
}

void sub_1004DCF8C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10010099C(a2, a3);
  if (!v4)
  {
    uint64_t v36 = v9;
    if (v12)
    {
      uint64_t v13 = v12;
      id v14 = [v12 proofingSessionID];
      if (v14)
      {
        unint64_t v15 = v14;
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v16;

        v40.value = IdentityProofingActionStatus.rawValue.getter();
        v40.is_nil = 0;
        StoredProofingSession.update(proofingActionStatus:)(v40);
        sub_1000FFAB4();
        id v33 = v13;
        defaultLogger()();
        sub_1002A8F60(a4);
        swift_bridgeObjectRetain();
        sub_1002A8F60(a4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        os_log_type_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        int v19 = v18;
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v20 = swift_slowAlloc();
          os_log_t v31 = v17;
          uint64_t v21 = v20;
          uint64_t v32 = swift_slowAlloc();
          uint64_t v39 = v32;
          *(_DWORD *)uint64_t v21 = 136315650;
          uint64_t v30 = v21 + 4;
          uint64_t v22 = IdentityTarget.debugDescription.getter();
          uint64_t v37 = sub_100110D58(v22, v23, &v39);
          v29[1] = &v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1002A90A0(a4);
          sub_1002A90A0(a4);
          LODWORD(v30) = v19;
          *(_WORD *)(v21 + 12) = 2080;
          unint64_t v24 = v35;
          swift_bridgeObjectRetain();
          uint64_t v37 = sub_100110D58(v34, v24, &v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v21 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v37 = sub_100110D58(a2, a3, &v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          os_log_t v25 = v31;
          _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v30, "Successfully updated the proofing status for target: %s, with proofingSessionID: %s, credentialIdentifier: %s", (uint8_t *)v21, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1002A90A0(a4);
          sub_1002A90A0(a4);

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v8);
        uint64_t v26 = type metadata accessor for IdentityManagementSessionDelegate();
        id v27 = [self defaultCenter];
        NSString v28 = String._bridgeToObjectiveC()();
        uint64_t v39 = v26;
        sub_100007764((uint64_t *)&unk_10072E590);
        [v27 postNotificationName:v28 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
  }
}

uint64_t sub_1004DD3C8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = v0[16];
  if (v1 >> 60 != 15) {
    sub_10000C5F4(v0[15], v1);
  }
  unint64_t v2 = v0[18];
  if (v2 >> 60 != 15) {
    sub_10000C5F4(v0[17], v2);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 19));

  return _swift_deallocObject(v0, 192, 7);
}

void sub_1004DD460()
{
  sub_1004DCB84(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1004DD484()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 144);
  if (v1 >> 60 != 15) {
    sub_10000C5F4(*(void *)(v0 + 136), v1);
  }
  unint64_t v2 = *(void *)(v0 + 160);
  if (v2 >> 60 != 15) {
    sub_10000C5F4(*(void *)(v0 + 152), v2);
  }

  return _swift_deallocObject(v0, 176, 7);
}

__n128 sub_1004DD524()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = *(void *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 120);
  long long v5 = *(_OWORD *)(v0 + 152);
  v9[6] = *(_OWORD *)(v0 + 136);
  v9[7] = v5;
  uint64_t v10 = *(void *)(v0 + 168);
  long long v6 = *(_OWORD *)(v0 + 56);
  long long v7 = *(_OWORD *)(v0 + 88);
  void v9[2] = *(_OWORD *)(v0 + 72);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(v0 + 104);
  v9[5] = v4;
  v9[0] = *(_OWORD *)(v0 + 40);
  v9[1] = v6;
  sub_1004DCF8C(v1, v2, v3, v9);
  return result;
}

uint64_t sub_1004DD588@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v107 = a2;
  uint64_t v3 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  uint64_t v108 = *(void *)(v3 - 8);
  uint64_t v109 = v3;
  __chkstk_darwin(v3);
  uint64_t v101 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764((uint64_t *)&unk_1007264F0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v92 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v104 = *(void *)(v11 - 8);
  uint64_t v105 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v102 = (uint64_t)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v103 = (char *)&v92 - v14;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v110 = v15;
  uint64_t v111 = v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v92 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  unint64_t v23 = (char *)&v92 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v92 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  int v29 = (char *)&v92 - v28;
  __chkstk_darwin(v27);
  os_log_t v31 = (char *)&v92 - v30;
  id v32 = [a1 sessionIdentifier];
  if (!v32)
  {
    defaultLogger()();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "MobileDocumentReaderAuthenticationCertificate could not initialize because the CoreData record does not have a sessionIdentifier", v45, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v111 + 8))(v31, v110);
    goto LABEL_11;
  }
  id v33 = v32;
  uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v106 = v34;

  id v35 = [a1 certificateChain];
  if (!v35
    || (uint64_t v36 = v35,
        v113[0] = 0,
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(),
        v36,
        !v113[0]))
  {
    uint64_t v37 = a1;
    defaultLogger()();
    unint64_t v38 = v106;
    swift_bridgeObjectRetain();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v112 = sub_100110D58(v100, v38, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "MobileDocumentReaderAuthenticationCertificate could not initialize because the CoreData record does not contain a certificateChain for sessionIdentifier %s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v111 + 8))(v29, v110);
      uint64_t v42 = 1;
LABEL_12:
      uint64_t v46 = v107;
LABEL_13:
      uint64_t v48 = v108;
      uint64_t v47 = v109;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v46, v42, 1, v47);
    }

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v29, v110);
LABEL_11:
    uint64_t v42 = 1;
    goto LABEL_12;
  }
  uint64_t v50 = decodeCertificateChain(fromDER:)();
  swift_bridgeObjectRelease();
  id v99 = a1;
  id v51 = [a1 signingKey];
  if (!v51) {
    goto LABEL_24;
  }
  id v52 = v51;
  unint64_t v98 = v50;
  id v53 = [v51 keyBlob];
  if (!v53)
  {

LABEL_24:
    swift_bridgeObjectRelease();
    defaultLogger()();
    unint64_t v68 = v106;
    swift_bridgeObjectRetain();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v112 = sub_100110D58(v100, v68, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "MobileDocumentReaderAuthenticationCertificate could not initialize because the CoreData record does not contain a signing key for sessionIdentifier %s", v71, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v111 + 8))(v20, v110);
      uint64_t v42 = 1;
      goto LABEL_12;
    }

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v20, v110);
    goto LABEL_11;
  }
  long long v54 = v53;
  uint64_t v96 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v97 = v55;

  id v56 = [v99 applicationInstallation];
  if (!v56
    || (long long v57 = v56,
        id v58 = [v56 applicationIdentifier],
        v57,
        !v58))
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = v107;
    goto LABEL_31;
  }
  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v94 = v59;

  id v60 = v99;
  id v61 = [v99 applicationInstallation];
  id v95 = v52;
  if (!v61)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56))(v10, 1, 1, v105);
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10045CEC4((uint64_t)v10);
    uint64_t v46 = v107;
    id v52 = v95;
LABEL_31:
    defaultLogger()();
    unint64_t v73 = v106;
    swift_bridgeObjectRetain();
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v74, v75))
    {
      long long v76 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)long long v76 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v112 = sub_100110D58(v100, v73, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "MobileDocumentReaderAuthenticationCertificate could not initialize because the CoreData record does not contain an application installation for sessionIdentifier %s", v76, 0xCu);
      uint64_t v42 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10000C5F4(v96, v97);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v23, v110);
    }
    else
    {

      sub_10000C5F4(v96, v97);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v111 + 8))(v23, v110);
      uint64_t v42 = 1;
    }
    goto LABEL_13;
  }
  uint64_t v62 = v61;
  id v63 = [v61 installationIdentifier];

  if (v63)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v64 = v104;
    uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56);
    uint64_t v66 = v8;
    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v64 = v104;
    uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56);
    uint64_t v66 = v8;
    uint64_t v67 = 1;
  }
  uint64_t v72 = v105;
  v65(v66, v67, 1, v105);
  sub_1004DE2E4((uint64_t)v8, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v10, 1, v72) == 1) {
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v103, v10, v72);
  defaultLogger()();
  unint64_t v77 = v106;
  swift_bridgeObjectRetain_n();
  uint64_t v78 = Logger.logObject.getter();
  os_log_type_t v79 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v78, v79))
  {
    long long v80 = (uint8_t *)swift_slowAlloc();
    v113[0] = swift_slowAlloc();
    *(_DWORD *)long long v80 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v112 = sub_100110D58(v100, v77, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "MobileDocumentReaderAuthenticationCertificate successfully initialized with sessionIdentifier %s", v80, 0xCu);
    swift_arrayDestroy();
    id v60 = v99;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v111 + 8))(v26, v110);
  uint64_t v46 = v107;
  uint64_t v48 = v108;
  uint64_t v47 = v109;
  uint64_t v81 = v101;
  (*(void (**)(uint64_t, char *, uint64_t))(v104 + 16))(v102, v103, v105);
  id v82 = [v60 merchantLogo];
  if (v82)
  {
    uint64_t v83 = v82;
    uint64_t v84 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v86 = v85;
  }
  else
  {
    uint64_t v84 = 0;
    unint64_t v86 = 0xF000000000000000;
  }
  uint64_t v88 = v96;
  unint64_t v87 = v97;
  sub_10002CEB0(v96, v97);
  uint64_t v91 = v84;
  uint64_t v89 = v88;
  sub_10043C544(v100, v106, v93, v94, v102, v98, v88, v87, v81, v91, v86);
  id v90 = v99;

  sub_10000C5F4(v89, v87);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v103, v105);
  sub_1000D5BA0((uint64_t)v81, v46);
  uint64_t v42 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v46, v42, 1, v47);
}

uint64_t sub_1004DE2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_1007264F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004DE34C(void *a1)
{
  uint64_t v2 = sub_100007764((uint64_t *)&unk_1007264F0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v89 - v6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v106 = v8;
  uint64_t v107 = v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v100 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v102 = (char *)&v89 - v13;
  __chkstk_darwin(v12);
  uint64_t v103 = (char *)&v89 - v14;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v89 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  unint64_t v23 = (char *)&v89 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v101 = (char *)&v89 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v89 - v26;
  id v28 = [a1 certificateData];
  if (!v28)
  {
    defaultLogger()();
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "MobileDocumentReaderIdentityKey could not initialize because certificate data is missing in CoreData record", v46, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v27, v15);
    return 0;
  }
  int v29 = v28;
  uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v104 = v31;
  uint64_t v105 = v30;

  id v108 = a1;
  id v32 = [a1 applicationInstallation];
  if (!v32) {
    goto LABEL_14;
  }
  id v33 = v32;
  id v34 = [v32 applicationIdentifier];

  if (!v34) {
    goto LABEL_14;
  }
  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v99 = v35;

  id v36 = [v108 applicationInstallation];
  if (!v36)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v7, 1, 1, v106);
LABEL_13:
    swift_bridgeObjectRelease();
    sub_10045CEC4((uint64_t)v7);
LABEL_14:
    defaultLogger()();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "MobileDocumentReaderIdentityKey could not initialize because application installation is missing.", v50, 2u);
      swift_slowDealloc();
    }
    sub_10000C5F4(v105, v104);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    return 0;
  }
  uint64_t v37 = v36;
  id v38 = [v36 installationIdentifier];

  uint64_t v39 = v15;
  if (v38)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v40 = v107;
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56);
    uint64_t v42 = v5;
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v40 = v107;
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56);
    uint64_t v42 = v5;
    uint64_t v43 = 1;
  }
  uint64_t v47 = v106;
  v41(v42, v43, 1, v106);
  sub_1004DE2E4((uint64_t)v5, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v7, 1, v47) == 1) {
    goto LABEL_13;
  }
  id v53 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  long long v54 = v103;
  v53(v103, v7, v47);
  id v55 = [v108 signingKey];
  unint64_t v56 = v104;
  if (!v55)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    defaultLogger()();
    id v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "MobileDocumentReaderIdentityKey could not initialize because signing key is missing.", v65, 2u);
      uint64_t v47 = v106;
      swift_slowDealloc();
    }
    sub_10000C5F4(v105, v56);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v39);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v54, v47);
    return 0;
  }
  long long v57 = v55;
  id v58 = [v55 keyBlob];
  if (!v58)
  {

    long long v54 = v103;
    goto LABEL_24;
  }
  uint64_t v59 = v58;
  uint64_t v106 = v39;
  unint64_t v97 = (void (*)(uint64_t, char *, uint64_t))v53;
  uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = v61;

  uint64_t v95 = decodeCertificate(fromDER:)();
  uint64_t v96 = v60;
  uint64_t v94 = v62;
  uint64_t v66 = v101;
  defaultLogger()();
  uint64_t v67 = v107;
  uint64_t v92 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
  uint64_t v93 = v107 + 16;
  v92(v102, v103, v47);
  unint64_t v68 = v99;
  swift_bridgeObjectRetain_n();
  uint64_t v69 = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.debug.getter();
  int v91 = v70;
  BOOL v71 = os_log_type_enabled(v69, v70);
  uint64_t v72 = v47;
  if (v71)
  {
    uint64_t v73 = swift_slowAlloc();
    uint64_t v90 = swift_slowAlloc();
    v110[0] = v90;
    *(_DWORD *)uint64_t v73 = 136315394;
    swift_bridgeObjectRetain();
    os_log_t v89 = v69;
    uint64_t v109 = sub_100110D58(v98, v68, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v73 + 12) = 2080;
    sub_1004DEDA4();
    uint64_t v74 = v102;
    uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v109 = sub_100110D58(v75, v76, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v72 = v47;
    swift_bridgeObjectRelease();
    unint64_t v77 = *(void (**)(char *, uint64_t))(v67 + 8);
    v77(v74, v72);
    os_log_t v78 = v89;
    _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v91, "MobileDocumentReaderIdentityKey successfully initialized with applicationIdentifier %s and installationIdentifier %s", (uint8_t *)v73, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v56 = v104;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v16 + 8))(v101, v106);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    unint64_t v77 = *(void (**)(char *, uint64_t))(v67 + 8);
    v77(v102, v72);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v66, v106);
  }
  uint64_t v79 = v98;
  long long v80 = v100;
  uint64_t v81 = v103;
  v92(v100, v103, v72);
  type metadata accessor for SESKeystore();
  swift_allocObject();
  uint64_t v82 = v72;
  uint64_t v83 = SESKeystore.init()();

  sub_10000C5F4(v105, v56);
  v77(v81, v82);
  uint64_t v84 = type metadata accessor for Date();
  type metadata accessor for MobileDocumentReaderIdentityKey();
  uint64_t v51 = swift_allocObject();
  unint64_t v85 = v99;
  *(void *)(v51 + 16) = v79;
  *(void *)(v51 + 24) = v85;
  v97(v51 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_installationIdentifier, v80, v82);
  unint64_t v86 = (uint64_t *)(v51 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob);
  uint64_t v87 = v94;
  *unint64_t v86 = v96;
  v86[1] = v87;
  *(void *)(v51 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_attestationCertificate) = v95;
  *(void *)(v51 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keystore) = v83;
  uint64_t v88 = (uint64_t *)(v51 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_dateProvider);
  uint64_t *v88 = v84;
  v88[1] = (uint64_t)&protocol witness table for Date;
  return v51;
}

unint64_t sub_1004DEDA4()
{
  unint64_t result = qword_10072ECB0;
  if (!qword_10072ECB0)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072ECB0);
  }
  return result;
}

uint64_t sub_1004DEDFC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 16) = 0u;
  uint64_t v8 = v1 + 16;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  swift_beginAccess();
  sub_1004E3E3C(a1, v8);
  swift_endAccess();
  defaultLogger()();
  sub_1004E3EA4(a1, (uint64_t)v24);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 67109120;
    sub_1004E3EA4((uint64_t)v24, (uint64_t)v21);
    uint64_t v12 = v22;
    uint64_t v20 = v2;
    if (v22)
    {
      uint64_t v13 = v23;
      sub_10000C728(v21, v22);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 88))(v12, v13);
      unint64_t v16 = v15;
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v21);
      sub_10000C5E0(v14, v16);
      if (v16 >> 60 != 15)
      {
        int v17 = 1;
LABEL_8:
        sub_10000C6CC((uint64_t)v24, &qword_100730AB8);
        v24[0] = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "supplementalProvisioningData for exists at provisioning manager init ->%{BOOL}d", v11, 8u);
        swift_slowDealloc();

        uint64_t v2 = v20;
        goto LABEL_9;
      }
    }
    else
    {
      sub_10000C6CC((uint64_t)v21, &qword_100730AB8);
    }
    int v17 = 0;
    goto LABEL_8;
  }
  sub_10000C6CC((uint64_t)v24, &qword_100730AB8);

LABEL_9:
  sub_10000C6CC(a1, &qword_100730AB8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v2;
}

uint64_t sub_1004DF088()
{
  v1[59] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[60] = v2;
  v1[61] = *(void *)(v2 - 8);
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[64] = v3;
  v1[65] = *(void *)(v3 - 8);
  v1[66] = swift_task_alloc();
  return _swift_task_switch(sub_1004DF1B4, 0, 0);
}

uint64_t sub_1004DF1B4()
{
  uint64_t v1 = *(void *)(v0 + 472) + 16;
  swift_beginAccess();
  sub_1004E3EA4(v1, v0 + 344);
  if (!*(void *)(v0 + 368))
  {
    uint64_t v7 = *(void *)(v0 + 528);
    uint64_t v8 = *(void *)(v0 + 520);
    uint64_t v9 = *(void *)(v0 + 512);
    sub_10000C6CC(v0 + 344, &qword_100730AB8);
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, enum case for DIPError.Code.targetUnavailable(_:), v9);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  sub_10000C6B4((long long *)(v0 + 344), v0 + 224);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 256);
  sub_10000C728((void *)(v0 + 224), v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  sub_1004E4168(v0 + 224);
  swift_bridgeObjectRelease();
  uint64_t v4 = self;
  id v5 = [v4 standardUserDefaults];
  v6._uint64_t countAndFlagsBits = 0xD000000000000020;
  v6._object = (void *)0x8000000100651530;
  LOBYTE(v3) = NSUserDefaults.internalBool(forKey:)(v6);

  if (v3)
  {
LABEL_7:
    unsigned int v30 = enum case for DIPError.Code.provisioningIdentityFailed(_:);
    (*(void (**)(void))(*(void *)(v0 + 520) + 104))(*(void *)(v0 + 528));
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v16 = *(void *)(v0 + 528);
    uint64_t v17 = *(void *)(v0 + 520);
    uint64_t v18 = *(void *)(v0 + 512);
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    v19._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v16, v30, v18);
    swift_errorRetain();
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 224);
    goto LABEL_8;
  }
  id v10 = [v4 standardUserDefaults];
  v11._uint64_t countAndFlagsBits = 0xD000000000000026;
  v11._object = (void *)0x8000000100651560;
  Swift::Bool v12 = NSUserDefaults.internalBool(forKey:)(v11);

  if (v12)
  {
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v14 = *(void *)(v0 + 256);
    sub_10000C728((void *)(v0 + 224), v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 64))(v13, v14);
    uint64_t v15 = IdentityTarget.rawValue.getter();
    if (v15 == IdentityTarget.rawValue.getter()) {
      goto LABEL_7;
    }
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Internal setting for forceWatchProvisioningFailure is enabled but this is phone provisioning. Will continue provisioning", v24, 2u);
      swift_slowDealloc();
    }
    uint64_t v25 = *(void *)(v0 + 504);
    uint64_t v26 = *(void *)(v0 + 480);
    uint64_t v27 = *(void *)(v0 + 488);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  }
  id v28 = [objc_allocWithZone((Class)PKPaymentService) init];
  *(void *)(v0 + 536) = v28;
  int v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v29;
  *int v29 = v0;
  v29[1] = sub_1004DF874;
  return sub_1004E1528((uint64_t)v28);
}

uint64_t sub_1004DF874()
{
  *(void *)(*(void *)v1 + 552) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004E0C48;
  }
  else {
    uint64_t v2 = sub_1004DF988;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004DF988()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[32];
  sub_10000C728(v0 + 28, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[32];
  sub_10000C728(v0 + 28, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];
  unint64_t v76 = v0 + 28;
  sub_10000C728(v0 + 28, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  id v7 = objc_allocWithZone((Class)PKShareablePassMetadata);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v7 initWithProvisioningCredentialIdentifier:v8 cardConfigurationIdentifier:v9 sharingInstanceIdentifier:v10];
  v0[70] = v11;

  if (!v11)
  {
    id v32 = (void *)v0[67];
    unsigned int v74 = enum case for DIPError.Code.provisioningIdentityFailed(_:);
    (*(void (**)(void))(v0[65] + 104))(v0[66]);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_8;
  }
  defaultLogger()();
  Swift::Bool v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "PKShareablePassMetadata created, invoking Wallet's provisionIdentityPass", v14, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = v0[61];
  uint64_t v15 = v0[62];
  uint64_t v17 = v0[60];

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  uint64_t v18 = v0[31];
  uint64_t v19 = v0[32];
  sub_10000C728(v76, v18);
  (*(void (**)(uint64_t, uint64_t))(v19 + 64))(v18, v19);
  uint64_t v20 = IdentityTarget.rawValue.getter();
  uint64_t v21 = IdentityTarget.rawValue.getter();
  uint64_t v22 = v0[31];
  uint64_t v23 = v0[32];
  sub_10000C728(v76, v22);
  if (v20 == v21)
  {
    v0[71] = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 88))(v22, v23);
    v0[72] = v24;
    if (v24 >> 60 == 15)
    {
      uint64_t v25 = enum case for DIPError.Code.provisioningIdentityFailed(_:);
      (*(void (**)(void, void, void))(v0[65] + 104))(v0[66], enum case for DIPError.Code.provisioningIdentityFailed(_:), v0[64]);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      uint64_t v72 = (void *)v0[70];
      BOOL v71 = (void *)v0[67];
      uint64_t v26 = v0[66];
      uint64_t v27 = v0[65];
      uint64_t v28 = v0[64];
      _StringGuts.grow(_:)(66);
      v29._uint64_t countAndFlagsBits = 0xD000000000000040;
      v29._object = (void *)0x8000000100651660;
      String.append(_:)(v29);
      swift_getErrorValue();
      v30._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      unsigned int v74 = v25;
      uint64_t v31 = v25;
      id v32 = v71;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 104))(v26, v31, v28);
      swift_errorRetain();
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();

LABEL_8:
      uint64_t v33 = v0[66];
      uint64_t v34 = v0[65];
      uint64_t v35 = v0[64];
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      swift_getErrorValue();
      v36._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v33, v74, v35);
      swift_errorRetain();
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v76);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v37 = (uint64_t (*)(void))v0[1];
LABEL_25:
      return v37();
    }
    uint64_t v43 = v0[31];
    uint64_t v44 = v0[32];
    sub_10000C728(v76, v43);
    (*(void (**)(uint64_t, uint64_t))(v44 + 40))(v43, v44);
    if (v45)
    {
      NSString v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v46 = 0;
    }
    v0[73] = v46;
    uint64_t v73 = (void *)v0[67];
    NSString v75 = v46;
    uint64_t v58 = v0[31];
    uint64_t v57 = v0[32];
    sub_10000C728(v76, v58);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v57);
    NSString v59 = String._bridgeToObjectiveC()();
    v0[74] = v59;
    swift_bridgeObjectRelease();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v0[75] = isa;
    v0[2] = v0;
    v0[3] = sub_1004E05A4;
    uint64_t v61 = swift_continuation_init();
    v0[38] = _NSConcreteStackBlock;
    v0[39] = 0x40000000;
    v0[40] = sub_100529EC4;
    v0[41] = &unk_1007074B8;
    v0[42] = v61;
    [v73 queueIdentityPassProvisioningWithPassMetadata:v11 targetDeviceIdentifier:v75 credentialIdentifier:v59 supplementalData:isa completion:v0 + 38];
    unint64_t v56 = v0 + 2;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v23 + 64))(v22, v23);
    uint64_t v38 = IdentityTarget.rawValue.getter();
    if (v38 != IdentityTarget.rawValue.getter())
    {
      sub_1004E3EA4(v0[59] + 16, (uint64_t)(v0 + 33));
      if (v0[36])
      {
        sub_100030A10((uint64_t)(v0 + 33), (uint64_t)(v0 + 18));
        sub_10000C6CC((uint64_t)(v0 + 33), &qword_100730AB8);
        uint64_t v47 = v0[22];
        sub_10000C728(v0 + 18, v0[21]);
        uint64_t v48 = v0[31];
        uint64_t v49 = v0[32];
        sub_10000C728(v76, v48);
        uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v48, v49);
        (*(void (**)(uint64_t))(v47 + 96))(v50);
        swift_bridgeObjectRelease();
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 18));
      }
      else
      {
        sub_10000C6CC((uint64_t)(v0 + 33), &qword_100730AB8);
      }
      uint64_t v62 = (void *)v0[70];
      id v63 = (void *)v0[67];
      _StringGuts.grow(_:)(104);
      v64._uint64_t countAndFlagsBits = 0xD000000000000066;
      v64._object = (void *)0x80000001006515F0;
      String.append(_:)(v64);
      uint64_t v65 = v0[31];
      uint64_t v66 = v0[32];
      sub_10000C728(v76, v65);
      v67._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v65, v66);
      String.append(_:)(v67);
      swift_bridgeObjectRelease();
      v68._uint64_t countAndFlagsBits = 0;
      v69._uint64_t countAndFlagsBits = 0x3162343038396564;
      v69._object = (void *)0xE800000000000000;
      v68._object = (void *)0xE000000000000000;
      logMilestone(tag:description:)(v69, v68);
      swift_bridgeObjectRelease();

      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v76);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v37 = (uint64_t (*)(void))v0[1];
      goto LABEL_25;
    }
    uint64_t v39 = v0[31];
    uint64_t v40 = v0[32];
    sub_10000C728(v76, v39);
    (*(void (**)(uint64_t, uint64_t))(v40 + 40))(v39, v40);
    if (v41)
    {
      NSString v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v42 = 0;
    }
    v0[77] = v42;
    uint64_t v51 = (void *)v0[67];
    uint64_t v52 = v0[31];
    uint64_t v53 = v0[32];
    sub_10000C728(v76, v52);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
    NSString v54 = String._bridgeToObjectiveC()();
    v0[78] = v54;
    swift_bridgeObjectRelease();
    v0[10] = v0;
    v0[11] = sub_1004E0900;
    uint64_t v55 = swift_continuation_init();
    v0[23] = _NSConcreteStackBlock;
    v0[24] = 0x40000000;
    v0[25] = sub_100529EC4;
    v0[26] = &unk_1007074A0;
    v0[27] = v55;
    [v51 queueIdentityPassProvisioningWithPassMetadata:v11 targetDeviceIdentifier:v42 credentialIdentifier:v54 supplementalData:0 completion:v0 + 23];
    unint64_t v56 = v0 + 10;
  }
  return _swift_continuation_await(v56);
}

uint64_t sub_1004E05A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 608) = v1;
  if (v1) {
    uint64_t v2 = sub_1004E0E44;
  }
  else {
    uint64_t v2 = sub_1004E06B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004E06B4()
{
  uint64_t v1 = (void *)v0[75];
  uint64_t v2 = (void *)v0[74];
  uint64_t v3 = (void *)v0[73];
  sub_10000C5E0(v0[71], v0[72]);

  sub_1004E3EA4(v0[59] + 16, (uint64_t)(v0 + 33));
  if (v0[36])
  {
    sub_100030A10((uint64_t)(v0 + 33), (uint64_t)(v0 + 18));
    sub_10000C6CC((uint64_t)(v0 + 33), &qword_100730AB8);
    uint64_t v4 = v0[22];
    sub_10000C728(v0 + 18, v0[21]);
    uint64_t v5 = v0[31];
    uint64_t v6 = v0[32];
    sub_10000C728(v0 + 28, v5);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    (*(void (**)(uint64_t))(v4 + 96))(v7);
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 18));
  }
  else
  {
    sub_10000C6CC((uint64_t)(v0 + 33), &qword_100730AB8);
  }
  NSString v8 = (void *)v0[70];
  NSString v9 = (void *)v0[67];
  _StringGuts.grow(_:)(104);
  v10._object = (void *)0x80000001006515F0;
  v10._uint64_t countAndFlagsBits = 0xD000000000000066;
  String.append(_:)(v10);
  uint64_t v11 = v0[31];
  uint64_t v12 = v0[32];
  sub_10000C728(v0 + 28, v11);
  v13._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0;
  v15._uint64_t countAndFlagsBits = 0x3162343038396564;
  v15._object = (void *)0xE800000000000000;
  v14._object = (void *)0xE000000000000000;
  logMilestone(tag:description:)(v15, v14);
  swift_bridgeObjectRelease();

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 28));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1004E0900()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 632) = v1;
  if (v1) {
    uint64_t v2 = sub_1004E11C4;
  }
  else {
    uint64_t v2 = sub_1004E0A10;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004E0A10()
{
  uint64_t v1 = *(void **)(v0 + 616);

  sub_1004E3EA4(*(void *)(v0 + 472) + 16, v0 + 264);
  if (*(void *)(v0 + 288))
  {
    sub_100030A10(v0 + 264, v0 + 144);
    sub_10000C6CC(v0 + 264, &qword_100730AB8);
    uint64_t v2 = *(void *)(v0 + 176);
    sub_10000C728((void *)(v0 + 144), *(void *)(v0 + 168));
    uint64_t v3 = *(void *)(v0 + 248);
    uint64_t v4 = *(void *)(v0 + 256);
    sub_10000C728((void *)(v0 + 224), v3);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    (*(void (**)(uint64_t))(v2 + 96))(v5);
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 144);
  }
  else
  {
    sub_10000C6CC(v0 + 264, &qword_100730AB8);
  }
  uint64_t v6 = *(void **)(v0 + 560);
  uint64_t v7 = *(void **)(v0 + 536);
  _StringGuts.grow(_:)(104);
  v8._object = (void *)0x80000001006515F0;
  v8._uint64_t countAndFlagsBits = 0xD000000000000066;
  String.append(_:)(v8);
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v10 = *(void *)(v0 + 256);
  sub_10000C728((void *)(v0 + 224), v9);
  v11._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0;
  v13._uint64_t countAndFlagsBits = 0x3162343038396564;
  v13._object = (void *)0xE800000000000000;
  v12._object = (void *)0xE000000000000000;
  logMilestone(tag:description:)(v13, v12);
  swift_bridgeObjectRelease();

  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1004E0C48()
{
  uint64_t v1 = enum case for DIPError.Code.provisioningIdentityFailed(_:);
  uint64_t v2 = *(void *)(v0 + 528);
  uint64_t v3 = *(void *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 512);
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v5._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v2, v1, v4);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1004E0E44()
{
  uint64_t v1 = (void *)v0[75];
  uint64_t v2 = (void *)v0[74];
  uint64_t v3 = (void *)v0[73];
  unint64_t v4 = v0[72];
  uint64_t v5 = v0[71];
  swift_willThrow();
  sub_10000C5E0(v5, v4);

  uint64_t v17 = (void *)v0[70];
  uint64_t v18 = (void *)v0[67];
  uint64_t v6 = v0[66];
  uint64_t v7 = v0[65];
  _StringGuts.grow(_:)(66);
  v8._uint64_t countAndFlagsBits = 0xD000000000000040;
  v8._object = (void *)0x8000000100651660;
  String.append(_:)(v8);
  swift_getErrorValue();
  v9._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  unsigned int v16 = enum case for DIPError.Code.provisioningIdentityFailed(_:);
  (*(void (**)(uint64_t))(v7 + 104))(v6);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();

  uint64_t v10 = v0[66];
  uint64_t v11 = v0[65];
  uint64_t v12 = v0[64];
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v13._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, v16, v12);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 28));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1004E11C4()
{
  uint64_t v1 = (void *)v0[78];
  uint64_t v2 = (void *)v0[77];
  swift_willThrow();

  Swift::String v14 = (void *)v0[70];
  Swift::String v15 = (void *)v0[67];
  uint64_t v3 = v0[66];
  uint64_t v4 = v0[65];
  _StringGuts.grow(_:)(66);
  v5._uint64_t countAndFlagsBits = 0xD000000000000040;
  v5._object = (void *)0x8000000100651660;
  String.append(_:)(v5);
  swift_getErrorValue();
  v6._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  unsigned int v13 = enum case for DIPError.Code.provisioningIdentityFailed(_:);
  (*(void (**)(uint64_t))(v4 + 104))(v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();

  uint64_t v7 = v0[66];
  uint64_t v8 = v0[65];
  uint64_t v9 = v0[64];
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v10._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, v13, v9);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 28));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1004E1528(uint64_t a1)
{
  v2[29] = a1;
  v2[30] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[31] = v3;
  v2[32] = *(void *)(v3 - 8);
  v2[33] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[34] = v4;
  v2[35] = *(void *)(v4 - 8);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  return _swift_task_switch(sub_1004E1660, 0, 0);
}

uint64_t sub_1004E1660()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Preparing secure enclave for provisioning", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 240);

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 312) = v8;
  *(void *)(v0 + 320) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  swift_beginAccess();
  sub_1004E3EA4(v7 + 16, v0 + 120);
  if (*(void *)(v0 + 144))
  {
    sub_10000C6B4((long long *)(v0 + 120), v0 + 80);
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 112);
    sub_10000C728((void *)(v0 + 80), v9);
    (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v9, v10);
    if (v11)
    {
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v12 = 0;
    }
    *(void *)(v0 + 328) = v12;
    uint64_t v18 = *(void **)(v0 + 232);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1004E1A00;
    uint64_t v19 = swift_continuation_init();
    *(void *)(v0 + 160) = _NSConcreteStackBlock;
    *(void *)(v0 + 168) = 0x40000000;
    *(void *)(v0 + 176) = sub_100529EC4;
    *(void *)(v0 + 184) = &unk_100707488;
    *(void *)(v0 + 192) = v19;
    [v18 prepareIdentityProvisioningForTargetDeviceIdentifier:v12 completion:v0 + 160];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 264);
    uint64_t v15 = *(void *)(v0 + 248);
    sub_10000C6CC(v0 + 120, &qword_100730AB8);
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for DIPError.Code.targetUnavailable(_:), v15);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_1004E1A00()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 336) = v1;
  if (v1) {
    os_log_type_t v2 = sub_1004E1C84;
  }
  else {
    os_log_type_t v2 = sub_1004E1B10;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004E1B10()
{
  v1._object = (void *)0x80000001006514A0;
  v2._uint64_t countAndFlagsBits = 0x6136343930366139;
  v2._object = (void *)0xE800000000000000;
  v1._uint64_t countAndFlagsBits = 0xD000000000000060;
  logMilestone(tag:description:)(v2, v1);
  defaultLogger()();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PassKit responded to secure enclave preparation with success", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
  uint64_t v7 = *(void *)(v0 + 296);
  uint64_t v8 = *(void *)(v0 + 272);

  v6(v7, v8);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1004E1C84()
{
  Swift::String v1 = (void *)v0[41];
  swift_willThrow();

  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  Swift::String v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[28] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "PassKit responded to secure enclave preparation with error: %@", v4, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[39];
  uint64_t v8 = v0[36];
  uint64_t v9 = v0[33];
  uint64_t v10 = v0[34];
  uint64_t v12 = v0[31];
  uint64_t v11 = v0[32];

  v7(v8, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v9, enum case for DIPError.Code.failureToPrepareForProvisioning(_:), v12);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 10));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

void sub_1004E1F6C(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  sub_10000C728(a2, v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  unint64_t v13 = sub_100100D10(v11, v12);
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = (void *)v13;
    swift_bridgeObjectRelease();
    if (v14)
    {
      id v15 = [v14 proofingSessionID];
      if (v15
        && (uint64_t v16 = v15,
            uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(),
            uint64_t v19 = v18,
            v16,
            sub_1001002FC(v17, v19),
            unint64_t v21 = v20,
            swift_bridgeObjectRelease(),
            v21))
      {
        if (v21 >> 62) {
          goto LABEL_20;
        }
        uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        for (; v22; uint64_t v22 = _CocoaArrayWrapper.endIndex.getter())
        {
          uint64_t v23 = 4;
          while (1)
          {
            id v24 = (v21 & 0xC000000000000001) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v21 + 8 * v23);
            uint64_t v25 = v24;
            uint64_t v26 = v23 - 3;
            if (__OFADD__(v23 - 4, 1)) {
              break;
            }
            id v28 = v24;
            sub_1004E23FC(&v28, a1);

            ++v23;
            if (v26 == v22) {
              goto LABEL_17;
            }
          }
          __break(1u);
LABEL_20:
          swift_bridgeObjectRetain();
        }
LABEL_17:

        swift_bridgeObjectRelease_n();
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v5);
        sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v5);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

id sub_1004E23FC(id *a1, uint64_t a2)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = *a1;
  [*a1 target];
  IdentityTarget.init(rawValue:)();
  if ((v14 & 1) == 0)
  {
    defaultLogger()();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    uint64_t v27 = v15;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v32 = v26;
      uint64_t v25 = v17;
      *(_DWORD *)uint64_t v17 = 136315138;
      v24[1] = v17 + 4;
      uint64_t v18 = IdentityTarget.debugDescription.getter();
      uint64_t v31 = sub_100110D58(v18, v19, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v20 = v27;
      _os_log_impl((void *)&_mh_execute_header, v27, v16, "Setting proofing attempt date for target %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  }
  id v21 = [v13 provisioningAttemptDate];
  if (v21)
  {
    uint64_t v22 = v21;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) != 1) {
      return (id)sub_10000C6CC((uint64_t)v9, &qword_1007239B0);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
  }
  sub_10000C6CC((uint64_t)v9, &qword_1007239B0);
  Date.init()();
  StoredProofingSession.update(provisioningAttemptDate:)((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_1000FFAB4();
}

void sub_1004E27F0(id *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  Swift::String v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v60 - v8;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *a1;
  id v15 = [*a1 casdAttestation];
  if (v15)
  {
    os_log_type_t v16 = v15;
    uint64_t v67 = v5;
    uint64_t v68 = v4;
    uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    id v20 = [v14 keyAuthorization];
    if (v20)
    {
      id v21 = v20;
      uint64_t v66 = a2;
      uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;

      id v25 = objc_allocWithZone((Class)DIIdentityProvisioningTransactionKey);
      sub_10002CEB0(v17, v19);
      sub_10002CEB0(v22, v24);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      Class v27 = Data._bridgeToObjectiveC()().super.isa;
      id v61 = [v25 initWithCASDAttestation:isa authorization:v27];
      unint64_t v62 = v24;
      uint64_t v63 = v22;
      sub_10000C5F4(v22, v24);
      uint64_t v64 = v17;
      unint64_t v65 = v19;
      sub_10000C5F4(v17, v19);

      defaultLogger()();
      id v28 = v14;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void (*)(void, void))swift_slowAlloc();
        BOOL v71 = v60;
        *(_DWORD *)uint64_t v31 = 136315138;
        id v32 = [v28 casdAttestation:v60];
        if (v32)
        {
          uint64_t v33 = v32;
          uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;

          Swift::String v37 = Data.base64EncodedString(options:)(0);
          uint64_t countAndFlagsBits = v37._countAndFlagsBits;
          object = v37._object;
          sub_10000C5F4(v34, v36);
        }
        else
        {
          uint64_t countAndFlagsBits = 0;
          object = (void *)0xE000000000000000;
        }
        uint64_t v70 = sub_100110D58(countAndFlagsBits, (unint64_t)object, (uint64_t *)&v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, " Transaction Key CASD Attestation ->  %s", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v40 = v68;
      uint64_t v41 = *(void (**)(char *, uint64_t))(v67 + 8);
      v41(v9, v68);
      NSString v42 = v69;
      defaultLogger()();
      id v43 = v28;
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      BOOL v46 = os_log_type_enabled(v44, v45);
      uint64_t v47 = v66;
      if (v46)
      {
        uint64_t v60 = (void (*)(void, void))v41;
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        BOOL v71 = (void (*)(void, void))swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 136315138;
        id v49 = [v43 keyAuthorization];
        if (v49)
        {
          uint64_t v50 = v49;
          uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v53 = v52;

          Swift::String v54 = Data.base64EncodedString(options:)(0);
          uint64_t v55 = v54._countAndFlagsBits;
          unint64_t v56 = v54._object;
          uint64_t v47 = v66;
          sub_10000C5F4(v51, v53);
        }
        else
        {
          uint64_t v55 = 0;
          unint64_t v56 = (void *)0xE000000000000000;
        }
        uint64_t v70 = sub_100110D58(v55, (unint64_t)v56, (uint64_t *)&v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, " Transaction Key authorization ->  %s", v48, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v60(v69, v68);
      }
      else
      {

        v41(v42, v40);
      }
      unint64_t v57 = v65;
      id v58 = v61;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v59 = v64;
      if (*(void *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_10000C5F4(v59, v57);
      sub_10000C5F4(v63, v62);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.transactionKeyCASDAuthorizationUnavailable(_:), v10);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_10000C5F4(v17, v19);
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.transactionKeyCASDAttestationUnavailable(_:), v10);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

id sub_1004E2FE4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  id v21 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v11 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v12 = Data._bridgeToObjectiveC()().super.isa;
  Class v13 = Data._bridgeToObjectiveC()().super.isa;
  sub_100025C28(0, &qword_100730AE8);
  Class v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v15 = Data._bridgeToObjectiveC()().super.isa;
  id v16 = [v21 initWithAuthorizationKeyAttestation:isa deviceEncryptionKeyAttestation:v11 deviceEncryptionKeyAuthorization:v12 progenitorKeyCASDAttestation:v13 transactionKeys:v14 serverAttestedProvisioningData:v15];
  sub_10000C5F4(a8, a9);
  sub_10000C5F4(a5, a6);
  sub_10000C5F4(a3, a4);

  return v16;
}

uint64_t sub_1004E3168()
{
  sub_10000C6CC(v0 + 16, &qword_100730AB8);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProvisioningManager()
{
  return self;
}

void sub_1004E31CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Class v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  Class v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    Class v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = v3;
    *(_WORD *)Class v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Attempting to provision on phone", v14, 2u);
    uint64_t v4 = v19;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  if (!v4)
  {
    uint64_t v16 = v15;
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = v16;
    v17[3] = a1;
    v17[4] = a2;
    void v17[5] = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_1004E3F54, (uint64_t)v17);
    swift_release();
    swift_release();
  }
}

void sub_1004E33DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v91 = a4;
  uint64_t v96 = (char *)a1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v93 = *(void *)(v6 - 8);
  uint64_t v94 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v90 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v95 = (char *)&v84 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_type_t v13 = (char *)&v84 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v84 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v84 - v17;
  uint64_t v19 = type metadata accessor for DIPError.Code();
  uint64_t v92 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  id v21 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v116;
  sub_10010096C(a2, (uint64_t)a3);
  if (v22) {
    return;
  }
  unint64_t v88 = v19;
  unint64_t v89 = a2;
  uint64_t v96 = v21;
  uint64_t v116 = 0;
  uint64_t v87 = v13;
  unint64_t v24 = v95;
  if (!v23)
  {
    unint64_t v99 = 0;
    unint64_t v100 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v49._uint64_t countAndFlagsBits = 0xD000000000000039;
    v49._object = (void *)0x8000000100651320;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = v89;
    v50._object = a3;
    String.append(_:)(v50);
    (*(void (**)(char *, void, unint64_t))(v92 + 104))(v96, enum case for DIPError.Code.internalError(_:), v88);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  id v25 = v16;
  uint64_t v26 = v23;
  id v27 = [v23 credentialIdentifier];
  if (!v27)
  {
    uint64_t v51 = v26;
    defaultLogger()();
    unint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    BOOL v54 = os_log_type_enabled(v52, v53);
    uint64_t v33 = v94;
    if (v54)
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "The watch credentialIdentifier doesn't exist, will not be able to provision on the watch", v55, 2u);
      unint64_t v56 = v18;
LABEL_21:
      uint64_t v59 = v52;
      swift_slowDealloc();
      unint64_t v52 = v51;
      goto LABEL_23;
    }
    unint64_t v56 = v18;
    uint64_t v59 = v51;
LABEL_23:

    (*(void (**)(char *, uint64_t))(v93 + 8))(v56, v33);
    return;
  }
  id v28 = v27;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v31 = v30;

  id v32 = [v26 provisioningCredentialID];
  uint64_t v33 = v94;
  if (!v32)
  {
    uint64_t v51 = v26;
    swift_bridgeObjectRelease();
    unint64_t v56 = v25;
    defaultLogger()();
    unint64_t v52 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v57))
    {
      id v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v57, "The watch provisioningCredentialID doesn't exist, will not be able to provision on the watch", v58, 2u);
      goto LABEL_21;
    }
    uint64_t v59 = v51;
    goto LABEL_23;
  }
  uint64_t v34 = v32;
  uint64_t v96 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  id v37 = [v26 partnerSchemeID];
  if (!v37)
  {
    uint64_t v51 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v56 = v87;
    defaultLogger()();
    unint64_t v52 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v60))
    {
      id v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v61 = 0;
      unint64_t v62 = "The watch partnerSchemeID doesn't exist, will not be able to provision on the watch";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v52, v60, v62, v61, 2u);
      uint64_t v33 = v94;
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v59 = v51;
    uint64_t v33 = v94;
    goto LABEL_23;
  }
  uint64_t v38 = v37;
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v40;

  id v42 = [v26 provisioningTargetInstanceID];
  if (!v42)
  {
    uint64_t v51 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v56 = v24;
    defaultLogger()();
    unint64_t v52 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v60))
    {
      id v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v61 = 0;
      unint64_t v62 = "The watch provisioningTargetInstanceID doesn't exist, will not be able to provision on the watch";
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  id v43 = v42;
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v85 = v45;
  uint64_t v86 = v44;

  id v84 = [v26 issuerCurrentCredentialCapacity];
  uint64_t v95 = (char *)v26;
  id v46 = [v26 serverAttestedProvisioningData];
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v89 = v48;
  }
  else
  {
    uint64_t v92 = 0;
    unint64_t v89 = 0xF000000000000000;
  }
  uint64_t v87 = v41;
  unint64_t v88 = v29;
  uint64_t v63 = (char *)[v95 supplementalProvisioningData];
  uint64_t v64 = v36;
  if (v63)
  {
    uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v67 = v66;

    uint64_t v63 = (char *)v65;
  }
  else
  {
    unint64_t v67 = 0xF000000000000000;
  }
  uint64_t v68 = v39;
  uint64_t v69 = v92;
  unint64_t v70 = v89;
  sub_1000338D4(v92, v89);
  sub_1000338D4((uint64_t)v63, v67);
  if (qword_10071F498 != -1) {
    swift_once();
  }
  BOOL v71 = *(void **)(qword_100760290 + 16);
  uint64_t v114 = sub_100025C28(0, &qword_10072F998);
  uint64_t v115 = &off_100706ED8;
  uint64_t v113 = v71;
  unint64_t v99 = v88;
  unint64_t v100 = v31;
  uint64_t v101 = (uint64_t)v96;
  uint64_t v102 = v64;
  uint64_t v103 = v68;
  unint64_t v104 = v87;
  uint64_t v105 = v86;
  uint64_t v106 = v85;
  id v107 = v84;
  char v108 = 0;
  uint64_t v109 = v69;
  unint64_t v110 = v70;
  uint64_t v96 = v63;
  uint64_t v111 = v63;
  unint64_t v112 = v67;
  unint64_t v88 = v67;
  v98[3] = (uint64_t)&type metadata for IdentityPhoneProvisioningProvider;
  v98[4] = (uint64_t)&off_1006F9040;
  v98[0] = swift_allocObject();
  sub_100490170((uint64_t)&v99, v98[0] + 16);
  sub_1004E3FFC((uint64_t)v98, (uint64_t)v97);
  uint64_t v72 = v91;
  swift_beginAccess();
  id v73 = v71;
  sub_1004E4064((uint64_t)v97, v72 + 16);
  swift_endAccess();
  unsigned int v74 = v90;
  defaultLogger()();
  NSString v75 = v95;
  unint64_t v76 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v76, v77))
  {
    os_log_t v78 = (uint8_t *)swift_slowAlloc();
    v98[0] = swift_slowAlloc();
    *(_DWORD *)os_log_t v78 = 136315138;
    id v79 = [v75 proofingSessionID];
    if (v79)
    {
      long long v80 = v79;
      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v83 = v82;
    }
    else
    {
      uint64_t v81 = 0;
      unint64_t v83 = 0xE000000000000000;
    }
    v97[0] = sub_100110D58(v81, v83, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "Trying to provision watch with proofingSessionID: %s", v78, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v93 + 8))(v90, v94);
    uint64_t v69 = v92;
    unint64_t v70 = v89;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v93 + 8))(v74, v94);
  }
  swift_retain();
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  sub_1004901E8((uint64_t)&v99);
  sub_10000C5E0(v69, v70);
  sub_10000C5E0((uint64_t)v96, v88);
  swift_release();
}

uint64_t sub_1004E3E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100730AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004E3EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100730AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004E3F0C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1004E3F54()
{
  sub_1004E33DC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1004E3F74()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = v0[13];
  if (v1 >> 60 != 15) {
    sub_10000C5F4(v0[12], v1);
  }
  unint64_t v2 = v0[15];
  if (v2 >> 60 != 15) {
    sub_10000C5F4(v0[14], v2);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 16));

  return _swift_deallocObject(v0, 168, 7);
}

uint64_t sub_1004E3FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100730AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004E4064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100730AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004E40CC()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10000C494;
  return sub_1002A8BCC();
}

uint64_t sub_1004E4168(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - v5;
  defaultLogger()();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Will save provisioning attempt locally", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v11 = v10;
  sub_100030A10(a1, (uint64_t)v15);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  sub_10000C6B4(v15, v12 + 24);
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1004E4544, v12);
  swift_release();
  return swift_release();
}

uint64_t sub_1004E4504()
{
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1004E4544()
{
  sub_1004E1F6C(*(void *)(v0 + 16), (void *)(v0 + 24));
}

void (*sub_1004E4564(uint64_t a1, void (*a2)(char *, void, uint64_t)))(char *, void, uint64_t)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  if (!v2)
  {
    sub_10010099C(a1, (uint64_t)a2);
    uint64_t v11 = v9;
    if (v9)
    {
      id v12 = [v9 serverAttestedProvisioningData];
      if (v12)
      {
        os_log_type_t v13 = v12;
        a2 = (void (*)(char *, void, uint64_t))static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;

        id v25 = v11;
        if ((uint64_t)[v11 issuerCurrentCredentialCapacity] > 0)
        {
          id v16 = v25;
          [v25 issuerCurrentCredentialCapacity];
          swift_release();

          return a2;
        }
        id v21 = *(void (**)(char *, void, uint64_t))(v6 + 104);
        v21(v8, enum case for DIPError.Code.issuerCurrentCredentialCapacityUnavailable(_:), v5);
        v23[1] = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        uint64_t v22 = (uint64_t)a2;
        a2 = v21;
        sub_10000C5F4(v22, v15);
      }
      else
      {
        a2 = *(void (**)(char *, void, uint64_t))(v6 + 104);
        a2(v8, enum case for DIPError.Code.serverAttestedProvisioningDataUnavailable(_:), v5);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
    }
    else
    {
      void v23[2] = 0;
      unint64_t v24 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v17._uint64_t countAndFlagsBits = 0xD000000000000015;
      v17._object = (void *)0x8000000100634AE0;
      String.append(_:)(v17);
      v18._uint64_t countAndFlagsBits = a1;
      v18._object = a2;
      String.append(_:)(v18);
      v19._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v19._object = (void *)0x8000000100651AA0;
      String.append(_:)(v19);
      v20._uint64_t countAndFlagsBits = IdentityTarget.debugDescription.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      id v25 = v24;
      a2 = *(void (**)(char *, void, uint64_t))(v6 + 104);
      a2(v8, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v5);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    a2(v8, enum case for DIPError.Code.internalError(_:), v5);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_release();
  }
  return a2;
}

uint64_t sub_1004E4B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[14] = v6;
  v4[15] = *(void *)(v6 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  return _swift_task_switch(sub_1004E4C98, 0, 0);
}

uint64_t sub_1004E4C98()
{
  uint64_t v22 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v17 = v0[15];
    uint64_t v18 = v0[14];
    uint64_t v20 = v0[24];
    unint64_t v3 = v0[8];
    uint64_t v4 = v0[7];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[6] = sub_100110D58(v4, v3, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Building provisioning attestations starting for credential identifier: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v6(v20, v18);
  }
  else
  {
    uint64_t v7 = v0[24];
    uint64_t v8 = v0[14];
    uint64_t v9 = v0[15];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[25] = v6;
  uint64_t v10 = (void *)v0[9];
  uint64_t v11 = v10[3];
  uint64_t v12 = v10[4];
  sub_10000C728(v10, v11);
  Swift::String v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 + 32) + **(int **)(v12 + 32));
  os_log_type_t v13 = (void *)swift_task_alloc();
  v0[26] = v13;
  *os_log_type_t v13 = v0;
  v13[1] = sub_1004E4F40;
  uint64_t v15 = v0[7];
  uint64_t v14 = v0[8];
  return v19(v15, v14, v11, v12);
}

uint64_t sub_1004E4F40(uint64_t a1)
{
  unint64_t v3 = (void *)*v2;
  v3[27] = a1;
  v3[28] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_1004E510C, 0, 0);
  }
}

uint64_t sub_1004E510C()
{
  uint64_t v55 = v0;
  id v1 = [*(id *)(v0 + 216) attestation];
  os_log_type_t v2 = *(void **)(v0 + 216);
  if (!v1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 96) + 104))(*(void *)(v0 + 104), enum case for DIPError.Code.deviceEncryptionKeyAttestationUnavailable(_:), *(void *)(v0 + 88));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
LABEL_7:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_8:

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  unint64_t v3 = v1;
  *(void *)(v0 + 232) = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = [v2 keyAuthorization];
  if (!v4)
  {
    os_log_type_t v2 = *(void **)(v0 + 216);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v17 = *(void *)(v0 + 104);
    uint64_t v19 = *(void *)(v0 + 88);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, enum case for DIPError.Code.deviceEncryptionKeyAuthorizationUnavailable(_:), v19);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    goto LABEL_7;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  *(void *)(v0 + 240) = v6;
  *(void *)(v0 + 248) = v8;
  defaultLogger()();
  sub_10002CEB0(v6, v8);
  sub_10002CEB0(v6, v8);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  uint64_t v13 = *(void *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 112);
  if (v11)
  {
    uint64_t v51 = *(void *)(v0 + 184);
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    v54[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    Swift::String v16 = Data.base64EncodedString(options:)(0);
    *(void *)(v0 + 40) = sub_100110D58(v16._countAndFlagsBits, (unint64_t)v16._object, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000C5F4(v6, v8);
    sub_10000C5F4(v6, v8);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "deviceEncryptionKeyAuthorization: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v12(v51, v14);
  }
  else
  {
    sub_10000C5F4(v6, v8);
    sub_10000C5F4(v6, v8);

    v12(v13, v14);
  }
  uint64_t v22 = v6;
  id v23 = [*(id *)(v0 + 216) kskAttestation];
  if (!v23)
  {
    os_log_type_t v2 = *(void **)(v0 + 216);
    uint64_t v32 = *(void *)(v0 + 96);
    uint64_t v31 = *(void *)(v0 + 104);
    uint64_t v33 = *(void *)(v0 + 88);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v31, enum case for DIPError.Code.keySigningKeyAttestationUnavailable(_:), v33);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v6, v8);
    goto LABEL_8;
  }
  unint64_t v24 = v23;
  uint64_t v25 = *(void *)(v0 + 224);
  uint64_t v27 = *(void *)(v0 + 56);
  uint64_t v26 = *(void (**)(char *, void, uint64_t))(v0 + 64);
  *(void *)(v0 + 256) = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v28 = sub_1004E4564(v27, v26);
  *(void *)(v0 + 264) = v28;
  *(void *)(v0 + 272) = v29;
  if (v25)
  {
    os_log_type_t v2 = *(void **)(v0 + 216);
    swift_bridgeObjectRelease();
    sub_10000C5F4(v22, v8);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v34 = (uint64_t)v28;
  unint64_t v35 = v29;
  uint64_t v36 = v30;
  defaultLogger()();
  sub_10002CEB0(v34, v35);
  sub_10002CEB0(v34, v35);
  id v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  uint64_t v41 = *(void *)(v0 + 176);
  uint64_t v42 = *(void *)(v0 + 112);
  if (v39)
  {
    uint64_t v52 = *(void *)(v0 + 176);
    id v43 = (uint8_t *)swift_slowAlloc();
    v54[0] = swift_slowAlloc();
    *(_DWORD *)id v43 = 136315138;
    Swift::String v44 = Data.base64EncodedString(options:)(0);
    *(void *)(v0 + 32) = sub_100110D58(v44._countAndFlagsBits, (unint64_t)v44._object, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000C5F4(v34, v35);
    sub_10000C5F4(v34, v35);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "serverAttestedProvisioningData during provisioning is %s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v40(v52, v42);
  }
  else
  {
    sub_10000C5F4(v34, v35);
    sub_10000C5F4(v34, v35);

    v40(v41, v42);
  }
  uint64_t v45 = *(void **)(v0 + 72);
  uint64_t v46 = v45[3];
  uint64_t v47 = v45[4];
  sub_10000C728(v45, v46);
  os_log_type_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 + 48)
                                                                            + **(int **)(v47 + 48));
  unint64_t v48 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v48;
  *unint64_t v48 = v0;
  v48[1] = sub_1004E59B0;
  uint64_t v50 = *(void *)(v0 + 56);
  uint64_t v49 = *(void *)(v0 + 64);
  return v53(v50, v49, v36, v46, v47);
}

uint64_t sub_1004E59B0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 288) = a1;
  *(void *)(v3 + 296) = v1;
  swift_task_dealloc();
  if (v1) {
    id v4 = sub_1004E67F4;
  }
  else {
    id v4 = sub_1004E5AC4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004E5AC4()
{
  uint64_t v110 = v0;
  unint64_t v1 = *(void *)(v0 + 288);
  if (v1 >> 62) {
    goto LABEL_48;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v4 = v0 + 288;
  if (v2)
  {
    while (1)
    {
      unint64_t v5 = v1 & 0xC000000000000001;
      if ((v1 & 0xC000000000000001) != 0)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        id v6 = *(id *)(*(void *)v4 + 32);
      }
      swift_bridgeObjectRelease();
      id v7 = [v6 progenitorKeyAttestation];

      if (!v7) {
        goto LABEL_50;
      }
      unint64_t v100 = v5;
      uint64_t v101 = v2;
      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      defaultLogger()();
      sub_10002CEB0(v8, v10);
      sub_10002CEB0(v8, v10);
      BOOL v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      BOOL v13 = os_log_type_enabled(v11, v12);
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
      uint64_t v15 = *(void *)(v0 + 168);
      uint64_t v16 = *(void *)(v0 + 112);
      uint64_t v105 = (void *)v0;
      uint64_t v98 = v8;
      unint64_t v99 = v10;
      if (v13)
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        v109[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        Swift::String v18 = Data.base64EncodedString(options:)(0);
        *(void *)(v0 + 24) = sub_100110D58(v18._countAndFlagsBits, (unint64_t)v18._object, (uint64_t *)v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000C5F4(v8, v10);
        sub_10000C5F4(v8, v10);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "progenitorKeyAttestation -> %s", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10000C5F4(v8, v10);
        sub_10000C5F4(v8, v10);
      }

      v14(v15, v16);
      char v108 = _swiftEmptyArrayStorage;
      uint64_t v20 = *(void *)(v0 + 288);
      uint64_t v19 = *(void *)(v0 + 296);
      swift_bridgeObjectRetain();
      if (v100) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(v20 + 32);
      }
      uint64_t v22 = v21;
      v109[0] = v21;
      sub_1004E27F0(v109, &v108);
      if (v19)
      {
        uint64_t v23 = *(void *)(v0 + 264);
        unint64_t v106 = *(void *)(v0 + 272);
        unint64_t v24 = *(void *)(v0 + 248);
        uint64_t v25 = *(void *)(v0 + 240);
        uint64_t v26 = *(void **)(v0 + 216);

        swift_bridgeObjectRelease();
        sub_10000C5F4(v25, v24);
        sub_10000C5F4(v8, v99);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000C5F4(v23, v106);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }

      uint64_t v27 = (void *)v0;
      if (v101 == 1) {
        break;
      }
      uint64_t v0 = 5;
      while (1)
      {
        unint64_t v1 = v0 - 4;
        id v28 = v100 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v20 + 8 * v0);
        unint64_t v29 = v28;
        uint64_t v30 = v0 - 3;
        if (__OFADD__(v1, 1)) {
          break;
        }
        v109[0] = v28;
        sub_1004E27F0(v109, &v108);

        ++v0;
        uint64_t v27 = v105;
        if (v30 == v101) {
          goto LABEL_23;
        }
      }
      __break(1u);
LABEL_48:
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v2 = result;
      uint64_t v4 = v0 + 288;
      if (!result) {
        goto LABEL_49;
      }
    }
LABEL_23:
    swift_bridgeObjectRelease_n();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v34 = (void (*)(uint64_t, uint64_t))v27[25];
    uint64_t v35 = v27[20];
    uint64_t v36 = v27[14];
    unint64_t v37 = v27[8];
    if (v33)
    {
      uint64_t v102 = (void (*)(uint64_t, uint64_t))v27[25];
      uint64_t v38 = v27[7];
      BOOL v39 = (uint8_t *)swift_slowAlloc();
      v109[0] = (id)swift_slowAlloc();
      *(_DWORD *)BOOL v39 = 136315138;
      swift_bridgeObjectRetain();
      v105[2] = sub_100110D58(v38, v37, (uint64_t *)v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Building provisioning attestations complete for credential identifier: %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v27 = v105;
      swift_slowDealloc();

      v102(v35, v36);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v34(v35, v36);
    }
    defaultLogger()();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "authorizationKeyAttestations: ", v42, 2u);
      uint64_t v27 = v105;
      swift_slowDealloc();
    }
    uint64_t v43 = v27[32];
    Swift::String v44 = (void (*)(uint64_t, uint64_t))v27[25];
    uint64_t v45 = v27[19];
    uint64_t v46 = v105[14];

    uint64_t v47 = v46;
    unint64_t v48 = v105;
    v44(v45, v47);
    uint64_t v49 = *(void *)(v43 + 16);
    if (v49)
    {
      uint64_t v50 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      do
      {
        unint64_t v51 = *v50;
        uint64_t v103 = *(v50 - 1);
        swift_bridgeObjectRetain();
        defaultLogger()();
        swift_bridgeObjectRetain();
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.debug.getter();
        BOOL v54 = os_log_type_enabled(v52, v53);
        uint64_t v55 = (void (*)(uint64_t, uint64_t))v48[25];
        uint64_t v56 = v48[18];
        uint64_t v57 = v48[14];
        if (v54)
        {
          uint64_t v58 = swift_slowAlloc();
          v109[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v58 + 4) = sub_100110D58(v103, v51, (uint64_t *)v109);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "%s", (uint8_t *)v58, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v48 = v105;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        v55(v56, v57);
        v50 += 2;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
    }
    defaultLogger()();
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      id v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "deviceEncryptionKeyAttestations:", v61, 2u);
      unint64_t v48 = v105;
      swift_slowDealloc();
    }
    uint64_t v62 = v48[29];
    uint64_t v63 = (void (*)(uint64_t, uint64_t))v48[25];
    uint64_t v64 = v48[17];
    uint64_t v65 = v105[14];

    uint64_t v66 = v65;
    unint64_t v67 = v105;
    v63(v64, v66);
    uint64_t v68 = *(void *)(v62 + 16);
    if (v68)
    {
      uint64_t v69 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      do
      {
        unint64_t v70 = *v69;
        uint64_t v104 = *(v69 - 1);
        swift_bridgeObjectRetain();
        defaultLogger()();
        swift_bridgeObjectRetain();
        BOOL v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.debug.getter();
        BOOL v73 = os_log_type_enabled(v71, v72);
        unsigned int v74 = (void (*)(uint64_t, uint64_t))v67[25];
        uint64_t v75 = v67[16];
        uint64_t v76 = v67[14];
        if (v73)
        {
          uint64_t v77 = swift_slowAlloc();
          v109[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v77 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v77 + 4) = sub_100110D58(v104, v70, (uint64_t *)v109);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "%s", (uint8_t *)v77, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v67 = v105;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        v74(v75, v76);
        v69 += 2;
        --v68;
      }
      while (v68);
      swift_bridgeObjectRelease();
    }
    uint64_t v79 = v67[33];
    unint64_t v78 = v67[34];
    unint64_t v81 = v67[31];
    uint64_t v80 = v67[32];
    unint64_t v82 = v67;
    uint64_t v85 = v67 + 29;
    uint64_t v83 = v67[29];
    uint64_t v84 = v85[1];
    uint64_t v86 = (void *)v82[27];
    sub_100025C28(0, &qword_100730AE0);
    uint64_t v87 = (uint64_t)v108;
    sub_10002CEB0(v79, v78);
    swift_bridgeObjectRetain();
    id v88 = sub_1004E2FE4(v80, v83, v84, v81, v98, v99, v87, v79, v78);

    sub_10000C5F4(v79, v78);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v89 = (uint64_t (*)(id))v82[1];
    return v89(v88);
  }
  else
  {
LABEL_49:
    swift_bridgeObjectRelease();
LABEL_50:
    uint64_t v91 = *(void *)(v0 + 264);
    unint64_t v90 = *(void *)(v0 + 272);
    uint64_t v93 = *(void *)(v0 + 240);
    unint64_t v92 = *(void *)(v0 + 248);
    id v107 = *(void **)(v0 + 216);
    uint64_t v95 = *(void *)(v0 + 96);
    uint64_t v94 = *(void *)(v0 + 104);
    uint64_t v96 = *(void *)(v0 + 88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v95 + 104))(v94, enum case for DIPError.Code.progenitorKeyAttestationUnavailable(_:), v96);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v91, v90);
    sub_10000C5F4(v93, v92);

LABEL_51:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v97 = *(uint64_t (**)(void))(v0 + 8);
    return v97();
  }
}

uint64_t sub_1004E67F4()
{
  unint64_t v1 = v0[31];
  uint64_t v2 = v0[30];
  uint64_t v3 = (void *)v0[27];
  sub_10000C5F4(v0[33], v0[34]);
  swift_bridgeObjectRelease();
  sub_10000C5F4(v2, v1);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004E6910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[19] = a2;
  v4[20] = a4;
  v4[18] = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[21] = v5;
  v4[22] = *(void *)(v5 - 8);
  v4[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[24] = v6;
  v4[25] = *(void *)(v6 - 8);
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  return _swift_task_switch(sub_1004E6A40, 0, 0);
}

uint64_t sub_1004E6A40()
{
  if (!v0[20])
  {
    defaultLogger()();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Building Provisioning attestation for the phone", v21, 2u);
      swift_slowDealloc();
    }
    uint64_t v23 = v0[25];
    uint64_t v22 = v0[26];
    uint64_t v24 = v0[24];

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    if (qword_10071F498 != -1) {
      swift_once();
    }
    uint64_t v25 = *(void **)(qword_100760290 + 16);
    v0[31] = v25;
    v0[5] = sub_100025C28(0, &qword_10072F998);
    v0[6] = &off_100706ED8;
    v0[2] = v25;
    id v26 = v25;
    uint64_t v27 = (void *)swift_task_alloc();
    v0[32] = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_1004E70E4;
    uint64_t v13 = v0[19];
    uint64_t v14 = v0[18];
    uint64_t v15 = (uint64_t)(v0 + 2);
    uint64_t v16 = 1;
    goto LABEL_15;
  }
  defaultLogger()();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Building Provisioning attestation for the watch", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[25];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if (qword_1007600C0)
  {
    swift_retain();
    id v7 = (void *)sub_10003A450();
    uint64_t v8 = v7;
    swift_release();
    if (v7)
    {
      unint64_t v9 = *(void **)&v8[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService];
      v0[28] = v9;
      id v10 = v9;

      v0[10] = type metadata accessor for DIPWatch();
      v0[11] = &off_100706F30;
      v0[7] = v10;
      id v11 = v10;
      os_log_type_t v12 = (void *)swift_task_alloc();
      v0[29] = v12;
      void *v12 = v0;
      v12[1] = sub_1004E6E98;
      uint64_t v13 = v0[19];
      uint64_t v14 = v0[18];
      uint64_t v15 = (uint64_t)(v0 + 7);
      uint64_t v16 = 2;
LABEL_15:
      return sub_1004E4B14(v14, v13, v15, v16);
    }
  }
  (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], enum case for DIPError.Code.watchConnectionFailure(_:), v0[21]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1004E6E98(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[12] = v2;
  v3[13] = a1;
  v3[14] = v1;
  v3[30] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1004E7050;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v3 + 7));
    uint64_t v4 = sub_1004E6FBC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004E6FBC()
{
  uint64_t v1 = *(void *)(v0 + 104);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1004E7050()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004E70E4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[15] = v2;
  v3[16] = a1;
  v3[17] = v1;
  v3[33] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1004E729C;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v3 + 2));
    uint64_t v4 = sub_1004E7208;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004E7208()
{
  uint64_t v1 = *(void *)(v0 + 128);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1004E729C()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004E7330(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    unint64_t v3 = sub_1004EC93C(v3);
    unint64_t *v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004E7414(char a1, uint64_t a2, void *a3)
{
  uint64_t v59 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  unint64_t v60 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  id v11 = (char *)&v57 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v57 = (char *)&v57 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctPhoneNumbers);
  uint64_t v17 = v16 + 4;
  Swift::String v18 = v16 + 6;
  os_unfair_lock_lock(v16 + 6);
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  sub_1004E7C24(v17, &v66);
  unint64_t v21 = 0;
  os_unfair_lock_unlock(v18);
  if (!v66)
  {
LABEL_8:
    defaultLogger()();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "no phone numbers available", v32, 2u);
      swift_slowDealloc();
    }

    BOOL v33 = *(void (**)(char *, uint64_t))(v60 + 8);
    v33(v11, v5);
    uint64_t v34 = v59;
    *uint64_t v59 = 0;
    uint64_t result = swift_bridgeObjectRelease();
    if (!*v34 || !*(void *)(*v34 + 16)) {
      return result;
    }
LABEL_12:
    defaultLogger()();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "got PhoneNumber", v38, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(char *, uint64_t))v33)(v8, v5);
  }
  uint64_t v61 = *(void *)(v66 + 16);
  if (!v61)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  unint64_t v58 = v66;
  if ((a1 & 1) == 0)
  {
    unint64_t v39 = 0;
    uint64_t v25 = (char *)_swiftEmptyArrayStorage;
    unint64_t v27 = v58;
    unint64_t v60 = v58 + 32;
    while (1)
    {
      unint64_t v26 = *(void *)(v27 + 16);
      if (v39 >= v26)
      {
        __break(1u);
        goto LABEL_61;
      }
      uint64_t v40 = (unint64_t *)(v60 + 16 * v39);
      unint64_t v42 = *v40;
      unint64_t v41 = v40[1];
      unint64_t v66 = *v40;
      uint64_t v67 = v41;
      uint64_t v64 = 48;
      unint64_t v65 = 0xE100000000000000;
      uint64_t v62 = 0;
      unint64_t v63 = 0xE000000000000000;
      unint64_t v21 = sub_1000B5358();
      swift_bridgeObjectRetain();
      uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v19 = v44;
      uint64_t v45 = HIBYTE(v41) & 0xF;
      if ((v41 & 0x2000000000000000) == 0) {
        uint64_t v45 = v42 & 0xFFFFFFFFFFFFLL;
      }
      if (!v45) {
        break;
      }
      uint64_t v46 = v43;
      unint64_t v21 = *((void *)v25 + 2);
      if (v21)
      {
        if (*((void *)v25 + 4) == v42 && *((void *)v25 + 5) == v41
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          break;
        }
        if (v21 != 1)
        {
          if (*((void *)v25 + 6) == v42 && *((void *)v25 + 7) == v41
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            break;
          }
          if (v21 != 2)
          {
            uint64_t v50 = v25 + 72;
            uint64_t v20 = 2;
            while (1)
            {
              unint64_t v27 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                break;
              }
              BOOL v51 = *(v50 - 1) == v42 && *v50 == v41;
              if (v51 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v27 = v58;
                goto LABEL_18;
              }
              v50 += 2;
              ++v20;
              BOOL v51 = v27 == v21;
              unint64_t v27 = v58;
              if (v51) {
                goto LABEL_28;
              }
            }
LABEL_61:
            __break(1u);
LABEL_62:
            unint64_t v21 = (unint64_t)sub_10010F3C4((char *)(v26 > 1), v19, 1, (char *)v21);
LABEL_6:
            *(void *)(v21 + 16) = v19;
            unint64_t v28 = v21 + 16 * v27;
            *(void *)(v28 + 32) = v25;
            *(void *)(v28 + 40) = v20;
            uint64_t v29 = swift_bridgeObjectRetain();
            sub_10007D8F0(v29, (uint64_t)v59);
            return swift_bridgeObjectRelease_n();
          }
        }
      }
LABEL_28:
      swift_bridgeObjectRelease();
      uint64_t v47 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0) {
        uint64_t v47 = v46 & 0xFFFFFFFFFFFFLL;
      }
      if (v47)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v25 = sub_10010F3C4(0, *((void *)v25 + 2) + 1, 1, v25);
        }
        unint64_t v19 = *((void *)v25 + 2);
        unint64_t v48 = *((void *)v25 + 3);
        unint64_t v21 = v19 + 1;
        if (v19 >= v48 >> 1) {
          uint64_t v25 = sub_10010F3C4((char *)(v48 > 1), v19 + 1, 1, v25);
        }
        *((void *)v25 + 2) = v21;
        uint64_t v49 = &v25[16 * v19];
        *((void *)v49 + 4) = v42;
        *((void *)v49 + 5) = v41;
        goto LABEL_18;
      }
LABEL_17:
      swift_bridgeObjectRelease();
LABEL_18:
      if (++v39 == v61)
      {
        swift_bridgeObjectRelease();
        uint64_t v52 = swift_bridgeObjectRetain();
        sub_10007D8F0(v52, (uint64_t)v59);
        return swift_bridgeObjectRelease_n();
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctDefaultVoiceNumber);
  uint64_t v23 = (uint64_t *)&v22[4];
  uint64_t v24 = v22 + 8;
  os_unfair_lock_lock(v22 + 8);
  sub_1004E7C44(v23, &v66);
  os_unfair_lock_unlock(v24);
  uint64_t v20 = v67;
  if (v67)
  {
    uint64_t v25 = (char *)v66;
    unint64_t v21 = (unint64_t)sub_10010F3C4(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v27 = *(void *)(v21 + 16);
    unint64_t v26 = *(void *)(v21 + 24);
    unint64_t v19 = v27 + 1;
    if (v27 >= v26 >> 1) {
      goto LABEL_62;
    }
    goto LABEL_6;
  }
  defaultLogger()();
  os_log_type_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "no default voice numbers available", v55, 2u);
    swift_slowDealloc();
  }

  BOOL v33 = *(void (**)(char *, uint64_t))(v60 + 8);
  v33(v15, v5);
  uint64_t v56 = v59;
  *uint64_t v59 = 0;
  uint64_t result = swift_bridgeObjectRelease();
  if (*v56 && *(void *)(*v56 + 16))
  {
    uint64_t v8 = v57;
    goto LABEL_12;
  }
  return result;
}

void sub_1004E7ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_allocWithZone((Class)IDSPhoneCertificateVendor) initWithQueue:*(void *)(v4 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_workQueue)];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  v11[4] = sub_1004EF62C;
  v11[5] = v9;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10015B294;
  v11[3] = &unk_1007075E8;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  [v7 generatePhoneAuthenticationSignatureOverData:isa withCompletion:v10];
  _Block_release(v10);
}

id sub_1004E7BF4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for DIPDeviceInfo()) init];
  qword_1007607E8 = (uint64_t)result;
  return result;
}

uint64_t sub_1004E7C24@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1004E7C44@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  *a2 = v3;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1004E7C64()
{
  long long v10 = xmmword_100611090;
  char v12 = 0;
  int v11 = 0;
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_seInfoQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v10;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_10048C838;
  *(void *)(v3 + 24) = v2;
  v9[4] = sub_1000E4EA0;
  v9[5] = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  void v9[2] = sub_100032314;
  v9[3] = &unk_100707548;
  uint64_t v4 = _Block_copy(v9);
  uint64_t v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10;
    swift_release();
    return v8;
  }
  return result;
}

uint64_t sub_1004E7DEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__seInfo;
  uint64_t v4 = *(void *)(a2 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__seInfo);
  uint64_t v3 = *(void *)(a2 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__seInfo + 8);
  char v5 = *(unsigned char *)(v2 + 20);
  LODWORD(v2) = *(_DWORD *)(v2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v3;
  uint64_t v8 = a1 + 2;
  *(_DWORD *)uint64_t v8 = v2;
  *((unsigned char *)v8 + 4) = v5;
  sub_1001D59D0(v4, v3);

  return sub_10013FEE4(v6, v7);
}

id sub_1004E7E6C()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v3 = (char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v25 = OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_workQueue;
  uint64_t v28 = sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  uint64_t v6 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  v24[4] = sub_1000DA6E8();
  v24[3] = sub_100007764((uint64_t *)&unk_100726420);
  uint64_t v7 = sub_1000B6120((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  v24[1] = v4;
  void v24[2] = v7;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v8 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  uint64_t v10 = v26;
  v9(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  *(void *)&v0[v25] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v11 = OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_seInfoQueue;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  v9(v3, v8, v10);
  *(void *)&v6[v11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v12 = OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_ctQueue;
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v9(v3, v8, v10);
  uint64_t v13 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v6[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctSubscriptionsInUse;
  sub_100007764(&qword_100730C80);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)&v6[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctPhoneNumbers;
  sub_100007764(&qword_100730C88);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(void *)(v17 + 16) = 0;
  *(void *)&v6[v16] = v17;
  uint64_t v18 = OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctDefaultVoiceNumber;
  sub_100007764((uint64_t *)&unk_100730C90);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  *(_DWORD *)(v19 + 32) = 0;
  *(void *)&v6[v18] = v19;
  uint64_t v20 = &v6[OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__seInfo];
  *(_OWORD *)uint64_t v20 = xmmword_100611090;
  v20[20] = 0;
  *((_DWORD *)v20 + 4) = 0;
  id v21 = [objc_allocWithZone((Class)CoreTelephonyClient) initWithQueue:v13];
  *(void *)&v6[OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_ctClient] = v21;

  v29.receiver = v6;
  v29.super_class = ObjectType;
  id v22 = [super init];
  sub_1004E82CC();

  return v22;
}

void sub_1004E82CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v113 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v114 = (char *)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v116 = (os_unfair_lock_s *)((char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v107 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v107 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v112 = (char *)&v107 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v107 - v16;
  defaultLogger()();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "reload CT initiated", v20, 2u);
    swift_slowDealloc();
  }

  uint64_t v115 = *(void (**)(char *, uint64_t))(v5 + 8);
  v115(v17, v4);
  id v21 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_ctClient];
  [v21 setDelegate:v1];
  v118[0] = 0;
  id v22 = [v21 getUserDefaultVoiceSubscriptionContext:v118];
  if (!v22)
  {
    id v40 = v118[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_12;
  }
  uint64_t v23 = v22;
  uint64_t v109 = v13;
  id v24 = v118[0];
  id v25 = [v23 uuid];
  uint64_t v26 = v114;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v118[0] = 0;
  id v27 = [v21 getSubscriptionInfoWithError:v118];
  if (!v27)
  {
    id v41 = v118[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v26, v2);
    goto LABEL_12;
  }
  uint64_t v28 = v27;
  uint64_t v110 = v4;
  uint64_t v111 = v23;
  id v29 = v118[0];
  id v30 = [v28 subscriptionsInUse];

  if (!v30)
  {
    defaultLogger()();
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "No CT Subscriptions in use", v50, 2u);
      swift_slowDealloc();
    }

    uint64_t v51 = ((uint64_t (*)(char *, uint64_t))v115)(v10, v110);
    __chkstk_darwin(v51);
    *(&v107 - 2) = 0;
    os_log_type_t v53 = v52 + 4;
    os_log_type_t v54 = v52 + 6;
    os_unfair_lock_lock(v52 + 6);
    sub_1004EF414(v53);
    os_unfair_lock_unlock(v54);
    __chkstk_darwin(v55);
    *(&v107 - 2) = 0;
    uint64_t v57 = v56 + 4;
    unint64_t v58 = v56 + 6;
    os_unfair_lock_lock(v56 + 6);
    sub_1004EF414(v57);
    os_unfair_lock_unlock(v58);
    __chkstk_darwin(v59);
    uint64_t v61 = v60 + 4;
    uint64_t v62 = v60 + 8;
    *(&v107 - 2) = 0;
    *(&v107 - 1) = 0;
    os_unfair_lock_lock(v60 + 8);
    sub_1004EF42C(v61);
    os_unfair_lock_unlock(v62);

    (*(void (**)(char *, uint64_t))(v113 + 8))(v114, v2);
    return;
  }
  uint64_t v108 = v2;
  sub_100025C28(0, (unint64_t *)&qword_100725878);
  uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  __chkstk_darwin(v32);
  *(&v107 - 2) = (uint64_t)v26;
  if (v31 < 0 || (v31 & 0x4000000000000000) != 0)
  {
    unint64_t v106 = swift_bridgeObjectRetain();
    BOOL v33 = sub_1004EB474(v106);
    swift_bridgeObjectRelease();
  }
  else
  {
    BOOL v33 = (void *)(v31 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  v118[0] = v33;
  sub_1004EB2BC(sub_1004EF444);
  uint64_t v34 = swift_bridgeObjectRelease();
  id v35 = v118[0];
  __chkstk_darwin(v34);
  *(&v107 - 2) = (uint64_t)v35;
  os_log_type_t v37 = (void *)(v36 + 16);
  uint64_t v38 = (os_unfair_lock_s *)(v36 + 24);
  swift_retain();
  os_unfair_lock_lock(v38);
  sub_1004EF414(v37);
  os_unfair_lock_unlock(v38);
  swift_release();
  unint64_t v39 = v1;
  unint64_t v63 = sub_1004ED54C((unint64_t)v35, v39);
  swift_release();

  __chkstk_darwin(v64);
  unint64_t v65 = v39;
  *(&v107 - 2) = (uint64_t)v63;
  uint64_t v67 = v66 + 4;
  uint64_t v68 = v66 + 6;
  os_unfair_lock_lock(v66 + 6);
  sub_1004EF414(v67);
  os_unfair_lock_unlock(v68);
  swift_bridgeObjectRelease();
  v118[0] = 0;
  uint64_t v69 = v111;
  id v70 = [v21 getPhoneNumber:v111 error:v118];
  if (!v70)
  {
    id v88 = v118[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v114, v108);
    uint64_t v4 = v110;
LABEL_12:
    unint64_t v42 = v116;
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      v118[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315138;
      swift_getErrorValue();
      uint64_t v46 = Error.localizedDescription.getter();
      uint64_t v117 = sub_100110D58(v46, v47, (uint64_t *)v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "error retrieving phone number: %s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      v115((char *)v116, v4);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      v115((char *)v42, v4);
    }
    return;
  }
  BOOL v71 = v70;
  id v72 = v118[0];
  id v73 = [v71 number];

  unsigned int v74 = v65;
  uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v77 = v76;

  uint64_t v116 = v67;
  unint64_t v78 = v74;
  __chkstk_darwin(v79);
  *(&v107 - 2) = v75;
  *(&v107 - 1) = v77;
  unint64_t v81 = v80 + 4;
  unint64_t v82 = v80 + 8;
  os_unfair_lock_lock(v80 + 8);
  sub_1004EF42C(v81);
  os_unfair_lock_unlock(v82);
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v82);
  sub_1004E7C44((uint64_t *)v81, v118);
  os_unfair_lock_unlock(v82);
  id v84 = v118[0];
  id v83 = v118[1];
  os_unfair_lock_lock(v68);
  sub_1004E7C24(v116, v118);
  uint64_t v107 = 0;
  os_unfair_lock_unlock(v68);
  if (v118[0])
  {
    uint64_t v85 = v68;
    if (*((void *)v118[0] + 2))
    {
      id v87 = (id)*((void *)v118[0] + 4);
      id v86 = (id)*((void *)v118[0] + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v85 = v68;
  }
  id v87 = 0;
  id v86 = 0;
LABEL_26:
  uint64_t v89 = v110;
  unint64_t v90 = v112;
  if (!v83)
  {
    uint64_t v91 = v111;
    if (!v86) {
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  if (!v86)
  {
    uint64_t v91 = v111;
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  if (v84 != v87 || v83 != v86)
  {
    char v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v91 = v111;
    if (v105) {
      goto LABEL_38;
    }
LABEL_35:
    defaultLogger()();
    unint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v94 = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "WARNING default voice number is not 1st in the list", v94, 2u);
      swift_slowDealloc();
    }

    v115(v90, v89);
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v91 = v111;
LABEL_38:
  defaultLogger()();
  uint64_t v95 = v78;
  uint64_t v96 = Logger.logObject.getter();
  os_log_type_t v97 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v96, v97))
  {

    uint64_t v96 = v95;
    uint64_t v104 = v95;
    uint64_t v101 = v108;
    uint64_t v102 = v114;
LABEL_47:

    v115(v109, v110);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v102, v101);
    return;
  }
  uint64_t v98 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v98 = 134349056;
  unint64_t v99 = v85;
  os_unfair_lock_lock(v85);
  uint64_t v100 = v107;
  sub_1004E7C24(v116, v118);
  uint64_t v101 = v108;
  uint64_t v102 = v114;
  if (!v100)
  {
    os_unfair_lock_unlock(v99);
    if (v118[0])
    {
      uint64_t v103 = *((void *)v118[0] + 2);

      swift_bridgeObjectRelease();
    }
    else
    {

      uint64_t v103 = -1;
    }
    uint64_t v104 = v111;
    v118[0] = (id)v103;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v96, v97, "reload CT, total phone numbers = %{public}ld", v98, 0xCu);
    swift_slowDealloc();
    goto LABEL_47;
  }

  os_unfair_lock_unlock(v99);
  __break(1u);
}

uint64_t sub_1004E9038(void **a1, void **a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100730C70);
  __chkstk_darwin(v4 - 8);
  uint64_t v26 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *a1;
  uint64_t v14 = *a2;
  id v15 = [v13 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v16 = [v14 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  int v17 = static UUID.== infix(_:_:)();
  if (((v17 ^ static UUID.== infix(_:_:)()) & 1) == 0)
  {
    int v17 = [v13 slotID] == (id)1;
    if (v17 != ([v14 slotID] != (id)1))
    {
      uint64_t v29 = UUID.uuidString.getter();
      uint64_t v30 = v18;
      uint64_t v27 = UUID.uuidString.getter();
      uint64_t v28 = v19;
      uint64_t v20 = type metadata accessor for Locale();
      uint64_t v21 = (uint64_t)v26;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v26, 1, 1, v20);
      sub_1000B5358();
      uint64_t v22 = StringProtocol.compare<A>(_:options:range:locale:)();
      sub_10000C6CC(v21, (uint64_t *)&unk_100730C70);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v17) = v22 == -1;
    }
  }
  uint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v10, v6);
  v23(v12, v6);
  return v17 & 1;
}

uint64_t sub_1004E9310(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v59 = a4;
  uint64_t v7 = type metadata accessor for Logger();
  unint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v54 - v13;
  __chkstk_darwin(v12);
  id v16 = (char *)&v54 - v15;
  if (a2)
  {
    swift_errorRetain();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    int v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v63 = v8;
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      unint64_t v61 = swift_slowAlloc();
      unint64_t v65 = v61;
      *(_DWORD *)uint64_t v19 = 136446210;
      unint64_t v60 = v19 + 4;
      uint64_t v20 = (void *)_convertErrorToNSError(_:)();
      uint64_t v62 = (void (**)(char *, uint64_t))v7;
      uint64_t v21 = v20;
      uint64_t v22 = a3;
      id v23 = [v20 localizedDescription];

      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      a3 = v22;
      uint64_t v64 = sub_100110D58(v24, v26, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "ignore error (%{public}s - retrieving IDS PAC payload", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, void))(v63 + 8))(v16, v62);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
    }
LABEL_26:
    uint64_t v53 = swift_bridgeObjectRetain();
    a3(v53);
    return swift_bridgeObjectRelease_n();
  }
  if (!a1 || (id v27 = [a1 inputData]) == 0)
  {
    defaultLogger()();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "missing data from IDS call. returning nothing", v52, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    goto LABEL_26;
  }
  uint64_t v28 = v27;
  unint64_t v60 = (uint8_t *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v61 = v29;

  id v30 = [a1 authenticationCertificateSignatures];
  sub_100025C28(0, &qword_100730CD8);
  unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v31 >> 62))
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v32) {
      goto LABEL_8;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    sub_10000C5F4((uint64_t)v60, v61);
LABEL_30:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v32 = result;
  if (!result) {
    goto LABEL_29;
  }
LABEL_8:
  uint64_t v55 = a3;
  if (v32 >= 1)
  {
    unint64_t v34 = v8;
    uint64_t v35 = 0;
    unint64_t v63 = v31 & 0xC000000000000001;
    uint64_t v36 = _swiftEmptyArrayStorage;
    uint64_t v62 = (void (**)(char *, uint64_t))(v34 + 8);
    unint64_t v57 = v31;
    unint64_t v58 = v14;
    uint64_t v56 = v32;
    while (1)
    {
      if (v63)
      {
        id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        if (v36) {
          goto LABEL_15;
        }
      }
      else
      {
        id v37 = *(id *)(v31 + 8 * v35 + 32);
        if (v36)
        {
LABEL_15:
          uint64_t v38 = v7;
          Swift::String v39 = Data.base64EncodedString(options:)(0);
          id v40 = [v37 serverVerifiableEncoding];
          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v43 = v42;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v36 = sub_100110D10(0, v36[2] + 1, 1, v36);
          }
          unint64_t v45 = v36[2];
          unint64_t v44 = v36[3];
          if (v45 >= v44 >> 1) {
            uint64_t v36 = sub_100110D10((void *)(v44 > 1), v45 + 1, 1, v36);
          }
          v36[2] = v45 + 1;
          uint64_t v46 = (Swift::String *)&v36[4 * v45];
          v46[2] = v39;
          v46[3]._uint64_t countAndFlagsBits = v41;
          v46[3]._object = v43;
          uint64_t v7 = v38;
          unint64_t v31 = v57;
          uint64_t v14 = v58;
          uint64_t v32 = v56;
        }
      }
      defaultLogger()();
      unint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        os_log_type_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "adding PAC", v49, 2u);
        swift_slowDealloc();
      }

      ++v35;
      (*v62)(v14, v7);

      if (v32 == v35)
      {
        swift_bridgeObjectRelease();
        sub_10000C5F4((uint64_t)v60, v61);
        a3 = v55;
        goto LABEL_30;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1004E995C()
{
  uint64_t v1 = type metadata accessor for DispatchQoS();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_10048E134;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_100593800;
  aBlock[3] = &unk_100707598;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v0;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_1004E9B84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [objc_allocWithZone((Class)type metadata accessor for DIPDeviceInfo.DIPNFHardwareMonitor()) init];
  uint64_t v7 = self;
  id v8 = [v7 sharedHardwareManager];
  [v8 registerEventListener:v6];

  id v9 = [v7 sharedHardwareManager];
  unsigned int v10 = [v9 getHwSupport];

  if ((v10 | 2) == 3)
  {
    sub_1004EAD68();
    id v11 = [v7 sharedHardwareManager];
    unsigned int v10 = [v11 getHwSupport];
  }
  id v12 = [v7 sharedHardwareManager];
  [v12 unregisterEventListener:v6];

  if (v10 != 2) {
    goto LABEL_26;
  }
  uint64_t v51 = a1;
  id v13 = [v7 sharedHardwareManager];
  v55[0] = 0;
  id v14 = [v13 secureElementsWithError:v55];

  id v15 = v55[0];
  id v52 = v6;
  if (!v14)
  {
    id v35 = v55[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138412290;
      swift_errorRetain();
      uint64_t v39 = v3;
      id v40 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v55[0] = v40;
      id v6 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v40;
      uint64_t v3 = v39;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error retrieving secure elements: %@", v38, 0xCu);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    a1 = v51;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_26:
    unsigned int v19 = 0;
    uint64_t v21 = (char *)&_swiftEmptyArrayStorage;
    char v22 = 1;
    goto LABEL_27;
  }
  uint64_t v53 = (void *)((char *)&type metadata for Any + 8);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = v15;

  uint64_t v18 = *(void *)(v16 + 16);
  if (v18)
  {
    unsigned int v19 = 0;
    v50[1] = v16;
    uint64_t v20 = v16 + 32;
    uint64_t v21 = (char *)&_swiftEmptyArrayStorage;
    char v22 = 1;
    do
    {
      sub_10003BC28(v20, (uint64_t)v55);
      sub_100025C28(0, (unint64_t *)&unk_100730CC0);
      if (swift_dynamicCast())
      {
        id v23 = v54;
        id v24 = [v54 serialNumber];
        if (v24)
        {
          unint64_t v25 = v24;
          char v26 = v22;
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v29 = v28;

          unsigned int v30 = v19;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v21 = sub_10010F3C4(0, *((void *)v21 + 2) + 1, 1, v21);
          }
          unint64_t v32 = *((void *)v21 + 2);
          unint64_t v31 = *((void *)v21 + 3);
          if (v32 >= v31 >> 1) {
            uint64_t v21 = sub_10010F3C4((char *)(v31 > 1), v32 + 1, 1, v21);
          }
          *((void *)v21 + 2) = v32 + 1;
          BOOL v33 = &v21[16 * v32];
          *((void *)v33 + 4) = v27;
          *((void *)v33 + 5) = v29;
          unsigned int v34 = [v23 hwType];

          if (v34) {
            unsigned int v19 = v34;
          }
          else {
            unsigned int v19 = v30;
          }
          char v22 = (v34 == 0) & v26;
          id v6 = v52;
        }
        else
        {
        }
      }
      v20 += 32;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unsigned int v19 = 0;
    uint64_t v21 = (char *)&_swiftEmptyArrayStorage;
    char v22 = 1;
  }
  a1 = v51;
LABEL_27:
  v55[0] = v21;
  sub_100007764(&qword_1007268F0);
  sub_1000B6120((unint64_t *)&qword_100730CB0, &qword_1007268F0);
  uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v43 = v42;
  swift_bridgeObjectRelease();

  unint64_t v44 = &_mh_execute_header;
  unint64_t v45 = (uint64_t *)(a1 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__seInfo);
  uint64_t v46 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__seInfo);
  uint64_t v47 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__seInfo + 8);
  *unint64_t v45 = v41;
  v45[1] = v43;
  os_log_type_t v48 = v45 + 2;
  if ((v22 & 1) == 0) {
    BYTE4(v44) = 0;
  }
  *(_DWORD *)os_log_type_t v48 = v19;
  *((unsigned char *)v48 + 4) = BYTE4(v44);
  return sub_10013FEE4(v46, v47);
}

uint64_t type metadata accessor for DIPDeviceInfo()
{
  return self;
}

uint64_t sub_1004EA288(void *a1)
{
  uint64_t v2 = type metadata accessor for WarmerUpper();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v75 - 8);
  uint64_t v6 = __chkstk_darwin(v75);
  uint64_t v68 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  unsigned int v10 = (char *)&v66 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  id v70 = (char *)&v66 - v12;
  __chkstk_darwin(v11);
  id v14 = (char *)&v66 - v13;
  defaultLogger()();
  id v15 = a1;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  id v72 = v15;
  if (v18)
  {
    unsigned int v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = v2;
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    char v22 = v19;
    *(_DWORD *)unsigned int v19 = 134349056;
    v77[0] = [v15 slotID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "DIPDeviceInfo: received delegate message for phoneNumberChanged, slot = %{public}ld", v22, 0xCu);
    uint64_t v5 = v21;
    uint64_t v4 = v20;
    uint64_t v2 = v71;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v16 = v15;
  }

  id v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v73 = v5 + 8;
  v23(v14, v75);
  uint64_t v24 = v74;
  unint64_t v25 = *(os_unfair_lock_s **)(v74 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctSubscriptionsInUse);
  char v26 = v25 + 4;
  uint64_t v27 = v25 + 6;
  os_unfair_lock_lock(v25 + 6);
  sub_1004EF648(v26, v77);
  os_unfair_lock_unlock(v27);
  id v28 = v77[0];
  uint64_t v29 = *(os_unfair_lock_s **)(v24 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctPhoneNumbers);
  unsigned int v30 = v29 + 4;
  unint64_t v31 = v29 + 6;
  os_unfair_lock_lock(v29 + 6);
  sub_1004E7C24(v30, v77);
  uint64_t v69 = 0;
  os_unfair_lock_unlock(v31);
  unint64_t v32 = (char *)v77[0];
  if (!v28
    || (sub_1004EAB64((uint64_t)v72, (unint64_t)v28),
        unint64_t v34 = v33,
        char v36 = v35,
        swift_bridgeObjectRelease(),
        (v36 & 1) != 0)
    || (v34 & 0x8000000000000000) != 0
    || !v32
    || v34 >= *((void *)v32 + 2))
  {
    defaultLogger()();
    os_log_type_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "DIPDeviceInfo: phoneNumberChanged on unknown context, reloading all", v50, 2u);
      swift_slowDealloc();
    }

    v23(v10, v75);
    sub_1004E82CC();
  }
  else
  {
    os_log_type_t v37 = *(void **)(v74 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_ctClient);
    v77[0] = 0;
    uint64_t v38 = [v37 getPhoneNumber:v72 error:v77];
    if (!v38)
    {
      id v53 = v77[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();
      id v54 = v68;
      defaultLogger()();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v55, v56))
      {
        unint64_t v57 = (uint8_t *)swift_slowAlloc();
        v77[0] = (id)swift_slowAlloc();
        *(_DWORD *)unint64_t v57 = 136446210;
        unint64_t v58 = (void *)_convertErrorToNSError(_:)();
        uint64_t v67 = (uint64_t (*)(char *, uint64_t))v23;
        uint64_t v59 = v58;
        id v60 = [v58 localizedDescription];

        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v63 = v62;

        uint64_t v76 = sub_100110D58(v61, v63, (uint64_t *)v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "DIPDeviceInfo: phoneNumberChanged ignoring error getting new phone number, %{public}s", v57, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        return v67(v68, v75);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        return ((uint64_t (*)(char *, uint64_t))v23)(v54, v75);
      }
    }
    uint64_t v39 = v38;
    uint64_t v71 = v2;
    id v40 = v77[0];
    id v72 = v39;
    id v41 = [v39 number];
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v43 = v42;

    unint64_t v44 = v70;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v68 = (char *)swift_slowAlloc();
      v77[0] = v68;
      uint64_t v67 = (uint64_t (*)(char *, uint64_t))v23;
      *(_DWORD *)uint64_t v47 = 136315138;
      unint64_t v66 = v47 + 4;
      swift_bridgeObjectRetain();
      uint64_t v76 = sub_100110D58(v74, v43, (uint64_t *)v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "phoneNumberChanged to %s", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v67(v70, v75);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v23(v44, v75);
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v32 = sub_1004EC9B8((uint64_t)v32);
    }
    if (v34 >= *((void *)v32 + 2)) {
      __break(1u);
    }
    uint64_t v64 = &v32[16 * v34];
    *((void *)v64 + 4) = v74;
    *((void *)v64 + 5) = v43;
    uint64_t v65 = swift_bridgeObjectRelease();
    __chkstk_darwin(v65);
    *(&v66 - 2) = (uint8_t *)v32;
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v31);
    sub_1004EF414(v30);
    os_unfair_lock_unlock(v31);

    swift_bridgeObjectRelease();
    uint64_t v2 = v71;
  }
  if (qword_10071F550 != -1) {
    swift_once();
  }
  uint64_t v51 = sub_1000443D4(v2, (uint64_t)qword_100760768);
  swift_beginAccess();
  sub_1000D9824(v51, (uint64_t)v4);
  sub_100418790(3);
  sub_1000DA68C((uint64_t)v4);
  return swift_bridgeObjectRelease();
}

void sub_1004EAB64(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v4 = *(id *)(a2 + 32);
      }
      uint64_t v5 = v4;
      sub_100025C28(0, (unint64_t *)&qword_100725878);
      char v6 = static NSObject.== infix(_:_:)();

      if ((v6 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          unint64_t v11 = i + 1;
          if (__OFADD__(i, 1)) {
            break;
          }
          if (v11 == v3) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if (v11 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          uint64_t v9 = v8;
          char v10 = static NSObject.== infix(_:_:)();

          if (v10) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v3) {
          continue;
        }
      }
      return;
    }
  }
}

uint64_t sub_1004EAD68()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  id v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  char v6 = (char *)&v15 - v5;
  defaultLogger()();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "DIPNFHardwareMonitor: waiting 1s for notification", v9, 2u);
    swift_slowDealloc();
  }

  char v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v6, v0);
  OS_dispatch_semaphore.wait(interval:)();
  uint64_t result = static DispatchTimeoutResult.== infix(_:_:)();
  if (result)
  {
    defaultLogger()();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "DIPDeviceInfo: timed out waiting for NFHardwareEventListener notification", v14, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(char *, uint64_t))v10)(v4, v0);
  }
  return result;
}

Swift::Int sub_1004EAF78()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    char v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DIPNFHardwareMonitor: hardware state did change", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return OS_dispatch_semaphore.signal()();
}

id sub_1004EB178()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DIPDeviceInfo.DIPNFHardwareMonitor();
  return [super dealloc];
}

uint64_t type metadata accessor for DIPDeviceInfo.DIPNFHardwareMonitor()
{
  return self;
}

id sub_1004EB1E0(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_1004EB2BC(uint64_t (*a1)(void **, void **))
{
  objc_super v2 = v1;
  uint64_t v4 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *objc_super v2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    *objc_super v2 = sub_1004ED524(v4);
  }
  sub_1004EB910(a1);
  return specialized ContiguousArray._endMutation()();
}

void *sub_1004EB354(uint64_t a1)
{
  return sub_1004EB688(a1, &qword_1007240F0, (uint64_t (*)(void *, void *, uint64_t, uint64_t))sub_1004EC9CC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100130AE4);
}

void *sub_1004EB388(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100007764(&qword_100730C60);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  void v3[3] = (2 * (v5 >> 3)) | 1;
  uint64_t v6 = sub_1004ECBD0((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100130AE4();
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1004EB474(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100007764(&qword_100730C60);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      void v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10016D694((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_1004EB56C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100007764(&qword_100730CD0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  void v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1004ECDCC((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100130AE4();
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1004EB654(uint64_t a1)
{
  return sub_1004EB688(a1, &qword_100730CD0, (uint64_t (*)(void *, void *, uint64_t, uint64_t))sub_1004ECFCC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1004EF634);
}

void *sub_1004EB688(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void *, void *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100007764(a2);
  uint64_t v8 = (void *)swift_allocObject();
  int64_t v9 = j__malloc_size(v8);
  uint64_t v10 = v9 - 32;
  if (v9 < 32) {
    uint64_t v10 = v9 - 17;
  }
  v8[2] = v4;
  v8[3] = 2 * (v10 >> 4);
  uint64_t v11 = a3(v18, v8 + 4, v4, a1);
  uint64_t v12 = v18[0];
  uint64_t v13 = v18[1];
  uint64_t v14 = v18[2];
  uint64_t v15 = v18[3];
  uint64_t v16 = v18[4];
  swift_bridgeObjectRetain();
  a4(v12, v13, v14, v15, v16);
  if (v11 != v4)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v8;
}

void *sub_1004EB77C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100007764((uint64_t *)&unk_100730CA0);
  uint64_t v3 = *(void *)(sub_100007764(&qword_1007240A0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      void v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = *(void *)(sub_100007764(&qword_1007240A0) - 8);
      uint64_t v10 = sub_1004ED1CC(&v11, (uint64_t)v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v1, a1);
      swift_bridgeObjectRetain();
      sub_100130AE4();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1004EB910(uint64_t (*a1)(void **, void **))
{
  Swift::Int v3 = v1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_144;
    }
    if (v3) {
      sub_1004EC0F4(0, v3, 1, a1);
    }
    return;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 <= -2) {
    goto LABEL_153;
  }
  Swift::Int v112 = v4;
  uint64_t v108 = v1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    uint64_t v121 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v116 = (id *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v34 = _swiftEmptyArrayStorage[2];
LABEL_105:
      if (v34 >= 2)
      {
        uint64_t v97 = *v108;
        do
        {
          unint64_t v98 = v34 - 2;
          if (v34 < 2) {
            goto LABEL_139;
          }
          if (!v97) {
            goto LABEL_152;
          }
          uint64_t v99 = (uint64_t)v8;
          uint64_t v100 = *(void *)&v8[16 * v98 + 32];
          uint64_t v101 = *(void *)&v8[16 * v34 + 24];
          sub_1004EC1FC((id *)(v97 + 8 * v100), (id *)(v97 + 8 * *(void *)&v8[16 * v34 + 16]), v97 + 8 * v101, v116, a1);
          if (v2) {
            break;
          }
          if (v101 < v100) {
            goto LABEL_140;
          }
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v102 = (char *)v99;
          }
          else {
            uint64_t v102 = sub_1004EC924(v99);
          }
          if (v98 >= *((void *)v102 + 2)) {
            goto LABEL_141;
          }
          uint64_t v103 = &v102[16 * v98 + 32];
          *(void *)uint64_t v103 = v100;
          *((void *)v103 + 1) = v101;
          unint64_t v104 = *((void *)v102 + 2);
          if (v34 > v104) {
            goto LABEL_142;
          }
          char v105 = v102;
          memmove(&v102[16 * v34 + 16], &v102[16 * v34 + 32], 16 * (v104 - v34));
          uint64_t v8 = v105;
          *((void *)v105 + 2) = v104 - 1;
          unint64_t v34 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_121:
      swift_bridgeObjectRelease();
      goto LABEL_122;
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_100025C28(0, (unint64_t *)&qword_100725878);
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    uint64_t v116 = (id *)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v121 = v7;
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v1;
  uint64_t v109 = *v1 + 16;
  uint64_t v107 = *v1 - 8;
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v113 = v3;
  uint64_t v117 = *v1;
LABEL_13:
  Swift::Int v11 = v9++;
  if (v9 < v3)
  {
    uint64_t v12 = v8;
    uint64_t v13 = *(void **)(v10 + 8 * v9);
    uint64_t v119 = *(void **)(v10 + 8 * v11);
    uint64_t v14 = v119;
    uint64_t v120 = v13;
    id v15 = v13;
    id v16 = v14;
    int v17 = a1(&v120, &v119);
    if (v2)
    {
      swift_bridgeObjectRelease();

      goto LABEL_122;
    }
    int v18 = v17;

    Swift::Int v9 = v11 + 2;
    if (v11 + 2 < v3)
    {
      Swift::Int v110 = v11;
      unsigned int v19 = (void **)(v109 + 8 * v11);
      while (1)
      {
        uint64_t v20 = *v19;
        uint64_t v119 = *(v19 - 1);
        uint64_t v21 = v119;
        uint64_t v120 = v20;
        id v22 = v20;
        id v23 = v21;
        int v24 = a1(&v120, &v119);

        if ((v18 ^ v24)) {
          break;
        }
        ++v9;
        ++v19;
        Swift::Int v3 = v113;
        if (v113 == v9)
        {
          Swift::Int v9 = v113;
          goto LABEL_21;
        }
      }
      Swift::Int v3 = v113;
LABEL_21:
      Swift::Int v11 = v110;
    }
    uint64_t v8 = v12;
    uint64_t v10 = v117;
    if (v18)
    {
      if (v9 < v11) {
        goto LABEL_148;
      }
      if (v11 < v9)
      {
        unint64_t v25 = (uint64_t *)(v107 + 8 * v9);
        Swift::Int v26 = v9;
        Swift::Int v27 = v11;
        id v28 = (uint64_t *)(v117 + 8 * v11);
        do
        {
          if (v27 != --v26)
          {
            if (!v117) {
              goto LABEL_151;
            }
            uint64_t v29 = *v28;
            *id v28 = *v25;
            *unint64_t v25 = v29;
          }
          ++v27;
          --v25;
          ++v28;
        }
        while (v27 < v26);
      }
    }
  }
  if (v9 >= v3) {
    goto LABEL_40;
  }
  if (__OFSUB__(v9, v11)) {
    goto LABEL_145;
  }
  if (v9 - v11 >= v112)
  {
LABEL_40:
    if (v9 < v11) {
      goto LABEL_143;
    }
    goto LABEL_41;
  }
  if (__OFADD__(v11, v112)) {
    goto LABEL_146;
  }
  if (v11 + v112 >= v3) {
    Swift::Int v30 = v3;
  }
  else {
    Swift::Int v30 = v11 + v112;
  }
  if (v30 >= v11)
  {
    if (v9 == v30) {
      goto LABEL_40;
    }
    unint64_t v106 = v8;
    uint64_t v85 = (void **)(v107 + 8 * v9);
    Swift::Int v111 = v11;
    Swift::Int v115 = v30;
    while (1)
    {
      id v86 = *(void **)(v10 + 8 * v9);
      Swift::Int v87 = v11;
      id v88 = v85;
      uint64_t v89 = v85;
      while (1)
      {
        uint64_t v119 = *v89;
        unint64_t v90 = v119;
        uint64_t v120 = v86;
        id v91 = v86;
        id v92 = v90;
        char v93 = a1(&v120, &v119);
        if (v2)
        {
          swift_bridgeObjectRelease();

LABEL_122:
          *(void *)((v121 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
          specialized Array._endMutation()();
          swift_bridgeObjectRelease();
          return;
        }
        char v94 = v93;

        if ((v94 & 1) == 0) {
          break;
        }
        uint64_t v10 = v117;
        if (!v117) {
          goto LABEL_150;
        }
        uint64_t v95 = *v89;
        id v86 = v89[1];
        *uint64_t v89 = v86;
        v89[1] = v95;
        --v89;
        if (v9 == ++v87) {
          goto LABEL_99;
        }
      }
      uint64_t v10 = v117;
LABEL_99:
      ++v9;
      uint64_t v85 = v88 + 1;
      Swift::Int v11 = v111;
      if (v9 == v115)
      {
        Swift::Int v9 = v115;
        uint64_t v8 = v106;
        if (v115 < v111) {
          goto LABEL_143;
        }
LABEL_41:
        unint64_t v31 = v8;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v8 = v31;
        }
        else {
          uint64_t v8 = sub_1004EC56C(0, *((void *)v31 + 2) + 1, 1, v31);
        }
        unint64_t v33 = *((void *)v8 + 2);
        unint64_t v32 = *((void *)v8 + 3);
        unint64_t v34 = v33 + 1;
        uint64_t v10 = v117;
        if (v33 >= v32 >> 1)
        {
          uint64_t v96 = sub_1004EC56C((char *)(v32 > 1), v33 + 1, 1, v8);
          uint64_t v10 = v117;
          uint64_t v8 = v96;
        }
        *((void *)v8 + 2) = v34;
        char v35 = v8 + 32;
        char v36 = &v8[16 * v33 + 32];
        *(void *)char v36 = v11;
        *((void *)v36 + 1) = v9;
        if (v33)
        {
          Swift::Int v114 = v9;
          while (1)
          {
            unint64_t v37 = v34 - 1;
            if (v34 >= 4)
            {
              unint64_t v42 = &v35[16 * v34];
              uint64_t v43 = *((void *)v42 - 8);
              uint64_t v44 = *((void *)v42 - 7);
              BOOL v48 = __OFSUB__(v44, v43);
              uint64_t v45 = v44 - v43;
              if (v48) {
                goto LABEL_128;
              }
              uint64_t v47 = *((void *)v42 - 6);
              uint64_t v46 = *((void *)v42 - 5);
              BOOL v48 = __OFSUB__(v46, v47);
              uint64_t v40 = v46 - v47;
              char v41 = v48;
              if (v48) {
                goto LABEL_129;
              }
              unint64_t v49 = v34 - 2;
              uint64_t v50 = &v35[16 * v34 - 32];
              uint64_t v52 = *(void *)v50;
              uint64_t v51 = *((void *)v50 + 1);
              BOOL v48 = __OFSUB__(v51, v52);
              uint64_t v53 = v51 - v52;
              if (v48) {
                goto LABEL_131;
              }
              BOOL v48 = __OFADD__(v40, v53);
              uint64_t v54 = v40 + v53;
              if (v48) {
                goto LABEL_134;
              }
              if (v54 >= v45)
              {
                id v72 = &v35[16 * v37];
                uint64_t v74 = *(void *)v72;
                uint64_t v73 = *((void *)v72 + 1);
                BOOL v48 = __OFSUB__(v73, v74);
                uint64_t v75 = v73 - v74;
                if (v48) {
                  goto LABEL_138;
                }
                BOOL v65 = v40 < v75;
                goto LABEL_78;
              }
            }
            else
            {
              if (v34 != 3)
              {
                uint64_t v66 = *((void *)v8 + 4);
                uint64_t v67 = *((void *)v8 + 5);
                BOOL v48 = __OFSUB__(v67, v66);
                uint64_t v59 = v67 - v66;
                char v60 = v48;
                goto LABEL_72;
              }
              uint64_t v39 = *((void *)v8 + 4);
              uint64_t v38 = *((void *)v8 + 5);
              BOOL v48 = __OFSUB__(v38, v39);
              uint64_t v40 = v38 - v39;
              char v41 = v48;
            }
            if (v41) {
              goto LABEL_130;
            }
            unint64_t v49 = v34 - 2;
            uint64_t v55 = &v35[16 * v34 - 32];
            uint64_t v57 = *(void *)v55;
            uint64_t v56 = *((void *)v55 + 1);
            BOOL v58 = __OFSUB__(v56, v57);
            uint64_t v59 = v56 - v57;
            char v60 = v58;
            if (v58) {
              goto LABEL_133;
            }
            uint64_t v61 = &v35[16 * v37];
            uint64_t v63 = *(void *)v61;
            uint64_t v62 = *((void *)v61 + 1);
            BOOL v48 = __OFSUB__(v62, v63);
            uint64_t v64 = v62 - v63;
            if (v48) {
              goto LABEL_136;
            }
            if (__OFADD__(v59, v64)) {
              goto LABEL_137;
            }
            if (v59 + v64 >= v40)
            {
              BOOL v65 = v40 < v64;
LABEL_78:
              if (v65) {
                unint64_t v37 = v49;
              }
              goto LABEL_80;
            }
LABEL_72:
            if (v60) {
              goto LABEL_132;
            }
            uint64_t v68 = &v35[16 * v37];
            uint64_t v70 = *(void *)v68;
            uint64_t v69 = *((void *)v68 + 1);
            BOOL v48 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v48) {
              goto LABEL_135;
            }
            if (v71 < v59) {
              goto LABEL_89;
            }
LABEL_80:
            unint64_t v76 = v37 - 1;
            if (v37 - 1 >= v34)
            {
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              goto LABEL_147;
            }
            if (!v10) {
              goto LABEL_149;
            }
            uint64_t v77 = v8;
            unint64_t v78 = &v35[16 * v76];
            uint64_t v79 = *(void *)v78;
            uint64_t v80 = v35;
            unint64_t v81 = v37;
            unint64_t v82 = &v35[16 * v37];
            uint64_t v83 = *((void *)v82 + 1);
            sub_1004EC1FC((id *)(v10 + 8 * *(void *)v78), (id *)(v10 + 8 * *(void *)v82), v10 + 8 * v83, v116, a1);
            if (v2) {
              goto LABEL_121;
            }
            if (v83 < v79) {
              goto LABEL_125;
            }
            if (v81 > *((void *)v77 + 2)) {
              goto LABEL_126;
            }
            *(void *)unint64_t v78 = v79;
            *(void *)&v80[16 * v76 + 8] = v83;
            unint64_t v84 = *((void *)v77 + 2);
            if (v81 >= v84) {
              goto LABEL_127;
            }
            unint64_t v34 = v84 - 1;
            memmove(v82, v82 + 16, 16 * (v84 - 1 - v81));
            char v35 = v80;
            uint64_t v8 = v77;
            *((void *)v77 + 2) = v84 - 1;
            uint64_t v10 = v117;
            Swift::Int v9 = v114;
            if (v84 <= 2) {
              goto LABEL_89;
            }
          }
        }
        unint64_t v34 = 1;
LABEL_89:
        Swift::Int v3 = v113;
        if (v9 >= v113) {
          goto LABEL_105;
        }
        goto LABEL_13;
      }
    }
  }
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1004EC0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void **, void **))
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a1;
    uint64_t v8 = *v4;
    Swift::Int v9 = (void **)(*v4 + 8 * a3 - 8);
LABEL_4:
    uint64_t v10 = *(void **)(v8 + 8 * v6);
    int v18 = v9;
    while (1)
    {
      uint64_t v21 = v10;
      uint64_t v20 = *v9;
      Swift::Int v11 = v20;
      id v12 = v10;
      id v13 = v11;
      char v14 = a4(&v21, &v20);

      if (v5) {
        break;
      }
      if (v14)
      {
        if (!v8)
        {
          __break(1u);
          return;
        }
        id v15 = *v9;
        uint64_t v10 = v9[1];
        *Swift::Int v9 = v10;
        v9[1] = v15;
        --v9;
        if (v6 != ++v7) {
          continue;
        }
      }
      ++v6;
      Swift::Int v9 = v18 + 1;
      uint64_t v7 = a1;
      if (v6 != a2) {
        goto LABEL_4;
      }
      return;
    }
  }
}

uint64_t sub_1004EC1FC(id *__src, id *a2, unint64_t a3, id *a4, uint64_t (*a5)(id *, void **))
{
  uint64_t v6 = v5;
  uint64_t v7 = a2;
  uint64_t v8 = __src;
  int64_t v9 = (char *)a2 - (char *)__src;
  int64_t v10 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v10 = (char *)a2 - (char *)__src;
  }
  uint64_t v11 = v10 >> 3;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v13 = a3 - (void)a2;
  }
  uint64_t v14 = v13 >> 3;
  BOOL v48 = __src;
  uint64_t v47 = a4;
  if (v11 >= v13 >> 3)
  {
    if (v12 <= -8) {
      goto LABEL_50;
    }
    if (a4 != a2 || &a2[v14] <= a4) {
      memmove(a4, a2, 8 * v14);
    }
    unint64_t v25 = (char *)&a4[v14];
    uint64_t v46 = v25;
    BOOL v48 = v7;
    if (v8 >= v7 || v12 < 8)
    {
LABEL_49:
      sub_1004EC724((void **)&v48, (const void **)&v47, &v46);
      return 1;
    }
    Swift::Int v26 = (id *)(a3 - 8);
    Swift::Int v27 = v7;
    uint64_t v39 = v8;
    while (1)
    {
      unint64_t v42 = v7;
      unint64_t v28 = (unint64_t)v25;
      uint64_t v29 = v25 - 8;
      id v45 = (id)*((void *)v25 - 1);
      Swift::Int v30 = *--v27;
      uint64_t v44 = v30;
      id v31 = v45;
      id v32 = v30;
      char v33 = a5(&v45, &v44);
      if (v6)
      {

        goto LABEL_49;
      }
      char v34 = v33;
      char v35 = v26 + 1;

      if (v34)
      {
        unint64_t v25 = (char *)v28;
        if (v35 != v42 || v26 >= v42) {
          *Swift::Int v26 = *v27;
        }
        BOOL v48 = v27;
      }
      else
      {
        uint64_t v46 = v29;
        if ((unint64_t)v35 >= v28 && (unint64_t)v26 < v28)
        {
          unint64_t v36 = (unint64_t)v39;
          if (v35 != (id *)v28) {
            *Swift::Int v26 = *(id *)v29;
          }
          unint64_t v37 = (char *)a4;
          Swift::Int v27 = v42;
          unint64_t v25 = v29;
          uint64_t v6 = 0;
          goto LABEL_44;
        }
        *Swift::Int v26 = *(id *)v29;
        Swift::Int v27 = v42;
        unint64_t v25 = v29;
      }
      uint64_t v6 = 0;
      unint64_t v36 = (unint64_t)v39;
      unint64_t v37 = (char *)a4;
LABEL_44:
      if ((unint64_t)v27 > v36)
      {
        --v26;
        uint64_t v7 = v27;
        if (v25 > v37) {
          continue;
        }
      }
      goto LABEL_49;
    }
  }
  if (v9 > -8)
  {
    id v15 = a4;
    if (a4 != __src || &__src[v11] <= a4) {
      memmove(a4, __src, 8 * v11);
    }
    id v16 = (char *)&a4[v11];
    uint64_t v46 = v16;
    if ((unint64_t)v7 < a3 && v9 >= 8)
    {
      while (1)
      {
        int v17 = v8;
        id v45 = *v7;
        uint64_t v44 = *v15;
        int v18 = v44;
        id v19 = v45;
        id v20 = v18;
        char v21 = a5(&v45, &v44);
        if (v5) {
          break;
        }
        char v22 = v21;

        if (v22)
        {
          id v23 = v7 + 1;
          int v24 = v17;
          if (v17 < v7 || v17 >= v23 || v17 != v7) {
            *int v17 = *v7;
          }
        }
        else
        {
          int v24 = v17;
          if (v17 != v15) {
            *int v17 = *v15;
          }
          uint64_t v47 = ++v15;
          id v23 = v7;
        }
        uint64_t v8 = v24 + 1;
        BOOL v48 = v8;
        if (v15 < (void **)v16)
        {
          uint64_t v7 = v23;
          if ((unint64_t)v23 < a3) {
            continue;
          }
        }
        goto LABEL_49;
      }
    }
    goto LABEL_49;
  }
LABEL_50:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1004EC56C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_100730C68);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1004EC668(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1004EC724(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

uint64_t sub_1004EC7E0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = sub_100007764(&qword_1007240A0);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1004EC924(uint64_t a1)
{
  return sub_1004EC56C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1004EC93C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

char *sub_1004EC9B8(uint64_t a1)
{
  return sub_10010F3C4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1004EC9CC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    uint64_t v20 = 8 * v16;
    char v21 = *(void **)(*(void *)(a4 + 48) + v20);
    ++v13;
    uint64_t v22 = *(void *)(*(void *)(a4 + 56) + v20);
    *int64_t v11 = v21;
    v11[1] = v22;
    if (v13 == v10)
    {
      id v23 = v21;
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = v21;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1004ECBD0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *int64_t v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1004ECDCC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *int64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1004ECFCC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *int64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1004ED1CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100007764(&qword_1007240A0);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  int64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9);
  int64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v35 = a4 + 64;
  uint64_t v16 = -1 << *(unsigned char *)(a4 + 32);
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  if (!a2)
  {
    int64_t v19 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v29 = v35;
    *a1 = a4;
    a1[1] = v29;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    int64_t v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  char v33 = a1;
  int64_t v19 = 0;
  uint64_t v20 = 0;
  int64_t v34 = (unint64_t)(63 - v16) >> 6;
  int64_t v31 = v34 - 1;
  uint64_t v21 = a3;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v23 = v22 | (v19 << 6);
  while (1)
  {
    ++v20;
    uint64_t v27 = *(void *)(a4 + 48);
    uint64_t v28 = type metadata accessor for IQCType();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v11, v27 + *(void *)(*(void *)(v28 - 8) + 72) * v23, v28);
    *(void *)&v11[*(int *)(v37 + 48)] = *(void *)(*(void *)(a4 + 56) + 8 * v23);
    sub_1004EF4F4((uint64_t)v11, (uint64_t)v14);
    uint64_t result = sub_1004EF4F4((uint64_t)v14, a2);
    if (v20 == v21)
    {
      a3 = v21;
      goto LABEL_38;
    }
    a2 += *(void *)(v36 + 72);
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v24 >= v34) {
      goto LABEL_33;
    }
    unint64_t v25 = *(void *)(v35 + 8 * v24);
    if (!v25)
    {
      v19 += 2;
      if (v24 + 1 >= v34)
      {
        unint64_t v18 = 0;
        int64_t v19 = v24;
      }
      else
      {
        unint64_t v25 = *(void *)(v35 + 8 * v19);
        if (v25) {
          goto LABEL_14;
        }
        int64_t v26 = v24 + 2;
        if (v24 + 2 >= v34) {
          goto LABEL_33;
        }
        unint64_t v25 = *(void *)(v35 + 8 * v26);
        if (v25)
        {
LABEL_17:
          int64_t v24 = v26;
          goto LABEL_18;
        }
        int64_t v19 = v24 + 3;
        if (v24 + 3 < v34)
        {
          unint64_t v25 = *(void *)(v35 + 8 * v19);
          if (v25)
          {
LABEL_14:
            int64_t v24 = v19;
            goto LABEL_18;
          }
          int64_t v26 = v24 + 4;
          if (v24 + 4 >= v34)
          {
LABEL_33:
            unint64_t v18 = 0;
            goto LABEL_37;
          }
          unint64_t v25 = *(void *)(v35 + 8 * v26);
          if (!v25)
          {
            while (1)
            {
              int64_t v24 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                goto LABEL_42;
              }
              if (v24 >= v34)
              {
                unint64_t v18 = 0;
                int64_t v19 = v31;
                goto LABEL_37;
              }
              unint64_t v25 = *(void *)(v35 + 8 * v24);
              ++v26;
              if (v25) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v18 = 0;
        int64_t v19 = v24 + 2;
      }
LABEL_37:
      a3 = v20;
LABEL_38:
      uint64_t v16 = v32;
      a1 = v33;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v24 << 6);
    int64_t v19 = v24;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1004ED510(void *a1)
{
  return sub_1001117CC(0, a1[2], 0, a1);
}

uint64_t sub_1004ED524(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1004ED538(void *a1)
{
  return sub_100112AF0(0, a1[2], 0, a1);
}

void *sub_1004ED54C(unint64_t a1, char *a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
    if (!v4) {
      break;
    }
    int64_t v24 = _swiftEmptyArrayStorage;
    sub_10011144C(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      __break(1u);
    }
    uint64_t v6 = 0;
    uint64_t v5 = v24;
    unint64_t v22 = v3 & 0xC000000000000001;
    a2 = *(char **)&a2[OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_ctClient];
    while (v4 != v6)
    {
      if (v22) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v3 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      id v23 = 0;
      id v9 = [a2 getPhoneNumber:v7 error:&v23];
      if (!v9)
      {
        id v20 = v23;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_release();

        return v5;
      }
      uint64_t v10 = v9;
      unint64_t v11 = v3;
      id v12 = v23;
      id v13 = [v10 number];

      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      int64_t v24 = v5;
      unint64_t v18 = v5[2];
      unint64_t v17 = v5[3];
      if (v18 >= v17 >> 1)
      {
        sub_10011144C(v17 > 1, v18 + 1, 1);
        uint64_t v5 = v24;
      }
      ++v6;
      v5[2] = v18 + 1;
      int64_t v19 = &v5[2 * v18];
      v19[4] = v14;
      v19[5] = v16;
      unint64_t v3 = v11;
      if (v4 == v6) {
        return v5;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return v5;
}

void sub_1004ED780(char a1, uint64_t a2, void *a3)
{
  unint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v47 - v10;
  id v12 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctPhoneNumbers);
  id v13 = v12 + 4;
  uint64_t v14 = v12 + 6;
  os_unfair_lock_lock(v12 + 6);
  uint64_t v15 = v13;
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  sub_1004E7C24(v15, &v56);
  os_unfair_lock_unlock(v14);
  if (!v56) {
    goto LABEL_8;
  }
  uint64_t v51 = *(void *)(v56 + 16);
  if (!v51)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    defaultLogger()();
    int64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "no phone numbers available", v28, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
LABEL_11:
    dispatch_group_leave((dispatch_group_t)v49[2]);
    return;
  }
  unint64_t v48 = v56;
  if (a1)
  {
    swift_bridgeObjectRelease();
    unint64_t v18 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctDefaultVoiceNumber);
    int64_t v19 = (uint64_t *)&v18[4];
    id v20 = v18 + 8;
    os_unfair_lock_lock(v18 + 8);
    sub_1004E7C44(v19, &v56);
    os_unfair_lock_unlock(v20);
    id v9 = v57;
    if (v57)
    {
      unint64_t v21 = v56;
      uint64_t v16 = sub_10010F3C4(0, 1, 1, (char *)_swiftEmptyArrayStorage);
      id v23 = (char *)*((void *)v16 + 2);
      unint64_t v22 = *((void *)v16 + 3);
      unint64_t v17 = (unint64_t)(v23 + 1);
      if ((unint64_t)v23 >= v22 >> 1) {
        goto LABEL_56;
      }
      goto LABEL_6;
    }
    defaultLogger()();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "no default voice numbers available", v46, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    goto LABEL_11;
  }
  unint64_t v21 = 0;
  id v23 = (char *)_swiftEmptyArrayStorage;
  unint64_t v29 = v48;
  unint64_t v50 = v48 + 32;
  while (1)
  {
    unint64_t v22 = *(void *)(v29 + 16);
    if (v21 >= v22)
    {
      __break(1u);
      goto LABEL_55;
    }
    uint64_t v30 = (unint64_t *)(v50 + 16 * v21);
    unint64_t v31 = *v30;
    id v9 = (char *)v30[1];
    unint64_t v56 = *v30;
    uint64_t v57 = v9;
    uint64_t v54 = 48;
    unint64_t v55 = 0xE100000000000000;
    uint64_t v52 = 0;
    unint64_t v53 = 0xE000000000000000;
    unint64_t v17 = sub_1000B5358();
    swift_bridgeObjectRetain();
    uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v16 = v33;
    uint64_t v34 = ((unint64_t)v9 >> 56) & 0xF;
    if (((unint64_t)v9 & 0x2000000000000000) == 0) {
      uint64_t v34 = v31 & 0xFFFFFFFFFFFFLL;
    }
    if (!v34)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    uint64_t v35 = v32;
    unint64_t v17 = *((void *)v23 + 2);
    if (v17)
    {
      if (*((void *)v23 + 4) == v31 && *((char **)v23 + 5) == v9
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        goto LABEL_13;
      }
      if (v17 != 1)
      {
        if (*((void *)v23 + 6) == v31 && *((char **)v23 + 7) == v9
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          goto LABEL_13;
        }
        if (v17 != 2) {
          break;
        }
      }
    }
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v36 = ((unint64_t)v16 >> 56) & 0xF;
    if (((unint64_t)v16 & 0x2000000000000000) == 0) {
      uint64_t v36 = v35 & 0xFFFFFFFFFFFFLL;
    }
    if (v36)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v23 = sub_10010F3C4(0, *((void *)v23 + 2) + 1, 1, v23);
      }
      unint64_t v17 = *((void *)v23 + 2);
      unint64_t v37 = *((void *)v23 + 3);
      uint64_t v16 = (char *)(v17 + 1);
      if (v17 >= v37 >> 1) {
        id v23 = sub_10010F3C4((char *)(v37 > 1), v17 + 1, 1, v23);
      }
      *((void *)v23 + 2) = v16;
      uint64_t v38 = &v23[16 * v17];
      *((void *)v38 + 4) = v31;
      *((void *)v38 + 5) = v9;
      goto LABEL_15;
    }
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    if (++v21 == v51)
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = (void *)swift_bridgeObjectRetain();
      sub_10013EA7C(v43, v49);
      goto LABEL_50;
    }
  }
  uint64_t v39 = v23 + 72;
  uint64_t v40 = 2;
  while (1)
  {
    uint64_t v41 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    BOOL v42 = *(v39 - 1) == v31 && *v39 == (void)v9;
    if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v29 = v48;
      goto LABEL_15;
    }
    v39 += 2;
    ++v40;
    BOOL v42 = v41 == v17;
    unint64_t v29 = v48;
    if (v42) {
      goto LABEL_25;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t v16 = sub_10010F3C4((char *)(v22 > 1), v17, 1, v16);
LABEL_6:
  *((void *)v16 + 2) = v17;
  int64_t v24 = &v16[16 * (void)v23];
  *((void *)v24 + 4) = v21;
  *((void *)v24 + 5) = v9;
  unint64_t v25 = (void *)swift_bridgeObjectRetain();
  sub_10013EA7C(v25, v49);
LABEL_50:
  swift_bridgeObjectRelease_n();
}

void sub_1004EDD00(char a1, uint64_t a2, void *a3, NSObject *a4)
{
  uint64_t v51 = a3;
  dispatch_group_t v52 = a4;
  unint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)&v50 - v12;
  uint64_t v14 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctPhoneNumbers);
  uint64_t v15 = v14 + 4;
  unint64_t v16 = (unint64_t)&v14[6];
  os_unfair_lock_lock(v14 + 6);
  unint64_t v17 = v15;
  unint64_t v18 = 0;
  sub_1004E7C24(v17, &v59);
  os_unfair_lock_unlock((os_unfair_lock_t)v16);
  if (!v59) {
    goto LABEL_8;
  }
  uint64_t v54 = *(void *)(v59 + 16);
  if (!v54)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    defaultLogger()();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "no phone numbers available", v30, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, unint64_t))(v8 + 8))(v11, v7);
    goto LABEL_11;
  }
  uint64_t v50 = v59;
  if ((a1 & 1) == 0)
  {
    unint64_t v31 = 0;
    int64_t v24 = (char *)_swiftEmptyArrayStorage;
    uint64_t v32 = v50;
    uint64_t v53 = v50 + 32;
    while (1)
    {
      unint64_t v23 = *(void *)(v32 + 16);
      if (v31 >= v23)
      {
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      char v33 = (uint64_t *)(v53 + 16 * v31);
      uint64_t v35 = *v33;
      unint64_t v34 = v33[1];
      uint64_t v59 = *v33;
      unint64_t v60 = v34;
      uint64_t v57 = 48;
      unint64_t v58 = 0xE100000000000000;
      uint64_t v55 = 0;
      unint64_t v56 = 0xE000000000000000;
      sub_1000B5358();
      swift_bridgeObjectRetain();
      uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v18 = v37;
      uint64_t v38 = HIBYTE(v34) & 0xF;
      if ((v34 & 0x2000000000000000) == 0) {
        uint64_t v38 = v35 & 0xFFFFFFFFFFFFLL;
      }
      if (!v38) {
        break;
      }
      uint64_t v39 = v36;
      uint64_t v4 = *((void *)v24 + 2);
      if (v4)
      {
        if (*((void *)v24 + 4) == v35 && *((void *)v24 + 5) == v34
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          break;
        }
        if (v4 != 1)
        {
          if (*((void *)v24 + 6) == v35 && *((void *)v24 + 7) == v34
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            break;
          }
          if (v4 != 2)
          {
            unint64_t v7 = (unint64_t)(v24 + 72);
            unint64_t v16 = 2;
            do
            {
              unint64_t v43 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_58;
              }
              BOOL v44 = *(void *)(v7 - 8) == v35 && *(void *)v7 == v34;
              if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v32 = v50;
                goto LABEL_15;
              }
              v7 += 16;
              ++v16;
              BOOL v44 = v43 == v4;
              uint64_t v32 = v50;
            }
            while (!v44);
          }
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v40 = ((unint64_t)v18 >> 56) & 0xF;
      if (((unint64_t)v18 & 0x2000000000000000) == 0) {
        uint64_t v40 = v39 & 0xFFFFFFFFFFFFLL;
      }
      if (v40)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v24 = sub_10010F3C4(0, *((void *)v24 + 2) + 1, 1, v24);
        }
        unint64_t v7 = *((void *)v24 + 2);
        unint64_t v41 = *((void *)v24 + 3);
        unint64_t v18 = (char *)(v7 + 1);
        if (v7 >= v41 >> 1) {
          int64_t v24 = sub_10010F3C4((char *)(v41 > 1), v7 + 1, 1, v24);
        }
        *((void *)v24 + 2) = v18;
        BOOL v42 = &v24[16 * v7];
        *((void *)v42 + 4) = v35;
        *((void *)v42 + 5) = v34;
        goto LABEL_15;
      }
LABEL_14:
      swift_bridgeObjectRelease();
LABEL_15:
      if (++v31 == v54)
      {
        swift_bridgeObjectRelease();
        if (*((void *)v24 + 2))
        {
          uint64_t v45 = *((void *)v24 + 5);
          uint64_t v46 = v51;
          void *v51 = *((void *)v24 + 4);
          v46[1] = v45;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        dispatch_group_leave(v52);
        goto LABEL_56;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  unint64_t v19 = v7;
  swift_bridgeObjectRelease();
  id v20 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo__ctDefaultVoiceNumber);
  unint64_t v21 = (uint64_t *)&v20[4];
  unint64_t v22 = v20 + 8;
  os_unfair_lock_lock(v20 + 8);
  sub_1004E7C44(v21, &v59);
  os_unfair_lock_unlock(v22);
  unint64_t v7 = v60;
  if (!v60)
  {
    defaultLogger()();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      unint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "no default voice numbers available", v49, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, unint64_t))(v8 + 8))(v13, v19);
LABEL_11:
    dispatch_group_leave(v52);
    return;
  }
  uint64_t v4 = v59;
  unint64_t v18 = sub_10010F3C4(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v16 = *((void *)v18 + 2);
  unint64_t v23 = *((void *)v18 + 3);
  int64_t v24 = (char *)(v16 + 1);
  if (v16 >= v23 >> 1) {
LABEL_59:
  }
    unint64_t v18 = sub_10010F3C4((char *)(v23 > 1), (int64_t)v24, 1, v18);
  *((void *)v18 + 2) = v24;
  unint64_t v25 = &v18[16 * v16 + 32];
  *(void *)unint64_t v25 = v4;
  *((void *)v25 + 1) = v7;
  uint64_t v26 = *((void *)v18 + 5);
  os_log_type_t v27 = v51;
  void *v51 = *((void *)v18 + 4);
  v27[1] = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  dispatch_group_leave(v52);
LABEL_56:
  swift_bridgeObjectRelease_n();
}

uint64_t sub_1004EE2DC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v35 - v11;
  id v13 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v14 = sub_1004EB1E0(a1, a2, 0);
  uint64_t v39 = v12;
  if (v14)
  {
    uint64_t v36 = a1;
    uint64_t v37 = v6;
    uint64_t v40 = v7;
    id v38 = v14;
    id v18 = [v14 entitlements];
    uint64_t v19 = a3 + 56;
    uint64_t v20 = 1 << *(unsigned char *)(a3 + 32);
    uint64_t v21 = -1;
    if (v20 < 64) {
      uint64_t v21 = ~(-1 << v20);
    }
    uint64_t v22 = v21 & *(void *)(a3 + 56);
    int64_t v23 = (unint64_t)(v20 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v25 = 0;
    if (!v22) {
      goto LABEL_10;
    }
LABEL_9:
    for (v22 &= v22 - 1; ; uint64_t v22 = (v27 - 1) & v27)
    {
      swift_bridgeObjectRetain();
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_100025C28(0, (unint64_t *)&qword_100730C50);
      id v30 = [v18 objectForKey:v29 ofClass:swift_getObjCClassFromMetadata()];

      if (v30)
      {
        _bridgeAnyObjectToAny(_:)();

        swift_unknownObjectRelease();
        sub_10000C6CC((uint64_t)v41, (uint64_t *)&unk_100727200);
        swift_release();
        return 1;
      }
      memset(v41, 0, sizeof(v41));
      uint64_t result = sub_10000C6CC((uint64_t)v41, (uint64_t *)&unk_100727200);
      if (v22) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v26 = v25 + 1;
      if (__OFADD__(v25, 1))
      {
        __break(1u);
LABEL_34:
        __break(1u);
        return result;
      }
      if (v26 >= v23) {
        goto LABEL_28;
      }
      uint64_t v27 = *(void *)(v19 + 8 * v26);
      ++v25;
      if (!v27)
      {
        int64_t v25 = v26 + 1;
        if (v26 + 1 >= v23) {
          goto LABEL_28;
        }
        uint64_t v27 = *(void *)(v19 + 8 * v25);
        if (!v27)
        {
          int64_t v25 = v26 + 2;
          if (v26 + 2 >= v23) {
            goto LABEL_28;
          }
          uint64_t v27 = *(void *)(v19 + 8 * v25);
          if (!v27)
          {
            int64_t v28 = v26 + 3;
            if (v28 >= v23)
            {
LABEL_28:
              swift_release();
              unint64_t v31 = v39;
              defaultLogger()();
              swift_bridgeObjectRetain_n();
              uint64_t v32 = Logger.logObject.getter();
              os_log_type_t v33 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v32, v33))
              {
                unint64_t v34 = (uint8_t *)swift_slowAlloc();
                *(void *)&v41[0] = swift_slowAlloc();
                *(_DWORD *)unint64_t v34 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v42 = sub_100110D58(v36, a2, (uint64_t *)v41);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v32, v33, "App with bundle ID %s does not have any matching entitlements", v34, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v37);
              return 0;
            }
            uint64_t v27 = *(void *)(v19 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                int64_t v25 = v28 + 1;
                if (__OFADD__(v28, 1)) {
                  goto LABEL_34;
                }
                if (v25 >= v23) {
                  goto LABEL_28;
                }
                uint64_t v27 = *(void *)(v19 + 8 * v25);
                ++v28;
                if (v27) {
                  goto LABEL_23;
                }
              }
            }
            int64_t v25 = v28;
          }
        }
      }
LABEL_23:
      ;
    }
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v40 = v7;
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(void *)&v41[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_100110D58(a1, a2, (uint64_t *)v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not find app for bundle ID %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v6);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return 0;
}

uint64_t sub_1004EE8B0(uint64_t a1)
{
  id v2 = [self enumeratorWithOptions:0];
  id v3 = [v2 nextObject];
  if (v3)
  {
    uint64_t v4 = a1 + 56;
    uint64_t v5 = &selRef_facVersion;
    id v18 = v2;
LABEL_3:
    uint64_t v19 = v3;
    id v6 = [v3 v5[352]:v18];
    uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(a1 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v12 = 0;
    if (v9)
    {
LABEL_7:
      v9 &= v9 - 1;
      goto LABEL_22;
    }
    while (1)
    {
      int64_t v13 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        return result;
      }
      if (v13 >= v10) {
        goto LABEL_25;
      }
      uint64_t v14 = *(void *)(v4 + 8 * v13);
      ++v12;
      if (!v14)
      {
        int64_t v12 = v13 + 1;
        if (v13 + 1 >= v10) {
          goto LABEL_25;
        }
        uint64_t v14 = *(void *)(v4 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v13 + 2;
          if (v13 + 2 >= v10) {
            goto LABEL_25;
          }
          uint64_t v14 = *(void *)(v4 + 8 * v12);
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v10)
            {
LABEL_25:

              swift_release();
              id v2 = v18;
              id v3 = [v18 nextObject];
              uint64_t v5 = &selRef_facVersion;
              if (v3) {
                goto LABEL_3;
              }
              break;
            }
            uint64_t v14 = *(void *)(v4 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                int64_t v12 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_29;
                }
                if (v12 >= v10) {
                  goto LABEL_25;
                }
                uint64_t v14 = *(void *)(v4 + 8 * v12);
                ++v15;
                if (v14) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v12 = v15;
          }
        }
      }
LABEL_21:
      uint64_t v9 = (v14 - 1) & v14;
LABEL_22:
      swift_bridgeObjectRetain();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_100025C28(0, (unint64_t *)&qword_100730C50);
      id v17 = [v6 objectForKey:v16 ofClass:swift_getObjCClassFromMetadata()];

      if (v17)
      {
        _bridgeAnyObjectToAny(_:)();

        swift_unknownObjectRelease();
        sub_10000C6CC((uint64_t)v20, (uint64_t *)&unk_100727200);
        swift_release();
        return 1;
      }
      memset(v20, 0, sizeof(v20));
      uint64_t result = sub_10000C6CC((uint64_t)v20, (uint64_t *)&unk_100727200);
      if (v9) {
        goto LABEL_7;
      }
    }
  }

  return 0;
}

void sub_1004EEB70(uint64_t a1, int64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v62 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (***)(void, void))(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_ctClient);
  unint64_t v66 = 0;
  id v15 = [v14 getUserDefaultVoiceSubscriptionContext:&v66];
  if (!v15)
  {
    id v40 = (id)v66;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_31:
    uint64_t v46 = v62;
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      uint64_t v60 = v4;
      uint64_t v50 = (uint8_t *)v49;
      unint64_t v51 = swift_slowAlloc();
      uint64_t v61 = (void *)a2;
      unint64_t v66 = v51;
      *(_DWORD *)uint64_t v50 = 136315138;
      swift_getErrorValue();
      uint64_t v52 = Error.localizedDescription.getter();
      uint64_t v65 = sub_100110D58(v52, v53, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "error retrieving ICCID: %s", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v46, v60);
      a2 = (int64_t)v61;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v46, v4);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a2 + 16));
    return;
  }
  NSString v16 = v15;
  id v17 = (id)v66;
  id v18 = [v16 uuid];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v66 = 0;
  id v19 = [v14 getSubscriptionInfoWithError:&v66];
  if (!v19)
  {
    id v41 = (id)v66;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v11[1](v13, v10);
    goto LABEL_31;
  }
  uint64_t v20 = v19;
  id v21 = (id)v66;
  id v22 = [v20 subscriptionsInUse];

  if (v22)
  {
    uint64_t v64 = v14;
    uint64_t v56 = v5;
    sub_100025C28(0, (unint64_t *)&qword_100725878);
    uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    __chkstk_darwin(v24);
    *(&v55 - 2) = v13;
    if (v23 < 0 || (v23 & 0x4000000000000000) != 0) {
      goto LABEL_36;
    }
    unint64_t v25 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    while (1)
    {
      unint64_t v66 = v25;
      sub_1004EB2BC(sub_1004EF660);
      swift_bridgeObjectRelease();
      unint64_t v26 = v66;
      if ((v66 & 0x8000000000000000) != 0 || (v66 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
      }
      else
      {
        uint64_t v27 = *(void *)(v66 + 16);
      }
      int64_t v28 = v64;
      uint64_t v57 = v13;
      unint64_t v58 = v11;
      uint64_t v59 = v10;
      uint64_t v61 = (void *)a2;
      if (!v27) {
        break;
      }
      uint64_t v60 = v4;
      unint64_t v63 = v26 & 0xC000000000000001;
      NSString v29 = (char *)_swiftEmptyArrayStorage;
      uint64_t v13 = 4;
      while (1)
      {
        id v30 = v63 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v26 + 8 * v13);
        uint64_t v11 = (void (**)(void, void))v30;
        uint64_t v10 = v13 - 3;
        if (__OFADD__(v13 - 4, 1)) {
          break;
        }
        unint64_t v66 = 0;
        id v31 = [v28 copySIMIdentity:v30 error:&v66];
        id v32 = (id)v66;
        if (!v31)
        {
          id v45 = (id)v66;
          swift_bridgeObjectRelease();
          swift_release();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          v58[1](v57, v59);
          uint64_t v4 = v60;
          a2 = (int64_t)v61;
          uint64_t v5 = v56;
          goto LABEL_31;
        }
        os_log_type_t v33 = v31;
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v36 = v35;
        id v37 = v32;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          NSString v29 = sub_10010F3C4(0, *((void *)v29 + 2) + 1, 1, v29);
        }
        a2 = *((void *)v29 + 2);
        unint64_t v38 = *((void *)v29 + 3);
        uint64_t v4 = a2 + 1;
        if (a2 >= v38 >> 1) {
          NSString v29 = sub_10010F3C4((char *)(v38 > 1), a2 + 1, 1, v29);
        }
        *((void *)v29 + 2) = v4;
        uint64_t v39 = &v29[16 * a2];
        *((void *)v39 + 4) = v34;
        *((void *)v39 + 5) = v36;

        ++v13;
        int64_t v28 = v64;
        if (v10 == v27) {
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_36:
      unint64_t v54 = swift_bridgeObjectRetain();
      unint64_t v25 = (unint64_t)sub_1004EB474(v54);
      swift_bridgeObjectRelease();
    }
    NSString v29 = (char *)_swiftEmptyArrayStorage;
LABEL_29:
    swift_release();
    sub_10013E6C0(v29, v61);
    swift_bridgeObjectRelease();
    v58[1](v57, v59);
  }
  else
  {
    defaultLogger()();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      BOOL v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "No CT Subscriptions in use", v44, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    dispatch_group_leave(*(dispatch_group_t *)(a2 + 16));
    v11[1](v13, v10);
  }
}

id sub_1004EF324()
{
  id v0 = [objc_allocWithZone((Class)AKAppleIDSession) init];
  id v1 = [v0 appleIDHeadersForRequest:0];

  if (v1)
  {
    uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v2 + 16) && (unint64_t v3 = sub_100590548(0x2D656C7070412D58, 0xEE004D2D444D2D49), (v4 & 1) != 0))
    {
      id v1 = *(id *)(*(void *)(v2 + 56) + 16 * v3);
      swift_bridgeObjectRetain();
    }
    else
    {
      id v1 = 0;
    }
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_1004EF414(void *a1)
{
  return sub_1004EF464(a1);
}

uint64_t sub_1004EF42C(void *a1)
{
  return sub_1004EF4AC(a1);
}

uint64_t sub_1004EF444(void **a1, void **a2)
{
  return sub_1004E9038(a1, a2) & 1;
}

uint64_t sub_1004EF464(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRelease();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1004EF4AC(void *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1004EF4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007240A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004EF55C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004EF594()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004EF5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004EF5B4()
{
  return swift_release();
}

uint64_t sub_1004EF5BC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004EF5F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004EF62C(void *a1, uint64_t a2)
{
  return sub_1004E9310(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1004EF648@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1004E7C24(a1, a2);
}

uint64_t sub_1004EF660(void **a1, void **a2)
{
  return sub_1004EF444(a1, a2) & 1;
}

uint64_t sub_1004EF67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[24] = v6;
  v5[25] = *(void *)(v6 - 8);
  v5[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError();
  v5[27] = v7;
  v5[28] = *(void *)(v7 - 8);
  v5[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[30] = v8;
  v5[31] = *(void *)(v8 - 8);
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  return _swift_task_switch(sub_1004EF818, 0, 0);
}

uint64_t sub_1004EF818()
{
  uint64_t v68 = v0;
  uint64_t v1 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  uint64_t v61 = v0;
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[34];
    uint64_t v5 = v0[31];
    uint64_t v63 = v1[30];
    uint64_t v65 = v4;
    unint64_t v6 = v1[20];
    uint64_t v7 = v1[19];
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    v61[18] = sub_100110D58(v7, v6, &v67);
    uint64_t v9 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Performing uploads complete action notification request for proofing session ID %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v10(v65, v63);
  }
  else
  {
    uint64_t v11 = v0[34];
    uint64_t v12 = v0[31];
    uint64_t v13 = v61[30];
    swift_bridgeObjectRelease_n();

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    uint64_t v14 = v13;
    uint64_t v9 = v61;
    v10(v11, v14);
  }
  v9[35] = (uint64_t)v10;
  uint64_t v15 = *(void *)(v9[23] + 64);
  v9[36] = v15;
  if (!v15
    || (NSString v16 = (uint64_t *)(v15 + OBJC_IVAR____TtC8coreidvd36IdentityProofingProducedAssetManager_cloudKitUploadAssets),
        swift_beginAccess(),
        uint64_t v17 = *v16,
        !*(void *)(*v16 + 16)))
  {
    uint64_t v35 = v9;
    uint64_t v36 = v9[32];
    uint64_t v37 = v35[30];
    uint64_t v39 = v35[28];
    uint64_t v38 = v35[29];
    uint64_t v40 = v35[27];
    (*(void (**)(uint64_t, void, uint64_t))(v35[25] + 104))(v35[26], enum case for DIPError.Code.missingCloudKitImagesNotUploaded(_:), v35[24]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C588();
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v38, v40);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v10(v36, v37);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v42 = (uint64_t (*)(void))v35[1];
    return v42();
  }
  uint64_t v62 = v9 + 7;
  uint64_t v64 = v17 + 64;
  uint64_t v60 = v9 + 2;
  uint64_t v18 = -1;
  uint64_t v19 = -1 << *(unsigned char *)(v17 + 32);
  if (-v19 < 64) {
    uint64_t v18 = ~(-1 << -(char)v19);
  }
  unint64_t v20 = v18 & *(void *)(v17 + 64);
  int64_t v66 = (unint64_t)(63 - v19) >> 6;
  swift_retain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v23 = (char *)_swiftEmptyArrayStorage;
  if (!v20) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v24 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (unint64_t i = v24 | (v22 << 6); ; unint64_t i = __clz(__rbit64(v27)) + (v22 << 6))
  {
    uint64_t v29 = *(void *)(*(void *)(v17 + 56) + 8 * i);
    uint64_t v30 = *(void *)(v29 + 16);
    uint64_t v31 = *(void *)(v29 + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v23 = sub_10010F3C4(0, *((void *)v23 + 2) + 1, 1, v23);
    }
    unint64_t v33 = *((void *)v23 + 2);
    unint64_t v32 = *((void *)v23 + 3);
    if (v33 >= v32 >> 1) {
      uint64_t v23 = sub_10010F3C4((char *)(v32 > 1), v33 + 1, 1, v23);
    }
    *((void *)v23 + 2) = v33 + 1;
    uint64_t v34 = &v23[16 * v33];
    *((void *)v34 + 4) = v30;
    *((void *)v34 + 5) = v31;
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (v20) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v26 >= v66) {
      goto LABEL_33;
    }
    unint64_t v27 = *(void *)(v64 + 8 * v26);
    ++v22;
    if (!v27)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v66) {
        goto LABEL_33;
      }
      unint64_t v27 = *(void *)(v64 + 8 * v22);
      if (!v27)
      {
        int64_t v22 = v26 + 2;
        if (v26 + 2 >= v66) {
          goto LABEL_33;
        }
        unint64_t v27 = *(void *)(v64 + 8 * v22);
        if (!v27) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v20 = (v27 - 1) & v27;
  }
  int64_t v28 = v26 + 3;
  if (v28 < v66)
  {
    unint64_t v27 = *(void *)(v64 + 8 * v28);
    if (!v27)
    {
      while (1)
      {
        int64_t v22 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          goto LABEL_42;
        }
        if (v22 >= v66) {
          goto LABEL_33;
        }
        unint64_t v27 = *(void *)(v64 + 8 * v22);
        ++v28;
        if (v27) {
          goto LABEL_23;
        }
      }
    }
    int64_t v22 = v28;
    goto LABEL_23;
  }
LABEL_33:
  uint64_t v43 = v61[23];
  swift_release();
  sub_100030A10(v43 + 16, (uint64_t)v60);
  sub_10000C728(v60, v61[5]);
  sub_100007764(&qword_100720530);
  uint64_t v44 = swift_allocObject();
  v61[37] = v44;
  *(_OWORD *)(v44 + 16) = xmmword_100610730;
  strcpy((char *)(v44 + 32), "UPLOAD_RECORD");
  *(_WORD *)(v44 + 46) = -4864;
  *(_OWORD *)(v44 + 48) = xmmword_100610A70;
  *(void *)(v44 + 72) = 0;
  *(void *)(v44 + 80) = 0;
  *(void *)(v44 + 64) = v23;
  uint64_t v45 = *(void *)(v43 + 56);
  if (v45)
  {
    uint64_t v46 = v45 + 136;
    swift_beginAccess();
    sub_100276CA0(v46, (uint64_t)v62);
    uint64_t v47 = v61[10];
    if (v47)
    {
      uint64_t v48 = v61[11];
      uint64_t v49 = sub_10000C728(v62, v61[10]);
      uint64_t v50 = *(void *)(v47 - 8);
      uint64_t v51 = swift_task_alloc();
      (*(void (**)(uint64_t, void *, uint64_t))(v50 + 16))(v51, v49, v47);
      sub_1004F0908((uint64_t)v62);
      uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)(v48 + 8) + 8))(v47);
      uint64_t v54 = v53;
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v47);
      swift_task_dealloc();
      goto LABEL_38;
    }
    sub_1004F0908((uint64_t)v62);
  }
  uint64_t v52 = 0;
  uint64_t v54 = 0;
LABEL_38:
  v61[38] = v54;
  uint64_t v55 = v61[20];
  uint64_t v56 = (void *)swift_task_alloc();
  v61[39] = (uint64_t)v56;
  *uint64_t v56 = v61;
  v56[1] = sub_1004F0010;
  uint64_t v57 = v61[21];
  uint64_t v58 = v61[22];
  uint64_t v59 = v61[19];
  return sub_1001FC910(v44, v57, v58, v52, v54, v59, v55);
}