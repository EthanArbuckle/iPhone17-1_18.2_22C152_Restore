uint64_t getEnumTagSinglePayload for IQCriteria(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 832)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  v3 = *(void *)(a1 + 816);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  v4 = v3 - 1;
  if (v4 < 0) {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IQCriteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 824) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 832) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 832) = 0;
    }
    if (a2) {
      *(void *)(result + 816) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQCriteria()
{
  return &type metadata for IQCriteria;
}

uint64_t getEnumTagSinglePayload for IQModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IQModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A89E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQModel.CodingKeys()
{
  return &type metadata for IQModel.CodingKeys;
}

unint64_t sub_1000A8A1C()
{
  unint64_t result = qword_100722018;
  if (!qword_100722018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722018);
  }
  return result;
}

unint64_t sub_1000A8A74()
{
  unint64_t result = qword_100722020;
  if (!qword_100722020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722020);
  }
  return result;
}

unint64_t sub_1000A8ACC()
{
  unint64_t result = qword_100722028;
  if (!qword_100722028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722028);
  }
  return result;
}

unint64_t sub_1000A8B24()
{
  unint64_t result = qword_100722030;
  if (!qword_100722030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722030);
  }
  return result;
}

unint64_t sub_1000A8B7C()
{
  unint64_t result = qword_100722038;
  if (!qword_100722038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722038);
  }
  return result;
}

unint64_t sub_1000A8BD4()
{
  unint64_t result = qword_100722040;
  if (!qword_100722040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722040);
  }
  return result;
}

unint64_t sub_1000A8C2C()
{
  unint64_t result = qword_100722048;
  if (!qword_100722048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722048);
  }
  return result;
}

unint64_t sub_1000A8C84()
{
  unint64_t result = qword_100722050;
  if (!qword_100722050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722050);
  }
  return result;
}

unint64_t sub_1000A8CDC()
{
  unint64_t result = qword_100722058;
  if (!qword_100722058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722058);
  }
  return result;
}

unint64_t sub_1000A8D34()
{
  unint64_t result = qword_100722060;
  if (!qword_100722060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722060);
  }
  return result;
}

unint64_t sub_1000A8D8C()
{
  unint64_t result = qword_100722068;
  if (!qword_100722068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722068);
  }
  return result;
}

unint64_t sub_1000A8DE4()
{
  unint64_t result = qword_100722070;
  if (!qword_100722070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722070);
  }
  return result;
}

unint64_t sub_1000A8E38()
{
  unint64_t result = qword_100722080;
  if (!qword_100722080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722080);
  }
  return result;
}

unint64_t sub_1000A8E8C()
{
  unint64_t result = qword_100722090;
  if (!qword_100722090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722090);
  }
  return result;
}

unint64_t sub_1000A8EE0()
{
  unint64_t result = qword_1007220A0;
  if (!qword_1007220A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007220A0);
  }
  return result;
}

unint64_t sub_1000A8F34()
{
  unint64_t result = qword_1007220C0;
  if (!qword_1007220C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007220C0);
  }
  return result;
}

unint64_t sub_1000A8F88()
{
  unint64_t result = qword_1007220D0;
  if (!qword_1007220D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007220D0);
  }
  return result;
}

unint64_t sub_1000A8FDC()
{
  unint64_t result = qword_1007220D8;
  if (!qword_1007220D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007220D8);
  }
  return result;
}

unint64_t sub_1000A9030()
{
  unint64_t result = qword_1007220E8;
  if (!qword_1007220E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007220E8);
  }
  return result;
}

unint64_t sub_1000A9084()
{
  unint64_t result = qword_100722100;
  if (!qword_100722100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722100);
  }
  return result;
}

unint64_t sub_1000A90D8()
{
  unint64_t result = qword_100722110;
  if (!qword_100722110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722110);
  }
  return result;
}

unint64_t sub_1000A912C()
{
  unint64_t result = qword_100722120;
  if (!qword_100722120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722120);
  }
  return result;
}

unint64_t sub_1000A9180()
{
  unint64_t result = qword_100722130;
  if (!qword_100722130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722130);
  }
  return result;
}

unint64_t sub_1000A91D4()
{
  unint64_t result = qword_100722140;
  if (!qword_100722140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722140);
  }
  return result;
}

unint64_t sub_1000A9228()
{
  unint64_t result = qword_100722150;
  if (!qword_100722150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722150);
  }
  return result;
}

unint64_t sub_1000A927C()
{
  unint64_t result = qword_100722170;
  if (!qword_100722170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722170);
  }
  return result;
}

unint64_t sub_1000A92D0()
{
  unint64_t result = qword_100722180;
  if (!qword_100722180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722180);
  }
  return result;
}

unint64_t sub_1000A9324()
{
  unint64_t result = qword_100722190;
  if (!qword_100722190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722190);
  }
  return result;
}

unint64_t sub_1000A9378()
{
  unint64_t result = qword_1007221A8;
  if (!qword_1007221A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007221A8);
  }
  return result;
}

uint64_t sub_1000A93CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746954627573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 2036625250 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000A950C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100633110
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100633130 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x664F7265626D756ELL && a2 == 0xEF73656972746552 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100633150)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1000A96D8(void *a1)
{
  uint64_t v2 = sub_100007764(&qword_1007221B0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A98DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v11 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v10 = 2;
  uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
  char v9 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v7;
}

unint64_t sub_1000A98DC()
{
  unint64_t result = qword_1007221B8;
  if (!qword_1007221B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007221B8);
  }
  return result;
}

unint64_t sub_1000A9930()
{
  unint64_t result = qword_1007221D0;
  if (!qword_1007221D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007221D0);
  }
  return result;
}

unint64_t sub_1000A9984()
{
  unint64_t result = qword_1007221E8;
  if (!qword_1007221E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007221E8);
  }
  return result;
}

unint64_t sub_1000A99D8()
{
  unint64_t result = qword_1007221F8;
  if (!qword_1007221F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007221F8);
  }
  return result;
}

unint64_t sub_1000A9A2C()
{
  unint64_t result = qword_100722200;
  if (!qword_100722200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722200);
  }
  return result;
}

unint64_t sub_1000A9A80()
{
  unint64_t result = qword_100722210;
  if (!qword_100722210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722210);
  }
  return result;
}

uint64_t sub_1000A9AD4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x69546E6F74747562 && a2 == 0xEB00000000656C74;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x614E746E65746E69 && a2 == 0xEA0000000000656DLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000A9C54@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  v29 = a4;
  uint64_t v30 = sub_100007764(a2);
  uint64_t v7 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  char v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v7;
  char v12 = v29;
  uint64_t v11 = v30;
  char v33 = 0;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v28 = v13;
  char v32 = 1;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v18 = v17;
  uint64_t v26 = v16;
  char v31 = 2;
  swift_bridgeObjectRetain();
  uint64_t v27 = v18;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v21 = v20;
  uint64_t v22 = v19;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v11);
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v23 = v27;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *char v12 = v28;
  v12[1] = v15;
  v12[2] = v26;
  v12[3] = v23;
  v12[4] = v22;
  v12[5] = v21;
  return result;
}

uint64_t sub_1000A9EF8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000A9FF8(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100722970);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_1000BE96C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[14] = 0;
    sub_1000AAD78();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v9[15];
    v9[13] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v7;
}

uint64_t sub_1000AA1B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69546E6F74747562 && a2 == 0xEB00000000656C74 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6961746564 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7373656E69737562 && a2 == 0xEC00000074616843 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 7629921 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

void *sub_1000AA4AC@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  v60 = a2;
  uint64_t v93 = sub_100007764(&qword_100722238);
  uint64_t v4 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  char v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1000A912C();
  uint64_t v7 = v6;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)_s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v58 = v4;
  v59 = a1;
  uint64_t v8 = v60;
  LOBYTE(v71) = 0;
  uint64_t v9 = v93;
  uint64_t v10 = v7;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  LOBYTE(v71) = 1;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = v15;
  uint64_t v56 = v14;
  *(void *)&long long v57 = v11;
  *((void *)&v57 + 1) = v13;
  LOBYTE(v71) = 2;
  swift_bridgeObjectRetain();
  uint64_t v17 = v16;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v20 = v19;
  uint64_t v55 = v17;
  LOBYTE(v61) = 3;
  sub_1000AAC80();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v45 = v20;
  uint64_t v21 = *((void *)&v71 + 1);
  uint64_t v23 = v72;
  uint64_t v22 = v73;
  LOBYTE(v61) = 4;
  uint64_t v49 = v71;
  uint64_t v50 = v74;
  uint64_t v44 = v75;
  sub_1000AAD28(v71, *((uint64_t *)&v71 + 1));
  sub_1000AACD4();
  uint64_t v43 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v46 = v22;
  uint64_t v47 = v21;
  uint64_t v48 = v23;
  uint64_t v24 = v73;
  uint64_t v25 = v74;
  uint64_t v26 = v75;
  LOBYTE(v61) = 5;
  long long v53 = v71;
  uint64_t v54 = v72;
  sub_1000AAD28(v71, *((uint64_t *)&v71 + 1));
  sub_1000AAD78();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v51 = v26;
  uint64_t v52 = v25;
  int v42 = v71;
  sub_100007764(&qword_100722160);
  char v90 = 6;
  sub_1000BEA78(&qword_100722258, &qword_100722160, (void (*)(void))sub_1000AADCC);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v27 = v49;
  (*(void (**)(char *, uint64_t))(v58 + 8))(v10, v9);
  uint64_t v93 = v91;
  long long v61 = v57;
  *(void *)&long long v62 = v56;
  *((void *)&v62 + 1) = v55;
  *(void *)&long long v63 = v18;
  *((void *)&v63 + 1) = v45;
  *(void *)&long long v64 = v27;
  *((void *)&v64 + 1) = v47;
  *(void *)&long long v65 = v48;
  *((void *)&v65 + 1) = v46;
  uint64_t v58 = v18;
  *(void *)&long long v66 = v50;
  *((void *)&v66 + 1) = v44;
  long long v28 = v53;
  long long v67 = v53;
  *(void *)&long long v68 = v54;
  *((void *)&v68 + 1) = v24;
  uint64_t v41 = v24;
  *(void *)&long long v69 = v52;
  *((void *)&v69 + 1) = v51;
  LOBYTE(v70) = v42;
  *((void *)&v70 + 1) = v91;
  sub_1000AAE20(&v61);
  sub_1000AAC30(v28, *((uint64_t *)&v28 + 1));
  uint64_t v29 = v49;
  uint64_t v30 = v46;
  uint64_t v31 = v44;
  sub_1000AAC30(v49, v47);
  uint64_t v32 = *((void *)&v57 + 1);
  swift_bridgeObjectRelease();
  uint64_t v33 = v55;
  swift_bridgeObjectRelease();
  uint64_t v34 = v45;
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v59);
  *(void *)&long long v71 = v57;
  *((void *)&v71 + 1) = v32;
  uint64_t v72 = v56;
  uint64_t v73 = v33;
  uint64_t v74 = v58;
  uint64_t v75 = v34;
  uint64_t v76 = v29;
  uint64_t v77 = v47;
  uint64_t v78 = v48;
  uint64_t v79 = v30;
  uint64_t v80 = v50;
  uint64_t v81 = v31;
  long long v82 = v53;
  uint64_t v83 = v54;
  uint64_t v84 = v41;
  uint64_t v85 = v52;
  uint64_t v86 = v51;
  char v87 = v42;
  *(_DWORD *)v88 = v92[0];
  *(_DWORD *)&v88[3] = *(_DWORD *)((char *)v92 + 3);
  uint64_t v89 = v93;
  uint64_t result = sub_1000AAEF8(&v71);
  long long v36 = v68;
  v8[6] = v67;
  v8[7] = v36;
  long long v37 = v70;
  v8[8] = v69;
  v8[9] = v37;
  long long v38 = v64;
  v8[2] = v63;
  v8[3] = v38;
  long long v39 = v66;
  v8[4] = v65;
  v8[5] = v39;
  long long v40 = v62;
  *uint64_t v8 = v61;
  v8[1] = v40;
  return result;
}

uint64_t sub_1000AAC30(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000AAC80()
{
  unint64_t result = qword_100722240;
  if (!qword_100722240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722240);
  }
  return result;
}

unint64_t sub_1000AACD4()
{
  unint64_t result = qword_100722248;
  if (!qword_100722248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722248);
  }
  return result;
}

uint64_t sub_1000AAD28(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1000AAD78()
{
  unint64_t result = qword_100722250;
  if (!qword_100722250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722250);
  }
  return result;
}

unint64_t sub_1000AADCC()
{
  unint64_t result = qword_100722260;
  if (!qword_100722260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722260);
  }
  return result;
}

void *sub_1000AAE20(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000AAD28(v2, v3);
  sub_1000AAD28(v4, v6);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000AAEF8(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(v2, v3);
  sub_1000AAC30(v4, v6);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1000AAFD0()
{
  unint64_t result = qword_100722270;
  if (!qword_100722270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722270);
  }
  return result;
}

unint64_t sub_1000AB024()
{
  unint64_t result = qword_100722288;
  if (!qword_100722288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722288);
  }
  return result;
}

unint64_t sub_1000AB078()
{
  unint64_t result = qword_1007222B0;
  if (!qword_1007222B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007222B0);
  }
  return result;
}

uint64_t sub_1000AB0CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000AB104(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000AB138()
{
  unint64_t result = qword_1007222C0;
  if (!qword_1007222C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007222C0);
  }
  return result;
}

uint64_t sub_1000AB18C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019364(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AB1EC(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000AB1FC()
{
  unint64_t result = qword_1007222D8;
  if (!qword_1007222D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007222D8);
  }
  return result;
}

uint64_t sub_1000AB250(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1000AB260()
{
  unint64_t result = qword_1007222E0;
  if (!qword_1007222E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007222E0);
  }
  return result;
}

unint64_t sub_1000AB2B4()
{
  unint64_t result = qword_1007222F0;
  if (!qword_1007222F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007222F0);
  }
  return result;
}

uint64_t *sub_1000AB308(uint64_t *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[16];
  uint64_t v7 = a1[20];
  uint64_t v8 = a1[24];
  uint64_t v9 = a1[28];
  uint64_t v10 = a1[32];
  uint64_t v11 = a1[36];
  uint64_t v12 = a1[40];
  uint64_t v13 = a1[44];
  uint64_t v14 = a1[48];
  uint64_t v15 = a1[52];
  uint64_t v16 = a1[56];
  uint64_t v17 = a1[60];
  uint64_t v18 = a1[64];
  uint64_t v19 = a1[68];
  uint64_t v20 = a1[72];
  uint64_t v21 = a1[76];
  uint64_t v22 = a1[80];
  uint64_t v23 = a1[84];
  uint64_t v24 = a1[88];
  uint64_t v25 = a1[92];
  sub_1000AB250(*a1);
  sub_1000AB250(v3);
  sub_1000AB250(v4);
  sub_1000AB250(v5);
  sub_1000AB250(v6);
  sub_1000AB250(v7);
  sub_1000AB250(v8);
  sub_1000AB250(v9);
  sub_1000AB250(v10);
  sub_1000AB250(v11);
  sub_1000AB250(v12);
  sub_1000AB250(v13);
  sub_1000AB250(v14);
  sub_1000AB250(v15);
  sub_1000AB250(v16);
  sub_1000AB250(v17);
  sub_1000AB250(v18);
  sub_1000AB250(v19);
  sub_1000AB250(v20);
  sub_1000AB250(v21);
  sub_1000AB250(v22);
  sub_1000AB250(v23);
  sub_1000AB250(v24);
  sub_1000AB250(v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1000AB74C(uint64_t *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[16];
  uint64_t v7 = a1[20];
  uint64_t v8 = a1[24];
  uint64_t v9 = a1[28];
  uint64_t v10 = a1[32];
  uint64_t v11 = a1[36];
  uint64_t v12 = a1[40];
  uint64_t v13 = a1[44];
  uint64_t v14 = a1[48];
  uint64_t v15 = a1[52];
  uint64_t v16 = a1[56];
  uint64_t v17 = a1[60];
  uint64_t v18 = a1[64];
  uint64_t v19 = a1[68];
  uint64_t v20 = a1[72];
  uint64_t v21 = a1[76];
  uint64_t v22 = a1[80];
  uint64_t v23 = a1[84];
  uint64_t v24 = a1[88];
  uint64_t v25 = a1[92];
  sub_1000AB1EC(*a1);
  sub_1000AB1EC(v3);
  sub_1000AB1EC(v4);
  sub_1000AB1EC(v5);
  sub_1000AB1EC(v6);
  sub_1000AB1EC(v7);
  sub_1000AB1EC(v8);
  sub_1000AB1EC(v9);
  sub_1000AB1EC(v10);
  sub_1000AB1EC(v11);
  sub_1000AB1EC(v12);
  sub_1000AB1EC(v13);
  sub_1000AB1EC(v14);
  sub_1000AB1EC(v15);
  sub_1000AB1EC(v16);
  sub_1000AB1EC(v17);
  sub_1000AB1EC(v18);
  sub_1000AB1EC(v19);
  sub_1000AB1EC(v20);
  sub_1000AB1EC(v21);
  sub_1000AB1EC(v22);
  sub_1000AB1EC(v23);
  sub_1000AB1EC(v24);
  sub_1000AB1EC(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1000ABB90(_OWORD *a1)
{
  *a1 = xmmword_100611090;
  bzero(a1 + 1, 0x1711uLL);
}

uint64_t sub_1000ABBA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2 != 1)
  {
    __chkstk_darwin(result);
    uint64_t v452 = STACK[0x2F30];
    uint64_t v451 = STACK[0x2F28];
    uint64_t v450 = STACK[0x2F20];
    uint64_t v449 = STACK[0x2F18];
    uint64_t v448 = STACK[0x2F10];
    uint64_t v447 = STACK[0x2F08];
    uint64_t v446 = STACK[0x2F00];
    uint64_t v445 = STACK[0x2EF8];
    uint64_t v444 = STACK[0x2EF0];
    uint64_t v443 = STACK[0x2EE8];
    uint64_t v442 = STACK[0x2EE0];
    uint64_t v441 = STACK[0x2ED8];
    uint64_t v440 = STACK[0x2ED0];
    uint64_t v439 = STACK[0x2EC8];
    uint64_t v438 = STACK[0x2EC0];
    uint64_t v437 = STACK[0x2EB8];
    uint64_t v436 = STACK[0x2EB0];
    uint64_t v435 = STACK[0x2EA8];
    uint64_t v434 = STACK[0x2EA0];
    uint64_t v433 = STACK[0x2E98];
    uint64_t v432 = STACK[0x2E90];
    uint64_t v431 = STACK[0x2E88];
    uint64_t v430 = STACK[0x2E80];
    uint64_t v429 = STACK[0x2E78];
    uint64_t v428 = STACK[0x2E70];
    uint64_t v427 = STACK[0x2E68];
    uint64_t v426 = STACK[0x2E60];
    uint64_t v425 = STACK[0x2E58];
    uint64_t v424 = STACK[0x2E50];
    uint64_t v423 = STACK[0x2E48];
    uint64_t v422 = STACK[0x2E40];
    uint64_t v421 = STACK[0x2E38];
    uint64_t v420 = STACK[0x2E30];
    uint64_t v419 = STACK[0x2E28];
    uint64_t v418 = STACK[0x2E20];
    uint64_t v417 = STACK[0x2E18];
    uint64_t v416 = STACK[0x2E10];
    uint64_t v415 = STACK[0x2E08];
    uint64_t v414 = STACK[0x2E00];
    uint64_t v413 = STACK[0x2DF8];
    uint64_t v412 = STACK[0x2DF0];
    uint64_t v411 = STACK[0x2DE8];
    uint64_t v410 = STACK[0x2DE0];
    uint64_t v409 = STACK[0x2DD8];
    uint64_t v408 = STACK[0x2DD0];
    uint64_t v407 = STACK[0x2DC8];
    uint64_t v406 = STACK[0x2DC0];
    uint64_t v405 = STACK[0x2DB8];
    uint64_t v404 = STACK[0x2DB0];
    uint64_t v403 = STACK[0x2DA8];
    uint64_t v402 = STACK[0x2DA0];
    uint64_t v401 = STACK[0x2D98];
    uint64_t v400 = STACK[0x2D90];
    uint64_t v399 = STACK[0x2D88];
    uint64_t v398 = STACK[0x2D80];
    uint64_t v455 = STACK[0x2D78];
    uint64_t v454 = STACK[0x2D70];
    uint64_t v453 = STACK[0x2D68];
    uint64_t v397 = STACK[0x2D60];
    uint64_t v396 = STACK[0x2D58];
    uint64_t v395 = STACK[0x2D50];
    uint64_t v394 = STACK[0x2D48];
    uint64_t v393 = STACK[0x2D40];
    uint64_t v389 = STACK[0x2BF0];
    uint64_t v388 = STACK[0x2BE8];
    uint64_t v387 = STACK[0x2BE0];
    uint64_t v386 = STACK[0x2BD8];
    uint64_t v385 = STACK[0x2BD0];
    uint64_t v384 = STACK[0x2BC8];
    uint64_t v383 = STACK[0x2BC0];
    uint64_t v382 = STACK[0x2BB8];
    uint64_t v381 = STACK[0x2BB0];
    uint64_t v380 = STACK[0x2BA8];
    uint64_t v379 = STACK[0x2BA0];
    uint64_t v378 = STACK[0x2B98];
    uint64_t v377 = STACK[0x2B90];
    uint64_t v376 = STACK[0x2B88];
    uint64_t v375 = STACK[0x2B80];
    uint64_t v374 = STACK[0x2B78];
    uint64_t v373 = STACK[0x2B70];
    uint64_t v372 = STACK[0x2B68];
    uint64_t v371 = STACK[0x2B60];
    uint64_t v370 = STACK[0x2B58];
    uint64_t v369 = STACK[0x2B50];
    uint64_t v368 = STACK[0x2B48];
    uint64_t v367 = STACK[0x2B40];
    uint64_t v366 = STACK[0x2B38];
    uint64_t v365 = STACK[0x2B30];
    uint64_t v364 = STACK[0x2B28];
    uint64_t v363 = STACK[0x2B20];
    uint64_t v362 = STACK[0x2B18];
    uint64_t v361 = STACK[0x2B10];
    uint64_t v360 = STACK[0x2B08];
    uint64_t v359 = STACK[0x2B00];
    uint64_t v358 = STACK[0x2AF8];
    uint64_t v357 = STACK[0x2AF0];
    uint64_t v356 = STACK[0x2AE8];
    uint64_t v355 = STACK[0x2AE0];
    uint64_t v354 = STACK[0x2AD8];
    uint64_t v353 = STACK[0x2AD0];
    uint64_t v352 = STACK[0x2AC8];
    uint64_t v351 = STACK[0x2AC0];
    uint64_t v350 = STACK[0x2AB8];
    uint64_t v349 = STACK[0x2AB0];
    uint64_t v348 = STACK[0x2AA8];
    uint64_t v347 = STACK[0x2AA0];
    uint64_t v346 = STACK[0x2A98];
    uint64_t v345 = STACK[0x2A90];
    uint64_t v344 = STACK[0x2A88];
    uint64_t v343 = STACK[0x2A80];
    uint64_t v342 = STACK[0x2A78];
    uint64_t v341 = STACK[0x2A70];
    uint64_t v340 = STACK[0x2A68];
    uint64_t v339 = STACK[0x2A60];
    uint64_t v338 = STACK[0x2A58];
    uint64_t v337 = STACK[0x2A50];
    uint64_t v336 = STACK[0x2A48];
    uint64_t v335 = STACK[0x2A40];
    uint64_t v392 = STACK[0x2A38];
    uint64_t v391 = STACK[0x2A30];
    uint64_t v390 = STACK[0x2A28];
    uint64_t v334 = STACK[0x2A20];
    uint64_t v333 = STACK[0x2A18];
    uint64_t v332 = STACK[0x2A10];
    uint64_t v331 = STACK[0x2A08];
    uint64_t v330 = STACK[0x2A00];
    uint64_t v203 = STACK[0x2218];
    uint64_t v202 = STACK[0x2210];
    uint64_t v201 = STACK[0x2208];
    uint64_t v200 = STACK[0x2200];
    uint64_t v199 = STACK[0x21F8];
    uint64_t v196 = STACK[0x2230];
    uint64_t v197 = STACK[0x2228];
    uint64_t v198 = STACK[0x2220];
    uint64_t v291 = STACK[0x2398];
    uint64_t v287 = STACK[0x2390];
    uint64_t v282 = STACK[0x2388];
    uint64_t v279 = STACK[0x2380];
    uint64_t v276 = STACK[0x23C8];
    uint64_t v277 = STACK[0x23C0];
    uint64_t v290 = STACK[0x23B8];
    uint64_t v286 = STACK[0x23B0];
    uint64_t v281 = STACK[0x23A8];
    uint64_t v278 = STACK[0x23A0];
    uint64_t v264 = STACK[0x23F8];
    uint64_t v265 = STACK[0x23F0];
    uint64_t v266 = STACK[0x23E8];
    uint64_t v267 = STACK[0x23E0];
    uint64_t v268 = STACK[0x23D8];
    uint64_t v269 = STACK[0x23D0];
    uint64_t v252 = STACK[0x2428];
    uint64_t v253 = STACK[0x2420];
    uint64_t v254 = STACK[0x2418];
    uint64_t v255 = STACK[0x2410];
    uint64_t v256 = STACK[0x2408];
    uint64_t v257 = STACK[0x2400];
    uint64_t v239 = STACK[0x2458];
    uint64_t v240 = STACK[0x2450];
    uint64_t v242 = STACK[0x2448];
    uint64_t v243 = STACK[0x2440];
    uint64_t v244 = STACK[0x2438];
    uint64_t v245 = STACK[0x2430];
    uint64_t v233 = STACK[0x2488];
    uint64_t v234 = STACK[0x2480];
    uint64_t v235 = STACK[0x2478];
    uint64_t v236 = STACK[0x2470];
    uint64_t v237 = STACK[0x2468];
    uint64_t v238 = STACK[0x2460];
    uint64_t v227 = STACK[0x24B8];
    uint64_t v228 = STACK[0x24B0];
    uint64_t v229 = STACK[0x24A8];
    uint64_t v230 = STACK[0x24A0];
    uint64_t v231 = STACK[0x2498];
    uint64_t v232 = STACK[0x2490];
    uint64_t v221 = STACK[0x24E8];
    uint64_t v222 = STACK[0x24E0];
    uint64_t v223 = STACK[0x24D8];
    uint64_t v224 = STACK[0x24D0];
    uint64_t v225 = STACK[0x24C8];
    uint64_t v226 = STACK[0x24C0];
    uint64_t v215 = STACK[0x2518];
    uint64_t v216 = STACK[0x2510];
    uint64_t v217 = STACK[0x2508];
    uint64_t v218 = STACK[0x2500];
    uint64_t v219 = STACK[0x24F8];
    uint64_t v220 = STACK[0x24F0];
    uint64_t v209 = STACK[0x2548];
    uint64_t v210 = STACK[0x2540];
    uint64_t v211 = STACK[0x2538];
    uint64_t v212 = STACK[0x2530];
    uint64_t v213 = STACK[0x2528];
    uint64_t v214 = STACK[0x2520];
    uint64_t v204 = STACK[0x2570];
    uint64_t v205 = STACK[0x2568];
    uint64_t v206 = STACK[0x2560];
    uint64_t v207 = STACK[0x2558];
    uint64_t v208 = STACK[0x2550];
    uint64_t v327 = STACK[0x26C8];
    uint64_t v325 = STACK[0x26C0];
    uint64_t v329 = STACK[0x26F8];
    uint64_t v328 = STACK[0x26F0];
    uint64_t v326 = STACK[0x26E8];
    uint64_t v324 = STACK[0x26E0];
    uint64_t v323 = STACK[0x26D8];
    uint64_t v322 = STACK[0x26D0];
    uint64_t v316 = STACK[0x2728];
    uint64_t v317 = STACK[0x2720];
    uint64_t v318 = STACK[0x2718];
    uint64_t v319 = STACK[0x2710];
    uint64_t v320 = STACK[0x2708];
    uint64_t v321 = STACK[0x2700];
    uint64_t v310 = STACK[0x2758];
    uint64_t v311 = STACK[0x2750];
    uint64_t v312 = STACK[0x2748];
    uint64_t v313 = STACK[0x2740];
    uint64_t v314 = STACK[0x2738];
    uint64_t v315 = STACK[0x2730];
    uint64_t v304 = STACK[0x2788];
    uint64_t v305 = STACK[0x2780];
    uint64_t v306 = STACK[0x2778];
    uint64_t v307 = STACK[0x2770];
    uint64_t v308 = STACK[0x2768];
    uint64_t v309 = STACK[0x2760];
    uint64_t v298 = STACK[0x27B8];
    uint64_t v299 = STACK[0x27B0];
    uint64_t v300 = STACK[0x27A8];
    uint64_t v301 = STACK[0x27A0];
    uint64_t v302 = STACK[0x2798];
    uint64_t v303 = STACK[0x2790];
    uint64_t v292 = STACK[0x27E8];
    uint64_t v293 = STACK[0x27E0];
    uint64_t v294 = STACK[0x27D8];
    uint64_t v295 = STACK[0x27D0];
    uint64_t v296 = STACK[0x27C8];
    uint64_t v297 = STACK[0x27C0];
    uint64_t v280 = STACK[0x2818];
    uint64_t v283 = STACK[0x2810];
    uint64_t v284 = STACK[0x2808];
    uint64_t v285 = STACK[0x2800];
    uint64_t v288 = STACK[0x27F8];
    uint64_t v289 = STACK[0x27F0];
    uint64_t v270 = STACK[0x2848];
    uint64_t v271 = STACK[0x2840];
    uint64_t v272 = STACK[0x2838];
    uint64_t v273 = STACK[0x2830];
    uint64_t v274 = STACK[0x2828];
    uint64_t v275 = STACK[0x2820];
    uint64_t v258 = STACK[0x2878];
    uint64_t v259 = STACK[0x2870];
    uint64_t v260 = STACK[0x2868];
    uint64_t v261 = STACK[0x2860];
    uint64_t v262 = STACK[0x2858];
    uint64_t v263 = STACK[0x2850];
    uint64_t v246 = STACK[0x28A8];
    uint64_t v247 = STACK[0x28A0];
    uint64_t v248 = STACK[0x2898];
    uint64_t v249 = STACK[0x2890];
    uint64_t v250 = STACK[0x2888];
    uint64_t v251 = STACK[0x2880];
    uint64_t v241 = STACK[0x28B0];
    uint64_t v141 = STACK[0x21F0];
    uint64_t v142 = STACK[0x21E8];
    uint64_t v143 = STACK[0x21E0];
    uint64_t v144 = STACK[0x21D8];
    uint64_t v145 = STACK[0x21D0];
    uint64_t v146 = STACK[0x21C8];
    uint64_t v147 = STACK[0x21C0];
    uint64_t v148 = STACK[0x21B8];
    uint64_t v149 = STACK[0x21B0];
    uint64_t v150 = STACK[0x21A8];
    uint64_t v151 = STACK[0x21A0];
    uint64_t v152 = STACK[0x2198];
    uint64_t v153 = STACK[0x2190];
    uint64_t v154 = STACK[0x2188];
    uint64_t v155 = STACK[0x2180];
    uint64_t v156 = STACK[0x2178];
    uint64_t v157 = STACK[0x2170];
    uint64_t v158 = STACK[0x2168];
    uint64_t v159 = STACK[0x2160];
    uint64_t v160 = STACK[0x2158];
    uint64_t v161 = STACK[0x2150];
    uint64_t v162 = STACK[0x2148];
    uint64_t v163 = STACK[0x2140];
    uint64_t v164 = STACK[0x2138];
    uint64_t v165 = STACK[0x2130];
    uint64_t v166 = STACK[0x2128];
    uint64_t v167 = STACK[0x2120];
    uint64_t v168 = STACK[0x2118];
    uint64_t v169 = STACK[0x2110];
    uint64_t v170 = STACK[0x2108];
    uint64_t v171 = STACK[0x2100];
    uint64_t v172 = STACK[0x20F8];
    uint64_t v173 = STACK[0x20F0];
    uint64_t v174 = STACK[0x20E8];
    uint64_t v176 = STACK[0x20E0];
    uint64_t v177 = STACK[0x20D8];
    uint64_t v178 = STACK[0x20D0];
    uint64_t v179 = STACK[0x20C8];
    uint64_t v181 = STACK[0x20C0];
    uint64_t v182 = STACK[0x20B8];
    uint64_t v183 = STACK[0x20B0];
    uint64_t v184 = STACK[0x20A8];
    uint64_t v186 = STACK[0x20A0];
    uint64_t v187 = STACK[0x2098];
    uint64_t v188 = STACK[0x2090];
    uint64_t v189 = STACK[0x2088];
    uint64_t v191 = STACK[0x2080];
    uint64_t v195 = STACK[0x2078];
    uint64_t v194 = STACK[0x2070];
    uint64_t v193 = STACK[0x2068];
    uint64_t v192 = STACK[0x2060];
    uint64_t v190 = STACK[0x2058];
    uint64_t v185 = STACK[0x2050];
    uint64_t v180 = STACK[0x2048];
    uint64_t v175 = STACK[0x2040];
    uint64_t v78 = STACK[0x1EF0];
    uint64_t v79 = STACK[0x1EE8];
    uint64_t v80 = STACK[0x1EE0];
    uint64_t v81 = STACK[0x1ED8];
    uint64_t v82 = STACK[0x1ED0];
    uint64_t v83 = STACK[0x1EC8];
    uint64_t v84 = STACK[0x1EC0];
    uint64_t v85 = STACK[0x1EB8];
    uint64_t v86 = STACK[0x1EB0];
    uint64_t v87 = STACK[0x1EA8];
    uint64_t v88 = STACK[0x1EA0];
    uint64_t v89 = STACK[0x1E98];
    uint64_t v90 = STACK[0x1E90];
    uint64_t v91 = STACK[0x1E88];
    uint64_t v92 = STACK[0x1E80];
    uint64_t v93 = STACK[0x1E78];
    uint64_t v94 = STACK[0x1E70];
    uint64_t v95 = STACK[0x1E68];
    uint64_t v96 = STACK[0x1E60];
    uint64_t v97 = STACK[0x1E58];
    uint64_t v98 = STACK[0x1E50];
    uint64_t v99 = STACK[0x1E48];
    uint64_t v100 = STACK[0x1E40];
    uint64_t v101 = STACK[0x1E38];
    uint64_t v102 = STACK[0x1E30];
    uint64_t v103 = STACK[0x1E28];
    uint64_t v104 = STACK[0x1E20];
    uint64_t v105 = STACK[0x1E18];
    uint64_t v106 = STACK[0x1E10];
    uint64_t v107 = STACK[0x1E08];
    uint64_t v108 = STACK[0x1E00];
    uint64_t v109 = STACK[0x1DF8];
    uint64_t v110 = STACK[0x1DF0];
    uint64_t v111 = STACK[0x1DE8];
    uint64_t v112 = STACK[0x1DE0];
    uint64_t v113 = STACK[0x1DD8];
    uint64_t v114 = STACK[0x1DD0];
    uint64_t v115 = STACK[0x1DC8];
    uint64_t v116 = STACK[0x1DC0];
    uint64_t v117 = STACK[0x1DB8];
    uint64_t v118 = STACK[0x1DB0];
    uint64_t v119 = STACK[0x1DA8];
    uint64_t v121 = STACK[0x1DA0];
    uint64_t v122 = STACK[0x1D98];
    uint64_t v123 = STACK[0x1D90];
    uint64_t v124 = STACK[0x1D88];
    uint64_t v126 = STACK[0x1D80];
    uint64_t v127 = STACK[0x1D78];
    uint64_t v128 = STACK[0x1D70];
    uint64_t v129 = STACK[0x1D68];
    uint64_t v131 = STACK[0x1D60];
    uint64_t v132 = STACK[0x1D58];
    uint64_t v133 = STACK[0x1D50];
    uint64_t v134 = STACK[0x1D48];
    uint64_t v136 = STACK[0x1D40];
    uint64_t v140 = STACK[0x1D38];
    uint64_t v139 = STACK[0x1D30];
    uint64_t v138 = STACK[0x1D28];
    uint64_t v137 = STACK[0x1D20];
    uint64_t v135 = STACK[0x1D18];
    uint64_t v130 = STACK[0x1D10];
    uint64_t v125 = STACK[0x1D08];
    uint64_t v120 = STACK[0x1D00];
    uint64_t v77 = v66;
    uint64_t v76 = v67;
    uint64_t v75 = v68;
    uint64_t v74 = v69;
    uint64_t v73 = v70;
    uint64_t v72 = v71;
    swift_bridgeObjectRelease();
    sub_1000AE894(v72, v73, v74, v75, v76, v77, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56,
      a57,
      a58,
      a59,
      a60,
      a61,
      a62,
      a63,
      a64,
      a65);
    sub_1000AE894(v120, v125, v130, v135, v137, v138, v139, v140, v136, v134, v133, v132, v131, v129, v128, v127, v126, v124, v123,
      v122,
      v121,
      v119,
      v118,
      v117,
      v116,
      v115,
      v114,
      v113,
      v112,
      v111,
      v110,
      v109,
      v108,
      v107,
      v106,
      v105,
      v104,
      v103,
      v102,
      v101,
      v100,
      v99,
      v98,
      v97,
      v96,
      v95,
      v94,
      v93,
      v92,
      v91,
      v90,
      v89,
      v88,
      v87,
      v86,
      v85,
      v84,
      v83,
      v82,
      v81,
      v80,
      v79,
      v78);
    sub_1000AE894(v175, v180, v185, v190, v192, v193, v194, v195, v191, v189, v188, v187, v186, v184, v183, v182, v181, v179, v178,
      v177,
      v176,
      v174,
      v173,
      v172,
      v171,
      v170,
      v169,
      v168,
      v167,
      v166,
      v165,
      v164,
      v163,
      v162,
      v161,
      v160,
      v159,
      v158,
      v157,
      v156,
      v155,
      v154,
      v153,
      v152,
      v151,
      v150,
      v149,
      v148,
      v147,
      v146,
      v145,
      v144,
      v143,
      v142,
      v141,
      v199,
      v200,
      v201,
      v202,
      v203,
      v198,
      v197,
      v196);
    sub_1000AE894(v279, v282, v287, v291, v278, v281, v286, v290, v277, v276, v269, v268, v267, v266, v265, v264, v257, v256, v255,
      v254,
      v253,
      v252,
      v245,
      v244,
      v243,
      v242,
      v240,
      v239,
      v238,
      v237,
      v236,
      v235,
      v234,
      v233,
      v232,
      v231,
      v230,
      v229,
      v228,
      v227,
      v226,
      v225,
      v224,
      v223,
      v222,
      v221,
      v220,
      v219,
      v218,
      v217,
      v216,
      v215,
      v214,
      v213,
      v212,
      v211,
      v210,
      v209,
      v208,
      v207,
      v206,
      v205,
      v204);
    sub_1000AE894(v325, v327, v322, v323, v324, v326, v328, v329, v321, v320, v319, v318, v317, v316, v315, v314, v313, v312, v311,
      v310,
      v309,
      v308,
      v307,
      v306,
      v305,
      v304,
      v303,
      v302,
      v301,
      v300,
      v299,
      v298,
      v297,
      v296,
      v295,
      v294,
      v293,
      v292,
      v289,
      v288,
      v285,
      v284,
      v283,
      v280,
      v275,
      v274,
      v273,
      v272,
      v271,
      v270,
      v263,
      v262,
      v261,
      v260,
      v259,
      v258,
      v251,
      v250,
      v249,
      v248,
      v247,
      v246,
      v241);
    sub_1000AE894(v330, v331, v332, v333, v334, v390, v391, v392, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345,
      v346,
      v347,
      v348,
      v349,
      v350,
      v351,
      v352,
      v353,
      v354,
      v355,
      v356,
      v357,
      v358,
      v359,
      v360,
      v361,
      v362,
      v363,
      v364,
      v365,
      v366,
      v367,
      v368,
      v369,
      v370,
      v371,
      v372,
      v373,
      v374,
      v375,
      v376,
      v377,
      v378,
      v379,
      v380,
      v381,
      v382,
      v383,
      v384,
      v385,
      v386,
      v387,
      v388,
      v389);
    sub_1000AE894(v393, v394, v395, v396, v397, v453, v454, v455, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408,
      v409,
      v410,
      v411,
      v412,
      v413,
      v414,
      v415,
      v416,
      v417,
      v418,
      v419,
      v420,
      v421,
      v422,
      v423,
      v424,
      v425,
      v426,
      v427,
      v428,
      v429,
      v430,
      v431,
      v432,
      v433,
      v434,
      v435,
      v436,
      v437,
      v438,
      v439,
      v440,
      v441,
      v442,
      v443,
      v444,
      v445,
      v446,
      v447,
      v448,
      v449,
      v450,
      v451,
      v452);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000AE894(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x600] != 1)
  {
    uint64_t v75 = STACK[0x5B0];
    uint64_t v74 = STACK[0x590];
    uint64_t v73 = STACK[0x570];
    uint64_t v72 = STACK[0x550];
    uint64_t v71 = STACK[0x530];
    uint64_t v70 = STACK[0x510];
    sub_1000AB1EC(result);
    sub_1000AB1EC(a5);
    sub_1000AB1EC(a9);
    sub_1000AB1EC(a13);
    sub_1000AB1EC(a17);
    sub_1000AB1EC(a21);
    sub_1000AB1EC(a25);
    sub_1000AB1EC(a29);
    sub_1000AB1EC(a33);
    sub_1000AB1EC(a37);
    sub_1000AB1EC(a41);
    sub_1000AB1EC(a45);
    sub_1000AB1EC(a49);
    sub_1000AB1EC(a53);
    sub_1000AB1EC(a57);
    sub_1000AB1EC(a61);
    sub_1000AB1EC(a65);
    sub_1000AB1EC(a69);
    sub_1000AB1EC(v70);
    sub_1000AB1EC(v71);
    sub_1000AB1EC(v72);
    sub_1000AB1EC(v73);
    sub_1000AB1EC(v74);
    sub_1000AB1EC(v75);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000AECE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656572674179656BLL && a2 == 0xEC000000746E656DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E696E676973 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E65697069636572 && a2 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000AEE5C()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x13) {
    return 19;
  }
  else {
    return v0;
  }
}

uint64_t sub_1000AEEB0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(void *)(v1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(v1 + 32) = *(void *)(a1 + 32);
  *(void *)(v1 + 40) = v4;
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(v1 + 48) = *(void *)(a1 + 48);
  *(void *)(v1 + 56) = v5;
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(v1 + 64) = *(void *)(a1 + 64);
  *(void *)(v1 + 72) = v6;
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)(v1 + 80) = *(void *)(a1 + 80);
  *(void *)(v1 + 88) = v7;
  uint64_t v8 = *(void *)(a1 + 104);
  *(void *)(v1 + 96) = *(void *)(a1 + 96);
  *(void *)(v1 + 104) = v8;
  *(unsigned char *)(v1 + 112) = *(unsigned char *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 128);
  *(void *)(v1 + 120) = *(void *)(a1 + 120);
  *(void *)(v1 + 128) = v9;
  uint64_t v10 = *(void *)(a1 + 144);
  *(void *)(v1 + 136) = *(void *)(a1 + 136);
  *(void *)(v1 + 144) = v10;
  *(void *)(v1 + 152) = *(void *)(a1 + 152);
  uint64_t v11 = *(void *)(a1 + 168);
  *(void *)(v1 + 160) = *(void *)(a1 + 160);
  *(void *)(v1 + 168) = v11;
  *(void *)(v1 + 176) = *(void *)(a1 + 176);
  uint64_t v12 = *(void *)(a1 + 192);
  *(void *)(v1 + 184) = *(void *)(a1 + 184);
  *(void *)(v1 + 192) = v12;
  *(unsigned char *)(v1 + 200) = *(unsigned char *)(a1 + 200);
  sub_100048D6C(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, &qword_100722310);
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes) = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes);
  *(void *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields) = *(void *)(a1
                                                                                          + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate + 8);
  uint64_t v14 = (void *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  *uint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  v14[1] = v13;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_enableUAM) = *(unsigned char *)(a1
                                                                                  + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_enableUAM);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000AF05C()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12) {
    return 18;
  }
  else {
    return v0;
  }
}

uint64_t sub_1000AF0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,char a21,char a22)
{
  *(void *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_applicationACL) = a2;
  *(void *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_acceptedVerifiedClaims) = a3;
  *(void *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_verifiedClaimFields) = a4;
  *(unsigned char *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimDataConsistency) = a5;
  uint64_t v24 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimTTL;
  *(void *)uint64_t v24 = a6;
  *(unsigned char *)(v24 + 8) = a7 & 1;
  *(void *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_recipientCertificates) = a8;
  *(void *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_pagination) = a9;
  *(void *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_unorderedUI) = a10;
  uint64_t v25 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_cloudkitRetry;
  *(void *)uint64_t v25 = a11;
  *(unsigned char *)(v25 + 8) = a12 & 1;
  uint64_t v26 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_connectToWifiReminderInDays;
  *(void *)uint64_t v26 = a13;
  *(unsigned char *)(v26 + 8) = a14 & 1;
  uint64_t v27 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_provisioningRetryTimeoutInDays;
  *(void *)uint64_t v27 = a15;
  *(unsigned char *)(v27 + 8) = a16 & 1;
  uint64_t v28 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_deleteIncompleteCredentialAfterDays;
  *(void *)uint64_t v28 = a17;
  *(unsigned char *)(v28 + 8) = a18 & 1;
  uint64_t v29 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_deleteInactiveKeysAfterDays;
  *(void *)uint64_t v29 = a19;
  *(unsigned char *)(v29 + 8) = a20 & 1;
  *(unsigned char *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_base64EncodeImage) = (a21 == 2) | a21 & 1;
  *(unsigned char *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_isBiomeFedStatsEnabled) = a22;
  return sub_1000AEEB0(a1);
}

uint64_t sub_1000AF218(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,char a24,char a25)
{
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_nonceURL) = a2;
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingURL) = a3;
  *(unsigned char *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_allowUrlOverride) = a4;
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs) = a5;
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes) = a6;
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_pagination) = a7;
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_acceptedVerifiedClaims) = a8;
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL) = a9;
  sub_100048D6C(a10, v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, &qword_100722300);
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates) = a11;
  *(unsigned char *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareAccountAssessment) = a12;
  *(unsigned char *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareINOAssessment) = a13;
  *(void *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_consumableDSD) = a14;
  *(unsigned char *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeEncryptedTSID) = a15;
  *(unsigned char *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeFGuid) = a16;
  *(unsigned char *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentDeviceData) = a17;
  sub_1000BEA14(a18, v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_connectivity, &qword_100722308);
  *(unsigned char *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingFormat) = a19 & 1;
  uint64_t v26 = (void *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userAuthorizationBundleName);
  *uint64_t v26 = a20;
  v26[1] = a21;
  uint64_t v27 = v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_dsdValidityInSeconds;
  *(void *)uint64_t v27 = a22;
  *(unsigned char *)(v27 + 8) = a23 & 1;
  *(unsigned char *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_useExternalGSToken) = a24;
  *(unsigned char *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_assessBeforeProof) = a25;
  uint64_t v28 = sub_1000AEEB0(a1);
  sub_10000C6CC(a10, &qword_100722300);
  return v28;
}

uint64_t sub_1000AF434(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

#error "1000B2188: call analysis failed (funcsize=2893)"

uint64_t sub_1000B21B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2 != 1)
  {
    __chkstk_darwin(result);
    uint64_t v452 = STACK[0x2F30];
    uint64_t v451 = STACK[0x2F28];
    uint64_t v450 = STACK[0x2F20];
    uint64_t v449 = STACK[0x2F18];
    uint64_t v448 = STACK[0x2F10];
    uint64_t v447 = STACK[0x2F08];
    uint64_t v446 = STACK[0x2F00];
    uint64_t v445 = STACK[0x2EF8];
    uint64_t v444 = STACK[0x2EF0];
    uint64_t v443 = STACK[0x2EE8];
    uint64_t v442 = STACK[0x2EE0];
    uint64_t v441 = STACK[0x2ED8];
    uint64_t v440 = STACK[0x2ED0];
    uint64_t v439 = STACK[0x2EC8];
    uint64_t v438 = STACK[0x2EC0];
    uint64_t v437 = STACK[0x2EB8];
    uint64_t v436 = STACK[0x2EB0];
    uint64_t v435 = STACK[0x2EA8];
    uint64_t v434 = STACK[0x2EA0];
    uint64_t v433 = STACK[0x2E98];
    uint64_t v432 = STACK[0x2E90];
    uint64_t v431 = STACK[0x2E88];
    uint64_t v430 = STACK[0x2E80];
    uint64_t v429 = STACK[0x2E78];
    uint64_t v428 = STACK[0x2E70];
    uint64_t v427 = STACK[0x2E68];
    uint64_t v426 = STACK[0x2E60];
    uint64_t v425 = STACK[0x2E58];
    uint64_t v424 = STACK[0x2E50];
    uint64_t v423 = STACK[0x2E48];
    uint64_t v422 = STACK[0x2E40];
    uint64_t v421 = STACK[0x2E38];
    uint64_t v420 = STACK[0x2E30];
    uint64_t v419 = STACK[0x2E28];
    uint64_t v418 = STACK[0x2E20];
    uint64_t v417 = STACK[0x2E18];
    uint64_t v416 = STACK[0x2E10];
    uint64_t v415 = STACK[0x2E08];
    uint64_t v414 = STACK[0x2E00];
    uint64_t v413 = STACK[0x2DF8];
    uint64_t v412 = STACK[0x2DF0];
    uint64_t v411 = STACK[0x2DE8];
    uint64_t v410 = STACK[0x2DE0];
    uint64_t v409 = STACK[0x2DD8];
    uint64_t v408 = STACK[0x2DD0];
    uint64_t v407 = STACK[0x2DC8];
    uint64_t v406 = STACK[0x2DC0];
    uint64_t v405 = STACK[0x2DB8];
    uint64_t v404 = STACK[0x2DB0];
    uint64_t v403 = STACK[0x2DA8];
    uint64_t v402 = STACK[0x2DA0];
    uint64_t v401 = STACK[0x2D98];
    uint64_t v400 = STACK[0x2D90];
    uint64_t v399 = STACK[0x2D88];
    uint64_t v398 = STACK[0x2D80];
    uint64_t v455 = STACK[0x2D78];
    uint64_t v454 = STACK[0x2D70];
    uint64_t v453 = STACK[0x2D68];
    uint64_t v397 = STACK[0x2D60];
    uint64_t v396 = STACK[0x2D58];
    uint64_t v395 = STACK[0x2D50];
    uint64_t v394 = STACK[0x2D48];
    uint64_t v393 = STACK[0x2D40];
    uint64_t v389 = STACK[0x2BF0];
    uint64_t v388 = STACK[0x2BE8];
    uint64_t v387 = STACK[0x2BE0];
    uint64_t v386 = STACK[0x2BD8];
    uint64_t v385 = STACK[0x2BD0];
    uint64_t v384 = STACK[0x2BC8];
    uint64_t v383 = STACK[0x2BC0];
    uint64_t v382 = STACK[0x2BB8];
    uint64_t v381 = STACK[0x2BB0];
    uint64_t v380 = STACK[0x2BA8];
    uint64_t v379 = STACK[0x2BA0];
    uint64_t v378 = STACK[0x2B98];
    uint64_t v377 = STACK[0x2B90];
    uint64_t v376 = STACK[0x2B88];
    uint64_t v375 = STACK[0x2B80];
    uint64_t v374 = STACK[0x2B78];
    uint64_t v373 = STACK[0x2B70];
    uint64_t v372 = STACK[0x2B68];
    uint64_t v371 = STACK[0x2B60];
    uint64_t v370 = STACK[0x2B58];
    uint64_t v369 = STACK[0x2B50];
    uint64_t v368 = STACK[0x2B48];
    uint64_t v367 = STACK[0x2B40];
    uint64_t v366 = STACK[0x2B38];
    uint64_t v365 = STACK[0x2B30];
    uint64_t v364 = STACK[0x2B28];
    uint64_t v363 = STACK[0x2B20];
    uint64_t v362 = STACK[0x2B18];
    uint64_t v361 = STACK[0x2B10];
    uint64_t v360 = STACK[0x2B08];
    uint64_t v359 = STACK[0x2B00];
    uint64_t v358 = STACK[0x2AF8];
    uint64_t v357 = STACK[0x2AF0];
    uint64_t v356 = STACK[0x2AE8];
    uint64_t v355 = STACK[0x2AE0];
    uint64_t v354 = STACK[0x2AD8];
    uint64_t v353 = STACK[0x2AD0];
    uint64_t v352 = STACK[0x2AC8];
    uint64_t v351 = STACK[0x2AC0];
    uint64_t v350 = STACK[0x2AB8];
    uint64_t v349 = STACK[0x2AB0];
    uint64_t v348 = STACK[0x2AA8];
    uint64_t v347 = STACK[0x2AA0];
    uint64_t v346 = STACK[0x2A98];
    uint64_t v345 = STACK[0x2A90];
    uint64_t v344 = STACK[0x2A88];
    uint64_t v343 = STACK[0x2A80];
    uint64_t v342 = STACK[0x2A78];
    uint64_t v341 = STACK[0x2A70];
    uint64_t v340 = STACK[0x2A68];
    uint64_t v339 = STACK[0x2A60];
    uint64_t v338 = STACK[0x2A58];
    uint64_t v337 = STACK[0x2A50];
    uint64_t v336 = STACK[0x2A48];
    uint64_t v335 = STACK[0x2A40];
    uint64_t v392 = STACK[0x2A38];
    uint64_t v391 = STACK[0x2A30];
    uint64_t v390 = STACK[0x2A28];
    uint64_t v334 = STACK[0x2A20];
    uint64_t v333 = STACK[0x2A18];
    uint64_t v332 = STACK[0x2A10];
    uint64_t v331 = STACK[0x2A08];
    uint64_t v330 = STACK[0x2A00];
    uint64_t v203 = STACK[0x2218];
    uint64_t v202 = STACK[0x2210];
    uint64_t v201 = STACK[0x2208];
    uint64_t v200 = STACK[0x2200];
    uint64_t v199 = STACK[0x21F8];
    uint64_t v196 = STACK[0x2230];
    uint64_t v197 = STACK[0x2228];
    uint64_t v198 = STACK[0x2220];
    uint64_t v291 = STACK[0x2398];
    uint64_t v287 = STACK[0x2390];
    uint64_t v282 = STACK[0x2388];
    uint64_t v279 = STACK[0x2380];
    uint64_t v276 = STACK[0x23C8];
    uint64_t v277 = STACK[0x23C0];
    uint64_t v290 = STACK[0x23B8];
    uint64_t v286 = STACK[0x23B0];
    uint64_t v281 = STACK[0x23A8];
    uint64_t v278 = STACK[0x23A0];
    uint64_t v264 = STACK[0x23F8];
    uint64_t v265 = STACK[0x23F0];
    uint64_t v266 = STACK[0x23E8];
    uint64_t v267 = STACK[0x23E0];
    uint64_t v268 = STACK[0x23D8];
    uint64_t v269 = STACK[0x23D0];
    uint64_t v252 = STACK[0x2428];
    uint64_t v253 = STACK[0x2420];
    uint64_t v254 = STACK[0x2418];
    uint64_t v255 = STACK[0x2410];
    uint64_t v256 = STACK[0x2408];
    uint64_t v257 = STACK[0x2400];
    uint64_t v239 = STACK[0x2458];
    uint64_t v240 = STACK[0x2450];
    uint64_t v242 = STACK[0x2448];
    uint64_t v243 = STACK[0x2440];
    uint64_t v244 = STACK[0x2438];
    uint64_t v245 = STACK[0x2430];
    uint64_t v233 = STACK[0x2488];
    uint64_t v234 = STACK[0x2480];
    uint64_t v235 = STACK[0x2478];
    uint64_t v236 = STACK[0x2470];
    uint64_t v237 = STACK[0x2468];
    uint64_t v238 = STACK[0x2460];
    uint64_t v227 = STACK[0x24B8];
    uint64_t v228 = STACK[0x24B0];
    uint64_t v229 = STACK[0x24A8];
    uint64_t v230 = STACK[0x24A0];
    uint64_t v231 = STACK[0x2498];
    uint64_t v232 = STACK[0x2490];
    uint64_t v221 = STACK[0x24E8];
    uint64_t v222 = STACK[0x24E0];
    uint64_t v223 = STACK[0x24D8];
    uint64_t v224 = STACK[0x24D0];
    uint64_t v225 = STACK[0x24C8];
    uint64_t v226 = STACK[0x24C0];
    uint64_t v215 = STACK[0x2518];
    uint64_t v216 = STACK[0x2510];
    uint64_t v217 = STACK[0x2508];
    uint64_t v218 = STACK[0x2500];
    uint64_t v219 = STACK[0x24F8];
    uint64_t v220 = STACK[0x24F0];
    uint64_t v209 = STACK[0x2548];
    uint64_t v210 = STACK[0x2540];
    uint64_t v211 = STACK[0x2538];
    uint64_t v212 = STACK[0x2530];
    uint64_t v213 = STACK[0x2528];
    uint64_t v214 = STACK[0x2520];
    uint64_t v204 = STACK[0x2570];
    uint64_t v205 = STACK[0x2568];
    uint64_t v206 = STACK[0x2560];
    uint64_t v207 = STACK[0x2558];
    uint64_t v208 = STACK[0x2550];
    uint64_t v327 = STACK[0x26C8];
    uint64_t v325 = STACK[0x26C0];
    uint64_t v329 = STACK[0x26F8];
    uint64_t v328 = STACK[0x26F0];
    uint64_t v326 = STACK[0x26E8];
    uint64_t v324 = STACK[0x26E0];
    uint64_t v323 = STACK[0x26D8];
    uint64_t v322 = STACK[0x26D0];
    uint64_t v316 = STACK[0x2728];
    uint64_t v317 = STACK[0x2720];
    uint64_t v318 = STACK[0x2718];
    uint64_t v319 = STACK[0x2710];
    uint64_t v320 = STACK[0x2708];
    uint64_t v321 = STACK[0x2700];
    uint64_t v310 = STACK[0x2758];
    uint64_t v311 = STACK[0x2750];
    uint64_t v312 = STACK[0x2748];
    uint64_t v313 = STACK[0x2740];
    uint64_t v314 = STACK[0x2738];
    uint64_t v315 = STACK[0x2730];
    uint64_t v304 = STACK[0x2788];
    uint64_t v305 = STACK[0x2780];
    uint64_t v306 = STACK[0x2778];
    uint64_t v307 = STACK[0x2770];
    uint64_t v308 = STACK[0x2768];
    uint64_t v309 = STACK[0x2760];
    uint64_t v298 = STACK[0x27B8];
    uint64_t v299 = STACK[0x27B0];
    uint64_t v300 = STACK[0x27A8];
    uint64_t v301 = STACK[0x27A0];
    uint64_t v302 = STACK[0x2798];
    uint64_t v303 = STACK[0x2790];
    uint64_t v292 = STACK[0x27E8];
    uint64_t v293 = STACK[0x27E0];
    uint64_t v294 = STACK[0x27D8];
    uint64_t v295 = STACK[0x27D0];
    uint64_t v296 = STACK[0x27C8];
    uint64_t v297 = STACK[0x27C0];
    uint64_t v280 = STACK[0x2818];
    uint64_t v283 = STACK[0x2810];
    uint64_t v284 = STACK[0x2808];
    uint64_t v285 = STACK[0x2800];
    uint64_t v288 = STACK[0x27F8];
    uint64_t v289 = STACK[0x27F0];
    uint64_t v270 = STACK[0x2848];
    uint64_t v271 = STACK[0x2840];
    uint64_t v272 = STACK[0x2838];
    uint64_t v273 = STACK[0x2830];
    uint64_t v274 = STACK[0x2828];
    uint64_t v275 = STACK[0x2820];
    uint64_t v258 = STACK[0x2878];
    uint64_t v259 = STACK[0x2870];
    uint64_t v260 = STACK[0x2868];
    uint64_t v261 = STACK[0x2860];
    uint64_t v262 = STACK[0x2858];
    uint64_t v263 = STACK[0x2850];
    uint64_t v246 = STACK[0x28A8];
    uint64_t v247 = STACK[0x28A0];
    uint64_t v248 = STACK[0x2898];
    uint64_t v249 = STACK[0x2890];
    uint64_t v250 = STACK[0x2888];
    uint64_t v251 = STACK[0x2880];
    uint64_t v241 = STACK[0x28B0];
    uint64_t v141 = STACK[0x21F0];
    uint64_t v142 = STACK[0x21E8];
    uint64_t v143 = STACK[0x21E0];
    uint64_t v144 = STACK[0x21D8];
    uint64_t v145 = STACK[0x21D0];
    uint64_t v146 = STACK[0x21C8];
    uint64_t v147 = STACK[0x21C0];
    uint64_t v148 = STACK[0x21B8];
    uint64_t v149 = STACK[0x21B0];
    uint64_t v150 = STACK[0x21A8];
    uint64_t v151 = STACK[0x21A0];
    uint64_t v152 = STACK[0x2198];
    uint64_t v153 = STACK[0x2190];
    uint64_t v154 = STACK[0x2188];
    uint64_t v155 = STACK[0x2180];
    uint64_t v156 = STACK[0x2178];
    uint64_t v157 = STACK[0x2170];
    uint64_t v158 = STACK[0x2168];
    uint64_t v159 = STACK[0x2160];
    uint64_t v160 = STACK[0x2158];
    uint64_t v161 = STACK[0x2150];
    uint64_t v162 = STACK[0x2148];
    uint64_t v163 = STACK[0x2140];
    uint64_t v164 = STACK[0x2138];
    uint64_t v165 = STACK[0x2130];
    uint64_t v166 = STACK[0x2128];
    uint64_t v167 = STACK[0x2120];
    uint64_t v168 = STACK[0x2118];
    uint64_t v169 = STACK[0x2110];
    uint64_t v170 = STACK[0x2108];
    uint64_t v171 = STACK[0x2100];
    uint64_t v172 = STACK[0x20F8];
    uint64_t v173 = STACK[0x20F0];
    uint64_t v174 = STACK[0x20E8];
    uint64_t v176 = STACK[0x20E0];
    uint64_t v177 = STACK[0x20D8];
    uint64_t v178 = STACK[0x20D0];
    uint64_t v179 = STACK[0x20C8];
    uint64_t v181 = STACK[0x20C0];
    uint64_t v182 = STACK[0x20B8];
    uint64_t v183 = STACK[0x20B0];
    uint64_t v184 = STACK[0x20A8];
    uint64_t v186 = STACK[0x20A0];
    uint64_t v187 = STACK[0x2098];
    uint64_t v188 = STACK[0x2090];
    uint64_t v189 = STACK[0x2088];
    uint64_t v191 = STACK[0x2080];
    uint64_t v195 = STACK[0x2078];
    uint64_t v194 = STACK[0x2070];
    uint64_t v193 = STACK[0x2068];
    uint64_t v192 = STACK[0x2060];
    uint64_t v190 = STACK[0x2058];
    uint64_t v185 = STACK[0x2050];
    uint64_t v180 = STACK[0x2048];
    uint64_t v175 = STACK[0x2040];
    uint64_t v78 = STACK[0x1EF0];
    uint64_t v79 = STACK[0x1EE8];
    uint64_t v80 = STACK[0x1EE0];
    uint64_t v81 = STACK[0x1ED8];
    uint64_t v82 = STACK[0x1ED0];
    uint64_t v83 = STACK[0x1EC8];
    uint64_t v84 = STACK[0x1EC0];
    uint64_t v85 = STACK[0x1EB8];
    uint64_t v86 = STACK[0x1EB0];
    uint64_t v87 = STACK[0x1EA8];
    uint64_t v88 = STACK[0x1EA0];
    uint64_t v89 = STACK[0x1E98];
    uint64_t v90 = STACK[0x1E90];
    uint64_t v91 = STACK[0x1E88];
    uint64_t v92 = STACK[0x1E80];
    uint64_t v93 = STACK[0x1E78];
    uint64_t v94 = STACK[0x1E70];
    uint64_t v95 = STACK[0x1E68];
    uint64_t v96 = STACK[0x1E60];
    uint64_t v97 = STACK[0x1E58];
    uint64_t v98 = STACK[0x1E50];
    uint64_t v99 = STACK[0x1E48];
    uint64_t v100 = STACK[0x1E40];
    uint64_t v101 = STACK[0x1E38];
    uint64_t v102 = STACK[0x1E30];
    uint64_t v103 = STACK[0x1E28];
    uint64_t v104 = STACK[0x1E20];
    uint64_t v105 = STACK[0x1E18];
    uint64_t v106 = STACK[0x1E10];
    uint64_t v107 = STACK[0x1E08];
    uint64_t v108 = STACK[0x1E00];
    uint64_t v109 = STACK[0x1DF8];
    uint64_t v110 = STACK[0x1DF0];
    uint64_t v111 = STACK[0x1DE8];
    uint64_t v112 = STACK[0x1DE0];
    uint64_t v113 = STACK[0x1DD8];
    uint64_t v114 = STACK[0x1DD0];
    uint64_t v115 = STACK[0x1DC8];
    uint64_t v116 = STACK[0x1DC0];
    uint64_t v117 = STACK[0x1DB8];
    uint64_t v118 = STACK[0x1DB0];
    uint64_t v119 = STACK[0x1DA8];
    uint64_t v121 = STACK[0x1DA0];
    uint64_t v122 = STACK[0x1D98];
    uint64_t v123 = STACK[0x1D90];
    uint64_t v124 = STACK[0x1D88];
    uint64_t v126 = STACK[0x1D80];
    uint64_t v127 = STACK[0x1D78];
    uint64_t v128 = STACK[0x1D70];
    uint64_t v129 = STACK[0x1D68];
    uint64_t v131 = STACK[0x1D60];
    uint64_t v132 = STACK[0x1D58];
    uint64_t v133 = STACK[0x1D50];
    uint64_t v134 = STACK[0x1D48];
    uint64_t v136 = STACK[0x1D40];
    uint64_t v140 = STACK[0x1D38];
    uint64_t v139 = STACK[0x1D30];
    uint64_t v138 = STACK[0x1D28];
    uint64_t v137 = STACK[0x1D20];
    uint64_t v135 = STACK[0x1D18];
    uint64_t v130 = STACK[0x1D10];
    uint64_t v125 = STACK[0x1D08];
    uint64_t v120 = STACK[0x1D00];
    uint64_t v77 = v66;
    uint64_t v76 = v67;
    uint64_t v75 = v68;
    uint64_t v74 = v69;
    uint64_t v73 = v70;
    uint64_t v72 = v71;
    swift_bridgeObjectRetain();
    sub_1000B4EA4(v72, v73, v74, v75, v76, v77, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56,
      a57,
      a58,
      a59,
      a60,
      a61,
      a62,
      a63,
      a64,
      a65);
    sub_1000B4EA4(v120, v125, v130, v135, v137, v138, v139, v140, v136, v134, v133, v132, v131, v129, v128, v127, v126, v124, v123,
      v122,
      v121,
      v119,
      v118,
      v117,
      v116,
      v115,
      v114,
      v113,
      v112,
      v111,
      v110,
      v109,
      v108,
      v107,
      v106,
      v105,
      v104,
      v103,
      v102,
      v101,
      v100,
      v99,
      v98,
      v97,
      v96,
      v95,
      v94,
      v93,
      v92,
      v91,
      v90,
      v89,
      v88,
      v87,
      v86,
      v85,
      v84,
      v83,
      v82,
      v81,
      v80,
      v79,
      v78);
    sub_1000B4EA4(v175, v180, v185, v190, v192, v193, v194, v195, v191, v189, v188, v187, v186, v184, v183, v182, v181, v179, v178,
      v177,
      v176,
      v174,
      v173,
      v172,
      v171,
      v170,
      v169,
      v168,
      v167,
      v166,
      v165,
      v164,
      v163,
      v162,
      v161,
      v160,
      v159,
      v158,
      v157,
      v156,
      v155,
      v154,
      v153,
      v152,
      v151,
      v150,
      v149,
      v148,
      v147,
      v146,
      v145,
      v144,
      v143,
      v142,
      v141,
      v199,
      v200,
      v201,
      v202,
      v203,
      v198,
      v197,
      v196);
    sub_1000B4EA4(v279, v282, v287, v291, v278, v281, v286, v290, v277, v276, v269, v268, v267, v266, v265, v264, v257, v256, v255,
      v254,
      v253,
      v252,
      v245,
      v244,
      v243,
      v242,
      v240,
      v239,
      v238,
      v237,
      v236,
      v235,
      v234,
      v233,
      v232,
      v231,
      v230,
      v229,
      v228,
      v227,
      v226,
      v225,
      v224,
      v223,
      v222,
      v221,
      v220,
      v219,
      v218,
      v217,
      v216,
      v215,
      v214,
      v213,
      v212,
      v211,
      v210,
      v209,
      v208,
      v207,
      v206,
      v205,
      v204);
    sub_1000B4EA4(v325, v327, v322, v323, v324, v326, v328, v329, v321, v320, v319, v318, v317, v316, v315, v314, v313, v312, v311,
      v310,
      v309,
      v308,
      v307,
      v306,
      v305,
      v304,
      v303,
      v302,
      v301,
      v300,
      v299,
      v298,
      v297,
      v296,
      v295,
      v294,
      v293,
      v292,
      v289,
      v288,
      v285,
      v284,
      v283,
      v280,
      v275,
      v274,
      v273,
      v272,
      v271,
      v270,
      v263,
      v262,
      v261,
      v260,
      v259,
      v258,
      v251,
      v250,
      v249,
      v248,
      v247,
      v246,
      v241);
    sub_1000B4EA4(v330, v331, v332, v333, v334, v390, v391, v392, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345,
      v346,
      v347,
      v348,
      v349,
      v350,
      v351,
      v352,
      v353,
      v354,
      v355,
      v356,
      v357,
      v358,
      v359,
      v360,
      v361,
      v362,
      v363,
      v364,
      v365,
      v366,
      v367,
      v368,
      v369,
      v370,
      v371,
      v372,
      v373,
      v374,
      v375,
      v376,
      v377,
      v378,
      v379,
      v380,
      v381,
      v382,
      v383,
      v384,
      v385,
      v386,
      v387,
      v388,
      v389);
    sub_1000B4EA4(v393, v394, v395, v396, v397, v453, v454, v455, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408,
      v409,
      v410,
      v411,
      v412,
      v413,
      v414,
      v415,
      v416,
      v417,
      v418,
      v419,
      v420,
      v421,
      v422,
      v423,
      v424,
      v425,
      v426,
      v427,
      v428,
      v429,
      v430,
      v431,
      v432,
      v433,
      v434,
      v435,
      v436,
      v437,
      v438,
      v439,
      v440,
      v441,
      v442,
      v443,
      v444,
      v445,
      v446,
      v447,
      v448,
      v449,
      v450,
      v451,
      v452);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000B4EA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x600] != 1)
  {
    uint64_t v75 = STACK[0x5B0];
    uint64_t v74 = STACK[0x590];
    uint64_t v73 = STACK[0x570];
    uint64_t v72 = STACK[0x550];
    uint64_t v71 = STACK[0x530];
    uint64_t v70 = STACK[0x510];
    sub_1000AB250(result);
    sub_1000AB250(a5);
    sub_1000AB250(a9);
    sub_1000AB250(a13);
    sub_1000AB250(a17);
    sub_1000AB250(a21);
    sub_1000AB250(a25);
    sub_1000AB250(a29);
    sub_1000AB250(a33);
    sub_1000AB250(a37);
    sub_1000AB250(a41);
    sub_1000AB250(a45);
    sub_1000AB250(a49);
    sub_1000AB250(a53);
    sub_1000AB250(a57);
    sub_1000AB250(a61);
    sub_1000AB250(a65);
    sub_1000AB250(a69);
    sub_1000AB250(v70);
    sub_1000AB250(v71);
    sub_1000AB250(v72);
    sub_1000AB250(v73);
    sub_1000AB250(v74);
    sub_1000AB250(v75);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000B52EC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B5324()
{
  return sub_10006D7C4();
}

uint64_t sub_1000B5340(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B5350()
{
  return swift_release();
}

unint64_t sub_1000B5358()
{
  unint64_t result = qword_100722390;
  if (!qword_100722390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722390);
  }
  return result;
}

uint64_t sub_1000B53AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B5454(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000B54FC()
{
  unint64_t result = qword_1007223D0;
  if (!qword_1007223D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007223D0);
  }
  return result;
}

unint64_t sub_1000B5550()
{
  unint64_t result = qword_1007223E8;
  if (!qword_1007223E8)
  {
    sub_100019364(&qword_1007223E0);
    sub_1000AF434(&qword_1007223F0, 255, (void (*)(uint64_t))type metadata accessor for UserInputValidationURL);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007223E8);
  }
  return result;
}

unint64_t sub_1000B55F8()
{
  unint64_t result = qword_100722408;
  if (!qword_100722408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722408);
  }
  return result;
}

unint64_t sub_1000B564C()
{
  unint64_t result = qword_100722420;
  if (!qword_100722420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722420);
  }
  return result;
}

unint64_t sub_1000B56A0()
{
  unint64_t result = qword_100722438;
  if (!qword_100722438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722438);
  }
  return result;
}

unint64_t sub_1000B56F4()
{
  unint64_t result = qword_100722450;
  if (!qword_100722450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722450);
  }
  return result;
}

unint64_t sub_1000B5748()
{
  unint64_t result = qword_100722460;
  if (!qword_100722460)
  {
    sub_100019364(&qword_100722458);
    sub_1000AF434(&qword_100722468, 255, (void (*)(uint64_t))type metadata accessor for EncryptionCertificateInStringFormat);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722460);
  }
  return result;
}

uint64_t type metadata accessor for EncryptionCertificateInStringFormat(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100722700);
}

unint64_t sub_1000B5818()
{
  unint64_t result = qword_100722470;
  if (!qword_100722470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722470);
  }
  return result;
}

unint64_t sub_1000B586C()
{
  unint64_t result = qword_100722478;
  if (!qword_100722478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722478);
  }
  return result;
}

uint64_t sub_1000B58C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EncryptionCertificateInStringFormat(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B5924(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EncryptionCertificateInStringFormat(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000B5980()
{
  unint64_t result = qword_1007224A8;
  if (!qword_1007224A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007224A8);
  }
  return result;
}

unint64_t sub_1000B59D4()
{
  unint64_t result = qword_1007224B0;
  if (!qword_1007224B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007224B0);
  }
  return result;
}

unint64_t sub_1000B5A28()
{
  unint64_t result = qword_1007224B8;
  if (!qword_1007224B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007224B8);
  }
  return result;
}

unint64_t sub_1000B5A7C()
{
  unint64_t result = qword_1007224D0;
  if (!qword_1007224D0)
  {
    sub_100019364(&qword_1007224C8);
    sub_1000AF434(&qword_1007224C0, 255, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007224D0);
  }
  return result;
}

unint64_t sub_1000B5B24()
{
  unint64_t result = qword_1007224E8;
  if (!qword_1007224E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007224E8);
  }
  return result;
}

unint64_t sub_1000B5B78()
{
  unint64_t result = qword_1007224F8;
  if (!qword_1007224F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007224F8);
  }
  return result;
}

unint64_t sub_1000B5BCC()
{
  unint64_t result = qword_100722508;
  if (!qword_100722508)
  {
    sub_100019364(&qword_100722500);
    sub_1000AF434(&qword_100722510, v1, (void (*)(uint64_t))type metadata accessor for VerifiedClaimField);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722508);
  }
  return result;
}

unint64_t sub_1000B5C70()
{
  unint64_t result = qword_100722520;
  if (!qword_100722520)
  {
    sub_100019364(&qword_100722518);
    sub_1000AF434(&qword_100722528, 255, (void (*)(uint64_t))&type metadata accessor for IdentityProofingUnorderedUIElement);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722520);
  }
  return result;
}

unint64_t sub_1000B5D20()
{
  unint64_t result = qword_100722538;
  if (!qword_100722538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722538);
  }
  return result;
}

unint64_t sub_1000B5D74()
{
  unint64_t result = qword_100722540;
  if (!qword_100722540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722540);
  }
  return result;
}

unint64_t sub_1000B5DC8()
{
  unint64_t result = qword_100722550;
  if (!qword_100722550)
  {
    sub_100019364(&qword_1007224C8);
    sub_1000AF434(&qword_100722548, 255, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722550);
  }
  return result;
}

unint64_t sub_1000B5E70()
{
  unint64_t result = qword_100722560;
  if (!qword_100722560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722560);
  }
  return result;
}

uint64_t sub_1000B5EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = v2[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_10000C494;
  return sub_10007DA54(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1000B5FB4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B6040(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000B60CC()
{
  unint64_t result = qword_100722610;
  if (!qword_100722610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722610);
  }
  return result;
}

uint64_t sub_1000B6120(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019364(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B6164()
{
  unint64_t result = qword_100722620;
  if (!qword_100722620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722620);
  }
  return result;
}

unint64_t sub_1000B61B8()
{
  unint64_t result = qword_100722660;
  if (!qword_100722660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722660);
  }
  return result;
}

unint64_t sub_1000B620C()
{
  unint64_t result = qword_100722678;
  if (!qword_100722678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722678);
  }
  return result;
}

unint64_t sub_1000B6260()
{
  unint64_t result = qword_100722688;
  if (!qword_100722688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722688);
  }
  return result;
}

unint64_t sub_1000B62B4()
{
  unint64_t result = qword_100722690;
  if (!qword_100722690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722690);
  }
  return result;
}

unint64_t sub_1000B6308()
{
  unint64_t result = qword_1007226A0;
  if (!qword_1007226A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007226A0);
  }
  return result;
}

#error "1000B6504: call analysis failed (funcsize=116)"

void *sub_1000B652C(uint64_t a1)
{
  uint64_t v1 = (void *)__chkstk_darwin(a1);
  uint64_t v443 = v1[475];
  uint64_t v425 = v1[3];
  uint64_t v426 = v1[2];
  uint64_t v423 = v1[5];
  uint64_t v424 = v1[4];
  uint64_t v422 = v1[6];
  uint64_t v421 = v1[7];
  uint64_t v420 = v1[8];
  uint64_t v419 = v1[9];
  uint64_t v404 = v1[10];
  uint64_t v401 = v1[11];
  uint64_t v398 = v1[12];
  uint64_t v393 = v1[13];
  uint64_t v389 = v1[14];
  uint64_t v385 = v1[15];
  uint64_t v380 = v1[16];
  uint64_t v376 = v1[17];
  uint64_t v372 = v1[18];
  uint64_t v367 = v1[19];
  uint64_t v363 = v1[20];
  uint64_t v359 = v1[21];
  uint64_t v354 = v1[22];
  uint64_t v350 = v1[23];
  uint64_t v346 = v1[24];
  uint64_t v341 = v1[25];
  uint64_t v337 = v1[26];
  uint64_t v333 = v1[27];
  uint64_t v328 = v1[28];
  uint64_t v324 = v1[29];
  uint64_t v320 = v1[30];
  uint64_t v315 = v1[31];
  uint64_t v311 = v1[32];
  uint64_t v307 = v1[33];
  uint64_t v298 = v1[34];
  uint64_t v293 = v1[35];
  uint64_t v286 = v1[36];
  uint64_t v275 = v1[37];
  uint64_t v262 = v1[38];
  uint64_t v253 = v1[39];
  uint64_t v246 = v1[40];
  uint64_t v237 = v1[41];
  uint64_t v227 = v1[42];
  uint64_t v219 = v1[43];
  uint64_t v211 = v1[44];
  uint64_t v201 = v1[45];
  uint64_t v193 = v1[46];
  uint64_t v185 = v1[47];
  uint64_t v178 = v1[48];
  uint64_t v172 = v1[49];
  uint64_t v166 = v1[50];
  uint64_t v162 = v1[51];
  uint64_t v157 = v1[52];
  uint64_t v152 = v1[53];
  uint64_t v149 = v1[54];
  uint64_t v146 = v1[55];
  uint64_t v142 = v1[56];
  uint64_t v139 = v1[57];
  uint64_t v136 = v1[58];
  uint64_t v132 = v1[59];
  uint64_t v129 = v1[60];
  uint64_t v126 = v1[61];
  uint64_t v122 = v1[62];
  uint64_t v119 = v1[63];
  uint64_t v117 = v1[64];
  uint64_t v433 = v1[107];
  uint64_t v434 = v1[106];
  uint64_t v431 = v1[109];
  uint64_t v432 = v1[108];
  uint64_t v429 = v1[111];
  uint64_t v430 = v1[110];
  uint64_t v427 = v1[113];
  uint64_t v428 = v1[112];
  uint64_t v415 = v1[114];
  uint64_t v409 = v1[115];
  uint64_t v403 = v1[116];
  uint64_t v400 = v1[117];
  uint64_t v397 = v1[118];
  uint64_t v392 = v1[119];
  uint64_t v388 = v1[120];
  uint64_t v384 = v1[121];
  uint64_t v379 = v1[122];
  uint64_t v375 = v1[123];
  uint64_t v371 = v1[124];
  uint64_t v366 = v1[125];
  uint64_t v362 = v1[126];
  uint64_t v358 = v1[127];
  uint64_t v353 = v1[128];
  uint64_t v349 = v1[129];
  uint64_t v345 = v1[130];
  uint64_t v340 = v1[131];
  uint64_t v336 = v1[132];
  uint64_t v332 = v1[133];
  uint64_t v327 = v1[134];
  uint64_t v323 = v1[135];
  uint64_t v319 = v1[136];
  uint64_t v314 = v1[137];
  uint64_t v310 = v1[138];
  uint64_t v306 = v1[139];
  uint64_t v297 = v1[140];
  uint64_t v292 = v1[141];
  uint64_t v285 = v1[142];
  uint64_t v274 = v1[143];
  uint64_t v261 = v1[144];
  uint64_t v252 = v1[145];
  uint64_t v245 = v1[146];
  uint64_t v236 = v1[147];
  uint64_t v226 = v1[148];
  uint64_t v218 = v1[149];
  uint64_t v210 = v1[150];
  uint64_t v200 = v1[151];
  uint64_t v192 = v1[152];
  uint64_t v184 = v1[153];
  uint64_t v177 = v1[154];
  uint64_t v171 = v1[155];
  uint64_t v165 = v1[156];
  uint64_t v161 = v1[157];
  uint64_t v156 = v1[158];
  uint64_t v151 = v1[159];
  uint64_t v148 = v1[160];
  uint64_t v145 = v1[161];
  uint64_t v141 = v1[162];
  uint64_t v138 = v1[163];
  uint64_t v135 = v1[164];
  uint64_t v131 = v1[165];
  uint64_t v128 = v1[166];
  uint64_t v125 = v1[167];
  uint64_t v121 = v1[168];
  uint64_t v441 = v1[211];
  uint64_t v442 = v1[210];
  uint64_t v439 = v1[213];
  uint64_t v440 = v1[212];
  uint64_t v437 = v1[215];
  uint64_t v438 = v1[214];
  uint64_t v435 = v1[217];
  uint64_t v436 = v1[216];
  uint64_t v418 = v1[218];
  uint64_t v417 = v1[219];
  uint64_t v414 = v1[220];
  uint64_t v408 = v1[221];
  uint64_t v402 = v1[222];
  uint64_t v399 = v1[223];
  uint64_t v396 = v1[224];
  uint64_t v391 = v1[225];
  uint64_t v387 = v1[226];
  uint64_t v383 = v1[227];
  uint64_t v378 = v1[228];
  uint64_t v374 = v1[229];
  uint64_t v370 = v1[230];
  uint64_t v365 = v1[231];
  uint64_t v361 = v1[232];
  uint64_t v357 = v1[233];
  uint64_t v352 = v1[234];
  uint64_t v348 = v1[235];
  uint64_t v344 = v1[236];
  uint64_t v339 = v1[237];
  uint64_t v335 = v1[238];
  uint64_t v331 = v1[239];
  uint64_t v326 = v1[240];
  uint64_t v322 = v1[241];
  uint64_t v318 = v1[242];
  uint64_t v313 = v1[243];
  uint64_t v309 = v1[244];
  uint64_t v305 = v1[245];
  uint64_t v296 = v1[246];
  uint64_t v291 = v1[247];
  uint64_t v284 = v1[248];
  uint64_t v273 = v1[249];
  uint64_t v244 = v1[252];
  uint64_t v199 = v1[469];
  uint64_t v191 = v1[470];
  uint64_t v182 = v1[471];
  uint64_t v176 = v1[472];
  uint64_t v170 = v1[473];
  uint64_t v207 = v1[463];
  uint64_t v202 = v1[464];
  uint64_t v195 = v1[465];
  uint64_t v188 = v1[466];
  uint64_t v183 = v1[467];
  uint64_t v179 = v1[468];
  uint64_t v221 = v1[457];
  uint64_t v214 = v1[458];
  uint64_t v208 = v1[459];
  uint64_t v203 = v1[460];
  uint64_t v196 = v1[461];
  uint64_t v189 = v1[462];
  uint64_t v233 = v1[451];
  uint64_t v228 = v1[452];
  uint64_t v222 = v1[453];
  uint64_t v215 = v1[454];
  uint64_t v209 = v1[455];
  uint64_t v204 = v1[456];
  uint64_t v248 = v1[445];
  uint64_t v240 = v1[446];
  uint64_t v234 = v1[447];
  uint64_t v229 = v1[448];
  uint64_t v223 = v1[449];
  uint64_t v216 = v1[450];
  uint64_t v258 = v1[439];
  uint64_t v254 = v1[440];
  uint64_t v249 = v1[441];
  uint64_t v241 = v1[442];
  uint64_t v235 = v1[443];
  uint64_t v230 = v1[444];
  uint64_t v279 = v1[433];
  uint64_t v268 = v1[434];
  uint64_t v259 = v1[435];
  uint64_t v255 = v1[436];
  uint64_t v250 = v1[437];
  uint64_t v242 = v1[438];
  uint64_t v290 = v1[427];
  uint64_t v288 = v1[428];
  uint64_t v280 = v1[429];
  uint64_t v269 = v1[430];
  uint64_t v260 = v1[431];
  uint64_t v256 = v1[432];
  uint64_t v295 = v1[421];
  uint64_t v300 = v1[422];
  uint64_t v301 = v1[423];
  uint64_t v302 = v1[424];
  uint64_t v304 = v1[425];
  uint64_t v270 = v1[426];
  uint64_t v263 = v1[418];
  uint64_t v266 = v1[419];
  uint64_t v271 = v1[420];
  uint64_t v32 = v1[373];
  uint64_t v29 = v1[374];
  uint64_t v27 = v1[375];
  uint64_t v25 = v1[376];
  uint64_t v38 = v1[367];
  uint64_t v35 = v1[368];
  uint64_t v33 = v1[369];
  uint64_t v30 = v1[370];
  uint64_t v28 = v1[371];
  uint64_t v26 = v1[372];
  uint64_t v44 = v1[361];
  uint64_t v41 = v1[362];
  uint64_t v39 = v1[363];
  uint64_t v36 = v1[364];
  uint64_t v34 = v1[365];
  uint64_t v31 = v1[366];
  uint64_t v50 = v1[355];
  uint64_t v47 = v1[356];
  uint64_t v45 = v1[357];
  uint64_t v42 = v1[358];
  uint64_t v40 = v1[359];
  uint64_t v37 = v1[360];
  uint64_t v56 = v1[349];
  uint64_t v53 = v1[350];
  uint64_t v51 = v1[351];
  uint64_t v48 = v1[352];
  uint64_t v46 = v1[353];
  uint64_t v43 = v1[354];
  uint64_t v62 = v1[343];
  uint64_t v59 = v1[344];
  uint64_t v57 = v1[345];
  uint64_t v54 = v1[346];
  uint64_t v52 = v1[347];
  uint64_t v49 = v1[348];
  uint64_t v68 = v1[337];
  uint64_t v65 = v1[338];
  uint64_t v63 = v1[339];
  uint64_t v60 = v1[340];
  uint64_t v58 = v1[341];
  uint64_t v55 = v1[342];
  uint64_t v74 = v1[331];
  uint64_t v71 = v1[332];
  uint64_t v69 = v1[333];
  uint64_t v66 = v1[334];
  uint64_t v64 = v1[335];
  uint64_t v61 = v1[336];
  uint64_t v84 = v1[325];
  uint64_t v79 = v1[326];
  uint64_t v75 = v1[327];
  uint64_t v72 = v1[328];
  uint64_t v70 = v1[329];
  uint64_t v67 = v1[330];
  uint64_t v85 = v1[319];
  uint64_t v86 = v1[320];
  uint64_t v87 = v1[321];
  uint64_t v80 = v1[322];
  uint64_t v76 = v1[323];
  uint64_t v73 = v1[324];
  uint64_t v77 = v1[314];
  uint64_t v78 = v1[315];
  uint64_t v81 = v1[316];
  uint64_t v82 = v1[317];
  uint64_t v83 = v1[318];
  uint64_t v8 = v1[271];
  uint64_t v5 = v1[272];
  uint64_t v14 = v1[265];
  uint64_t v11 = v1[266];
  uint64_t v9 = v1[267];
  uint64_t v6 = v1[268];
  uint64_t v4 = v1[269];
  uint64_t v3 = v1[270];
  uint64_t v19 = v1[259];
  uint64_t v17 = v1[260];
  uint64_t v15 = v1[261];
  uint64_t v12 = v1[262];
  uint64_t v10 = v1[263];
  uint64_t v7 = v1[264];
  uint64_t v23 = v1[253];
  uint64_t v21 = v1[254];
  uint64_t v20 = v1[255];
  uint64_t v18 = v1[256];
  uint64_t v16 = v1[257];
  uint64_t v13 = v1[258];
  uint64_t v24 = v1[250];
  uint64_t v22 = v1[251];
  uint64_t v93 = v1[474];
  uint64_t v92 = v1[476];
  uint64_t v91 = v1[477];
  uint64_t v90 = v1[478];
  uint64_t v89 = v1[479];
  uint64_t v88 = v1[480];
  uint64_t v265 = v1[522];
  uint64_t v267 = v1[523];
  uint64_t v272 = v1[524];
  uint64_t v277 = v1[525];
  uint64_t v278 = v1[526];
  uint64_t v281 = v1[527];
  uint64_t v283 = v1[528];
  uint64_t v287 = v1[529];
  uint64_t v243 = v1[530];
  uint64_t v238 = v1[531];
  uint64_t v231 = v1[532];
  uint64_t v224 = v1[533];
  uint64_t v217 = v1[534];
  uint64_t v212 = v1[535];
  uint64_t v205 = v1[536];
  uint64_t v197 = v1[537];
  uint64_t v190 = v1[538];
  uint64_t v186 = v1[539];
  uint64_t v180 = v1[540];
  uint64_t v174 = v1[541];
  uint64_t v169 = v1[542];
  uint64_t v167 = v1[543];
  uint64_t v163 = v1[544];
  uint64_t v159 = v1[545];
  uint64_t v155 = v1[546];
  uint64_t v153 = v1[547];
  uint64_t v150 = v1[548];
  uint64_t v147 = v1[549];
  uint64_t v144 = v1[550];
  uint64_t v143 = v1[551];
  uint64_t v140 = v1[552];
  uint64_t v137 = v1[553];
  uint64_t v134 = v1[554];
  uint64_t v133 = v1[555];
  uint64_t v130 = v1[556];
  uint64_t v127 = v1[557];
  uint64_t v124 = v1[558];
  uint64_t v123 = v1[559];
  uint64_t v120 = v1[560];
  uint64_t v118 = v1[561];
  uint64_t v116 = v1[562];
  uint64_t v115 = v1[563];
  uint64_t v114 = v1[564];
  uint64_t v113 = v1[565];
  uint64_t v112 = v1[566];
  uint64_t v111 = v1[567];
  uint64_t v110 = v1[568];
  uint64_t v109 = v1[569];
  uint64_t v108 = v1[570];
  uint64_t v107 = v1[571];
  uint64_t v106 = v1[572];
  uint64_t v105 = v1[573];
  uint64_t v104 = v1[574];
  uint64_t v103 = v1[575];
  uint64_t v102 = v1[576];
  uint64_t v101 = v1[577];
  uint64_t v100 = v1[578];
  uint64_t v99 = v1[579];
  uint64_t v98 = v1[580];
  uint64_t v97 = v1[581];
  uint64_t v96 = v1[582];
  uint64_t v95 = v1[583];
  uint64_t v94 = v1[584];
  uint64_t v405 = v1[626];
  uint64_t v406 = v1[627];
  uint64_t v407 = v1[628];
  uint64_t v410 = v1[629];
  uint64_t v411 = v1[630];
  uint64_t v412 = v1[631];
  uint64_t v413 = v1[632];
  uint64_t v416 = v1[633];
  uint64_t v395 = v1[634];
  uint64_t v394 = v1[635];
  uint64_t v390 = v1[636];
  uint64_t v386 = v1[637];
  uint64_t v382 = v1[638];
  uint64_t v381 = v1[639];
  uint64_t v377 = v1[640];
  uint64_t v373 = v1[641];
  uint64_t v369 = v1[642];
  uint64_t v368 = v1[643];
  uint64_t v364 = v1[644];
  uint64_t v360 = v1[645];
  uint64_t v356 = v1[646];
  uint64_t v355 = v1[647];
  uint64_t v351 = v1[648];
  uint64_t v347 = v1[649];
  uint64_t v343 = v1[650];
  uint64_t v342 = v1[651];
  uint64_t v338 = v1[652];
  uint64_t v334 = v1[653];
  uint64_t v330 = v1[654];
  uint64_t v329 = v1[655];
  uint64_t v325 = v1[656];
  uint64_t v321 = v1[657];
  uint64_t v317 = v1[658];
  uint64_t v316 = v1[659];
  uint64_t v312 = v1[660];
  uint64_t v308 = v1[661];
  uint64_t v303 = v1[662];
  uint64_t v299 = v1[663];
  uint64_t v294 = v1[664];
  uint64_t v289 = v1[665];
  uint64_t v282 = v1[666];
  uint64_t v276 = v1[667];
  uint64_t v264 = v1[668];
  uint64_t v257 = v1[669];
  uint64_t v251 = v1[670];
  uint64_t v247 = v1[671];
  uint64_t v239 = v1[672];
  uint64_t v232 = v1[673];
  uint64_t v225 = v1[674];
  uint64_t v220 = v1[675];
  uint64_t v213 = v1[676];
  uint64_t v206 = v1[677];
  uint64_t v198 = v1[678];
  uint64_t v194 = v1[679];
  uint64_t v187 = v1[680];
  uint64_t v181 = v1[681];
  uint64_t v175 = v1[682];
  uint64_t v173 = v1[683];
  uint64_t v168 = v1[684];
  uint64_t v164 = v1[685];
  uint64_t v160 = v1[686];
  uint64_t v158 = v1[687];
  uint64_t v154 = v1[688];
  swift_bridgeObjectRetain();
  sub_1000B4EA4(v426, v425, v424, v423, v422, v421, v420, v419, v404, v401, v398, v393, v389, v385, v380, v376, v372, v367, v363,
    v359,
    v354,
    v350,
    v346,
    v341,
    v337,
    v333,
    v328,
    v324,
    v320,
    v315,
    v311,
    v307,
    v298,
    v293,
    v286,
    v275,
    v262,
    v253,
    v246,
    v237,
    v227,
    v219,
    v211,
    v201,
    v193,
    v185,
    v178,
    v172,
    v166,
    v162,
    v157,
    v152,
    v149,
    v146,
    v142,
    v139,
    v136,
    v132,
    v129,
    v126,
    v122,
    v119,
    v117);
  sub_1000B4EA4(v434, v433, v432, v431, v430, v429, v428, v427, v415, v409, v403, v400, v397, v392, v388, v384, v379, v375, v371,
    v366,
    v362,
    v358,
    v353,
    v349,
    v345,
    v340,
    v336,
    v332,
    v327,
    v323,
    v319,
    v314,
    v310,
    v306,
    v297,
    v292,
    v285,
    v274,
    v261,
    v252,
    v245,
    v236,
    v226,
    v218,
    v210,
    v200,
    v192,
    v184,
    v177,
    v171,
    v165,
    v161,
    v156,
    v151,
    v148,
    v145,
    v141,
    v138,
    v135,
    v131,
    v128,
    v125,
    v121);
  sub_1000B4EA4(v442, v441, v440, v439, v438, v437, v436, v435, v418, v417, v414, v408, v402, v399, v396, v391, v387, v383, v378,
    v374,
    v370,
    v365,
    v361,
    v357,
    v352,
    v348,
    v344,
    v339,
    v335,
    v331,
    v326,
    v322,
    v318,
    v313,
    v309,
    v305,
    v296,
    v291,
    v284,
    v273,
    v24,
    v22,
    v244,
    v23,
    v21,
    v20,
    v18,
    v16,
    v13,
    v19,
    v17,
    v15,
    v12,
    v10,
    v7,
    v14,
    v11,
    v9,
    v6,
    v4,
    v3,
    v8,
    v5);
  sub_1000B4EA4(v77, v78, v81, v82, v83, v85, v86, v87, v80, v76, v73, v84, v79, v75, v72, v70, v67, v74, v71,
    v69,
    v66,
    v64,
    v61,
    v68,
    v65,
    v63,
    v60,
    v58,
    v55,
    v62,
    v59,
    v57,
    v54,
    v52,
    v49,
    v56,
    v53,
    v51,
    v48,
    v46,
    v43,
    v50,
    v47,
    v45,
    v42,
    v40,
    v37,
    v44,
    v41,
    v39,
    v36,
    v34,
    v31,
    v38,
    v35,
    v33,
    v30,
    v28,
    v26,
    v32,
    v29,
    v27,
    v25);
  sub_1000B4EA4(v263, v266, v271, v295, v300, v301, v302, v304, v270, v290, v288, v280, v269, v260, v256, v279, v268, v259, v255,
    v250,
    v242,
    v258,
    v254,
    v249,
    v241,
    v235,
    v230,
    v248,
    v240,
    v234,
    v229,
    v223,
    v216,
    v233,
    v228,
    v222,
    v215,
    v209,
    v204,
    v221,
    v214,
    v208,
    v203,
    v196,
    v189,
    v207,
    v202,
    v195,
    v188,
    v183,
    v179,
    v199,
    v191,
    v182,
    v176,
    v170,
    v93,
    v443,
    v92,
    v91,
    v90,
    v89,
    v88);
  sub_1000B4EA4(v265, v267, v272, v277, v278, v281, v283, v287, v243, v238, v231, v224, v217, v212, v205, v197, v190, v186, v180,
    v174,
    v169,
    v167,
    v163,
    v159,
    v155,
    v153,
    v150,
    v147,
    v144,
    v143,
    v140,
    v137,
    v134,
    v133,
    v130,
    v127,
    v124,
    v123,
    v120,
    v118,
    v116,
    v115,
    v114,
    v113,
    v112,
    v111,
    v110,
    v109,
    v108,
    v107,
    v106,
    v105,
    v104,
    v103,
    v102,
    v101,
    v100,
    v99,
    v98,
    v97,
    v96,
    v95,
    v94);
  sub_1000B4EA4(v405, v406, v407, v410, v411, v412, v413, v416, v395, v394, v390, v386, v382, v381, v377, v373, v369, v368, v364,
    v360,
    v356,
    v355,
    v351,
    v347,
    v343,
    v342,
    v338,
    v334,
    v330,
    v329,
    v325,
    v321,
    v317,
    v316,
    v312,
    v308,
    v303,
    v299,
    v294,
    v289,
    v282,
    v276,
    v264,
    v257,
    v251,
    v247,
    v239,
    v232,
    v225,
    v220,
    v213,
    v206,
    v198,
    v194,
    v187,
    v181,
    v175,
    v173,
    v168,
    v164,
    v160,
    v158,
    v154);
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_1000B8E50(uint64_t a1)
{
  uint64_t v1 = (void *)__chkstk_darwin(a1);
  uint64_t v443 = v1[475];
  uint64_t v425 = v1[3];
  uint64_t v426 = v1[2];
  uint64_t v423 = v1[5];
  uint64_t v424 = v1[4];
  uint64_t v422 = v1[6];
  uint64_t v421 = v1[7];
  uint64_t v420 = v1[8];
  uint64_t v419 = v1[9];
  uint64_t v404 = v1[10];
  uint64_t v401 = v1[11];
  uint64_t v398 = v1[12];
  uint64_t v393 = v1[13];
  uint64_t v389 = v1[14];
  uint64_t v385 = v1[15];
  uint64_t v380 = v1[16];
  uint64_t v376 = v1[17];
  uint64_t v372 = v1[18];
  uint64_t v367 = v1[19];
  uint64_t v363 = v1[20];
  uint64_t v359 = v1[21];
  uint64_t v354 = v1[22];
  uint64_t v350 = v1[23];
  uint64_t v346 = v1[24];
  uint64_t v341 = v1[25];
  uint64_t v337 = v1[26];
  uint64_t v333 = v1[27];
  uint64_t v328 = v1[28];
  uint64_t v324 = v1[29];
  uint64_t v320 = v1[30];
  uint64_t v315 = v1[31];
  uint64_t v311 = v1[32];
  uint64_t v307 = v1[33];
  uint64_t v298 = v1[34];
  uint64_t v293 = v1[35];
  uint64_t v286 = v1[36];
  uint64_t v275 = v1[37];
  uint64_t v262 = v1[38];
  uint64_t v253 = v1[39];
  uint64_t v246 = v1[40];
  uint64_t v237 = v1[41];
  uint64_t v227 = v1[42];
  uint64_t v219 = v1[43];
  uint64_t v211 = v1[44];
  uint64_t v201 = v1[45];
  uint64_t v193 = v1[46];
  uint64_t v185 = v1[47];
  uint64_t v178 = v1[48];
  uint64_t v172 = v1[49];
  uint64_t v166 = v1[50];
  uint64_t v162 = v1[51];
  uint64_t v157 = v1[52];
  uint64_t v152 = v1[53];
  uint64_t v149 = v1[54];
  uint64_t v146 = v1[55];
  uint64_t v142 = v1[56];
  uint64_t v139 = v1[57];
  uint64_t v136 = v1[58];
  uint64_t v132 = v1[59];
  uint64_t v129 = v1[60];
  uint64_t v126 = v1[61];
  uint64_t v122 = v1[62];
  uint64_t v119 = v1[63];
  uint64_t v117 = v1[64];
  uint64_t v433 = v1[107];
  uint64_t v434 = v1[106];
  uint64_t v431 = v1[109];
  uint64_t v432 = v1[108];
  uint64_t v429 = v1[111];
  uint64_t v430 = v1[110];
  uint64_t v427 = v1[113];
  uint64_t v428 = v1[112];
  uint64_t v415 = v1[114];
  uint64_t v409 = v1[115];
  uint64_t v403 = v1[116];
  uint64_t v400 = v1[117];
  uint64_t v397 = v1[118];
  uint64_t v392 = v1[119];
  uint64_t v388 = v1[120];
  uint64_t v384 = v1[121];
  uint64_t v379 = v1[122];
  uint64_t v375 = v1[123];
  uint64_t v371 = v1[124];
  uint64_t v366 = v1[125];
  uint64_t v362 = v1[126];
  uint64_t v358 = v1[127];
  uint64_t v353 = v1[128];
  uint64_t v349 = v1[129];
  uint64_t v345 = v1[130];
  uint64_t v340 = v1[131];
  uint64_t v336 = v1[132];
  uint64_t v332 = v1[133];
  uint64_t v327 = v1[134];
  uint64_t v323 = v1[135];
  uint64_t v319 = v1[136];
  uint64_t v314 = v1[137];
  uint64_t v310 = v1[138];
  uint64_t v306 = v1[139];
  uint64_t v297 = v1[140];
  uint64_t v292 = v1[141];
  uint64_t v285 = v1[142];
  uint64_t v274 = v1[143];
  uint64_t v261 = v1[144];
  uint64_t v252 = v1[145];
  uint64_t v245 = v1[146];
  uint64_t v236 = v1[147];
  uint64_t v226 = v1[148];
  uint64_t v218 = v1[149];
  uint64_t v210 = v1[150];
  uint64_t v200 = v1[151];
  uint64_t v192 = v1[152];
  uint64_t v184 = v1[153];
  uint64_t v177 = v1[154];
  uint64_t v171 = v1[155];
  uint64_t v165 = v1[156];
  uint64_t v161 = v1[157];
  uint64_t v156 = v1[158];
  uint64_t v151 = v1[159];
  uint64_t v148 = v1[160];
  uint64_t v145 = v1[161];
  uint64_t v141 = v1[162];
  uint64_t v138 = v1[163];
  uint64_t v135 = v1[164];
  uint64_t v131 = v1[165];
  uint64_t v128 = v1[166];
  uint64_t v125 = v1[167];
  uint64_t v121 = v1[168];
  uint64_t v441 = v1[211];
  uint64_t v442 = v1[210];
  uint64_t v439 = v1[213];
  uint64_t v440 = v1[212];
  uint64_t v437 = v1[215];
  uint64_t v438 = v1[214];
  uint64_t v435 = v1[217];
  uint64_t v436 = v1[216];
  uint64_t v418 = v1[218];
  uint64_t v417 = v1[219];
  uint64_t v414 = v1[220];
  uint64_t v408 = v1[221];
  uint64_t v402 = v1[222];
  uint64_t v399 = v1[223];
  uint64_t v396 = v1[224];
  uint64_t v391 = v1[225];
  uint64_t v387 = v1[226];
  uint64_t v383 = v1[227];
  uint64_t v378 = v1[228];
  uint64_t v374 = v1[229];
  uint64_t v370 = v1[230];
  uint64_t v365 = v1[231];
  uint64_t v361 = v1[232];
  uint64_t v357 = v1[233];
  uint64_t v352 = v1[234];
  uint64_t v348 = v1[235];
  uint64_t v344 = v1[236];
  uint64_t v339 = v1[237];
  uint64_t v335 = v1[238];
  uint64_t v331 = v1[239];
  uint64_t v326 = v1[240];
  uint64_t v322 = v1[241];
  uint64_t v318 = v1[242];
  uint64_t v313 = v1[243];
  uint64_t v309 = v1[244];
  uint64_t v305 = v1[245];
  uint64_t v296 = v1[246];
  uint64_t v291 = v1[247];
  uint64_t v284 = v1[248];
  uint64_t v273 = v1[249];
  uint64_t v244 = v1[252];
  uint64_t v199 = v1[469];
  uint64_t v191 = v1[470];
  uint64_t v182 = v1[471];
  uint64_t v176 = v1[472];
  uint64_t v170 = v1[473];
  uint64_t v207 = v1[463];
  uint64_t v202 = v1[464];
  uint64_t v195 = v1[465];
  uint64_t v188 = v1[466];
  uint64_t v183 = v1[467];
  uint64_t v179 = v1[468];
  uint64_t v221 = v1[457];
  uint64_t v214 = v1[458];
  uint64_t v208 = v1[459];
  uint64_t v203 = v1[460];
  uint64_t v196 = v1[461];
  uint64_t v189 = v1[462];
  uint64_t v233 = v1[451];
  uint64_t v228 = v1[452];
  uint64_t v222 = v1[453];
  uint64_t v215 = v1[454];
  uint64_t v209 = v1[455];
  uint64_t v204 = v1[456];
  uint64_t v248 = v1[445];
  uint64_t v240 = v1[446];
  uint64_t v234 = v1[447];
  uint64_t v229 = v1[448];
  uint64_t v223 = v1[449];
  uint64_t v216 = v1[450];
  uint64_t v258 = v1[439];
  uint64_t v254 = v1[440];
  uint64_t v249 = v1[441];
  uint64_t v241 = v1[442];
  uint64_t v235 = v1[443];
  uint64_t v230 = v1[444];
  uint64_t v279 = v1[433];
  uint64_t v268 = v1[434];
  uint64_t v259 = v1[435];
  uint64_t v255 = v1[436];
  uint64_t v250 = v1[437];
  uint64_t v242 = v1[438];
  uint64_t v290 = v1[427];
  uint64_t v288 = v1[428];
  uint64_t v280 = v1[429];
  uint64_t v269 = v1[430];
  uint64_t v260 = v1[431];
  uint64_t v256 = v1[432];
  uint64_t v295 = v1[421];
  uint64_t v300 = v1[422];
  uint64_t v301 = v1[423];
  uint64_t v302 = v1[424];
  uint64_t v304 = v1[425];
  uint64_t v270 = v1[426];
  uint64_t v263 = v1[418];
  uint64_t v266 = v1[419];
  uint64_t v271 = v1[420];
  uint64_t v32 = v1[373];
  uint64_t v29 = v1[374];
  uint64_t v27 = v1[375];
  uint64_t v25 = v1[376];
  uint64_t v38 = v1[367];
  uint64_t v35 = v1[368];
  uint64_t v33 = v1[369];
  uint64_t v30 = v1[370];
  uint64_t v28 = v1[371];
  uint64_t v26 = v1[372];
  uint64_t v44 = v1[361];
  uint64_t v41 = v1[362];
  uint64_t v39 = v1[363];
  uint64_t v36 = v1[364];
  uint64_t v34 = v1[365];
  uint64_t v31 = v1[366];
  uint64_t v50 = v1[355];
  uint64_t v47 = v1[356];
  uint64_t v45 = v1[357];
  uint64_t v42 = v1[358];
  uint64_t v40 = v1[359];
  uint64_t v37 = v1[360];
  uint64_t v56 = v1[349];
  uint64_t v53 = v1[350];
  uint64_t v51 = v1[351];
  uint64_t v48 = v1[352];
  uint64_t v46 = v1[353];
  uint64_t v43 = v1[354];
  uint64_t v62 = v1[343];
  uint64_t v59 = v1[344];
  uint64_t v57 = v1[345];
  uint64_t v54 = v1[346];
  uint64_t v52 = v1[347];
  uint64_t v49 = v1[348];
  uint64_t v68 = v1[337];
  uint64_t v65 = v1[338];
  uint64_t v63 = v1[339];
  uint64_t v60 = v1[340];
  uint64_t v58 = v1[341];
  uint64_t v55 = v1[342];
  uint64_t v74 = v1[331];
  uint64_t v71 = v1[332];
  uint64_t v69 = v1[333];
  uint64_t v66 = v1[334];
  uint64_t v64 = v1[335];
  uint64_t v61 = v1[336];
  uint64_t v84 = v1[325];
  uint64_t v79 = v1[326];
  uint64_t v75 = v1[327];
  uint64_t v72 = v1[328];
  uint64_t v70 = v1[329];
  uint64_t v67 = v1[330];
  uint64_t v85 = v1[319];
  uint64_t v86 = v1[320];
  uint64_t v87 = v1[321];
  uint64_t v80 = v1[322];
  uint64_t v76 = v1[323];
  uint64_t v73 = v1[324];
  uint64_t v77 = v1[314];
  uint64_t v78 = v1[315];
  uint64_t v81 = v1[316];
  uint64_t v82 = v1[317];
  uint64_t v83 = v1[318];
  uint64_t v8 = v1[271];
  uint64_t v5 = v1[272];
  uint64_t v14 = v1[265];
  uint64_t v11 = v1[266];
  uint64_t v9 = v1[267];
  uint64_t v6 = v1[268];
  uint64_t v4 = v1[269];
  uint64_t v3 = v1[270];
  uint64_t v19 = v1[259];
  uint64_t v17 = v1[260];
  uint64_t v15 = v1[261];
  uint64_t v12 = v1[262];
  uint64_t v10 = v1[263];
  uint64_t v7 = v1[264];
  uint64_t v23 = v1[253];
  uint64_t v21 = v1[254];
  uint64_t v20 = v1[255];
  uint64_t v18 = v1[256];
  uint64_t v16 = v1[257];
  uint64_t v13 = v1[258];
  uint64_t v24 = v1[250];
  uint64_t v22 = v1[251];
  uint64_t v93 = v1[474];
  uint64_t v92 = v1[476];
  uint64_t v91 = v1[477];
  uint64_t v90 = v1[478];
  uint64_t v89 = v1[479];
  uint64_t v88 = v1[480];
  uint64_t v265 = v1[522];
  uint64_t v267 = v1[523];
  uint64_t v272 = v1[524];
  uint64_t v277 = v1[525];
  uint64_t v278 = v1[526];
  uint64_t v281 = v1[527];
  uint64_t v283 = v1[528];
  uint64_t v287 = v1[529];
  uint64_t v243 = v1[530];
  uint64_t v238 = v1[531];
  uint64_t v231 = v1[532];
  uint64_t v224 = v1[533];
  uint64_t v217 = v1[534];
  uint64_t v212 = v1[535];
  uint64_t v205 = v1[536];
  uint64_t v197 = v1[537];
  uint64_t v190 = v1[538];
  uint64_t v186 = v1[539];
  uint64_t v180 = v1[540];
  uint64_t v174 = v1[541];
  uint64_t v169 = v1[542];
  uint64_t v167 = v1[543];
  uint64_t v163 = v1[544];
  uint64_t v159 = v1[545];
  uint64_t v155 = v1[546];
  uint64_t v153 = v1[547];
  uint64_t v150 = v1[548];
  uint64_t v147 = v1[549];
  uint64_t v144 = v1[550];
  uint64_t v143 = v1[551];
  uint64_t v140 = v1[552];
  uint64_t v137 = v1[553];
  uint64_t v134 = v1[554];
  uint64_t v133 = v1[555];
  uint64_t v130 = v1[556];
  uint64_t v127 = v1[557];
  uint64_t v124 = v1[558];
  uint64_t v123 = v1[559];
  uint64_t v120 = v1[560];
  uint64_t v118 = v1[561];
  uint64_t v116 = v1[562];
  uint64_t v115 = v1[563];
  uint64_t v114 = v1[564];
  uint64_t v113 = v1[565];
  uint64_t v112 = v1[566];
  uint64_t v111 = v1[567];
  uint64_t v110 = v1[568];
  uint64_t v109 = v1[569];
  uint64_t v108 = v1[570];
  uint64_t v107 = v1[571];
  uint64_t v106 = v1[572];
  uint64_t v105 = v1[573];
  uint64_t v104 = v1[574];
  uint64_t v103 = v1[575];
  uint64_t v102 = v1[576];
  uint64_t v101 = v1[577];
  uint64_t v100 = v1[578];
  uint64_t v99 = v1[579];
  uint64_t v98 = v1[580];
  uint64_t v97 = v1[581];
  uint64_t v96 = v1[582];
  uint64_t v95 = v1[583];
  uint64_t v94 = v1[584];
  uint64_t v405 = v1[626];
  uint64_t v406 = v1[627];
  uint64_t v407 = v1[628];
  uint64_t v410 = v1[629];
  uint64_t v411 = v1[630];
  uint64_t v412 = v1[631];
  uint64_t v413 = v1[632];
  uint64_t v416 = v1[633];
  uint64_t v395 = v1[634];
  uint64_t v394 = v1[635];
  uint64_t v390 = v1[636];
  uint64_t v386 = v1[637];
  uint64_t v382 = v1[638];
  uint64_t v381 = v1[639];
  uint64_t v377 = v1[640];
  uint64_t v373 = v1[641];
  uint64_t v369 = v1[642];
  uint64_t v368 = v1[643];
  uint64_t v364 = v1[644];
  uint64_t v360 = v1[645];
  uint64_t v356 = v1[646];
  uint64_t v355 = v1[647];
  uint64_t v351 = v1[648];
  uint64_t v347 = v1[649];
  uint64_t v343 = v1[650];
  uint64_t v342 = v1[651];
  uint64_t v338 = v1[652];
  uint64_t v334 = v1[653];
  uint64_t v330 = v1[654];
  uint64_t v329 = v1[655];
  uint64_t v325 = v1[656];
  uint64_t v321 = v1[657];
  uint64_t v317 = v1[658];
  uint64_t v316 = v1[659];
  uint64_t v312 = v1[660];
  uint64_t v308 = v1[661];
  uint64_t v303 = v1[662];
  uint64_t v299 = v1[663];
  uint64_t v294 = v1[664];
  uint64_t v289 = v1[665];
  uint64_t v282 = v1[666];
  uint64_t v276 = v1[667];
  uint64_t v264 = v1[668];
  uint64_t v257 = v1[669];
  uint64_t v251 = v1[670];
  uint64_t v247 = v1[671];
  uint64_t v239 = v1[672];
  uint64_t v232 = v1[673];
  uint64_t v225 = v1[674];
  uint64_t v220 = v1[675];
  uint64_t v213 = v1[676];
  uint64_t v206 = v1[677];
  uint64_t v198 = v1[678];
  uint64_t v194 = v1[679];
  uint64_t v187 = v1[680];
  uint64_t v181 = v1[681];
  uint64_t v175 = v1[682];
  uint64_t v173 = v1[683];
  uint64_t v168 = v1[684];
  uint64_t v164 = v1[685];
  uint64_t v160 = v1[686];
  uint64_t v158 = v1[687];
  uint64_t v154 = v1[688];
  swift_bridgeObjectRelease();
  sub_1000AE894(v426, v425, v424, v423, v422, v421, v420, v419, v404, v401, v398, v393, v389, v385, v380, v376, v372, v367, v363,
    v359,
    v354,
    v350,
    v346,
    v341,
    v337,
    v333,
    v328,
    v324,
    v320,
    v315,
    v311,
    v307,
    v298,
    v293,
    v286,
    v275,
    v262,
    v253,
    v246,
    v237,
    v227,
    v219,
    v211,
    v201,
    v193,
    v185,
    v178,
    v172,
    v166,
    v162,
    v157,
    v152,
    v149,
    v146,
    v142,
    v139,
    v136,
    v132,
    v129,
    v126,
    v122,
    v119,
    v117);
  sub_1000AE894(v434, v433, v432, v431, v430, v429, v428, v427, v415, v409, v403, v400, v397, v392, v388, v384, v379, v375, v371,
    v366,
    v362,
    v358,
    v353,
    v349,
    v345,
    v340,
    v336,
    v332,
    v327,
    v323,
    v319,
    v314,
    v310,
    v306,
    v297,
    v292,
    v285,
    v274,
    v261,
    v252,
    v245,
    v236,
    v226,
    v218,
    v210,
    v200,
    v192,
    v184,
    v177,
    v171,
    v165,
    v161,
    v156,
    v151,
    v148,
    v145,
    v141,
    v138,
    v135,
    v131,
    v128,
    v125,
    v121);
  sub_1000AE894(v442, v441, v440, v439, v438, v437, v436, v435, v418, v417, v414, v408, v402, v399, v396, v391, v387, v383, v378,
    v374,
    v370,
    v365,
    v361,
    v357,
    v352,
    v348,
    v344,
    v339,
    v335,
    v331,
    v326,
    v322,
    v318,
    v313,
    v309,
    v305,
    v296,
    v291,
    v284,
    v273,
    v24,
    v22,
    v244,
    v23,
    v21,
    v20,
    v18,
    v16,
    v13,
    v19,
    v17,
    v15,
    v12,
    v10,
    v7,
    v14,
    v11,
    v9,
    v6,
    v4,
    v3,
    v8,
    v5);
  sub_1000AE894(v77, v78, v81, v82, v83, v85, v86, v87, v80, v76, v73, v84, v79, v75, v72, v70, v67, v74, v71,
    v69,
    v66,
    v64,
    v61,
    v68,
    v65,
    v63,
    v60,
    v58,
    v55,
    v62,
    v59,
    v57,
    v54,
    v52,
    v49,
    v56,
    v53,
    v51,
    v48,
    v46,
    v43,
    v50,
    v47,
    v45,
    v42,
    v40,
    v37,
    v44,
    v41,
    v39,
    v36,
    v34,
    v31,
    v38,
    v35,
    v33,
    v30,
    v28,
    v26,
    v32,
    v29,
    v27,
    v25);
  sub_1000AE894(v263, v266, v271, v295, v300, v301, v302, v304, v270, v290, v288, v280, v269, v260, v256, v279, v268, v259, v255,
    v250,
    v242,
    v258,
    v254,
    v249,
    v241,
    v235,
    v230,
    v248,
    v240,
    v234,
    v229,
    v223,
    v216,
    v233,
    v228,
    v222,
    v215,
    v209,
    v204,
    v221,
    v214,
    v208,
    v203,
    v196,
    v189,
    v207,
    v202,
    v195,
    v188,
    v183,
    v179,
    v199,
    v191,
    v182,
    v176,
    v170,
    v93,
    v443,
    v92,
    v91,
    v90,
    v89,
    v88);
  sub_1000AE894(v265, v267, v272, v277, v278, v281, v283, v287, v243, v238, v231, v224, v217, v212, v205, v197, v190, v186, v180,
    v174,
    v169,
    v167,
    v163,
    v159,
    v155,
    v153,
    v150,
    v147,
    v144,
    v143,
    v140,
    v137,
    v134,
    v133,
    v130,
    v127,
    v124,
    v123,
    v120,
    v118,
    v116,
    v115,
    v114,
    v113,
    v112,
    v111,
    v110,
    v109,
    v108,
    v107,
    v106,
    v105,
    v104,
    v103,
    v102,
    v101,
    v100,
    v99,
    v98,
    v97,
    v96,
    v95,
    v94);
  sub_1000AE894(v405, v406, v407, v410, v411, v412, v413, v416, v395, v394, v390, v386, v382, v381, v377, v373, v369, v368, v364,
    v360,
    v356,
    v355,
    v351,
    v347,
    v343,
    v342,
    v338,
    v334,
    v330,
    v329,
    v325,
    v321,
    v317,
    v316,
    v312,
    v308,
    v303,
    v299,
    v294,
    v289,
    v282,
    v276,
    v264,
    v257,
    v251,
    v247,
    v239,
    v232,
    v225,
    v220,
    v213,
    v206,
    v198,
    v194,
    v187,
    v181,
    v175,
    v173,
    v168,
    v164,
    v160,
    v158,
    v154);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t getEnumTagSinglePayload for LegacyINOWorkflow.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LegacyINOWorkflow.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *unint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BB8D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyINOWorkflow.CodingKeys()
{
  return &type metadata for LegacyINOWorkflow.CodingKeys;
}

uint64_t getEnumTagSinglePayload for LegacyWorkflow.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LegacyWorkflow.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *unint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BBA64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyWorkflow.CodingKeys()
{
  return &type metadata for LegacyWorkflow.CodingKeys;
}

uint64_t getEnumTagSinglePayload for LegacySPWorkflow.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE7) {
    goto LABEL_17;
  }
  if (a2 + 25 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 25) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 25;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  int v8 = v6 - 26;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LegacySPWorkflow.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE6)
  {
    unsigned int v6 = ((a2 - 231) >> 8) + 1;
    *unint64_t result = a2 + 25;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BBBF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 25;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacySPWorkflow.CodingKeys()
{
  return &type metadata for LegacySPWorkflow.CodingKeys;
}

ValueMetadata *type metadata accessor for LabelDetail.CodingKeys()
{
  return &type metadata for LabelDetail.CodingKeys;
}

ValueMetadata *type metadata accessor for BusinessChatDetail.CodingKeys()
{
  return &type metadata for BusinessChatDetail.CodingKeys;
}

ValueMetadata *type metadata accessor for IQRangeProperties.CodingKeys()
{
  return &type metadata for IQRangeProperties.CodingKeys;
}

ValueMetadata *type metadata accessor for AcceptedVerifiedClaim.CodingKeys()
{
  return &type metadata for AcceptedVerifiedClaim.CodingKeys;
}

ValueMetadata *type metadata accessor for ShareableAttribute.CodingKeys()
{
  return &type metadata for ShareableAttribute.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IdentityPassType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s8coreidvd15UserConsentTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BBDE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Connectivity.CodingKeys()
{
  return &type metadata for Connectivity.CodingKeys;
}

uint64_t *sub_1000BBE1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    int v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for EncryptedMessageEntity();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_100007764(&qword_100720278);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t sub_1000BBFA8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void *sub_1000BC080(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100007764(&qword_100720278);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

void *sub_1000BC1BC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100007764(&qword_100720278);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_OWORD *sub_1000BC374(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = sub_100007764(&qword_100720278);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

void *sub_1000BC488(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_100007764(&qword_100720278);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_1000BC620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BC634);
}

uint64_t sub_1000BC634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100007764(&qword_100720278);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000BC6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BC6FC);
}

uint64_t sub_1000BC6FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_100720278);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1000BC7A8()
{
  sub_1000BC864(319, (unint64_t *)&unk_100722710, (void (*)(uint64_t))&type metadata accessor for EncryptedMessageEntity);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000BC864(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for VerifiedClaimField.CodingKeys()
{
  return &type metadata for VerifiedClaimField.CodingKeys;
}

uint64_t getEnumTagSinglePayload for UploadAsset.AssetType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for UserInputValidationURL.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BCA24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserInputValidationURL.CodingKeys()
{
  return &type metadata for UserInputValidationURL.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerEndPoint.CodingKeys()
{
  return &type metadata for ServerEndPoint.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Label.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Label.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BCBC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Label.CodingKeys()
{
  return &type metadata for Label.CodingKeys;
}

ValueMetadata *type metadata accessor for DataNodeProofInfo.CodingKeys()
{
  return &type metadata for DataNodeProofInfo.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CameraImage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CameraImage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BCD6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraImage.CodingKeys()
{
  return &type metadata for CameraImage.CodingKeys;
}

ValueMetadata *type metadata accessor for DocumentConfig.CodingKeys()
{
  return &type metadata for DocumentConfig.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IQCriteria.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDE) {
    goto LABEL_17;
  }
  if (a2 + 34 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 34) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 34;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x23;
  int v8 = v6 - 35;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IQCriteria.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 34 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 34) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDD)
  {
    unsigned int v6 = ((a2 - 222) >> 8) + 1;
    *uint64_t result = a2 + 34;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BCF10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 34;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQCriteria.CodingKeys()
{
  return &type metadata for IQCriteria.CodingKeys;
}

uint64_t destroy for AlternativeLabel()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for DataSharingArtifact(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DataSharingArtifact(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s8coreidvd17DataNodeProofInfoVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000BD020(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlternativeLabel()
{
  return &type metadata for AlternativeLabel;
}

ValueMetadata *type metadata accessor for LabelCondition()
{
  return &type metadata for LabelCondition;
}

ValueMetadata *type metadata accessor for ImageDimension()
{
  return &type metadata for ImageDimension;
}

uint64_t destroy for ImageFormat()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ImageFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ImageFormat(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

__n128 initializeWithTake for UploadedData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ImageFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageFormat(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageFormat(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageFormat()
{
  return &type metadata for ImageFormat;
}

void *initializeWithCopy for Claim(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Claim(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Claim(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Claim(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Claim(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQComplexProperties()
{
  return &type metadata for IQComplexProperties;
}

__n128 initializeBufferWithCopyOfBuffer for IQBoolProperties(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for IQBoolProperties(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IQBoolProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQBoolProperties()
{
  return &type metadata for IQBoolProperties;
}

unint64_t sub_1000BD598()
{
  unint64_t result = qword_100722748;
  if (!qword_100722748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722748);
  }
  return result;
}

unint64_t sub_1000BD5F0()
{
  unint64_t result = qword_100722750;
  if (!qword_100722750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722750);
  }
  return result;
}

unint64_t sub_1000BD648()
{
  unint64_t result = qword_100722758;
  if (!qword_100722758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722758);
  }
  return result;
}

unint64_t sub_1000BD6A0()
{
  unint64_t result = qword_100722760;
  if (!qword_100722760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722760);
  }
  return result;
}

unint64_t sub_1000BD6F8()
{
  unint64_t result = qword_100722768;
  if (!qword_100722768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722768);
  }
  return result;
}

unint64_t sub_1000BD750()
{
  unint64_t result = qword_100722770;
  if (!qword_100722770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722770);
  }
  return result;
}

unint64_t sub_1000BD7A8()
{
  unint64_t result = qword_100722778;
  if (!qword_100722778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722778);
  }
  return result;
}

unint64_t sub_1000BD800()
{
  unint64_t result = qword_100722780;
  if (!qword_100722780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722780);
  }
  return result;
}

unint64_t sub_1000BD858()
{
  unint64_t result = qword_100722788;
  if (!qword_100722788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722788);
  }
  return result;
}

unint64_t sub_1000BD8B0()
{
  unint64_t result = qword_100722790;
  if (!qword_100722790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722790);
  }
  return result;
}

unint64_t sub_1000BD908()
{
  unint64_t result = qword_100722798;
  if (!qword_100722798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722798);
  }
  return result;
}

unint64_t sub_1000BD960()
{
  unint64_t result = qword_1007227A0;
  if (!qword_1007227A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227A0);
  }
  return result;
}

unint64_t sub_1000BD9B8()
{
  unint64_t result = qword_1007227A8;
  if (!qword_1007227A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227A8);
  }
  return result;
}

unint64_t sub_1000BDA10()
{
  unint64_t result = qword_1007227B0;
  if (!qword_1007227B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227B0);
  }
  return result;
}

unint64_t sub_1000BDA68()
{
  unint64_t result = qword_1007227B8;
  if (!qword_1007227B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227B8);
  }
  return result;
}

unint64_t sub_1000BDAC0()
{
  unint64_t result = qword_1007227C0;
  if (!qword_1007227C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227C0);
  }
  return result;
}

unint64_t sub_1000BDB18()
{
  unint64_t result = qword_1007227C8;
  if (!qword_1007227C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227C8);
  }
  return result;
}

unint64_t sub_1000BDB70()
{
  unint64_t result = qword_1007227D0;
  if (!qword_1007227D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227D0);
  }
  return result;
}

unint64_t sub_1000BDBC8()
{
  unint64_t result = qword_1007227D8;
  if (!qword_1007227D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227D8);
  }
  return result;
}

unint64_t sub_1000BDC20()
{
  unint64_t result = qword_1007227E0;
  if (!qword_1007227E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227E0);
  }
  return result;
}

unint64_t sub_1000BDC78()
{
  unint64_t result = qword_1007227E8;
  if (!qword_1007227E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227E8);
  }
  return result;
}

unint64_t sub_1000BDCD0()
{
  unint64_t result = qword_1007227F0;
  if (!qword_1007227F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227F0);
  }
  return result;
}

unint64_t sub_1000BDD28()
{
  unint64_t result = qword_1007227F8;
  if (!qword_1007227F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007227F8);
  }
  return result;
}

unint64_t sub_1000BDD80()
{
  unint64_t result = qword_100722800;
  if (!qword_100722800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722800);
  }
  return result;
}

unint64_t sub_1000BDDD8()
{
  unint64_t result = qword_100722808;
  if (!qword_100722808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722808);
  }
  return result;
}

unint64_t sub_1000BDE30()
{
  unint64_t result = qword_100722810;
  if (!qword_100722810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722810);
  }
  return result;
}

unint64_t sub_1000BDE88()
{
  unint64_t result = qword_100722818;
  if (!qword_100722818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722818);
  }
  return result;
}

unint64_t sub_1000BDEE0()
{
  unint64_t result = qword_100722820;
  if (!qword_100722820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722820);
  }
  return result;
}

unint64_t sub_1000BDF38()
{
  unint64_t result = qword_100722828;
  if (!qword_100722828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722828);
  }
  return result;
}

unint64_t sub_1000BDF90()
{
  unint64_t result = qword_100722830;
  if (!qword_100722830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722830);
  }
  return result;
}

unint64_t sub_1000BDFE8()
{
  unint64_t result = qword_100722838;
  if (!qword_100722838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722838);
  }
  return result;
}

unint64_t sub_1000BE040()
{
  unint64_t result = qword_100722840;
  if (!qword_100722840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722840);
  }
  return result;
}

unint64_t sub_1000BE098()
{
  unint64_t result = qword_100722848;
  if (!qword_100722848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722848);
  }
  return result;
}

unint64_t sub_1000BE0F0()
{
  unint64_t result = qword_100722850;
  if (!qword_100722850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722850);
  }
  return result;
}

unint64_t sub_1000BE148()
{
  unint64_t result = qword_100722858;
  if (!qword_100722858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722858);
  }
  return result;
}

unint64_t sub_1000BE1A0()
{
  unint64_t result = qword_100722860;
  if (!qword_100722860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722860);
  }
  return result;
}

unint64_t sub_1000BE1F8()
{
  unint64_t result = qword_100722868;
  if (!qword_100722868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722868);
  }
  return result;
}

unint64_t sub_1000BE250()
{
  unint64_t result = qword_100722870;
  if (!qword_100722870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722870);
  }
  return result;
}

unint64_t sub_1000BE2A8()
{
  unint64_t result = qword_100722878;
  if (!qword_100722878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722878);
  }
  return result;
}

unint64_t sub_1000BE300()
{
  unint64_t result = qword_100722880;
  if (!qword_100722880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722880);
  }
  return result;
}

unint64_t sub_1000BE358()
{
  unint64_t result = qword_100722888;
  if (!qword_100722888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722888);
  }
  return result;
}

unint64_t sub_1000BE3B0()
{
  unint64_t result = qword_100722890;
  if (!qword_100722890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722890);
  }
  return result;
}

unint64_t sub_1000BE408()
{
  unint64_t result = qword_100722898;
  if (!qword_100722898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722898);
  }
  return result;
}

unint64_t sub_1000BE460()
{
  unint64_t result = qword_1007228A0;
  if (!qword_1007228A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007228A0);
  }
  return result;
}

unint64_t sub_1000BE4B8()
{
  unint64_t result = qword_1007228A8;
  if (!qword_1007228A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007228A8);
  }
  return result;
}

unint64_t sub_1000BE510()
{
  unint64_t result = qword_1007228B0;
  if (!qword_1007228B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007228B0);
  }
  return result;
}

unint64_t sub_1000BE568()
{
  unint64_t result = qword_1007228B8;
  if (!qword_1007228B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007228B8);
  }
  return result;
}

unint64_t sub_1000BE5C0()
{
  unint64_t result = qword_1007228C0;
  if (!qword_1007228C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007228C0);
  }
  return result;
}

unint64_t sub_1000BE618()
{
  unint64_t result = qword_1007228C8;
  if (!qword_1007228C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007228C8);
  }
  return result;
}

unint64_t sub_1000BE670()
{
  unint64_t result = qword_1007228D0;
  if (!qword_1007228D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007228D0);
  }
  return result;
}

unint64_t sub_1000BE6C8()
{
  unint64_t result = qword_1007228D8;
  if (!qword_1007228D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007228D8);
  }
  return result;
}

unint64_t sub_1000BE720()
{
  unint64_t result = qword_1007228E0;
  if (!qword_1007228E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007228E0);
  }
  return result;
}

unint64_t sub_1000BE774()
{
  unint64_t result = qword_1007228F0;
  if (!qword_1007228F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007228F0);
  }
  return result;
}

unint64_t sub_1000BE7C8()
{
  unint64_t result = qword_100722900;
  if (!qword_100722900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722900);
  }
  return result;
}

unint64_t sub_1000BE81C()
{
  unint64_t result = qword_100722918;
  if (!qword_100722918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722918);
  }
  return result;
}

unint64_t sub_1000BE870()
{
  unint64_t result = qword_100722928;
  if (!qword_100722928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722928);
  }
  return result;
}

unint64_t sub_1000BE8C4()
{
  unint64_t result = qword_100722938;
  if (!qword_100722938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722938);
  }
  return result;
}

unint64_t sub_1000BE918()
{
  unint64_t result = qword_100722940;
  if (!qword_100722940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722940);
  }
  return result;
}

unint64_t sub_1000BE96C()
{
  unint64_t result = qword_100722950;
  if (!qword_100722950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722950);
  }
  return result;
}

unint64_t sub_1000BE9C0()
{
  unint64_t result = qword_100722960;
  if (!qword_100722960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722960);
  }
  return result;
}

uint64_t sub_1000BEA14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007764(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000BEA78(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019364(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000BEAE4()
{
  unint64_t result = qword_1007229A0;
  if (!qword_1007229A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007229A0);
  }
  return result;
}

uint64_t sub_1000BEB38()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1A) {
    return 26;
  }
  else {
    return v0;
  }
}

ValueMetadata *type metadata accessor for EncryptionCertificateInStringFormat.CodingKeys()
{
  return &type metadata for EncryptionCertificateInStringFormat.CodingKeys;
}

ValueMetadata *type metadata accessor for AlternativeLabel.CodingKeys()
{
  return &type metadata for AlternativeLabel.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AssessDuringProofingODNator.ODNatorState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s8coreidvd12WorkflowTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BED08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageDimension.CodingKeys()
{
  return &type metadata for ImageDimension.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ImageFormat.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ImageFormat.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BEE9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageFormat.CodingKeys()
{
  return &type metadata for ImageFormat.CodingKeys;
}

ValueMetadata *type metadata accessor for IQComplexProperties.CodingKeys()
{
  return &type metadata for IQComplexProperties.CodingKeys;
}

ValueMetadata *type metadata accessor for IQBoolProperties.CodingKeys()
{
  return &type metadata for IQBoolProperties.CodingKeys;
}

uint64_t destroy for DigitalPresentmentSessionManager.RequestedElement()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IQSignalProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IQSignalProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for IQSignalProperties(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IQSignalProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for IQSignalProperties(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IQSignalProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQSignalProperties()
{
  return &type metadata for IQSignalProperties;
}

unint64_t sub_1000BF0F4()
{
  unint64_t result = qword_1007229B8;
  if (!qword_1007229B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007229B8);
  }
  return result;
}

unint64_t sub_1000BF14C()
{
  unint64_t result = qword_1007229C0;
  if (!qword_1007229C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007229C0);
  }
  return result;
}

unint64_t sub_1000BF1A4()
{
  unint64_t result = qword_1007229C8;
  if (!qword_1007229C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007229C8);
  }
  return result;
}

unint64_t sub_1000BF1FC()
{
  unint64_t result = qword_1007229D0;
  if (!qword_1007229D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007229D0);
  }
  return result;
}

unint64_t sub_1000BF254()
{
  unint64_t result = qword_1007229D8;
  if (!qword_1007229D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007229D8);
  }
  return result;
}

unint64_t sub_1000BF2AC()
{
  unint64_t result = qword_1007229E0;
  if (!qword_1007229E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007229E0);
  }
  return result;
}

unint64_t sub_1000BF304()
{
  unint64_t result = qword_1007229E8;
  if (!qword_1007229E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007229E8);
  }
  return result;
}

unint64_t sub_1000BF35C()
{
  unint64_t result = qword_1007229F0;
  if (!qword_1007229F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007229F0);
  }
  return result;
}

unint64_t sub_1000BF3B4()
{
  unint64_t result = qword_1007229F8;
  if (!qword_1007229F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007229F8);
  }
  return result;
}

unint64_t sub_1000BF40C()
{
  unint64_t result = qword_100722A00;
  if (!qword_100722A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A00);
  }
  return result;
}

unint64_t sub_1000BF464()
{
  unint64_t result = qword_100722A08;
  if (!qword_100722A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A08);
  }
  return result;
}

unint64_t sub_1000BF4BC()
{
  unint64_t result = qword_100722A10;
  if (!qword_100722A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A10);
  }
  return result;
}

unint64_t sub_1000BF514()
{
  unint64_t result = qword_100722A18;
  if (!qword_100722A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A18);
  }
  return result;
}

unint64_t sub_1000BF56C()
{
  unint64_t result = qword_100722A20;
  if (!qword_100722A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A20);
  }
  return result;
}

unint64_t sub_1000BF5C4()
{
  unint64_t result = qword_100722A28;
  if (!qword_100722A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A28);
  }
  return result;
}

unint64_t sub_1000BF61C()
{
  unint64_t result = qword_100722A30;
  if (!qword_100722A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A30);
  }
  return result;
}

unint64_t sub_1000BF674()
{
  unint64_t result = qword_100722A38;
  if (!qword_100722A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A38);
  }
  return result;
}

unint64_t sub_1000BF6CC()
{
  unint64_t result = qword_100722A40;
  if (!qword_100722A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A40);
  }
  return result;
}

unint64_t sub_1000BF720()
{
  unint64_t result = qword_100722A50;
  if (!qword_100722A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A50);
  }
  return result;
}

unsigned char *_s8coreidvd11LabelDetailV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BF840);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQSignalProperties.CodingKeys()
{
  return &type metadata for IQSignalProperties.CodingKeys;
}

unint64_t sub_1000BF87C()
{
  unint64_t result = qword_100722A60;
  if (!qword_100722A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A60);
  }
  return result;
}

unint64_t sub_1000BF8D4()
{
  unint64_t result = qword_100722A68;
  if (!qword_100722A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A68);
  }
  return result;
}

unint64_t sub_1000BF92C()
{
  unint64_t result = qword_100722A70;
  if (!qword_100722A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722A70);
  }
  return result;
}

ValueMetadata *_s43RandomizedBackgroundActivityDeletionUtilityOMa()
{
  return &_s43RandomizedBackgroundActivityDeletionUtilityON;
}

void sub_1000BF9C8(uint64_t a1)
{
  type metadata accessor for StoredRandomizedBackgroundActivity();
  int v3 = (void *)static StoredRandomizedBackgroundActivity.fetchRequest()();
  unsigned int v4 = *(void **)(a1 + 16);
  unint64_t v5 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v1)
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (v6) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_4:
        if (v6 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v6; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0) {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v8 = *(id *)(v5 + 8 * i + 32);
          }
          uint64_t v9 = v8;
          [v4 deleteObject:v8];
        }
      }
    }
    swift_bridgeObjectRelease_n();
    sub_1000FFAB4();
  }
}

uint64_t sub_1000BFB04()
{
  int v3 = (uint64_t (__cdecl *)())((char *)&dword_100722A88 + dword_100722A88);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000C494;
  return v3();
}

uint64_t sub_1000BFBA4()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  v0[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000BFC70, 0, 0);
}

uint64_t sub_1000BFC70()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "RandomizedBackgroundActivityDeletionUtility attempting to delete data", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v8 = v7;
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1000BFE28, v8);
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_1000BFE28()
{
  sub_1000BF9C8(v0);
}

uint64_t sub_1000BFE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[32] = a3;
  v4[33] = a4;
  v4[30] = a1;
  v4[31] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[34] = v5;
  v4[35] = *(void *)(v5 - 8);
  v4[36] = swift_task_alloc();
  return _swift_task_switch(sub_1000BFF08, 0, 0);
}

uint64_t sub_1000BFF08()
{
  uint64_t v1 = v0[32];
  id v2 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithPartitions:isa];
  v0[37] = v4;

  if (v1)
  {
    uint64_t v5 = v0 + 10;
    Class v6 = Array._bridgeToObjectiveC()().super.isa;
    v0[38] = v6;
    NSString v7 = String._bridgeToObjectiveC()();
    v0[39] = v7;
    v0[10] = v0;
    v0[15] = v0 + 29;
    v0[11] = sub_1000C0164;
    uint64_t v8 = swift_continuation_init();
    v0[23] = _NSConcreteStackBlock;
    v0[24] = 0x40000000;
    v0[25] = sub_1000C0744;
    v0[26] = &unk_1006F7D48;
    v0[27] = v8;
    [v4 credentialIdentifiersInPartitions:v6 docType:v7 completion:v0 + 23];
  }
  else
  {
    uint64_t v5 = v0 + 2;
    Class v9 = Array._bridgeToObjectiveC()().super.isa;
    v0[41] = v9;
    v0[2] = v0;
    v0[7] = v0 + 28;
    v0[3] = sub_1000C02FC;
    uint64_t v10 = swift_continuation_init();
    v0[18] = _NSConcreteStackBlock;
    v0[19] = 0x40000000;
    v0[20] = sub_1000C0744;
    v0[21] = &unk_1006F7D30;
    v0[22] = v10;
    [v4 credentialIdentifiersInPartitions:v9 completion:v0 + 18];
  }
  return _swift_continuation_await(v5);
}

uint64_t sub_1000C0164()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 320) = v1;
  if (v1) {
    id v2 = sub_1000C0488;
  }
  else {
    id v2 = sub_1000C0274;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C0274()
{
  id v2 = *(void **)(v0 + 304);
  uint64_t v1 = *(void **)(v0 + 312);

  uint64_t v3 = *(void *)(v0 + 232);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_1000C02FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 336) = v1;
  if (v1) {
    id v2 = sub_1000C05E8;
  }
  else {
    id v2 = sub_1000C040C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C040C()
{
  uint64_t v1 = *(void **)(v0 + 328);

  uint64_t v2 = *(void *)(v0 + 224);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000C0488()
{
  uint64_t v1 = (void *)v0[39];
  uint64_t v3 = (void *)v0[37];
  uint64_t v2 = (void *)v0[38];
  swift_willThrow();

  (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.internalError(_:), v0[34]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000C05E8()
{
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = (void *)v0[37];
  swift_willThrow();

  (*(void (**)(void, void, void))(v0[35] + 104))(v0[36], enum case for DIPError.Code.internalError(_:), v0[34]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000C0744(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_100007764(&qword_1007268F0);
    **(void **)(*(void *)(v3 + 64) + 40) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000C0824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[20] = a5;
  v6[21] = a6;
  v6[18] = a3;
  v6[19] = a4;
  v6[16] = a1;
  v6[17] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[22] = v7;
  v6[23] = *(void *)(v7 - 8);
  v6[24] = swift_task_alloc();
  return _swift_task_switch(sub_1000C08EC, 0, 0);
}

uint64_t sub_1000C08EC()
{
  Class isa = v0[20].super.isa;
  id v2 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain();
  Class v3 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v4 = (objc_class *)[v2 initWithPartitions:v3];
  v0[25].super.Class isa = v4;

  v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[26].super.Class isa = v5.super.isa;
  uint64_t v6 = (objc_class *)String._bridgeToObjectiveC()();
  v0[27].super.Class isa = v6;
  if (isa) {
    uint64_t v7 = (objc_class *)String._bridgeToObjectiveC()();
  }
  else {
    uint64_t v7 = 0;
  }
  v0[28].super.Class isa = v7;
  v0[2].super.Class isa = (Class)v0;
  v0[7].super.Class isa = (Class)&v0[15];
  v0[3].super.Class isa = (Class)sub_1000C0AAC;
  uint64_t v8 = swift_continuation_init();
  v0[10].super.Class isa = (Class)_NSConcreteStackBlock;
  v0[11].super.Class isa = (Class)0x40000000;
  v0[12].super.Class isa = (Class)sub_1000C0744;
  v0[13].super.Class isa = (Class)&unk_1006F7D78;
  v0[14].super.Class isa = (Class)v8;
  [(objc_class *)v4 credentialIdentifiersInPartitions:v5.super.isa docType:v6 region:v7 completion:&v0[10]];
  return _swift_continuation_await(&v0[2]);
}

uint64_t sub_1000C0AAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 232) = v1;
  if (v1) {
    id v2 = sub_1000C0C54;
  }
  else {
    id v2 = sub_1000C0BBC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C0BBC()
{
  id v2 = *(void **)(v0 + 216);
  uint64_t v1 = *(void **)(v0 + 224);
  Class v3 = *(void **)(v0 + 208);

  uint64_t v4 = *(void *)(v0 + 120);
  swift_task_dealloc();
  NSArray v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t sub_1000C0C54()
{
  uint64_t v1 = (void *)v0[28];
  Class v3 = (void *)v0[26];
  id v2 = (void *)v0[27];
  uint64_t v4 = v0[24];
  NSArray v5 = (void *)v0[25];
  uint64_t v6 = v0[22];
  uint64_t v7 = v0[23];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000C0DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[20] = v5;
  v4[21] = *(void *)(v5 - 8);
  v4[22] = swift_task_alloc();
  return _swift_task_switch(sub_1000C0E90, 0, 0);
}

uint64_t sub_1000C0E90()
{
  id v1 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithPartitions:isa];
  v0[23] = v3;

  Class v4 = Array._bridgeToObjectiveC()().super.isa;
  v0[24] = v4;
  NSString v5 = String._bridgeToObjectiveC()();
  v0[25] = v5;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000C1038;
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000C1344;
  v0[13] = &unk_1006F7D60;
  v0[14] = v6;
  [v3 activeRegionsInPartitions:v4 docType:v5 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000C1038()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    id v2 = sub_1000C11D0;
  }
  else {
    id v2 = sub_1000C1148;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C1148()
{
  id v2 = *(void **)(v0 + 192);
  uint64_t v1 = *(void **)(v0 + 200);

  uint64_t v3 = *(void *)(v0 + 120);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_1000C11D0()
{
  uint64_t v1 = (void *)v0[25];
  uint64_t v3 = (void *)v0[23];
  id v2 = (void *)v0[24];
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[20];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000C1344(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(void **)(*(void *)(v3 + 64) + 40) = static Set._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000C1414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[19] = a3;
  v4[20] = a4;
  v4[17] = a1;
  v4[18] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[21] = v5;
  v4[22] = *(void *)(v5 - 8);
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_1000C14D8, 0, 0);
}

uint64_t sub_1000C14D8()
{
  uint64_t v1 = v0[19];
  id v2 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithPartitions:isa];
  v0[24] = v4;

  NSString v5 = String._bridgeToObjectiveC()();
  v0[25] = v5;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000C1660;
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10044B79C;
  v0[13] = &unk_1006F7D18;
  v0[14] = v6;
  [v4 createCredentialInPartition:v5 options:v1 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000C1660()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    id v2 = sub_1000C17F8;
  }
  else {
    id v2 = sub_1000C1770;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C1770()
{
  uint64_t v1 = *(void **)(v0 + 200);

  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v4(v2, v3);
}

uint64_t sub_1000C17F8()
{
  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = v0[23];
  uint64_t v3 = (void *)v0[24];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[22];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v2, enum case for DIPError.Code.internalError(_:), v4);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000C195C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  return _swift_task_switch(sub_1000C1A20, 0, 0);
}

uint64_t sub_1000C1A20()
{
  id v1 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithPartitions:isa];
  v0[22] = v3;

  NSString v4 = String._bridgeToObjectiveC()();
  v0[23] = v4;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000C1B9C;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10001E4BC;
  v0[13] = &unk_1006F7D00;
  v0[14] = v5;
  [v3 generatePresentmentKeyForCredential:v4 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000C1B9C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    uint64_t v2 = sub_1000C1D30;
  }
  else {
    uint64_t v2 = sub_1000C1CAC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C1CAC()
{
  uint64_t v1 = *(void **)(v0 + 184);

  uint64_t v2 = *(void *)(v0 + 120);
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000C1D30()
{
  uint64_t v1 = (void *)v0[23];
  uint64_t v2 = v0[21];
  id v3 = (void *)v0[22];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[20];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v2, enum case for DIPError.Code.internalError(_:), v4);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000C1E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[19] = a5;
  v6[20] = a6;
  v6[17] = a3;
  v6[18] = a4;
  v6[15] = a1;
  v6[16] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[21] = v7;
  v6[22] = *(void *)(v7 - 8);
  v6[23] = swift_task_alloc();
  return _swift_task_switch(sub_1000C1F5C, 0, 0);
}

uint64_t sub_1000C1F5C()
{
  uint64_t v8 = v0[19];
  id v1 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithPartitions:isa];
  v0[24] = v3;

  NSString v4 = String._bridgeToObjectiveC()();
  v0[25] = v4;
  Class v5 = Data._bridgeToObjectiveC()().super.isa;
  v0[26] = v5;
  v0[2] = v0;
  v0[3] = sub_1000C20FC;
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100529EC4;
  v0[13] = &unk_1006F7CE8;
  v0[14] = v6;
  [v3 replacePayloadOfCredential:v4 withPayload:v5 format:v8 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000C20FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 216) = v1;
  if (v1) {
    uint64_t v2 = sub_1000C228C;
  }
  else {
    uint64_t v2 = sub_1000C220C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C220C()
{
  uint64_t v2 = *(void **)(v0 + 200);
  uint64_t v1 = *(void **)(v0 + 208);

  swift_task_dealloc();
  id v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000C228C()
{
  uint64_t v1 = (void *)v0[26];
  id v3 = (void *)v0[24];
  uint64_t v2 = (void *)v0[25];
  uint64_t v5 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v6 = v0[21];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

ValueMetadata *type metadata accessor for IDCredCredentialStore()
{
  return &type metadata for IDCredCredentialStore;
}

uint64_t sub_1000C2410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[36] = v16;
  v9[37] = v8;
  v9[34] = a7;
  v9[35] = a8;
  v9[32] = a5;
  v9[33] = a6;
  v9[30] = a3;
  v9[31] = a4;
  v9[28] = a1;
  v9[29] = a2;
  uint64_t v10 = type metadata accessor for IdentityProofingAttributeConfiguration();
  v9[38] = v10;
  v9[39] = *(void *)(v10 - 8);
  v9[40] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DIPError.Code();
  v9[41] = v11;
  v9[42] = *(void *)(v11 - 8);
  v9[43] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  v9[44] = v12;
  v9[45] = *(void *)(v12 - 8);
  v9[46] = swift_task_alloc();
  v9[47] = swift_task_alloc();
  v9[48] = swift_task_alloc();
  v9[49] = swift_task_alloc();
  v9[50] = swift_task_alloc();
  sub_100007764(&qword_100722C18);
  v9[51] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for WorkflowRecommendationResponse();
  v9[52] = v13;
  v9[53] = *(void *)(v13 - 8);
  v9[54] = swift_task_alloc();
  return _swift_task_switch(sub_1000C2660, 0, 0);
}

uint64_t sub_1000C2660()
{
  uint64_t v83 = v0;
  uint64_t v1 = v0[37];
  uint64_t v3 = v0[30];
  uint64_t v2 = v0[31];
  uint64_t v4 = v0[29];
  swift_retain();
  sub_100481CF8(v4, v3, v2, 0);
  uint64_t v5 = v0[52];
  uint64_t v6 = v0[53];
  uint64_t v7 = v0[51];
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v1 + 16)
     + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse;
  swift_beginAccess();
  sub_1000C69E4(v8, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
    uint64_t v9 = v0[51];
    uint64_t v11 = v0[42];
    uint64_t v10 = v0[43];
    uint64_t v12 = v0[41];
    swift_retain();
    sub_1000C6A4C(v9);
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.topekaInternalServerError(_:), v12);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000C6BD0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  else
  {
    uint64_t v15 = (uint64_t)(v0 + 2);
    uint64_t v16 = v0[54];
    uint64_t v17 = v0[52];
    uint64_t v18 = v0[37];
    uint64_t v20 = v0[32];
    uint64_t v19 = v0[33];
    sub_1000C6AAC(v0[51], v16);
    uint64_t v21 = v16 + *(int *)(v17 + 20);
    v0[5] = type metadata accessor for Workflow();
    v0[6] = (uint64_t)&off_100709BE0;
    uint64_t v22 = sub_10002C2D8(v0 + 2);
    sub_1000C6B10(v21, (uint64_t)v22);
    sub_1000C6B74(v16);
    *(void *)(v18 + 40) = v20;
    *(void *)(v18 + 48) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "-----BEGIN LOGGING SAVED WORKFLOW-----", v25, 2u);
      swift_slowDealloc();
    }
    uint64_t v26 = v0[50];
    uint64_t v27 = v0[44];
    uint64_t v28 = v0[45];

    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v29(v26, v27);
    defaultLogger()();
    sub_100030A10((uint64_t)(v0 + 2), (uint64_t)(v0 + 12));
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = v0[49];
    uint64_t v34 = v0[44];
    if (v32)
    {
      uint64_t v75 = v0[49];
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      v82[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136446210;
      uint64_t v37 = v0[15];
      uint64_t v36 = v0[16];
      sub_10000C728(v0 + 12, v37);
      uint64_t v38 = v37;
      uint64_t v15 = (uint64_t)(v0 + 2);
      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)(v36 + 8) + 8))(v38);
      v0[27] = sub_100110D58(v39, v40, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 12));
      _os_log_impl((void *)&_mh_execute_header, v30, v31, " WORKFLOWID: %{public}s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v42 = v34;
      uint64_t v41 = v75;
    }
    else
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 12));

      uint64_t v41 = v33;
      uint64_t v42 = v34;
    }
    v29(v41, v42);
    uint64_t v43 = v0 + 17;
    uint64_t v81 = v29;
    defaultLogger()();
    sub_100030A10(v15, (uint64_t)(v0 + 17));
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v47 = v0[48];
    uint64_t v48 = v0[44];
    if (v46)
    {
      uint64_t v79 = v0[48];
      uint64_t v76 = v0[44];
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      v82[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136446210;
      uint64_t v51 = v0[20];
      uint64_t v50 = v0[21];
      sub_10000C728(v43, v51);
      uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)(v50 + 8) + 16))(v51);
      v0[26] = sub_100110D58(v52, v53, v82);
      uint64_t v15 = (uint64_t)(v0 + 2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v43);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, " PROVIDERID: %{public}s", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v54 = v81;
      v81(v79, v76);
    }
    else
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 17));

      uint64_t v54 = v81;
      v81(v47, v48);
    }
    defaultLogger()();
    uint64_t v77 = v0 + 7;
    sub_100030A10(v15, (uint64_t)(v0 + 7));
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.debug.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v58 = v0[47];
    uint64_t v59 = v0[44];
    if (v57)
    {
      uint64_t v80 = v0[47];
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      v82[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136446210;
      uint64_t v78 = v59;
      uint64_t v61 = v0[10];
      uint64_t v62 = v0[11];
      sub_10000C728(v77, v61);
      (*(void (**)(uint64_t, uint64_t))(v62 + 104))(v61, v62);
      uint64_t v63 = Array.description.getter();
      unint64_t v65 = v64;
      swift_bridgeObjectRelease();
      uint64_t v66 = v63;
      uint64_t v54 = v81;
      v0[25] = sub_100110D58(v66, v65, v82);
      uint64_t v15 = (uint64_t)(v0 + 2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v77);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, " PAGINATION: %{public}s", v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v68 = v78;
      uint64_t v67 = v80;
    }
    else
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v77);

      uint64_t v67 = v58;
      uint64_t v68 = v59;
    }
    v54(v67, v68);
    defaultLogger()();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "-----END LOGGING SAVED WORKFLOW-----", v71, 2u);
      swift_slowDealloc();
    }
    uint64_t v72 = v0[46];
    uint64_t v73 = v0[44];

    v54(v72, v73);
    uint64_t v74 = (void *)swift_task_alloc();
    v0[55] = (uint64_t)v74;
    *uint64_t v74 = v0;
    v74[1] = sub_1000C3030;
    return sub_1000C3C24(v15);
  }
}

uint64_t sub_1000C3030(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 448) = a1;
  *(void *)(v3 + 456) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000C3B44;
  }
  else {
    uint64_t v4 = sub_1000C3144;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C3144()
{
  unint64_t v1 = v0[56];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9 >= 1) {
      goto LABEL_3;
    }
  }
  else if (*(uint64_t *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
  {
LABEL_3:
    v0[58] = *(void *)(v0[37] + 24);
    uint64_t v2 = v0[5];
    uint64_t v3 = v0[6];
    sub_10000C728(v0 + 2, v2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96);
    swift_retain();
    uint64_t v5 = v4(v2, v3);
    v0[59] = v5;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[60] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000C345C;
    uint64_t v7 = v0[40];
    return sub_10013447C(v7, v5);
  }
  uint64_t v11 = v0[42];
  uint64_t v10 = v0[43];
  uint64_t v12 = v0[41];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.invalidWorkflowPackage(_:), v12);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000C6BD0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000C345C()
{
  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C38FC;
  }
  else {
    uint64_t v2 = sub_1000C3570;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C3570()
{
  uint64_t v1 = v0[61];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000C6BD0(&qword_100722C20, (void (*)(uint64_t))&type metadata accessor for IdentityProofingAttributeConfiguration);
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  (*(void (**)(void, void))(v0[39] + 8))(v0[40], v0[38]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_100007764(&qword_100730C60);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_100613E40;
    id v3 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingUIConfig());
    *(void *)(v2 + 32) = IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)();
    specialized Array._endMutation()();
    objc_allocWithZone((Class)type metadata accessor for IdentityProofingDisplayInfo());
    swift_bridgeObjectRetain();
    uint64_t v6 = IdentityProofingDisplayInfo.init(proofingUI:docScan:attributeConfig:learnMoreURL:waitingForWiFiAlertDataThresholdInBytes:lowDataModeAlertDataThresholdInBytes:idType:featureEnablementConfig:supportedRegions:livenessStepUpConfig:livenessStepUpIQSettings:shouldPreFetchLivenessConfig:)();
    swift_errorRelease();
  }
  else
  {
    objc_allocWithZone((Class)type metadata accessor for IdentityProofingDisplayInfo());
    swift_bridgeObjectRetain();
    uint64_t v6 = IdentityProofingDisplayInfo.init(proofingUI:docScan:attributeConfig:learnMoreURL:waitingForWiFiAlertDataThresholdInBytes:lowDataModeAlertDataThresholdInBytes:idType:featureEnablementConfig:supportedRegions:livenessStepUpConfig:livenessStepUpIQSettings:shouldPreFetchLivenessConfig:)();
  }
  sub_100030A10((uint64_t)(v0 + 2), v0[28]);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v6);
}

uint64_t sub_1000C38FC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100007764(&qword_100730C60);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100613E40;
  id v2 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingUIConfig());
  *(void *)(v1 + 32) = IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)();
  specialized Array._endMutation()();
  objc_allocWithZone((Class)type metadata accessor for IdentityProofingDisplayInfo());
  swift_bridgeObjectRetain();
  uint64_t v5 = IdentityProofingDisplayInfo.init(proofingUI:docScan:attributeConfig:learnMoreURL:waitingForWiFiAlertDataThresholdInBytes:lowDataModeAlertDataThresholdInBytes:idType:featureEnablementConfig:supportedRegions:livenessStepUpConfig:livenessStepUpIQSettings:shouldPreFetchLivenessConfig:)();
  swift_errorRelease();
  sub_100030A10(v0 + 16, *(void *)(v0 + 224));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v5);
}

uint64_t sub_1000C3B44()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C3C24(uint64_t a1)
{
  v2[117] = v1;
  v2[116] = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[118] = v3;
  v2[119] = *(void *)(v3 - 8);
  v2[120] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[121] = v4;
  v2[122] = *(void *)(v4 - 8);
  v2[123] = swift_task_alloc();
  v2[124] = swift_task_alloc();
  v2[125] = swift_task_alloc();
  return _swift_task_switch(sub_1000C3D60, 0, 0);
}

uint64_t sub_1000C3D60()
{
  uint64_t v1 = *(void **)(v0 + 928);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10000C728(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 104))(v2, v3);
  if (v4)
  {
    if (*(void *)(v4 + 16))
    {
      *(void *)(v0 + 912) = v4;
      uint64_t v5 = self;
      id v6 = [v5 standardUserDefaults];
      v7._countAndFlagsBits = 0xD00000000000001BLL;
      v7._object = (void *)0x80000001006334A0;
      Swift::Bool v8 = NSUserDefaults.internalBool(forKey:)(v7);

      if (v8)
      {
        defaultLogger()();
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Internal setting to force enable retry auth code scenario has been enabled. Adding an additional page to auth code workflow", v11, 2u);
          swift_slowDealloc();
        }
        uint64_t v12 = *(void *)(v0 + 1000);
        uint64_t v13 = *(void *)(v0 + 976);
        uint64_t v14 = *(void *)(v0 + 968);

        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
        *(_OWORD *)(v0 + 784) = xmmword_100613E50;
        *(void *)(v0 + 800) = 0x8000000100633630;
        *(void *)(v0 + 808) = 0xD00000000000009DLL;
        *(void *)(v0 + 816) = 0x8000000100633650;
        *(void *)(v0 + 824) = _swiftEmptyArrayStorage;
        *(void *)(v0 + 832) = 0;
        *(void *)(v0 + 848) = 0;
        *(void *)(v0 + 840) = 0;
        strcpy((char *)(v0 + 856), "authcodeRetry");
        *(_WORD *)(v0 + 870) = -4864;
        *(void *)(v0 + 872) = 0;
        *(void *)(v0 + 888) = 0;
        *(void *)(v0 + 880) = 0;
        sub_100017A58(0, 0, (_OWORD *)(v0 + 784));
      }
      *(void *)(v0 + 920) = _swiftEmptyArrayStorage;
      id v15 = [v5 standardUserDefaults];
      v16._countAndFlagsBits = 0xD000000000000021;
      v16._object = (void *)0x80000001006334C0;
      Swift::Bool v17 = NSUserDefaults.internalBool(forKey:)(v16);

      if (v17)
      {
        *(_OWORD *)(v0 + 448) = xmmword_100613E60;
        *(void *)(v0 + 464) = 0x80000001006335A0;
        *(void *)(v0 + 472) = 0xD000000000000031;
        *(void *)(v0 + 480) = 0x80000001006335D0;
        *(void *)(v0 + 488) = _swiftEmptyArrayStorage;
        *(void *)(v0 + 504) = 0;
        *(void *)(v0 + 512) = 0;
        *(void *)(v0 + 496) = 0;
        *(void *)(v0 + 520) = 0xD00000000000001ELL;
        *(void *)(v0 + 528) = 0x8000000100633610;
        *(void *)(v0 + 536) = 0;
        *(void *)(v0 + 552) = 0;
        *(void *)(v0 + 544) = 0;
        sub_100017A58(0, 0, (_OWORD *)(v0 + 448));
      }
      id v18 = [v5 standardUserDefaults];
      v19._countAndFlagsBits = 0xD000000000000027;
      v19._object = (void *)0x80000001006334F0;
      Swift::Bool v20 = NSUserDefaults.internalBool(forKey:)(v19);

      if (v20)
      {
        *(_OWORD *)(v0 + 560) = xmmword_100613E70;
        *(void *)(v0 + 576) = 0x8000000100633520;
        *(void *)(v0 + 584) = 0xD00000000000002ALL;
        *(void *)(v0 + 592) = 0x8000000100633550;
        *(void *)(v0 + 600) = _swiftEmptyArrayStorage;
        *(void *)(v0 + 608) = 0;
        *(void *)(v0 + 624) = 0;
        *(void *)(v0 + 616) = 0;
        *(void *)(v0 + 632) = 0xD000000000000017;
        *(void *)(v0 + 640) = 0x8000000100633580;
        *(void *)(v0 + 648) = 0;
        *(void *)(v0 + 664) = 0;
        *(void *)(v0 + 656) = 0;
        sub_100017A58(0, 0, (_OWORD *)(v0 + 560));
      }
      defaultLogger()();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Fetch activeConfig from prepareProofingUI", v23, 2u);
        swift_slowDealloc();
      }
      uint64_t v24 = *(void *)(v0 + 992);
      uint64_t v25 = *(void *)(v0 + 976);
      uint64_t v26 = *(void *)(v0 + 968);
      uint64_t v27 = *(void *)(v0 + 936);
      uint64_t v28 = *(void **)(v0 + 928);

      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      *(void *)(v0 + 1008) = v29;
      *(void *)(v0 + 1016) = (v25 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v29(v24, v26);
      *(void *)(v0 + 1024) = *(void *)(v27 + 24);
      uint64_t v31 = v1[3];
      uint64_t v30 = v1[4];
      sub_10000C728(v28, v31);
      BOOL v32 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 96);
      swift_retain();
      uint64_t v33 = v32(v31, v30);
      *(void *)(v0 + 1032) = v33;
      uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100724CC0 + dword_100724CC0);
      uint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 1040) = v34;
      *uint64_t v34 = v0;
      v34[1] = sub_1000C440C;
      return v37(v0 + 16, v33);
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 952) + 104))(*(void *)(v0 + 960), enum case for DIPError.Code.workflowPaginationUnavailable(_:), *(void *)(v0 + 944));
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000C6BD0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_1000C440C()
{
  *(void *)(*(void *)v1 + 1048) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000C47B8;
  }
  else
  {
    uint64_t v2 = sub_1000C455C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C455C()
{
  uint64_t v1 = *(void *)(v0 + 912);
  *(void *)(v0 + 1056) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1064) = v2;
  if (v2)
  {
    *(void *)(v0 + 1072) = 0;
    long long v3 = *(_OWORD *)(v1 + 80);
    long long v4 = *(_OWORD *)(v1 + 96);
    long long v5 = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(v0 + 752) = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(v0 + 768) = v5;
    *(_OWORD *)(v0 + 736) = v4;
    long long v6 = *(_OWORD *)(v1 + 48);
    long long v7 = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 672) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v0 + 688) = v6;
    *(_OWORD *)(v0 + 704) = v7;
    *(_OWORD *)(v0 + 720) = v3;
    uint64_t v8 = *(void *)(v0 + 744);
    uint64_t v9 = *(void *)(v0 + 752);
    if (v9
      && (v8 == 0x6E695F646579656BLL && v9 == 0xE800000000000000
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      sub_1000C6754(v0 + 672);
      os_log_type_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 1080) = v10;
      *os_log_type_t v10 = v0;
      v10[1] = sub_1000C4848;
      return sub_1000C554C(v0 + 672, v0 + 16);
    }
    else
    {
      uint64_t v13 = *(void *)(v0 + 776);
      *(void *)(v0 + 896) = sub_10010B220(v8, v9);
      *(void *)(v0 + 904) = v14;
      *(void *)(v0 + 1104) = v14;
      sub_1000C6754(v0 + 672);
      id v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 1112) = v15;
      *id v15 = v0;
      v15[1] = sub_1000C4DCC;
      return sub_1000C5F04(v13);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1000C68DC(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void *))(v0 + 8);
    return v12(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1000C47B8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C4848(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1088) = a1;
  *(void *)(v3 + 1096) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_1000C68DC(v3 + 16);
    sub_1000C67E4(v3 + 672);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v4 = sub_1000C5424;
  }
  else
  {
    sub_1000C67E4(v3 + 672);
    long long v4 = sub_1000C4998;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C4998()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void **)(v0 + 1088);
  if (v2)
  {
    id v3 = v2;
    defaultLogger()();
    id v4 = v3;
    long long v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
    uint64_t v9 = *(void *)(v0 + 984);
    uint64_t v10 = *(void *)(v0 + 968);
    if (v7)
    {
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
      uint64_t v11 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      uint64_t v12 = IdentityProofingUIConfig.view.getter();
      *(void *)(v11 + 4) = sub_100110D58(v12, v13, &v32);
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s to be shown to the user", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy();
      uint64_t v1 = v0 + 16;
      swift_slowDealloc();
      swift_slowDealloc();

      v31(v9, v10);
    }
    else
    {

      v8(v9, v10);
    }
    id v14 = v4;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v0 + 920) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 920) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v15 = *(void *)(v0 + 1072) + 1;
  if (v15 == *(void *)(v0 + 1064))
  {
    swift_bridgeObjectRelease();
    sub_1000C68DC(v1);
    uint64_t v16 = *(void *)(v0 + 920);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::Bool v17 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v17(v16);
  }
  else
  {
    *(void *)(v0 + 1072) = v15;
    Swift::String v19 = (_OWORD *)(*(void *)(v0 + 1056) + 112 * v15);
    long long v20 = v19[5];
    long long v21 = v19[6];
    long long v22 = v19[8];
    *(_OWORD *)(v0 + 752) = v19[7];
    *(_OWORD *)(v0 + 768) = v22;
    *(_OWORD *)(v0 + 736) = v21;
    long long v24 = v19[3];
    long long v23 = v19[4];
    *(_OWORD *)(v0 + 672) = v19[2];
    *(_OWORD *)(v0 + 688) = v24;
    *(_OWORD *)(v0 + 704) = v23;
    *(_OWORD *)(v0 + 720) = v20;
    uint64_t v25 = *(void *)(v0 + 744);
    uint64_t v26 = *(void *)(v0 + 752);
    if (v26
      && (v25 == 0x6E695F646579656BLL && v26 == 0xE800000000000000
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      sub_1000C6754(v0 + 672);
      uint64_t v27 = (void *)swift_task_alloc();
      *(void *)(v0 + 1080) = v27;
      *uint64_t v27 = v0;
      v27[1] = sub_1000C4848;
      return sub_1000C554C(v0 + 672, v1);
    }
    else
    {
      uint64_t v28 = *(void *)(v0 + 776);
      *(void *)(v0 + 896) = sub_10010B220(v25, v26);
      *(void *)(v0 + 904) = v29;
      *(void *)(v0 + 1104) = v29;
      sub_1000C6754(v0 + 672);
      uint64_t v30 = (void *)swift_task_alloc();
      *(void *)(v0 + 1112) = v30;
      *uint64_t v30 = v0;
      v30[1] = sub_1000C4DCC;
      return sub_1000C5F04(v28);
    }
  }
}

uint64_t sub_1000C4DCC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_1000C68DC(v4 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v5 = sub_1000C54B4;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 896);
    *(void *)(v4 + 1128) = a1;
    *(void *)(v4 + 1136) = v6;
    *(void *)(v4 + 1144) = *(void *)(v4 + 712);
    *(_OWORD *)(v4 + 1152) = *(_OWORD *)(v4 + 696);
    *(void *)(v4 + 1168) = *(void *)(v4 + 680);
    *(void *)(v4 + 1176) = *(void *)(v4 + 688);
    long long v5 = sub_1000C4F44;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000C4F44()
{
  uint64_t v33 = v0;
  id v1 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingUIConfig());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)();
  uint64_t v31 = (_OWORD *)(v0 + 672);
  sub_1000C67E4(v0 + 672);
  id v3 = v2;
  defaultLogger()();
  id v4 = v3;
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  uint64_t v9 = *(void *)(v0 + 984);
  uint64_t v10 = *(void *)(v0 + 968);
  if (v7)
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v12 = IdentityProofingUIConfig.view.getter();
    *(void *)(v11 + 4) = sub_100110D58(v12, v13, &v32);
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s to be shown to the user", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v8(v9, v10);
  }
  else
  {

    v8(v9, v10);
  }
  id v14 = v4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 920) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 920) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v15 = *(void *)(v0 + 1072) + 1;
  if (v15 == *(void *)(v0 + 1064))
  {
    swift_bridgeObjectRelease();
    sub_1000C68DC(v0 + 16);
    uint64_t v16 = *(void *)(v0 + 920);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::Bool v17 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v17(v16);
  }
  else
  {
    *(void *)(v0 + 1072) = v15;
    Swift::String v19 = (_OWORD *)(*(void *)(v0 + 1056) + 112 * v15);
    long long v20 = v19[5];
    long long v21 = v19[6];
    long long v22 = v19[8];
    *(_OWORD *)(v0 + 752) = v19[7];
    *(_OWORD *)(v0 + 768) = v22;
    *(_OWORD *)(v0 + 736) = v21;
    long long v24 = v19[3];
    long long v23 = v19[4];
    *uint64_t v31 = v19[2];
    *(_OWORD *)(v0 + 688) = v24;
    *(_OWORD *)(v0 + 704) = v23;
    *(_OWORD *)(v0 + 720) = v20;
    uint64_t v25 = *(void *)(v0 + 744);
    uint64_t v26 = *(void *)(v0 + 752);
    if (v26
      && (v25 == 0x6E695F646579656BLL && v26 == 0xE800000000000000
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      sub_1000C6754((uint64_t)v31);
      uint64_t v27 = (void *)swift_task_alloc();
      *(void *)(v0 + 1080) = v27;
      *uint64_t v27 = v0;
      v27[1] = sub_1000C4848;
      return sub_1000C554C((uint64_t)v31, v0 + 16);
    }
    else
    {
      uint64_t v28 = *(void *)(v0 + 776);
      *(void *)(v0 + 896) = sub_10010B220(v25, v26);
      *(void *)(v0 + 904) = v29;
      *(void *)(v0 + 1104) = v29;
      sub_1000C6754((uint64_t)v31);
      uint64_t v30 = (void *)swift_task_alloc();
      *(void *)(v0 + 1112) = v30;
      *uint64_t v30 = v0;
      v30[1] = sub_1000C4DCC;
      return sub_1000C5F04(v28);
    }
  }
}

uint64_t sub_1000C5424()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C54B4()
{
  sub_1000C67E4(v0 + 672);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C554C(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[28] = v4;
  v3[29] = *(void *)(v4 - 8);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  return _swift_task_switch(sub_1000C562C, 0, 0);
}

uint64_t sub_1000C562C()
{
  uint64_t v57 = v0;
  id v1 = (uint64_t *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 200);
  defaultLogger()();
  sub_1000C6754(v2);
  sub_1000C6754(v2);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *v1;
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    unint64_t v7 = *(void *)(v5 + 80);
    uint64_t v8 = *v1;
    if (v7)
    {
      uint64_t v9 = *(void *)(v8 + 72);
      unint64_t v10 = v7;
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0xE000000000000000;
    }
    uint64_t v16 = *(void *)(v0 + 232);
    uint64_t v54 = *(void *)(v0 + 224);
    uint64_t v55 = *(void *)(v0 + 256);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 192) = sub_100110D58(v9, v10, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C67E4(v8);
    sub_1000C67E4(v8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "fetching the proofing view from the page type: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v15(v55, v54);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 256);
    uint64_t v12 = *(void *)(v0 + 224);
    uint64_t v13 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 200);
    sub_1000C67E4(v14);
    sub_1000C67E4(v14);

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v15(v11, v12);
  }
  Swift::Bool v17 = *(void **)(*v1 + 40);
  if (v17[2])
  {
    uint64_t v18 = v0 + 176;
    uint64_t v20 = v17[4];
    unint64_t v19 = v17[5];
    swift_bridgeObjectRetain();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    long long v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(void *)(v0 + 248);
    if (v23)
    {
      uint64_t v53 = *(void *)(v0 + 224);
      uint64_t v52 = *(void *)(v0 + 248);
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 184) = sub_100110D58(v20, v19, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "The keyedInType is %s", v25, 0xCu);
      swift_arrayDestroy();
      uint64_t v18 = v0 + 176;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v26 = v52;
      uint64_t v27 = v53;
    }
    else
    {
      uint64_t v28 = *(void *)(v0 + 224);
      swift_bridgeObjectRelease_n();

      uint64_t v26 = v24;
      uint64_t v27 = v28;
    }
    v15(v26, v27);
    uint64_t v29 = *(void *)(v0 + 208);
    *(void *)(v0 + 264) = sub_10010B220(v20, v19);
    *(void *)(v0 + 272) = v30;
    sub_1000C6874(v29 + 400, v18);
    sub_1000C6874(v18, v0 + 168);
    uint64_t v31 = *(void *)(v0 + 168);
    if (v31)
    {
      if (*(void *)(v31 + 16))
      {
        unint64_t v32 = sub_100590548(v20, v19);
        if (v33)
        {
          uint64_t v34 = *(void *)(v31 + 56) + 152 * v32;
          long long v35 = *(_OWORD *)(v34 + 16);
          *(_OWORD *)(v0 + 16) = *(_OWORD *)v34;
          *(_OWORD *)(v0 + 32) = v35;
          long long v36 = *(_OWORD *)(v34 + 80);
          long long v38 = *(_OWORD *)(v34 + 32);
          long long v37 = *(_OWORD *)(v34 + 48);
          *(_OWORD *)(v0 + 80) = *(_OWORD *)(v34 + 64);
          *(_OWORD *)(v0 + 96) = v36;
          *(_OWORD *)(v0 + 48) = v38;
          *(_OWORD *)(v0 + 64) = v37;
          long long v40 = *(_OWORD *)(v34 + 112);
          long long v39 = *(_OWORD *)(v34 + 128);
          long long v41 = *(_OWORD *)(v34 + 96);
          *(void *)(v0 + 160) = *(void *)(v34 + 144);
          *(_OWORD *)(v0 + 128) = v40;
          *(_OWORD *)(v0 + 144) = v39;
          *(_OWORD *)(v0 + 112) = v41;
          sub_1000B5FB4(v0 + 16);
          swift_bridgeObjectRelease();
          defaultLogger()();
          uint64_t v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v44 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v44 = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, v43, "an active config exists", v44, 2u);
            swift_slowDealloc();
          }
          uint64_t v45 = *(void *)(v0 + 240);
          uint64_t v46 = *(void *)(v0 + 224);
          uint64_t v47 = *(void *)(v0 + 200);

          v15(v45, v46);
          uint64_t v48 = *(void *)(v47 + 104);
          uint64_t v49 = (void *)swift_task_alloc();
          *(void *)(v0 + 280) = v49;
          *uint64_t v49 = v0;
          v49[1] = sub_1000C5BE4;
          return sub_1000C5F04(v48);
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = *(uint64_t (**)(void))(v0 + 8);
  return v51(0);
}

uint64_t sub_1000C5BE4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 288) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000C5E6C;
  }
  else
  {
    *(void *)(v4 + 296) = a1;
    uint64_t v5 = sub_1000C5D0C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000C5D0C()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingUIConfig());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)();
  sub_1000B6040(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000C5E6C()
{
  sub_1000B6040(v0 + 16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C5F04(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000C5FD4, 0, 0);
}

uint64_t sub_1000C5FD4()
{
  long long v36 = v0;
  uint64_t v1 = v0[6];
  if (*(void *)(v1 + 48))
  {
    uint64_t v2 = v0[5];
    String.lowercased()();
    if (v2)
    {
      uint64_t v3 = v0[5];
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      BOOL v6 = os_log_type_enabled(v4, v5);
      uint64_t v7 = v0[10];
      uint64_t v8 = v0[8];
      if (v6)
      {
        uint64_t v32 = v0[7];
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v30 = v7;
        uint64_t v10 = Array.description.getter();
        unint64_t v12 = v11;
        swift_bridgeObjectRelease();
        v0[4] = sub_100110D58(v10, v12, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetching asset images for: %s", v9, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v30, v32);
      }
      else
      {
        uint64_t v21 = v0[7];
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v21);
      }
      v0[11] = *(void *)(v0[6] + 32);
      Swift::String v22 = String.lowercased()();
      v0[12] = v22._object;
      swift_retain();
      swift_bridgeObjectRelease();
      BOOL v23 = (void *)swift_task_alloc();
      v0[13] = v23;
      *BOOL v23 = v0;
      v23[1] = sub_1000C653C;
      return sub_100123528(v22._countAndFlagsBits, (uint64_t)v22._object, v3);
    }
    swift_bridgeObjectRelease();
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v29 = v14;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    if (*(void *)(v1 + 48))
    {
      uint64_t v16 = *(void *)(v1 + 40);
      unint64_t v17 = *(void *)(v1 + 48);
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v16 = 7104878;
    }
    uint64_t v31 = v0[8];
    uint64_t v33 = v0[7];
    uint64_t v34 = v0[9];
    swift_bridgeObjectRetain();
    v0[2] = sub_100110D58(v16, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v25 = Array.description.getter();
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    v0[3] = sub_100110D58(v25, v27, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v29, "Not fetching assets because state or image assets is nil. state=%s imageAssets=%s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v33);
  }
  else
  {
    uint64_t v19 = v0[8];
    uint64_t v18 = v0[9];
    uint64_t v20 = v0[7];
    swift_release_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = (uint64_t (*)(void))v0[1];
  return v28(0);
}

uint64_t sub_1000C653C(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v7(a1);
  }
}

uint64_t sub_1000C66E0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingAuthCodeUIProvider()
{
  return self;
}

uint64_t sub_1000C6754(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C67E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C6874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100722358);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C68DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C69E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100722C18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C6A4C(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100722C18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C6AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WorkflowRecommendationResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C6B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Workflow();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C6B74(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WorkflowRecommendationResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C6BD0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C6C18()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for SHA256();
  v0[5] = v2;
  v0[6] = *(void *)(v2 - 8);
  v0[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SHA256Digest();
  v0[8] = v3;
  v0[9] = *(void *)(v3 - 8);
  v0[10] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000C6DE4;
  return sub_1000C7638();
}

uint64_t sub_1000C6DE4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000C7464;
  }
  else {
    uint64_t v4 = sub_1000C6F24;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C6F24()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = sub_100592788();
  if (v1)
  {
    swift_release();
    (*(void (**)(void, void, void))(*(void *)(v0 + 24) + 104))(*(void *)(v0 + 32), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 16));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = v2;
    unint64_t v7 = v3;
    sub_1000D7A10(&qword_100722DF8, (void (*)(uint64_t))&type metadata accessor for SHA256);
    dispatch thunk of HashFunction.init()();
    switch(v7 >> 62)
    {
      case 1uLL:
        if (v6 >> 32 < (int)v6) {
          __break(1u);
        }
        sub_10002CEB0(v6, v7);
        sub_10018451C((int)v6, v6 >> 32);
        break;
      case 2uLL:
        uint64_t v8 = *(void *)(v6 + 16);
        uint64_t v9 = *(void *)(v6 + 24);
        sub_10002CEB0(v6, v7);
        swift_retain();
        swift_retain();
        sub_10018451C(v8, v9);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        *(void *)(v0 + 126) = 0;
        *(void *)(v0 + 132) = 0;
        goto LABEL_11;
      default:
        *(void *)(v0 + 112) = v6;
        *(_WORD *)(v0 + 120) = v7;
        *(unsigned char *)(v0 + 122) = BYTE2(v7);
        *(unsigned char *)(v0 + 123) = BYTE3(v7);
        *(unsigned char *)(v0 + 124) = BYTE4(v7);
        *(unsigned char *)(v0 + 125) = BYTE5(v7);
LABEL_11:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        break;
    }
    sub_10000C5F4(v6, v7);
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 56);
    uint64_t v13 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 40);
    uint64_t v15 = *(void *)(v0 + 48);
    dispatch thunk of HashFunction.finalize()();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
    sub_1000D7A10(&qword_100722E00, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
    uint64_t v16 = Digest.base64Str.getter();
    uint64_t v18 = v17;
    sub_10000C5F4(v6, v7);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v19(v16, v18);
  }
}

uint64_t sub_1000C7464()
{
  (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for DIPError.Code.internalError(_:), v0[2]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C7638()
{
  v1[9] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[13] = v3;
  v1[14] = *(void *)(v3 - 8);
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v1[20] = v4;
  v1[21] = *(void *)(v4 - 8);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
  v1[25] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v1[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPSignpost();
  v1[27] = v5;
  v1[28] = *(void *)(v5 - 8);
  v1[29] = swift_task_alloc();
  return _swift_task_switch(sub_1000C78AC, 0, 0);
}

uint64_t sub_1000C78AC()
{
  uint64_t v37 = v0;
  sub_100048D6C(v0[9] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_secureElementManager, (uint64_t)(v0 + 2), &qword_100722DF0);
  uint64_t v1 = v0[5];
  if (v1)
  {
    sub_10000C728(v0 + 2, v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[30] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000C7EF4;
    return sub_10012410C();
  }
  else
  {
    sub_10000C6CC((uint64_t)(v0 + 2), &qword_100722DF0);
    uint64_t v4 = v0[25];
    static DaemonSignposts.MobileDocumentReader.identityKeyStatus.getter();
    DIPSignpost.init(_:)();
    sub_1000CCCDC(v4);
    uint64_t v6 = v0[24];
    uint64_t v5 = v0[25];
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[23];
    uint64_t v9 = v0[20];
    uint64_t v10 = v0[21];
    uint64_t v11 = (uint64_t *)(v5 + *(int *)(v6 + 20));
    uint64_t v35 = *v11;
    v0[32] = *v11;
    unint64_t v12 = v11[1];
    v0[33] = v12;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v13(v8, v5 + *(int *)(v6 + 28), v9);
    swift_bridgeObjectRetain();
    defaultLogger()();
    v13(v7, v8, v9);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v18 = v0[21];
    uint64_t v17 = v0[22];
    uint64_t v19 = v0[19];
    uint64_t v34 = v0[20];
    uint64_t v21 = v0[13];
    uint64_t v20 = v0[14];
    if (v16)
    {
      uint64_t v33 = v0[13];
      os_log_type_t type = v15;
      log = v14;
      uint64_t v22 = swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      swift_bridgeObjectRetain();
      v0[7] = sub_100110D58(v35, v12, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2080;
      sub_1000D7A10((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[8] = sub_100110D58(v23, v24, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v25(v17, v34);
      _os_log_impl((void *)&_mh_execute_header, log, type, "MobileDocumentReaderAuthenticationManager attempting to look up existing identity key for %s and %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v26(v19, v33);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v25(v17, v34);

      unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v26(v19, v21);
    }
    v0[34] = v25;
    v0[35] = v26;
    uint64_t v27 = v0[9];
    uint64_t v28 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    v0[36] = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    sub_10000C728((void *)(v27 + v28), *(void *)(v27 + v28 + 24));
    os_log_type_t v29 = (void *)swift_task_alloc();
    v0[37] = v29;
    void *v29 = v0;
    v29[1] = sub_1000C87B8;
    uint64_t v30 = v0[23];
    return sub_100128C94(v35, v12, v30);
  }
}

uint64_t sub_1000C7EF4()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C859C;
  }
  else {
    uint64_t v2 = sub_1000C8008;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C8008()
{
  uint64_t v37 = v0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[25];
  static DaemonSignposts.MobileDocumentReader.identityKeyStatus.getter();
  DIPSignpost.init(_:)();
  sub_1000CCCDC(v2);
  if (v1)
  {
    (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
    (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for DIPError.Code.internalError(_:), v0[10]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v6 = v0[24];
    uint64_t v5 = v0[25];
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[23];
    uint64_t v9 = v0[20];
    uint64_t v10 = v0[21];
    uint64_t v11 = (uint64_t *)(v5 + *(int *)(v6 + 20));
    uint64_t v35 = *v11;
    v0[32] = *v11;
    unint64_t v12 = v11[1];
    v0[33] = v12;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v13(v8, v5 + *(int *)(v6 + 28), v9);
    swift_bridgeObjectRetain();
    defaultLogger()();
    v13(v7, v8, v9);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v18 = v0[21];
    uint64_t v17 = v0[22];
    uint64_t v19 = v0[19];
    uint64_t v34 = v0[20];
    uint64_t v21 = v0[13];
    uint64_t v20 = v0[14];
    if (v16)
    {
      uint64_t v33 = v0[13];
      os_log_type_t type = v15;
      log = v14;
      uint64_t v22 = swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      swift_bridgeObjectRetain();
      v0[7] = sub_100110D58(v35, v12, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2080;
      sub_1000D7A10((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[8] = sub_100110D58(v23, v24, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v25(v17, v34);
      _os_log_impl((void *)&_mh_execute_header, log, type, "MobileDocumentReaderAuthenticationManager attempting to look up existing identity key for %s and %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v26(v19, v33);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v25(v17, v34);

      unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v26(v19, v21);
    }
    v0[34] = v25;
    v0[35] = v26;
    uint64_t v27 = v0[9];
    uint64_t v28 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    v0[36] = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    sub_10000C728((void *)(v27 + v28), *(void *)(v27 + v28 + 24));
    os_log_type_t v29 = (void *)swift_task_alloc();
    v0[37] = v29;
    void *v29 = v0;
    v29[1] = sub_1000C87B8;
    uint64_t v30 = v0[23];
    return sub_100128C94(v35, v12, v30);
  }
}

uint64_t sub_1000C859C()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for DIPError.Code.internalError(_:), v0[10]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000C87B8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 304) = a1;
  *(void *)(v3 + 312) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000C8C20;
  }
  else {
    uint64_t v4 = sub_1000C88CC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C88CC()
{
  if (sub_100592AA8())
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderAuthenticationManager found identity key", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
    uint64_t v5 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 104);

    v4(v5, v6);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t v25 = *(void *)(v0 + 304);
    uint64_t v7 = *(void *)(v0 + 224);
    uint64_t v8 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 216);
    uint64_t v10 = *(void *)(v0 + 200);
    (*(void (**)(void, void))(v0 + 272))(*(void *)(v0 + 184), *(void *)(v0 + 160));
    sub_1000D5C68(v10, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v11(v25);
  }
  else
  {
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "MobileDocumentReaderAuthenticationManager found identity key but it is not valid. Deleting and generating new one...", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
    uint64_t v16 = *(void *)(v0 + 288);
    uint64_t v18 = *(void *)(v0 + 136);
    uint64_t v19 = *(void *)(v0 + 104);
    uint64_t v20 = *(void *)(v0 + 72);

    v17(v18, v19);
    sub_10000C728((void *)(v20 + v16), *(void *)(v20 + v16 + 24));
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_1000C8E54;
    uint64_t v23 = *(void *)(v0 + 256);
    uint64_t v22 = *(void *)(v0 + 264);
    uint64_t v24 = *(void *)(v0 + 184);
    return sub_10012B898(v23, v22, v24);
  }
}

uint64_t sub_1000C8C20()
{
  uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[35];
  uint64_t v2 = v0[32];
  uint64_t v1 = (void *)v0[33];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[13];
  _StringGuts.grow(_:)(100);
  v5._countAndFlagsBits = 0xD000000000000044;
  v5._object = (void *)0x80000001006343E0;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v2;
  v6._object = v1;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x20646E6120;
  v7._object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  sub_1000D7A10((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x8000000100634430;
  v9._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v9);
  defaultLogger()();
  DIPLogError(_:message:log:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  v16(v3, v4);
  uint64_t v10 = (void *)(v0[9] + v0[36]);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_10000C728(v10, v10[3]);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[42] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000C9274;
  uint64_t v13 = v0[32];
  uint64_t v12 = v0[33];
  uint64_t v14 = v0[23];
  return sub_100129CF8(v13, v12, v14);
}

uint64_t sub_1000C8E54()
{
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C9038;
  }
  else {
    uint64_t v2 = sub_1000C8F68;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C8F68()
{
  swift_release();
  uint64_t v1 = (void *)(v0[9] + v0[36]);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_10000C728(v1, v1[3]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[42] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000C9274;
  uint64_t v4 = v0[32];
  uint64_t v3 = v0[33];
  uint64_t v5 = v0[23];
  return sub_100129CF8(v4, v3, v5);
}

uint64_t sub_1000C9038()
{
  swift_release();
  uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[35];
  uint64_t v2 = v0[32];
  uint64_t v1 = (void *)v0[33];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[13];
  _StringGuts.grow(_:)(100);
  v5._countAndFlagsBits = 0xD000000000000044;
  v5._object = (void *)0x80000001006343E0;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v2;
  v6._object = v1;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x20646E6120;
  v7._object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  sub_1000D7A10((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x8000000100634430;
  v9._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v9);
  defaultLogger()();
  DIPLogError(_:message:log:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  v16(v3, v4);
  uint64_t v10 = (void *)(v0[9] + v0[36]);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_10000C728(v10, v10[3]);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[42] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000C9274;
  uint64_t v13 = v0[32];
  uint64_t v12 = v0[33];
  uint64_t v14 = v0[23];
  return sub_100129CF8(v13, v12, v14);
}

uint64_t sub_1000C9274(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 344) = a1;
  *(void *)(v3 + 352) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_1000C95A8;
  }
  else {
    uint64_t v4 = sub_1000C93B0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C93B0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderAuthenticationManager generated new identity key. Returning.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 104);

  v4(v5, v6);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 224);
  uint64_t v8 = *(void *)(v0 + 232);
  uint64_t v9 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 200);
  (*(void (**)(void, void))(v0 + 272))(*(void *)(v0 + 184), *(void *)(v0 + 160));
  sub_1000D5C68(v10, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v11(v13);
}

uint64_t sub_1000C95A8()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 200);
  (*(void (**)(void, void))(v0 + 272))(*(void *)(v0 + 184), *(void *)(v0 + 160));
  sub_1000D5C68(v4, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(void, void, void))(*(void *)(v0 + 88) + 104))(*(void *)(v0 + 96), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 80));
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000C9818(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v3[10] = sub_100007764(&qword_100722D90);
  v3[11] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v3[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPSignpost();
  v3[16] = v4;
  v3[17] = *(void *)(v4 - 8);
  v3[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v3[19] = v5;
  v3[20] = *(void *)(v5 - 8);
  v3[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[22] = v6;
  v3[23] = *(void *)(v6 - 8);
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  sub_100007764(&qword_100722D70);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  v3[32] = v7;
  v3[33] = *(void *)(v7 - 8);
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
  v3[38] = swift_task_alloc();
  return _swift_task_switch(sub_1000C9B68, 0, 0);
}

uint64_t sub_1000C9B68()
{
  sub_1000CCCDC(v0[38]);
  uint64_t v1 = (uint64_t *)(v0[38] + *(int *)(v0[37] + 20));
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)v1[1];
  swift_bridgeObjectRetain();
  uint64_t v4 = MobileDocumentReaderConfiguration.merchantServerAccessToken.getter();
  uint64_t v6 = sub_1000D5DC4(v4, v5, v2, v3);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  v0[39] = v6;
  v0[40] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[41] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000C9ED8;
  uint64_t v10 = v0[31];
  return sub_1000CE59C(v10, v6, v8);
}

uint64_t sub_1000C9ED8()
{
  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000CC1B4;
  }
  else {
    uint64_t v2 = sub_1000C9FEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C9FEC()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[31];
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[43] = v4;
  v0[44] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v3, 1, v1) == 1)
  {
    sub_10000C6CC(v3, &qword_100722D70);
    uint64_t v5 = v0[9];
    uint64_t v6 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    v0[52] = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    sub_10000C728((void *)(v5 + v6), *(void *)(v5 + v6 + 24));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[53] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000CB7A0;
    uint64_t v9 = v0[39];
    uint64_t v8 = v0[40];
    return sub_10012E390(v9, v8);
  }
  else
  {
    sub_1000D5BA0(v3, v0[36]);
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    unint64_t v14 = v0[40];
    if (v13)
    {
      uint64_t v15 = v0[39];
      uint64_t v26 = v0[29];
      uint64_t v16 = v0[23];
      uint64_t v25 = v0[22];
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      v0[6] = sub_100110D58(v15, v14, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "MobileDocumentReaderAuthenticationManager found existing session for sessionIdentifier %s. Returning.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v18(v26, v25);
    }
    else
    {
      uint64_t v19 = v0[29];
      uint64_t v20 = v0[22];
      uint64_t v21 = v0[23];
      swift_bridgeObjectRelease_n();

      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v18(v19, v20);
    }
    v0[45] = v18;
    uint64_t v22 = (void *)swift_task_alloc();
    v0[46] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1000CA314;
    uint64_t v23 = v0[36];
    uint64_t v24 = v0[30];
    return sub_1000D00C4(v24, v23);
  }
}

uint64_t sub_1000CA314()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000CA410, 0, 0);
}

uint64_t sub_1000CA410()
{
  uint64_t v1 = *(void *)(v0 + 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0 + 344))(v1, 1, *(void *)(v0 + 256)) != 1)
  {
    uint64_t v22 = *(void *)(v0 + 304);
    uint64_t v23 = *(void *)(v0 + 288);
    uint64_t v24 = *(void *)(v0 + 56);
    swift_bridgeObjectRelease();
    sub_1000D5C68(v23, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    sub_1000D5C68(v22, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    uint64_t v25 = v1;
    uint64_t v26 = v24;
LABEL_17:
    sub_1000D5BA0(v25, v26);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
    return v27();
  }
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288);
  sub_10000C6CC(v1, &qword_100722D70);
  MobileDocumentReaderConfiguration.merchantServerAccessToken.getter();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  sub_1000D5C04(v2, v3);
  uint64_t v6 = *(void *)(v0 + 280);
  if (!v5)
  {
    sub_1000D5C68(v6, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    goto LABEL_16;
  }
  unint64_t v7 = *(void *)(v6 + *(int *)(*(void *)(v0 + 256) + 40) + 8);
  sub_1000D5C68(v6, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  if (v7 >> 60 != 15)
  {
LABEL_16:
    sub_1000D5C68(*(void *)(v0 + 304), (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void *)(v0 + 288);
    uint64_t v26 = *(void *)(v0 + 56);
    goto LABEL_17;
  }
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "MobileDocumentReaderAuthenticationManager existing session with token has missing merchantLogo, refetching", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 288);
  uint64_t v13 = *(void *)(v0 + 256);
  uint64_t v14 = *(void *)(v0 + 224);
  uint64_t v15 = *(void *)(v0 + 176);

  v11(v14, v15);
  unint64_t v16 = *(void *)(v12 + *(int *)(v13 + 28));
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_8;
    }
LABEL_22:
    uint64_t v28 = *(void *)(v0 + 288);
    uint64_t v30 = *(void *)(v0 + 160);
    uint64_t v29 = *(void *)(v0 + 168);
    uint64_t v31 = *(void *)(v0 + 152);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v30 + 104))(v29, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v31);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000D5C68(v28, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    uint64_t v33 = *(void *)(v0 + 152);
    uint64_t v32 = *(void *)(v0 + 160);
    uint64_t v34 = *(void *)(v0 + 104);
    uint64_t v35 = *(void *)(v0 + 112);
    uint64_t v36 = *(void *)(v0 + 88);
    uint64_t v79 = *(void *)(v0 + 80);
    swift_getErrorValue();
    swift_errorRetain();
    Error.dipErrorCode.getter();
    unsigned int v37 = enum case for DIPError.Code.documentReaderSessionExpired(_:);
    uint64_t v78 = *(void (**)(uint64_t, void, uint64_t))(v32 + 104);
    v78(v34, enum case for DIPError.Code.documentReaderSessionExpired(_:), v33);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v33);
    uint64_t v38 = v36 + *(int *)(v79 + 48);
    sub_100048D6C(v35, v36, &qword_100723600);
    sub_100048D6C(v34, v38, &qword_100723600);
    long long v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
    int v40 = v39(v36, 1, v33);
    uint64_t v41 = *(void *)(v0 + 152);
    if (v40 == 1)
    {
      uint64_t v42 = *(void *)(v0 + 112);
      sub_10000C6CC(*(void *)(v0 + 104), &qword_100723600);
      sub_10000C6CC(v42, &qword_100723600);
      if (v39(v38, 1, v41) == 1)
      {
        unsigned int v80 = v37;
        sub_10000C6CC(*(void *)(v0 + 88), &qword_100723600);
        swift_errorRelease();
LABEL_29:
        MobileDocumentReaderConfiguration.merchantServerAccessToken.getter();
        uint64_t v56 = v55;
        swift_bridgeObjectRelease();
        if (v56)
        {
          swift_bridgeObjectRelease();
          defaultLogger()();
          uint64_t v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v57, v58))
          {
            uint64_t v59 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v59 = 0;
            _os_log_impl((void *)&_mh_execute_header, v57, v58, "MobileDocumentReaderAuthenticationManager found stored session for token that is expired. A new token must be created.", v59, 2u);
            swift_slowDealloc();
          }
          uint64_t v77 = *(void *)(v0 + 304);
          uint64_t v60 = *(void *)(v0 + 208);
          uint64_t v62 = *(void *)(v0 + 176);
          uint64_t v61 = *(void *)(v0 + 184);
          uint64_t v63 = *(void *)(v0 + 168);
          uint64_t v64 = *(void *)(v0 + 152);

          (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
          v78(v63, v80, v64);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          swift_errorRelease();
          sub_1000D5C68(v77, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
          (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 104))(*(void *)(v0 + 168), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 152));
          swift_errorRetain();
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          swift_errorRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_18;
        }
        defaultLogger()();
        uint64_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v73, v74))
        {
          uint64_t v75 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v75 = 0;
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "MobileDocumentReaderAuthenticationManager found stored session for tokenless that is expired. Creating new one.", v75, 2u);
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
        }
        (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 176));
LABEL_34:
        uint64_t v68 = *(void *)(v0 + 72);
        uint64_t v69 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
        *(void *)(v0 + 416) = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
        sub_10000C728((void *)(v68 + v69), *(void *)(v68 + v69 + 24));
        os_log_type_t v70 = (void *)swift_task_alloc();
        *(void *)(v0 + 424) = v70;
        *os_log_type_t v70 = v0;
        v70[1] = sub_1000CB7A0;
        uint64_t v72 = *(void *)(v0 + 312);
        uint64_t v71 = *(void *)(v0 + 320);
        return sub_10012E390(v72, v71);
      }
    }
    else
    {
      sub_100048D6C(*(void *)(v0 + 88), *(void *)(v0 + 96), &qword_100723600);
      if (v39(v38, 1, v41) != 1)
      {
        unsigned int v80 = v37;
        uint64_t v48 = *(void *)(v0 + 160);
        uint64_t v47 = *(void *)(v0 + 168);
        uint64_t v49 = *(void *)(v0 + 152);
        uint64_t v51 = *(void *)(v0 + 104);
        uint64_t v50 = *(void *)(v0 + 112);
        uint64_t v52 = *(void *)(v0 + 96);
        uint64_t v76 = *(void *)(v0 + 88);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v47, v38, v49);
        sub_1000D7A10(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
        char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
        v54(v47, v49);
        sub_10000C6CC(v51, &qword_100723600);
        sub_10000C6CC(v50, &qword_100723600);
        v54(v52, v49);
        sub_10000C6CC(v76, &qword_100723600);
        swift_errorRelease();
        if (v53) {
          goto LABEL_29;
        }
LABEL_33:
        uint64_t v65 = *(void *)(v0 + 184);
        uint64_t v66 = *(void *)(v0 + 192);
        uint64_t v67 = *(void *)(v0 + 176);
        defaultLogger()();
        DIPLogError(_:message:log:)();
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v67);
        goto LABEL_34;
      }
      uint64_t v44 = *(void *)(v0 + 152);
      uint64_t v43 = *(void *)(v0 + 160);
      uint64_t v45 = *(void *)(v0 + 112);
      uint64_t v46 = *(void *)(v0 + 96);
      sub_10000C6CC(*(void *)(v0 + 104), &qword_100723600);
      sub_10000C6CC(v45, &qword_100723600);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v44);
    }
    sub_10000C6CC(*(void *)(v0 + 88), &qword_100722D90);
    swift_errorRelease();
    goto LABEL_33;
  }
  uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v17) {
    goto LABEL_22;
  }
LABEL_8:
  if ((v16 & 0xC000000000000001) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v19 = *(id *)(v16 + 32);
  }
  uint64_t v20 = (uint64_t)v19;
  *(void *)(v0 + 376) = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_1000CB15C;
  return sub_1000D6280(v20);
}

uint64_t sub_1000CB15C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 392) = a1;
  *(void *)(v3 + 400) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000CB25C, 0, 0);
}

uint64_t sub_1000CB25C()
{
  if (v0[50] >> 60 == 15)
  {
    uint64_t v1 = (void *)v0[47];
    sub_1000D5C68(v0[38], (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);

    swift_bridgeObjectRelease();
    sub_1000D5BA0(v0[36], v0[7]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    sub_10000C728((void *)(v0[9] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage), *(void *)(v0[9] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage + 24));
    uint64_t v4 = (void *)swift_task_alloc();
    v0[51] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000CB4A4;
    uint64_t v6 = v0[49];
    uint64_t v5 = v0[50];
    uint64_t v7 = v0[39];
    uint64_t v8 = v0[40];
    return sub_10012FB90(v6, v5, v7, v8);
  }
}

uint64_t sub_1000CB4A4(char a1)
{
  *(unsigned char *)(*(void *)v1 + 464) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000CB5C4, 0, 0);
}

uint64_t sub_1000CB5C4()
{
  int v1 = *(unsigned __int8 *)(v0 + 464);
  uint64_t v2 = *(void *)(v0 + 304);

  sub_1000D5C68(v2, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v4 = *(void *)(v0 + 400);
  if (v1 == 1)
  {
    uint64_t v5 = *(void *)(v0 + 256);
    uint64_t v6 = *(void *)(v0 + 56);
    sub_1000D5BA0(*(void *)(v0 + 288), v6);
    uint64_t v7 = v6 + *(int *)(v5 + 40);
    sub_10000C5E0(*(void *)v7, *(void *)(v7 + 8));
    *(void *)uint64_t v7 = v3;
    *(void *)(v7 + 8) = v4;
  }
  else
  {
    sub_10000C5E0(*(void *)(v0 + 392), *(void *)(v0 + 400));
    sub_1000D5BA0(*(void *)(v0 + 288), *(void *)(v0 + 56));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1000CB7A0()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000CB8B8, 0, 0);
}

uint64_t sub_1000CB8B8()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderAuthenticationManager successfully cleaned up existing certificate.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[22];
  uint64_t v6 = v0[23];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[54] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000CB9F0;
  uint64_t v8 = v0[34];
  uint64_t v9 = v0[8];
  return sub_1000D1DCC(v8, v9);
}

uint64_t sub_1000CB9F0()
{
  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1000CCA44;
  }
  else {
    os_log_type_t v2 = sub_1000CBB04;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000CBB04()
{
  uint64_t v1 = (void *)(v0[9] + v0[52]);
  static DaemonSignposts.MobileDocumentReader.storeSession.getter();
  DIPSignpost.init(_:)();
  sub_10000C728(v1, v1[3]);
  os_log_type_t v2 = (void *)swift_task_alloc();
  v0[56] = v2;
  *os_log_type_t v2 = v0;
  v2[1] = sub_1000CBBD8;
  uint64_t v3 = v0[34];
  return sub_10012D4B4(v3);
}

uint64_t sub_1000CBBD8()
{
  *(void *)(*(void *)v1 + 456) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1000CBEC8;
  }
  else {
    os_log_type_t v2 = sub_1000CBCEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000CBCEC()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[34];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v5 = v0[16];
  sub_1000D5C04(v2, v0[7]);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_1000D5C68(v2, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  sub_1000D5C68(v1, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000CBEC8()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[34];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v5 = v0[16];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_1000D5C68(v2, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  sub_1000D5C68(v1, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000CC1B4()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v50 = v0[10];
  swift_getErrorValue();
  swift_errorRetain();
  Error.dipErrorCode.getter();
  unsigned int v6 = enum case for DIPError.Code.documentReaderSessionExpired(_:);
  uint64_t v48 = *(void (**)(uint64_t, void, uint64_t))(v2 + 104);
  v48(v4, enum case for DIPError.Code.documentReaderSessionExpired(_:), v1);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v1);
  uint64_t v7 = v5 + *(int *)(v50 + 48);
  sub_100048D6C(v3, v5, &qword_100723600);
  sub_100048D6C(v4, v7, &qword_100723600);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  int v9 = v8(v5, 1, v1);
  uint64_t v10 = v0[19];
  if (v9 != 1)
  {
    sub_100048D6C(v0[11], v0[12], &qword_100723600);
    if (v8(v7, 1, v10) != 1)
    {
      unsigned int v51 = v6;
      uint64_t v17 = v0[20];
      uint64_t v16 = v0[21];
      uint64_t v18 = v0[19];
      uint64_t v20 = v0[13];
      uint64_t v19 = v0[14];
      uint64_t v21 = v0[12];
      uint64_t v47 = v0[11];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v16, v7, v18);
      sub_1000D7A10(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v23(v16, v18);
      sub_10000C6CC(v20, &qword_100723600);
      sub_10000C6CC(v19, &qword_100723600);
      v23(v21, v18);
      sub_10000C6CC(v47, &qword_100723600);
      swift_errorRelease();
      if (v22) {
        goto LABEL_8;
      }
LABEL_14:
      uint64_t v36 = v0[23];
      uint64_t v37 = v0[24];
      uint64_t v38 = v0[22];
      defaultLogger()();
      DIPLogError(_:message:log:)();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
      goto LABEL_15;
    }
    uint64_t v13 = v0[19];
    uint64_t v12 = v0[20];
    uint64_t v14 = v0[14];
    uint64_t v15 = v0[12];
    sub_10000C6CC(v0[13], &qword_100723600);
    sub_10000C6CC(v14, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v13);
LABEL_6:
    sub_10000C6CC(v0[11], &qword_100722D90);
    swift_errorRelease();
    goto LABEL_14;
  }
  uint64_t v11 = v0[14];
  sub_10000C6CC(v0[13], &qword_100723600);
  sub_10000C6CC(v11, &qword_100723600);
  if (v8(v7, 1, v10) != 1) {
    goto LABEL_6;
  }
  unsigned int v51 = v6;
  sub_10000C6CC(v0[11], &qword_100723600);
  swift_errorRelease();
LABEL_8:
  MobileDocumentReaderConfiguration.merchantServerAccessToken.getter();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  if (v25)
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "MobileDocumentReaderAuthenticationManager found stored session for token that is expired. A new token must be created.", v28, 2u);
      swift_slowDealloc();
    }
    uint64_t v49 = v0[38];
    uint64_t v29 = v0[26];
    uint64_t v31 = v0[22];
    uint64_t v30 = v0[23];
    uint64_t v32 = v0[21];
    uint64_t v33 = v0[19];

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    v48(v32, v51, v33);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_1000D5C68(v49, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = (uint64_t (*)(void))v0[1];
    return v34();
  }
  defaultLogger()();
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "MobileDocumentReaderAuthenticationManager found stored session for tokenless that is expired. Creating new one.", v46, 2u);
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[23] + 8))(v0[25], v0[22]);
LABEL_15:
  uint64_t v39 = v0[9];
  uint64_t v40 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
  v0[52] = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
  sub_10000C728((void *)(v39 + v40), *(void *)(v39 + v40 + 24));
  uint64_t v41 = (void *)swift_task_alloc();
  v0[53] = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_1000CB7A0;
  uint64_t v43 = v0[39];
  uint64_t v42 = v0[40];
  return sub_10012E390(v43, v42);
}

uint64_t sub_1000CCA44()
{
  sub_1000D5C68(v0[38], (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000CCCDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v157 = a1;
  uint64_t v166 = type metadata accessor for Logger();
  uint64_t v158 = *(void *)(v166 - 8);
  uint64_t v2 = __chkstk_darwin(v166);
  uint64_t v156 = (char *)v151 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v155 = (char *)v151 - v5;
  __chkstk_darwin(v4);
  uint64_t v154 = (char *)v151 - v6;
  uint64_t v7 = sub_100007764((uint64_t *)&unk_1007264F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v163 = (char *)v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v164 = *(void *)(v9 - 8);
  uint64_t v165 = v9;
  __chkstk_darwin(v9);
  uint64_t v161 = (char *)v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = (void *)type metadata accessor for DIPError.Code();
  unint64_t v11 = *(v178 - 1);
  __chkstk_darwin(v178);
  uint64_t v173 = (char *)v151 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100720AE0);
  __chkstk_darwin(v13 - 8);
  uint64_t v168 = (char *)v151 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for BundleRecord.RecordType();
  unint64_t v169 = *(void *)(v15 - 8);
  unint64_t v170 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v160 = (char *)v151 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v159 = (char *)v151 - v19;
  __chkstk_darwin(v18);
  uint64_t v167 = (char *)v151 - v20;
  uint64_t v21 = type metadata accessor for BundleRecord();
  uint64_t v171 = *(void *)(v21 - 8);
  uint64_t v172 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)v151 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  os_log_type_t v27 = (char *)v151 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)v151 - v28;
  sub_10000C728((void *)(v1 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_bundleRecordFetcher), *(void *)(v1 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_bundleRecordFetcher + 24));
  uint64_t v30 = v1 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_auditToken;
  AuditToken.wrapped.getter();
  unint64_t v31 = v174;
  dispatch thunk of BundleRecordFetching.record(withAuditToken:)();
  if (v31)
  {
    (*(void (**)(char *, void, void *))(v11 + 104))(v173, enum case for DIPError.Code.internalError(_:), v178);
LABEL_28:
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  uint64_t v32 = v168;
  uint64_t v33 = v24;
  unint64_t v174 = v11;
  uint64_t v152 = v30;
  v151[1] = 0;
  uint64_t v162 = v27;
  uint64_t v34 = v167;
  BundleRecord.recordType.getter();
  unint64_t v35 = v169;
  unint64_t v36 = v170;
  int v37 = (*(uint64_t (**)(char *, unint64_t))(v169 + 88))(v34, v170);
  uint64_t v38 = enum case for BundleRecord.RecordType.application(_:);
  uint64_t v153 = v29;
  if (v37 == enum case for BundleRecord.RecordType.application(_:))
  {
    uint64_t v39 = v171;
    (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v162, v29, v172);
  }
  else
  {
    unint64_t v56 = v35;
    uint64_t v57 = v34;
    uint64_t v58 = v171;
    uint64_t v59 = v162;
    if (v37 != enum case for BundleRecord.RecordType.applicationExtension(_:))
    {
      uint64_t v67 = v171;
      uint64_t v69 = v173;
      unint64_t v68 = v174;
      if (v37 != enum case for BundleRecord.RecordType.unknown(_:)) {
        (*(void (**)(char *, unint64_t))(v56 + 8))(v57, v36);
      }
      os_log_type_t v70 = *(void (**)(char *, void, void *))(v68 + 104);
      uint64_t v71 = v178;
      v70(v69, enum case for DIPError.Code.documentReaderUnsupportedBundleType(_:), v178);
      unint64_t v174 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v153, v172);
      v70(v69, enum case for DIPError.Code.internalError(_:), v71);
      goto LABEL_28;
    }
    uint64_t v60 = (uint64_t)v32;
    BundleRecord.containingBundleRecord.getter();
    uint64_t v61 = v172;
    int v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48))(v32, 1, v172);
    uint64_t v63 = v58;
    if (v62 == 1)
    {
      sub_10000C6CC(v60, &qword_100720AE0);
      uint64_t v64 = v173;
      uint64_t v65 = *(void (**)(char *, void, void *))(v174 + 104);
      uint64_t v66 = v178;
      v65(v173, enum case for DIPError.Code.documentReaderUnsupportedBundleType(_:), v178);
      unint64_t v174 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v153, v61);
      v65(v64, enum case for DIPError.Code.internalError(_:), v66);
      goto LABEL_28;
    }
    uint64_t v167 = *(char **)(v58 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v167)(v33, v60, v61);
    uint64_t v84 = v159;
    uint64_t v168 = v33;
    BundleRecord.recordType.getter();
    unint64_t v85 = v56;
    uint64_t v86 = *(void (**)(char *, uint64_t, unint64_t))(v56 + 104);
    uint64_t v87 = v160;
    v86(v160, v38, v36);
    char v88 = static BundleRecord.RecordType.== infix(_:_:)();
    uint64_t v89 = *(void (**)(char *, unint64_t))(v85 + 8);
    v89(v87, v36);
    v89(v84, v36);
    if ((v88 & 1) == 0)
    {
      uint64_t v107 = v173;
      uint64_t v108 = *(void (**)(char *, void, void *))(v174 + 104);
      uint64_t v109 = v172;
      v108(v173, enum case for DIPError.Code.unexpectedDeviceState(_:), v178);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      uint64_t v110 = *(void (**)(char *, uint64_t))(v171 + 8);
      v110(v168, v109);
      uint64_t v111 = v109;
      uint64_t v112 = v107;
      uint64_t v113 = v178;
      v110(v153, v111);
      v108(v112, enum case for DIPError.Code.internalError(_:), v113);
      goto LABEL_28;
    }
    ((void (*)(char *, char *, uint64_t))v167)(v59, v168, v172);
    uint64_t v39 = v171;
  }
  uint64_t v40 = BundleRecord.applicationIdentifier.getter();
  uint64_t v42 = v166;
  if (!v41)
  {
    uint64_t v72 = v173;
    unint64_t v174 = *(void *)(v174 + 104);
    uint64_t v73 = v178;
    ((void (*)(char *, void, void *))v174)(v173, enum case for DIPError.Code.documentReaderIdentifiersMissing(_:), v178);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    os_log_type_t v74 = *(void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v75 = v172;
    v74(v162, v172);
    uint64_t v76 = v75;
    uint64_t v77 = v72;
    uint64_t v78 = (void (*)(char *, void, void *))v174;
    v74(v153, v76);
    v78(v77, enum case for DIPError.Code.internalError(_:), v73);
    goto LABEL_28;
  }
  unint64_t v43 = v40;
  unint64_t v44 = v41;
  uint64_t v45 = BundleRecord.bundleIdentifier.getter();
  if (!v46)
  {
    swift_bridgeObjectRelease();
    uint64_t v52 = *(void (**)(char *, void, void *))(v174 + 104);
    uint64_t v79 = v39;
    unsigned int v80 = v173;
    char v53 = v178;
    v52(v173, enum case for DIPError.Code.documentReaderIdentifiersMissing(_:), v178);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v54 = *(void (**)(char *, uint64_t))(v79 + 8);
    uint64_t v81 = v172;
    v54(v162, v172);
    uint64_t v82 = v153;
    uint64_t v83 = v81;
LABEL_27:
    v54(v82, v83);
    v52(v80, enum case for DIPError.Code.internalError(_:), v53);
    goto LABEL_28;
  }
  uint64_t v47 = (char *)v45;
  unint64_t v169 = v46;
  unint64_t v170 = v44;
  uint64_t v48 = (uint64_t)v163;
  BundleRecord.installationIdentifier.getter();
  uint64_t v50 = v164;
  uint64_t v49 = v165;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v48, 1, v165) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v48, (uint64_t *)&unk_1007264F0);
    unsigned int v51 = v173;
    uint64_t v52 = *(void (**)(char *, void, void *))(v174 + 104);
    char v53 = v178;
    v52(v173, enum case for DIPError.Code.documentReaderIdentifiersMissing(_:), v178);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v54 = *(void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v55 = v162;
LABEL_26:
    uint64_t v115 = v172;
    v54(v55, v172);
    uint64_t v82 = v153;
    uint64_t v83 = v115;
    unsigned int v80 = v51;
    goto LABEL_27;
  }
  uint64_t v90 = v161;
  uint64_t v168 = *(char **)(v50 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v168)(v161, v48, v49);
  uint64_t v91 = BundleRecord.teamIdentifier.getter();
  if (!v92)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v114 = v173;
    uint64_t v52 = *(void (**)(char *, void, void *))(v174 + 104);
    v52(v173, enum case for DIPError.Code.documentReaderIdentifiersMissing(_:), v178);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    unsigned int v51 = v114;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v90, v165);
    uint64_t v54 = *(void (**)(char *, uint64_t))(v171 + 8);
    uint64_t v55 = v162;
    char v53 = v178;
    goto LABEL_26;
  }
  uint64_t v163 = v92;
  uint64_t v164 = v50 + 32;
  uint64_t v173 = (char *)v91;
  unint64_t v174 = v43;
  uint64_t v178 = self;
  id v93 = [v178 standardUserDefaults];
  v94._countAndFlagsBits = 0xD00000000000003CLL;
  v94._object = (void *)0x8000000100634000;
  Swift::String_optional v95 = NSUserDefaults.internalString(forKey:)(v94);

  uint64_t v167 = v47;
  if (v95.value._object)
  {
    Swift::String_optional v175 = v95;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
    unint64_t v96 = v177;
    uint64_t v97 = v157;
    uint64_t v98 = v171;
    uint64_t v99 = v42;
    if (v177)
    {
      uint64_t v100 = v176;
      swift_bridgeObjectRelease();
      uint64_t v101 = v154;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v102 = Logger.logObject.getter();
      os_log_type_t v103 = static os_log_type_t.debug.getter();
      BOOL v104 = os_log_type_enabled(v102, v103);
      unint64_t v174 = v100;
      if (v104)
      {
        uint64_t v105 = (uint8_t *)swift_slowAlloc();
        uint64_t v176 = swift_slowAlloc();
        *(_DWORD *)uint64_t v105 = 136315138;
        swift_bridgeObjectRetain();
        v175.value._countAndFlagsBits = sub_100110D58(v100, v96, &v176);
        uint64_t v106 = v158;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v102, v103, "MobileDocumentReaderAuthenticationManager using override applicationIdentifier %s for storing and fetching terminal authentication certificates.", v105, 0xCu);
        swift_arrayDestroy();
        uint64_t v99 = v166;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v106 + 8))(v154, v99);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v106 = v158;
        (*(void (**)(char *, uint64_t))(v158 + 8))(v101, v99);
      }
      unint64_t v170 = v96;
      uint64_t v98 = v171;
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v97 = v157;
    uint64_t v98 = v171;
    uint64_t v99 = v42;
  }
  uint64_t v106 = v158;
LABEL_33:
  id v117 = [v178 standardUserDefaults];
  v118._countAndFlagsBits = 0xD000000000000037;
  v118._object = (void *)0x8000000100634040;
  Swift::String_optional v119 = NSUserDefaults.internalString(forKey:)(v118);

  uint64_t v120 = v152;
  if (v119.value._object)
  {
    Swift::String_optional v175 = v119;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
    unint64_t v121 = v177;
    if (v177)
    {
      uint64_t v122 = v176;
      swift_bridgeObjectRelease();
      uint64_t v123 = v155;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v124 = Logger.logObject.getter();
      os_log_type_t v125 = static os_log_type_t.debug.getter();
      BOOL v126 = os_log_type_enabled(v124, v125);
      uint64_t v167 = (char *)v122;
      if (v126)
      {
        uint64_t v127 = (uint8_t *)swift_slowAlloc();
        uint64_t v176 = swift_slowAlloc();
        *(_DWORD *)uint64_t v127 = 136315138;
        swift_bridgeObjectRetain();
        v175.value._countAndFlagsBits = sub_100110D58(v122, v121, &v176);
        uint64_t v106 = v158;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v124, v125, "MobileDocumentReaderAuthenticationManager using override bundleIdentifier %s for fetching terminal authentication certificates.", v127, 0xCu);
        swift_arrayDestroy();
        uint64_t v99 = v166;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v106 + 8))(v155, v99);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v106 + 8))(v123, v99);
      }
      unint64_t v169 = v121;
      uint64_t v98 = v171;
      uint64_t v120 = v152;
    }
  }
  id v128 = [v178 standardUserDefaults];
  v129._countAndFlagsBits = 0xD000000000000035;
  v129._object = (void *)0x8000000100634080;
  Swift::String_optional v130 = NSUserDefaults.internalString(forKey:)(v129);

  if (v130.value._object
    && (v175 = v130, sub_1000D5D70(), Collection.nilIfEmpty.getter(), swift_bridgeObjectRelease(), (unint64_t v131 = v177) != 0))
  {
    uint64_t v132 = v176;
    swift_bridgeObjectRelease();
    uint64_t v133 = v156;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v134 = Logger.logObject.getter();
    os_log_type_t v135 = static os_log_type_t.debug.getter();
    BOOL v136 = os_log_type_enabled(v134, v135);
    uint64_t v137 = v161;
    uint64_t v173 = (char *)v132;
    if (v136)
    {
      uint64_t v138 = (uint8_t *)swift_slowAlloc();
      uint64_t v176 = swift_slowAlloc();
      *(_DWORD *)uint64_t v138 = 136315138;
      swift_bridgeObjectRetain();
      v175.value._countAndFlagsBits = sub_100110D58(v132, v131, &v176);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v134, v135, "MobileDocumentReaderAuthenticationManager using override teamIdentifier %s for fetching terminal authentication certificates.", v138, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v158 + 8))(v156, v166);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v106 + 8))(v133, v99);
    }
    uint64_t v142 = v172;
    uint64_t v143 = *(void (**)(char *, uint64_t))(v171 + 8);
    v143(v162, v172);
    v143(v153, v142);
    uint64_t v141 = (char *)v131;
    uint64_t v120 = v152;
    uint64_t v97 = v157;
  }
  else
  {
    uint64_t v139 = *(void (**)(char *, uint64_t))(v98 + 8);
    uint64_t v140 = v172;
    v139(v162, v172);
    v139(v153, v140);
    uint64_t v137 = v161;
    uint64_t v141 = v163;
  }
  uint64_t v144 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 16))(v97, v120, v144);
  uint64_t v145 = (int *)type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v168)(v97 + v145[7], v137, v165);
  uint64_t v146 = (unint64_t *)(v97 + v145[5]);
  unint64_t v147 = v170;
  *uint64_t v146 = v174;
  v146[1] = v147;
  uint64_t v148 = (void *)(v97 + v145[6]);
  unint64_t v149 = v169;
  *uint64_t v148 = v167;
  v148[1] = v149;
  uint64_t v150 = (char **)(v97 + v145[8]);
  *uint64_t v150 = v173;
  v150[1] = v141;
  return result;
}

uint64_t sub_1000CE59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
  v4[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Milestone();
  v4[21] = v7;
  v4[22] = *(void *)(v7 - 8);
  v4[23] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v4[24] = v8;
  v4[25] = *(void *)(v8 - 8);
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  sub_100007764(&qword_100722D70);
  v4[28] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  v4[29] = v9;
  v4[30] = *(void *)(v9 - 8);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[35] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPSignpost();
  v4[36] = v10;
  v4[37] = *(void *)(v10 - 8);
  v4[38] = swift_task_alloc();
  return _swift_task_switch(sub_1000CE900, 0, 0);
}

uint64_t sub_1000CE900()
{
  id v1 = [self standardUserDefaults];
  v2._object = (void *)0x8000000100633950;
  v2._countAndFlagsBits = 0xD000000000000032;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    sub_1000D4354(*(char **)(v0 + 64));
    (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 240) + 56))(*(void *)(v0 + 64), 0, 1, *(void *)(v0 + 232));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 88);
    static DaemonSignposts.MobileDocumentReader.sessionStatus.getter();
    DIPSignpost.init(_:)();
    sub_10000C728((void *)(v4 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage), *(void *)(v4 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage + 24));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1000CED34;
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 80);
    return sub_10012C4F8(v6, v7, v8);
  }
}

uint64_t sub_1000CED34()
{
  *(void *)(*(void *)v1 + 320) = v0;
  swift_task_dealloc();
  if (v0) {
    Swift::String v2 = sub_1000CFE44;
  }
  else {
    Swift::String v2 = sub_1000CEE48;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000CEE48()
{
  uint64_t v116 = v0;
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[28];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v10 = v0[33];
    uint64_t v9 = v0[34];
    sub_1000D5BA0(v3, v9);
    defaultLogger()();
    sub_1000D5C04(v9, v10);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = v0[33];
    if (v13)
    {
      uint64_t v108 = v0[27];
      uint64_t v102 = v0[25];
      uint64_t v104 = v0[24];
      uint64_t v16 = v0[9];
      unint64_t v15 = v0[10];
      uint64_t v17 = swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_bridgeObjectRetain();
      v0[6] = sub_100110D58(v16, v15, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2080;
      type metadata accessor for SecCertificate(0);
      Array<A>.base64EncodedStrings()();
      uint64_t v18 = Array.description.getter();
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      v0[7] = sub_100110D58(v18, v20, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000D5C68(v14, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "MobileDocumentReaderAuthenticationManager found certificate for sessionIdentifier %s. Certificate Chain: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
      v21(v108, v104);
    }
    else
    {
      uint64_t v22 = v0[27];
      uint64_t v23 = v0[24];
      uint64_t v24 = v0[25];
      swift_bridgeObjectRelease_n();
      sub_1000D5C68(v14, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);

      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v21(v22, v23);
    }
    uint64_t v25 = v0[40];
    uint64_t v27 = v0[22];
    uint64_t v26 = v0[23];
    uint64_t v29 = v0[20];
    uint64_t v28 = v0[21];
    static MobileDocumentReaderMilestone.prepareCertificateFound.getter();
    Milestone.log()();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    sub_1000CCCDC(v29);
    if (v25)
    {
      uint64_t v31 = v0[37];
      uint64_t v30 = v0[38];
      uint64_t v32 = v0[36];
      sub_1000D5C68(v0[34], (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
LABEL_25:
      (*(void (**)(void, void, void))(v0[13] + 104))(v0[14], enum case for DIPError.Code.internalError(_:), v0[12]);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v8 = (uint64_t (*)(void))v0[1];
      goto LABEL_26;
    }
    uint64_t v33 = v0[34];
    uint64_t v35 = v0[19];
    uint64_t v34 = v0[20];
    unint64_t v36 = (uint64_t *)(v34 + *(int *)(v35 + 20));
    uint64_t v37 = *v36;
    uint64_t v38 = v36[1];
    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[16] + 16);
    v39(v0[18], v34 + *(int *)(v35 + 28), v0[15]);
    if (*(void *)(v33 + 16) == v37 && *(void *)(v33 + 24) == v38
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      if (static UUID.== infix(_:_:)())
      {
        uint64_t v40 = v0[34];
        uint64_t v41 = v0[29];
        swift_bridgeObjectRelease();
        unint64_t v42 = *(void *)(v40 + *(int *)(v41 + 28));
        if (v42 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t result = _CocoaArrayWrapper.endIndex.getter();
          if (result) {
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t result = swift_bridgeObjectRetain();
          if (v43)
          {
LABEL_15:
            if ((v42 & 0xC000000000000001) != 0)
            {
              id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (!*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                return result;
              }
              id v45 = *(id *)(v42 + 32);
            }
            unint64_t v46 = v45;
            swift_bridgeObjectRelease();
            id v47 = v46;
            sub_1000D4D20(v46);
            uint64_t v48 = v0[37];
            uint64_t v49 = v0[38];
            uint64_t v113 = v0[36];
            uint64_t v50 = v0[34];
            uint64_t v86 = v0[30];
            uint64_t v111 = v0[29];
            uint64_t v106 = v0[20];
            uint64_t v87 = v0[18];
            uint64_t v89 = v0[15];
            uint64_t v88 = v0[16];
            uint64_t v90 = v0[8];

            (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
            sub_1000D5C68(v106, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
            sub_1000D5BA0(v50, v90);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v90, 0, 1, v111);
            DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
            (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v113);
            goto LABEL_3;
          }
        }
        uint64_t v79 = v0[37];
        uint64_t v80 = v0[38];
        uint64_t v112 = v0[34];
        uint64_t v114 = v0[36];
        uint64_t v103 = v0[18];
        uint64_t v107 = v0[20];
        uint64_t v92 = v0[15];
        uint64_t v91 = v0[16];
        uint64_t v93 = v0[13];
        uint64_t v94 = v0[14];
        uint64_t v95 = v0[12];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t))(v93 + 104))(v94, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v95);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v103, v92);
        sub_1000D5C68(v107, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
        uint64_t v85 = v112;
LABEL_24:
        sub_1000D5C68(v85, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v80, v114);
        goto LABEL_25;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v100 = v21;
    uint64_t v51 = v0[34];
    uint64_t v52 = v0[32];
    uint64_t v109 = v0[31];
    uint64_t v54 = v0[17];
    uint64_t v53 = v0[18];
    unint64_t v55 = v38;
    uint64_t v56 = v0[15];
    defaultLogger()();
    uint64_t v57 = v56;
    unint64_t v58 = v55;
    v39(v54, v53, v57);
    sub_1000D5C04(v51, v52);
    sub_1000D5C04(v51, v109);
    swift_bridgeObjectRetain();
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.debug.getter();
    uint64_t v110 = v59;
    BOOL v61 = os_log_type_enabled(v59, v60);
    uint64_t v63 = v0[31];
    uint64_t v62 = v0[32];
    if (v61)
    {
      os_log_type_t type = v60;
      uint64_t v98 = v0[25];
      uint64_t v99 = v0[24];
      uint64_t v101 = v0[26];
      uint64_t v65 = v0[16];
      uint64_t v64 = v0[17];
      uint64_t v96 = v0[15];
      unint64_t v66 = v58;
      uint64_t v67 = swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136315906;
      swift_bridgeObjectRetain();
      v0[2] = sub_100110D58(v37, v66, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v67 + 12) = 2080;
      uint64_t v68 = UUID.uuidString.getter();
      v0[3] = sub_100110D58(v68, v69, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v105(v64, v96);
      *(_WORD *)(v67 + 22) = 2080;
      uint64_t v70 = *(void *)(v62 + 16);
      unint64_t v71 = *(void *)(v62 + 24);
      swift_bridgeObjectRetain();
      v0[4] = sub_100110D58(v70, v71, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000D5C68(v62, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
      *(_WORD *)(v67 + 32) = 2080;
      sub_1000D7A10((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = sub_100110D58(v72, v73, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000D5C68(v63, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
      _os_log_impl((void *)&_mh_execute_header, v110, type, "MobileDocumentReaderAuthenticationManager found mismatch between calling app identifiers %s, %s and stored session app identifiers %s, %s", (uint8_t *)v67, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v101, v99);
    }
    else
    {
      uint64_t v74 = v0[26];
      uint64_t v75 = v0[24];
      uint64_t v77 = v0[16];
      uint64_t v76 = v0[17];
      uint64_t v78 = v0[15];
      swift_bridgeObjectRelease_n();
      uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
      v105(v76, v78);
      sub_1000D5C68(v62, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
      sub_1000D5C68(v63, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);

      v100(v74, v75);
    }
    uint64_t v79 = v0[37];
    uint64_t v80 = v0[38];
    uint64_t v114 = v0[36];
    uint64_t v81 = v0[34];
    uint64_t v82 = v0[20];
    uint64_t v83 = v0[18];
    uint64_t v84 = v0[15];
    (*(void (**)(void, void, void))(v0[13] + 104))(v0[14], enum case for DIPError.Code.documentReaderSessionAppMismatch(_:), v0[12]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v105(v83, v84);
    sub_1000D5C68(v82, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    uint64_t v85 = v81;
    goto LABEL_24;
  }
  uint64_t v5 = v0[37];
  uint64_t v4 = v0[38];
  uint64_t v6 = v0[36];
  uint64_t v7 = v0[8];
  sub_10000C6CC(v3, &qword_100722D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
LABEL_3:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
LABEL_26:
  return v8();
}

uint64_t sub_1000CFE44()
{
  uint64_t v2 = v0[37];
  uint64_t v1 = v0[38];
  uint64_t v3 = v0[36];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(void, void, void))(v0[13] + 104))(v0[14], enum case for DIPError.Code.internalError(_:), v0[12]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000D00C4(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  uint64_t v4 = type metadata accessor for MobileDocumentReaderConfiguration();
  v3[17] = v4;
  v3[18] = *(void *)(v4 - 8);
  v3[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[20] = v5;
  v3[21] = *(void *)(v5 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v3[29] = v6;
  v3[30] = *(void *)(v6 - 8);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  v3[34] = v7;
  v3[35] = *(void *)(v7 - 8);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  return _swift_task_switch(sub_1000D0350, 0, 0);
}

uint64_t sub_1000D0350()
{
  uint64_t v84 = v0;
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v1 + *(int *)(*(void *)(v0 + 272) + 44) + 8);
  sub_1000D5C04(v1, *(void *)(v0 + 336));
  uint64_t v3 = *(void *)(v0 + 336);
  if (v2)
  {
    sub_1000D5C68(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    goto LABEL_7;
  }
  uint64_t v4 = (uint64_t *)(v3 + *(int *)(*(void *)(v0 + 272) + 40));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  sub_1000338D4(*v4, v6);
  sub_1000D5C68(v3, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  if (v6 >> 60 != 15)
  {
    sub_10000C5E0(v5, v6);
LABEL_7:
    uint64_t v26 = *(void *)(v0 + 296);
    uint64_t v27 = *(void *)(v0 + 120);
    defaultLogger()();
    sub_1000D5C04(v27, v26);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = *(uint64_t **)(v0 + 296);
    uint64_t v32 = *(void *)(v0 + 184);
    uint64_t v34 = *(void *)(v0 + 160);
    uint64_t v33 = *(void *)(v0 + 168);
    if (v30)
    {
      uint64_t v82 = *(void *)(v0 + 184);
      uint64_t v80 = *(void *)(v0 + 160);
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v36 = *v31;
      unint64_t v37 = v31[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = sub_100110D58(v36, v37, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000D5C68((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "MobileDocumentReaderAuthenticationManager can only refresh tokenless sessions, returning existing session for sessionIdentifier %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v82, v80);
    }
    else
    {
      sub_1000D5C68(*(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    }
LABEL_10:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 280) + 56))(*(void *)(v0 + 112), 1, 1, *(void *)(v0 + 272));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
    return v38();
  }
  uint64_t v8 = *(void *)(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v10 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 232);
  uint64_t v12 = *(void *)(v0 + 240);
  uint64_t v13 = *(void *)(v0 + 120);
  dispatch thunk of static DateProvider.now.getter();
  double v14 = sub_100532414();
  defaultLogger()();
  sub_1000D5C04(v13, v7);
  sub_1000D5C04(v13, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v9, v11);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v19 = *(void *)(v0 + 320);
  uint64_t v18 = *(void *)(v0 + 328);
  if (v17)
  {
    uint64_t v75 = *(void *)(v0 + 256);
    uint64_t v76 = *(void *)(v0 + 240);
    uint64_t v74 = *(void *)(v0 + 232);
    uint64_t v77 = *(void *)(v0 + 168);
    uint64_t v78 = *(void *)(v0 + 160);
    uint64_t v79 = *(void *)(v0 + 224);
    uint64_t v20 = swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 134218498;
    *(double *)(v0 + 88) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2080;
    sub_1000D7A10((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 96) = sub_100110D58(v21, v22, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000D5C68(v18, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    *(_WORD *)(v20 + 22) = 2048;
    Date.timeIntervalSince(_:)();
    *(void *)(v0 + 104) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000D5C68(v19, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
    v24(v75, v74);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "MobileDocumentReaderAuthenticationManager got certificate refresh threshold = %f; session expiration is %s (%f seconds from now)",
      (uint8_t *)v20,
      0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    v25(v79, v78);
  }
  else
  {
    uint64_t v40 = v15;
    uint64_t v41 = *(void *)(v0 + 256);
    uint64_t v42 = *(void *)(v0 + 232);
    uint64_t v43 = *(void *)(v0 + 240);
    uint64_t v81 = *(void *)(v0 + 224);
    uint64_t v45 = *(void *)(v0 + 160);
    uint64_t v44 = *(void *)(v0 + 168);
    sub_1000D5C68(v18, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    sub_1000D5C68(v19, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    unint64_t v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v46(v41, v42);

    uint64_t v24 = v46;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v25(v81, v45);
  }
  *(void *)(v0 + 344) = v24;
  *(void *)(v0 + 352) = v25;
  if (v14 <= 0.0)
  {
    defaultLogger()();
    os_log_type_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "MobileDocumentReaderAuthenticationManager got certificate refresh threshold <= 0, disabling optimistic refresh", v62, 2u);
      swift_slowDealloc();
    }
    uint64_t v63 = *(void *)(v0 + 264);
    uint64_t v64 = *(void *)(v0 + 232);
    uint64_t v65 = *(void *)(v0 + 192);
    uint64_t v66 = *(void *)(v0 + 160);

    v25(v65, v66);
    v24(v63, v64);
    goto LABEL_10;
  }
  uint64_t v48 = *(void *)(v0 + 240);
  uint64_t v47 = *(void *)(v0 + 248);
  uint64_t v49 = *(void *)(v0 + 232);
  Date.addingTimeInterval(_:)();
  char v50 = static Date.< infix(_:_:)();
  *(void *)(v0 + 360) = (v48 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v24(v47, v49);
  if ((v50 & 1) == 0)
  {
    defaultLogger()();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v67, v68))
    {
      unint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "MobileDocumentReaderAuthenticationManager got certificate that is not nearing expiry, will not optimistically refresh", v69, 2u);
      swift_slowDealloc();
    }
    uint64_t v70 = *(void *)(v0 + 264);
    uint64_t v71 = *(void *)(v0 + 232);
    uint64_t v72 = *(void *)(v0 + 200);
    uint64_t v73 = *(void *)(v0 + 160);

    v25(v72, v73);
    v24(v70, v71);
    goto LABEL_10;
  }
  defaultLogger()();
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 134217984;
    *(double *)(v0 + 80) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "MobileDocumentReaderAuthenticationManager got session that will expire in less than  %f seconds from now; optimist"
      "ically refreshing",
      v53,
      0xCu);
    swift_slowDealloc();
  }
  uint64_t v54 = *(void *)(v0 + 216);
  uint64_t v55 = *(void *)(v0 + 160);
  uint64_t v56 = *(void *)(v0 + 168);

  *(void *)(v0 + 368) = (v56 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v25(v54, v55);
  MobileDocumentReaderConfiguration.init(merchantServerAccessToken:userAcceptedTermsAndConditions:)();
  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v57;
  *uint64_t v57 = v0;
  v57[1] = sub_1000D0D6C;
  uint64_t v58 = *(void *)(v0 + 312);
  uint64_t v59 = *(void *)(v0 + 152);
  return sub_1000D1DCC(v58, v59);
}

uint64_t sub_1000D0D6C()
{
  *(void *)(*(void *)v1 + 384) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D19C0;
  }
  else {
    uint64_t v2 = sub_1000D0E80;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D0E80()
{
  uint64_t v2 = (uint64_t *)v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
  v0[49] = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
  sub_10000C728((void *)(v1 + v3), *(void *)(v1 + v3 + 24));
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  unint64_t v6 = (void *)swift_task_alloc();
  v0[50] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_1000D0F40;
  return sub_10012E390(v5, v4);
}

uint64_t sub_1000D0F40()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D103C, 0, 0);
}

uint64_t sub_1000D103C()
{
  uint64_t v1 = (void *)(v0[16] + v0[49]);
  sub_10000C728(v1, v1[3]);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[51] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000D10E8;
  uint64_t v3 = v0[39];
  return sub_10012D4B4(v3);
}

uint64_t sub_1000D10E8()
{
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D1598;
  }
  else {
    uint64_t v2 = sub_1000D11FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D11FC()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[39];
  defaultLogger()();
  sub_1000D5C04(v2, v1);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v23 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[43];
    uint64_t v5 = (uint64_t *)v0[38];
    uint64_t v24 = v0[29];
    uint64_t v25 = v0[33];
    uint64_t v18 = v0[20];
    uint64_t v19 = v0[26];
    uint64_t v20 = v0[18];
    uint64_t v21 = v0[17];
    uint64_t v22 = v0[19];
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 136315138;
    uint64_t v7 = *v5;
    unint64_t v8 = v5[1];
    swift_bridgeObjectRetain();
    v0[9] = sub_100110D58(v7, v8, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000D5C68((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderAuthenticationManager returning refreshed session for sessionIdentifier %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v23(v19, v18);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }
  else
  {
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[43];
    uint64_t v10 = v0[38];
    uint64_t v24 = v0[29];
    uint64_t v25 = v0[33];
    uint64_t v11 = v0[26];
    uint64_t v13 = v0[19];
    uint64_t v12 = v0[20];
    uint64_t v15 = v0[17];
    uint64_t v14 = v0[18];

    sub_1000D5C68(v10, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    v9(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  v26(v25, v24);
  sub_1000D5BA0(v0[39], v0[14]);
  (*(void (**)(void, void, uint64_t, void))(v0[35] + 56))(v0[14], 0, 1, v0[34]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1000D1598()
{
  uint64_t v28 = v0;
  sub_1000D5C68(v0[39], (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[15];
  (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
  defaultLogger()();
  sub_1000D5C04(v2, v1);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v25 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[43];
    uint64_t v5 = (uint64_t *)v0[36];
    uint64_t v23 = v0[29];
    uint64_t v24 = v0[33];
    uint64_t v21 = v0[20];
    uint64_t v22 = v0[22];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v7 = *v5;
    unint64_t v8 = v5[1];
    swift_bridgeObjectRetain();
    v0[5] = sub_100110D58(v7, v8, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000D5C68((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    *(_WORD *)(v6 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v9 = Error.localizedDescription.getter();
    v0[8] = sub_100110D58(v9, v10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderAuthenticationManager optimistic refresh failed for sessionIdentifier %s: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v25(v22, v21);
    uint64_t v12 = v23;
    uint64_t v11 = v24;
  }
  else
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[43];
    uint64_t v14 = v0[36];
    uint64_t v15 = v0[33];
    uint64_t v16 = v0[29];
    uint64_t v17 = v0[22];
    uint64_t v18 = v0[20];

    swift_errorRelease();
    swift_errorRelease();
    sub_1000D5C68(v14, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    swift_errorRelease();
    v13(v17, v18);
    uint64_t v11 = v15;
    uint64_t v12 = v16;
  }
  v26(v11, v12);
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[35] + 56))(v0[14], 1, 1, v0[34]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1000D19C0()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[15];
  (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
  defaultLogger()();
  sub_1000D5C04(v2, v1);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v25 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[43];
    uint64_t v5 = (uint64_t *)v0[36];
    uint64_t v23 = v0[29];
    uint64_t v24 = v0[33];
    uint64_t v21 = v0[20];
    uint64_t v22 = v0[22];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v7 = *v5;
    unint64_t v8 = v5[1];
    swift_bridgeObjectRetain();
    v0[5] = sub_100110D58(v7, v8, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000D5C68((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    *(_WORD *)(v6 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v9 = Error.localizedDescription.getter();
    v0[8] = sub_100110D58(v9, v10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderAuthenticationManager optimistic refresh failed for sessionIdentifier %s: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v25(v22, v21);
    uint64_t v12 = v23;
    uint64_t v11 = v24;
  }
  else
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[43];
    uint64_t v14 = v0[36];
    uint64_t v15 = v0[33];
    uint64_t v16 = v0[29];
    uint64_t v17 = v0[22];
    uint64_t v18 = v0[20];

    swift_errorRelease();
    swift_errorRelease();
    sub_1000D5C68(v14, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    swift_errorRelease();
    v13(v17, v18);
    uint64_t v11 = v15;
    uint64_t v12 = v16;
  }
  v26(v11, v12);
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[35] + 56))(v0[14], 1, 1, v0[34]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1000D1DCC(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v3[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPSignpost();
  v3[18] = v6;
  v3[19] = *(void *)(v6 - 8);
  v3[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v3[21] = v7;
  v3[22] = *(void *)(v7 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v3[28] = v8;
  v3[29] = *(void *)(v8 - 8);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
  v3[33] = swift_task_alloc();
  return _swift_task_switch(sub_1000D20A0, 0, 0);
}

uint64_t sub_1000D20A0()
{
  sub_1000CCCDC(v0[33]);
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v4 = v0[28];
  uint64_t v5 = v0[29];
  uint64_t v6 = (uint64_t *)(v1 + *(int *)(v2 + 20));
  uint64_t v7 = *v6;
  v0[34] = *v6;
  uint64_t v8 = (void *)v6[1];
  v0[35] = v8;
  uint64_t v9 = v1 + *(int *)(v2 + 28);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[36] = v10;
  v0[37] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v10(v3, v9, v4);
  swift_bridgeObjectRetain();
  uint64_t v11 = MobileDocumentReaderConfiguration.merchantServerAccessToken.getter();
  v0[38] = sub_1000D5DC4(v11, v12, v7, v8);
  v0[39] = v13;
  swift_bridgeObjectRelease();
  MobileDocumentReaderConfiguration.merchantServerAccessToken.getter();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    static DaemonSignposts.MobileDocumentReader.sessionIdentityKeyStatus.getter();
    DIPSignpost.init(_:)();
    defaultLogger()();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "MobileDocumentReaderAuthenticationManager token exists, so there must be an identity key stored. Looking up now...", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v19 = v0[26];
    uint64_t v20 = v0[21];
    uint64_t v21 = v0[22];
    uint64_t v22 = v0[10];

    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v0[43] = v23;
    v0[44] = (v21 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v23(v19, v20);
    sub_10000C728((void *)(v22 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage), *(void *)(v22 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage + 24));
    uint64_t v24 = (void *)swift_task_alloc();
    v0[45] = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_1000D26A8;
    uint64_t v25 = v0[31];
    return sub_100128C94(v7, (uint64_t)v8, v25);
  }
  else
  {
    defaultLogger()();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "MobileDocumentReaderAuthenticationManager token does not exist, will create a new identity key if needed.", v29, 2u);
      swift_slowDealloc();
    }
    uint64_t v30 = v0[27];
    uint64_t v31 = v0[21];
    uint64_t v32 = v0[22];

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
    uint64_t v33 = (void *)swift_task_alloc();
    v0[40] = v33;
    *uint64_t v33 = v0;
    v33[1] = sub_1000D24B0;
    return sub_1000C7638();
  }
}

uint64_t sub_1000D24B0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 328) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000D4218;
  }
  else
  {
    *(void *)(v4 + 336) = a1;
    uint64_t v5 = sub_1000D25E8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D25E8()
{
  v0[48] = v0[42];
  uint64_t v1 = v0[10];
  sub_10000C728((void *)(v1 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner), *(void *)(v1 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner + 24));
  uint64_t v2 = v1 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_auditToken;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[49] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000D2DD4;
  return sub_1002A06D4(v2);
}

uint64_t sub_1000D26A8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 368) = a1;
  *(void *)(v3 + 376) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000D2C78;
  }
  else
  {
    uint64_t v4 = sub_1000D27D0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000D27D0()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[14];
  swift_retain();
  dispatch thunk of static DateProvider.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  char IsValid = SecCertificateIsValid();
  swift_release();
  if (IsValid)
  {
    uint64_t v6 = v0[19];
    uint64_t v5 = v0[20];
    uint64_t v7 = v0[18];
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    v0[48] = v0[46];
    uint64_t v8 = v0[10];
    sub_10000C728((void *)(v8 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner), *(void *)(v8 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner + 24));
    uint64_t v9 = v8 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_auditToken;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[49] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1000D2DD4;
    return sub_1002A06D4(v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "MobileDocumentReaderAuthenticationManager stored identity key has an expired attestation certificate. There is no way that the provided token will have the valid readerIdentifier.", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[43];
    uint64_t v27 = v0[31];
    uint64_t v28 = v0[33];
    uint64_t v25 = v0[29];
    uint64_t v26 = v0[28];
    uint64_t v16 = v0[25];
    uint64_t v18 = v0[20];
    uint64_t v17 = v0[21];
    uint64_t v23 = v0[19];
    uint64_t v24 = v0[18];
    uint64_t v19 = v0[12];
    uint64_t v20 = v0[13];
    uint64_t v21 = v0[11];

    v15(v16, v17);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v20, enum case for DIPError.Code.documentReaderExpiredAttestationCertificate(_:), v21);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v18, v24);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
    sub_1000D5C68(v28, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_1000D2C78()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[29];
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1000D5C68(v1, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000D2DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)*v4;
  v5[50] = a1;
  v5[51] = a2;
  v5[52] = a3;
  v5[53] = a4;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D2ED8, 0, 0);
}

uint64_t sub_1000D2ED8()
{
  uint64_t v1 = v0[48];
  sub_10000C728((void *)(v0[10] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_certificateFetcher), *(void *)(v0[10] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_certificateFetcher + 24));
  uint64_t v2 = MobileDocumentReaderConfiguration.merchantServerAccessToken.getter();
  uint64_t v4 = v3;
  v0[54] = v3;
  v0[5] = type metadata accessor for MobileDocumentReaderIdentityKey();
  v0[6] = sub_1000D7A10(&qword_100722DE0, (void (*)(uint64_t))type metadata accessor for MobileDocumentReaderIdentityKey);
  v0[2] = v1;
  swift_retain();
  MobileDocumentReaderConfiguration.userAcceptedTermsAndConditions.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[55] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000D3028;
  uint64_t v6 = v0[52];
  uint64_t v7 = v0[53];
  uint64_t v8 = v0[50];
  uint64_t v9 = v0[51];
  uint64_t v10 = v0[33];
  return sub_1005AB010(v2, v4, v10, v8, v9, v6, v7, (uint64_t)(v0 + 2));
}

uint64_t sub_1000D3028(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 448) = a1;
  *(void *)(v3 + 456) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000D3A90;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v3 + 16);
    uint64_t v4 = sub_1000D3178;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000D3178()
{
  uint64_t v78 = v0;
  unint64_t v1 = *(void *)(v0 + 448);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v74 = *(void *)(v0 + 424);
    unint64_t v50 = *(void *)(v0 + 408);
    uint64_t v65 = *(void *)(v0 + 416);
    uint64_t v51 = *(void *)(v0 + 400);
    uint64_t v52 = *(void *)(v0 + 264);
    uint64_t v76 = *(void *)(v0 + 248);
    uint64_t v53 = *(void *)(v0 + 232);
    uint64_t v67 = *(void *)(v0 + 224);
    uint64_t v55 = *(void *)(v0 + 96);
    uint64_t v54 = *(void *)(v0 + 104);
    uint64_t v56 = *(void *)(v0 + 88);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v55 + 104))(v54, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v56);
    uint64_t v11 = v52;
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1000D79D0(v51, v50, v65, v74);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v76, v67);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_21;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v4 = *(id *)(*(void *)(v0 + 448) + 32);
  }
  *(void *)(v0 + 464) = v4;
  uint64_t v5 = *(void *)(v0 + 456);
  swift_bridgeObjectRelease();
  id v6 = v4;
  sub_1000D4D20(v4);
  *(void *)(v0 + 472) = v5;
  if (v5)
  {
    uint64_t v8 = *(void *)(v0 + 416);
    uint64_t v7 = *(void *)(v0 + 424);
    uint64_t v9 = *(void *)(v0 + 400);
    unint64_t v10 = *(void *)(v0 + 408);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v71 = *(void *)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 224);
    uint64_t v12 = *(void *)(v0 + 232);
    swift_bridgeObjectRelease();

    sub_1000D79D0(v9, v10, v8, v7);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v71, v13);
    goto LABEL_22;
  }

  MobileDocumentReaderConfiguration.merchantServerAccessToken.getter();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (!v15)
  {
    defaultLogger()();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "MobileDocumentReaderAuthenticationManager merchantServerAccessToken is nil, return nil merchantLogo", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = *(void *)(v0 + 192);
    uint64_t v21 = *(void *)(v0 + 168);
    uint64_t v22 = *(void *)(v0 + 176);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    unint64_t v69 = *(char **)(v0 + 64);
    unint64_t v72 = *(void *)(v0 + 448);
    uint64_t v75 = *(void *)(v0 + 472);
    uint64_t v23 = *(void *)(v0 + 384);
    uint64_t v25 = *(void *)(v0 + 304);
    uint64_t v24 = *(void *)(v0 + 312);
    uint64_t v27 = *(void *)(v0 + 272);
    uint64_t v26 = *(void *)(v0 + 280);
    uint64_t v28 = *(void *)(v0 + 240);
    (*(void (**)(uint64_t, void, void))(v0 + 288))(v28, *(void *)(v0 + 248), *(void *)(v0 + 224));
    uint64_t v30 = *(void *)(v23 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob);
    unint64_t v29 = *(void *)(v23 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob + 8);
    swift_bridgeObjectRetain();
    sub_10002CEB0(v30, v29);
    sub_1000338D4(0, 0xF000000000000000);
    sub_10043C544(v25, v24, v27, v26, v28, v72, v30, v29, v69, 0, 0xF000000000000000);
    if (!v75)
    {
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      BOOL v37 = os_log_type_enabled(v35, v36);
      uint64_t v73 = *(void **)(v0 + 464);
      unint64_t v38 = *(void *)(v0 + 312);
      if (v37)
      {
        uint64_t v39 = *(void *)(v0 + 304);
        uint64_t v68 = *(void *)(v0 + 248);
        uint64_t v70 = *(void *)(v0 + 264);
        uint64_t v64 = *(void *)(v0 + 232);
        uint64_t v66 = *(void *)(v0 + 224);
        uint64_t v60 = *(void *)(v0 + 424);
        uint64_t v61 = *(void *)(v0 + 176);
        uint64_t v62 = *(void *)(v0 + 168);
        uint64_t v63 = *(void *)(v0 + 184);
        uint64_t v58 = *(void *)(v0 + 416);
        unint64_t v59 = *(void *)(v0 + 408);
        uint64_t v57 = *(void *)(v0 + 400);
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 56) = sub_100110D58(v39, v38, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "MobileDocumentReaderAuthenticationManager createSession returning sessionIdentifier %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_1000D79D0(v57, v59, v58, v60);

        sub_10000C5E0(0, 0xF000000000000000);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v63, v62);
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v68, v66);
        uint64_t v41 = v70;
      }
      else
      {
        uint64_t v42 = *(void *)(v0 + 264);
        uint64_t v43 = *(void *)(v0 + 248);
        uint64_t v44 = *(void *)(v0 + 224);
        uint64_t v45 = *(void *)(v0 + 232);
        uint64_t v47 = *(void *)(v0 + 176);
        uint64_t v46 = *(void *)(v0 + 184);
        uint64_t v48 = *(void *)(v0 + 168);
        sub_1000D79D0(*(void *)(v0 + 400), *(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 424));

        swift_bridgeObjectRelease_n();
        sub_10000C5E0(0, 0xF000000000000000);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
        uint64_t v41 = v42;
      }
      sub_1000D5C68(v41, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v49 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_23;
    }
    uint64_t v31 = *(void **)(v0 + 464);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v32 = *(void *)(v0 + 248);
    uint64_t v33 = *(void *)(v0 + 224);
    uint64_t v34 = *(void *)(v0 + 232);
    sub_1000D79D0(*(void *)(v0 + 400), *(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 424));
    swift_bridgeObjectRelease();

    sub_10000C5E0(0, 0xF000000000000000);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
LABEL_22:
    sub_1000D5C68(v11, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v49 = *(uint64_t (**)(void))(v0 + 8);
LABEL_23:
    return v49();
  }
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1000D3BF8;
  return sub_1000D6280((uint64_t)v6);
}

uint64_t sub_1000D3A90()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[29];
  sub_1000D79D0(v0[50], v0[51], v0[52], v0[53]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1000D5C68(v1, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000D3BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 488) = a1;
  *(void *)(v3 + 496) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D3CF8, 0, 0);
}

uint64_t sub_1000D3CF8()
{
  uint64_t v51 = v0;
  uint64_t v2 = *(void *)(v0 + 488);
  unint64_t v1 = *(void *)(v0 + 496);
  uint64_t v46 = *(char **)(v0 + 64);
  uint64_t v48 = *(void *)(v0 + 472);
  unint64_t v45 = *(void *)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v43 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 240);
  (*(void (**)(uint64_t, void, void))(v0 + 288))(v7, *(void *)(v0 + 248), *(void *)(v0 + 224));
  uint64_t v8 = v3 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob;
  uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob);
  unint64_t v10 = *(void *)(v8 + 8);
  swift_bridgeObjectRetain();
  sub_10002CEB0(v9, v10);
  sub_1000338D4(v2, v1);
  sub_10043C544(v43, v4, v5, v6, v7, v45, v9, v10, v46, v2, v1);
  if (v48)
  {
    uint64_t v11 = *(void **)(v0 + 464);
    uint64_t v12 = *(void *)(v0 + 264);
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 224);
    uint64_t v14 = *(void *)(v0 + 232);
    sub_1000D79D0(*(void *)(v0 + 400), *(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 424));
    swift_bridgeObjectRelease();

    sub_10000C5E0(v2, v1);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    sub_1000D5C68(v12, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v47 = v2;
    unint64_t v49 = v1;
    defaultLogger()();
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v44 = *(void **)(v0 + 464);
    unint64_t v20 = *(void *)(v0 + 312);
    if (v19)
    {
      uint64_t v21 = *(void *)(v0 + 304);
      uint64_t v41 = *(void *)(v0 + 248);
      uint64_t v42 = *(void *)(v0 + 264);
      uint64_t v39 = *(void *)(v0 + 232);
      uint64_t v40 = *(void *)(v0 + 224);
      uint64_t v35 = *(void *)(v0 + 424);
      uint64_t v36 = *(void *)(v0 + 176);
      uint64_t v37 = *(void *)(v0 + 168);
      uint64_t v38 = *(void *)(v0 + 184);
      uint64_t v33 = *(void *)(v0 + 416);
      unint64_t v34 = *(void *)(v0 + 408);
      uint64_t v32 = *(void *)(v0 + 400);
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = sub_100110D58(v21, v20, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "MobileDocumentReaderAuthenticationManager createSession returning sessionIdentifier %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_1000D79D0(v32, v34, v33, v35);

      sub_10000C5E0(v47, v1);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
      uint64_t v23 = v42;
    }
    else
    {
      uint64_t v24 = *(void *)(v0 + 264);
      uint64_t v25 = *(void *)(v0 + 248);
      uint64_t v26 = *(void *)(v0 + 224);
      uint64_t v27 = *(void *)(v0 + 232);
      uint64_t v29 = *(void *)(v0 + 176);
      uint64_t v28 = *(void *)(v0 + 184);
      uint64_t v30 = *(void *)(v0 + 168);
      sub_1000D79D0(*(void *)(v0 + 400), *(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 424));

      swift_bridgeObjectRelease_n();
      sub_10000C5E0(v47, v49);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
      uint64_t v23 = v24;
    }
    sub_1000D5C68(v23, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v16();
}

uint64_t sub_1000D4218()
{
  uint64_t v1 = v0[33];
  (*(void (**)(void, void))(v0[29] + 8))(v0[31], v0[28]);
  sub_1000D5C68(v1, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

void sub_1000D4354(char *a1@<X8>)
{
  unint64_t v72 = a1;
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v77 = *(void *)(v1 - 8);
  uint64_t v78 = v1;
  __chkstk_darwin(v1);
  uint64_t v79 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  __chkstk_darwin(v3 - 8);
  uint64_t v75 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v70 = *(void *)(v5 - 8);
  uint64_t v71 = v5;
  __chkstk_darwin(v5);
  uint64_t v73 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100720A68);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v74 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v64 - v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v76 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SecKeyRef.KeyClass();
  unint64_t v80 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SecCertificate(0);
  unint64_t v18 = sub_1000D5CC8();
  BOOL v19 = (void *)static NSBundle.internalSettings.getter();
  id v20 = v81;
  uint64_t v21 = (void *)static SecCertificateRef.make(with:in:)();
  if (v20)
  {

    return;
  }
  uint64_t v66 = v11;
  unint64_t v67 = v18;
  uint64_t v68 = v12;
  uint64_t v69 = 0;
  uint64_t v22 = v17;
  unint64_t v23 = v80;
  uint64_t v65 = v14;
  id v81 = v21;

  uint64_t v24 = Data.init(base64Encoded:options:)();
  if (v25 >> 60 != 15)
  {
    unint64_t v26 = v25;
    uint64_t v27 = v24;
    type metadata accessor for SecKey(0);
    unint64_t v28 = v23;
    uint64_t v29 = *(void (**)(char *, void, uint64_t))(v23 + 104);
    uint64_t v30 = v15;
    v29(v22, enum case for SecKeyRef.KeyClass.private(_:), v15);
    uint64_t v31 = v69;
    uint64_t v32 = static SecKeyRef.makeECKey(from:keyClass:)();
    if (v31)
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v15);

      uint64_t v33 = v27;
      unint64_t v34 = v26;
LABEL_7:
      sub_10000C5E0(v33, v34);
      return;
    }
    uint64_t v35 = (void *)v32;
    uint64_t v69 = v27;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v30);
    uint64_t v36 = static NSBundle.internalSettings.getter();
    if (v36)
    {
      uint64_t v37 = (void *)v36;
      uint64_t v38 = v35;
      unint64_t v80 = v26;
      NSString v39 = String._bridgeToObjectiveC()();
      NSString v40 = String._bridgeToObjectiveC()();
      id v41 = [v37 URLForResource:v39 withExtension:v40];

      if (v41)
      {
        uint64_t v42 = (uint64_t)v74;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v43 = 0;
        uint64_t v44 = v79;
        unint64_t v45 = v80;
        uint64_t v47 = v75;
        uint64_t v46 = v76;
        uint64_t v48 = v68;
        uint64_t v49 = (uint64_t)v66;
      }
      else
      {
        uint64_t v43 = 1;
        uint64_t v44 = v79;
        unint64_t v45 = v80;
        uint64_t v47 = v75;
        uint64_t v46 = v76;
        uint64_t v48 = v68;
        uint64_t v49 = (uint64_t)v66;
        uint64_t v42 = (uint64_t)v74;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v42, v43, 1, v48);
      sub_1000D5D08(v42, v49);
      uint64_t v50 = v49;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v49, 1, v48) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v65, v49, v48);
        uint64_t v51 = Data.init(contentsOf:options:)();
        unint64_t v53 = v52;
        uint64_t v54 = v73;
        defaultLogger()();
        uint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v57 = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "MobileDocumentReaderAuthenticationManager using hardcoded reader authentication session.", v57, 2u);
          uint64_t v54 = v73;
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v70 + 8))(v54, v71);
        uint64_t v58 = (uint64_t)v47;
        UUID.init()();
        sub_100007764(&qword_100730C60);
        uint64_t v59 = swift_allocObject();
        *(_OWORD *)(v59 + 16) = xmmword_100613E40;
        id v60 = v81;
        *(void *)(v59 + 32) = v81;
        unint64_t v82 = v59;
        specialized Array._endMutation()();
        unint64_t v61 = v82;
        id v62 = v60;
        id v63 = v38;
        sub_10002CEB0(v51, v53);
        sub_10043C544(0xD00000000000001ALL, 0x8000000100633C90, 0xD00000000000001ELL, 0x8000000100633CB0, v58, v61, (uint64_t)v38, 0x2000000000000000uLL, v72, v51, v53);
        (*(void (**)(char *, uint64_t))(v76 + 8))(v65, v68);

        sub_10000C5F4(v51, v53);
        uint64_t v33 = v69;
        unint64_t v34 = v80;
        goto LABEL_7;
      }
    }
    else
    {
      unint64_t v45 = v26;
      uint64_t v38 = v35;
      uint64_t v50 = (uint64_t)v66;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v66, 1, 1, v68);
      uint64_t v44 = v79;
    }
    sub_10000C6CC(v50, &qword_100720A68);
    (*(void (**)(char *, void, uint64_t))(v77 + 104))(v44, enum case for DIPError.Code.unexpectedDaemonState(_:), v78);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    sub_10000C5E0(v69, v45);
    goto LABEL_15;
  }
  (*(void (**)(char *, void, uint64_t))(v77 + 104))(v79, enum case for DIPError.Code.documentReaderMissingReaderAuthKey(_:), v78);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
LABEL_15:
}

uint64_t sub_1000D4D20(void *a1)
{
  uint64_t v42 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus();
  uint64_t v36 = *(void *)(v5 - 8);
  uint64_t v37 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v8;
  if (a1)
  {
    uint64_t v35 = v2;
    id v17 = a1;
    dispatch thunk of static DateProvider.now.getter();
    Date.timeIntervalSinceReferenceDate.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (SecCertificateIsValid())
    {
      defaultLogger()();
      unint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      BOOL v20 = os_log_type_enabled(v18, v19);
      uint64_t v21 = v40;
      if (v20)
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "MobileDocumentReaderAuthenticationManager successfully validated reader authentication certificate", v22, 2u);
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v32 = v41;
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v12, v32);
    }
    type metadata accessor for DaemonAnalytics();
    uint64_t v24 = enum case for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.certificateExpired(_:);
    uint64_t v25 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v7, v24, v25);
    uint64_t v27 = v36;
    uint64_t v26 = v37;
    (*(void (**)(char *, void, uint64_t))(v36 + 104))(v7, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.invalid(_:), v37);
    static DaemonAnalytics.sendReadDocumentSessionStatus(status:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v26);
    uint64_t v23 = v42;
    NSString v39 = *(void (**)(char *, void, uint64_t))(v35 + 104);
    v39(v4, enum case for DIPError.Code.documentReaderSessionExpired(_:), v42);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    uint64_t v23 = v42;
    NSString v39 = *(void (**)(char *, void, uint64_t))(v2 + 104);
    v39(v4, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v42);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  id v28 = [self standardUserDefaults];
  v29._countAndFlagsBits = 0xD00000000000003BLL;
  v29._object = (void *)0x8000000100633D30;
  Swift::Bool v30 = NSUserDefaults.internalBool(forKey:)(v29);

  if (!v30)
  {
    v39(v4, enum case for DIPError.Code.internalError(_:), v23);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  uint64_t v31 = v38;
  defaultLogger()();
  DIPLogError(_:message:log:)();
  swift_errorRelease();
  uint64_t v12 = v31;
  uint64_t v21 = v40;
  uint64_t v32 = v41;
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v12, v32);
}

uint64_t sub_1000D5508(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000D55CC, 0, 0);
}

uint64_t sub_1000D55CC()
{
  sub_10000C728((void *)(v0[5] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage), *(void *)(v0[5] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D567C;
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  return sub_10012E390(v3, v2);
}

uint64_t sub_1000D567C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D5778, 0, 0);
}

uint64_t sub_1000D5778()
{
  uint64_t v15 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = v0[7];
    uint64_t v12 = v0[6];
    uint64_t v13 = v0[8];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_100110D58(v4, v3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderAuthenticationManager successfully cleaned up session for identifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  }
  else
  {
    uint64_t v7 = v0[7];
    uint64_t v6 = v0[8];
    uint64_t v8 = v0[6];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000D597C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_auditToken;
  uint64_t v2 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_bundleRecordFetcher);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_certificateFetcher);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_logoFetcher);
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_secureElementManager, &qword_100722DF0);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_sessionRefreshThresholdProvider);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner);

  return swift_deallocClassInstance();
}

uint64_t sub_1000D5A94()
{
  return type metadata accessor for MobileDocumentReaderAuthenticationManager();
}

uint64_t type metadata accessor for MobileDocumentReaderAuthenticationManager()
{
  uint64_t result = qword_100722C98;
  if (!qword_100722C98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D5AE8()
{
  uint64_t result = type metadata accessor for AuditToken();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000D5BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D5C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D5C68(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1000D5CC8()
{
  unint64_t result = qword_100722D78;
  if (!qword_100722D78)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100722D78);
  }
  return result;
}

uint64_t sub_1000D5D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100720A68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000D5D70()
{
  unint64_t result = qword_100722D80;
  if (!qword_100722D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100722D80);
  }
  return result;
}

uint64_t sub_1000D5DC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for SHA256();
  uint64_t v31 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SHA256Digest();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::Bool v30 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    *(void *)&long long v32 = a1;
    *((void *)&v32 + 1) = a2;
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = 32;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = a3;
    v15._object = a4;
    String.append(_:)(v15);
  }
  else
  {
    *(void *)&long long v32 = a3;
    *((void *)&v32 + 1) = a4;
    swift_bridgeObjectRetain();
  }
  v16._countAndFlagsBits = 32;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  type metadata accessor for UUID();
  sub_1000D7A10((unint64_t *)&qword_10072ECB0, (void (*)(uint64_t))&type metadata accessor for UUID);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_100146014(v32, *((unint64_t *)&v32 + 1));
  unint64_t v20 = v19;
  sub_1000D7A10(&qword_100722DF8, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  switch(v20 >> 62)
  {
    case 1uLL:
      if (v18 >> 32 < (int)v18) {
        __break(1u);
      }
      sub_10002CEB0(v18, v20);
      sub_10018451C((int)v18, v18 >> 32);
      break;
    case 2uLL:
      uint64_t v29 = v12;
      uint64_t v21 = v11;
      uint64_t v22 = *(void *)(v18 + 16);
      uint64_t v23 = *(void *)(v18 + 24);
      sub_10002CEB0(v18, v20);
      swift_retain();
      swift_retain();
      uint64_t v24 = v23;
      uint64_t v11 = v21;
      uint64_t v12 = v29;
      sub_10018451C(v22, v24);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      *(void *)((char *)&v32 + 6) = 0;
      *(void *)&long long v32 = 0;
      goto LABEL_10;
    default:
      *(void *)&long long v32 = v18;
      WORD4(v32) = v20;
      BYTE10(v32) = BYTE2(v20);
      BYTE11(v32) = BYTE3(v20);
      BYTE12(v32) = BYTE4(v20);
      BYTE13(v32) = BYTE5(v20);
LABEL_10:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_10000C5F4(v18, v20);
  uint64_t v25 = v30;
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
  sub_1000D7A10(&qword_100722E00, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  uint64_t v26 = Digest.hexStr.getter();
  sub_10000C5F4(v18, v20);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v11);
  return v26;
}

uint64_t sub_1000D6280(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = sub_100007764(&qword_100722DB8);
  v1[7] = swift_task_alloc();
  sub_100007764(&qword_100720A68);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  sub_100007764(&qword_100722DC0);
  v1[12] = swift_task_alloc();
  v1[13] = sub_100007764(&qword_100722DC8);
  v1[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for HashDigest();
  v1[15] = v4;
  v1[16] = *(void *)(v4 - 8);
  v1[17] = swift_task_alloc();
  sub_100007764(&qword_100722DD0);
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v1[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPSignpost();
  v1[21] = v5;
  v1[22] = *(void *)(v5 - 8);
  v1[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v1[24] = v6;
  v1[25] = *(void *)(v6 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  return _swift_task_switch(sub_1000D6600, 0, 0);
}

uint64_t sub_1000D6600()
{
  id v1 = [self standardUserDefaults];
  v2._countAndFlagsBits = 0xD00000000000002FLL;
  v2._object = (void *)0x80000001006341C0;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    uint64_t v4 = v0 + 28;
    defaultLogger()();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "MobileDocumentReaderAuthenticationManager fetchLogo disabled by UserDefaults. Returning nil image data", v7, 2u);
      swift_slowDealloc();
    }

    uint64_t v8 = 24;
    uint64_t v9 = 25;
    goto LABEL_14;
  }
  uint64_t v4 = v0 + 23;
  static DaemonSignposts.MobileDocumentReader.sessionFetchLogo.getter();
  DIPSignpost.init(_:)();
  SecCertificateRef.logotype.getter();
  uint64_t v10 = v0[18];
  sub_100048D6C(v0[19], v10, &qword_100722DD0);
  uint64_t v11 = type metadata accessor for Logotype();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  uint64_t v14 = v0[18];
  if (v13 == 1)
  {
    Swift::String v15 = &qword_100722DD0;
    uint64_t v16 = v0[18];
LABEL_12:
    sub_10000C6CC(v16, v15);
    uint64_t v24 = v0[7];
    uint64_t v26 = v0[4];
    uint64_t v25 = v0[5];
    uint64_t v27 = v0[3];
    type metadata accessor for DaemonAnalytics();
    uint64_t v28 = enum case for DaemonAnalytics.MobileDocumentReaderFetchLogoError.documentReaderCertificateLogotypeMissing(_:);
    uint64_t LogoError = type metadata accessor for DaemonAnalytics.MobileDocumentReaderFetchLogoError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(LogoError - 8) + 104))(v24, v28, LogoError);
    swift_storeEnumTagMultiPayload();
    static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)();
    sub_10000C6CC(v24, &qword_100722DB8);
    (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v25, enum case for DIPError.Code.documentReaderCertificateLogotypeMissing(_:), v27);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_13:
    sub_10000C6CC(v0[19], &qword_100722DD0);
    uint64_t v31 = v0[25];
    uint64_t v30 = v0[26];
    uint64_t v32 = v0[24];
    defaultLogger()();
    DIPLogError(_:message:log:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t v8 = 21;
    uint64_t v9 = 22;
LABEL_14:
    (*(void (**)(void, void))(v0[v9] + 8))(*v4, v0[v8]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = (uint64_t (*)(void, unint64_t))v0[1];
    return v33(0, 0xF000000000000000);
  }
  uint64_t v17 = Logotype.logotypeTuples.getter();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v19 = sub_100007764(&qword_100722DD8);
  uint64_t v20 = *(void *)(v19 - 8);
  if (v18)
  {
    sub_100048D6C(v17+ ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80)), v0[12], &qword_100722DD8);
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = 1;
  }
  uint64_t v22 = v0[12];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v22, v21, 1, v19);
  swift_bridgeObjectRelease();
  uint64_t v23 = sub_100007764(&qword_100722DD8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23) == 1)
  {
    uint64_t v16 = v0[12];
    Swift::String v15 = &qword_100722DC0;
    goto LABEL_12;
  }
  uint64_t v35 = v0[14];
  uint64_t v36 = v0[13];
  uint64_t v37 = v0[10];
  uint64_t v55 = v0[17];
  uint64_t v57 = v0[9];
  uint64_t v51 = v0[15];
  uint64_t v53 = v0[8];
  uint64_t v38 = (uint64_t *)(v0[12] + *(int *)(v23 + 48));
  uint64_t v39 = *v38;
  uint64_t v40 = v38[1];
  uint64_t v41 = (void *)(v35 + *(int *)(v36 + 48));
  uint64_t v42 = *(void (**)(uint64_t))(v0[16] + 32);
  v42(v35);
  *uint64_t v41 = v39;
  v41[1] = v40;
  uint64_t v43 = (void *)(v35 + *(int *)(v36 + 48));
  v0[29] = *v43;
  v0[30] = v43[1];
  ((void (*)(uint64_t, uint64_t, uint64_t))v42)(v55, v35, v51);
  URL.init(string:encodingInvalidCharacters:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v53, 1, v57) == 1)
  {
    uint64_t v56 = v0[15];
    uint64_t v58 = v0[17];
    uint64_t v44 = v0[7];
    uint64_t v45 = v0[5];
    uint64_t v46 = v0[4];
    uint64_t v52 = v0[3];
    uint64_t v54 = v0[16];
    sub_10000C6CC(v0[8], &qword_100720A68);
    type metadata accessor for DaemonAnalytics();
    uint64_t v47 = enum case for DaemonAnalytics.MobileDocumentReaderFetchLogoError.documentReaderCertificateInvalidLogoURL(_:);
    uint64_t v48 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderFetchLogoError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104))(v44, v47, v48);
    swift_storeEnumTagMultiPayload();
    static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v44, &qword_100722DB8);
    (*(void (**)(uint64_t, void, uint64_t))(v46 + 104))(v45, enum case for DIPError.Code.documentReaderCertificateInvalidLogoURL(_:), v52);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v58, v56);
    goto LABEL_13;
  }
  (*(void (**)(void, void, void))(v0[10] + 32))(v0[11], v0[8], v0[9]);
  uint64_t v59 = (uint64_t (*)(uint64_t))((char *)&dword_100732A28 + dword_100732A28);
  uint64_t v49 = (void *)swift_task_alloc();
  v0[31] = v49;
  *uint64_t v49 = v0;
  v49[1] = sub_1000D6F24;
  uint64_t v50 = v0[11];
  return v59(v50);
}

uint64_t sub_1000D6F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[32] = a1;
  v4[33] = a2;
  v4[34] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1000D7614;
  }
  else {
    uint64_t v5 = sub_1000D703C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D703C()
{
  uint64_t v1 = v0[34];
  sub_10002CEB0(v0[32], v0[33]);
  char v2 = HashDigest.equalsHash(of:)();
  uint64_t v3 = v1;
  uint64_t v5 = v0[32];
  unint64_t v4 = v0[33];
  if (v3)
  {
    uint64_t v7 = v0[16];
    uint64_t v6 = v0[17];
    uint64_t v8 = v0[15];
    uint64_t v10 = v0[10];
    uint64_t v9 = v0[11];
    uint64_t v11 = v0[9];
    swift_bridgeObjectRelease();
    sub_10000C5F4(v5, v4);
    sub_10000C5F4(v5, v4);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
LABEL_8:
    sub_10000C6CC(v0[19], &qword_100722DD0);
    uint64_t v29 = v0[25];
    uint64_t v28 = v0[26];
    uint64_t v30 = v0[24];
    defaultLogger()();
    DIPLogError(_:message:log:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t v34 = 0;
    unint64_t v37 = 0xF000000000000000;
    goto LABEL_9;
  }
  char v12 = v2;
  sub_10000C5F4(v0[32], v0[33]);
  if ((v12 & 1) == 0)
  {
    unint64_t v42 = v0[33];
    uint64_t v44 = v0[16];
    uint64_t v46 = v0[15];
    uint64_t v47 = v0[17];
    uint64_t v38 = v0[32];
    uint64_t v40 = v0[11];
    uint64_t v33 = v0[10];
    uint64_t v35 = v0[9];
    uint64_t v22 = v0[7];
    uint64_t v23 = v0[4];
    uint64_t v24 = v0[5];
    uint64_t v25 = v0[3];
    type metadata accessor for DaemonAnalytics();
    uint64_t v26 = enum case for DaemonAnalytics.MobileDocumentReaderFetchLogoError.documentReaderCertificateLogoHashMismatch(_:);
    uint64_t LogoError = type metadata accessor for DaemonAnalytics.MobileDocumentReaderFetchLogoError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(LogoError - 8) + 104))(v22, v26, LogoError);
    swift_storeEnumTagMultiPayload();
    static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v22, &qword_100722DB8);
    (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v24, enum case for DIPError.Code.documentReaderCertificateLogoHashMismatch(_:), v25);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v38, v42);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v40, v35);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v47, v46);
    goto LABEL_8;
  }
  defaultLogger()();
  int v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    Swift::String v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "MobileDocumentReaderAuthenticationManager fetchLogo successfully verified logo hashes. fetchLogo was a success.", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = v0[27];
  uint64_t v18 = v0[24];
  uint64_t v17 = v0[25];
  uint64_t v45 = v0[19];
  uint64_t v19 = v0[16];
  uint64_t v41 = v0[15];
  uint64_t v43 = v0[17];
  uint64_t v20 = v0[10];
  uint64_t v39 = v0[11];
  uint64_t v36 = v0[9];
  uint64_t v21 = v0[7];

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  type metadata accessor for DaemonAnalytics();
  swift_storeEnumTagMultiPayload();
  static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v21, &qword_100722DB8);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v39, v36);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v43, v41);
  sub_10000C6CC(v45, &qword_100722DD0);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  uint64_t v34 = v0[32];
  unint64_t v37 = v0[33];
LABEL_9:
  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v31(v34, v37);
}

uint64_t sub_1000D7614()
{
  uint64_t v16 = v0[15];
  uint64_t v17 = v0[17];
  uint64_t v14 = v0[11];
  uint64_t v15 = v0[16];
  uint64_t v12 = v0[10];
  uint64_t v13 = v0[9];
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  type metadata accessor for DaemonAnalytics();
  uint64_t v5 = enum case for DaemonAnalytics.MobileDocumentReaderFetchLogoError.documentReaderCertificateLogoFetchFailed(_:);
  uint64_t LogoError = type metadata accessor for DaemonAnalytics.MobileDocumentReaderFetchLogoError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(LogoError - 8) + 104))(v1, v5, LogoError);
  swift_storeEnumTagMultiPayload();
  static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v1, &qword_100722DB8);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v3, enum case for DIPError.Code.internalError(_:), v4);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000D7A10((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  sub_10000C6CC(v0[19], &qword_100722DD0);
  uint64_t v8 = v0[25];
  uint64_t v7 = v0[26];
  uint64_t v9 = v0[24];
  defaultLogger()();
  DIPLogError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void, unint64_t))v0[1];
  return v10(0, 0xF000000000000000);
}

uint64_t sub_1000D79D0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000C5F4(result, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000D7A10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1000D7A58(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AuditToken();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    v9[2] = v10[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000D7B50(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D7BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  v8[2] = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000D7C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 8) = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 16) = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D7D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  return a1;
}

uint64_t sub_1000D7DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_bridgeObjectRelease();
  *(void *)(v8 + 8) = v9[1];
  swift_bridgeObjectRelease();
  *(void *)(v8 + 16) = v9[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D7E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D7EAC);
}

uint64_t sub_1000D7EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000D7F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D7F80);
}

uint64_t sub_1000D7F80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AuditToken();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for DigitalPresentmentCallingClientConfig()
{
  uint64_t result = qword_100722E68;
  if (!qword_100722E68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D8088()
{
  uint64_t result = type metadata accessor for AuditToken();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000D8128(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100470180(*a1, *a2);
}

Swift::Int sub_1000D8134()
{
  return sub_100472818();
}

uint64_t sub_1000D813C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000D81C4()
{
  return sub_100473684();
}

unint64_t sub_1000D81CC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000D89B0(*a1);
  *a2 = result;
  return result;
}

void sub_1000D81FC(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x80000001006297D0;
  unint64_t v4 = 1701736302;
  if (*v1 == 1) {
    unint64_t v4 = 0xD000000000000013;
  }
  else {
    unint64_t v3 = 0xE400000000000000;
  }
  if (*v1)
  {
    unint64_t v2 = v4;
    unint64_t v5 = v3;
  }
  else
  {
    unint64_t v5 = 0x80000001006297B0;
  }
  *a1 = v2;
  a1[1] = v5;
}

unint64_t sub_1000D8254()
{
  unint64_t v1 = 1701736302;
  if (*v0 == 1) {
    unint64_t v1 = 0xD000000000000013;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000012;
  }
}

unint64_t sub_1000D82A8(char a1)
{
  unint64_t result = 0x616E2D6E65766967;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E2D796C696D6166;
      break;
    case 2:
      unint64_t result = 7890291;
      break;
    case 3:
      unint64_t result = 0x7469617274726F70;
      break;
    case 4:
      unint64_t result = 0x73736572646461;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 7:
      unint64_t result = 0xD000000000000018;
      break;
    case 8:
      unint64_t result = 0x746E656D75636F64;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    case 11:
      unint64_t result = 6645601;
      break;
    case 12:
      unint64_t result = 0x2D666F2D65746164;
      break;
    case 13:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000D8474(char a1)
{
  unint64_t result = 0x616E2D6E65766967;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E2D796C696D6166;
      break;
    case 2:
      unint64_t result = 7890291;
      break;
    case 3:
      unint64_t result = 0x7469617274726F70;
      break;
    case 4:
      unint64_t result = 0x73736572646461;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 7:
      unint64_t result = 0xD000000000000018;
      break;
    case 8:
      unint64_t result = 0x746E656D75636F64;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    case 11:
      unint64_t result = 6645601;
      break;
    case 12:
      unint64_t result = 0x2D666F2D65746164;
      break;
    case 13:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000D8640(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1000D8474(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1000D8474(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000D86CC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000D8474(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000D8730()
{
  sub_1000D8474(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000D8784()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000D8474(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1000D87E4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000D89FC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000D8814@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000D8474(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000D8840()
{
  return sub_1000D82A8(*v0);
}

uint64_t sub_1000D8848()
{
  _StringGuts.grow(_:)(61);
  v0._object = (void *)0x80000001006344B0;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x6E656D656C65202CLL;
  v2._object = (void *)0xED0000203D207374;
  String.append(_:)(v2);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0xD000000000000019;
  v4._object = (void *)0x80000001006344D0;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000D89A4()
{
  return sub_1000D8848();
}

unint64_t sub_1000D89B0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F1B00, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000D89FC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F1B68, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14;
  }
  else {
    return v3;
  }
}

void *sub_1000D8A48(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  unint64_t v2 = sub_100590548(0x746E656D75636F64, 0xEE0073657079742DLL);
  if ((v3 & 1) == 0 || (uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8 * v2), (v5 = *(void *)(v4 + 16)) == 0))
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    if (!*(void *)(a1 + 16)) {
      goto LABEL_26;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = (void **)(v4 + 40);
  uint64_t v7 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v8 = (uint64_t)*(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = v8;
    v10._object = v9;
    unint64_t v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F1CD8, v10);
    swift_bridgeObjectRelease();
    if (v11 < 3)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_10010F764(0, v7[2] + 1, 1, v7);
      }
      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1) {
        uint64_t v7 = sub_10010F764((void *)(v12 > 1), v13 + 1, 1, v7);
      }
      v7[2] = v13 + 1;
      *((unsigned char *)v7 + v13 + 32) = v11;
    }
    v6 += 2;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16))
  {
LABEL_16:
    unint64_t v14 = sub_100590548(0x73746E656D656C65, 0xE800000000000000);
    if (v15)
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v14);
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = (void **)(v16 + 40);
        uint64_t v19 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v20 = (uint64_t)*(v18 - 1);
          uint64_t v21 = *v18;
          swift_bridgeObjectRetain();
          v22._countAndFlagsBits = v20;
          v22._object = v21;
          unint64_t v23 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F1B68, v22);
          swift_bridgeObjectRelease();
          if (v23 <= 0xD)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v19 = sub_10010F660(0, v19[2] + 1, 1, v19);
            }
            unint64_t v25 = v19[2];
            unint64_t v24 = v19[3];
            if (v25 >= v24 >> 1) {
              uint64_t v19 = sub_10010F660((void *)(v24 > 1), v25 + 1, 1, v19);
            }
            v19[2] = v25 + 1;
            *((unsigned char *)v19 + v25 + 32) = v23;
          }
          v18 += 2;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease();
      }
    }
  }
LABEL_26:
  swift_bridgeObjectRetain();
  return v7;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentEntitlements.Element(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DigitalPresentmentEntitlements.Element(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D8E38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentEntitlements.Element()
{
  return &type metadata for DigitalPresentmentEntitlements.Element;
}

unsigned char *storeEnumTagSinglePayload for DigitalPresentmentEntitlements.DocumentType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D8F3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentEntitlements.DocumentType()
{
  return &type metadata for DigitalPresentmentEntitlements.DocumentType;
}

uint64_t destroy for DigitalPresentmentEntitlements()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s8coreidvd30DigitalPresentmentEntitlementsVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DigitalPresentmentEntitlements(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DigitalPresentmentEntitlements(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentEntitlements(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentEntitlements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentEntitlements()
{
  return &type metadata for DigitalPresentmentEntitlements;
}

unint64_t sub_1000D9170()
{
  unint64_t result = qword_100722EA8;
  if (!qword_100722EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722EA8);
  }
  return result;
}

unint64_t sub_1000D91C8()
{
  unint64_t result = qword_100722EB0;
  if (!qword_100722EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100722EB0);
  }
  return result;
}

uint64_t sub_1000D921C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingTermsAndConditionsProvider()
{
  return self;
}

void sub_1000D9250(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  uint64_t v20 = sub_1000D9520;
  uint64_t v21 = v8;
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  uint64_t v18 = sub_1000D952C;
  uint64_t v19 = &unk_1006F8000;
  uint64_t v9 = _Block_copy(&v16);
  swift_bridgeObjectRetain();
  swift_retain();
  Swift::String v10 = a4;
  swift_release();
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v10, v9);
  _Block_release(v9);
  unint64_t v11 = (void *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  v11[5] = v10;
  uint64_t v20 = sub_1000D9818;
  uint64_t v21 = v11;
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  uint64_t v18 = sub_1000D952C;
  uint64_t v19 = &unk_1006F8050;
  unint64_t v12 = _Block_copy(&v16);
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v13 = v10;
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v13, v12);
  _Block_release(v12);
  sub_10020D4CC(v13, a1, a2, a3);
  v14._object = (void *)0x8000000100634590;
  v15._countAndFlagsBits = 0x6331386362376136;
  v15._object = (void *)0xE800000000000000;
  v14._countAndFlagsBits = 0xD00000000000001BLL;
  logMilestone(tag:description:)(v15, v14);
}

unint64_t sub_1000D9458()
{
  unint64_t result = sub_1000D9888();
  qword_100760270 = result;
  *(void *)algn_100760278 = v1;
  qword_100760280 = v2;
  unk_100760288 = v3;
  return result;
}

uint64_t sub_1000D9480(void *a1)
{
  uint64_t result = (uint64_t)xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v3 = (const char *)result;
    if (!strcmp((const char *)result, "Application Installed"))
    {
      return sub_1000D9D4C(a1);
    }
    else
    {
      uint64_t result = strcmp(v3, "Application Uninstalled");
      if (!result)
      {
        return sub_1000DA1EC(a1);
      }
    }
  }
  return result;
}

uint64_t sub_1000D9520(void *a1)
{
  return sub_1000D9480(a1);
}

uint64_t sub_1000D952C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_1000D958C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D959C()
{
  return swift_release();
}

const char *sub_1000D95A4(void *a1)
{
  uint64_t v2 = type metadata accessor for WarmerUpper();
  __chkstk_darwin(v2);
  unsigned int v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t result = (const char *)strcmp(result, "Buddy Setup Done");
    if (!result)
    {
      defaultLogger()();
      Swift::String v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        unint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Buddy Flow setup completed notification received", v12, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (qword_10071F550 != -1) {
        swift_once();
      }
      uint64_t v13 = sub_1000443D4(v2, (uint64_t)qword_100760768);
      swift_beginAccess();
      sub_1000D9824(v13, (uint64_t)v4);
      sub_100424844();
      return (const char *)sub_1000DA68C((uint64_t)v4);
    }
  }
  return result;
}

uint64_t sub_1000D97D0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

const char *sub_1000D9818(void *a1)
{
  return sub_1000D95A4(a1);
}

uint64_t sub_1000D9824(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WarmerUpper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000D9888()
{
  uint64_t v20 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v0 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  sub_1000309D0();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = &_swiftEmptyArrayStorage;
  sub_1000DA6E8();
  sub_100007764((uint64_t *)&unk_100726420);
  sub_100025CAC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v19);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for IdentityProofingActionNotificationFlow();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  uint64_t v9 = v20;
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for DispatchQoS.QoSClass.default(_:), v20);
  uint64_t v10 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v9);
  uint64_t v11 = sub_1005EC0D0(0, v8, v10);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  type metadata accessor for IdentityProofingDatabaseProvider();
  uint64_t v13 = swift_allocObject();
  type metadata accessor for IdentityWatchProvisioningManagerFactory();
  uint64_t v14 = swift_allocObject();
  type metadata accessor for IdentityProofingUserNotificationProviderFactory();
  uint64_t v15 = swift_allocObject();
  type metadata accessor for IdentityProvisioningCompletionManager();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v11;
  v16[3] = v12;
  v16[4] = v13;
  v16[5] = v14;
  v16[6] = v15;
  return 0xD000000000000018;
}

size_t sub_1000D9C20(void *a1)
{
  xpc_object_t v1 = xpc_dictionary_get_array(a1, "bundleIDs");
  if (!v1) {
    return (size_t)&_swiftEmptyArrayStorage;
  }
  uint64_t v2 = v1;
  size_t result = xpc_array_get_count(v1);
  size_t v4 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_18:
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    size_t v5 = 0;
    uint64_t v6 = (char *)&_swiftEmptyArrayStorage;
    while (1)
    {
      size_t result = (size_t)xpc_array_get_string(v2, v5);
      if (result)
      {
        uint64_t v7 = String.init(cString:)();
        uint64_t v9 = v8;
        size_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          size_t result = (size_t)sub_10010F3C4(0, *((void *)v6 + 2) + 1, 1, v6);
          uint64_t v6 = (char *)result;
        }
        unint64_t v11 = *((void *)v6 + 2);
        unint64_t v10 = *((void *)v6 + 3);
        if (v11 >= v10 >> 1)
        {
          size_t result = (size_t)sub_10010F3C4((char *)(v10 > 1), v11 + 1, 1, v6);
          uint64_t v6 = (char *)result;
        }
        *((void *)v6 + 2) = v11 + 1;
        uint64_t v12 = &v6[16 * v11];
        *((void *)v12 + 4) = v7;
        *((void *)v12 + 5) = v9;
      }
      if (v4 == v5) {
        break;
      }
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    swift_unknownObjectRelease();
    return (size_t)v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D9D4C(void *a1)
{
  uint64_t v40 = type metadata accessor for WarmerUpper();
  __chkstk_darwin(v40);
  uint64_t v41 = (uint64_t)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v39 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v39 - v14;
  defaultLogger()();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Application install event received", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
  v19(v15, v3);
  xpc_object_t v20 = xpc_dictionary_get_value(a1, "UserInfo");
  if (!v20) {
    goto LABEL_6;
  }
  uint64_t v21 = v20;
  xpc_type_t type = xpc_get_type(v20);
  xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
  xpc_type_t v24 = xpc_get_type(v23);
  swift_unknownObjectRelease();
  if (type != v24)
  {
    swift_unknownObjectRelease();
LABEL_6:
    defaultLogger()();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Application install event: no user info dictionary", v27, 2u);
      swift_slowDealloc();
    }

    uint64_t v28 = v7;
    return ((uint64_t (*)(char *, uint64_t))v19)(v28, v3);
  }
  if (xpc_dictionary_get_BOOL(v21, "isPlaceholder"))
  {
    defaultLogger()();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Skipping application install event because it refers to a placeholder", v32, 2u);
      swift_slowDealloc();
    }

    swift_unknownObjectRelease();
    uint64_t v28 = v13;
    return ((uint64_t (*)(char *, uint64_t))v19)(v28, v3);
  }
  size_t v33 = sub_1000D9C20(v21);
  defaultLogger()();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "XPC application install event: received install event", v36, 2u);
    swift_slowDealloc();
  }

  v19(v10, v3);
  if (qword_10071F550 != -1) {
    swift_once();
  }
  uint64_t v37 = sub_1000443D4(v40, (uint64_t)qword_100760768);
  swift_beginAccess();
  uint64_t v38 = v41;
  sub_1000D9824(v37, v41);
  sub_100414604(v33);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return sub_1000DA68C(v38);
}

uint64_t sub_1000DA1EC(void *a1)
{
  uint64_t v40 = type metadata accessor for WarmerUpper();
  __chkstk_darwin(v40);
  uint64_t v41 = (uint64_t)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v39 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v39 - v14;
  defaultLogger()();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Application uninstall event received", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
  v19(v15, v3);
  xpc_object_t v20 = xpc_dictionary_get_value(a1, "UserInfo");
  if (!v20) {
    goto LABEL_6;
  }
  uint64_t v21 = v20;
  xpc_type_t type = xpc_get_type(v20);
  xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
  xpc_type_t v24 = xpc_get_type(v23);
  swift_unknownObjectRelease();
  if (type != v24)
  {
    swift_unknownObjectRelease();
LABEL_6:
    defaultLogger()();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Application uninstall event: no user info dictionary", v27, 2u);
      swift_slowDealloc();
    }

    uint64_t v28 = v7;
    return ((uint64_t (*)(char *, uint64_t))v19)(v28, v3);
  }
  if (xpc_dictionary_get_BOOL(v21, "isPlaceholder"))
  {
    defaultLogger()();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Skipping application uninstall event because it refers to a placeholder", v32, 2u);
      swift_slowDealloc();
    }

    swift_unknownObjectRelease();
    uint64_t v28 = v13;
    return ((uint64_t (*)(char *, uint64_t))v19)(v28, v3);
  }
  size_t v33 = (void *)sub_1000D9C20(v21);
  defaultLogger()();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "XPC application uninstall event: received uninstall event", v36, 2u);
    swift_slowDealloc();
  }

  v19(v10, v3);
  if (qword_10071F550 != -1) {
    swift_once();
  }
  uint64_t v37 = sub_1000443D4(v40, (uint64_t)qword_100760768);
  swift_beginAccess();
  uint64_t v38 = v41;
  sub_1000D9824(v37, v41);
  sub_1004168EC(v33);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return sub_1000DA68C(v38);
}

uint64_t sub_1000DA68C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WarmerUpper();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000DA6E8()
{
  unint64_t result = qword_10071FF60;
  if (!qword_10071FF60)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071FF60);
  }
  return result;
}

uint64_t sub_1000DA748()
{
  v1[18] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[19] = v2;
  v1[20] = *(void *)(v2 - 8);
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Locale.Language();
  v1[26] = v3;
  v1[27] = *(void *)(v3 - 8);
  v1[28] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v1[29] = v4;
  v1[30] = *(void *)(v4 - 8);
  v1[31] = swift_task_alloc();
  sub_100007764(&qword_100720910);
  v1[32] = swift_task_alloc();
  return _swift_task_switch(sub_1000DA924, 0, 0);
}

uint64_t sub_1000DA924()
{
  uint64_t v37 = v0;
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v6 = v0[27];
  uint64_t v5 = v0[28];
  uint64_t v7 = v0[26];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v0[18] + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_locale, v3);
  Locale.language.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  Locale.Language.region.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v8 = type metadata accessor for Locale.Region();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v1, 1, v8);
  uint64_t v11 = v0[32];
  if (v10 == 1)
  {
    sub_10000C6CC(v0[32], &qword_100720910);
LABEL_9:
    defaultLogger()();
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Invalid current region code. Will not refresh static content", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = v0[23];
    uint64_t v21 = v0[19];
    uint64_t v22 = v0[20];

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    goto LABEL_12;
  }
  uint64_t v12 = Locale.Region.identifier.getter();
  unint64_t v14 = v13;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if ((sub_10020F0CC(v12, v14, *(void **)(v0[18] + 16)) & 1) == 0)
  {
    defaultLogger()();
    swift_bridgeObjectRetain();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v28 = v0[25];
    uint64_t v29 = v0[19];
    uint64_t v30 = v0[20];
    if (v27)
    {
      uint64_t v34 = v0[25];
      os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v31 = 136315138;
      swift_bridgeObjectRetain();
      v0[16] = sub_100110D58(v12, v14, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "current region %s is not in the allow list, will not attempt to refresh static workflow", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v29);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    }
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    xpc_object_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  uint64_t v16 = v0[18];
  swift_bridgeObjectRelease();
  sub_100030A10(v16 + 80, (uint64_t)(v0 + 2));
  sub_10000C728(v0 + 2, v0[5]);
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  uint64_t v32 = v0[18];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  v0[33] = *(void *)(v32 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_workflowProvider);
  swift_retain();
  v0[34] = sub_10052E944();
  sub_10052E944();
  swift_release();
  os_log_type_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1007321E8 + dword_1007321E8);
  size_t v33 = (void *)swift_task_alloc();
  v0[35] = v33;
  *size_t v33 = v0;
  v33[1] = sub_1000DB020;
  return v35(0xD000000000000024, 0x800000010062AD00, 0xD000000000000027, 0x800000010062AD30);
}

uint64_t sub_1000DB020()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000DB2E8;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v2 = sub_1000DB144;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DB144()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Attempting to fetch Identity Proofing static assets", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[18];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v0[37] = *(void *)(v7 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_assetProvider);
  swift_retain();
  v0[38] = sub_1004D2734();
  sub_1004D2734();
  swift_release();
  int v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100730500 + dword_100730500);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[39] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000DB578;
  return v10(0xD000000000000024, 0x800000010062AD00, 0x6A2E737465737361, 0xEB000000006E6F73);
}

uint64_t sub_1000DB2E8()
{
  uint64_t v15 = v0;
  swift_release();
  swift_release();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = v0[20];
    uint64_t v12 = v0[19];
    uint64_t v13 = v0[21];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[17] = sub_100110D58(v4, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "received an error during refreshing static content %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  }
  else
  {
    uint64_t v7 = v0[20];
    uint64_t v6 = v0[21];
    uint64_t v8 = v0[19];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000DB578()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 320) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000DB730, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000DB730()
{
  uint64_t v15 = v0;
  swift_release();
  swift_release();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = v0[20];
    uint64_t v12 = v0[19];
    uint64_t v13 = v0[21];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[17] = sub_100110D58(v4, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "received an error during refreshing static content %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  }
  else
  {
    uint64_t v7 = v0[20];
    uint64_t v6 = v0[21];
    uint64_t v8 = v0[19];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000DB9C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 464) = a4;
  *(void *)(v5 + 192) = a3;
  *(void *)(v5 + 200) = v4;
  *(void *)(v5 + 176) = a1;
  *(void *)(v5 + 184) = a2;
  *(void *)(v5 + 208) = sub_100007764(&qword_1007239B0);
  *(void *)(v5 + 216) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  *(void *)(v5 + 224) = v6;
  *(void *)(v5 + 232) = *(void *)(v6 - 8);
  *(void *)(v5 + 240) = swift_task_alloc();
  *(void *)(v5 + 248) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v5 + 256) = v7;
  *(void *)(v5 + 264) = *(void *)(v7 - 8);
  *(void *)(v5 + 272) = swift_task_alloc();
  *(void *)(v5 + 280) = swift_task_alloc();
  *(void *)(v5 + 288) = swift_task_alloc();
  *(void *)(v5 + 296) = swift_task_alloc();
  *(void *)(v5 + 304) = swift_task_alloc();
  *(void *)(v5 + 312) = swift_task_alloc();
  *(void *)(v5 + 320) = swift_task_alloc();
  *(void *)(v5 + 328) = swift_task_alloc();
  *(void *)(v5 + 336) = swift_task_alloc();
  *(void *)(v5 + 344) = swift_task_alloc();
  *(void *)(v5 + 352) = swift_task_alloc();
  *(void *)(v5 + 360) = swift_task_alloc();
  *(void *)(v5 + 368) = swift_task_alloc();
  *(void *)(v5 + 376) = swift_task_alloc();
  *(void *)(v5 + 384) = swift_task_alloc();
  *(void *)(v5 + 392) = swift_task_alloc();
  return _swift_task_switch(sub_1000DBBE0, 0, 0);
}

uint64_t sub_1000DBBE0()
{
  uint64_t v141 = v0;
  unint64_t v1 = v0[23];
  if (!v1)
  {
    defaultLogger()();
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, (os_log_type_t)v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v13, "Unable to update proofing as proofingSessionID doesn't exist", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v15 = v0[35];
    goto LABEL_11;
  }
  if (v0[58])
  {
    defaultLogger()();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v16, "Unable to update proofing as target doesn't exist", v17, 2u);
      swift_slowDealloc();
    }
    uint64_t v15 = v0[36];
LABEL_11:
    uint64_t v18 = v0[32];
    uint64_t v19 = v0[33];

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v15, v18);
LABEL_25:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v51 = (uint64_t (*)(void))v0[1];
    return v51();
  }
  swift_bridgeObjectRetain();
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[49];
  uint64_t v7 = v0[32];
  uint64_t v6 = v0[33];
  unint64_t v139 = v1;
  if (v4)
  {
    uint64_t v127 = v0[22];
    uint64_t v131 = v0[32];
    uint64_t v8 = swift_slowAlloc();
    v140[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    v0[20] = sub_100110D58(v127, v1, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v9 = IdentityTarget.debugDescription.getter();
    v0[21] = sub_100110D58(v9, v10, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "check if an identity pass exists for proofingSessionID: %s and target %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v11(v5, v131);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v11(v5, v7);
  }
  v0[50] = v11;
  uint64_t v20 = swift_allocObject();
  type metadata accessor for IdentityProofingDataContext();
  *(void *)(v20 + 16) = 0;
  *(void *)(v20 + 24) = 0;
  swift_allocObject();
  sub_1000FF820();
  uint64_t v22 = v21;
  uint64_t v23 = v0[24];
  uint64_t v24 = v0[22];
  unint64_t v25 = (void *)swift_allocObject();
  v25[2] = v22;
  v25[3] = v24;
  v25[4] = v139;
  v25[5] = v23;
  v25[6] = v20;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1000E3D80, (uint64_t)v25);
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v26 = *(void *)(v20 + 16);
  unint64_t v27 = *(void *)(v20 + 24);
  v0[51] = v26;
  v0[52] = v27;
  swift_bridgeObjectRetain();
  swift_release();
  if (!v27)
  {
    defaultLogger()();
    os_log_type_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "The proofing Session does not have a credential identifier, this is an invalid state. Delete locally stored data", v37, 2u);
      swift_slowDealloc();
    }
    uint64_t v38 = v0[37];
    uint64_t v39 = v0[32];
    uint64_t v40 = v0[24];
    uint64_t v42 = v0[22];
    uint64_t v41 = v0[23];

    v11(v38, v39);
    swift_retain();
    sub_100438B00(0, 0, v42, v41, v40, 0);
    goto LABEL_24;
  }
  swift_retain();
  id v28 = sub_1001FF348(v26, v27);
  swift_release();
  swift_release();
  if (v28)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = v0[47];
    uint64_t v33 = v0[32];
    if (v31)
    {
      uint64_t v128 = v0[22];
      uint64_t v137 = v11;
      uint64_t v34 = swift_slowAlloc();
      v140[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      swift_bridgeObjectRetain();
      v0[18] = sub_100110D58(v128, v139, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v34 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[19] = sub_100110D58(v26, v27, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Pass exists for a given proofingSessionID %s and %s. Delete locally stored data", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v137(v32, v33);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      v11(v32, v33);
    }
    swift_retain();
    sub_100438B00(v26, v27, 0, 0, 0, 1);
LABEL_24:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_25;
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  uint64_t v46 = v0[46];
  uint64_t v135 = v0[32];
  uint64_t v138 = v11;
  if (v45)
  {
    uint64_t v126 = v0[22];
    uint64_t v132 = v0[46];
    uint64_t v47 = swift_slowAlloc();
    v140[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 136315394;
    swift_bridgeObjectRetain();
    v0[16] = sub_100110D58(v126, v139, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v47 + 12) = 2080;
    uint64_t v48 = IdentityTarget.debugDescription.getter();
    v0[17] = sub_100110D58(v48, v49, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Manual check time interval has elapsed for the storedProofingSession with proofingSessionID: %s and target: %s. Will update proofing data...", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v50 = v132;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v50 = v46;
  }
  v11(v50, v135);
  defaultLogger()();
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Check if there was a provisioning attempt", v55, 2u);
    swift_slowDealloc();
  }
  uint64_t v56 = v0[45];
  uint64_t v57 = v0[32];
  uint64_t v58 = v0[33];
  BOOL v136 = v0;
  uint64_t v59 = v0[29];
  uint64_t v60 = v0[28];

  v0[53] = (v58 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v138(v56, v57);
  uint64_t v61 = swift_allocBox();
  uint64_t v63 = v62;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v62, 1, 1, v60);
  uint64_t v64 = v0;
  swift_allocObject();
  sub_1000FF820();
  uint64_t v66 = v65;
  uint64_t v67 = v0[24];
  uint64_t v68 = v64[22];
  uint64_t v69 = (void *)swift_allocObject();
  v69[2] = v66;
  v69[3] = v68;
  v69[4] = v139;
  v69[5] = v67;
  v69[6] = v61;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1000E3D50, (uint64_t)v69);
  swift_release();
  swift_release();
  uint64_t v70 = v64[28];
  uint64_t v71 = v64[29];
  uint64_t v72 = v64[27];
  swift_beginAccess();
  sub_100033298(v63, v72);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v72, 1, v70) == 1)
  {
    uint64_t v73 = v64[27];
    swift_bridgeObjectRelease();
    sub_10000C6CC(v73, &qword_1007239B0);
    defaultLogger()();
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Provisioning has never been attempted. Will call pending actions.", v76, 2u);
      swift_slowDealloc();
    }
    uint64_t v133 = v64 + 13;
    uint64_t v77 = v64[39];
    uint64_t v78 = v64[32];
    uint64_t v79 = v64[24];
    unint64_t v80 = v64;
    uint64_t v81 = v64[23];
    uint64_t v82 = v80[22];

    v138(v77, v78);
    swift_retain();
    uint64_t v110 = sub_100481CF8(v82, v81, v79, 0);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v0 = v80;
    if (v110)
    {
      if (*(void *)(v110 + 16) && (unint64_t v111 = sub_100590548(0xD000000000000010, 0x80000001006349A0), (v112 & 1) != 0))
      {
        uint64_t v113 = *(void *)(*(void *)(v110 + 56) + 8 * v111);
        swift_retain();
        swift_bridgeObjectRelease();
        defaultLogger()();
        swift_retain_n();
        uint64_t v114 = Logger.logObject.getter();
        os_log_type_t v115 = static os_log_type_t.debug.getter();
        BOOL v116 = os_log_type_enabled(v114, v115);
        uint64_t v117 = v80[38];
        uint64_t v118 = v80[32];
        if (v116)
        {
          uint64_t v119 = swift_slowAlloc();
          uint64_t v129 = swift_slowAlloc();
          *(_DWORD *)uint64_t v119 = 136315394;
          v140[0] = v129;
          uint64_t v130 = v118;
          uint64_t v121 = *(void *)(v113 + 16);
          unint64_t v120 = *(void *)(v113 + 24);
          swift_bridgeObjectRetain();
          *uint64_t v133 = sub_100110D58(v121, v120, v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v119 + 12) = 2080;
          uint64_t v122 = IdentityTarget.debugDescription.getter();
          v0[14] = sub_100110D58(v122, v123, v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl((void *)&_mh_execute_header, v114, v115, "Get pending actions called for proofingSessionID: %s and target: %s", (uint8_t *)v119, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_release();
          uint64_t v124 = v117;
          uint64_t v125 = v130;
        }
        else
        {
          swift_release_n();

          uint64_t v124 = v117;
          uint64_t v125 = v118;
        }
        v138(v124, v125);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    goto LABEL_25;
  }
  uint64_t v84 = v64[30];
  uint64_t v83 = v64[31];
  uint64_t v86 = v64[28];
  uint64_t v85 = v64[29];
  (*(void (**)(uint64_t, void, uint64_t))(v85 + 32))(v83, v64[27], v86);
  defaultLogger()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v84, v83, v86);
  uint64_t v87 = Logger.logObject.getter();
  os_log_type_t v88 = static os_log_type_t.debug.getter();
  BOOL v89 = os_log_type_enabled(v87, v88);
  uint64_t v90 = v64[44];
  uint64_t v91 = v64[32];
  uint64_t v93 = v64[29];
  uint64_t v92 = v64[30];
  uint64_t v94 = v64[28];
  if (v89)
  {
    uint64_t v134 = v64[32];
    uint64_t v95 = (uint8_t *)swift_slowAlloc();
    v140[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v95 = 136315138;
    sub_1000E3D04((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter();
    v64[15] = sub_100110D58(v96, v97, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v64 = v136;
    swift_bridgeObjectRelease();
    uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
    v98(v92, v94);
    _os_log_impl((void *)&_mh_execute_header, v87, v88, "Provisioning has already been attempted. %s", v95, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v99 = v90;
    uint64_t v100 = v134;
  }
  else
  {
    uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
    v98(v64[30], v64[28]);

    uint64_t v99 = v90;
    uint64_t v100 = v91;
  }
  v138(v99, v100);
  v64[54] = v98;
  defaultLogger()();
  uint64_t v101 = Logger.logObject.getter();
  os_log_type_t v102 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v101, v102))
  {
    uint64_t v103 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v103 = 0;
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "Check if there are any pending provisioning", v103, 2u);
    swift_slowDealloc();
  }
  uint64_t v104 = v64[43];
  uint64_t v105 = v64[32];
  uint64_t v106 = v64[25];

  v138(v104, v105);
  v64[55] = *(void *)(v106 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_pendingProvisioning);
  swift_retain();
  uint64_t v107 = (void *)swift_task_alloc();
  v64[56] = v107;
  *uint64_t v107 = v64;
  v107[1] = sub_1000DD0E0;
  uint64_t v108 = v64[24];
  uint64_t v109 = v64[22];
  return sub_100411AB0(v109, v139, v108);
}

uint64_t sub_1000DD0E0(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 456) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000DD660;
  }
  else
  {
    *(unsigned char *)(v4 + 465) = a1 & 1;
    uint64_t v5 = sub_1000DD244;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000DD244()
{
  if (*(unsigned char *)(v0 + 465) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Pending provisioning exists", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
    uint64_t v6 = *(void *)(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 248);
    uint64_t v7 = *(void *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 224);

    v5(v6, v7);
    v4(v8, v9);
  }
  else
  {
    defaultLogger()();
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Pending provisioning doesn't exist. Checking for provisioning timeout to delete provisioning data", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
    uint64_t v14 = *(void *)(v0 + 328);
    uint64_t v15 = *(void *)(v0 + 256);
    unint64_t v17 = *(void *)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 192);
    uint64_t v18 = *(void *)(v0 + 176);

    v13(v14, v15);
    char v19 = sub_1000E286C(v18, v17, v16, 0);
    swift_bridgeObjectRelease();
    if (v19)
    {
      defaultLogger()();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Provisioning time out has occurred. Deleting the locally stored proofing data.", v22, 2u);
        swift_slowDealloc();
      }
      uint64_t v24 = *(void *)(v0 + 408);
      uint64_t v23 = *(void *)(v0 + 416);
      unint64_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
      uint64_t v26 = *(void *)(v0 + 320);
      uint64_t v27 = *(void *)(v0 + 256);
      uint64_t v31 = *(void *)(v0 + 248);
      uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
      uint64_t v30 = *(void *)(v0 + 224);

      v25(v26, v27);
      swift_retain();
      sub_100438B00(v24, v23, 0, 0, 0, 1);
      swift_bridgeObjectRelease();
      swift_release();
      v32(v31, v30);
    }
    else
    {
      (*(void (**)(void, void))(v0 + 432))(*(void *)(v0 + 248), *(void *)(v0 + 224));
      swift_bridgeObjectRelease();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_1000DD660()
{
  (*(void (**)(void, void))(v0 + 432))(*(void *)(v0 + 248), *(void *)(v0 + 224));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000DD7DC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v83 = a4;
  uint64_t v77 = a5;
  uint64_t v82 = a1;
  uint64_t v81 = type metadata accessor for Logger();
  uint64_t v78 = *(void *)(v81 - 8);
  uint64_t v7 = __chkstk_darwin(v81);
  uint64_t v80 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_type_t v75 = (char *)&v69 - v10;
  __chkstk_darwin(v9);
  uint64_t v74 = (char *)&v69 - v11;
  uint64_t v12 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v12 - 8);
  uint64_t v76 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v79 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  char v19 = (char *)&v69 - v18;
  uint64_t v20 = (void *)type metadata accessor for DIPError.Code();
  uint64_t v21 = *(v20 - 1);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v84;
  sub_10010096C(a2, (uint64_t)a3);
  if (v24) {
    return;
  }
  uint64_t v82 = v21;
  id v83 = v20;
  v73._countAndFlagsBits = a2;
  v73._object = a3;
  uint64_t v26 = v80;
  uint64_t v27 = v81;
  uint64_t v84 = v23;
  uint64_t v71 = v19;
  uint64_t v72 = v17;
  uint64_t v70 = v14;
  if (!v25)
  {
    uint64_t v85 = 0;
    unint64_t v86 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    uint64_t v85 = 0xD000000000000015;
    unint64_t v86 = 0x8000000100634AE0;
    String.append(_:)(v73);
    v42._countAndFlagsBits = 0x74276E73656F6420;
    v42._object = (void *)0xEE00747369786520;
    String.append(_:)(v42);
    (*(void (**)(char *, void, id))(v82 + 104))(v84, enum case for DIPError.Code.internalError(_:), v83);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  id v28 = v25;
  [v25 proofingActionStatus];
  IdentityProofingActionStatus.init(rawValue:)();
  if (v29)
  {
    (*(void (**)(char *, void, id))(v82 + 104))(v84, enum case for DIPError.Code.storedProofingActionStatusDoesntExist(_:), v83);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return;
  }
  uint64_t v84 = 0;
  uint64_t v30 = IdentityProofingActionStatus.rawValue.getter();
  if (v30 == IdentityProofingActionStatus.rawValue.getter())
  {
    uint64_t v31 = v28;
    uint64_t v32 = (uint64_t)[v28 provisioningRetryTimeout];
    uint64_t v33 = 86400 * v32;
    uint64_t v34 = v78;
    if ((unsigned __int128)(v32 * (__int128)86400) >> 64 != (86400 * v32) >> 63)
    {
      __break(1u);
      goto LABEL_27;
    }
    id v83 = v31;
    id v35 = [v31 provisioningAttemptDate];
    uint64_t v36 = v70;
    uint64_t v37 = v79;
    uint64_t v38 = v72;
    if (v35)
    {
      uint64_t v39 = v35;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
      uint64_t v41 = (uint64_t)v76;
      v40(v76, v38, v36);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v41, 0, 1, v36);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v41, 1, v36) != 1)
      {
        v40(v71, (char *)v41, v36);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v41 = (uint64_t)v76;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56))(v76, 1, 1, v70);
    }
    Date.init()();
    sub_10000C6CC(v41, &qword_1007239B0);
LABEL_16:
    uint64_t v48 = v77;
    unint64_t v49 = v72;
    Date.init()();
    char v50 = Date.isAtLeast(seconds:after:)();
    uint64_t v51 = v37 + 8;
    uint64_t v52 = *(void (**)(char *, uint64_t))(v37 + 8);
    uint64_t v79 = v51;
    v52(v49, v36);
    if (v50)
    {
      uint64_t v53 = v74;
      defaultLogger()();
      os_log_type_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Time has elapsed to delete the provisioning timeout", v56, 2u);
        uint64_t v53 = v74;
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v34 + 8))(v53, v81);
      v52(v71, v36);
      swift_beginAccess();
      *(unsigned char *)(v48 + 16) = 1;
      return;
    }
    Date.timeIntervalSinceNow.getter();
    double v58 = -v57;
    if ((~COERCE__INT64(-v57) & 0x7FF0000000000000) != 0)
    {
      uint64_t v59 = v81;
      if (v57 < 9.22337204e18)
      {
        if (v57 > -9.22337204e18)
        {
          defaultLogger()();
          uint64_t v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v60, v61))
          {
            uint64_t v62 = v33 / 3600;
            int v63 = v33 % 3600;
            signed int v64 = ((__int16)((34953 * (__int16)v63) >> 16) >> 5)
                + (((v63 + ((-30583 * (__int16)v63) >> 16)) & 0x8000) >> 15);
            uint64_t v80 = (__int16)(v63 - 60 * v64);
            uint64_t v77 = v64;
            int v65 = (uint64_t)v58 % 3600;
            unsigned int v66 = (v65 + ((-30583 * (__int16)v65) >> 16)) & 0x8000;
            uint64_t v82 = (__int16)(v65 - 60 * (((__int16)((34953 * (__int16)v65) >> 16) >> 5) + (v66 >> 15)));
            uint64_t v67 = (int)(((__int16)((34953 * (__int16)v65) >> 16) >> 5) + (v66 >> 15));
            uint64_t v68 = swift_slowAlloc();
            *(_DWORD *)uint64_t v68 = 134219264;
            uint64_t v85 = v62;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v68 + 12) = 2048;
            uint64_t v85 = v77;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v68 + 22) = 2048;
            uint64_t v85 = v80;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v68 + 32) = 2048;
            uint64_t v85 = (uint64_t)v58 / 3600;
            uint64_t v34 = v78;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v68 + 42) = 2048;
            uint64_t v85 = v67;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v68 + 52) = 2048;
            uint64_t v59 = v27;
            uint64_t v85 = v82;
            uint64_t v36 = v70;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v60, v61, "%ldhour(s) %ld minutes(s) %ldseconds(s) not elapsed yet. Time elapsed since provisioning failure is %ldhour(s) %ldminute(s) %ldsecond(s)", (uint8_t *)v68, 0x3Eu);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v34 + 8))(v75, v59);
          v52(v71, v36);
          return;
        }
LABEL_29:
        __break(1u);
        return;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  defaultLogger()();
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  uint64_t v46 = v78;
  if (v45)
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Proofing status is not claim ready", v47, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v26, v27);
}

void sub_1000DE2BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10010096C(a2, (uint64_t)a3);
  if (!v5)
  {
    uint64_t v14 = v13;
    if (v13)
    {
      id v15 = [v13 credentialIdentifier];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;
      }
      else
      {

        uint64_t v17 = 0;
        uint64_t v19 = 0;
      }
      swift_beginAccess();
      *(void *)(a5 + 16) = v17;
      *(void *)(a5 + 24) = v19;
      swift_bridgeObjectRelease();
    }
    else
    {
      v22[1] = 0;
      v22[2] = 0xE000000000000000;
      _StringGuts.grow(_:)(66);
      v20._countAndFlagsBits = 0xD000000000000040;
      v20._object = (void *)0x80000001006349C0;
      String.append(_:)(v20);
      v21._countAndFlagsBits = a2;
      v21._object = a3;
      String.append(_:)(v21);
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v9);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

void sub_1000DE560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v21[0] = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_projectBox();
  uint64_t v12 = v21[5];
  sub_10010096C(a2, a3);
  if (!v12)
  {
    uint64_t v14 = v13;
    if (v13)
    {
      uint64_t v15 = v11;
      uint64_t v16 = (uint64_t)v7;
      id v17 = [v13 provisioningAttemptDate];
      if (v17)
      {
        uint64_t v18 = v17;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v19 = type metadata accessor for Date();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v16, 0, 1, v19);
      }
      else
      {

        uint64_t v20 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 1, 1, v20);
      }
      swift_beginAccess();
      sub_1000E3DAC(v16, v15);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v21[0] + 104))(v10, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v8);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

void sub_1000DE8A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = a5;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - v13;
  sub_10010096C(a2, a3);
  if (!v5)
  {
    uint64_t v16 = v15;
    uint64_t v30 = (uint8_t *)a2;
    uint64_t v31 = v12;
    uint64_t v32 = v9;
    uint64_t v33 = v8;
    if (v15)
    {
      v37.value = IdentityProofingActionStatus.rawValue.getter();
      v37.is_nil = 0;
      id v17 = v16;
      StoredProofingSession.update(proofingActionStatus:)(v37);
      sub_1000FFAB4();
      uint64_t v21 = type metadata accessor for IdentityManagementSessionDelegate();
      id v22 = [self defaultCenter:v30];
      NSString v23 = String._bridgeToObjectiveC()();
      uint64_t v36 = v21;
      sub_100007764((uint64_t *)&unk_10072E590);
      [v22 postNotificationName:v23 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

      swift_unknownObjectRelease();
      uint64_t v24 = v31;
      defaultLogger()();
      unint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315138;
        uint64_t v30 = v27 + 4;
        uint64_t v28 = IdentityProofingActionStatus.debugDescription.getter();
        uint64_t v35 = sub_100110D58(v28, v29, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Updated the proofing action status to %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v33);
    }
    else
    {
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v35 = sub_100110D58((uint64_t)v30, a3, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Proofing session with proofingSessionID %s doesn't exist.", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v33);
    }
  }
}

uint64_t sub_1000DED00(unint64_t a1, void *a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::String v73 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v72 = (char *)&v71 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v74 = (char *)&v71 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v81 = (char *)&v71 - v17;
  __chkstk_darwin(v16);
  os_log_type_t v19 = (char *)&v71 - v18;
  v80[0] = _swiftEmptyArrayStorage;
  if (!(a1 >> 62))
  {
    uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_49;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_3:
  if (v20 >= 1)
  {
    os_log_type_t v75 = v19;
    uint64_t v76 = a2;
    uint64_t v77 = v2;
    uint64_t v78 = v9;
    uint64_t v79 = v8;
    for (uint64_t i = 0; i != v20; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v23 = *(id *)(a1 + 8 * i + 32);
      }
      uint64_t v24 = v23;
      id v25 = [v23 assetFileURL];
      if (v25)
      {

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = v79;
    unint64_t v26 = v80[0];
    uint64_t v4 = v3;
    uint64_t v5 = v77;
    uint64_t v9 = v78;
    os_log_type_t v19 = v75;
    a2 = v76;
    if ((v80[0] & 0x8000000000000000) != 0) {
      goto LABEL_49;
    }
LABEL_16:
    if ((v26 & 0x4000000000000000) == 0)
    {
      uint64_t v27 = *(void *)(v26 + 16);
      goto LABEL_18;
    }
LABEL_49:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
LABEL_18:
    swift_release();
    if (v27 > 0)
    {
      swift_retain();
      char v28 = sub_1000088E4();
      swift_release();
      if ((v28 & 1) != 0 && [a2 canUploadOnExpensiveNetwork])
      {
        defaultLogger()();
        unint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v31 = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "Device is on expensive network but the user has given consent to upload over cellular network. Start uploads...", v31, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v9 + 8))(v19, v8);
        id v32 = [a2 proofingSessionID];
        if (v32)
        {
          uint64_t v33 = v32;
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v36 = v35;
        }
        else
        {
          uint64_t v34 = 0;
          uint64_t v36 = 0;
        }
        [a2 target];
        uint64_t v58 = IdentityTarget.init(rawValue:)();
        LOBYTE(v40) = 1;
        sub_1000E3010(v34, v36, v58, v59 & 1, 1);
        swift_bridgeObjectRelease();
        return v40 & 1;
      }
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = v5;
      *(void *)(v37 + 24) = a2;
      uint64_t v38 = v5;
      swift_retain();
      id v39 = a2;
      runAsyncAndBlock<A>(file:function:line:_:)();
      swift_release();
      if (LOBYTE(v80[0]) != 1)
      {
        LOBYTE(v40) = 1;
        return v40 & 1;
      }
      uint64_t v40 = v81;
      defaultLogger()();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Device is on an expensive network and the data size is greater than the threshold. No consent to upload on cellular. Will not upload the files.", v43, 2u);
        uint64_t v40 = v81;
        swift_slowDealloc();
      }

      os_log_type_t v44 = *(void (**)(void *, uint64_t))(v9 + 8);
      v44(v40, v8);
      id v45 = [v39 proofingSessionID];
      if (v45)
      {
        uint64_t v40 = v45;
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = v47;
      }
      else
      {
        uint64_t v46 = 0;
        uint64_t v48 = 0;
      }
      [v39 target];
      uint64_t v49 = IdentityTarget.init(rawValue:)();
      sub_1000E3010(v46, v48, v49, v50 & 1, 9);
      swift_bridgeObjectRelease();
      sub_1000E00E0();
      if (v4) {
        return v40 & 1;
      }
      defaultLogger()();
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Checking if connect to wifi reminder should be shown", v53, 2u);
        swift_slowDealloc();
      }

      v44(v74, v8);
      if ([v39 didShowWifiReminderAlert])
      {
        os_log_type_t v54 = v72;
        defaultLogger()();
        os_log_type_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v55, v56))
        {
          double v57 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)double v57 = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "Connect to WiFi reminder alert has been shown to the user once already. Will not show it again.", v57, 2u);
          swift_slowDealloc();
        }

        v44(v54, v8);
        LOBYTE(v40) = 0;
        return v40 & 1;
      }
      defaultLogger()();
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Connect to wifi reminder to be shown...", v62, 2u);
        swift_slowDealloc();
      }

      v44(v73, v8);
      sub_100030A10(v38 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_connectToWifiAlertProvider, (uint64_t)v80);
      int v63 = sub_10000C728(v80, v80[3]);
      id v64 = [v39 proofingSessionID];
      if (v64)
      {
        int v65 = v64;
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v68 = v67;
      }
      else
      {
        uint64_t v66 = 0;
        uint64_t v68 = 0;
      }
      [v39 target];
      uint64_t v69 = IdentityTarget.init(rawValue:)();
      sub_1004649EC(v66, v68, v69, v70 & 1, *v63, v63[1], v63[2], *((double *)v63 + 3));
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v80);
    }
    LOBYTE(v40) = 0;
    return v40 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DF53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1000DF560, 0, 0);
}

uint64_t sub_1000DF560()
{
  uint64_t v1 = (void *)v0[4];
  v0[5] = *(void *)(v0[3] + 32);
  swift_retain();
  id v2 = [v1 totalUploadAssetsFileSizeInBytes];
  char v3 = [v1 canUploadOnExpensiveNetwork];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000DF63C;
  return sub_100008ACC((uint64_t)v2, v3);
}

uint64_t sub_1000DF63C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000DF75C, 0, 0);
}

uint64_t sub_1000DF75C()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DF77C(void *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v83 = a3;
  uint64_t v84 = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v80 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v10 - 8);
  uint64_t v77 = (char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v79 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v76 = (char *)v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v78 = (void (*)(char *, uint64_t))((char *)v66 - v15);
  uint64_t v82 = type metadata accessor for DIPBackgroundDeferralStatus();
  uint64_t v16 = *(void *)(v82 - 8);
  uint64_t v17 = __chkstk_darwin(v82);
  uint64_t v81 = (char *)v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v66 - v19;
  unint64_t v21 = sub_1000E3900(a1);
  if (v21)
  {
    uint64_t v75 = v12;
    id v22 = a1;
    char v23 = sub_1000DED00(v21, a1);
    uint64_t v24 = swift_bridgeObjectRelease();
    if (v4) {
      return v25 & 1;
    }
    uint64_t v73 = v5;
    id v74 = v22;
    if ((v23 & 1) == 0)
    {
      char v25 = 1;
      return v25 & 1;
    }
    v84(v24);
    unint64_t v26 = *(void (**)(void))(v16 + 104);
    uint64_t v27 = v81;
    uint64_t v28 = v82;
    unsigned int v70 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
    uint64_t v71 = v16 + 104;
    uint64_t v69 = (void (*)(char *, void, uint64_t))v26;
    v26(v81);
    char v29 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v30 = v16 + 8;
    v31(v27, v28);
    uint64_t v72 = v31;
    v31(v20, v28);
    if (v29)
    {
      char v25 = 0;
      return v25 & 1;
    }
    id v33 = v74;
    [v74 target];
    uint64_t v34 = IdentityTarget.init(rawValue:)();
    if (v35)
    {
      (*(void (**)(char *, void, uint64_t))(v80 + 104))(v9, enum case for DIPError.Code.targetUnavailable(_:), v7);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return v25 & 1;
    }
    uint64_t v36 = v34;
    v66[2] = v30;
    dispatch_semaphore_t v68 = dispatch_semaphore_create(0);
    uint64_t v80 = swift_allocObject();
    *(void *)(v80 + 16) = 0;
    id v37 = [v33 proofingSessionID];
    v66[1] = 0;
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v41 = 0;
    }
    sub_1000E3010(v39, v41, v36, 0, 1);
    swift_bridgeObjectRelease();
    swift_retain();
    id v42 = [v74 proofingSessionID];
    if (v42)
    {
      uint64_t v43 = v42;
      uint64_t v44 = v36;
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v46 = v45;
    }
    else
    {
      uint64_t v44 = v36;
      uint64_t v67 = 0;
      uint64_t v46 = 0;
    }
    uint64_t v47 = v80;
    int v48 = [v74 canUploadOnExpensiveNetwork];
    uint64_t v49 = swift_allocObject();
    dispatch_semaphore_t v50 = v68;
    *(void *)(v49 + 16) = v68;
    *(void *)(v49 + 24) = v47;
    uint64_t v51 = v50;
    swift_retain();
    sub_10002DCA0(v67, v46, 0, 0, v44, 0, v48, (uint64_t)sub_1000E3B60, v49);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    OS_dispatch_semaphore.wait()();
    uint64_t v52 = swift_beginAccess();
    if (*(void *)(v47 + 16))
    {
      swift_errorRetain();
      swift_willThrow();
      swift_release();

      return v25 & 1;
    }
    v84(v52);
    os_log_type_t v54 = v81;
    uint64_t v53 = v82;
    v69(v81, v70, v82);
    char v55 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
    os_log_type_t v56 = v72;
    v72(v54, v53);
    v56(v20, v53);
    if (v55)
    {

LABEL_28:
      swift_release();
      char v25 = v55 ^ 1;
      return v25 & 1;
    }
    swift_retain();
    id v57 = [v74 createdAt];
    if (v57)
    {
      uint64_t v58 = v57;
      char v59 = v76;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v60 = v79;
      os_log_type_t v61 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
      uint64_t v62 = (uint64_t)v77;
      uint64_t v63 = v75;
      v61(v77, v59, v75);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v62, 0, 1, v63);
      int v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v62, 1, v63);
      int v65 = v78;
      if (v64 != 1)
      {
        v61((char *)v78, (char *)v62, v75);
LABEL_27:
        [v74 manualCheckInterval];
        sub_1005E790C(v65);
        swift_release();

        (*(void (**)(void, uint64_t))(v60 + 8))(v65, v75);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v60 = v79;
      uint64_t v62 = (uint64_t)v77;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56))(v77, 1, 1, v75);
      int v65 = v78;
    }
    Date.init()();
    sub_10000C6CC(v62, &qword_1007239B0);
    goto LABEL_27;
  }
  char v25 = 0;
  return v25 & 1;
}

Swift::Int sub_1000DFFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    swift_beginAccess();
    *(void *)(a3 + 16) = a1;
    swift_errorRetain();
    swift_errorRelease();
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_1000E0038(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025D64;
  return sub_1000E0424(a1, a2);
}

uint64_t sub_1000E00E0()
{
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v3 = (char *)&v17[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007764(&qword_100723318);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPBackgroundActivitySettings();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  DIPBackgroundActivitySettings.init()();
  DIPBackgroundActivitySettings.requireNetworkActivity.setter();
  DIPBackgroundActivitySettings.allowBattery.setter();
  DIPBackgroundActivitySettings.requireInExpensiveNetworkConnectivity.setter();
  sub_100030A10(v0 + 40, (uint64_t)v17);
  sub_10000C728(v17, v17[3]);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  dispatch thunk of DIPBackgroundActivityManagerProtocol.scheduleActivity(identifier:after:gracePeriod:settings:)();
  if (v1)
  {
    sub_10000C6CC((uint64_t)v6, &qword_100723318);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v17);
  }
  else
  {
    uint64_t v12 = v16;
    sub_10000C6CC((uint64_t)v6, &qword_100723318);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v17);
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Scheduling background activity to be triggered when the device connects to wifi.", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v3, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_1000E0424(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[13] = v5;
  v3[14] = *(void *)(v5 - 8);
  v3[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPBackgroundDeferralStatus();
  v3[16] = v6;
  v3[17] = *(void *)(v6 - 8);
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v3[20] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1000E05DC;
  return sub_1000DA748();
}

uint64_t sub_1000E05DC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E06D8, 0, 0);
}

uint64_t sub_1000E06D8()
{
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 136);
  (*(void (**)(void))(v0 + 56))();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v3);
  char v5 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  v6(v1, v3);
  if (v5)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  else
  {
    type metadata accessor for IdentityProofingDataContext();
    swift_allocObject();
    sub_1000FF820();
    *(void *)(v0 + 168) = v7;
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v22 = *(void *)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 72);
    uint64_t v13 = *(void *)(v0 + 56);
    os_log_type_t v14 = (void *)swift_allocObject();
    *(void *)(v0 + 176) = v14;
    v14[2] = v8;
    v14[3] = v13;
    v14[4] = v12;
    v14[5] = v11;
    uint64_t v15 = swift_allocObject();
    *(void *)(v0 + 184) = v15;
    *(void *)(v15 + 16) = sub_1000E2814;
    *(void *)(v15 + 24) = v14;
    uint64_t v16 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
    swift_retain();
    swift_retain();
    swift_retain();
    v17(v22, v16, v10);
    swift_retain();
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_1000E0B28;
    uint64_t v19 = *(void *)(v0 + 120);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v18, v19, sub_100027978, v15, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_1000E0B28()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[14] + 8))(v2[15], v2[13]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_1000E0D34;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_1000E0CA4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E0CA4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E0D34()
{
  uint64_t v15 = v0;
  swift_release();
  swift_release();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[10];
    uint64_t v13 = v0[12];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[6] = sub_100110D58(v4, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error received when attempting to retrieve proofing sessions to update %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  }
  else
  {
    uint64_t v7 = v0[11];
    uint64_t v6 = v0[12];
    uint64_t v8 = v0[10];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_1000E0F98(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v146 = a4;
  unint64_t v147 = a2;
  uint64_t v148 = a3;
  uint64_t v4 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v142 = (char *)v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for Date();
  unint64_t v132 = *(void *)(v144 - 8);
  uint64_t v6 = __chkstk_darwin(v144);
  uint64_t v133 = (char *)v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v138 = (void (*)(char *, uint64_t))((char *)v116 - v8);
  uint64_t v136 = type metadata accessor for DIPBackgroundDeferralStatus();
  uint64_t v139 = *(void *)(v136 - 8);
  uint64_t v9 = __chkstk_darwin(v136);
  uint64_t v135 = (char *)v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v134 = (char *)v116 - v11;
  uint64_t v149 = type metadata accessor for Logger();
  uint64_t v143 = *(void (***)(char *, uint64_t))(v149 - 8);
  uint64_t v12 = __chkstk_darwin(v149);
  uint64_t v129 = (char *)v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v116 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)v116 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)v116 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  char v25 = (char *)v116 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)v116 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)v116 - v29;
  id v31 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [v31 initWithEntityName:v32];

  sub_100007764(&qword_1007232F0);
  uint64_t v34 = v145;
  unint64_t v35 = NSManagedObjectContext.fetch<A>(_:)();
  if (v34)
  {

    return;
  }
  uint64_t v140 = v28;
  uint64_t v141 = v25;
  uint64_t v131 = v22;
  uint64_t v137 = v19;
  uint64_t v124 = v16;
  uint64_t v36 = (id *)sub_10052F04C(v35);
  swift_bridgeObjectRelease();

  uint64_t v145 = v36;
  if (v36)
  {
    id v37 = v134;
    uint64_t v38 = v147;
    v147();
    uint64_t v39 = (void (*)(uint64_t))v38;
    uint64_t v40 = v139;
    uint64_t v41 = *(void (**)(void))(v139 + 104);
    id v42 = v135;
    unsigned int v123 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
    uint64_t v43 = v136;
    uint64_t v122 = v139 + 104;
    uint64_t v121 = (void (*)(char *, void, uint64_t))v41;
    v41(v135);
    LOBYTE(v38) = static DIPBackgroundDeferralStatus.== infix(_:_:)();
    uint64_t v45 = *(void (**)(char *, uint64_t))(v40 + 8);
    uint64_t v44 = v40 + 8;
    v45(v42, v43);
    unint64_t v120 = v45;
    v45(v37, v43);
    if (v38)
    {
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v139 = v44;
    uint64_t v49 = os_transaction_create();
    if ((unint64_t)v145 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v50 = *(void *)(((unint64_t)v145 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v51 = v137;
    unint64_t v52 = v132;
    if (v50)
    {
      v116[3] = v49;
      unint64_t v132 = (unint64_t)v145 & 0xC000000000000001;
      ++v143;
      uint64_t v127 = (void (**)(char *, char *, uint64_t))(v52 + 32);
      uint64_t v128 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
      uint64_t v125 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
      uint64_t v118 = (void (**)(void, uint64_t))(v52 + 8);
      uint64_t v53 = 4;
      uint64_t v119 = (void *)0x8000000100634750;
      v116[6] = (char *)&type metadata for () + 8;
      v116[2] = "debug.clear-manual-check-time";
      v116[5] = 0x8000000100634770;
      v116[1] = "undActivityProvider.swift";
      v116[4] = 0x80000001006347B0;
      uint64_t v126 = v50;
      while (1)
      {
        os_log_type_t v54 = (void *)(v53 - 4);
        if (v132) {
          char v55 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          char v55 = v145[v53];
        }
        os_log_type_t v56 = v55;
        uint64_t v57 = v53 - 3;
        if (__OFADD__(v54, 1))
        {
          __break(1u);
          swift_release();

          (*v118)(v138, v144);
          goto LABEL_49;
        }
        if (sub_1000DF77C(v55, v39, v148)) {
          break;
        }
        defaultLogger()();
        uint64_t v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v62, v63))
        {
          int v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int v64 = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "No upload assets to upload to cloudkit, continuing with the proofing session update from the background task", v64, 2u);
          uint64_t v51 = v137;
          swift_slowDealloc();
        }

        uint64_t v130 = *v143;
        v130(v141, v149);
        id v65 = [v56 createdAt];
        if (!v65)
        {
          uint64_t v69 = (uint64_t)v142;
          (*v128)(v142, 1, 1, v144);
LABEL_31:
          sub_10000C6CC(v69, &qword_1007239B0);
          defaultLogger()();
          uint64_t v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v82, v83))
          {
            uint64_t v84 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v84 = 0;
            _os_log_impl((void *)&_mh_execute_header, v82, v83, "createdDate doesn't exist in the storedProofingSession, exiting idp background activity", v84, 2u);
            uint64_t v51 = v137;
            swift_slowDealloc();
            uint64_t v85 = v56;
          }
          else
          {
            uint64_t v85 = v82;
            uint64_t v82 = v56;
          }

          v130(v131, v149);
LABEL_35:
          uint64_t v39 = (void (*)(uint64_t))v147;
          goto LABEL_36;
        }
        uint64_t v66 = v65;
        uint64_t v67 = v133;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        dispatch_semaphore_t v68 = *v127;
        uint64_t v69 = (uint64_t)v142;
        unsigned int v70 = v67;
        uint64_t v71 = v146;
        uint64_t v72 = v144;
        (*v127)(v142, v70, v144);
        (*v128)((char *)v69, 0, 1, v72);
        uint64_t v73 = v72;
        uint64_t v50 = v126;
        if ((*v125)(v69, 1, v73) == 1) {
          goto LABEL_31;
        }
        v68((char *)v138, (char *)v69, v144);
        id v74 = [self standardUserDefaults];
        v75._countAndFlagsBits = 0xD00000000000001DLL;
        v75._object = v119;
        Swift::Bool v76 = NSUserDefaults.internalBool(forKey:)(v75);

        if (v76)
        {
          defaultLogger()();
          uint64_t v77 = Logger.logObject.getter();
          os_log_type_t v78 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v77, v78))
          {
            uint64_t v79 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v79 = 0;
            _os_log_impl((void *)&_mh_execute_header, v77, v78, "Skipping the time elapsed check as the clearManualCheckTime internal setting has been enabled", v79, 2u);
            uint64_t v51 = v137;
            uint64_t v71 = v146;
            swift_slowDealloc();
          }

          v130(v51, v149);
          uint64_t v80 = swift_allocObject();
          *(void *)(v80 + 16) = v71;
          *(void *)(v80 + 24) = v56;
          swift_retain();
          uint64_t v81 = v56;
          runAsyncAndBlock<A>(timeout:file:function:line:_:)();
          (*v118)(v138, v144);
          swift_release();

          goto LABEL_35;
        }
        unint64_t v86 = v134;
        uint64_t v87 = v147;
        v147();
        uint64_t v39 = (void (*)(uint64_t))v87;
        os_log_type_t v88 = v135;
        uint64_t v89 = v136;
        v121(v135, v123, v136);
        int v117 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
        uint64_t v90 = v120;
        v120(v88, v89);
        v90(v86, v89);
        if ((v117 & 1) == 0)
        {
          [v56 manualCheckInterval];
          uint64_t v91 = v138;
          if ((sub_1000E3588() & 1) == 0)
          {
            swift_retain();
            [v56 manualCheckInterval];
            sub_1005E790C(v91);
            swift_release();

            (*v118)(v91, v144);
LABEL_48:
            uint64_t v51 = v137;
            uint64_t v50 = v126;
            goto LABEL_36;
          }
          uint64_t v92 = v124;
          defaultLogger()();
          uint64_t v93 = Logger.logObject.getter();
          os_log_type_t v94 = static os_log_type_t.debug.getter();
          BOOL v95 = os_log_type_enabled(v93, v94);
          uint64_t v96 = v134;
          if (v95)
          {
            unint64_t v97 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v97 = 0;
            _os_log_impl((void *)&_mh_execute_header, v93, v94, "Manual check time has elapsed. Will update proofing...", v97, 2u);
            swift_slowDealloc();
          }

          uint64_t v98 = ((uint64_t (*)(char *, uint64_t))v130)(v92, v149);
          uint64_t v99 = v147;
          ((void (*)(uint64_t))v147)(v98);
          uint64_t v39 = (void (*)(uint64_t))v99;
          uint64_t v100 = v96;
          uint64_t v101 = v135;
          uint64_t v102 = v136;
          v121(v135, v123, v136);
          int v117 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
          uint64_t v103 = v120;
          v120(v101, v102);
          v103(v100, v102);
          if ((v117 & 1) == 0)
          {
            uint64_t v104 = swift_allocObject();
            *(void *)(v104 + 16) = v146;
            *(void *)(v104 + 24) = v56;
            swift_retain();
            uint64_t v105 = v56;
            runAsyncAndBlock<A>(timeout:file:function:line:_:)();
            swift_release();
            uint64_t v106 = v129;
            defaultLogger()();
            uint64_t v107 = Logger.logObject.getter();
            os_log_type_t v108 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v107, v108))
            {
              uint64_t v109 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v109 = 0;
              _os_log_impl((void *)&_mh_execute_header, v107, v108, "Pending actions request complete from Identity Proofing Background activity", v109, 2u);
              swift_slowDealloc();
            }

            uint64_t v110 = ((uint64_t (*)(char *, uint64_t))v130)(v106, v149);
            unint64_t v111 = v134;
            char v112 = v147;
            ((void (*)(uint64_t))v147)(v110);
            uint64_t v39 = (void (*)(uint64_t))v112;
            uint64_t v113 = v135;
            uint64_t v114 = v136;
            v121(v135, v123, v136);
            static DIPBackgroundDeferralStatus.== infix(_:_:)();

            os_log_type_t v115 = v120;
            v120(v113, v114);
            v115(v111, v114);
            (*v118)(v138, v144);
            goto LABEL_48;
          }
        }
        (*v118)(v138, v144);

        uint64_t v51 = v137;
        uint64_t v50 = v126;
LABEL_36:
        ++v53;
        if (v57 == v50) {
          goto LABEL_49;
        }
      }
      defaultLogger()();
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Wait for the schdeuled background task to be triggered to make pending actions request.", v60, 2u);
        uint64_t v51 = v137;
        swift_slowDealloc();
        os_log_type_t v61 = v56;
      }
      else
      {
        os_log_type_t v61 = v58;
        uint64_t v58 = v56;
      }

      (*v143)(v140, v149);
      goto LABEL_35;
    }
LABEL_49:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    defaultLogger()();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      int v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "No proofing sessions exist to be updated", v48, 2u);
      swift_slowDealloc();
    }

    v143[1](v30, v149);
  }
}

uint64_t sub_1000E2010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  return _swift_task_switch(sub_1000E2030, 0, 0);
}

uint64_t sub_1000E2030()
{
  id v1 = [*(id *)(v0 + 24) proofingSessionID];
  if (v1)
  {
    os_log_type_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  *(void *)(v0 + 32) = v5;
  [*(id *)(v0 + 24) target];
  uint64_t v6 = IdentityTarget.init(rawValue:)();
  char v8 = v7 & 1;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000E213C;
  return sub_1000DB9C0(v3, v5, v6, v8);
}

uint64_t sub_1000E213C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000E3EC8, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000E2278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  return _swift_task_switch(sub_1000E2298, 0, 0);
}

uint64_t sub_1000E2298()
{
  id v1 = [*(id *)(v0 + 24) proofingSessionID];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  *(void *)(v0 + 32) = v5;
  [*(id *)(v0 + 24) target];
  uint64_t v6 = IdentityTarget.init(rawValue:)();
  char v8 = v7 & 1;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000E23A4;
  return sub_1000DB9C0(v3, v5, v6, v8);
}

uint64_t sub_1000E23A4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000E24E0, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000E24E0()
{
  swift_bridgeObjectRelease();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E2544()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 40);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 80);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_locale;
  uint64_t v2 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_connectToWifiAlertProvider);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000E2650()
{
  sub_1000E2544();

  return swift_deallocClassInstance();
}

uint64_t sub_1000E26A8()
{
  return type metadata accessor for IdentityProofingBackgroundActivityProvider();
}

uint64_t type metadata accessor for IdentityProofingBackgroundActivityProvider()
{
  uint64_t result = qword_100722FD0;
  if (!qword_100722FD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E26FC()
{
  uint64_t result = type metadata accessor for Locale();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_1000E27CC()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000E2814()
{
  sub_1000E0F98(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000E2834()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E286C(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v58) = a4;
  uint64_t v52 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  os_log_type_t v56 = (char *)&v50 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  char v55 = (char *)&v50 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v50 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v50 - v18;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v51 = a1;
  if (v22)
  {
    uint64_t v50 = v17;
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v54 = v6;
    v60[0] = v24;
    uint64_t v53 = v10;
    uint64_t v57 = v7;
    *(_DWORD *)uint64_t v23 = 136315138;
    if (a2)
    {
      unint64_t v25 = a2;
    }
    else
    {
      a1 = 7104878;
      unint64_t v25 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_100110D58(a1, v25, v60);
    uint64_t v7 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v17 = v50;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Checking if the data has to be cleared for proofingSession with ID %s", v23, 0xCu);
    swift_arrayDestroy();
    uint64_t v6 = v54;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v19, v6);
  id v27 = [self standardUserDefaults];
  v28._object = (void *)0x8000000100634AB0;
  v28._countAndFlagsBits = 0xD000000000000026;
  Swift::Bool v29 = NSUserDefaults.internalBool(forKey:)(v28);

  if (!v29)
  {
    uint64_t v34 = swift_allocObject();
    *(unsigned char *)(v34 + 16) = 0;
    if (a2)
    {
      if ((v58 & 1) == 0)
      {
        type metadata accessor for IdentityProofingDataContext();
        swift_allocObject();
        swift_bridgeObjectRetain();
        sub_1000FF820();
        uint64_t v45 = v44;
        uint64_t v46 = (void *)swift_allocObject();
        uint64_t v47 = v51;
        v46[2] = v45;
        v46[3] = v47;
        uint64_t v48 = v52;
        v46[4] = a2;
        v46[5] = v48;
        v46[6] = v34;
        swift_retain();
        swift_retain();
        sub_1000FFE3C((uint64_t)sub_1000E3E70, (uint64_t)v46);
        swift_release();
        swift_release();
        swift_beginAccess();
        uint64_t v33 = *(unsigned __int8 *)(v34 + 16);
        swift_release();
        return v33;
      }
      uint64_t v40 = v55;
      defaultLogger()();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to update proofing as target doesn't exist", v43, 2u);
        swift_slowDealloc();
      }

      uint64_t v39 = v40;
    }
    else
    {
      unint64_t v35 = v56;
      defaultLogger()();
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to update proofing as proofingSessionID doesn't exist", v38, 2u);
        swift_slowDealloc();
      }

      uint64_t v39 = v35;
    }
    v26(v39, v6);
    swift_release();
    return 0;
  }
  defaultLogger()();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    NSString v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "ClearProvisioningRetryTimeout Interval setting has been enabled.", v32, 2u);
    swift_slowDealloc();
  }

  v26(v17, v6);
  return 1;
}

uint64_t sub_1000E3010(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v34 = a3;
  uint64_t v35 = a5;
  uint64_t v33 = a1;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v36 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DIPError();
  uint64_t v37 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v32 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v32 - v16;
  if (a2)
  {
    if (a4)
    {
      uint64_t v23 = v15;
      defaultLogger()();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to update proofing as target doesn't exist", v26, 2u);
        swift_slowDealloc();
      }

      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v23);
    }
    else
    {
      v32[1] = v15;
      type metadata accessor for IdentityProofingDataContext();
      swift_allocObject();
      swift_bridgeObjectRetain();
      sub_1000FF820();
      uint64_t v28 = v27;
      Swift::Bool v29 = (void *)swift_allocObject();
      uint64_t v30 = v33;
      v29[2] = v28;
      v29[3] = v30;
      uint64_t v31 = v34;
      v29[4] = a2;
      v29[5] = v31;
      v29[6] = v35;
      swift_retain();
      sub_1000FFE3C((uint64_t)sub_1000E3BA8, (uint64_t)v29);
      swift_release();
      return swift_release();
    }
  }
  else
  {
    uint64_t v18 = v15;
    defaultLogger()();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to clearProofingSession as proofingSessionID doesn't exist", v21, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v18);
  }
}

uint64_t sub_1000E3588()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = v0;
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "checking if the manual check interval has elapsed...", v10, 2u);
    uint64_t v0 = v14;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  Date.init()();
  char v11 = Date.isAtLeast(seconds:after:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v11 & 1;
}

uint64_t sub_1000E37A4()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10000C494;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_1000E2298, 0, 0);
}

uint64_t sub_1000E3854()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100025D64;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_1000E2030, 0, 0);
}

unint64_t sub_1000E3900(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 uploadAssets];
  if (v6)
  {
    id v7 = v6;
    sub_100530DA4(v7);
    uint64_t v9 = v8;

    unint64_t v10 = (unint64_t)sub_10052EF50(v9);
    swift_release();
    if (v10)
    {
      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
        if (v16 > 0) {
          return v10;
        }
      }
      else
      {
        uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);

        if (v11 > 0) {
          return v10;
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Upload assets doesn't exist to be uploaded.", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t sub_1000E3AE8()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E3B20()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_1000E3B60(uint64_t a1)
{
  return sub_1000DFFCC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000E3B68()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000E3BA8()
{
  return sub_1000E3E9C((uint64_t (*)(void, void, void, void, void))sub_1000DE8A0);
}

uint64_t sub_1000E3BD8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E3C18(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_10000C494;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(sub_1000DF560, 0, 0);
}

uint64_t sub_1000E3CCC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E3D04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E3D50()
{
  return sub_1000E3E9C((uint64_t (*)(void, void, void, void, void))sub_1000DE560);
}

uint64_t sub_1000E3D80()
{
  return sub_1000E3E9C((uint64_t (*)(void, void, void, void, void))sub_1000DE2BC);
}

uint64_t sub_1000E3DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007239B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E3E14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000E3E28()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000E3E70()
{
  return sub_1000E3E9C((uint64_t (*)(void, void, void, void, void))sub_1000DD7DC);
}

uint64_t sub_1000E3E9C(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_1000E3ECC()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v2);
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v3 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  long long v5 = v3 + 52;
  os_unfair_lock_lock(v3 + 52);
  sub_1000262B4(v4, v8);
  os_unfair_lock_unlock(v5);
  if (v1)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    sub_1000262D0((uint64_t)v8);
    id v6 = (void *)AsyncCoreDataStore.container.getter();
    swift_release();
    id v7 = [v6 newBackgroundContext];

    *(void *)(v0 + 16) = v7;
  }
}

id sub_1000E4160()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v5 = *(void **)(v0 + 16);
  v18[0] = 0;
  if ([v5 save:v18]) {
    return v18[0];
  }
  id v7 = v18[0];
  uint64_t v8 = _convertNSErrorToError(_:)();

  swift_willThrow();
  v18[0] = 0;
  v18[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(48);
  v9._object = (void *)0x8000000100634D30;
  v9._countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v9);
  void v17[4] = v8;
  sub_100007764((uint64_t *)&unk_100723450);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
  sub_100007764((uint64_t *)&unk_1007225C0);
  unint64_t v10 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100610730;
  os_log_type_t v13 = (uint64_t *)(v12 + v11 + v10[14]);
  uint64_t v14 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  uint64_t v15 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v12 + v11, v14, v15);
  swift_getErrorValue();
  swift_errorRetain();
  uint64_t v16 = dispatch thunk of Error._code.getter();
  v13[3] = (uint64_t)&type metadata for Int;
  *os_log_type_t v13 = v16;
  sub_10015C504(v12);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return (id)swift_errorRelease();
}

uint64_t sub_1000E44E8(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  long long v5 = *(void **)(v2 + 16);
  id v6 = (void *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = &v11;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1000E4E84;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_1000E4EA0;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100032314;
  aBlock[3] = &unk_1006F82D0;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v5 performBlockAndWait:v8];
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5)
  {
    __break(1u);
  }
  else
  {
    if (v11)
    {
      swift_errorRetain();
      swift_willThrow();
      swift_errorRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1000E468C(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = __chkstk_darwin(v2);
  return a1(v3);
}

uint64_t sub_1000E4834(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::Bool v29 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 initWithEntityName:v9];

  [v10 setFetchLimit:1];
  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v11 = swift_allocObject();
  long long v28 = xmmword_100610730;
  *(_OWORD *)(v11 + 16) = xmmword_100610730;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_1000E4DF8();
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v12 = NSPredicate.init(format:_:)();
  [v10 setPredicate:v12];

  sub_100007764(&qword_1007232F0);
  unint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v14._countAndFlagsBits = 0xD000000000000035;
    v14._object = (void *)0x8000000100634C40;
    String.append(_:)(v14);
    v15._countAndFlagsBits = a1;
    v15._object = a2;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x3A726F727265203ALL;
    v16._object = (void *)0xE900000000000020;
    String.append(_:)(v16);
    uint64_t v32 = v2;
    sub_100007764((uint64_t *)&unk_100723450);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v29, enum case for DIPError.Code.coreDataError(_:), v5);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v17 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v18 = (*(unsigned __int8 *)(*(void *)v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v17 + 80);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = v28;
    unint64_t v20 = v19 + v18;
    os_log_type_t v21 = (void *)(v19 + v18 + v17[14]);
    uint64_t v22 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v23 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v20, v22, v23);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v24 = dispatch thunk of Error._code.getter();
    v21[3] = &type metadata for Int;
    *os_log_type_t v21 = v24;
    sub_10015C504(v19);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return (uint64_t)v21;
  }
  unint64_t v25 = (unint64_t)sub_10052F064(v13);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v25)
  {

    return 0;
  }
  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    os_log_type_t v21 = (void *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_10;
    }
  }
  else
  {
    os_log_type_t v21 = *(void **)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v21)
    {
LABEL_10:
      swift_bridgeObjectRelease();

      return (uint64_t)v21;
    }
  }
  if ((v25 & 0xC000000000000001) != 0)
  {
    uint64_t v27 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v27 = *(id *)(v25 + 32);
LABEL_9:
    os_log_type_t v21 = v27;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E4D5C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityBiomeDataContext()
{
  return self;
}

unint64_t sub_1000E4DB8()
{
  unint64_t result = qword_100723430;
  if (!qword_100723430)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100723430);
  }
  return result;
}

unint64_t sub_1000E4DF8()
{
  unint64_t result = qword_100723440;
  if (!qword_100723440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100723440);
  }
  return result;
}

uint64_t sub_1000E4E4C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E4E84()
{
  return sub_1000E468C(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1000E4E90()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E4EA0()
{
  return sub_1000322EC(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000E4EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E4EB8()
{
  return swift_release();
}

uint64_t *sub_1000E4EC0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ISO18013KnownDocTypes();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    NSString v9 = (char *)a1 + v8;
    id v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Locale.Region();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    Swift::String v14 = (uint64_t *)((char *)a1 + v13);
    Swift::String v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    sub_10002CEB0(*v15, v17);
    *Swift::String v14 = v16;
    v14[1] = v17;
    uint64_t v18 = a3[8];
    uint64_t v19 = a3[9];
    unint64_t v20 = (uint64_t *)((char *)a1 + v18);
    os_log_type_t v21 = (uint64_t *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *unint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (uint64_t *)((char *)a1 + v19);
    uint64_t v24 = (uint64_t *)((char *)a2 + v19);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = a3[10];
    __dst = (char *)a1 + v26;
    uint64_t v27 = (char *)a2 + v26;
    uint64_t v28 = type metadata accessor for URL();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30(v27, 1, v28))
    {
      uint64_t v31 = sub_100007764(&qword_100720A68);
      memcpy(__dst, v27, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
    }
    uint64_t v33 = a3[11];
    uint64_t v34 = (uint64_t *)((char *)a1 + v33);
    uint64_t v35 = (uint64_t *)((char *)a2 + v33);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000E5148(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for Locale.Region();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  sub_10000C5F4(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[10];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E52C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Locale.Region();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  Swift::String v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_10002CEB0(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)(a1 + v17);
  unint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[10];
  __dst = (void *)(a1 + v25);
  uint64_t v26 = (const void *)(a2 + v25);
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v29(v26, 1, v27))
  {
    uint64_t v30 = sub_100007764(&qword_100720A68);
    memcpy(__dst, v26, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(__dst, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
  }
  uint64_t v31 = a3[11];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  v32[1] = v34;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000E5500(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Locale.Region();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_10002CEB0(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_10000C5F4(v16, v17);
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)(a1 + v18);
  unint64_t v20 = (void *)(a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[9];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 24))(v25, v26, v27);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_6;
  }
  if (v31)
  {
LABEL_6:
    uint64_t v32 = sub_100007764(&qword_100720A68);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v25, v26, v27);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_7:
  uint64_t v33 = a3[11];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000E57CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Locale.Region();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100007764(&qword_100720A68);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1000E599C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Locale.Region();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  sub_10000C5F4(v12, v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  unint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *unint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v25, v26, v27);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_6;
  }
  if (v31)
  {
LABEL_6:
    uint64_t v32 = sub_100007764(&qword_100720A68);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_7:
  uint64_t v33 = a3[11];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000E5C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E5C34);
}

uint64_t sub_1000E5C34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = type metadata accessor for Locale.Region();
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v10 = a1 + a3[6];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      goto LABEL_9;
    }
    uint64_t v15 = sub_100007764(&qword_100720A68);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[10];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_1000E5DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E5DCC);
}

uint64_t sub_1000E5DCC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5]) = (a2 - 1);
    return result;
  }
  uint64_t v13 = type metadata accessor for Locale.Region();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[6];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = sub_100007764(&qword_100720A68);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[10];

  return v16(v18, a2, a2, v17);
}

uint64_t type metadata accessor for ValidatedDigitalPresentmentRequest()
{
  uint64_t result = qword_1007234C8;
  if (!qword_1007234C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000E5F9C()
{
  type metadata accessor for ISO18013KnownDocTypes();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Locale.Region();
    if (v1 <= 0x3F)
    {
      sub_10005D364();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_1000E60C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v318 = a2;
  uint64_t v349 = a1;
  uint64_t v316 = a3;
  uint64_t v317 = type metadata accessor for UsageDescriptionFetcher();
  __chkstk_darwin(v317);
  uint64_t v319 = (char *)&v292 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v335 = type metadata accessor for IdentityIntentToStore();
  uint64_t v331 = *(void *)(v335 - 8);
  __chkstk_darwin(v335);
  uint64_t v323 = (char *)&v292 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_100720AF0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v325 = (char *)&v292 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v322 = (char *)&v292 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v324 = (char *)&v292 - v12;
  __chkstk_darwin(v11);
  uint64_t v326 = (char *)&v292 - v13;
  uint64_t v14 = type metadata accessor for IdentityElement();
  uint64_t v338 = *(void *)(v14 - 8);
  uint64_t v339 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v327 = (char *)&v292 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v330 = (char *)&v292 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  int64_t v333 = (int64_t)&v292 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v334 = (char *)&v292 - v22;
  __chkstk_darwin(v21);
  uint64_t v332 = (char *)&v292 - v23;
  uint64_t v328 = type metadata accessor for Locale.Region();
  uint64_t v329 = *(void *)(v328 - 8);
  uint64_t v24 = __chkstk_darwin(v328);
  uint64_t v321 = (char *)&v292 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v345 = (char *)&v292 - v26;
  uint64_t v27 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v336 = v27;
  uint64_t v337 = v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v315 = (char *)&v292 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v343 = (uint64_t)&v292 - v31;
  uint64_t v32 = type metadata accessor for URL();
  uint64_t v346 = *(void *)(v32 - 8);
  uint64_t v347 = (void (**)(void, void, void))v32;
  __chkstk_darwin(v32);
  uint64_t v341 = (char *)&v292 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100007764(&qword_100720A68);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v320 = (uint64_t)&v292 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v344 = (void (**)(char *, uint64_t))((char *)&v292 - v38);
  __chkstk_darwin(v37);
  uint64_t v340 = (char *)&v292 - v39;
  uint64_t v40 = type metadata accessor for DIPError.Code();
  uint64_t v41 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v43 = (char *)&v292 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v348 = type metadata accessor for Logger();
  uint64_t v355 = *(void *)(v348 - 8);
  uint64_t v44 = __chkstk_darwin(v348);
  uint64_t v313 = (char *)&v292 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v312 = (char *)&v292 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v314 = (char *)&v292 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v350 = (char *)&v292 - v51;
  __chkstk_darwin(v50);
  uint64_t v53 = (char *)&v292 - v52;
  uint64_t v54 = sub_100007764(&qword_100720AD0);
  __chkstk_darwin(v54 - 8);
  os_log_type_t v56 = (char *)&v292 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for IdentityDocumentDescriptor();
  uint64_t v58 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v60 = (char *)&v292 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  DigitalPresentmentRequest.descriptor.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57) == 1)
  {
    sub_10000C6CC((uint64_t)v56, &qword_100720AD0);
    v61._countAndFlagsBits = 0xD000000000000037;
    v61._object = (void *)0x8000000100634E30;
    v62._countAndFlagsBits = 0x3935663735343132;
    v62._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v62, v61);
    (*(void (**)(char *, void, uint64_t))(v41 + 104))(v43, enum case for DIPError.Code.digitalPresentmentNoElementsRequested(_:), v40);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  uint64_t v309 = v40;
  uint64_t v310 = v41;
  uint64_t v311 = v43;
  (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v60, v56, v57);
  uint64_t v64 = DigitalPresentmentRequest.nonce.getter();
  uint64_t v66 = v58;
  if (v65 >> 60 == 15)
  {
    v67._object = (void *)0x8000000100634ED0;
    v68._countAndFlagsBits = 0x6430383738636261;
    v68._object = (void *)0xE800000000000000;
    v67._countAndFlagsBits = 0xD000000000000032;
    logMilestone(tag:description:)(v68, v67);
    (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidNonce(_:), v309);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v60, v57);
  }
  uint64_t v69 = v3;
  uint64_t v307 = v64;
  unint64_t v306 = v65;
  uint64_t v308 = v60;
  unsigned int v70 = self;
  id v71 = [v70 standardUserDefaults];
  v72._countAndFlagsBits = 0xD00000000000002CLL;
  v72._object = (void *)0x8000000100634F30;
  Swift::Bool v73 = NSUserDefaults.internalBool(forKey:)(v72);

  id v74 = [v70 standardUserDefaults];
  v75._countAndFlagsBits = 0xD00000000000001CLL;
  v75._object = (void *)0x8000000100634F60;
  Swift::Bool v76 = NSUserDefaults.internalBool(forKey:)(v75);

  uint64_t v305 = v57;
  if (v76)
  {
    id v302 = v70;
    v77._countAndFlagsBits = 0xD00000000000003DLL;
    v77._object = (void *)0x8000000100635630;
    v78._countAndFlagsBits = 0x6232383030653733;
    v78._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v78, v77);
    defaultLogger()();
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = (uint8_t *)swift_slowAlloc();
      uint64_t v82 = swift_slowAlloc();
      uint64_t v304 = v66;
      uint64_t v353 = v82;
      *(_DWORD *)uint64_t v81 = 136315138;
      uint64_t v303 = 0xD000000000000019;
      uint64_t v351 = sub_100110D58(0xD000000000000019, 0x8000000100635610, &v353);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Forcing test merchant ID %s due to user defaults setting", v81, 0xCu);
      swift_arrayDestroy();
      uint64_t v83 = v304;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v84 = v53;
      uint64_t v85 = (char *)0x8000000100635610;
      uint64_t v86 = v348;
      (*(void (**)(char *, uint64_t))(v355 + 8))(v84, v348);
    }
    else
    {
      uint64_t v83 = v66;

      uint64_t v86 = v348;
      (*(void (**)(char *, uint64_t))(v355 + 8))(v53, v348);
      uint64_t v303 = 0xD000000000000019;
      uint64_t v85 = (char *)0x8000000100635610;
    }
    goto LABEL_12;
  }
  uint64_t v87 = DigitalPresentmentRequest.merchantID.getter();
  if (!v88)
  {
    v108._countAndFlagsBits = 0xD000000000000038;
    v108._object = (void *)0x8000000100634F80;
    v109._countAndFlagsBits = 0x3730366231386537;
    v109._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v109, v108);
    (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidMerchantID(_:), v309);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_27;
  }
  uint64_t v85 = v88;
  id v302 = v70;
  uint64_t v303 = v87;
  if (!v73)
  {
    uint64_t v110 = type metadata accessor for DigitalPresentmentCallingClientConfig();
    uint64_t v93 = v349;
    uint64_t v111 = v303;
    if (sub_10020F0CC(v303, (uint64_t)v85, *(void **)(v349 + *(int *)(v110 + 24) + 16))) {
      goto LABEL_15;
    }
    v112._countAndFlagsBits = 0xD000000000000048;
    v112._object = (void *)0x8000000100634FF0;
    v113._countAndFlagsBits = 0x3032653632313965;
    v113._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v113, v112);
    uint64_t v353 = 0;
    unint64_t v354 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    uint64_t v353 = 0xD000000000000027;
    unint64_t v354 = 0x8000000100635040;
    v114._countAndFlagsBits = v111;
    v114._object = v85;
    String.append(_:)(v114);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidMerchantID(_:), v309);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_27:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5E0(v307, v306);
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v308, v57);
  }
  uint64_t v83 = v66;
  uint64_t v86 = v348;
LABEL_12:
  uint64_t v89 = v350;
  defaultLogger()();
  uint64_t v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v92 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v92 = 0;
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Skipping merchant ID entitlement check due to user defaults setting", v92, 2u);
    uint64_t v89 = v350;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v355 + 8))(v89, v86);
  uint64_t v93 = v349;
  uint64_t v66 = v83;
LABEL_15:
  uint64_t v94 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  BOOL v95 = (char *)*(int *)(v94 + 20);
  char v96 = v95[v93];
  uint64_t v97 = DigitalPresentmentRequest.merchantNameOverride.getter();
  unint64_t v99 = v98;
  if ((v96 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (!v99)
    {
      uint64_t v121 = v340;
      DigitalPresentmentRequest.merchantPrivacyPolicyOverride.getter();
      uint64_t v122 = (uint64_t)v121;
      int v123 = (*(uint64_t (**)(char *, uint64_t, void))(v346 + 48))(v121, 1, v347);
      uint64_t v106 = v308;
      unint64_t v107 = v306;
      if (v123 != 1)
      {
        swift_bridgeObjectRelease();
        sub_10000C6CC(v122, &qword_100720A68);
        (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.missingEntitlement(_:), v309);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        sub_10000C5E0(v307, v107);
        return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v106, v305);
      }
      uint64_t v304 = v66;
      uint64_t v350 = v85;
      uint64_t v301 = v69;
      sub_10000C6CC(v122, &qword_100720A68);
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.missingEntitlement(_:), v309);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_38:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5E0(v307, v306);
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v308, v305);
  }
  if (v98)
  {
    uint64_t v100 = v97;
    swift_bridgeObjectRelease();
    uint64_t v101 = HIBYTE(v99) & 0xF;
    if ((v99 & 0x2000000000000000) == 0) {
      uint64_t v101 = v100 & 0xFFFFFFFFFFFFLL;
    }
    if (!v101)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidFirstPartyValue(_:), v309);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_38;
    }
  }
  uint64_t v304 = v66;
  uint64_t v102 = (uint64_t)v344;
  DigitalPresentmentRequest.merchantPrivacyPolicyOverride.getter();
  uint64_t v103 = v346;
  uint64_t v104 = v347;
  int v105 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v346 + 48))(v102, 1, v347);
  uint64_t v106 = v308;
  if (v105 != 1)
  {
    uint64_t v340 = v95;
    os_log_type_t v115 = v341;
    (*(void (**)(char *, uint64_t, void))(v103 + 32))(v341, v102, v104);
    uint64_t v116 = URL.scheme.getter();
    uint64_t v118 = (uint64_t)v345;
    if (!v117)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidFirstPartyValue(_:), v309);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_10000C5E0(v307, v306);
      (*(void (**)(char *, void (**)(void, void, void)))(v103 + 8))(v115, v347);
      return (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v308, v305);
    }
    uint64_t v353 = v116;
    unint64_t v354 = v117;
    uint64_t v351 = 0x7370747468;
    unint64_t v352 = 0xE500000000000000;
    sub_1000B5358();
    uint64_t v119 = StringProtocol.caseInsensitiveCompare<A>(_:)();
    swift_bridgeObjectRelease();
    unint64_t v120 = v311;
    if (v119)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v310 + 104))(v120, enum case for DIPError.Code.digitalPresentmentInvalidFirstPartyValue(_:), v309);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_10000C5E0(v307, v306);
      (*(void (**)(char *, void (**)(void, void, void)))(v346 + 8))(v341, v347);
      return (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v308, v305);
    }
    uint64_t v350 = v85;
    uint64_t v301 = v69;
    (*(void (**)(char *, void (**)(void, void, void)))(v346 + 8))(v341, v347);
    unint64_t v107 = v306;
    uint64_t v106 = v308;
    BOOL v95 = v340;
    goto LABEL_34;
  }
  uint64_t v350 = v85;
  uint64_t v301 = v69;
  sub_10000C6CC(v102, &qword_100720A68);
  unint64_t v107 = v306;
LABEL_33:
  uint64_t v118 = (uint64_t)v345;
LABEL_34:
  uint64_t v124 = v342;
  uint64_t v125 = v343;
  sub_1000E9D68(v343);
  if (v124)
  {
    sub_10000C5E0(v307, v107);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v106, v305);
  }
  sub_1000EA4B4(v118);
  sub_1000EC3E4(*(void *)(v349 + *(int *)(v94 + 24)), *(void *)(v349 + *(int *)(v94 + 24) + 8));
  unint64_t v126 = v107 >> 62;
  uint64_t v127 = v310;
  uint64_t v128 = v309;
  switch(v107 >> 62)
  {
    case 1uLL:
      if ((v307 ^ (unint64_t)(v307 << 32)) >> 32) {
        goto LABEL_54;
      }
      goto LABEL_49;
    case 2uLL:
      uint64_t v130 = *(void *)(v307 + 16);
      uint64_t v131 = *(void *)(v307 + 24);
      if (v130 == v131) {
        goto LABEL_49;
      }
      if (v126 != 2) {
        goto LABEL_54;
      }
      BOOL v134 = __OFSUB__(v131, v130);
      uint64_t v129 = v131 - v130;
      if (!v134) {
        goto LABEL_56;
      }
      __break(1u);
LABEL_54:
      LODWORD(v129) = HIDWORD(v307) - v307;
      if (__OFSUB__(HIDWORD(v307), v307))
      {
        __break(1u);
        goto LABEL_195;
      }
      uint64_t v129 = (int)v129;
LABEL_56:
      if (v129 <= 1)
      {
        swift_bridgeObjectRelease();
        v135._countAndFlagsBits = 0xD000000000000037;
        v135._object = (void *)0x8000000100635490;
        v136._countAndFlagsBits = 0x3263613038643136;
        v136._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v136, v135);
        (*(void (**)(char *, void, uint64_t))(v127 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidNonce(_:), v128);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_66;
      }
      if (!v126)
      {
        uint64_t v137 = BYTE6(v107);
        goto LABEL_64;
      }
      if (v126 != 1)
      {
        uint64_t v139 = *(void *)(v307 + 16);
        uint64_t v138 = *(void *)(v307 + 24);
        BOOL v134 = __OFSUB__(v138, v139);
        uint64_t v137 = v138 - v139;
        if (!v134) {
          goto LABEL_64;
        }
LABEL_196:
        __break(1u);
        goto LABEL_197;
      }
      LODWORD(v137) = HIDWORD(v307) - v307;
      if (__OFSUB__(HIDWORD(v307), v307))
      {
LABEL_195:
        __break(1u);
        goto LABEL_196;
      }
      uint64_t v137 = (int)v137;
LABEL_64:
      if (v137 >= 65)
      {
        swift_bridgeObjectRelease();
        v140._countAndFlagsBits = 0xD000000000000037;
        v140._object = (void *)0x8000000100635430;
        v141._countAndFlagsBits = 0x6436623862313636;
        v141._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v141, v140);
        (*(void (**)(char *, void, uint64_t))(v127 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidNonce(_:), v128);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_66;
      }
      uint64_t v294 = 0;
      uint64_t v142 = IdentityDocumentDescriptor.elementsToIntentToStore.getter();
      LODWORD(v298) = 0;
      uint64_t v143 = 0;
      uint64_t v144 = *(void *)(v142 + 64);
      uint64_t v299 = v142 + 64;
      uint64_t v340 = (char *)v142;
      uint64_t v145 = 1 << *(unsigned char *)(v142 + 32);
      uint64_t v146 = -1;
      if (v145 < 64) {
        uint64_t v146 = ~(-1 << v145);
      }
      unint64_t v147 = v146 & v144;
      uint64_t v300 = (uint64_t (**)(uint64_t *, uint64_t))((unint64_t)(v145 + 63) >> 6);
      uint64_t v346 = v338 + 16;
      uint64_t v347 = (void (**)(void, void, void))(v338 + 32);
      uint64_t v342 = (uint64_t (**)(char *, uint64_t))(v338 + 88);
      LODWORD(v341) = enum case for IdentityElement.ageIsOver(_:);
      uint64_t v344 = (void (**)(char *, uint64_t))(v338 + 8);
      uint64_t v297 = (void (**)(char *, uint64_t))(v338 + 96);
      uint64_t v148 = v339;
      if ((v146 & v144) == 0) {
        goto LABEL_74;
      }
LABEL_71:
      unint64_t v149 = __clz(__rbit64(v147));
      v147 &= v147 - 1;
      uint64_t v150 = v143;
      for (unint64_t i = v149 | (v143 << 6); ; unint64_t i = __clz(__rbit64(v160)) + (v161 << 6))
      {
        uint64_t v152 = v338;
        uint64_t v153 = *(void (**)(char *, unint64_t, uint64_t))(v338 + 16);
        uint64_t v154 = v332;
        v153(v332, *((void *)v340 + 6) + *(void *)(v338 + 72) * i, v148);
        uint64_t v155 = v334;
        (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v334, v154, v148);
        uint64_t v156 = (char *)v333;
        v153((char *)v333, (unint64_t)v155, v148);
        int v157 = (*(uint64_t (**)(char *, uint64_t))(v152 + 88))(v156, v148);
        if (v157 == v341)
        {
          (*v297)(v156, v148);
          if (v298)
          {
            swift_bridgeObjectRelease();
            v263._countAndFlagsBits = 0xD000000000000048;
            v263._object = (void *)0x8000000100635110;
            v264._countAndFlagsBits = 0x6334346461363462;
            v264._object = (void *)0xE800000000000000;
            logMilestone(tag:description:)(v264, v263);
            (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidElement(_:), v309);
            sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            sub_10000C5E0(v307, v306);
            (*v344)(v334, v339);
            swift_release();
            goto LABEL_169;
          }
          uint64_t v163 = v308;
          uint64_t v164 = v334;
          if ((unint64_t)(*(void *)v156 - 126) <= 0xFFFFFFFFFFFFFF82)
          {
            swift_bridgeObjectRelease();
            v265._countAndFlagsBits = 0xD000000000000039;
            v265._object = (void *)0x80000001006350B0;
            v266._countAndFlagsBits = 0x3864333035396233;
            v266._object = (void *)0xE800000000000000;
            logMilestone(tag:description:)(v266, v265);
            uint64_t v353 = 0;
            unint64_t v354 = 0xE000000000000000;
            _StringGuts.grow(_:)(37);
            swift_bridgeObjectRelease();
            uint64_t v353 = 0x20746E656D656C65;
            unint64_t v354 = 0xE800000000000000;
            sub_1000EC5BC((unint64_t *)&qword_100721270, (void (*)(uint64_t))&type metadata accessor for IdentityElement);
            uint64_t v267 = v339;
            v268._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v268);
            swift_bridgeObjectRelease();
            v269._countAndFlagsBits = 0xD00000000000001BLL;
            v269._object = (void *)0x80000001006350F0;
            String.append(_:)(v269);
            (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidElement(_:), v309);
            sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            sub_10000C5E0(v307, v306);
            (*v344)(v164, v267);
            swift_release();
            (*(void (**)(char *, uint64_t))(v329 + 8))(v345, v328);
            (*(void (**)(uint64_t, uint64_t))(v337 + 8))(v343, v336);
            return (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v163, v305);
          }
          (*v344)(v334, v339);
          LODWORD(v298) = 1;
          uint64_t v143 = v150;
          if (v147) {
            goto LABEL_71;
          }
        }
        else
        {
          uint64_t v158 = *v344;
          (*v344)(v155, v148);
          v158(v156, v148);
          uint64_t v143 = v150;
          if (v147) {
            goto LABEL_71;
          }
        }
LABEL_74:
        uint64_t v159 = v143 + 1;
        if (__OFADD__(v143, 1)) {
          break;
        }
        if (v159 >= (uint64_t)v300) {
          goto LABEL_97;
        }
        unint64_t v160 = *(void *)(v299 + 8 * v159);
        uint64_t v161 = v143 + 1;
        if (!v160)
        {
          uint64_t v161 = v143 + 2;
          if (v143 + 2 >= (uint64_t)v300) {
            goto LABEL_97;
          }
          unint64_t v160 = *(void *)(v299 + 8 * v161);
          if (!v160)
          {
            uint64_t v161 = v143 + 3;
            if (v143 + 3 >= (uint64_t)v300) {
              goto LABEL_97;
            }
            unint64_t v160 = *(void *)(v299 + 8 * v161);
            if (!v160)
            {
              uint64_t v161 = v143 + 4;
              if (v143 + 4 >= (uint64_t)v300) {
                goto LABEL_97;
              }
              unint64_t v160 = *(void *)(v299 + 8 * v161);
              if (!v160)
              {
                uint64_t v161 = v143 + 5;
                if (v143 + 5 >= (uint64_t)v300) {
                  goto LABEL_97;
                }
                unint64_t v160 = *(void *)(v299 + 8 * v161);
                if (!v160)
                {
                  uint64_t v162 = v143 + 6;
                  if (v143 + 6 >= (uint64_t)v300) {
                    goto LABEL_97;
                  }
                  unint64_t v160 = *(void *)(v299 + 8 * v162);
                  if (!v160)
                  {
                    while (1)
                    {
                      uint64_t v161 = v162 + 1;
                      if (__OFADD__(v162, 1)) {
                        break;
                      }
                      if (v161 >= (uint64_t)v300) {
                        goto LABEL_97;
                      }
                      unint64_t v160 = *(void *)(v299 + 8 * v161);
                      ++v162;
                      if (v160) {
                        goto LABEL_96;
                      }
                    }
LABEL_197:
                    __break(1u);
LABEL_198:
                    __break(1u);
LABEL_199:
                    __break(1u);
                    JUMPOUT(0x1000E9D58);
                  }
                  uint64_t v161 = v143 + 6;
                }
              }
            }
          }
        }
LABEL_96:
        unint64_t v147 = (v160 - 1) & v160;
        uint64_t v150 = v161;
      }
      __break(1u);
LABEL_191:
      __break(1u);
      while (2)
      {
        __break(1u);
LABEL_97:
        swift_release();
        uint64_t v165 = IdentityDocumentDescriptor.elementsToIntentToStore.getter();
        int64_t v333 = 0;
        uint64_t v166 = *(void *)(v165 + 64);
        uint64_t v295 = v165 + 64;
        uint64_t v298 = v165;
        uint64_t v167 = 1 << *(unsigned char *)(v165 + 32);
        uint64_t v168 = -1;
        if (v167 < 64) {
          uint64_t v168 = ~(-1 << v167);
        }
        unint64_t v169 = v168 & v166;
        uint64_t v340 = (char *)(v331 + 16);
        uint64_t v332 = (char *)(v331 + 32);
        uint64_t v300 = (uint64_t (**)(uint64_t *, uint64_t))(v331 + 88);
        LODWORD(v299) = enum case for IdentityIntentToStore.mayStoreForDays(_:);
        uint64_t v334 = (char *)(v331 + 8);
        uint64_t v297 = (void (**)(char *, uint64_t))(v331 + 96);
        int64_t v296 = (unint64_t)(v167 + 63) >> 6;
        int64_t v293 = v296 - 1;
        unint64_t v170 = &qword_100720B08;
        uint64_t v171 = v339;
        uint64_t v172 = (uint64_t)v322;
        while (1)
        {
          uint64_t v173 = (uint64_t)v324;
          if (v169)
          {
            unint64_t v174 = __clz(__rbit64(v169));
            v169 &= v169 - 1;
            unint64_t v175 = v174 | (v333 << 6);
LABEL_104:
            uint64_t v176 = v298;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v338 + 16))(v173, *(void *)(v298 + 48) + *(void *)(v338 + 72) * v175, v171);
            uint64_t v177 = *(void *)(v176 + 56);
            uint64_t v178 = v331;
            uint64_t v179 = v177 + *(void *)(v331 + 72) * v175;
            uint64_t v180 = sub_100007764(v170);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v178 + 16))(v173 + *(int *)(v180 + 48), v179, v335);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v180 - 8) + 56))(v173, 0, 1, v180);
            uint64_t v181 = (uint64_t)v326;
            goto LABEL_125;
          }
          int64_t v182 = v333 + 1;
          if (__OFADD__(v333, 1)) {
            goto LABEL_191;
          }
          uint64_t v181 = (uint64_t)v326;
          if (v182 < v296)
          {
            unint64_t v183 = *(void *)(v295 + 8 * v182);
            if (v183) {
              goto LABEL_108;
            }
            int64_t v184 = v333 + 2;
            ++v333;
            if (v182 + 1 < v296)
            {
              unint64_t v183 = *(void *)(v295 + 8 * v184);
              if (v183)
              {
                ++v182;
LABEL_108:
                unint64_t v169 = (v183 - 1) & v183;
                unint64_t v175 = __clz(__rbit64(v183)) + (v182 << 6);
                int64_t v333 = v182;
                goto LABEL_104;
              }
              int64_t v333 = v182 + 1;
              if (v182 + 2 < v296)
              {
                uint64_t v185 = v95;
                uint64_t v186 = v170;
                unint64_t v183 = *(void *)(v295 + 8 * (v182 + 2));
                if (v183)
                {
                  v182 += 2;
LABEL_115:
                  uint64_t v171 = v339;
                  uint64_t v172 = (uint64_t)v322;
                  uint64_t v173 = (uint64_t)v324;
                  goto LABEL_108;
                }
                int64_t v187 = v182 + 3;
                int64_t v333 = v182 + 2;
                uint64_t v172 = (uint64_t)v322;
                uint64_t v173 = (uint64_t)v324;
                uint64_t v181 = (uint64_t)v326;
                if (v182 + 3 < v296)
                {
                  unint64_t v183 = *(void *)(v295 + 8 * v187);
                  if (v183)
                  {
                    v182 += 3;
                    goto LABEL_115;
                  }
                  while (1)
                  {
                    int64_t v182 = v187 + 1;
                    if (__OFADD__(v187, 1)) {
                      goto LABEL_198;
                    }
                    if (v182 >= v296) {
                      break;
                    }
                    unint64_t v183 = *(void *)(v295 + 8 * v182);
                    ++v187;
                    unint64_t v170 = v186;
                    uint64_t v171 = v339;
                    uint64_t v172 = (uint64_t)v322;
                    uint64_t v173 = (uint64_t)v324;
                    BOOL v95 = v185;
                    if (v183) {
                      goto LABEL_108;
                    }
                  }
                  int64_t v333 = v293;
                  unint64_t v170 = v186;
                  uint64_t v172 = (uint64_t)v322;
                  uint64_t v173 = (uint64_t)v324;
                  uint64_t v181 = (uint64_t)v326;
                  BOOL v95 = v185;
                }
              }
            }
          }
          uint64_t v188 = sub_100007764(v170);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v188 - 8) + 56))(v173, 1, 1, v188);
          unint64_t v169 = 0;
LABEL_125:
          sub_1000BEA14(v173, v181, &qword_100720AF0);
          uint64_t v189 = v170;
          uint64_t v190 = sub_100007764(v170);
          uint64_t v191 = *(void *)(v190 - 8);
          uint64_t v192 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48);
          if (v192(v181, 1, v190) == 1) {
            break;
          }
          uint64_t v193 = v172;
          uint64_t v194 = v181 + *(int *)(v190 + 48);
          uint64_t v195 = v330;
          uint64_t v171 = v339;
          (*v347)(v330, v181, v339);
          uint64_t v196 = (uint64_t *)v323;
          uint64_t v197 = v194;
          uint64_t v198 = v335;
          (*(void (**)(char *, uint64_t, uint64_t))v332)(v323, v197, v335);
          int v199 = (*v300)(v196, v198);
          if (v199 == v299)
          {
            (*v297)((char *)v196, v198);
            uint64_t v200 = *v196;
            BOOL v201 = *v196 <= 0;
            uint64_t v202 = v308;
            if (v201)
            {
              swift_bridgeObjectRelease();
              v241._countAndFlagsBits = 0xD000000000000043;
              v241._object = (void *)0x80000001006353B0;
              v242._countAndFlagsBits = 0x3662313537656335;
              v242._object = (void *)0xE800000000000000;
              logMilestone(tag:description:)(v242, v241);
              uint64_t v353 = 0;
              unint64_t v354 = 0xE000000000000000;
              _StringGuts.grow(_:)(48);
              swift_bridgeObjectRelease();
              uint64_t v353 = 0x20746E656D656C65;
              unint64_t v354 = 0xE800000000000000;
              sub_1000EC5BC((unint64_t *)&qword_100721270, (void (*)(uint64_t))&type metadata accessor for IdentityElement);
              uint64_t v243 = v330;
              v244._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v244);
              swift_bridgeObjectRelease();
              v245._countAndFlagsBits = 0xD000000000000024;
              v245._object = (void *)0x8000000100635400;
              String.append(_:)(v245);
              uint64_t v351 = v200;
              v246._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v246);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidElement(_:), v309);
              sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
              type metadata accessor for DIPError();
              sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
              swift_allocError();
              DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
              swift_willThrow();
              sub_10000C5E0(v307, v306);
              (*v344)(v243, v171);
              swift_release();
              (*(void (**)(char *, uint64_t))(v329 + 8))(v345, v328);
              (*(void (**)(uint64_t, uint64_t))(v337 + 8))(v343, v336);
              return (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v202, v305);
            }
            (*v344)(v330, v171);
          }
          else
          {
            (*v344)(v195, v171);
            (*(void (**)(uint64_t *, uint64_t))v334)(v196, v198);
          }
          uint64_t v172 = v193;
          unint64_t v170 = v189;
        }
        swift_release();
        uint64_t v203 = IdentityDocumentDescriptor.elementsToIntentToStore.getter();
        LODWORD(v326) = 0;
        LODWORD(v300) = 0;
        uint64_t v204 = 0;
        uint64_t v205 = *(void *)(v203 + 64);
        uint64_t v299 = v203 + 64;
        uint64_t v330 = (char *)v203;
        uint64_t v206 = 1 << *(unsigned char *)(v203 + 32);
        uint64_t v207 = -1;
        if (v206 < 64) {
          uint64_t v207 = ~(-1 << v206);
        }
        unint64_t v208 = v207 & v205;
        int64_t v333 = v191 + 56;
        LODWORD(v324) = enum case for IdentityElement.age(_:);
        uint64_t v323 = (char *)((unint64_t)(v206 + 63) >> 6);
        uint64_t v298 = (uint64_t)(v323 - 1);
        uint64_t v209 = v350;
        uint64_t v332 = (char *)v192;
LABEL_134:
        if (v208)
        {
          uint64_t v211 = v209;
          unint64_t v212 = __clz(__rbit64(v208));
          v208 &= v208 - 1;
          uint64_t v213 = v204;
          unint64_t v214 = v212 | (v204 << 6);
          goto LABEL_136;
        }
        uint64_t v218 = v204 + 1;
        if (__OFADD__(v204, 1)) {
          continue;
        }
        break;
      }
      uint64_t v216 = (uint64_t)v325;
      if (v218 >= (uint64_t)v323)
      {
        uint64_t v213 = v204;
        goto LABEL_143;
      }
      unint64_t v219 = *(void *)(v299 + 8 * v218);
      if (v219)
      {
        uint64_t v211 = v209;
LABEL_142:
        unint64_t v208 = (v219 - 1) & v219;
        unint64_t v214 = __clz(__rbit64(v219)) + (v218 << 6);
        uint64_t v213 = v218;
LABEL_136:
        uint64_t v215 = v330;
        uint64_t v216 = (uint64_t)v325;
        (*(void (**)(char *, unint64_t, uint64_t))(v338 + 16))(v325, *((void *)v330 + 6) + *(void *)(v338 + 72) * v214, v339);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v331 + 16))(v216 + *(int *)(v190 + 48), *((void *)v215 + 7) + *(void *)(v331 + 72) * v214, v335);
        uint64_t v217 = 0;
        uint64_t v209 = v211;
        uint64_t v172 = (uint64_t)v322;
      }
      else
      {
        uint64_t v213 = v204 + 2;
        if (v204 + 2 >= (uint64_t)v323)
        {
          unint64_t v208 = 0;
          uint64_t v217 = 1;
          uint64_t v213 = v204 + 1;
        }
        else
        {
          unint64_t v219 = *(void *)(v299 + 8 * v213);
          if (v219)
          {
            uint64_t v211 = v209;
            uint64_t v218 = v204 + 2;
            goto LABEL_142;
          }
          uint64_t v223 = v204 + 3;
          if (v218 + 2 >= (uint64_t)v323)
          {
LABEL_143:
            unint64_t v208 = 0;
            uint64_t v217 = 1;
          }
          else
          {
            uint64_t v224 = v95;
            uint64_t v211 = v209;
            unint64_t v219 = *(void *)(v299 + 8 * v223);
            if (v219)
            {
              v218 += 2;
              goto LABEL_142;
            }
            uint64_t v225 = v218 + 3;
            if (v218 + 3 >= (uint64_t)v323)
            {
              unint64_t v208 = 0;
              uint64_t v217 = 1;
              uint64_t v213 = v223;
            }
            else
            {
              unint64_t v219 = *(void *)(v299 + 8 * v225);
              if (v219)
              {
                v218 += 3;
                goto LABEL_142;
              }
              while (1)
              {
                uint64_t v218 = v225 + 1;
                if (__OFADD__(v225, 1)) {
                  goto LABEL_199;
                }
                if (v218 >= (uint64_t)v323) {
                  break;
                }
                unint64_t v219 = *(void *)(v299 + 8 * v218);
                ++v225;
                BOOL v95 = v224;
                if (v219) {
                  goto LABEL_142;
                }
              }
              unint64_t v208 = 0;
              uint64_t v217 = 1;
              uint64_t v213 = v298;
            }
            uint64_t v216 = (uint64_t)v325;
            uint64_t v172 = (uint64_t)v322;
            BOOL v95 = v224;
          }
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v333)(v216, v217, 1, v190);
      sub_1000BEA14(v216, v172, &qword_100720AF0);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v332)(v172, 1, v190) != 1)
      {
        uint64_t v220 = v327;
        uint64_t v221 = v339;
        (*v347)(v327, v172, v339);
        int v222 = (*v342)(v220, v221);
        if (v222 == v341)
        {
          LODWORD(v326) = 1;
          uint64_t v210 = v335;
        }
        else
        {
          uint64_t v210 = v335;
          if (v222 == v324) {
            LODWORD(v300) = 1;
          }
          else {
            (*v344)(v327, v221);
          }
        }
        (*(void (**)(uint64_t, uint64_t))v334)(v172 + *(int *)(v190 + 48), v210);
        uint64_t v204 = v213;
        goto LABEL_134;
      }
      swift_release();
      if (v300 & v326)
      {
        swift_bridgeObjectRelease();
        v226._countAndFlagsBits = 0xD00000000000003FLL;
        v226._object = (void *)0x8000000100635330;
        v227._countAndFlagsBits = 0x3037383930653165;
        v227._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v227, v226);
        (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidElement(_:), v309);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        goto LABEL_168;
      }
      uint64_t v228 = type metadata accessor for AuditToken();
      uint64_t v229 = (uint64_t)v319;
      uint64_t v230 = v349;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v228 - 8) + 16))(v319, v349, v228);
      uint64_t v231 = v317;
      sub_100030A10(v318, v229 + *(int *)(v317 + 24));
      uint64_t v232 = (void *)(v229 + *(int *)(v231 + 20));
      *uint64_t v232 = v303;
      v232[1] = v209;
      uint64_t v350 = v209;
      swift_bridgeObjectRetain();
      uint64_t v233 = v294;
      unint64_t v234 = sub_1005E6BC4();
      uint64_t v346 = v235;
      uint64_t v347 = (void (**)(void, void, void))v234;
      if (!v233)
      {
        sub_1000EC604(v229);
        uint64_t v294 = 0;
        goto LABEL_187;
      }
      uint64_t v294 = 0;
      sub_1000EC604(v229);
      if (v95[v230] == 1)
      {
        defaultLogger()();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v236 = Logger.logObject.getter();
        os_log_type_t v237 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v236, v237))
        {
          uint64_t v238 = (uint8_t *)swift_slowAlloc();
          uint64_t v239 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v238 = 138412290;
          swift_errorRetain();
          uint64_t v240 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v353 = v240;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v239 = v240;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v236, v237, "DigitalPresentmentRequest.validate - Invalid usage description on first-party client. Error: %@", v238, 0xCu);
          sub_100007764(&qword_1007208D0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        (*(void (**)(char *, uint64_t))(v355 + 8))(v314, v348);
        unint64_t v255 = 0xD000000000000055;
        unint64_t v256 = 0x80000001006352D0;
        uint64_t v257 = 0x3536353565373230;
        goto LABEL_186;
      }
      id v247 = [v302 standardUserDefaults];
      v248._countAndFlagsBits = 0xD000000000000025;
      v248._object = (void *)0x80000001006351B0;
      Swift::Bool v249 = NSUserDefaults.internalBool(forKey:)(v248);

      if (!v249)
      {
        swift_bridgeObjectRelease();
        defaultLogger()();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v258 = Logger.logObject.getter();
        os_log_type_t v259 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v258, v259))
        {
          uint64_t v260 = (uint8_t *)swift_slowAlloc();
          uint64_t v261 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v260 = 138412290;
          swift_errorRetain();
          uint64_t v262 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v353 = v262;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v261 = v262;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v258, v259, "DigitalPresentmentRequest.validate - Invalid usage description encountered on third-party app. This is a fatal error. Error: %@", v260, 0xCu);
          sub_100007764(&qword_1007208D0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        (*(void (**)(char *, uint64_t))(v355 + 8))(v312, v348);
        v290._countAndFlagsBits = 0xD000000000000075;
        v290._object = (void *)0x80000001006351E0;
        v291._countAndFlagsBits = 0x3331653032313665;
        v291._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v291, v290);
        (*(void (**)(char *, void, uint64_t))(v310 + 104))(v311, enum case for DIPError.Code.internalError(_:), v309);
        swift_errorRetain();
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
LABEL_168:
        sub_10000C5E0(v307, v306);
LABEL_169:
        (*(void (**)(char *, uint64_t))(v329 + 8))(v345, v328);
        (*(void (**)(uint64_t, uint64_t))(v337 + 8))(v343, v336);
        return (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v308, v305);
      }
      defaultLogger()();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v250 = Logger.logObject.getter();
      os_log_type_t v251 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v250, v251))
      {
        uint64_t v252 = (uint8_t *)swift_slowAlloc();
        uint64_t v253 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v252 = 138412290;
        swift_errorRetain();
        uint64_t v254 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v353 = v254;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v253 = v254;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v250, v251, "DigitalPresentmentRequest.validate - Invalid usage description, bypassing check due to internal settings. Error: %@", v252, 0xCu);
        sub_100007764(&qword_1007208D0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      (*(void (**)(char *, uint64_t))(v355 + 8))(v313, v348);
      unint64_t v255 = 0xD000000000000069;
      unint64_t v256 = 0x8000000100635260;
      uint64_t v257 = 0x6634366235376166;
LABEL_186:
      unint64_t v270 = 0xE800000000000000;
      logMilestone(tag:description:)(*(Swift::String *)&v257, *(Swift::String *)&v255);
      swift_errorRelease();
      uint64_t v346 = 0;
      uint64_t v347 = 0;
LABEL_187:
      uint64_t v272 = v336;
      uint64_t v271 = v337;
      uint64_t v273 = v315;
      uint64_t v274 = v343;
      (*(void (**)(char *, uint64_t, uint64_t))(v337 + 16))(v315, v343, v336);
      uint64_t v275 = v308;
      uint64_t v348 = IdentityDocumentDescriptor.elementsToIntentToStore.getter();
      uint64_t v276 = v329;
      uint64_t v277 = v345;
      uint64_t v278 = v328;
      (*(void (**)(char *, char *, uint64_t))(v329 + 16))(v321, v345, v328);
      uint64_t v355 = DigitalPresentmentRequest.merchantNameOverride.getter();
      uint64_t v349 = v279;
      DigitalPresentmentRequest.merchantPrivacyPolicyOverride.getter();
      (*(void (**)(char *, uint64_t))(v276 + 8))(v277, v278);
      (*(void (**)(uint64_t, uint64_t))(v271 + 8))(v274, v272);
      (*(void (**)(char *, uint64_t))(v304 + 8))(v275, v305);
      uint64_t v280 = v316;
      (*(void (**)(uint64_t, char *, uint64_t))(v271 + 32))(v316, v273, v272);
      uint64_t v281 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest();
      *(void *)(v280 + v281[5]) = v348;
      (*(void (**)(uint64_t, char *, uint64_t))(v276 + 32))(v280 + v281[6], v321, v278);
      uint64_t v282 = (void *)(v280 + v281[7]);
      unint64_t v283 = v306;
      *uint64_t v282 = v307;
      v282[1] = v283;
      uint64_t v284 = (void *)(v280 + v281[8]);
      uint64_t v285 = v350;
      *uint64_t v284 = v303;
      v284[1] = v285;
      uint64_t v286 = (uint64_t *)(v280 + v281[9]);
      uint64_t v287 = v349;
      *uint64_t v286 = v355;
      v286[1] = v287;
      uint64_t result = sub_1000BEA14(v320, v280 + v281[10], &qword_100720A68);
      uint64_t v288 = (void *)(v280 + v281[11]);
      uint64_t v289 = v346;
      *uint64_t v288 = v347;
      v288[1] = v289;
      return result;
    case 3uLL:
      goto LABEL_49;
    default:
      if ((v107 & 0xFF000000000000) == 0)
      {
LABEL_49:
        swift_bridgeObjectRelease();
        v132._countAndFlagsBits = 0xD000000000000033;
        v132._object = (void *)0x80000001006354F0;
        v133._countAndFlagsBits = 0x3332636539393463;
        v133._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v133, v132);
        (*(void (**)(char *, void, uint64_t))(v127 + 104))(v311, enum case for DIPError.Code.digitalPresentmentInvalidNonce(_:), v128);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
LABEL_66:
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        sub_10000C5E0(v307, v107);
        (*(void (**)(uint64_t, uint64_t))(v329 + 8))(v118, v328);
        (*(void (**)(uint64_t, uint64_t))(v337 + 8))(v125, v336);
        return (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v106, v305);
      }
      uint64_t v129 = BYTE6(v107);
      goto LABEL_56;
  }
}

uint64_t sub_1000E9D68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v31 = type metadata accessor for DIPError.Code();
  uint64_t v30 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Locale.Region();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = type metadata accessor for DigitalPresentmentDocumentType();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  IdentityDocumentDescriptor.documentType.getter();
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v14, v8);
  if (v15 == enum case for DigitalPresentmentDocumentType.nationalIDCard(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v14, v8);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v14, v2);
    uint64_t v16 = v28;
    Locale.Region.init(stringLiteral:)();
    sub_1000EC5BC((unint64_t *)&unk_100723520, (void (*)(uint64_t))&type metadata accessor for Locale.Region);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v3 + 8);
    v18(v16, v2);
    v18(v7, v2);
    if (v17)
    {
      uint64_t v19 = enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:);
      uint64_t v20 = type metadata accessor for ISO18013KnownDocTypes();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v29, v19, v20);
      return ((uint64_t (*)(char *, uint64_t))v18)(v14, v2);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v16, v14, v2);
      unint64_t v32 = 0;
      unint64_t v33 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      unint64_t v32 = 0xD000000000000025;
      unint64_t v33 = 0x8000000100634E00;
      v24._countAndFlagsBits = Locale.Region.identifier.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v30 + 104))(v34, enum case for DIPError.Code.digitalPresentmentRegionNotSupported(_:), v31);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return ((uint64_t (*)(char *, uint64_t))v18)(v16, v2);
    }
  }
  else if (v15 == enum case for DigitalPresentmentDocumentType.driversLicense(_:))
  {
    uint64_t v22 = enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:);
    uint64_t v23 = type metadata accessor for ISO18013KnownDocTypes();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v29, v22, v23);
  }
  else
  {
    unint64_t v32 = 0;
    unint64_t v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    unint64_t v32 = 0xD000000000000019;
    unint64_t v33 = 0x8000000100634D60;
    IdentityDocumentDescriptor.documentType.getter();
    sub_1000EC5BC(&qword_100723518, (void (*)(uint64_t))&type metadata accessor for DigitalPresentmentDocumentType);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v9 + 8);
    v26(v12, v8);
    (*(void (**)(char *, void, uint64_t))(v30 + 104))(v34, enum case for DIPError.Code.digitalPresentmentInvalidDocumentDescriptor(_:), v31);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v26)(v14, v8);
  }
}

uint64_t sub_1000EA4B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v44 = *(void *)(v1 - 8);
  uint64_t v45 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale.Region();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DigitalPresentmentDocumentType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v50 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v46 = (char *)&v41 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v43 = (char *)&v41 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v41 - v18;
  defaultLogger()();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = v9;
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "DigitalPresentmentRequestExtensions: get region for descriptor", v22, 2u);
    uint64_t v9 = v42;
    swift_slowDealloc();
  }

  uint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v19, v10);
  IdentityDocumentDescriptor.documentType.getter();
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (v24 == enum case for DigitalPresentmentDocumentType.nationalIDCard(_:))
  {
    uint64_t v52 = v10;
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    Swift::String v25 = v47;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
    uint64_t v27 = v49;
    v26(v47, v9, v49);
    uint64_t v28 = v50;
    defaultLogger()();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "DigitalPresentmentRequestExtensions: In NationalIDCardDescriptor", v31, 2u);
      uint64_t v28 = v50;
      swift_slowDealloc();
    }

    v23(v28, v52);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v51, v25, v27);
  }
  else if (v24 == enum case for DigitalPresentmentDocumentType.driversLicense(_:))
  {
    unint64_t v33 = v43;
    defaultLogger()();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "DigitalPresentmentRequestExtensions: In DriversLicenseDescriptor", v36, 2u);
      swift_slowDealloc();
    }

    v23(v33, v10);
    uint64_t v37 = v46;
    defaultLogger()();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "DigitalPresentmentRequestExtensions: region hardcoded to US", v40, 2u);
      swift_slowDealloc();
    }

    v23(v37, v10);
    return Locale.Region.init(stringLiteral:)();
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v44 + 104))(v3, enum case for DIPError.Code.missingEntitlement(_:), v45);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_1000EABB0(uint64_t a1)
{
  uint64_t v44 = a1;
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v46 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v10 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v45;
  uint64_t result = sub_1000E9D68((uint64_t)v13);
  if (!v14)
  {
    uint64_t v41 = v4;
    uint64_t v42 = 0;
    unint64_t v40 = (unint64_t)v9;
    uint64_t v38 = v7;
    uint64_t v16 = v44;
    uint64_t v45 = v1;
    int v17 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
    if (v17 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
    {
      uint64_t v18 = *(void *)(v16 + 16);
      if (v18)
      {
        uint64_t v37 = v3;
        swift_bridgeObjectRetain();
        uint64_t v19 = 0;
        os_log_type_t v39 = "environment-name";
        while (1)
        {
          int v20 = *(unsigned __int8 *)(v16 + v19 + 32);
          if (v20 != 1 && v20 != 2) {
            break;
          }
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v21) {
            goto LABEL_23;
          }
          if (v18 == ++v19)
          {
            swift_bridgeObjectRelease();
            uint64_t v3 = v37;
            goto LABEL_10;
          }
        }
        swift_bridgeObjectRelease();
LABEL_23:
        uint64_t v28 = v43;
        unint64_t v29 = v40;
        swift_bridgeObjectRelease();
        defaultLogger()();
        os_log_type_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v30, v31))
        {
          unint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v32 = 0;
          unint64_t v33 = "Caller is entitled for US driver's license";
LABEL_28:
          _os_log_impl((void *)&_mh_execute_header, v30, v31, v33, v32, 2u);
          uint64_t v35 = v41;
          swift_slowDealloc();
LABEL_30:

          return (*(uint64_t (**)(unint64_t, uint64_t))(v28 + 8))(v29, v35);
        }
        goto LABEL_29;
      }
LABEL_10:
      (*(void (**)(char *, void, uint64_t))(v46 + 104))(v3, enum case for DIPError.Code.missingEntitlement(_:), v45);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    else
    {
      if (v17 != enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
      {
        (*(void (**)(char *, void, uint64_t))(v46 + 104))(v3, enum case for DIPError.Code.missingEntitlement(_:), v45);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      }
      uint64_t v22 = *(void *)(v16 + 16);
      uint64_t v23 = v3;
      uint64_t v24 = v45;
      uint64_t v25 = v46;
      if (v22)
      {
        uint64_t v37 = v23;
        swift_bridgeObjectRetain();
        uint64_t v26 = 0;
        os_log_type_t v39 = "environment-name";
        unint64_t v40 = 0xD000000000000012;
        uint64_t v36 = "us-drivers-license";
        uint64_t v24 = v45;
        while (!*(unsigned char *)(v16 + v26 + 32) || *(unsigned char *)(v16 + v26 + 32) == 2)
        {
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_26;
          }
          ++v26;
          uint64_t v25 = v46;
          if (v22 == v26)
          {
            swift_bridgeObjectRelease();
            uint64_t v23 = v37;
            goto LABEL_19;
          }
        }
        swift_bridgeObjectRelease();
LABEL_26:
        swift_bridgeObjectRelease();
        unint64_t v29 = (unint64_t)v38;
        defaultLogger()();
        os_log_type_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.debug.getter();
        BOOL v34 = os_log_type_enabled(v30, v31);
        uint64_t v28 = v43;
        if (v34)
        {
          unint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v32 = 0;
          unint64_t v33 = "Caller is entitled for JP national ID Card";
          goto LABEL_28;
        }
LABEL_29:
        uint64_t v35 = v41;
        goto LABEL_30;
      }
LABEL_19:
      (*(void (**)(char *, void, uint64_t))(v25 + 104))(v23, enum case for DIPError.Code.missingEntitlement(_:), v24);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  return result;
}

void sub_1000EB3E4(uint64_t a1)
{
  uint64_t v90 = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v77 = *(void *)(v2 - 8);
  uint64_t v78 = v2;
  __chkstk_darwin(v2);
  uint64_t v79 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for DigitalPresentmentDocumentType();
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v57 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v5 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v71 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for IdentityElement();
  uint64_t v8 = *(char **)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  BOOL v95 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v57 - v11;
  uint64_t v13 = sub_100007764(&qword_100720AF0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v57 - v17;
  uint64_t v69 = v1;
  uint64_t v19 = IdentityDocumentDescriptor.elementsToIntentToStore.getter();
  int64_t v20 = 0;
  uint64_t v21 = *(void *)(v19 + 64);
  uint64_t v83 = v19 + 64;
  uint64_t v89 = v19;
  uint64_t v22 = 1 << *(unsigned char *)(v19 + 32);
  int v93 = enum case for IdentityElement.ageIsOver(_:);
  uint64_t v23 = -1;
  int v86 = enum case for IdentityElement.givenName(_:);
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  int v84 = enum case for IdentityElement.familyName(_:);
  uint64_t v25 = (void (**)(char *, char *, uint64_t))(v8 + 16);
  int v82 = enum case for IdentityElement.sex(_:);
  os_log_type_t v91 = (uint64_t (**)(char *, uint64_t))(v8 + 88);
  uint64_t v92 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  int v81 = enum case for IdentityElement.portrait(_:);
  int v76 = enum case for IdentityElement.address(_:);
  int v75 = enum case for IdentityElement.issuingAuthority(_:);
  int v74 = enum case for IdentityElement.documentDHSComplianceStatus(_:);
  int v73 = enum case for IdentityElement.documentIssueDate(_:);
  int v72 = enum case for IdentityElement.documentExpirationDate(_:);
  int v70 = enum case for IdentityElement.documentNumber(_:);
  int v68 = enum case for IdentityElement.drivingPrivileges(_:);
  int v64 = enum case for IdentityElement.age(_:);
  int v61 = enum case for IdentityElement.dateOfBirth(_:);
  uint64_t v60 = v5;
  uint64_t v26 = (uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  uint64_t v27 = v7;
  uint64_t v66 = v26;
  uint64_t v87 = v8;
  uint64_t v94 = (void (**)(char *, uint64_t))(v8 + 8);
  int v65 = enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:);
  int64_t v85 = (unint64_t)(v22 + 63) >> 6;
  int64_t v63 = v85 - 1;
  int v62 = enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:);
  os_log_type_t v88 = v12;
  uint64_t v96 = v7;
  if (!v24) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v28 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  int64_t v99 = v20;
  unint64_t v29 = v28 | (v20 << 6);
LABEL_5:
  uint64_t v30 = v89;
  (*((void (**)(char *, unint64_t, uint64_t))v87 + 2))(v16, *(void *)(v89 + 48) + *((void *)v87 + 9) * v29, v27);
  uint64_t v31 = *(void *)(v30 + 56);
  uint64_t v32 = type metadata accessor for IdentityIntentToStore();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = v31 + *(void *)(v33 + 72) * v29;
  uint64_t v35 = sub_100007764(&qword_100720B08);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(&v16[*(int *)(v35 + 48)], v34, v32);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v16, 0, 1, v35);
  uint64_t v12 = v88;
  while (1)
  {
    sub_1000BEA14((uint64_t)v16, (uint64_t)v18, &qword_100720AF0);
    uint64_t v39 = sub_100007764(&qword_100720B08);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v18, 1, v39) == 1)
    {
      swift_release();
      v48._countAndFlagsBits = 0xD000000000000022;
      v48._object = (void *)0x80000001006356A0;
      v49._countAndFlagsBits = 0x3333626532323131;
      v49._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v49, v48);
      return;
    }
    uint64_t v8 = &v18[*(int *)(v39 + 48)];
    uint64_t v27 = v96;
    (*v92)(v12, v18, v96);
    unint64_t v40 = v95;
    (*v25)(v95, v12, v27);
    int v41 = (*v91)(v40, v27);
    if (v41 == v93)
    {
LABEL_14:
      char v42 = 11;
      goto LABEL_61;
    }
    if (v41 == v86)
    {
      char v42 = 0;
      goto LABEL_61;
    }
    if (v41 == v84)
    {
      char v42 = 1;
      goto LABEL_61;
    }
    if (v41 == v82)
    {
      char v42 = 2;
      goto LABEL_61;
    }
    if (v41 == v81)
    {
      char v42 = 3;
      goto LABEL_61;
    }
    if (v41 == v76)
    {
      char v42 = 4;
      goto LABEL_61;
    }
    if (v41 == v75)
    {
      char v42 = 5;
      goto LABEL_61;
    }
    if (v41 == v74)
    {
      char v42 = 6;
      goto LABEL_61;
    }
    if (v41 == v73)
    {
      char v42 = 9;
      goto LABEL_61;
    }
    if (v41 == v72)
    {
      char v42 = 7;
      goto LABEL_61;
    }
    uint64_t v44 = v71;
    if (v41 == v70)
    {
      uint64_t v45 = v80;
      sub_1000E9D68(v71);
      uint64_t v80 = v45;
      if (v45) {
        goto LABEL_71;
      }
      int v46 = (*v66)(v44, v67);
      if (v46 == v65)
      {
        char v42 = 8;
      }
      else
      {
        if (v46 != v62)
        {
          unint64_t v97 = 0;
          unint64_t v98 = 0xE000000000000000;
          _StringGuts.grow(_:)(27);
          swift_bridgeObjectRelease();
          unint64_t v97 = 0xD000000000000019;
          unint64_t v98 = 0x8000000100634D60;
          uint64_t v52 = v57;
          IdentityDocumentDescriptor.documentType.getter();
          sub_1000EC5BC(&qword_100723518, (void (*)(uint64_t))&type metadata accessor for DigitalPresentmentDocumentType);
          uint64_t v53 = v59;
          v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v54);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v58 + 8))(v52, v53);
          (*(void (**)(char *, void, uint64_t))(v77 + 104))(v79, enum case for DIPError.Code.digitalPresentmentInvalidDocumentDescriptor(_:), v78);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          uint64_t v12 = v88;
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v71, v67);
          goto LABEL_71;
        }
        char v42 = 13;
      }
      goto LABEL_60;
    }
    if (v41 == v68)
    {
      char v42 = 10;
LABEL_60:
      uint64_t v27 = v96;
      goto LABEL_61;
    }
    uint64_t v27 = v96;
    if (v41 == v64) {
      goto LABEL_14;
    }
    if (v41 != v61) {
      goto LABEL_73;
    }
    char v42 = 12;
LABEL_61:
    if ((sub_10020F194(v42, v90) & 1) == 0)
    {
      unint64_t v97 = 0;
      unint64_t v98 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      unint64_t v97 = 0xD000000000000024;
      unint64_t v98 = 0x8000000100635720;
      sub_1000EC5BC((unint64_t *)&qword_100721270, (void (*)(uint64_t))&type metadata accessor for IdentityElement);
      v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v77 + 104))(v79, enum case for DIPError.Code.missingEntitlement(_:), v78);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*v94)(v12, v27);
      goto LABEL_66;
    }
    (*v94)(v12, v27);
    uint64_t v47 = type metadata accessor for IdentityIntentToStore();
    (*(void (**)(char *, uint64_t))(*(void *)(v47 - 8) + 8))(v8, v47);
    int64_t v20 = v99;
    if (v24) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v36 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v36 >= v85)
    {
      int64_t v99 = v20;
    }
    else
    {
      unint64_t v37 = *(void *)(v83 + 8 * v36);
      if (v37) {
        goto LABEL_9;
      }
      int64_t v43 = v20 + 2;
      if (v20 + 2 >= v85)
      {
LABEL_57:
        int64_t v99 = v36;
      }
      else
      {
        unint64_t v37 = *(void *)(v83 + 8 * v43);
        if (v37) {
          goto LABEL_23;
        }
        if (v20 + 3 >= v85)
        {
          int64_t v99 = v20 + 2;
        }
        else
        {
          unint64_t v37 = *(void *)(v83 + 8 * (v20 + 3));
          if (v37)
          {
            int64_t v36 = v20 + 3;
            goto LABEL_9;
          }
          int64_t v43 = v20 + 4;
          if (v20 + 4 < v85)
          {
            unint64_t v37 = *(void *)(v83 + 8 * v43);
            if (!v37)
            {
              while (1)
              {
                int64_t v36 = v43 + 1;
                if (__OFADD__(v43, 1)) {
                  break;
                }
                if (v36 >= v85)
                {
                  int64_t v36 = v63;
                  goto LABEL_57;
                }
                unint64_t v37 = *(void *)(v83 + 8 * v36);
                ++v43;
                if (v37) {
                  goto LABEL_9;
                }
              }
              __break(1u);
LABEL_73:
              unint64_t v97 = 0;
              unint64_t v98 = 0xE000000000000000;
              _StringGuts.grow(_:)(18);
              swift_bridgeObjectRelease();
              unint64_t v97 = 0xD000000000000010;
              unint64_t v98 = 0x80000001006356D0;
              sub_1000EC5BC((unint64_t *)&qword_100721270, (void (*)(uint64_t))&type metadata accessor for IdentityElement);
              v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v55);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, void, uint64_t))(v77 + 104))(v79, enum case for DIPError.Code.badLogic(_:), v78);
              sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
              type metadata accessor for DIPError();
              sub_1000EC5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
              swift_allocError();
              DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
              swift_willThrow();
              os_log_type_t v56 = *v94;
              (*v94)(v12, v27);
              swift_release();
              v56(v95, v27);
              goto LABEL_67;
            }
LABEL_23:
            int64_t v36 = v43;
LABEL_9:
            unint64_t v24 = (v37 - 1) & v37;
            unint64_t v29 = __clz(__rbit64(v37)) + (v36 << 6);
            int64_t v99 = v36;
            goto LABEL_5;
          }
          int64_t v99 = v20 + 3;
        }
      }
    }
    uint64_t v38 = sub_100007764(&qword_100720B08);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v16, 1, 1, v38);
    unint64_t v24 = 0;
  }
  __break(1u);
LABEL_71:
  (*v94)(v12, v96);
LABEL_66:
  swift_release();
LABEL_67:
  uint64_t v51 = type metadata accessor for IdentityIntentToStore();
  (*(void (**)(char *, uint64_t))(*(void *)(v51 - 8) + 8))(v8, v51);
}

void sub_1000EC3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self standardUserDefaults];
  v10._object = (void *)0x8000000100635670;
  v10._countAndFlagsBits = 0xD000000000000029;
  Swift::Bool v11 = NSUserDefaults.internalBool(forKey:)(v10);

  if (v11)
  {
    defaultLogger()();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Not checking elements entitlement due to user defaults settings", v14, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    sub_1000EABB0(a1);
    if (!v2) {
      sub_1000EB3E4(a2);
    }
  }
}

uint64_t sub_1000EC5BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EC604(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsageDescriptionFetcher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000EC660(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v31 = a2;
  uint64_t v5 = type metadata accessor for DIPSignpost();
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  __chkstk_darwin(v5);
  uint64_t v30 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764((uint64_t *)&unk_100723610);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate: paymentAuthorizationCoordinator willFinishWithError invoked.", v19, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (a1) {
    [a1 dismissWithCompletion:0];
  }
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 1, 1, v20);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  uint64_t v22 = v31;
  v21[4] = v3;
  v21[5] = v22;
  id v23 = v3;
  swift_errorRetain();
  sub_10014043C((uint64_t)v12, (uint64_t)&unk_100723628, (uint64_t)v21);
  swift_release();
  uint64_t v24 = (uint64_t)v23
      + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_postAuthorizationSignpost;
  swift_beginAccess();
  sub_100048D6C(v24, (uint64_t)v9, (uint64_t *)&unk_100723610);
  uint64_t v26 = v32;
  uint64_t v25 = v33;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v9, 1, v33)) {
    return sub_10000C6CC((uint64_t)v9, (uint64_t *)&unk_100723610);
  }
  unint64_t v28 = v30;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v30, v9, v25);
  sub_10000C6CC((uint64_t)v9, (uint64_t *)&unk_100723610);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
}

uint64_t sub_1000ECA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[13] = a4;
  v5[14] = a5;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[15] = v6;
  v5[16] = *(void *)(v6 - 8);
  v5[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[18] = v7;
  v5[19] = *(void *)(v7 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  return _swift_task_switch(sub_1000ECB7C, 0, 0);
}

uint64_t sub_1000ECB7C()
{
  uint64_t v60 = v0;
  uint64_t v1 = *(void *)(v0 + 104)
     + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result;
  uint64_t v2 = *(void **)v1;
  *(void *)(v0 + 192) = *(void *)v1;
  int v3 = *(unsigned __int8 *)(v1 + 8);
  *(unsigned char *)(v0 + 248) = v3;
  if (v3 == 255)
  {
    if (*(void *)(v0 + 112))
    {
      swift_errorRetain();
      defaultLogger()();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      BOOL v17 = os_log_type_enabled(v15, v16);
      uint64_t v19 = *(void *)(v0 + 152);
      uint64_t v18 = *(void *)(v0 + 160);
      uint64_t v20 = *(void *)(v0 + 144);
      if (v17)
      {
        uint64_t v57 = *(void *)(v0 + 160);
        uint64_t v55 = *(void *)(v0 + 144);
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315138;
        swift_getErrorValue();
        uint64_t v22 = Error.localizedDescription.getter();
        *(void *)(v0 + 64) = sub_100110D58(v22, v23, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate failing promise with error: %s", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v57, v55);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      }
      uint64_t v48 = *(void *)(v0 + 128);
      uint64_t v47 = *(void *)(v0 + 136);
      uint64_t v49 = *(void *)(v0 + 120);
      uint64_t v50 = *(void *)(v0 + 104);
      v51._countAndFlagsBits = 0xD00000000000001CLL;
      v51._object = (void *)0x8000000100635A90;
      v52._countAndFlagsBits = 0x3433633732386334;
      v52._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v52, v51);
      *(void *)(v0 + 216) = *(void *)(v50
                                        + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_promise);
      (*(void (**)(uint64_t, void, uint64_t))(v48 + 104))(v47, enum case for DIPError.Code.digitalPresentmentAppCancelled(_:), v49);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      *(void *)(v0 + 224) = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      sub_100007764(&qword_1007212F0);
      sub_1000662E4();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v53;
      uint64_t v14 = sub_1000ED530;
    }
    else
    {
      defaultLogger()();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        int64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate user cancelled", v36, 2u);
        swift_slowDealloc();
      }
      uint64_t v37 = *(void *)(v0 + 168);
      uint64_t v38 = *(void *)(v0 + 144);
      uint64_t v39 = *(void *)(v0 + 152);
      uint64_t v41 = *(void *)(v0 + 128);
      uint64_t v40 = *(void *)(v0 + 136);
      uint64_t v42 = *(void *)(v0 + 120);
      uint64_t v43 = *(void *)(v0 + 104);

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
      v44._countAndFlagsBits = 0xD00000000000001DLL;
      v44._object = (void *)0x8000000100635970;
      v45._countAndFlagsBits = 0x3665663035323264;
      v45._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v45, v44);
      *(void *)(v0 + 232) = *(void *)(v43
                                        + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_promise);
      (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v40, enum case for DIPError.Code.digitalPresentmentUserCancelled(_:), v42);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      *(void *)(v0 + 240) = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      sub_100007764(&qword_1007212F0);
      sub_1000662E4();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v46;
      uint64_t v14 = sub_1000ED63C;
    }
  }
  else if (v3)
  {
    sub_1000EE5AC(v2, 1);
    defaultLogger()();
    sub_1000EE5AC(v2, 1);
    sub_1000EE5AC(v2, 1);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void *)(v0 + 176);
    uint64_t v29 = *(void *)(v0 + 144);
    uint64_t v28 = *(void *)(v0 + 152);
    if (v26)
    {
      uint64_t v58 = *(void *)(v0 + 176);
      uint64_t v56 = *(void *)(v0 + 144);
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_getErrorValue();
      uint64_t v31 = Error.localizedDescription.getter();
      *(void *)(v0 + 88) = sub_100110D58(v31, v32, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000EE6C0(v2, v3);
      sub_1000EE6C0(v2, v3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate failing promise with error: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v58, v56);
    }
    else
    {
      sub_1000EE6C0(v2, v3);
      sub_1000EE6C0(v2, v3);

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    }
    *(void *)(v0 + 208) = *(void *)(*(void *)(v0 + 104)
                                      + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_promise);
    sub_100007764(&qword_1007212F0);
    sub_1000662E4();
    uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v13 = v33;
    uint64_t v14 = sub_1000ED4C4;
  }
  else
  {
    sub_1000EE5AC(v2, 0);
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate fulfilling promise with result", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v10 = *(void *)(v0 + 104);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    *(void *)(v0 + 200) = *(void *)(v10
                                      + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_promise);
    *(void *)(v0 + 96) = v2;
    sub_100007764(&qword_1007212F0);
    sub_1000662E4();
    uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v13 = v12;
    uint64_t v14 = sub_1000ED3BC;
  }
  return _swift_task_switch(v14, v11, v13);
}

uint64_t sub_1000ED3BC()
{
  dispatch thunk of AsyncPromise.fulfill(value:)();
  return _swift_task_switch(sub_1000ED428, 0, 0);
}

uint64_t sub_1000ED428()
{
  sub_1000EE6C0(*(void **)(v0 + 192), *(unsigned char *)(v0 + 248));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000ED4C4()
{
  dispatch thunk of AsyncPromise.fail(error:)();
  return _swift_task_switch(sub_1000F02B4, 0, 0);
}

uint64_t sub_1000ED530()
{
  dispatch thunk of AsyncPromise.fail(error:)();
  swift_errorRelease();
  return _swift_task_switch(sub_1000ED5A4, 0, 0);
}

uint64_t sub_1000ED5A4()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000ED63C()
{
  dispatch thunk of AsyncPromise.fail(error:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000ED8D8(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_100723648 + dword_100723648);
  a3;
  id v6 = a1;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1000ED9A8;
  return v9();
}

uint64_t sub_1000ED9A8(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 32);
  os_log_type_t v5 = *(void **)(*v1 + 24);
  id v6 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  if (v4)
  {
    uint64_t v8 = *(void (***)(void, void))(v3 + 32);
    ((void (**)(void, void *))v8)[2](v8, a1);

    _Block_release(v8);
  }
  else
  {
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t sub_1000EDB24()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100723600);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int64_t v36 = (char *)&v34 - v8;
  uint64_t v9 = sub_100007764(&qword_100723608);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (void **)((char *)&v34 - v14);
  __chkstk_darwin(v13);
  BOOL v17 = (char *)&v34 - v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  Date.timeIntervalSince(_:)();
  double v23 = v22;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  int v24 = *(unsigned __int8 *)(v1
                           + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result
                           + 8);
  if (v24 == 255)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v17, 1, 1, v2);
    goto LABEL_15;
  }
  if (v24)
  {
    os_log_type_t v25 = *(void **)(v1 + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result);
    swift_getErrorValue();
    uint64_t v34 = v25;
    sub_1000EE5AC(v25, 1);
    uint64_t v26 = (uint64_t)v36;
    Error.dipErrorCode.getter();
    uint64_t v27 = type metadata accessor for DIPError.Code();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) != 1)
    {
      uint64_t v29 = v35;
      sub_100048D6C(v26, v35, &qword_100723600);
      int v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 88))(v29, v27);
      uint64_t v31 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome.terminalError(_:);
      if (v30 == enum case for DIPError.Code.topekaMerchantNotFound(_:)
        || v30 == enum case for DIPError.Code.unexpectedDaemonState(_:)
        || v30 == enum case for DIPError.Code.digitalPresentmentInvalidMerchantCertificate(_:)
        || v30 == enum case for DIPError.Code.digitalPresentmentInvalidCredential(_:)
        || v30 == enum case for DIPError.Code.digitalPresentmentCannotBuildResponse(_:))
      {
        goto LABEL_14;
      }
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v35, v27);
    }
    uint64_t v31 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome.retryableError(_:);
LABEL_14:
    sub_10000C6CC(v26, &qword_100723600);
    *uint64_t v15 = v34;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v15, *v31, v2);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
    sub_1000BEA14((uint64_t)v15, (uint64_t)v17, &qword_100723608);
    goto LABEL_15;
  }
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v17, enum case for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome.success(_:), v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v17, 0, 1, v2);
LABEL_15:
  sub_100048D6C((uint64_t)v17, (uint64_t)v12, &qword_100723608);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) == 1)
  {
    sub_10000C6CC((uint64_t)v17, &qword_100723608);
  }
  else
  {
    unint64_t v32 = v37;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v37, v12, v2);
    (*(void (**)(char *, double))(*(void *)(v1
                                                       + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_analyticsSender
                                                       + 8)
                                           + 8))(v32, v23);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v2);
    uint64_t v12 = v17;
  }
  return sub_10000C6CC((uint64_t)v12, &qword_100723608);
}

id sub_1000EE0E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DigitalPresentmentAuthorizationCoordinatorPrivateDelegate();
  return [super dealloc];
}

uint64_t sub_1000EE188()
{
  return type metadata accessor for DigitalPresentmentAuthorizationCoordinatorPrivateDelegate();
}

uint64_t type metadata accessor for DigitalPresentmentAuthorizationCoordinatorPrivateDelegate()
{
  uint64_t result = qword_1007235E0;
  if (!qword_1007235E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000EE1DC()
{
  sub_1000EE290();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000EE290()
{
  if (!qword_1007235F0)
  {
    type metadata accessor for DIPSignpost();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1007235F0);
    }
  }
}

id sub_1000EE2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = &v6[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result];
  *(void *)uint64_t v15 = 0;
  v15[8] = -1;
  uint64_t v16 = &v6[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_postAuthorizationSignpost];
  uint64_t v17 = type metadata accessor for DIPSignpost();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  sub_1000BEA14(a1, (uint64_t)v28, &qword_1007210C8);
  if (sub_10006079C(v28) == 1 || (uint64_t v18 = v29) == 0)
  {
    sub_1000EE4E4(a2, (uint64_t)v14);
    type metadata accessor for DigitalPresentmentResponseBuilder();
    uint64_t v21 = swift_allocObject();
    sub_1000EE548((uint64_t)v14, v21 + OBJC_IVAR____TtC8coreidvd33DigitalPresentmentResponseBuilder_context);
    double v22 = v6;
  }
  else
  {
    uint64_t v19 = v6;
    uint64_t v20 = sub_10003BDD0((uint64_t)v18);
    uint64_t v21 = v18(v20);
    sub_10003BEDC((uint64_t)v18);
  }
  *(void *)&v6[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_responseBuilder] = v21;
  *(void *)&v6[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_promise] = a3;
  double v23 = &v6[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_analyticsSender];
  *(void *)double v23 = a4;
  *((void *)v23 + 1) = a5;
  swift_retain();

  int v24 = (objc_class *)type metadata accessor for DigitalPresentmentAuthorizationCoordinatorPrivateDelegate();
  v27.receiver = v6;
  v27.super_class = v24;
  id v25 = [super init];
  sub_1000664E0(a2);
  return v25;
}

uint64_t sub_1000EE4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EE548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1000EE5AC(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

uint64_t sub_1000EE5B8()
{
  swift_unknownObjectRelease();

  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000EE600(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100025D64;
  return sub_1000ECA38(a1, v4, v5, v7, v6);
}

void sub_1000EE6C0(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_1000EE6D8(a1, a2 & 1);
  }
}

void sub_1000EE6D8(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_1000EE6E4()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000EE72C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100723638 + dword_100723638);
  return v6(v2, v3, v4);
}

uint64_t sub_1000EE7E8()
{
  v1[18] = v0;
  uint64_t v2 = type metadata accessor for DigitalPresentmentDisplayConfiguration.StringID();
  v1[19] = v2;
  v1[20] = *(void *)(v2 - 8);
  v1[21] = swift_task_alloc();
  sub_100007764(&qword_10071FEE0);
  v1[22] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ContinuousClock();
  v1[26] = v3;
  v1[27] = *(void *)(v3 - 8);
  v1[28] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[29] = v4;
  v1[30] = *(void *)(v4 - 8);
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v1[33] = v5;
  v1[34] = *(void *)(v5 - 8);
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPSignpost();
  v1[37] = v6;
  v1[38] = *(void *)(v6 - 8);
  v1[39] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v1[40] = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_100723610);
  v1[41] = swift_task_alloc();
  return _swift_task_switch(sub_1000EEB10, 0, 0);
}

uint64_t sub_1000EEB10()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[18];
  static DaemonSignposts.requestDocumentPostAuthorization.getter();
  DIPSignpost.init(_:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v1, 0, 1, v3);
  uint64_t v5 = v4
     + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_postAuthorizationSignpost;
  swift_beginAccess();
  sub_1000F0098(v1, v5);
  swift_endAccess();
  static DaemonSignposts.requestDocumentBuildResponse.getter();
  DIPSignpost.init(_:)();
  Date.init()();
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate paymentAuthorizationCoordinator invoked, building response.", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[32];
  uint64_t v10 = v0[29];
  uint64_t v11 = v0[30];
  uint64_t v12 = v0[18];

  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[42] = v13;
  v0[43] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v9, v10);
  v0[44] = [objc_allocWithZone((Class)PKPaymentAuthorizationResult) init];
  v0[45] = *(void *)(v12
                     + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_responseBuilder);
  uint64_t v14 = (void *)swift_task_alloc();
  v0[46] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1000EED28;
  return sub_100566AAC();
}

uint64_t sub_1000EED28(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 376) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000EF024;
  }
  else
  {
    *(void *)(v4 + 384) = a1;
    uint64_t v5 = sub_1000EEE50;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000EEE50()
{
  uint64_t v1 = (void *)v0[48];
  uint64_t v2 = (void *)v0[44];
  uint64_t v3 = v0[18] + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result;
  uint64_t v4 = *(void **)v3;
  *(void *)uint64_t v3 = v1;
  unsigned __int8 v5 = *(unsigned char *)(v3 + 8);
  *(unsigned char *)(v3 + 8) = 0;
  id v6 = v1;
  sub_1000EE6C0(v4, v5);
  [v2 setStatus:0];

  uint64_t v15 = v0[44];
  uint64_t v8 = v0[38];
  uint64_t v7 = v0[39];
  uint64_t v10 = v0[36];
  uint64_t v9 = v0[37];
  uint64_t v11 = v0[34];
  uint64_t v12 = v0[33];
  sub_1000EDB24();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(uint64_t))v0[1];
  return v13(v15);
}

uint64_t sub_1000EF024()
{
  int v64 = v0;
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v60 = (void (*)(uint64_t, uint64_t))v0[42];
    uint64_t v57 = v0[29];
    uint64_t v58 = v0[31];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[17] = sub_100110D58(v4, v5, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DigitalPresentmentUIPresenter: paymentAuthorizationCoordinator didAuthorizeContextWithHandler buildResponse failed with error: %s.", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v60(v58, v57);
  }
  else
  {
    id v6 = (void (*)(uint64_t, uint64_t))v0[42];
    uint64_t v7 = v0[31];
    uint64_t v8 = v0[29];
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  uint64_t v9 = v0[35];
  uint64_t v10 = v0[33];
  uint64_t v11 = v0[34];
  uint64_t v12 = v0[18] + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result;
  uint64_t v13 = *(void **)v12;
  *(void *)uint64_t v12 = v0[47];
  unsigned __int8 v14 = *(unsigned char *)(v12 + 8);
  *(unsigned char *)(v12 + 8) = 1;
  swift_errorRetain();
  sub_1000EE6C0(v13, v14);
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  if (v16 < 1.0)
  {
    uint64_t v17 = static Duration.seconds(_:)();
    uint64_t v19 = v18;
    ContinuousClock.init()();
    uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100725748 + dword_100725748);
    uint64_t v20 = (void *)swift_task_alloc();
    v0[49] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_1000EF90C;
    return v61(v17, v19, 0, 0, 1);
  }
  uint64_t v22 = v0[25];
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  uint64_t v23 = type metadata accessor for DIPError.Code();
  uint64_t v24 = *(void *)(v23 - 8);
  id v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v25(v22, 1, v23) == 1) {
    goto LABEL_15;
  }
  uint64_t v26 = v0[24];
  sub_100048D6C(v0[25], v26, &qword_100723600);
  objc_super v27 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 88);
  int v28 = v27(v26, v23);
  if (v28 != enum case for DIPError.Code.topekaMerchantNotFound(_:)
    && v28 != enum case for DIPError.Code.unexpectedDaemonState(_:)
    && v28 != enum case for DIPError.Code.digitalPresentmentInvalidMerchantCertificate(_:)
    && v28 != enum case for DIPError.Code.digitalPresentmentInvalidCredential(_:)
    && v28 != enum case for DIPError.Code.digitalPresentmentCannotBuildResponse(_:))
  {
    (*(void (**)(void, uint64_t))(v24 + 8))(v0[24], v23);
LABEL_15:
    uint64_t v29 = v0[45];
    sub_10000C6CC(v0[25], &qword_100723600);
    uint64_t v30 = v29 + OBJC_IVAR____TtC8coreidvd33DigitalPresentmentResponseBuilder_context;
    uint64_t v31 = type metadata accessor for DigitalPresentmentFlow.Context(0);
    unint64_t v32 = sub_10000C728((void *)(v30 + *(int *)(v31 + 32)), *(void *)(v30 + *(int *)(v31 + 32) + 24));
    uint64_t v33 = *v32;
    if (*(void *)(*v32 + 32))
    {
      swift_retain();
      sub_100007764((uint64_t *)&unk_100723650);
      sub_100007764((uint64_t *)&unk_100723450);
      Task.cancel()();
      swift_release();
    }
    uint64_t v34 = (void *)v0[44];
    uint64_t v35 = v0[45];
    uint64_t v36 = v0[22];
    uint64_t v37 = type metadata accessor for TaskPriority();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56);
    v38(v36, 1, 1, v37);
    uint64_t v39 = (void *)swift_allocObject();
    v39[2] = 0;
    v39[3] = 0;
    v39[4] = v33;
    swift_retain();
    *(void *)(v33 + 32) = sub_10016F42C(v36, (uint64_t)&unk_100723660, (uint64_t)v39);
    swift_release();
    v38(v36, 1, 1, v37);
    uint64_t v40 = (void *)swift_allocObject();
    v40[2] = 0;
    v40[3] = 0;
    v40[4] = v35;
    swift_retain();
    sub_1001405E0(v36, (uint64_t)&unk_100723668, (uint64_t)v40);
    swift_release();
    [v34 setStatus:1000];
    swift_errorRelease();
    goto LABEL_18;
  }
  int v59 = enum case for DIPError.Code.topekaMerchantNotFound(_:);
  uint64_t v48 = (void *)v0[44];
  uint64_t v49 = v0[23];
  sub_10000C6CC(v0[25], &qword_100723600);
  [v48 setStatus:1];
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if (v25(v49, 1, v23) == 1)
  {
    uint64_t v50 = v0[23];
    swift_errorRelease();
    sub_10000C6CC(v50, &qword_100723600);
  }
  else if (v27(v0[23], v23) == v59)
  {
    Swift::String v51 = (void *)v0[44];
    uint64_t v53 = v0[20];
    uint64_t v52 = v0[21];
    uint64_t v54 = v0[19];
    (*(void (**)(void, uint64_t))(v24 + 8))(v0[23], v23);
    (*(void (**)(uint64_t, void, uint64_t))(v53 + 104))(v52, enum case for DigitalPresentmentDisplayConfiguration.StringID.digitalPresentmentAppNotSupportedText(_:), v54);
    static DigitalPresentmentDisplayConfiguration.getString(_:)();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
    NSString v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v51 setLocalizedErrorMessageOverride:v55];
    swift_errorRelease();
  }
  else
  {
    uint64_t v56 = v0[23];
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v56, v23);
  }
LABEL_18:
  uint64_t v62 = v0[44];
  uint64_t v42 = v0[38];
  uint64_t v41 = v0[39];
  uint64_t v44 = v0[36];
  uint64_t v43 = v0[37];
  uint64_t v45 = v0[34];
  uint64_t v46 = v0[33];
  sub_1000EDB24();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = (uint64_t (*)(uint64_t))v0[1];
  return v47(v62);
}

uint64_t sub_1000EF90C()
{
  os_log_type_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v3 = v2[28];
  uint64_t v4 = v2[27];
  uint64_t v5 = v2[26];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    id v6 = sub_1000F02B0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    id v6 = sub_1000EFAA4;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000EFAA4()
{
  uint64_t v1 = v0[25];
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v4(v1, 1, v2) != 1)
  {
    uint64_t v5 = v0[24];
    sub_100048D6C(v0[25], v5, &qword_100723600);
    id v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88);
    int v7 = v6(v5, v2);
    if (v7 == enum case for DIPError.Code.topekaMerchantNotFound(_:)
      || v7 == enum case for DIPError.Code.unexpectedDaemonState(_:)
      || v7 == enum case for DIPError.Code.digitalPresentmentInvalidMerchantCertificate(_:)
      || v7 == enum case for DIPError.Code.digitalPresentmentInvalidCredential(_:)
      || v7 == enum case for DIPError.Code.digitalPresentmentCannotBuildResponse(_:))
    {
      int v41 = enum case for DIPError.Code.topekaMerchantNotFound(_:);
      uint64_t v12 = (void *)v0[44];
      uint64_t v13 = v0[23];
      sub_10000C6CC(v0[25], &qword_100723600);
      [v12 setStatus:1];
      swift_getErrorValue();
      Error.dipErrorCode.getter();
      if (v4(v13, 1, v2) == 1)
      {
        uint64_t v14 = v0[23];
        swift_errorRelease();
        sub_10000C6CC(v14, &qword_100723600);
      }
      else if (v6(v0[23], v2) == v41)
      {
        uint64_t v35 = (void *)v0[44];
        uint64_t v37 = v0[20];
        uint64_t v36 = v0[21];
        uint64_t v38 = v0[19];
        (*(void (**)(void, uint64_t))(v3 + 8))(v0[23], v2);
        (*(void (**)(uint64_t, void, uint64_t))(v37 + 104))(v36, enum case for DigitalPresentmentDisplayConfiguration.StringID.digitalPresentmentAppNotSupportedText(_:), v38);
        static DigitalPresentmentDisplayConfiguration.getString(_:)();
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
        NSString v39 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v35 setLocalizedErrorMessageOverride:v39];
        swift_errorRelease();
      }
      else
      {
        uint64_t v40 = v0[23];
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v40, v2);
      }
      goto LABEL_21;
    }
    (*(void (**)(void, uint64_t))(v3 + 8))(v0[24], v2);
  }
  uint64_t v15 = v0[45];
  sub_10000C6CC(v0[25], &qword_100723600);
  uint64_t v16 = v15 + OBJC_IVAR____TtC8coreidvd33DigitalPresentmentResponseBuilder_context;
  uint64_t v17 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  uint64_t v18 = sub_10000C728((void *)(v16 + *(int *)(v17 + 32)), *(void *)(v16 + *(int *)(v17 + 32) + 24));
  uint64_t v19 = *v18;
  if (*(void *)(*v18 + 32))
  {
    swift_retain();
    sub_100007764((uint64_t *)&unk_100723650);
    sub_100007764((uint64_t *)&unk_100723450);
    Task.cancel()();
    swift_release();
  }
  uint64_t v20 = (void *)v0[44];
  uint64_t v21 = v0[45];
  uint64_t v22 = v0[22];
  uint64_t v23 = type metadata accessor for TaskPriority();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  v24(v22, 1, 1, v23);
  id v25 = (void *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = v19;
  swift_retain();
  *(void *)(v19 + 32) = sub_10016F42C(v22, (uint64_t)&unk_100723660, (uint64_t)v25);
  swift_release();
  v24(v22, 1, 1, v23);
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = 0;
  v26[3] = 0;
  v26[4] = v21;
  swift_retain();
  sub_1001405E0(v22, (uint64_t)&unk_100723668, (uint64_t)v26);
  swift_release();
  [v20 setStatus:1000];
  swift_errorRelease();
LABEL_21:
  uint64_t v42 = v0[44];
  uint64_t v28 = v0[38];
  uint64_t v27 = v0[39];
  uint64_t v30 = v0[36];
  uint64_t v29 = v0[37];
  uint64_t v31 = v0[34];
  uint64_t v32 = v0[33];
  sub_1000EDB24();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(uint64_t))v0[1];
  return v33(v42);
}

uint64_t sub_1000F0098(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100723610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F0104(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  int v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *int v7 = v2;
  v7[1] = sub_10000C494;
  return sub_10020B0D0(a1, v4, v5, v6);
}

uint64_t sub_1000F01BC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F01FC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  int v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *int v7 = v2;
  v7[1] = sub_10000C494;
  return sub_100566734(a1, v4, v5, v6);
}

uint64_t sub_1000F02B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v153 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v153 - v10;
  v153[0] = 0;
  v153[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(524);
  v12._object = (void *)0x8000000100635B50;
  v12._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v12);
  id v13 = [v0 absoluteTimestamp];
  if (v13)
  {
    uint64_t v14 = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v15(v4, v9, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v15(v11, v4, v5);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  Date.init()();
  sub_100027994((uint64_t)v4);
LABEL_6:
  sub_1000F1888();
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v17._countAndFlagsBits = 0x646E65672020200ALL;
  v17._object = (void *)0xEC000000203A7265;
  String.append(_:)(v17);
  id v18 = [v1 gender];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v22 = (void *)0xE000000000000000;
  }
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x6E696B732020200ALL;
  v24._object = (void *)0xEE00203A656E6F54;
  String.append(_:)(v24);
  id v25 = [v1 skinTone];
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v29 = (void *)0xE000000000000000;
  }
  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 0x6E6874652020200ALL;
  v31._object = (void *)0xEF203A7974696369;
  String.append(_:)(v31);
  id v32 = [v1 ethnicity];
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v36 = (void *)0xE000000000000000;
  }
  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 0xD000000000000014;
  v38._object = (void *)0x8000000100635B70;
  String.append(_:)(v38);
  id v39 = [v1 deviceLanguage];
  if (v39)
  {
    uint64_t v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v43 = (void *)0xE000000000000000;
  }
  v44._countAndFlagsBits = v41;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._object = (void *)0x8000000100635B90;
  v45._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v45);
  id v46 = [v1 proofingDecision];
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v49;
  }
  else
  {
    uint64_t v48 = 0;
    uint64_t v50 = (void *)0xE000000000000000;
  }
  v51._countAndFlagsBits = v48;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 0x757373692020200ALL;
  v52._object = (void *)0xEC000000203A7265;
  String.append(_:)(v52);
  id v53 = [v1 issuer];
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v56;
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v57 = (void *)0xE000000000000000;
  }
  v58._countAndFlagsBits = v55;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  v59._countAndFlagsBits = 0xD000000000000018;
  v59._object = (void *)0x8000000100635BB0;
  String.append(_:)(v59);
  id v60 = [v1 livenessAssessment];
  if (v60)
  {
    uint64_t v61 = v60;
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v64 = v63;
  }
  else
  {
    uint64_t v62 = 0;
    int v64 = (void *)0xE000000000000000;
  }
  v65._countAndFlagsBits = v62;
  v65._object = v64;
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  v66._countAndFlagsBits = 0xD000000000000017;
  v66._object = (void *)0x8000000100635BD0;
  String.append(_:)(v66);
  id v67 = [v1 gestureAssessment];
  if (v67)
  {
    int v68 = v67;
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v71 = v70;
  }
  else
  {
    uint64_t v69 = 0;
    uint64_t v71 = (void *)0xE000000000000000;
  }
  v72._countAndFlagsBits = v69;
  v72._object = v71;
  String.append(_:)(v72);
  swift_bridgeObjectRelease();
  v73._object = (void *)0x8000000100635BF0;
  v73._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v73);
  id v74 = [v1 axSettings];
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v75._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v76._object = (void *)0x8000000100635C10;
  v76._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v76);
  id v77 = [v1 facVersion];
  if (v77)
  {
    uint64_t v78 = v77;
    uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v81 = v80;
  }
  else
  {
    uint64_t v79 = 0;
    int v81 = (void *)0xE000000000000000;
  }
  v82._countAndFlagsBits = v79;
  v82._object = v81;
  String.append(_:)(v82);
  swift_bridgeObjectRelease();
  v83._countAndFlagsBits = 0xD000000000000017;
  v83._object = (void *)0x8000000100635C30;
  String.append(_:)(v83);
  id v84 = [v1 facePoseVersion];
  if (v84)
  {
    int64_t v85 = v84;
    uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_type_t v88 = v87;
  }
  else
  {
    uint64_t v86 = 0;
    os_log_type_t v88 = (void *)0xE000000000000000;
  }
  v89._countAndFlagsBits = v86;
  v89._object = v88;
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._object = (void *)0x8000000100635C50;
  v90._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v90);
  id v91 = [v1 padtoolVersion];
  if (v91)
  {
    uint64_t v92 = v91;
    uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    BOOL v95 = v94;
  }
  else
  {
    uint64_t v93 = 0;
    BOOL v95 = (void *)0xE000000000000000;
  }
  v96._countAndFlagsBits = v93;
  v96._object = v95;
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._countAndFlagsBits = 0xD000000000000012;
  v97._object = (void *)0x8000000100635C70;
  String.append(_:)(v97);
  id v98 = [v1 prdVersion];
  if (v98)
  {
    int64_t v99 = v98;
    uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v102 = v101;
  }
  else
  {
    uint64_t v100 = 0;
    uint64_t v102 = (void *)0xE000000000000000;
  }
  v103._countAndFlagsBits = v100;
  v103._object = v102;
  String.append(_:)(v103);
  swift_bridgeObjectRelease();
  v104._countAndFlagsBits = 0xD000000000000011;
  v104._object = (void *)0x8000000100635C90;
  String.append(_:)(v104);
  unsigned int v105 = [v1 didStepUp];
  BOOL v106 = v105 == 0;
  if (v105) {
    uint64_t v107 = 1702195828;
  }
  else {
    uint64_t v107 = 0x65736C6166;
  }
  if (v106) {
    unint64_t v108 = 0xE500000000000000;
  }
  else {
    unint64_t v108 = 0xE400000000000000;
  }
  unint64_t v109 = v108;
  String.append(_:)(*(Swift::String *)&v107);
  swift_bridgeObjectRelease();
  v110._countAndFlagsBits = 0xD000000000000020;
  v110._object = (void *)0x8000000100635CB0;
  String.append(_:)(v110);
  id v111 = [v1 passiveGestureAssessment];
  if (v111)
  {
    Swift::String v112 = v111;
    uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_type_t v115 = v114;
  }
  else
  {
    uint64_t v113 = 0;
    os_log_type_t v115 = (void *)0xE000000000000000;
  }
  v116._countAndFlagsBits = v113;
  v116._object = v115;
  String.append(_:)(v116);
  swift_bridgeObjectRelease();
  v117._object = (void *)0x8000000100635CE0;
  v117._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v117);
  id v118 = [v1 passiveLivenessAssessment];
  if (v118)
  {
    uint64_t v119 = v118;
    uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v122 = v121;
  }
  else
  {
    uint64_t v120 = 0;
    uint64_t v122 = (void *)0xE000000000000000;
  }
  v123._countAndFlagsBits = v120;
  v123._object = v122;
  String.append(_:)(v123);
  swift_bridgeObjectRelease();
  v124._object = (void *)0x8000000100635D10;
  v124._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v124);
  id v125 = [v1 passiveLivenessFacVersion];
  if (v125)
  {
    unint64_t v126 = v125;
    uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v129 = v128;
  }
  else
  {
    uint64_t v127 = 0;
    uint64_t v129 = (void *)0xE000000000000000;
  }
  v130._countAndFlagsBits = v127;
  v130._object = v129;
  String.append(_:)(v130);
  swift_bridgeObjectRelease();
  v131._countAndFlagsBits = 0xD000000000000026;
  v131._object = (void *)0x8000000100635D40;
  String.append(_:)(v131);
  id v132 = [v1 passiveLivenessFacePoseVersion];
  if (v132)
  {
    Swift::String v133 = v132;
    uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v136 = v135;
  }
  else
  {
    uint64_t v134 = 0;
    Swift::String v136 = (void *)0xE000000000000000;
  }
  v137._countAndFlagsBits = v134;
  v137._object = v136;
  String.append(_:)(v137);
  swift_bridgeObjectRelease();
  v138._countAndFlagsBits = 0xD000000000000025;
  v138._object = (void *)0x8000000100635D70;
  String.append(_:)(v138);
  id v139 = [v1 passiveLivenessPadtoolVersion];
  if (v139)
  {
    Swift::String v140 = v139;
    uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v143 = v142;
  }
  else
  {
    uint64_t v141 = 0;
    uint64_t v143 = (void *)0xE000000000000000;
  }
  v144._countAndFlagsBits = v141;
  v144._object = v143;
  String.append(_:)(v144);
  swift_bridgeObjectRelease();
  v145._countAndFlagsBits = 0xD000000000000021;
  v145._object = (void *)0x8000000100635DA0;
  String.append(_:)(v145);
  id v146 = [v1 passiveLivenessPrdVersion];
  if (v146)
  {
    unint64_t v147 = v146;
    uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v150 = v149;
  }
  else
  {
    uint64_t v148 = 0;
    uint64_t v150 = (void *)0xE000000000000000;
  }
  v151._countAndFlagsBits = v148;
  v151._object = v150;
  String.append(_:)(v151);
  swift_bridgeObjectRelease();
  return v153[0];
}

uint64_t sub_1000F0DF0()
{
  return sub_1000F02B8();
}

unint64_t sub_1000F0E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v98 = a6;
  uint64_t v99 = a8;
  uint64_t v104 = a5;
  uint64_t v105 = a7;
  uint64_t v97 = a4;
  uint64_t v67 = a3;
  uint64_t v100 = a9;
  uint64_t v95 = a11;
  uint64_t v96 = a2;
  uint64_t v81 = a10;
  uint64_t v94 = a13;
  uint64_t v79 = a12;
  uint64_t v93 = a15;
  uint64_t v78 = a14;
  uint64_t v92 = a17;
  uint64_t v77 = a16;
  uint64_t v91 = a19;
  uint64_t v76 = a18;
  uint64_t v90 = a31;
  id v74 = a30;
  uint64_t v72 = a42;
  uint64_t v80 = a41;
  uint64_t v70 = a40;
  uint64_t v82 = a39;
  uint64_t v68 = a38;
  uint64_t v83 = a37;
  uint64_t v84 = a35;
  uint64_t v101 = a34;
  uint64_t v102 = a32;
  uint64_t v85 = a33;
  uint64_t v86 = a28;
  uint64_t v103 = a29;
  uint64_t v87 = a26;
  uint64_t v64 = a27;
  uint64_t v88 = a24;
  uint64_t v65 = a25;
  uint64_t v89 = a22;
  uint64_t v66 = a23;
  uint64_t v71 = a20;
  uint64_t v43 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v43 - 8);
  Swift::String v45 = (char *)&v63 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v75 = v45;
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v46 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v45, a1, v46);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v45, 0, 1, v46);
  uint64_t v48 = &_swiftEmptyArrayStorage;
  if (a21) {
    uint64_t v48 = a21;
  }
  uint64_t v69 = (uint64_t)v48;
  id v73 = objc_allocWithZone((Class)BMWalletPaymentsCommerceUserProofingResult);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v49 = v68;
  swift_bridgeObjectRetain();
  uint64_t v50 = v70;
  swift_bridgeObjectRetain();
  uint64_t v51 = v72;
  swift_bridgeObjectRetain();
  id v52 = v74;
  id v53 = v74;
  uint64_t v54 = v71;
  swift_bridgeObjectRetain();
  uint64_t v55 = v76;
  swift_bridgeObjectRetain();
  uint64_t v56 = v77;
  swift_bridgeObjectRetain();
  uint64_t v57 = v78;
  swift_bridgeObjectRetain();
  uint64_t v58 = v79;
  swift_bridgeObjectRetain();
  uint64_t v59 = swift_bridgeObjectRetain();
  id v60 = sub_1000F12D0((uint64_t)v75, v96, v67, v97, v104, v98, v105, v99, v59, v95, v58, v94, v57, v93, v56, v92, v55, v91, v54,
          v69,
          v89,
          v66,
          v88,
          v65,
          v87,
          v64,
          v86,
          v103,
          v52,
          v90,
          v102,
          v85,
          v101,
          v84,
          a36,
          v83,
          v49,
          v82,
          v50,
          v80,
          v51);
  unint64_t result = sub_1000F1848();
  uint64_t v62 = v100;
  v100[3] = result;
  v62[4] = &off_1006F83E8;
  *uint64_t v62 = v60;
  return result;
}

uint64_t type metadata accessor for BMUserProofingEventFactory()
{
  return self;
}

id sub_1000F12D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v45 = type metadata accessor for Date();
  uint64_t v46 = *(void *)(v45 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(a1, 1, v45) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(a1, v45);
  }
  if (a3)
  {
    NSString v80 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a5) {
      goto LABEL_5;
    }
  }
  else
  {
    NSString v80 = 0;
    if (a5)
    {
LABEL_5:
      NSString v79 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v47 = a9;
      if (a7) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  NSString v79 = 0;
  uint64_t v47 = a9;
  if (a7)
  {
LABEL_6:
    NSString v78 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v48 = a11;
    if (v47) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  NSString v78 = 0;
  uint64_t v48 = a11;
  if (v47)
  {
LABEL_7:
    NSString v77 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v49 = a13;
    if (v48) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  NSString v77 = 0;
  uint64_t v49 = a13;
  if (v48)
  {
LABEL_8:
    NSString v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v50 = a15;
    if (v49) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  NSString v76 = 0;
  uint64_t v50 = a15;
  if (v49)
  {
LABEL_9:
    NSString v75 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v51 = a17;
    if (v50) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  NSString v75 = 0;
  uint64_t v51 = a17;
  if (v50)
  {
LABEL_10:
    NSString v74 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v52 = a19;
    if (v51) {
      goto LABEL_11;
    }
LABEL_20:
    NSString v73 = 0;
    uint64_t v53 = a22;
    if (v52) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_19:
  NSString v74 = 0;
  uint64_t v52 = a19;
  if (!v51) {
    goto LABEL_20;
  }
LABEL_11:
  NSString v73 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v53 = a22;
  if (v52)
  {
LABEL_12:
    NSString v86 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
LABEL_21:
  NSString v86 = 0;
LABEL_22:
  v85.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (v53)
  {
    NSString v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v55 = a26;
    if (a24) {
      goto LABEL_24;
    }
  }
  else
  {
    NSString v54 = 0;
    uint64_t v55 = a26;
    if (a24)
    {
LABEL_24:
      NSString v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v57 = a28;
      if (v55) {
        goto LABEL_25;
      }
      goto LABEL_35;
    }
  }
  NSString v56 = 0;
  uint64_t v57 = a28;
  if (v55)
  {
LABEL_25:
    NSString v72 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v58 = a31;
    if (v57) {
      goto LABEL_26;
    }
    goto LABEL_36;
  }
LABEL_35:
  NSString v72 = 0;
  uint64_t v58 = a31;
  if (v57)
  {
LABEL_26:
    NSString v84 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v59 = a33;
    if (v58) {
      goto LABEL_27;
    }
    goto LABEL_37;
  }
LABEL_36:
  NSString v84 = 0;
  uint64_t v59 = a33;
  if (v58)
  {
LABEL_27:
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v61 = a35;
    if (v59) {
      goto LABEL_28;
    }
    goto LABEL_38;
  }
LABEL_37:
  NSString v60 = 0;
  uint64_t v61 = a35;
  if (v59)
  {
LABEL_28:
    NSString v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v63 = a37;
    if (v61) {
      goto LABEL_29;
    }
    goto LABEL_39;
  }
LABEL_38:
  NSString v62 = 0;
  uint64_t v63 = a37;
  if (v61)
  {
LABEL_29:
    NSString v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v65 = a39;
    if (v63) {
      goto LABEL_30;
    }
    goto LABEL_40;
  }
LABEL_39:
  NSString v64 = 0;
  uint64_t v65 = a39;
  if (v63)
  {
LABEL_30:
    NSString v66 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v67 = a41;
    if (v65) {
      goto LABEL_31;
    }
LABEL_41:
    NSString v68 = 0;
    uint64_t v69 = a29;
    if (v67) {
      goto LABEL_32;
    }
LABEL_42:
    NSString v70 = 0;
    goto LABEL_43;
  }
LABEL_40:
  NSString v66 = 0;
  uint64_t v67 = a41;
  if (!v65) {
    goto LABEL_41;
  }
LABEL_31:
  NSString v68 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v69 = a29;
  if (!v67) {
    goto LABEL_42;
  }
LABEL_32:
  NSString v70 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_43:
  id v82 = objc_msgSend(v81, "initWithAbsoluteTimestamp:age:gender:skinTone:ethnicity:deviceLanguage:proofingDecision:issuer:livenessAssessment:gestureAssessment:axSettings:facVersion:facePoseVersion:padtoolVersion:prdVersion:didStepUp:passiveGestureAssessment:passiveLivenessAssessment:passiveLivenessFacVersion:passiveLivenessFacePoseVersion:passiveLivenessPadtoolVersion:passiveLivenessPrdVersion:", isa, v80, v79, v78, v77, v76, v75, v74, v73, v86, v85.super.isa, v54, v56, v72,
          v84,
          v69,
          v60,
          v62,
          v64,
          v66,
          v68,
          v70);

  return v82;
}

unint64_t sub_1000F1848()
{
  unint64_t result = qword_100723710;
  if (!qword_100723710)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100723710);
  }
  return result;
}

unint64_t sub_1000F1888()
{
  unint64_t result = qword_100723330;
  if (!qword_100723330)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100723330);
  }
  return result;
}

uint64_t sub_1000F18E0()
{
  uint64_t v0 = type metadata accessor for DIPCertUsage();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CertUsageMapper();
  static CertUsageMapper.sharedInstance.getter();
  type metadata accessor for Workflow();
  uint64_t v4 = enum case for DIPCertUsage.topekaServerSigning(_:);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, enum case for DIPCertUsage.topekaServerSigning(_:), v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  type metadata accessor for LegacyINOWorkflow(0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  type metadata accessor for LegacySPWorkflow(0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  type metadata accessor for IdentityProofingResponse(0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  type metadata accessor for SharingRegistrationResponse(0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  sub_100007764(&qword_100723718);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  sub_100007764(&qword_100723720);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  sub_100007764(&qword_100723728);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  sub_100007764((uint64_t *)&unk_100723730);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  type metadata accessor for WorkflowRecommendationResponse();
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  sub_100007764((uint64_t *)&unk_100726030);
  v5(v3, enum case for DIPCertUsage.inoSigning(_:), v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, enum case for DIPCertUsage.spSigning(_:), v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, enum case for DIPCertUsage.assessmentServerSigning(_:), v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  type metadata accessor for IdentityProofingStaticWorkflow(0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  v6(v3, v0);
  v5(v3, v4, v0);
  CertUsageMapper.registerMapping(forType:usage:)();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v6)(v3, v0);
}

ValueMetadata *_s31IdentityProofingDeletionUtilityOMa()
{
  return &_s31IdentityProofingDeletionUtilityON;
}

void sub_1000F2044(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithEntityName:v4];

  uint64_t v6 = *(void **)(a1 + 16);
  sub_100007764(&qword_1007232F0);
  unint64_t v7 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return;
  }
  unint64_t v8 = (unint64_t)sub_10052F04C(v7);

  swift_bridgeObjectRelease();
  if (v8)
  {
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      if (v9) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_5:
        if (v9 < 1)
        {
          __break(1u);
          goto LABEL_22;
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          if ((v8 & 0xC000000000000001) != 0) {
            id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v11 = *(id *)(v8 + 8 * i + 32);
          }
          Swift::String v12 = v11;
          [v6 deleteObject:v11];
        }
      }
    }
    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for StoredUploadAsset();
  id v13 = (void *)static StoredUploadAsset.fetchRequest()();
  unint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();

  if (!(v8 >> 62))
  {
    uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v14) {
      goto LABEL_23;
    }
    goto LABEL_15;
  }
LABEL_22:
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  if (!v14) {
    goto LABEL_23;
  }
LABEL_15:
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  for (uint64_t j = 0; j != v14; ++j)
  {
    if ((v8 & 0xC000000000000001) != 0) {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v16 = *(id *)(v8 + 8 * j + 32);
    }
    Swift::String v17 = v16;
    [v6 deleteObject:v16];
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
  type metadata accessor for StoredPrearmTrust();
  id v18 = (void *)static StoredPrearmTrust.fetchRequest()();
  unint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();

  if (!(v8 >> 62))
  {
    uint64_t v19 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_27;
    }
LABEL_35:
    swift_bridgeObjectRelease_n();
    sub_1000FFAB4();
    return;
  }
LABEL_34:
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  if (!v19) {
    goto LABEL_35;
  }
LABEL_27:
  if (v19 >= 1)
  {
    for (uint64_t k = 0; k != v19; ++k)
    {
      if ((v8 & 0xC000000000000001) != 0) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(v8 + 8 * k + 32);
      }
      uint64_t v22 = v21;
      [v6 deleteObject:v21];
    }
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_1000F23A8()
{
  id v3 = (uint64_t (__cdecl *)())((char *)&dword_100723748 + dword_100723748);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000C494;
  return v3();
}

uint64_t sub_1000F2448()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[26] = v1;
  v0[27] = *(void *)(v1 - 8);
  v0[28] = swift_task_alloc();
  v0[29] = swift_task_alloc();
  return _swift_task_switch(sub_1000F2514, 0, 0);
}

uint64_t sub_1000F2514()
{
  uint64_t v20 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderDeletionUtility attempting to delete data", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 216);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v8 = v7;
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1000F27C8, v8);
  swift_release();
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  id v11 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v12 = (uint64_t)&v11[4];
  id v13 = v11 + 52;
  os_unfair_lock_lock(v11 + 52);
  sub_1000262B4(v12, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v13);
  uint64_t v14 = *(void *)(v0 + 88);
  swift_retain();
  sub_1000262D0(v0 + 16);
  uint64_t v15 = *(os_unfair_lock_s **)(v14 + 16);
  id v16 = v15 + 4;
  Swift::String v17 = v15 + 6;
  os_unfair_lock_lock(v15 + 6);
  sub_100006754(v16, &v19);
  os_unfair_lock_unlock(v17);
  uint64_t v18 = v19;
  swift_release();
  if (v18 <= 0) {
    sub_100437570();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

void sub_1000F27C8()
{
  sub_1000F2044(v0);
}

uint64_t sub_1000F27E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v5[16] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPSignpost();
  v5[17] = v8;
  v5[18] = *(void *)(v8 - 8);
  v5[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000F29A0, 0, 0);
}

uint64_t sub_1000F29A0()
{
  static DaemonSignposts.MobileDocumentReader.validateResponse.getter();
  DIPSignpost.init(_:)();
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  unint64_t v4 = v0[6];
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ISO18013ResponseValidator validating ISO18013 response, trustedIssuerRoots: %ld.", v5, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = v0[15];
  uint64_t v8 = v0[12];
  uint64_t v9 = v0[13];
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v0[20] = v10;
  v0[21] = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v7, v8);
  uint64_t v11 = ISO18013Response.documents.getter();
  v0[22] = v11;
  if (v11)
  {
    uint64_t v12 = *(void *)(v0[8] + 16);
    v0[23] = v12;
    return _swift_task_switch(sub_1000F2C28, v12, 0);
  }
  else
  {
    uint64_t v14 = v0[18];
    uint64_t v13 = v0[19];
    uint64_t v15 = v0[17];
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v16 = (uint64_t (*)(void *))v0[1];
    return v16(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1000F2C28()
{
  sub_10004D62C();
  return _swift_task_switch(sub_1000F2C94, 0, 0);
}

uint64_t sub_1000F2C94()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  v0[2] = v0[22];
  unint64_t v4 = (void *)swift_task_alloc();
  v0[24] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[25] = v5;
  uint64_t v6 = sub_100007764(&qword_100723810);
  uint64_t v7 = sub_100007764((uint64_t *)&unk_100723650);
  unint64_t v8 = sub_1000F404C();
  *uint64_t v5 = v0;
  v5[1] = sub_1000F2DAC;
  return Sequence.asyncMap<A>(_:)(&unk_100723808, v4, v6, v7, v8);
}

uint64_t sub_1000F2DAC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 216) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v4 = sub_1000F3040;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    unint64_t v4 = sub_1000F2ED4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F2ED4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ISO18013ResponseValidator successfully validated ISO18013 response.", v3, 2u);
    swift_slowDealloc();
  }
  unint64_t v4 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[12];

  v4(v5, v6);
  uint64_t v7 = v0[26];
  uint64_t v9 = v0[18];
  uint64_t v8 = v0[19];
  uint64_t v10 = v0[17];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(v7);
}

uint64_t sub_1000F3040()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[9];
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000F3228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  uint64_t v6 = type metadata accessor for DIPError.PropertyKey();
  v5[13] = v6;
  v5[14] = *(void *)(v6 - 8);
  v5[15] = swift_task_alloc();
  sub_100007764(&qword_100726640);
  v5[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v5[17] = v7;
  v5[18] = *(void *)(v7 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ISO18013MobileSecurityObject();
  v5[20] = v8;
  v5[21] = *(void *)(v8 - 8);
  v5[22] = swift_task_alloc();
  return _swift_task_switch(sub_1000F33D8, 0, 0);
}

uint64_t sub_1000F33D8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[23] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000F347C;
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[9];
  return sub_10004D92C(v2, v4, v3);
}

uint64_t sub_1000F347C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000F3B98;
  }
  else {
    uint64_t v4 = sub_1000F3590;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F3590()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 96);
  unint64_t v4 = *(void *)(v0 + 72);
  sub_10000C728((void *)(*(void *)(v0 + 80) + 32), *(void *)(*(void *)(v0 + 80) + 56));
  sub_10020FDF0(v4, v2, v3);
  uint64_t v5 = v1;
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 160);
  uint64_t v44 = *(void *)(v0 + 152);
  if (!v5)
  {
    uint64_t v29 = *(void **)(v0 + 64);
    type metadata accessor for DaemonAnalytics();
    static DaemonAnalytics.sendResponseValidationResultEvent(result:issuerCertificateChain:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    void *v29 = v6;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v30 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_14;
  }
  id v39 = (_OWORD *)(v0 + 16);
  uint64_t v41 = *(void *)(v0 + 160);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v42 = *(void *)(v0 + 136);
  uint64_t v11 = *(void *)(v0 + 112);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v12 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v40 = v7;
  unint64_t v13 = (*(unsigned __int8 *)(*(void *)v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v12 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100610730;
  uint64_t v15 = (void *)(v14 + v13 + v12[14]);
  unsigned int v38 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
  (*(void (**)(void))(v11 + 104))();
  v15[3] = sub_100007764((uint64_t *)&unk_100723650);
  *uint64_t v15 = v6;
  swift_errorRetain();
  sub_10015C504(v14);
  LODWORD(v12) = enum case for DIPError.Code.internalError(_:);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v44, enum case for DIPError.Code.internalError(_:), v42);
  uint64_t v16 = type metadata accessor for DIPError();
  sub_10000C588();
  uint64_t v17 = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v40, v41);
  *(void *)(v0 + 48) = v17;
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  char v18 = swift_dynamicCast();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v20 = *(void *)(v0 + 128);
  unsigned int v43 = v12;
  if ((v18 & 1) == 0)
  {
    v19(v20, 1, 1, v16);
    sub_10000C6CC(v20, &qword_100726640);
    uint64_t v27 = v0 + 16;
    *id v39 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
LABEL_12:
    sub_10000C6CC(v27, (uint64_t *)&unk_100727200);
    goto LABEL_13;
  }
  uint64_t v21 = *(void *)(v16 - 8);
  uint64_t v23 = *(void *)(v0 + 112);
  uint64_t v22 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 104);
  v19(v20, 0, 1, v16);
  uint64_t v25 = DIPError.properties.getter();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v16);
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, v38, v24);
  if (*(void *)(v25 + 16))
  {
    unint64_t v26 = sub_1005905C0(*(void *)(v0 + 120));
    uint64_t v27 = v0 + 16;
    if (v28)
    {
      sub_10003BC28(*(void *)(v25 + 56) + 32 * v26, (uint64_t)v39);
    }
    else
    {
      *id v39 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
  }
  else
  {
    uint64_t v27 = v0 + 16;
    *id v39 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  uint64_t v32 = *(void *)(v0 + 112);
  uint64_t v31 = *(void *)(v0 + 120);
  uint64_t v33 = *(void *)(v0 + 104);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  if (!*(void *)(v0 + 40)) {
    goto LABEL_12;
  }
  sub_100007764((uint64_t *)&unk_100723650);
  swift_dynamicCast();
LABEL_13:
  uint64_t v34 = *(void *)(v0 + 144);
  uint64_t v35 = *(void *)(v0 + 152);
  uint64_t v36 = *(void *)(v0 + 136);
  type metadata accessor for DaemonAnalytics();
  swift_errorRetain();
  static DaemonAnalytics.sendResponseValidationResultEvent(result:issuerCertificateChain:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v35, v43, v36);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v30 = *(uint64_t (**)(void))(v0 + 8);
LABEL_14:
  return v30();
}

uint64_t sub_1000F3B98()
{
  *(void *)(v0 + 48) = *(void *)(v0 + 200);
  uint64_t v1 = (_OWORD *)(v0 + 16);
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  uint64_t v2 = type metadata accessor for DIPError();
  char v3 = swift_dynamicCast();
  unint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  uint64_t v5 = *(void *)(v0 + 128);
  if (v3)
  {
    uint64_t v6 = *(void *)(v2 - 8);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v20 = *(void *)(v0 + 120);
    uint64_t v8 = *(void *)(v0 + 104);
    v4(v5, 0, 1, v2);
    uint64_t v9 = DIPError.properties.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v20, enum case for DIPError.PropertyKey.issuerCertificateChain(_:), v8);
    if (*(void *)(v9 + 16) && (unint64_t v10 = sub_1005905C0(*(void *)(v0 + 120)), (v11 & 1) != 0))
    {
      sub_10003BC28(*(void *)(v9 + 56) + 32 * v10, v0 + 16);
    }
    else
    {
      *uint64_t v1 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    uint64_t v13 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 104);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    if (*(void *)(v0 + 40))
    {
      sub_100007764((uint64_t *)&unk_100723650);
      swift_dynamicCast();
      goto LABEL_10;
    }
  }
  else
  {
    v4(*(void *)(v0 + 128), 1, 1, v2);
    sub_10000C6CC(v5, &qword_100726640);
    *uint64_t v1 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  sub_10000C6CC(v0 + 16, (uint64_t *)&unk_100727200);
LABEL_10:
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 136);
  type metadata accessor for DaemonAnalytics();
  swift_errorRetain();
  static DaemonAnalytics.sendResponseValidationResultEvent(result:issuerCertificateChain:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v16, enum case for DIPError.Code.internalError(_:), v17);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_1000F3F24()
{
  swift_unknownObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 32);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ISO18013ResponseValidator()
{
  return self;
}

uint64_t sub_1000F3F88(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10000C494;
  return sub_1000F3228(a1, a2, v6, v7, v8);
}

unint64_t sub_1000F404C()
{
  unint64_t result = qword_100723818;
  if (!qword_100723818)
  {
    sub_100019364(&qword_100723810);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100723818);
  }
  return result;
}

uint64_t sub_1000F40A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v133 = a4;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v98 - v12;
  uint64_t result = sub_1000E4834(a2, a3);
  if (!v4)
  {
    uint64_t v129 = a2;
    uint64_t v130 = v7;
    uint64_t v131 = v8;
    uint64_t v132 = 0;
    if (result)
    {
      uint64_t v15 = (void *)result;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        char v18 = (uint8_t *)swift_slowAlloc();
        v166[0] = swift_slowAlloc();
        *(_DWORD *)char v18 = 136315138;
        uint64_t v128 = v18 + 4;
        swift_bridgeObjectRetain();
        v134[0] = sub_100110D58(v129, (unint64_t)a3, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Successfully fetched biome metadata for proofingSessionID: %s", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v131 + 8))(v11, v130);
      id v25 = [v15 proofingSessionID];
      if (v25)
      {
        unint64_t v26 = v25;
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v116 = v28;
        uint64_t v117 = v27;
      }
      else
      {
        uint64_t v116 = 0;
        uint64_t v117 = 0;
      }
      id v29 = [v15 dob];
      if (v29)
      {
        Swift::String v30 = v29;
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v114 = v32;
        uint64_t v115 = v31;
      }
      else
      {
        uint64_t v114 = 0;
        uint64_t v115 = 0;
      }
      id v33 = [v15 ethnicity];
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v112 = v36;
        uint64_t v113 = v35;
      }
      else
      {
        uint64_t v112 = 0;
        uint64_t v113 = 0;
      }
      id v37 = [v15 gender];
      if (v37)
      {
        unsigned int v38 = v37;
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v110 = v40;
        uint64_t v111 = v39;
      }
      else
      {
        uint64_t v110 = 0;
        uint64_t v111 = 0;
      }
      id v41 = [v15 skinTone];
      id v42 = [v15 deviceLanguage];
      if (v42)
      {
        unsigned int v43 = v42;
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v108 = v45;
        uint64_t v109 = v44;
      }
      else
      {
        uint64_t v108 = 0;
        uint64_t v109 = 0;
      }
      id v46 = [v15 issuer];
      if (v46)
      {
        uint64_t v47 = v46;
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v106 = v49;
        uint64_t v107 = v48;
      }
      else
      {
        uint64_t v106 = 0;
        uint64_t v107 = 0;
      }
      v166[0] = (uint64_t)[v15 livenessAssessment];
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v126 = v51;
      v166[0] = (uint64_t)[v15 gestureAssessment];
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v124 = v53;
      uint64_t v125 = v52;
      id v54 = [v15 axSettings];
      if (v54)
      {
        uint64_t v55 = v54;
        v166[0] = 0;
        static Array._conditionallyBridgeFromObjectiveC(_:result:)();

        uint64_t v105 = v166[0];
      }
      else
      {
        uint64_t v105 = 0;
      }
      id v56 = [v15 facVersion];
      if (v56)
      {
        uint64_t v57 = v56;
        uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v103 = v59;
        uint64_t v104 = v58;
      }
      else
      {
        uint64_t v103 = 0;
        uint64_t v104 = 0;
      }
      id v60 = [v15 facePoseVersion];
      if (v60)
      {
        uint64_t v61 = v60;
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v101 = v63;
        uint64_t v102 = v62;
      }
      else
      {
        uint64_t v101 = 0;
        uint64_t v102 = 0;
      }
      id v64 = [v15 prdVersion];
      if (v64)
      {
        uint64_t v65 = v64;
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v99 = v67;
        uint64_t v100 = v66;
      }
      else
      {
        uint64_t v99 = 0;
        uint64_t v100 = 0;
      }
      id v68 = [v15 padtoolVersion];
      if (v68)
      {
        uint64_t v69 = v68;
        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v122 = v71;
        uint64_t v123 = v70;
      }
      else
      {
        uint64_t v122 = 0;
        uint64_t v123 = 0;
      }
      unsigned int v72 = [v15 didStepUp];
      v166[0] = (uint64_t)[v15 passiveLivenessAssessment];
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v129 = v74;
      uint64_t v130 = v73;
      v166[0] = (uint64_t)[v15 passiveGestureAssessment];
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v77 = v76;
      id v78 = [v15 passiveLivenessFacVersion];
      uint64_t v128 = (uint8_t *)v75;
      if (v78)
      {
        NSString v79 = v78;
        uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v120 = v81;
        uint64_t v121 = v80;
      }
      else
      {
        uint64_t v120 = 0;
        uint64_t v121 = 0;
      }
      id v82 = [v15 passiveLivenessFacePoseVersion];
      uint64_t v127 = v77;
      if (v82)
      {
        uint64_t v83 = v82;
        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v118 = v85;
        uint64_t v119 = v84;
      }
      else
      {
        uint64_t v118 = 0;
        uint64_t v119 = 0;
      }
      uint64_t v86 = v133 + 16;
      id v87 = [v15 passiveLivenessPrdVersion];
      LODWORD(v131) = v72;
      if (v87)
      {
        uint64_t v88 = v87;
        uint64_t v89 = v50;
        id v90 = v41;
        uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v92 = v91;
      }
      else
      {
        uint64_t v89 = v50;
        id v90 = v41;
        uint64_t v133 = 0;
        uint64_t v92 = 0;
      }
      id v93 = [v15 passiveLivenessPadtoolVersion];
      if (v93)
      {
        uint64_t v94 = v93;
        uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v97 = v96;
      }
      else
      {

        uint64_t v95 = 0;
        uint64_t v97 = 0;
      }
      v134[0] = v117;
      v134[1] = v116;
      v134[2] = v115;
      v134[3] = v114;
      v134[4] = v113;
      v134[5] = v112;
      v134[6] = v111;
      v134[7] = v110;
      char v167 = 0;
      v134[8] = v90;
      char v135 = 0;
      uint64_t v136 = v109;
      uint64_t v137 = v108;
      uint64_t v138 = v107;
      uint64_t v139 = v106;
      uint64_t v140 = v89;
      uint64_t v141 = v126;
      uint64_t v142 = v125;
      uint64_t v143 = v124;
      uint64_t v144 = v105;
      uint64_t v145 = v104;
      uint64_t v146 = v103;
      uint64_t v147 = v102;
      uint64_t v148 = v101;
      uint64_t v149 = v100;
      uint64_t v150 = v99;
      uint64_t v151 = v123;
      uint64_t v152 = v122;
      char v153 = v131;
      uint64_t v154 = v130;
      uint64_t v155 = v129;
      uint64_t v156 = v128;
      uint64_t v157 = v127;
      uint64_t v158 = v121;
      uint64_t v159 = v120;
      uint64_t v160 = v119;
      uint64_t v161 = v118;
      uint64_t v162 = v133;
      uint64_t v163 = v92;
      uint64_t v164 = v95;
      uint64_t v165 = v97;
      nullsub_7(v134);
      swift_beginAccess();
      sub_1000FE9D8(v86, (uint64_t)v166);
      sub_1000FE9D8((uint64_t)v134, v86);
      return sub_1000FEDF4((uint64_t)v166, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000FEA64);
    }
    else
    {
      uint64_t v19 = v13;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      uint64_t v23 = v130;
      if (v22)
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        v166[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136315138;
        uint64_t v133 = (uint64_t)(v24 + 4);
        swift_bridgeObjectRetain();
        v134[0] = sub_100110D58(v129, (unint64_t)a3, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Stored biome metadata doesnt exist for proofingSessionID: %s", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v131 + 8))(v19, v23);
    }
  }
  return result;
}

void sub_1000F49C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000E4834(a2, a3);
  if (!v3)
  {
    uint64_t v12 = (void *)v11;
    if (v11)
    {
      [*(id *)(a1 + 16) deleteObject:v11];
      sub_1000E4160();
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      int v15 = v14;
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v16 = swift_slowAlloc();
        int v21 = v15;
        os_log_type_t v17 = (uint8_t *)v16;
        uint64_t v22 = swift_slowAlloc();
        uint64_t v24 = v22;
        os_log_t v20 = v13;
        *(_DWORD *)os_log_type_t v17 = 136315138;
        v19[1] = v17 + 4;
        swift_bridgeObjectRetain();
        uint64_t v23 = sub_100110D58(a2, (unint64_t)a3, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v18 = v20;
        _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v21, "Successfully deleted biome metadata for proofingSessionID: %s", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
}

void sub_1000F4C44(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int v15 = (char *)&v61 - v14;
  uint64_t v16 = sub_1000E4834(a2, a3);
  if (!v4)
  {
    uint64_t v17 = v16;
    id v78 = v13;
    uint64_t v79 = v10;
    if (v16)
    {
      uint64_t v76 = 0;
      uint64_t v64 = a2;
      os_log_t v18 = (int *)type metadata accessor for PendingActionContext(0);
      uint64_t v19 = v18;
      uint64_t v20 = v18[20];
      uint64_t v21 = a4 + v18[21];
      uint64_t v22 = *(void *)v21;
      if (*(unsigned char *)(v21 + 8)) {
        uint64_t v22 = 0;
      }
      uint64_t v23 = a4 + v20;
      uint64_t v24 = *(void *)(a4 + v20);
      if (*(unsigned char *)(v23 + 8)) {
        uint64_t v24 = 0;
      }
      id v25 = (void *)(a4 + v18[26]);
      uint64_t v26 = v25[1];
      uint64_t v71 = v24;
      uint64_t v72 = v22;
      uint64_t v75 = a1;
      if (v26)
      {
        uint64_t v27 = v25[7];
        uint64_t v28 = v25[4];
        uint64_t v29 = v25[5];
        uint64_t v68 = v25[6];
        uint64_t v69 = v28;
        uint64_t v30 = v25[3];
        uint64_t v67 = v25[2];
        uint64_t v73 = v26;
        swift_bridgeObjectRetain();
        uint64_t v74 = v30;
        swift_bridgeObjectRetain();
        uint64_t v70 = v27;
        swift_bridgeObjectRetain();
        uint64_t v66 = v29;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        uint64_t v70 = 0;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
      }
      uint64_t v35 = v19[23];
      char v36 = *(unsigned char *)(a4 + v19[22]);
      uint64_t v37 = v19[25];
      uint64_t v38 = a4 + v19[24];
      if (*(unsigned char *)(v38 + 8)) {
        uint64_t v39 = 0;
      }
      else {
        uint64_t v39 = *(void *)v38;
      }
      uint64_t v40 = a4 + v35;
      uint64_t v41 = *(void *)(a4 + v35);
      if (*(unsigned char *)(v40 + 8)) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v41;
      }
      unsigned int v43 = (uint64_t *)(a4 + v37);
      uint64_t v44 = *(void *)(a4 + v37 + 8);
      uint64_t v65 = v9;
      unint64_t v63 = (unint64_t)a3;
      uint64_t v77 = (void *)v17;
      if (v44)
      {
        uint64_t v45 = v43[7];
        uint64_t v62 = v43[6];
        uint64_t v47 = v43[4];
        uint64_t v46 = v43[5];
        uint64_t v48 = v43[2];
        uint64_t v49 = v43[3];
        uint64_t v50 = *v43;
        char v51 = v36;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v52 = v47;
        uint64_t v53 = v62;
        char v36 = v51;
      }
      else
      {
        uint64_t v52 = 0;
        uint64_t v46 = 0;
        uint64_t v53 = 0;
        uint64_t v45 = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        uint64_t v50 = 0;
      }
      uint64_t v60 = v48;
      id v54 = v77;
      sub_1002A9CA4(v72, v71, v67, v74, v68, v70, v69, v66, v36 & 1, v39, v42, v50, v44, v60, v49, v53, v45, v52, v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v55 = v76;
      sub_1000E4160();
      if (v55)
      {

        return;
      }
      int v15 = v78;
      defaultLogger()();
      unint64_t v56 = v63;
      swift_bridgeObjectRetain_n();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v80 = sub_100110D58(v64, v56, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Successfully updated liveness data for proofingSessionID: %s", v59, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v65);
        return;
      }

      swift_bridgeObjectRelease_n();
    }
    else
    {
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v31, v32))
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v79 + 8))(v15, v9);
        return;
      }
      uint64_t v65 = v9;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v64 = a2;
      uint64_t v34 = (uint8_t *)v33;
      uint64_t v81 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v80 = sub_100110D58(v64, (unint64_t)a3, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Stored biome metadata doesnt exist for proofingSessionID: %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    (*(void (**)(char *, uint64_t))(v79 + 8))(v15, v65);
  }
}

uint64_t sub_1000F5200(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v30[6] = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DIPError();
  __chkstk_darwin(v31);
  v30[5] = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v32 - 8);
  uint64_t v13 = __chkstk_darwin(v32);
  v30[4] = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v30 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v30 - v18;
  if (a4)
  {
    defaultLogger()();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "SEND_TO_BIOME doesn't exist, will not donate to biome.", v22, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, v32);
  }
  else
  {
    v30[1] = v9;
    v30[2] = v8;
    defaultLogger()();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      v30[0] = v12;
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Checking if biome data needs to be donated.", v26, 2u);
      uint64_t v12 = v30[0];
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v32);
    type metadata accessor for IdentityProofingDataContext();
    swift_allocObject();
    sub_1000FF820();
    uint64_t v28 = v27;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v28;
    *(void *)(v29 + 24) = a1;
    *(void *)(v29 + 32) = a2;
    *(unsigned char *)(v29 + 40) = a3;
    *(void *)(v29 + 48) = v30[3];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_1000FF050, v29);
    swift_release();
    return swift_release();
  }
}

void sub_1000F57B4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = a5;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = (void *)sub_10010180C(a2, a3);
  if (!v5)
  {
    uint64_t v37 = v13;
    uint64_t v38 = a3;
    uint64_t v39 = v10;
    if (v16)
    {
      id v36 = v16;
      id v17 = [v16 proofingDecision];
      if (v17)
      {

        uint64_t v18 = v37;
        defaultLogger()();
        uint64_t v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v19, v20))
        {
          os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v21 = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Proofing decision already exists in biome metadata, will not attempt to update it. Will attempt to donate data to biome.", v21, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v9);
        uint64_t v22 = a4;
        unint64_t v23 = (unint64_t)v38;
        uint64_t v24 = a2;
      }
      else
      {
        v28._countAndFlagsBits = 0xD000000000000062;
        v28._object = (void *)0x8000000100636590;
        v29._countAndFlagsBits = 0x3262326262663363;
        v29._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v29, v28);
        unint64_t v30 = 0xE700000000000000;
        unint64_t v31 = 0x44455249505845;
        uint64_t v32 = a4;
        uint64_t v22 = a4;
        uint64_t v24 = a2;
        switch(v32)
        {
          case 1:
            unint64_t v30 = 0xEB00000000594441;
            unint64_t v31 = 0x45525F4D49414C43;
            break;
          case 2:
            unint64_t v31 = 0x474E49444E4550;
            break;
          case 3:
            unint64_t v31 = 0xD000000000000018;
            unint64_t v30 = 0x8000000100628FD0;
            break;
          case 4:
            uint64_t v33 = "PENDING_WORKFLOW";
            goto LABEL_17;
          case 5:
            uint64_t v33 = "LIVENESS_STEP_UP";
LABEL_17:
            unint64_t v30 = (unint64_t)(v33 - 32) | 0x8000000000000000;
            unint64_t v31 = 0xD000000000000010;
            break;
          default:
            break;
        }
        v34.value._countAndFlagsBits = a2;
        unint64_t v23 = (unint64_t)v38;
        v34.value._object = v38;
        unint64_t v35 = v30;
        StoredProofingBiomeData.update(proofingSessionID:proofingDecision:isDonated:)(v34, *(Swift::String_optional *)&v31, 0);
        swift_bridgeObjectRelease();
        sub_1000FFAB4();
      }
      sub_1000F5BA4(v24, v23, v22);
    }
    else
    {
      defaultLogger()();
      os_log_type_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Biome Proofing meta data doesn't exist. Will not donate data to Biome.", v27, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v9);
    }
  }
}

uint64_t sub_1000F5BA4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v165 = (uint8_t *)a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v157 = v5;
  uint64_t v158 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v159 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v156 = (uint64_t)&v107 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  char v153 = (char *)&v107 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v154 = (char *)&v107 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  os_log_type_t v21 = (char *)&v107 - v20;
  __chkstk_darwin(v19);
  unint64_t v23 = (char *)&v107 - v22;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v166 = a1;
  if (v26)
  {
    uint64_t v163 = v10;
    uint64_t v164 = v9;
    uint64_t v160 = v8;
    uint64_t v161 = v21;
    uint64_t v27 = swift_slowAlloc();
    v174[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    swift_bridgeObjectRetain();
    v173[0] = sub_100110D58(a1, a2, v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v162 = a2;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2080;
    unint64_t v28 = 0xE700000000000000;
    uint64_t v29 = 0x44455249505845;
    uint64_t v9 = v164;
    switch((char)v165)
    {
      case 1:
        unint64_t v28 = 0xEB00000000594441;
        uint64_t v29 = 0x45525F4D49414C43;
        break;
      case 2:
        uint64_t v29 = 0x474E49444E4550;
        break;
      case 3:
        uint64_t v29 = 0xD000000000000018;
        unint64_t v28 = 0x8000000100628FD0;
        break;
      case 4:
        unint64_t v31 = "PENDING_WORKFLOW";
        goto LABEL_9;
      case 5:
        unint64_t v31 = "LIVENESS_STEP_UP";
LABEL_9:
        unint64_t v28 = (unint64_t)(v31 - 32) | 0x8000000000000000;
        uint64_t v29 = 0xD000000000000010;
        break;
      default:
        break;
    }
    v173[0] = sub_100110D58(v29, v28, v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "donateBiomeEvent called with proofingSessionID: %s and proofingDecision: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v10 = v163;
    unint64_t v30 = *(void (**)(char *, uint64_t))(v163 + 8);
    v30(v23, v9);
    uint64_t v8 = v160;
    os_log_type_t v21 = v161;
    a2 = v162;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    unint64_t v30 = *(void (**)(char *, uint64_t))(v10 + 8);
    v30(v23, v9);
  }
  sub_1000F8AA4(v166, a2, (uint64_t)v173);
  sub_1000FE9D8((uint64_t)v173, (uint64_t)v174);
  if (sub_1000FEA40((uint64_t)v174) == 1)
  {
    uint64_t v32 = v159;
    defaultLogger()();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Biome Meta data doesn't exist. Cannot donate data to biome.", v35, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(char *, uint64_t))v30)(v32, v9);
  }
  else
  {
    uint64_t v159 = (char *)v30;
    uint64_t v161 = v21;
    unint64_t v162 = a2;
    uint64_t v163 = v10;
    uint64_t v164 = v9;
    uint64_t v37 = v174[2];
    uint64_t v38 = v174[3];
    uint64_t v142 = v174[4];
    uint64_t v39 = v174[5];
    uint64_t v148 = v174[7];
    uint64_t v149 = v174[6];
    LODWORD(v150) = v175;
    uint64_t v151 = v174[8];
    uint64_t v152 = v176;
    unint64_t v40 = v177;
    uint64_t v41 = v178;
    uint64_t v42 = v179;
    unint64_t v129 = v181;
    unint64_t v130 = v183;
    uint64_t v122 = v180;
    uint64_t v123 = v185;
    uint64_t v124 = v182;
    uint64_t v125 = v187;
    unint64_t v131 = v186;
    unint64_t v132 = v188;
    unint64_t v133 = v190;
    uint64_t v126 = v189;
    uint64_t v127 = v191;
    unint64_t v134 = v192;
    id v135 = v184;
    unsigned int v128 = v193;
    uint64_t v139 = v196;
    uint64_t v140 = v194;
    uint64_t v143 = v197;
    uint64_t v144 = v199;
    uint64_t v145 = v195;
    uint64_t v137 = v200;
    uint64_t v138 = v198;
    uint64_t v141 = v202;
    uint64_t v43 = v203;
    uint64_t v136 = v204;
    uint64_t v146 = v205;
    uint64_t v147 = v201;
    Date.init()();
    if (v42)
    {
      uint64_t v121 = v43;
      uint64_t v160 = v8;
      type metadata accessor for IdentityBiomeHelper();
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = v41;
      *(void *)(v44 + 24) = v42;
      swift_bridgeObjectRetain_n();
      uint64_t v45 = v37;
      uint64_t v46 = v44;
      unint64_t v120 = sub_10016E458(v45, v38);
      uint64_t v156 = v47;
      uint64_t v148 = sub_10016E1D4(v149, v148);
      uint64_t v149 = v48;
      if (v150) {
        uint64_t v49 = 0;
      }
      else {
        uint64_t v49 = v151;
      }
      uint64_t v50 = sub_10016F248(v49, 0);
      uint64_t v151 = v51;
      if (v40) {
        uint64_t v52 = v152;
      }
      else {
        uint64_t v52 = 0;
      }
      if (v40) {
        unint64_t v53 = v40;
      }
      else {
        unint64_t v53 = 0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v54 = sub_1000F90A0(v166, v162);
      uint64_t v117 = v52;
      uint64_t v118 = v50;
      unint64_t v150 = v53;
      uint64_t v119 = v41;
      uint64_t v116 = v42;
      uint64_t v152 = v39;
      uint64_t v107 = v46;
      uint64_t v59 = v164;
      if (v54)
      {
        uint64_t v60 = v161;
        uint64_t v61 = defaultLogger()();
        __chkstk_darwin(v61);
        char v62 = (char)v165;
        Logger.sensitive(_:)();
        ((void (*)(char *, uint64_t))v159)(v60, v59);
        unint64_t v63 = 0xE800000000000000;
        unint64_t v64 = 0x44455443454A4552;
        switch(v62)
        {
          case 1:
            unint64_t v63 = 0xEA00000000004C55;
            unint64_t v64 = 0x4653534543435553;
            break;
          case 2:
          case 4:
            unint64_t v64 = 0x4445444E45545845;
            unint64_t v63 = 0xEF5745495645525FLL;
            break;
          case 5:
            unint64_t v63 = 0x8000000100629010;
            unint64_t v64 = 0xD000000000000010;
            break;
          default:
            break;
        }
      }
      else
      {
        unint64_t v64 = 0;
        unint64_t v63 = 0xE000000000000000;
      }
      unint64_t v112 = v64;
      uint64_t v165 = (uint8_t *)v63;
      if (v129) {
        uint64_t v65 = v122;
      }
      else {
        uint64_t v65 = 0;
      }
      if (v129) {
        unint64_t v66 = v129;
      }
      else {
        unint64_t v66 = 0xE000000000000000;
      }
      uint64_t v67 = v124;
      if (!v130) {
        uint64_t v67 = 0;
      }
      uint64_t v114 = v67;
      uint64_t v115 = v65;
      if (v130) {
        unint64_t v68 = v130;
      }
      else {
        unint64_t v68 = 0xE000000000000000;
      }
      uint64_t v69 = v123;
      if (!v131) {
        uint64_t v69 = 0;
      }
      uint64_t v122 = v66;
      uint64_t v123 = v69;
      if (v131) {
        unint64_t v70 = v131;
      }
      else {
        unint64_t v70 = 0xE000000000000000;
      }
      unint64_t v113 = v70;
      uint64_t v71 = v125;
      if (!v132) {
        uint64_t v71 = 0;
      }
      uint64_t v111 = v71;
      if (v132) {
        unint64_t v72 = v132;
      }
      else {
        unint64_t v72 = 0xE000000000000000;
      }
      uint64_t v124 = v68;
      uint64_t v125 = v72;
      if (v133) {
        uint64_t v73 = v126;
      }
      else {
        uint64_t v73 = 0;
      }
      if (v133) {
        unint64_t v74 = v133;
      }
      else {
        unint64_t v74 = 0xE000000000000000;
      }
      uint64_t v75 = v127;
      if (!v134) {
        uint64_t v75 = 0;
      }
      uint64_t v108 = v75;
      uint64_t v109 = v73;
      if (v134) {
        unint64_t v76 = v134;
      }
      else {
        unint64_t v76 = 0xE000000000000000;
      }
      uint64_t v126 = v74;
      uint64_t v127 = v76;
      uint64_t v77 = &_swiftEmptyArrayStorage;
      if (v135) {
        uint64_t v77 = v135;
      }
      uint64_t v110 = v77;
      v128 &= 1u;
      uint64_t v78 = v121;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v79 = v143;
      swift_bridgeObjectRetain();
      uint64_t v80 = v145;
      swift_bridgeObjectRetain();
      uint64_t v81 = v144;
      swift_bridgeObjectRetain();
      uint64_t v82 = v147;
      swift_bridgeObjectRetain();
      uint64_t v83 = v146;
      swift_bridgeObjectRetain();
      sub_1000FEDF4((uint64_t)v173, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000FEA64);
      id v84 = objc_allocWithZone((Class)NSNumber);
      swift_retain();
      id v135 = [v84 initWithBool:v128, v107];
      sub_1000F0E14((uint64_t)v160, v120, v156, v148, v149, v118, v151, v142, v172, v152, v117, v150, v112, (uint64_t)v165, v119, v116, v115, v122, v114,
        v124,
        v110,
        v123,
        v113,
        v111,
        v125,
        v108,
        v127,
        v109,
        v126,
        v135,
        v139,
        v79,
        v140,
        v80,
        v138,
        v81,
        v137,
        v82,
        v136,
        v83,
        v141,
        v78);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v85 = v154;
      defaultLogger()();
      sub_100030A10((uint64_t)v172, (uint64_t)v169);
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v88 = (uint8_t *)swift_slowAlloc();
        uint64_t v168 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v88 = 136315138;
        uint64_t v165 = v88 + 4;
        uint64_t v89 = v170;
        uint64_t v90 = v171;
        sub_10000C728(v169, v170);
        uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 16))(v89, v90);
        uint64_t v167 = sub_100110D58(v91, v92, (uint64_t *)&v168);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v169);
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Invoking Biome's sendEvent with the event -> %s", v88, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v93 = v154;
      }
      else
      {
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v169);

        id v93 = v85;
      }
      uint64_t v94 = v164;
      uint64_t v95 = (void (*)(char *, uint64_t))v159;
      ((void (*)(char *))v159)(v93);
      uint64_t v96 = v153;
      sub_100030A10((uint64_t)v172, (uint64_t)v169);
      sub_100007764((uint64_t *)&unk_1007239D0);
      sub_1000F1848();
      char v97 = swift_dynamicCast();
      uint64_t v98 = (uint64_t)v160;
      unint64_t v99 = v162;
      if (v97)
      {
        uint64_t v100 = v168;
        uint64_t v101 = *sub_10000C728((void *)(v155 + 16), *(void *)(v155 + 40));
        id v102 = v100;
        sub_1000F89DC(v102, v101);
      }
      defaultLogger()();
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v105 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v105 = 0;
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "Successfully donated user proofing event to Biome.", v105, 2u);
        uint64_t v98 = (uint64_t)v160;
        swift_slowDealloc();
      }

      v95(v96, v94);
      uint64_t v106 = v166;
      sub_1000F9640(v166, v99);
      sub_1000F9B7C(v106, v99);
      swift_release();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v172);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v158 + 8))(v98, v157);
    }
    else
    {
      sub_1000FEDF4((uint64_t)v173, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000FEA64);
      uint64_t v55 = v156;
      defaultLogger()();
      unint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v56, v57))
      {
        os_log_type_t v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unable to donate biome data as the issuer doesn't exist", v58, 2u);
        swift_slowDealloc();
      }

      ((void (*)(uint64_t, uint64_t))v159)(v55, v164);
      return (*(uint64_t (**)(char *, uint64_t))(v158 + 8))(v8, v157);
    }
  }
}

uint64_t sub_1000F6BFC()
{
  uint64_t v17 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPError();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  if (v1)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v12._countAndFlagsBits = 0xD00000000000003BLL;
    v12._object = (void *)0x80000001006362F0;
    String.append(_:)(v12);
    swift_getErrorValue();
    v13._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.failedToDeleteProofingBiomeData(_:), v17);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C588();
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v14, v8, v5);
    swift_willThrow();
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    uint64_t v10 = v9;
    v16[1] = v4;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v10;
    *(void *)(v11 + 24) = v0;
    swift_retain();
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_1000FE9BC, v11);
    swift_release();
    return swift_release();
  }
}

void sub_1000F6F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v64 = type metadata accessor for Logger();
  unint64_t v67 = *(void *)(v64 - 8);
  uint64_t v4 = __chkstk_darwin(v64);
  uint64_t v6 = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v55 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  Swift::String v12 = (char *)v55 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v55 - v13;
  id v15 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 initWithEntityName:v16];

  uint64_t v18 = *(void **)(a1 + 16);
  sub_100007764(&qword_1007232F0);
  unint64_t v19 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    return;
  }
  char v62 = v9;
  unint64_t v63 = v14;
  os_log_type_t v57 = v12;
  unint64_t v20 = (unint64_t)sub_10052EF38(v19);

  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  uint64_t v23 = v64;
  if (v20)
  {
    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v24 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    os_log_type_t v25 = v63;
    unint64_t v26 = v67;
    if (v24)
    {
      id v68 = v18;
      v55[1] = a1;
      if (v24 < 1)
      {
        __break(1u);
      }
      else
      {
        uint64_t v56 = 0;
        uint64_t v27 = 0;
        unint64_t v65 = v21 & 0xC000000000000001;
        unint64_t v28 = (void (**)(char *, uint64_t))(v67 + 8);
        *(void *)&long long v22 = 136315138;
        long long v60 = v22;
        uint64_t v59 = (char *)&type metadata for Any + 8;
        uint64_t v29 = v62;
        uint64_t v66 = v24;
        unint64_t v67 = v21;
        uint64_t v61 = (void (**)(char *, uint64_t))(v26 + 8);
        do
        {
          if (v65) {
            id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v31 = *(id *)(v21 + 8 * v27 + 32);
          }
          uint64_t v32 = v31;
          [v68 deleteObject:v31];
          defaultLogger()();
          id v33 = v32;
          os_log_type_t v34 = Logger.logObject.getter();
          os_log_type_t v35 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v34, v35))
          {
            uint64_t v36 = swift_slowAlloc();
            uint64_t v69 = swift_slowAlloc();
            *(_DWORD *)uint64_t v36 = v60;
            id v37 = [v33 proofingSessionID];
            if (v37)
            {
              uint64_t v38 = v37;
              uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v41 = v40;
            }
            else
            {
              uint64_t v39 = 0;
              unint64_t v41 = 0xE000000000000000;
            }
            *(void *)(v36 + 4) = sub_100110D58(v39, v41, &v69);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v34, v35, "Successfully deleted proofing biome data for proofingSessionID: %s", (uint8_t *)v36, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            unint64_t v28 = v61;
            unint64_t v30 = *v61;
            os_log_type_t v25 = v63;
            uint64_t v23 = v64;
            (*v61)(v63, v64);
            uint64_t v29 = v62;
          }
          else
          {

            unint64_t v30 = *v28;
            (*v28)(v25, v23);
          }
          ++v27;
          unint64_t v21 = v67;
        }
        while (v66 != v27);
        swift_bridgeObjectRelease();
        uint64_t v42 = v56;
        sub_1000FFAB4();
        if (!v42)
        {
          uint64_t v56 = 0;
          uint64_t v43 = v57;
          defaultLogger()();
          uint64_t v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v44, v45))
          {
            uint64_t v46 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v46 = 0;
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "Successfully deleted proofing biome data", v46, 2u);
            swift_slowDealloc();
          }

          v30(v43, v23);
          defaultLogger()();
          uint64_t v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.info.getter();
          BOOL v49 = os_log_type_enabled(v47, v48);
          uint64_t v50 = v58;
          if (v49)
          {
            uint64_t v51 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v51 = 0;
            _os_log_impl((void *)&_mh_execute_header, v47, v48, "Invoking Biome's pruning API to delete biome data", v51, 2u);
            swift_slowDealloc();
          }

          v30(v29, v23);
          [*(id *)(v50 + 64) pruneUserProofingStream];
        }
      }
      return;
    }
    swift_bridgeObjectRelease();
  }
  defaultLogger()();
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v52, v53))
  {
    char v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "No proofing biome data exists in the database", v54, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v67 + 8))(v6, v23);
}

void sub_1000F756C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10010180C(a2, a3);
  if (!v3)
  {
    uint64_t v11 = (void *)v10;
    if (v10)
    {
      StoredProofingBiomeData.update(isDonated:)(1);
      sub_1000FFAB4();
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      Swift::String v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      int v14 = v13;
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v15 = swift_slowAlloc();
        int v20 = v14;
        NSString v16 = (uint8_t *)v15;
        uint64_t v21 = swift_slowAlloc();
        uint64_t v23 = v21;
        os_log_t v19 = v12;
        *(_DWORD *)NSString v16 = 136315138;
        v18[1] = v16 + 4;
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_100110D58(a2, (unint64_t)a3, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v17 = v19;
        _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v20, "Successfully updated proofing biome data called for proofingSessionID: %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
}

void *sub_1000F77E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)sub_1000E4834(a2, a3);
  if (!v4)
  {
    os_log_type_t v13 = result;
    if (result)
    {
      unsigned __int8 v14 = [result shouldDonateProofingDecision];

      uint64_t result = (void *)swift_beginAccess();
      *(unsigned char *)(a4 + 16) = v14;
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.failedToFetchBiomeMetadata(_:), v8);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (void *)swift_willThrow();
    }
  }
  return result;
}

void sub_1000F79EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, Swift::Int64 a8, char a9, Swift::String_optional a10, Swift::String_optional a11, uint64_t a12, uint64_t a13)
{
  uint64_t v53 = a2;
  v49.value._object = a7;
  Swift::Int64 v50 = a8;
  v48.value._object = a5;
  v49.value._countAndFlagsBits = a6;
  v48.value._countAndFlagsBits = a4;
  uint64_t v55 = a3;
  BOOL v47 = a9 & 1;
  uint64_t v42 = type metadata accessor for Logger();
  uint64_t v41 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v15 = (char *)&axSettings - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  NSString v16 = self;
  NSString v17 = String._bridgeToObjectiveC()();
  uint64_t v51 = a1;
  id v18 = [v16 insertNewObjectForEntityForName:v17 inManagedObjectContext:*(void *)(a1 + 16)];

  type metadata accessor for StoredBiomeMetadata();
  id v54 = v18;
  uint64_t v46 = swift_dynamicCastClassUnconditional();
  id v19 = [self _deviceLanguage];
  unint64_t v40 = v15;
  if (v19)
  {
    int v20 = v19;
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v22 = 0;
  }
  Swift::String_optional v43 = a11;
  Swift::String_optional ethnicity = a10;
  if (*(void *)(a12 + 16)
    && (Hasher.init(_seed:)(),
        String.hash(into:)(),
        Swift::Int v23 = Hasher._finalize()(),
        uint64_t v24 = -1 << *(unsigned char *)(a12 + 32),
        unint64_t v25 = v23 & ~v24,
        ((*(void *)(a12 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) != 0))
  {
    *((void *)&axSettings + 1) = "tate";
    uint64_t v26 = ~v24;
    uint64_t v39 = "proofingDecision";
    while (2)
    {
      switch(*(unsigned char *)(*(void *)(a12 + 48) + v25))
      {
        case 5:
          swift_bridgeObjectRelease();
          char v27 = 1;
          break;
        default:
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0)
          {
            unint64_t v25 = (v25 + 1) & v26;
            if ((*(void *)(a12 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25)) {
              continue;
            }
          }
          break;
      }
      break;
    }
  }
  else
  {
    char v27 = 0;
  }
  *(void *)&long long axSettings = a13;
  Swift::Bool shouldDonateProofingDecision = v27 & 1;
  deviceLanguage.value._object = v22;
  deviceLanguage.value._countAndFlagsBits = v45;
  uint64_t v28 = v53;
  v29._countAndFlagsBits = v53;
  unint64_t v30 = (unint64_t)v55;
  v29._object = v55;
  v57.value = v50;
  v57.is_nil = v47;
  StoredBiomeMetadata.update(proofingSessionID:dob:gender:skinTone:ethnicity:deviceLanguage:issuer:shouldDonateProofingDecision:axSettings:)(v29, v48, v49, v57, ethnicity, deviceLanguage, v43, shouldDonateProofingDecision, (Swift::OpaquePointer_optional)axSettings);
  swift_bridgeObjectRelease();
  uint64_t v31 = v52;
  sub_1000E4160();
  if (v31)
  {
  }
  else
  {
    uint64_t v32 = v40;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v35 = 136315138;
      swift_bridgeObjectRetain();
      v56[11] = sub_100110D58(v28, v30, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Successfully persisted biome metadata for proofingSessionID: %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v42);
  }
}

void sub_1000F7FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::String v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v13 = self;
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 insertNewObjectForEntityForName:v14 inManagedObjectContext:*(void *)(a1 + 16)];

  type metadata accessor for StoredProofingBiomeData();
  swift_dynamicCastClassUnconditional();
  Date.init()();
  StoredProofingBiomeData.update(proofingSessionID:credentialIdentifier:optInDate:optInStatus:)(a2, a3, a4, v17, (uint64_t)v12, 1);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_1000FFAB4();
}

uint64_t sub_1000F816C(uint64_t a1)
{
  uint64_t v59 = a1;
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v5 - 8);
  uint64_t v58 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  Swift::String_optional v49 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  Swift::Int64 v50 = (char *)&v48 - v8;
  uint64_t v9 = type metadata accessor for Calendar();
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DateComponents();
  uint64_t v53 = *(void *)(v12 - 8);
  uint64_t v54 = v12;
  __chkstk_darwin(v12);
  uint64_t v52 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v51 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v48 - v21;
  sub_100048D6C(v59, (uint64_t)v16, &qword_1007239B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_10000C6CC((uint64_t)v16, &qword_1007239B0);
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.biomeDataSharingUserConsentDateDoesntExist(_:), v1);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    Swift::Int v23 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    Swift::String_optional v48 = v22;
    v23(v22, v16, v17);
    static Calendar.current.getter();
    sub_100007764((uint64_t *)&unk_1007239B8);
    uint64_t v24 = type metadata accessor for Calendar.Component();
    uint64_t v25 = *(void *)(v24 - 8);
    unint64_t v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_100610730;
    (*(void (**)(unint64_t, void, uint64_t))(v25 + 104))(v27 + v26, enum case for Calendar.Component.day(_:), v24);
    sub_1004C5810(v27);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v28 = v51;
    Date.init()();
    Swift::String v29 = v52;
    unint64_t v30 = v48;
    Calendar.dateComponents(_:from:to:)();
    swift_bridgeObjectRelease();
    id v33 = *(void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v31 = v18 + 8;
    uint64_t v32 = v33;
    v33(v28, v17);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v56);
    uint64_t v34 = DateComponents.day.getter();
    char v36 = v35;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v29, v54);
    if (v36) {
      uint64_t v37 = 90;
    }
    else {
      uint64_t v37 = v34;
    }
    LOBYTE(v22) = v37 > 89;
    uint64_t v59 = v17;
    uint64_t v38 = v31;
    if (v37 < 90)
    {
      uint64_t v56 = v31;
      uint64_t v44 = v49;
      defaultLogger()();
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 134217984;
        uint64_t v60 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v40, v45, "Retention period has not elapsed...The gap between dates is %ld", v46, 0xCu);
        swift_slowDealloc();
      }
      uint64_t v39 = v44;
    }
    else
    {
      uint64_t v39 = v50;
      defaultLogger()();
      swift_retain();
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (_DWORD *)swift_slowAlloc();
        uint64_t v56 = v38;
        Swift::String_optional v43 = v42;
        *uint64_t v42 = 134218240;
        uint64_t v60 = 90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *((_WORD *)v43 + 6) = 2048;
        uint64_t v60 = v37;
        uint64_t v39 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "The %ld day retention period has elapsed. The gap between dates is -> %ld", (uint8_t *)v43, 0x16u);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v39, v58);
    v32(v30, v59);
  }
  return v22 & 1;
}

uint64_t sub_1000F8970()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingBiomeManager()
{
  return self;
}

uint64_t sub_1000F89DC(void *a1, uint64_t a2)
{
  v9[3] = sub_1000F1848();
  v9[4] = &off_1006F83E8;
  v9[0] = a1;
  sub_100030A10((uint64_t)v9, (uint64_t)v8);
  id v4 = a1;
  sub_100007764((uint64_t *)&unk_1007239D0);
  if (swift_dynamicCast())
  {
    id v5 = [*(id *)(a2 + 16) source];
    [v5 sendEvent:v7];
  }
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v9);
}

uint64_t sub_1000F8AA4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  __chkstk_darwin(v6);
  unint64_t v40 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError();
  uint64_t v42 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v41 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v36 = a1;
  unint64_t v37 = a2;
  if (v15)
  {
    uint64_t v35 = v8;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v34 = a3;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v33 = v10;
    *(void *)&v46[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    v45[0] = sub_100110D58(a1, a2, (uint64_t *)v46);
    uint64_t v8 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "fetchBiomeMetadata called for proofingSessionID: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v34;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v33);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v10);
  }
  uint64_t v19 = swift_allocObject();
  sub_1000FED50(v46);
  sub_1000FE9D8((uint64_t)v46, v19 + 16);
  type metadata accessor for IdentityBiomeDataContext();
  swift_allocObject();
  uint64_t v20 = v44;
  sub_1000E3ECC();
  if (v20)
  {
    v45[0] = 0;
    v45[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(154);
    v25._countAndFlagsBits = 0xD000000000000035;
    v25._object = (void *)0x8000000100636050;
    String.append(_:)(v25);
    swift_getErrorValue();
    v26._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000063;
    v27._object = (void *)0x8000000100636090;
    String.append(_:)(v27);
    (*(void (**)(char *, void, uint64_t))(v38 + 104))(v40, enum case for DIPError.Code.failedToFetchBiomeMetadata(_:), v39);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v28 = v41;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C588();
    swift_allocError();
    uint64_t v29 = v42;
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v30, v28, v8);
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v8);
    return swift_release();
  }
  else
  {
    uint64_t v22 = v21;
    Swift::Int v23 = (void *)swift_allocObject();
    uint64_t v24 = v36;
    v23[2] = v22;
    v23[3] = v24;
    v23[4] = v37;
    v23[5] = v19;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1000E44E8((uint64_t)sub_1000FEDD4, (uint64_t)v23);
    swift_release();
    swift_release();
    swift_beginAccess();
    sub_1000FE9D8(v19 + 16, (uint64_t)v45);
    sub_1000FEDF4((uint64_t)v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000FEE88);
    swift_release();
    return sub_1000FE9D8((uint64_t)v45, a3);
  }
}

uint64_t sub_1000F90A0(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPError();
  uint64_t v36 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v40 - 8);
  uint64_t v11 = __chkstk_darwin(v40);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v39 = (char *)&v32 - v14;
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = 0;
  uint64_t v38 = v15 + 16;
  type metadata accessor for IdentityBiomeDataContext();
  swift_allocObject();
  sub_1000E3ECC();
  if (v2)
  {
    uint64_t v33 = v10;
    uint64_t v37 = 0;
    unint64_t v41 = 0;
    unint64_t v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    unint64_t v41 = 0xD000000000000028;
    unint64_t v42 = 0x8000000100636430;
    swift_getErrorValue();
    v21._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v34 + 104))(v6, enum case for DIPError.Code.failedToPersistBiomeMetadata(_:), v35);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C588();
    swift_allocError();
    uint64_t v22 = v36;
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v23, v9, v7);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    uint64_t v10 = v33;
    uint64_t v24 = v13;
    uint64_t v25 = v40;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v40);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
    swift_errorRelease();
  }
  else
  {
    uint64_t v17 = v16;
    uint64_t v18 = a2;
    uint64_t v19 = (void *)swift_allocObject();
    uint64_t v20 = v37;
    void v19[2] = v17;
    v19[3] = v20;
    v19[4] = v18;
    v19[5] = v15;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000E44E8((uint64_t)sub_1000FEC60, (uint64_t)v19);
    uint64_t v37 = 0;
    swift_release();
    swift_release();
    uint64_t v25 = v40;
  }
  Swift::String v26 = v39;
  defaultLogger()();
  swift_retain();
  Swift::String v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 67109120;
    swift_beginAccess();
    LODWORD(v41) = *(unsigned __int8 *)(v15 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "shouldDonateProofingDecision -> %{BOOL}d", v29, 8u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v26, v25);
  swift_beginAccess();
  uint64_t v30 = *(unsigned __int8 *)(v15 + 16);
  swift_release();
  return v30;
}

uint64_t sub_1000F9640(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError();
  uint64_t v39 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v34 = a1;
  if (v16)
  {
    uint64_t v31 = v10;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v32 = v2;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v33 = v8;
    v41[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_100110D58(a1, a2, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "updateProofingBiomeData called for proofingSessionID: %s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v8 = v33;
    swift_slowDealloc();
    uint64_t v3 = v32;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v31);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  if (v3)
  {
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v24._countAndFlagsBits = 0xD000000000000039;
    v24._object = (void *)0x80000001006363C0;
    String.append(_:)(v24);
    swift_getErrorValue();
    v25._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v37, enum case for DIPError.Code.failedToUpdateProofingBiomeData(_:), v36);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    Swift::String v26 = v38;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C588();
    swift_allocError();
    uint64_t v27 = v39;
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v28, v26, v8);
    swift_willThrow();
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v26, v8);
  }
  else
  {
    uint64_t v21 = v20;
    uint64_t v22 = (void *)swift_allocObject();
    uint64_t v23 = v34;
    v22[2] = v21;
    v22[3] = v23;
    void v22[4] = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_1000FEC2C, (uint64_t)v22);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1000F9B7C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError();
  uint64_t v39 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v34 = a1;
  if (v16)
  {
    uint64_t v31 = v10;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v32 = v2;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v33 = v8;
    v41[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_100110D58(a1, a2, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "deleteBiomeMetadata called for proofingSessionID: %s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v8 = v33;
    swift_slowDealloc();
    uint64_t v3 = v32;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v31);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  type metadata accessor for IdentityBiomeDataContext();
  swift_allocObject();
  sub_1000E3ECC();
  if (v3)
  {
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v24._countAndFlagsBits = 0xD000000000000036;
    v24._object = (void *)0x8000000100636350;
    String.append(_:)(v24);
    swift_getErrorValue();
    v25._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v37, enum case for DIPError.Code.failedToDeleteBiomeMetadata(_:), v36);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    Swift::String v26 = v38;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C588();
    swift_allocError();
    uint64_t v27 = v39;
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v28, v26, v8);
    swift_willThrow();
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v26, v8);
  }
  else
  {
    uint64_t v21 = v20;
    uint64_t v22 = (void *)swift_allocObject();
    uint64_t v23 = v34;
    v22[2] = v21;
    v22[3] = v23;
    void v22[4] = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000E44E8((uint64_t)sub_1000FEBC8, (uint64_t)v22);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1000FA0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = (char *)a3;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  __chkstk_darwin(v3);
  unint64_t v41 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPError();
  uint64_t v42 = *(void *)(v5 - 8);
  uint64_t v43 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = sub_100007764((uint64_t *)&unk_100723978);
  __chkstk_darwin(v14 - 8);
  BOOL v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PendingActionContext(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v36 - v22;
  sub_100048D6C((uint64_t)v46, (uint64_t)v16, (uint64_t *)&unk_100723978);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_10000C6CC((uint64_t)v16, (uint64_t *)&unk_100723978);
    defaultLogger()();
    Swift::String v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      Swift::String v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Pending actions doesn't have a SEND_TO_BIOME Context", v26, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v13, v45);
  }
  else
  {
    uint64_t v36 = v11;
    uint64_t v46 = v7;
    sub_1000FA6FC((uint64_t)v16, (uint64_t)v23);
    type metadata accessor for IdentityBiomeDataContext();
    swift_allocObject();
    sub_1000E3ECC();
    uint64_t v29 = v28;
    sub_1000FA7BC((uint64_t)v23, (uint64_t)v21);
    uint64_t v30 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v31 = (uint64_t)v23;
    uint64_t v32 = (v30 + 40) & ~v30;
    uint64_t v33 = (void *)swift_allocObject();
    uint64_t v34 = v37;
    uint64_t v35 = v38;
    v33[2] = v29;
    v33[3] = v34;
    v33[4] = v35;
    sub_1000FA6FC((uint64_t)v21, (uint64_t)v33 + v32);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000E44E8((uint64_t)sub_1000FC38C, (uint64_t)v33);
    sub_1000FA760(v31);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1000FA6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PendingActionContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FA760(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PendingActionContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000FA7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PendingActionContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FA820()
{
  uint64_t v1 = (int *)type metadata accessor for PendingActionContext(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)(v0 + v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v0 + v3 + 120);
  if (v6 != 1)
  {
    if (v6 == 2) {
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v5[19] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_6:
  if (v5[23] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5[31] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = (char *)v5 + v1[17];
  uint64_t v8 = type metadata accessor for WorkflowRecommendationResponse();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v23 = v0;
    uint64_t v9 = v2;
    uint64_t v10 = (v2 + 40) & ~v2;
    uint64_t v11 = v4;
    if (*((void *)v7 + 3))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = &v7[*(int *)(v8 + 20)];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = type metadata accessor for Workflow();
    uint64_t v14 = &v12[*(int *)(v13 + 72)];
    uint64_t v15 = type metadata accessor for HardwareAttestationType();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = &v12[*(int *)(v13 + 152)];
    uint64_t v4 = v11;
    uint64_t v3 = v10;
    uint64_t v2 = v9;
    uint64_t v0 = v23;
    if (*((void *)v17 + 1) != 1)
    {
      swift_bridgeObjectRelease();
      if (*((void *)v17 + 104) != 1)
      {
        if (*((void *)v17 + 2) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 6) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 10) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 14) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 18) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 22) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 26) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 30) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 34) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 38) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 42) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 46) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 50) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 54) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 58) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 62) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 66) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 70) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 74) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 78) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 82) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 86) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 90) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 94) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 208) != 1)
      {
        if (*((void *)v17 + 106) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 110) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 114) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 118) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 122) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 126) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 130) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 134) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 138) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 142) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 146) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 150) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 154) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 158) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 162) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 166) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 170) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 174) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 178) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 182) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 186) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 190) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 194) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 198) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 312) != 1)
      {
        if (*((void *)v17 + 210) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 214) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 218) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 222) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 226) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 230) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 234) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 238) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 242) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 246) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 250) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 254) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 258) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 262) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 266) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 270) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 274) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 278) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 282) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 286) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 290) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 294) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 298) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 302) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 416) != 1)
      {
        if (*((void *)v17 + 314) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 318) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 322) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 326) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 330) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 334) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 338) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 342) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 346) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 350) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 354) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 358) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 362) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 366) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 370) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 374) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 378) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 382) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 386) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 390) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 394) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 398) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 402) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 406) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 520) != 1)
      {
        if (*((void *)v17 + 418) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 422) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 426) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 430) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 434) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 438) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 442) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 446) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 450) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 454) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 458) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 462) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 466) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 470) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 474) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 478) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 482) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 486) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 490) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 494) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 498) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 502) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 506) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 510) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 624) != 1)
      {
        if (*((void *)v17 + 522) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 526) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 530) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 534) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 538) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 542) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 546) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 550) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 554) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 558) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 562) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 566) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 570) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 574) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 578) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 582) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 586) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 590) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 594) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 598) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 602) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 606) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 610) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 614) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*((void *)v17 + 728) != 1)
      {
        if (*((void *)v17 + 626) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 630) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 634) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 638) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 642) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 646) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 650) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 654) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 658) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 662) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 666) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 670) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 674) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 678) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 682) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 686) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 690) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 694) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 698) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 702) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 706) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 710) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 714) != 1) {
          swift_bridgeObjectRelease();
        }
        if (*((void *)v17 + 718) != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(void *)((char *)v5 + v1[25] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)((char *)v5 + v1[26] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = (char *)v5 + v1[28];
  uint64_t v19 = sub_100007764(&qword_100723988);
  uint64_t v20 = *(void *)(v19 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  }
  uint64_t v21 = (void *)((char *)v5 + v1[29]);
  if (v21[1] != 1)
  {
    swift_bridgeObjectRelease();
    if (v21[104] != 1)
    {
      if (v21[2] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[6] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[10] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[14] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[18] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[22] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[26] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[30] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[34] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[38] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[42] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[46] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[50] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[54] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[58] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[62] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[66] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[70] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[74] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[78] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[82] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[86] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[90] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[94] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[208] != 1)
    {
      if (v21[106] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[110] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[114] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[118] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[122] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[126] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[130] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[134] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[138] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[142] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[146] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[150] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[154] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[158] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[162] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[166] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[170] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[174] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[178] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[182] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[186] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[190] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[194] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[198] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[312] != 1)
    {
      if (v21[210] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[214] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[218] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[222] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[226] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[230] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[234] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[238] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[242] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[246] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[250] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[254] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[258] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[262] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[266] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[270] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[274] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[278] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[282] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[286] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[290] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[294] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[298] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[302] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[416] != 1)
    {
      if (v21[314] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[318] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[322] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[326] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[330] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[334] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[338] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[342] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[346] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[350] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[354] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[358] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[362] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[366] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[370] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[374] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[378] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[382] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[386] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[390] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[394] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[398] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[402] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[406] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[520] != 1)
    {
      if (v21[418] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[422] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[426] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[430] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[434] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[438] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[442] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[446] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[450] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[454] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[458] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[462] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[466] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[470] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[474] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[478] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[482] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[486] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[490] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[494] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[498] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[502] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[506] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[510] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[624] != 1)
    {
      if (v21[522] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[526] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[530] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[534] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[538] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[542] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[546] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[550] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[554] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[558] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[562] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[566] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[570] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[574] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[578] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[582] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[586] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[590] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[594] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[598] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[602] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[606] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[610] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[614] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v21[728] != 1)
    {
      if (v21[626] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[630] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[634] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[638] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[642] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[646] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[650] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[654] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[658] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[662] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[666] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[670] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[674] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[678] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[682] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[686] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[690] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[694] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[698] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[702] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[706] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[710] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[714] != 1) {
        swift_bridgeObjectRelease();
      }
      if (v21[718] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_1000FC38C()
{
  uint64_t v1 = *(void *)(type metadata accessor for PendingActionContext(0) - 8);
  sub_1000F4C44(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_1000FC3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000FC518, 0, 0);
}

uint64_t sub_1000FC518()
{
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  v0[12] = v1;
  uint64_t v2 = v1;
  uint64_t v3 = v0[10];
  uint64_t v16 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v8 = v0[2];
  uint64_t v7 = v0[3];
  uint64_t v9 = (void *)swift_allocObject();
  v0[13] = v9;
  v9[2] = v2;
  v9[3] = v5;
  v9[4] = v6;
  void v9[5] = v8;
  v9[6] = v7;
  uint64_t v10 = swift_allocObject();
  v0[14] = v10;
  *(void *)(v10 + 16) = sub_1000FE958;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v16, v11, v4);
  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[15] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1000FC778;
  uint64_t v14 = v0[11];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v13, v14, sub_100027978, v10, (char *)&type metadata for () + 8);
}

uint64_t sub_1000FC778()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    uint64_t v5 = sub_1000FC994;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_1000FC920;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000FC920()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FC994()
{
  swift_release();
  swift_release();
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000FCA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 104) = a8;
  *(void *)(v8 + 112) = v15;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 96) = a7;
  *(unsigned char *)(v8 + 312) = a5;
  *(void *)(v8 + 72) = a3;
  *(void *)(v8 + 80) = a4;
  *(void *)(v8 + 56) = a1;
  *(void *)(v8 + 64) = a2;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  *(void *)(v8 + 120) = v9;
  *(void *)(v8 + 128) = *(void *)(v9 - 8);
  *(void *)(v8 + 136) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPError();
  *(void *)(v8 + 144) = v10;
  *(void *)(v8 + 152) = *(void *)(v10 - 8);
  *(void *)(v8 + 160) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v8 + 168) = v11;
  *(void *)(v8 + 176) = *(void *)(v11 - 8);
  *(void *)(v8 + 184) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  *(void *)(v8 + 192) = v12;
  *(void *)(v8 + 200) = *(void *)(v12 - 8);
  *(void *)(v8 + 208) = swift_task_alloc();
  *(void *)(v8 + 216) = swift_task_alloc();
  sub_100007764(&qword_100723998);
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  *(void *)(v8 + 240) = swift_task_alloc();
  *(void *)(v8 + 248) = swift_task_alloc();
  return _swift_task_switch(sub_1000FCCB4, 0, 0);
}

uint64_t sub_1000FCCB4()
{
  uint64_t v109 = v0;
  uint64_t v1 = *(void *)(v0 + 112);
  if (!*(void *)(v1 + 16))
  {
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    uint64_t v100 = 0;
    uint64_t v95 = 0;
    unint64_t v106 = 0xE000000000000000;
    unint64_t v107 = 0xE000000000000000;
LABEL_11:
    unint64_t v101 = 0xE000000000000000;
    unint64_t v102 = 0xE000000000000000;
    goto LABEL_12;
  }
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v4 = v2 & ~v3;
  uint64_t v5 = v1 + 56;
  if ((*(void *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = v1;
    uint64_t v7 = ~v3;
    uint64_t v8 = *(void *)(v0 + 112);
    while (2)
    {
      switch(*(unsigned char *)(*(void *)(v8 + 48) + v4))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v9) {
            goto LABEL_23;
          }
          unint64_t v4 = (v4 + 1) & v7;
          if ((*(void *)(v5 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
            continue;
          }
          uint64_t v100 = 0;
          unint64_t v107 = 0xE000000000000000;
          break;
        default:
          swift_bridgeObjectRelease();
LABEL_23:
          uint64_t v19 = *(void *)(v0 + 248);
          sub_100048D6C(*(void *)(v0 + 72), v19, &qword_100723998);
          uint64_t v20 = type metadata accessor for PDF417ParsedData();
          uint64_t v21 = *(void *)(v20 - 8);
          int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
          uint64_t v23 = *(void *)(v0 + 248);
          if (v22 == 1)
          {
            sub_10000C6CC(*(void *)(v0 + 248), &qword_100723998);
            uint64_t v100 = 0;
            unint64_t v107 = 0;
          }
          else
          {
            uint64_t v100 = PDF417ParsedData.dob.getter();
            unint64_t v107 = v24;
            (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
          }
          break;
      }
      break;
    }
    uint64_t v1 = v6;
    if (*(void *)(v6 + 16)) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
  uint64_t v100 = 0;
  unint64_t v107 = 0xE000000000000000;
  if (!*(void *)(v1 + 16))
  {
LABEL_10:
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    uint64_t v95 = 0;
    unint64_t v106 = 0xE000000000000000;
    goto LABEL_11;
  }
LABEL_27:
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v25 = Hasher._finalize()();
  uint64_t v26 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v27 = v25 & ~v26;
  uint64_t v105 = v1;
  if (((*(void *)(v5 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
  {
    uint64_t v95 = 0;
    unint64_t v101 = 0xE000000000000000;
    if (*(void *)(v1 + 16)) {
      goto LABEL_50;
    }
LABEL_34:
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    unint64_t v106 = 0xE000000000000000;
    unint64_t v102 = 0xE000000000000000;
    goto LABEL_12;
  }
  uint64_t v28 = ~v26;
  uint64_t v29 = *(void *)(v0 + 112);
  while (2)
  {
    switch(*(unsigned char *)(*(void *)(v29 + 48) + v27))
    {
      case 1:
        swift_bridgeObjectRelease();
        goto LABEL_46;
      default:
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
        {
          unint64_t v27 = (v27 + 1) & v28;
          if (((*(void *)(v5 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
          {
            uint64_t v95 = 0;
            unint64_t v101 = 0xE000000000000000;
            goto LABEL_49;
          }
          continue;
        }
LABEL_46:
        uint64_t v37 = *(void *)(v0 + 240);
        sub_100048D6C(*(void *)(v0 + 72), v37, &qword_100723998);
        uint64_t v38 = type metadata accessor for PDF417ParsedData();
        uint64_t v39 = *(void *)(v38 - 8);
        int v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38);
        uint64_t v41 = *(void *)(v0 + 240);
        if (v40 == 1)
        {
          sub_10000C6CC(*(void *)(v0 + 240), &qword_100723998);
          uint64_t v95 = 0;
          unint64_t v101 = 0;
        }
        else
        {
          uint64_t v95 = PDF417ParsedData.gender.getter();
          unint64_t v101 = v42;
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v38);
        }
LABEL_49:
        uint64_t v1 = v105;
        if (!*(void *)(v105 + 16)) {
          goto LABEL_34;
        }
LABEL_50:
        Hasher.init(_seed:)();
        String.hash(into:)();
        Swift::Int v43 = Hasher._finalize()();
        uint64_t v44 = -1 << *(unsigned char *)(v1 + 32);
        unint64_t v45 = v43 & ~v44;
        if (((*(void *)(v5 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
        {
          uint64_t v97 = 0;
          unint64_t v106 = 0xE000000000000000;
          if (*(void *)(v1 + 16)) {
            goto LABEL_71;
          }
LABEL_77:
          uint64_t v96 = 0;
          unint64_t v102 = 0xE000000000000000;
          goto LABEL_12;
        }
        uint64_t v46 = ~v44;
        uint64_t v47 = *(void *)(v0 + 112);
        while (2)
        {
          switch(*(unsigned char *)(*(void *)(v47 + 48) + v45))
          {
            case 2:
              swift_bridgeObjectRelease();
              goto LABEL_67;
            default:
              char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v48 & 1) == 0)
              {
                unint64_t v45 = (v45 + 1) & v46;
                if (((*(void *)(v5 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
                {
                  uint64_t v97 = 0;
                  unint64_t v106 = 0xE000000000000000;
                  goto LABEL_70;
                }
                continue;
              }
LABEL_67:
              uint64_t v73 = *(void *)(v0 + 232);
              sub_100048D6C(*(void *)(v0 + 72), v73, &qword_100723998);
              uint64_t v74 = type metadata accessor for PDF417ParsedData();
              uint64_t v75 = *(void *)(v74 - 8);
              int v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74);
              uint64_t v77 = *(void *)(v0 + 232);
              if (v76 == 1)
              {
                sub_10000C6CC(*(void *)(v0 + 232), &qword_100723998);
                uint64_t v97 = 0;
                unint64_t v106 = 0;
              }
              else
              {
                uint64_t v97 = PDF417ParsedData.issuer.getter();
                unint64_t v106 = v78;
                (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v77, v74);
              }
LABEL_70:
              uint64_t v1 = v105;
              if (!*(void *)(v105 + 16)) {
                goto LABEL_77;
              }
LABEL_71:
              Hasher.init(_seed:)();
              String.hash(into:)();
              Swift::Int v79 = Hasher._finalize()();
              uint64_t v80 = -1 << *(unsigned char *)(v1 + 32);
              unint64_t v81 = v79 & ~v80;
              if (((*(void *)(v5 + ((v81 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v81) & 1) == 0) {
                goto LABEL_77;
              }
              uint64_t v82 = ~v80;
              uint64_t v83 = *(void *)(v0 + 112);
              while (2)
              {
                switch(*(unsigned char *)(*(void *)(v83 + 48) + v81))
                {
                  case 3:
                    swift_bridgeObjectRelease();
                    goto LABEL_79;
                  default:
                    char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v84 & 1) == 0)
                    {
                      unint64_t v81 = (v81 + 1) & v82;
                      if (((*(void *)(v5 + ((v81 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v81) & 1) == 0)
                      {
                        uint64_t v96 = 0;
                        unint64_t v102 = 0xE000000000000000;
                        goto LABEL_82;
                      }
                      continue;
                    }
LABEL_79:
                    uint64_t v85 = *(void *)(v0 + 224);
                    sub_100048D6C(*(void *)(v0 + 72), v85, &qword_100723998);
                    uint64_t v86 = type metadata accessor for PDF417ParsedData();
                    uint64_t v87 = *(void *)(v86 - 8);
                    int v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86);
                    uint64_t v89 = *(void *)(v0 + 224);
                    if (v88 == 1)
                    {
                      sub_10000C6CC(*(void *)(v0 + 224), &qword_100723998);
                      uint64_t v96 = 0;
                      unint64_t v102 = 0;
                    }
                    else
                    {
                      uint64_t v96 = PDF417ParsedData.ethnicity.getter();
                      unint64_t v102 = v90;
                      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v89, v86);
                    }
LABEL_82:
                    uint64_t v1 = v105;
LABEL_12:
                    if (!*(void *)(v1 + 16))
                    {
                      uint64_t v99 = 0;
                      os_log_type_t v104 = _swiftEmptyArrayStorage;
                      char v98 = 1;
                      goto LABEL_60;
                    }
                    uint64_t v10 = *(void *)(v0 + 112);
                    Hasher.init(_seed:)();
                    String.hash(into:)();
                    Swift::Int v11 = Hasher._finalize()();
                    uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
                    unint64_t v13 = v11 & ~v12;
                    uint64_t v14 = v10 + 56;
                    if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
                    {
                      uint64_t v99 = 0;
                      char v98 = 1;
                      if (*(void *)(v1 + 16)) {
                        goto LABEL_38;
                      }
LABEL_44:
                      os_log_type_t v104 = _swiftEmptyArrayStorage;
                      goto LABEL_60;
                    }
                    uint64_t v103 = v1;
                    uint64_t v15 = ~v12;
                    uint64_t v16 = *(void *)(v0 + 112);
                    while (2)
                    {
                      switch(*(unsigned char *)(*(void *)(v16 + 48) + v13))
                      {
                        case 4:
                          swift_bridgeObjectRelease();
                          goto LABEL_36;
                        default:
                          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          if ((v17 & 1) == 0)
                          {
                            unint64_t v13 = (v13 + 1) & v15;
                            if (((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
                            {
                              uint64_t v99 = 0;
                              char v18 = 1;
                              goto LABEL_37;
                            }
                            continue;
                          }
LABEL_36:
                          uint64_t v99 = *(void *)(v0 + 80);
                          char v18 = *(unsigned char *)(v0 + 312) & 1;
LABEL_37:
                          char v98 = v18;
                          if (!*(void *)(v103 + 16)) {
                            goto LABEL_44;
                          }
LABEL_38:
                          Hasher.init(_seed:)();
                          String.hash(into:)();
                          Swift::Int v31 = Hasher._finalize()();
                          uint64_t v32 = -1 << *(unsigned char *)(v10 + 32);
                          unint64_t v33 = v31 & ~v32;
                          if (((*(void *)(v14 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
                            goto LABEL_44;
                          }
                          uint64_t v34 = ~v32;
                          uint64_t v35 = *(void *)(v0 + 112);
                          while (2)
                          {
                            switch(*(unsigned char *)(*(void *)(v35 + 48) + v33))
                            {
                              case 7:
                                swift_bridgeObjectRelease();
                                goto LABEL_59;
                              default:
                                char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                if ((v36 & 1) == 0)
                                {
                                  unint64_t v33 = (v33 + 1) & v34;
                                  if (((*(void *)(v14 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
                                  {
                                    os_log_type_t v104 = _swiftEmptyArrayStorage;
                                    goto LABEL_60;
                                  }
                                  continue;
                                }
LABEL_59:
                                os_log_type_t v104 = *(void **)(v0 + 88);
                                swift_bridgeObjectRetain();
LABEL_60:
                                defaultLogger()();
                                swift_bridgeObjectRetain_n();
                                Swift::String_optional v49 = Logger.logObject.getter();
                                os_log_type_t v50 = static os_log_type_t.debug.getter();
                                BOOL v51 = os_log_type_enabled(v49, v50);
                                uint64_t v52 = *(void *)(v0 + 216);
                                uint64_t v54 = *(void *)(v0 + 192);
                                uint64_t v53 = *(void *)(v0 + 200);
                                if (v51)
                                {
                                  uint64_t v93 = *(void *)(v0 + 216);
                                  uint64_t v92 = *(void *)(v0 + 192);
                                  uint64_t v55 = (uint8_t *)swift_slowAlloc();
                                  uint64_t v108 = swift_slowAlloc();
                                  *(_DWORD *)uint64_t v55 = 136315138;
                                  sub_1000FE8EC();
                                  swift_bridgeObjectRetain();
                                  uint64_t v56 = Set.description.getter();
                                  unint64_t v58 = v57;
                                  swift_bridgeObjectRelease();
                                  *(void *)(v0 + 48) = sub_100110D58(v56, v58, &v108);
                                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease_n();
                                  _os_log_impl((void *)&_mh_execute_header, v49, v50, "Biome-Fed Stats attempting to collect - %s", v55, 0xCu);
                                  swift_arrayDestroy();
                                  swift_slowDealloc();
                                  swift_slowDealloc();

                                  uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
                                  v59(v93, v92);
                                }
                                else
                                {
                                  swift_bridgeObjectRelease_n();

                                  uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
                                  v59(v52, v54);
                                }
                                *(void *)(v0 + 256) = v59;
                                type metadata accessor for IdentityBiomeDataContext();
                                swift_allocObject();
                                sub_1000E3ECC();
                                *(void *)(v0 + 264) = v60;
                                uint64_t v61 = v60;
                                uint64_t v62 = *(void *)(v0 + 176);
                                uint64_t v94 = *(void *)(v0 + 184);
                                uint64_t v63 = *(void *)(v0 + 168);
                                uint64_t v64 = *(void *)(v0 + 112);
                                uint64_t v65 = *(void *)(v0 + 56);
                                uint64_t v66 = *(void *)(v0 + 64);
                                uint64_t v67 = swift_allocObject();
                                *(void *)(v0 + 272) = v67;
                                *(void *)(v67 + 16) = v61;
                                *(void *)(v67 + 24) = v65;
                                *(void *)(v67 + 32) = v66;
                                *(void *)(v67 + 40) = v100;
                                *(void *)(v67 + 48) = v107;
                                *(void *)(v67 + 56) = v95;
                                *(void *)(v67 + 64) = v101;
                                *(void *)(v67 + 72) = v99;
                                *(unsigned char *)(v67 + 80) = v98;
                                *(void *)(v67 + 88) = v96;
                                *(void *)(v67 + 96) = v102;
                                *(void *)(v67 + 104) = v97;
                                *(void *)(v67 + 112) = v106;
                                *(void *)(v67 + 120) = v64;
                                *(void *)(v67 + 128) = v104;
                                uint64_t v68 = swift_allocObject();
                                *(void *)(v0 + 280) = v68;
                                *(void *)(v68 + 16) = sub_1000FE83C;
                                *(void *)(v68 + 24) = v67;
                                uint64_t v69 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
                                unint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 104);
                                swift_bridgeObjectRetain();
                                swift_retain();
                                swift_bridgeObjectRetain();
                                v70(v94, v69, v63);
                                swift_retain();
                                uint64_t v71 = (void *)swift_task_alloc();
                                *(void *)(v0 + 288) = v71;
                                *uint64_t v71 = v0;
                                v71[1] = sub_1000FE124;
                                uint64_t v72 = *(void *)(v0 + 184);
                                return NSManagedObjectContext.perform<A>(schedule:_:)(v71, v72, sub_1000FE8C4, v68, (char *)&type metadata for () + 8);
                            }
                          }
                      }
                    }
                }
              }
          }
        }
    }
  }
}

uint64_t sub_1000FE124()
{
  Swift::Int v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[22] + 8))(v2[23], v2[21]);
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_1000FE51C;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_1000FE2A0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000FE2A0()
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1007239A0 + dword_1007239A0);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[38] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000FE34C;
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  return v7(v3, v2, v4, v5);
}

uint64_t sub_1000FE34C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000FE448, 0, 0);
}

uint64_t sub_1000FE448()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FE51C()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0[26];
  uint64_t v13 = v0[24];
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[32];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v5 = v0[16];
  uint64_t v11 = v0[15];
  uint64_t v12 = v0[20];
  _StringGuts.grow(_:)(55);
  v6._object = (void *)0x80000001006361A0;
  v6._countAndFlagsBits = 0xD000000000000035;
  String.append(_:)(v6);
  swift_getErrorValue();
  v7._countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.failedToPersistBiomeMetadata(_:), v11);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10000C588();
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v8, v12, v3);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v14(v1, v13);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v3);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000FE7CC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 136, 7);
}

void sub_1000FE83C()
{
  sub_1000F79EC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(void **)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80), *(Swift::String_optional *)(v0 + 88), *(Swift::String_optional *)(v0 + 104), *(void *)(v0 + 120), *(void *)(v0 + 128));
}

uint64_t sub_1000FE88C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FE8C4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_1000FE8EC()
{
  unint64_t result = qword_1007239A8;
  if (!qword_1007239A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007239A8);
  }
  return result;
}

uint64_t sub_1000FE940()
{
  return sub_1000FEFF8((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1000FE958()
{
  sub_1000F7FC4(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000FE97C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000FE9BC()
{
  sub_1000F6F4C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000FE9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007239C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FEA40(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000FEA64(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000FEBBC()
{
  return sub_10016F058(*(unsigned char *)(v0 + 16));
}

void sub_1000FEBC8()
{
  sub_1000F49C8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000FEBEC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000FEC2C()
{
  sub_1000F756C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000FEC4C()
{
  return _swift_deallocObject(v0, 17, 7);
}

void *sub_1000FEC60()
{
  return sub_1000F77E8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000FEC80()
{
  if (*(void *)(v0 + 24) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 336, 7);
}

double sub_1000FED50(_OWORD *a1)
{
  double result = 0.0;
  *a1 = xmmword_100611090;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  return result;
}

uint64_t sub_1000FED8C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000FEDD4()
{
  return sub_1000F40A8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000FEDF4(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v7 = *(_OWORD *)(a1 + 272);
  long long v8 = *(_OWORD *)(a1 + 288);
  long long v5 = *(_OWORD *)(a1 + 240);
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v4 = *(_OWORD *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    *(void *)(a1 + 304),
    *(void *)(a1 + 312));
  return a1;
}

uint64_t sub_1000FEE88(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000FEFE0()
{
  return sub_1000FEFF8((void (*)(void))&_swift_release);
}

uint64_t sub_1000FEFF8(void (*a1)(void))
{
  swift_release();
  swift_bridgeObjectRelease();
  a1(*(void *)(v1 + 48));

  return _swift_deallocObject(v1, 56, 7);
}

void sub_1000FF050()
{
  sub_1000F57B4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t destroy for IdentityBiomeMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IdentityBiomeMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v12;
  uint64_t v13 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v13;
  uint64_t v14 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v14;
  uint64_t v15 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v15;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  uint64_t v16 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v16;
  uint64_t v17 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v17;
  uint64_t v18 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v18;
  uint64_t v19 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v19;
  uint64_t v20 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v20;
  uint64_t v21 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IdentityBiomeMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for IdentityBiomeMetadata(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x140uLL);
}

uint64_t assignWithTake for IdentityBiomeMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v14;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  uint64_t v15 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityBiomeMetadata(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 320)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityBiomeMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 320) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 320) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityBiomeMetadata()
{
  return &type metadata for IdentityBiomeMetadata;
}

void sub_1000FF820()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v2);
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  unint64_t v3 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 52;
  os_unfair_lock_lock(v3 + 52);
  sub_1000262B4(v4, v8);
  os_unfair_lock_unlock(v5);
  if (v1)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    sub_1000262D0((uint64_t)v8);
    uint64_t v6 = (void *)AsyncCoreDataStore.container.getter();
    swift_release();
    id v7 = [v6 newBackgroundContext];

    *(void *)(v0 + 16) = v7;
  }
}

id sub_1000FFAB4()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + 16);
  v18[0] = 0;
  if ([v5 save:v18]) {
    return v18[0];
  }
  id v7 = v18[0];
  uint64_t v8 = _convertNSErrorToError(_:)();

  swift_willThrow();
  v18[0] = 0;
  v18[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(48);
  v9._object = (void *)0x8000000100634D30;
  v9._countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v9);
  void v17[4] = v8;
  sub_100007764((uint64_t *)&unk_100723450);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v10 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100610730;
  uint64_t v13 = (uint64_t *)(v12 + v11 + v10[14]);
  uint64_t v14 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  uint64_t v15 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v12 + v11, v14, v15);
  swift_getErrorValue();
  swift_errorRetain();
  uint64_t v16 = dispatch thunk of Error._code.getter();
  v13[3] = (uint64_t)&type metadata for Int;
  *uint64_t v13 = v16;
  sub_10015C504(v12);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return (id)swift_errorRelease();
}

uint64_t sub_1000FFE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = &v11;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_100102C6C;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_1000E4EA0;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100032314;
  aBlock[3] = &unk_1006F8768;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v5 performBlockAndWait:v8];
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5)
  {
    __break(1u);
  }
  else
  {
    if (v11)
    {
      swift_errorRetain();
      swift_willThrow();
      swift_errorRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1000FFFE0(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = __chkstk_darwin(v2);
  return a1(v3);
}

void sub_100100188()
{
  id v1 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithEntityName:v2];

  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100610730;
  uint64_t v5 = IdentityTarget.rawValue.getter();
  *(void *)(v4 + 56) = &type metadata for Int64;
  *(void *)(v4 + 64) = &protocol witness table for Int64;
  *(void *)(v4 + 32) = v5;
  uint64_t v6 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v6];

  sub_100007764(&qword_1007232F0);
  unint64_t v7 = NSManagedObjectContext.fetch<A>(_:)();
  if (v0)
  {
  }
  else
  {
    sub_10052F04C(v7);

    swift_bridgeObjectRelease();
  }
}

void sub_1001002FC(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithEntityName:v6];

  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100610730;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000E4DF8();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  Swift::String v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];

  sub_100007764(&qword_1007232F0);
  unint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
  }
  else
  {
    sub_10052F04C(v10);

    swift_bridgeObjectRelease();
  }
}

void sub_100100478(uint64_t a1, uint64_t a2)
{
}

void sub_1001004A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 initWithEntityName:v8];

  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100610730;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v11 = sub_1000E4DF8();
  *(void *)(v10 + 64) = v11;
  *(void *)(v10 + 32) = a1;
  *(void *)(v10 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v12 = NSPredicate.init(format:_:)();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100610730;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = v11;
  uint64_t v14 = v9;
  *(void *)(v13 + 32) = a3;
  *(void *)(v13 + 40) = a4;
  swift_bridgeObjectRetain();
  uint64_t v15 = NSPredicate.init(format:_:)();
  sub_100007764(&qword_100730C60);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100614580;
  *(void *)(v16 + 32) = v12;
  *(void *)(v16 + 40) = v15;
  specialized Array._endMutation()();
  id v17 = v12;
  id v18 = v15;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v20 = [self andPredicateWithSubpredicates:isa];

  [v14 setPredicate:v20];
  sub_100007764(&qword_1007232F0);
  unint64_t v21 = NSManagedObjectContext.fetch<A>(_:)();
  if (v25)
  {

    return;
  }
  unint64_t v22 = v21;
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();

    return;
  }
  if (!*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v22 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    swift_unknownObjectRetain();
  }

  swift_bridgeObjectRelease();
  type metadata accessor for StoredProofingSession();
  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
}

void sub_1001007EC(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithEntityName:v6];

  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100610730;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000E4DF8();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  id v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];
  sub_100007764(&qword_1007232F0);
  unint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
  }
  else
  {
    sub_10052F04C(v10);

    swift_bridgeObjectRelease();
  }
}

void sub_10010096C(uint64_t a1, uint64_t a2)
{
}

void sub_10010099C(uint64_t a1, uint64_t a2)
{
}

void sub_1001009CC(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithEntityName:v5];

  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100610730;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000E4DF8();
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v8 = NSPredicate.init(format:_:)();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100610730;
  uint64_t v10 = IdentityTarget.rawValue.getter();
  *(void *)(v9 + 56) = &type metadata for Int64;
  *(void *)(v9 + 64) = &protocol witness table for Int64;
  *(void *)(v9 + 32) = v10;
  unint64_t v11 = NSPredicate.init(format:_:)();
  sub_100007764(&qword_100730C60);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100614580;
  *(void *)(v12 + 32) = v8;
  *(void *)(v12 + 40) = v11;
  specialized Array._endMutation()();
  id v13 = v8;
  id v14 = v11;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = [self andPredicateWithSubpredicates:isa];

  [v6 setPredicate:v16];
  sub_100007764(&qword_1007232F0);
  unint64_t v17 = NSManagedObjectContext.fetch<A>(_:)();
  if (v20)
  {

    return;
  }
  unint64_t v18 = v17;
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();

    return;
  }
  if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v18 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    swift_unknownObjectRetain();
  }

  swift_bridgeObjectRelease();
  type metadata accessor for StoredProofingSession();
  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
}

unint64_t sub_100100D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  type metadata accessor for StoredProofingSession();
  uint64_t v7 = (void *)static StoredProofingSession.fetchRequest()();
  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100610730;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000E4DF8();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {

    return v4;
  }
  unint64_t v11 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_9:

      swift_bridgeObjectRelease();
      return v4;
    }
  }
  if ((v11 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v12 = *(id *)(v11 + 32);
LABEL_8:
    uint64_t v4 = (uint64_t)v12;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100100EB4(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v34 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 initWithEntityName:v9];

  [v10 setFetchLimit:1];
  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v11 = swift_allocObject();
  long long v33 = xmmword_100610730;
  *(_OWORD *)(v11 + 16) = xmmword_100610730;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_1000E4DF8();
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  swift_bridgeObjectRetain();
  id v12 = NSPredicate.init(format:_:)();
  [v10 setPredicate:v12];

  sub_100007764(&qword_1007232F0);
  unint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    v14._countAndFlagsBits = 0xD000000000000037;
    v14._object = (void *)0x8000000100636900;
    String.append(_:)(v14);
    v15._countAndFlagsBits = a1;
    v15._object = a2;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x3A726F727265203ALL;
    v16._object = (void *)0xE900000000000020;
    String.append(_:)(v16);
    uint64_t v37 = v2;
    sub_100007764((uint64_t *)&unk_100723450);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v34, enum case for DIPError.Code.coreDataError(_:), v5);
    sub_100007764((uint64_t *)&unk_1007225C0);
    unint64_t v17 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v18 = (*(unsigned __int8 *)(*(void *)v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v17 + 80);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = v33;
    unint64_t v20 = v19 + v18;
    unint64_t v21 = (uint64_t *)(v19 + v18 + v17[14]);
    uint64_t v22 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v23 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v20, v22, v23);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v24 = dispatch thunk of Error._code.getter();
    v21[3] = (uint64_t)&type metadata for Int;
    *unint64_t v21 = v24;
    unint64_t v25 = sub_10015C504(v19);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v25;
  }
  unint64_t v26 = v13;
  if (v13 >> 62)
  {
    type metadata accessor for StoredPrearmTrust();
    swift_bridgeObjectRetain();
    uint64_t v32 = _bridgeCocoaArray<A>(_:)();
    uint64_t result = swift_bridgeObjectRelease_n();
    unint64_t v26 = v32;
  }
  else
  {
    uint64_t v27 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for StoredPrearmTrust();
    if (swift_dynamicCastMetatype() || (uint64_t v30 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_5:
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v31 = v27 + 32;
      while (swift_dynamicCastClass())
      {
        v31 += 8;
        if (!--v30) {
          goto LABEL_5;
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v26 = v27 | 1;
    }
  }
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v25) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v25 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v25)
    {
LABEL_12:
      swift_bridgeObjectRelease();

      return v25;
    }
  }
  if ((v26 & 0xC000000000000001) != 0)
  {
    id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_11;
  }
  if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v29 = *(id *)(v26 + 32);
LABEL_11:
    unint64_t v25 = (unint64_t)v29;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void sub_100101488(uint64_t a1, void *a2)
{
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100100EB4(a1, a2);
  if (v3)
  {
    void v22[4] = 0;
    v22[5] = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v11._countAndFlagsBits = 0xD00000000000003FLL;
    v11._object = (void *)0x8000000100636890;
    String.append(_:)(v11);
    v12._countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0x203A726F72726520;
    v13._object = (void *)0xE800000000000000;
    String.append(_:)(v13);
    v22[7] = v3;
    sub_100007764((uint64_t *)&unk_100723450);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.coreDataError(_:), v6);
    sub_100007764((uint64_t *)&unk_1007225C0);
    Swift::String v14 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v15 = (*(unsigned __int8 *)(*(void *)v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v14 + 80);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_100610730;
    unint64_t v17 = (uint64_t *)(v16 + v15 + v14[14]);
    uint64_t v18 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v19 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v16 + v15, v18, v19);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v20 = dispatch thunk of Error._code.getter();
    v17[3] = (uint64_t)&type metadata for Int;
    *unint64_t v17 = v20;
    sub_10015C504(v16);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    unint64_t v21 = (void *)v10;
    if (v10)
    {
      [*(id *)(v2 + 16) deleteObject:v10];
    }
  }
}

uint64_t sub_10010180C(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v34 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 initWithEntityName:v9];

  [v10 setFetchLimit:1];
  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v11 = swift_allocObject();
  long long v33 = xmmword_100610730;
  *(_OWORD *)(v11 + 16) = xmmword_100610730;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_1000E4DF8();
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  swift_bridgeObjectRetain();
  Swift::String v12 = NSPredicate.init(format:_:)();
  [v10 setPredicate:v12];

  sub_100007764(&qword_1007232F0);
  unint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(69);
    v14._countAndFlagsBits = 0xD000000000000038;
    v14._object = (void *)0x8000000100636820;
    String.append(_:)(v14);
    v15._countAndFlagsBits = a1;
    v15._object = a2;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x3A726F727265203ALL;
    v16._object = (void *)0xE900000000000020;
    String.append(_:)(v16);
    uint64_t v37 = v2;
    sub_100007764((uint64_t *)&unk_100723450);
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v34, enum case for DIPError.Code.coreDataError(_:), v5);
    sub_100007764((uint64_t *)&unk_1007225C0);
    unint64_t v17 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v18 = (*(unsigned __int8 *)(*(void *)v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v17 + 80);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = v33;
    unint64_t v20 = v19 + v18;
    unint64_t v21 = (uint64_t *)(v19 + v18 + v17[14]);
    uint64_t v22 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v23 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v20, v22, v23);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v24 = dispatch thunk of Error._code.getter();
    v21[3] = (uint64_t)&type metadata for Int;
    *unint64_t v21 = v24;
    unint64_t v25 = sub_10015C504(v19);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v25;
  }
  unint64_t v26 = v13;
  if (v13 >> 62)
  {
    type metadata accessor for StoredProofingBiomeData();
    swift_bridgeObjectRetain();
    uint64_t v32 = _bridgeCocoaArray<A>(_:)();
    uint64_t result = swift_bridgeObjectRelease_n();
    unint64_t v26 = v32;
  }
  else
  {
    uint64_t v27 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for StoredProofingBiomeData();
    if (swift_dynamicCastMetatype() || (uint64_t v30 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_5:
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v31 = v27 + 32;
      while (swift_dynamicCastClass())
      {
        v31 += 8;
        if (!--v30) {
          goto LABEL_5;
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v26 = v27 | 1;
    }
  }
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v25) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v25 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v25)
    {
LABEL_12:
      swift_bridgeObjectRelease();

      return v25;
    }
  }
  if ((v26 & 0xC000000000000001) != 0)
  {
    id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_11;
  }
  if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v29 = *(id *)(v26 + 32);
LABEL_11:
    unint64_t v25 = (unint64_t)v29;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100101DD8()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithEntityName:v6];

  sub_100007764(&qword_1007232F0);
  unint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();
  if (v0)
  {

    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    v9._countAndFlagsBits = 0xD000000000000029;
    v9._object = (void *)0x80000001006367D0;
    String.append(_:)(v9);
    uint64_t v23 = v0;
    sub_100007764((uint64_t *)&unk_100723450);
    _print_unlocked<A, B>(_:_:)();
    v20[1] = v21;
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
    sub_100007764((uint64_t *)&unk_1007225C0);
    id v10 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_100610730;
    unint64_t v13 = (uint64_t *)(v12 + v11 + v10[14]);
    uint64_t v14 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v15 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v12 + v11, v14, v15);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v16 = dispatch thunk of Error._code.getter();
    v13[3] = (uint64_t)&type metadata for Int;
    *unint64_t v13 = v16;
    sub_10015C504(v12);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return (uint64_t)v4;
  }
  unint64_t v17 = (unint64_t)sub_10052EF38(v8);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v17)
  {

    return 0;
  }
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(char **)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_10:
      swift_bridgeObjectRelease();

      return (uint64_t)v4;
    }
  }
  if ((v17 & 0xC000000000000001) != 0)
  {
    uint64_t v19 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v19 = (char *)*(id *)(v17 + 32);
LABEL_9:
    uint64_t v4 = v19;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010221C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v37 = (uint64_t)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v33 - v13;
  uint64_t v15 = v38;
  unint64_t v16 = sub_10010279C(a1, a2);
  if (v15)
  {
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v37, enum case for DIPError.Code.internalError(_:), v6);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v37 = a1;
    uint64_t v38 = v9;
    uint64_t v35 = 0;
    if (v16)
    {
      unint64_t v18 = v16;
      uint64_t v19 = v14;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        unint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        *(_DWORD *)unint64_t v22 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v39 = sub_100110D58(v37, (unint64_t)a2, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Randomized stored background activity exists with identifier %s", v22, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v38);
      return v18;
    }
    else
    {
      uint64_t v23 = v12;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v27 = v36;
      uint64_t v28 = v37;
      if (v26)
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v34 = v23;
        uint64_t v30 = (uint8_t *)v29;
        uint64_t v40 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315138;
        v33[1] = v30 + 4;
        swift_bridgeObjectRetain();
        uint64_t v39 = sub_100110D58(v28, (unint64_t)a2, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Creating new stored randomized background activity for identifier %s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v27 + 8))(v34, v38);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v38);
      }
      type metadata accessor for StoredRandomizedBackgroundActivity();
      id v31 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(v3 + 16)];
      NSString v32 = String._bridgeToObjectiveC()();
      [v31 setIdentifier:v32];

      return (uint64_t)v31;
    }
  }
}

unint64_t sub_10010279C(uint64_t a1, void *a2)
{
  uint64_t v24 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  os_log_type_t v25 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StoredRandomizedBackgroundActivity();
  uint64_t v7 = (void *)static StoredRandomizedBackgroundActivity.fetchRequest()();
  [v7 setFetchLimit:1];
  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v8 = swift_allocObject();
  long long v23 = xmmword_100610730;
  *(_OWORD *)(v8 + 16) = xmmword_100610730;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000E4DF8();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];

  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    uint64_t v26 = 0;
    unint64_t v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(63);
    v11._countAndFlagsBits = 0xD00000000000003DLL;
    v11._object = (void *)0x80000001006366B0;
    String.append(_:)(v11);
    v12._countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v25, enum case for DIPError.Code.coreDataError(_:), v24);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v13 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v14 = (*(unsigned __int8 *)(*(void *)v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v13 + 80);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = v23;
    unint64_t v16 = (uint64_t *)(v15 + v14 + v13[14]);
    uint64_t v17 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v18 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v15 + v14, v17, v18);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v19 = dispatch thunk of Error._code.getter();
    v16[3] = (uint64_t)&type metadata for Int;
    *unint64_t v16 = v19;
    sub_10015C504(v15);
    uint64_t v20 = type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return v20;
  }
  unint64_t v21 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v20) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v20)
    {
LABEL_9:
      swift_bridgeObjectRelease();

      return v20;
    }
  }
  if ((v21 & 0xC000000000000001) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v22 = *(id *)(v21 + 32);
LABEL_8:
    uint64_t v20 = (uint64_t)v22;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IdentityProofingDataContext()
{
  return self;
}

uint64_t sub_100102C34()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100102C6C()
{
  return sub_1000FFFE0(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_100102C78()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100102C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100102C98()
{
  return swift_release();
}

uint64_t sub_100102CA0()
{
  sub_100007764(&qword_100730CD0);
  uint64_t v1 = (_OWORD *)swift_allocObject();
  long long v3 = v0[1];
  long long v11 = *v0;
  long long v2 = v11;
  v1[1] = xmmword_100611000;
  v1[2] = v2;
  long long v4 = v0[2];
  long long v5 = v0[3];
  long long v9 = v3;
  long long v10 = v4;
  v1[3] = v4;
  v1[4] = v3;
  long long v8 = v5;
  v1[5] = v5;
  sub_1001061B8((uint64_t)&v11);
  sub_1001061B8((uint64_t)&v10);
  sub_1001061B8((uint64_t)&v9);
  sub_1001061B8((uint64_t)&v8);
  sub_100007764(&qword_1007268F0);
  sub_1001061E4();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t sub_100102D94()
{
  uint64_t v0 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  sub_10004440C((uint64_t)v0, qword_100723B88);
  uint64_t v1 = (void *)sub_1000443D4((uint64_t)v0, (uint64_t)qword_100723B88);
  long long v2 = (void *)((char *)v1 + v0[6]);
  *long long v2 = 0x3FF0000000000000;
  uint64_t v3 = enum case for DIPBackoffStrategy.exponential(_:);
  uint64_t v4 = type metadata accessor for DIPBackoffStrategy();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(v2, v3, v4);
  *uint64_t v1 = 0x4024000000000000;
  v1[1] = 3;
  *((unsigned char *)v1 + v0[7]) = 0;
  *((unsigned char *)v1 + v0[8]) = 0;
  *((unsigned char *)v1 + v0[9]) = 1;
  uint64_t v6 = (void *)((char *)v1 + v0[10]);
  *uint64_t v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t sub_100102E70(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v3[7] = type metadata accessor for KeyRevocationList();
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Milestone();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = type metadata accessor for KRLWebService.FetchResponse(0);
  v3[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v3[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPSignpost();
  v3[19] = v6;
  v3[20] = *(void *)(v6 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  return _swift_task_switch(sub_100103098, 0, 0);
}

uint64_t sub_100103098()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[6];
  static DaemonSignposts.KRL.fetchRevocationList.getter();
  DIPSignpost.init(_:)();
  uint64_t v5 = v4 + OBJC_IVAR____TtC8coreidvd13KRLWebService_dateProvider;
  v0[23] = *(void *)(v4 + OBJC_IVAR____TtC8coreidvd13KRLWebService_dateProvider);
  v0[24] = *(void *)(v5 + 8);
  dispatch thunk of static DateProvider.now.getter();
  Date.timeIntervalSince1970.getter();
  v0[25] = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[26] = v7;
  v0[27] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v1, v2);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[28] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001031BC;
  uint64_t v9 = v0[14];
  uint64_t v10 = v0[5];
  return sub_100103CCC(v9, v10);
}

uint64_t sub_1001031BC()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100103ADC;
  }
  else {
    uint64_t v2 = sub_1001032D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001032D0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 104);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  dispatch thunk of static DateProvider.now.getter();
  Date.timeIntervalSince1970.getter();
  *(void *)(v0 + 240) = v6;
  v1(v2, v3);
  uint64_t v7 = *(int *)(v5 + 28);
  *(_DWORD *)(v0 + 288) = v7;
  if (*(unsigned char *)(v4 + v7) == 1)
  {
    if (qword_10071F658 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_1007609C0;
  }
  else
  {
    if (qword_10071F650 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_1007609A8;
  }
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v12 = sub_1000443D4(v11, (uint64_t)v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  id v13 = [self standardUserDefaults];
  v14._uint64_t countAndFlagsBits = 0xD000000000000020;
  v14._object = (void *)0x8000000100636B00;
  object = NSUserDefaults.internalString(forKey:)(v14).value._object;

  if (object)
  {
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v17 = *(int *)(*(void *)(v0 + 104) + 24);
    id v18 = *(id *)(v16 + v17);
    uint64_t v19 = sub_10058F57C(0xD000000000000019, 0x8000000100636B30);

    swift_bridgeObjectRelease();
    if (v19)
    {

      *(void *)(v16 + v17) = v19;
    }
  }
  uint64_t v20 = sub_10017DF60();
  if (v21 >> 60 != 15)
  {
    uint64_t v22 = v20;
    unint64_t v23 = v21;
    uint64_t v24 = *(void *)(v0 + 112) + *(int *)(*(void *)(v0 + 104) + 20);
    sub_10000C5F4(*(void *)v24, *(void *)(v24 + 8));
    *(void *)uint64_t v24 = v22;
    *(void *)(v24 + 8) = v23;
  }
  os_log_type_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v28 = *(void *)(v0 + 112);
  uint64_t v27 = *(void *)(v0 + 120);
  uint64_t v29 = *(void *)(v0 + 104);
  static DaemonSignposts.KRL.processResponse.getter();
  DIPSignpost.init(_:)();
  dispatch thunk of static DateProvider.now.getter();
  Date.timeIntervalSince1970.getter();
  *(void *)(v0 + 248) = v30;
  v25(v26, v27);
  uint64_t v31 = *(int *)(v29 + 20);
  *(_DWORD *)(v0 + 292) = v31;
  NSString v32 = (uint64_t *)(v28 + v31);
  uint64_t v33 = *v32;
  *(void *)(v0 + 256) = *v32;
  unint64_t v34 = v32[1];
  *(void *)(v0 + 264) = v34;
  sub_10002CEB0(v33, v34);
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_100103614;
  uint64_t v36 = *(void *)(v0 + 72);
  return sub_100104CF8(v36, v33, v34);
}

uint64_t sub_100103614()
{
  unint64_t v2 = *(void *)(*(void *)v1 + 264);
  uint64_t v3 = *(void *)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  sub_10000C5F4(v3, v2);
  if (v0) {
    uint64_t v4 = sub_100103BB8;
  }
  else {
    uint64_t v4 = sub_100103764;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100103764()
{
  uint64_t v1 = *(int *)(v0 + 288);
  unint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  dispatch thunk of static DateProvider.now.getter();
  Date.timeIntervalSince1970.getter();
  double v7 = v6;
  v2(v3, v4);
  if ((*(unsigned char *)(v5 + v1) & 1) == 0)
  {
    if (qword_10071F5A0 != -1) {
      swift_once();
    }
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v9 = (uint64_t *)(v8 + *(int *)(v0 + 292));
    uint64_t v10 = qword_100760850;
    uint64_t v11 = *(void **)(v8 + *(int *)(*(void *)(v0 + 104) + 24));
    uint64_t v12 = *v9;
    unint64_t v13 = v9[1];
    id v14 = objc_allocWithZone((Class)NSCachedURLResponse);
    id v15 = v11;
    sub_10002CEB0(v12, v13);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v17 = [v14 initWithResponse:v15 data:isa];

    id v18 = sub_1005200D8(v17, 1);
    if (v18)
    {
      uint64_t v19 = v18;
      Class v20 = URLRequest._bridgeToObjectiveC()().super.isa;
      uint64_t v21 = type metadata accessor for DIPURLCache();
      *(void *)(v0 + 16) = v10;
      *(void *)(v0 + 24) = v21;
      [objc_msgSendSuper2((objc_super *)(v0 + 16), "storeCachedResponse:forRequest:", v19, v20);
    }
    sub_10000C5F4(v12, v13);

    if (qword_10071F660 != -1) {
      swift_once();
    }
    sub_1000443D4(*(void *)(v0 + 80), (uint64_t)qword_1007609D8);
    Milestone.log()();
  }
  uint64_t v22 = *(void *)(v0 + 168);
  uint64_t v40 = *(void *)(v0 + 176);
  uint64_t v41 = *(int *)(v0 + 288);
  uint64_t v24 = *(void *)(v0 + 152);
  uint64_t v23 = *(void *)(v0 + 160);
  uint64_t v25 = *(void *)(v0 + 112);
  uint64_t v26 = *(void *)(v0 + 72);
  uint64_t v39 = *(void *)(v0 + 64);
  uint64_t v27 = *(void *)(v0 + 56);
  double v28 = v7 - *(double *)(v0 + 248);
  double v29 = *(double *)(v0 + 240) - *(double *)(v0 + 200);
  uint64_t v30 = *(void *)(v0 + 32);
  uint64_t v31 = *(void *)(v0 + 40);
  sub_100106308(v26, v39);
  uint64_t v32 = *(void *)(*(void *)(v26 + *(int *)(v27 + 20)) + 16);
  sub_1001062A8(v26, (uint64_t (*)(void))type metadata accessor for KeyRevocationList);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v33(v22, v24);
  v33(v40, v24);
  LOBYTE(v23) = *(unsigned char *)(v25 + v41);
  uint64_t v34 = *(void *)(v31 + 16);
  uint64_t v35 = *(void *)(v31 + 24);
  sub_10010636C(v39, v30);
  uint64_t v36 = v30 + *(int *)(type metadata accessor for KRLFetchResult(0) + 20);
  *(void *)uint64_t v36 = v32;
  *(unsigned char *)(v36 + 8) = v23;
  *(double *)(v36 + 16) = v29;
  *(double *)(v36 + 24) = v28;
  *(void *)(v36 + 32) = v34;
  *(void *)(v36 + 40) = v35;
  swift_bridgeObjectRetain();
  sub_1001062A8(v25, type metadata accessor for KRLWebService.FetchResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t sub_100103ADC()
{
  (*(void (**)(void, void))(v0[20] + 8))(v0[22], v0[19]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100103BB8()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[14];
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0[20] + 8);
  v4(v0[21], v2);
  v4(v1, v2);
  sub_1001062A8(v3, type metadata accessor for KRLWebService.FetchResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100103CCC(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLRequest();
  v3[18] = v5;
  v3[19] = *(void *)(v5 - 8);
  v3[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[21] = v6;
  v3[22] = *(void *)(v6 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  sub_100007764(&qword_100720A68);
  v3[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v3[27] = v7;
  v3[28] = *(void *)(v7 - 8);
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  return _swift_task_switch(sub_100103F24, 0, 0);
}

uint64_t sub_100103F24()
{
  uint64_t v57 = v0;
  sub_100105A0C(*(uint8_t **)(v0 + 104), *(char **)(v0 + 264));
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  v3._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v3._object = (void *)0x8000000100636AE0;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (!v4) {
    goto LABEL_8;
  }
  id v5 = [v1 standardUserDefaults];
  v6._object = (void *)0x8000000100636A00;
  v6._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  object = NSUserDefaults.internalString(forKey:)(v6).value._object;

  uint64_t v9 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 208);
  if (object)
  {
    URL.init(string:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9) != 1)
    {
      uint64_t v12 = *(void *)(v0 + 256);
      uint64_t v11 = *(void *)(v0 + 264);
      uint64_t v13 = *(void *)(v0 + 248);
      uint64_t v15 = *(void *)(v0 + 216);
      id v14 = *(void (***)(void, void, void))(v0 + 224);
      v14[4](v12, *(void *)(v0 + 208), v15);
      v14[3](v11, v12, v15);
      defaultLogger()();
      v14[2](v13, v12, v15);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      BOOL v18 = os_log_type_enabled(v16, v17);
      uint64_t v19 = *(void *)(v0 + 248);
      uint64_t v20 = *(void *)(v0 + 256);
      uint64_t v22 = *(void *)(v0 + 216);
      uint64_t v21 = *(void *)(v0 + 224);
      uint64_t v23 = *(void *)(v0 + 176);
      uint64_t v51 = *(void *)(v0 + 168);
      uint64_t v53 = *(void *)(v0 + 200);
      if (v18)
      {
        uint64_t v50 = *(void *)(v0 + 216);
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136315138;
        uint64_t v25 = URL.absoluteString.getter();
        *(void *)(v0 + 88) = sub_100110D58(v25, v26, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v27(v19, v50);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "KRLWebService overriding KRL URL with %s", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v53, v51);
        v27(v20, v50);
      }
      else
      {

        Swift::String_optional v49 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v49(v19, v22);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v53, v51);
        v49(v20, v22);
      }
      goto LABEL_8;
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v8 + 56))(*(void *)(v0 + 208), 1, 1, *(void *)(v0 + 216));
  }
  sub_100106158(*(void *)(v0 + 208));
LABEL_8:
  defaultLogger()();
  double v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v54 = *(void *)(v0 + 192);
    uint64_t v30 = *(void *)(v0 + 176);
    uint64_t v52 = *(void *)(v0 + 168);
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    swift_beginAccess();
    sub_100106240((unint64_t *)&qword_100723C08, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 80) = sub_100110D58(v32, v33, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "KRLWebService fetch KRL at URL %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v34(v54, v52);
  }
  else
  {
    uint64_t v35 = *(void *)(v0 + 192);
    uint64_t v36 = *(void *)(v0 + 168);
    uint64_t v37 = *(void *)(v0 + 176);

    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v34(v35, v36);
  }
  *(void *)(v0 + 272) = v34;
  uint64_t v38 = *(void *)(v0 + 264);
  uint64_t v40 = *(void *)(v0 + 232);
  uint64_t v39 = *(void *)(v0 + 240);
  uint64_t v41 = *(void *)(v0 + 216);
  uint64_t v42 = *(void *)(v0 + 224);
  uint64_t v43 = *(void *)(v0 + 160);
  swift_beginAccess();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v44(v39, v38, v41);
  v44(v40, v39, v41);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  sub_1005DD4E8(v43, 0);
  URLRequest.cachePolicy.setter();
  URLRequest.httpMethod.setter();
  unint64_t v45 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  *(void *)(v0 + 280) = v45;
  *(void *)(v0 + 288) = (v42 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v45(v39, v41);
  uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v46;
  *uint64_t v46 = v0;
  v46[1] = sub_1001045A8;
  uint64_t v47 = *(void *)(v0 + 160);
  return v55(v47, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
}

uint64_t sub_1001045A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v10 = *v5;
  *(void *)(*v5 + 304) = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v11 = sub_10010486C;
  }
  else
  {
    *(unsigned char *)(v10 + 336) = a4 & 1;
    *(void *)(v10 + 312) = a3;
    *(void *)(v10 + 320) = a2;
    *(void *)(v10 + 328) = a1;
    uint64_t v11 = sub_1001046F8;
  }
  return _swift_task_switch(v11, 0, 0);
}

uint64_t sub_1001046F8()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 312);
  char v12 = *(unsigned char *)(v0 + 336);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 152) + 32))(v7, *(void *)(v0 + 160), *(void *)(v0 + 144));
  v4(v5, v6);
  Response = (int *)type metadata accessor for KRLWebService.FetchResponse(0);
  uint64_t v9 = (void *)(v7 + Response[5]);
  *uint64_t v9 = v2;
  v9[1] = v1;
  *(void *)(v7 + Response[6]) = v3;
  *(unsigned char *)(v7 + Response[7]) = v12;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10010486C()
{
  uint64_t v23 = v0;
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v20 = v0[23];
    uint64_t v21 = (void (*)(uint64_t, uint64_t))v0[34];
    uint64_t v19 = v0[21];
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    sub_100106240((unint64_t *)&qword_100723C08, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_100110D58(v5, v6, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2112;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[9] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "An error occurred while fetching KRL with url '%s': %@", (uint8_t *)v3, 0x16u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v21(v20, v19);
  }
  else
  {
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[34];
    uint64_t v9 = v0[23];
    uint64_t v10 = v0[21];
    swift_errorRelease();
    swift_errorRelease();

    v8(v9, v10);
  }
  BOOL v18 = (void (*)(uint64_t, uint64_t))v0[35];
  uint64_t v11 = v0[33];
  uint64_t v12 = v0[27];
  uint64_t v14 = v0[19];
  uint64_t v13 = v0[20];
  uint64_t v15 = v0[18];
  (*(void (**)(void, void, void))(v0[16] + 104))(v0[17], enum case for DIPError.Code.krlCouldNotFetch(_:), v0[15]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100106240((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v18(v11, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100104CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v4[12] = v7;
  v4[13] = *(void *)(v7 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for COSE_Sign1();
  v4[15] = v8;
  v4[16] = *(void *)(v8 - 8);
  v4[17] = swift_task_alloc();
  return _swift_task_switch(sub_100104ED0, 0, 0);
}

uint64_t sub_100104ED0()
{
  sub_10002CEB0(v0[3], v0[4]);
  COSE_Sign1.init(fromHexData:)();
  uint64_t v1 = (void *)(v0[5] + OBJC_IVAR____TtC8coreidvd13KRLWebService_validator);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10000C728(v1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[18] = v4;
  uint64_t v5 = type metadata accessor for KeyRevocationList();
  v0[19] = v5;
  uint64_t v6 = sub_100106240(&qword_100723C10, (void (*)(uint64_t))type metadata accessor for KeyRevocationList);
  sub_100106240(&qword_100723C18, (void (*)(uint64_t))type metadata accessor for KeyRevocationList);
  *uint64_t v4 = v0;
  v4[1] = sub_100105268;
  uint64_t v7 = v0[17];
  uint64_t v8 = v0[2];
  return sub_10000A8B0(v8, v7, v2, v5, v3, v6);
}

uint64_t sub_100105268()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001057B0;
  }
  else {
    uint64_t v2 = sub_10010537C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10010537C()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  dispatch thunk of static DateProvider.now.getter();
  char v4 = static Date.> infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4)
  {
    (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (qword_10071F668 != -1) {
      swift_once();
    }
    uint64_t v6 = v0[16];
    uint64_t v7 = v0[17];
    uint64_t v8 = v0[15];
    uint64_t v10 = v0[10];
    uint64_t v9 = v0[11];
    uint64_t v11 = v0[9];
    uint64_t v12 = v0[2];
    uint64_t v13 = type metadata accessor for Milestone();
    sub_1000443D4(v13, (uint64_t)qword_1007609F0);
    Milestone.log()();
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.krlExpired(_:), v11);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100106240((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1001062A8(v12, (uint64_t (*)(void))type metadata accessor for KeyRevocationList);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    defaultLogger()();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "An error occurred while parsing and verifying KRL response", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v17 = v0[10];
    uint64_t v18 = v0[11];
    uint64_t v19 = v0[8];
    uint64_t v20 = v0[9];
    uint64_t v21 = v0[6];
    uint64_t v22 = v0[7];

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v18, enum case for DIPError.Code.krlFailedToValidate(_:), v20);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_1001057B0()
{
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "An error occurred while parsing and verifying KRL response", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[9];
  uint64_t v9 = v0[6];
  uint64_t v8 = v0[7];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v9);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.krlFailedToValidate(_:), v7);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100106240((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100105A0C@<X0>(uint8_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v33 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v33 - v18;
  id v20 = [self standardUserDefaults];
  v21._object = (void *)0x8000000100636A00;
  v21._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  object = NSUserDefaults.internalString(forKey:)(v21).value._object;

  if (object)
  {
    URL.init(string:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v33 + OBJC_IVAR____TtC8coreidvd13KRLWebService_baseURL, v8);
  sub_100106158((uint64_t)v7);
LABEL_6:
  URL.appendingPathComponent(_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v14, v8);
  URL.appendingPathComponent(_:)();
  v23(v17, v8);
  sub_100102CA0();
  uint64_t v24 = v37;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v23(v19, v8);
  defaultLogger()();
  uint64_t v25 = v38;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v38, v24, v8);
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v37 = v4;
    os_log_type_t v29 = (uint8_t *)v28;
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v29 = 136315138;
    uint64_t v36 = v29 + 4;
    sub_100106240((unint64_t *)&qword_100723C08, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = sub_100110D58(v30, v31, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v23(v25, v8);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "KRLWebService constructed KRL URL: %s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v37, v35);
  }
  else
  {
    v23(v25, v8);

    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v4, v35);
  }
}

uint64_t sub_100105F58()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd13KRLWebService_baseURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC8coreidvd13KRLWebService_validator;

  return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v3);
}

id sub_100105FD4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KRLWebService(0);
  return [super dealloc];
}

uint64_t sub_10010608C()
{
  return type metadata accessor for KRLWebService(0);
}

uint64_t type metadata accessor for KRLWebService(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100723BE0);
}

uint64_t sub_1001060B4()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100106158(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100720A68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001061B8(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001061E4()
{
  unint64_t result = qword_100730CB0;
  if (!qword_100730CB0)
  {
    sub_100019364(&qword_1007268F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100730CB0);
  }
  return result;
}

uint64_t sub_100106240(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for KRLWebService.FetchResponse(uint64_t a1)
{
  return sub_100048DF0(a1, qword_100723C78);
}

uint64_t sub_1001062A8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100106308(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyRevocationList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010636C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyRevocationList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for KRLFetchResult(uint64_t a1)
{
  return sub_100048DF0(a1, qword_100723D10);
}

void *sub_1001063F0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URLRequest();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_10002CEB0(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = *(void **)((char *)a2 + v13);
    *(void *)((char *)a1 + v13) = v15;
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    id v16 = v15;
  }
  return a1;
}

void sub_1001064F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_10000C5F4(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  int v5 = *(void **)(a1 + *(int *)(a2 + 24));
}

uint64_t sub_100106574(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URLRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_10002CEB0(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void **)(a2 + v12);
  *(void *)(a1 + v12) = v14;
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  id v15 = v14;
  return a1;
}

uint64_t sub_100106624(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URLRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_10002CEB0(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_10000C5F4(v12, v13);
  uint64_t v14 = a3[6];
  id v15 = *(void **)(a2 + v14);
  id v16 = *(void **)(a1 + v14);
  *(void *)(a1 + v14) = v15;
  id v17 = v15;

  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1001066E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URLRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100106778(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URLRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10000C5F4(v8, v9);
  uint64_t v10 = a3[6];
  unint64_t v11 = *(void **)(a1 + v10);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);

  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100106820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100106834);
}

uint64_t sub_100106834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URLRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001068F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100106908);
}

uint64_t sub_100106908(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URLRequest();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1001069C4()
{
  uint64_t result = type metadata accessor for URLRequest();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100106A70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100007764(&qword_1007239B0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    unint64_t v11 = (int *)type metadata accessor for KeyRevocationList();
    *(uint64_t *)((char *)a1 + v11[5]) = *(uint64_t *)((char *)a2 + v11[5]);
    uint64_t v12 = v11[6];
    unint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    id v15 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    swift_bridgeObjectRetain();
    v15(v13, v14, v7);
    v15((char *)a1 + v11[7], (char *)a2 + v11[7], v7);
    uint64_t v16 = v11[8];
    id v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *id v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = *(int *)(a3 + 20);
    Swift::String v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    *(void *)Swift::String v21 = *(void *)v22;
    v21[8] = v22[8];
    *((_OWORD *)v21 + 1) = *((_OWORD *)v22 + 1);
    uint64_t v23 = *((void *)v22 + 5);
    *((void *)v21 + 4) = *((void *)v22 + 4);
    *((void *)v21 + 5) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100106C9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  uint64_t v4 = type metadata accessor for KeyRevocationList();
  swift_bridgeObjectRelease();
  int v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(a1 + *(int *)(v4 + 24), v2);
  v5(a1 + *(int *)(v4 + 28), v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_100106DD4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007764(&qword_1007239B0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = (int *)type metadata accessor for KeyRevocationList();
  *(void *)&a1[v9[5]] = *(void *)&a2[v9[5]];
  uint64_t v10 = v9[6];
  unint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  unint64_t v13 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  v13(v11, v12, v6);
  v13(&a1[v9[7]], &a2[v9[7]], v6);
  uint64_t v14 = v9[8];
  id v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = *((void *)v16 + 1);
  *(void *)id v15 = *(void *)v16;
  *((void *)v15 + 1) = v17;
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  *((_OWORD *)v19 + 1) = *((_OWORD *)v20 + 1);
  uint64_t v21 = *((void *)v20 + 5);
  *((void *)v19 + 4) = *((void *)v20 + 4);
  *((void *)v19 + 5) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_100106FB0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100007764(&qword_1007239B0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = (int *)type metadata accessor for KeyRevocationList();
  *(void *)&a1[v12[5]] = *(void *)&a2[v12[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void (**)(char *, char *, uint64_t))(v7 + 24);
  v13(&a1[v12[6]], &a2[v12[6]], v6);
  v13(&a1[v12[7]], &a2[v12[7]], v6);
  uint64_t v14 = v12[8];
  id v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *(void *)id v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  *((void *)v18 + 2) = *((void *)v19 + 2);
  *((void *)v18 + 3) = *((void *)v19 + 3);
  *((void *)v18 + 4) = *((void *)v19 + 4);
  *((void *)v18 + 5) = *((void *)v19 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100107214(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007764(&qword_1007239B0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  int v9 = (int *)type metadata accessor for KeyRevocationList();
  *(void *)&a1[v9[5]] = *(void *)&a2[v9[5]];
  int v10 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v10(&a1[v9[6]], &a2[v9[6]], v6);
  v10(&a1[v9[7]], &a2[v9[7]], v6);
  *(_OWORD *)&a1[v9[8]] = *(_OWORD *)&a2[v9[8]];
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  unint64_t v13 = &a2[v11];
  long long v14 = *((_OWORD *)v13 + 2);
  long long v15 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
  *((_OWORD *)v12 + 2) = v14;
  *(_OWORD *)uint64_t v12 = v15;
  return a1;
}

char *sub_1001073B8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100007764(&qword_1007239B0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = (int *)type metadata accessor for KeyRevocationList();
  *(void *)&a1[v12[5]] = *(void *)&a2[v12[5]];
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
  v13(&a1[v12[6]], &a2[v12[6]], v6);
  v13(&a1[v12[7]], &a2[v12[7]], v6);
  uint64_t v14 = v12[8];
  long long v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v18 = *(void *)v16;
  uint64_t v17 = *((void *)v16 + 1);
  *(void *)long long v15 = v18;
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  *((_OWORD *)v20 + 1) = *((_OWORD *)v21 + 1);
  uint64_t v23 = *((void *)v21 + 4);
  uint64_t v22 = *((void *)v21 + 5);
  *((void *)v20 + 4) = v23;
  *((void *)v20 + 5) = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001075EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100107600);
}

uint64_t sub_100107600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for KeyRevocationList();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 40);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001076C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001076D8);
}

uint64_t sub_1001076D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for KeyRevocationList();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 40) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100107798()
{
  uint64_t result = type metadata accessor for KeyRevocationList();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10010782C()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for COSEKey();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  return _swift_task_switch(sub_10010797C, 0, 0);
}

uint64_t sub_10010797C()
{
  unint64_t v1 = self;
  *(void *)(v0 + 128) = v1;
  id v2 = [v1 standardUserDefaults];
  v3._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v3._object = (void *)0x8000000100636BA0;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    defaultLogger()();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Deleting existing developer test mDL due to user defaults setting", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v10 = *(void *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100107D4C;
    return sub_10010973C();
  }
  else
  {
    id v13 = [*(id *)(v0 + 128) standardUserDefaults];
    v14._object = (void *)0x8000000100636BD0;
    v14._uint64_t countAndFlagsBits = 0xD000000000000026;
    Swift::Bool v15 = NSUserDefaults.internalBool(forKey:)(v14);

    if (v15)
    {
      defaultLogger()();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Skipping creation of developer test mDL due to user defaults setting", v18, 2u);
        swift_slowDealloc();
      }
      uint64_t v19 = *(void *)(v0 + 112);
      uint64_t v20 = *(void *)(v0 + 72);
      uint64_t v21 = *(void *)(v0 + 80);

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v22 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
      return v22(0, 0xE000000000000000);
    }
    else
    {
      uint64_t v23 = *(void *)(v0 + 40);
      v24._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
      v24._object = (void *)0x8000000100636C00;
      v25._uint64_t countAndFlagsBits = 0x6335333332343730;
      v25._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v25, v24);
      unint64_t v26 = sub_10000C728((void *)(v23 + 16), *(void *)(v23 + 40));
      *(void *)(v0 + 144) = OBJC_IVAR____TtC8coreidvd23DeveloperTestMDLManager_iso18013DocType;
      uint64_t v27 = ISO18013KnownDocTypes.rawValue.getter();
      uint64_t v29 = v28;
      *(void *)(v0 + 152) = v28;
      uint64_t v30 = *v26;
      unint64_t v31 = (void *)swift_task_alloc();
      *(void *)(v0 + 160) = v31;
      *unint64_t v31 = v0;
      v31[1] = sub_10010814C;
      return sub_1000BFE44((uint64_t)&off_1006F2220, v27, v29, v30);
    }
  }
}

uint64_t sub_100107D4C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100107ED0, 0, 0);
  }
}

uint64_t sub_100107ED0()
{
  id v1 = [*(id *)(v0 + 128) standardUserDefaults];
  v2._object = (void *)0x8000000100636BD0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000026;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    defaultLogger()();
    Swift::Bool v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Skipping creation of developer test mDL due to user defaults setting", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
    return v10(0, 0xE000000000000000);
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 40);
    v13._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
    v13._object = (void *)0x8000000100636C00;
    v14._uint64_t countAndFlagsBits = 0x6335333332343730;
    v14._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v14, v13);
    Swift::Bool v15 = sub_10000C728((void *)(v12 + 16), *(void *)(v12 + 40));
    *(void *)(v0 + 144) = OBJC_IVAR____TtC8coreidvd23DeveloperTestMDLManager_iso18013DocType;
    uint64_t v16 = ISO18013KnownDocTypes.rawValue.getter();
    uint64_t v18 = v17;
    *(void *)(v0 + 152) = v17;
    uint64_t v19 = *v15;
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10010814C;
    return sub_1000BFE44((uint64_t)&off_1006F2220, v16, v18, v19);
  }
}

uint64_t sub_10010814C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 168) = a1;
  *(void *)(v3 + 176) = v1;
  swift_task_dealloc();
  if (v1)
  {
    Swift::Bool v4 = sub_1001087C8;
  }
  else
  {
    swift_bridgeObjectRelease();
    Swift::Bool v4 = sub_100108268;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100108268()
{
  uint64_t v37 = v0;
  defaultLogger()();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v30 = v0[10];
    uint64_t v32 = v0[9];
    uint64_t v34 = v0[13];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v4 = ISO18013KnownDocTypes.rawValue.getter();
    v0[4] = sub_100110D58(v4, v5, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Developer Test mDL credential already exists for docType %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v6(v34, v32);
  }
  else
  {
    uint64_t v7 = v0[13];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_release_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[23] = v6;
  if (*(void *)(v0[21] + 16)
    && (unint64_t v10 = sub_100590548(0x797469746E656469, 0xED0000747365742DLL), (v11 & 1) != 0)
    && (uint64_t v12 = *(void **)(*(void *)(v0[21] + 56) + 8 * v10),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        v12[2]))
  {
    uint64_t v13 = v12[4];
    uint64_t v35 = v12[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    defaultLogger()();
    swift_retain_n();
    Swift::String v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v31 = v0[9];
      uint64_t v33 = v0[12];
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v17 = ISO18013KnownDocTypes.rawValue.getter();
      v0[3] = sub_100110D58(v17, v18, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Developer Test mDL credential already exists for docType %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v19 = v31;
      uint64_t v20 = v33;
    }
    else
    {
      uint64_t v27 = v0[12];
      uint64_t v28 = v0[9];
      swift_release_n();

      uint64_t v20 = v27;
      uint64_t v19 = v28;
    }
    v6(v20, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v29(v13, v35);
  }
  else
  {
    uint64_t v21 = v0[5];
    swift_bridgeObjectRelease();
    id v22 = [objc_allocWithZone((Class)DCCredentialOptions) init];
    v0[24] = v22;
    [v22 setReaderAuthenticationPolicy:1];
    [v22 setPayloadProtectionPolicy:0];
    [v22 setPresentmentAuthPolicy:1];
    uint64_t v23 = *sub_10000C728((void *)(v21 + 16), *(void *)(v21 + 40));
    id v24 = v22;
    Swift::String v25 = (void *)swift_task_alloc();
    v0[25] = v25;
    *Swift::String v25 = v0;
    v25[1] = sub_100108878;
    return sub_1000C1414(0x797469746E656469, 0xED0000747365742DLL, (uint64_t)v22, v23);
  }
}

uint64_t sub_1001087C8()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100108878(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 208) = a1;
  *(void *)(v4 + 216) = a2;
  *(void *)(v4 + 224) = v2;
  swift_task_dealloc();
  if (v2)
  {
    unint64_t v5 = sub_100108B8C;
  }
  else
  {

    unint64_t v5 = sub_100108998;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100108998()
{
  uint64_t v1 = v0[5];
  v2._object = (void *)0x8000000100636C40;
  v3._uint64_t countAndFlagsBits = 0x3362373162396663;
  v3._object = (void *)0xE800000000000000;
  v2._uint64_t countAndFlagsBits = 0xD000000000000044;
  logMilestone(tag:description:)(v3, v2);
  uint64_t v4 = *sub_10000C728((void *)(v1 + 16), *(void *)(v1 + 40));
  unint64_t v5 = (void *)swift_task_alloc();
  v0[29] = v5;
  *unint64_t v5 = v0;
  v5[1] = sub_100108A78;
  uint64_t v7 = v0[26];
  uint64_t v6 = v0[27];
  return sub_1000C195C(v7, v6, v4);
}

uint64_t sub_100108A78(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100108EF8;
  }
  else {
    uint64_t v4 = sub_100108C40;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100108B8C()
{
  uint64_t v1 = *(void **)(v0 + 192);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100108C40()
{
  Swift::String v2 = *(void **)(v0 + 240);
  uint64_t v1 = *(void *)(v0 + 248);
  type metadata accessor for CBORDecoder();
  swift_allocObject();
  CBORDecoder.init()();
  id v3 = [v2 publicKeyCOSEKey];
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  sub_10010ADAC(&qword_100723E18, (void (*)(uint64_t))&type metadata accessor for COSEKey);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)();
  if (v1)
  {
    uint64_t v7 = *(void **)(v0 + 240);

    swift_bridgeObjectRelease();
    sub_10000C5F4(v4, v6);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    unint64_t v10 = *(void **)(v0 + 40);
    sub_10000C5F4(v4, v6);
    swift_release();
    v11._object = (void *)0x8000000100636C90;
    v12._uint64_t countAndFlagsBits = 0x3031613830353138;
    v12._object = (void *)0xE800000000000000;
    v11._uint64_t countAndFlagsBits = 0xD000000000000045;
    logMilestone(tag:description:)(v12, v11);
    uint64_t v13 = v10 + 7;
    uint64_t v14 = v10[10];
    uint64_t v15 = v10[11];
    sub_10000C728(v13, v14);
    unint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 8) + **(int **)(v15 + 8));
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100108FB0;
    uint64_t v17 = *(void *)(v0 + 64);
    return v18(v17, v14, v15);
  }
}

uint64_t sub_100108EF8()
{
  uint64_t v1 = *(void **)(v0 + 192);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100108FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[33] = a1;
  v4[34] = a2;
  v4[35] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    unint64_t v5 = sub_100109664;
  }
  else
  {
    unint64_t v5 = sub_1001090D0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001090D0()
{
  uint64_t v1 = *sub_10000C728((void *)(v0[5] + 16), *(void *)(v0[5] + 40));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[36] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100109184;
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[34];
  uint64_t v6 = v0[26];
  uint64_t v5 = v0[27];
  return sub_1000C1E94(v6, v5, v3, v4, 0, v1);
}

uint64_t sub_100109184()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100109584;
  }
  else
  {
    uint64_t v2 = sub_1001092A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001092A0()
{
  uint64_t v29 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v17 = v0[33];
    unint64_t v18 = v0[34];
    uint64_t v4 = v0[26];
    unint64_t v3 = v0[27];
    uint64_t v22 = v0[11];
    uint64_t v19 = (void *)v0[30];
    uint64_t v20 = (void *)v0[24];
    uint64_t v21 = v0[9];
    uint64_t v5 = v0[7];
    id v24 = (void (*)(uint64_t, uint64_t))v0[23];
    uint64_t v26 = v0[8];
    uint64_t v23 = v0[6];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_100110D58(v4, v3, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Developer Test MDL creation completed with identifier %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_10000C5F4(v17, v18);

    v24(v22, v21);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v26, v23);
  }
  else
  {
    uint64_t v7 = (void *)v0[30];
    uint64_t v8 = (void *)v0[24];
    uint64_t v9 = v0[11];
    uint64_t v10 = v0[9];
    Swift::String v25 = (void (*)(uint64_t, uint64_t))v0[23];
    uint64_t v27 = v0[8];
    uint64_t v11 = v0[6];
    uint64_t v12 = v0[7];
    sub_10000C5F4(v0[33], v0[34]);

    swift_bridgeObjectRelease_n();
    v25(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v27, v11);
  }
  uint64_t v13 = v0[26];
  uint64_t v14 = v0[27];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v15(v13, v14);
}

uint64_t sub_100109584()
{
  uint64_t v1 = (void *)v0[30];
  os_log_type_t v2 = (void *)v0[24];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[6];
  sub_10000C5F4(v0[33], v0[34]);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100109664()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10010973C()
{
  v1[15] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[16] = v2;
  v1[17] = *(void *)(v2 - 8);
  v1[18] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[19] = v3;
  v1[20] = *(void *)(v3 - 8);
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  return _swift_task_switch(sub_100109868, 0, 0);
}

uint64_t sub_100109868()
{
  uint64_t v1 = *sub_10000C728((void *)(*(void *)(v0 + 120) + 16), *(void *)(*(void *)(v0 + 120) + 40));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100109920;
  return sub_1000BFE44((uint64_t)&off_1006F21F0, 0, 0, v1);
}

uint64_t sub_100109920(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 192) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_100109A7C, 0, 0);
  }
}

uint64_t sub_100109A7C()
{
  if (*(void *)(v0[24] + 16) && (unint64_t v1 = sub_100590548(0x797469746E656469, 0xED0000747365742DLL), (v2 & 1) != 0))
  {
    uint64_t v3 = *(void *)(*(void *)(v0[24] + 56) + 8 * v1);
    v0[25] = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v3 + 16);
    v0[26] = v4;
    if (v4)
    {
      v0[27] = 0;
      uint64_t v5 = v0[25];
      uint64_t v6 = v0[15];
      v0[28] = *(void *)(v5 + 32);
      v0[29] = *(void *)(v5 + 40);
      sub_10000C728((void *)(v6 + 16), *(void *)(v6 + 40));
      swift_bridgeObjectRetain();
      id v7 = objc_allocWithZone((Class)DCCredentialStore);
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v9 = [v7 initWithPartitions:isa];
      v0[30] = v9;

      NSString v10 = String._bridgeToObjectiveC()();
      v0[31] = v10;
      v0[2] = v0;
      v0[3] = sub_100109D90;
      uint64_t v11 = swift_continuation_init();
      v0[10] = _NSConcreteStackBlock;
      v0[11] = 0x40000000;
      v0[12] = sub_100529EC4;
      v0[13] = &unk_1006F87A0;
      v0[14] = v11;
      [v9 deleteCredential:v10 completion:v0 + 10];
      return _swift_continuation_await(v0 + 2);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No test mDL credentials to delete", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = v0[20];
    uint64_t v15 = v0[21];
    uint64_t v17 = v0[19];

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100109D90()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 256) = v1;
  if (v1) {
    char v2 = sub_10010A254;
  }
  else {
    char v2 = sub_100109EA0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100109EA0()
{
  uint64_t v29 = v0;
  uint64_t v1 = *(void **)(v0 + 248);

  defaultLogger()();
  swift_bridgeObjectRetain();
  char v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 232);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 176);
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 160);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v10 + 4) = sub_100110D58(v6, v5, &v28);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully deleted credentialIdentifier: %s", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 176);
    uint64_t v12 = *(void *)(v0 + 152);
    uint64_t v13 = *(void *)(v0 + 160);
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  uint64_t v14 = *(void *)(v0 + 208);
  uint64_t v15 = *(void *)(v0 + 216) + 1;
  v16._object = (void *)0x8000000100636CE0;
  v17._uint64_t countAndFlagsBits = 0x6562363239353565;
  v17._object = (void *)0xE800000000000000;
  v16._uint64_t countAndFlagsBits = 0xD000000000000040;
  logMilestone(tag:description:)(v17, v16);
  if (v15 == v14)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 216) + 1;
    *(void *)(v0 + 216) = v20;
    uint64_t v21 = *(void *)(v0 + 120);
    uint64_t v22 = *(void *)(v0 + 200) + 16 * v20;
    *(void *)(v0 + 224) = *(void *)(v22 + 32);
    *(void *)(v0 + 232) = *(void *)(v22 + 40);
    sub_10000C728((void *)(v21 + 16), *(void *)(v21 + 40));
    swift_bridgeObjectRetain();
    id v23 = objc_allocWithZone((Class)DCCredentialStore);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v25 = [v23 initWithPartitions:isa];
    *(void *)(v0 + 240) = v25;

    NSString v26 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 248) = v26;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_100109D90;
    uint64_t v27 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_100529EC4;
    *(void *)(v0 + 104) = &unk_1006F87A0;
    *(void *)(v0 + 112) = v27;
    [v25 deleteCredential:v26 completion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_10010A254()
{
  uint64_t v1 = (void *)v0[31];
  char v2 = (void *)v0[30];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v5 = v0[16];
  swift_willThrow();

  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10010ADAC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10010A420()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[7] = v1;
  v0[8] = *(void *)(v1 - 8);
  v0[9] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v0[10] = v2;
  v0[11] = *(void *)(v2 - 8);
  v0[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ISO18013KnownDocTypes();
  v0[13] = v3;
  v0[14] = *(void *)(v3 - 8);
  v0[15] = swift_task_alloc();
  return _swift_task_switch(sub_10010A594, 0, 0);
}

uint64_t sub_10010A594()
{
  id v1 = [self standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 stringForKey:v2];

  if (!v3)
  {
LABEL_7:
    uint64_t v9 = v0[15];
    (*(void (**)(uint64_t, void, void))(v0[14] + 104))(v9, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v0[13]);
    v0[5] = &type metadata for IDCredCredentialStore;
    v0[6] = &off_1006F7DB8;
    v0[2] = &off_1006F2250;
    type metadata accessor for DeveloperTestMDLManager();
    uint64_t v10 = (uint64_t *)swift_allocObject();
    uint64_t v11 = sub_1000279F4((uint64_t)(v0 + 2), (uint64_t)&type metadata for IDCredCredentialStore);
    uint64_t v12 = (uint64_t *)swift_task_alloc();
    value witness table for Builtin.BridgeObject[2](v12, v11, &type metadata for IDCredCredentialStore);
    v0[16] = sub_10029403C(*v12, v9, v10);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
    swift_task_dealloc();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[17] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10010A8C8;
    return sub_10010973C();
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  if (v4 == 0x797469746E656469 && v6 == 0xEC00000074736554)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      goto LABEL_7;
    }
  }
  v15._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  v15._object = (void *)0x8000000100636E40;
  v16._uint64_t countAndFlagsBits = 0x6238326565363630;
  v16._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v16, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_10010A8C8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10010AA24, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10010AA24()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v4);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10010ADAC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10010AC0C()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 56);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd23DeveloperTestMDLManager_iso18013DocType;
  uint64_t v2 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10010ACBC()
{
  return type metadata accessor for DeveloperTestMDLManager();
}

uint64_t type metadata accessor for DeveloperTestMDLManager()
{
  uint64_t result = qword_100723D78;
  if (!qword_100723D78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10010AD10()
{
  uint64_t result = type metadata accessor for ISO18013KnownDocTypes();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10010ADAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10010ADF4()
{
  type metadata accessor for IdentityCredentialStoreHelper();
  uint64_t v0 = swift_allocObject();
  id v1 = objc_allocWithZone((Class)DCCredentialStore);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v3 = [v1 initWithPartitions:isa];

  *(void *)(v0 + 16) = v3;
  qword_100760290 = v0;
}

uint64_t sub_10010AE7C()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_10010AE9C, 0, 0);
}

uint64_t sub_10010AE9C()
{
  uint64_t v1 = *(void **)(v0[16] + 16);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[17] = isa;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10010AFC4;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000C0744;
  v0[13] = &unk_1006F87B8;
  v0[14] = v3;
  [v1 credentialIdentifiersInPartitions:isa completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10010AFC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    uint64_t v2 = sub_10010B18C;
  }
  else {
    uint64_t v2 = sub_10010B0D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10010B0D4()
{
  uint64_t v1 = *(void *)(v0 + 120);
  if (*(void *)(v1 + 16) && (unint64_t v2 = sub_100590548(0x797469746E656469, 0xE800000000000000), (v3 & 1) != 0))
  {
    uint64_t v4 = *(void **)(*(void *)(v1 + 56) + 8 * v2);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  uint64_t v5 = *(uint64_t (**)(void *))(v0 + 8);
  return v5(v4);
}

uint64_t sub_10010B18C()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t type metadata accessor for IdentityCredentialStoreHelper()
{
  return self;
}

unint64_t sub_10010B220(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0x726F727265;
  }
  unint64_t v4 = 1919968359;
  if ((a1 != 1919968359 || a2 != 0xE400000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    unint64_t v4 = 0x72466E6163536469;
    if ((a1 != 0xD00000000000001ALL || a2 != 0x80000001006370D0)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      unint64_t v4 = 0xD000000000000013;
      if ((a1 != 0xD000000000000022 || a2 != 0x8000000100637080)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unint64_t v4 = 0x61426E6163536469;
        if ((a1 != 0xD000000000000019 || a2 != 0x8000000100637060)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          unint64_t v4 = 0xD000000000000012;
          if ((a1 != 0xD000000000000021 || a2 != 0x8000000100637010)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            unint64_t v4 = 0x6569666C6573;
            if ((a1 != 0x6569666C6573 || a2 != 0xE600000000000000)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              unint64_t v4 = 0x65646F4368747561;
              if ((a1 != 0x65646F6368747561 || a2 != 0xE800000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                unint64_t v4 = 0xD000000000000010;
                if ((a1 != 0xD000000000000010 || a2 != 0x8000000100636FD0)
                  && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  if (a1 == 0xD000000000000016 && a2 == 0x8000000100636F70
                    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    return 0xD00000000000001ELL;
                  }
                  if ((a1 != 0x776569766572 || a2 != 0xE600000000000000)
                    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    unint64_t v4 = 0xD000000000000012;
                    if ((a1 != 0xD000000000000014 || a2 != 0x8000000100636F30)
                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                    {
                      unint64_t v4 = 0x7972746572;
                      if ((a1 != 0x7972746572 || a2 != 0xE500000000000000)
                        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                      {
                        unint64_t v4 = 0x416F547964616572;
                        if ((a1 != 0x416F547964616572 || a2 != 0xEC00000044496464)
                          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                        {
                          unint64_t v4 = 0xD000000000000019;
                          if ((a1 != 0xD00000000000001ELL || a2 != 0x8000000100633610)
                            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                          {
                            unint64_t v4 = 0xD00000000000001ELL;
                            if ((a1 != 0xD000000000000017 || a2 != 0x8000000100633580)
                              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                            {
                              unint64_t v4 = 0xD00000000000001FLL;
                              if ((a1 != 0xD000000000000016 || a2 != 0x8000000100636EB0)
                                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                              {
                                return 0x726F727265;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t initializeWithCopy for DigitalPresentmentHelper(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for DigitalPresentmentHelper(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 initializeWithTake for UploadedDataInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DigitalPresentmentHelper(uint64_t a1, uint64_t a2)
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentHelper(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentHelper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentHelper()
{
  return &type metadata for DigitalPresentmentHelper;
}

uint64_t sub_10010B944(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_100113C48(a1, (uint64_t)a2, a3, a4);
  swift_bridgeObjectRelease();
  uint64_t v7 = a2 + 1;
  if (v4)
  {
    long long v12 = *a2;
    sub_1001145E0((uint64_t)&v12);
    long long v11 = *v7;
    sub_1001145E0((uint64_t)&v11);
  }
  else
  {
    long long v10 = *a2;
    sub_1001145E0((uint64_t)&v10);
    long long v9 = *v7;
    sub_1001145E0((uint64_t)&v9);
  }
  return v6;
}

void *sub_10010B9E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v56 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v66 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v60 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PresentationStyle();
  uint64_t v64 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v59 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for IdentityDocumentPresentmentSource();
  uint64_t v57 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v63 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v53 = *(void *)(v5 - 8);
  uint64_t v54 = v5;
  __chkstk_darwin(v5);
  uint64_t v55 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100723FC8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v67 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v65 = (uint64_t)&v47 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v47 - v12);
  uint64_t v14 = sub_100007764(&qword_100723FD0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  Swift::String v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v47 - v18);
  uint64_t v20 = type metadata accessor for IdentityDocumentElementCategoryGroups();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v1 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_documentType;
  uint64_t v25 = v68;
  __n128 result = sub_10010C284(*(void *)(v1 + 16), v1 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_documentType, *(void *)(v1+ OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_elementsToIntentToStore), (uint64_t)v23);
  if (!v25)
  {
    uint64_t v50 = v24;
    uint64_t v51 = v17;
    uint64_t v52 = v21;
    sub_10010C598(v19);
    uint64_t v68 = 0;
    uint64_t v47 = v1;
    Swift::String_optional v49 = v19;
    uint64_t v27 = v23;
    uint64_t v28 = IdentityDocumentElementCategoryGroups.maximumRetentionPeriod.getter();
    uint64_t v48 = v20;
    if (v29)
    {
      uint64_t v32 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime();
      uint64_t v33 = (uint64_t)v13;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 1, 1, v32);
      uint64_t v30 = v66;
      uint64_t v34 = (uint64_t)v67;
      uint64_t v36 = v63;
      uint64_t v35 = v64;
      uint64_t v37 = v62;
    }
    else
    {
      uint64_t v30 = v66;
      if (v28 <= 0)
      {
        uint64_t v31 = (unsigned int *)&enum case for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime.indefinitely(_:);
      }
      else
      {
        *uint64_t v13 = v28;
        uint64_t v31 = (unsigned int *)&enum case for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime.limit(_:);
      }
      uint64_t v38 = *v31;
      uint64_t v39 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104))(v13, v38, v39);
      uint64_t v36 = v63;
      uint64_t v35 = v64;
      uint64_t v33 = (uint64_t)v13;
      uint64_t v34 = (uint64_t)v67;
      uint64_t v37 = v62;
      type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v33, 0, 1, v39);
    }
    uint64_t v40 = *(void *)(IdentityDocumentElementCategoryGroups.retainingElements.getter() + 16);
    swift_bridgeObjectRelease();
    uint64_t v66 = v33;
    uint64_t v41 = v33;
    uint64_t v42 = v65;
    sub_100048D6C(v41, v65, &qword_100723FC8);
    if (v40
      && (uint64_t v43 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime(),
          (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v42, 1, v43) == 1))
    {
      sub_10000C6CC(v42, &qword_100723FC8);
      (*(void (**)(char *, void, uint64_t))(v53 + 104))(v55, enum case for DIPError.Code.digitalPresentmentStorageLifetimeNotSpecified(_:), v54);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100114618((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v44 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v68 = v44;
      swift_willThrow();
      sub_10000C6CC(v66, &qword_100723FC8);
      sub_10000C6CC((uint64_t)v49, &qword_100723FD0);
      return (void *)(*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v27, v48);
    }
    else
    {
      sub_10000C6CC(v42, &qword_100723FC8);
      uint64_t v65 = IdentityDocumentElementCategoryGroups.notRetainingElements.getter();
      uint64_t v64 = IdentityDocumentElementCategoryGroups.displayOnlyElements.getter();
      uint64_t v63 = (char *)IdentityDocumentElementCategoryGroups.retainingElements.getter();
      (*(void (**)(char *, void, uint64_t))(v57 + 104))(v36, enum case for IdentityDocumentPresentmentSource.app(_:), v37);
      (*(void (**)(char *, void, uint64_t))(v35 + 104))(v59, enum case for DigitalPresentmentDisplayConfiguration.PresentationStyle.consentSheet(_:), v58);
      uint64_t v45 = v66;
      sub_100048D6C(v66, v34, &qword_100723FC8);
      uint64_t v62 = (uint64_t)v27;
      uint64_t v46 = (uint64_t)v49;
      sub_100048D6C((uint64_t)v49, (uint64_t)v51, &qword_100723FD0);
      uint64_t v58 = *(void *)(v47 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_passID);
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v60, v50, v56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DigitalPresentmentDisplayConfiguration.init(elements:displayOnlyElements:persistedElements:presentmentSource:presentationStyle:persistedElementsStorageLifetimePeriod:clientDisplayInfo:passID:usageDescription:passName:documentType:)();
      sub_10000C6CC(v45, &qword_100723FC8);
      sub_10000C6CC(v46, &qword_100723FD0);
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v62, v48);
    }
  }
  return result;
}

void *sub_10010C284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100723FE0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v25 = v4;
  __n128 result = sub_10010D740((void (*)(uint64_t *__return_ptr, void *))sub_10010EF5C, (uint64_t)v22, a1);
  if (!v5)
  {
    uint64_t v21 = v12;
    uint64_t v17 = v26;
    ISO18013KnownDocTypes.rawValue.getter();
    IdentityDocumentElementCategoryGroups.init(documentType:documentElements:)();
    uint64_t v18 = type metadata accessor for IdentityDocumentElementCategoryGroups();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18) == 1)
    {
      sub_10000C6CC((uint64_t)v15, &qword_100723FE0);
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v21, enum case for DIPError.Code.digitalPresentmentInvalidElement(_:), v9);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100114618((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (void *)swift_willThrow();
    }
    else
    {
      return (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v17, v15, v18);
    }
  }
  return result;
}

uint64_t sub_10010C598@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for AuditToken();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v3 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingClientConfig;
  if (*(unsigned char *)(v9 + *(int *)(type metadata accessor for DigitalPresentmentCallingClientConfig() + 20)) == 1)
  {
    uint64_t v10 = *(void *)(v3
                    + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_merchantNameOverride
                    + 8);
    *a1 = *(void *)(v3 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_merchantNameOverride);
    a1[1] = v10;
    uint64_t v11 = enum case for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo.appleBranded(_:);
    uint64_t v12 = type metadata accessor for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(void *, uint64_t, uint64_t))(v13 + 104))(a1, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
    return swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
    type metadata accessor for DigitalPresentmentCallingAppDataProvider();
    uint64_t v15 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15 + OBJC_IVAR____TtC8coreidvd40DigitalPresentmentCallingAppDataProvider_auditToken, v8, v5);
    GSMainScreenScaleFactor();
    sub_10023C3C4(v29, 54.0, 54.0, v16);
    swift_setDeallocating();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15 + OBJC_IVAR____TtC8coreidvd40DigitalPresentmentCallingAppDataProvider_auditToken, v5);
    swift_deallocClassInstance();
    sub_1000BEA14((uint64_t)v29, (uint64_t)&v30, &qword_100723FD8);
    uint64_t v17 = v31;
    if (v31)
    {
      uint64_t v18 = v30;
      uint64_t v33 = v2;
      uint64_t v19 = v32;
      uint64_t v20 = v3 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData;
      uint64_t v21 = *(void *)(v3 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData);
      uint64_t v22 = *(void *)(v20 + 8);
      uint64_t v23 = *(void **)(v20 + 16);
      sub_1000BEA14((uint64_t)v29, v20, &qword_100723FD8);
      id v24 = v19;
      swift_bridgeObjectRetain();
      sub_10010EF18(v21, v22, v23);
      *a1 = v18;
      a1[1] = v17;
      a1[2] = v19;
      uint64_t v25 = enum case for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo.custom(_:);
      uint64_t v26 = type metadata accessor for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo();
      uint64_t v27 = *(void *)(v26 - 8);
      (*(void (**)(void *, uint64_t, uint64_t))(v27 + 104))(a1, v25, v26);
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(a1, 0, 1, v26);
    }
    else
    {
      uint64_t v28 = type metadata accessor for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a1, 1, 1, v28);
    }
  }
}

uint64_t sub_10010C94C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v17 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = *(_OWORD *)(a1 + 16);
  v21[0] = *(_OWORD *)a1;
  v21[1] = v10;
  char v22 = *(unsigned char *)(a1 + 32);
  Swift::String v11 = (Swift::String)v10;
  uint64_t v12 = static IdentityDocumentElementCategory.groups(forDocumentType:namespace:identifier:)();
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_10010B944(v12, v21, a2, a3);
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v18 = v13;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = 0;
    unint64_t v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v15._uint64_t countAndFlagsBits = 0x20746E656D656C45;
    v15._object = (void *)0xE800000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRetain();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v16._object = (void *)0x8000000100637420;
    v16._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v16);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v17, enum case for DIPError.Code.digitalPresentmentMissingElementGroup(_:), v7);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100114618((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_10010CC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for IdentityDocumentElement.RetentionIntent();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10010CD04(a3, v6);
  return IdentityDocumentElement.init(namespace:identifier:retentionIntent:)();
}

uint64_t sub_10010CD04@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v79 = a1;
  uint64_t v82 = type metadata accessor for Logger();
  uint64_t v91 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v87 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for IdentityIntentToStore();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v77 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v86 = (char *)&v69 - v8;
  uint64_t v9 = type metadata accessor for IdentityElement();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v83 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v99 = (char *)&v69 - v14;
  __chkstk_darwin(v13);
  uint64_t v100 = (char *)&v69 - v15;
  uint64_t v16 = sub_100007764(&qword_100723FF0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (void **)((char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __chkstk_darwin(v17);
  char v22 = (char *)&v69 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v85 = (char *)&v69 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v69 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = *(void (**)(void))(v5 + 56);
  uint64_t v88 = (uint64_t)&v69 - v29;
  uint64_t v96 = v28;
  uint64_t v97 = v5 + 56;
  v28();
  uint64_t v30 = sub_100113104();
  uint64_t v32 = v30[2];
  if (v32)
  {
    unint64_t v90 = v27;
    unint64_t v70 = v19;
    uint64_t v71 = v22;
    uint64_t v72 = a2;
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v33 = v10 + 16;
    char v98 = v34;
    unint64_t v35 = (*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64);
    uint64_t v69 = v30;
    uint64_t v36 = (char *)v30 + v35;
    uint64_t v95 = *(void *)(v33 + 56);
    uint64_t v94 = (uint64_t (**)(char *, uint64_t))(v33 + 72);
    int v93 = enum case for IdentityElement.ageIsOver(_:);
    int v92 = enum case for IdentityElement.age(_:);
    uint64_t v73 = v5 + 16;
    uint64_t v89 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v37 = (void (**)(char *, uint64_t))(v33 - 8);
    uint64_t v80 = (void (**)(char *, uint64_t))(v91 + 1);
    uint64_t v91 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v78 = v5;
    char v84 = (void (**)(char *, uint64_t))(v5 + 8);
    *(void *)&long long v31 = 136315138;
    long long v75 = v31;
    uint64_t v74 = (char *)&type metadata for Any + 8;
    uint64_t v38 = v79;
    uint64_t v81 = v33;
    uint64_t v76 = v4;
    do
    {
      uint64_t v42 = (uint64_t)v100;
      uint64_t v43 = v98;
      v98(v100, (uint64_t)v36, v9);
      uint64_t v44 = v99;
      v43(v99, v42, v9);
      int v45 = (*v94)(v44, v9);
      if (v45 == v93 || v45 == v92)
      {
        uint64_t v47 = v90;
        sub_10010DDE0(v38, v90);
      }
      else if (*(void *)(v38 + 16) && (unint64_t v48 = sub_100590B28((uint64_t)v100), (v49 & 1) != 0))
      {
        uint64_t v50 = v78;
        uint64_t v51 = v77;
        (*(void (**)(char *, unint64_t, uint64_t))(v78 + 16))(v77, *(void *)(v38 + 56) + *(void *)(v78 + 72) * v48, v4);
        uint64_t v47 = v90;
        (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v90, v51, v4);
        ((void (*)(char *, void, uint64_t, uint64_t))v96)(v47, 0, 1, v4);
        (*v37)(v99, v9);
      }
      else
      {
        uint64_t v52 = v87;
        defaultLogger()();
        uint64_t v53 = v83;
        v98(v83, (uint64_t)v100, v9);
        uint64_t v54 = Logger.logObject.getter();
        uint64_t v55 = v53;
        os_log_type_t v56 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v54, v56))
        {
          uint64_t v57 = swift_slowAlloc();
          uint64_t v101 = swift_slowAlloc();
          *(_DWORD *)uint64_t v57 = v75;
          sub_100114618((unint64_t *)&qword_100721270, (void (*)(uint64_t))&type metadata accessor for IdentityElement);
          uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v57 + 4) = sub_100110D58(v58, v59, &v101);
          swift_bridgeObjectRelease();
          uint64_t v60 = *v37;
          (*v37)(v55, v9);
          _os_log_impl((void *)&_mh_execute_header, v54, v56, "IdentityDocumentDescriptor lookupIntentToStore: could not find suitable element for %s, returning nil", (uint8_t *)v57, 0xCu);
          swift_arrayDestroy();
          uint64_t v38 = v79;
          swift_slowDealloc();
          uint64_t v4 = v76;
          swift_slowDealloc();

          (*v80)(v87, v82);
        }
        else
        {
          uint64_t v61 = v52;
          uint64_t v60 = *v37;
          (*v37)(v55, v9);

          (*v80)(v61, v82);
        }
        uint64_t v47 = v90;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v96)(v90, 1, 1, v4);
        v60(v99, v9);
      }
      if ((*v91)(v47, 1, v4) == 1)
      {
        (*v37)(v100, v9);
        sub_10000C6CC((uint64_t)v47, &qword_100723FF0);
      }
      else
      {
        uint64_t v39 = v86;
        (*v89)(v86, v47, v4);
        uint64_t v40 = (uint64_t)v85;
        uint64_t v41 = v88;
        IdentityIntentToStore.merge(with:)();
        (*v84)(v39, v4);
        (*v37)(v100, v9);
        sub_10000C6CC(v41, &qword_100723FF0);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v96)(v40, 0, 1, v4);
        sub_1000BEA14(v40, v41, &qword_100723FF0);
      }
      v36 += v95;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    a2 = v72;
    uint64_t v5 = v78;
    char v22 = v71;
    uint64_t v19 = v70;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1000BEA14(v88, (uint64_t)v22, &qword_100723FF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v22, 1, v4) == 1) {
    goto LABEL_23;
  }
  sub_100048D6C((uint64_t)v22, (uint64_t)v19, &qword_100723FF0);
  int v65 = (*(uint64_t (**)(void *, uint64_t))(v5 + 88))(v19, v4);
  if (v65 == enum case for IdentityIntentToStore.mayStoreForDays(_:))
  {
    (*(void (**)(void *, uint64_t))(v5 + 96))(v19, v4);
    *a2 = *v19;
LABEL_30:
    uint64_t v66 = (unsigned int *)&enum case for IdentityDocumentElement.RetentionIntent.retain(_:);
    goto LABEL_31;
  }
  if (v65 != enum case for IdentityIntentToStore.willNotStore(_:))
  {
    if (v65 != enum case for IdentityIntentToStore.mayStore(_:))
    {
      (*(void (**)(void *, uint64_t))(v5 + 8))(v19, v4);
LABEL_23:
      sub_10000C6CC((uint64_t)v22, &qword_100723FF0);
      *a2 = 0;
      uint64_t v62 = enum case for IdentityDocumentElement.RetentionIntent.retain(_:);
      uint64_t v63 = type metadata accessor for IdentityDocumentElement.RetentionIntent();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 104))(a2, v62, v63);
    }
    *a2 = 0;
    goto LABEL_30;
  }
  uint64_t v66 = (unsigned int *)&enum case for IdentityDocumentElement.RetentionIntent.doNotRetain(_:);
LABEL_31:
  uint64_t v67 = *v66;
  uint64_t v68 = type metadata accessor for IdentityDocumentElement.RetentionIntent();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 104))(a2, v67, v68);
  return sub_10000C6CC((uint64_t)v22, &qword_100723FF0);
}

void *sub_10010D740(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = (unsigned char *)(a3 + 64);
  uint64_t v8 = _swiftEmptyArrayStorage;
  while (1)
  {
    char v9 = *v7;
    uint64_t v10 = *((void *)v7 - 2);
    uint64_t v11 = *((void *)v7 - 1);
    uint64_t v12 = *((void *)v7 - 3);
    v35[0] = *((void *)v7 - 4);
    v35[1] = v12;
    v35[2] = v10;
    v35[3] = v11;
    char v36 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v37, v35);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v37;
    uint64_t v14 = *(void *)(v37 + 16);
    int64_t v15 = v8[2];
    int64_t v16 = v15 + v14;
    if (__OFADD__(v15, v14)) {
      break;
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v16 <= v8[3] >> 1)
    {
      if (*(void *)(v13 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v15 <= v16) {
        int64_t v18 = v15 + v14;
      }
      else {
        int64_t v18 = v15;
      }
      uint64_t v8 = (void *)sub_10010EFE4(isUniquelyReferenced_nonNull_native, v18, 1, (unint64_t)v8, &qword_100723FE8, (uint64_t (*)(void))&type metadata accessor for IdentityDocumentElement, (uint64_t (*)(void))&type metadata accessor for IdentityDocumentElement);
      if (*(void *)(v13 + 16))
      {
LABEL_15:
        uint64_t v19 = v8[2];
        uint64_t v20 = (v8[3] >> 1) - v19;
        uint64_t v21 = *(void *)(type metadata accessor for IdentityDocumentElement() - 8);
        uint64_t v22 = *(void *)(v21 + 72);
        if (v20 < v14) {
          goto LABEL_30;
        }
        unint64_t v23 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
        uint64_t v24 = (char *)v8 + v23 + v22 * v19;
        unint64_t v25 = v13 + v23;
        uint64_t v26 = v22 * v14;
        uint64_t v27 = &v24[v26];
        unint64_t v28 = v25 + v26;
        if (v25 < (unint64_t)v27 && (unint64_t)v24 < v28) {
          goto LABEL_32;
        }
        swift_arrayInitWithCopy();
        if (v14)
        {
          uint64_t v30 = v8[2];
          BOOL v31 = __OFADD__(v30, v14);
          uint64_t v32 = v30 + v14;
          if (v31) {
            goto LABEL_31;
          }
          _OWORD v8[2] = v32;
        }
        goto LABEL_4;
      }
    }
    if (v14) {
      goto LABEL_29;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    v7 += 40;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return v8;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10010D9F8()
{
  swift_bridgeObjectRelease();
  sub_1000608C4(v0 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingClientConfig);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_documentType;
  uint64_t v2 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10010EF18(*(void *)(v0 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData), *(void *)(v0 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData + 8), *(void **)(v0 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData + 16));
  return v0;
}

uint64_t sub_10010DADC()
{
  sub_10010D9F8();

  return swift_deallocClassInstance();
}

uint64_t sub_10010DB34()
{
  return type metadata accessor for DigitalPresentmentDisplayConfigurationBuilder();
}

uint64_t type metadata accessor for DigitalPresentmentDisplayConfigurationBuilder()
{
  uint64_t result = qword_100723F08;
  if (!qword_100723F08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10010DB88()
{
  uint64_t result = type metadata accessor for DigitalPresentmentCallingClientConfig();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ISO18013KnownDocTypes();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_10010DC7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v18 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData;
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(unsigned char *)(v19 + 32) = 0;
  *(void *)(v18 + 16) = a1;
  sub_100114660(a2, v18 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingClientConfig);
  uint64_t v20 = (void *)(v18 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_passID);
  *uint64_t v20 = a3;
  v20[1] = a4;
  uint64_t v21 = v18 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_documentType;
  uint64_t v22 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v21, a5, v22);
  *(void *)(v18 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_elementsToIntentToStore) = a6;
  uint64_t v24 = (void *)(v18 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_usageDescription);
  *uint64_t v24 = a7;
  v24[1] = a8;
  unint64_t v25 = (void *)(v18 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_merchantNameOverride);
  *unint64_t v25 = a10;
  v25[1] = a11;
  *a9 = v18;
  return result;
}

void *sub_10010DDBC@<X0>(uint64_t a1@<X8>)
{
  return sub_10010B9E8(a1);
}

uint64_t sub_10010DDE0@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v119 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  unint64_t v155 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v116 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v113 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v138 = (char *)&v113 - v10;
  __chkstk_darwin(v9);
  uint64_t v152 = (char *)&v113 - v11;
  uint64_t v154 = type metadata accessor for IdentityElement();
  uint64_t v12 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v147 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for IdentityIntentToStore();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v117 = (char *)&v113 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v129 = (char *)&v113 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v25 = (char *)&v113 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v113 - v26;
  uint64_t v28 = sub_100007764(&qword_100720AF0);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v151 = (char *)&v113 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v150 = (uint64_t)&v113 - v31;
  uint64_t v32 = sub_100007764(&qword_100723FF0);
  uint64_t v33 = __chkstk_darwin(v32 - 8);
  uint64_t v120 = (uint64_t)&v113 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v33);
  unint64_t v132 = (char *)&v113 - v36;
  __chkstk_darwin(v35);
  uint64_t v37 = *(void (**)(void))(v15 + 56);
  uint64_t v141 = (uint64_t)&v113 - v38;
  uint64_t v156 = v14;
  uint64_t v39 = v27;
  uint64_t v137 = v15 + 56;
  uint64_t v136 = v37;
  v37();
  uint64_t v40 = *(void *)(a1 + 64);
  uint64_t v122 = a1 + 64;
  uint64_t v41 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v42 = -1;
  if (v41 < 64) {
    uint64_t v42 = ~(-1 << v41);
  }
  unint64_t v43 = v42 & v40;
  unint64_t v44 = (unint64_t)(v41 + 63) >> 6;
  uint64_t v139 = v12 + 16;
  char v153 = (void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v149 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  uint64_t v145 = (uint64_t (**)(uint64_t *, uint64_t))(v12 + 88);
  uint64_t v146 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
  int v144 = enum case for IdentityElement.ageIsOver(_:);
  int v128 = enum case for IdentityElement.age(_:);
  uint64_t v142 = v15;
  uint64_t v148 = (void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v125 = (uint64_t (**)(uint64_t *, uint64_t))(v12 + 8);
  unint64_t v134 = (void (**)(char *, uint64_t))(v155 + 8);
  uint64_t v140 = v12;
  uint64_t v127 = (void (**)(uint64_t *, uint64_t))(v12 + 96);
  unint64_t v113 = v44 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v46 = 0;
  int64_t v126 = v44;
  unint64_t v115 = v44 - 5;
  uint64_t v143 = a1;
  uint64_t v114 = a1 + 104;
  uint64_t v47 = v138;
  uint64_t v48 = v154;
  *(void *)&long long v49 = 134218242;
  long long v124 = v49;
  uint64_t v123 = (char *)&type metadata for Any + 8;
  *(void *)&long long v49 = 136315138;
  long long v121 = v49;
  uint64_t v135 = v3;
  uint64_t v118 = v8;
  unint64_t v131 = v18;
  unint64_t v133 = v25;
  unint64_t v130 = v39;
  while (1)
  {
    if (v43)
    {
      unint64_t v55 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      unint64_t v155 = v46;
      unint64_t v56 = v55 | (v46 << 6);
LABEL_8:
      uint64_t v57 = v143;
      uint64_t v58 = (uint64_t)v151;
      (*(void (**)(char *, unint64_t, uint64_t))(v140 + 16))(v151, *(void *)(v143 + 48) + *(void *)(v140 + 72) * v56, v48);
      uint64_t v59 = *(void *)(v57 + 56);
      uint64_t v60 = v142;
      uint64_t v61 = v59 + *(void *)(v142 + 72) * v56;
      uint64_t v62 = sub_100007764(&qword_100720B08);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v58 + *(int *)(v62 + 48), v61, v156);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v58, 0, 1, v62);
      uint64_t v63 = v152;
      goto LABEL_15;
    }
    int64_t v64 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
      return result;
    }
    if (v64 >= v126)
    {
      unint64_t v66 = v46;
      uint64_t v63 = v152;
    }
    else
    {
      unint64_t v65 = *(void *)(v122 + 8 * v64);
      uint64_t v63 = v152;
      if (v65) {
        goto LABEL_12;
      }
      unint64_t v66 = v46 + 1;
      if ((uint64_t)(v46 + 2) < v126)
      {
        unint64_t v65 = *(void *)(v122 + 8 * (v46 + 2));
        if (v65)
        {
          int64_t v64 = v46 + 2;
          uint64_t v48 = v154;
LABEL_12:
          unint64_t v43 = (v65 - 1) & v65;
          unint64_t v56 = __clz(__rbit64(v65)) + (v64 << 6);
          unint64_t v155 = v64;
          goto LABEL_8;
        }
        unint64_t v66 = v46 + 2;
        if ((uint64_t)(v46 + 3) < v126)
        {
          unint64_t v65 = *(void *)(v122 + 8 * (v46 + 3));
          if (v65)
          {
            int64_t v64 = v46 + 3;
            uint64_t v48 = v154;
            goto LABEL_12;
          }
          int64_t v64 = v46 + 4;
          unint64_t v66 = v46 + 3;
          if ((uint64_t)(v46 + 4) < v126)
          {
            unint64_t v65 = *(void *)(v122 + 8 * v64);
            uint64_t v48 = v154;
            if (v65) {
              goto LABEL_12;
            }
            while (v115 != v46)
            {
              unint64_t v65 = *(void *)(v114 + 8 * v46++);
              if (v65)
              {
                int64_t v64 = v46 + 4;
                goto LABEL_12;
              }
            }
            unint64_t v66 = v113;
          }
        }
      }
    }
    uint64_t v67 = sub_100007764(&qword_100720B08);
    uint64_t v68 = v151;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v151, 1, 1, v67);
    unint64_t v43 = 0;
    unint64_t v155 = v66;
    uint64_t v58 = (uint64_t)v68;
LABEL_15:
    uint64_t v69 = v150;
    sub_1000BEA14(v58, v150, &qword_100720AF0);
    uint64_t v70 = sub_100007764(&qword_100720B08);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48))(v69, 1, v70) == 1) {
      break;
    }
    (*v149)(v39, v69 + *(int *)(v70 + 48), v156);
    uint64_t v71 = (uint64_t *)v147;
    uint64_t v72 = v69;
    uint64_t v48 = v154;
    (*v146)(v147, v72, v154);
    int v73 = (*v145)(v71, v48);
    if (v73 == v144)
    {
      (*v127)(v71, v48);
      uint64_t v74 = *v71;
      defaultLogger()();
      long long v75 = v39;
      uint64_t v76 = v129;
      (*v153)(v129, v75, v156);
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = swift_slowAlloc();
        uint64_t v158 = swift_slowAlloc();
        *(_DWORD *)uint64_t v79 = v124;
        *(void *)(v79 + 4) = v74;
        *(_WORD *)(v79 + 12) = 2080;
        sub_100114618(&qword_100723FF8, (void (*)(uint64_t))&type metadata accessor for IdentityIntentToStore);
        uint64_t v80 = v156;
        uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v79 + 14) = sub_100110D58(v81, v82, &v158);
        swift_bridgeObjectRelease();
        uint64_t v50 = v47;
        uint64_t v51 = *v148;
        (*v148)(v76, v80);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "IdentityDocumentDescriptor lookupIntentToStore: found ageIsOver %ld with intent %s", (uint8_t *)v79, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v50 = v47;
        uint64_t v51 = *v148;
        (*v148)(v76, v156);
      }

      (*v134)(v50, v135);
      uint64_t v18 = v131;
      uint64_t v39 = v130;
      uint64_t v52 = (uint64_t)v132;
      uint64_t v53 = v141;
      IdentityIntentToStore.merge(with:)();
      uint64_t v54 = v156;
      v51(v39, v156);
      sub_10000C6CC(v53, &qword_100723FF0);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v136)(v52, 0, 1, v54);
      uint64_t result = sub_1000BEA14(v52, v53, &qword_100723FF0);
      uint64_t v47 = v138;
      uint64_t v48 = v154;
      unint64_t v46 = v155;
      unint64_t v25 = v133;
    }
    else if (v73 == v128)
    {
      defaultLogger()();
      (*v153)(v25, v39, v156);
      uint64_t v83 = v63;
      char v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = v156;
        uint64_t v87 = v148;
        uint64_t v88 = swift_slowAlloc();
        uint64_t v158 = swift_slowAlloc();
        *(_DWORD *)uint64_t v88 = v121;
        sub_100114618(&qword_100723FF8, (void (*)(uint64_t))&type metadata accessor for IdentityIntentToStore);
        uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v88 + 4) = sub_100110D58(v89, v90, &v158);
        swift_bridgeObjectRelease();
        uint64_t v91 = *v87;
        uint64_t v92 = v86;
        uint64_t v39 = v130;
        v91(v25, v92);
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "IdentityDocumentDescriptor lookupIntentToStore: found age with intent %s", (uint8_t *)v88, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v134)(v152, v135);
      }
      else
      {
        uint64_t v91 = *v148;
        (*v148)(v25, v156);

        (*v134)(v83, v135);
      }
      uint64_t v18 = v131;
      uint64_t v93 = (uint64_t)v132;
      uint64_t v94 = v141;
      IdentityIntentToStore.merge(with:)();
      uint64_t v95 = v156;
      v91(v39, v156);
      sub_10000C6CC(v94, &qword_100723FF0);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v136)(v93, 0, 1, v95);
      uint64_t result = sub_1000BEA14(v93, v94, &qword_100723FF0);
      uint64_t v47 = v138;
      uint64_t v48 = v154;
      unint64_t v46 = v155;
      unint64_t v25 = v133;
    }
    else
    {
      (*v148)(v39, v156);
      uint64_t result = (*v125)(v71, v48);
      unint64_t v46 = v155;
    }
  }
  swift_release();
  uint64_t v96 = v120;
  sub_100048D6C(v141, v120, &qword_100723FF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v96, 1, v156) == 1)
  {
    sub_10000C6CC(v96, &qword_100723FF0);
    uint64_t v97 = v116;
    defaultLogger()();
    char v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "IdentityDocumentDescriptor lookupAgeIntentToStore: no age element intents to store", v100, 2u);
      swift_slowDealloc();
    }

    (*v134)(v97, v135);
    sub_10000C6CC(v141, &qword_100723FF0);
    uint64_t v101 = 1;
    unint64_t v102 = v119;
  }
  else
  {
    uint64_t v103 = *v149;
    os_log_type_t v104 = v117;
    uint64_t v105 = v96;
    uint64_t v106 = v156;
    (*v149)(v117, v105, v156);
    defaultLogger()();
    (*v153)(v18, v104, v106);
    unint64_t v107 = Logger.logObject.getter();
    os_log_type_t v108 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v107, v108))
    {
      uint64_t v109 = (uint8_t *)swift_slowAlloc();
      uint64_t v158 = swift_slowAlloc();
      *(_DWORD *)uint64_t v109 = v121;
      sub_100114618(&qword_100723FF8, (void (*)(uint64_t))&type metadata accessor for IdentityIntentToStore);
      uint64_t v110 = v156;
      uint64_t v111 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v157 = sub_100110D58(v111, v112, &v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*v148)(v18, v110);
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "IdentityDocumentDescriptor lookupAgeIntentToStore: using final age intent to store %s", v109, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*v148)(v18, v156);
    }
    (*v134)(v118, v135);
    sub_10000C6CC(v141, &qword_100723FF0);
    unint64_t v102 = v119;
    v103(v119, (uint64_t)v117, v156);
    uint64_t v101 = 0;
  }
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v136)(v102, v101, 1, v156);
}

void sub_10010EF18(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10010EF5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10010C94C(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_10010EF7C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_100724088, (uint64_t (*)(void))&type metadata accessor for IQSignal, (uint64_t (*)(void))&type metadata accessor for IQSignal);
}

uint64_t sub_10010EFB0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_10071FCE0, (uint64_t (*)(void))&type metadata accessor for IQCType, (uint64_t (*)(void))&type metadata accessor for IQCType);
}

uint64_t sub_10010EFE4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100007764(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  id v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001155C0(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_10010F264(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_100724080, (uint64_t (*)(void))&type metadata accessor for IQACode, (uint64_t (*)(void))&type metadata accessor for IQACode);
}

char *sub_10010F298(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_1007240F8);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[72 * v8 + 32]) {
          memmove(v12, a4 + 32, 72 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001141FC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_10010F3C4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100730CD0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100114010(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010F4D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_100724108, (uint64_t (*)(void))&type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventElement, (uint64_t (*)(void))&type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventElement);
}

void *sub_10010F508(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10010F66C(a1, a2, a3, a4, &qword_100724000);
}

char *sub_10010F514(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10010F8D4(a1, a2, a3, a4, (uint64_t *)&unk_100726920, (void (*)(void, int64_t, char *, char *))sub_1001142F4);
}

void *sub_10010F534(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724148);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4]) {
          memmove(v12, a4 + 4, 112 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001143FC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10010F660(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10010F66C(a1, a2, a3, a4, &qword_1007240E8);
}

void *sub_10010F66C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = a4[2];
    if (v8 <= v9) {
      int64_t v10 = a4[2];
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      sub_100007764(a5);
      size_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * v12 - 64;
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (void *)((char *)a4 + v9 + 32)) {
          memmove(v13, a4 + 4, v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      size_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001144F4(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_10010F764(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10010F66C(a1, a2, a3, a4, &qword_1007240E0);
}

void *sub_10010F770(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724078);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001146C4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010F880(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_100724068, (uint64_t (*)(void))&type metadata accessor for MobileDocumentElement, (uint64_t (*)(void))&type metadata accessor for MobileDocumentElement);
}

char *sub_10010F8B4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10010F8D4(a1, a2, a3, a4, &qword_100724010, (void (*)(void, int64_t, char *, char *))sub_1001147B8);
}

char *sub_10010F8D4(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, void (*a6)(void, int64_t, char *, char *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *((void *)a4 + 3);
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      int64_t v12 = *((void *)a4 + 2);
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      sub_100007764(a5);
      uint64_t v13 = (char *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      *((void *)v13 + 2) = v11;
      *((void *)v13 + 3) = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 32;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v16 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[8 * v11 + 32]) {
          memmove(v16, a4 + 32, 8 * v11);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_10010F9F0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724058);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001148A4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010FB00(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_100724030, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege);
}

uint64_t sub_10010FB34(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_100724018, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege);
}

uint64_t sub_10010FB68(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010FB90(a1, a2, a3, a4, &qword_100724048, &qword_100724050);
}

uint64_t sub_10010FB7C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010FB90(a1, a2, a3, a4, &qword_100724040, &qword_100720E08);
}

uint64_t sub_10010FB90(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100007764(a5);
  uint64_t v13 = *(void *)(sub_100007764(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_100007764(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100115098(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_10010FDFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_1007240B0, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
}

uint64_t sub_10010FE30(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_100724038, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code);
}

void *sub_10010FE64(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724098);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001149B0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10010FF74(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724188);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100114104(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100110098(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010FB90(a1, a2, a3, a4, &qword_100724170, &qword_100724178);
}

void *sub_1001100AC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001100C0(a1, a2, a3, a4, &qword_1007241A0);
}

void *sub_1001100C0(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_100007764(a5);
      size_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 4]) {
          memmove(v14, a4 + 4, 32 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001154D0(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_1001101DC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001100C0(a1, a2, a3, a4, &qword_100724198);
}

uint64_t sub_1001101F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010FB90(a1, a2, a3, a4, &qword_100724190, &qword_100726760);
}

void *sub_100110204(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724168);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100114B98(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_10011032C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724150);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100114C90(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10011043C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724128);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100114E94(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10011054C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724138);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 496);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[62 * v8 + 4]) {
          memmove(v12, a4 + 4, 496 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100114D9C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100110678(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010FB90(a1, a2, a3, a4, &qword_100724110, &qword_100720298);
}

void *sub_10011068C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724118);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 288);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[36 * v8 + 4]) {
          memmove(v12, a4 + 4, 288 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100114FA0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001107B8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724120);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100114AA4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001108C8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724100);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001151F0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001109E8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_100724090);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 184);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[23 * v8 + 4]) {
          memmove(v12, a4 + 4, 184 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001152E8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100110B14(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_1007241B8, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
}

uint64_t sub_100110B48(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_1007240C0, type metadata accessor for ActionRequest, type metadata accessor for ActionRequest);
}

char *sub_100110B7C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007764(&qword_1007241C0);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[104 * v8 + 32]) {
          memmove(v12, a4 + 32, 104 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001153DC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100110CA8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_100724028, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleRestriction, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleRestriction);
}

uint64_t sub_100110CDC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_100724020, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleEndorsement, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleEndorsement);
}

void *sub_100110D10(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001100C0(a1, a2, a3, a4, &qword_100724160);
}

uint64_t sub_100110D24(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10010EFE4(a1, a2, a3, a4, &qword_1007241A8, type metadata accessor for DIPPregeneratedAssessment, type metadata accessor for DIPPregeneratedAssessment);
}

uint64_t sub_100110D58(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100110E2C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10003BC28((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10003BC28((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t sub_100110E2C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100110FE8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100110FE8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100111080(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001112DC(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1001112DC(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100111080(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1001111F8(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1001111F8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100007764(&qword_100724000);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100111260(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1001112DC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_100724000);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10011142C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100111958(a1, a2, a3, *v3);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_10011144C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100111AC8(a1, a2, a3, *v3);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_10011146C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100111C34(a1, a2, a3, *v3);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_10011148C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112D38(a1, a2, a3, (void *)*v3, &qword_1007241B8, (uint64_t (*)(void))&type metadata accessor for URL);
  *char v3 = result;
  return result;
}

uint64_t sub_1001114C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112D38(a1, a2, a3, (void *)*v3, &qword_100723FE8, (uint64_t (*)(void))&type metadata accessor for IdentityDocumentElement);
  *char v3 = result;
  return result;
}

uint64_t sub_100111504(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100111F48(a1, a2, a3, *v3, &qword_100724078);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_100111534(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100111DBC(a1, a2, a3, (void *)*v3);
  *char v3 = result;
  return result;
}

uint64_t sub_100111554(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112D38(a1, a2, a3, (void *)*v3, &qword_100724068, (uint64_t (*)(void))&type metadata accessor for MobileDocumentElement);
  *char v3 = result;
  return result;
}

uint64_t sub_100111590(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100111F48(a1, a2, a3, *v3, &qword_100724070);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_1001115C0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001120B8(a1, a2, a3, *v3);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_1001115E0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10011223C(a1, a2, a3, *v3);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_100111600(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001123B4(a1, a2, a3, *v3);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_100111620(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112518(a1, a2, a3, *v3);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_100111640(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001126A4(a1, a2, a3, *v3);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_100111660(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112804(a1, a2, a3, *v3);
  *char v3 = (char *)result;
  return result;
}

uint64_t sub_100111680(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112964(a1, a2, a3, (void *)*v3);
  *char v3 = result;
  return result;
}

uint64_t sub_1001116A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112D38(a1, a2, a3, (void *)*v3, &qword_10071FCB0, (uint64_t (*)(void))&type metadata accessor for IQComplexSignal);
  *char v3 = result;
  return result;
}

uint64_t sub_1001116DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112D38(a1, a2, a3, (void *)*v3, &qword_100724088, (uint64_t (*)(void))&type metadata accessor for IQSignal);
  *char v3 = result;
  return result;
}

uint64_t sub_100111718(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112D38(a1, a2, a3, (void *)*v3, &qword_100724080, (uint64_t (*)(void))&type metadata accessor for IQACode);
  *char v3 = result;
  return result;
}

uint64_t sub_100111754(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112D38(a1, a2, a3, (void *)*v3, &qword_1007240B8, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderIdentityKeyResponse.StatusItem);
  *char v3 = result;
  return result;
}

uint64_t sub_100111790(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100112D38(a1, a2, a3, (void *)*v3, &qword_1007240A8, (uint64_t (*)(void))&type metadata accessor for MobileDocumentReaderCertificateResponse.StatusItem);
  *char v3 = result;
  return result;
}

uint64_t sub_1001117CC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_1007240F0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100007764(&qword_10071FCF8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100111958(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_1007241C8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100111AC8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_100730CD0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100111C34(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_1007241B0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8]) {
      memmove(v12, v13, 152 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[152 * v8] || v12 >= &v13[152 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100111DBC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_100724058);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_100007764(&qword_100724060);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100111F48(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_100007764(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001120B8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_100724188);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10011223C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_100724180);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001123B4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10046E758();
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100112518(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_100724148);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8]) {
      memmove(v12, v13, 112 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[112 * v8] || v12 >= &v13[112 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001126A4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_100724140);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100112804(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_1007240C8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100112964(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007764(&qword_1007240D0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_100007764(&qword_1007240D8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100112AF0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100007764((uint64_t *)&unk_100730CA0);
  uint64_t v10 = *(void *)(sub_100007764(&qword_1007240A0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100007764(&qword_1007240A0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  BOOL v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  unint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100112D38(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100007764(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100112F80(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_100113020(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void *sub_100113104()
{
  uint64_t v0 = type metadata accessor for IdentityDocumentElementCategory.PresentmentElementGroup();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  IdentityDocumentElementCategory.storage.getter();
  int v4 = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 88))(v3, v0);
  if (v4 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.ageAtLeast(_:))
  {
    if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.name(_:))
    {
      sub_100007764(&qword_100724008);
      uint64_t v9 = type metadata accessor for IdentityElement();
      uint64_t v10 = *(void *)(v9 - 8);
      uint64_t v11 = *(void *)(v10 + 72);
      unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_100611020;
      unint64_t v13 = v8 + v12;
      uint64_t v14 = *(void (**)(unint64_t, void, uint64_t))(v10 + 104);
      v14(v13, enum case for IdentityElement.givenName(_:), v9);
      v14(v13 + v11, enum case for IdentityElement.familyName(_:), v9);
      return (void *)v8;
    }
    if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.dateOfBirth(_:))
    {
      sub_100007764(&qword_100724008);
      uint64_t v15 = type metadata accessor for IdentityElement();
      uint64_t v16 = *(void *)(v15 - 8);
      unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_100610730;
      unint64_t v18 = v8 + v17;
      uint64_t v19 = (unsigned int *)&enum case for IdentityElement.dateOfBirth(_:);
LABEL_29:
      (*(void (**)(unint64_t, void, uint64_t))(v16 + 104))(v18, *v19, v15);
      return (void *)v8;
    }
    if (v4 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.birthYear(_:))
    {
      if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.age(_:))
      {
        sub_100007764(&qword_100724008);
        uint64_t v15 = type metadata accessor for IdentityElement();
        uint64_t v16 = *(void *)(v15 - 8);
        unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        uint64_t v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_100610730;
        unint64_t v18 = v8 + v20;
        uint64_t v19 = (unsigned int *)&enum case for IdentityElement.age(_:);
        goto LABEL_29;
      }
      if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.sex(_:))
      {
        sub_100007764(&qword_100724008);
        uint64_t v15 = type metadata accessor for IdentityElement();
        uint64_t v16 = *(void *)(v15 - 8);
        unint64_t v21 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        uint64_t v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_100610730;
        unint64_t v18 = v8 + v21;
        uint64_t v19 = (unsigned int *)&enum case for IdentityElement.sex(_:);
        goto LABEL_29;
      }
      if (v4 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.height(_:)
        && v4 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.weight(_:)
        && v4 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.eyeColor(_:)
        && v4 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.hairColor(_:))
      {
        if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.address(_:)
          || v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.city(_:)
          || v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.state(_:)
          || v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.postalCode(_:)
          || v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.country(_:))
        {
          sub_100007764(&qword_100724008);
          uint64_t v15 = type metadata accessor for IdentityElement();
          uint64_t v16 = *(void *)(v15 - 8);
          unint64_t v25 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v8 = swift_allocObject();
          *(_OWORD *)(v8 + 16) = xmmword_100610730;
          unint64_t v18 = v8 + v25;
          uint64_t v19 = (unsigned int *)&enum case for IdentityElement.address(_:);
          goto LABEL_29;
        }
        if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.documentNumber(_:)) {
          goto LABEL_32;
        }
        if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.issuingAuthority(_:))
        {
          sub_100007764(&qword_100724008);
          uint64_t v15 = type metadata accessor for IdentityElement();
          uint64_t v16 = *(void *)(v15 - 8);
          unint64_t v28 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v8 = swift_allocObject();
          *(_OWORD *)(v8 + 16) = xmmword_100610730;
          unint64_t v18 = v8 + v28;
          uint64_t v19 = (unsigned int *)&enum case for IdentityElement.issuingAuthority(_:);
          goto LABEL_29;
        }
        if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.documentIssueDate(_:))
        {
          sub_100007764(&qword_100724008);
          uint64_t v15 = type metadata accessor for IdentityElement();
          uint64_t v16 = *(void *)(v15 - 8);
          unint64_t v29 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v8 = swift_allocObject();
          *(_OWORD *)(v8 + 16) = xmmword_100610730;
          unint64_t v18 = v8 + v29;
          uint64_t v19 = (unsigned int *)&enum case for IdentityElement.documentIssueDate(_:);
          goto LABEL_29;
        }
        if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.expirationDate(_:))
        {
          sub_100007764(&qword_100724008);
          uint64_t v15 = type metadata accessor for IdentityElement();
          uint64_t v16 = *(void *)(v15 - 8);
          unint64_t v30 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v8 = swift_allocObject();
          *(_OWORD *)(v8 + 16) = xmmword_100610730;
          unint64_t v18 = v8 + v30;
          uint64_t v19 = (unsigned int *)&enum case for IdentityElement.documentExpirationDate(_:);
          goto LABEL_29;
        }
        if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.documentDHSComplianceStatus(_:))
        {
          sub_100007764(&qword_100724008);
          uint64_t v15 = type metadata accessor for IdentityElement();
          uint64_t v16 = *(void *)(v15 - 8);
          unint64_t v31 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v8 = swift_allocObject();
          *(_OWORD *)(v8 + 16) = xmmword_100610730;
          unint64_t v18 = v8 + v31;
          uint64_t v19 = (unsigned int *)&enum case for IdentityElement.documentDHSComplianceStatus(_:);
          goto LABEL_29;
        }
        if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.portrait(_:))
        {
          sub_100007764(&qword_100724008);
          uint64_t v15 = type metadata accessor for IdentityElement();
          uint64_t v16 = *(void *)(v15 - 8);
          unint64_t v32 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v8 = swift_allocObject();
          *(_OWORD *)(v8 + 16) = xmmword_100610730;
          unint64_t v18 = v8 + v32;
          uint64_t v19 = (unsigned int *)&enum case for IdentityElement.portrait(_:);
          goto LABEL_29;
        }
        if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.drivingPrivileges(_:))
        {
          sub_100007764(&qword_100724008);
          uint64_t v15 = type metadata accessor for IdentityElement();
          uint64_t v16 = *(void *)(v15 - 8);
          unint64_t v33 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v8 = swift_allocObject();
          *(_OWORD *)(v8 + 16) = xmmword_100610730;
          unint64_t v18 = v8 + v33;
          uint64_t v19 = (unsigned int *)&enum case for IdentityElement.drivingPrivileges(_:);
          goto LABEL_29;
        }
        if (v4 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.individualNumber(_:))
        {
LABEL_32:
          sub_100007764(&qword_100724008);
          uint64_t v15 = type metadata accessor for IdentityElement();
          uint64_t v16 = *(void *)(v15 - 8);
          unint64_t v27 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v8 = swift_allocObject();
          *(_OWORD *)(v8 + 16) = xmmword_100610730;
          unint64_t v18 = v8 + v27;
          uint64_t v19 = (unsigned int *)&enum case for IdentityElement.documentNumber(_:);
          goto LABEL_29;
        }
        if (v4 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.veteranStatus(_:)) {
          (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
        }
      }
    }
    return _swiftEmptyArrayStorage;
  }
  (*(void (**)(uint64_t *, uint64_t))(v1 + 96))(v3, v0);
  uint64_t v5 = *v3;
  sub_100007764(&qword_100724008);
  uint64_t v6 = *(void *)(type metadata accessor for IdentityElement() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100610730;
  *(void *)(v8 + v7) = v5;
  (*(void (**)(void))(v6 + 104))();
  return (void *)v8;
}

uint64_t sub_100113C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v41 = a2;
  uint64_t v6 = type metadata accessor for IdentityDocumentElementCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v39 = (char *)&v30 - v10;
  uint64_t v38 = type metadata accessor for IdentityDocumentElement();
  uint64_t v11 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  unint64_t v44 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = (char *)_swiftEmptyArrayStorage;
  if (!v13) {
    return (uint64_t)v14;
  }
  uint64_t v45 = v4;
  unint64_t v46 = (char *)_swiftEmptyArrayStorage;
  sub_1001114C8(0, v13, 0);
  uint64_t result = sub_100112F80(a1);
  uint64_t v16 = v11;
  int64_t v17 = result;
  int v19 = v18;
  char v21 = v20 & 1;
  uint64_t v34 = v7 + 32;
  uint64_t v35 = v7 + 16;
  uint64_t v36 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v37 = a1 + 56;
  uint64_t v31 = v16;
  uint64_t v32 = v7;
  uint64_t v30 = v16 + 32;
  uint64_t v33 = v6;
  while ((v17 & 0x8000000000000000) == 0 && v17 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(v37 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
      goto LABEL_17;
    }
    if (*(_DWORD *)(a1 + 36) != v19) {
      goto LABEL_18;
    }
    uint64_t v22 = a1;
    int64_t v23 = *(void *)(a1 + 48) + *(void *)(v7 + 72) * v17;
    uint64_t v24 = v39;
    (*(void (**)(char *, int64_t, uint64_t))(v7 + 16))(v39, v23, v6);
    uint64_t v14 = v40;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v40, v24, v6);
    uint64_t v25 = v45;
    sub_10010CC24((uint64_t)v14, v41, v42);
    uint64_t v45 = v25;
    if (v25)
    {
      (*v36)(v14, v6);
      swift_release();
      return (uint64_t)v14;
    }
    (*v36)(v14, v6);
    uint64_t v14 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1001114C8(0, *((void *)v14 + 2) + 1, 1);
      uint64_t v14 = v46;
    }
    a1 = v22;
    unint64_t v27 = *((void *)v14 + 2);
    unint64_t v26 = *((void *)v14 + 3);
    if (v27 >= v26 >> 1)
    {
      sub_1001114C8(v26 > 1, v27 + 1, 1);
      uint64_t v14 = v46;
    }
    *((void *)v14 + 2) = v27 + 1;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v14[((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v27], v44, v38);
    unint64_t v46 = v14;
    uint64_t result = sub_100113020(v17, v19, v21 & 1, v22);
    int64_t v17 = result;
    int v19 = v28;
    char v21 = v29 & 1;
    --v13;
    uint64_t v7 = v32;
    uint64_t v6 = v33;
    if (!v13)
    {
      sub_10011460C(result, v28, v29 & 1);
      return (uint64_t)v14;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100114010(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100114104(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001141FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001142F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      type metadata accessor for DIAttributeImageEncoding(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001143FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001144F4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001145E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011460C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100114618(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100114660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DigitalPresentmentCallingClientConfig();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001146C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001147B8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001148A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_100007764(&qword_100724060);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001149B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100114AA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100114B98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100114C90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100007764(&qword_100724158);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100114D9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 496 * a1 + 32;
    unint64_t v6 = a3 + 496 * v4;
    if (v5 >= v6 || v5 + 496 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100114E94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100007764(&qword_100724130);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100114FA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 288 * a1 + 32;
    unint64_t v6 = a3 + 288 * v4;
    if (v5 >= v6 || v5 + 288 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100115098(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(sub_100007764(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001151F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001152E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 184 * a1 + 32;
    unint64_t v6 = a3 + 184 * v4;
    if (v5 >= v6 || v5 + 184 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001153DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 104 * a1 + 32;
    unint64_t v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001154D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001155C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10011571C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SESKeystore();
  swift_allocObject();
  uint64_t v2 = SESKeystore.init()();
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v3 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 52;
  os_unfair_lock_lock(v3 + 52);
  sub_1000262B4(v4, v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = v11;
  swift_retain();
  sub_1000262D0((uint64_t)v10);
  uint64_t v13 = type metadata accessor for MobileDocumentReaderDataContainer();
  uint64_t v14 = sub_10012129C((unint64_t *)&qword_10071FF90, (void (*)(uint64_t))type metadata accessor for MobileDocumentReaderDataContainer);
  *(void *)&long long v12 = v6;
  uint64_t v7 = type metadata accessor for MobileDocumentReaderAuthenticationStorage();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v2;
  uint64_t result = sub_10000C6B4(&v12, v8 + 24);
  a1[3] = v7;
  a1[4] = (uint64_t)&off_1006F8A50;
  *a1 = v8;
  return result;
}

uint64_t sub_100115870(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for Milestone();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MobileDocumentReaderSession.State();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for MobileDocumentReaderSession.State.finished(_:)) {
    goto LABEL_2;
  }
  if (v12 == enum case for MobileDocumentReaderSession.State.ready(_:))
  {
    static MobileDocumentReaderMilestone.readDocumentReaderReady.getter();
LABEL_9:
    Milestone.log()();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return a2(a1);
  }
  if (v12 == enum case for MobileDocumentReaderSession.State.connecting(_:))
  {
    static MobileDocumentReaderMilestone.readDocumentReaderConnecting.getter();
    goto LABEL_9;
  }
  if (v12 == enum case for MobileDocumentReaderSession.State.awaitingApproval(_:))
  {
    static MobileDocumentReaderMilestone.readDocumentReaderAwaitingApproval.getter();
    goto LABEL_9;
  }
LABEL_2:
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a2(a1);
}

uint64_t sub_100115AA0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v105 = type metadata accessor for Logger();
  uint64_t v96 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  unint64_t v107 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for BundleRecordFetcher();
  uint64_t v5 = *(void *)(v108 - 8);
  uint64_t v6 = __chkstk_darwin(v108);
  uint64_t v97 = (uint64_t *)((char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v95 - v8;
  uint64_t v10 = type metadata accessor for AuditToken();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_defaultActor_initialize();
  *(void *)(v2 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask) = 0;
  FeatureFlagProvider.init()();
  uint64_t v103 = v11;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v14(v2 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_auditToken, a1, v10);
  uint64_t v15 = type metadata accessor for MobileDocumentReaderIssuerRootStorage();
  long long v113 = 0u;
  long long v114 = 0u;
  unint64_t v115 = 0;
  swift_allocObject();
  uint64_t v16 = sub_100149F64((uint64_t)&v113);
  uint64_t v99 = v2;
  int64_t v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage);
  v17[3] = v15;
  void v17[4] = (uint64_t)&off_1006F9248;
  uint64_t v95 = v17;
  *int64_t v17 = v16;
  char v98 = v13;
  uint64_t v104 = a1;
  uint64_t v106 = v10;
  uint64_t v101 = v11 + 16;
  uint64_t v100 = (void (*)(uint64_t *, uint64_t, uint64_t))v14;
  v14((uint64_t)v13, a1, v10);
  uint64_t v120 = 0;
  long long v118 = 0u;
  long long v119 = 0u;
  BundleRecordFetcher.init()();
  sub_10011571C(v117);
  uint64_t v111 = 0;
  long long v110 = 0u;
  long long v109 = 0u;
  uint64_t v18 = type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  if (qword_10071F580 != -1) {
    swift_once();
  }
  int v19 = (void *)qword_1007607E8;
  uint64_t v116 = qword_1007607E8;
  v112[3] = &type metadata for FairPlayProvisioner;
  v112[4] = &off_1006FC560;
  v112[0] = swift_allocObject();
  sub_10011F4D0((uint64_t)&v113, v112[0] + 16);
  type metadata accessor for MobileDocumentReaderAuthenticationCertificateFetcher();
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = sub_1000279F4((uint64_t)v112, (uint64_t)&type metadata for FairPlayProvisioner);
  __chkstk_darwin(v21);
  int64_t v23 = (_OWORD *)((char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v24 + 16))(v23);
  id v25 = v19;
  uint64_t v26 = sub_10011F828((uint64_t)&v109, v23, v20);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v112);
  sub_10011FB40((uint64_t)&v113);
  type metadata accessor for MobileDocumentReaderLogoFetcher();
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v102 = v18;
  static DIPAccountManager.sharedInstance.getter();
  char v29 = (void *)qword_1007607E8;
  uint64_t v116 = qword_1007607E8;
  uint64_t v30 = sub_1000279F4((uint64_t)v117, v117[3]);
  __chkstk_darwin(v30);
  uint64_t v32 = (uint64_t *)((char *)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v33 + 16))(v32);
  sub_10011F4D0((uint64_t)&v113, (uint64_t)&v109);
  uint64_t v34 = *v32;
  uint64_t v35 = (uint64_t)v97;
  uint64_t v36 = v108;
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(v97, v9, v108);
  id v37 = v29;
  swift_retain();
  swift_retain();
  uint64_t v38 = sub_10011FFE4((uint64_t)v98, v35, v34, v26, v27, (uint64_t)&v118, v28, (uint64_t)&protocol witness table for Date, &v109);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v36);
  sub_10011FB40((uint64_t)&v113);
  swift_release();
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v117);
  uint64_t v39 = v99;
  uint64_t v40 = (uint64_t *)(v99 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager);
  v40[3] = type metadata accessor for MobileDocumentReaderAuthenticationManager();
  v40[4] = (uint64_t)&off_1006F7E08;
  *uint64_t v40 = v38;
  uint64_t v41 = self;
  id v42 = [v41 standardUserDefaults];
  NSString v43 = String._bridgeToObjectiveC()();
  id v44 = [v42 stringForKey:v43];

  if (v44)
  {
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v47 = v46;

    if (v45 == 0x797469746E656469 && v47 == 0xED0000747365742DLL)
    {
      swift_bridgeObjectRelease();
LABEL_8:
      type metadata accessor for SimulatedMobileDocumentReaderManager();
      uint64_t v49 = swift_allocObject();
      sub_100007764(&qword_1007243E8);
      uint64_t v50 = swift_allocObject();
      *(_DWORD *)(v50 + 32) = 0;
      *(void *)(v50 + 16) = nullsub_7;
      *(void *)(v50 + 24) = 0;
      *(void *)(v49 + 16) = v50;
      uint64_t v51 = &off_1006F94A8;
      goto LABEL_10;
    }
    char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v48) {
      goto LABEL_8;
    }
  }
  sub_100030A10((uint64_t)v40, (uint64_t)&v113);
  sub_100030A10((uint64_t)v95, (uint64_t)&v109);
  type metadata accessor for MobileDocumentReaderBluetoothManager();
  uint64_t v52 = swift_allocObject();
  swift_defaultActor_initialize();
  type metadata accessor for MobileDocumentReaderNFCManager();
  uint64_t v53 = swift_allocObject();
  swift_defaultActor_initialize();
  type metadata accessor for SecureTransactionServiceManager();
  uint64_t v54 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v54 + 112) = 0;
  *(void *)(v54 + 120) = 0;
  sub_100007764(&qword_1007243E8);
  uint64_t v55 = swift_allocObject();
  *(_DWORD *)(v55 + 32) = 0;
  *(void *)(v55 + 16) = nullsub_7;
  *(void *)(v55 + 24) = 0;
  *(void *)(v54 + 128) = v55;
  sub_1001169C4(&v118);
  uint64_t v56 = sub_1000279F4((uint64_t)&v118, *((uint64_t *)&v119 + 1));
  char v98 = (uint64_t *)&v95;
  __chkstk_darwin(v56);
  uint64_t v58 = (uint64_t *)((char *)&v95 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v59 + 16))(v58);
  uint64_t v60 = sub_1000279F4((uint64_t)&v113, *((uint64_t *)&v114 + 1));
  uint64_t v97 = (uint64_t *)&v95;
  __chkstk_darwin(v60);
  uint64_t v62 = (uint64_t *)((char *)&v95 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v63 + 16))(v62);
  uint64_t v64 = sub_1000279F4((uint64_t)&v109, *((uint64_t *)&v110 + 1));
  __chkstk_darwin(v64);
  unint64_t v66 = (uint64_t **)((char *)&v95 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t **))(v67 + 16))(v66);
  uint64_t v68 = *v58;
  uint64_t v69 = *v62;
  uint64_t v70 = *v66;
  swift_retain();
  swift_retain();
  uint64_t v49 = (uint64_t)sub_100120538(v52, v53, v54, v68, v69, v70);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v109);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v113);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v118);
  swift_release();
  swift_release();
  uint64_t v51 = &off_100708C40;
LABEL_10:
  uint64_t v71 = v96;
  uint64_t v72 = (uint64_t *)(v39 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_mobileDocumentReaderManager);
  *uint64_t v72 = v49;
  v72[1] = (uint64_t)v51;
  uint64_t v73 = type metadata accessor for BiometricsHelper();
  swift_allocObject();
  uint64_t v74 = BiometricsHelper.init()();
  long long v75 = (uint64_t *)(v39 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_localAuthenticationManager);
  v75[3] = v73;
  v75[4] = (uint64_t)&protocol witness table for BiometricsHelper;
  *long long v75 = v74;
  uint64_t v76 = type metadata accessor for MobileDocumentReaderRequestValidator();
  *((void *)&v114 + 1) = v76;
  unint64_t v115 = &off_100706EC8;
  uint64_t v77 = sub_10002C2D8((uint64_t *)&v113);
  uint64_t v78 = v104;
  uint64_t v79 = v106;
  v100(v77, v104, v106);
  uint64_t v80 = (uint64_t *)((char *)v77 + *(int *)(v76 + 20));
  v80[3] = v108;
  v80[4] = (uint64_t)&protocol witness table for BundleRecordFetcher;
  sub_10002C2D8(v80);
  BundleRecordFetcher.init()();
  *(uint64_t *)((char *)v77 + *(int *)(v76 + 24)) = (uint64_t)[v41 standardUserDefaults];
  sub_10000C6B4(&v113, v39 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_requestValidator);
  uint64_t v81 = type metadata accessor for MobileDocumentReaderTermsAndConditionsFetcher();
  uint64_t v82 = swift_allocObject();
  *((void *)&v114 + 1) = &type metadata for BootstrapURLManager;
  unint64_t v115 = &off_1007076D0;
  type metadata accessor for DIPConfigWebService();
  uint64_t v83 = (void *)swift_allocObject();
  uint64_t v84 = sub_1000279F4((uint64_t)&v113, (uint64_t)&type metadata for BootstrapURLManager);
  __chkstk_darwin(v84);
  (*(void (**)(void))(v85 + 16))();
  uint64_t v86 = sub_10011F52C(v83);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v113);
  *(void *)(v82 + 16) = v86;
  uint64_t v87 = (uint64_t *)(v39 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_termsAndConditionsFetcher);
  v87[3] = v81;
  v87[4] = (uint64_t)&off_1007080D8;
  *uint64_t v87 = v82;
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C6B4(&v113, v39 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_accountManager);
  uint64_t v88 = v107;
  defaultLogger()();
  swift_retain_n();
  uint64_t v89 = Logger.logObject.getter();
  os_log_type_t v90 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v89, v90))
  {
    uint64_t v91 = swift_slowAlloc();
    *(void *)&long long v113 = swift_slowAlloc();
    *(_DWORD *)uint64_t v91 = 136315394;
    *(void *)&long long v109 = v39;
    uint64_t v92 = String.init<A>(describing:)();
    *(void *)&long long v109 = sub_100110D58(v92, v93, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v91 + 12) = 2080;
    *(void *)&long long v109 = sub_100110D58(0xD000000000000011, 0x80000001006377B0, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v89, v90, "MobileDocumentReaderFlow %s %s", (uint8_t *)v91, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v78, v106);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v107, v105);
  }
  else
  {
    swift_release_n();

    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v78, v79);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v88, v105);
  }
  return v39;
}

uint64_t sub_1001169C4@<X0>(void *a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v30 = type metadata accessor for ISO18013DeviceAuthenticator();
  __chkstk_darwin(v30);
  char v29 = (uint64_t *)((char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v2 = type metadata accessor for DIPOIDVerifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = sub_100007764(&qword_10071FC60);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for COSESignatureValidator();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  DIPOIDVerifier.init()();
  uint64_t v14 = type metadata accessor for Date();
  type metadata accessor for ISO18013IssuerAuthenticator();
  uint64_t v15 = swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  uint64_t v16 = sub_10011FB94((uint64_t)v11, (uint64_t)v6, v14, (uint64_t)&protocol witness table for Date, v15);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  v13(v11, 1, 1, v12);
  int64_t v17 = v29;
  sub_10020F8F0((uint64_t)v11, v29);
  uint64_t v18 = v30;
  uint64_t v33 = v30;
  uint64_t v34 = &off_1006FB1A0;
  int v19 = sub_10002C2D8(v32);
  sub_1001211D4((uint64_t)v17, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ISO18013DeviceAuthenticator);
  uint64_t v20 = type metadata accessor for ISO18013ResponseValidator();
  uint64_t v21 = (void *)swift_allocObject();
  uint64_t v22 = sub_1000279F4((uint64_t)v32, v33);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v25 + 16))(v24);
  v21[7] = v18;
  v21[8] = &off_1006FB1A0;
  uint64_t v26 = sub_10002C2D8(v21 + 4);
  sub_10012116C((uint64_t)v24, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ISO18013DeviceAuthenticator);
  long long v21[2] = v16;
  v21[3] = &off_1006F5D30;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v32);
  uint64_t result = sub_10012123C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ISO18013DeviceAuthenticator);
  uint64_t v28 = v31;
  v31[3] = v20;
  v28[4] = &off_1006F8430;
  *uint64_t v28 = v21;
  return result;
}

uint64_t sub_100116D80()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v19 = v2;
    uint64_t v9 = v8;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v20 = v1;
    uint64_t v21 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v20 = sub_100110D58(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v20 = sub_100110D58(0x74696E696564, 0xE600000000000000, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "MobileDocumentReaderFlow %s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v19);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v13 = v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_auditToken;
  uint64_t v14 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_release();
  swift_unknownObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_localAuthenticationManager);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_requestValidator);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_termsAndConditionsFetcher);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_accountManager);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage);
  uint64_t v15 = v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_featureFlagProvider;
  uint64_t v16 = type metadata accessor for FeatureFlagProvider();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_defaultActor_destroy();
  return v1;
}

uint64_t sub_1001170E4()
{
  sub_100116D80();

  return swift_defaultActor_deallocate();
}

uint64_t sub_100117110()
{
  return type metadata accessor for MobileDocumentReaderFlow();
}

uint64_t type metadata accessor for MobileDocumentReaderFlow()
{
  uint64_t result = qword_100724248;
  if (!qword_100724248) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100117164()
{
  uint64_t result = type metadata accessor for AuditToken();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for FeatureFlagProvider();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_100117260()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for Milestone();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[11] = v3;
  v1[12] = *(void *)(v3 - 8);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_10011738C, v0, 0);
}

uint64_t sub_10011738C()
{
  uint64_t v20 = v0;
  defaultLogger()();
  swift_retain_n();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = v0[12];
    uint64_t v17 = v0[11];
    uint64_t v18 = v0[14];
    uint64_t v3 = v0[7];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    v0[4] = v3;
    uint64_t v5 = String.init<A>(describing:)();
    v0[5] = sub_100110D58(v5, v6, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2080;
    v0[6] = sub_100110D58(0xD00000000000001ALL, 0x8000000100634490, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderFlow %s %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    os_log_type_t v7 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v7(v18, v17);
  }
  else
  {
    uint64_t v8 = v0[14];
    uint64_t v9 = v0[11];
    uint64_t v10 = v0[12];
    swift_release_n();

    os_log_type_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[15] = v7;
  uint64_t v12 = v0[9];
  uint64_t v11 = v0[10];
  uint64_t v13 = v0[8];
  static MobileDocumentReaderMilestone.readerIdentifierCalled.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  uint64_t v14 = (void *)swift_task_alloc();
  v0[16] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100117658;
  return sub_10011B02C(0xD00000000000001ALL, 0x8000000100634490, 145);
}

uint64_t sub_100117658()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 56);
    return _swift_task_switch(sub_1001177B0, v6, 0);
  }
}

uint64_t sub_1001177B0()
{
  sub_10000C728((void *)(*(void *)(v0 + 56) + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager), *(void *)(*(void *)(v0 + 56) + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager + 24));
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100117858;
  return sub_1000C6C18();
}

uint64_t sub_100117858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[18] = a1;
  v4[19] = a2;
  swift_task_dealloc();
  if (v2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v4[7];
    return _swift_task_switch(sub_1001179B4, v7, 0);
  }
}

uint64_t sub_1001179B4()
{
  uint64_t v17 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[18];
    unint64_t v3 = v0[19];
    uint64_t v14 = v0[13];
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[15];
    uint64_t v13 = v0[11];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    v0[2] = sub_100110D58(0xD00000000000001ALL, 0x8000000100634490, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[3] = sub_100110D58(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderFlow %s returning %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v15(v14, v13);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[15];
    uint64_t v7 = v0[13];
    uint64_t v8 = v0[11];
    swift_bridgeObjectRelease_n();

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v10 = v0[18];
  uint64_t v11 = v0[19];
  return v9(v10, v11);
}

uint64_t sub_100117C14(uint64_t a1, uint64_t a2)
{
  v3[108] = v2;
  v3[107] = a2;
  v3[106] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[109] = v4;
  v3[110] = *(void *)(v4 - 8);
  v3[111] = swift_task_alloc();
  v3[112] = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  v3[113] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Milestone();
  v3[114] = v5;
  v3[115] = *(void *)(v5 - 8);
  v3[116] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderConfiguration();
  v3[117] = v6;
  v3[118] = *(void *)(v6 - 8);
  v3[119] = swift_task_alloc();
  v3[120] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v3[121] = v7;
  v3[122] = *(void *)(v7 - 8);
  v3[123] = swift_task_alloc();
  return _swift_task_switch(sub_100117E30, v2, 0);
}

uint64_t sub_100117E30()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0[120];
  uint64_t v2 = v0[118];
  uint64_t v3 = v0[117];
  uint64_t v4 = v0[107];
  defaultLogger()();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v5(v1, v4, v3);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v29 = v0[122];
    uint64_t v30 = v0[121];
    uint64_t v31 = v0[123];
    uint64_t v27 = v0[120];
    uint64_t v8 = v0[119];
    uint64_t v28 = v0[118];
    uint64_t v26 = v0[117];
    uint64_t v9 = v0[108];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315650;
    v0[87] = v9;
    uint64_t v11 = String.init<A>(describing:)();
    v0[93] = sub_100110D58(v11, v12, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    v0[99] = sub_100110D58(0x2865726170657270, 0xEE00293A68746977, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2080;
    v5(v8, v27, v26);
    uint64_t v13 = String.init<A>(describing:)();
    v0[105] = sub_100110D58(v13, v14, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v26);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "MobileDocumentReaderFlow %s %s Configuration: %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  }
  else
  {
    uint64_t v15 = v0[123];
    uint64_t v16 = v0[122];
    uint64_t v17 = v0[121];
    uint64_t v18 = v0[120];
    uint64_t v19 = v0[118];
    uint64_t v20 = v0[117];
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  uint64_t v21 = v0[116];
  uint64_t v22 = v0[115];
  uint64_t v23 = v0[114];
  static MobileDocumentReaderMilestone.prepareCalled.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  uint64_t v24 = (void *)swift_task_alloc();
  v0[124] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100118200;
  return sub_10011B02C(0x2865726170657270, 0xEE00293A68746977, 160);
}

uint64_t sub_100118200()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 864);
    return _swift_task_switch(sub_10011838C, v6, 0);
  }
}

uint64_t sub_10011838C()
{
  swift_retain_n();
  swift_asyncLet_begin();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[125] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10011846C;
  uint64_t v2 = v0[113];
  uint64_t v3 = v0[107];
  return sub_10011BD50(v2, v3);
}

uint64_t sub_10011846C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1008) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 864);
    return _swift_task_switch(sub_1001187A8, v3, 0);
  }
  else
  {
    return _swift_asyncLet_get_throwing(v2 + 16);
  }
}

uint64_t sub_1001185A8()
{
  *(void *)(v1 + 1016) = v0;
  if (v0) {
    uint64_t v2 = sub_10011889C;
  }
  else {
    uint64_t v2 = sub_1001185DC;
  }
  return _swift_task_switch(v2, *(void *)(v1 + 864), 0);
}

uint64_t sub_1001185DC()
{
  uint64_t v1 = v0[113];
  (*(void (**)(void, uint64_t, void))(v0[110] + 16))(v0[111], v1 + *(int *)(v0[112] + 48), v0[109]);
  swift_bridgeObjectRetain();
  MobileDocumentReaderConfigurationResponse.init(sessionIdentifier:sessionExpirationDate:)();
  sub_10012123C(v1, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  return _swift_asyncLet_finish(v0 + 2);
}

uint64_t sub_1001186CC()
{
  return _swift_task_switch(sub_1001186E8, *(void *)(v0 + 864), 0);
}

uint64_t sub_1001186E8()
{
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001187A8()
{
  return _swift_asyncLet_finish(v0 + 16);
}

uint64_t sub_1001187C4()
{
  return _swift_task_switch(sub_1001187E0, *(void *)(v0 + 864), 0);
}

uint64_t sub_1001187E0()
{
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011889C()
{
  sub_10012123C(*(void *)(v0 + 904), (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  return _swift_asyncLet_finish(v0 + 16);
}

uint64_t sub_100118920()
{
  return _swift_task_switch(sub_10011893C, *(void *)(v0 + 864), 0);
}

uint64_t sub_10011893C()
{
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001189F8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return _swift_task_switch(sub_100118A18, 0, 0);
}

uint64_t sub_100118A18()
{
  sub_10000C728((void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage), *(void *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage+ 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100118AC0;
  return sub_10014B438();
}

uint64_t sub_100118AC0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100118BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  sub_100007764(&qword_100722D70);
  v4[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  v4[16] = v7;
  v4[17] = *(void *)(v7 - 8);
  v4[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Milestone();
  v4[19] = v8;
  v4[20] = *(void *)(v8 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v4[22] = v9;
  v4[23] = *(void *)(v9 - 8);
  v4[24] = swift_task_alloc();
  return _swift_task_switch(sub_100118E18, v3, 0);
}

uint64_t sub_100118E18()
{
  uint64_t v19 = v0;
  defaultLogger()();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[23];
    uint64_t v16 = v0[22];
    uint64_t v17 = v0[24];
    uint64_t v4 = v0[8];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    v0[2] = v4;
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100110D58(v6, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2080;
    v0[4] = sub_100110D58(0x746E61686372656DLL, 0xEE00293A726F6628, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderFlow %s %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v17, v16);
  }
  else
  {
    uint64_t v9 = v0[23];
    uint64_t v8 = v0[24];
    uint64_t v10 = v0[22];
    swift_release_n();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v12 = v0[20];
  uint64_t v11 = v0[21];
  uint64_t v13 = v0[19];
  static MobileDocumentReaderMilestone.merchantCalled.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  unint64_t v14 = (void *)swift_task_alloc();
  v0[25] = v14;
  *unint64_t v14 = v0;
  v14[1] = sub_1001190DC;
  return sub_10011B02C(0x746E61686372656DLL, 0xEE00293A726F6628, 186);
}

uint64_t sub_1001190DC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 64);
    return _swift_task_switch(sub_100119264, v6, 0);
  }
}

uint64_t sub_100119264()
{
  sub_10000C728((void *)(v0[8] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager), *(void *)(v0[8] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[26] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100119318;
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  return sub_1000CE59C(v2, v3, v4);
}

uint64_t sub_100119318()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_1001198C0;
  }
  else {
    uint64_t v4 = sub_100119444;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100119444()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[15];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[17] + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = v0[13];
    uint64_t v4 = v0[14];
    uint64_t v5 = v0[11];
    uint64_t v6 = v0[12];
    uint64_t v7 = v0[10];
    uint64_t v23 = v0[9];
    uint64_t v9 = v0[6];
    uint64_t v8 = (void *)v0[7];
    sub_10000C6CC(v2, &qword_100722D70);
    type metadata accessor for DaemonAnalytics();
    uint64_t v10 = enum case for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.sessionMissing(_:);
    uint64_t v11 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v4, v10, v11);
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v4, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.invalid(_:), v6);
    static DaemonAnalytics.sendReadDocumentSessionStatus(status:)();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v6);
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = v9;
    v12._object = v8;
    String.append(_:)(v12);
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v5, enum case for DIPError.Code.documentReaderMissingSession(_:), v23);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v14 = v0[18];
    sub_10012116C(v2, v14, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    if (*(void *)(v14 + *(int *)(v1 + 44) + 8))
    {
      uint64_t v15 = v0[5];
      uint64_t v16 = (uint64_t *)(v0[18] + *(int *)(v0[16] + 40));
      uint64_t v17 = *v16;
      unint64_t v18 = v16[1];
      swift_bridgeObjectRetain_n();
      sub_1000338D4(v17, v18);
      swift_bridgeObjectRetain();
      MobileDocumentReaderMerchant.init(name:logoData:identifier:)();
      uint64_t v19 = type metadata accessor for MobileDocumentReaderMerchant();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v15, 0, 1, v19);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = v0[5];
      uint64_t v21 = type metadata accessor for MobileDocumentReaderMerchant();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
    }
    sub_10012123C(v0[18], (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
  }
  return v13();
}

uint64_t sub_1001198C0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011996C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderDeviceEngagementType();
  v4[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[10] = v7;
  v4[11] = *(void *)(v7 + 64);
  v4[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MobileDocumentReaderRequest();
  v4[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[14] = v9;
  v4[15] = *(void *)(v9 + 64);
  v4[16] = swift_task_alloc();
  sub_100007764(&qword_10071FEE0);
  v4[17] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Milestone();
  v4[18] = v10;
  v4[19] = *(void *)(v10 - 8);
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_100119B84, v3, 0);
}

uint64_t sub_100119B84()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[5];
  static MobileDocumentReaderMilestone.readDocumentCalled.getter();
  Milestone.log()();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v5(v1, v3);
  uint64_t v6 = OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask;
  v0[21] = OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask;
  if (*(void *)(v4 + v6))
  {
    uint64_t v7 = v0[20];
    uint64_t v8 = v0[18];
    uint64_t v10 = v0[7];
    uint64_t v9 = v0[8];
    uint64_t v11 = v0[6];
    static MobileDocumentReaderMilestone.readDocumentInProgress.getter();
    Milestone.log()();
    v5(v7, v8);
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.documentReadingAlreadyInProgress(_:), v11);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v15 = v0[16];
    uint64_t v14 = v0[17];
    uint64_t v16 = v0[14];
    uint64_t v17 = v0[12];
    uint64_t v18 = v0[13];
    uint64_t v33 = v18;
    uint64_t v34 = v15;
    uint64_t v35 = v17;
    uint64_t v19 = v0[10];
    uint64_t v36 = v0[15];
    uint64_t v20 = v0[9];
    uint64_t v37 = v0[5];
    uint64_t v38 = v14;
    uint64_t v31 = v0[3];
    uint64_t v32 = v0[4];
    uint64_t v21 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v14, 1, 1, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v31, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, v32, v20);
    uint64_t v22 = sub_10012129C(&qword_100724420, (void (*)(uint64_t))type metadata accessor for MobileDocumentReaderFlow);
    unint64_t v23 = (*(unsigned __int8 *)(v16 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    unint64_t v24 = (v36 + *(unsigned __int8 *)(v19 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v25 = (char *)swift_allocObject();
    *((void *)v25 + 2) = v37;
    *((void *)v25 + 3) = v22;
    *((void *)v25 + 4) = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v25[v23], v34, v33);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(&v25[v24], v35, v20);
    swift_retain_n();
    uint64_t v26 = sub_10016F5AC(v38, (uint64_t)&unk_100724428, (uint64_t)v25);
    v0[22] = v26;
    *(void *)(v4 + v6) = v26;
    swift_retain();
    swift_release();
    uint64_t v27 = (void *)swift_task_alloc();
    v0[23] = v27;
    uint64_t v28 = type metadata accessor for MobileDocumentReaderResponse();
    uint64_t v29 = sub_100007764((uint64_t *)&unk_100723450);
    *uint64_t v27 = v0;
    v27[1] = sub_10011A00C;
    uint64_t v30 = v0[2];
    return Task.value.getter(v30, v26, v28, v29, &protocol self-conformance witness table for Error);
  }
}

uint64_t sub_10011A00C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_10011A1F8;
  }
  else {
    uint64_t v4 = sub_10011A138;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10011A138()
{
  *(void *)(v0[5] + v0[21]) = 0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10011A1F8()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[5];
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  *(void *)(v2 + v1) = 0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10011A3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  uint64_t v7 = type metadata accessor for Milestone();
  v6[6] = v7;
  v6[7] = *(void *)(v7 - 8);
  v6[8] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v6[9] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_10011A4D4;
  return sub_10011B02C(0xD000000000000022, 0x8000000100637A20, 226);
}

uint64_t sub_10011A4D4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 80) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10011A650;
    uint64_t v7 = *(void *)(v2 + 32);
    return sub_10011CBD4(v7);
  }
}

uint64_t sub_10011A650()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 24);
    return _swift_task_switch(sub_10011A79C, v6, 0);
  }
}

uint64_t sub_10011A79C()
{
  uint64_t v1 = *(void *)(v0[3] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_mobileDocumentReaderManager + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 40) + **(int **)(v1 + 40));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10011A8B4;
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[2];
  return v8(v6, v4, v5, ObjectType, v1);
}

uint64_t sub_10011A8B4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 24);
    return _swift_task_switch(sub_10011AA00, v6, 0);
  }
}

uint64_t sub_10011AA00()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  static MobileDocumentReaderMilestone.readDocumentReturningResponse.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10011AA98()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Milestone();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_10011ABB4, v0, 0);
}

uint64_t sub_10011ABB4()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  static MobileDocumentReaderMilestone.cancelReadCalled.getter();
  Milestone.log()();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[9] = v4;
  v0[10] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[11] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10011ACA4;
  return sub_10011B02C(0x65526C65636E6163, 0xEC00000029286461, 249);
}

uint64_t sub_10011ACA4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 16);
    return _swift_task_switch(sub_10011ADE8, v6, 0);
  }
}

uint64_t sub_10011ADE8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask;
  if (*(void *)(v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask))
  {
    type metadata accessor for MobileDocumentReaderResponse();
    swift_retain();
    sub_100007764((uint64_t *)&unk_100723450);
    Task.cancel()();
    swift_release();
    *(void *)(v1 + v2) = 0;
    swift_release();
  }
  else
  {
    uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[9];
    uint64_t v5 = v0[8];
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[6];
    uint64_t v8 = v0[3];
    uint64_t v9 = v0[4];
    static MobileDocumentReaderMilestone.noReadInProgressToCancel.getter();
    Milestone.log()();
    v4(v5, v7);
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v6, enum case for DIPError.Code.unexpectedDaemonState(_:), v8);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10011B02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[38] = a3;
  v4[39] = v3;
  v4[36] = a1;
  v4[37] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[40] = v5;
  v4[41] = *(void *)(v5 - 8);
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v4[44] = v6;
  v4[45] = *(void *)(v6 - 8);
  v4[46] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v4[47] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Locale();
  v4[48] = v7;
  v4[49] = *(void *)(v7 - 8);
  v4[50] = swift_task_alloc();
  return _swift_task_switch(sub_10011B1E8, v3, 0);
}

uint64_t sub_10011B1E8()
{
  uint64_t v22 = v0;
  id v1 = [self standardUserDefaults];
  v2._object = (void *)0x8000000100637930;
  v2._uint64_t countAndFlagsBits = 0xD000000000000031;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 344);
    uint64_t v8 = *(void *)(v0 + 320);
    uint64_t v9 = *(void *)(v0 + 328);
    unint64_t v10 = *(void *)(v0 + 296);
    if (v6)
    {
      uint64_t v11 = *(void *)(v0 + 288);
      uint64_t v20 = *(void *)(v0 + 320);
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 280) = sub_100110D58(v11, v10, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderFlow %s region check disabled.", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v20);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    if (qword_10071F4B0 != -1) {
      swift_once();
    }
    uint64_t v13 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
    uint64_t v14 = (uint64_t)&v13[4];
    uint64_t v15 = v13 + 52;
    os_unfair_lock_lock(v13 + 52);
    sub_1000262B4(v14, (_OWORD *)(v0 + 16));
    os_unfair_lock_unlock(v15);
    sub_100030A10(v0 + 16, v0 + 208);
    sub_1000262D0(v0 + 16);
    uint64_t v18 = sub_10000C728((void *)(v0 + 208), *(void *)(v0 + 232));
    static Locale.current.getter();
    *(void *)(v0 + 408) = *v18;
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10011B584;
    return sub_100141324();
  }
}

uint64_t sub_10011B584()
{
  Swift::String v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[39];
    (*(void (**)(void, void))(v2[49] + 8))(v2[50], v2[48]);
    uint64_t v4 = sub_10011B978;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v4 = sub_10011B6BC;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10011B6BC()
{
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v4 = *(void *)(v0 + 312);
  sub_10000C728((void *)(*(void *)(v0 + 408) + 16), *(void *)(*(void *)(v0 + 408) + 40));
  *(unsigned char *)(v0 + 432) = dispatch thunk of MobileDocumentReaderSupportChecking.isLocaleSupported(_:)() & 1;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return _swift_task_switch(sub_10011B784, v4, 0);
}

uint64_t sub_10011B784()
{
  char v1 = *(unsigned char *)(v0 + 432);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 208);
  if ((v1 & 1) == 0)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 360) + 104))(*(void *)(v0 + 368), enum case for DIPError.Code.regionNotSupported(_:), *(void *)(v0 + 352));
    swift_bridgeObjectRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10011B978()
{
  uint64_t v1 = v0[47];
  uint64_t v2 = v0[44];
  uint64_t v3 = v0[45];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 26));
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = v0[47];
  if (v4 == 1)
  {
    sub_10000C6CC(v0[47], &qword_100723600);
  }
  else
  {
    uint64_t v6 = v0[44];
    uint64_t v7 = v0[45];
    int v8 = (*(uint64_t (**)(void, uint64_t))(v7 + 88))(v0[47], v6);
    int v9 = enum case for DIPError.Code.networkTimeOut(_:);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    if (v8 == v9)
    {
      (*(void (**)(void, void, void))(v0[45] + 104))(v0[46], enum case for DIPError.Code.internalError(_:), v0[44]);
      swift_bridgeObjectRetain();
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_6;
    }
  }
  uint64_t v11 = v0[45];
  uint64_t v10 = v0[46];
  uint64_t v12 = v0[44];
  uint64_t v14 = v0[41];
  uint64_t v13 = v0[42];
  uint64_t v15 = v0[40];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.documentReaderUnableToCheckRegionSupport(_:), v12);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
LABEL_6:
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10011BD50(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v3[13] = v5;
  v3[14] = *(void *)(v5 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError();
  v3[17] = v6;
  v3[18] = *(void *)(v6 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  return _swift_task_switch(sub_10011BEF8, v2, 0);
}

uint64_t sub_10011BEF8()
{
  sub_10000C728((void *)(v0[9] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager), *(void *)(v0[9] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[22] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10011BFA8;
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  return sub_1000C9818(v2, v3);
}

uint64_t sub_10011BFA8()
{
  uint64_t v2 = (void *)*v1;
  v2[23] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[9];
    return _swift_task_switch(sub_10011C134, v3, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_10011C134()
{
  v0[2] = v0[23];
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0[18];
    uint64_t v35 = v0[19];
    uint64_t v2 = v0[16];
    uint64_t v32 = v0[20];
    uint64_t v33 = v0[17];
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[15];
    uint64_t v5 = v0[13];
    (*(void (**)(uint64_t, void))(v1 + 32))(v32, v0[21]);
    DIPError.code.getter();
    uint64_t v6 = enum case for DIPError.Code.topekaTermsAndConditionsAcceptanceRequired(_:);
    uint64_t v7 = *(void (**)(uint64_t, void, uint64_t))(v3 + 104);
    v0[24] = v7;
    v0[25] = (v3 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    uint64_t v30 = v7;
    v7(v4, v6, v5);
    sub_10012129C(&qword_100724410, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v8 = v0[4];
    uint64_t v31 = v0[3];
    int v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v9(v4, v5);
    v9(v2, v5);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v0[26] = v10;
    v0[27] = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v10(v35, v32, v33);
    uint64_t v11 = v0[18];
    if (v31 == v8)
    {
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v12(v0[19], v0[17]);
LABEL_6:
      v0[28] = v12;
      swift_errorRelease();
      defaultLogger()();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "MobileDocumentReaderFlow terms and conditions acceptance required", v22, 2u);
        swift_slowDealloc();
      }
      uint64_t v24 = v0[11];
      uint64_t v23 = v0[12];
      uint64_t v26 = v0[9];
      uint64_t v25 = v0[10];

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      sub_10000C728((void *)(v26 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_termsAndConditionsFetcher), *(void *)(v26 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_termsAndConditionsFetcher + 24));
      uint64_t v27 = (void *)swift_task_alloc();
      v0[29] = v27;
      *uint64_t v27 = v0;
      v27[1] = sub_10011C6CC;
      return sub_100514738();
    }
    uint64_t v15 = v0[15];
    uint64_t v14 = v0[16];
    uint64_t v16 = v0[13];
    uint64_t v34 = v0[19];
    uint64_t v36 = v0[17];
    DIPError.code.getter();
    v30(v15, enum case for DIPError.Code.topekaMobileDocumentReaderTermsAndConditionsAcceptanceRequired(_:), v16);
    uint64_t v17 = v9;
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v18 = v0[5];
    uint64_t v19 = v0[6];
    v17(v15, v16);
    v17(v14, v16);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v12(v34, v36);
    if (v18 == v19) {
      goto LABEL_6;
    }
    v12(v0[20], v0[17]);
    swift_errorRelease();
    v30(v0[16], enum case for DIPError.Code.internalError(_:), v0[13]);
  }
  else
  {
    uint64_t v13 = v0[14];
    swift_errorRelease();
    (*(void (**)(void, void, void))(v13 + 104))(v0[16], enum case for DIPError.Code.internalError(_:), v0[13]);
  }
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_10011C6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[30] = v2;
  swift_task_dealloc();
  uint64_t v7 = v6[9];
  if (v2)
  {
    uint64_t v8 = sub_10011CB08;
  }
  else
  {
    v6[31] = a2;
    v6[32] = a1;
    uint64_t v8 = sub_10011C80C;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_10011C80C()
{
  uint64_t v17 = v0[31];
  uint64_t v18 = v0[32];
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[26];
  uint64_t v2 = (void (*)(uint64_t, void, uint64_t))v0[24];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[13];
  sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  v1(v7, v3, v4);
  v2(v5, enum case for DIPError.Code.documentReaderTermsAndConditionsAcceptanceRequired(_:), v6);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v8 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100610730;
  unint64_t v11 = v10 + v9;
  uint64_t v12 = (void *)(v10 + v9 + v8[14]);
  uint64_t v13 = enum case for DIPError.PropertyKey.termsAndConditions(_:);
  uint64_t v14 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v11, v13, v14);
  uint64_t v12[3] = &type metadata for MobileDocumentReaderTermsAndConditions;
  *uint64_t v12 = v18;
  v12[1] = v17;
  sub_10015C504(v10);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  v19(v3, v4);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_10011CB08()
{
  (*(void (**)(void, void))(v0 + 224))(*(void *)(v0 + 160), *(void *)(v0 + 136));
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011CBD4(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  sub_100007764(&qword_100722D70);
  v2[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  v2[17] = v4;
  v2[18] = *(void *)(v4 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v2[21] = v5;
  v2[22] = *(void *)(v5 - 8);
  v2[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderRequest();
  v2[24] = v6;
  v2[25] = *(void *)(v6 - 8);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v2[28] = v7;
  v2[29] = *(void *)(v7 - 8);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v2[32] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPSignpost();
  v2[33] = v8;
  v2[34] = *(void *)(v8 - 8);
  v2[35] = swift_task_alloc();
  return _swift_task_switch(sub_10011CEEC, v1, 0);
}

uint64_t sub_10011CEEC()
{
  char v48 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[25];
  static DaemonSignposts.MobileDocumentReader.canReadDocument.getter();
  DIPSignpost.init(_:)();
  defaultLogger()();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(v3, v2, v4);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v46 = v1[31];
    uint64_t v43 = v1[29];
    uint64_t v44 = v1[28];
    uint64_t v41 = v1[27];
    uint64_t v42 = v1[25];
    uint64_t v38 = v1[26];
    uint64_t v39 = v1[24];
    uint64_t v40 = v6;
    uint64_t v9 = v1[12];
    uint64_t v10 = swift_slowAlloc();
    v47[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315650;
    v1[7] = v9;
    uint64_t v11 = String.init<A>(describing:)();
    v1[8] = sub_100110D58(v11, v12, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    v1[9] = sub_100110D58(0xD000000000000017, 0x8000000100637870, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2080;
    v40(v38, v41, v39);
    uint64_t v13 = String.init<A>(describing:)();
    v1[10] = sub_100110D58(v13, v14, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v39);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "MobileDocumentReaderFlow %s %s Request: %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v15(v46, v44);
  }
  else
  {
    uint64_t v16 = v1[31];
    uint64_t v17 = v1[28];
    uint64_t v18 = v1[29];
    uint64_t v19 = v1[27];
    uint64_t v20 = v1[24];
    uint64_t v21 = v1[25];
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v15(v16, v17);
  }
  sub_10000C728((void *)(v1[12] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_localAuthenticationManager), *(void *)(v1[12] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_localAuthenticationManager + 24));
  if (dispatch thunk of LocalAuthenticationManaging.isPasscodeSet.getter())
  {
LABEL_9:
    sub_10011EAC4();
    uint64_t v30 = *(void *)(v1[12] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_mobileDocumentReaderManager + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v30 + 32) + **(int **)(v30 + 32));
    uint64_t v32 = (void *)swift_task_alloc();
    v1[36] = v32;
    *uint64_t v32 = v1;
    v32[1] = sub_10011D738;
    return v45(ObjectType, v30);
  }
  id v22 = [self standardUserDefaults];
  v23._uint64_t countAndFlagsBits = 0xD000000000000033;
  v23._object = (void *)0x8000000100637890;
  Swift::Bool v24 = NSUserDefaults.internalBool(forKey:)(v23);

  if (v24)
  {
    defaultLogger()();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "MobileDocumentReaderFlow passcode is not set. Bypassing this check due to internal setting.", v27, 2u);
      swift_slowDealloc();
    }
    uint64_t v28 = v1[30];
    uint64_t v29 = v1[28];

    v15(v28, v29);
    goto LABEL_9;
  }
  (*(void (**)(void, void, void))(v1[22] + 104))(v1[23], enum case for DIPError.Code.documentReaderPasscodeNotSet(_:), v1[21]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  uint64_t v35 = v1[34];
  uint64_t v34 = v1[35];
  uint64_t v36 = v1[33];
  (*(void (**)(void, void, void))(v1[22] + 104))(v1[23], enum case for DIPError.Code.internalError(_:), v1[21]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = (uint64_t (*)(void))v1[1];
  return v37();
}

uint64_t sub_10011D738()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v4 = sub_10011E884;
  }
  else {
    uint64_t v4 = sub_10011D864;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10011D864()
{
  sub_10000C728((void *)(v0[12] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager), *(void *)(v0[12] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager + 24));
  uint64_t v1 = MobileDocumentReaderRequest.sessionIdentifier.getter();
  uint64_t v3 = v2;
  v0[38] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[39] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10011D938;
  uint64_t v5 = v0[16];
  return sub_1000CE59C(v5, v1, v3);
}

uint64_t sub_10011D938()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 96);
    uint64_t v4 = sub_10011E150;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 96);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10011DA60;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10011DA60()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[16];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[18] + 48))(v2, 1, v1) == 1)
  {
    sub_10000C6CC(v2, &qword_100722D70);
LABEL_21:
    uint64_t v28 = v0[22];
    uint64_t v27 = v0[23];
    uint64_t v29 = v0[21];
    uint64_t v31 = v0[14];
    uint64_t v30 = v0[15];
    uint64_t v32 = v0[13];
    type metadata accessor for DaemonAnalytics();
    uint64_t v33 = enum case for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.sessionMissing(_:);
    uint64_t v34 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104))(v30, v33, v34);
    (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))(v30, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.invalid(_:), v32);
    static DaemonAnalytics.sendReadDocumentSessionStatus(status:)();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))(v27, enum case for DIPError.Code.documentReaderMissingSession(_:), v29);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_22;
  }
  uint64_t v3 = v0[20];
  sub_10012116C(v2, v3, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  unint64_t v4 = *(void *)(v3 + *(int *)(v1 + 28));
  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_5;
    }
LABEL_20:
    uint64_t v26 = v0[20];
    swift_bridgeObjectRelease();
    sub_10012123C(v26, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_20;
  }
LABEL_5:
  if ((v4 & 0xC000000000000001) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v7 = *(id *)(v4 + 32);
  }
  os_log_type_t v8 = v7;
  v0[41] = v7;
  uint64_t v10 = v0[19];
  uint64_t v9 = v0[20];
  uint64_t v11 = v0[17];
  uint64_t v12 = v0[12];
  swift_bridgeObjectRelease();
  sub_10000C728((void *)(v12 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_requestValidator), *(void *)(v12 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_requestValidator + 24));
  type metadata accessor for SecCertificate(0);
  v0[5] = v13;
  v0[6] = &protocol witness table for SecCertificateRef;
  v0[2] = v8;
  uint64_t v14 = *(void *)(v9 + *(int *)(v11 + 44) + 8);
  sub_1001211D4(v9, v10, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  uint64_t v15 = v0[19];
  if (v14)
  {
    id v16 = v8;
    sub_10012123C(v15, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v15 + *(int *)(v0[17] + 40));
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    id v20 = v8;
    sub_1000338D4(v18, v19);
    sub_10012123C(v15, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
    if (v19 >> 60 == 15)
    {
      int v21 = 1;
      goto LABEL_14;
    }
    sub_10000C5E0(v18, v19);
  }
  int v21 = 0;
LABEL_14:
  uint64_t v22 = v0[40];
  sub_1004ADA50(v0[11], v0 + 2, v21);
  if (v22)
  {
    sub_10012123C(v0[20], (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);

    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
LABEL_22:
    uint64_t v35 = v0[34];
    uint64_t v36 = v0[35];
    uint64_t v38 = v0[33];
    (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v37 = (uint64_t (*)(void))v0[1];
    return v37();
  }
  uint64_t v23 = v0[12];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  sub_10000C728((void *)(v23 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage), *(void *)(v23 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage + 24));
  Swift::Bool v24 = (void *)swift_task_alloc();
  v0[42] = v24;
  *Swift::Bool v24 = v0;
  v24[1] = sub_10011E398;
  uint64_t v25 = v0[11];
  return sub_10014A12C(v25);
}

uint64_t sub_10011E150()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[33];
  (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10011E398()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  if (v0)
  {
    unint64_t v4 = sub_10011E61C;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_10011E4D4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10011E4D4()
{
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 160);

  sub_10012123C(v4, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10011E61C()
{
  uint64_t v1 = *(void *)(v0 + 160);

  sub_10012123C(v1, (uint64_t (*)(void))type metadata accessor for MobileDocumentReaderAuthenticationSession);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 264);
  (*(void (**)(void, void, void))(*(void *)(v0 + 176) + 104))(*(void *)(v0 + 184), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 168));
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10011E884()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[33];
  (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10011EAC4()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v52 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)&v49 - v7;
  uint64_t v61 = type metadata accessor for DIPError();
  uint64_t v59 = *(void *)(v61 - 8);
  uint64_t v9 = __chkstk_darwin(v61);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v60 = (char *)&v49 - v12;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v55 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v51 = (char *)&v49 - v18;
  __chkstk_darwin(v17);
  id v20 = (char *)&v49 - v19;
  defaultLogger()();
  uint64_t v62 = v3;
  swift_retain_n();
  int v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v54 = v4;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v50 = v8;
    uint64_t v25 = v24;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v58 = v11;
    uint64_t v49 = v26;
    uint64_t v65 = v26;
    *(_DWORD *)uint64_t v25 = 136315394;
    uint64_t v57 = v13;
    uint64_t v64 = (uint64_t)v62;
    uint64_t v56 = v14;
    uint64_t v27 = String.init<A>(describing:)();
    uint64_t v64 = sub_100110D58(v27, v28, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v2 = v1;
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    uint64_t v64 = sub_100110D58(0x4153486B63656863, 0xEB00000000292832, &v65);
    uint64_t v14 = v56;
    uint64_t v13 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "MobileDocumentReaderFlow %s %s)", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    uint64_t v11 = v58;
    swift_slowDealloc();
    os_log_type_t v8 = v50;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v29 = *(void (**)(char *, uint64_t))(v14 + 8);
  v29(v20, v13);
  sub_10000C728(&v62[OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_accountManager], *(void *)&v62[OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_accountManager + 24]);
  uint64_t result = dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  if (!v2) {
    return result;
  }
  uint64_t v65 = v2;
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  uint64_t v31 = v60;
  if (swift_dynamicCast())
  {
    uint64_t v62 = (char *)v29;
    uint64_t v56 = v14;
    uint64_t v57 = v13;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v11, v31, v61);
    DIPError.code.getter();
    uint64_t v58 = v11;
    uint64_t v33 = v52;
    uint64_t v32 = v53;
    uint64_t v34 = v54;
    uint64_t v60 = *(char **)(v53 + 104);
    ((void (*)(char *, void, uint64_t))v60)(v52, enum case for DIPError.Code.hsa2NotEnabled(_:), v54);
    sub_10012129C(&qword_100724410, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v36 = v63;
    uint64_t v35 = v64;
    uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
    v37(v33, v34);
    v37(v8, v34);
    if (v35 == v36)
    {
      uint64_t v38 = (void (*)(char *, void, uint64_t))v60;
      uint64_t v39 = v58;
      swift_errorRelease();
      uint64_t v40 = v51;
      defaultLogger()();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "MobileDocumentReaderFlow account is signed in, but HSA2 is disabled", v43, 2u);
        swift_slowDealloc();
      }

      ((void (*)(char *, uint64_t))v62)(v40, v57);
      v38(v8, enum case for DIPError.Code.documentReaderHSA2NotEnabled(_:), v34);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      sub_10012129C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v44 = v61;
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v39, v44);
      return swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v61);
    uint64_t v13 = v57;
    uint64_t v29 = (void (*)(char *, uint64_t))v62;
  }
  swift_errorRelease();
  uint64_t v45 = v55;
  defaultLogger()();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    char v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "MobileDocumentReaderFlow ignoring account not signed in", v48, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  return ((uint64_t (*)(char *, uint64_t))v29)(v45, v13);
}

uint64_t sub_10011F2EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for MobileDocumentReaderFlow();
  uint64_t v4 = swift_allocObject();
  uint64_t result = sub_100115AA0(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10011F33C(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v4 = *v2;
  v3[4] = *v2;
  return _swift_task_switch(sub_10011F360, v4, 0);
}

uint64_t sub_10011F360()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[2];
  uint64_t v3 = *(void *)(v0[4] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_mobileDocumentReaderManager + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  uint64_t v6 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v3 + 16);
  swift_retain();
  v6(sub_10011F488, v5, ObjectType, v3);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10011F450()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011F488(uint64_t a1)
{
  return sub_100115870(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10011F490()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10011F4D0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10011F52C(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v7 = (int *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (double *)((char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (void *)((char *)v25 - v11);
  v25[3] = &type metadata for BootstrapURLManager;
  v25[4] = &off_1007076D0;
  sub_100007764(&qword_1007243F0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_DWORD *)(v13 + 64) = 0;
  a1[6] = v13;
  sub_100120AF0(v26);
  sub_100007764(&qword_1007243F8);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 448) = 0;
  sub_1000BEA14((uint64_t)v26, v14 + 16, &qword_100722350);
  a1[7] = v14;
  uint64_t v15 = (void *)((char *)v12 + v7[8]);
  *uint64_t v15 = 0x3FF0000000000000;
  uint64_t v16 = enum case for DIPBackoffStrategy.exponential(_:);
  uint64_t v17 = type metadata accessor for DIPBackoffStrategy();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v15, v16, v17);
  *uint64_t v12 = 0x403E000000000000;
  v12[1] = 3;
  *((unsigned char *)v12 + v7[9]) = 0;
  *((unsigned char *)v12 + v7[10]) = 0;
  *((unsigned char *)v12 + v7[11]) = 1;
  uint64_t v18 = (void *)((char *)v12 + v7[12]);
  *uint64_t v18 = 0;
  v18[1] = 0;
  sub_100007764(&qword_100724400);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 56) = 0;
  sub_100030A10((uint64_t)v25, v19 + 16);
  a1[2] = v19;
  UUID.init()();
  uint64_t v20 = UUID.uuidString.getter();
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  a1[3] = v20;
  a1[4] = v22;
  sub_1001211D4((uint64_t)v12, (uint64_t)v10, type metadata accessor for DIPHTTPSession.Configuration);
  type metadata accessor for DIPHTTPSession(0);
  swift_allocObject();
  uint64_t v23 = sub_1005D20EC(v10);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v25);
  sub_10012123C((uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
  a1[5] = v23;
  return a1;
}

uint64_t sub_10011F828(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = &type metadata for FairPlayProvisioner;
  uint64_t v40 = &off_1006FC560;
  uint64_t v13 = (_OWORD *)swift_allocObject();
  *(void *)&long long v38 = v13;
  long long v14 = a2[1];
  v13[1] = *a2;
  v13[2] = v14;
  v13[3] = a2[2];
  sub_100048D6C(a1, (uint64_t)&v33, &qword_100724408);
  if (v34)
  {
    sub_10000C6CC(a1, &qword_100724408);
    sub_10000C6B4(&v33, (uint64_t)&v35);
    *(void *)(a3 + 96) = 0;
  }
  else
  {
    sub_10000C6CC((uint64_t)&v33, &qword_100724408);
    uint64_t v15 = (objc_class *)type metadata accessor for IdentitySelfHealer();
    uint64_t v16 = (char *)objc_allocWithZone(v15);
    uint64_t v17 = &v16[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    v32.receiver = v16;
    v32.super_class = v15;
    *(void *)(a3 + 96) = [super init];
    uint64_t v18 = (char *)v12 + v10[6];
    uint64_t v19 = enum case for DIPBackoffStrategy.noBackoff(_:);
    uint64_t v20 = type metadata accessor for DIPBackoffStrategy();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v18, v19, v20);
    *uint64_t v12 = 0x403E000000000000;
    v12[1] = 0;
    *((unsigned char *)v12 + v10[7]) = 0;
    *((unsigned char *)v12 + v10[8]) = 1;
    *((unsigned char *)v12 + v10[9]) = 0;
    uint64_t v21 = (void *)((char *)v12 + v10[10]);
    *uint64_t v21 = 0;
    v21[1] = 0;
    UUID.init()();
    uint64_t v22 = UUID.uuidString.getter();
    uint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v25 = (objc_class *)type metadata accessor for DIPTopekaWebService();
    id v26 = objc_allocWithZone(v25);
    uint64_t v27 = (char *)sub_1002B92C4(v22, v24, (uint64_t)v12);
    unint64_t v28 = v27;
    uint64_t v29 = &off_100708438;
    if (!*(void *)(a3 + 96)) {
      uint64_t v29 = 0;
    }
    *(void *)&v27[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer + 8] = v29;
    swift_unknownObjectWeakAssign();
    uint64_t v36 = v25;
    uint64_t v37 = &off_100709B08;
    *(void *)&long long v35 = v28;
    sub_10000C6CC(a1, &qword_100724408);
  }
  sub_10000C6B4(&v35, a3 + 16);
  sub_10000C6B4(&v38, a3 + 56);
  return a3;
}

uint64_t sub_10011FB40(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011FB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v42 = a1;
  uint64_t v39 = type metadata accessor for DIPError.Code();
  uint64_t v37 = *(void *)(v39 - 8);
  uint64_t v7 = __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v40 = (char *)&v36 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = sub_100007764(&qword_10071FC60);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for COSESignatureValidator();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  long long v38 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v36 - v23;
  uint64_t v25 = type metadata accessor for DIPOIDVerifier();
  uint64_t v46 = v25;
  os_log_type_t v47 = &protocol witness table for DIPOIDVerifier;
  id v26 = sub_10002C2D8((uint64_t *)&v45);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v26, a2, v25);
  swift_defaultActor_initialize();
  uint64_t v27 = OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_decoder;
  type metadata accessor for CBORDecoder();
  swift_allocObject();
  *(void *)(a5 + v27) = CBORDecoder.init()();
  uint64_t v28 = v42;
  sub_100048D6C(v42, (uint64_t)v18, &qword_10071FC60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_10000C6CC((uint64_t)v18, &qword_10071FC60);
    uint64_t v29 = *(void (**)(char *, void, uint64_t))(v37 + 104);
    uint64_t v37 = v19;
    uint64_t v30 = v39;
    v29(v15, enum case for DIPError.Code.documentReaderUnknownIssuerAuthAlgorithm(_:), v39);
    v29(v13, enum case for DIPError.Code.documentReaderInvalidIssuerAuthCerts(_:), v30);
    v29(v40, enum case for DIPError.Code.documentReaderMisformattedIssuerAuthSignature(_:), v30);
    v29(v41, enum case for DIPError.Code.documentReaderInvalidIssuerAuthSignature(_:), v30);
    uint64_t v31 = v38;
    COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)();
    sub_10000C6CC(v28, &qword_10071FC60);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(a5 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_signatureValidator, v31, v37);
  }
  else
  {
    sub_10000C6CC(v28, &qword_10071FC60);
    objc_super v32 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v32(v24, v18, v19);
    v32((char *)(a5 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_signatureValidator), v24, v19);
  }
  sub_10000C6B4(&v45, a5 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_oidVerifier);
  long long v33 = (void *)(a5 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_dateProvider);
  uint64_t v34 = v44;
  *long long v33 = v43;
  v33[1] = v34;
  return a5;
}

uint64_t sub_10011FFE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  uint64_t v47 = a8;
  uint64_t v46 = a7;
  uint64_t v45 = a6;
  uint64_t v44 = a1;
  uint64_t v13 = type metadata accessor for BundleRecordFetcher();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for MobileDocumentReaderAuthenticationStorage();
  v60[3] = v17;
  uint64_t v60[4] = &off_1006F8A50;
  v60[0] = a3;
  uint64_t v58 = type metadata accessor for MobileDocumentReaderAuthenticationCertificateFetcher();
  uint64_t v59 = &off_100709AF8;
  v57[0] = a4;
  uint64_t v55 = type metadata accessor for MobileDocumentReaderLogoFetcher();
  uint64_t v56 = &off_100708A48;
  v54[0] = a5;
  uint64_t v52 = &type metadata for MobileDocumentReaderAuthenticationSessionRefreshThresholdProvider;
  uint64_t v53 = &off_1007084C8;
  uint64_t v49 = &type metadata for FairPlayProvisioner;
  uint64_t v50 = &off_1006FC560;
  uint64_t v18 = (_OWORD *)swift_allocObject();
  v48[0] = v18;
  long long v19 = a9[1];
  v18[1] = *a9;
  id v18[2] = v19;
  v18[3] = a9[2];
  type metadata accessor for MobileDocumentReaderAuthenticationManager();
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = sub_1000279F4((uint64_t)v60, v17);
  __chkstk_darwin(v21);
  uint64_t v23 = (uint64_t *)((char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = sub_1000279F4((uint64_t)v57, v58);
  __chkstk_darwin(v25);
  uint64_t v27 = (uint64_t *)((char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  uint64_t v29 = sub_1000279F4((uint64_t)v54, v55);
  __chkstk_darwin(v29);
  uint64_t v31 = (uint64_t *)((char *)&v44 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v32 + 16))(v31);
  uint64_t v33 = sub_1000279F4((uint64_t)v51, (uint64_t)v52);
  __chkstk_darwin(v33);
  (*(void (**)(void))(v34 + 16))();
  uint64_t v35 = sub_1000279F4((uint64_t)v48, (uint64_t)v49);
  __chkstk_darwin(v35);
  uint64_t v37 = (_OWORD *)((char *)&v44 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v38 + 16))(v37);
  uint64_t v39 = *v23;
  uint64_t v40 = *v27;
  uint64_t v41 = *v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  uint64_t v42 = sub_100120C3C(v44, (uint64_t)v16, v39, v40, v41, v45, v46, v47, v37, v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v13);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v48);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v51);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v54);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v57);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v60);
  return v42;
}

void *sub_100120538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  uint64_t v60 = type metadata accessor for MobileDocumentReaderBluetoothManager();
  uint64_t v61 = &off_100707080;
  v59[0] = a1;
  uint64_t v57 = type metadata accessor for MobileDocumentReaderNFCManager();
  uint64_t v58 = &off_100709CF8;
  v56[0] = a2;
  uint64_t v54 = &type metadata for ISO18013RequestBuilder;
  uint64_t v55 = &off_1006F9760;
  uint64_t v51 = type metadata accessor for ISO18013ResponseValidator();
  uint64_t v52 = &off_1006F8430;
  v50[0] = a4;
  char v48 = &type metadata for MobileDocumentReaderResponseProcessor;
  uint64_t v49 = &off_100708A28;
  uint64_t v45 = type metadata accessor for MobileDocumentReaderAuthenticationManager();
  uint64_t v46 = &off_1006F7E08;
  v44[0] = a5;
  uint64_t v42 = v12;
  uint64_t v43 = &off_1006F9248;
  v41[0] = a6;
  type metadata accessor for MobileDocumentReaderManager();
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t v14 = sub_1000279F4((uint64_t)v59, v60);
  __chkstk_darwin(v14);
  uint64_t v16 = (void *)((char *)&v41[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = sub_1000279F4((uint64_t)v56, v57);
  __chkstk_darwin(v18);
  uint64_t v20 = (void *)((char *)&v41[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_1000279F4((uint64_t)v53, (uint64_t)v54);
  __chkstk_darwin(v22);
  (*(void (**)(void))(v23 + 16))();
  uint64_t v24 = sub_1000279F4((uint64_t)v50, v51);
  __chkstk_darwin(v24);
  uint64_t v26 = (void *)((char *)&v41[-1] - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  uint64_t v28 = sub_1000279F4((uint64_t)v47, (uint64_t)v48);
  __chkstk_darwin(v28);
  (*(void (**)(void))(v29 + 16))();
  uint64_t v30 = sub_1000279F4((uint64_t)v44, v45);
  __chkstk_darwin(v30);
  uint64_t v32 = (void *)((char *)&v41[-1] - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v33 + 16))(v32);
  uint64_t v34 = sub_1000279F4((uint64_t)v41, v42);
  __chkstk_darwin(v34);
  uint64_t v36 = (void *)((char *)&v41[-1] - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v37 + 16))(v36);
  uint64_t v38 = sub_100120B30(*v16, *v20, a3, *v26, *v32, *v36, v13);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v41);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v44);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v47);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v50);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v53);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v56);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v59);
  return v38;
}

double sub_100120AF0(_OWORD *a1)
{
  double result = 0.0;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void *sub_100120B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[5] = type metadata accessor for MobileDocumentReaderBluetoothManager();
  a7[6] = &off_100707080;
  a7[2] = a1;
  a7[10] = type metadata accessor for MobileDocumentReaderNFCManager();
  a7[11] = &off_100709CF8;
  a7[7] = a2;
  a7[18] = &type metadata for ISO18013RequestBuilder;
  a7[19] = &off_1006F9760;
  a7[23] = type metadata accessor for ISO18013ResponseValidator();
  a7[24] = &off_1006F8430;
  a7[20] = a4;
  a7[28] = &type metadata for MobileDocumentReaderResponseProcessor;
  a7[29] = &off_100708A28;
  a7[33] = type metadata accessor for MobileDocumentReaderAuthenticationManager();
  a7[34] = &off_1006F7E08;
  a7[30] = a5;
  a7[38] = type metadata accessor for MobileDocumentReaderIssuerRootStorage();
  a7[39] = &off_1006F9248;
  a7[35] = a6;
  a7[12] = a3;
  a7[13] = &off_100708A58;
  a7[14] = &off_100708A68;
  return a7;
}

uint64_t sub_100120C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9, uint64_t a10)
{
  uint64_t v44 = a8;
  uint64_t v45 = a7;
  uint64_t v16 = type metadata accessor for BundleRecordFetcher();
  v62[3] = v16;
  v62[4] = (uint64_t)&protocol witness table for BundleRecordFetcher;
  uint64_t v17 = sub_10002C2D8(v62);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v17, a2, v16);
  uint64_t v18 = type metadata accessor for MobileDocumentReaderAuthenticationStorage();
  v61[3] = v18;
  v61[4] = &off_1006F8A50;
  v61[0] = a3;
  v60[3] = type metadata accessor for MobileDocumentReaderAuthenticationCertificateFetcher();
  uint64_t v60[4] = &off_100709AF8;
  v60[0] = a4;
  void v59[3] = type metadata accessor for MobileDocumentReaderLogoFetcher();
  v59[4] = &off_100708A48;
  v59[0] = a5;
  uint64_t v57 = &type metadata for MobileDocumentReaderAuthenticationSessionRefreshThresholdProvider;
  uint64_t v58 = &off_1007084C8;
  uint64_t v54 = &type metadata for FairPlayProvisioner;
  uint64_t v55 = &off_1006FC560;
  uint64_t v19 = (_OWORD *)swift_allocObject();
  *(void *)&long long v53 = v19;
  long long v20 = a9[1];
  v19[1] = *a9;
  void v19[2] = v20;
  v19[3] = a9[2];
  uint64_t v21 = a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_auditToken;
  uint64_t v22 = type metadata accessor for AuditToken();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, a1, v22);
  sub_100030A10((uint64_t)v62, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_bundleRecordFetcher);
  sub_100030A10((uint64_t)v61, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage);
  sub_100030A10((uint64_t)v60, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_certificateFetcher);
  sub_100030A10((uint64_t)v59, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_logoFetcher);
  sub_100048D6C(a6, (uint64_t)&v47, &qword_100722DF0);
  if (v48)
  {
    sub_10000C6CC(a6, &qword_100722DF0);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v59);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v60);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v61);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v62);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a1, v22);
    sub_10000C6B4(&v47, (uint64_t)&v50);
    sub_10000C6B4(&v50, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_secureElementManager);
  }
  else
  {
    sub_10000C6CC((uint64_t)&v47, &qword_100722DF0);
    sub_100030A10((uint64_t)v61, (uint64_t)&v50);
    uint64_t v42 = a6;
    uint64_t v24 = type metadata accessor for SEPairingManager();
    swift_allocObject();
    uint64_t v43 = a1;
    uint64_t v25 = SEPairingManager.init()();
    uint64_t v48 = v24;
    uint64_t v49 = &protocol witness table for SEPairingManager;
    *(void *)&long long v47 = v25;
    uint64_t v26 = sub_1000279F4((uint64_t)&v50, v51);
    v41[1] = v41;
    __chkstk_darwin(v26);
    uint64_t v28 = (void *)((char *)v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v29 + 16))(v28);
    uint64_t v30 = *v28;
    v46[3] = v18;
    v46[4] = &off_1006F8A50;
    v46[0] = v30;
    uint64_t v31 = type metadata accessor for MobileDocumentReaderSecureElementManager();
    uint64_t v32 = (void *)swift_allocObject();
    uint64_t v33 = sub_1000279F4((uint64_t)v46, v18);
    __chkstk_darwin(v33);
    uint64_t v35 = (void *)((char *)v41 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v36 + 16))(v35);
    uint64_t v37 = *v35;
    v32[5] = v18;
    v32[6] = &off_1006F8A50;
    void v32[2] = v37;
    sub_10000C6B4(&v47, (uint64_t)(v32 + 7));
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v46);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v50);
    uint64_t v51 = v31;
    uint64_t v52 = &off_1006F8970;
    *(void *)&long long v50 = v32;
    sub_10000C6CC(v42, &qword_100722DF0);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v59);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v60);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v61);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v62);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v43, v22);
    sub_1000BEA14((uint64_t)&v50, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_secureElementManager, &qword_100722DF0);
  }
  uint64_t v38 = (void *)(a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_dateProvider);
  uint64_t v39 = v44;
  *uint64_t v38 = v45;
  v38[1] = v39;
  sub_10000C6B4(&v56, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_sessionRefreshThresholdProvider);
  sub_10000C6B4(&v53, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner);
  return a10;
}

uint64_t sub_10012116C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001211D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012123C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10012129C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001212E4()
{
  uint64_t v1 = type metadata accessor for MobileDocumentReaderRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for MobileDocumentReaderDeviceEngagementType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100121444(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for MobileDocumentReaderRequest() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MobileDocumentReaderDeviceEngagementType() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = sub_10000C494;
  return sub_10011A3C4(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_1001215A4()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100025D64;
  v2[2] = v0;
  return _swift_task_switch(sub_100118A18, 0, 0);
}

Swift::Double *BAA_SERVER_CONNECTION_TIMEOUT_IN_SECONDS.unsafeMutableAddressor()
{
  return &BAA_SERVER_CONNECTION_TIMEOUT_IN_SECONDS;
}

Swift::String *IOS_KEYCHAIN_ACCESS_GROUP.unsafeMutableAddressor()
{
  return &IOS_KEYCHAIN_ACCESS_GROUP;
}

char *sub_100121660()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_allocWithZone((Class)NSXPCListener);
  unint64_t v6 = v0;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v5 initWithMachServiceName:v7];

  *(void *)&v6[OBJC_IVAR____TtC8coreidvd26DIDocUploadSessionListener_xpcListener] = v8;
  unint64_t v9 = (objc_class *)type metadata accessor for DIDocUploadSessionListener();
  v17.receiver = v6;
  v17.super_class = v9;
  uint64_t v10 = (char *)[super init];
  uint64_t v11 = *(void **)&v10[OBJC_IVAR____TtC8coreidvd26DIDocUploadSessionListener_xpcListener];
  uint64_t v12 = v10;
  [v11 setDelegate:v12];
  [v11 resume];
  defaultLogger()();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "DIDocUploadSessionListener started.", v15, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

id sub_100121880()
{
  return sub_100121AF8((uint64_t (*)(void))&static os_log_type_t.info.getter, "DIDocUploadSessionListener is tearing down.", (uint64_t (*)(uint64_t))type metadata accessor for DIDocUploadSessionListener);
}

uint64_t sub_1001218EC()
{
  return sub_100121904("DIDocUploadSessionListener: Connection invalidated.");
}

uint64_t sub_1001218F8()
{
  return sub_100121904("DIDocUploadSessionListener: Connection interrupted.");
}

uint64_t sub_100121904(const char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a1, v8, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t type metadata accessor for DIDocUploadSessionListener()
{
  return self;
}

id sub_100121AC4()
{
  return sub_100121AF8((uint64_t (*)(void))&static os_log_type_t.debug.getter, "Destroying DIDocUploadSessionProxy", (uint64_t (*)(uint64_t))type metadata accessor for DIDocUploadSessionProxy);
}

id sub_100121AF8(uint64_t (*a1)(void), const char *a2, uint64_t (*a3)(uint64_t))
{
  os_log_type_t v7 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = a1();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, a2, v14, 2u);
    swift_slowDealloc();
  }

  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v16 = (objc_class *)a3(v15);
  v18.receiver = v7;
  v18.super_class = v16;
  return [super dealloc];
}

uint64_t sub_100121CF0(unint64_t a1, char *a2, void (*a3)(void, unint64_t, uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v21 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = a4;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "DIDocUploadSessionProxy: uploadDocData", v16, 2u);
    a4 = v20;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_1001224B8();
  uint64_t v17 = *(void *)(v5 + OBJC_IVAR____TtC8coreidvd23DIDocUploadSessionProxy_docUploadHandler);
  swift_retain();
  swift_retain();
  sub_1000282A0(v21, a2, v17, a3, a4, ObjectType);
  return swift_release();
}

uint64_t sub_100121F1C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  if (a3)
  {
    swift_errorRetain();
    uint64_t v8 = sub_1001229F4(a3, 0xD00000000000002BLL, 0x800000010062FC20, 103);
    swift_errorRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  a4(a1, a2, v8);

  return swift_errorRelease();
}

void sub_1001220A8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
    if (a3)
    {
LABEL_3:
      uint64_t v7 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);
}

uint64_t sub_100122140()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v9 - v3;
  defaultLogger()();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "DIDocUploadSessionProxy: cancelUploads", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  sub_1001224B8();
  swift_retain();
  sub_1000282D8();
  return swift_release();
}

void sub_1001224B8()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  __chkstk_darwin(v6);
  id v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  id v9 = v0;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v29 = v3;
  if (v12)
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v33 = v26;
    uint64_t v27 = v2;
    *(_DWORD *)os_log_type_t v13 = 136315138;
    v24[1] = v13 + 4;
    uint64_t v25 = v13;
    os_log_type_t v14 = v5;
    Strong = (void *)swift_unknownObjectWeakLoadStrong();
    uint64_t v32 = (uint64_t)Strong;
    sub_100007764(&qword_10072F290);
    uint64_t v16 = Optional.debugDescription.getter();
    uint64_t v28 = v1;
    unint64_t v18 = v17;

    uint64_t v5 = v14;
    uint64_t v32 = sub_100110D58(v16, v18, &v33);
    uint64_t v2 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "DIDocUploadSessionProxy.checkEntitlement: Checking connection %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
  uint64_t v19 = swift_unknownObjectWeakLoadStrong();
  if (v19)
  {
    uint64_t v20 = (void *)v19;
    v21._uint64_t countAndFlagsBits = 0xD000000000000022;
    v21._object = (void *)0x8000000100637BF0;
    if (NSXPCConnection.isEntitled(_:)(v21))
    {
      v22._uint64_t countAndFlagsBits = 0xD000000000000055;
      v22._object = (void *)0x8000000100637C60;
      v23._uint64_t countAndFlagsBits = 0x3931363136363933;
      v23._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v23, v22);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v29 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v29 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for DIDocUploadSessionProxy()
{
  return self;
}

uint64_t sub_1001229F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[1] = a4;
  void v20[2] = a2;
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DIPError();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.internalError(_:), v7);
  swift_bridgeObjectRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10000C588();
  swift_allocError();
  os_log_type_t v15 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
  v15(v16, v14, v11);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v21);
  swift_errorRelease();
  swift_allocError();
  v15(v17, v14, v11);
  sub_100025C28(0, (unint64_t *)&qword_100724510);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = static NSError.mapFromError(_:domain:mapper:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_errorRelease();
  return v18;
}

uint64_t sub_100122D78()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100122DB0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1001220A8(a1, a2, a3, *(void *)(v3 + 16));
}

id sub_100122DB8()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  uint64_t v5 = v0;
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Creating DIDocUploadSessionProxy", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  id result = (id)os_transaction_create();
  if (result)
  {
    *(void *)&v5[OBJC_IVAR____TtC8coreidvd23DIDocUploadSessionProxy_jetsamTransaction] = result;
    swift_unknownObjectWeakAssign();
    type metadata accessor for DocUploadHandler();
    uint64_t v10 = swift_allocObject();
    type metadata accessor for DocUploadHandler.UploadRequestTracker();
    uint64_t v11 = swift_allocObject();
    sub_100007764((uint64_t *)&unk_100724530);
    uint64_t v12 = swift_allocObject();
    *(_DWORD *)(v12 + 24) = 0;
    *(void *)(v12 + 16) = _swiftEmptyArrayStorage;
    *(void *)(v11 + 16) = v12;
    *(void *)(v10 + 16) = v11;
    *(void *)&v5[OBJC_IVAR____TtC8coreidvd23DIDocUploadSessionProxy_docUploadHandler] = v10;

    uint64_t v13 = (objc_class *)type metadata accessor for DIDocUploadSessionProxy();
    v14.receiver = v5;
    v14.super_class = v13;
    return [super init];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100122FDC(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - v7;
  swift_unknownObjectWeakInit();
  defaultLogger()();
  uint64_t v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109120;
    LODWORD(aBlock) = [v9 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "DIDocUploadSessionListener connection received from %d.", v12, 8u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v10 = v9;
  }

  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v8, v2);
  sub_10046E758();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100611020;
  *(void *)(v14 + 32) = sub_100025C28(0, &qword_100724520);
  *(void *)(v14 + 40) = sub_100025C28(0, &qword_100724518);
  id v15 = [self interfaceWithProtocol:&OBJC_PROTOCOL___DIDocUploadSessionXPCProtocol];
  [v9 setExportedInterface:v15];

  id v16 = [v9 exportedInterface];
  if (v16)
  {
    uint64_t v17 = v16;
    NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  }
  swift_bridgeObjectRelease();
  sub_10046E758();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100610730;
  *(void *)(v18 + 32) = sub_100025C28(0, &qword_100724528);
  id v19 = [v9 exportedInterface];
  if (v19)
  {
    uint64_t v20 = v19;
    NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  }
  swift_bridgeObjectRelease();
  defaultLogger()();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    Swift::String v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "DIDocUploadSessionListener: Set allowed classes on listener. ***", v23, 2u);
    swift_slowDealloc();
  }

  v13(v6, v2);
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  id v25 = objc_allocWithZone((Class)type metadata accessor for DIDocUploadSessionProxy());
  id v26 = sub_100122DB8();

  [v9 setExportedObject:v26];
  uint64_t v35 = sub_1001218EC;
  uint64_t v36 = 0;
  aBlocuint64_t k = _NSConcreteStackBlock;
  uint64_t v32 = 1107296256;
  uint64_t v33 = sub_100593800;
  uint64_t v34 = &unk_1006F8920;
  uint64_t v27 = _Block_copy(&aBlock);
  [v9 setInvalidationHandler:v27];
  _Block_release(v27);
  uint64_t v35 = sub_1001218F8;
  uint64_t v36 = 0;
  aBlocuint64_t k = _NSConcreteStackBlock;
  uint64_t v32 = 1107296256;
  uint64_t v33 = sub_100593800;
  uint64_t v34 = &unk_1006F8948;
  uint64_t v28 = _Block_copy(&aBlock);
  [v9 setInterruptionHandler:v28];
  _Block_release(v28);
  [v9 resume];
  swift_unknownObjectWeakDestroy();
  return 1;
}

uint64_t sub_100123508(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100123518()
{
  return swift_release();
}

uint64_t sub_100123528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_100123648, 0, 0);
}

uint64_t sub_100123648()
{
  os_log_type_t v22 = v0;
  v0[4] = _swiftEmptyArrayStorage;
  uint64_t v1 = *(void *)(v0[7] + 16);
  v0[15] = v1;
  if (v1)
  {
    v0[16] = 0;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v2 = dispatch thunk of IdentityProofingAttributeConfigHelper.fetchAttributeID(input:)();
    uint64_t v4 = v3;
    swift_release();
    if (v4)
    {
      v0[2] = v2;
      v0[3] = v4;
      v5._uint64_t countAndFlagsBits = 46;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      Swift::String v6 = String.lowercased()();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v0[2];
      unint64_t v8 = v0[3];
      v0[17] = v8;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      BOOL v11 = os_log_type_enabled(v9, v10);
      uint64_t v13 = v0[13];
      uint64_t v12 = v0[14];
      uint64_t v14 = v0[12];
      if (v11)
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v15 + 4) = sub_100110D58(v7, v8, &v21);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "the assetID to be fetched is %s", (uint8_t *)v15, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      v0[18] = sub_1004D2734();
      uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1007304F8 + dword_1007304F8);
      id v19 = (void *)swift_task_alloc();
      v0[19] = v19;
      *id v19 = v0;
      v19[1] = sub_100123A90;
      return v20(v7, v8);
    }
    else
    {
      (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.invalidImageAssetPlaceholder(_:), v0[9]);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v18 = (uint64_t (*)(void))v0[1];
      return v18();
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    id v16 = (uint64_t (*)(void *))v0[1];
    return v16(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100123A90(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100124078;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = sub_100123BE0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100123BE0()
{
  uint64_t v26 = v0;
  id v1 = *(id *)(v0 + 160);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v2 = *(void **)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 128) + 1;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  if (v4 == v3)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = *(void *)(v0 + 32);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v6(v5);
  }
  else
  {
    ++*(void *)(v0 + 128);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = dispatch thunk of IdentityProofingAttributeConfigHelper.fetchAttributeID(input:)();
    uint64_t v10 = v9;
    swift_release();
    if (v10)
    {
      *(void *)(v0 + 16) = v8;
      *(void *)(v0 + 24) = v10;
      v11._uint64_t countAndFlagsBits = 46;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      Swift::String v12 = String.lowercased()();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(v0 + 16);
      unint64_t v14 = *(void *)(v0 + 24);
      *(void *)(v0 + 136) = v14;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      BOOL v17 = os_log_type_enabled(v15, v16);
      uint64_t v19 = *(void *)(v0 + 104);
      uint64_t v18 = *(void *)(v0 + 112);
      uint64_t v20 = *(void *)(v0 + 96);
      if (v17)
      {
        uint64_t v21 = swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v21 + 4) = sub_100110D58(v13, v14, &v25);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "the assetID to be fetched is %s", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      *(void *)(v0 + 144) = sub_1004D2734();
      uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1007304F8 + dword_1007304F8);
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 152) = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_100123A90;
      return v24(v13, v14);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 104))(*(void *)(v0 + 88), enum case for DIPError.Code.invalidImageAssetPlaceholder(_:), *(void *)(v0 + 72));
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v22 = *(uint64_t (**)(void))(v0 + 8);
      return v22();
    }
  }
}

uint64_t sub_100124078()
{
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for IdentityProofingAssetsProvider()
{
  return self;
}

uint64_t sub_10012410C()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPSignpost();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_100124254, 0, 0);
}

uint64_t sub_100124254()
{
  id v1 = *(void **)(v0 + 16);
  static DaemonSignposts.MobileDocumentReader.identityKeySecureElementStatus.getter();
  DIPSignpost.init(_:)();
  uint64_t v2 = v1 + 7;
  uint64_t v3 = v1[10];
  uint64_t v4 = v1[11];
  sub_10000C728(v2, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100124328;
  return dispatch thunk of SEPairingManaging.pairSecureElementIfNecessary()(v3, v4);
}

uint64_t sub_100124328(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100124764;
  }
  else
  {
    *(unsigned char *)(v4 + 104) = a1 & 1;
    uint64_t v5 = sub_100124454;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100124454()
{
  if (*(unsigned char *)(v0 + 104) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 16);
    type metadata accessor for DaemonAnalytics();
    static DaemonAnalytics.sendMobileDocumentReaderSEPairingResultEvent(result:)();
    sub_10000C728((void *)(v1 + 16), *(void *)(v1 + 40));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001245B0;
    return sub_1001287F8();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 64);
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 56);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_1001245B0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001246AC, 0, 0);
}

uint64_t sub_1001246AC()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100124764()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = v0[3];
  type metadata accessor for DaemonAnalytics();
  swift_errorRetain();
  static DaemonAnalytics.sendMobileDocumentReaderSEPairingResultEvent(result:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10012493C()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 56);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MobileDocumentReaderSecureElementManager()
{
  return self;
}

uint64_t sub_1001249A0()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5 - 8);
  type metadata accessor for RewrapService();
  uint64_t v6 = swift_allocObject();
  sub_1000309D0();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v6 + 16) = result;
  qword_1007602D0 = v6;
  return result;
}

void sub_100124B68(unint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DIPKeyAlgorithm();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v14)
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.internalError(_:), v10);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
LABEL_9:
    swift_willThrow();
    return;
  }
  unint64_t v38 = a1;
  CFErrorRef error = 0;
  SecAccessControlRef v15 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, 0x40000000uLL, &error);
  if (!v15)
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.keychainAccessControlFailure(_:), v10);
    errorFromCFError(_:_:_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    goto LABEL_9;
  }
  SecAccessControlRef v16 = v15;
  uint64_t v35 = a3;
  uint64_t v36 = v10;
  uint64_t v37 = v13;
  sub_100007764(&qword_100724858);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100610730;
  *(void *)(inited + 32) = 1952671087;
  *(void *)(inited + 40) = 0xE400000000000000;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  sub_10015C3CC(inited);
  uint64_t v18 = v16;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  SecAccessControlSetConstraints();

  type metadata accessor for DIPCryptoKeychain();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPKeyAlgorithm.ECIES_REWRAP(_:), v6);
  uint64_t v20 = v18;
  uint64_t v21 = v39;
  uint64_t v22 = dispatch thunk of static DIPCryptoKeychain.generateKeyAsym(_:_:)();
  uint64_t v24 = (void (**)(char *, uint64_t))(v7 + 8);
  if (v21)
  {
    (*v24)(v9, v6);

    swift_getErrorValue();
    v31._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    unint64_t v40 = 0xD000000000000025;
    unint64_t v41 = 0x8000000100638040;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v37, enum case for DIPError.Code.internalError(_:), v36);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v25 = v22;
    uint64_t v26 = v23;
    (*v24)(v9, v6);

    unint64_t v40 = v38;
    unint64_t v41 = a2;
    swift_bridgeObjectRetain();
    v27._uint64_t countAndFlagsBits = 0x727765727065732ELL;
    v27._object = (void *)0xEA00000000007061;
    String.append(_:)(v27);
    unint64_t v29 = v40;
    unint64_t v28 = v41;
    type metadata accessor for DIPKeystoreKeychain();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRetain();
    static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)();
    uint64_t v30 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static DIPKeystoreKeychain.storeKeychainKey(_:label:)();
    uint64_t v32 = type metadata accessor for RewrapKeySecKey();
    uint64_t v33 = (void *)swift_allocObject();
    void v33[2] = v25;
    v33[3] = v29;
    v33[4] = v28;
    uint64_t v34 = v35;
    v35[3] = v32;
    v34[4] = &off_1006F8980;

    *uint64_t v34 = v33;
  }
}

void sub_10012520C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = a1;
  unint64_t v31 = a2;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 0x727765727065732ELL;
  v9._object = (void *)0xEA00000000007061;
  String.append(_:)(v9);
  uint64_t v10 = v30;
  uint64_t v11 = (void *)v31;
  sub_100007764(&qword_100724858);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100614990;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v10;
  *(void *)(inited + 56) = v11;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v14;
  type metadata accessor for CFString(0);
  *(void *)(inited + 120) = v15;
  *(void *)(inited + 96) = kSecClassKey;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v16;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 1;
  swift_bridgeObjectRetain();
  CFStringRef v17 = (id)kSecClassKey;
  sub_10015C3CC(inited);
  CFTypeRef result = 0;
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v19 = SecItemCopyMatching(isa, &result);

  if (v19 == -25300)
  {
    swift_bridgeObjectRelease();
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    goto LABEL_8;
  }
  if (v19)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v23._uint64_t countAndFlagsBits = 0xD000000000000025;
    v23._object = (void *)0x8000000100638140;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = v10;
    v24._object = v11;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 0x7473206874697720;
    v25._object = (void *)0xEF203D2073757461;
    String.append(_:)(v25);
    OSStatus v29 = v19;
    v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v8, enum case for DIPError.Code.internalError(_:), v6);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_8;
  }
  if (result)
  {
    type metadata accessor for SecKey(0);
    swift_unknownObjectRetain();
    uint64_t v20 = swift_dynamicCastUnknownClassUnconditional();
    uint64_t v21 = type metadata accessor for RewrapKeySecKey();
    uint64_t v22 = (void *)swift_allocObject();
    v22[2] = v20;
    v22[3] = v10;
    void v22[4] = v11;
    *(void *)(a3 + 24) = v21;
    *(void *)(a3 + 32) = &off_1006F8980;
    *(void *)a3 = v22;
LABEL_8:
    swift_unknownObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t type metadata accessor for RewrapService()
{
  return self;
}

uint64_t sub_1001256B8()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RewrapKeySecKey()
{
  return self;
}

uint64_t sub_10012571C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[19] = a3;
  v5[20] = a5;
  v5[17] = a1;
  v5[18] = a2;
  uint64_t v7 = type metadata accessor for DIPKeyAlgorithm();
  v5[21] = v7;
  v5[22] = *(void *)(v7 - 8);
  v5[23] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v5[24] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_100125834;
  return sub_100125E54((uint64_t)(v5 + 2), a4, 0, 0, 0xF000000000000000);
}

uint64_t sub_100125834()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100125D84;
  }
  else {
    uint64_t v2 = sub_100125948;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100125948()
{
  uint64_t v1 = v0[25];
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v0 + 7, v0[10]);
  uint64_t v2 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()();
  v0[26] = v3;
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 7));
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    uint64_t v8 = v0[23];
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 7));
    sub_10000C728(v0 + 2, v0[5]);
    sub_100187794(v8);
    Swift::String v9 = (void *)swift_task_alloc();
    v0[27] = v9;
    *Swift::String v9 = v0;
    v9[1] = sub_100125AFC;
    uint64_t v10 = v0[23];
    uint64_t v11 = v0[19];
    uint64_t v12 = v0[20];
    uint64_t v13 = v0[18];
    return DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)(v0 + 12, v13, v11, v6, v7, v12, v10, 0);
  }
}

uint64_t sub_100125AFC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[22] + 8))(v2[23], v2[21]);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v3 = sub_100125DE8;
  }
  else {
    uint64_t v3 = sub_100125C80;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100125C80()
{
  uint64_t v1 = v0[28];
  sub_10000C728(v0 + 12, v0[15]);
  uint64_t v2 = dispatch thunk of IdentityKey.attestation(_:)();
  if (!v1)
  {
    uint64_t v4 = v2;
    uint64_t v5 = v0[17];
    sub_100030A10((uint64_t)(v0 + 12), v5);
    *(void *)(v5 + 40) = v4;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 12));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100125D84()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100125DE8()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100125E54(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 552) = v5;
  *(void *)(v6 + 544) = a5;
  *(void *)(v6 + 536) = a4;
  *(unsigned char *)(v6 + 804) = a3;
  *(void *)(v6 + 528) = a2;
  *(void *)(v6 + 520) = a1;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 560) = v7;
  *(void *)(v6 + 568) = *(void *)(v7 - 8);
  *(void *)(v6 + 576) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v6 + 584) = v8;
  *(void *)(v6 + 592) = *(void *)(v8 - 8);
  *(void *)(v6 + 600) = swift_task_alloc();
  *(void *)(v6 + 608) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for HardwareAttestationType();
  *(void *)(v6 + 616) = v9;
  *(void *)(v6 + 624) = *(void *)(v9 - 8);
  *(void *)(v6 + 632) = swift_task_alloc();
  *(void *)(v6 + 640) = swift_task_alloc();
  *(void *)(v6 + 648) = swift_task_alloc();
  *(void *)(v6 + 656) = swift_task_alloc();
  return _swift_task_switch(sub_100126018, 0, 0);
}

uint64_t sub_100126018()
{
  uint64_t v99 = v0;
  sub_10030AC6C(*(void *)(v0 + 528), *(void *)(v0 + 656));
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v92 = *(void *)(v0 + 592);
    uint64_t v94 = *(void *)(v0 + 584);
    uint64_t v95 = *(void *)(v0 + 608);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v97 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_beginAccess();
    uint64_t v4 = HardwareAttestationType.rawValue.getter();
    *(void *)(v0 + 512) = sub_100110D58(v4, v5, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "pre-selected attestation type is %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
    v6(v95, v94);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 608);
    uint64_t v8 = *(void *)(v0 + 592);
    uint64_t v9 = *(void *)(v0 + 584);

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v6(v7, v9);
  }
  *(void *)(v0 + 664) = v6;
  unint64_t v10 = *(void *)(v0 + 544);
  int v11 = *(unsigned __int8 *)(v0 + 804);
  swift_beginAccess();
  uint64_t v12 = HardwareAttestationType.rawValue.getter();
  uint64_t v14 = v13;
  object = (void *)0xE000000000000000;
  swift_bridgeObjectRelease();
  uint64_t v97 = v12;
  uint64_t v98 = v14;
  v16._uint64_t countAndFlagsBits = 45;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  if (v11) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (v11) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 45;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  if (v10 >> 60 == 15)
  {
    uint64_t countAndFlagsBits = 0;
  }
  else
  {
    Swift::String v22 = Data.base64EncodedString(options:)(0);
    uint64_t countAndFlagsBits = v22._countAndFlagsBits;
    object = v22._object;
  }
  Swift::String v23 = (_OWORD *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 552);
  Swift::String v25 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease();
  uint64_t v26 = v97;
  uint64_t v27 = v98;
  *(void *)(v0 + 672) = v97;
  *(void *)(v0 + 680) = v27;
  swift_beginAccess();
  uint64_t v28 = *(void *)(v24 + 16);
  if (!*(void *)(v28 + 16))
  {
    *(void *)(v0 + 128) = 0;
    *Swift::String v23 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
LABEL_24:
    uint64_t v37 = *(void *)(v0 + 648);
    uint64_t v38 = *(void *)(v0 + 624);
    sub_100128680(v0 + 96);
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    uint64_t v96 = v0 + 136;
    *(void *)(v0 + 168) = 0;
    *(_DWORD *)(v0 + 800) = enum case for HardwareAttestationType.SE(_:);
    uint64_t v39 = *(void (**)(uint64_t))(v38 + 104);
    *(void *)(v0 + 688) = v39;
    *(void *)(v0 + 696) = (v38 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v39(v37);
    *(void *)(v0 + 704) = sub_1001286E0(&qword_100724970, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (*(void *)(v0 + 488) == *(void *)(v0 + 456) && *(void *)(v0 + 496) == *(void *)(v0 + 464)) {
      char v40 = 1;
    }
    else {
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v41 = *(void *)(v0 + 648);
    uint64_t v42 = *(void *)(v0 + 624);
    uint64_t v43 = *(void *)(v0 + 616);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    *(void *)(v0 + 712) = v44;
    *(void *)(v0 + 720) = (v42 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v44(v41, v43);
    if (v40)
    {
      int v45 = *(unsigned __int8 *)(*(void *)(v0 + 552) + 24);
      if (v45 == 2 || (v45 & 1) != 0)
      {
        unint64_t v71 = *(void *)(v0 + 544);
        uint64_t v72 = *(void *)(v0 + 536);
        *(void *)(v0 + 728) = type metadata accessor for DIPKeystoreSecureElement(0);
        swift_allocObject();
        sub_1000338D4(v72, v71);
        uint64_t v73 = (void *)swift_task_alloc();
        *(void *)(v0 + 736) = v73;
        *uint64_t v73 = v0;
        v73[1] = sub_100126C70;
        uint64_t v68 = *(void *)(v0 + 544);
        uint64_t v69 = *(void *)(v0 + 536);
        uint64_t v70 = *(unsigned __int8 *)(v0 + 804);
        goto LABEL_41;
      }
      uint64_t v46 = *(void *)(v0 + 656);
      uint64_t v47 = *(void *)(v0 + 640);
      uint64_t v48 = *(void *)(v0 + 624);
      uint64_t v49 = *(void *)(v0 + 616);
      ((void (*)(uint64_t, void, uint64_t))v39)(v47, enum case for HardwareAttestationType.SEP(_:), v49);
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 40))(v46, v47, v49);
    }
    defaultLogger()();
    long long v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.info.getter();
    BOOL v52 = os_log_type_enabled(v50, v51);
    long long v53 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
    if (v52)
    {
      uint64_t v91 = *(void *)(v0 + 584);
      uint64_t v93 = *(void *)(v0 + 600);
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v97 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136446210;
      uint64_t v55 = HardwareAttestationType.rawValue.getter();
      *(void *)(v0 + 504) = sub_100110D58(v55, v56, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "final selected attestation type is %{public}s", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v57 = v91;
      uint64_t v58 = v93;
    }
    else
    {
      uint64_t v59 = *(void *)(v0 + 600);
      uint64_t v60 = *(void *)(v0 + 584);

      uint64_t v58 = v59;
      uint64_t v57 = v60;
    }
    v53(v58, v57);
    (*(void (**)(void, void, void))(v0 + 688))(*(void *)(v0 + 632), enum case for HardwareAttestationType.SEP(_:), *(void *)(v0 + 616));
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    uint64_t v62 = *(void *)(v0 + 632);
    uint64_t v63 = *(void *)(v0 + 616);
    if (*(void *)(v0 + 440) == *(void *)(v0 + 472) && *(void *)(v0 + 448) == *(void *)(v0 + 480))
    {
      swift_bridgeObjectRelease_n();
      v61(v62, v63);
    }
    else
    {
      char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61(v62, v63);
      if ((v64 & 1) == 0)
      {
        long long v75 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
        uint64_t v76 = *(void *)(v0 + 640);
        uint64_t v77 = *(void *)(v0 + 616);
        (*(void (**)(uint64_t, void, uint64_t))(v0 + 688))(v76, *(unsigned int *)(v0 + 800), v77);
        sub_1001286E0(&qword_100726450, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
        char v78 = dispatch thunk of static Equatable.== infix(_:_:)();
        v75(v76, v77);
        if ((v78 & 1) == 0)
        {
          uint64_t v85 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
          uint64_t v86 = *(void *)(v0 + 656);
          uint64_t v87 = *(void *)(v0 + 616);
          uint64_t v88 = *(void *)(v0 + 576);
          uint64_t v89 = *(void *)(v0 + 568);
          uint64_t v90 = *(void *)(v0 + 560);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, void, uint64_t))(v89 + 104))(v88, enum case for DIPError.Code.unimplemented(_:), v90);
          sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1001286E0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_100128680(v96);
          v85(v86, v87);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_21;
        }
        uint64_t v74 = sub_100128728(v96, v0 + 16);
        if (*(void *)(v0 + 40))
        {
          uint64_t v79 = *(void *)(v0 + 680);
          uint64_t v80 = *(void *)(v0 + 672);
          sub_10000C6B4((long long *)(v0 + 16), v0 + 256);
          swift_beginAccess();
          sub_10055ECA0(v0 + 256, v80, v79);
          swift_endAccess();
          uint64_t v74 = sub_100128728(v96, v0 + 216);
          if (*(void *)(v0 + 240))
          {
            uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
            uint64_t v82 = *(void *)(v0 + 656);
            uint64_t v83 = *(void *)(v0 + 616);
            uint64_t v84 = *(void *)(v0 + 520);
            sub_100128680(v96);
            sub_10000C6B4((long long *)(v0 + 216), v84);
            v81(v82, v83);
            goto LABEL_20;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(v74, v69, v68);
      }
    }
    unint64_t v65 = *(void *)(v0 + 544);
    uint64_t v66 = *(void *)(v0 + 536);
    *(void *)(v0 + 768) = type metadata accessor for DIPKeystoreKeychain();
    swift_allocObject();
    sub_1000338D4(v66, v65);
    uint64_t v67 = (void *)swift_task_alloc();
    *(void *)(v0 + 776) = v67;
    *uint64_t v67 = v0;
    v67[1] = sub_10012779C;
    uint64_t v68 = *(void *)(v0 + 544);
    uint64_t v69 = *(void *)(v0 + 536);
    uint64_t v70 = *(unsigned __int8 *)(v0 + 804);
LABEL_41:
    uint64_t v74 = v70;
    return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(v74, v69, v68);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v29 = sub_100590548(v26, v27);
  if (v30)
  {
    sub_100030A10(*(void *)(v28 + 56) + 40 * v29, v0 + 96);
  }
  else
  {
    *(void *)(v0 + 128) = 0;
    *Swift::String v23 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 120)) {
    goto LABEL_24;
  }
  uint64_t v31 = *(void *)(v0 + 656);
  uint64_t v32 = *(void *)(v0 + 624);
  uint64_t v33 = *(void *)(v0 + 616);
  uint64_t v34 = *(void *)(v0 + 520);
  swift_bridgeObjectRelease();
  sub_10000C6B4((long long *)(v0 + 96), v34);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
LABEL_20:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
LABEL_21:
  return v35();
}

uint64_t sub_100126C70(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 744) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_1001276A8;
  }
  else
  {
    *(void *)(v4 + 752) = a1;
    unint64_t v5 = sub_100126D98;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100126D98()
{
  uint64_t v1 = v0[94];
  v0[10] = v0[91];
  v0[11] = &protocol witness table for DIPKeystoreKeychain;
  v0[7] = v1;
  sub_100128680((uint64_t)(v0 + 17));
  sub_100128790((uint64_t)(v0 + 7), (uint64_t)(v0 + 17));
  os_log_type_t v2 = (void *)swift_task_alloc();
  v0[95] = v2;
  *os_log_type_t v2 = v0;
  v2[1] = sub_100126E60;
  return sub_10030B7A8((uint64_t)(v0 + 17), 0);
}

uint64_t sub_100126E60(char a1)
{
  *(unsigned char *)(*(void *)v1 + 805) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100126F60, 0, 0);
}

uint64_t sub_100126F60()
{
  uint64_t v46 = v0;
  if (*(unsigned char *)(v0 + 805) == 1)
  {
    *(unsigned char *)(*(void *)(v0 + 552) + 24) = 1;
  }
  else
  {
    uint64_t v1 = *(void (**)(uint64_t, void, uint64_t))(v0 + 688);
    uint64_t v2 = *(void *)(v0 + 656);
    uint64_t v3 = *(void *)(v0 + 640);
    uint64_t v4 = *(void *)(v0 + 624);
    uint64_t v5 = *(void *)(v0 + 616);
    *(unsigned char *)(*(void *)(v0 + 552) + 24) = 0;
    v1(v3, enum case for HardwareAttestationType.SEP(_:), v5);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v2, v3, v5);
  }
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
  if (v8)
  {
    uint64_t v43 = *(void *)(v0 + 584);
    uint64_t v44 = *(void *)(v0 + 600);
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 136446210;
    uint64_t v11 = HardwareAttestationType.rawValue.getter();
    *(void *)(v0 + 504) = sub_100110D58(v11, v12, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "final selected attestation type is %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v9(v44, v43);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 600);
    uint64_t v14 = *(void *)(v0 + 584);

    v9(v13, v14);
  }
  (*(void (**)(void, void, void))(v0 + 688))(*(void *)(v0 + 632), enum case for HardwareAttestationType.SEP(_:), *(void *)(v0 + 616));
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v16 = *(void *)(v0 + 632);
  uint64_t v17 = *(void *)(v0 + 616);
  if (*(void *)(v0 + 440) == *(void *)(v0 + 472) && *(void *)(v0 + 448) == *(void *)(v0 + 480))
  {
    swift_bridgeObjectRelease_n();
    v15(v16, v17);
    goto LABEL_11;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15(v16, v17);
  if (v18)
  {
LABEL_11:
    unint64_t v19 = *(void *)(v0 + 544);
    uint64_t v20 = *(void *)(v0 + 536);
    *(void *)(v0 + 768) = type metadata accessor for DIPKeystoreKeychain();
    swift_allocObject();
    sub_1000338D4(v20, v19);
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 776) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_10012779C;
    uint64_t v22 = *(void *)(v0 + 544);
    uint64_t v23 = *(void *)(v0 + 536);
    uint64_t v24 = *(unsigned __int8 *)(v0 + 804);
    return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(v24, v23, v22);
  }
  Swift::String v25 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v26 = *(void *)(v0 + 640);
  uint64_t v27 = *(void *)(v0 + 616);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 688))(v26, *(unsigned int *)(v0 + 800), v27);
  sub_1001286E0(&qword_100726450, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25(v26, v27);
  if ((v28 & 1) == 0)
  {
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    uint64_t v37 = *(void *)(v0 + 656);
    uint64_t v38 = *(void *)(v0 + 616);
    uint64_t v39 = *(void *)(v0 + 576);
    uint64_t v40 = *(void *)(v0 + 568);
    uint64_t v41 = *(void *)(v0 + 560);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v40 + 104))(v39, enum case for DIPError.Code.unimplemented(_:), v41);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001286E0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100128680(v0 + 136);
    v36(v37, v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_19;
  }
  uint64_t v24 = sub_100128728(v0 + 136, v0 + 16);
  if (!*(void *)(v0 + 40))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v29 = *(void *)(v0 + 680);
  uint64_t v30 = *(void *)(v0 + 672);
  sub_10000C6B4((long long *)(v0 + 16), v0 + 256);
  swift_beginAccess();
  sub_10055ECA0(v0 + 256, v30, v29);
  swift_endAccess();
  uint64_t v24 = sub_100128728(v0 + 136, v0 + 216);
  if (!*(void *)(v0 + 240))
  {
LABEL_23:
    __break(1u);
    return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(v24, v23, v22);
  }
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v32 = *(void *)(v0 + 656);
  uint64_t v33 = *(void *)(v0 + 616);
  uint64_t v34 = *(void *)(v0 + 520);
  sub_100128680(v0 + 136);
  sub_10000C6B4((long long *)(v0 + 216), v34);
  v31(v32, v33);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
LABEL_19:
  return v35();
}

uint64_t sub_1001276A8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[89];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[77];
  swift_bridgeObjectRelease();
  sub_100128680((uint64_t)(v0 + 17));
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10012779C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 784) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100127A84;
  }
  else
  {
    *(void *)(v4 + 792) = a1;
    uint64_t v5 = sub_1001278CC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001278CC()
{
  *(void *)(v0 + 176) = *(void *)(v0 + 792);
  *(void *)(v0 + 200) = *(void *)(v0 + 768);
  *(void *)(v0 + 208) = &protocol witness table for DIPKeystoreKeychain;
  sub_100128680(v0 + 136);
  sub_100128790(v0 + 176, v0 + 136);
  uint64_t result = sub_100128728(v0 + 136, v0 + 16);
  if (!*(void *)(v0 + 40))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = *(void *)(v0 + 680);
  uint64_t v3 = *(void *)(v0 + 672);
  sub_10000C6B4((long long *)(v0 + 16), v0 + 256);
  swift_beginAccess();
  sub_10055ECA0(v0 + 256, v3, v2);
  swift_endAccess();
  uint64_t result = sub_100128728(v0 + 136, v0 + 216);
  if (!*(void *)(v0 + 240))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v5 = *(void *)(v0 + 656);
  uint64_t v6 = *(void *)(v0 + 616);
  uint64_t v7 = *(void *)(v0 + 520);
  sub_100128680(v0 + 136);
  sub_10000C6B4((long long *)(v0 + 216), v7);
  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100127A84()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[89];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[77];
  sub_100128680((uint64_t)(v0 + 17));
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100127B6C()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DIPKeystoreManager()
{
  return self;
}

uint64_t destroy for IdentityKeyPair(uint64_t a1)
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IdentityKeyPair(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for IdentityKeyPair(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IdentityKeyPair(uint64_t a1, uint64_t a2)
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityKeyPair(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityKeyPair(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityKeyPair()
{
  return &type metadata for IdentityKeyPair;
}

uint64_t sub_100127D94(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError();
  uint64_t v24 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(&v27, v29);
  uint64_t v11 = v30;
  uint64_t v12 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()();
  if (v11) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v27);
  }
  uint64_t v15 = v12;
  uint64_t v16 = v13;
  v21[3] = v5;
  v21[4] = v7;
  v21[5] = v10;
  v21[1] = v4;
  long long v21[2] = v2;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v27);
  uint64_t v27 = v22;
  uint64_t v28 = v23;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = 46;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = v27;
  uint64_t v19 = v28;
  type metadata accessor for DIPKeystoreKeychain();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  uint64_t v22 = v20;
  static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)();
  uint64_t v23 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = 0;
  IDV_INTERMEDIATE_CERT_KEYCHAIN_LABEL.getter();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v30) {
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100128680(uint64_t a1)
{
  uint64_t v2 = sub_100007764((uint64_t *)&unk_100726440);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001286E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100128728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100726440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100128790(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100726440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001287F8()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_1001288C8, 0, 0);
}

uint64_t sub_1001288C8()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderAuthenticationStorage deleteAll", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[2];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[7] = v8;
  v0[8] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  sub_10000C728((void *)(v7 + 24), *(void *)(v7 + 48));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[9] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100128A50;
  return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
}

uint64_t sub_100128A50()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100128BCC;
  }
  else {
    os_log_type_t v2 = sub_100128B64;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100128B64()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100128BCC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[7];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100128C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Milestone();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[14] = v8;
  v4[15] = *(void *)(v8 + 64);
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_100128E18, 0, 0);
}

uint64_t sub_100128E18()
{
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v5 = v0[5];
  uint64_t v4 = (void *)v0[6];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = v4[6];
  uint64_t v14 = v4[7];
  sub_10000C728(v4 + 3, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  unint64_t v9 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v10 = swift_allocObject();
  v0[17] = v10;
  *(void *)(v10 + 16) = v6;
  *(void *)(v10 + 24) = v7;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v10 + v9, v1, v3);
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[18] = v11;
  uint64_t v12 = type metadata accessor for MobileDocumentReaderIdentityKey();
  *uint64_t v11 = v0;
  v11[1] = sub_100128F9C;
  return dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)(v0 + 2, sub_100130678, v10, v12, v8, v14);
}

uint64_t sub_100128F9C()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100129174;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001290B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001290B8()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[2];
  static MobileDocumentReaderMilestone.readerAuthenticationKeyFetched.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

uint64_t sub_100129174()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.documentReaderMissingReaderAuthKey(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_10012932C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v19 = a3;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)sub_100533050(a1, a2);
  if (!v3)
  {
    uint64_t v11 = v10;
    uint64_t v12 = v6;
    uint64_t v13 = v19;
    id v14 = [v10 attestationCertificate];

    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = sub_1004DE34C(v15);
      if (v16)
      {
        uint64_t v17 = v16;

        *uint64_t v13 = v17;
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.documentReaderInvalidCoreDataIdentityKeyRecord(_:), v12);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.documentReaderMissingReaderAuthKey(_:), v12);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

uint64_t sub_100129680()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_100129740, 0, 0);
}

uint64_t sub_100129740()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = v1[6];
  uint64_t v3 = v1[7];
  sub_10000C728(v1 + 3, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  uint64_t v5 = sub_100007764(&qword_100724A60);
  *uint64_t v4 = v0;
  v4[1] = sub_100129838;
  return dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)(v0 + 16, sub_100129B54, 0, v5, v2, v3);
}

uint64_t sub_100129838()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001299B8;
  }
  else {
    uint64_t v2 = sub_10012994C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012994C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1001299B8()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_100129B54(void *a1@<X8>)
{
  type metadata accessor for StoredMobileDocumentReaderAttestationCertificate();
  uint64_t v3 = (void *)static StoredMobileDocumentReaderAttestationCertificate.fetchRequest()();
  unint64_t v4 = NSManagedObjectContext.fetch<A>(_:)();

  if (v1) {
    return;
  }
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a1 = _swiftEmptyArrayStorage;
    return;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_16;
  }
LABEL_4:
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    while (1)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        if (sub_1004DE34C(v7)) {
          goto LABEL_12;
        }
      }
      else if (sub_1004DE34C(*(id *)(v4 + 8 * v6 + 32)))
      {
LABEL_12:
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v5 == ++v6) {
        goto LABEL_16;
      }
    }
  }
  __break(1u);
}

uint64_t sub_100129CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Milestone();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[13] = v8;
  v4[14] = *(void *)(v8 + 64);
  v4[15] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPSignpost();
  v4[17] = v9;
  v4[18] = *(void *)(v9 - 8);
  v4[19] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v4[20] = v10;
  v4[21] = *(void *)(v10 - 8);
  v4[22] = swift_task_alloc();
  return _swift_task_switch(sub_100129F60, 0, 0);
}

uint64_t sub_100129F60()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderAuthenticationStorage generateAndStoreIdentityKey", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[20];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = sub_10012AADC();
  v0[23] = v7;
  v0[24] = v8;
  v0[25] = v9;
  uint64_t v10 = v7;
  unint64_t v11 = v8;
  static DaemonSignposts.MobileDocumentReader.storeIdentityKey.getter();
  DIPSignpost.init(_:)();
  uint64_t v12 = SecCertificateRef.derRepresentation()();
  v0[26] = v12;
  v0[27] = v13;
  if (v13 >> 60 == 15)
  {
    uint64_t v14 = enum case for DIPError.Code.documentReaderCannotGenerateIdentityKey(_:);
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.documentReaderCannotGenerateIdentityKey(_:), v0[6]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    unint64_t v15 = v0[24];
    uint64_t v16 = (void *)v0[25];
    uint64_t v17 = v0[23];
    uint64_t v19 = v0[18];
    uint64_t v18 = v0[19];
    uint64_t v20 = v0[17];
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);

    sub_10000C5F4(v17, v15);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    (*(void (**)(void, uint64_t, void))(v0[7] + 104))(v0[8], v14, v0[6]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  else
  {
    unint64_t v23 = v13;
    uint64_t v24 = v0[15];
    uint64_t v37 = v0[14];
    uint64_t v26 = v0[12];
    uint64_t v25 = v0[13];
    uint64_t v38 = v26;
    uint64_t v27 = v0[4];
    uint64_t v28 = v0[3];
    uint64_t v39 = v0[2];
    uint64_t v40 = v12;
    sub_10000C728((void *)(v0[5] + 24), *(void *)(v0[5] + 48));
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
    v0[28] = v29;
    v0[29] = (v25 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v29(v24, v27, v26);
    unint64_t v30 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    unint64_t v31 = (v37 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v32 = swift_allocObject();
    v0[30] = v32;
    *(void *)(v32 + 16) = v39;
    *(void *)(v32 + 24) = v28;
    uint64_t v33 = *(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 32);
    v0[31] = v33;
    v0[32] = (v25 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v33(v32 + v30, v24, v38);
    uint64_t v34 = (uint64_t *)(v32 + v31);
    *uint64_t v34 = v10;
    v34[1] = v11;
    uint64_t v35 = (uint64_t *)(v32 + ((v31 + 23) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v35 = v40;
    v35[1] = v23;
    swift_bridgeObjectRetain();
    sub_10002CEB0(v10, v11);
    sub_1000338D4(v40, v23);
    uint64_t v36 = (void *)swift_task_alloc();
    v0[33] = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_10012A514;
    return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
  }
}

uint64_t sub_10012A514()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_10012A8A8;
  }
  else
  {
    swift_release();
    os_log_type_t v2 = sub_10012A630;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012A630()
{
  unint64_t v23 = (void (*)(uint64_t, uint64_t, uint64_t))v0[31];
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[28];
  uint64_t v20 = v0[26];
  unint64_t v21 = v0[27];
  unint64_t v18 = v0[24];
  uint64_t v19 = (void *)v0[25];
  uint64_t v17 = v0[23];
  uint64_t v24 = v0[19];
  uint64_t v25 = v0[18];
  uint64_t v26 = v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v22 = v0[2];
  uint64_t v8 = v0[11];
  static MobileDocumentReaderMilestone.readerAuthenticationKeyCreated.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  v1(v2, v7, v3);
  type metadata accessor for SESKeystore();
  swift_allocObject();
  swift_bridgeObjectRetain();
  sub_10002CEB0(v17, v18);
  id v9 = v19;
  uint64_t v10 = SESKeystore.init()();
  sub_10000C5E0(v20, v21);
  uint64_t v11 = type metadata accessor for Date();
  type metadata accessor for MobileDocumentReaderIdentityKey();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v22;
  *(void *)(v12 + 24) = v6;
  v23(v12 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_installationIdentifier, v2, v3);
  unint64_t v13 = (uint64_t *)(v12 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob);
  *unint64_t v13 = v17;
  v13[1] = v18;
  *(void *)(v12 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_attestationCertificate) = v9;
  *(void *)(v12 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keystore) = v10;
  uint64_t v14 = (uint64_t *)(v12 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_dateProvider);
  *uint64_t v14 = v11;
  v14[1] = (uint64_t)&protocol witness table for Date;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);

  sub_10000C5F4(v17, v18);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
  return v15(v12);
}

uint64_t sub_10012A8A8()
{
  sub_10000C5E0(v0[26], v0[27]);
  swift_release();
  unint64_t v1 = v0[24];
  uint64_t v2 = (void *)v0[25];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[18];
  uint64_t v4 = v0[19];
  uint64_t v6 = v0[17];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);

  sub_10000C5F4(v3, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.documentReaderCannotGenerateIdentityKey(_:), v0[6]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10012AADC()
{
  uint64_t v0 = type metadata accessor for DIPError.Code();
  uint64_t v83 = *(void *)(v0 - 8);
  uint64_t v84 = v0;
  __chkstk_darwin(v0);
  uint64_t v85 = (char *)v72 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v80 = *(void *)(v2 - 8);
  uint64_t v81 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v79 = (char *)v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v72 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v72 - v8;
  uint64_t v10 = type metadata accessor for CharacterSet();
  uint64_t v78 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for KeyUsage();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v17 - 8);
  uint64_t v18 = type metadata accessor for DIPSignpost();
  uint64_t v88 = *(void *)(v18 - 8);
  uint64_t v89 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DaemonSignposts.MobileDocumentReader.generateIdentityKey.getter();
  uint64_t v87 = v20;
  DIPSignpost.init(_:)();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for KeyUsage.signature(_:), v13);
  unint64_t v21 = v86;
  uint64_t v22 = createBAAKeyACLWithDefaultLAContext(enableUAM:keyUsage:requireUserAuth:forSecureElement:)();
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
LABEL_4:
    type metadata accessor for DaemonAnalytics();
    static DaemonAnalytics.sendMobileDocumentReaderAttestationKeyCreationFailedEvent(error:)();
    (*(void (**)(char *, void, uint64_t))(v83 + 104))(v85, enum case for DIPError.Code.internalError(_:), v84);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    uint64_t v28 = v87;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v28, v89);
  }
  uint64_t v23 = v22;
  uint64_t v76 = v9;
  uint64_t v77 = v12;
  uint64_t v86 = v7;
  uint64_t v24 = v81;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v25 = *(void *)(v82 + 16);
  uint64_t v26 = dispatch thunk of SESKeystore.createKey(acl:)();
  uint64_t v82 = 0;
  v72[1] = v25;
  uint64_t v75 = v26;
  unint64_t v73 = v27;
  uint64_t v74 = (void *)v23;
  uint64_t v93 = 0x4122750000000000;
  id v30 = [self standardUserDefaults];
  v31._uint64_t countAndFlagsBits = 0xD000000000000036;
  v31._object = (void *)0x8000000100638A60;
  Swift::String_optional v32 = NSUserDefaults.internalString(forKey:)(v31);

  if (!v32.value._object)
  {
    uint64_t v46 = 0x4122750000000000;
    uint64_t v47 = v74;
    unint64_t v41 = v73;
    uint64_t v48 = v24;
    uint64_t v34 = v80;
    goto LABEL_32;
  }
  unint64_t v33 = ((unint64_t)v32.value._object >> 56) & 0xF;
  if (((uint64_t)v32.value._object & 0x2000000000000000) == 0) {
    unint64_t v33 = v32.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v34 = v80;
  if (!v33)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = 0x4122750000000000;
    uint64_t v47 = v74;
    unint64_t v41 = v73;
    uint64_t v48 = v24;
    goto LABEL_32;
  }
  Swift::String_optional v92 = v32;
  uint64_t v35 = v77;
  static CharacterSet.whitespaces.getter();
  sub_1000B5358();
  uint64_t v36 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v38 = v37;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v35, v10);
  uint64_t v39 = swift_bridgeObjectRelease();
  uint64_t v91 = 0;
  uint64_t v40 = __chkstk_darwin(v39);
  if ((v38 & 0x1000000000000000) != 0 || !(v38 & 0x2000000000000000 | v36 & 0x1000000000000000))
  {
    uint64_t v71 = v82;
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v82 = v71;
    swift_bridgeObjectRelease();
    unint64_t v41 = v73;
LABEL_15:
    uint64_t v34 = v80;
    goto LABEL_25;
  }
  __chkstk_darwin(v40);
  unint64_t v41 = v73;
  if ((v38 & 0x2000000000000000) == 0)
  {
    if ((v36 & 0x1000000000000000) != 0)
    {
      uint64_t v42 = (v38 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v43 = v36 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v42 = _StringObject.sharedUTF8.getter();
    }
    uint64_t v44 = v82;
    char v45 = sub_100017C00(v42, v43, (void (*)(uint64_t *__return_ptr))sub_100130934);
    uint64_t v82 = v44;
    char v90 = v45 & 1;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v92.value._uint64_t countAndFlagsBits = v36;
  v92.value._object = (void *)(v38 & 0xFFFFFFFFFFFFFFLL);
  if v36 <= 0x20u && ((0x100003E01uLL >> v36))
  {
    BOOL v50 = 0;
    uint64_t v34 = v80;
  }
  else
  {
    uint64_t v49 = (unsigned char *)_swift_stdlib_strtod_clocale();
    uint64_t v34 = v80;
    if (v49) {
      BOOL v50 = *v49 == 0;
    }
    else {
      BOOL v50 = 0;
    }
  }
  char v90 = v50;
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v47 = v74;
  if (v90)
  {
    uint64_t v46 = v91;
    os_log_type_t v51 = v76;
    defaultLogger()();
    BOOL v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 134217984;
      os_log_type_t v51 = v76;
      v92.value._uint64_t countAndFlagsBits = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "MobileDocumentReaderAuthenticationStorage found override value %f for validityInterval.", v54, 0xCu);
      uint64_t v34 = v80;
      swift_slowDealloc();
    }

    uint64_t v55 = v51;
    uint64_t v48 = v24;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v55, v24);
    uint64_t v93 = v46;
  }
  else
  {
    defaultLogger()();
    unint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    uint64_t v48 = v24;
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unable to parse validity interval override in settings. Continuing with default value.", v58, 2u);
      uint64_t v34 = v80;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v34 + 8))(v86, v24);
    uint64_t v46 = v93;
  }
LABEL_32:
  defaultLogger()();
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 134217984;
    uint64_t v48 = v24;
    v92.value._uint64_t countAndFlagsBits = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "MobileDocumentReaderAuthenticationStorage creating SEBAAS certificate with validityInterval %f", v61, 0xCu);
    uint64_t v34 = v80;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v34 + 8))(v79, v48);
  swift_beginAccess();
  uint64_t v62 = v75;
  uint64_t v63 = v82;
  uint64_t v64 = dispatch thunk of SESKeystore.createSEBAASCertificate(with:validityInterval:)();
  if (v63)
  {
    sub_10000C5F4(v62, v41);

    goto LABEL_4;
  }
  uint64_t v66 = v64;
  unint64_t v67 = v65;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  SecCertificateRef v69 = SecCertificateCreateWithData(0, isa);

  if (!v69)
  {
    (*(void (**)(char *, void, uint64_t))(v83 + 104))(v85, enum case for DIPError.Code.certificateDecodingFailed(_:), v84);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v75, v41);

    sub_10000C5F4(v66, v67);
    goto LABEL_4;
  }
  sub_10000C5F4(v66, v67);

  uint64_t v70 = v87;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v70, v89);
  return v75;
}

void sub_10012B73C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  id v5 = sub_1005329E4(a2, a3);
  if (!v3)
  {
    uint64_t v6 = v5;
    type metadata accessor for StoredMobileDocumentReaderSigningKey();
    id v7 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(v4 + 16)];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v7 setKeyBlob:isa];

    [v7 setApplicationInstallation:v6];
    type metadata accessor for StoredMobileDocumentReaderAttestationCertificate();
    id v9 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(v4 + 16)];
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    [v9 setCertificateData:v10];

    [v9 setSigningKey:v7];
    [v9 setApplicationInstallation:v6];
    sub_100532AAC();
  }
}

uint64_t sub_10012B898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Milestone();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[13] = v8;
  v4[14] = *(void *)(v8 + 64);
  v4[15] = swift_task_alloc();
  return _swift_task_switch(sub_10012BA1C, 0, 0);
}

uint64_t sub_10012BA1C()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[2];
  uint64_t v8 = v0[3];
  sub_10000C728((void *)(v5 + 24), *(void *)(v5 + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  v0[16] = v10;
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v8;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v4);
  *(void *)(v10 + ((v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[17] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10012BBA8;
  return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
}

uint64_t sub_10012BBA8()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10012BD78;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10012BCC4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012BCC4()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  static MobileDocumentReaderMilestone.readerAuthenticationKeyDeleted.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10012BD78()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.documentReaderCannotDeleteIdentityKey(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_10012BF30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)sub_100533050(a2, a3);
  if (!v3)
  {
    uint64_t v6 = v5;
    id v7 = [v5 attestationCertificate];

    if (v7)
    {
      id v8 = v7;
      id v9 = [v8 signingKey];
      if (v9)
      {
        uint64_t v10 = v9;
        sub_10012C010(v9, v4);
      }
      [*(id *)(v4 + 16) deleteObject:v8];
    }
    sub_100532AAC();
  }
}

id sub_10012C010(void *a1, uint64_t a2)
{
  uint64_t v29 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v6 = __chkstk_darwin(v5);
  id v8 = (char *)&v28 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  id v11 = [a1 attestationCertificates];
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = [v11 count];
  }
  else
  {
    id v13 = 0;
  }
  id v14 = [a1 authenticationCertificates];
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = [v14 count];

    uint64_t v17 = (uint64_t)v16 + (void)v13;
    if (__OFADD__(v13, v16))
    {
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v17 = (uint64_t)v13;
  }
  if (v17 <= 1)
  {
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "MobileDocumentReaderAuthenticationStorage signing key has 1 or less related certificates. Cleaning up.", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    id v25 = [a1 keyBlob];
    if (!v25) {
      return [*(id *)(v29 + 16) deleteObject:a1];
    }
    uint64_t v26 = v25;
    uint64_t v15 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v27;

    dispatch thunk of SESKeystore.deleteKey(_:)();
LABEL_16:
    sub_10000C5F4((uint64_t)v15, (unint64_t)v10);
    return [*(id *)(v29 + 16) deleteObject:a1];
  }
  defaultLogger()();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "MobileDocumentReaderAuthenticationStorage signing key has more than 1 certificate. No need to clean it up.", v20, 2u);
    swift_slowDealloc();
  }

  return (id)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
}

uint64_t sub_10012C4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Milestone();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_10012C618, 0, 0);
}

uint64_t sub_10012C618()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = (void *)v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[7];
  sub_10000C728(v1 + 3, v4);
  uint64_t v6 = swift_allocObject();
  v0[12] = v6;
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v2;
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[13] = v7;
  uint64_t v8 = sub_100007764(&qword_100722D70);
  *uint64_t v7 = v0;
  v7[1] = sub_10012C73C;
  uint64_t v9 = v0[2];
  return dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)(v9, sub_10013016C, v6, v8, v4, v5);
}

uint64_t sub_10012C73C()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10012C8F8;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10012C858;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012C858()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  static MobileDocumentReaderMilestone.readerAuthenticationCertificateFetched.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10012C8F8()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void *sub_10012CAA8@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)sub_100532E68(a1, a2);
  if (!v3)
  {
    if (result)
    {
      return (void *)sub_1004DD588(result, a3);
    }
    else
    {
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      int v14 = v13;
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v15 = swift_slowAlloc();
        int v21 = v14;
        id v16 = (uint8_t *)v15;
        uint64_t v22 = swift_slowAlloc();
        uint64_t v24 = v22;
        os_log_t v20 = v12;
        *(_DWORD *)id v16 = 136315138;
        v19[1] = v16 + 4;
        swift_bridgeObjectRetain();
        uint64_t v23 = sub_100110D58(a1, a2, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v17 = v20;
        _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v21, "MobileDocumentReaderAuthenticationStorage could not find session for identifier %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      uint64_t v18 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a3, 1, 1, v18);
    }
  }
  return result;
}

uint64_t sub_10012CD3C()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_10012CDFC, 0, 0);
}

uint64_t sub_10012CDFC()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = v1[6];
  uint64_t v3 = v1[7];
  sub_10000C728(v1 + 3, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  uint64_t v5 = sub_100007764(&qword_100724A40);
  *uint64_t v4 = v0;
  v4[1] = sub_10012CEF4;
  return dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)(v0 + 16, sub_10012D19C, 0, v5, v2, v3);
}

uint64_t sub_10012CEF4()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10012D008;
  }
  else {
    uint64_t v2 = sub_100130AEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012D008()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.documentReaderCannotListCertificates(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10012D19C(void *a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v2 = sub_100007764(&qword_100722D70);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v22 - v9;
  type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate();
  uint64_t v11 = (void *)static StoredMobileDocumentReaderAuthenticationCertificate.fetchRequest()();
  unint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v1)
  {
    id v25 = v10;
    uint64_t v26 = v8;
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = (uint64_t)v26;
    v22[1] = 0;
    if (v13)
    {
      if (v13 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v15 = 0;
      id v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      os_log_t v17 = _swiftEmptyArrayStorage;
      uint64_t v24 = v5;
      do
      {
        if ((v12 & 0xC000000000000001) != 0) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v12 + 8 * v15 + 32);
        }
        sub_1004DD588(v18, (uint64_t)v4);
        if ((*v16)(v4, 1, v5) == 1)
        {
          sub_10000C6CC((uint64_t)v4, &qword_100722D70);
        }
        else
        {
          uint64_t v19 = (uint64_t)v25;
          sub_1000D5BA0((uint64_t)v4, (uint64_t)v25);
          sub_1000D5BA0(v19, v14);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            os_log_t v17 = (void *)sub_10010FDFC(0, v17[2] + 1, 1, (unint64_t)v17);
          }
          unint64_t v21 = v17[2];
          unint64_t v20 = v17[3];
          if (v21 >= v20 >> 1) {
            os_log_t v17 = (void *)sub_10010FDFC(v20 > 1, v21 + 1, 1, (unint64_t)v17);
          }
          v17[2] = v21 + 1;
          uint64_t v14 = (uint64_t)v26;
          sub_1000D5BA0((uint64_t)v26, (uint64_t)v17+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v21);
          uint64_t v5 = v24;
        }
        ++v15;
      }
      while (v13 != v15);
    }
    else
    {
      os_log_t v17 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease_n();
    *uint64_t v23 = v17;
  }
}

uint64_t sub_10012D4B4(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Milestone();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  v2[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[11] = v6;
  v2[12] = *(void *)(v6 + 64);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_10012D634, 0, 0);
}

uint64_t sub_10012D634()
{
  uint64_t v1 = (uint64_t *)(v0[2] + *(int *)(v0[10] + 32));
  uint64_t v2 = *v1;
  v0[14] = *v1;
  unint64_t v3 = v1[1];
  v0[15] = v3;
  if ((v3 & 0x2000000000000000) != 0)
  {
    uint64_t v15 = *(void (**)(void))(v0[5] + 104);
    unsigned int v18 = enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:);
    v15(v0[6]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    sub_10002CEB0(v2, v3);
    type metadata accessor for SecCertificate(0);
    uint64_t v4 = Array<A>.derRepresentation()();
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v7 = v0[12];
      uint64_t v6 = v0[13];
      uint64_t v8 = v0[11];
      uint64_t v9 = v0[2];
      sub_10000C728((void *)(v0[3] + 24), *(void *)(v0[3] + 48));
      sub_1000D5C04(v9, v6);
      unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      unint64_t v11 = (v7 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v12 = swift_allocObject();
      v0[16] = v12;
      sub_1000D5BA0(v6, v12 + v10);
      uint64_t v13 = (uint64_t *)(v12 + v11);
      *uint64_t v13 = v2;
      v13[1] = v3;
      *(void *)(v12 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8)) = v5;
      sub_10002CEB0(v2, v3);
      uint64_t v14 = (void *)swift_task_alloc();
      v0[17] = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_10012DB78;
      return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
    }
    uint64_t v15 = *(void (**)(void))(v0[5] + 104);
    unsigned int v18 = enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:);
    v15(v0[6]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100130188(v2, v3);
  }
  ((void (*)(void, void, void))v15)(v0[6], v18, v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10012DB78()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10012DD60;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10012DC94;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012DC94()
{
  uint64_t v2 = v0[14];
  unint64_t v1 = v0[15];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[7];
  static MobileDocumentReaderMilestone.readerAuthenticationCertificateStored.getter();
  Milestone.log()();
  sub_100130188(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10012DD60()
{
  uint64_t v1 = v0[5];
  sub_100130188(v0[14], v0[15]);
  swift_release();
  (*(void (**)(void, void, void))(v1 + 104))(v0[6], enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

void sub_10012DF20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = a5;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v15 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  unint64_t v16 = sub_100533050(v14, v13);
  if (!v5)
  {
    os_log_t v17 = (void *)v16;
    uint64_t v30 = v15;
    unsigned int v18 = v11;
    if (v16)
    {
      unint64_t v19 = sub_1005332BC();
      unint64_t v20 = (void *)v19;
      if (v19)
      {
        type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate();
        id v21 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(v12 + 16)];
        NSString v22 = String._bridgeToObjectiveC()();
        [v21 setSessionIdentifier:v22];

        Class isa = Array._bridgeToObjectiveC()().super.isa;
        [v21 setCertificateChain:isa];

        uint64_t v24 = a2 + *(int *)(v30 + 40);
        unint64_t v25 = *(void *)(v24 + 8);
        if (v25 >> 60 != 15)
        {
          uint64_t v26 = *(void *)v24;
          sub_10002CEB0(*(void *)v24, *(void *)(v24 + 8));
          uint64_t v27 = v17;
          Class v28 = Data._bridgeToObjectiveC()().super.isa;
          [v21 setMerchantLogo:v28];

          os_log_t v17 = v27;
          sub_10000C5E0(v26, v25);
        }
        [v21 setApplicationInstallation:v17];
        [v21 setSigningKey:v20];
        sub_100532AAC();
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v9 + 104))(v18, enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:), v8);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:), v8);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100130A9C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

uint64_t sub_10012E390(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Milestone();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_10012E4B0, 0, 0);
}

uint64_t sub_10012E4B0()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  sub_10000C728((void *)(v1 + 24), *(void *)(v1 + 48));
  uint64_t v4 = (void *)swift_allocObject();
  v0[11] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10012E5DC;
  return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
}

uint64_t sub_10012E5DC()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10012E78C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10012E6F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012E6F8()
{
  static MobileDocumentReaderMilestone.readerAuthenticationCertificateDeleted.getter();
  Milestone.log()();
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10012E78C()
{
  swift_release();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10012E858(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)sub_100532E68(a2, a3);
  if (!v3)
  {
    uint64_t v6 = v5;
    if (v5)
    {
      id v7 = [v5 signingKey];
      if (v7)
      {
        uint64_t v8 = v7;
        sub_10012C010(v7, v4);
      }
      [*(id *)(v4 + 16) deleteObject:v6];
      sub_100532AAC();
    }
  }
}

uint64_t sub_10012E908(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[10] = v5;
  v2[11] = *(void *)(v5 + 64);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_10012EA4C, 0, 0);
}

uint64_t sub_10012EA4C()
{
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  sub_10000C728((void *)(v5 + 24), *(void *)(v5 + 48));
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[14] = v7;
  v0[15] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v6, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  v0[16] = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v9 + v8, v1, v4);
  *(void *)(v9 + ((v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8)) = v5;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[17] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10012EBDC;
  return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
}

uint64_t sub_10012EBDC()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10012EF88;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10012ECF8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012ECF8()
{
  NSString v22 = v0;
  uint64_t v1 = v0[3];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[9];
  defaultLogger()();
  v2(v3, v1, v4);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    uint64_t v18 = v0[6];
    uint64_t v19 = v0[5];
    uint64_t v20 = v0[8];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    sub_100130A9C((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100110D58(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "MobileDocumentReaderAuthenticationStorage successfully deleted all sessions with expiration date earlier than %s.", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  }
  else
  {
    uint64_t v13 = v0[8];
    uint64_t v14 = v0[5];
    uint64_t v15 = v0[6];
    (*(void (**)(void, void))(v0[10] + 8))(v0[12], v0[9]);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10012EF88()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  swift_release();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_10012F06C(uint64_t *a1, char *a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v86 = a3;
  uint64_t v84 = a2;
  uint64_t v6 = sub_100007764(&qword_1007239B0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v83 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v73 - v9);
  uint64_t v88 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v88 - 8);
  uint64_t v12 = __chkstk_darwin(v88);
  uint64_t v81 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v82 = (char *)&v73 - v14;
  uint64_t v15 = *a1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_1004C5CE8((unint64_t)_swiftEmptyArrayStorage);
    unint64_t v16 = v36;
  }
  else
  {
    unint64_t v16 = &_swiftEmptySetSingleton;
  }
  unint64_t v91 = (unint64_t)v16;
  type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate();
  os_log_t v17 = (void *)static StoredMobileDocumentReaderAuthenticationCertificate.fetchRequest()();
  uint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
  unint64_t v85 = v3;
  if (v3)
  {
    swift_bridgeObjectRelease();

    return;
  }
  unint64_t v19 = v18;

  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v87 = v15;
    if (v20) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v87 = v15;
    if (v20)
    {
LABEL_7:
      uint64_t v80 = v10;
      uint64_t v74 = v11;
      if (v20 >= 1)
      {
        uint64_t v21 = 0;
        unint64_t v22 = v19 & 0xC000000000000001;
        uint64_t v79 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
        uint64_t v77 = (void (**)(char *, uint64_t))(v74 + 32);
        uint64_t v75 = (void (**)(char *, uint64_t))(v74 + 8);
        uint64_t v23 = &stru_10071A000;
        uint64_t v76 = v20;
        uint64_t v78 = (void (**)(char *, uint64_t, uint64_t))(v19 & 0xC000000000000001);
        while (1)
        {
          if (v22) {
            id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v24 = *(id *)(v19 + 8 * v21 + 32);
          }
          unint64_t v25 = v24;
          id v26 = [v24 v23[147].name];
          if (v26
            && (uint64_t v27 = v26,
                v90[0] = 0,
                static Array._conditionallyBridgeFromObjectiveC(_:result:)(),
                v27,
                v90[0]))
          {
            if (*((void *)v90[0] + 2))
            {
              uint64_t v29 = *((void *)v90[0] + 4);
              unint64_t v28 = *((void *)v90[0] + 5);
              sub_10002CEB0(v29, v28);
              swift_bridgeObjectRelease();
              CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
              SecCertificateRef v31 = SecCertificateCreateWithData(0, isa);

              if (v31)
              {
                uint64_t v32 = (uint64_t)v80;
                SecCertificateRef.expirationDate.getter();
                uint64_t v33 = v88;
                if ((*v79)(v32, 1, v88) == 1)
                {
                  sub_10000C5F4(v29, v28);

                  sub_10000C6CC(v32, &qword_1007239B0);
                  goto LABEL_27;
                }
                uint64_t v34 = v82;
                ((void (*)(char *, uint64_t, uint64_t))*v77)(v82, v32, v33);
                if (static Date.< infix(_:_:)())
                {
                  id v35 = [v25 signingKey];
                  unint64_t v22 = (unint64_t)v78;
                  if (v35)
                  {
                    sub_1005D8B30(v90, v35);
                  }
                  [*(id *)(v87 + 16) deleteObject:v25];
                  sub_10000C5F4(v29, v28);

                  (*v75)(v82, v88);
                  uint64_t v20 = v76;
                }
                else
                {
                  (*v75)(v34, v33);
                  sub_10000C5F4(v29, v28);

                  uint64_t v20 = v76;
LABEL_27:
                  unint64_t v22 = (unint64_t)v78;
                }
              }
              else
              {

                sub_10000C5F4(v29, v28);
              }
              uint64_t v23 = &stru_10071A000;
              goto LABEL_10;
            }

            swift_bridgeObjectRelease();
          }
          else
          {
          }
LABEL_10:
          if (v20 == ++v21)
          {
            swift_bridgeObjectRelease();
            uint64_t v11 = v74;
            goto LABEL_34;
          }
        }
      }
      __break(1u);
      goto LABEL_57;
    }
  }
  swift_bridgeObjectRelease();
LABEL_34:
  type metadata accessor for StoredMobileDocumentReaderAttestationCertificate();
  uint64_t v37 = (void *)static StoredMobileDocumentReaderAttestationCertificate.fetchRequest()();
  unint64_t v38 = v85;
  unint64_t v4 = NSManagedObjectContext.fetch<A>(_:)();

  if (v38)
  {
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v85 = 0;
  if (v4 >> 62)
  {
LABEL_57:
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v39) {
      goto LABEL_58;
    }
    goto LABEL_38;
  }
  uint64_t v39 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v39)
  {
LABEL_38:
    if (v39 < 1)
    {
LABEL_89:
      __break(1u);
      return;
    }
    uint64_t v40 = 0;
    unint64_t v41 = v4 & 0xC000000000000001;
    uint64_t v79 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v39;
    uint64_t v80 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    uint64_t v77 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v78 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v82 = (char *)v4;
    do
    {
      if (v41) {
        id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v42 = *(id *)(v4 + 8 * v40 + 32);
      }
      uint64_t v43 = v42;
      id v44 = [v42 certificateData];
      if (v44)
      {
        char v45 = v44;
        uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v48 = v47;

        CFDataRef v49 = Data._bridgeToObjectiveC()().super.isa;
        SecCertificateRef v50 = SecCertificateCreateWithData(0, v49);

        if (v50)
        {
          unint64_t v51 = v41;
          uint64_t v52 = (uint64_t)v83;
          SecCertificateRef.expirationDate.getter();
          uint64_t v53 = v88;
          if ((*v80)(v52, 1, v88) == 1)
          {
            sub_10000C5F4(v46, v48);

            sub_10000C6CC(v52, &qword_1007239B0);
          }
          else
          {
            uint64_t v54 = v81;
            (*v78)(v81, v52, v53);
            if (static Date.< infix(_:_:)())
            {
              id v55 = [v43 signingKey];
              unint64_t v41 = v51;
              if (v55)
              {
                sub_1005D8B30(v90, v55);
              }
              [*(id *)(v87 + 16) deleteObject:v43];
              sub_10000C5F4(v46, v48);

              (*v77)(v81, v88);
              uint64_t v39 = (uint64_t)v79;
              unint64_t v4 = (unint64_t)v82;
              goto LABEL_41;
            }
            (*v77)(v54, v53);
            sub_10000C5F4(v46, v48);

            uint64_t v39 = (uint64_t)v79;
          }
          unint64_t v41 = v51;
          unint64_t v4 = (unint64_t)v82;
        }
        else
        {

          sub_10000C5F4(v46, v48);
        }
      }
      else
      {
      }
LABEL_41:
      ++v40;
    }
    while (v39 != v40);
  }
LABEL_58:
  swift_bridgeObjectRelease();
  unint64_t v56 = v91;
  if ((v91 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for StoredMobileDocumentReaderSigningKey();
    sub_100130A9C(&qword_100724A88, (void (*)(uint64_t))&type metadata accessor for StoredMobileDocumentReaderSigningKey);
    Set.Iterator.init(_cocoa:)();
    unint64_t v56 = (unint64_t)v90[1];
    os_log_type_t v57 = v90[2];
    uint64_t v58 = (uint64_t)v90[3];
    id v59 = v90[4];
    unint64_t v60 = (unint64_t)v90[5];
  }
  else
  {
    id v59 = 0;
    uint64_t v61 = -1 << *(unsigned char *)(v91 + 32);
    os_log_type_t v57 = (void *)(v91 + 56);
    uint64_t v58 = ~v61;
    uint64_t v62 = -v61;
    if (v62 < 64) {
      uint64_t v63 = ~(-1 << v62);
    }
    else {
      uint64_t v63 = -1;
    }
    unint64_t v60 = v63 & *(void *)(v91 + 56);
  }
  uint64_t v88 = v56 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v83 = (char *)v58;
  int64_t v64 = (unint64_t)(v58 + 64) >> 6;
  uint64_t v84 = (char *)&type metadata for Swift.AnyObject + 8;
  if ((v56 & 0x8000000000000000) == 0) {
    goto LABEL_68;
  }
  while (1)
  {
    uint64_t v65 = __CocoaSet.Iterator.next()();
    if (!v65) {
      break;
    }
    uint64_t v89 = v65;
    type metadata accessor for StoredMobileDocumentReaderSigningKey();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v66 = v90[0];
    swift_unknownObjectRelease();
    unint64_t v67 = (char *)v59;
    uint64_t v68 = v60;
    if (!v66) {
      break;
    }
    while (1)
    {
      sub_10012C010(v66, v87);

      id v59 = v67;
      unint64_t v60 = v68;
      if ((v56 & 0x8000000000000000) != 0) {
        break;
      }
LABEL_68:
      if (v60)
      {
        uint64_t v68 = (v60 - 1) & v60;
        unint64_t v69 = __clz(__rbit64(v60)) | ((void)v59 << 6);
        unint64_t v67 = (char *)v59;
      }
      else
      {
        uint64_t v70 = (uint64_t)v59 + 1;
        if (__OFADD__(v59, 1))
        {
          __break(1u);
          goto LABEL_89;
        }
        if (v70 >= v64) {
          goto LABEL_87;
        }
        unint64_t v71 = v57[v70];
        unint64_t v67 = (char *)v59 + 1;
        if (!v71)
        {
          unint64_t v67 = (char *)v59 + 2;
          if ((uint64_t)v59 + 2 >= v64) {
            goto LABEL_87;
          }
          unint64_t v71 = v57[(void)v67];
          if (!v71)
          {
            unint64_t v67 = (char *)v59 + 3;
            if ((uint64_t)v59 + 3 >= v64) {
              goto LABEL_87;
            }
            unint64_t v71 = v57[(void)v67];
            if (!v71)
            {
              unint64_t v67 = (char *)v59 + 4;
              if ((uint64_t)v59 + 4 >= v64) {
                goto LABEL_87;
              }
              unint64_t v71 = v57[(void)v67];
              if (!v71)
              {
                uint64_t v72 = (char *)v59 + 5;
                while ((char *)v64 != v72)
                {
                  unint64_t v71 = v57[(void)v72++];
                  if (v71)
                  {
                    unint64_t v67 = v72 - 1;
                    goto LABEL_83;
                  }
                }
                goto LABEL_87;
              }
            }
          }
        }
LABEL_83:
        uint64_t v68 = (v71 - 1) & v71;
        unint64_t v69 = __clz(__rbit64(v71)) + ((void)v67 << 6);
      }
      id v66 = *(id *)(*(void *)(v56 + 48) + 8 * v69);
      if (!v66) {
        goto LABEL_87;
      }
    }
  }
LABEL_87:
  sub_100130AE4();
  sub_100532AAC();
}

void sub_10012FA60(uint64_t *a1)
{
  uint64_t v2 = *a1;
  type metadata accessor for StoredMobileDocumentReaderApplicationInstallation();
  unint64_t v3 = (void *)static StoredMobileDocumentReaderApplicationInstallation.fetchRequest()();
  unint64_t v4 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v1)
  {
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v7 = *(id *)(v4 + 8 * i + 32);
          }
          uint64_t v8 = v7;
          [*(id *)(v2 + 16) deleteObject:v7];
        }
      }
    }
    swift_bridgeObjectRelease();
    sub_100532AAC();
  }
}

uint64_t sub_10012FB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_10012FC58, 0, 0);
}

uint64_t sub_10012FC58()
{
  uint64_t v1 = v0[5];
  unint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  sub_10000C728((void *)(v0[6] + 24), *(void *)(v0[6] + 48));
  uint64_t v5 = (void *)swift_allocObject();
  v0[10] = v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v4;
  v5[5] = v2;
  swift_bridgeObjectRetain();
  sub_10002CEB0(v4, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[11] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10012FD88;
  return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
}

uint64_t sub_10012FD88()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = sub_10012FF10;
  }
  else
  {
    swift_release();
    unint64_t v2 = sub_10012FEA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012FEA4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v2 = *(void *)(v0 + 96) == 0;
  return v1(v2);
}

uint64_t sub_10012FF10()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  swift_release();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(BOOL))v0[1];
  BOOL v5 = v0[12] == 0;
  return v4(v5);
}

void sub_10012FFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = sub_100532E68(a2, a3);
  if (!v3)
  {
    BOOL v5 = (void *)v4;
    if (v4)
    {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v5 setMerchantLogo:isa];

      sub_100532AAC();
    }
  }
}

uint64_t sub_100130070()
{
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MobileDocumentReaderAuthenticationStorage()
{
  return self;
}

uint64_t sub_1001300D4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100130114(uint64_t *a1)
{
  sub_10012E858(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100130134()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_10013016C@<X0>(uint64_t a1@<X8>)
{
  return sub_10012CAA8(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_100130188(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {

  }
  else {
    sub_10000C5F4(a1, a2);
  }
}

uint64_t sub_100130194()
{
  uint64_t v1 = (int *)type metadata accessor for MobileDocumentReaderAuthenticationSession();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[6];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  sub_100130188(*(void *)(v5 + v1[8]), *(void *)(v5 + v1[8] + 8));
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_10000C5F4(*v8, v9);
  }
  unint64_t v10 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[12];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10000C5F4(*(void *)(v0 + v10), *(void *)(v0 + v10 + 8));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_100130360(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MobileDocumentReaderAuthenticationSession() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10012DF20(a1, v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + v5 + 8), *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100130418()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100130500(uint64_t *a1)
{
  type metadata accessor for UUID();
  sub_10012BF30(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001305AC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100130678(uint64_t *a1@<X8>)
{
  type metadata accessor for UUID();
  sub_10012932C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1001306F8()
{
  swift_bridgeObjectRelease();
  sub_10000C5F4(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100130738(uint64_t a1)
{
  sub_10012FFE0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100130758()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_10000C5F4(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));
  sub_10000C5F4(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));

  return _swift_deallocObject(v0, v7 + 16, v5);
}

void sub_100130858(uint64_t *a1)
{
  type metadata accessor for UUID();
  sub_10012B73C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unsigned char *sub_100130918@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1003007CC(a1, a2);
}

void *sub_100130934@<X0>(unsigned char *a1@<X8>)
{
  return sub_100017C60(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_100130950()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_1001309F4(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10012F06C(a1, (char *)(v1 + v4), *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100130A9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100130AE4()
{
  return swift_release();
}

uint64_t sub_100130AF0(void *a1, uint64_t a2)
{
  uint64_t v93 = a1;
  uint64_t v3 = sub_100007764(&qword_100720B08);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for IdentityIntentToStore();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::String_optional v92 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v85 - v11;
  uint64_t v13 = type metadata accessor for IdentityElement();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(int *)(v4 + 56);
  uint64_t v18 = &v6[v17];
  uint64_t v19 = a2;
  uint64_t v20 = a2 + v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v6, v19, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v18, v20, v7);
  uint64_t v87 = v14;
  uint64_t v88 = v13;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v6, v13);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v94 = v12;
  uint64_t v95 = v7;
  v21(v12, v18, v7);
  uint64_t v86 = v16;
  unint64_t v22 = sub_1001311D0();
  uint64_t v23 = v22[2];
  if (v23)
  {
    id v24 = 0;
    unsigned int v91 = enum case for IdentityIntentToStore.willNotStore(_:);
    char v90 = (void (**)(char *, void, uint64_t))(v8 + 104);
    unint64_t v25 = (void (**)(void, void))(v8 + 8);
    unint64_t v85 = v22;
    id v26 = v22 + 7;
    while (1)
    {
      uint64_t v27 = v25;
      uint64_t v28 = *(v26 - 3);
      uint64_t v29 = *(v26 - 2);
      uint64_t v30 = *(v26 - 1);
      uint64_t v31 = *v26;
      uint64_t v98 = v24;
      uint64_t v99 = v30;
      uint64_t v32 = v93;
      uint64_t v33 = *v93;
      uint64_t v34 = *(void *)(*v93 + 16);
      swift_bridgeObjectRetain_n();
      uint64_t v101 = v31;
      swift_bridgeObjectRetain_n();
      if (!v34) {
        goto LABEL_8;
      }
      unint64_t v35 = sub_100590548(v28, v29);
      if (v36)
      {
        unint64_t v37 = *(void *)(*(void *)(v33 + 56) + 8 * v35);
        swift_bridgeObjectRetain();
      }
      else
      {
LABEL_8:
        unint64_t v37 = sub_10015D044((uint64_t)_swiftEmptyArrayStorage);
      }
      swift_bridgeObjectRelease();
      uint64_t v38 = *(void *)(v37 + 16);
      uint64_t v100 = v29;
      uint64_t v39 = v28;
      uint64_t v40 = v27;
      uint64_t v96 = v23;
      if (v38 && (unint64_t v41 = sub_100590548(v99, v101), (v42 & 1) != 0)) {
        char v43 = *(unsigned char *)(*(void *)(v37 + 56) + v41);
      }
      else {
        char v43 = 0;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v44 = v92;
      uint64_t v45 = v95;
      (*v90)(v92, v91, v95);
      sub_100131C38(&qword_100724A90, (void (*)(uint64_t))&type metadata accessor for IdentityIntentToStore);
      int v97 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v89 = (void (*)(char *, uint64_t))*v27;
      v89(v44, v45);
      sub_10003BEDC((uint64_t)v98);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v102 = (void *)*v32;
      unint64_t v47 = v102;
      *uint64_t v32 = 0x8000000000000000;
      unint64_t v49 = sub_100590548(v39, v100);
      uint64_t v50 = v47[2];
      BOOL v51 = (v48 & 1) == 0;
      uint64_t v52 = v50 + v51;
      if (__OFADD__(v50, v51)) {
        break;
      }
      char v53 = v48;
      if (v47[3] >= v52)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10016AF1C();
          unint64_t v47 = v102;
        }
        uint64_t v54 = v100;
      }
      else
      {
        sub_1001658D4(v52, isUniquelyReferenced_nonNull_native);
        unint64_t v47 = v102;
        uint64_t v54 = v100;
        unint64_t v55 = sub_100590548(v39, v100);
        if ((v53 & 1) != (v56 & 1)) {
          goto LABEL_40;
        }
        unint64_t v49 = v55;
      }
      *uint64_t v32 = v47;
      swift_bridgeObjectRelease();
      os_log_type_t v57 = (void *)*v32;
      swift_bridgeObjectRetain();
      if ((v53 & 1) == 0)
      {
        unint64_t v58 = sub_10015D044((uint64_t)_swiftEmptyArrayStorage);
        v57[(v49 >> 6) + 8] |= 1 << v49;
        id v59 = (uint64_t *)(v57[6] + 16 * v49);
        uint64_t *v59 = v39;
        v59[1] = v54;
        *(void *)(v57[7] + 8 * v49) = v58;
        uint64_t v60 = v57[2];
        BOOL v61 = __OFADD__(v60, 1);
        uint64_t v62 = v60 + 1;
        if (v61) {
          goto LABEL_38;
        }
        v57[2] = v62;
        swift_bridgeObjectRetain();
      }
      char v63 = v43;
      int64_t v64 = v40;
      uint64_t v65 = v57[7];
      swift_bridgeObjectRelease();
      uint64_t v66 = 8 * v49;
      char v67 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v102 = *(void **)(v65 + v66);
      uint64_t v68 = v102;
      *(void *)(v65 + v66) = 0x8000000000000000;
      unint64_t v70 = sub_100590548(v99, v101);
      uint64_t v71 = v68[2];
      BOOL v72 = (v69 & 1) == 0;
      uint64_t v73 = v71 + v72;
      if (__OFADD__(v71, v72)) {
        goto LABEL_37;
      }
      char v74 = v69;
      if (v68[3] >= v73)
      {
        if ((v67 & 1) == 0) {
          sub_10016AD70();
        }
        uint64_t v75 = v101;
      }
      else
      {
        sub_1001655C8(v73, v67);
        uint64_t v75 = v101;
        unint64_t v76 = sub_100590548(v99, v101);
        if ((v74 & 1) != (v77 & 1)) {
          goto LABEL_40;
        }
        unint64_t v70 = v76;
      }
      char v78 = v63 | v97 ^ 1;
      uint64_t v79 = v102;
      if (v74)
      {
        *(unsigned char *)(v102[7] + v70) = v78 & 1;
      }
      else
      {
        v102[(v70 >> 6) + 8] |= 1 << v70;
        uint64_t v80 = (void *)(v79[6] + 16 * v70);
        *uint64_t v80 = v99;
        v80[1] = v75;
        *(unsigned char *)(v79[7] + v70) = v78 & 1;
        uint64_t v81 = v79[2];
        BOOL v61 = __OFADD__(v81, 1);
        uint64_t v82 = v81 + 1;
        if (v61) {
          goto LABEL_39;
        }
        v79[2] = v82;
        swift_bridgeObjectRetain();
      }
      v26 += 4;
      *(void *)(v65 + v66) = v79;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v24 = sub_100131C08;
      uint64_t v23 = v96 - 1;
      unint64_t v25 = v64;
      if (v96 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v83 = sub_100131C08;
        v89(v94, v95);
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v83 = 0;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v94, v95);
LABEL_35:
    (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
    return sub_10003BEDC((uint64_t)v83);
  }
  return result;
}

void *sub_1001311D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v44[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for IdentityElement();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v44[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v1, v6);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (v10 == enum case for IdentityElement.ageIsOver(_:))
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    sub_100007764(&qword_100724058);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_100610730;
    static ISO23220_1_ElementIdentifier.namespaceIdentifier.getter();
    uint64_t v12 = ISO18013KnownNamespaces.rawValue.getter();
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v14;
    *(void *)(v11 + 48) = static ISO23220_1_ElementIdentifier.ageOver(nn:)();
    *(void *)(v11 + 56) = v15;
    return (void *)v11;
  }
  if (v10 == enum case for IdentityElement.givenName(_:) || v10 == enum case for IdentityElement.familyName(_:))
  {
    sub_100007764(&qword_100724A98);
    uint64_t v17 = (void *)swift_allocObject();
    *((_OWORD *)v17 + 1) = xmmword_100610730;
    uint64_t v18 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier();
    v17[7] = v18;
    v17[8] = sub_100131C38(&qword_100724AA8, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier);
    uint64_t v19 = sub_10002C2D8(v17 + 4);
    uint64_t v20 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.fullName(_:);
LABEL_13:
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v19, *v20, v18);
    goto LABEL_14;
  }
  if (v10 == enum case for IdentityElement.sex(_:))
  {
    sub_100007764(&qword_100724A98);
    uint64_t v17 = (void *)swift_allocObject();
    *((_OWORD *)v17 + 1) = xmmword_100611020;
    uint64_t v21 = type metadata accessor for ISO23220_1_ElementIdentifier();
    v17[7] = v21;
    v17[8] = sub_100131C38(&qword_100724AA0, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier);
    unint64_t v22 = sub_10002C2D8(v17 + 4);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v22, enum case for ISO23220_1_ElementIdentifier.sex(_:), v21);
    uint64_t v18 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier();
    v17[12] = v18;
    v17[13] = sub_100131C38(&qword_100724AA8, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier);
    uint64_t v19 = sub_10002C2D8(v17 + 9);
    uint64_t v20 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.sex(_:);
    goto LABEL_13;
  }
  if (v10 == enum case for IdentityElement.portrait(_:))
  {
    sub_100007764(&qword_100724A98);
    uint64_t v17 = (void *)swift_allocObject();
    *((_OWORD *)v17 + 1) = xmmword_100610730;
    uint64_t v18 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier();
    v17[7] = v18;
    v17[8] = sub_100131C38(&qword_100724AA8, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier);
    uint64_t v19 = sub_10002C2D8(v17 + 4);
    uint64_t v20 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.portrait(_:);
    goto LABEL_13;
  }
  if (v10 == enum case for IdentityElement.address(_:))
  {
    sub_100007764(&qword_100724A98);
    uint64_t v17 = (void *)swift_allocObject();
    *((_OWORD *)v17 + 1) = xmmword_100611020;
    uint64_t v33 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier();
    v17[7] = v33;
    uint64_t v34 = sub_100131C38(&qword_100724AA8, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier);
    v17[8] = v34;
    unint64_t v35 = sub_10002C2D8(v17 + 4);
    char v36 = *(void (**)(uint64_t *, void, uint64_t))(*(void *)(v33 - 8) + 104);
    v36(v35, enum case for ISO23220_1_Japan_ElementIdentifier.localGovCode(_:), v33);
    v17[12] = v33;
    v17[13] = v34;
    unint64_t v37 = sub_10002C2D8(v17 + 9);
    v36(v37, enum case for ISO23220_1_Japan_ElementIdentifier.residentAddress(_:), v33);
  }
  else
  {
    if (v10 != enum case for IdentityElement.issuingAuthority(_:)
      && v10 != enum case for IdentityElement.documentDHSComplianceStatus(_:)
      && v10 != enum case for IdentityElement.documentIssueDate(_:)
      && v10 != enum case for IdentityElement.documentExpirationDate(_:))
    {
      if (v10 == enum case for IdentityElement.documentNumber(_:))
      {
        sub_100007764(&qword_100724A98);
        uint64_t v17 = (void *)swift_allocObject();
        *((_OWORD *)v17 + 1) = xmmword_100610730;
        uint64_t v18 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier();
        v17[7] = v18;
        v17[8] = sub_100131C38(&qword_100724AA8, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier);
        uint64_t v19 = sub_10002C2D8(v17 + 4);
        uint64_t v20 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.individualNumber(_:);
        goto LABEL_13;
      }
      if (v10 != enum case for IdentityElement.drivingPrivileges(_:))
      {
        if (v10 == enum case for IdentityElement.age(_:))
        {
          sub_100007764(&qword_100724A98);
          uint64_t v17 = (void *)swift_allocObject();
          *((_OWORD *)v17 + 1) = xmmword_100610730;
          uint64_t v18 = type metadata accessor for ISO23220_1_ElementIdentifier();
          v17[7] = v18;
          v17[8] = sub_100131C38(&qword_100724AA0, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier);
          uint64_t v19 = sub_10002C2D8(v17 + 4);
          uint64_t v20 = (unsigned int *)&enum case for ISO23220_1_ElementIdentifier.ageInYears(_:);
          goto LABEL_13;
        }
        if (v10 == enum case for IdentityElement.dateOfBirth(_:))
        {
          sub_100007764(&qword_100724A98);
          uint64_t v17 = (void *)swift_allocObject();
          *((_OWORD *)v17 + 1) = xmmword_100611020;
          uint64_t v41 = type metadata accessor for ISO23220_1_ElementIdentifier();
          v17[7] = v41;
          v17[8] = sub_100131C38(&qword_100724AA0, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier);
          char v42 = sub_10002C2D8(v17 + 4);
          (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v42, enum case for ISO23220_1_ElementIdentifier.birthDate(_:), v41);
          uint64_t v18 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier();
          v17[12] = v18;
          v17[13] = sub_100131C38(&qword_100724AA8, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier);
          uint64_t v19 = sub_10002C2D8(v17 + 9);
          uint64_t v20 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.birthDate(_:);
          goto LABEL_13;
        }
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
    }
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  int64_t v23 = v17[2];
  if (v23)
  {
    BOOL v51 = _swiftEmptyArrayStorage;
    sub_100111534(0, v23, 0);
    char v43 = v17;
    uint64_t v24 = (uint64_t)(v17 + 4);
    do
    {
      sub_100030A10(v24, (uint64_t)v45);
      sub_10000C728(v45, v46);
      swift_getDynamicType();
      void v44[3] = swift_getAssociatedTypeWitness();
      v44[4] = swift_getAssociatedConformanceWitness();
      sub_10002C2D8(v44);
      dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      sub_10000C728(v45, v46);
      dispatch thunk of RawRepresentable.rawValue.getter();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v44);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v45);
      uint64_t v25 = v49;
      uint64_t v26 = v50;
      uint64_t v27 = v47;
      uint64_t v28 = v48;
      uint64_t v11 = (uint64_t)v51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100111534(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = (uint64_t)v51;
      }
      unint64_t v30 = *(void *)(v11 + 16);
      unint64_t v29 = *(void *)(v11 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_100111534(v29 > 1, v30 + 1, 1);
        uint64_t v11 = (uint64_t)v51;
      }
      *(void *)(v11 + 16) = v30 + 1;
      uint64_t v31 = (void *)(v11 + 32 * v30);
      v31[4] = v25;
      v31[5] = v26;
      v31[6] = v27;
      v31[7] = v28;
      v24 += 40;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return (void *)v11;
}

unint64_t sub_100131C08@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10015D044((uint64_t)_swiftEmptyArrayStorage);
  *a1 = result;
  return result;
}

uint64_t sub_100131C38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100131C80()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Destroying IdentityProofingDataSharingSessionProxy", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100025D08(v1 + 16);
  swift_release();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_100131DDC()
{
  sub_100131C80();

  return swift_deallocClassInstance();
}

uint64_t sub_100131E10()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_100131F98, 0, 0);
}

uint64_t sub_100131F98()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting fetchUserConsent event", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];

  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[13] = v7;
  v0[14] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1001336E8();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[15] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001322EC;
  return sub_100215354();
}

uint64_t sub_1001322EC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100132460, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_100132460()
{
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[13];
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v10 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10000C588();
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001327F0(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100132898;
  return sub_100131E10();
}

uint64_t sub_100132898(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_task_dealloc();
  swift_release();
  uint64_t v8 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t))(v8 + 16))(v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v8 + 16))(v8, a1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_100132AA0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_100132C28, 0, 0);
}

uint64_t sub_100132C28()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting checkUserConsent event", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[13] = v7;
  v0[14] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1001336E8();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[15] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100132F80;
  return sub_1002140EC();
}

uint64_t sub_100132F80(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1001330F4, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5(a1 & 1);
  }
}

uint64_t sub_1001330F4()
{
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[13];
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v10 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10000C588();
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8(0);
}

uint64_t type metadata accessor for IdentityProofingDataSharingSessionProxy()
{
  return self;
}

uint64_t sub_1001334AC(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100133554;
  return sub_100132AA0();
}

uint64_t sub_100133554(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_task_dealloc();
  swift_release();
  uint64_t v8 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_1001336E8()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v26 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v24 = v3;
  if (v11)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v29 = v21;
    uint64_t v22 = v2;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v19 = v12 + 4;
    uint64_t v20 = v12;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v14 = *(void *)(v0 + 24);
    uint64_t v27 = Strong;
    uint64_t v28 = v14;
    sub_100007764((uint64_t *)&unk_100724BB0);
    uint64_t v15 = Optional.debugDescription.getter();
    uint64_t v23 = v1;
    unint64_t v17 = v16;
    swift_unknownObjectRelease();
    uint64_t v27 = sub_100110D58(v15, v17, &v29);
    uint64_t v2 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Checking connection %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v26);
  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_getObjectType();
    if ((dispatch thunk of NSXPCConnectionProtocol.isEntitled(_:)() & 1) == 0)
    {
      (*(void (**)(char *, void, uint64_t))(v24 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v24 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
}

uint64_t sub_100133BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[3] = 0;
  swift_unknownObjectWeakInit();
  defaultLogger()();
  BOOL v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = a3;
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Creating IdentityProofingDataSharingSessionProxy", v13, 2u);
    a3 = v16;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v4[3] = a2;
  swift_unknownObjectWeakAssign();
  v4[4] = a3;
  swift_retain();
  uint64_t result = os_transaction_create();
  if (result)
  {
    v4[5] = result;
    return (uint64_t)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100133D74()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10000C494;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100724BC0 + dword_100724BC0);
  return v5(v2, v3);
}

uint64_t sub_100133E24()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1007336B0 + dword_1007336B0);
  return v6(v2, v3, v4);
}

void sub_100133EE8(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v6);
  uint64_t v19 = type metadata accessor for DIPError();
  uint64_t v21 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  id v18[2] = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v20 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - v12;
  uint64_t v22 = a3;
  _Block_copy(a3);
  defaultLogger()();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    v18[1] = a2;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting didChangeUserConsent event", v16, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  sub_1001336E8();
  unint64_t v17 = v22;
  _Block_copy(v22);
  sub_1002183E0(a1, v17);
  _Block_release(v17);
  _Block_release(v22);
}

uint64_t sub_100134388()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001343C8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100724BE0 + dword_100724BE0);
  return v5(v2, v3);
}

uint64_t sub_10013447C(uint64_t a1, uint64_t a2)
{
  v2[60] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[61] = v4;
  v2[62] = *(void *)(v4 - 8);
  v2[63] = swift_task_alloc();
  uint64_t v7 = (char *)&dword_100724CC0 + dword_100724CC0;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[64] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100134594;
  return ((uint64_t (*)(void *, uint64_t))v7)(v2 + 2, a2);
}

uint64_t sub_100134594()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1001346E0, 0, 0);
  }
}

uint64_t sub_1001346E0()
{
  sub_1000BEA14((uint64_t)(v0 + 53), (uint64_t)(v0 + 58), &qword_100722398);
  sub_1000BEA14((uint64_t)(v0 + 58), (uint64_t)(v0 + 57), &qword_100722398);
  uint64_t v1 = v0[57];
  v0[65] = v1;
  if (v1
    && (sub_1000BEA14((uint64_t)(v0 + 54), (uint64_t)(v0 + 59), &qword_100722398),
        sub_1000BEA14((uint64_t)(v0 + 59), (uint64_t)(v0 + 56), &qword_100722398),
        uint64_t v2 = v0[56],
        (v0[66] = v2) != 0))
  {
    sub_100135DC4((uint64_t)(v0 + 58));
    sub_100135DC4((uint64_t)(v0 + 59));
    sub_1000C68DC((uint64_t)(v0 + 2));
    uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_100724CC8 + dword_100724CC8);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[67] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10013494C;
    return v9();
  }
  else
  {
    uint64_t v6 = v0[62];
    uint64_t v5 = v0[63];
    uint64_t v7 = v0[61];
    sub_1000C68DC((uint64_t)(v0 + 2));
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.attributeConfigUnavailable(_:), v7);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_10013494C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 544) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100134A4C, 0, 0);
}

uint64_t sub_100134A4C()
{
  if (v0[68])
  {
    uint64_t v1 = self;
    id v2 = [v1 standardUserDefaults];
    v3._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v3._object = (void *)0x8000000100638FF0;
    Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

    if (v4)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD000000000000014, 0x8000000100639370, 0xD000000000000016, 0x8000000100639350, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      char v6 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0x10000000000000D7, 0x80000001006393B0, 0xD000000000000019, 0x8000000100639390, v6);
      swift_bridgeObjectRelease();
    }
    id v7 = [v1 standardUserDefaults];
    v8._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
    v8._object = (void *)0x8000000100639010;
    Swift::Bool v9 = NSUserDefaults.internalBool(forKey:)(v8);

    if (v9)
    {
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD000000000000021, 0x8000000100639300, 0xD000000000000033, 0x800000010062A030, v10);
      swift_bridgeObjectRelease();
      char v11 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD00000000000001DLL, 0x8000000100639330, 0xD00000000000002BLL, 0x800000010062A000, v11);
      swift_bridgeObjectRelease();
    }
    id v12 = [v1 standardUserDefaults];
    v13._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v13._object = (void *)0x8000000100639050;
    Swift::Bool v14 = NSUserDefaults.internalBool(forKey:)(v13);

    if (v14)
    {
      char v15 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD000000000000010, 0x80000001006390C0, 0xD000000000000038, 0x8000000100639080, v15);
      swift_bridgeObjectRelease();
      char v16 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD000000000000011, 0x8000000100639120, 0xD000000000000039, 0x80000001006390E0, v16);
      swift_bridgeObjectRelease();
      char v17 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD000000000000011, 0x8000000100639180, 0xD000000000000039, 0x8000000100639140, v17);
      swift_bridgeObjectRelease();
      char v18 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD000000000000011, 0x80000001006391E0, 0xD000000000000039, 0x80000001006391A0, v18);
      swift_bridgeObjectRelease();
      char v19 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD000000000000010, 0x80000001006390C0, 0xD000000000000036, 0x8000000100639200, v19);
      swift_bridgeObjectRelease();
      char v20 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD000000000000011, 0x8000000100639120, 0xD000000000000037, 0x8000000100639240, v20);
      swift_bridgeObjectRelease();
      char v21 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD000000000000011, 0x8000000100639180, 0xD000000000000037, 0x8000000100639280, v21);
      swift_bridgeObjectRelease();
      char v22 = swift_isUniquelyReferenced_nonNull_native();
      sub_100562120(0xD000000000000011, 0x80000001006391E0, 0xD000000000000037, 0x80000001006392C0, v22);
      swift_bridgeObjectRelease();
    }
    IdentityProofingAttributeConfiguration.init(attributeMessages:messageReplacements:unorderedUI:)();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v25 = v0[62];
    uint64_t v24 = v0[63];
    uint64_t v26 = v0[61];
    sub_10009F534((uint64_t)(v0 + 58));
    sub_10009F534((uint64_t)(v0 + 59));
    (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))(v24, enum case for DIPError.Code.invalidStaticWorkflow(_:), v26);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
  }
  return v23();
}

uint64_t type metadata accessor for IdentityProofingConfigProvider()
{
  return self;
}

uint64_t sub_100135078(uint64_t a1, uint64_t a2)
{
  v2[112] = a2;
  v2[111] = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[113] = v3;
  v2[114] = *(void *)(v3 - 8);
  v2[115] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[116] = v4;
  v2[117] = *(void *)(v4 - 8);
  v2[118] = swift_task_alloc();
  return _swift_task_switch(sub_100135198, 0, 0);
}

uint64_t sub_100135198()
{
  char v20 = v0;
  uint64_t v1 = v0[112];
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v16 = v0[117];
    uint64_t v17 = v0[116];
    uint64_t v18 = v0[118];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v19 = v5;
    swift_bridgeObjectRetain();
    uint64_t v6 = Array.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    v0[110] = sub_100110D58(v6, v8, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetch active config called for supported languages %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
  }
  else
  {
    uint64_t v9 = v0[118];
    uint64_t v10 = v0[117];
    uint64_t v11 = v0[116];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  uint64_t v12 = v1;
  if (!v0[112])
  {
    if (qword_10071F5D8 != -1) {
      swift_once();
    }
    uint64_t v12 = qword_100760880;
    swift_bridgeObjectRetain();
  }
  v0[119] = v12;
  uint64_t v13 = qword_10071F4E0;
  swift_bridgeObjectRetain();
  if (v13 != -1) {
    swift_once();
  }
  Swift::Bool v14 = (void *)swift_task_alloc();
  v0[120] = v14;
  *Swift::Bool v14 = v0;
  v14[1] = sub_1001354B8;
  return sub_1002AA1B8((uint64_t)(v0 + 56), 0xD000000000000025, 0x8000000100632A00, v12, 1);
}

uint64_t sub_1001354B8()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001355D0, 0, 0);
}

uint64_t sub_1001355D0()
{
  sub_1000BEA14(v0 + 448, v0 + 16, &qword_100722350);
  if (sub_100044CCC(v0 + 16) == 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 912) + 104))(*(void *)(v0 + 920), enum case for DIPError.Code.missingActiveConfig(_:), *(void *)(v0 + 904));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    memcpy(*(void **)(v0 + 888), (const void *)(v0 + 16), 0x1B0uLL);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013578C()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v0[5] = v2;
  v0[6] = *(void *)(v2 - 8);
  v0[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v0[8] = v3;
  v0[9] = *(void *)(v3 - 8);
  v0[10] = swift_task_alloc();
  v0[11] = type metadata accessor for IdentityProofingStaticWorkflow(0);
  v0[12] = swift_task_alloc();
  return _swift_task_switch(sub_100135930, 0, 0);
}

uint64_t sub_100135930()
{
  v0[13] = sub_10052E944();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100135A04;
  uint64_t v2 = v0[12];
  return sub_10052DED8(v2, 0xD000000000000024, 0x800000010062AD00, 0xD000000000000027, 0x800000010062AD30);
}

uint64_t sub_100135A04()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100135BCC;
  }
  else {
    uint64_t v2 = sub_100135B18;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100135B18()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[11];
  swift_release();
  uint64_t v3 = *(void *)(v1 + *(int *)(v2 + 48));
  swift_bridgeObjectRetain();
  sub_100009C98(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v3);
}

uint64_t sub_100135BCC()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v6 = v0[2];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.invalidStaticWorkflow(_:), v0[5]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10000C588();
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v1, v3);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8(0);
}

uint64_t sub_100135DC4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100135DF0(uint64_t a1, uint64_t a2)
{
  v2[31] = a1;
  v2[32] = a2;
  uint64_t v3 = type metadata accessor for Date();
  v2[33] = v3;
  v2[34] = *(void *)(v3 - 8);
  v2[35] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPBackgroundDeferralStatus();
  v2[36] = v4;
  v2[37] = *(void *)(v4 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  return _swift_task_switch(sub_100135F1C, 0, 0);
}

uint64_t sub_100135F1C()
{
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 296);
  (*(void (**)(void))(v0 + 248))();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v3);
  char v5 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  v6(v1, v3);
  if (v5)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  else
  {
    type metadata accessor for SESKeystore();
    swift_allocObject();
    uint64_t v9 = SESKeystore.init()();
    if (qword_10071F4B0 != -1) {
      swift_once();
    }
    uint64_t v10 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
    uint64_t v11 = (uint64_t)&v10[4];
    uint64_t v12 = v10 + 52;
    os_unfair_lock_lock(v10 + 52);
    sub_1000262B4(v11, (_OWORD *)(v0 + 16));
    os_unfair_lock_unlock(v12);
    uint64_t v13 = *(void *)(v0 + 72);
    swift_retain();
    sub_1000262D0(v0 + 16);
    *(void *)(v0 + 232) = type metadata accessor for MobileDocumentReaderDataContainer();
    *(void *)(v0 + 240) = sub_100026324();
    *(void *)(v0 + 208) = v13;
    type metadata accessor for MobileDocumentReaderAuthenticationStorage();
    uint64_t v14 = swift_allocObject();
    *(void *)(v0 + 320) = v14;
    *(void *)(v14 + 16) = v9;
    sub_10000C6B4((long long *)(v0 + 208), v14 + 24);
    static Date.now.getter();
    char v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v15;
    *char v15 = v0;
    v15[1] = sub_1001361B4;
    uint64_t v16 = *(void *)(v0 + 280);
    return sub_10012E908(v16);
  }
}

uint64_t sub_1001361B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 280);
  uint64_t v2 = *(void *)(*(void *)v0 + 272);
  uint64_t v3 = *(void *)(*(void *)v0 + 264);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_10013630C, 0, 0);
}

uint64_t sub_10013630C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100136388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(double *)(v6 + 80) = a6;
  *(void *)(v6 + 64) = a4;
  *(void *)(v6 + 72) = a5;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 56) = a3;
  *(void *)(v6 + 40) = a1;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 88) = v7;
  *(void *)(v6 + 96) = *(void *)(v7 - 8);
  *(void *)(v6 + 104) = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  *(void *)(v6 + 112) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v6 + 120) = v8;
  *(void *)(v6 + 128) = *(void *)(v8 - 8);
  *(void *)(v6 + 136) = swift_task_alloc();
  *(void *)(v6 + 144) = swift_task_alloc();
  *(void *)(v6 + 152) = swift_task_alloc();
  *(void *)(v6 + 160) = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata();
  *(void *)(v6 + 168) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v6 + 176) = v9;
  *(void *)(v6 + 184) = *(void *)(v9 - 8);
  *(void *)(v6 + 192) = swift_task_alloc();
  *(void *)(v6 + 200) = swift_task_alloc();
  return _swift_task_switch(sub_100136598, 0, 0);
}

uint64_t sub_100136598()
{
  char v20 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *((void *)v0 + 23);
    uint64_t v17 = *((void *)v0 + 22);
    uint64_t v18 = *((void *)v0 + 25);
    uint64_t v5 = *((void *)v0 + 8);
    unint64_t v4 = *((void *)v0 + 9);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    *((void *)v0 + 4) = sub_100110D58(v5, v4, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Checking if activity %s is ready to run", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(v18, v17);
  }
  else
  {
    uint64_t v8 = *((void *)v0 + 25);
    uint64_t v9 = *((void *)v0 + 22);
    uint64_t v10 = *((void *)v0 + 23);
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  *((void *)v0 + 26) = v7;
  uint64_t v11 = (void *)swift_task_alloc();
  *((void *)v0 + 27) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1001367C8;
  uint64_t v12 = *((void *)v0 + 21);
  double v13 = v0[10];
  uint64_t v14 = *((void *)v0 + 8);
  uint64_t v15 = *((void *)v0 + 9);
  return sub_100137774(v12, v14, v15, v13);
}

uint64_t sub_1001367C8()
{
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1001371E0;
  }
  else {
    os_log_type_t v2 = sub_1001368DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001368DC()
{
  uint64_t v49 = v0;
  uint64_t v1 = *((void *)v0 + 15);
  uint64_t v2 = *((void *)v0 + 16);
  uint64_t v3 = *((void *)v0 + 14);
  sub_100033298(*((void *)v0 + 21) + *(int *)(*((void *)v0 + 20) + 24), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100027994(*((void *)v0 + 14));
    uint64_t v4 = (void *)swift_task_alloc();
    *((void *)v0 + 33) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100137000;
    uint64_t v5 = *((void *)v0 + 21);
    double v6 = v0[10];
    uint64_t v7 = *((void *)v0 + 8);
    uint64_t v8 = *((void *)v0 + 9);
    uint64_t v9 = *((void *)v0 + 5);
    return sub_100137F30(v9, v6, v5, v7, v8);
  }
  else
  {
    uint64_t v11 = *((void *)v0 + 18);
    uint64_t v12 = *((void *)v0 + 15);
    uint64_t v13 = *((void *)v0 + 16);
    uint64_t v14 = *(void (**)(void, void, uint64_t))(v13 + 32);
    v14(*((void *)v0 + 19), *((void *)v0 + 14), v12);
    Date.init()();
    char v15 = static Date.< infix(_:_:)();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    *((void *)v0 + 29) = v16;
    *((void *)v0 + 30) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v16(v11, v12);
    if (v15)
    {
      uint64_t v45 = v14;
      uint64_t v17 = *((void *)v0 + 19);
      uint64_t v19 = *((void *)v0 + 16);
      uint64_t v18 = *((void *)v0 + 17);
      uint64_t v20 = *((void *)v0 + 15);
      defaultLogger()();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
      swift_bridgeObjectRetain_n();
      log = Logger.logObject.getter();
      os_log_type_t type = static os_log_type_t.debug.getter();
      BOOL v21 = os_log_type_enabled(log, type);
      char v22 = (void (*)(uint64_t, uint64_t))*((void *)v0 + 26);
      uint64_t v23 = *((void *)v0 + 24);
      uint64_t v24 = *((void *)v0 + 21);
      uint64_t v47 = *((void *)v0 + 22);
      uint64_t v25 = *((void *)v0 + 17);
      uint64_t v26 = *((void *)v0 + 15);
      unint64_t v27 = *((void *)v0 + 9);
      if (v21)
      {
        uint64_t v41 = *((void *)v0 + 17);
        char v43 = (void (*)(uint64_t, uint64_t))*((void *)v0 + 26);
        uint64_t v28 = *((void *)v0 + 8);
        uint64_t v42 = *((void *)v0 + 24);
        uint64_t v29 = swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315394;
        swift_bridgeObjectRetain();
        *((void *)v0 + 2) = sub_100110D58(v28, v27, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v29 + 12) = 2080;
        sub_1000E3D04((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
        *((void *)v0 + 3) = sub_100110D58(v30, v31, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v16(v41, v26);
        _os_log_impl((void *)&_mh_execute_header, log, type, "Activity %s next attempt is at %s, not running now", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v43(v42, v47);
      }
      else
      {

        v16(v25, v26);
        swift_bridgeObjectRelease_n();
        v22(v23, v47);
      }
      sub_10013CA34(v24);
      v45(*((void *)v0 + 5), *((void *)v0 + 19), *((void *)v0 + 15));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v40 = (uint64_t (*)(void))*((void *)v0 + 1);
      return v40();
    }
    else
    {
      uint64_t v32 = (void *)swift_task_alloc();
      *((void *)v0 + 31) = v32;
      *uint64_t v32 = v0;
      v32[1] = sub_100136E0C;
      uint64_t v33 = *((void *)v0 + 21);
      double v34 = v0[10];
      uint64_t v35 = *((void *)v0 + 8);
      uint64_t v36 = *((void *)v0 + 9);
      uint64_t v37 = *((void *)v0 + 6);
      uint64_t v38 = *((void *)v0 + 7);
      uint64_t v39 = *((void *)v0 + 5);
      return sub_10013895C(v39, v34, v33, v37, v38, v35, v36);
    }
  }
}

uint64_t sub_100136E0C()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100137588;
  }
  else {
    uint64_t v2 = sub_100136F20;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100136F20()
{
  uint64_t v1 = *(void *)(v0 + 168);
  (*(void (**)(void, void))(v0 + 232))(*(void *)(v0 + 152), *(void *)(v0 + 120));
  sub_10013CA34(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100137000()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001373B0;
  }
  else {
    uint64_t v2 = sub_100137114;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100137114()
{
  sub_10013CA34(*(void *)(v0 + 168));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001371E0()
{
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001373B0()
{
  sub_10013CA34(v0[21]);
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100137588()
{
  uint64_t v1 = *(void *)(v0 + 168);
  (*(void (**)(void, void))(v0 + 232))(*(void *)(v0 + 152), *(void *)(v0 + 120));
  sub_10013CA34(v1);
  (*(void (**)(void, void, void))(*(void *)(v0 + 96) + 104))(*(void *)(v0 + 104), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 88));
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100137774(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(double *)(v4 + 40) = a4;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  *(void *)(v4 + 48) = v5;
  *(void *)(v4 + 56) = *(void *)(v5 - 8);
  *(void *)(v4 + 64) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v4 + 72) = v6;
  *(void *)(v4 + 80) = *(void *)(v6 - 8);
  *(void *)(v4 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_100137898, 0, 0);
}

uint64_t sub_100137898()
{
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  v0[12] = v1;
  uint64_t v2 = v1;
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[5];
  uint64_t v8 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v9 = (void *)swift_allocObject();
  v0[13] = v9;
  v9[2] = v2;
  v9[3] = v8;
  v9[4] = v7;
  void v9[5] = v6;
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v5);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[14] = v10;
  uint64_t v11 = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata();
  *uint64_t v10 = v0;
  v10[1] = sub_100137B8C;
  uint64_t v12 = v0[11];
  uint64_t v13 = v0[2];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v13, v12, sub_10013CD80, v9, v11);
}

uint64_t sub_100137B8C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_100137D98;
  }
  else {
    uint64_t v5 = sub_100137D20;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100137D20()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100137D98()
{
  swift_release();
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100137F30(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(double *)(v5 + 56) = a2;
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  *(void *)(v5 + 32) = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 72) = *(void *)(v6 - 8);
  *(void *)(v5 + 80) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v5 + 88) = v7;
  *(void *)(v5 + 96) = *(void *)(v7 - 8);
  *(void *)(v5 + 104) = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  *(void *)(v5 + 112) = swift_task_alloc();
  *(void *)(v5 + 120) = swift_task_alloc();
  *(void *)(v5 + 128) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v5 + 136) = v8;
  *(void *)(v5 + 144) = *(void *)(v8 - 8);
  *(void *)(v5 + 152) = swift_task_alloc();
  *(void *)(v5 + 160) = swift_task_alloc();
  *(void *)(v5 + 168) = swift_task_alloc();
  return _swift_task_switch(sub_100138118, 0, 0);
}

uint64_t sub_100138118()
{
  uint64_t v1 = *((void *)v0 + 20);
  uint64_t v2 = *((void *)v0 + 21);
  uint64_t v3 = *((void *)v0 + 17);
  uint64_t v4 = (void *)*((void *)v0 + 18);
  uint64_t v5 = *((void *)v0 + 16);
  uint64_t v19 = *((void *)v0 + 15);
  uint64_t v6 = *((void *)v0 + 14);
  uint64_t v7 = *((void *)v0 + 4);
  Date.init()();
  Date.addingTimeInterval(_:)();
  uint64_t v8 = (void (*)(uint64_t, uint64_t))v4[1];
  *((void *)v0 + 22) = v8;
  *((void *)v0 + 23) = (unint64_t)(v4 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v1, v3);
  Date.addingRandomOffset(in:)();
  v8(v2, v3);
  uint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4[7];
  v9(v5, 1, 1, v3);
  v9(v19, 1, 1, v3);
  uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t))v4[2];
  *((void *)v0 + 24) = v10;
  *((void *)v0 + 25) = (unint64_t)(v4 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v10(v6, v7, v3);
  v9(v6, 0, 1, v3);
  uint64_t v11 = (void *)swift_task_alloc();
  *((void *)v0 + 26) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1001382E0;
  uint64_t v12 = *((void *)v0 + 15);
  uint64_t v13 = *((void *)v0 + 16);
  uint64_t v14 = *((void *)v0 + 14);
  double v15 = v0[7];
  uint64_t v16 = *((void *)v0 + 5);
  uint64_t v17 = *((void *)v0 + 6);
  return sub_10013A708(v13, v12, v14, v16, v17, v15);
}

uint64_t sub_1001382E0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  uint64_t v3 = *(void *)(*(void *)v1 + 120);
  uint64_t v4 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  sub_100027994(v4);
  sub_100027994(v3);
  sub_100027994(v2);
  if (v0) {
    uint64_t v5 = sub_100138778;
  }
  else {
    uint64_t v5 = sub_100138450;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100138450()
{
  unint64_t v27 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[24];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[17];
  defaultLogger()();
  v2(v3, v1, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    char v22 = (void (*)(uint64_t, uint64_t))v0[22];
    uint64_t v7 = v0[19];
    uint64_t v8 = v0[17];
    uint64_t v23 = v0[12];
    uint64_t v24 = v0[11];
    uint64_t v25 = v0[13];
    uint64_t v10 = v0[5];
    unint64_t v9 = v0[6];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain();
    v0[2] = sub_100110D58(v10, v9, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    sub_1000E3D04((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_100110D58(v12, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22(v7, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Initial attempt for activity %s scheduled for %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }
  else
  {
    uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[22];
    uint64_t v15 = v0[19];
    uint64_t v16 = v0[17];
    uint64_t v18 = v0[12];
    uint64_t v17 = v0[13];
    uint64_t v19 = v0[11];
    swift_bridgeObjectRelease_n();
    v14(v15, v16);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_100138778()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  (*(void (**)(void, void))(v0 + 176))(*(void *)(v0 + 32), *(void *)(v0 + 136));
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10013895C(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(double *)(v7 + 96) = a2;
  *(void *)(v7 + 80) = a6;
  *(void *)(v7 + 88) = a7;
  *(void *)(v7 + 64) = a4;
  *(void *)(v7 + 72) = a5;
  *(void *)(v7 + 56) = a1;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  *(void *)(v7 + 104) = v8;
  *(void *)(v7 + 112) = *(void *)(v8 - 8);
  *(void *)(v7 + 120) = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  *(void *)(v7 + 128) = swift_task_alloc();
  *(void *)(v7 + 136) = swift_task_alloc();
  *(void *)(v7 + 144) = swift_task_alloc();
  *(void *)(v7 + 152) = swift_task_alloc();
  *(void *)(v7 + 160) = swift_task_alloc();
  *(void *)(v7 + 168) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v7 + 176) = v9;
  *(void *)(v7 + 184) = *(void *)(v9 - 8);
  *(void *)(v7 + 192) = swift_task_alloc();
  *(void *)(v7 + 200) = swift_task_alloc();
  *(void *)(v7 + 208) = swift_task_alloc();
  *(void *)(v7 + 216) = swift_task_alloc();
  *(void *)(v7 + 224) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v7 + 232) = v10;
  *(void *)(v7 + 240) = *(void *)(v10 - 8);
  *(void *)(v7 + 248) = swift_task_alloc();
  *(void *)(v7 + 256) = swift_task_alloc();
  *(void *)(v7 + 264) = swift_task_alloc();
  return _swift_task_switch(sub_100138BA0, 0, 0);
}

uint64_t sub_100138BA0()
{
  uint64_t v17 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[30];
    uint64_t v13 = v0[29];
    uint64_t v14 = v0[33];
    uint64_t v5 = v0[10];
    unint64_t v4 = v0[11];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    v0[6] = sub_100110D58(v5, v4, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Running activity %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(v14, v13);
  }
  else
  {
    uint64_t v8 = v0[33];
    uint64_t v9 = v0[29];
    uint64_t v10 = v0[30];
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[34] = v7;
  uint64_t v15 = (uint64_t (*)(void))(v0[8] + *(int *)v0[8]);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[35] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100138E00;
  return v15();
}

uint64_t sub_100138E00(char a1)
{
  *(unsigned char *)(*(void *)v1 + 336) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100138F00, 0, 0);
}

uint64_t sub_100138F00()
{
  uint64_t v70 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 184);
  Date.init()();
  Date.addingTimeInterval(_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v5 += 8;
  uint64_t v6 = v7;
  *(void *)(v0 + 288) = v7;
  *(void *)(v0 + 296) = v5 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v3, v4);
  Date.addingRandomOffset(in:)();
  v7(v2, v4);
  Date.init()();
  uint64_t v8 = (void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v10 = *(void *)(v0 + 56);
  if (v1 == 1)
  {
    uint64_t v11 = *(void *)(v0 + 200);
    defaultLogger()();
    uint64_t v66 = *v8;
    (*v8)(v11, v10, v9);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.debug.getter();
    BOOL v13 = os_log_type_enabled(v12, type);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 256);
    uint64_t v64 = *(void *)(v0 + 232);
    uint64_t v16 = *(void *)(v0 + 200);
    uint64_t v17 = *(void *)(v0 + 176);
    unint64_t v18 = *(void *)(v0 + 88);
    if (v13)
    {
      uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
      uint64_t v19 = *(void *)(v0 + 80);
      uint64_t v59 = *(void *)(v0 + 256);
      uint64_t v20 = swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 32) = sub_100110D58(v19, v18, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      sub_1000E3D04((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_100110D58(v21, v22, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v6(v16, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, type, "Activity %s was successful, next attempt is %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v60(v59, v64);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      v6(v16, v17);

      v14(v15, v64);
    }
    uint64_t v35 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 176);
    uint64_t v37 = *(void *)(v0 + 184);
    uint64_t v39 = *(void *)(v0 + 160);
    uint64_t v38 = *(void *)(v0 + 168);
    uint64_t v40 = *(void *)(v0 + 152);
    uint64_t v68 = *(void *)(v0 + 56);
    v66(v38, v35, v36);
    uint64_t v41 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56);
    v41(v38, 0, 1, v36);
    v66(v39, v35, v36);
    v41(v39, 0, 1, v36);
    v66(v40, v68, v36);
    v41(v40, 0, 1, v36);
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_1001396B8;
    uint64_t v43 = *(void *)(v0 + 160);
    uint64_t v44 = *(void *)(v0 + 168);
    uint64_t v45 = *(void *)(v0 + 152);
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 192);
    defaultLogger()();
    char v67 = *v8;
    (*v8)(v23, v10, v9);
    swift_bridgeObjectRetain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t typea = static os_log_type_t.debug.getter();
    BOOL v25 = os_log_type_enabled(v24, typea);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
    uint64_t v27 = *(void *)(v0 + 248);
    uint64_t v65 = *(void *)(v0 + 232);
    uint64_t v28 = *(void *)(v0 + 192);
    uint64_t v29 = *(void *)(v0 + 176);
    unint64_t v30 = *(void *)(v0 + 88);
    if (v25)
    {
      unint64_t v58 = v24;
      uint64_t v31 = *(void *)(v0 + 80);
      uint64_t v61 = *(void *)(v0 + 248);
      uint64_t v32 = swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 16) = sub_100110D58(v31, v30, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v32 + 12) = 2080;
      sub_1000E3D04((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_100110D58(v33, v34, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v6(v28, v29);
      _os_log_impl((void *)&_mh_execute_header, v58, typea, "Activity %s was not successful, next attempt is %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v26(v61, v65);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      v6(v28, v29);

      v26(v27, v65);
    }
    uint64_t v46 = *(void *)(v0 + 176);
    uint64_t v47 = *(void *)(v0 + 184);
    uint64_t v49 = *(void *)(v0 + 136);
    uint64_t v48 = *(void *)(v0 + 144);
    uint64_t v50 = *(void *)(v0 + 128);
    uint64_t v51 = *(void *)(v0 + 56);
    v67(v48, *(void *)(v0 + 208), v46);
    uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
    v52(v48, 0, 1, v46);
    v52(v49, 1, 1, v46);
    v67(v50, v51, v46);
    v52(v50, 0, 1, v46);
    char v53 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v53;
    *char v53 = v0;
    v53[1] = sub_100139968;
    uint64_t v43 = *(void *)(v0 + 136);
    uint64_t v44 = *(void *)(v0 + 144);
    uint64_t v45 = *(void *)(v0 + 128);
  }
  double v54 = *(double *)(v0 + 96);
  uint64_t v55 = *(void *)(v0 + 80);
  uint64_t v56 = *(void *)(v0 + 88);
  return sub_10013A708(v44, v43, v45, v55, v56, v54);
}

uint64_t sub_1001396B8()
{
  uint64_t v2 = *v1;
  (*v1)[39] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[21];
  uint64_t v4 = v2[20];
  sub_100027994(v2[19]);
  sub_100027994(v4);
  sub_100027994(v3);
  if (v0) {
    uint64_t v5 = sub_100139ADC;
  }
  else {
    uint64_t v5 = sub_10013982C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10013982C()
{
  (*(void (**)(void, void))(v0 + 288))(*(void *)(v0 + 208), *(void *)(v0 + 176));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100139968()
{
  uint64_t v2 = *v1;
  (*v1)[41] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[18];
  uint64_t v4 = v2[17];
  sub_100027994(v2[16]);
  sub_100027994(v4);
  sub_100027994(v3);
  if (v0) {
    uint64_t v5 = sub_100139D40;
  }
  else {
    uint64_t v5 = sub_10013E120;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100139ADC()
{
  int v1 = (void (*)(uint64_t, uint64_t))v0[36];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[7];
  v1(v0[26], v2);
  v1(v6, v2);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v3, enum case for DIPError.Code.internalError(_:), v4);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100139D40()
{
  int v1 = (void (*)(uint64_t, uint64_t))v0[36];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[7];
  v1(v0[26], v2);
  v1(v6, v2);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v3, enum case for DIPError.Code.internalError(_:), v4);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100139FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(double *)(v6 + 56) = a6;
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = a5;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 64) = v10;
  *(void *)(v6 + 72) = *(void *)(v10 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata();
  uint64_t v11 = swift_task_alloc();
  *(void *)(v6 + 88) = v11;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 96) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_10013A0F4;
  return sub_100137774(v11, a4, a5, a6);
}

uint64_t sub_10013A0F4()
{
  uint64_t v2 = *v1;
  *((void *)v2 + 13) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10013A400, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *((void *)v2 + 14) = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10013A274;
    uint64_t v4 = *((void *)v2 + 11);
    double v5 = v2[7];
    uint64_t v6 = *((void *)v2 + 5);
    uint64_t v7 = *((void *)v2 + 6);
    uint64_t v8 = *((void *)v2 + 3);
    uint64_t v9 = *((void *)v2 + 4);
    uint64_t v10 = *((void *)v2 + 2);
    return sub_10013895C(v10, v5, v4, v8, v9, v6, v7);
  }
}

uint64_t sub_10013A274()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10013A580;
  }
  else {
    uint64_t v2 = sub_10013A388;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013A388()
{
  sub_10013CA34(*(void *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013A400()
{
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10013A580()
{
  sub_10013CA34(v0[11]);
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10013A708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(double *)(v6 + 56) = a6;
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = a5;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 64) = v7;
  *(void *)(v6 + 72) = *(void *)(v7 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v6 + 88) = v8;
  *(void *)(v6 + 96) = *(void *)(v8 - 8);
  *(void *)(v6 + 104) = swift_task_alloc();
  uint64_t v9 = *(void *)(sub_100007764(&qword_1007239B0) - 8);
  *(void *)(v6 + 112) = v9;
  *(void *)(v6 + 120) = *(void *)(v9 + 64);
  *(void *)(v6 + 128) = swift_task_alloc();
  *(void *)(v6 + 136) = swift_task_alloc();
  *(void *)(v6 + 144) = swift_task_alloc();
  return _swift_task_switch(sub_10013A8B0, 0, 0);
}

uint64_t sub_10013A8B0()
{
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  v0[19] = v1;
  uint64_t v2 = v1;
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[14];
  uint64_t v25 = v0[12];
  uint64_t v26 = v0[11];
  uint64_t v27 = v0[13];
  uint64_t v8 = v0[7];
  uint64_t v9 = v0[6];
  uint64_t v24 = v5;
  uint64_t v23 = v0[5];
  uint64_t v11 = v0[3];
  uint64_t v10 = v0[4];
  sub_100033298(v0[2], v4);
  sub_100033298(v11, v3);
  sub_100033298(v10, v5);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = (v12 + 48) & ~v12;
  uint64_t v14 = (v13 + v6 + v12) & ~v12;
  uint64_t v15 = (v14 + v6 + v12) & ~v12;
  uint64_t v16 = (void *)swift_allocObject();
  v0[20] = (uint64_t)v16;
  void v16[2] = v2;
  v16[3] = v23;
  v16[4] = v9;
  v16[5] = v8;
  sub_1000335D0(v4, (uint64_t)v16 + v13);
  sub_1000335D0(v3, (uint64_t)v16 + v14);
  sub_1000335D0(v24, (uint64_t)v16 + v15);
  uint64_t v17 = swift_allocObject();
  v0[21] = v17;
  *(void *)(v17 + 16) = sub_10013CC54;
  *(void *)(v17 + 24) = v16;
  uint64_t v18 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  v19(v27, v18, v26);
  swift_retain();
  uint64_t v20 = (void *)swift_task_alloc();
  v0[22] = (uint64_t)v20;
  *uint64_t v20 = v0;
  v20[1] = sub_10013AC78;
  uint64_t v21 = v0[13];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v20, v21, sub_10013E108, v17, (char *)&type metadata for () + 8);
}

uint64_t sub_10013AC78()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  uint64_t v3 = *(void *)(*(void *)v1 + 96);
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    uint64_t v5 = sub_10013AEC8;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10013AE20;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10013AE20()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013AEC8()
{
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void *sub_10013B08C@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100007764(&qword_1007239B0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v34 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t result = (void *)sub_10010279C(a1, a2);
  if (!v3)
  {
    uint64_t v17 = result;
    if (result)
    {
      id v18 = [result lastAttemptAt];
      if (v18)
      {
        uint64_t v19 = v18;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v20 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v15, 0, 1, v20);
      }
      else
      {
        uint64_t v24 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v15, 1, 1, v24);
      }
      id v25 = [v17 lastSuccessfulAttemptAt];
      if (v25)
      {
        uint64_t v26 = v25;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v27 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v13, 0, 1, v27);
      }
      else
      {
        uint64_t v28 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v13, 1, 1, v28);
      }
      id v29 = [v17 nextAttemptAt];
      if (v29)
      {
        unint64_t v30 = v29;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v31 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v10, 0, 1, v31);
      }
      else
      {

        uint64_t v32 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v10, 1, 1, v32);
      }
      sub_1000335D0((uint64_t)v15, a3);
      uint64_t v33 = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata();
      sub_1000335D0((uint64_t)v13, a3 + *(int *)(v33 + 20));
      return (void *)sub_1000335D0((uint64_t)v10, a3 + *(int *)(v33 + 24));
    }
    else
    {
      uint64_t v21 = type metadata accessor for Date();
      unint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
      v22(a3, 1, 1, v21);
      uint64_t v23 = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata();
      v22(a3 + *(int *)(v23 + 20), 1, 1, v21);
      return (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(a3 + *(int *)(v23 + 24), 1, 1, v21);
    }
  }
  return result;
}

void sub_10013B434(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_10010221C(a2, a3);
  if (!v6)
  {
    uint64_t v11 = (void *)v10;
    StoredRandomizedBackgroundActivity.update(lastAttemptAt:lastSuccessfulAttemptAt:nextAttemptAt:)(a4, a5, a6);
    sub_1000FFAB4();
  }
}

uint64_t sub_10013B4C0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(double *)(v4 + 64) = a4;
  *(void *)(v4 + 48) = a1;
  *(void *)(v4 + 56) = a2;
  *(double *)(v4 + 40) = a3;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = *(void *)(v5 - 8);
  *(void *)(v4 + 88) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v4 + 96) = v6;
  *(void *)(v4 + 104) = *(void *)(v6 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_10013B5E4, 0, 0);
}

uint64_t sub_10013B5E4()
{
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  v0[15] = v1;
  uint64_t v2 = v0[14];
  uint64_t v3 = v1;
  uint64_t v4 = v0[13];
  uint64_t v17 = v0[12];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[5];
  uint64_t v9 = swift_allocObject();
  v0[16] = v9;
  *(unsigned char *)(v9 + 16) = 0;
  uint64_t v10 = (void *)swift_allocObject();
  v0[17] = v10;
  v10[2] = v3;
  _OWORD v10[3] = v6;
  v10[4] = v7;
  v10[5] = v5;
  v10[6] = v9;
  v10[7] = v8;
  uint64_t v11 = swift_allocObject();
  v0[18] = v11;
  *(void *)(v11 + 16) = sub_10013C9BC;
  *(void *)(v11 + 24) = v10;
  uint64_t v12 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v13(v2, v12, v17);
  swift_retain();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[19] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10013B940;
  uint64_t v15 = v0[14];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v14, v15, sub_100027978, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_10013B940()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  uint64_t v4 = *(void *)(*(void *)v1 + 96);
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    uint64_t v5 = sub_10013BB94;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10013BAE8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10013BAE8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  swift_beginAccess();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 16);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_10013BB94()
{
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.internalError(_:), v0[9]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1(0);
}

char *sub_10013BD38(uint64_t a1, uint64_t a2, void *a3, char *a4, double a5, double a6)
{
  uint64_t v108 = a1;
  uint64_t v104 = a4;
  uint64_t v9 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v9 - 8);
  uint64_t v102 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v106 = *(void *)(v11 - 8);
  uint64_t v107 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v101 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v100 = (char *)&v94 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v103 = (char *)&v94 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v94 - v18;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v105 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v94 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  id v29 = (char *)&v94 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v94 - v30;
  uint64_t v32 = a2;
  uint64_t v33 = a2;
  unint64_t v34 = (unint64_t)a3;
  uint64_t v35 = v109;
  uint64_t result = (char *)sub_10010279C(v33, a3);
  if (!v35)
  {
    uint64_t v37 = v31;
    uint64_t v38 = v103;
    int v97 = v29;
    uint64_t v98 = v32;
    uint64_t v94 = v26;
    uint64_t v95 = v23;
    uint64_t v96 = v19;
    uint64_t v39 = v106;
    uint64_t v40 = v107;
    uint64_t v99 = v20;
    uint64_t v108 = 0;
    long long v109 = v104 + 16;
    if (result)
    {
      uint64_t v104 = result;
      id v41 = [result lastSuccessfulAttemptAt];
      uint64_t v42 = v105;
      if (v41)
      {
        uint64_t v43 = v41;
        uint64_t v44 = v38;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
        uint64_t v46 = (uint64_t)v102;
        v45(v102, v38, v40);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v46, 0, 1, v40);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v46, 1, v40) != 1)
        {
          uint64_t v47 = v109;
          uint64_t v48 = v96;
          uint64_t v49 = v46;
          uint64_t v50 = v107;
          v45(v96, (char *)v49, v107);
          Date.init()();
          char v51 = Date.isBeforeAndWithin(seconds:of:)();
          char v53 = *(char **)(v39 + 8);
          uint64_t v52 = v39 + 8;
          uint64_t v54 = v50;
          uint64_t v55 = v53;
          ((void (*)(char *, uint64_t))v53)(v44, v54);
          swift_beginAccess();
          *uint64_t v47 = v51 & 1;
          uint64_t v56 = (void (**)(char *, char *, uint64_t))(v52 + 8);
          if (v51)
          {
            long long v109 = v55;
            os_log_type_t v57 = v94;
            defaultLogger()();
            unint64_t v58 = v100;
            (*v56)(v100, v48, v107);
            unint64_t v59 = v34;
            swift_bridgeObjectRetain_n();
            uint64_t v60 = Logger.logObject.getter();
            uint64_t v61 = v48;
            os_log_type_t v62 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v60, v62))
            {
              uint64_t v63 = swift_slowAlloc();
              uint64_t v64 = swift_slowAlloc();
              uint64_t v106 = v52;
              uint64_t v65 = v107;
              uint64_t v103 = (char *)v64;
              uint64_t v111 = (char *)v64;
              *(_DWORD *)uint64_t v63 = 136315650;
              swift_bridgeObjectRetain();
              uint64_t v110 = sub_100110D58(v98, v59, (uint64_t *)&v111);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v63 + 12) = 2080;
              sub_1000E3D04((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
              uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v110 = sub_100110D58(v66, v67, (uint64_t *)&v111);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              uint64_t v68 = (uint64_t (*)(char *, uint64_t))v109;
              ((void (*)(char *, uint64_t))v109)(v58, v65);
              *(_WORD *)(v63 + 22) = 2048;
              uint64_t v110 = *(void *)&a6;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v60, v62, "Activity %s has last success at %s, is within window of %f seconds", (uint8_t *)v63, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v105 + 8))(v94, v99);
              return (char *)v68(v96, v65);
            }
            else
            {

              uint64_t v91 = v107;
              Swift::String_optional v92 = (uint64_t (*)(char *, uint64_t))v109;
              ((void (*)(char *, uint64_t))v109)(v58, v107);
              swift_bridgeObjectRelease_n();
              (*(void (**)(char *, uint64_t))(v105 + 8))(v57, v99);
              return (char *)v92(v61, v91);
            }
          }
          else
          {
            uint64_t v106 = v52;
            defaultLogger()();
            uint64_t v81 = v101;
            (*v56)(v101, v48, v107);
            uint64_t v82 = v48;
            swift_bridgeObjectRetain_n();
            uint64_t v83 = Logger.logObject.getter();
            os_log_type_t v84 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v83, v84))
            {
              uint64_t v85 = swift_slowAlloc();
              uint64_t v103 = (char *)swift_slowAlloc();
              uint64_t v111 = v103;
              *(_DWORD *)uint64_t v85 = 136315650;
              swift_bridgeObjectRetain();
              uint64_t v86 = sub_100110D58(v98, v34, (uint64_t *)&v111);
              long long v109 = v55;
              uint64_t v110 = v86;
              uint64_t v87 = v107;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v85 + 12) = 2080;
              sub_1000E3D04((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
              uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v110 = sub_100110D58(v88, v89, (uint64_t *)&v111);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              char v90 = (uint64_t (*)(char *, uint64_t))v109;
              ((void (*)(char *, uint64_t))v109)(v81, v87);
              *(_WORD *)(v85 + 22) = 2048;
              uint64_t v110 = *(void *)&a6;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v83, v84, "Activity %s has last success at %s, is not within window of %f seconds", (uint8_t *)v85, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v105 + 8))(v95, v99);
              return (char *)v90(v96, v87);
            }
            else
            {

              uint64_t v93 = v107;
              ((void (*)(char *, uint64_t))v55)(v81, v107);
              swift_bridgeObjectRelease_n();
              (*(void (**)(char *, uint64_t))(v105 + 8))(v95, v99);
              return (char *)((uint64_t (*)(char *, uint64_t))v55)(v82, v93);
            }
          }
        }
      }
      else
      {
        uint64_t v46 = (uint64_t)v102;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v102, 1, 1, v40);
      }
      sub_100027994(v46);
      uint64_t v75 = v97;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      unint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v76, v77))
      {
        char v78 = v75;
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        v112[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v79 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v111 = (char *)sub_100110D58(v98, v34, v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Activity %s does not have a last successful attempt", v79, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v42 + 8))(v78, v99);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v75, v99);
      }
    }
    else
    {
      uint64_t v69 = v37;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.debug.getter();
      BOOL v72 = os_log_type_enabled(v70, v71);
      uint64_t v73 = v105;
      if (v72)
      {
        char v74 = (uint8_t *)swift_slowAlloc();
        v112[0] = swift_slowAlloc();
        *(_DWORD *)char v74 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v111 = (char *)sub_100110D58(v98, v34, v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Activity %s does not exist so it has no recent successful attempts", v74, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v73 + 8))(v69, v99);
    }
    uint64_t v80 = v109;
    uint64_t result = (char *)swift_beginAccess();
    *uint64_t v80 = 0;
  }
  return result;
}

uint64_t sub_10013C964()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013C974()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

char *sub_10013C9BC()
{
  return sub_10013BD38(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(char **)(v0 + 48), *(double *)(v0 + 40), *(double *)(v0 + 56));
}

uint64_t type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata()
{
  uint64_t result = qword_100724D68;
  if (!qword_100724D68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10013CA34(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10013CA90()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_1007239B0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = (v4 + v2 + v3) & ~v2;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = (v4 + v2 + v5) & ~v2;
  if (!v9(v0 + v5, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v5, v7);
  }
  if (!v9(v0 + v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v10, v7);
  }

  return _swift_deallocObject(v0, v10 + v4, v2 | 7);
}

void sub_10013CC54()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_1007239B0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  sub_10013B434(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), v0 + ((v2 + 48) & ~v2), v0 + ((*(void *)(v1 + 64) + v2 + ((v2 + 48) & ~v2)) & ~v2), v0 + ((*(void *)(v1 + 64) + v2 + ((*(void *)(v1 + 64) + v2 + ((v2 + 48) & ~v2)) & ~v2)) & ~v2));
}

uint64_t sub_10013CD08()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013CD40()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void *sub_10013CD80@<X0>(uint64_t a1@<X8>)
{
  return sub_10013B08C(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

ValueMetadata *type metadata accessor for RandomizedBackgroundActivityRunnerFactory()
{
  return &type metadata for RandomizedBackgroundActivityRunnerFactory;
}

uint64_t *sub_10013CDB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      uint64_t v10 = sub_100007764(&qword_1007239B0);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      uint64_t v15 = sub_100007764(&qword_1007239B0);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    uint64_t v16 = *(int *)(a3 + 24);
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    if (v9((uint64_t *)v18, 1, v7))
    {
      uint64_t v19 = sub_100007764(&qword_1007239B0);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v17, v18, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10013D068(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v4 - 8);
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v5(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  if (!v5(v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v6, v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v7, 1, v4);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v7, v4);
  }
  return result;
}

char *sub_10013D1D4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_100007764(&qword_1007239B0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    uint64_t v13 = sub_100007764(&qword_1007239B0);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if (v8(v16, 1, v6))
  {
    uint64_t v17 = sub_100007764(&qword_1007239B0);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v16, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  return a1;
}

char *sub_10013D438(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100007764(&qword_1007239B0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    uint64_t v17 = sub_100007764(&qword_1007239B0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
LABEL_13:
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = v8(&a1[v18], 1, v6);
  int v22 = v8(v20, 1, v6);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v19, v20, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
    goto LABEL_18;
  }
  if (v22)
  {
LABEL_18:
    uint64_t v23 = sub_100007764(&qword_1007239B0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v19, v20, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  return a1;
}

char *sub_10013D7B8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_100007764(&qword_1007239B0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    uint64_t v13 = sub_100007764(&qword_1007239B0);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = *(int *)(a3 + 24);
  int v15 = &a1[v14];
  int v16 = &a2[v14];
  if (v8(v16, 1, v6))
  {
    uint64_t v17 = sub_100007764(&qword_1007239B0);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  return a1;
}

char *sub_10013DA1C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100007764(&qword_1007239B0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    uint64_t v17 = sub_100007764(&qword_1007239B0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
LABEL_13:
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = v8(&a1[v18], 1, v6);
  int v22 = v8(v20, 1, v6);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v19, v20, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
    goto LABEL_18;
  }
  if (v22)
  {
LABEL_18:
    uint64_t v23 = sub_100007764(&qword_1007239B0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v19, v20, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  return a1;
}

uint64_t sub_10013DD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013DDB0);
}

uint64_t sub_10013DDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007239B0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10013DE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013DE34);
}

uint64_t sub_10013DE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007239B0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_10013DEA8()
{
  sub_10013DF38();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10013DF38()
{
  if (!qword_100724D78)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100724D78);
    }
  }
}

uint64_t destroy for DIPConversation()
{
  return swift_bridgeObjectRelease();
}

void *_s8coreidvd13TSIDContainerVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RandomizedBackgroundActivityRunner(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for RandomizedBackgroundActivityRunner(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for RandomizedBackgroundActivityRunner(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RandomizedBackgroundActivityRunner(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RandomizedBackgroundActivityRunner()
{
  return &type metadata for RandomizedBackgroundActivityRunner;
}

uint64_t sub_10013E108()
{
  return sub_100027978();
}

uint64_t type metadata accessor for IdentityBMUserProofingStreamWrapper()
{
  return self;
}

uint64_t sub_10013E148@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10013FAC8(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_10013E188(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v21 = a3;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v13 - 8);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v14 - 8);
  *(void *)(v5 + 16) = dispatch_group_create();
  sub_1000309D0();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v9);
  uint64_t v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v5 + 160) = 0x3FE999999999999ALL;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(void *)(v5 + 144) = 0;
  *(void *)(v5 + 24) = v15;
  *(void *)(v5 + 32) = a1;
  uint64_t v16 = v21;
  *(void *)(v5 + 40) = a2;
  *(void *)(v5 + 48) = v16;
  *(void *)(v5 + 56) = a4;
  id v17 = objc_allocWithZone((Class)type metadata accessor for DIPLocationHelper());
  id v18 = a4;
  *(void *)(v5 + 152) = sub_1002D79F0(0, 0, (unint64_t)a4);
  return v5;
}

void sub_10013E3B8()
{
  int64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - v7;
  defaultLogger()();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Beginning fetch of supplemental device data", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v8, v2);
  uint64_t v13 = *(void *)(v1 + 32);
  if (v13) {
    sub_10013E718();
  }
  p_base_props = (__objc2_prop_list **)(&DIPHTTPSession + 64);
  if ((v13 & 4) != 0)
  {
    dispatch_group_enter(*(dispatch_group_t *)(v1 + 16));
    defaultLogger()();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Beginning to fetch phone number", v17, 2u);
      p_base_props = &DIPHTTPSession.base_props;
      swift_slowDealloc();
    }

    v12(v6, v2);
    if (p_base_props[176] != (__objc2_prop_list *)-1) {
      swift_once();
    }
    id v18 = (void *)qword_1007607E8;
    swift_retain();
    id v19 = v18;
    sub_1004ED780(0, (uint64_t)v19, (void *)v1);

    swift_release();
    if ((v13 & 8) == 0)
    {
LABEL_7:
      if ((v13 & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
  }
  else if ((v13 & 8) == 0)
  {
    goto LABEL_7;
  }
  sub_10013EAD4();
  if ((v13 & 0x10) == 0)
  {
LABEL_8:
    if ((v13 & 0x20) == 0) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  sub_10013F288();
  if ((v13 & 0x20) == 0) {
    return;
  }
LABEL_17:
  dispatch_group_enter(*(dispatch_group_t *)(v1 + 16));
  if (p_base_props[176] != (__objc2_prop_list *)-1) {
    swift_once();
  }
  uint64_t v20 = (void *)qword_1007607E8;
  swift_retain();
  id v21 = v20;
  sub_1004EEB70((uint64_t)v21, v1);

  swift_release();
}

void sub_10013E6C0(void *a1, void *a2)
{
  if (a1 && a1[2])
  {
    uint64_t v4 = a1[4];
    uint64_t v3 = a1[5];
    a2[17] = v4;
    a2[18] = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = a2[2];

  dispatch_group_leave(v5);
}

void sub_10013E718()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_enter(*(dispatch_group_t *)(v1 + 16));
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Beginning to fetch IDS data", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v9 = *(void *)(v1 + 40);
  unint64_t v10 = *(void *)(v1 + 48);
  sub_1000338D4(v9, v10);
  if (qword_10071F580 != -1) {
    swift_once();
  }
  if (v10 >> 60 == 15)
  {
    unint64_t v10 = 0xC000000000000000;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = v9;
  }
  id v12 = (id)qword_1007607E8;
  swift_retain();
  sub_1004E7ABC(v11, v10, (uint64_t)sub_10013FF00, v1);
  swift_release();
  sub_10000C5F4(v11, v10);
}

void sub_10013E908(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a2 + 64) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  if (!v8 || !*(void *)(v8 + 16))
  {
    defaultLogger()();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No IDS data available", v11, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a2 + 16));
}

void sub_10013EA7C(void *a1, void *a2)
{
  if (a1 && a1[2])
  {
    uint64_t v4 = a1[4];
    uint64_t v3 = a1[5];
    a2[12] = v4;
    a2[13] = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = a2[2];

  dispatch_group_leave(v5);
}

uint64_t sub_10013EAD4()
{
  return sub_10013F2A8((uint64_t)sub_10013FEF8, (uint64_t)&unk_1006F8F80);
}

uint64_t sub_10013EAF4(uint64_t a1)
{
  uint64_t v62 = 0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v57 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v57 - v10;
  defaultLogger()();
  swift_retain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v61 = v6;
  if (v14)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    uint64_t v63 = 0x3FE999999999999ALL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Beginning to fetch device location after %f seconds", v15, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  id v18 = *(void (**)(void, void))(v3 + 8);
  uint64_t v17 = v3 + 8;
  os_log_type_t v16 = v18;
  v18(v11, v2);
  [self sleepForTimeInterval:0.8];
  uint64_t v19 = *(void *)(a1 + 152);
  uint64_t v20 = sub_1002D7074();
  if (v20)
  {
    id v21 = v20;
    v57[0] = a1;
    v57[1] = v17;
    unint64_t v59 = v16;
    uint64_t v60 = v19;
    sub_100007764((uint64_t *)&unk_100726430);
    uint64_t v22 = swift_allocObject();
    long long v58 = xmmword_100610730;
    *(_OWORD *)(v22 + 16) = xmmword_100610730;
    [v21 coordinate];
    *(void *)(v22 + 56) = &type metadata for Double;
    *(void *)(v22 + 64) = &protocol witness table for Double;
    *(void *)(v22 + 32) = v23;
    uint64_t v24 = String.init(format:_:)();
    uint64_t v26 = v25;
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = v58;
    [v21 coordinate];
    *(void *)(v27 + 56) = &type metadata for Double;
    *(void *)(v27 + 64) = &protocol witness table for Double;
    *(void *)(v27 + 32) = v28;
    uint64_t v29 = String.init(format:_:)();
    uint64_t v31 = v30;
    uint64_t v66 = 0;
    uint64_t v32 = __chkstk_darwin(v29);
    v57[-2] = &v66;
    *(void *)&long long v58 = v32;
    if ((v26 & 0x1000000000000000) != 0 || !(v26 & 0x2000000000000000 | v24 & 0x1000000000000000))
    {
      _StringGuts._slowWithCString<A>(_:)();
      uint64_t v36 = swift_bridgeObjectRelease();
    }
    else
    {
      __chkstk_darwin(v32);
      v57[-2] = sub_100130918;
      v57[-1] = v33;
      if ((v26 & 0x2000000000000000) != 0)
      {
        uint64_t v63 = v24;
        uint64_t v64 = v26 & 0xFFFFFFFFFFFFFFLL;
        if v24 <= 0x20u && ((0x100003E01uLL >> v24))
        {
          BOOL v41 = 0;
          uint64_t v37 = v61;
        }
        else
        {
          uint64_t v40 = (unsigned char *)_swift_stdlib_strtod_clocale();
          if (v40) {
            BOOL v41 = *v40 == 0;
          }
          else {
            BOOL v41 = 0;
          }
          uint64_t v37 = v61;
        }
        char v65 = v41;
        uint64_t v36 = swift_bridgeObjectRelease();
LABEL_23:
        if (v65)
        {
          uint64_t v42 = v66;
          uint64_t v66 = 0;
          uint64_t v43 = __chkstk_darwin(v36);
          v57[-2] = &v66;
          if ((v31 & 0x1000000000000000) != 0 || !(v31 & 0x2000000000000000 | v58 & 0x1000000000000000))
          {
            _StringGuts._slowWithCString<A>(_:)();
            swift_bridgeObjectRelease();
            uint64_t v46 = v57[0];
          }
          else
          {
            __chkstk_darwin(v43);
            v57[-2] = sub_10013FF28;
            v57[-1] = v45;
            uint64_t v46 = v57[0];
            if ((v31 & 0x2000000000000000) != 0)
            {
              uint64_t v63 = v44;
              uint64_t v64 = v31 & 0xFFFFFFFFFFFFFFLL;
              if v44 <= 0x20u && ((0x100003E01uLL >> v44))
              {
                BOOL v50 = 0;
              }
              else
              {
                uint64_t v49 = (unsigned char *)_swift_stdlib_strtod_clocale();
                if (v49) {
                  BOOL v50 = *v49 == 0;
                }
                else {
                  BOOL v50 = 0;
                }
              }
              char v65 = v50;
              swift_bridgeObjectRelease();
            }
            else
            {
              if ((v44 & 0x1000000000000000) != 0)
              {
                uint64_t v47 = (v31 & 0xFFFFFFFFFFFFFFFLL) + 32;
                uint64_t v48 = v44 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                uint64_t v47 = _StringObject.sharedUTF8.getter();
              }
              char v65 = sub_100017C00(v47, v48, (void (*)(uint64_t *__return_ptr))sub_100130934) & 1;
              swift_bridgeObjectRelease();
            }
          }
          if ((v65 & 1) == 0) {
            goto LABEL_41;
          }
          uint64_t v51 = v66;
          sub_100007764(&qword_100725088);
          uint64_t v52 = swift_allocObject();
          *(_OWORD *)(v52 + 16) = xmmword_100611020;
          *(void *)(v52 + 32) = v42;
          *(void *)(v52 + 40) = v51;
          *(void *)(v46 + 112) = v52;
        }
        swift_bridgeObjectRelease();
LABEL_41:
        defaultLogger()();
        char v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Got device location", v55, 2u);
          swift_slowDealloc();
        }

        os_log_type_t v16 = v59;
        goto LABEL_44;
      }
      if ((v24 & 0x1000000000000000) != 0)
      {
        uint64_t v34 = (v26 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v35 = v24 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v34 = _StringObject.sharedUTF8.getter();
      }
      char v65 = sub_100017C00(v34, v35, (void (*)(uint64_t *__return_ptr))sub_10013FF08) & 1;
      uint64_t v36 = swift_bridgeObjectRelease();
    }
    uint64_t v37 = v61;
    goto LABEL_23;
  }
  defaultLogger()();
  id v21 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v38, "no device location available", v39, 2u);
    swift_slowDealloc();
  }
  uint64_t v37 = v9;
LABEL_44:

  v16(v37, v2);
  return sub_1002D6C08();
}

uint64_t sub_10013F288()
{
  return sub_10013F2A8((uint64_t)sub_10013FE20, (uint64_t)&unk_1006F8F58);
}

uint64_t sub_10013F2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)(v2 + 24);
  aBlock[4] = a1;
  uint64_t v17 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = a2;
  os_log_type_t v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_10013FE40((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_10013FE88();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_10013F518(uint64_t a1)
{
  if (qword_10071F580 != -1) {
    swift_once();
  }
  id v2 = (id)qword_1007607E8;
  uint64_t v3 = sub_1004E7C64();
  uint64_t v5 = v4;
  sub_10013FEE4(v3, v4);
  if (v5 == 1) {
    sub_1004E995C();
  }
  uint64_t v6 = sub_1004E7C64();
  uint64_t v8 = v7;

  if (v8 == 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v6;
  }
  if (v8 == 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v8;
  }
  *(void *)(a1 + 120) = v9;
  *(void *)(a1 + 128) = v10;

  return swift_bridgeObjectRelease();
}

uint64_t sub_10013F5CC()
{
  uint64_t v1 = *(void **)(v0 + 56);
  sub_10000C5E0(*(void *)(v0 + 40), *(void *)(v0 + 48));

  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_10013F64C()
{
  sub_10013F5CC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SupplementalDeviceDataFetcher()
{
  return self;
}

void destroy for SupplementalDeviceDataFetcher.Properties(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >> 60 != 15) {
    sub_10000C5F4(*a1, v2);
  }
  uint64_t v3 = (void *)a1[2];
}

uint64_t _s8coreidvd29SupplementalDeviceDataFetcherC10PropertiesVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_10002CEB0(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v6 = (void *)a2[2];
  *(void *)(a1 + 16) = v6;
  id v7 = v6;
  return a1;
}

uint64_t *assignWithCopy for SupplementalDeviceDataFetcher.Properties(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *a2;
      sub_10002CEB0(*a2, a2[1]);
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_10000C5F4(v7, v8);
      goto LABEL_8;
    }
    sub_10004D25C((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v5 = *a2;
  sub_10002CEB0(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  uint64_t v9 = (void *)a1[2];
  uint64_t v10 = (void *)a2[2];
  a1[2] = (uint64_t)v10;
  id v11 = v10;

  return a1;
}

uint64_t *assignWithTake for SupplementalDeviceDataFetcher.Properties(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10000C5F4(v6, v4);
      goto LABEL_6;
    }
    sub_10004D25C((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  uint64_t v7 = (void *)a1[2];
  a1[2] = a2[2];

  return a1;
}

uint64_t getEnumTagSinglePayload for SupplementalDeviceDataFetcher.Properties(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SupplementalDeviceDataFetcher.Properties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SupplementalDeviceDataFetcher.Properties()
{
  return &type metadata for SupplementalDeviceDataFetcher.Properties;
}

ValueMetadata *type metadata accessor for SupplementalDeviceDataFetcher.Fields()
{
  return &type metadata for SupplementalDeviceDataFetcher.Fields;
}

unint64_t sub_10013F968()
{
  unint64_t result = qword_100725068;
  if (!qword_100725068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100725068);
  }
  return result;
}

unint64_t sub_10013F9C0()
{
  unint64_t result = qword_100725070;
  if (!qword_100725070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100725070);
  }
  return result;
}

unint64_t sub_10013FA18()
{
  unint64_t result = qword_100725078;
  if (!qword_100725078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100725078);
  }
  return result;
}

unint64_t sub_10013FA70()
{
  unint64_t result = qword_100725080;
  if (!qword_100725080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100725080);
  }
  return result;
}

uint64_t sub_10013FAC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10013FB00()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OS_dispatch_group.wait()();
  if (*(unsigned char *)(v0 + 32))
  {
    if (*(void *)(v0 + 72))
    {
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.internalError(_:), v1);
      swift_errorRetain();
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10013FE40((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return swift_errorRelease();
    }
    else
    {
      return *(void *)(v0 + 64);
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.badLogic(_:), v1);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10013FE40((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
}

uint64_t sub_10013FE20()
{
  return sub_10013F518(v0);
}

uint64_t sub_10013FE28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10013FE38()
{
  return swift_release();
}

uint64_t sub_10013FE40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10013FE88()
{
  unint64_t result = qword_1007223B0;
  if (!qword_1007223B0)
  {
    sub_100019364((uint64_t *)&unk_1007208F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1007223B0);
  }
  return result;
}

uint64_t sub_10013FEE4(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10013FEF8()
{
  return sub_10013EAF4(v0);
}

void sub_10013FF00(uint64_t a1)
{
  sub_10013E908(a1, v1);
}

void *sub_10013FF08@<X0>(unsigned char *a1@<X8>)
{
  return sub_100130934(a1);
}

unsigned char *sub_10013FF28@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100130918(a1, a2);
}

uint64_t destroy for IdentityPhoneProvisioningProvider(uint64_t *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = a1[11];
  if (v2 >> 60 != 15) {
    sub_10000C5F4(a1[10], v2);
  }
  unint64_t v3 = a1[13];
  if (v3 >> 60 != 15) {
    sub_10000C5F4(a1[12], v3);
  }

  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(a1 + 14));
}

uint64_t initializeWithCopy for IdentityPhoneProvisioningProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = (uint64_t *)(a2 + 80);
  unint64_t v10 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_10002CEB0(*v9, v10);
    *(void *)(a1 + 80) = v11;
    *(void *)(a1 + 88) = v10;
  }
  uint64_t v12 = (uint64_t *)(a2 + 96);
  unint64_t v13 = *(void *)(a2 + 104);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = *v12;
    sub_10002CEB0(*v12, *(void *)(a2 + 104));
    *(void *)(a1 + 96) = v14;
    *(void *)(a1 + 104) = v13;
  }
  long long v15 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 136) = v15;
  (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 112, a2 + 112);
  return a1;
}

uint64_t assignWithCopy for IdentityPhoneProvisioningProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = (uint64_t *)(a2 + 80);
  unint64_t v6 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *v5;
      sub_10002CEB0(*v5, *(void *)(a2 + 88));
      *(void *)(a1 + 80) = v7;
      *(void *)(a1 + 88) = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_10004D25C(a1 + 80);
LABEL_6:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v5;
    goto LABEL_8;
  }
  uint64_t v8 = *v5;
  sub_10002CEB0(*v5, *(void *)(a2 + 88));
  uint64_t v9 = *(void *)(a1 + 80);
  unint64_t v10 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v6;
  sub_10000C5F4(v9, v10);
LABEL_8:
  uint64_t v11 = (uint64_t *)(a2 + 96);
  unint64_t v12 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) >> 60 != 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v14 = *v11;
      sub_10002CEB0(*v11, *(void *)(a2 + 104));
      uint64_t v15 = *(void *)(a1 + 96);
      unint64_t v16 = *(void *)(a1 + 104);
      *(void *)(a1 + 96) = v14;
      *(void *)(a1 + 104) = v12;
      sub_10000C5F4(v15, v16);
      goto LABEL_15;
    }
    sub_10004D25C(a1 + 96);
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  uint64_t v13 = *v11;
  sub_10002CEB0(*v11, *(void *)(a2 + 104));
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v12;
LABEL_15:
  sub_10000A128((uint64_t *)(a1 + 112), (uint64_t *)(a2 + 112));
  return a1;
}

uint64_t assignWithTake for IdentityPhoneProvisioningProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v8 = (_OWORD *)(a2 + 80);
  unint64_t v9 = *(void *)(a1 + 88);
  if (v9 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v10 = *(void *)(a2 + 88);
  if (v10 >> 60 == 15)
  {
    sub_10004D25C(a1 + 80);
LABEL_4:
    *(_OWORD *)(a1 + 80) = *v8;
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)v8;
  *(void *)(a1 + 88) = v10;
  sub_10000C5F4(v11, v9);
LABEL_6:
  unint64_t v12 = (void *)(a2 + 96);
  unint64_t v13 = *(void *)(a1 + 104);
  if (v13 >> 60 != 15)
  {
    unint64_t v14 = *(void *)(a2 + 104);
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = *v12;
      *(void *)(a1 + 104) = v14;
      sub_10000C5F4(v15, v13);
      goto LABEL_11;
    }
    sub_10004D25C(a1 + 96);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)v12;
LABEL_11:
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1 + 112);
  long long v16 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v16;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

ValueMetadata *type metadata accessor for IdentityPhoneProvisioningProvider()
{
  return &type metadata for IdentityPhoneProvisioningProvider;
}

uint64_t sub_100140408()
{
  uint64_t v1 = *(void *)(v0 + 96);
  sub_1000338D4(v1, *(void *)(v0 + 104));
  return v1;
}

uint64_t sub_10014043C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100142F3C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1001405E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100142F3C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  sub_100007764((uint64_t *)&unk_1007325B0);
  return swift_task_create();
}

uint64_t sub_10014078C(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  unint64_t v9 = (char *)_swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v8 << 6))
  {
    if (*(unsigned char *)(*(void *)(a1 + 56) + i))
    {
      uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
      uint64_t v16 = v15[1];
      uint64_t v20 = *v15;
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10010F3C4(0, *((void *)v9 + 2) + 1, 1, v9);
        unint64_t v9 = (char *)result;
      }
      unint64_t v18 = *((void *)v9 + 2);
      unint64_t v17 = *((void *)v9 + 3);
      if (v18 >= v17 >> 1)
      {
        uint64_t result = (uint64_t)sub_10010F3C4((char *)(v17 > 1), v18 + 1, 1, v9);
        unint64_t v9 = (char *)result;
      }
      *((void *)v9 + 2) = v18 + 1;
      uint64_t v19 = &v9[16 * v18];
      *((void *)v19 + 4) = v20;
      *((void *)v19 + 5) = v16;
      if (v5) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v6) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 3;
          if (v12 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v8);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100140984(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  unint64_t v9 = (char *)_swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v8 << 6))
  {
    if (*(unsigned char *)(*(void *)(a1 + 56) + i))
    {
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
      uint64_t v16 = v15[1];
      uint64_t v20 = *v15;
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10010F3C4(0, *((void *)v9 + 2) + 1, 1, v9);
        unint64_t v9 = (char *)result;
      }
      unint64_t v18 = *((void *)v9 + 2);
      unint64_t v17 = *((void *)v9 + 3);
      if (v18 >= v17 >> 1)
      {
        uint64_t result = (uint64_t)sub_10010F3C4((char *)(v17 > 1), v18 + 1, 1, v9);
        unint64_t v9 = (char *)result;
      }
      *((void *)v9 + 2) = v18 + 1;
      uint64_t v19 = &v9[16 * v18];
      *((void *)v19 + 4) = v20;
      *((void *)v19 + 5) = v16;
      if (v5) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v6) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 3;
          if (v12 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v8);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

dispatch_group_t sub_100140B7C()
{
  dispatch_group_t result = dispatch_group_create();
  qword_1007602D8 = (uint64_t)result;
  return result;
}

uint64_t sub_100140B9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Start fetch of bootstrap config", v11, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (qword_10071F4A8 != -1) {
    swift_once();
  }
  dispatch_group_enter((dispatch_group_t)qword_1007602D8);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  sub_100030A10(v1 + 56, (uint64_t)v16);
  unint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  sub_10000C6B4(v16, (uint64_t)(v13 + 4));
  v13[9] = v1;
  v13[10] = sub_100140E20;
  v13[11] = 0;
  swift_retain();
  sub_10014043C((uint64_t)v4, (uint64_t)&unk_100725180, (uint64_t)v13);
  return swift_release();
}

void sub_100140E20()
{
  if (qword_10071F4A8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1007602D8;

  dispatch_group_leave(v0);
}

uint64_t sub_100140E7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10071F4A8 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1007602D8;
  OS_dispatch_group.wait()();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  sub_10000C728((void *)(v0 + 56), *(void *)(v0 + 80));
  if (sub_1002B1938()) {
    return swift_release();
  }
  dispatch_group_enter(v5);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
  sub_100030A10(v0 + 56, (uint64_t)v11);
  int64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = 0;
  _OWORD v8[3] = 0;
  sub_10000C6B4(v11, (uint64_t)(v8 + 4));
  v8[9] = v1;
  v8[10] = sub_100142E58;
  v8[11] = v6;
  swift_retain_n();
  swift_retain();
  sub_10014043C((uint64_t)v4, (uint64_t)&unk_100725140, (uint64_t)v8);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  swift_beginAccess();
  if (!*(void *)(v6 + 16)) {
    return swift_release();
  }
  swift_errorRetain();
  swift_willThrow();
  return swift_release();
}

void sub_1001410B8(uint64_t a1, uint64_t a2)
{
  sub_1000BEA14(a1, (uint64_t)v11, &qword_100725150);
  sub_1000BEA14((uint64_t)v11, (uint64_t)v13, &qword_100725150);
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  sub_1000BEA14(a1, (uint64_t)v12, &qword_100725150);
  if (sub_100143720((uint64_t)v12) == 1)
  {
    nullsub_7(v12);
    (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.internalError(_:), v4);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v10, &qword_100725150);
    nullsub_7(v10);
    swift_errorRetain();
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    uint64_t v8 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_beginAccess();
    *(void *)(a2 + 16) = v8;
    swift_errorRelease();
  }
  else
  {
    nullsub_7(v12);
  }
  if (qword_10071F4A8 != -1) {
    swift_once();
  }
  dispatch_group_leave((dispatch_group_t)qword_1007602D8);
}

uint64_t sub_100141324()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100141344, 0, 0);
}

uint64_t sub_100141344()
{
  sub_10000C728((void *)(v0[2] + 56), *(void *)(v0[2] + 80));
  if (sub_1002B1938())
  {
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1();
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[3] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100141468;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
}

uint64_t sub_100141468()
{
  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100141594;
  }
  else {
    uint64_t v2 = sub_10014157C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014157C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100141594()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001415AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_10071FF30);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
  sub_100030A10(a2 + 56, (uint64_t)v16);
  unint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  sub_10000C6B4(v16, (uint64_t)(v13 + 4));
  v13[9] = a2;
  v13[10] = sub_1001437C4;
  v13[11] = v11;
  swift_retain();
  swift_retain();
  sub_10014043C((uint64_t)v6, (uint64_t)&unk_100725168, (uint64_t)v13);
  swift_release();
  return swift_release();
}

uint64_t sub_1001417E8(uint64_t a1)
{
  sub_1000BEA14(a1, (uint64_t)v4, &qword_100725150);
  sub_1000BEA14((uint64_t)v4, (uint64_t)v6, &qword_100725150);
  sub_1000BEA14(a1, (uint64_t)v5, &qword_100725150);
  if (sub_100143720((uint64_t)v5) == 1)
  {
    nullsub_7(v5);
    sub_1000BEA14((uint64_t)v6, (uint64_t)v3, &qword_100725150);
    nullsub_7(v3);
    swift_errorRetain();
    sub_100007764(&qword_10071FF30);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    nullsub_7(v5);
    sub_100007764(&qword_10071FF30);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1001418CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  __chkstk_darwin(v3);
  sub_100030A10(v1 + 56, (uint64_t)v18);
  uint64_t v4 = *(os_unfair_lock_s **)(*sub_10000C728(v18, v19) + 56);
  uint64_t v5 = (uint64_t)&v4[4];
  uint64_t v6 = v4 + 112;
  os_unfair_lock_lock(v4 + 112);
  sub_1002AC168(v5, (uint64_t)v17);
  os_unfair_lock_unlock(v6);
  sub_1000BEA14((uint64_t)v17, (uint64_t)v15, &qword_100722350);
  sub_1000BEA14((uint64_t)v15, (uint64_t)v16, &qword_100722350);
  if (sub_100044CCC((uint64_t)v16) == 1)
  {
    sub_100140E7C();
    uint64_t v7 = *(os_unfair_lock_s **)(*sub_10000C728(v18, v19) + 56);
    uint64_t v8 = (uint64_t)&v7[4];
    uint64_t v9 = v7 + 112;
    os_unfair_lock_lock(v7 + 112);
    sub_1002AC168(v8, (uint64_t)v13);
    os_unfair_lock_unlock(v9);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v12, &qword_100722350);
    unint64_t v10 = v12;
  }
  else
  {
    unint64_t v10 = v15;
  }
  sub_1000BEA14((uint64_t)v10, (uint64_t)v14, &qword_100722350);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v18);
  return sub_1000BEA14((uint64_t)v14, a1, &qword_100722350);
}

uint64_t sub_100141B30(uint64_t a1)
{
  v2[386] = v1;
  v2[385] = a1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[387] = v3;
  v2[388] = *(void *)(v3 - 8);
  v2[389] = swift_task_alloc();
  return _swift_task_switch(sub_100141BF4, 0, 0);
}

uint64_t sub_100141BF4()
{
  sub_100030A10(v0[386] + 56, (uint64_t)(v0 + 380));
  uint64_t v1 = *(os_unfair_lock_s **)(*sub_10000C728(v0 + 380, v0[383]) + 56);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 112;
  os_unfair_lock_lock(v1 + 112);
  sub_1002AC168(v2, (uint64_t)(v0 + 56));
  os_unfair_lock_unlock(v3);
  sub_1000BEA14((uint64_t)(v0 + 56), (uint64_t)(v0 + 164), &qword_100722350);
  sub_1000BEA14((uint64_t)(v0 + 164), (uint64_t)(v0 + 110), &qword_100722350);
  if (sub_100044CCC((uint64_t)(v0 + 110)) == 1)
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v0[390] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100141DF4;
    v4[2] = v0[386];
    return _swift_task_switch(sub_100141344, 0, 0);
  }
  else
  {
    sub_1000BEA14((uint64_t)(v0 + 164), (uint64_t)(v0 + 2), &qword_100722350);
    uint64_t v5 = v0[385];
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 380));
    sub_1000BEA14((uint64_t)(v0 + 2), v5, &qword_100722350);
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100141DF4()
{
  *(void *)(*(void *)v1 + 3128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100142040;
  }
  else {
    uint64_t v2 = sub_100141F08;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_100141F08()
{
  uint64_t v1 = v0[391];
  uint64_t v2 = *(os_unfair_lock_s **)(*sub_10000C728(v0 + 380, v0[383]) + 56);
  uint64_t v3 = (uint64_t)&v2[4];
  uint64_t v4 = v2 + 112;
  os_unfair_lock_lock(v2 + 112);
  sub_1002AC168(v3, (uint64_t)(v0 + 326));
  if (v1)
  {
    os_unfair_lock_unlock(v4);
  }
  else
  {
    os_unfair_lock_unlock(v4);
    sub_1000BEA14((uint64_t)(v0 + 326), (uint64_t)(v0 + 218), &qword_100722350);
    sub_1000BEA14((uint64_t)(v0 + 218), (uint64_t)(v0 + 2), &qword_100722350);
    uint64_t v5 = v0[385];
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 380));
    sub_1000BEA14((uint64_t)(v0 + 2), v5, &qword_100722350);
    swift_task_dealloc();
    uint64_t v6 = (void (*)(void))v0[1];
    v6();
  }
}

uint64_t sub_100142040()
{
  uint64_t v1 = *(void *)(v0 + 3112);
  uint64_t v2 = *(void *)(v0 + 3104);
  uint64_t v3 = *(void *)(v0 + 3096);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100120AF0((_OWORD *)(v0 + 2176));
  sub_1000BEA14(v0 + 2176, v0 + 16, &qword_100722350);
  uint64_t v4 = *(void *)(v0 + 3080);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 3040);
  sub_1000BEA14(v0 + 16, v4, &qword_100722350);
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100142160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[369] = a7;
  v7[368] = a6;
  v7[367] = a5;
  v7[366] = a4;
  uint64_t v8 = type metadata accessor for Logger();
  v7[370] = v8;
  v7[371] = *(void *)(v8 - 8);
  v7[372] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPError.Code();
  v7[373] = v9;
  v7[374] = *(void *)(v9 - 8);
  v7[375] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPError();
  v7[376] = v10;
  v7[377] = *(void *)(v10 - 8);
  v7[378] = swift_task_alloc();
  return _swift_task_switch(sub_1001422E4, 0, 0);
}

uint64_t sub_1001422E4()
{
  sub_10000C728(*(void **)(v0 + 2928), *(void *)(*(void *)(v0 + 2928) + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 3032) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100142390;
  return sub_1002B1A50(v0 + 1968, 0);
}

uint64_t sub_100142390()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v3[380] = v0;
  v3[381] = v2[246];
  *((_OWORD *)v3 + 191) = *(_OWORD *)(v3 + 247);
  v3[384] = v2[249];
  *(_OWORD *)(v3 + 385) = *((_OWORD *)v3 + 125);
  v3[387] = v2[252];
  v3[388] = v3[253];
  v3[389] = v2[254];
  v3[390] = v2[255];
  *(_OWORD *)(v3 + 391) = *((_OWORD *)v3 + 128);
  v3[393] = v2[258];
  *((_OWORD *)v3 + 197) = *(_OWORD *)(v3 + 259);
  v3[396] = v2[261];
  *(_OWORD *)(v3 + 397) = *((_OWORD *)v3 + 131);
  v3[399] = v2[264];
  char v17 = *((unsigned char *)v3 + 2120);
  v3[400] = v2[266];
  char v16 = *((unsigned char *)v3 + 2136);
  v3[401] = v2[268];
  v3[402] = v2[269];
  v3[403] = v2[270];
  char v15 = *((unsigned char *)v3 + 2168);
  v3[404] = v2[272];
  char v14 = *((unsigned char *)v3 + 2184);
  v3[405] = v2[274];
  char v13 = *((unsigned char *)v3 + 2200);
  v3[406] = v2[276];
  char v4 = *((unsigned char *)v3 + 2216);
  v3[407] = v2[278];
  char v5 = *((unsigned char *)v3 + 2232);
  *((_OWORD *)v3 + 204) = *((_OWORD *)v3 + 140);
  *((_OWORD *)v3 + 205) = *((_OWORD *)v3 + 141);
  *((_OWORD *)v3 + 206) = *((_OWORD *)v3 + 142);
  v3[414] = v2[286];
  char v6 = *((unsigned char *)v3 + 2296);
  *((unsigned char *)v3 + 497) = *((unsigned char *)v3 + 2297);
  v3[415] = v2[288];
  char v7 = *((unsigned char *)v3 + 2312);
  v3[416] = v2[290];
  char v8 = *((unsigned char *)v3 + 2328);
  v3[417] = v2[292];
  char v9 = *((unsigned char *)v3 + 2344);
  *((unsigned char *)v3 + 498) = *((unsigned char *)v3 + 2345);
  v3[418] = v2[294];
  char v10 = *((unsigned char *)v3 + 2360);
  *(_OWORD *)(v3 + 419) = *((_OWORD *)v3 + 148);
  *(_OWORD *)(v3 + 421) = *((_OWORD *)v3 + 149);
  *(_OWORD *)(v3 + 423) = *((_OWORD *)v3 + 150);
  *(_OWORD *)(v3 + 425) = *((_OWORD *)v3 + 151);
  *(_OWORD *)(v3 + 427) = *((_OWORD *)v3 + 152);
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v11 = sub_100142B78;
  }
  else
  {
    *((unsigned char *)v3 + 3432) = v17;
    *((unsigned char *)v3 + 3440) = v16;
    *((unsigned char *)v3 + 3448) = v15;
    *((unsigned char *)v3 + 3456) = v14;
    *((unsigned char *)v3 + 3464) = v13;
    *((unsigned char *)v3 + 3472) = v4;
    *((unsigned char *)v3 + 3480) = v5;
    *((unsigned char *)v3 + 3488) = v6;
    *((unsigned char *)v3 + 3496) = v7;
    *((unsigned char *)v3 + 3504) = v8;
    *((unsigned char *)v3 + 3512) = v9;
    *((unsigned char *)v3 + 3520) = v10;
    uint64_t v11 = sub_1001427EC;
  }
  return _swift_task_switch(v11, 0, 0);
}

uint64_t sub_1001427EC()
{
  uint64_t v1 = *(void *)(v0 + 3424);
  uint64_t v2 = *(void *)(v0 + 3416);
  uint64_t v21 = *(void *)(v0 + 3400);
  uint64_t v22 = *(void *)(v0 + 3408);
  uint64_t v40 = *(void *)(v0 + 3368);
  uint64_t v41 = *(void *)(v0 + 3376);
  long long v39 = *(_OWORD *)(v0 + 3352);
  uint64_t v38 = *(void *)(v0 + 3344);
  char v37 = *(unsigned char *)(v0 + 498);
  uint64_t v35 = *(void *)(v0 + 3328);
  uint64_t v36 = *(void *)(v0 + 3336);
  uint64_t v33 = *(void *)(v0 + 3320);
  char v32 = *(unsigned char *)(v0 + 497);
  uint64_t v31 = *(void *)(v0 + 3312);
  long long v29 = *(_OWORD *)(v0 + 3280);
  long long v30 = *(_OWORD *)(v0 + 3296);
  long long v28 = *(_OWORD *)(v0 + 3264);
  uint64_t v26 = *(void *)(v0 + 3248);
  uint64_t v27 = *(void *)(v0 + 3256);
  uint64_t v24 = *(void *)(v0 + 3232);
  uint64_t v25 = *(void *)(v0 + 3240);
  uint64_t v23 = *(void *)(v0 + 3224);
  uint64_t v3 = *(void *)(v0 + 3200);
  uint64_t v4 = *(void *)(v0 + 3192);
  long long v19 = *(_OWORD *)(v0 + 3176);
  long long v20 = *(_OWORD *)(v0 + 3208);
  long long v17 = *(_OWORD *)(v0 + 3144);
  long long v18 = *(_OWORD *)(v0 + 3160);
  long long v15 = *(_OWORD *)(v0 + 3112);
  long long v16 = *(_OWORD *)(v0 + 3128);
  uint64_t v5 = *(void *)(v0 + 3104);
  uint64_t v6 = *(void *)(v0 + 3096);
  uint64_t v7 = *(void *)(v0 + 3088);
  uint64_t v8 = *(void *)(v0 + 3080);
  uint64_t v9 = *(void *)(v0 + 3072);
  uint64_t v10 = *(void *)(v0 + 3064);
  long long v14 = *(_OWORD *)(v0 + 3048);
  uint64_t v34 = *(void (**)(uint64_t))(v0 + 2944);
  long long v13 = *(_OWORD *)(v0 + 3384);
  sub_1001433A8(v2, v1);
  *(_OWORD *)(v0 + 2448) = v13;
  *(void *)(v0 + 2464) = v21;
  *(void *)(v0 + 2472) = v22;
  *(void *)(v0 + 2480) = v2;
  *(void *)(v0 + 2488) = v1;
  *(_OWORD *)(v0 + 2496) = v14;
  *(void *)(v0 + 2512) = v10;
  *(void *)(v0 + 2520) = v9;
  *(void *)(v0 + 2528) = v8;
  *(void *)(v0 + 2536) = v7;
  *(void *)(v0 + 2544) = v6;
  *(void *)(v0 + 2552) = v5;
  *(_OWORD *)(v0 + 2560) = v15;
  *(_OWORD *)(v0 + 2576) = v16;
  *(_OWORD *)(v0 + 2592) = v17;
  *(_OWORD *)(v0 + 2608) = v18;
  *(_OWORD *)(v0 + 2624) = v19;
  *(void *)(v0 + 2640) = v4;
  *(unsigned char *)(v0 + 2648) = *(unsigned char *)(v0 + 3432);
  *(void *)(v0 + 2656) = v3;
  *(unsigned char *)(v0 + 2664) = *(unsigned char *)(v0 + 3440);
  *(_OWORD *)(v0 + 2672) = v20;
  *(void *)(v0 + 2688) = v23;
  *(unsigned char *)(v0 + 2696) = *(unsigned char *)(v0 + 3448);
  *(void *)(v0 + 2704) = v24;
  *(unsigned char *)(v0 + 2712) = *(unsigned char *)(v0 + 3456);
  *(void *)(v0 + 2720) = v25;
  *(unsigned char *)(v0 + 2728) = *(unsigned char *)(v0 + 3464);
  *(void *)(v0 + 2736) = v26;
  *(unsigned char *)(v0 + 2744) = *(unsigned char *)(v0 + 3472);
  *(void *)(v0 + 2752) = v27;
  *(unsigned char *)(v0 + 2760) = *(unsigned char *)(v0 + 3480);
  *(_OWORD *)(v0 + 2768) = v28;
  *(_OWORD *)(v0 + 2784) = v29;
  *(_OWORD *)(v0 + 2800) = v30;
  *(void *)(v0 + 2816) = v31;
  *(unsigned char *)(v0 + 2824) = *(unsigned char *)(v0 + 3488);
  *(unsigned char *)(v0 + 2825) = v32;
  *(void *)(v0 + 2832) = v33;
  *(unsigned char *)(v0 + 2840) = *(unsigned char *)(v0 + 3496);
  *(void *)(v0 + 2848) = v35;
  *(unsigned char *)(v0 + 2856) = *(unsigned char *)(v0 + 3504);
  *(void *)(v0 + 2864) = v36;
  *(unsigned char *)(v0 + 2872) = *(unsigned char *)(v0 + 3512);
  *(unsigned char *)(v0 + 2873) = v37;
  *(void *)(v0 + 2880) = v38;
  *(unsigned char *)(v0 + 2888) = *(unsigned char *)(v0 + 3520);
  *(_OWORD *)(v0 + 2896) = v39;
  *(void *)(v0 + 2912) = v40;
  *(void *)(v0 + 2920) = v41;
  memcpy((void *)(v0 + 1480), (const void *)(v0 + 2448), 0x1E0uLL);
  sub_1001435DC(v0 + 1480);
  sub_1000BEA14(v0 + 1480, v0 + 504, &qword_100725150);
  v34(v0 + 504);
  sub_1001435E4(v0 + 2448);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100142B78()
{
  uint64_t v1 = v0[378];
  uint64_t v2 = v0[377];
  uint64_t v3 = v0[376];
  uint64_t v4 = v0[372];
  uint64_t v5 = v0[371];
  uint64_t v12 = v0[370];
  long long v13 = (void (*)(void *))v0[368];
  (*(void (**)(void, void, void))(v0[374] + 104))(v0[375], enum case for DIPError.Code.internalError(_:), v0[373]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10000C588();
  swift_allocError();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v6(v7, v1, v3);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v12);
  swift_errorRelease();
  uint64_t v8 = swift_allocError();
  v6(v9, v1, v3);
  v0[124] = v8;
  sub_1001431A8((uint64_t)(v0 + 124));
  sub_1000BEA14((uint64_t)(v0 + 124), (uint64_t)(v0 + 2), &qword_100725150);
  v13(v0 + 2);
  swift_errorRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t type metadata accessor for ConfigurationManager()
{
  return self;
}

uint64_t sub_100142E20()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100142E58(uint64_t a1)
{
  sub_1001410B8(a1, v1);
}

uint64_t sub_100142E64(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t)(v1 + 4);
  uint64_t v7 = v1[9];
  uint64_t v8 = v1[10];
  uint64_t v9 = v1[11];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100025D64;
  return sub_100142160(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100142F3C(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_10071FEE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100142F9C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100143078;
  return v6(a1);
}

uint64_t sub_100143078()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100143170()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001431A8(uint64_t result)
{
  *(unsigned char *)(result + 480) = 1;
  return result;
}

uint64_t sub_1001431B4(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100143294;
  return v5(v2 + 32);
}

uint64_t sub_100143294()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

void sub_1001433A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self standardUserDefaults];
  v10._object = (void *)0x8000000100637930;
  v10._uint64_t countAndFlagsBits = 0xD000000000000031;
  Swift::Bool v11 = NSUserDefaults.internalBool(forKey:)(v10);

  if (v11)
  {
    defaultLogger()();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "ConfigurationManager region check disabled, skipping updateGlobalConfiguration", v14, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else if (a2)
  {
    uint64_t v15 = swift_bridgeObjectRetain();
    sub_10014078C(v15);
    sub_100140984(a2);
    swift_bridgeObjectRelease();
    sub_10000C728((void *)(v3 + 16), *(void *)(v3 + 40));
    dispatch thunk of MobileDocumentReaderSupportChecking.update(isGloballySupported:supportedRegions:unsupportedRegions:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001435DC(uint64_t result)
{
  *(unsigned char *)(result + 480) = 0;
  return result;
}

uint64_t sub_1001435E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100143720(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 480);
}

uint64_t sub_100143728(uint64_t a1)
{
  return sub_1001415AC(a1, v1);
}

uint64_t sub_100143730()
{
  uint64_t v1 = sub_100007764(&qword_10071FF30);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001437C4(uint64_t a1)
{
  sub_100007764(&qword_10071FF30);

  return sub_1001417E8(a1);
}

uint64_t sub_10014383C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t)(v1 + 4);
  uint64_t v7 = v1[9];
  uint64_t v8 = v1[10];
  uint64_t v9 = v1[11];
  Swift::String v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *Swift::String v10 = v2;
  v10[1] = sub_10000C494;
  return sub_100142160(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100143914(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000C494;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100725170 + dword_100725170);
  return v6(a1, v4);
}

uint64_t sub_1001439D0()
{
  swift_unknownObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 32);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100143A24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_100143A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_100143B60, 0, 0);
}

uint64_t sub_100143B60()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = (void *)swift_allocObject();
  v0[10] = v5;
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  uint64_t v6 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v1, v6, v7);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[11] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100143CB0;
  uint64_t v9 = v0[9];
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[2];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v11, v9, sub_1001446DC, v5, v10);
}

uint64_t sub_100143CB0()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *v1;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    return _swift_task_switch(sub_100143E74, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100143E74()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_100143ED8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v4 = 0;
  if ([v1 save:&v4]) {
    return v4;
  }
  id v3 = v4;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

unint64_t sub_100143F80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for StoredProofingSession();
  uint64_t v6 = (void *)static StoredProofingSession.fetchRequest()();
  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100610730;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000E4DF8();
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v8 = NSPredicate.init(format:_:)();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100610730;
  uint64_t v10 = IdentityTarget.rawValue.getter();
  *(void *)(v9 + 56) = &type metadata for Int64;
  *(void *)(v9 + 64) = &protocol witness table for Int64;
  *(void *)(v9 + 32) = v10;
  uint64_t v11 = NSPredicate.init(format:_:)();
  sub_100007764(&qword_100730C60);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100614580;
  *(void *)(v12 + 32) = v8;
  *(void *)(v12 + 40) = v11;
  specialized Array._endMutation()();
  id v13 = v8;
  id v14 = v11;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = [self andPredicateWithSubpredicates:isa];

  [v6 setPredicate:v16];
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v20)
  {

    uint64_t v6 = v14;
LABEL_10:

    return v3;
  }
  unint64_t v18 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v3) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
    {
LABEL_9:

      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  if ((v18 & 0xC000000000000001) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v19 = *(id *)(v18 + 32);
LABEL_8:
    uint64_t v3 = (uint64_t)v19;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

unint64_t sub_100144240()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StoredProofingBiomeData();
  uint64_t v5 = (void *)static StoredProofingBiomeData.fetchRequest()();
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v0)
  {

    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v7 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v8 = (*(unsigned __int8 *)(*(void *)v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v7 + 80);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100610730;
    uint64_t v10 = (uint64_t *)(v9 + v8 + v7[14]);
    uint64_t v11 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v12 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v9 + v8, v11, v12);
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v13 = dispatch thunk of Error._code.getter();
    _OWORD v10[3] = (uint64_t)&type metadata for Int;
    *uint64_t v10 = v13;
    sub_10015C504(v9);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return (unint64_t)v4;
  }
  unint64_t v14 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    id v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    id v4 = *(char **)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_9:
      swift_bridgeObjectRelease();

      return (unint64_t)v4;
    }
  }
  if ((v14 & 0xC000000000000001) != 0)
  {
    uint64_t v15 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v15 = (char *)*(id *)(v14 + 32);
LABEL_8:
    id v4 = v15;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IdentityProofingAsyncDataContext()
{
  return self;
}

uint64_t sub_1001445E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000C494;
  return sub_100143A98(a1, a2, a3, a4);
}

uint64_t sub_1001446A4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001446DC()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

unint64_t sub_100144704(uint64_t a1, uint64_t a2)
{
  type metadata accessor for StoredProofingSession();
  uint64_t v4 = (void *)static StoredProofingSession.fetchRequest()();
  sub_1000E4DB8();
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100610730;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v6 = sub_1000E4DF8();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = NSPredicate.init(format:_:)();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100610730;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = v6;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = NSPredicate.init(format:_:)();
  sub_100007764(&qword_100730C60);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100614580;
  *(void *)(v10 + 32) = v7;
  *(void *)(v10 + 40) = v9;
  specialized Array._endMutation()();
  id v11 = v7;
  id v12 = v9;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = [self andPredicateWithSubpredicates:isa];

  [v4 setPredicate:v14];
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v18)
  {

    uint64_t v4 = v12;
LABEL_10:

    return v6;
  }
  unint64_t v16 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v6) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v6)
    {
LABEL_9:

      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  if ((v16 & 0xC000000000000001) != 0)
  {
    id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v17 = *(id *)(v16 + 32);
LABEL_8:
    unint64_t v6 = (unint64_t)v17;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001449B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v32 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MobileDocumentReaderSession.Error.Code();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1;
  DIPError.code.getter();
  uint64_t v33 = v12;
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == enum case for DIPError.Code.missingEntitlement(_:)) {
    goto LABEL_2;
  }
  uint64_t v34 = a2;
  uint64_t v35 = v7;
  if (v15 == enum case for DIPError.Code.networkTimeOut(_:)) {
    goto LABEL_4;
  }
  uint64_t v17 = v35;
  if (v15 == enum case for DIPError.Code.regionNotSupported(_:)) {
    goto LABEL_7;
  }
  if (v15 == enum case for DIPError.Code.unexpectedServerResponse(_:)) {
    goto LABEL_9;
  }
  BOOL v26 = v15 == enum case for DIPError.Code.topekaEntitlementServiceError(_:)
     || v15 == enum case for DIPError.Code.topekaWWDRTeamTerminated(_:)
     || v15 == enum case for DIPError.Code.topekaWWDRTeamExpired(_:)
     || v15 == enum case for DIPError.Code.topekaWWDRTeamDisabled(_:);
  uint64_t v7 = v35;
  if (v26) {
    goto LABEL_2;
  }
  if (v15 == enum case for DIPError.Code.topekaJWTVerificationFailed(_:)
    || v15 == enum case for DIPError.Code.topekaMalformedJWT(_:)
    || v15 == enum case for DIPError.Code.topekaInvalidJWTType(_:)
    || v15 == enum case for DIPError.Code.topekaIncorrectJWTAlgorithm(_:)
    || v15 == enum case for DIPError.Code.topekaInvalidJWTSignature(_:)
    || v15 == enum case for DIPError.Code.topekaJWTOutsideOfValidityPeriod(_:)
    || v15 == enum case for DIPError.Code.topekaInvalidJWTClaim(_:)
    || v15 == enum case for DIPError.Code.topekaAppIDMismatch(_:)
    || v15 == enum case for DIPError.Code.topekaNotOnboarded(_:)
    || v15 == enum case for DIPError.Code.topekaInvalidKeyID(_:))
  {
    goto LABEL_35;
  }
  uint64_t v7 = v35;
  if (v15 != enum case for DIPError.Code.topekaCannotVerifyDeviceOwnership(_:))
  {
    if (v15 != enum case for DIPError.Code.topekaInvalidAudience(_:))
    {
      if (v15 == enum case for DIPError.Code.topekaiCloudAccountSignedOut(_:))
      {
        unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.iCloudAccountSignedOut(_:);
        goto LABEL_5;
      }
      uint64_t v17 = v35;
      if (v15 == enum case for DIPError.Code.topekaInvalidIAT(_:)) {
        goto LABEL_9;
      }
      if (v15 != enum case for DIPError.Code.topekaSubjectMismatch(_:))
      {
        if (v15 == enum case for DIPError.Code.topekaMissingFairPlayProvisioningInfo(_:)
          || v15 == enum case for DIPError.Code.topekaOSVersionNotSupported(_:))
        {
          unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.osNotSupported(_:);
          goto LABEL_5;
        }
        if (v15 != enum case for DIPError.Code.topekaJWTSigningKeyExpired(_:))
        {
          uint64_t v17 = v35;
          if (v15 == enum case for DIPError.Code.topekaABRTermsAndConditionsAcceptanceRequired(_:)
            || v15 == enum case for DIPError.Code.topekaInternalServerError(_:))
          {
            goto LABEL_9;
          }
          if (v15 == enum case for DIPError.Code.sesKeyNetworkError(_:))
          {
LABEL_4:
            unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.networkError(_:);
LABEL_5:
            (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *v16, v35);
LABEL_11:
            MobileDocumentReaderSession.Error.init(code:underlyingError:debugDescription:)();
            goto LABEL_12;
          }
          if (v15 == enum case for DIPError.Code.documentReadCancelled(_:))
          {
LABEL_47:
            unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.cancelled(_:);
            goto LABEL_5;
          }
          if (v15 == enum case for DIPError.Code.documentReadingAlreadyInProgress(_:))
          {
            unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.documentReadAlreadyInProgress(_:);
            goto LABEL_5;
          }
          if (v15 == enum case for DIPError.Code.documentReaderMissingSession(_:))
          {
LABEL_52:
            unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.sessionExpired(_:);
            goto LABEL_5;
          }
          if (v15 == enum case for DIPError.Code.documentReaderHolderCancelled(_:)) {
            goto LABEL_47;
          }
          if (v15 == enum case for DIPError.Code.documentReaderSTSSessionUnexpectedError(_:))
          {
LABEL_55:
            unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.documentReadConnectionError(_:);
            goto LABEL_5;
          }
          if (v15 == enum case for DIPError.Code.documentReaderMalformedDocumentResponse(_:))
          {
LABEL_57:
            unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.invalidResponse(_:);
            goto LABEL_5;
          }
          if (v15 != enum case for DIPError.Code.documentReaderMissingReaderAuthKey(_:))
          {
            if (v15 == enum case for DIPError.Code.documentReaderRequiresBluetooth(_:))
            {
              unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.bluetoothDisabled(_:);
              goto LABEL_5;
            }
            if (v15 == enum case for DIPError.Code.documentReaderRequiresNFC(_:))
            {
              unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.nfcDisabled(_:);
              goto LABEL_5;
            }
            if (v15 == enum case for DIPError.Code.documentReaderUnknownDocumentType(_:)
              || v15 == enum case for DIPError.Code.documentReaderUnknownDocumentElement(_:))
            {
              goto LABEL_69;
            }
            uint64_t v17 = v35;
            if (v15 == enum case for DIPError.Code.documentReaderCertificateLogoHashMismatch(_:)
              || v15 == enum case for DIPError.Code.documentReaderCertificateValidationFailed(_:))
            {
              goto LABEL_9;
            }
            if (v15 == enum case for DIPError.Code.documentReaderSTSConnectionError(_:)) {
              goto LABEL_55;
            }
            if (v15 == enum case for DIPError.Code.documentReaderInvalidRequest(_:)) {
              goto LABEL_69;
            }
            if (v15 != enum case for DIPError.Code.documentReaderExpiredAttestationCertificate(_:))
            {
              if (v15 == enum case for DIPError.Code.documentReaderTermsAndConditionsAcceptanceRequired(_:))
              {
                uint64_t v27 = DIPError.properties.getter();
                (*(void (**)(char *, void, uint64_t))(v32 + 104))(v6, enum case for DIPError.PropertyKey.termsAndConditions(_:), v4);
                if (*(void *)(v27 + 16) && (unint64_t v28 = sub_1005905C0((uint64_t)v6), (v29 & 1) != 0))
                {
                  sub_10003BC28(*(void *)(v27 + 56) + 32 * v28, (uint64_t)&v39);
                }
                else
                {
                  long long v39 = 0u;
                  long long v40 = 0u;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v4);
                if (*((void *)&v40 + 1))
                {
                  if (swift_dynamicCast())
                  {
                    uint64_t v30 = v38;
                    *uint64_t v10 = v37;
                    v10[1] = v30;
                    unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.termsAndConditionsAcceptanceRequired(_:);
                    goto LABEL_5;
                  }
                }
                else
                {
                  sub_100145FA4((uint64_t)&v39);
                }
                unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.unknown(_:);
                goto LABEL_5;
              }
              if (v15 == enum case for DIPError.Code.documentReaderInvalidResponse(_:)
                || v15 == enum case for DIPError.Code.documentReaderUnknownIssuerAuthAlgorithm(_:)
                || v15 == enum case for DIPError.Code.documentReaderInvalidIssuerAuthCerts(_:)
                || v15 == enum case for DIPError.Code.documentReaderMisformattedIssuerAuthSignature(_:)
                || v15 == enum case for DIPError.Code.documentReaderInvalidIssuerAuthSignature(_:)
                || v15 == enum case for DIPError.Code.documentReaderMisformattedIssuerAuthStructure(_:)
                || v15 == enum case for DIPError.Code.documentReaderExpiredIssuerAuth(_:)
                || v15 == enum case for DIPError.Code.documentReaderUnknownDeviceAuthAlgorithm(_:)
                || v15 == enum case for DIPError.Code.documentReaderInvalidDeviceAuthPublicKey(_:)
                || v15 == enum case for DIPError.Code.documentReaderMisformattedDeviceAuthSignature(_:)
                || v15 == enum case for DIPError.Code.documentReaderInvalidDeviceAuthSignature(_:)
                || v15 == enum case for DIPError.Code.documentReaderUnauthorizedDeviceKey(_:)
                || v15 == enum case for DIPError.Code.documentReaderMalformedDeviceAuthStructure(_:)
                || v15 == enum case for DIPError.Code.documentReaderDeviceMacUnsupported(_:))
              {
                goto LABEL_57;
              }
              if (v15 == enum case for DIPError.Code.documentReaderPasscodeNotSet(_:))
              {
                unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.passcodeNotSet(_:);
                goto LABEL_5;
              }
              if (v15 != enum case for DIPError.Code.documentReaderAuthenticationCertificateNotAllowedToPerformRequest(_:))
              {
                uint64_t v17 = v35;
                if (v15 == enum case for DIPError.Code.documentReaderTermsAndConditionsFetchFailed(_:)) {
                  goto LABEL_9;
                }
                if (v15 == enum case for DIPError.Code.documentReaderHSA2NotEnabled(_:))
                {
                  unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.hsa2Disabled(_:);
                  goto LABEL_5;
                }
                if (v15 == enum case for DIPError.Code.documentReaderReadTimedOut(_:))
                {
                  unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.documentReadTimedOut(_:);
                  goto LABEL_5;
                }
                if (v15 == enum case for DIPError.Code.documentReaderNFCOverheatProtectionEnabled(_:))
                {
                  unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.nfcOverheatProtectionEnabled(_:);
                  goto LABEL_5;
                }
                if (v15 == enum case for DIPError.Code.documentReaderSessionExpired(_:)) {
                  goto LABEL_52;
                }
                if (v15 != enum case for DIPError.Code.documentReaderNoTrustedIssuerRoots(_:))
                {
                  if (v15 == enum case for DIPError.Code.documentReaderUntrustedIssuer(_:)
                    || v15 == enum case for DIPError.Code.documentReaderFailedToVerifyIssuerChain(_:)
                    || v15 == enum case for DIPError.Code.documentReaderMissingIssuerCertificateChain(_:)
                    || v15 == enum case for DIPError.Code.documentReaderDocSignerCountryInconsistent(_:)
                    || v15 == enum case for DIPError.Code.documentReaderDocSignerIssuingJurisdictionInconsistent(_:)
                    || v15 == enum case for DIPError.Code.documentReaderDocSignerIssueDateInconsistent(_:)
                    || v15 == enum case for DIPError.Code.documentReaderDocSignerMissingOID(_:)
                    || v15 == enum case for DIPError.Code.documentReaderDocSignerInvalidDigest(_:)
                    || v15 == enum case for DIPError.Code.documentReaderMismatchedDocType(_:)
                    || v15 == enum case for DIPError.Code.documentReaderMSOValidityInfoValidationFailed(_:)
                    || v15 == enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:)
                    || v15 == enum case for DIPError.Code.documentReaderInvalidDigestAlgorithm(_:))
                  {
                    goto LABEL_57;
                  }
                  if (v15 != enum case for DIPError.Code.documentReaderEmptyRequest(_:)
                    && v15 != enum case for DIPError.Code.documentReaderDuplicateElementsInRequest(_:)
                    && v15 != enum case for DIPError.Code.documentReaderInvalidAgeAtLeastElement(_:)
                    && v15 != enum case for DIPError.Code.documentReaderTooManyAgeAtLeastElements(_:)
                    && v15 != enum case for DIPError.Code.documentReaderRequestOnlyContainsPortrait(_:))
                  {
                    uint64_t v17 = v35;
                    if (v15 == enum case for DIPError.Code.documentReaderUnableToCheckRegionSupport(_:)) {
                      goto LABEL_9;
                    }
                    if (v15 == enum case for DIPError.Code.documentReaderCertificateRevoked(_:)) {
                      goto LABEL_57;
                    }
                    if (v15 == enum case for DIPError.Code.documentReaderNFCNegotiatedHandoverFailed(_:))
                    {
                      unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.nfcNegotiatedHandoverFailed(_:);
                      goto LABEL_5;
                    }
                    if (v15 == enum case for DIPError.Code.documentReaderUnsupportedPortraitDataFormat(_:)) {
                      goto LABEL_57;
                    }
                    if (v15 != enum case for DIPError.Code.documentReaderUnsupportedNationalIDCardRegion(_:)
                      && v15 != enum case for DIPError.Code.documentReaderTokenRequiredForRequest(_:))
                    {
                      uint64_t v17 = v35;
                      if (v15 == enum case for DIPError.Code.documentReaderApplicationExtensionsNotPermitted(_:)
                        || v15 == enum case for DIPError.Code.documentReaderUnsupportedBundleType(_:))
                      {
LABEL_7:
                        uint64_t v18 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.notSupported(_:);
LABEL_10:
                        (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *v18, v17);
                        goto LABEL_11;
                      }
                      if (v15 == enum case for DIPError.Code.vicalCouldNotFetch(_:))
                      {
LABEL_9:
                        uint64_t v18 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.serviceUnavailable(_:);
                        goto LABEL_10;
                      }
                      if (v15 != enum case for DIPError.Code.vicalMissing(_:))
                      {
                        uint64_t v17 = v35;
                        if (v15 != enum case for DIPError.Code.vicalCannotParseDocument(_:))
                        {
                          (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for MobileDocumentReaderSession.Error.Code.unknown(_:), v35);
                          MobileDocumentReaderSession.Error.init(code:underlyingError:debugDescription:)();
                          (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v11);
                          goto LABEL_12;
                        }
                        goto LABEL_9;
                      }
                      goto LABEL_52;
                    }
                  }
                }
              }
LABEL_69:
              unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.invalidRequest(_:);
              goto LABEL_5;
            }
          }
        }
      }
    }
LABEL_35:
    unint64_t v16 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.invalidToken(_:);
    goto LABEL_5;
  }
LABEL_2:
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for MobileDocumentReaderSession.Error.Code.notEntitled(_:), v7);
  MobileDocumentReaderSession.Error.init(code:underlyingError:debugDescription:)();
LABEL_12:
  uint64_t v19 = type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = v36;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v22, v36, v19);
  MobileDocumentReaderSession.Error.underlyingError.setter();
  sub_1001456C0();
  MobileDocumentReaderSession.Error.debugDescription.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v21, v19);
}

unint64_t sub_1001456C0()
{
  uint64_t v0 = type metadata accessor for DIPError.Code();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  DIPError.code.getter();
  int v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  if (v4 == enum case for DIPError.Code.missingEntitlement(_:)) {
    return 0xD00000000000003ALL;
  }
  int v6 = v4;
  if (v4 == enum case for DIPError.Code.regionNotSupported(_:)) {
    return 0xD00000000000002BLL;
  }
  if (v4 == enum case for DIPError.Code.topekaEntitlementServiceError(_:)
    || v4 == enum case for DIPError.Code.topekaWWDRTeamTerminated(_:)
    || v4 == enum case for DIPError.Code.topekaWWDRTeamExpired(_:)
    || v4 == enum case for DIPError.Code.topekaWWDRTeamDisabled(_:))
  {
    return 0xD000000000000050;
  }
  if (v4 == enum case for DIPError.Code.topekaJWTVerificationFailed(_:)) {
    return 0xD000000000000030;
  }
  if (v4 == enum case for DIPError.Code.topekaMalformedJWT(_:)) {
    return 0xD000000000000027;
  }
  if (v4 == enum case for DIPError.Code.topekaInvalidJWTType(_:)) {
    return 0xD000000000000055;
  }
  if (v4 == enum case for DIPError.Code.topekaIncorrectJWTAlgorithm(_:)) {
    return 0xD000000000000057;
  }
  if (v4 == enum case for DIPError.Code.topekaInvalidJWTSignature(_:)) {
    return 0xD000000000000038;
  }
  if (v4 == enum case for DIPError.Code.topekaJWTOutsideOfValidityPeriod(_:)) {
    return 0xD00000000000004ELL;
  }
  if (v4 == enum case for DIPError.Code.topekaInvalidJWTClaim(_:)) {
    return 0xD00000000000003ELL;
  }
  unint64_t result = 0xD000000000000090;
  if (v6 != enum case for DIPError.Code.topekaAppIDMismatch(_:)
    && v6 != enum case for DIPError.Code.topekaNotOnboarded(_:))
  {
    if (v6 == enum case for DIPError.Code.topekaInvalidKeyID(_:)) {
      return 0xD000000000000086;
    }
    if (v6 == enum case for DIPError.Code.topekaCannotVerifyDeviceOwnership(_:)) {
      return 0xD000000000000040;
    }
    if (v6 == enum case for DIPError.Code.topekaInvalidAudience(_:)) {
      return 0xD000000000000075;
    }
    if (v6 == enum case for DIPError.Code.topekaSubjectMismatch(_:)) {
      return 0xD00000000000006DLL;
    }
    if (v6 == enum case for DIPError.Code.topekaMissingFairPlayProvisioningInfo(_:)) {
      return 0;
    }
    if (v6 == enum case for DIPError.Code.topekaJWTSigningKeyExpired(_:)) {
      return 0xD000000000000039;
    }
    if (v6 == enum case for DIPError.Code.topekaABRTermsAndConditionsAcceptanceRequired(_:)) {
      return 0xD00000000000005CLL;
    }
    if (v6 == enum case for DIPError.Code.documentReaderUnknownDocumentType(_:)) {
      return 0xD000000000000029;
    }
    if (v6 == enum case for DIPError.Code.documentReaderUnknownIssuerAuthAlgorithm(_:)) {
      return 0xD000000000000064;
    }
    if (v6 == enum case for DIPError.Code.documentReaderInvalidIssuerAuthCerts(_:)) {
      return 0xD000000000000034;
    }
    unint64_t result = 0xD00000000000004ALL;
    if (v6 != enum case for DIPError.Code.documentReaderMisformattedIssuerAuthSignature(_:)
      && v6 != enum case for DIPError.Code.documentReaderInvalidIssuerAuthSignature(_:))
    {
      if (v6 == enum case for DIPError.Code.documentReaderMisformattedIssuerAuthStructure(_:)) {
        return 0xD00000000000004ALL;
      }
      if (v6 == enum case for DIPError.Code.documentReaderExpiredIssuerAuth(_:)) {
        return 0xD000000000000069;
      }
      if (v6 == enum case for DIPError.Code.documentReaderUnknownDeviceAuthAlgorithm(_:)) {
        return 0xD000000000000063;
      }
      if (v6 == enum case for DIPError.Code.documentReaderInvalidDeviceAuthPublicKey(_:)) {
        return 0xD00000000000003CLL;
      }
      unint64_t result = 0xD00000000000004ALL;
      if (v6 != enum case for DIPError.Code.documentReaderMisformattedDeviceAuthSignature(_:)
        && v6 != enum case for DIPError.Code.documentReaderInvalidDeviceAuthSignature(_:))
      {
        if (v6 == enum case for DIPError.Code.documentReaderUnauthorizedDeviceKey(_:)) {
          return 0xD000000000000069;
        }
        if (v6 == enum case for DIPError.Code.documentReaderMalformedDeviceAuthStructure(_:)) {
          return 0xD000000000000053;
        }
        if (v6 == enum case for DIPError.Code.documentReaderDeviceMacUnsupported(_:)) {
          return 0xD00000000000005ALL;
        }
        if (v6 == enum case for DIPError.Code.documentReaderAuthenticationCertificateNotAllowedToPerformRequest(_:)) {
          return 0xD00000000000008CLL;
        }
        if (v6 == enum case for DIPError.Code.documentReaderUntrustedIssuer(_:)) {
          return 0xD000000000000044;
        }
        if (v6 == enum case for DIPError.Code.documentReaderFailedToVerifyIssuerChain(_:)) {
          return 0xD000000000000045;
        }
        if (v6 == enum case for DIPError.Code.documentReaderMissingIssuerCertificateChain(_:)) {
          return 0xD00000000000003DLL;
        }
        if (v6 == enum case for DIPError.Code.documentReaderDocSignerCountryInconsistent(_:)) {
          return 0xD000000000000074;
        }
        if (v6 == enum case for DIPError.Code.documentReaderDocSignerIssuingJurisdictionInconsistent(_:)) {
          return 0xD000000000000082;
        }
        if (v6 == enum case for DIPError.Code.documentReaderDocSignerIssueDateInconsistent(_:)) {
          return 0xD000000000000062;
        }
        if (v6 == enum case for DIPError.Code.documentReaderDocSignerMissingOID(_:)) {
          return 0xD000000000000058;
        }
        if (v6 == enum case for DIPError.Code.documentReaderDocSignerInvalidDigest(_:)) {
          return 0xD000000000000033;
        }
        if (v6 == enum case for DIPError.Code.documentReaderMismatchedDocType(_:)) {
          return 0xD000000000000078;
        }
        if (v6 == enum case for DIPError.Code.documentReaderMSOValidityInfoValidationFailed(_:)) {
          return 0xD000000000000061;
        }
        if (v6 == enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:)) {
          return 0xD000000000000053;
        }
        if (v6 == enum case for DIPError.Code.documentReaderInvalidDigestAlgorithm(_:)) {
          return 0xD00000000000003BLL;
        }
        if (v6 == enum case for DIPError.Code.documentReaderEmptyRequest(_:)) {
          return 0xD000000000000033;
        }
        if (v6 == enum case for DIPError.Code.documentReaderDuplicateElementsInRequest(_:)) {
          return 0xD000000000000031;
        }
        if (v6 == enum case for DIPError.Code.documentReaderInvalidAgeAtLeastElement(_:)) {
          return 0xD00000000000006FLL;
        }
        if (v6 == enum case for DIPError.Code.documentReaderTooManyAgeAtLeastElements(_:)) {
          return 0xD00000000000003DLL;
        }
        if (v6 == enum case for DIPError.Code.documentReaderRequestOnlyContainsPortrait(_:)) {
          return 0xD000000000000033;
        }
        if (v6 == enum case for DIPError.Code.documentReaderDocSignerMissingCommonName(_:)) {
          return 0xD000000000000042;
        }
        if (v6 == enum case for DIPError.Code.documentReaderDocSignerInvalidKeyUsage(_:)) {
          return 0xD00000000000005ALL;
        }
        if (v6 == enum case for DIPError.Code.documentReaderUnsupportedNationalIDCardRegion(_:)) {
          return 0xD000000000000041;
        }
        if (v6 == enum case for DIPError.Code.documentReaderTokenRequiredForRequest(_:)) {
          return 0xD000000000000044;
        }
        if (v6 == enum case for DIPError.Code.documentReaderApplicationExtensionsNotPermitted(_:)) {
          return 0xD00000000000003ELL;
        }
        (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100145FA4(uint64_t a1)
{
  uint64_t v2 = sub_100007764((uint64_t *)&unk_100727200);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for KRL()
{
  return &type metadata for KRL;
}

uint64_t sub_100146014(unint64_t a1, unint64_t a2)
{
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_100007764(&qword_100725368);
  if (swift_dynamicCast())
  {
    sub_10000C6B4(v38, (uint64_t)&v41);
    sub_10000C728(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_10000C6CC((uint64_t)v38, &qword_100725370);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      int v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      uint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        int v6 = (unsigned char *)(v4 + v5);
      }
      else {
        int v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = sub_10014D6A0(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = sub_10014D704(v11);
  *((void *)&v38[0] + 1) = v12;
  __chkstk_darwin(*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)sub_10014C91C((void *(*)(uint64_t *__return_ptr, char *, char *))sub_10014E604);
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = sub_100111260(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = sub_100111260(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    sub_10000C5E0(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_10000C5E0((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t sub_100146544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  Swift::Int v11 = (char *)&v47 - v10;
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v47 - v12;
  uint64_t v14 = SecCertificateRef.serialNumber.getter();
  if (v15 >> 60 == 15)
  {
    defaultLogger()();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "IssuerRevocationList provided certificate is missing serial number.", v18, 2u);
      swift_slowDealloc();
    }

    unint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v20 = v8;
LABEL_13:
    v19(v20, v4);
    return 0;
  }
  uint64_t v21 = v14;
  unint64_t v22 = v15;
  uint64_t v23 = SecCertificateRef.serialNumber.getter();
  if (v24 >> 60 == 15)
  {
    defaultLogger()();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "IssuerRevocationList provided root certificate is missing serial number.", v27, 2u);
      swift_slowDealloc();

      sub_10000C5E0(v21, v22);
    }
    else
    {
      sub_10000C5E0(v21, v22);
    }
    unint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v20 = v11;
    goto LABEL_13;
  }
  uint64_t v28 = v23;
  unint64_t v29 = v24;
  uint64_t v54 = v4;
  sub_1000338D4(v21, v22);
  uint64_t v55 = sub_10014D7A4(v21, v22);
  unint64_t v56 = v30;
  sub_10000C5E0(v21, v22);
  sub_10002CEB0(v28, v29);
  uint64_t v31 = sub_10014D7A4(v28, v29);
  unint64_t v33 = v32;
  sub_10000C5E0(v28, v29);
  if (*(void *)(a3 + 16))
  {
    sub_10002CEB0(v31, v33);
    unint64_t v34 = sub_1005908C8(v31, v33);
    if (v35)
    {
      uint64_t v36 = *(void *)(*(void *)(a3 + 56) + 8 * v34);
      swift_bridgeObjectRetain();
      sub_10000C5F4(v31, v33);
      uint64_t v38 = v55;
      unint64_t v37 = v56;
      char v39 = sub_10020E74C(v55, v56, v36);
      sub_10000C5E0(v21, v22);
      sub_10000C5E0(v28, v29);
      sub_10000C5F4(v31, v33);
      sub_10000C5F4(v38, v37);
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
    sub_10000C5F4(v31, v33);
  }
  defaultLogger()();
  sub_10002CEB0(v31, v33);
  sub_10002CEB0(v31, v33);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  int v43 = v42;
  if (os_log_type_enabled(v41, v42))
  {
    char v53 = v41;
    uint64_t v44 = swift_slowAlloc();
    int v51 = v43;
    uint64_t v45 = (uint8_t *)v44;
    uint64_t v52 = swift_slowAlloc();
    uint64_t v58 = v52;
    BOOL v50 = v45;
    *(_DWORD *)uint64_t v45 = 136315138;
    uint64_t v49 = v45 + 4;
    sub_10002CEB0(v31, v33);
    Swift::String v46 = Data.base16EncodedString()();
    uint64_t countAndFlagsBits = v46._countAndFlagsBits;
    sub_10000C5F4(v31, v33);
    uint64_t v57 = sub_100110D58(countAndFlagsBits, (unint64_t)v46._object, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000C5F4(v31, v33);
    sub_10000C5F4(v31, v33);
    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v51, "IssuerRevocationList certificate revocation list is missing for serial number %s", v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_10000C5F4(v55, v56);

    sub_10000C5F4(v31, v33);
    sub_10000C5E0(v28, v29);
    sub_10000C5E0(v21, v22);
  }
  else
  {
    sub_10000C5E0(v21, v22);
    sub_10000C5E0(v28, v29);
    sub_10000C5F4(v31, v33);
    sub_10000C5F4(v55, v56);
    sub_10000C5F4(v31, v33);
    sub_10000C5F4(v31, v33);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v54);
  return 0;
}

uint64_t sub_100146AB4()
{
  return Data.base16EncodedString()()._countAndFlagsBits;
}

uint64_t sub_100146ABC(uint64_t a1, uint64_t a2)
{
  return sub_100510850(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

Swift::Int sub_100146AD0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_10002CEB0(v1, v2);
  Data.hash(into:)();
  sub_10000C5F4(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100146B34()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  sub_10002CEB0(v2, v1);
  Data.hash(into:)();

  return sub_10000C5F4(v2, v1);
}

Swift::Int sub_100146B94()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_10002CEB0(v1, v2);
  Data.hash(into:)();
  sub_10000C5F4(v1, v2);
  return Hasher._finalize()();
}

void sub_100146BF4(uint64_t a1@<X8>)
{
  unint64_t v115 = (void *)a1;
  uint64_t v108 = (uint8_t *)type metadata accessor for DIPError.Code();
  unint64_t v112 = (void (*)(char *, char *, uint64_t))*((void *)v108 - 1);
  __chkstk_darwin(v108);
  long long v109 = (char *)&v94 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100007764(&qword_10071FC60);
  __chkstk_darwin(v3 - 8);
  uint64_t v102 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for VICALTrustValidator();
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v103 = (uint64_t)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v104 = (uint64_t)&v94 - v8;
  uint64_t v111 = type metadata accessor for Logger();
  uint64_t v107 = *(void *)(v111 - 8);
  uint64_t v9 = __chkstk_darwin(v111);
  uint64_t v105 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v106 = (char *)&v94 - v11;
  uint64_t v12 = sub_100007764(&qword_100720A68);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  unint64_t v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  os_log_type_t v17 = (char *)&v94 - v16;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v114 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  long long v113 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v94 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  os_log_type_t v26 = (char *)&v94 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v94 - v27;
  unint64_t v29 = *(os_unfair_lock_s **)(v1 + 16);
  unint64_t v30 = v29 + 4;
  uint64_t v31 = v29 + 14;
  os_unfair_lock_lock(v29 + 14);
  sub_100048D6C((uint64_t)v30, (uint64_t)&v119, &qword_1007252E0);
  os_unfair_lock_unlock(v31);
  if (v120)
  {
    sub_10000C6B4(&v119, (uint64_t)&v116);
    sub_10000C6B4(&v116, (uint64_t)v115);
    return;
  }
  uint64_t v100 = v17;
  uint64_t v101 = v28;
  uint64_t v95 = v15;
  uint64_t v96 = v26;
  uint64_t v98 = v23;
  os_unfair_lock_t v99 = v31;
  uint64_t v110 = v18;
  sub_10000C6CC((uint64_t)&v119, &qword_1007252E0);
  id v32 = [self standardUserDefaults];
  NSString v33 = String._bridgeToObjectiveC()();
  id v34 = [v32 stringForKey:v33];

  int v97 = v30;
  uint64_t v35 = (uint64_t)v112;
  uint64_t v36 = v113;
  if (v34)
  {
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v39 = v38;

    uint64_t v40 = (uint64_t)v100;
    URL.init(string:)();
    uint64_t v41 = v114;
    uint64_t v42 = v110;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v40, 1, v110) != 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v47 = v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v101, v40, v42);
      uint64_t v48 = v106;
      defaultLogger()();
      uint64_t v49 = v96;
      unint64_t v112 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
      v112(v96, v47, v42);
      BOOL v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      BOOL v52 = os_log_type_enabled(v50, v51);
      uint64_t v53 = v103;
      uint64_t v54 = v111;
      if (v52)
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        long long v109 = (char *)swift_slowAlloc();
        *(void *)&long long v116 = v109;
        uint64_t v108 = v55;
        *(_DWORD *)uint64_t v55 = 136315138;
        long long v113 = (char *)(v55 + 4);
        sub_10014E5BC((unint64_t *)&qword_100723C08, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v56 = v53;
        uint64_t v57 = v49;
        uint64_t v58 = v110;
        uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v119 = sub_100110D58(v59, v60, (uint64_t *)&v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v61 = v57;
        uint64_t v53 = v56;
        long long v113 = *(char **)(v114 + 8);
        ((void (*)(char *, uint64_t))v113)(v61, v58);
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "MobileDocumentReaderIssuerRootStorage found override VICAL URL %s", v108, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v107 + 8))(v106, v111);
      }
      else
      {
        long long v113 = *(char **)(v41 + 8);
        ((void (*)(char *, uint64_t))v113)(v49, v110);

        (*(void (**)(char *, uint64_t))(v107 + 8))(v48, v54);
      }
      uint64_t v73 = v104;
      uint64_t v74 = (uint64_t)v102;
      uint64_t v35 = (uint64_t)v98;
      v112(v98, v101, v110);
      uint64_t v75 = type metadata accessor for COSESignatureValidator();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v74, 1, 1, v75);
      uint64_t v117 = type metadata accessor for DIPOIDVerifier();
      long long v118 = &protocol witness table for DIPOIDVerifier;
      sub_10002C2D8((uint64_t *)&v116);
      DIPOIDVerifier.init()();
      sub_100544364(v74, (uint64_t)&v116, v73);
      unint64_t v76 = (objc_class *)type metadata accessor for VICALWebService();
      os_log_type_t v77 = (char *)objc_allocWithZone(v76);
      sub_10014E4F4(v73, v53, (uint64_t (*)(void))type metadata accessor for VICALTrustValidator);
      id v78 = sub_10014D004(v35, v53, v77);
      uint64_t v79 = sub_10014E55C(v73, (uint64_t (*)(void))type metadata accessor for VICALTrustValidator);
      __chkstk_darwin(v79);
      uint64_t v64 = v99;
      os_unfair_lock_lock(v99);
      uint64_t v80 = v127;
      sub_10014E414(v97);
      if (!v80)
      {
        os_unfair_lock_unlock(v64);
        uint64_t v81 = v115;
        v115[3] = v76;
        v81[4] = &off_100705770;
        *uint64_t v81 = v78;
        ((void (*)(char *, uint64_t))v113)(v101, v110);
        return;
      }
      goto LABEL_24;
    }
    sub_10000C6CC(v40, &qword_100720A68);
    int v43 = v105;
    defaultLogger()();
    swift_bridgeObjectRetain();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      Swift::String v46 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v116 = swift_slowAlloc();
      *(_DWORD *)Swift::String v46 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v119 = sub_100110D58(v37, v39, (uint64_t *)&v116);
      uint64_t v36 = v113;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "DIPTopekaStaticWebService found override VICAL URL string %s, but could not cast it into URL. Falling back to default URL.", v46, 0xCu);
      swift_arrayDestroy();
      uint64_t v35 = (uint64_t)v112;
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v107 + 8))(v105, v111);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v43, v111);
    }
  }
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v62 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v63 = (uint64_t)&v62[4];
  uint64_t v64 = v62 + 52;
  os_unfair_lock_lock(v62 + 52);
  uint64_t v65 = v127;
  sub_1000262B4(v63, &v116);
  uint64_t v66 = v110;
  unint64_t v67 = v108;
  if (v65)
  {
LABEL_24:
    os_unfair_lock_unlock(v64);
    __break(1u);
    os_unfair_lock_unlock((os_unfair_lock_t)v35);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v64);
  sub_100030A10((uint64_t)&v116, (uint64_t)&v119);
  sub_1000262D0((uint64_t)&v116);
  sub_10000C728(&v119, v120);
  sub_1001418CC((uint64_t)v121);
  sub_1000BEA14((uint64_t)v121, (uint64_t)v122, &qword_100722350);
  if (sub_100044CCC((uint64_t)v122) == 1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v119);
    uint64_t v68 = v109;
LABEL_18:
    (*(void (**)(char *, void, uint8_t *))(v35 + 104))(v68, enum case for DIPError.Code.vicalWebServiceMissing(_:), v67);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_19;
  }
  memcpy(v123, v122, sizeof(v123));
  memcpy(v124, &v123[32], 0x169uLL);
  sub_100044CE4((uint64_t)v124);
  sub_100044D90(v121);
  sub_1000BEA14((uint64_t)&v124[272], (uint64_t)v125, (uint64_t *)&unk_100722630);
  sub_1001061B8((uint64_t)v125);
  sub_100044F4C((uint64_t)v124);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v119);
  sub_1000BEA14((uint64_t)v125, (uint64_t)&v126, (uint64_t *)&unk_100722630);
  uint64_t v68 = v109;
  if (!*((void *)&v126 + 1)) {
    goto LABEL_18;
  }
  long long v116 = v126;
  v69._uint64_t countAndFlagsBits = 47;
  v69._object = (void *)0xE100000000000000;
  String.append(_:)(v69);
  v70._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v70._object = (void *)0x800000010063AEB0;
  String.append(_:)(v70);
  uint64_t v71 = (uint64_t)v95;
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v72 = v114;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v71, 1, v66) == 1)
  {
    sub_10000C6CC(v71, &qword_100720A68);
    (*(void (**)(char *, void, uint8_t *))(v35 + 104))(v68, enum case for DIPError.Code.vicalWebServiceMissing(_:), v67);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_19:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v36, v71, v66);
  uint64_t v82 = (uint64_t)v98;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v98, v36, v66);
  uint64_t v83 = type metadata accessor for COSESignatureValidator();
  uint64_t v84 = (uint64_t)v102;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v102, 1, 1, v83);
  uint64_t v117 = type metadata accessor for DIPOIDVerifier();
  long long v118 = &protocol witness table for DIPOIDVerifier;
  sub_10002C2D8((uint64_t *)&v116);
  DIPOIDVerifier.init()();
  uint64_t v85 = v104;
  sub_100544364(v84, (uint64_t)&v116, v104);
  uint64_t v86 = (objc_class *)type metadata accessor for VICALWebService();
  uint64_t v87 = v72;
  uint64_t v88 = (char *)objc_allocWithZone(v86);
  uint64_t v89 = v103;
  sub_10014E4F4(v85, v103, (uint64_t (*)(void))type metadata accessor for VICALTrustValidator);
  id v90 = sub_10014D004(v82, v89, v88);
  uint64_t v91 = sub_10014E55C(v85, (uint64_t (*)(void))type metadata accessor for VICALTrustValidator);
  __chkstk_darwin(v91);
  Swift::String_optional v92 = v99;
  os_unfair_lock_lock(v99);
  sub_10014E414(v97);
  os_unfair_lock_unlock(v92);
  uint64_t v93 = v115;
  v115[3] = v86;
  v93[4] = &off_100705770;
  *uint64_t v93 = v90;
  (*(void (**)(char *, uint64_t))(v87 + 8))(v113, v110);
}

uint64_t sub_100147B38()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100147C20;
  return sub_100147ECC();
}

uint64_t sub_100147C20(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 48) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100147DC0;
  }
  else
  {
    *(void *)(v4 + 56) = a1;
    uint64_t v5 = sub_100147D48;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100147D48()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v2(v1 != 0);
}

uint64_t sub_100147DC0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderIssuerRootStorage areTrustedSystemRootsPresent encountered error while fetching system roots, returning false.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v6 = v0[2];
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7(0);
}

uint64_t sub_100147ECC()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  v0[4] = v1;
  v0[5] = *(void *)(v1 - 8);
  v0[6] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for BigUIntCBOR();
  v0[7] = v2;
  v0[8] = *(void *)(v2 - 8);
  v0[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v0[10] = v3;
  v0[11] = *(void *)(v3 - 8);
  v0[12] = swift_task_alloc();
  v0[13] = swift_task_alloc();
  v0[14] = swift_task_alloc();
  v0[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for VICALCertificateInfo();
  v0[16] = v4;
  v0[17] = *(void *)(v4 - 8);
  v0[18] = swift_task_alloc();
  v0[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for VICALDocument();
  v0[20] = v5;
  v0[21] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v0[22] = v6;
  v0[2] = _swiftEmptyArrayStorage;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[23] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100148174;
  return sub_100148E08(v6);
}

uint64_t sub_100148174()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100148C14;
  }
  else {
    uint64_t v2 = sub_100148288;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100148288()
{
  uint64_t v103 = v0;
  uint64_t v1 = VICALDocument.certificateInfos.getter();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v95 = v0;
  if (v2)
  {
    uint64_t v3 = v0[17];
    uint64_t v5 = *(void (**)(void, unint64_t, void))(v3 + 16);
    v3 += 16;
    uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t))v5;
    unint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 64));
    uint64_t v93 = (void (**)(uint64_t, uint64_t))(v0[11] + 8);
    uint64_t v89 = (void (**)(uint64_t, uint64_t))(v0[8] + 8);
    uint64_t v96 = (void (**)(uint64_t, uint64_t))(v3 - 8);
    uint64_t v97 = *(void *)(v3 + 56);
    uint64_t v7 = v0[24];
    swift_bridgeObjectRetain();
    uint64_t v98 = _swiftEmptyArrayStorage;
    uint64_t v94 = v5;
    do
    {
      unint64_t v101 = v6;
      v4(v0[19], v6, v0[16]);
      uint64_t v9 = VICALCertificateInfo.certificate.getter();
      unint64_t v11 = v10;
      uint64_t v12 = decodeCertificate(fromDER:)();
      uint64_t v13 = v0[19];
      if (v7)
      {
        uint64_t v14 = v4;
        uint64_t v15 = v0[18];
        uint64_t v16 = v0[16];
        sub_10000C5F4(v9, v11);
        defaultLogger()();
        v14(v15, v13, v16);
        os_log_type_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        BOOL v19 = os_log_type_enabled(v17, v18);
        uint64_t v20 = v0[18];
        uint64_t v21 = v0[15];
        uint64_t v99 = v0[16];
        uint64_t v100 = v0[10];
        if (v19)
        {
          uint64_t v22 = v0[9];
          uint64_t v92 = v0[7];
          log = v17;
          uint64_t v23 = swift_slowAlloc();
          v102[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136315138;
          os_log_type_t type = v18;
          VICALCertificateInfo.serialNumber.getter();
          uint64_t v24 = BigUIntCBOR.value.getter();
          unint64_t v26 = v25;
          (*v89)(v22, v92);
          Swift::String v27 = Data.base64EncodedString(options:)(0);
          unint64_t v28 = v26;
          uint64_t v0 = v95;
          sub_10000C5F4(v24, v28);
          uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t))v94;
          *(void *)(v23 + 4) = sub_100110D58(v27._countAndFlagsBits, (unint64_t)v27._object, v102);
          swift_bridgeObjectRelease();
          uint64_t v8 = *v96;
          (*v96)(v20, v99);
          _os_log_impl((void *)&_mh_execute_header, log, type, "MobileDocumentReaderIssuerRootStorage could not parse certificate with serial number %s", (uint8_t *)v23, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_errorRelease();
        }
        else
        {
          uint64_t v4 = v14;
          swift_errorRelease();
          uint64_t v8 = *v96;
          (*v96)(v20, v99);
        }
        (*v93)(v21, v100);
        v8(v0[19], v0[16]);
      }
      else
      {
        unint64_t v29 = (__SecCertificate *)v12;
        uint64_t v30 = v0[16];
        sub_10000C5F4(v9, v11);
        CFDataRef v31 = SecCertificateCopyData(v29);
        uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v34 = v33;

        (*v96)(v13, v30);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t))v94;
          uint64_t v35 = v98;
        }
        else
        {
          uint64_t v35 = sub_10010F770(0, v98[2] + 1, 1, v98);
          uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t))v94;
        }
        unint64_t v37 = v35[2];
        unint64_t v36 = v35[3];
        if (v37 >= v36 >> 1) {
          uint64_t v35 = sub_10010F770((void *)(v36 > 1), v37 + 1, 1, v35);
        }
        v35[2] = v37 + 1;
        uint64_t v98 = v35;
        unint64_t v38 = &v35[2 * v37];
        v38[4] = v32;
        v38[5] = v34;
        uint64_t v0 = v95;
      }
      uint64_t v7 = 0;
      unint64_t v6 = v101 + v97;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
    uint64_t v39 = 0;
    uint64_t v40 = v98;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = v0[24];
    uint64_t v40 = _swiftEmptyArrayStorage;
  }
  sub_1001629E8((uint64_t)v40);
  id v41 = [self standardUserDefaults];
  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = [v41 stringArrayForKey:v42];

  if (!v43) {
    goto LABEL_42;
  }
  uint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  defaultLogger()();
  swift_bridgeObjectRetain();
  os_log_type_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 134217984;
    v95[3] = *(void *)(v44 + 16);
    uint64_t v0 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "MobileDocumentReaderIssuerRootStorage found additional %ld IACA roots in internal settings. Appending to list of trusted roots.", v47, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v0[11] + 8);
  v48(v0[14], v0[10]);
  uint64_t v49 = decodeCertificateChain(fromBase64DER:)();
  if (v39)
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    BOOL v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      BOOL v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "MobileDocumentReaderIssuerRootStorage encountered error while decoding internal settings additional trusted roots. Ignoring and continuing.", v52, 2u);
      swift_slowDealloc();
    }
    uint64_t v53 = v95[12];
    uint64_t v54 = v95[10];
    swift_errorRelease();

    uint64_t v55 = v53;
    uint64_t v0 = v95;
    v48(v55, v54);
    goto LABEL_42;
  }
  unint64_t v56 = v49;
  swift_bridgeObjectRelease();
  if (v56 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v57) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v57 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v57)
    {
LABEL_27:
      v102[0] = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t result = sub_100111504(0, v57 & ~(v57 >> 63), 0);
      if (v57 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v59 = (void *)v102[0];
      if ((v56 & 0xC000000000000001) != 0)
      {
        uint64_t v60 = 0;
        do
        {
          uint64_t v61 = (__SecCertificate *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          CFDataRef v62 = SecCertificateCopyData(v61);
          uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v65 = v64;

          swift_unknownObjectRelease();
          v102[0] = (uint64_t)v59;
          unint64_t v67 = v59[2];
          unint64_t v66 = v59[3];
          if (v67 >= v66 >> 1)
          {
            sub_100111504(v66 > 1, v67 + 1, 1);
            uint64_t v59 = (void *)v102[0];
          }
          ++v60;
          v59[2] = v67 + 1;
          uint64_t v68 = &v59[2 * v67];
          v68[4] = v63;
          v68[5] = v65;
        }
        while (v57 != v60);
      }
      else
      {
        uint64_t v69 = 0;
        do
        {
          Swift::String v70 = (__SecCertificate *)*(id *)(v56 + 8 * v69 + 32);
          CFDataRef v71 = SecCertificateCopyData(v70);
          uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v74 = v73;

          v102[0] = (uint64_t)v59;
          unint64_t v76 = v59[2];
          unint64_t v75 = v59[3];
          if (v76 >= v75 >> 1)
          {
            sub_100111504(v75 > 1, v76 + 1, 1);
            uint64_t v59 = (void *)v102[0];
          }
          ++v69;
          v59[2] = v76 + 1;
          os_log_type_t v77 = &v59[2 * v76];
          v77[4] = v72;
          v77[5] = v74;
        }
        while (v57 != v69);
      }
      swift_bridgeObjectRelease();
      uint64_t v0 = v95;
      goto LABEL_41;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v59 = _swiftEmptyArrayStorage;
LABEL_41:
  sub_1001629E8((uint64_t)v59);
LABEL_42:
  defaultLogger()();
  id v78 = Logger.logObject.getter();
  os_log_type_t v79 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v78, v79))
  {
    uint64_t v80 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v80 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "MobileDocumentReaderIssuerRootStorage returning trusted roots.", v80, 2u);
    uint64_t v0 = v95;
    swift_slowDealloc();
  }
  uint64_t v82 = v0[21];
  uint64_t v81 = v0[22];
  uint64_t v83 = v0[20];
  uint64_t v84 = v0[13];
  uint64_t v85 = v0[11];
  uint64_t v86 = v0[10];

  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v83);
  uint64_t v87 = v0[2];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v88 = (uint64_t (*)(uint64_t))v0[1];
  return v88(v87);
}

uint64_t sub_100148C14()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.vicalMissing(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100148E08(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for COSE_Sign1();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[17] = v5;
  v2[18] = *(void *)(v5 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for CharacterSet();
  v2[20] = v6;
  v2[21] = *(void *)(v6 - 8);
  v2[22] = swift_task_alloc();
  type metadata accessor for String.Encoding();
  v2[23] = swift_task_alloc();
  sub_100007764(&qword_100720A68);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v2[26] = v7;
  v2[27] = *(void *)(v7 - 8);
  v2[28] = swift_task_alloc();
  return _swift_task_switch(sub_1001490A4, 0, 0);
}

uint64_t sub_1001490A4()
{
  id v1 = [self standardUserDefaults];
  v2._uint64_t countAndFlagsBits = 0xD000000000000030;
  v2._object = (void *)0x800000010063ACC0;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    sub_1000D5CC8();
    uint64_t v4 = static NSBundle.internalSettings.getter();
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      NSString v6 = String._bridgeToObjectiveC()();
      NSString v7 = String._bridgeToObjectiveC()();
      id v8 = [v5 URLForResource:v6 withExtension:v7];

      if (v8)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = 1;
      }
      uint64_t v13 = v0[26];
      uint64_t v14 = v0[27];
      uint64_t v16 = v0[24];
      uint64_t v15 = v0[25];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v16, v9, 1, v13);
      sub_1000BEA14(v16, v15, &qword_100720A68);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) != 1)
      {
        (*(void (**)(void, void, void))(v0[27] + 32))(v0[28], v0[25], v0[26]);
        static String.Encoding.utf8.getter();
        uint64_t v20 = String.init(contentsOf:encoding:)();
        uint64_t v22 = v0[21];
        uint64_t v21 = v0[22];
        uint64_t v23 = v0[20];
        v0[7] = v20;
        v0[8] = v24;
        static CharacterSet.whitespacesAndNewlines.getter();
        sub_1000B5358();
        StringProtocol.trimmingCharacters(in:)();
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
        swift_bridgeObjectRelease();
        uint64_t v25 = Data.init(base16Encoded:)();
        if (v26 >> 60 == 15)
        {
          uint64_t v28 = v0[27];
          uint64_t v27 = v0[28];
          uint64_t v29 = v0[26];
          (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.vicalMissing(_:), v0[11]);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
        }
        else
        {
          uint64_t v30 = v25;
          unint64_t v31 = v26;
          defaultLogger()();
          uint64_t v32 = Logger.logObject.getter();
          os_log_type_t v33 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v32, v33))
          {
            uint64_t v34 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v34 = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, v33, "MobileDocumentReaderIssuerRootStorage storedSignedVICALDocument disable VICAL fetch call flag is enabled, returning hardcoded VICAL data.", v34, 2u);
            swift_slowDealloc();
          }
          uint64_t v36 = v0[18];
          uint64_t v35 = v0[19];
          uint64_t v37 = v0[17];

          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
          type metadata accessor for CBORDecoder();
          swift_allocObject();
          CBORDecoder.init()();
          sub_10014E5BC(&qword_100725320, (void (*)(uint64_t))&type metadata accessor for COSE_Sign1);
          dispatch thunk of CBORDecoder.decode<A>(_:from:)();
          uint64_t v39 = COSE_Sign1.payload.getter();
          if (v40 >> 60 != 15)
          {
            uint64_t v43 = v39;
            unint64_t v44 = v40;
            type metadata accessor for VICALDocument();
            sub_10014E5BC(&qword_100725328, (void (*)(uint64_t))&type metadata accessor for VICALDocument);
            dispatch thunk of CBORDecoder.decode<A>(_:from:)();
            uint64_t v45 = v0[27];
            uint64_t v53 = v0[28];
            uint64_t v51 = v0[26];
            uint64_t v46 = v0[15];
            uint64_t v47 = v0[16];
            uint64_t v48 = v0[14];
            sub_10000C5E0(v43, v44);
            swift_release();
            sub_10000C5E0(v30, v31);
            (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
            (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v53, v51);
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            unint64_t v38 = (uint64_t (*)(void))v0[1];
            goto LABEL_18;
          }
          uint64_t v41 = v0[27];
          uint64_t v52 = v0[26];
          uint64_t v54 = v0[28];
          uint64_t v42 = v0[15];
          uint64_t v49 = v0[14];
          uint64_t v50 = v0[16];
          (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.vicalMissing(_:), v0[11]);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          swift_release();
          sub_10000C5E0(v30, v31);
          (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v50, v49);
          (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v54, v52);
        }
LABEL_17:
        (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.vicalMissing(_:), v0[11]);
        swift_errorRetain();
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        unint64_t v38 = (uint64_t (*)(void))v0[1];
LABEL_18:
        return v38();
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[27] + 56))(v0[25], 1, 1, v0[26]);
    }
    uint64_t v18 = v0[12];
    uint64_t v17 = v0[13];
    uint64_t v19 = v0[11];
    sub_10000C6CC(v0[25], &qword_100720A68);
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, enum case for DIPError.Code.vicalMissing(_:), v19);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_17;
  }
  sub_100146BF4((uint64_t)(v0 + 2));
  sub_10000C728(v0 + 2, v0[5]);
  unint64_t v10 = (void *)swift_task_alloc();
  v0[29] = v10;
  *unint64_t v10 = v0;
  v10[1] = sub_100149BA4;
  uint64_t v11 = v0[9];
  return sub_1004473D4(v11);
}

uint64_t sub_100149BA4()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    Swift::String v2 = sub_100149D88;
  }
  else {
    Swift::String v2 = sub_100149CB8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100149CB8()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100149D88()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.vicalMissing(_:), v0[11]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100149F64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  sub_100007764(&qword_1007252D8);
  uint64_t v4 = (os_unfair_lock_s *)swift_allocObject();
  v4[14]._os_unfair_lock_opaque = 0;
  sub_100048D6C((uint64_t)v6, (uint64_t)&v4[4], &qword_1007252E0);
  sub_10000C6CC((uint64_t)v6, &qword_1007252E0);
  *(void *)(v2 + 16) = v4;
  os_unfair_lock_lock(v4 + 14);
  sub_10014C900((uint64_t)&v4[4]);
  os_unfair_lock_unlock(v4 + 14);
  sub_10000C6CC(a1, &qword_1007252E8);
  return v2;
}

uint64_t sub_10014A034(uint64_t a1, uint64_t a2)
{
  sub_10000C6CC(a1, &qword_1007252E0);
  sub_100048D6C(a2, (uint64_t)v9, &qword_1007252E8);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v5 = v11;
    NSString v6 = sub_10000C728(v9, v10);
    *((void *)&v13 + 1) = v4;
    uint64_t v14 = v5;
    uint64_t v7 = sub_10002C2D8((uint64_t *)&v12);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v9);
  }
  else
  {
    sub_10000C6CC((uint64_t)v9, &qword_1007252E8);
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v14 = 0;
  }
  return sub_1000BEA14((uint64_t)&v12, a1, &qword_1007252E0);
}

uint64_t sub_10014A12C(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[11] = v5;
  v2[12] = *(void *)(v5 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderRequest.Document.RequestType();
  v2[15] = v6;
  v2[16] = *(void *)(v6 - 8);
  v2[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileDocumentReaderRequest.Document();
  v2[18] = v7;
  v2[19] = *(void *)(v7 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_10014A388, 0, 0);
}

uint64_t sub_10014A388()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[19];
  uint64_t v5 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v6 = v0[15];
  MobileDocumentReaderRequest.document.getter();
  MobileDocumentReaderRequest.Document.requestType.getter();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[23] = v7;
  v0[24] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v1, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6) == enum case for MobileDocumentReaderRequest.Document.RequestType.dataTransfer(_:))
  {
    (*(void (**)(void, void))(v0[16] + 96))(v0[17], v0[15]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    defaultLogger()();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "MobileDocumentReaderIssuerRootStorage raw data request - no validation required. Returning an empty list of trusted issuer root certificates.", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = v0[14];
    uint64_t v12 = v0[11];
    uint64_t v13 = v0[12];

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    uint64_t v14 = _swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  uint64_t v15 = v0[21];
  uint64_t v16 = v0[18];
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  v0[2] = _swiftEmptyArrayStorage;
  MobileDocumentReaderRequest.document.getter();
  char v17 = MobileDocumentReaderRequest.Document.usesSystemTrustedIssuerCertificates.getter();
  v7(v15, v16);
  if (v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = (void *)swift_task_alloc();
    v0[25] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10014AA64;
    return sub_100147ECC();
  }
  uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[23];
  uint64_t v21 = v0[20];
  uint64_t v22 = v0[18];
  MobileDocumentReaderRequest.document.getter();
  unint64_t v23 = MobileDocumentReaderRequest.Document.additionalIssuerCertificates.getter();
  v20(v21, v22);
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v24)
    {
LABEL_11:
      uint64_t v43 = v0;
      uint64_t result = sub_100111504(0, v24 & ~(v24 >> 63), 0);
      if (v24 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v25 = 0;
      unint64_t v26 = v23 & 0xC000000000000001;
      unint64_t v27 = v23;
      do
      {
        if (v26) {
          uint64_t v28 = (__SecCertificate *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v28 = (__SecCertificate *)*(id *)(v23 + 8 * v25 + 32);
        }
        uint64_t v29 = v28;
        CFDataRef v30 = SecCertificateCopyData(v28);
        uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = v32;

        unint64_t v35 = _swiftEmptyArrayStorage[2];
        unint64_t v34 = _swiftEmptyArrayStorage[3];
        if (v35 >= v34 >> 1) {
          sub_100111504(v34 > 1, v35 + 1, 1);
        }
        ++v25;
        _swiftEmptyArrayStorage[2] = v35 + 1;
        uint64_t v36 = &_swiftEmptyArrayStorage[2 * v35];
        v36[4] = v31;
        v36[5] = v33;
        unint64_t v23 = v27;
      }
      while (v24 != v25);
      swift_bridgeObjectRelease();
      uint64_t v0 = v43;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease();
LABEL_22:
  sub_1001629E8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v14 = (void *)v0[2];
  if (v14[2])
  {
LABEL_23:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v37 = (uint64_t (*)(void *))v0[1];
    return v37(v14);
  }
  uint64_t v39 = v0[9];
  uint64_t v38 = v0[10];
  uint64_t v40 = v0[8];
  swift_bridgeObjectRelease();
  uint64_t v41 = *(void (**)(uint64_t, void, uint64_t))(v39 + 104);
  v41(v38, enum case for DIPError.Code.documentReaderInvalidRequest(_:), v40);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  v41(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v42 = (uint64_t (*)(void))v0[1];
  return v42();
}

uint64_t sub_10014AA64(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 208) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10014B050;
  }
  else
  {
    *(void *)(v4 + 216) = a1;
    uint64_t v5 = sub_10014AB8C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10014AB8C()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 216);
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v1[21];
  uint64_t v3 = v1[18];
  uint64_t v4 = v1[16];
  MobileDocumentReaderRequest.document.getter();
  unint64_t v5 = MobileDocumentReaderRequest.Document.additionalIssuerCertificates.getter();
  v2(v3, v4);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v6) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v6) {
      goto LABEL_13;
    }
  }
  uint64_t result = sub_100111504(0, v6 & ~(v6 >> 63), 0);
  if (v6 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = 0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0) {
      os_log_type_t v9 = (__SecCertificate *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      os_log_type_t v9 = (__SecCertificate *)*(id *)(v5 + 8 * v8 + 32);
    }
    uint64_t v10 = v9;
    CFDataRef v11 = SecCertificateCopyData(v9);
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1) {
      sub_100111504(v15 > 1, v16 + 1, 1);
    }
    ++v8;
    _swiftEmptyArrayStorage[2] = v16 + 1;
    char v17 = &_swiftEmptyArrayStorage[2 * v16];
    void v17[4] = v12;
    void v17[5] = v14;
  }
  while (v6 != v8);
LABEL_13:
  swift_bridgeObjectRelease();
  sub_1001629E8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = *v1;
  if (*(void *)(*v1 + 16))
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(uint64_t))v25[1];
    return v19(v18);
  }
  else
  {
    uint64_t v21 = v25[9];
    uint64_t v20 = v25[10];
    uint64_t v22 = v25[8];
    swift_bridgeObjectRelease();
    unint64_t v23 = *(void (**)(uint64_t, void, uint64_t))(v21 + 104);
    v23(v20, enum case for DIPError.Code.documentReaderInvalidRequest(_:), v22);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v23(v25[10], enum case for DIPError.Code.internalError(_:), v25[8]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v25[1];
    return v24();
  }
}

uint64_t sub_10014B050()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderIssuerRootStorage there was an issue fetching the trusted roots. Throwing session expired error to indicate the calling app must call prepare again.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[9];
  uint64_t v16 = v0[8];
  uint64_t v10 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v11 = v0[5];

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v7);
  type metadata accessor for DaemonAnalytics();
  uint64_t v12 = enum case for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.vicalMissing(_:);
  uint64_t v13 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v9, v12, v13);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.invalid(_:), v11);
  static DaemonAnalytics.sendReadDocumentSessionStatus(status:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  char v17 = *(void (**)(uint64_t, void, uint64_t))(v8 + 104);
  v17(v6, enum case for DIPError.Code.documentReaderSessionExpired(_:), v16);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  v17(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10014B438()
{
  v1[11] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  v1[15] = sub_100007764(&qword_100722D90);
  v1[16] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DaemonAnalytics.VICALFetchResult();
  v1[20] = v3;
  v1[21] = *(void *)(v3 - 8);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[24] = v4;
  v1[25] = *(void *)(v4 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  return _swift_task_switch(sub_10014B65C, 0, 0);
}

uint64_t sub_10014B65C()
{
  id v1 = [self standardUserDefaults];
  v2._object = (void *)0x800000010063ACC0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000030;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderIssuerRootStorage loadRemoteTrustedRoots disable VICAL fetch call flag is enabled, skipping call to fetch from network.", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[28];
    uint64_t v8 = v0[24];
    uint64_t v9 = v0[25];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    sub_100146BF4((uint64_t)(v0 + 2));
    sub_10000C728(v0 + 2, v0[5]);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[29] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10014B938;
    return sub_100448A34();
  }
}

uint64_t sub_10014B938(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 240) = v1;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v5 = sub_10014BBBC;
  }
  else
  {
    *(unsigned char *)(v4 + 264) = a1;
    os_log_type_t v5 = sub_10014BA60;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10014BA60()
{
  char v1 = *(unsigned char *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  os_log_type_t v5 = (unsigned int *)&enum case for DaemonAnalytics.VICALFetchResult.success(_:);
  if (v1) {
    os_log_type_t v5 = (unsigned int *)&enum case for DaemonAnalytics.VICALFetchResult.fromCache(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, *v5, v3);
  type metadata accessor for DaemonAnalytics();
  static DaemonAnalytics.sendVICALFetchedEvent(result:error:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10014BBBC()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  v0[31] = v0[30];
  char v1 = (void *)swift_task_alloc();
  v0[32] = v1;
  *char v1 = v0;
  v1[1] = sub_10014BC5C;
  return sub_100147B38();
}

uint64_t sub_10014BC5C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 265) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10014BD5C, 0, 0);
}

uint64_t sub_10014BD5C()
{
  if ((*(unsigned char *)(v0 + 265) & 1) == 0)
  {
    defaultLogger()();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "MobileDocumentReaderIssuerRootStorage there are no trusted system roots present to fall back to. Throwing error", v13, 2u);
      swift_slowDealloc();
    }
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 192);
    uint64_t v16 = *(void *)(v0 + 200);
    uint64_t v18 = *(void *)(v0 + 168);
    uint64_t v17 = *(void *)(v0 + 176);
    uint64_t v19 = *(void *)(v0 + 160);
    uint64_t v46 = *(void *)(v0 + 128);
    uint64_t v43 = *(void *)(v0 + 144);
    uint64_t v45 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 104);
    uint64_t v41 = *(void *)(v0 + 152);
    uint64_t v42 = *(void *)(v0 + 96);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    type metadata accessor for DaemonAnalytics();
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, enum case for DaemonAnalytics.VICALFetchResult.failure(_:), v19);
    swift_errorRetain();
    static DaemonAnalytics.sendVICALFetchedEvent(result:error:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    swift_getErrorValue();
    Error.dipErrorCode.getter();
    uint64_t v21 = *(void (**)(uint64_t, void, uint64_t))(v20 + 104);
    v21(v43, enum case for DIPError.Code.networkTimeOut(_:), v42);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v43, 0, 1, v42);
    uint64_t v22 = v46 + *(int *)(v45 + 48);
    sub_100048D6C(v41, v46, &qword_100723600);
    sub_100048D6C(v43, v22, &qword_100723600);
    unint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
    if (v23(v46, 1, v42) == 1)
    {
      uint64_t v24 = *(void *)(v0 + 152);
      uint64_t v25 = *(void *)(v0 + 96);
      sub_10000C6CC(*(void *)(v0 + 144), &qword_100723600);
      sub_10000C6CC(v24, &qword_100723600);
      if (v23(v22, 1, v25) == 1)
      {
        sub_10000C6CC(*(void *)(v0 + 128), &qword_100723600);
        uint64_t v26 = (unsigned int *)&enum case for DIPError.Code.internalError(_:);
LABEL_16:
        v21(*(void *)(v0 + 112), *v26, *(void *)(v0 + 96));
        swift_errorRetain();
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10014E5BC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(v0 + 96);
      sub_100048D6C(*(void *)(v0 + 128), *(void *)(v0 + 136), &qword_100723600);
      unsigned int v28 = v23(v22, 1, v27);
      uint64_t v30 = *(void *)(v0 + 144);
      uint64_t v29 = *(void *)(v0 + 152);
      uint64_t v31 = *(void *)(v0 + 136);
      if (v28 != 1)
      {
        uint64_t v47 = *(void *)(v0 + 128);
        uint64_t v35 = *(void *)(v0 + 104);
        uint64_t v34 = *(void *)(v0 + 112);
        uint64_t v44 = v21;
        uint64_t v36 = *(void *)(v0 + 96);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v34, v22, v36);
        sub_10014E5BC(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
        char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
        v38(v34, v36);
        sub_10000C6CC(v30, &qword_100723600);
        sub_10000C6CC(v29, &qword_100723600);
        uint64_t v39 = v36;
        uint64_t v21 = v44;
        v38(v31, v39);
        sub_10000C6CC(v47, &qword_100723600);
        if (v37)
        {
          uint64_t v26 = (unsigned int *)&enum case for DIPError.Code.internalError(_:);
          goto LABEL_16;
        }
LABEL_15:
        uint64_t v26 = (unsigned int *)&enum case for DIPError.Code.vicalCouldNotFetch(_:);
        goto LABEL_16;
      }
      uint64_t v32 = *(void *)(v0 + 96);
      uint64_t v33 = *(void *)(v0 + 104);
      sub_10000C6CC(*(void *)(v0 + 144), &qword_100723600);
      sub_10000C6CC(v29, &qword_100723600);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    }
    sub_10000C6CC(*(void *)(v0 + 128), &qword_100722D90);
    goto LABEL_15;
  }
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderIssuerRootStorage there are system roots to fallback to.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 160);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  type metadata accessor for DaemonAnalytics();
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, enum case for DaemonAnalytics.VICALFetchResult.fallback(_:), v9);
  swift_errorRetain();
  static DaemonAnalytics.sendVICALFetchedEvent(result:error:)();
  swift_errorRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
  return v10();
}

uint64_t sub_10014C51C()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[11] = v3;
  v1[12] = *(void *)(v3 - 8);
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_10014C638, 0, 0);
}

uint64_t sub_10014C638()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "MobileDocumentReaderIssuerRootStorage clearTrustedRoots", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[11];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100146BF4((uint64_t)(v0 + 2));
  sub_10000C728(v0 + 2, v0[5]);
  sub_10044AE14();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t type metadata accessor for MobileDocumentReaderIssuerRootStorage()
{
  return self;
}

uint64_t sub_10014C900(uint64_t a1)
{
  return sub_10014A034(a1, *(void *)(v1 + 16));
}

char *sub_10014C91C(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_100615040;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_10014CD08((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_10014CD08(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *uint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

unsigned char *sub_10014CC20@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_10014D31C(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_10014D3E0((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_10014D45C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_10014CC98(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_10014CD08(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_10014CDBC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          sub_100007764(&qword_100724000);
          uint64_t v8 = (void *)swift_allocObject();
          size_t v12 = j__malloc_size(v8);
          _OWORD v8[2] = v9;
          _OWORD v8[3] = 2 * v12 - 64;
        }
        sub_10002CEB0(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        sub_10000C5F4(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x10014CF68);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10014CF78@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_10014D004(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v30 = type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v6 = __chkstk_darwin(v30);
  uint64_t v8 = (double *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[3] = type metadata accessor for VICALTrustValidator();
  v33[4] = (uint64_t)&off_100708A38;
  uint64_t v15 = sub_10002C2D8(v33);
  sub_10014E490(a2, (uint64_t)v15);
  uint64_t v16 = &a3[OBJC_IVAR____TtC8coreidvd15VICALWebService_url];
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v31 = a1;
  v19(v16, a1, v17);
  sub_100030A10((uint64_t)v33, (uint64_t)&a3[OBJC_IVAR____TtC8coreidvd15VICALWebService_validator]);
  UUID.init()();
  uint64_t v20 = UUID.uuidString.getter();
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (qword_10071F560 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_1000443D4(v30, (uint64_t)qword_10072EB18);
  sub_10014E4F4(v23, (uint64_t)v10, type metadata accessor for DIPHTTPSession.Configuration);
  uint64_t v24 = (uint64_t *)&a3[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  *uint64_t v24 = v20;
  v24[1] = v22;
  sub_10014E4F4((uint64_t)v10, (uint64_t)v8, type metadata accessor for DIPHTTPSession.Configuration);
  type metadata accessor for DIPHTTPSession(0);
  swift_allocObject();
  uint64_t v25 = a3;
  *(void *)&v25[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession] = sub_1005D20EC(v8);

  uint64_t v26 = (objc_class *)type metadata accessor for DIPWebService();
  v32.receiver = v25;
  v32.super_class = v26;
  id v27 = [super init];
  sub_10014E55C((uint64_t)v10, type metadata accessor for DIPHTTPSession.Configuration);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v33);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v17);
  return v27;
}

uint64_t sub_10014D31C(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10014D3E0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_10014D45C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10014D4E0(uint64_t a1)
{
  uint64_t v9 = sub_100007764(&qword_100725340);
  uint64_t v10 = sub_1000B6120(&qword_100725348, &qword_100725340);
  v8[0] = a1;
  uint64_t v2 = sub_10000C728(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_10014CC20(v3, v4, &v7);
  uint64_t v5 = v7;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v8);
  return v5;
}

void *sub_10014D5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100007764(&qword_100725308);
  v19[3] = v8;
  v19[4] = sub_1000B6120(&qword_100725310, &qword_100725308);
  uint64_t v9 = (void *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  void v9[3] = a2;
  v9[4] = a3;
  void v9[5] = a4;
  uint64_t result = sub_10000C728(v19, v8);
  uint64_t v11 = result[2];
  uint64_t v12 = result[3] >> 1;
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = (unsigned char *)(result[1] + v11);
    uint64_t v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_10014CC20(v15, v16, &v18);
    uint64_t v17 = v18;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v19);
    return (void *)v17;
  }
  return result;
}

unsigned char *sub_10014D6A0(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)sub_10014D31C(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)sub_10014D3E0((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)sub_10014D45C((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_10014D704(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_10014D7A4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002CEB0(a1, a2);
  uint64_t v8 = sub_10014CDBC(a1, a2);
  uint64_t result = sub_10000C5F4(a1, a2);
  uint64_t v10 = v8[2];
  if (!v10)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v11 = (uint64_t)(v8 + 4);
  if (!*((unsigned char *)v8 + 32))
  {
    uint64_t v13 = 0;
    while (v10 - 1 != v13)
    {
      uint64_t v12 = v13 + 1;
      if (*((unsigned __int8 *)v8 + v13++ + 33)) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v12 = 0;
LABEL_7:
  uint64_t v15 = (2 * v10) | 1;
  swift_retain();
  defaultLogger()();
  swift_retain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v35 = v7;
    int v32 = v18;
    uint64_t v20 = v19;
    uint64_t v31 = swift_slowAlloc();
    uint64_t v37 = v31;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v34 = v4;
    swift_retain();
    uint64_t v21 = Array.description.getter();
    uint64_t v33 = v5;
    uint64_t v22 = v21;
    unint64_t v24 = v23;
    swift_release();
    uint64_t v36 = sub_100110D58(v22, v24, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    swift_retain();
    uint64_t v25 = ArraySlice.description.getter();
    uint64_t v26 = v15;
    unint64_t v28 = v27;
    swift_release();
    uint64_t v36 = sub_100110D58(v25, v28, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v15 = v26;
    uint64_t v11 = (uint64_t)(v8 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v32, "IssuerRevocationList trimmed %s to %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v34);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v29 = sub_10014D5A0((uint64_t)v8, v11, v12, v15);
  swift_release();
  return (uint64_t)v29;
}

uint64_t sub_10014DB24(uint64_t a1)
{
  uint64_t v73 = type metadata accessor for Logger();
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  Swift::String v70 = (char *)&v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for BigUIntCBOR();
  uint64_t v3 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v92 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_1007252F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for VICALCertificateInfo();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = a1;
  uint64_t v12 = VICALDocument.certificateInfos.getter();
  uint64_t v87 = *(void *)(v12 + 16);
  if (!v87)
  {
    os_log_type_t v17 = &_swiftEmptyDictionarySingleton;
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v60 = v70;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v95 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 136315138;
      swift_bridgeObjectRetain();
      sub_100007764(&qword_1007252F8);
      sub_10014E388();
      uint64_t v64 = Dictionary.description.getter();
      unint64_t v66 = v65;
      swift_bridgeObjectRelease();
      uint64_t v94 = sub_100110D58(v64, v66, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "IssuerRevocationList initialized with %s", v63, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v67 = type metadata accessor for VICALDocument();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8))(v71, v67);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v60, v73);
    return (uint64_t)v17;
  }
  uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
  uint64_t v13 = v9 + 16;
  unint64_t v85 = v12 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
  uint64_t v86 = v14;
  uint64_t v91 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v89 = v3 + 16;
  uint64_t v15 = *(void *)(v13 + 56);
  uint64_t v83 = (void (**)(char *, uint64_t))(v13 - 8);
  uint64_t v84 = v15;
  uint64_t v69 = v12;
  swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  os_log_type_t v17 = &_swiftEmptyDictionarySingleton;
  unint64_t v75 = v7;
  uint64_t v76 = v3;
  uint64_t v74 = v8;
  os_log_type_t v77 = v11;
  uint64_t v78 = v13;
  while (1)
  {
    uint64_t v88 = v16;
    v86(v11, v85 + v84 * v16, v8);
    VICALCertificateInfo.extensions.getter();
    uint64_t v18 = type metadata accessor for VICALCertificateInfo.Extensions();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v7, 1, v18) != 1) {
      break;
    }
    sub_10000C6CC((uint64_t)v7, &qword_1007252F0);
LABEL_4:
    uint64_t v16 = v88 + 1;
    (*v83)(v11, v8);
    if (v16 == v87)
    {
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
  }
  uint64_t v20 = VICALCertificateInfo.Extensions.certificateRevocationList.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v18);
  if (!v20) {
    goto LABEL_4;
  }
  uint64_t v21 = v92;
  VICALCertificateInfo.serialNumber.getter();
  uint64_t v22 = BigUIntCBOR.value.getter();
  unint64_t v24 = v23;
  id v90 = *v91;
  v90(v21, v93);
  uint64_t v82 = sub_10014D7A4(v22, v24);
  unint64_t v26 = v25;
  sub_10000C5F4(v22, v24);
  int64_t v27 = *(void *)(v20 + 16);
  if (v27)
  {
    unint64_t v80 = v26;
    uint64_t v81 = v17;
    uint64_t v95 = _swiftEmptyArrayStorage;
    sub_100111590(0, v27, 0);
    uint64_t v28 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v79 = v20;
    uint64_t v29 = v20 + ((v28 + 32) & ~v28);
    uint64_t v30 = *(void *)(v3 + 72);
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      uint64_t v33 = v92;
      uint64_t v32 = v93;
      v31(v92, v29, v93);
      uint64_t v34 = BigUIntCBOR.value.getter();
      unint64_t v36 = v35;
      uint64_t v37 = sub_10014D7A4(v34, v35);
      uint64_t v39 = v38;
      sub_10000C5F4(v34, v36);
      v90(v33, v32);
      uint64_t v40 = v95;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100111590(0, v40[2] + 1, 1);
        uint64_t v40 = v95;
      }
      unint64_t v42 = v40[2];
      unint64_t v41 = v40[3];
      if (v42 >= v41 >> 1)
      {
        sub_100111590(v41 > 1, v42 + 1, 1);
        uint64_t v40 = v95;
      }
      v40[2] = v42 + 1;
      uint64_t v43 = &v40[2 * v42];
      v43[4] = v37;
      v43[5] = v39;
      v29 += v30;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    unint64_t v26 = v80;
    os_log_type_t v17 = v81;
    uint64_t v7 = v75;
    uint64_t v3 = v76;
    uint64_t v8 = v74;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = _swiftEmptyArrayStorage;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v95 = v17;
  unint64_t v45 = v26;
  unint64_t v47 = sub_1005908C8(v82, v26);
  uint64_t v48 = v17[2];
  BOOL v49 = (v46 & 1) == 0;
  uint64_t v50 = v48 + v49;
  if (!__OFADD__(v48, v49))
  {
    char v51 = v46;
    if (v17[3] >= v50)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10016B660();
      }
      uint64_t v52 = v82;
      os_log_type_t v17 = v95;
      if ((v51 & 1) == 0) {
        goto LABEL_20;
      }
    }
    else
    {
      sub_1001664F4(v50, isUniquelyReferenced_nonNull_native);
      uint64_t v52 = v82;
      unint64_t v53 = sub_1005908C8(v82, v45);
      if ((v51 & 1) != (v54 & 1)) {
        goto LABEL_35;
      }
      unint64_t v47 = v53;
      os_log_type_t v17 = v95;
      if ((v51 & 1) == 0)
      {
LABEL_20:
        v17[(v47 >> 6) + 8] |= 1 << v47;
        uint64_t v55 = (uint64_t *)(v17[6] + 16 * v47);
        *uint64_t v55 = v52;
        v55[1] = v45;
        *(void *)(v17[7] + 8 * v47) = v40;
        uint64_t v56 = v17[2];
        BOOL v57 = __OFADD__(v56, 1);
        uint64_t v58 = v56 + 1;
        if (v57) {
          goto LABEL_34;
        }
        v17[2] = v58;
        sub_10002CEB0(v52, v45);
        goto LABEL_26;
      }
    }
    uint64_t v59 = v17[7];
    swift_bridgeObjectRelease();
    *(void *)(v59 + 8 * v47) = v40;
LABEL_26:
    swift_bridgeObjectRelease();
    sub_10000C5F4(v52, v45);
    uint64_t v11 = v77;
    goto LABEL_4;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_10014E388()
{
  unint64_t result = qword_100725300;
  if (!qword_100725300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100725300);
  }
  return result;
}

uint64_t sub_10014E3DC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

id sub_10014E414(void *a1)
{
  return sub_10014E42C(a1);
}

id sub_10014E42C(void *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t ObjectType = swift_getObjectType();
  sub_10000C6CC((uint64_t)a1, &qword_1007252E0);
  a1[3] = ObjectType;
  a1[4] = &off_100705770;
  *a1 = v3;
  return v3;
}

uint64_t sub_10014E490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VICALTrustValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014E4F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10014E55C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10014E5BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10014E604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  uint64_t result = sub_10014CC98((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10014E670, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_10014E670@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10014CF78(a1, a2);
}

ValueMetadata *type metadata accessor for IssuerRevocationList()
{
  return &type metadata for IssuerRevocationList;
}

uint64_t *initializeBufferWithCopyOfBuffer for IssuerRevocationList.SerialNumber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10002CEB0(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for IssuerRevocationList.SerialNumber(uint64_t a1)
{
  return sub_10000C5F4(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for IssuerRevocationList.SerialNumber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10002CEB0(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10000C5F4(v5, v6);
  return a1;
}

uint64_t *assignWithTake for IssuerRevocationList.SerialNumber(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000C5F4(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for IssuerRevocationList.SerialNumber(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IssuerRevocationList.SerialNumber(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IssuerRevocationList.SerialNumber()
{
  return &type metadata for IssuerRevocationList.SerialNumber;
}

unint64_t sub_10014E824()
{
  unint64_t result = qword_100725378;
  if (!qword_100725378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100725378);
  }
  return result;
}

char *sub_10014E87C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC8coreidvd28MobileDocumentReaderListener_listener;
  type metadata accessor for MobileDocumentReaderSession();
  uint64_t v8 = v0;
  static MobileDocumentReaderSession.machServiceName.getter();
  id v9 = objc_allocWithZone((Class)NSXPCListener);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithMachServiceName:v10];

  *(void *)&v1[v7] = v11;
  v21.receiver = v8;
  v21.super_class = ObjectType;
  uint64_t v12 = (char *)[super init];
  defaultLogger()();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v19 = sub_100110D58(0x292874696E69, 0xE600000000000000, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "MobileDocumentReaderListener %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v16 = *(void **)&v12[OBJC_IVAR____TtC8coreidvd28MobileDocumentReaderListener_listener];
  [v16 setDelegate:v12];
  id v17 = v16;
  [v17 activate];

  return v12;
}

id sub_10014EB50()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v13 = ObjectType;
    NSString v10 = (uint8_t *)v9;
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)NSString v10 = 136315138;
    uint64_t v14 = sub_100110D58(0x74696E696564, 0xE600000000000000, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "MobileDocumentReaderListener %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t ObjectType = v13;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  [*(id *)&v1[OBJC_IVAR____TtC8coreidvd28MobileDocumentReaderListener_listener] invalidate];
  v16.receiver = v1;
  v16.super_class = ObjectType;
  return [super dealloc];
}

uint64_t sub_10014ED98()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = v0;
    uint64_t v7 = (uint8_t *)v6;
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    uint64_t v13 = sub_100110D58(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderListener Remote proxy delegate did fail with error: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v12);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

uint64_t sub_10014EFCC()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = sub_100110D58(0xD000000000000026, 0x800000010063B0F0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderListener %s Connection interrupted", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_10014F1A0(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v17 = a1;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v18 = sub_100110D58(0xD000000000000026, 0x800000010063B0F0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "MobileDocumentReaderListener %s Connection invalidated", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v17;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a1;
  swift_retain();
  sub_10014043C((uint64_t)v4, (uint64_t)&unk_1007253D0, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_10014F454()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100025D64;
  return sub_10049F090();
}

uint64_t type metadata accessor for MobileDocumentReaderListener()
{
  return self;
}

BOOL sub_10014F568(objc_class *a1)
{
  uint64_t v2 = type metadata accessor for MobileDocumentReaderEntitlementChecker();
  uint64_t v34 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v30 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - v13;
  defaultLogger()();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v35 = v6;
  if (v17)
  {
    uint64_t v33 = v9;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v31 = a1;
    v37[0] = v19;
    uint64_t v32 = v2;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v36 = sub_100110D58(0xD000000000000017, 0x800000010063B160, v37);
    uint64_t v2 = v32;
    uint64_t v9 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "MobileDocumentReaderListener %s", v18, 0xCu);
    swift_arrayDestroy();
    a1 = v31;
    swift_slowDealloc();
    uint64_t v6 = v35;
    swift_slowDealloc();
  }

  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v14, v5);
  v37[3] = type metadata accessor for BundleRecordFetcher();
  v37[4] = (uint64_t)&protocol witness table for BundleRecordFetcher;
  sub_10002C2D8(v37);
  BundleRecordFetcher.init()();
  MobileDocumentReaderEntitlementChecker.init(bundleRecordFetcher:)();
  v38.value.super.Class isa = a1;
  Swift::Bool v21 = MobileDocumentReaderEntitlementChecker.checkInternalEntitlement(connection:)(v38);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v4, v2);
  if (v21)
  {
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v24 = 136315138;
      uint64_t v36 = sub_100110D58(0xD000000000000017, 0x800000010063B160, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "MobileDocumentReaderListener %s Internal entitlement present", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    unint64_t v25 = v12;
  }
  else
  {
    defaultLogger()();
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v36 = sub_100110D58(0xD000000000000017, 0x800000010063B160, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "MobileDocumentReaderListener %s No valid entitlements present", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    unint64_t v25 = v9;
  }
  v20(v25, v5);
  return v21;
}

uint64_t sub_10014FAE8(objc_class *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(objc_class **)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v55 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v55 - v13;
  defaultLogger()();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  BOOL v57 = v9;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v55 = a1;
    uint64_t v56 = v2;
    aBlocuint64_t k = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    v59[0] = sub_100110D58(0xD000000000000026, 0x800000010063B0F0, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "MobileDocumentReaderListener %s", v18, 0xCu);
    swift_arrayDestroy();
    a1 = v55;
    uint64_t v2 = v56;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v20 = (void (*)(char *, uint64_t))*((void *)v3 + 1);
  v20(v14, v2);
  if (!sub_10014F568(a1))
  {
    defaultLogger()();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      unint64_t v45 = (uint8_t *)swift_slowAlloc();
      aBlocuint64_t k = swift_slowAlloc();
      *(_DWORD *)unint64_t v45 = 136315138;
      v59[0] = sub_100110D58(0xD000000000000026, 0x800000010063B0F0, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "MobileDocumentReaderListener %s Insufficient entitlements, rejecting new connection", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    char v46 = v6;
    goto LABEL_14;
  }
  Swift::Bool v21 = self;
  id v22 = [v21 interfaceWithProtocol:&OBJC_PROTOCOL____TtP7CoreIDV29MobileDocumentReaderInterface_];
  [(objc_class *)a1 setExportedInterface:v22];

  id v23 = [v21 interfaceWithProtocol:&OBJC_PROTOCOL____TtP7CoreIDV37MobileDocumentReaderDelegateInterface_];
  [(objc_class *)a1 setRemoteObjectInterface:v23];

  uint64_t v64 = sub_10014ED98;
  id v65 = 0;
  aBlocuint64_t k = (uint64_t)_NSConcreteStackBlock;
  uint64_t v61 = 1107296256;
  os_log_type_t v62 = sub_1005938A8;
  uint64_t v63 = &unk_1006F9348;
  unint64_t v24 = _Block_copy(&aBlock);
  id v25 = [(objc_class *)a1 remoteObjectProxyWithErrorHandler:v24];
  _Block_release(v24);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  uint64_t v26 = sub_100007764(&qword_1007253B0);
  if (!swift_dynamicCast())
  {
    unint64_t v47 = v57;
    defaultLogger()();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v55 = v3;
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      aBlocuint64_t k = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136315138;
      v59[0] = v26;
      sub_100007764((uint64_t *)&unk_1007253B8);
      uint64_t v56 = v2;
      uint64_t v51 = String.init<A>(describing:)();
      v59[0] = sub_100110D58(v51, v52, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "MobileDocumentReaderListener Remote proxy could not be cast to %s", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v53 = v56;
      char v46 = v47;
LABEL_15:
      v20(v46, v53);
      return 0;
    }

    char v46 = v47;
LABEL_14:
    uint64_t v53 = v2;
    goto LABEL_15;
  }
  os_log_type_t v27 = a1;
  uint64_t v28 = v59[0];
  swift_unknownObjectRetain();
  v29._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
  v29._object = (void *)0x800000010063B120;
  Swift::Bool v30 = NSXPCConnection.isEntitled(_:)(v29);
  void v59[3] = type metadata accessor for BundleRecordFetcher();
  v59[4] = (uint64_t)&protocol witness table for BundleRecordFetcher;
  sub_10002C2D8(v59);
  BundleRecordFetcher.init()();
  uint64_t v63 = (void *)type metadata accessor for MobileDocumentReaderEntitlementChecker();
  uint64_t v64 = (uint64_t (*)())&protocol witness table for MobileDocumentReaderEntitlementChecker;
  sub_10002C2D8(&aBlock);
  MobileDocumentReaderEntitlementChecker.init(bundleRecordFetcher:)();
  uint64_t v31 = type metadata accessor for MobileDocumentReaderFlow();
  uint64_t v32 = (objc_class *)type metadata accessor for MobileDocumentReaderSessionProxy();
  uint64_t v33 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_OWORD *)(v33 + 160) = 0u;
  *(_OWORD *)(v33 + 176) = 0u;
  *(_OWORD *)(v33 + 128) = 0u;
  *(_OWORD *)(v33 + 144) = 0u;
  *(_OWORD *)(v33 + 112) = 0u;
  *(void *)(v33 + 192) = v28;
  sub_100030A10((uint64_t)&aBlock, v33 + 200);
  *(void *)(v33 + 240) = v31;
  *(void *)(v33 + 248) = &off_100705570;
  *(unsigned char *)(v33 + 256) = v30;
  v58.receiver = (id)v33;
  v58.super_class = v32;
  id v34 = [(objc_class *)&v58 init];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&aBlock);
  [(objc_class *)v27 setExportedObject:v34];
  uint64_t v64 = sub_10014EFCC;
  id v65 = 0;
  aBlocuint64_t k = (uint64_t)_NSConcreteStackBlock;
  uint64_t v61 = 1107296256;
  os_log_type_t v62 = sub_100593800;
  uint64_t v63 = &unk_1006F9370;
  uint64_t v35 = _Block_copy(&aBlock);
  [(objc_class *)v27 setInterruptionHandler:v35];
  _Block_release(v35);
  uint64_t v64 = sub_1001504BC;
  id v65 = v34;
  aBlocuint64_t k = (uint64_t)_NSConcreteStackBlock;
  uint64_t v61 = 1107296256;
  os_log_type_t v62 = sub_100593800;
  uint64_t v63 = &unk_1006F9398;
  uint64_t v36 = _Block_copy(&aBlock);
  id v37 = v34;
  swift_release();
  [(objc_class *)v27 setInvalidationHandler:v36];
  _Block_release(v36);
  [(objc_class *)v27 activate];
  defaultLogger()();
  NSXPCConnection_optional v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    BOOL v57 = v12;
    unint64_t v41 = (uint8_t *)v40;
    aBlocuint64_t k = swift_slowAlloc();
    *(_DWORD *)unint64_t v41 = 136315138;
    v59[0] = sub_100110D58(0xD000000000000026, 0x800000010063B0F0, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "MobileDocumentReaderListener %s Activating new connection", v41, 0xCu);
    uint64_t v42 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_unknownObjectRelease();

    (*((void (**)(char *, uint64_t))v3 + 1))(v57, v2);
  }
  else
  {

    swift_unknownObjectRelease();
    (*((void (**)(char *, uint64_t))v3 + 1))(v12, v2);
    return 1;
  }
  return v42;
}

uint64_t sub_1001504A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001504B4()
{
  return swift_release();
}

uint64_t sub_1001504BC()
{
  return sub_10014F1A0(v0);
}

uint64_t sub_1001504C4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100150504()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000C494;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100025D64;
  return sub_10049F090();
}

uint64_t sub_1001505E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, unsigned int *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  uint64_t v36 = a6;
  uint64_t v33 = a9;
  uint64_t v41 = a2;
  uint64_t v42 = a4;
  uint64_t v45 = a1;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  __chkstk_darwin(v11);
  id v37 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v40 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100007764(&qword_100720A70);
  __chkstk_darwin(v19 - 8);
  Swift::Bool v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for URLComponents();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  id v25 = (char *)&v32 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v41;
  uint64_t v44 = a3;
  swift_bridgeObjectRetain();
  v26._uint64_t countAndFlagsBits = 47;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = v42;
  v27._object = a5;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)();
  uint64_t v28 = v40;
  swift_bridgeObjectRelease();
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    Swift::String v29 = &qword_100720A70;
    uint64_t v30 = (uint64_t)v21;
LABEL_5:
    sub_10000C6CC(v30, v29);
    (*(void (**)(char *, void, uint64_t))(v34 + 104))(v37, *v36, v35);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
  URLComponents.url.getter();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v15, 1, v16) == 1)
  {
    Swift::String v29 = &qword_100720A68;
    uint64_t v30 = (uint64_t)v15;
    goto LABEL_5;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v33, v15, v16);
}

uint64_t sub_100150A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(void *)(v8 + 72) = a7;
  *(void *)(v8 + 80) = v7;
  *(unsigned char *)(v8 + 352) = a6;
  *(void *)(v8 + 56) = a4;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 40) = a2;
  *(void *)(v8 + 48) = a3;
  *(void *)(v8 + 32) = a1;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  *(void *)(v8 + 88) = v9;
  *(void *)(v8 + 96) = *(void *)(v9 - 8);
  *(void *)(v8 + 104) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 112) = v10;
  *(void *)(v8 + 120) = *(void *)(v10 - 8);
  *(void *)(v8 + 128) = swift_task_alloc();
  uint64_t v11 = sub_100007764(&qword_1007254C0);
  *(void *)(v8 + 136) = v11;
  *(void *)(v8 + 144) = *(void *)(v11 - 8);
  *(void *)(v8 + 152) = swift_task_alloc();
  sub_100007764(&qword_1007254C8);
  *(void *)(v8 + 160) = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_100723610);
  *(void *)(v8 + 168) = swift_task_alloc();
  *(void *)(v8 + 176) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for URLRequest();
  *(void *)(v8 + 184) = v12;
  *(void *)(v8 + 192) = *(void *)(v12 - 8);
  *(void *)(v8 + 200) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for URL();
  *(void *)(v8 + 208) = v13;
  *(void *)(v8 + 216) = *(void *)(v13 - 8);
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for DIPSignpost.Config();
  *(void *)(v8 + 240) = v14;
  *(void *)(v8 + 248) = *(void *)(v14 - 8);
  *(void *)(v8 + 256) = swift_task_alloc();
  *(void *)(v8 + 264) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for DIPSignpost();
  *(void *)(v8 + 272) = v15;
  *(void *)(v8 + 280) = *(void *)(v15 - 8);
  *(void *)(v8 + 288) = swift_task_alloc();
  *(void *)(v8 + 296) = swift_task_alloc();
  return _swift_task_switch(sub_100150E30, 0, 0);
}

uint64_t sub_100150E30()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v32 = *(void **)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  static DaemonSignposts.getStaticWorkflowRequest.getter();
  DIPSignpost.init(_:)();
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v6 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100610730;
  unint64_t v9 = v8 + v7;
  uint64_t v10 = (void *)(v9 + v6[14]);
  uint64_t v11 = enum case for DIPError.PropertyKey.spProviderID(_:);
  uint64_t v12 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v9, v11, v12);
  _OWORD v10[3] = &type metadata for String;
  *uint64_t v10 = 0x61746E6567616DLL;
  v10[1] = 0xE700000000000000;
  *(void *)(v0 + 304) = sub_10015C504(v8);
  sub_1001505E8(v2 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v5, v4, v3, v32, &enum case for DIPError.Code.invalidStaticWorkflowBaseURL(_:), 0xD000000000000020, 0x800000010063B850, v1);
  uint64_t v13 = *(void *)(v0 + 272);
  uint64_t v14 = *(void *)(v0 + 280);
  uint64_t v15 = *(void *)(v0 + 248);
  uint64_t v31 = *(void *)(v0 + 240);
  uint64_t v16 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 72);
  char v33 = *(unsigned char *)(v0 + 352);
  (*(void (**)(void, void, void))(*(void *)(v0 + 216) + 16))(*(void *)(v0 + 224), *(void *)(v0 + 232), *(void *)(v0 + 208));
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.cachePolicy.setter();
  URLRequest.httpMethod.setter();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v19(v16, 1, 1, v13);
  sub_10015A534(v18, v17);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v17, 1, v31) == 1)
  {
    sub_10000C6CC(*(void *)(v0 + 160), &qword_1007254C8);
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 264);
    uint64_t v21 = *(void *)(v0 + 272);
    uint64_t v23 = *(void *)(v0 + 248);
    uint64_t v22 = *(void *)(v0 + 256);
    uint64_t v24 = *(void *)(v0 + 240);
    uint64_t v26 = *(void *)(v0 + 168);
    uint64_t v25 = *(void *)(v0 + 176);
    (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v22, *(void *)(v0 + 160), v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v20, v22, v24);
    DIPSignpost.init(_:)();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    v19(v26, 0, 1, v21);
    sub_1000F0098(v26, v25);
  }
  char v27 = v33 & 1;
  uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 312) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_10015131C;
  uint64_t v29 = *(void *)(v0 + 200);
  return v34(v29, (uint64_t)&_swiftEmptyArrayStorage, v27, 0);
}

uint64_t sub_10015131C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = *v5;
  *(void *)(v6 + 320) = a1;
  *(void *)(v6 + 328) = a2;
  *(unsigned char *)(v6 + 353) = a4;
  *(void *)(v6 + 336) = a3;
  *(void *)(v6 + 344) = v4;
  swift_task_dealloc();
  if (v4) {
    unint64_t v7 = sub_100151C48;
  }
  else {
    unint64_t v7 = sub_100151438;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100151438()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 176);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1))
  {
    uint64_t v4 = *(void *)(v0 + 288);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v3, v1);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
  }
  if ((*(unsigned char *)(v0 + 352) & 1) == 0)
  {
    type metadata accessor for DaemonAnalytics();
    static DaemonAnalytics.sendStaticWorkflowFetchedEvent(workflowID:wasLoadedFromCache:)();
  }
  uint64_t v5 = *(void *)(v0 + 344);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10015AEF8(&qword_1007254D0, &qword_1007254C0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  char v6 = *(unsigned char *)(v0 + 353);
  if (v5)
  {
    if (*(unsigned char *)(v0 + 353))
    {
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      unint64_t v7 = (void *)qword_100760850;
      Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
      [v7 removeCachedResponseForRequest:isa];
    }
    unint64_t v9 = *(void *)(v0 + 328);
    char v54 = *(void **)(v0 + 336);
    uint64_t v56 = *(void *)(v0 + 320);
    unsigned int v59 = enum case for DIPError.Code.internalError(_:);
    objc_super v58 = *(void (**)(void))(*(void *)(v0 + 96) + 104);
    v58(*(void *)(v0 + 104));
    type metadata accessor for DIPError();
    sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();

    sub_10000C5F4(v56, v9);
    uint64_t v57 = *(void *)(v0 + 296);
    uint64_t v10 = *(void *)(v0 + 280);
    uint64_t v55 = *(void *)(v0 + 272);
    uint64_t v11 = *(void *)(v0 + 216);
    uint64_t v49 = *(void *)(v0 + 208);
    uint64_t v51 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 192);
    uint64_t v45 = *(void *)(v0 + 184);
    uint64_t v47 = *(void *)(v0 + 200);
    uint64_t v53 = *(void *)(v0 + 176);
    ((void (*)(void, void, void))v58)(*(void *)(v0 + 104), v59, *(void *)(v0 + 88));
    swift_allocError();
    swift_errorRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v47, v45);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v51, v49);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v57, v55);
    sub_10000C6CC(v53, (uint64_t *)&unk_100723610);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      unint64_t v14 = *(void *)(v0 + 328);
      uint64_t v15 = *(void **)(v0 + 336);
      uint64_t v16 = *(void *)(v0 + 320);
      uint64_t v17 = qword_100760850;
      id v18 = objc_allocWithZone((Class)NSCachedURLResponse);
      id v19 = v15;
      sub_10002CEB0(v16, v14);
      Class v20 = Data._bridgeToObjectiveC()().super.isa;
      id v21 = [v18 initWithResponse:v19 data:v20];
      sub_10000C5F4(v16, v14);

      id v22 = sub_1005200D8(v21, 0);
      if (v22)
      {
        uint64_t v23 = v22;
        Class v24 = URLRequest._bridgeToObjectiveC()().super.isa;
        uint64_t v25 = type metadata accessor for DIPURLCache();
        *(void *)(v0 + 16) = v17;
        *(void *)(v0 + 24) = v25;
        [((objc_super *)(v0 + 16)) storeCachedResponse:v23 forRequest:v24];
      }
      defaultLogger()();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Identity Proofing Static workflow response stored in the cache", v28, 2u);
        swift_slowDealloc();
      }
      uint64_t v30 = *(void *)(v0 + 120);
      uint64_t v29 = *(void *)(v0 + 128);
      uint64_t v31 = *(void *)(v0 + 112);

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    }
    unint64_t v32 = *(void *)(v0 + 328);
    uint64_t v33 = *(void *)(v0 + 320);
    uint64_t v34 = *(void *)(v0 + 280);
    uint64_t v52 = *(void *)(v0 + 296);
    uint64_t v46 = *(void *)(v0 + 232);
    uint64_t v35 = *(void *)(v0 + 216);
    uint64_t v43 = *(void **)(v0 + 336);
    uint64_t v44 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 192);
    uint64_t v42 = *(void *)(v0 + 200);
    uint64_t v37 = *(void *)(v0 + 184);
    uint64_t v48 = *(void *)(v0 + 176);
    uint64_t v50 = *(void *)(v0 + 272);
    uint64_t v38 = *(void *)(v0 + 152);
    uint64_t v39 = *(void *)(v0 + 136);
    uint64_t v40 = *(void *)(v0 + 144);
    JWSSignedJSON.payload.getter();
    sub_10000C5F4(v33, v32);

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v42, v37);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v46, v44);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v52, v50);
    sub_10000C6CC(v48, (uint64_t *)&unk_100723610);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v13();
}

uint64_t sub_100151C48()
{
  uint64_t v1 = v0[35];
  uint64_t v10 = v0[34];
  uint64_t v11 = v0[37];
  uint64_t v2 = v0[27];
  uint64_t v8 = v0[26];
  uint64_t v9 = v0[29];
  uint64_t v3 = v0[24];
  uint64_t v7 = v0[25];
  uint64_t v4 = v0[23];
  uint64_t v12 = v0[22];
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
  type metadata accessor for DIPError();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v8);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v11, v10);
  sub_10000C6CC(v12, (uint64_t *)&unk_100723610);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100151ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v5[18] = v9;
  v5[19] = *(void *)(v9 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  v5[22] = v10;
  v5[23] = *(void *)(v10 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  return _swift_task_switch(sub_10015217C, 0, 0);
}

void sub_10015217C()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[6];
  id v19 = (void *)v0[5];
  uint64_t v6 = v0[3];
  uint64_t v17 = v0[4];
  uint64_t v7 = v0[2];
  Date.init()();
  static Date.- infix(_:_:)();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[27] = v8;
  v0[28] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v1, v3);
  Date.init()();
  static Date.+ infix(_:_:)();
  v8(v1, v3);
  sub_1001505E8(v5 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v7, v6, v17, v19, &enum case for DIPError.Code.invalidStaticWorkflowBaseURL(_:), 0xD000000000000020, 0x800000010063B850, v4);
  (*(void (**)(void, void, void))(v0[19] + 32))(v0[21], v0[20], v0[18]);
  if (qword_10071F5A0 != -1) {
    swift_once();
  }
  uint64_t v10 = v0[23];
  uint64_t v9 = v0[24];
  uint64_t v11 = v0[22];
  uint64_t v13 = v0[16];
  uint64_t v12 = v0[17];
  unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v14(v12, v0[26], v11);
  uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56);
  v15(v12, 0, 1, v11);
  v14(v13, v9, v11);
  v15(v13, 0, 1, v11);
  id v18 = (char *)&dword_100731FB8 + dword_100731FB8;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[29] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1001527D0;
  __asm { BR              X8; sub_100524290 }
}

uint64_t sub_1001527D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  uint64_t v2 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000C6CC(v2, &qword_1007239B0);
  sub_10000C6CC(v1, &qword_1007239B0);
  return _swift_task_switch(sub_10015AFA8, 0, 0);
}

uint64_t sub_100152978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  sub_100007764(&qword_1007254C8);
  v5[13] = swift_task_alloc();
  type metadata accessor for IdentityProofingStaticWorkflow(0);
  v5[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[15] = v8;
  v5[16] = *(void *)(v8 - 8);
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  return _swift_task_switch(sub_100152B70, 0, 0);
}

uint64_t sub_100152B70()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Refreshing static workflow cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[16];
  uint64_t v7 = v0[13];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[20] = v8;
  v0[21] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  uint64_t v9 = type metadata accessor for DIPSignpost.Config();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[22] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100152D0C;
  uint64_t v12 = v0[13];
  uint64_t v11 = v0[14];
  uint64_t v13 = v0[5];
  uint64_t v14 = v0[6];
  uint64_t v15 = v0[3];
  uint64_t v16 = v0[4];
  return sub_100150A94(v11, v15, v16, v13, v14, 1, v12);
}

uint64_t sub_100152D0C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  sub_10000C6CC(v3, &qword_1007254C8);
  if (v0)
  {
    uint64_t v4 = sub_100152FA8;
  }
  else
  {
    sub_10015AF48(*(void *)(v2 + 112), type metadata accessor for IdentityProofingStaticWorkflow);
    uint64_t v4 = sub_100152E68;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100152E68()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done refreshing static workflow cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[15];

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100152FA8()
{
  id v19 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v17 = v0[10];
  uint64_t v18 = v0[15];
  uint64_t v4 = v0[8];
  uint64_t v15 = v0[7];
  uint64_t v16 = v0[12];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v5 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100610730;
  unint64_t v8 = v7 + v6;
  unint64_t v9 = v8 + v5[14];
  uint64_t v10 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v8, v10, v11);
  *(void *)(v9 + 24) = &type metadata for DIPState;
  *(unsigned char *)unint64_t v9 = 9;
  swift_errorRetain();
  sub_10015C504(v7);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v15);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v12, v16, v17);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v19(v1, v18);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v16, v17);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1001532EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v7 + 104) = a6;
  *(void *)(v7 + 112) = v6;
  *(unsigned char *)(v7 + 400) = a5;
  *(void *)(v7 + 88) = a3;
  *(void *)(v7 + 96) = a4;
  *(void *)(v7 + 72) = a1;
  *(void *)(v7 + 80) = a2;
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v7 + 120) = v8;
  *(void *)(v7 + 128) = *(void *)(v8 - 8);
  *(void *)(v7 + 136) = swift_task_alloc();
  *(void *)(v7 + 144) = swift_task_alloc();
  uint64_t v9 = sub_100007764(&qword_100725510);
  *(void *)(v7 + 152) = v9;
  *(void *)(v7 + 160) = *(void *)(v9 - 8);
  *(void *)(v7 + 168) = swift_task_alloc();
  *(void *)(v7 + 176) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPError.Code();
  *(void *)(v7 + 184) = v10;
  *(void *)(v7 + 192) = *(void *)(v10 - 8);
  *(void *)(v7 + 200) = swift_task_alloc();
  sub_100007764(&qword_1007254C8);
  *(void *)(v7 + 208) = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_100723610);
  *(void *)(v7 + 216) = swift_task_alloc();
  *(void *)(v7 + 224) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URLRequest();
  *(void *)(v7 + 232) = v11;
  *(void *)(v7 + 240) = *(void *)(v11 - 8);
  *(void *)(v7 + 248) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for URL();
  *(void *)(v7 + 256) = v12;
  *(void *)(v7 + 264) = *(void *)(v12 - 8);
  *(void *)(v7 + 272) = swift_task_alloc();
  *(void *)(v7 + 280) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for DIPSignpost.Config();
  *(void *)(v7 + 288) = v13;
  *(void *)(v7 + 296) = *(void *)(v13 - 8);
  *(void *)(v7 + 304) = swift_task_alloc();
  *(void *)(v7 + 312) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for DIPSignpost();
  *(void *)(v7 + 320) = v14;
  *(void *)(v7 + 328) = *(void *)(v14 - 8);
  *(void *)(v7 + 336) = swift_task_alloc();
  *(void *)(v7 + 344) = swift_task_alloc();
  return _swift_task_switch(sub_1001536A4, 0, 0);
}

uint64_t sub_1001536A4()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  unint64_t v32 = *(void **)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  static DaemonSignposts.getStaticAssetRequest.getter();
  DIPSignpost.init(_:)();
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v6 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100610730;
  unint64_t v9 = v8 + v7;
  uint64_t v10 = (void *)(v9 + v6[14]);
  uint64_t v11 = enum case for DIPError.PropertyKey.spProviderID(_:);
  uint64_t v12 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v9, v11, v12);
  _OWORD v10[3] = &type metadata for String;
  *uint64_t v10 = 0x61746E6567616DLL;
  v10[1] = 0xE700000000000000;
  *(void *)(v0 + 352) = sub_10015C504(v8);
  sub_1001505E8(v2 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v5, v4, v3, v32, &enum case for DIPError.Code.invalidStaticAssetsBaseURL(_:), 0xD00000000000001ELL, 0x800000010063BAB0, v1);
  uint64_t v13 = *(void *)(v0 + 320);
  uint64_t v14 = *(void *)(v0 + 328);
  uint64_t v15 = *(void *)(v0 + 296);
  uint64_t v31 = *(void *)(v0 + 288);
  uint64_t v16 = *(void *)(v0 + 224);
  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v18 = *(void *)(v0 + 104);
  char v33 = *(unsigned char *)(v0 + 400);
  (*(void (**)(void, void, void))(*(void *)(v0 + 264) + 16))(*(void *)(v0 + 272), *(void *)(v0 + 280), *(void *)(v0 + 256));
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.cachePolicy.setter();
  URLRequest.httpMethod.setter();
  id v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v19(v16, 1, 1, v13);
  sub_10015A534(v18, v17);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v17, 1, v31) == 1)
  {
    sub_10000C6CC(*(void *)(v0 + 208), &qword_1007254C8);
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 312);
    uint64_t v21 = *(void *)(v0 + 320);
    uint64_t v23 = *(void *)(v0 + 296);
    uint64_t v22 = *(void *)(v0 + 304);
    uint64_t v24 = *(void *)(v0 + 288);
    uint64_t v26 = *(void *)(v0 + 216);
    uint64_t v25 = *(void *)(v0 + 224);
    (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v22, *(void *)(v0 + 208), v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v20, v22, v24);
    DIPSignpost.init(_:)();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    v19(v26, 0, 1, v21);
    sub_1000F0098(v26, v25);
  }
  char v27 = v33 & 1;
  uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 360) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_100153BAC;
  uint64_t v29 = *(void *)(v0 + 248);
  return v34(v29, (uint64_t)_swiftEmptyArrayStorage, v27, 0);
}

uint64_t sub_100153BAC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = *v5;
  *(void *)(v6 + 368) = a1;
  *(void *)(v6 + 376) = a2;
  *(unsigned char *)(v6 + 401) = a4;
  *(void *)(v6 + 384) = a3;
  *(void *)(v6 + 392) = v4;
  swift_task_dealloc();
  if (v4) {
    unint64_t v7 = sub_10015469C;
  }
  else {
    unint64_t v7 = sub_100153CC8;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100153CC8()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 224);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  unint64_t v5 = *(void *)(v0 + 376);
  uint64_t v6 = *(void **)(v0 + 384);
  uint64_t v7 = *(void *)(v0 + 368);
  if (v4)
  {
    sub_10002CEB0(*(void *)(v0 + 368), *(void *)(v0 + 376));
    id v8 = v6;
    if (*(unsigned char *)(v0 + 400)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v21 = *(void *)(v0 + 336);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v21, v3, v1);
  sub_10002CEB0(v7, v5);
  id v22 = v6;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v21, v1);
  if ((*(unsigned char *)(v0 + 400) & 1) == 0)
  {
LABEL_3:
    type metadata accessor for DaemonAnalytics();
    static DaemonAnalytics.sendStaticAssetFetchedEvent(wasLoadedFromCache:)();
  }
LABEL_4:
  uint64_t v9 = *(void *)(v0 + 392);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10015AEF8(&qword_100725518, &qword_100725510);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  int v10 = *(unsigned __int8 *)(v0 + 401);
  if (v9)
  {
    unint64_t v11 = *(void *)(v0 + 376);
    uint64_t v12 = *(void *)(v0 + 368);

    sub_10000C5F4(v12, v11);
    swift_release();
    if (v10)
    {
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      uint64_t v13 = (void *)qword_100760850;
      Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
      [v13 removeCachedResponseForRequest:isa];
    }
    unint64_t v83 = *(void *)(v0 + 376);
    uint64_t v81 = *(void **)(v0 + 384);
    uint64_t v82 = *(void *)(v0 + 368);
    uint64_t v15 = *(void *)(v0 + 328);
    uint64_t v87 = *(void *)(v0 + 320);
    uint64_t v89 = *(void *)(v0 + 344);
    uint64_t v16 = *(void *)(v0 + 264);
    uint64_t v84 = *(void *)(v0 + 256);
    uint64_t v85 = *(void *)(v0 + 280);
    uint64_t v17 = *(void *)(v0 + 240);
    uint64_t v80 = *(void *)(v0 + 248);
    uint64_t v18 = *(void *)(v0 + 232);
    uint64_t v86 = *(void *)(v0 + 224);
    (*(void (**)(void, void, void))(*(void *)(v0 + 192) + 104))(*(void *)(v0 + 200), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 184));
    type metadata accessor for DIPError();
    sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    swift_errorRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();

    sub_10000C5F4(v82, v83);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v80, v18);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v85, v84);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v89, v87);
    sub_10000C6CC(v86, (uint64_t *)&unk_100723610);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    if (v10)
    {
      unint64_t v23 = *(void *)(v0 + 376);
      uint64_t v24 = *(void *)(v0 + 368);

      sub_10000C5F4(v24, v23);
    }
    else
    {
      if (qword_10071F5A0 != -1) {
        swift_once();
      }
      unint64_t v25 = *(void *)(v0 + 376);
      uint64_t v26 = *(void **)(v0 + 384);
      uint64_t v27 = *(void *)(v0 + 368);
      uint64_t v28 = qword_100760850;
      id v29 = objc_allocWithZone((Class)NSCachedURLResponse);
      sub_10002CEB0(v27, v25);
      id v30 = v26;
      Class v31 = Data._bridgeToObjectiveC()().super.isa;
      id v32 = [v29 initWithResponse:v30 data:v31];
      sub_10000C5F4(v27, v25);

      id v33 = sub_1005200D8(v32, 0);
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v36 = *(void *)(v0 + 368);
        unint64_t v35 = *(void *)(v0 + 376);
        Class v37 = URLRequest._bridgeToObjectiveC()().super.isa;
        uint64_t v38 = type metadata accessor for DIPURLCache();
        *(void *)(v0 + 48) = v28;
        *(void *)(v0 + 56) = v38;
        [((objc_super *)(v0 + 48)) storeCachedResponse:v34 forRequest:v37];

        uint64_t v39 = v36;
        unint64_t v40 = v35;
      }
      else
      {
        uint64_t v42 = *(void *)(v0 + 368);
        unint64_t v41 = *(void *)(v0 + 376);

        uint64_t v39 = v42;
        unint64_t v40 = v41;
      }
      sub_10000C5F4(v39, v40);

      defaultLogger()();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Identity Proofing Static asset response stored in the cache", v45, 2u);
        swift_slowDealloc();
      }
      uint64_t v46 = *(void *)(v0 + 144);
      uint64_t v47 = *(void *)(v0 + 120);
      uint64_t v48 = *(void *)(v0 + 128);

      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    }
    uint64_t v49 = *(void *)(v0 + 168);
    uint64_t v50 = *(void *)(v0 + 176);
    uint64_t v51 = *(void *)(v0 + 152);
    uint64_t v52 = *(void *)(v0 + 160);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v49, v50, v51);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 134217984;
      JWSSignedJSON.payload.getter();
      swift_bridgeObjectRelease();
      uint64_t v56 = *(void *)(v0 + 40);
      if (v56)
      {
        uint64_t v57 = *(void *)(v56 + 16);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v57 = 0;
      }
      uint64_t v88 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 160) + 8);
      v88(*(void *)(v0 + 168), *(void *)(v0 + 152));
      *(void *)(v0 + 64) = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Image assets count -> %ld", v55, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      uint64_t v88 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 160) + 8);
      v88(*(void *)(v0 + 168), *(void *)(v0 + 152));
    }
    objc_super v58 = v53;
    Swift::String v70 = *(void **)(v0 + 384);
    uint64_t v79 = *(void *)(v0 + 344);
    uint64_t v59 = *(void *)(v0 + 328);
    uint64_t v78 = *(void *)(v0 + 320);
    uint64_t v76 = *(void *)(v0 + 280);
    uint64_t v60 = *(void *)(v0 + 264);
    unint64_t v74 = *(void *)(v0 + 376);
    uint64_t v75 = *(void *)(v0 + 256);
    uint64_t v61 = *(void *)(v0 + 240);
    uint64_t v72 = *(void *)(v0 + 368);
    uint64_t v73 = *(void *)(v0 + 248);
    uint64_t v71 = *(void *)(v0 + 232);
    uint64_t v77 = *(void *)(v0 + 224);
    uint64_t v62 = *(void *)(v0 + 176);
    uint64_t v63 = *(void *)(v0 + 152);
    uint64_t v65 = *(void *)(v0 + 128);
    uint64_t v64 = *(void *)(v0 + 136);
    uint64_t v66 = *(void *)(v0 + 120);

    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
    JWSSignedJSON.payload.getter();

    sub_10000C5F4(v72, v74);
    v88(v62, v63);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v73, v71);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v76, v75);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v79, v78);
    uint64_t v67 = *(void *)(v0 + 16);
    uint64_t v68 = *(void *)(v0 + 24);
    sub_10000C6CC(v77, (uint64_t *)&unk_100723610);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v69 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v69(v67, v68);
  }
}

uint64_t sub_10015469C()
{
  uint64_t v1 = v0[41];
  uint64_t v11 = v0[40];
  uint64_t v12 = v0[43];
  uint64_t v2 = v0[33];
  uint64_t v8 = v0[32];
  uint64_t v9 = v0[35];
  uint64_t v3 = v0[30];
  uint64_t v7 = v0[31];
  uint64_t v4 = v0[29];
  uint64_t v10 = v0[28];
  (*(void (**)(void, void, void))(v0[24] + 104))(v0[25], enum case for DIPError.Code.internalError(_:), v0[23]);
  type metadata accessor for DIPError();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v8);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v12, v11);
  sub_10000C6CC(v10, (uint64_t *)&unk_100723610);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100154948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v5[18] = v9;
  v5[19] = *(void *)(v9 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  v5[22] = v10;
  v5[23] = *(void *)(v10 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  return _swift_task_switch(sub_100154BEC, 0, 0);
}

void sub_100154BEC()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[6];
  id v19 = (void *)v0[5];
  uint64_t v6 = v0[3];
  uint64_t v17 = v0[4];
  uint64_t v7 = v0[2];
  Date.init()();
  static Date.- infix(_:_:)();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[27] = v8;
  v0[28] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v1, v3);
  Date.init()();
  static Date.+ infix(_:_:)();
  v8(v1, v3);
  sub_1001505E8(v5 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v7, v6, v17, v19, &enum case for DIPError.Code.invalidStaticAssetsBaseURL(_:), 0xD00000000000001ELL, 0x800000010063BAB0, v4);
  (*(void (**)(void, void, void))(v0[19] + 32))(v0[21], v0[20], v0[18]);
  if (qword_10071F5A0 != -1) {
    swift_once();
  }
  uint64_t v10 = v0[23];
  uint64_t v9 = v0[24];
  uint64_t v11 = v0[22];
  uint64_t v13 = v0[16];
  uint64_t v12 = v0[17];
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v14(v12, v0[26], v11);
  uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56);
  v15(v12, 0, 1, v11);
  v14(v13, v9, v11);
  v15(v13, 0, 1, v11);
  uint64_t v18 = (char *)&dword_100731FB0 + dword_100731FB0;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[29] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_100155240;
  __asm { BR              X8; sub_100525ADC }
}

uint64_t sub_100155240()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  uint64_t v2 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000C6CC(v2, &qword_1007239B0);
  sub_10000C6CC(v1, &qword_1007239B0);
  return _swift_task_switch(sub_1001553E8, 0, 0);
}

uint64_t sub_1001553E8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[27];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[22];
  (*(void (**)(void, void))(v0[19] + 8))(v0[21], v0[18]);
  v1(v3, v4);
  v1(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100155504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  sub_100007764(&qword_1007254C8);
  v5[13] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[14] = v8;
  v5[15] = *(void *)(v8 - 8);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  return _swift_task_switch(sub_1001556DC, 0, 0);
}

uint64_t sub_1001556DC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Refreshing static asset cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[13];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[20] = v8;
  v0[21] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  uint64_t v9 = type metadata accessor for DIPSignpost.Config();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[22] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100155878;
  uint64_t v11 = v0[13];
  uint64_t v12 = v0[5];
  uint64_t v13 = v0[6];
  uint64_t v15 = v0[3];
  uint64_t v14 = v0[4];
  return sub_1001532EC(v15, v14, v12, v13, 1, v11);
}

uint64_t sub_100155878(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 104);
  v4[23] = a1;
  v4[24] = a2;
  v4[25] = v2;
  swift_task_dealloc();
  sub_10000C6CC(v5, &qword_1007254C8);
  if (v2) {
    uint64_t v6 = sub_100155D60;
  }
  else {
    uint64_t v6 = sub_1001559B8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001559B8()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done refreshing static asset cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[14];

  v4(v5, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[26] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100155AF0;
  uint64_t v9 = v0[23];
  uint64_t v8 = v0[24];
  return sub_1001560A0(v9, v8);
}

uint64_t sub_100155AF0()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100155C24, 0, 0);
}

uint64_t sub_100155C24()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done refreshing precache config data", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[14];

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100155D60()
{
  id v19 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v17 = v0[10];
  uint64_t v18 = v0[14];
  uint64_t v4 = v0[8];
  uint64_t v15 = v0[7];
  uint64_t v16 = v0[12];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v5 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100610730;
  unint64_t v8 = v7 + v6;
  unint64_t v9 = v8 + v5[14];
  uint64_t v10 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v8, v10, v11);
  *(void *)(v9 + 24) = &type metadata for DIPState;
  *(unsigned char *)unint64_t v9 = 9;
  swift_errorRetain();
  sub_10015C504(v7);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v15);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v12, v16, v17);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v19(v1, v18);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v16, v17);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1001560A0(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_1001561D0, 0, 0);
}

uint64_t sub_1001561D0()
{
  uint64_t v38 = v0;
  uint64_t v1 = (void *)v0[7];
  if (v1)
  {
    uint64_t v2 = v0[8];
    if (v2)
    {
      uint64_t v3 = v1[2];
      v0[17] = v3;
      if (!v3)
      {
        defaultLogger()();
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Downloading precached config data complete", v16, 2u);
          swift_slowDealloc();
        }
        uint64_t v17 = v0[13];
        uint64_t v18 = v0[10];
        uint64_t v19 = v0[11];

        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
        goto LABEL_20;
      }
      uint64_t v5 = v1[4];
      uint64_t v4 = (void *)v1[5];
      uint64_t v6 = *(void *)(v2 + 16);
      swift_bridgeObjectRetain();
      if (v6)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v7 = sub_100590548(v5, (uint64_t)v4);
        if (v8)
        {
          v0[18] = 1;
          unint64_t v9 = (uint64_t *)(*(void *)(v0[8] + 56) + 32 * v7);
          uint64_t v11 = *v9;
          uint64_t v10 = v9[1];
          v0[19] = v10;
          v0[20] = v9[2];
          v0[21] = v9[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n();
          uint64_t v12 = (void *)swift_task_alloc();
          v0[22] = v12;
          *uint64_t v12 = v0;
          v12[1] = sub_1001568EC;
          return sub_1001575E8(v11, v10);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v21 = v0[15];
      uint64_t v20 = v0[16];
      uint64_t v22 = v0[14];
      _StringGuts.grow(_:)(49);
      swift_bridgeObjectRelease();
      v37[0] = 0x3E2D207465737361;
      v37[1] = 0xE900000000000020;
      v23._uint64_t countAndFlagsBits = v5;
      v23._object = v4;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = 0xD000000000000026;
      v24._object = (void *)0x800000010063BBA0;
      String.append(_:)(v24);
      (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v20, enum case for DIPError.Code.internalError(_:), v22);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
    else
    {
      (*(void (**)(void, void, void))(v0[15] + 104))(v0[16], enum case for DIPError.Code.imageAssetsUnavailable(_:), v0[14]);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
    }
  }
  else
  {
    (*(void (**)(void, void, void))(v0[15] + 104))(v0[16], enum case for DIPError.Code.precachedConfigDoesntExist(_:), v0[14]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
  }
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v29 = v0[11];
  uint64_t v28 = v0[12];
  uint64_t v30 = v0[10];
  if (v27)
  {
    uint64_t v36 = v0[12];
    uint64_t v35 = v0[10];
    Class v31 = (uint8_t *)swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)Class v31 = 136315138;
    swift_getErrorValue();
    uint64_t v32 = Error.localizedDescription.getter();
    v0[6] = sub_100110D58(v32, v33, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to download the precached config %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v36, v35);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  }
LABEL_20:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = (uint64_t (*)(void))v0[1];
  return v34();
}

uint64_t sub_1001568EC(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[23] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_100157130, 0, 0);
  }
  else
  {
    sub_10000C5F4(a1, a2);
    unint64_t v7 = (void *)swift_task_alloc();
    v6[24] = v7;
    *unint64_t v7 = v6;
    v7[1] = sub_100156A88;
    uint64_t v8 = v6[21];
    uint64_t v9 = v6[20];
    return sub_1001575E8(v9, v8);
  }
}

uint64_t sub_100156A88(uint64_t a1, unint64_t a2)
{
  *(void *)(*(void *)v3 + 200) = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_10015738C;
  }
  else
  {
    sub_10000C5F4(a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_100156BD8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100156BD8()
{
  Class v37 = v0;
  uint64_t v1 = v0[18];
  if (v1 == v0[17])
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Downloading precached config data complete", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[13];
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[11];

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    goto LABEL_14;
  }
  uint64_t v8 = v0[7] + 16 * v1;
  uint64_t v10 = *(void *)(v8 + 32);
  uint64_t v9 = *(void **)(v8 + 40);
  uint64_t v11 = *(void *)(v0[8] + 16);
  swift_bridgeObjectRetain();
  if (!v11)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v20 = v0[15];
    uint64_t v19 = v0[16];
    uint64_t v21 = v0[14];
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v36[0] = 0x3E2D207465737361;
    v36[1] = 0xE900000000000020;
    v22._uint64_t countAndFlagsBits = v10;
    v22._object = v9;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 0xD000000000000026;
    v23._object = (void *)0x800000010063BBA0;
    String.append(_:)(v23);
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v19, enum case for DIPError.Code.internalError(_:), v21);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    Swift::String v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v28 = v0[11];
    uint64_t v27 = v0[12];
    uint64_t v29 = v0[10];
    if (v26)
    {
      uint64_t v35 = v0[12];
      uint64_t v34 = v0[10];
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_getErrorValue();
      uint64_t v31 = Error.localizedDescription.getter();
      v0[6] = sub_100110D58(v31, v32, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to download the precached config %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v35, v34);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    }
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v33 = (uint64_t (*)(void))v0[1];
    return v33();
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_100590548(v10, (uint64_t)v9);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v0[18] = v1 + 1;
  uint64_t v14 = (uint64_t *)(*(void *)(v0[8] + 56) + 32 * v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  v0[19] = v15;
  v0[20] = v14[2];
  v0[21] = v14[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[22] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_1001568EC;
  return sub_1001575E8(v16, v15);
}

uint64_t sub_100157130()
{
  uint64_t v15 = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[10];
    uint64_t v13 = v0[12];
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[6] = sub_100110D58(v4, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to download the precached config %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  }
  else
  {
    uint64_t v7 = v0[11];
    uint64_t v6 = v0[12];
    uint64_t v8 = v0[10];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10015738C()
{
  uint64_t v15 = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[10];
    uint64_t v13 = v0[12];
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[6] = sub_100110D58(v4, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to download the precached config %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  }
  else
  {
    uint64_t v7 = v0[11];
    uint64_t v6 = v0[12];
    uint64_t v8 = v0[10];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001575E8(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  sub_100007764(&qword_100720A68);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[13] = v6;
  v3[14] = *(void *)(v6 - 8);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_100157794, 0, 0);
}

uint64_t sub_100157794()
{
  Swift::String v23 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = v0[14];
    uint64_t v20 = v0[13];
    uint64_t v21 = v0[15];
    unint64_t v3 = v0[4];
    uint64_t v4 = v0[3];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_100110D58(v4, v3, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Attempting to download for url %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  }
  else
  {
    uint64_t v7 = v0[14];
    uint64_t v6 = v0[15];
    uint64_t v8 = v0[13];
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  URL.init(string:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
  {
    uint64_t v12 = v0[8];
    uint64_t v13 = v0[6];
    uint64_t v14 = v0[7];
    sub_10000C6CC(v0[9], &qword_100720A68);
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v12, enum case for DIPError.Code.invalidImageAssetDownloadURL(_:), v13);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[11] + 32))(v0[12], v0[9], v0[10]);
    uint64_t v17 = (void *)swift_task_alloc();
    v0[16] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100157B9C;
    uint64_t v18 = v0[12];
    return sub_100157F4C(v18);
  }
}

uint64_t sub_100157B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 136) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100157D7C;
  }
  else
  {
    *(void *)(v6 + 144) = a2;
    *(void *)(v6 + 152) = a1;
    uint64_t v7 = sub_100157CD0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100157CD0()
{
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  return v1(v2, v3);
}

uint64_t sub_100157D7C()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100157F4C(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URLRequest();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[14] = v5;
  v2[15] = *(void *)(v5 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v2[19] = v6;
  v2[20] = *(void *)(v6 - 8);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_10015814C, 0, 0);
}

uint64_t sub_10015814C()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  defaultLogger()();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[23] = v5;
  v0[24] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v2, v1, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    log = v6;
    uint64_t v23 = v0[20];
    uint64_t v8 = v0[18];
    uint64_t v24 = v0[19];
    uint64_t v25 = v0[22];
    uint64_t v9 = v0[15];
    uint64_t v21 = v0[14];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v11 = URL.absoluteString.getter();
    v0[5] = sub_100110D58(v11, v12, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v13(v8, v21);
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Will attempt to download and cache the asset data for url %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v14(v25, v24);
  }
  else
  {
    uint64_t v15 = v0[22];
    uint64_t v16 = v0[19];
    uint64_t v17 = v0[20];
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0[15] + 8);
    v13(v0[18], v0[14]);

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v14(v15, v16);
  }
  v0[25] = v14;
  v0[26] = v13;
  v5(v0[17], v0[6], v0[14]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.cachePolicy.setter();
  URLRequest.httpMethod.setter();
  BOOL v26 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[27] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100158450;
  uint64_t v19 = v0[13];
  return v26(v19, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
}

uint64_t sub_100158450(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = *v5;
  *(void *)(v7 + 224) = a1;
  *(void *)(v7 + 232) = a2;
  *(void *)(v7 + 240) = a3;
  *(void *)(v7 + 248) = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v8 = sub_10015896C;
  }
  else
  {
    *(unsigned char *)(v7 + 256) = a4 & 1;
    uint64_t v8 = sub_100158580;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_100158580()
{
  uint64_t v40 = v0;
  if (*(unsigned char *)(v0 + 256))
  {
    uint64_t v1 = *(void **)(v0 + 240);
    (*(void (**)(void, void))(*(void *)(v0 + 96) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
  }
  else
  {
    if (qword_10071F5A0 != -1) {
      swift_once();
    }
    unint64_t v2 = *(void *)(v0 + 232);
    uint64_t v3 = *(void **)(v0 + 240);
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v5 = qword_100760850;
    id v6 = objc_allocWithZone((Class)NSCachedURLResponse);
    id v7 = v3;
    sub_10002CEB0(v4, v2);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v9 = (Class)[v6 initWithResponse:v7 data:isa];
    sub_10000C5F4(v4, v2);

    id v10 = sub_1005200D8(v9, 0);
    if (v10)
    {
      uint64_t v11 = v10;
      Class v12 = URLRequest._bridgeToObjectiveC()().super.isa;
      uint64_t v13 = type metadata accessor for DIPURLCache();
      *(void *)(v0 + 16) = v5;
      *(void *)(v0 + 24) = v13;
      [super storeCachedResponse:v11 forRequest:v12];

      Class v9 = v12;
    }
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
    uint64_t v15 = *(void *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v17 = *(void *)(v0 + 48);

    defaultLogger()();
    v14(v15, v17, v16);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    uint64_t v22 = *(void *)(v0 + 168);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    uint64_t v23 = *(void *)(v0 + 152);
    uint64_t v24 = *(void *)(v0 + 128);
    uint64_t v25 = *(void *)(v0 + 104);
    uint64_t v37 = *(void *)(v0 + 112);
    uint64_t v26 = *(void *)(v0 + 88);
    uint64_t v27 = *(void *)(v0 + 96);
    if (v20)
    {
      uint64_t v35 = *(void **)(v0 + 240);
      uint64_t v36 = *(void *)(v0 + 88);
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v29 = URL.absoluteString.getter();
      *(void *)(v0 + 32) = sub_100110D58(v29, v30, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v38(v24, v37);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Image data successully cached for URL %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v21(v22, v23);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v36);
    }
    else
    {

      v38(v24, v37);
      v21(v22, v23);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v32 = *(void *)(v0 + 224);
  uint64_t v33 = *(void *)(v0 + 232);
  return v31(v32, v33);
}

uint64_t sub_10015896C()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v9 = v0[11];
  uint64_t v5 = v0[8];
  uint64_t v4 = v0[9];
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = URL.absoluteString.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100158BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v8 = sub_100007764(&qword_1007254E0);
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  sub_100007764(&qword_1007254C8);
  v6[16] = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_100723610);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URLRequest();
  v6[19] = v9;
  v6[20] = *(void *)(v9 - 8);
  v6[21] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  v6[22] = v10;
  v6[23] = *(void *)(v10 - 8);
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DIPSignpost.Config();
  v6[26] = v11;
  v6[27] = *(void *)(v11 - 8);
  v6[28] = swift_task_alloc();
  v6[29] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for DIPSignpost();
  v6[30] = v12;
  v6[31] = *(void *)(v12 - 8);
  v6[32] = swift_task_alloc();
  v6[33] = swift_task_alloc();
  return _swift_task_switch(sub_100158EEC, 0, 0);
}

uint64_t sub_100158EEC()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[6];
  unint64_t v30 = (void *)v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  static DaemonSignposts.getStaticTCRequest.getter();
  DIPSignpost.init(_:)();
  sub_100007764((uint64_t *)&unk_1007225C0);
  Swift::String v6 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100610730;
  unint64_t v9 = v8 + v7;
  uint64_t v10 = (void *)(v9 + v6[14]);
  uint64_t v11 = enum case for DIPError.PropertyKey.spProviderID(_:);
  uint64_t v12 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v9, v11, v12);
  _OWORD v10[3] = &type metadata for String;
  *uint64_t v10 = 0x61746E6567616DLL;
  v10[1] = 0xE700000000000000;
  v0[34] = sub_10015C504(v8);
  sub_1001505E8(v2 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v5, v4, v3, v30, &enum case for DIPError.Code.invalidStaticAssetsBaseURL(_:), 0xD000000000000025, 0x800000010063B910, v1);
  uint64_t v13 = v0[30];
  uint64_t v14 = v0[31];
  uint64_t v15 = v0[27];
  uint64_t v31 = v0[26];
  uint64_t v16 = v0[18];
  uint64_t v17 = v0[16];
  uint64_t v18 = v0[8];
  (*(void (**)(void, void, void))(v0[23] + 16))(v0[24], v0[25], v0[22]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.cachePolicy.setter();
  URLRequest.httpMethod.setter();
  os_log_type_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v19(v16, 1, 1, v13);
  sub_10015A534(v18, v17);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v17, 1, v31) == 1)
  {
    sub_10000C6CC(v0[16], &qword_1007254C8);
  }
  else
  {
    uint64_t v20 = v0[29];
    uint64_t v21 = v0[30];
    uint64_t v23 = v0[27];
    uint64_t v22 = v0[28];
    uint64_t v24 = v0[26];
    uint64_t v26 = v0[17];
    uint64_t v25 = v0[18];
    (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v22, v0[16], v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v20, v22, v24);
    DIPSignpost.init(_:)();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    v19(v26, 0, 1, v21);
    sub_1000F0098(v26, v25);
  }
  uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  uint64_t v27 = (void *)swift_task_alloc();
  v0[35] = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_1001593BC;
  uint64_t v28 = v0[21];
  return v32(v28, (uint64_t)_swiftEmptyArrayStorage, 1, 0);
}

uint64_t sub_1001593BC(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v6 = (void *)*v4;
  v6[36] = a1;
  v6[37] = a2;
  v6[38] = v3;
  swift_task_dealloc();
  if (v3)
  {
    unint64_t v7 = sub_100159A18;
  }
  else
  {

    unint64_t v7 = sub_1001594DC;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1001594DC()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[18];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1))
  {
    uint64_t v4 = v0[32];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v3, v1);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
  }
  uint64_t v5 = v0[38];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10015AEF8(&qword_1007254E8, &qword_1007254E0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v5)
  {
    sub_10000C5F4(v0[36], v0[37]);
    swift_release();
    uint64_t v6 = v0[31];
    uint64_t v34 = v0[30];
    uint64_t v35 = v0[33];
    uint64_t v7 = v0[23];
    uint64_t v31 = v0[22];
    uint64_t v32 = v0[25];
    uint64_t v8 = v0[20];
    uint64_t v30 = v0[21];
    uint64_t v9 = v0[19];
    uint64_t v33 = v0[18];
    (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for DIPError.Code.internalError(_:), v0[10]);
    type metadata accessor for DIPError();
    sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    swift_errorRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v30, v9);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v32, v31);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v35, v34);
    sub_10000C6CC(v33, (uint64_t *)&unk_100723610);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v22 = v0[36];
    uint64_t v12 = v0[33];
    uint64_t v13 = v0[31];
    uint64_t v29 = v0[30];
    uint64_t v14 = v0[23];
    unint64_t v25 = v0[37];
    uint64_t v26 = v0[22];
    uint64_t v15 = v0[20];
    uint64_t v23 = v0[19];
    uint64_t v24 = v0[21];
    uint64_t v27 = v0[25];
    uint64_t v28 = v0[18];
    uint64_t v16 = v0[15];
    uint64_t v18 = v0[13];
    uint64_t v17 = v0[14];
    swift_bridgeObjectRelease();
    swift_release();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    JWSSignedJSON.payload.getter();
    sub_10000C5F4(v22, v25);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v24, v23);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v27, v26);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v29);
    uint64_t v20 = v0[2];
    uint64_t v19 = v0[3];
    sub_10000C6CC(v28, (uint64_t *)&unk_100723610);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v21(v20, v19);
  }
}

uint64_t sub_100159A18()
{
  uint64_t v1 = v0[31];
  uint64_t v11 = v0[30];
  uint64_t v12 = v0[33];
  uint64_t v2 = v0[23];
  uint64_t v8 = v0[22];
  uint64_t v9 = v0[25];
  uint64_t v3 = v0[20];
  uint64_t v7 = v0[21];
  uint64_t v4 = v0[19];
  uint64_t v10 = v0[18];
  (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for DIPError.Code.internalError(_:), v0[10]);
  type metadata accessor for DIPError();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v8);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v12, v11);
  sub_10000C6CC(v10, (uint64_t *)&unk_100723610);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100159C98(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLRequest();
  v2[10] = v5;
  v2[11] = *(void *)(v5 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_100159E10, 0, 0);
}

uint64_t sub_100159E10()
{
  (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[2], v0[7]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.cachePolicy.setter();
  URLRequest.httpMethod.setter();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[13] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100159F30;
  uint64_t v2 = v0[12];
  return v4(v2, (uint64_t)_swiftEmptyArrayStorage, 1, 0);
}

uint64_t sub_100159F30(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = *v4;
  *(void *)(*v4 + 112) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v9 = sub_10015A10C;
  }
  else
  {

    *(void *)(v8 + 120) = a2;
    *(void *)(v8 + 128) = a1;
    uint64_t v9 = sub_10015A06C;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_10015A06C()
{
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  return v1(v2, v3);
}

uint64_t sub_10015A10C()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v9 = v0[10];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  sub_10015AEB0((unint64_t *)&qword_100723C08, (void (*)(uint64_t))&type metadata accessor for URL);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v3, enum case for DIPError.Code.internalError(_:), v4);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10015A374()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10015A438()
{
  return type metadata accessor for DIPTopekaStaticWebService();
}

uint64_t type metadata accessor for DIPTopekaStaticWebService()
{
  uint64_t result = qword_100725420;
  if (!qword_100725420) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10015A48C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10015A534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007254C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015A59C(int a1)
{
  int v74 = a1;
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v72 = *(void *)(v1 - 8);
  uint64_t v73 = v1;
  __chkstk_darwin(v1);
  uint64_t v71 = (char *)v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v78 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  Swift::String v6 = (char *)v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v67 = (char *)v64 - v8;
  __chkstk_darwin(v7);
  uint64_t v66 = (char *)v64 - v9;
  uint64_t v10 = sub_100007764(&qword_100720A68);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v64 - v14;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v76 = *(void *)(v16 - 8);
  uint64_t v77 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  Swift::String v70 = (char *)v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v75 = (char *)v64 - v19;
  uint64_t v20 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v68 = (double *)((char *)v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v69 = (uint64_t)v64 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (void *)((char *)v64 - v25);
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v27 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v28 = (uint64_t)&v27[4];
  uint64_t v29 = v27 + 52;
  os_unfair_lock_lock(v27 + 52);
  sub_1000262B4(v28, v80);
  os_unfair_lock_unlock(v29);
  sub_100030A10((uint64_t)v80, (uint64_t)v79);
  sub_1000262D0((uint64_t)v80);
  sub_10000C728(v79, v79[3]);
  sub_1001418CC((uint64_t)v81);
  sub_100044C64((uint64_t)v81, (uint64_t)v82);
  if (sub_100044CCC((uint64_t)v82) == 1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v79);
    defaultLogger()();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "unable to fetch the baseURL from the config", v32, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v78 + 8))(v6, v3);
    return 0;
  }
  uint64_t v33 = v82[5];
  uint64_t v34 = v82[6];
  uint64_t v35 = v82[7];
  v64[2] = v82[34];
  uint64_t v65 = v3;
  uint64_t v36 = v82[35];
  v64[1] = v82[36];
  uint64_t v37 = v82[37];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v79);
  uint64_t v38 = (void *)((char *)v26 + v20[6]);
  *uint64_t v38 = v35;
  uint64_t v39 = enum case for DIPBackoffStrategy.exponential(_:);
  uint64_t v40 = type metadata accessor for DIPBackoffStrategy();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104))(v38, v39, v40);
  *uint64_t v26 = v33;
  v26[1] = v34;
  *((unsigned char *)v26 + v20[7]) = 0;
  *((unsigned char *)v26 + v20[8]) = 0;
  *((unsigned char *)v26 + v20[9]) = 1;
  uint64_t v41 = (void *)((char *)v26 + v20[10]);
  *uint64_t v41 = 0;
  v41[1] = 0;
  if ((v74 & 1) == 0)
  {
    uint64_t v43 = v76;
    uint64_t v42 = v77;
    if (v36) {
      swift_bridgeObjectRetain();
    }
    uint64_t v44 = v65;
    sub_100044D90(v81);
    URL.init(string:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v15, 1, v42) == 1)
    {
      sub_10000C6CC((uint64_t)v15, &qword_100720A68);
      uint64_t v45 = v66;
      defaultLogger()();
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        uint64_t v49 = "EnvironmentManager: topeka server getWorkflow url is not a valid url";
LABEL_19:
        _os_log_impl((void *)&_mh_execute_header, v46, v47, v49, v48, 2u);
        swift_slowDealloc();
        goto LABEL_20;
      }
      goto LABEL_20;
    }
    uint64_t v13 = v15;
LABEL_22:
    uint64_t v51 = v75;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v75, v13, v42);
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    uint64_t v53 = v70;
    v52(v70, v51, v42);
    uint64_t v54 = v69;
    sub_10015AE4C((uint64_t)v26, v69);
    type metadata accessor for DIPTopekaStaticWebService();
    uint64_t v50 = swift_allocObject();
    v52((char *)(v50 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL), v53, v42);
    uint64_t v55 = v71;
    UUID.init()();
    uint64_t v56 = UUID.uuidString.getter();
    uint64_t v58 = v57;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v55, v73);
    uint64_t v59 = (uint64_t *)(v50 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_conversation);
    uint64_t *v59 = v56;
    v59[1] = v58;
    uint64_t v60 = v68;
    sub_10015AE4C(v54, (uint64_t)v68);
    type metadata accessor for DIPHTTPSession(0);
    swift_allocObject();
    uint64_t v61 = sub_1005D20EC(v60);
    sub_10015AF48(v54, type metadata accessor for DIPHTTPSession.Configuration);
    uint64_t v62 = *(void (**)(char *, uint64_t))(v43 + 8);
    v62(v53, v42);
    *(void *)(v50 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_httpSession) = v61;
    v62(v75, v42);
    sub_10015AF48((uint64_t)v26, type metadata accessor for DIPHTTPSession.Configuration);
    return v50;
  }
  uint64_t v43 = v76;
  uint64_t v42 = v77;
  if (v37) {
    swift_bridgeObjectRetain();
  }
  uint64_t v44 = v65;
  sub_100044D90(v81);
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v13, 1, v42) != 1) {
    goto LABEL_22;
  }
  sub_10000C6CC((uint64_t)v13, &qword_100720A68);
  uint64_t v45 = v67;
  defaultLogger()();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    uint64_t v49 = "EnvironmentManager: topeka server resourcesBaseURL url is not a valid url";
    goto LABEL_19;
  }
LABEL_20:

  (*(void (**)(char *, uint64_t))(v78 + 8))(v45, v44);
  sub_10015AF48((uint64_t)v26, type metadata accessor for DIPHTTPSession.Configuration);
  return 0;
}

uint64_t sub_10015AE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DIPHTTPSession.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015AEB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10015AEF8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019364(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10015AF48(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10015AFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100725680);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  if (*(void *)(a2 + 40))
  {
    uint64_t v7 = *(void **)(a2 + 24);
    swift_bridgeObjectRetain();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v10 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    aBlock[4] = sub_10015C198;
    void aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10015B21C;
    aBlock[3] = &unk_1006F9430;
    uint64_t v11 = _Block_copy(aBlock);
    swift_release();
    [v7 isAccountKeySigningKeyAvailableForAccountKeyIdentifier:v8 completion:v11];
    _Block_release(v11);
  }
  else
  {
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10015B1A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_100007764(&qword_100725680);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_100007764(&qword_100725680);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_10015B21C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_10015B294(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_10015B320()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_10015B43C, 0, 0);
}

uint64_t sub_10015B43C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Attempting to create or retrieve Account key signing key", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = *(void *)(v7 + 40);
  v0[10] = v8;
  if (v8)
  {
    uint64_t v9 = v0[3];
    uint64_t v10 = *(void *)(v9 + 32);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[11] = v11;
    long long v11[2] = v9;
    v11[3] = v10;
    v11[4] = v8;
    swift_bridgeObjectRetain();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[12] = v12;
    unint64_t v13 = sub_10015C240();
    *uint64_t v12 = v0;
    v12[1] = sub_10015B72C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001ELL, 0x800000010063BDB0, sub_10015C234, v11, v13);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.unableToCreateAccountKeySigningKeyLabel(_:), v0[4]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_10015B72C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_10015B8C8;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    os_log_type_t v2 = sub_10015B850;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10015B850()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10015B8C8()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10015B948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100725688);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = *(void **)(a2 + 24);
  NSString v8 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10015C318;
  void aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10015B294;
  aBlock[3] = &unk_1006F9480;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [v7 retrieveAccountKeySigningKeyForAccountKeyIdentifier:v8 completion:v11];
  _Block_release(v11);
}

uint64_t sub_10015BB14(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a3;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPError();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v40 = (char *)&v40 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v40 - v19;
  if (a2)
  {
    swift_errorRetain();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_getErrorValue();
      uint64_t v24 = Error.localizedDescription.getter();
      uint64_t v44 = sub_100110D58(v24, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Received an error while retrieving the account key signing key %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v28 = *(void (**)(char *, uint64_t))(v41 + 8);
    uint64_t v29 = v20;
    uint64_t v30 = v42;
    v28(v29, v42);
    os_log_type_t v31 = v40;
    uint64_t v45 = a2;
    sub_100007764(&qword_100725688);
    CheckedContinuation.resume(throwing:)();
    defaultLogger()();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Did encounter an error while retrieving the account key signing key for a given accountKeyIdentifier ", v34, 2u);
      swift_slowDealloc();
    }

    v28(v31, v30);
  }
  else
  {
    if (a1)
    {
      uint64_t v45 = (uint64_t)a1;
      id v26 = a1;
      sub_100007764(&qword_100725688);
      return CheckedContinuation.resume(returning:)();
    }
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.unableToRetrieveAccountKeySigningKey(_:), v5);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C588();
    uint64_t v35 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v36, v12, v9);
    uint64_t v45 = v35;
    sub_100007764(&qword_100725688);
    CheckedContinuation.resume(throwing:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    defaultLogger()();
    uint64_t v37 = Logger.logObject.getter();
    uint64_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, (os_log_type_t)v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v38, "Did encounter an error while retrieving the account key signing key for a given accountKeyIdentifier ", v39, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v42);
  }
  type metadata accessor for DaemonAnalytics();
  return static DaemonAnalytics.sendAccountKeySigningKeyUnavailableEvent()();
}

uint64_t sub_10015C118()
{
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 48);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingDeviceMigrationManager()
{
  return self;
}

uint64_t sub_10015C18C()
{
  return sub_10015C28C(&qword_100725680);
}

uint64_t sub_10015C198(uint64_t a1, uint64_t a2)
{
  sub_100007764(&qword_100725680);

  return sub_10015B1A8(a1, a2);
}

uint64_t sub_10015C21C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10015C22C()
{
  return swift_release();
}

void sub_10015C234(uint64_t a1)
{
  sub_10015B948(a1, *(void *)(v1 + 16));
}

unint64_t sub_10015C240()
{
  unint64_t result = qword_10071FED0;
  if (!qword_10071FED0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10071FED0);
  }
  return result;
}

uint64_t sub_10015C280()
{
  return sub_10015C28C(&qword_100725688);
}

uint64_t sub_10015C28C(uint64_t *a1)
{
  uint64_t v2 = sub_100007764(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10015C318(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_100007764(&qword_100725688) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10015BB14(a1, a2, v6);
}

unint64_t sub_10015C3A4(uint64_t a1)
{
  return sub_10015C72C(a1, &qword_1007257F8, &qword_100725800, (uint64_t (*)(void))&type metadata accessor for Date);
}

unint64_t sub_10015C3CC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_1007257A0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100048D6C(v6, (uint64_t)&v15, &qword_1007257A8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100590548(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000078A8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015C504(uint64_t a1)
{
  uint64_t v2 = sub_100007764((uint64_t *)&unk_100723460);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_10071F7B0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100048D6C(v12, (uint64_t)v5, (uint64_t *)&unk_100723460);
    unint64_t result = sub_1005905C0((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)sub_1000078A8(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015C704(uint64_t a1)
{
  return sub_10015C72C(a1, &qword_10071FCF0, &qword_100725860, (uint64_t (*)(void))&type metadata accessor for IQACode);
}

unint64_t sub_10015C72C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v30 = a4;
  os_log_type_t v31 = a2;
  uint64_t v6 = sub_100007764(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    unint64_t v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  uint64_t v13 = (char *)v9 + *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v29[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_100048D6C(v16, (uint64_t)v9, v31);
    uint64_t v18 = *v9;
    uint64_t v19 = v9[1];
    unint64_t result = sub_100590548(*v9, v19);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v23 = (uint64_t *)(v11[6] + 16 * result);
    *uint64_t v23 = v18;
    v23[1] = v19;
    uint64_t v24 = v11[7];
    uint64_t v25 = v30(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v24 + *(void *)(*(void *)(v25 - 8) + 72) * v22, v13, v25);
    uint64_t v26 = v11[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_11;
    }
    long long v11[2] = v28;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015C92C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_1007258B8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_100590694((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015CA2C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725980);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100590548(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015CB4C(uint64_t a1)
{
  return sub_10015E9E8(a1, &qword_100725840);
}

unint64_t sub_10015CB58(uint64_t a1)
{
  return sub_10015DFD8(a1, &qword_100725988, &qword_1007258D0, (uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo, (uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo);
}

unint64_t sub_10015CB84(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725838);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 40);
  while (1)
  {
    char v5 = *((unsigned char *)v4 - 8);
    uint64_t v6 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10059076C(v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(void *)(v2[7] + 8 * result) = v6;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015CC88(uint64_t a1)
{
  return sub_10015E5AC(a1, &qword_100725830);
}

unint64_t sub_10015CC94(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725828);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    char v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_10059071C((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015CDA0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_1007257E0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100048D6C(v6, (uint64_t)&v15, &qword_1007257E8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100590548(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_10000C6B4(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015CEE4(uint64_t a1)
{
  return sub_10015D550(a1, &qword_100725918, &qword_100725920, (uint64_t (*)(char *))sub_1005907F4, (uint64_t (*)(void))&type metadata accessor for IdentityKeyGenerationOption);
}

unint64_t sub_10015CF20(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764((uint64_t *)&unk_100734000);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100590548(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015D044(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725810);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100590548(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015D158(uint64_t a1)
{
  return sub_10015D758(a1, &qword_100725808);
}

unint64_t sub_10015D164(uint64_t a1)
{
  return sub_10015D3D8(a1, &qword_1007258E8, &qword_1007258F0, (uint64_t (*)(uint64_t))sub_100590A94);
}

unint64_t sub_10015D18C(uint64_t a1)
{
  return sub_10015E464(a1, &qword_100725870);
}

unint64_t sub_10015D198(uint64_t a1)
{
  return sub_10015D758(a1, &qword_100725868);
}

unint64_t sub_10015D1A4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_11;
  }
  sub_100007764(&qword_1007259A8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  long long v4 = *(_OWORD *)(a1 + 176);
  long long v42 = *(_OWORD *)(a1 + 160);
  long long v43 = v4;
  uint64_t v44 = *(void *)(a1 + 192);
  long long v5 = *(_OWORD *)(a1 + 112);
  long long v38 = *(_OWORD *)(a1 + 96);
  long long v39 = v5;
  long long v6 = *(_OWORD *)(a1 + 144);
  long long v40 = *(_OWORD *)(a1 + 128);
  long long v41 = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  long long v34 = *(_OWORD *)(a1 + 32);
  long long v35 = v7;
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v36 = *(_OWORD *)(a1 + 64);
  long long v37 = v8;
  uint64_t v10 = *((void *)&v34 + 1);
  uint64_t v9 = v34;
  sub_10016E040((uint64_t)&v34);
  unint64_t result = sub_100590548(v9, v10);
  if (v12)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  uint64_t v13 = 200;
  while (1)
  {
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v14 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v14 = v9;
    v14[1] = v10;
    uint64_t v15 = v2[7] + 152 * result;
    long long v16 = v36;
    *(_OWORD *)uint64_t v15 = v35;
    *(_OWORD *)(v15 + 16) = v16;
    long long v17 = v37;
    long long v18 = v38;
    long long v19 = v40;
    *(_OWORD *)(v15 + 64) = v39;
    *(_OWORD *)(v15 + 80) = v19;
    *(_OWORD *)(v15 + 32) = v17;
    *(_OWORD *)(v15 + 48) = v18;
    long long v20 = v41;
    long long v21 = v42;
    long long v22 = v43;
    *(void *)(v15 + 144) = v44;
    *(_OWORD *)(v15 + 112) = v21;
    *(_OWORD *)(v15 + 128) = v22;
    *(_OWORD *)(v15 + 96) = v20;
    uint64_t v23 = v2[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      break;
    }
    v2[2] = v25;
    if (!--v3) {
      goto LABEL_9;
    }
    uint64_t v26 = v13 + 168;
    BOOL v27 = (long long *)(a1 + v13);
    long long v28 = v27[9];
    long long v42 = v27[8];
    long long v43 = v28;
    uint64_t v44 = *((void *)v27 + 20);
    long long v29 = v27[5];
    long long v38 = v27[4];
    long long v39 = v29;
    long long v30 = v27[7];
    long long v40 = v27[6];
    long long v41 = v30;
    long long v31 = v27[1];
    long long v34 = *v27;
    long long v35 = v31;
    long long v32 = v27[3];
    long long v36 = v27[2];
    long long v37 = v32;
    uint64_t v10 = *((void *)&v34 + 1);
    uint64_t v9 = v34;
    sub_10016E040((uint64_t)&v34);
    unint64_t result = sub_100590548(v9, v10);
    uint64_t v13 = v26;
    if (v33) {
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_10015D37C(uint64_t a1)
{
  return sub_10015C72C(a1, &qword_100722488, &qword_100725820, (uint64_t (*)(void))&type metadata accessor for RecipientEncryptionCertificate);
}

unint64_t sub_10015D3A4(uint64_t a1)
{
  return sub_10015D758(a1, &qword_1007259B0);
}

unint64_t sub_10015D3B0(uint64_t a1)
{
  return sub_10015D3D8(a1, &qword_100725848, &qword_100725850, (uint64_t (*)(uint64_t))sub_100590A94);
}

unint64_t sub_10015D3D8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    long long v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  long long v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100048D6C(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_1000078A8(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    _OWORD v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015D508(uint64_t a1)
{
  return sub_10015D758(a1, &qword_1007259E8);
}

unint64_t sub_10015D514(uint64_t a1)
{
  return sub_10015D550(a1, &qword_100725990, &qword_100725998, (uint64_t (*)(char *))sub_100590BFC, (uint64_t (*)(void))&type metadata accessor for MobileDocumentElement.Element);
}

unint64_t sub_10015D550(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(void))
{
  long long v31 = a5;
  long long v32 = a4;
  uint64_t v8 = sub_100007764(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v13 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(a3);
  uint64_t v12 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = (void *)v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v13;
  }
  uint64_t v15 = &v11[*(int *)(v8 + 48)];
  uint64_t v16 = v12 + 64;
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v30[1] = a1;
  uint64_t v18 = a1 + v17;
  uint64_t v19 = *(void *)(v9 + 72);
  swift_retain();
  while (1)
  {
    sub_100048D6C(v18, (uint64_t)v11, a2);
    unint64_t result = v32(v11);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v23 = v13[6];
    uint64_t v24 = v31(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v23 + *(void *)(*(void *)(v24 - 8) + 72) * v22, v11, v24);
    uint64_t v25 = (void *)(v13[7] + 16 * v22);
    uint64_t v26 = *((void *)v15 + 1);
    *uint64_t v25 = *(void *)v15;
    v25[1] = v26;
    uint64_t v27 = v13[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_11;
    }
    void v13[2] = v29;
    v18 += v19;
    if (!--v14)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015D758(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  long long v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100590548(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015D870(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725928);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100048D6C(v6, (uint64_t)&v13, &qword_100725930);
    uint64_t v7 = v13;
    unint64_t result = sub_100590CD0(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1000078A8(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015D9A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725948);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v21 = v2 + 64;
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 72);
  while (1)
  {
    uint64_t v22 = v4;
    uint64_t v6 = *(v5 - 5);
    uint64_t v7 = *(v5 - 4);
    uint64_t v9 = *(v5 - 3);
    uint64_t v8 = *(v5 - 2);
    uint64_t v10 = *v5;
    uint64_t v11 = v5[2];
    uint64_t v27 = v5[1];
    uint64_t v28 = *(v5 - 1);
    char v26 = *((unsigned char *)v5 + 24);
    uint64_t v12 = v5[5];
    uint64_t v13 = v5[7];
    uint64_t v24 = v5[6];
    uint64_t v25 = v5[4];
    char v23 = *((unsigned char *)v5 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100590548(v6, v7);
    if (v15) {
      break;
    }
    *(void *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v16 = v6;
    v16[1] = v7;
    uint64_t v17 = v3[7] + 96 * result;
    *(void *)uint64_t v17 = v9;
    *(void *)(v17 + 8) = v8;
    *(void *)(v17 + 16) = v28;
    *(void *)(v17 + 24) = v10;
    *(void *)(v17 + 32) = v27;
    *(void *)(v17 + 40) = v11;
    *(unsigned char *)(v17 + 48) = v26;
    *(void *)(v17 + 56) = v25;
    *(void *)(v17 + 64) = v12;
    *(void *)(v17 + 72) = v24;
    *(void *)(v17 + 80) = v13;
    *(unsigned char *)(v17 + 88) = v23;
    uint64_t v18 = v3[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v3[2] = v20;
    v5 += 14;
    uint64_t v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015DB5C(uint64_t a1)
{
  return sub_10015E9E8(a1, &qword_1007258B0);
}

unint64_t sub_10015DB68(uint64_t a1)
{
  return sub_10015E9E8(a1, &qword_100725958);
}

unint64_t sub_10015DB74(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725970);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_100590A94();
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015DC80(uint64_t a1)
{
  return sub_10015E5AC(a1, &qword_100725968);
}

unint64_t sub_10015DC8C(uint64_t a1)
{
  return sub_10015E9E8(a1, &qword_100725978);
}

unint64_t sub_10015DC98(uint64_t a1)
{
  return sub_10015E9E8(a1, &qword_100725950);
}

unint64_t sub_10015DCA4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725960);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100590548(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015DDB8(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100725938);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725940);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100048D6C(v12, (uint64_t)v5, &qword_100725938);
    unint64_t result = sub_100590D20((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for ECIESOption();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(_OWORD *)(v7[7] + 16 * v16) = *(_OWORD *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015DFAC(uint64_t a1)
{
  return sub_10015DFD8(a1, &qword_1007259C0, &qword_1007259B8, type metadata accessor for UploadsCloudContainer.AnalyticsMetadata, type metadata accessor for UploadsCloudContainer.AnalyticsMetadata);
}

unint64_t sub_10015DFD8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  long long v31 = a4;
  long long v32 = a5;
  char v33 = a2;
  uint64_t v7 = sub_100007764(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v12 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(a3);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = (void *)v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  uint64_t v14 = (uint64_t)v10 + *(int *)(v7 + 48);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v30 = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = *(void *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_100048D6C(v17, (uint64_t)v10, v33);
    uint64_t v20 = *v10;
    uint64_t v19 = v10[1];
    unint64_t result = sub_100590548(*v10, v19);
    if (v22) {
      break;
    }
    unint64_t v23 = result;
    *(void *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v24 = (uint64_t *)(v12[6] + 16 * result);
    *uint64_t v24 = v20;
    v24[1] = v19;
    uint64_t v25 = v12[7];
    uint64_t v26 = v31(0);
    unint64_t result = sub_10016E15C(v14, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v23, v32);
    uint64_t v27 = v12[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_11;
    }
    v12[2] = v29;
    v17 += v18;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015E1C8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725908);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100048D6C(v6, (uint64_t)v15, &qword_100725910);
    unint64_t result = sub_100590504((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000078A8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015E30C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725900);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *(v4 - 4);
    uint64_t v6 = *(v4 - 3);
    uint64_t v7 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v9 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100590548(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v5;
    v12[1] = v6;
    BOOL v13 = (void *)(v2[7] + 24 * result);
    *BOOL v13 = v7;
    v13[1] = v8;
    void v13[2] = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 5;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015E458(uint64_t a1)
{
  return sub_10015E464(a1, &qword_1007258C0);
}

unint64_t sub_10015E464(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *(v5 - 1);
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    uint64_t v9 = v5[2];
    uint64_t v11 = v5[3];
    uint64_t v10 = v5[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100590548(v6, v7);
    if (v13) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v14 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v14 = v6;
    v14[1] = v7;
    BOOL v15 = (uint64_t *)(v3[7] + 32 * result);
    *BOOL v15 = v8;
    v15[1] = v9;
    _OWORD v15[2] = v11;
    v15[3] = v10;
    uint64_t v16 = v3[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_11;
    }
    v3[2] = v18;
    v5 += 6;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015E5A0(uint64_t a1)
{
  return sub_10015E5AC(a1, &qword_100725858);
}

unint64_t sub_10015E5AC(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_100590548(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015E6C4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_1007258E0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100590548(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v2[6] + 16 * result);
    *char v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015E7E8(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_1007258A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(&qword_100725890);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100048D6C(v12, (uint64_t)v5, &qword_1007258A0);
    unint64_t result = sub_100590E60((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for IQCType();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10015E9DC(uint64_t a1)
{
  return sub_10015E9E8(a1, &qword_1007258A8);
}

unint64_t sub_10015E9E8(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007764(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_100590548(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10015EB00@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_10016DEF0;
  *(void *)(v5 + 24) = v4;
  *a2 = sub_10016DF18;
  a2[1] = (uint64_t (*)())v5;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_10016DEF0;
  *(void *)(v6 + 24) = v4;
  *(void *)a1 = sub_10016E1D0;
  *(void *)(a1 + 8) = v6;
  return swift_retain();
}

uint64_t sub_10015EBD0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10015EBF8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10015EC20(uint64_t (**a1)(), uint64_t a2, uint64_t a3)
{
  swift_release();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  *a1 = sub_10016E1D0;
  a1[1] = (uint64_t (*)())v6;
  return swift_retain();
}

uint64_t sub_10015EC94(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = v4;
  *(unsigned char *)(v5 + 192) = a4;
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  *(void *)(v5 + 40) = v6;
  *(void *)(v5 + 48) = *(void *)(v6 - 8);
  *(void *)(v5 + 56) = swift_task_alloc();
  *(void *)(v5 + 64) = swift_task_alloc();
  *(void *)(v5 + 72) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MobileDocumentReaderSession.State();
  *(void *)(v5 + 80) = v7;
  *(void *)(v5 + 88) = *(void *)(v7 - 8);
  *(void *)(v5 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_10015EDD4, 0, 0);
}

uint64_t sub_10015EDD4()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16);
  *(void *)(v0 + 104) = v1;
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  sub_10015EB00(v2, &v35);
  os_unfair_lock_unlock(v3);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 80);
  char v7 = *(unsigned char *)(v0 + 192);
  uint64_t v8 = v35;
  uint64_t v9 = enum case for MobileDocumentReaderSession.State.ready(_:);
  char v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104);
  *(void *)(v0 + 112) = v10;
  *(void *)(v0 + 120) = (v5 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v10(v4, v9, v6);
  ((void (*)(uint64_t))v8)(v4);
  swift_release();
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v0 + 128) = v11;
  *(void *)(v0 + 136) = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v4, v6);
  if (v7)
  {
    ContinuousClock.init()();
    long long v34 = (char *)&dword_100725748 + dword_100725748;
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10015F1F0;
LABEL_3:
    uint64_t v13 = 3000000000000000000;
LABEL_4:
    return ((uint64_t (*)(uint64_t, void, void, void, uint64_t))v34)(v13, 0, 0, 0, 1);
  }
  char v15 = *(os_unfair_lock_s **)(v0 + 104);
  unint64_t v16 = v15 + 8;
  uint64_t v17 = (uint64_t)&v15[4];
  os_unfair_lock_lock(v15 + 8);
  sub_10015EB00(v17, &v35);
  os_unfair_lock_unlock(v16);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v19 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 80);
  char v21 = *(unsigned char *)(v0 + 192);
  char v22 = v35;
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 112))(v19, enum case for MobileDocumentReaderSession.State.connecting(_:), v20);
  ((void (*)(uint64_t))v22)(v19);
  swift_release();
  v18(v19, v20);
  if (v21)
  {
    ContinuousClock.init()();
    long long v34 = (char *)&dword_100725748 + dword_100725748;
    unint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v23;
    *unint64_t v23 = v0;
    v23[1] = sub_10015F6EC;
    uint64_t v13 = 1000000000000000000;
    goto LABEL_4;
  }
  uint64_t v24 = *(os_unfair_lock_s **)(v0 + 104);
  uint64_t v25 = v24 + 8;
  uint64_t v26 = (uint64_t)&v24[4];
  os_unfair_lock_lock(v24 + 8);
  sub_10015EB00(v26, &v35);
  os_unfair_lock_unlock(v25);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v28 = *(void *)(v0 + 96);
  uint64_t v29 = *(void *)(v0 + 80);
  char v30 = *(unsigned char *)(v0 + 192);
  long long v31 = v35;
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 112))(v28, enum case for MobileDocumentReaderSession.State.awaitingApproval(_:), v29);
  ((void (*)(uint64_t))v31)(v28);
  swift_release();
  v27(v28, v29);
  if (v30)
  {
    ContinuousClock.init()();
    long long v34 = (char *)&dword_100725748 + dword_100725748;
    long long v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v32;
    *long long v32 = v0;
    v32[1] = sub_10015FAF0;
    goto LABEL_3;
  }
  sub_10015FD9C(*(void *)(v0 + 24), *(void *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v33 = *(uint64_t (**)(void))(v0 + 8);
  return v33();
}

uint64_t sub_10015F1F0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void *)(*(void *)v1 + 48);
  uint64_t v4 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_10015F660;
  }
  else {
    uint64_t v5 = sub_10015F360;
  }
  return _swift_task_switch(v5, 0, 0);
}

void sub_10015F360()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 104);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = (uint64_t)&v2[4];
  os_unfair_lock_lock(v2 + 8);
  sub_10015EB00(v4, &v23);
  os_unfair_lock_unlock(v3);
  if (v1) {
    return;
  }
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  char v8 = *(unsigned char *)(v0 + 192);
  uint64_t v9 = v23;
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 112))(v6, enum case for MobileDocumentReaderSession.State.connecting(_:), v7);
  ((void (*)(uint64_t))v9)(v6);
  swift_release();
  v5(v6, v7);
  if (v8)
  {
    ContinuousClock.init()();
    char v22 = (char *)&dword_100725748 + dword_100725748;
    char v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v10;
    *char v10 = v0;
    v10[1] = sub_10015F6EC;
    uint64_t v11 = 1000000000000000000;
LABEL_4:
    ((void (*)(uint64_t, void, void, void, uint64_t))v22)(v11, 0, 0, 0, 1);
    return;
  }
  uint64_t v12 = *(os_unfair_lock_s **)(v0 + 104);
  uint64_t v13 = v12 + 8;
  uint64_t v14 = (uint64_t)&v12[4];
  os_unfair_lock_lock(v12 + 8);
  sub_10015EB00(v14, &v23);
  os_unfair_lock_unlock(v13);
  char v15 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v17 = *(void *)(v0 + 80);
  char v18 = *(unsigned char *)(v0 + 192);
  uint64_t v19 = v23;
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 112))(v16, enum case for MobileDocumentReaderSession.State.awaitingApproval(_:), v17);
  ((void (*)(uint64_t))v19)(v16);
  swift_release();
  v15(v16, v17);
  if (v18)
  {
    ContinuousClock.init()();
    char v22 = (char *)&dword_100725748 + dword_100725748;
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10015FAF0;
    uint64_t v11 = 3000000000000000000;
    goto LABEL_4;
  }
  sub_10015FD9C(*(void *)(v0 + 24), *(void *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v21 = *(void (**)(void))(v0 + 8);
  v21();
}

uint64_t sub_10015F660()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10015F6EC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  uint64_t v3 = *(void *)(*(void *)v1 + 48);
  uint64_t v4 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_10015FA64;
  }
  else {
    uint64_t v5 = sub_10015F85C;
  }
  return _swift_task_switch(v5, 0, 0);
}

void sub_10015F85C()
{
  uint64_t v14 = v0;
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 104);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = (uint64_t)&v2[4];
  os_unfair_lock_lock(v2 + 8);
  sub_10015EB00(v4, &v13);
  os_unfair_lock_unlock(v3);
  if (!v1)
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 80);
    char v8 = *(unsigned char *)(v0 + 192);
    uint64_t v9 = v13;
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 112))(v6, enum case for MobileDocumentReaderSession.State.awaitingApproval(_:), v7);
    ((void (*)(uint64_t))v9)(v6);
    swift_release();
    v5(v6, v7);
    if (v8)
    {
      ContinuousClock.init()();
      uint64_t v12 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100725748 + dword_100725748);
      char v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 176) = v10;
      *char v10 = v0;
      v10[1] = sub_10015FAF0;
      v12(3000000000000000000, 0, 0, 0, 1);
    }
    else
    {
      sub_10015FD9C(*(void *)(v0 + 24), *(void *)(v0 + 16));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v11 = *(void (**)(void))(v0 + 8);
      v11();
    }
  }
}

uint64_t sub_10015FA64()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10015FAF0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  uint64_t v3 = *(void *)(*(void *)v1 + 48);
  uint64_t v4 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_10015FD10;
  }
  else {
    uint64_t v5 = sub_10015FC60;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10015FC60()
{
  sub_10015FD9C(v0[3], v0[2]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10015FD10()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10015FD9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v161 = a2;
  uint64_t v184 = type metadata accessor for DIPError.Code();
  uint64_t v183 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  uint64_t v185 = (char *)&v155 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007764(&qword_100725760);
  __chkstk_darwin(v4 - 8);
  uint64_t v159 = (char *)&v155 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_100725768);
  __chkstk_darwin(v6 - 8);
  uint64_t v158 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements();
  uint64_t v157 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  unint64_t v174 = (char *)&v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = sub_100007764(&qword_100724050);
  uint64_t v160 = *(void *)(v200 - 8);
  uint64_t v9 = __chkstk_darwin(v200);
  unint64_t v192 = (uint64_t *)((char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v191 = (uint64_t *)((char *)&v155 - v12);
  __chkstk_darwin(v11);
  unsigned __int8 v193 = (uint64_t *)((char *)&v155 - v13);
  uint64_t v173 = type metadata accessor for MobileDocumentReaderRequest.Document.RequestType();
  uint64_t v169 = *(void *)(v173 - 8);
  __chkstk_darwin(v173);
  uint64_t v170 = (char *)&v155 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for MobileDocumentIssuer();
  uint64_t v171 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  unint64_t v177 = (char *)&v155 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for ISO18013Response.Status();
  uint64_t v167 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  uint64_t v166 = (char *)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = type metadata accessor for ISO18013Response();
  uint64_t v180 = *(void *)(v162 - 8);
  __chkstk_darwin(v162);
  uint64_t v179 = (char *)&v155 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100007764(&qword_100725770);
  __chkstk_darwin(v18 - 8);
  uint64_t v165 = (char *)&v155 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ISO18013Response.IssuerSigned();
  __chkstk_darwin(v20 - 8);
  uint64_t v164 = (char *)&v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for ISO18013Response.Document();
  uint64_t v181 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  uint64_t v199 = (char *)&v155 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = type metadata accessor for MobileDocumentType();
  uint64_t v182 = *(void *)(v206 - 8);
  uint64_t v23 = __chkstk_darwin(v206);
  uint64_t v205 = (uint64_t)&v155 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v194 = (char *)&v155 - v25;
  uint64_t v197 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier();
  uint64_t v195 = *(void *)(v197 - 8);
  __chkstk_darwin(v197);
  uint64_t v196 = (char *)&v155 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100007764(&qword_100725778);
  __chkstk_darwin(v27 - 8);
  uint64_t v198 = (void (*)(char *, uint64_t))((char *)&v155 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = type metadata accessor for COSE_Sign1();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v201 = v29;
  uint64_t v202 = v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v163 = (char *)&v155 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  unint64_t v186 = (char *)&v155 - v33;
  uint64_t v34 = type metadata accessor for MobileDocumentReaderRequest.Document();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v178 = (char *)&v155 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v204 = (char *)&v155 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v203 = (char *)&v155 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v155 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  os_log_type_t v47 = (char *)&v155 - v46;
  __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v155 - v48;
  MobileDocumentReaderRequest.document.getter();
  uint64_t v50 = MobileDocumentReaderRequest.Document.retainedElements.getter();
  uint64_t v53 = *(void (**)(char *, uint64_t))(v35 + 8);
  uint64_t v51 = v35 + 8;
  uint64_t v52 = v53;
  v53(v49, v34);
  MobileDocumentReaderRequest.document.getter();
  uint64_t v54 = MobileDocumentReaderRequest.Document.nonRetainedElements.getter();
  v53(v47, v34);
  unint64_t v208 = (void *)v50;
  sub_100162B40(v54);
  uint64_t v55 = (char *)a1;
  uint64_t v56 = v208;
  uint64_t v57 = v207;
  uint64_t v58 = sub_1001618C4(a1);
  if (v57) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v60 = (char *)v58;
  uint64_t v61 = v44;
  uint64_t v156 = v56;
  uint64_t v62 = v194;
  uint64_t v187 = v52;
  uint64_t v188 = v51;
  uint64_t v189 = v34;
  unint64_t v190 = v55;
  (*(void (**)(char *, void, uint64_t))(v195 + 104))(v196, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v197);
  uint64_t v63 = (uint64_t)v198;
  COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)();
  uint64_t v65 = v201;
  uint64_t v64 = v202;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v202 + 48))(v63, 1, v201) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v63, &qword_100725778);
    (*(void (**)(char *, void, uint64_t))(v183 + 104))(v185, enum case for DIPError.Code.internalError(_:), v184);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10016DFF8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v186, v63, v65);
  MobileDocumentReaderRequest.document.getter();
  uint64_t v66 = v62;
  MobileDocumentReaderRequest.Document.type.getter();
  v187(v61, v189);
  uint64_t v67 = v65;
  uint64_t v195 = MobileDocumentType.iso18013Identifier.getter();
  uint64_t v196 = v68;
  uint64_t v207 = 0;
  uint64_t v198 = *(void (**)(char *, uint64_t))(v182 + 8);
  v198(v66, v206);
  unint64_t v208 = _swiftEmptyArrayStorage;
  uint64_t v69 = v156;
  uint64_t v70 = v156[2];
  if (!v70)
  {
    uint64_t v83 = swift_bridgeObjectRelease();
    uint64_t v84 = _swiftEmptyArrayStorage;
LABEL_11:
    __chkstk_darwin(v83);
    uint64_t v85 = v207;
    uint64_t v86 = sub_10016DBB4((uint64_t)v84, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100163C30);
    uint64_t v87 = v180;
    uint64_t v88 = (uint64_t)v179;
    uint64_t v89 = v181;
    uint64_t v207 = v85;
    uint64_t v90 = v200;
    uint64_t v91 = v178;
    if (v85)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v202 + 8))(v186, v67);
      return swift_bridgeObjectRelease();
    }
    uint64_t v197 = (uint64_t)v86;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v92 = (void *)sub_10015D758((uint64_t)_swiftEmptyArrayStorage, &qword_100725798);
    uint64_t v93 = *(void *)(v197 + 16);
    if (v93)
    {
      uint64_t v94 = v197 + ((*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80));
      uint64_t v198 = *(void (**)(char *, uint64_t))(v160 + 72);
      swift_bridgeObjectRetain();
      uint64_t v95 = v193;
      while (1)
      {
        uint64_t v205 = v94;
        uint64_t v206 = v93;
        sub_100048D6C(v94, (uint64_t)v95, &qword_100724050);
        uint64_t v96 = *(int *)(v90 + 48);
        uint64_t v97 = v191;
        uint64_t v98 = (char *)v191 + v96;
        uint64_t v99 = (char *)v95 + v96;
        uint64_t v100 = v90;
        uint64_t v101 = *v95;
        uint64_t v102 = v95[1];
        *uint64_t v191 = *v95;
        v97[1] = v102;
        uint64_t v103 = sub_100007764(&qword_100720E08);
        uint64_t v104 = *(void *)(v103 - 8);
        uint64_t v105 = *(void (**)(void))(v104 + 16);
        uint64_t v204 = v98;
        uint64_t v106 = v98;
        uint64_t v107 = v103;
        ((void (*)(char *, char *, uint64_t))v105)(v106, v99, v103);
        uint64_t v108 = *(int *)(v100 + 48);
        long long v109 = v192;
        *unint64_t v192 = v101;
        v109[1] = v102;
        uint64_t v203 = (char *)v109 + v108;
        v105();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v208 = v92;
        unint64_t v112 = sub_100590548(v101, v102);
        uint64_t v113 = v92[2];
        BOOL v114 = (v111 & 1) == 0;
        uint64_t v115 = v113 + v114;
        if (__OFADD__(v113, v114)) {
          break;
        }
        char v116 = v111;
        if (v92[3] >= v115)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10016B9A8(&qword_100725798);
            uint64_t v92 = v208;
          }
        }
        else
        {
          sub_100166AB8(v115, isUniquelyReferenced_nonNull_native, &qword_100725798);
          uint64_t v92 = v208;
          unint64_t v117 = sub_100590548(v101, v102);
          if ((v116 & 1) != (v118 & 1)) {
            goto LABEL_48;
          }
          unint64_t v112 = v117;
        }
        swift_bridgeObjectRelease();
        if ((v116 & 1) == 0)
        {
          v92[(v112 >> 6) + 8] |= 1 << v112;
          long long v119 = (uint64_t *)(v92[6] + 16 * v112);
          *long long v119 = v101;
          v119[1] = v102;
          *(void *)(v92[7] + 8 * v112) = _swiftEmptyArrayStorage;
          uint64_t v120 = v92[2];
          BOOL v121 = __OFADD__(v120, 1);
          uint64_t v122 = v120 + 1;
          if (v121) {
            goto LABEL_47;
          }
          v92[2] = v122;
          swift_bridgeObjectRetain();
        }
        uint64_t v123 = v92[7];
        unint64_t v124 = *(void *)(v123 + 8 * v112);
        char v125 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v123 + 8 * v112) = v124;
        if ((v125 & 1) == 0)
        {
          unint64_t v124 = sub_10010FB7C(0, *(void *)(v124 + 16) + 1, 1, v124);
          *(void *)(v123 + 8 * v112) = v124;
        }
        unint64_t v127 = *(void *)(v124 + 16);
        unint64_t v126 = *(void *)(v124 + 24);
        if (v127 >= v126 >> 1)
        {
          unint64_t v124 = sub_10010FB7C(v126 > 1, v127 + 1, 1, v124);
          *(void *)(v123 + 8 * v112) = v124;
        }
        int v128 = v199;
        uint64_t v90 = v200;
        *(void *)(v124 + 16) = v127 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v104 + 32))(v124+ ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80))+ *(void *)(v104 + 72) * v127, v203, v107);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v104 + 8))(v204, v107);
        uint64_t v95 = v193;
        sub_10000C6CC((uint64_t)v193, &qword_100724050);
        uint64_t v94 = (uint64_t)v198 + v205;
        uint64_t v93 = v206 - 1;
        if (v206 == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v87 = v180;
          uint64_t v88 = (uint64_t)v179;
          uint64_t v67 = v201;
          uint64_t v129 = v202;
          uint64_t v89 = v181;
          uint64_t v91 = v178;
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    int v128 = v199;
    uint64_t v129 = v202;
LABEL_32:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v163, v186, v67);
    ISO18013Response.IssuerSigned.init(namespaces:issuerAuth:)();
    uint64_t v130 = type metadata accessor for ISO18013Response.DeviceSigned();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v130 - 8) + 56))(v165, 1, 1, v130);
    ISO18013Response.Document.init(docType:issuerSigned:deviceSigned:errors:)();
    static ISO18013Response.supportedVersion.getter();
    sub_100007764(&qword_100725780);
    unint64_t v131 = (*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
    uint64_t v132 = swift_allocObject();
    *(_OWORD *)(v132 + 16) = xmmword_100610730;
    (*(void (**)(unint64_t, char *, uint64_t))(v89 + 16))(v132 + v131, v128, v176);
    (*(void (**)(char *, void, uint64_t))(v167 + 104))(v166, enum case for ISO18013Response.Status.ok(_:), v168);
    ISO18013Response.init(version:documents:documentErrors:status:)();
    MobileDocumentIssuer.init(jurisdictionCode:)();
    MobileDocumentReaderRequest.document.getter();
    unint64_t v133 = v170;
    MobileDocumentReaderRequest.Document.requestType.getter();
    v187(v91, v189);
    uint64_t v134 = v169;
    uint64_t v135 = v173;
    int v136 = (*(uint64_t (**)(char *, uint64_t))(v169 + 88))(v133, v173);
    if (v136 == enum case for MobileDocumentReaderRequest.Document.RequestType.displayOnly(_:))
    {
      (*(void (**)(char *, uint64_t))(v134 + 96))(v133, v135);
      swift_bridgeObjectRelease();
      uint64_t v137 = v172;
      uint64_t v138 = v171;
      uint64_t v139 = v162;
      uint64_t v140 = v175;
      uint64_t v141 = (uint64_t)v174;
    }
    else
    {
      uint64_t v138 = v171;
      uint64_t v140 = v175;
      uint64_t v141 = (uint64_t)v174;
      if (v136 == enum case for MobileDocumentReaderRequest.Document.RequestType.dataTransfer(_:))
      {
        (*(void (**)(char *, uint64_t))(v134 + 96))(v133, v135);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for CBOREncoder();
        swift_allocObject();
        CBOREncoder.init()();
        sub_10016DFF8(&qword_100725788, (void (*)(uint64_t))&type metadata accessor for ISO18013Response);
        uint64_t v143 = v88;
        uint64_t v144 = v162;
        uint64_t v145 = v207;
        dispatch thunk of CBOREncoder.encode<A>(_:)();
        uint64_t v207 = v145;
        if (v145)
        {
          swift_release();
          (*(void (**)(char *, uint64_t))(v138 + 8))(v177, v172);
          (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v143, v144);
          goto LABEL_45;
        }
        swift_release();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v157 + 56))(v158, 1, 1, v140);
        uint64_t v154 = v159;
        char v153 = v177;
        uint64_t v150 = v172;
        (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v159, v177, v172);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(v154, 0, 1, v150);
        MobileDocumentReaderResponse.init(responseData:sessionTranscript:mobileIdentityDocumentElements:issuer:)();
        uint64_t v139 = v144;
        uint64_t v88 = v143;
LABEL_44:
        (*(void (**)(char *, uint64_t))(v138 + 8))(v153, v150);
        (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v88, v139);
        goto LABEL_45;
      }
      uint64_t v137 = v172;
      if (v136 != enum case for MobileDocumentReaderRequest.Document.RequestType.validatedDataTransfer(_:))
      {
        (*(void (**)(char *, void, uint64_t))(v183 + 104))(v185, enum case for DIPError.Code.internalError(_:), v184);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10016DFF8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v138 + 8))(v177, v137);
        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v162);
        (*(void (**)(char *, uint64_t))(v181 + 8))(v199, v176);
        (*(void (**)(char *, uint64_t))(v202 + 8))(v186, v201);
        return (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v133, v173);
      }
      (*(void (**)(char *, uint64_t))(v134 + 96))(v133, v135);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v146 = &v133[*(int *)(sub_100007764(&qword_100725790) + 64)];
      uint64_t v147 = type metadata accessor for MobileDocumentReaderRequest.Document.ValidationOptions();
      (*(void (**)(char *, uint64_t))(*(void *)(v147 - 8) + 8))(v146, v147);
      uint64_t v139 = v162;
    }
    uint64_t v142 = v207;
    sub_100540FF0(v88, v190, v141);
    uint64_t v207 = v142;
    if (v142)
    {
      (*(void (**)(char *, uint64_t))(v138 + 8))(v177, v137);
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v139);
LABEL_45:
      (*(void (**)(char *, uint64_t))(v181 + 8))(v199, v176);
      return (*(uint64_t (**)(char *, uint64_t))(v202 + 8))(v186, v201);
    }
    uint64_t v148 = v141;
    uint64_t v149 = v157;
    uint64_t v150 = v137;
    uint64_t v151 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 16))(v158, v148, v140);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))(v151, 0, 1, v140);
    uint64_t v152 = v159;
    char v153 = v177;
    (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v159, v177, v150);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(v152, 0, 1, v150);
    MobileDocumentReaderResponse.init(responseData:sessionTranscript:mobileIdentityDocumentElements:issuer:)();
    (*(void (**)(char *, uint64_t))(v149 + 8))(v174, v175);
    goto LABEL_44;
  }
  uint64_t v194 = v60;
  uint64_t v71 = *(void *)(type metadata accessor for MobileDocumentElement() - 8);
  uint64_t v72 = (uint64_t)v69 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
  uint64_t v197 = *(void *)(v71 + 72);
  swift_bridgeObjectRetain();
  uint64_t v73 = v204;
  uint64_t v74 = v189;
  while (1)
  {
    uint64_t v75 = v203;
    MobileDocumentReaderRequest.document.getter();
    MobileDocumentReaderRequest.Document.type.getter();
    uint64_t v76 = v75;
    uint64_t v77 = v187;
    v187(v76, v74);
    MobileDocumentReaderRequest.document.getter();
    char v78 = MobileDocumentReaderRequest.Document.isRawDataTransfer.getter();
    v77(v73, v74);
    uint64_t v79 = v205;
    uint64_t v80 = v207;
    uint64_t v81 = sub_1002A1340(v205, v78 & 1);
    uint64_t v207 = v80;
    if (v80) {
      break;
    }
    uint64_t v82 = v81;
    v198((char *)v79, v206);
    sub_100162CF0(v82);
    v72 += v197;
    if (!--v70)
    {
      uint64_t v83 = swift_bridgeObjectRelease_n();
      uint64_t v84 = v208;
      uint64_t v67 = v201;
      goto LABEL_11;
    }
  }
  v198((char *)v79, v206);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v202 + 8))(v186, v201);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001618C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v57 = *(void *)(v2 - 8);
  uint64_t v58 = v2;
  __chkstk_darwin(v2);
  uint64_t v59 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DeveloperTestJapanNationalIDCardCredentialBuilder();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  __chkstk_darwin(v4);
  uint64_t v50 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale.Region();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v60 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v54 = (char *)&v46 - v9;
  uint64_t v10 = type metadata accessor for MobileDocumentType.Identifier();
  uint64_t v63 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MobileDocumentType();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v49 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v46 - v17;
  uint64_t v19 = type metadata accessor for MobileDocumentReaderRequest.Document();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v48 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v46 - v23;
  uint64_t v51 = a1;
  MobileDocumentReaderRequest.document.getter();
  MobileDocumentReaderRequest.Document.type.getter();
  os_log_type_t v47 = *(void (**)(char *, uint64_t))(v20 + 8);
  v47(v24, v19);
  MobileDocumentType.storage.getter();
  uint64_t v25 = v63;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v27 = v18;
  uint64_t v28 = v10;
  v26(v27, v13);
  int v29 = (*(uint64_t (**)(char *, uint64_t))(v25 + 88))(v12, v10);
  if (v29 == enum case for MobileDocumentType.Identifier.nationalIDCard(_:))
  {
    (*(void (**)(char *, uint64_t))(v25 + 96))(v12, v10);
    uint64_t v31 = v54;
    uint64_t v30 = v55;
    uint64_t v32 = v56;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v54, v12, v56);
    uint64_t v33 = v60;
    Locale.Region.init(stringLiteral:)();
    sub_10016DFF8((unint64_t *)&unk_100723520, (void (*)(uint64_t))&type metadata accessor for Locale.Region);
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
    v35(v33, v32);
    v35(v31, v32);
    if (v34)
    {
      uint64_t v36 = v50;
      DeveloperTestJapanNationalIDCardCredentialBuilder.init()();
      uint64_t v37 = DeveloperTestJapanNationalIDCardCredentialBuilder.payloadElements.getter();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v53);
    }
    else
    {
      uint64_t v38 = v60;
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v60, v12, v32);
      uint64_t v61 = 0;
      unint64_t v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v39._uint64_t countAndFlagsBits = 0xD000000000000026;
      v39._object = (void *)0x800000010063BF50;
      String.append(_:)(v39);
      uint64_t v12 = v38;
      v40._uint64_t countAndFlagsBits = Locale.Region.identifier.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._uint64_t countAndFlagsBits = 0xD000000000000013;
      v41._object = (void *)0x800000010063BF80;
      String.append(_:)(v41);
      uint64_t v37 = v61;
      (*(void (**)(char *, void, uint64_t))(v57 + 104))(v59, enum case for DIPError.Code.documentReaderUnsupportedNationalIDCardRegion(_:), v58);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10016DFF8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    v35(v12, v32);
  }
  else
  {
    uint64_t v60 = v12;
    if (v29 == enum case for MobileDocumentType.Identifier.driversLicense(_:))
    {
      return static DeveloperTestMDLCredentialBuilder.payloadElements.getter();
    }
    else
    {
      uint64_t v61 = 0;
      unint64_t v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      v42._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v42._object = (void *)0x80000001006310F0;
      String.append(_:)(v42);
      uint64_t v43 = v48;
      MobileDocumentReaderRequest.document.getter();
      uint64_t v44 = v49;
      MobileDocumentReaderRequest.Document.type.getter();
      v47(v43, v19);
      _print_unlocked<A, B>(_:_:)();
      v26(v44, v13);
      uint64_t v37 = v61;
      (*(void (**)(char *, void, uint64_t))(v57 + 104))(v59, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v58);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10016DFF8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v28);
    }
  }
  return v37;
}

uint64_t sub_1001621AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v69 = a4;
  uint64_t v70 = a3;
  uint64_t v64 = type metadata accessor for ISO18013IssuerSignedItem();
  __chkstk_darwin(v64);
  uint64_t v63 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100720E08);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v65 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CredentialBuilderPayloadDetails.Element();
  uint64_t v67 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100007764(&qword_1007257C0);
  __chkstk_darwin(v19 - 8);
  uint64_t v66 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for AnyCodable();
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v24 = __chkstk_darwin(v23);
  if (!*(void *)(a5 + 16)) {
    goto LABEL_17;
  }
  uint64_t v57 = v28;
  uint64_t v58 = v27;
  uint64_t v61 = (char *)&v50 - v25;
  uint64_t v62 = v24;
  uint64_t v59 = v26;
  swift_bridgeObjectRetain();
  unint64_t v29 = sub_100590548(a1, a2);
  if ((v30 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v41 = sub_100007764(&qword_100724050);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(a6, 1, 1, v41);
  }
  uint64_t v51 = v14;
  uint64_t v31 = *(void *)(*(void *)(a5 + 56) + 8 * v29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)(v31 + 16);
  uint64_t v52 = v13;
  uint64_t v60 = v31;
  if (v32)
  {
    uint64_t v53 = a1;
    uint64_t v54 = a2;
    uint64_t v55 = a6;
    uint64_t v56 = v6;
    uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    uint64_t v33 = v31 + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
    char v34 = (void (**)(char *, uint64_t))(v67 + 8);
    uint64_t v35 = *(void *)(v67 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      v68(v18, v33, v16);
      if (CredentialBuilderPayloadDetails.Element.elementIdentifier.getter() == v70 && v36 == v69) {
        break;
      }
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v37) {
        goto LABEL_14;
      }
      (*v34)(v18, v16);
      v33 += v35;
      if (!--v32)
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = 1;
        a6 = v55;
        uint64_t v7 = v56;
        a1 = v53;
        a2 = v54;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_14:
    a6 = v55;
    uint64_t v7 = v56;
    a1 = v53;
    a2 = v54;
    uint64_t v39 = (uint64_t)v66;
    uint64_t v40 = v67;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v39, v18, v16);
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = 1;
LABEL_12:
    uint64_t v39 = (uint64_t)v66;
    uint64_t v40 = v67;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v39, v38, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v39, 1, v16) == 1)
  {
    sub_10000C6CC(v39, &qword_1007257C0);
    goto LABEL_17;
  }
  uint64_t v43 = v57;
  CredentialBuilderPayloadDetails.Element.elementValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v16);
  uint64_t v44 = v59;
  uint64_t v46 = v61;
  uint64_t v45 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v61, v43, v62);
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v58, v46, v45);
  swift_bridgeObjectRetain();
  ISO18013IssuerSignedItem.init(digestID:random:elementIdentifier:elementValue:)();
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  CBOREncoder.init()();
  sub_10016DFF8(&qword_1007257C8, (void (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem);
  sub_10016DFF8(&qword_1007257D0, (void (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem);
  os_log_type_t v47 = v65;
  CBOREncodedCBOR.init(value:tag:encoder:)();
  if (v7) {
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v61, v62);
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v61, v62);
  uint64_t v48 = sub_100007764(&qword_100724050);
  uint64_t v49 = (char *)a6 + *(int *)(v48 + 48);
  *a6 = a1;
  a6[1] = a2;
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v49, v47, v52);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(a6, 0, 1, v48);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for SimulatedMobileDocumentReaderManager()
{
  return self;
}

uint64_t sub_10016289C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t (**)())&v1[4];
  uint64_t v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  sub_10016DF4C(v2);
  os_unfair_lock_unlock(v3);
  return swift_release();
}

uint64_t sub_100162904()
{
  return sub_10016DF40(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10016293C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10000C494;
  return sub_10015EC94(a1, a2, v5, 1);
}

uint64_t sub_1001629E8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_10010F770(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100162B40(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_10010F880(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for MobileDocumentElement() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100162CF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_10010F9F0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  sub_100007764(&qword_100724060);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100162E54(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  unint64_t v3 = sub_10010FF74(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100162FB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_10010F534(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[14 * v8 + 4];
  if (a1 + 32 < v9 + 112 * v2 && v9 < a1 + 32 + 112 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100163110(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  unint64_t v3 = sub_1001107B8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100163268(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_10010F3C4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001633BC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10016D6D0(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))&type metadata accessor for StoredProofingSession, &qword_1007257D8, (uint64_t *)&unk_100732590, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_100530B80);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1001635C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_100110B14(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}