uint64_t sub_100163764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v14;

  *(void *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_100163868, 0, 0);
}

uint64_t sub_100163868()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_10016DFF8(&qword_100725750, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_10016DFF8(&qword_100725758, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  void *v7 = v0;
  v7[1] = sub_100163A08;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_100163A08()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_100163BC4, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100163BC4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100163C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1001621AC(a1, a2, a3, a4, *(void *)(v5 + 16), a5);
}

uint64_t sub_100163C4C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007258B8);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0) {
      id v33 = v31;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100163F1C(uint64_t a1, char a2)
{
  return sub_100169C70(a1, a2, &qword_100725840);
}

uint64_t sub_100163F28(uint64_t a1, int a2)
{
  return sub_100167F4C(a1, a2, (uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo, &qword_1007258D0, (uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo);
}

uint64_t sub_100163F4C(uint64_t a1, int a2)
{
  return sub_100166108(a1, a2, (uint64_t (*)(void))&type metadata accessor for AEADKey, &qword_1007258C8);
}

uint64_t sub_100163F6C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007257E0);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    int64_t v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_10000C6B4(v25, (uint64_t)v38);
    }
    else
    {
      sub_100030A10((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_10000C6B4(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100164294(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764((uint64_t *)&unk_100734000);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    int64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001645BC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100007764(&qword_10071F7B0);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    int64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      char v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        sub_1000078A8((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        sub_10003BC28(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      sub_10016DFF8((unint64_t *)&qword_10071F7B8, (void (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)sub_1000078A8(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_1001649EC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100007764(&qword_100720FC8);
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100007764(&qword_1007259D0);
  int v41 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_42;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int64_t v39 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  swift_retain();
  int64_t v16 = 0;
LABEL_9:
  if (v14)
  {
    unint64_t v22 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v23 = v22 | (v16 << 6);
    goto LABEL_31;
  }
  int64_t v24 = v16 + 1;
  if (__OFADD__(v16, 1)) {
    goto LABEL_43;
  }
  if (v24 >= v38)
  {
    swift_release();
    uint64_t v3 = v37;
    uint64_t v25 = v39;
    if (v41)
    {
LABEL_38:
      uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
      if (v35 >= 64) {
        bzero(v25, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *uint64_t v25 = -1 << v35;
      }
      *(void *)(v8 + 16) = 0;
    }
  }
  else
  {
    uint64_t v25 = v39;
    unint64_t v26 = v39[v24];
    ++v16;
    if (v26) {
      goto LABEL_30;
    }
    int64_t v16 = v24 + 1;
    if (v24 + 1 >= v38) {
      goto LABEL_35;
    }
    unint64_t v26 = v39[v16];
    if (v26)
    {
LABEL_30:
      unint64_t v14 = (v26 - 1) & v26;
      unint64_t v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_31:
      char v32 = *(unsigned char *)(*(void *)(v8 + 48) + v23);
      uint64_t v33 = *(void *)(v40 + 72);
      uint64_t v34 = *(void *)(v8 + 56) + v33 * v23;
      if (v41) {
        sub_1000BEA14(v34, (uint64_t)v7, &qword_100720FC8);
      }
      else {
        sub_100048D6C(v34, (uint64_t)v7, &qword_100720FC8);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v17 = Hasher._finalize()();
      uint64_t v18 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v19 = v17 & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v15 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v15 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v20 == v29;
        if (v20 == v29) {
          unint64_t v20 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v15 + 8 * v20);
        if (v31 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v31)) + (v20 << 6);
LABEL_8:
          *(void *)(v15 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
          *(unsigned char *)(*(void *)(v10 + 48) + v21) = v32;
          sub_1000BEA14((uint64_t)v7, *(void *)(v10 + 56) + v33 * v21, &qword_100720FC8);
          ++*(void *)(v10 + 16);
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      JUMPOUT(0x100164E4CLL);
    }
    int64_t v27 = v24 + 2;
    if (v27 < v38)
    {
      unint64_t v26 = v39[v27];
      if (!v26)
      {
        while (1)
        {
          int64_t v16 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            goto LABEL_44;
          }
          if (v16 >= v38) {
            goto LABEL_35;
          }
          unint64_t v26 = v39[v16];
          ++v27;
          if (v26) {
            goto LABEL_30;
          }
        }
      }
      int64_t v16 = v27;
      goto LABEL_30;
    }
LABEL_35:
    swift_release();
    uint64_t v3 = v37;
    if (v41) {
      goto LABEL_38;
    }
  }
LABEL_42:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100164E60(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007259D8);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  char v33 = a2;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v2;
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  swift_retain();
  int64_t v13 = 0;
LABEL_9:
  if (v10)
  {
    unint64_t v19 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v20 = v19 | (v13 << 6);
LABEL_31:
    char v29 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
    uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v25 = 0;
    unint64_t v26 = (unint64_t)(63 - v15) >> 6;
    while (++v17 != v26 || (v25 & 1) == 0)
    {
      BOOL v27 = v17 == v26;
      if (v17 == v26) {
        unint64_t v17 = 0;
      }
      v25 |= v27;
      uint64_t v28 = *(void *)(v12 + 8 * v17);
      if (v28 != -1)
      {
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
LABEL_8:
        *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        *(unsigned char *)(*(void *)(v7 + 48) + v18) = v29;
        *(void *)(*(void *)(v7 + 56) + 8 * v18) = v30;
        ++*(void *)(v7 + 16);
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    JUMPOUT(0x1001651F8);
  }
  int64_t v21 = v13 + 1;
  if (__OFADD__(v13, 1)) {
    goto LABEL_40;
  }
  if (v21 >= v11)
  {
    swift_release();
    uint64_t v3 = v34;
    unint64_t v22 = (void *)(v5 + 64);
    if (v33)
    {
LABEL_35:
      uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
      if (v31 >= 64) {
        bzero(v22, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v22 = -1 << v31;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (v23) {
      goto LABEL_30;
    }
    int64_t v13 = v21 + 1;
    if (v21 + 1 >= v11) {
      goto LABEL_32;
    }
    unint64_t v23 = *(void *)(v35 + 8 * v13);
    if (v23)
    {
LABEL_30:
      unint64_t v10 = (v23 - 1) & v23;
      unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
      goto LABEL_31;
    }
    int64_t v24 = v21 + 2;
    if (v24 < v11)
    {
      unint64_t v23 = *(void *)(v35 + 8 * v24);
      if (!v23)
      {
        while (1)
        {
          int64_t v13 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_41;
          }
          if (v13 >= v11) {
            goto LABEL_32;
          }
          unint64_t v23 = *(void *)(v35 + 8 * v13);
          ++v24;
          if (v23) {
            goto LABEL_30;
          }
        }
      }
      int64_t v13 = v24;
      goto LABEL_30;
    }
LABEL_32:
    swift_release();
    uint64_t v3 = v34;
    if (v33) {
      goto LABEL_35;
    }
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10016520C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007259C8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v12 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_40;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = v35[v21];
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v34) {
        break;
      }
      unint64_t v22 = v35[v12];
      if (!v22)
      {
        int64_t v23 = v21 + 2;
        if (v23 >= v34) {
          break;
        }
        unint64_t v22 = v35[v23];
        if (!v22)
        {
          while (1)
          {
            int64_t v12 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_41;
            }
            if (v12 >= v34) {
              goto LABEL_34;
            }
            unint64_t v22 = v35[v12];
            ++v23;
            if (v22) {
              goto LABEL_30;
            }
          }
        }
        int64_t v12 = v23;
      }
    }
LABEL_30:
    unint64_t v10 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_31:
    char v28 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
    char v29 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    if ((v36 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = v13 & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v24 = 0;
    unint64_t v25 = (unint64_t)(63 - v14) >> 6;
    do
    {
      if (++v16 == v25 && (v24 & 1) != 0)
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        JUMPOUT(0x1001655B4);
      }
      BOOL v26 = v16 == v25;
      if (v16 == v25) {
        unint64_t v16 = 0;
      }
      v24 |= v26;
      uint64_t v27 = *(void *)(v11 + 8 * v16);
    }
    while (v27 == -1);
    unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
LABEL_8:
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v28;
    unint64_t v18 = (void *)(*(void *)(v7 + 56) + 16 * v17);
    *unint64_t v18 = v30;
    v18[1] = v31;
    ++*(void *)(v7 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v3 = v2;
  if (v36)
  {
    uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
    if (v32 >= 64) {
      bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      void *v35 = -1 << v32;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001655C8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_100725810);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    char v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001658D4(uint64_t a1, char a2)
{
  return sub_100166AB8(a1, a2, &qword_100725808);
}

uint64_t sub_1001658E0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007259A8);
  char v51 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  v49 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  v47 = v2;
  int64_t v48 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      if (v51) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }
    int64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v26 >= v48) {
      break;
    }
    BOOL v27 = v49;
    unint64_t v28 = v49[v26];
    ++v13;
    if (!v28)
    {
      int64_t v13 = v26 + 1;
      if (v26 + 1 >= v48) {
        goto LABEL_33;
      }
      unint64_t v28 = v49[v13];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v48)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v47;
          if ((v51 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v28 = v49[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v13 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v48) {
              goto LABEL_33;
            }
            unint64_t v28 = v49[v13];
            ++v29;
            if (v28) {
              goto LABEL_22;
            }
          }
        }
        int64_t v13 = v29;
      }
    }
LABEL_22:
    unint64_t v10 = (v28 - 1) & v28;
    unint64_t v18 = __clz(__rbit64(v28)) + (v13 << 6);
    if (v51)
    {
LABEL_10:
      unint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = *(void *)(v5 + 56) + 152 * v18;
      uint64_t v23 = *(void *)v22;
      uint64_t v24 = *(void *)(v22 + 8);
      char v52 = *(unsigned char *)(v22 + 16);
      uint64_t v25 = *(void *)(v22 + 32);
      uint64_t v53 = *(void *)(v22 + 48);
      uint64_t v54 = *(void *)(v22 + 24);
      char v55 = *(unsigned char *)(v22 + 56);
      char v58 = *(unsigned char *)(v22 + 57);
      uint64_t v56 = *(void *)(v22 + 40);
      uint64_t v57 = *(void *)(v22 + 72);
      uint64_t v59 = *(void *)(v22 + 88);
      uint64_t v60 = *(void *)(v22 + 64);
      uint64_t v61 = *(void *)(v22 + 104);
      uint64_t v62 = *(void *)(v22 + 80);
      uint64_t v64 = *(void *)(v22 + 112);
      uint64_t v65 = *(void *)(v22 + 96);
      uint64_t v68 = *(void *)(v22 + 128);
      uint64_t v66 = *(void *)(v22 + 120);
      uint64_t v67 = *(void *)(v22 + 136);
      uint64_t v63 = *(void *)(v22 + 144);
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    uint64_t v20 = *v30;
    uint64_t v21 = v30[1];
    uint64_t v31 = *(void *)(v5 + 56) + 152 * v18;
    long long v32 = *(_OWORD *)(v31 + 16);
    long long v69 = *(_OWORD *)v31;
    long long v70 = v32;
    long long v33 = *(_OWORD *)(v31 + 80);
    long long v35 = *(_OWORD *)(v31 + 32);
    long long v34 = *(_OWORD *)(v31 + 48);
    long long v73 = *(_OWORD *)(v31 + 64);
    long long v74 = v33;
    long long v71 = v35;
    long long v72 = v34;
    long long v37 = *(_OWORD *)(v31 + 112);
    long long v36 = *(_OWORD *)(v31 + 128);
    long long v38 = *(_OWORD *)(v31 + 96);
    uint64_t v78 = *(void *)(v31 + 144);
    long long v76 = v37;
    long long v77 = v36;
    long long v75 = v38;
    uint64_t v67 = *((void *)&v36 + 1);
    uint64_t v68 = v36;
    uint64_t v63 = v78;
    uint64_t v64 = v37;
    uint64_t v65 = v38;
    uint64_t v66 = *((void *)&v37 + 1);
    uint64_t v61 = *((void *)&v38 + 1);
    uint64_t v59 = *((void *)&v74 + 1);
    uint64_t v62 = v74;
    uint64_t v60 = v73;
    char v58 = BYTE9(v72);
    char v55 = BYTE8(v72);
    uint64_t v56 = *((void *)&v35 + 1);
    uint64_t v25 = v35;
    uint64_t v57 = *((void *)&v73 + 1);
    uint64_t v53 = v72;
    uint64_t v54 = *((void *)&v70 + 1);
    char v52 = v70;
    uint64_t v24 = *((void *)&v69 + 1);
    uint64_t v23 = v69;
    swift_bridgeObjectRetain();
    sub_1000B53AC((uint64_t)&v69);
LABEL_24:
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v39 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v11 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v40) & ~*(void *)(v11 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v11 + 8 * v41);
      }
      while (v45 == -1);
      unint64_t v14 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v20;
    v15[1] = v21;
    uint64_t v16 = *(void *)(v7 + 56) + 152 * v14;
    *(void *)uint64_t v16 = v23;
    *(void *)(v16 + 8) = v24;
    *(unsigned char *)(v16 + 16) = v52;
    *(void *)(v16 + 24) = v54;
    *(void *)(v16 + 32) = v25;
    *(void *)(v16 + 40) = v56;
    *(void *)(v16 + 48) = v53;
    *(unsigned char *)(v16 + 56) = v55;
    *(unsigned char *)(v16 + 57) = v58;
    *(void *)(v16 + 64) = v60;
    *(void *)(v16 + 72) = v57;
    *(void *)(v16 + 80) = v62;
    *(void *)(v16 + 88) = v59;
    *(void *)(v16 + 96) = v65;
    *(void *)(v16 + 104) = v61;
    *(void *)(v16 + 112) = v64;
    *(void *)(v16 + 120) = v66;
    *(void *)(v16 + 128) = v68;
    *(void *)(v16 + 136) = v67;
    *(void *)(v16 + 144) = v63;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v47;
  BOOL v27 = v49;
  if ((v51 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v46 = 1 << *(unsigned char *)(v5 + 32);
  if (v46 >= 64) {
    bzero(v27, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v27 = -1 << v46;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100165DA4(uint64_t a1, char a2)
{
  return sub_100166AB8(a1, a2, &qword_100725868);
}

uint64_t sub_100165DB0(uint64_t a1, char a2)
{
  return sub_100168678(a1, a2, &qword_100725870);
}

uint64_t sub_100165DBC(uint64_t a1, int a2)
{
  return sub_100166108(a1, a2, (uint64_t (*)(void))&type metadata accessor for RecipientEncryptionCertificate, &qword_100725820);
}

uint64_t sub_100165DDC(uint64_t a1, char a2)
{
  return sub_100166AB8(a1, a2, &qword_1007259B0);
}

uint64_t sub_100165DE8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007257A0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    long long v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1000078A8(v24, v35);
      }
      else
      {
        sub_10003BC28((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1000078A8(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001660E8(uint64_t a1, int a2)
{
  return sub_100166108(a1, a2, (uint64_t (*)(void))&type metadata accessor for AnyCodable, &qword_100725818);
}

uint64_t sub_100166108(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v52 = a3(0);
  uint64_t v8 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  char v51 = (char *)&v44 - v9;
  uint64_t v10 = *v4;
  sub_100007764(a4);
  int v50 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  v47 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v13 + 63) >> 6;
  int64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v49 = v8;
  unint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v18 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v46) {
      break;
    }
    unint64_t v26 = v47;
    unint64_t v27 = v47[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v27 = v47[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v46) {
              goto LABEL_34;
            }
            unint64_t v27 = v47[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v16 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v10 + 56);
    uint64_t v30 = v10;
    uint64_t v31 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v24);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    uint64_t v34 = *(void *)(v49 + 72);
    uint64_t v35 = v29 + v34 * v24;
    if (v50)
    {
      (*v17)(v51, v35, v52);
    }
    else
    {
      (*v48)(v51, v35, v52);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v21 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t v22 = (void *)(*(void *)(v12 + 48) + 16 * v21);
    *uint64_t v22 = v32;
    v22[1] = v33;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 56) + v34 * v21, v51, v52);
    ++*(void *)(v12 + 16);
    uint64_t v10 = v30;
  }
  swift_release();
  uint64_t v6 = v45;
  unint64_t v26 = v47;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v10 + 32);
  if (v43 >= 64) {
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v43;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v12;
  return result;
}

uint64_t sub_1001664F4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007257F0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v33 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v32) {
          goto LABEL_33;
        }
        unint64_t v22 = v33[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v22 = v33[v13];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v32)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v31;
              if (a2)
              {
                uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
                if (v30 >= 64) {
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v33 = -1 << v30;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v33[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v13 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v22 = v33[v13];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v23;
          }
        }
LABEL_30:
        unint64_t v10 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      long long v34 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20);
      unint64_t v29 = *(void *)(*(void *)(v5 + 48) + 16 * v20 + 8);
      if ((a2 & 1) == 0)
      {
        sub_10002CEB0(v34, v29);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      sub_10002CEB0(v34, v29);
      Data.hash(into:)();
      sub_10000C5F4(v34, v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        long long v18 = v34;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        long long v18 = v34;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v17) = v18;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100166818(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007257B0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    int64_t v32 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      char v22 = *(unsigned char *)(*(void *)(v5 + 56) + v17);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(unsigned char *)(*(void *)(v7 + 56) + v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100166AB8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100007764(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100166DCC(uint64_t a1, char a2)
{
  return sub_100169C70(a1, a2, &qword_1007258B0);
}

uint64_t sub_100166DD8(uint64_t a1, char a2)
{
  return sub_100169C70(a1, a2, &qword_100725978);
}

uint64_t sub_100166DE4(uint64_t a1, char a2)
{
  return sub_1001689AC(a1, a2, &qword_100725968);
}

uint64_t sub_100166DF0(uint64_t a1, char a2)
{
  return sub_100169C70(a1, a2, &qword_100725950);
}

uint64_t sub_100166DFC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_100725948);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v37 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v36 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    for (int64_t i = 0; ; int64_t i = v38)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v38 = i;
        unint64_t v21 = v20 | (i << 6);
      }
      else
      {
        int64_t v22 = i + 1;
        if (__OFADD__(i, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v36) {
          goto LABEL_33;
        }
        unint64_t v23 = v37[v22];
        int64_t v24 = i + 1;
        if (!v23)
        {
          int64_t v24 = i + 2;
          if (i + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v23 = v37[v24];
          if (!v23)
          {
            uint64_t v25 = i + 3;
            if (i + 3 >= v36)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v37 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v37[v25];
            if (!v23)
            {
              while (1)
              {
                int64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v24 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v23 = v37[v24];
                ++v25;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v24 = i + 3;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        int64_t v38 = v24;
        unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
      }
      uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      uint64_t v33 = *(void *)(v5 + 56) + 96 * v21;
      uint64_t v39 = *(void *)v33;
      uint64_t v43 = *(void *)(v33 + 16);
      uint64_t v44 = *(void *)(v33 + 40);
      uint64_t v45 = *(void *)(v33 + 8);
      char v42 = *(unsigned char *)(v33 + 48);
      uint64_t v41 = *(void *)(v33 + 56);
      long long v46 = *(_OWORD *)(v33 + 64);
      long long v47 = *(_OWORD *)(v33 + 24);
      uint64_t v34 = *(void *)(v33 + 80);
      char v40 = *(unsigned char *)(v33 + 88);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v16 == v27;
          if (v16 == v27) {
            unint64_t v16 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v16);
        }
        while (v29 == -1);
        unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v32;
      uint64_t v19 = *(void *)(v7 + 56) + 96 * v17;
      *(void *)uint64_t v19 = v39;
      *(void *)(v19 + 8) = v45;
      *(void *)(v19 + 16) = v43;
      *(_OWORD *)(v19 + 24) = v47;
      *(void *)(v19 + 40) = v44;
      *(unsigned char *)(v19 + 48) = v42;
      *(void *)(v19 + 56) = v41;
      *(_OWORD *)(v19 + 64) = v46;
      *(void *)(v19 + 80) = v34;
      *(unsigned char *)(v19 + 88) = v40;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001671DC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_100725960);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001674E8(uint64_t a1, char a2)
{
  return sub_1001689AC(a1, a2, &qword_100725830);
}

uint64_t sub_1001674F4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_100725828);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1001677C8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_100725838);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v32 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
LABEL_9:
  if (v10)
  {
    unint64_t v18 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v19 = v18 | (v12 << 6);
    goto LABEL_31;
  }
  int64_t v20 = v12 + 1;
  if (__OFADD__(v12, 1)) {
    goto LABEL_42;
  }
  if (v20 >= v32)
  {
    swift_release();
    unint64_t v21 = (void *)(v5 + 64);
    if (a2)
    {
LABEL_37:
      uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
      if (v30 >= 64) {
        bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v21 = -1 << v30;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    unint64_t v21 = (void *)(v5 + 64);
    unint64_t v22 = *(void *)(v33 + 8 * v20);
    ++v12;
    if (v22) {
      goto LABEL_30;
    }
    int64_t v12 = v20 + 1;
    if (v20 + 1 >= v32) {
      goto LABEL_34;
    }
    unint64_t v22 = *(void *)(v33 + 8 * v12);
    if (v22)
    {
LABEL_30:
      unint64_t v10 = (v22 - 1) & v22;
      unint64_t v19 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_31:
      char v28 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int v13 = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = v13 & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v14) >> 6;
      while (++v16 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v16 == v25;
        if (v16 == v25) {
          unint64_t v16 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v16);
        if (v27 != -1)
        {
          unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
LABEL_8:
          *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
          *(unsigned char *)(*(void *)(v7 + 48) + v17) = v28;
          *(void *)(*(void *)(v7 + 56) + 8 * v17) = v29;
          ++*(void *)(v7 + 16);
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      JUMPOUT(0x100167C24);
    }
    int64_t v23 = v20 + 2;
    if (v23 < v32)
    {
      unint64_t v22 = *(void *)(v33 + 8 * v23);
      if (!v22)
      {
        while (1)
        {
          int64_t v12 = v23 + 1;
          if (__OFADD__(v23, 1)) {
            goto LABEL_43;
          }
          if (v12 >= v32) {
            goto LABEL_34;
          }
          unint64_t v22 = *(void *)(v33 + 8 * v12);
          ++v23;
          if (v22) {
            goto LABEL_30;
          }
        }
      }
      int64_t v12 = v23;
      goto LABEL_30;
    }
LABEL_34:
    swift_release();
    if (a2) {
      goto LABEL_37;
    }
  }
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100167C4C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007259E0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int64_t v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v32[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v32 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      Swift::UInt v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100167F28(uint64_t a1, int a2)
{
  return sub_100167F4C(a1, a2, type metadata accessor for UploadsCloudContainer.AnalyticsMetadata, &qword_1007259B8, type metadata accessor for UploadsCloudContainer.AnalyticsMetadata);
}

uint64_t sub_100167F4C(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void))
{
  uint64_t v49 = a5;
  uint64_t v7 = v5;
  uint64_t v9 = a3(0);
  uint64_t v47 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = *v5;
  sub_100007764(a4);
  int v48 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  long long v46 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v44 = v5;
  int64_t v45 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  while (1)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v45) {
      break;
    }
    uint64_t v27 = v46;
    unint64_t v28 = v46[v26];
    ++v21;
    if (!v28)
    {
      int64_t v21 = v26 + 1;
      if (v26 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v28 = v46[v21];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v7 = v44;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v21 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v45) {
              goto LABEL_34;
            }
            unint64_t v28 = v46[v21];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_22:
    uint64_t v30 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v25);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    uint64_t v33 = *(void *)(v47 + 72);
    uint64_t v34 = *(void *)(v12 + 56) + v33 * v25;
    if (v48)
    {
      sub_10016E15C(v34, (uint64_t)v11, v49);
    }
    else
    {
      sub_10016E0F4(v34, (uint64_t)v11, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v35 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    char v23 = (void *)(*(void *)(v14 + 48) + 16 * v22);
    void *v23 = v31;
    v23[1] = v32;
    uint64_t result = sub_10016E15C((uint64_t)v11, *(void *)(v14 + 56) + v33 * v22, v49);
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v7 = v44;
  uint64_t v27 = v46;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v12 + 32);
  if (v42 >= 64) {
    bzero(v27, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v42;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v7 = v14;
  return result;
}

uint64_t sub_100168300(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_100725900);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  unint64_t v37 = v2;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  for (int64_t i = 0; ; int64_t i = v40)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v40 = i;
      unint64_t v21 = v20 | (i << 6);
      goto LABEL_31;
    }
    int64_t v22 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    char v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    int64_t v25 = i + 1;
    if (!v24)
    {
      int64_t v25 = i + 2;
      if (i + 2 >= v38) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v25);
      if (!v24)
      {
        uint64_t v26 = i + 3;
        if (i + 3 >= v38)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v39 + 8 * v26);
        if (!v24)
        {
          while (1)
          {
            int64_t v25 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v25 >= v38) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v25);
            ++v26;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v25 = i + 3;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    int64_t v40 = v25;
    unint64_t v21 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_31:
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    uint64_t v34 = *(void *)(v5 + 56) + 24 * v21;
    long long v41 = *(_OWORD *)v34;
    uint64_t v35 = *(void *)(v34 + 16);
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v33;
    v18[1] = v32;
    uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
    *(_OWORD *)uint64_t v19 = v41;
    *(void *)(v19 + 16) = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  char v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10016866C(uint64_t a1, char a2)
{
  return sub_100168678(a1, a2, &qword_1007258C0);
}

uint64_t sub_100168678(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100007764(a3);
  char v41 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v39 = (void *)(v6 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v6 + 64);
    int64_t v38 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v38) {
          goto LABEL_33;
        }
        unint64_t v24 = v39[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v38) {
            goto LABEL_33;
          }
          unint64_t v24 = v39[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_33:
              swift_release();
              uint64_t v4 = v3;
              if (v41)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v6 + 32);
                if (v37 >= 64) {
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v39 = -1 << v37;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v38) {
                  goto LABEL_33;
                }
                unint64_t v24 = v39[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
      uint64_t v33 = (uint64_t *)(*(void *)(v6 + 56) + 32 * v22);
      uint64_t v34 = *v33;
      uint64_t v35 = v33[1];
      uint64_t v36 = v33[3];
      uint64_t v42 = v33[2];
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
      *uint64_t v19 = v32;
      v19[1] = v31;
      unint64_t v20 = (void *)(*(void *)(v8 + 56) + 32 * v18);
      *unint64_t v20 = v34;
      v20[1] = v35;
      v20[2] = v42;
      v20[3] = v36;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_1001689A0(uint64_t a1, char a2)
{
  return sub_1001689AC(a1, a2, &qword_100725858);
}

uint64_t sub_1001689AC(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100007764(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  int64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100168CB8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007258D8);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    long long v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      unint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 16 * v18;
    unint64_t v20 = (void *)(*(void *)(v7 + 48) + v19);
    *unint64_t v20 = v34;
    v20[1] = v33;
    *(_OWORD *)(*(void *)(v7 + 56) + v19) = v39;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100168FC8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007259F8);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v38 = v2;
  int64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    int64_t v23 = v40;
    unint64_t v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      unint64_t v24 = v40[v13];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            unint64_t v24 = v40[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 56) + 24 * v21);
    uint64_t v34 = *v33;
    uint64_t v35 = v33[1];
    unint64_t v36 = v33[2];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_10002CEB0(v35, v36);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v32;
    v18[1] = v31;
    uint64_t v19 = (void *)(*(void *)(v7 + 56) + 24 * v17);
    *uint64_t v19 = v34;
    v19[1] = v35;
    v19[2] = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  int64_t v23 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100169304(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007764(&qword_1007259F0);
  char v51 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v49 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v47 = v2;
  int64_t v48 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      if (v51) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }
    int64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v26 >= v48) {
      break;
    }
    unint64_t v27 = v49;
    unint64_t v28 = v49[v26];
    ++v13;
    if (!v28)
    {
      int64_t v13 = v26 + 1;
      if (v26 + 1 >= v48) {
        goto LABEL_33;
      }
      unint64_t v28 = v49[v13];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v48)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v47;
          if ((v51 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v28 = v49[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v13 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v48) {
              goto LABEL_33;
            }
            unint64_t v28 = v49[v13];
            ++v29;
            if (v28) {
              goto LABEL_22;
            }
          }
        }
        int64_t v13 = v29;
      }
    }
LABEL_22:
    unint64_t v10 = (v28 - 1) & v28;
    unint64_t v18 = __clz(__rbit64(v28)) + (v13 << 6);
    if (v51)
    {
LABEL_10:
      uint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = *(void *)(v5 + 56) + 152 * v18;
      char v23 = *(unsigned char *)v22;
      uint64_t v24 = *(void *)(v22 + 16);
      uint64_t v25 = *(void *)(v22 + 32);
      uint64_t v56 = *(void *)(v22 + 40);
      uint64_t v52 = *(void *)(v22 + 8);
      uint64_t v53 = *(void *)(v22 + 48);
      uint64_t v54 = *(void *)(v22 + 24);
      uint64_t v55 = *(void *)(v22 + 64);
      uint64_t v57 = *(void *)(v22 + 80);
      uint64_t v58 = *(void *)(v22 + 56);
      uint64_t v59 = *(void *)(v22 + 88);
      uint64_t v60 = *(void *)(v22 + 72);
      uint64_t v61 = *(void *)(v22 + 96);
      char v62 = *(unsigned char *)(v22 + 104);
      char v63 = *(unsigned char *)(v22 + 105);
      char v64 = *(unsigned char *)(v22 + 106);
      char v65 = *(unsigned char *)(v22 + 107);
      char v66 = *(unsigned char *)(v22 + 108);
      char v67 = *(unsigned char *)(v22 + 109);
      uint64_t v68 = *(void *)(v22 + 112);
      char v69 = *(unsigned char *)(v22 + 120);
      char v70 = *(unsigned char *)(v22 + 121);
      char v71 = *(unsigned char *)(v22 + 122);
      long long v73 = *(_OWORD *)(v22 + 128);
      uint64_t v72 = *(void *)(v22 + 144);
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    uint64_t v20 = *v30;
    uint64_t v21 = v30[1];
    uint64_t v31 = *(void *)(v5 + 56) + 152 * v18;
    long long v32 = *(_OWORD *)(v31 + 16);
    long long v74 = *(_OWORD *)v31;
    long long v75 = v32;
    long long v33 = *(_OWORD *)(v31 + 80);
    long long v35 = *(_OWORD *)(v31 + 32);
    long long v34 = *(_OWORD *)(v31 + 48);
    long long v78 = *(_OWORD *)(v31 + 64);
    long long v79 = v33;
    long long v76 = v35;
    long long v77 = v34;
    long long v37 = *(_OWORD *)(v31 + 112);
    long long v36 = *(_OWORD *)(v31 + 128);
    long long v38 = *(_OWORD *)(v31 + 96);
    uint64_t v83 = *(void *)(v31 + 144);
    long long v81 = v37;
    long long v82 = v36;
    long long v80 = v38;
    uint64_t v72 = v83;
    long long v73 = v36;
    char v70 = BYTE9(v37);
    char v71 = BYTE10(v37);
    char v69 = BYTE8(v37);
    uint64_t v68 = v37;
    char v66 = BYTE12(v38);
    char v67 = BYTE13(v38);
    char v64 = BYTE10(v38);
    char v65 = BYTE11(v38);
    char v62 = BYTE8(v38);
    char v63 = BYTE9(v38);
    uint64_t v60 = *((void *)&v78 + 1);
    uint64_t v61 = v38;
    uint64_t v58 = *((void *)&v77 + 1);
    uint64_t v59 = *((void *)&v79 + 1);
    uint64_t v56 = *((void *)&v35 + 1);
    uint64_t v25 = v35;
    uint64_t v57 = v79;
    uint64_t v54 = *((void *)&v75 + 1);
    uint64_t v24 = v75;
    uint64_t v55 = v78;
    uint64_t v52 = *((void *)&v74 + 1);
    uint64_t v53 = v77;
    char v23 = v74;
    swift_bridgeObjectRetain();
    sub_1000B5FB4((uint64_t)&v74);
LABEL_24:
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v39 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v11 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v40) & ~*(void *)(v11 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v11 + 8 * v41);
      }
      while (v45 == -1);
      unint64_t v14 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v20;
    v15[1] = v21;
    uint64_t v16 = *(void *)(v7 + 56) + 152 * v14;
    *(unsigned char *)uint64_t v16 = v23;
    *(void *)(v16 + 8) = v52;
    *(void *)(v16 + 16) = v24;
    *(void *)(v16 + 24) = v54;
    *(void *)(v16 + 32) = v25;
    *(void *)(v16 + 40) = v56;
    *(void *)(v16 + 48) = v53;
    *(void *)(v16 + 56) = v58;
    *(void *)(v16 + 64) = v55;
    *(void *)(v16 + 72) = v60;
    *(void *)(v16 + 80) = v57;
    *(void *)(v16 + 88) = v59;
    *(void *)(v16 + 96) = v61;
    *(unsigned char *)(v16 + 104) = v62;
    *(unsigned char *)(v16 + 105) = v63;
    *(unsigned char *)(v16 + 106) = v64;
    *(unsigned char *)(v16 + 107) = v65;
    *(unsigned char *)(v16 + 108) = v66;
    *(unsigned char *)(v16 + 109) = v67;
    *(void *)(v16 + 112) = v68;
    *(unsigned char *)(v16 + 120) = v69;
    *(unsigned char *)(v16 + 121) = v70;
    *(unsigned char *)(v16 + 122) = v71;
    *(_OWORD *)(v16 + 128) = v73;
    *(void *)(v16 + 144) = v72;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v47;
  unint64_t v27 = v49;
  if ((v51 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v46 = 1 << *(unsigned char *)(v5 + 32);
  if (v46 >= 64) {
    bzero(v27, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v27 = -1 << v46;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100169840(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for IQCType();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100007764(&qword_100725890);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    long long v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    unint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    unint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      sub_10016DFF8(&qword_100725898, (void (*)(uint64_t))&type metadata accessor for IQCType);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100169C64(uint64_t a1, char a2)
{
  return sub_100169C70(a1, a2, &qword_100725958);
}

uint64_t sub_100169C70(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100007764(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

id sub_100169F84()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007258B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016A128()
{
  return sub_10016D4E4(&qword_100725840);
}

void *sub_10016A134()
{
  return sub_10016C4A4((uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo, &qword_1007258D0, (uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo);
}

void *sub_10016A158()
{
  return sub_10016B39C((uint64_t (*)(void))&type metadata accessor for AEADKey, &qword_1007258C8);
}

void *sub_10016A178()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007257E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_100030A10(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    sub_10000C6B4(v26, *(void *)(v4 + 56) + v20);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10016A364()
{
  uint64_t v1 = v0;
  sub_100007764((uint64_t *)&unk_100734000);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016A520()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007764(&qword_10071F7B0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v23 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 32 * v16;
    sub_10003BC28(*(void *)(v6 + 56) + v18, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    id result = sub_1000078A8(v26, (_OWORD *)(*(void *)(v8 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v24)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10016A7C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007764(&qword_100720FC8);
  uint64_t v25 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007764(&qword_1007259D0);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v23 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v14) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    char v17 = *(unsigned char *)(*(void *)(v5 + 48) + v16);
    unint64_t v18 = *(void *)(v25 + 72) * v16;
    sub_100048D6C(*(void *)(v5 + 56) + v18, (uint64_t)v4, &qword_100720FC8);
    *(unsigned char *)(*(void *)(v7 + 48) + v16) = v17;
    id result = (void *)sub_1000BEA14((uint64_t)v4, *(void *)(v7 + 56) + v18, &qword_100720FC8);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10016AA34()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007259D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016ABC4()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007259C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    int64_t v19 = (void *)(*(void *)(v4 + 56) + 16 * v15);
    *int64_t v19 = v18;
    v19[1] = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016AD70()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_100725810);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    int64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *int64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016AF1C()
{
  return sub_10016B9A8(&qword_100725808);
}

void *sub_10016AF28()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007259A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v38 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v38 >= v13) {
      goto LABEL_26;
    }
    unint64_t v39 = *(void *)(v6 + 8 * v38);
    ++v9;
    if (!v39)
    {
      int64_t v9 = v38 + 1;
      if (v38 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v39 = *(void *)(v6 + 8 * v9);
      if (!v39) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v39 - 1) & v39;
    unint64_t v15 = __clz(__rbit64(v39)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 152 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    long long v22 = *(_OWORD *)(v21 + 32);
    long long v23 = *(_OWORD *)(v21 + 48);
    long long v24 = *(_OWORD *)(v21 + 80);
    long long v45 = *(_OWORD *)(v21 + 64);
    long long v46 = v24;
    long long v44 = v23;
    long long v26 = *(_OWORD *)(v21 + 112);
    long long v25 = *(_OWORD *)(v21 + 128);
    long long v27 = *(_OWORD *)(v21 + 96);
    uint64_t v50 = *(void *)(v21 + 144);
    long long v48 = v26;
    long long v49 = v25;
    long long v47 = v27;
    long long v28 = *(_OWORD *)(v21 + 16);
    long long v41 = *(_OWORD *)v21;
    long long v42 = v28;
    long long v43 = v22;
    uint64_t v29 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v29 = v19;
    v29[1] = v18;
    uint64_t v30 = *(void *)(v4 + 56) + v20;
    long long v31 = v42;
    *(_OWORD *)uint64_t v30 = v41;
    *(_OWORD *)(v30 + 16) = v31;
    long long v32 = v43;
    long long v33 = v44;
    long long v34 = v46;
    *(_OWORD *)(v30 + 64) = v45;
    *(_OWORD *)(v30 + 80) = v34;
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)(v30 + 48) = v33;
    long long v35 = v47;
    long long v36 = v48;
    long long v37 = v49;
    *(void *)(v30 + 144) = v50;
    *(_OWORD *)(v30 + 112) = v36;
    *(_OWORD *)(v30 + 128) = v37;
    *(_OWORD *)(v30 + 96) = v35;
    swift_bridgeObjectRetain();
    id result = (void *)sub_1000B53AC((uint64_t)&v41);
  }
  int64_t v40 = v38 + 2;
  if (v40 >= v13) {
    goto LABEL_26;
  }
  unint64_t v39 = *(void *)(v6 + 8 * v40);
  if (v39)
  {
    int64_t v9 = v40;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v39 = *(void *)(v6 + 8 * v9);
    ++v40;
    if (v39) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016B150()
{
  return sub_10016B9A8(&qword_100725868);
}

void *sub_10016B15C()
{
  return sub_10016C910(&qword_100725870);
}

void *sub_10016B168()
{
  return sub_10016B39C((uint64_t (*)(void))&type metadata accessor for RecipientEncryptionCertificate, &qword_100725820);
}

void *sub_10016B188()
{
  return sub_10016B9A8(&qword_1007259B0);
}

void *sub_10016B194()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007257A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  long long v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10003BC28(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_1000078A8(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10016B37C()
{
  return sub_10016B39C((uint64_t (*)(void))&type metadata accessor for AnyCodable, &qword_100725818);
}

void *sub_10016B39C(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v39 = a1(0);
  uint64_t v4 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v33 - v5;
  sub_100007764(a2);
  long long v34 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v40 = v8;
  if (!v9)
  {
    id result = (void *)swift_release();
    uint64_t v32 = v40;
    long long v31 = v34;
LABEL_28:
    uint64_t *v31 = v32;
    return result;
  }
  uint64_t v10 = v8;
  id result = (void *)(v8 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    uint64_t v10 = v40;
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 64);
  uint64_t v35 = v7 + 64;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v37 = v4 + 32;
  uint64_t v38 = v4 + 16;
  uint64_t v18 = v39;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      int64_t v14 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v14);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v29 - 1) & v29;
    unint64_t v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    uint64_t v21 = 16 * v20;
    int64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v20);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unint64_t v25 = *(void *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 56) + v25, v18);
    uint64_t v26 = v40;
    long long v27 = (void *)(*(void *)(v40 + 48) + v21);
    *long long v27 = v23;
    v27[1] = v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v26 + 56) + v25, v6, v18);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    id result = (void *)swift_release();
    long long v31 = v34;
    uint64_t v32 = v40;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    int64_t v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v14);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10016B660()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007257F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v18) = v19;
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    sub_10002CEB0(v19, *((unint64_t *)&v19 + 1));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016B818()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007257B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016B9A8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100007764(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016BB58()
{
  return sub_10016D4E4(&qword_1007258B0);
}

void *sub_10016BB64()
{
  return sub_10016D4E4(&qword_100725978);
}

id sub_10016BB70()
{
  return sub_10016CAEC(&qword_100725968);
}

void *sub_10016BB7C()
{
  return sub_10016D4E4(&qword_100725950);
}

void *sub_10016BB88()
{
  sub_100007764(&qword_100725948);
  uint64_t v35 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v35 = v3;
    return result;
  }
  id result = (void *)(v2 + 64);
  unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5) {
    id result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  }
  uint64_t v36 = v1 + 64;
  int64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v1 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    int64_t v32 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v32 >= v11) {
      goto LABEL_26;
    }
    unint64_t v33 = *(void *)(v36 + 8 * v32);
    ++v7;
    if (!v33)
    {
      int64_t v7 = v32 + 1;
      if (v32 + 1 >= v11) {
        goto LABEL_26;
      }
      unint64_t v33 = *(void *)(v36 + 8 * v7);
      if (!v33) {
        break;
      }
    }
LABEL_25:
    unint64_t v10 = (v33 - 1) & v33;
    unint64_t v13 = __clz(__rbit64(v33)) + (v7 << 6);
LABEL_12:
    uint64_t v14 = 16 * v13;
    unint64_t v15 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v13);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = 96 * v13;
    uint64_t v19 = *(void *)(v1 + 56) + v18;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 16);
    uint64_t v23 = *(void *)(v19 + 40);
    char v24 = *(unsigned char *)(v19 + 48);
    uint64_t v25 = *(void *)(v19 + 56);
    uint64_t v26 = *(void *)(v19 + 80);
    char v27 = *(unsigned char *)(v19 + 88);
    int64_t v28 = (void *)(*(void *)(v3 + 48) + v14);
    long long v29 = *(_OWORD *)(v19 + 24);
    long long v30 = *(_OWORD *)(v19 + 64);
    *int64_t v28 = v16;
    v28[1] = v17;
    uint64_t v31 = *(void *)(v3 + 56) + v18;
    *(void *)uint64_t v31 = v20;
    *(void *)(v31 + 8) = v21;
    *(void *)(v31 + 16) = v22;
    *(_OWORD *)(v31 + 24) = v29;
    *(void *)(v31 + 40) = v23;
    *(unsigned char *)(v31 + 48) = v24;
    *(void *)(v31 + 56) = v25;
    *(_OWORD *)(v31 + 64) = v30;
    *(void *)(v31 + 80) = v26;
    *(unsigned char *)(v31 + 88) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v34 = v32 + 2;
  if (v34 >= v11) {
    goto LABEL_26;
  }
  unint64_t v33 = *(void *)(v36 + 8 * v34);
  if (v33)
  {
    int64_t v7 = v34;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v7 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v7 >= v11) {
      goto LABEL_26;
    }
    unint64_t v33 = *(void *)(v36 + 8 * v7);
    ++v34;
    if (v33) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016BDD4()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_100725960);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10016BF84()
{
  return sub_10016CAEC(&qword_100725830);
}

id sub_10016BF90()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_100725828);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016C138()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_100725838);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016C2DC()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007259E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016C480()
{
  return sub_10016C4A4(type metadata accessor for UploadsCloudContainer.AnalyticsMetadata, &qword_1007259B8, type metadata accessor for UploadsCloudContainer.AnalyticsMetadata);
}

void *sub_10016C4A4(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = a1(0);
  uint64_t v33 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v30 - v7;
  sub_100007764(a2);
  long long v30 = v3;
  uint64_t v9 = *v3;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *long long v30 = v11;
    return result;
  }
  id result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13) {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  }
  uint64_t v31 = v9 + 64;
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  int64_t v32 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v32) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v27);
    ++v15;
    if (!v28)
    {
      int64_t v15 = v27 + 1;
      if (v27 + 1 >= v32) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v31 + 8 * v15);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v20 = __clz(__rbit64(v28)) + (v15 << 6);
LABEL_12:
    uint64_t v21 = 16 * v20;
    int64_t v22 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v20);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unint64_t v25 = *(void *)(v33 + 72) * v20;
    sub_10016E0F4(*(void *)(v9 + 56) + v25, (uint64_t)v8, a3);
    uint64_t v26 = (void *)(*(void *)(v11 + 48) + v21);
    *uint64_t v26 = v23;
    v26[1] = v24;
    sub_10016E15C((uint64_t)v8, *(void *)(v11 + 56) + v25, a3);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v32) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v31 + 8 * v29);
  if (v28)
  {
    int64_t v15 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v15 >= v32) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v15);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016C718()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_100725900);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)(v21 + 16);
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    long long v24 = *(_OWORD *)v21;
    void *v23 = v18;
    v23[1] = v19;
    uint64_t v25 = *(void *)(v4 + 56) + v20;
    *(_OWORD *)uint64_t v25 = v24;
    *(void *)(v25 + 16) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016C904()
{
  return sub_10016C910(&qword_1007258C0);
}

void *sub_10016C910(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100007764(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v14) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v7 + 8 * v29);
    ++v10;
    if (!v30)
    {
      int64_t v10 = v29 + 1;
      if (v29 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v7 + 8 * v10);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v30 - 1) & v30;
    unint64_t v16 = __clz(__rbit64(v30)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = 32 * v16;
    uint64_t v22 = (uint64_t *)(*(void *)(v3 + 56) + v21);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = v22[2];
    uint64_t v26 = v22[3];
    unint64_t v27 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v27 = v20;
    v27[1] = v19;
    int64_t v28 = (void *)(*(void *)(v5 + 56) + v21);
    *int64_t v28 = v23;
    v28[1] = v24;
    v28[2] = v25;
    v28[3] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v14) {
    goto LABEL_26;
  }
  unint64_t v30 = *(void *)(v7 + 8 * v31);
  if (v30)
  {
    int64_t v10 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v7 + 8 * v10);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10016CAE0()
{
  return sub_10016CAEC(&qword_100725858);
}

id sub_10016CAEC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100007764(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016CC98()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007258D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016CE44()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007259F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = (uint64_t *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    unint64_t v24 = v21[2];
    int64_t v25 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v25 = v19;
    v25[1] = v18;
    uint64_t v26 = (void *)(*(void *)(v4 + 56) + v20);
    *uint64_t v26 = v22;
    v26[1] = v23;
    _OWORD v26[2] = v24;
    swift_bridgeObjectRetain();
    id result = (void *)sub_10002CEB0(v23, v24);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016D01C()
{
  uint64_t v1 = v0;
  sub_100007764(&qword_1007259F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v38 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v38 >= v13) {
      goto LABEL_26;
    }
    unint64_t v39 = *(void *)(v6 + 8 * v38);
    ++v9;
    if (!v39)
    {
      int64_t v9 = v38 + 1;
      if (v38 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v39 = *(void *)(v6 + 8 * v9);
      if (!v39) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v39 - 1) & v39;
    unint64_t v15 = __clz(__rbit64(v39)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 152 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    long long v22 = *(_OWORD *)(v21 + 32);
    long long v23 = *(_OWORD *)(v21 + 48);
    long long v24 = *(_OWORD *)(v21 + 80);
    long long v45 = *(_OWORD *)(v21 + 64);
    long long v46 = v24;
    long long v44 = v23;
    long long v26 = *(_OWORD *)(v21 + 112);
    long long v25 = *(_OWORD *)(v21 + 128);
    long long v27 = *(_OWORD *)(v21 + 96);
    uint64_t v50 = *(void *)(v21 + 144);
    long long v48 = v26;
    long long v49 = v25;
    long long v47 = v27;
    long long v28 = *(_OWORD *)(v21 + 16);
    long long v41 = *(_OWORD *)v21;
    long long v42 = v28;
    long long v43 = v22;
    int64_t v29 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v29 = v19;
    v29[1] = v18;
    uint64_t v30 = *(void *)(v4 + 56) + v20;
    long long v31 = v42;
    *(_OWORD *)uint64_t v30 = v41;
    *(_OWORD *)(v30 + 16) = v31;
    long long v32 = v43;
    long long v33 = v44;
    long long v34 = v46;
    *(_OWORD *)(v30 + 64) = v45;
    *(_OWORD *)(v30 + 80) = v34;
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)(v30 + 48) = v33;
    long long v35 = v47;
    long long v36 = v48;
    long long v37 = v49;
    *(void *)(v30 + 144) = v50;
    *(_OWORD *)(v30 + 112) = v36;
    *(_OWORD *)(v30 + 128) = v37;
    *(_OWORD *)(v30 + 96) = v35;
    swift_bridgeObjectRetain();
    id result = (void *)sub_1000B5FB4((uint64_t)&v41);
  }
  int64_t v40 = v38 + 2;
  if (v40 >= v13) {
    goto LABEL_26;
  }
  unint64_t v39 = *(void *)(v6 + 8 * v40);
  if (v39)
  {
    int64_t v9 = v40;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v39 = *(void *)(v6 + 8 * v9);
    ++v40;
    if (v39) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10016D244()
{
  uint64_t v1 = type metadata accessor for IQCType();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007764(&qword_100725890);
  long long v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v17);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10016D4D8()
{
  return sub_10016D4E4(&qword_100725958);
}

void *sub_10016D4E4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100007764(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10016D694(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10016D6D0(a1, a2, a3, (void (*)(void))sub_10016DF68, &qword_100725888, &qword_100725880, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_100530BEC);
}

uint64_t sub_10016D6D0(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = sub_10016DFA8(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = sub_100007764(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          id v24 = *v23;
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10016D8F4(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100007764(&qword_1007259A0);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_1005906D8(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  unint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    int64_t v10 = (void *)(v3[7] + 16 * result);
    *int64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    unint64_t v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1005906D8(v4);
    unint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_10016DA04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100007764(&qword_1007257B0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (unsigned char *)(a1 + 40); ; i += 16)
    {
      uint64_t v5 = *((void *)i - 1);
      char v6 = *i;
      unint64_t result = sub_1005906D8(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(unsigned char *)(v3[7] + result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10016DADC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100007764(&qword_1007258F8);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_1005906D8(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

void *sub_10016DBB4(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v2;
  int64_t v29 = a2;
  uint64_t v5 = sub_100007764(&qword_1007257B8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100007764(&qword_100724050);
  uint64_t v8 = __chkstk_darwin(v28);
  uint64_t v27 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v25 = (uint64_t)&v23 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v24 = v10;
  uint64_t v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  uint64_t v23 = a1;
  uint64_t v13 = (uint64_t *)(a1 + 56);
  unint64_t v14 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v15 = *(v13 - 1);
    uint64_t v16 = *v13;
    uint64_t v18 = *(v13 - 3);
    uint64_t v17 = *(v13 - 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v18, v17, v15, v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v14;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*v26)(v7, 1, v28) == 1)
    {
      sub_10000C6CC((uint64_t)v7, &qword_1007257B8);
    }
    else
    {
      uint64_t v19 = v25;
      sub_1000BEA14((uint64_t)v7, v25, &qword_100724050);
      sub_1000BEA14(v19, v27, &qword_100724050);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v14 = (void *)sub_10010FB68(0, v14[2] + 1, 1, (unint64_t)v14);
      }
      unint64_t v21 = v14[2];
      unint64_t v20 = v14[3];
      if (v21 >= v20 >> 1) {
        unint64_t v14 = (void *)sub_10010FB68(v20 > 1, v21 + 1, 1, (unint64_t)v14);
      }
      v14[2] = v21 + 1;
      sub_1000BEA14(v27, (uint64_t)v14+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v21, &qword_100724050);
    }
    v13 += 4;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10016DEB8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016DEF0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10016DF18()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10016DF40(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10016DF4C(uint64_t (**a1)())
{
  return sub_10015EC20(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_10016DF68()
{
  unint64_t result = qword_100725878;
  if (!qword_100725878)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100725878);
  }
  return result;
}

uint64_t sub_10016DFA8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019364(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016DFF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016E040(uint64_t a1)
{
  return a1;
}

uint64_t sub_10016E0F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10016E15C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10016E1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v8 = 1701601613;
    uint64_t v9 = defaultLogger()();
    __chkstk_darwin(v9);
    *(&v11 - 2) = a1;
    *(&v11 - 1) = a2;
    Logger.sensitive(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((a1 != 49 || a2 != 0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v8 = 0x656C616D6546;
      if ((a1 != 50 || a2 != 0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0x6E776F6E6B6E55;
      }
    }
  }
  else
  {
    type metadata accessor for DaemonAnalytics();
    swift_bridgeObjectRetain();
    static DaemonAnalytics.sendGenderInvalidEvent(issuer:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

unint64_t sub_10016E3D8(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD000000000000021;
}

unint64_t sub_10016E458(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Calendar();
  uint64_t v92 = *(void *)(v6 - 8);
  uint64_t v93 = v6;
  __chkstk_darwin(v6);
  v98 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateComponents();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  __chkstk_darwin(v8);
  v89 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v99 = *(void *)(v13 - 8);
  uint64_t v100 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v97 = (char *)&v85 - v17;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v85 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  __chkstk_darwin(v26);
  int64_t v29 = (char *)&v85 - v28;
  if (!a2)
  {
    uint64_t v72 = v18;
    defaultLogger()();
    long long v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      long long v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Date of birth doesn't exist in the PDF417, hence not stored in the database", v75, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v72);
    type metadata accessor for DaemonAnalytics();
    swift_bridgeObjectRetain();
    static DaemonAnalytics.sendDateOfBirthInvalidEvent(issuer:isEmpty:invalidRange:incorrectFormat:)();
    goto LABEL_40;
  }
  uint64_t v88 = v27;
  uint64_t v96 = v3;
  uint64_t v30 = defaultLogger()();
  __chkstk_darwin(v30);
  *(&v85 - 2) = a1;
  *(&v85 - 1) = a2;
  Logger.sensitive(_:)();
  long long v31 = *(void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v94 = v19 + 8;
  uint64_t v95 = v18;
  v31(v29, v18);
  long long v32 = v31;
  id v33 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v34 = String._bridgeToObjectiveC()();
  [v33 setDateFormat:v34];

  id v35 = v33;
  NSString v36 = String._bridgeToObjectiveC()();
  id v37 = [v33 dateFromString:v36];

  if (!v37)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v12, 1, 1, v100);
    goto LABEL_36;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v38 = v99;
  uint64_t v39 = v100;
  int64_t v40 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
  v40(v12, v16, v100);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v12, 0, 1, v39);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v12, 1, v39) == 1)
  {
LABEL_36:
    sub_100027994((uint64_t)v12);
LABEL_37:
    defaultLogger()();
    long long v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.debug.getter();
    BOOL v78 = os_log_type_enabled(v76, v77);
    uint64_t v79 = v95;
    if (v78)
    {
      long long v80 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Date of birth is in an incorrect format. Unable to derive the age. ", v80, 2u);
      swift_slowDealloc();
    }

    v32(v25, v79);
    type metadata accessor for DaemonAnalytics();
    swift_bridgeObjectRetain();
    static DaemonAnalytics.sendDateOfBirthInvalidEvent(issuer:isEmpty:invalidRange:incorrectFormat:)();

LABEL_40:
    swift_bridgeObjectRelease();
    return 0;
  }
  id v86 = v35;
  v87 = v32;
  long long v41 = v97;
  v40(v97, v12, v39);
  static Calendar.current.getter();
  sub_100007764((uint64_t *)&unk_1007239B8);
  uint64_t v42 = type metadata accessor for Calendar.Component();
  uint64_t v43 = *(void *)(v42 - 8);
  unint64_t v44 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_100610730;
  (*(void (**)(unint64_t, void, uint64_t))(v43 + 104))(v45 + v44, enum case for Calendar.Component.year(_:), v42);
  uint64_t v46 = v100;
  sub_1004C5810(v45);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Date.init()();
  long long v47 = v89;
  long long v48 = v98;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  long long v49 = *(void (**)(char *, uint64_t))(v38 + 8);
  v49(v16, v46);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v48, v93);
  uint64_t v50 = DateComponents.year.getter();
  LOBYTE(v48) = v51;
  (*(void (**)(char *, uint64_t))(v90 + 8))(v47, v91);
  if (v48)
  {
    v49(v41, v46);
    id v35 = v86;
    long long v32 = v87;
    goto LABEL_37;
  }
  uint64_t v52 = defaultLogger()();
  __chkstk_darwin(v52);
  *(&v85 - 2) = v50;
  Logger.sensitive(_:)();
  uint64_t v53 = v29;
  uint64_t v54 = v95;
  uint64_t v55 = (void (*)(uint64_t, uint64_t))v87;
  v87(v53, v95);
  unint64_t result = sub_10015CA2C((uint64_t)&off_1006F0F30);
  int64_t v57 = 0;
  unint64_t v58 = result + 64;
  uint64_t v59 = 1 << *(unsigned char *)(result + 32);
  uint64_t v60 = -1;
  if (v59 < 64) {
    uint64_t v60 = ~(-1 << v59);
  }
  unint64_t v61 = v60 & *(void *)(result + 64);
  int64_t v62 = (unint64_t)(v59 + 63) >> 6;
  while (v61)
  {
    unint64_t v63 = __clz(__rbit64(v61));
    v61 &= v61 - 1;
    unint64_t v64 = v63 | (v57 << 6);
LABEL_9:
    char v65 = (uint64_t *)(*(void *)(result + 56) + 16 * v64);
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    if (v50 >= v67 && v50 < v66)
    {
      uint64_t v81 = *(void *)(*(void *)(result + 48) + 16 * v64);
      swift_bridgeObjectRetain();
      swift_release();
      v49(v97, v100);

      return v81;
    }
  }
  int64_t v69 = v57 + 1;
  if (__OFADD__(v57, 1))
  {
    __break(1u);
LABEL_49:
    __break(1u);
    return result;
  }
  if (v69 >= v62) {
    goto LABEL_45;
  }
  unint64_t v70 = *(void *)(v58 + 8 * v69);
  ++v57;
  if (v70) {
    goto LABEL_31;
  }
  int64_t v57 = v69 + 1;
  if (v69 + 1 >= v62) {
    goto LABEL_45;
  }
  unint64_t v70 = *(void *)(v58 + 8 * v57);
  if (v70) {
    goto LABEL_31;
  }
  int64_t v57 = v69 + 2;
  if (v69 + 2 >= v62) {
    goto LABEL_45;
  }
  unint64_t v70 = *(void *)(v58 + 8 * v57);
  if (v70) {
    goto LABEL_31;
  }
  int64_t v57 = v69 + 3;
  if (v69 + 3 >= v62) {
    goto LABEL_45;
  }
  unint64_t v70 = *(void *)(v58 + 8 * v57);
  if (v70) {
    goto LABEL_31;
  }
  int64_t v57 = v69 + 4;
  if (v69 + 4 >= v62) {
    goto LABEL_45;
  }
  unint64_t v70 = *(void *)(v58 + 8 * v57);
  if (v70)
  {
LABEL_31:
    unint64_t v61 = (v70 - 1) & v70;
    unint64_t v64 = __clz(__rbit64(v70)) + (v57 << 6);
    goto LABEL_9;
  }
  int64_t v71 = v69 + 5;
  if (v71 < v62)
  {
    unint64_t v70 = *(void *)(v58 + 8 * v71);
    if (!v70)
    {
      while (1)
      {
        int64_t v57 = v71 + 1;
        if (__OFADD__(v71, 1)) {
          goto LABEL_49;
        }
        if (v57 >= v62) {
          goto LABEL_45;
        }
        unint64_t v70 = *(void *)(v58 + 8 * v57);
        ++v71;
        if (v70) {
          goto LABEL_31;
        }
      }
    }
    int64_t v57 = v71;
    goto LABEL_31;
  }
LABEL_45:
  swift_release();
  defaultLogger()();
  long long v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v82, v83))
  {
    v84 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v84 = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Age not in the valid range", v84, 2u);
    swift_slowDealloc();
  }

  v55(v88, v54);
  type metadata accessor for DaemonAnalytics();
  swift_bridgeObjectRetain();
  static DaemonAnalytics.sendDateOfBirthInvalidEvent(issuer:isEmpty:invalidRange:incorrectFormat:)();

  swift_bridgeObjectRelease();
  v49(v97, v100);
  return 0;
}

uint64_t sub_10016EF48(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(52);
  v4._object = (void *)0x800000010063BFF0;
  v4._countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  return 0;
}

uint64_t sub_10016EFCC(int a1, Swift::Int a2, uint64_t a3)
{
  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return a3;
}

uint64_t sub_10016F058(char a1)
{
  _StringGuts.grow(_:)(51);
  v2._countAndFlagsBits = 0xD000000000000031;
  v2._object = (void *)0x800000010063C060;
  String.append(_:)(v2);
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0x44455249505845;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xEB00000000594441;
      unint64_t v4 = 0x45525F4D49414C43;
      break;
    case 2:
      unint64_t v4 = 0x474E49444E4550;
      break;
    case 3:
      unint64_t v4 = 0xD000000000000018;
      unint64_t v3 = 0x8000000100628FD0;
      break;
    case 4:
      Swift::String v5 = "PENDING_WORKFLOW";
      goto LABEL_7;
    case 5:
      Swift::String v5 = "LIVENESS_STEP_UP";
LABEL_7:
      unint64_t v3 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      unint64_t v4 = 0xD000000000000010;
      break;
    default:
      break;
  }
  unint64_t v6 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10016F1A4()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityBiomeHelper()
{
  return self;
}

uint64_t sub_10016F200()
{
  return sub_10016EF48(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10016F208()
{
  return sub_10016EFCC(*(void *)(v0 + 16), 33, 0xD00000000000001FLL);
}

unint64_t sub_10016F240()
{
  return sub_10016E3D8(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10016F248(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = 0;
  if ((a2 & 1) == 0 && a1)
  {
    uint64_t v9 = defaultLogger()();
    __chkstk_darwin(v9);
    *(&v14 - 2) = a1;
    Logger.sensitive(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    unint64_t v10 = sub_10016D8F4(&off_1006F1090);
    sub_100007764(&qword_100725AD8);
    swift_arrayDestroy();
    if (*(void *)(v10 + 16) && (unint64_t v11 = sub_1005906D8(a1), (v12 & 1) != 0))
    {
      uint64_t v8 = *(void *)(*(void *)(v10 + 56) + 16 * v11);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v8 = 0;
    }
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_10016F3E4()
{
  return sub_10016EFCC(*(void *)(v0 + 16), 47, 0xD00000000000002DLL);
}

uint64_t sub_10016F41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10016F734(a1, a2, a3);
}

uint64_t sub_10016F42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100142F3C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_100007764((uint64_t *)&unk_100723650);
  return swift_task_create();
}

uint64_t sub_10016F5AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100142F3C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  type metadata accessor for MobileDocumentReaderResponse();
  return swift_task_create();
}

uint64_t sub_10016F728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10016F734(a1, a2, a3);
}

uint64_t sub_10016F734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100142F3C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

id sub_10016F8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = a3;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  IdentityProofingConfiguration.state.getter();
  if (!v15)
  {
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.idStateUnavailable(_:), v11);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
LABEL_5:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return (id)swift_willThrow();
  }
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  Swift::String v16 = String.lowercased()();
  swift_bridgeObjectRelease();
  sub_1001007EC(v16._countAndFlagsBits, (uint64_t)v16._object);
  if (v6) {
    return (id)swift_bridgeObjectRelease();
  }
  unint64_t v19 = v17;
  uint64_t v44 = a2;
  swift_bridgeObjectRelease();
  if (!v19)
  {
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v11);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    goto LABEL_5;
  }
  uint64_t v20 = v19 & 0xFFFFFFFFFFFFFF8;
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    unint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = a4;
  if (v21)
  {
    if ((v19 & 0xC000000000000001) != 0)
    {
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_37:
        swift_bridgeObjectRetain();
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
      id v23 = *(id *)(v19 + 32);
    }
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    id v25 = [v24 workflowID];

    if (v25)
    {
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v28 = 0;
    }
    uint64_t v20 = v19 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  uint64_t v29 = v47;
  uint64_t v43 = (void *)(v22 + 16);
  swift_beginAccess();
  *(void *)(v29 + 16) = v26;
  *(void *)(v29 + 24) = v28;
  swift_bridgeObjectRelease();
  if (!v21)
  {
    id v35 = v43;
    swift_beginAccess();
    void *v35 = 0;
    v35[1] = 0;
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  unint64_t v21 = v19 & 0xC000000000000001;
  if ((v19 & 0xC000000000000001) != 0) {
    goto LABEL_37;
  }
  if (!*(void *)(v20 + 16))
  {
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
LABEL_30:
    id v37 = [v36 country];

    if (v37)
    {
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v39;

LABEL_33:
      uint64_t v41 = v45;
      swift_beginAccess();
      *(void *)(v41 + 16) = v38;
      *(void *)(v41 + 24) = v40;
      swift_bridgeObjectRelease();
      sub_100170B90(v44, v19);
      swift_bridgeObjectRelease();
      return sub_1000FFAB4();
    }
LABEL_32:
    uint64_t v38 = 0;
    uint64_t v40 = 0;
    goto LABEL_33;
  }
  id v30 = *(id *)(v19 + 32);
LABEL_23:
  id v31 = [v30 proofingSessionID];

  if (v31)
  {
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v34 = 0;
  }
  swift_beginAccess();
  *(void *)(v22 + 16) = v32;
  *(void *)(v22 + 24) = v34;
  id result = (id)swift_bridgeObjectRelease();
  if (v21) {
    goto LABEL_39;
  }
  if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v36 = *(id *)(v19 + 32);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_10016FE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v10;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  return _swift_task_switch(sub_10016FE48, 0, 0);
}

uint64_t sub_10016FE48()
{
  uint64_t v1 = v0[8];
  swift_beginAccess();
  if (*(void *)(v1 + 24))
  {
    uint64_t v2 = *(void *)(v0[8] + 16);
    uint64_t v3 = *(void *)(v1 + 24);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0xE000000000000000;
  }
  v0[11] = v3;
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10016FF38;
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];
  uint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  return sub_1001713CC(v8, v7, v2, v3, v5, v6);
}

uint64_t sub_10016FF38()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100170074, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100170074()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001700D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  sub_100007764(&qword_10071FEE0);
  v5[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v5[14] = v6;
  v5[15] = *(void *)(v6 - 8);
  v5[16] = swift_task_alloc();
  return _swift_task_switch(sub_1001701D0, 0, 0);
}

uint64_t sub_1001701D0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Proofing has been cancelled by the user, will attempt to clean up and notify the server using Credential Identifier", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v6 = v0[14];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v8 = v0[11];
  uint64_t v7 = v0[12];
  uint64_t v9 = v0[9];
  uint64_t v11 = v10;
  uint64_t v27 = v0[8];
  uint64_t v28 = v0[10];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v11;
  v15[3] = v27;
  v15[4] = v9;
  v15[5] = v28;
  v15[6] = v8;
  v15[7] = v12;
  v15[8] = v13;
  v15[9] = v14;
  v15[10] = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_1001728A8, (uint64_t)v15);
  uint64_t v18 = v0[12];
  uint64_t v17 = v0[13];
  uint64_t v26 = v17;
  swift_release();
  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
  swift_beginAccess();
  uint64_t v20 = *(void *)(v12 + 16);
  uint64_t v21 = *(void *)(v12 + 24);
  swift_beginAccess();
  uint64_t v22 = *(void *)(v13 + 16);
  uint64_t v23 = *(void *)(v13 + 24);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = 0;
  v24[3] = 0;
  v24[4] = v18;
  v24[5] = v20;
  v24[6] = v21;
  v24[7] = v14;
  v24[8] = v22;
  v24[9] = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10016F734(v26, (uint64_t)&unk_100725BD8, (uint64_t)v24);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  id v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

void sub_100170598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v45 = a7;
  uint64_t v46 = a8;
  uint64_t v44 = a6;
  uint64_t v15 = type metadata accessor for DIPError.Code();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001004A8(a2, a3, a4, a5);
  if (!v9)
  {
    uint64_t v20 = v19;
    uint64_t v22 = v44;
    uint64_t v21 = v45;
    uint64_t v23 = v46;
    uint64_t v43 = a1;
    if (v19)
    {
      v42[1] = v44 + 16;
      id v24 = [v19 workflowID];
      if (v24)
      {
        id v25 = v24;
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v28 = 0;
      }
      uint64_t v46 = a9;
      v42[2] = v23 + 16;
      swift_beginAccess();
      *(void *)(v22 + 16) = v26;
      *(void *)(v22 + 24) = v28;
      swift_bridgeObjectRelease();
      id v29 = [v20 proofingSessionID];
      if (v29)
      {
        id v30 = v29;
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = v32;
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v33 = 0;
      }
      swift_beginAccess();
      *(void *)(v21 + 16) = v31;
      *(void *)(v21 + 24) = v33;
      swift_bridgeObjectRelease();
      id v34 = [v20 country];
      if (v34)
      {
        id v35 = v34;
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v38 = v37;
      }
      else
      {
        uint64_t v36 = 0;
        uint64_t v38 = 0;
      }
      swift_beginAccess();
      *(void *)(v23 + 16) = v36;
      *(void *)(v23 + 24) = v38;
      swift_bridgeObjectRelease();
      sub_100007764(&qword_100730C60);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100613E40;
      *(void *)(inited + 32) = v20;
      unint64_t v47 = inited;
      specialized Array._endMutation()();
      unint64_t v40 = v47;
      id v41 = v20;
      sub_100170B90(v43, v40);
      swift_bridgeObjectRelease();
      sub_1000FFAB4();
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v15);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

uint64_t sub_100170934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v10;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  return _swift_task_switch(sub_100170964, 0, 0);
}

uint64_t sub_100170964()
{
  uint64_t v1 = v0[8];
  swift_beginAccess();
  if (*(void *)(v1 + 24))
  {
    uint64_t v2 = *(void *)(v0[8] + 16);
    uint64_t v3 = *(void *)(v1 + 24);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0xE000000000000000;
  }
  v0[11] = v3;
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100170A54;
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];
  uint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  return sub_1001713CC(v8, v7, v2, v3, v5, v6);
}

uint64_t sub_100170A54()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100172A0C, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

void sub_100170B90(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  id v25 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - v10;
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v26 = v11;
    uint64_t v28 = v7;
    if (!v12) {
      break;
    }
    uint64_t v11 = (char *)(a2 & 0xC000000000000001);
    uint64_t v7 = 4;
    while (1)
    {
      id v13 = v11 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a2 + 8 * v7);
      uint64_t v14 = v13;
      uint64_t v15 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v29 = v13;
      sub_100170E80(&v29, v4, a1);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return;
      }

      ++v7;
      if (v15 == v12) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t v16 = v26;
  defaultLogger()();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Will attempt to delete biome meta data", v19, 2u);
    swift_slowDealloc();
  }

  uint64_t v20 = v28;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v27 + 8);
  v21(v16, v28);
  sub_1004392F0();
  if (!v3)
  {
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Will attempt to delete proofing data", v24, 2u);
      swift_slowDealloc();
    }

    v21(v25, v20);
    sub_100439778();
  }
}

uint64_t sub_100170E80(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = *a1;
  [*a1 target];
  uint64_t v13 = IdentityTarget.init(rawValue:)();
  if (v14)
  {
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.targetUnavailable(_:), v8);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
LABEL_8:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  uint64_t v37 = v13;
  id v15 = [v12 credentialIdentifier];
  if (!v15)
  {
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.credentialIdentifierDoesNotExist(_:), v8);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    goto LABEL_8;
  }
  uint64_t v16 = v15;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  sub_10043030C(v37, v17, v19);
  [*(id *)(a3 + 16) deleteObject:v12];
  defaultLogger()();
  id v20 = v12;
  swift_bridgeObjectRetain();
  uint64_t v21 = Logger.logObject.getter();
  int v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, (os_log_type_t)v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v41 = v33;
    *(_DWORD *)uint64_t v23 = 136315650;
    id v24 = [v20 proofingSessionID:v33];
    uint64_t v35 = v17;
    os_log_t v36 = v21;
    int v34 = v22;
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;
    }
    else
    {
      unint64_t v28 = 0xE300000000000000;
      uint64_t v26 = 4999502;
    }
    uint64_t v40 = sub_100110D58(v26, v28, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_100110D58(v35, v19, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 22) = 2080;
    uint64_t v30 = IdentityTarget.debugDescription.getter();
    uint64_t v40 = sub_100110D58(v30, v31, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v32 = v36;
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v34, "Deleted proofing session with proofingSessionID %s and credentialIdentifier %s and target %s", (uint8_t *)v23, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v39);
}

uint64_t sub_1001713CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[8] = a6;
  v7[9] = v6;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[10] = v8;
  v7[11] = *(void *)(v8 - 8);
  v7[12] = swift_task_alloc();
  v7[13] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPError();
  v7[14] = v9;
  v7[15] = *(void *)(v9 - 8);
  v7[16] = swift_task_alloc();
  v7[17] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPError.Code();
  v7[18] = v10;
  v7[19] = *(void *)(v10 - 8);
  v7[20] = swift_task_alloc();
  return _swift_task_switch(sub_100171570, 0, 0);
}

uint64_t sub_100171570()
{
  os_log_t v36 = v0;
  if (v0[4])
  {
    if (v0[8])
    {
      uint64_t v1 = (void *)swift_task_alloc();
      v0[21] = v1;
      *uint64_t v1 = v0;
      v1[1] = sub_100171B2C;
      uint64_t v2 = v0[7];
      uint64_t v3 = v0[8];
      uint64_t v4 = v0[5];
      uint64_t v5 = v0[6];
      uint64_t v6 = v0[3];
      uint64_t v7 = v0[4];
      return sub_1004F0430((uint64_t)&off_1006F2320, v4, v5, v6, v7, v2, v3);
    }
    int v34 = *(void (**)(void, void, void))(v0[19] + 104);
    v34(v0[20], enum case for DIPError.Code.proofingSessionIDUnavailable(_:), v0[18]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10000C588();
    swift_allocError();
  }
  else
  {
    int v34 = *(void (**)(void, void, void))(v0[19] + 104);
    v34(v0[20], enum case for DIPError.Code.workflowIdDoesNotExist(_:), v0[18]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10000C588();
    swift_allocError();
  }
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  uint64_t v9 = v0[17];
  uint64_t v10 = v0[15];
  uint64_t v12 = v0[13];
  uint64_t v11 = v0[14];
  uint64_t v13 = v0[11];
  uint64_t v30 = v0[10];
  uint64_t v31 = v0[16];
  v34(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10000C588();
  swift_allocError();
  char v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v14(v15, v9, v11);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v33(v12, v30);
  swift_errorRelease();
  defaultLogger()();
  v14(v31, v9, v11);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = v0[16];
  uint64_t v20 = v0[17];
  uint64_t v22 = v0[14];
  uint64_t v21 = v0[15];
  uint64_t v23 = v0[12];
  uint64_t v32 = v0[10];
  if (v18)
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)id v24 = 136315138;
    uint64_t v25 = Error.localizedDescription.getter();
    v0[2] = sub_100110D58(v25, v26, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v27(v19, v22);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received an error communicating user cancelling the proofing flow with the server - %s. Treating this as a non fatal error as this has not user impact.", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v33(v23, v32);
    v27(v20, v22);
  }
  else
  {

    unint64_t v28 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v28(v19, v22);
    swift_errorRelease();
    v33(v23, v32);
    v28(v20, v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_100171B2C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100171CA0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100171CA0()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0[17];
  uint64_t v28 = v0[16];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[11];
  uint64_t v31 = v0[10];
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10000C588();
  swift_allocError();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v6(v7, v1, v3);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v30(v4, v31);
  swift_errorRelease();
  defaultLogger()();
  v6(v28, v1, v3);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = v0[16];
    uint64_t v24 = v0[14];
    uint64_t v25 = v0[15];
    uint64_t v27 = v0[12];
    uint64_t v29 = v0[17];
    uint64_t v26 = v0[10];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v12 = Error.localizedDescription.getter();
    v0[2] = sub_100110D58(v12, v13, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    char v14 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v14(v10, v24);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received an error communicating user cancelling the proofing flow with the server - %s. Treating this as a non fatal error as this has not user impact.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v30(v27, v26);
    v14(v29, v24);
  }
  else
  {
    uint64_t v15 = v0[16];
    uint64_t v16 = v0[17];
    uint64_t v17 = v0[14];
    uint64_t v18 = v0[15];
    uint64_t v19 = v0[12];
    uint64_t v20 = v0[10];

    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v21(v15, v17);
    swift_errorRelease();
    v30(v19, v20);
    v21(v16, v17);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t type metadata accessor for IdentityProofingCancellationProvider()
{
  return self;
}

uint64_t sub_100172094(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  sub_100007764(&qword_10071FEE0);
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_1001721E0, 0, 0);
}

uint64_t sub_1001721E0()
{
  uint64_t v1 = (void *)v0[8];
  if (v1)
  {
    id v2 = v1;
    defaultLogger()();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Proofing has been cancelled by the user, will attempt to clean up and notify the server using proofing configuration and proofing options", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[15];
    uint64_t v6 = v0[16];
    uint64_t v8 = v0[14];

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    type metadata accessor for IdentityProofingDataContext();
    swift_allocObject();
    sub_1000FF820();
    uint64_t v10 = v9;
    uint64_t v11 = v0[9];
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = 0;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = 0;
    *(void *)(v14 + 24) = 0;
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v2;
    v15[3] = v10;
    v15[4] = v12;
    v15[5] = v13;
    v15[6] = v14;
    v15[7] = v11;
    id v16 = v2;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_100172748, (uint64_t)v15);
    uint64_t v27 = v16;
    uint64_t v18 = v0[13];
    uint64_t v25 = v0[9];
    uint64_t v26 = v18;
    swift_release();
    uint64_t v19 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
    swift_beginAccess();
    uint64_t v20 = *(void *)(v12 + 24);
    uint64_t v28 = *(void *)(v12 + 16);
    swift_beginAccess();
    uint64_t v21 = *(void *)(v13 + 16);
    uint64_t v22 = *(void *)(v13 + 24);
    uint64_t v23 = (void *)swift_allocObject();
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = v25;
    v23[5] = v28;
    v23[6] = v20;
    v23[7] = v14;
    v23[8] = v21;
    v23[9] = v22;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10016F734(v26, (uint64_t)&unk_100725BC8, (uint64_t)v23);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for DIPError.Code.proofingConfigurationUnavailable(_:), v0[10]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
  }
  return v24();
}

uint64_t sub_1001726B0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001726E8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

id sub_100172748()
{
  return sub_10016F8B0(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_100172770()
{
  long long v6 = *(_OWORD *)(v0 + 48);
  long long v7 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10000C494;
  *(void *)(v4 + 72) = v2;
  *(void *)(v4 + 80) = v3;
  *(_OWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 40) = v7;
  return _swift_task_switch(sub_10016FE48, 0, 0);
}

uint64_t sub_100172840()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_1001728A8()
{
  sub_100170598(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10]);
}

uint64_t sub_1001728E4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10017293C()
{
  long long v6 = *(_OWORD *)(v0 + 48);
  long long v7 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100025D64;
  *(void *)(v4 + 72) = v2;
  *(void *)(v4 + 80) = v3;
  *(_OWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 40) = v7;
  return _swift_task_switch(sub_100170964, 0, 0);
}

uint64_t sub_100172A10()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPCertUsage();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_10071FC60);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TrustValidator();
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  id v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  uint64_t v17 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v12, 1, 1, v17);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPCertUsage.krlSigning(_:), v6);
  uint64_t v25 = type metadata accessor for DIPOIDVerifier();
  uint64_t v26 = &protocol witness table for DIPOIDVerifier;
  sub_10002C2D8((uint64_t *)&v24);
  DIPOIDVerifier.init()();
  sub_10000AD3C((uint64_t)v12, &v24, (uint64_t)v9, v16);
  uint64_t v18 = v1 + OBJC_IVAR____TtC8coreidvd17KRLTrustValidator_baseTrustValidator;
  sub_1001745D8((uint64_t)v16, v1 + OBJC_IVAR____TtC8coreidvd17KRLTrustValidator_baseTrustValidator);
  type metadata accessor for SecCertificate(0);
  static SecCertificateRef.appleExternalRoots.getter();
  swift_beginAccess();
  sub_1000279F4(v18 + *(int *)(v14 + 28), *(void *)(v18 + *(int *)(v14 + 28) + 24));
  dispatch thunk of OIDVerifying.setTrustedRoots(_:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  defaultLogger()();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "KRLTrustValidator set trust for external roots.", v21, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v1;
}

uint64_t sub_100172D88(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[4] = v4;
  v2[5] = *(void *)(v4 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v2[7] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100172E7C;
  return sub_1001733E8(a1);
}

uint64_t sub_100172E7C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 24);
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v5 = sub_100173298;
  }
  else {
    uint64_t v5 = sub_100172FA8;
  }
  return _swift_task_switch(v5, v4, 0);
}

void sub_100172FA8()
{
  unint64_t v1 = v0[8];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      id v3 = *(id *)(v0[8] + 32);
    }
    uint64_t v4 = v0[9];
    swift_bridgeObjectRelease();
    sub_100174120();

    if (!v4)
    {
      swift_task_dealloc();
      uint64_t v9 = (void (*)(void))v0[1];
      goto LABEL_12;
    }
    uint64_t v5 = enum case for DIPError.Code.coseInvalidResponse(_:);
  }
  else
  {
    uint64_t v7 = v0[5];
    uint64_t v6 = v0[6];
    uint64_t v8 = v0[4];
    swift_bridgeObjectRelease();
    uint64_t v5 = enum case for DIPError.Code.coseInvalidResponse(_:);
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.coseInvalidResponse(_:), v8);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  (*(void (**)(void, uint64_t, void))(v0[5] + 104))(v0[6], v5, v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v9 = (void (*)(void))v0[1];
LABEL_12:
  v9();
}

uint64_t sub_100173298()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.coseInvalidResponse(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001733E8(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  type metadata accessor for TrustValidator();
  v2[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[17] = v4;
  v2[18] = *(void *)(v4 - 8);
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_100173570, v1, 0);
}

uint64_t sub_100173570()
{
  uint64_t v1 = self;
  v0[20] = v1;
  id v2 = [v1 standardUserDefaults];
  v3._countAndFlagsBits = 0xD00000000000001ELL;
  v3._object = (void *)0x800000010063C4D0;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    int v5 = enum case for DIPError.Code.revokedCertificate(_:);
    (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.revokedCertificate(_:), v0[17]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v6 = v0[17];
    uint64_t v7 = v0[18];
    uint64_t v8 = v0[15];
    static DIPOIDVerifier.getSpecificCertificateError(_:)();
    swift_getErrorValue();
    Error.dipErrorCode.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) != 1)
    {
      uint64_t v9 = v0[17];
      uint64_t v10 = v0[18];
      uint64_t v11 = v0[14];
      sub_100174A64(v0[15], v11);
      int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v11, v9);
      if (v12 == v5)
      {
        uint64_t v13 = &stru_10071A000;
        if (qword_10071F620 != -1) {
          swift_once();
        }
        uint64_t v14 = qword_100760918;
LABEL_18:
        os_log_type_t v20 = (void *)v0[20];
        uint64_t v21 = v0[15];
        uint64_t v22 = type metadata accessor for Milestone();
        sub_1000443D4(v22, (uint64_t)v14);
        Milestone.log()();
        sub_1001746FC(v21);
        id v23 = [v20 v13[132].attr:0xD00000000000001DLL:0x800000010062AF10:48];
        v24._countAndFlagsBits = 0xD000000000000022;
        v24._object = (void *)0x800000010063C4F0;
        LOBYTE(v20) = NSUserDefaults.internalBool(forKey:)(v24);

        if (v20)
        {
          defaultLogger()();
          uint64_t v25 = Logger.logObject.getter();
          os_log_type_t v26 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v25, v26))
          {
            uint64_t v27 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v27 = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, v26, "KRLTrustValidator trust validation failed. This check is disabled in settings, bypassing.", v27, 2u);
            swift_slowDealloc();
          }
          uint64_t v29 = v0[12];
          uint64_t v28 = v0[13];
          uint64_t v30 = v0[11];

          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
          uint64_t v31 = sub_10017475C();
          swift_errorRelease();
          swift_errorRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v32 = (uint64_t (*)(void *))v0[1];
          return v32(v31);
        }
        else
        {
          swift_willThrow();
          swift_errorRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v33 = (uint64_t (*)(void))v0[1];
          return v33();
        }
      }
      if (v12 == enum case for DIPError.Code.expiredCertificate(_:))
      {
        uint64_t v13 = &stru_10071A000;
        if (qword_10071F628 != -1) {
          swift_once();
        }
        uint64_t v14 = qword_100760930;
        goto LABEL_18;
      }
      (*(void (**)(void, void))(v0[18] + 8))(v0[14], v0[17]);
    }
    if (qword_10071F630 != -1) {
      swift_once();
    }
    uint64_t v14 = qword_100760948;
    uint64_t v13 = &stru_10071A000;
    goto LABEL_18;
  }
  uint64_t v15 = v0[16];
  uint64_t v16 = v0[10] + OBJC_IVAR____TtC8coreidvd17KRLTrustValidator_baseTrustValidator;
  swift_beginAccess();
  sub_10017463C(v16, v15);
  uint64_t v17 = (void *)swift_task_alloc();
  v0[21] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_100173B0C;
  uint64_t v18 = v0[9];
  return sub_10000B730(v18);
}

uint64_t sub_100173B0C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 176) = a1;
  *(void *)(v4 + 184) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 128);
  uint64_t v6 = *(void *)(v3 + 80);
  sub_1001746A0(v5);
  if (v1) {
    uint64_t v7 = sub_100173D4C;
  }
  else {
    uint64_t v7 = sub_100173C5C;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100173C5C()
{
  if (qword_10071F618 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Milestone();
  sub_1000443D4(v1, (uint64_t)qword_100760900);
  Milestone.log()();
  uint64_t v2 = *(void *)(v0 + 176);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100173D4C()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[15];
  static DIPOIDVerifier.getSpecificCertificateError(_:)();
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v4 = v0[17];
    uint64_t v5 = v0[18];
    uint64_t v6 = v0[14];
    sub_100174A64(v0[15], v6);
    int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v6, v4);
    if (v7 == enum case for DIPError.Code.revokedCertificate(_:))
    {
      if (qword_10071F620 != -1) {
        swift_once();
      }
      uint64_t v8 = qword_100760918;
      goto LABEL_14;
    }
    if (v7 == enum case for DIPError.Code.expiredCertificate(_:))
    {
      if (qword_10071F628 != -1) {
        swift_once();
      }
      uint64_t v8 = qword_100760930;
      goto LABEL_14;
    }
    (*(void (**)(void, void))(v0[18] + 8))(v0[14], v0[17]);
  }
  if (qword_10071F630 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100760948;
LABEL_14:
  uint64_t v9 = (void *)v0[20];
  uint64_t v10 = v0[15];
  uint64_t v11 = type metadata accessor for Milestone();
  sub_1000443D4(v11, (uint64_t)v8);
  Milestone.log()();
  sub_1001746FC(v10);
  id v12 = [v9 standardUserDefaults];
  v13._object = (void *)0x800000010063C4F0;
  v13._countAndFlagsBits = 0xD000000000000022;
  LOBYTE(v9) = NSUserDefaults.internalBool(forKey:)(v13);

  if (v9)
  {
    defaultLogger()();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "KRLTrustValidator trust validation failed. This check is disabled in settings, bypassing.", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v18 = v0[12];
    uint64_t v17 = v0[13];
    uint64_t v19 = v0[11];

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    os_log_type_t v20 = sub_10017475C();
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void *))v0[1];
    return v21(v20);
  }
  else
  {
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
}

void sub_100174120()
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TrustValidator();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v0 + OBJC_IVAR____TtC8coreidvd17KRLTrustValidator_baseTrustValidator;
  swift_beginAccess();
  sub_10017463C(v9, (uint64_t)v8);
  sub_10000BD44();
  if (v1)
  {
    sub_1001746A0((uint64_t)v8);
    id v10 = [self standardUserDefaults];
    v11._object = (void *)0x800000010063C4A0;
    v11._countAndFlagsBits = 0xD000000000000026;
    Swift::Bool v12 = NSUserDefaults.internalBool(forKey:)(v11);

    if (v12)
    {
      defaultLogger()();
      Swift::String v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v13, v14))
      {
        os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "KRLTrustValidator signature validation failed. This check is disabled in settings, bypassing.", v15, 2u);
        swift_slowDealloc();
      }
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      if (qword_10071F610 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Milestone();
      sub_1000443D4(v17, (uint64_t)qword_1007608E8);
      Milestone.log()();
      swift_willThrow();
    }
  }
  else
  {
    sub_1001746A0((uint64_t)v8);
    if (qword_10071F608 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Milestone();
    sub_1000443D4(v16, (uint64_t)qword_1007608D0);
    Milestone.log()();
  }
}

uint64_t sub_100174410()
{
  sub_1001746A0(v0 + OBJC_IVAR____TtC8coreidvd17KRLTrustValidator_baseTrustValidator);
  swift_defaultActor_destroy();

  return swift_defaultActor_deallocate();
}

uint64_t sub_100174450()
{
  return type metadata accessor for KRLTrustValidator();
}

uint64_t type metadata accessor for KRLTrustValidator()
{
  uint64_t result = qword_100725C10;
  if (!qword_100725C10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001744A4()
{
  uint64_t result = type metadata accessor for TrustValidator();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100174540(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000C494;
  return sub_100172D88(a1);
}

uint64_t sub_1001745D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrustValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017463C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrustValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001746A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TrustValidator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001746FC(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100723600);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_10017475C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v10 - v3;
  if (COSE_Sign1.x509Chain.getter())
  {
    uint64_t v8 = decodeCertificateChain(fromDER:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    defaultLogger()();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "KRLTrustValidator signedKRL does not include a x509 chain", v7, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v8;
}

uint64_t sub_100174A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100723600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100174ACC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_retain_n();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v17 = v2;
    uint64_t v9 = (uint8_t *)v8;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v18 = v1;
    uint64_t v19 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_retain();
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v18 = sub_100110D58(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "denit from %s called", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v17);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  Swift::String v13 = *(os_unfair_lock_s **)(v1 + 80);
  os_log_type_t v14 = (id *)&v13[4];
  os_log_type_t v15 = v13 + 6;
  os_unfair_lock_lock(v13 + 6);
  sub_100174D68(v14);
  os_unfair_lock_unlock(v15);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

id sub_100174D68(id *a1)
{
  return [*a1 invalidate];
}

uint64_t sub_100174D9C()
{
  sub_100174ACC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Pass()
{
  return self;
}

uint64_t sub_100174DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v9 + 176) = a8;
  *(void *)(v9 + 184) = v8;
  *(unsigned char *)(v9 + 344) = a7;
  *(void *)(v9 + 160) = a5;
  *(void *)(v9 + 168) = a6;
  *(void *)(v9 + 144) = a3;
  *(void *)(v9 + 152) = a4;
  *(void *)(v9 + 128) = a1;
  *(void *)(v9 + 136) = a2;
  sub_100007764(&qword_100720A68);
  *(void *)(v9 + 192) = swift_task_alloc();
  sub_100007764(&qword_100723FD0);
  *(void *)(v9 + 200) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for BundleRecordFetcher();
  *(void *)(v9 + 208) = v10;
  *(void *)(v9 + 216) = *(void *)(v10 - 8);
  *(void *)(v9 + 224) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v9 + 232) = v11;
  *(void *)(v9 + 240) = *(void *)(v11 - 8);
  *(void *)(v9 + 248) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Date();
  *(void *)(v9 + 256) = v12;
  *(void *)(v9 + 264) = *(void *)(v12 - 8);
  *(void *)(v9 + 272) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Logger();
  *(void *)(v9 + 280) = v13;
  *(void *)(v9 + 288) = *(void *)(v13 - 8);
  *(void *)(v9 + 296) = swift_task_alloc();
  *(void *)(v9 + 304) = swift_task_alloc();
  return _swift_task_switch(sub_100175048, 0, 0);
}

uint64_t sub_100175048()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Pass addHistoryEvent", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v6 = *(void *)(v0 + 288);

  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  id v8 = [objc_allocWithZone((Class)PKPaymentService) init];
  *(void *)(v0 + 312) = v8;
  id v9 = [self paymentTransactionWithSource:2];
  *(void *)(v0 + 320) = v9;
  if (v9)
  {
    uint64_t v10 = v9;
    unint64_t v61 = v7;
    id v62 = v8;
    uint64_t v12 = *(void *)(v0 + 264);
    uint64_t v11 = *(void *)(v0 + 272);
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v14 = *(void *)(v0 + 256);
    uint64_t v16 = *(void *)(v0 + 232);
    uint64_t v15 = *(void *)(v0 + 240);
    [v9 setTransactionType:15];
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v14);
    [v10 setTransactionDate:isa];

    [v10 setTransactionStatus:1];
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v16);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v10 setIdentifier:v18];

    [v10 setOriginatedByDevice:1];
    [v10 setHasNotificationServiceData:1];
    if (sub_1001764F8())
    {
      defaultLogger()();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "The bundleID is associated with an App Clip. Will set requiresLocation to true", v21, 2u);
        swift_slowDealloc();
      }
      uint64_t v22 = *(void *)(v0 + 296);
      uint64_t v23 = *(void *)(v0 + 280);

      v61(v22, v23);
      [v10 setRequiresLocation:1];
    }
    uint64_t v24 = *(void *)(v0 + 216);
    uint64_t v25 = *(void *)(v0 + 224);
    uint64_t v26 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 176);
    uint64_t v28 = *(void *)(v0 + 160);
    uint64_t v29 = *(void *)(v0 + 128);
    BundleRecordFetcher.init()();
    uint64_t v30 = sub_1001759F8(v29, v28, v27);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    if (v30)
    {
      uint64_t v31 = *(void *)(v0 + 200);
      DigitalPresentmentDisplayConfiguration.clientDisplayInfo.getter();
      uint64_t v32 = type metadata accessor for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo();
      uint64_t v33 = *(void *)(v32 - 8);
      int v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32);
      uint64_t v35 = *(void *)(v0 + 200);
      if (v34 == 1)
      {
        sub_10000C6CC(v35, &qword_100723FD0);
      }
      else
      {
        int v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v35, v32);
        uint64_t v39 = *(void **)(v0 + 200);
        if (v38 == enum case for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo.appleBranded(_:))
        {
          (*(void (**)(void, uint64_t))(v33 + 96))(*(void *)(v0 + 200), v32);
          unint64_t v40 = v39[1];
          if (v40)
          {
            uint64_t v41 = HIBYTE(v40) & 0xF;
            if ((v40 & 0x2000000000000000) == 0) {
              uint64_t v41 = *v39 & 0xFFFFFFFFFFFFLL;
            }
            if (v41)
            {
              NSString v42 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v30 setMerchantNameOverride:v42];
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
        else
        {
          (*(void (**)(void, uint64_t))(v33 + 8))(*(void *)(v0 + 200), v32);
        }
      }
      uint64_t v43 = *(void *)(v0 + 192);
      sub_100048D6C(*(void *)(v0 + 152), v43, &qword_100720A68);
      uint64_t v44 = type metadata accessor for URL();
      uint64_t v45 = *(void *)(v44 - 8);
      int v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44);
      long long v48 = 0;
      if (v46 != 1)
      {
        uint64_t v49 = *(void *)(v0 + 192);
        URL._bridgeToObjectiveC()(v47);
        long long v48 = v50;
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v49, v44);
      }
      [v30 setPrivacyPolicyURL:v48];

      [v10 setReleasedData:v30];
    }
    id v51 = [objc_allocWithZone((Class)PKMerchant) init];
    *(void *)(v0 + 328) = v51;
    NSString v52 = String._bridgeToObjectiveC()();
    [v51 setMerchantIdentifier:v52];

    uint64_t v53 = DigitalPresentmentDisplayConfiguration.clientDisplayName.getter();
    if (v54)
    {
      NSString v55 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v51 setName:v55];
    }
    if ((*(unsigned char *)(v0 + 344) & 1) == 0)
    {
      if ((*(void *)(v0 + 168) & 0x8000000000000000) != 0)
      {
        __break(1u);
        return _swift_continuation_await(v53);
      }
      [v51 setAdamIdentifier:];
    }
    uint64_t v56 = *(void *)(v0 + 184);
    [v10 setMerchant:v51];
    id v57 = v10;
    NSString v58 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 336) = v58;
    uint64_t v59 = *(void *)(v56 + 16);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 24) = sub_1001757E0;
    uint64_t v60 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_100175994;
    *(void *)(v0 + 104) = &unk_1006F9650;
    *(void *)(v0 + 112) = v60;
    [v62 insertOrUpdatePaymentTransaction:v57 forPassUniqueIdentifier:v58 paymentApplication:v59 completion:v0 + 80];
    uint64_t v53 = v0 + 16;
    return _swift_continuation_await(v53);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_1001757E0()
{
  return _swift_task_switch(sub_1001758C0, 0, 0);
}

uint64_t sub_1001758C0()
{
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v3 = *(void **)(v0 + 312);
  os_log_type_t v2 = *(void **)(v0 + 320);

  uint64_t v4 = *(void **)(v0 + 120);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100175994(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(*(void *)(v2 + 64) + 40);
  id v4 = a2;
  sub_1000BEA14((uint64_t)&v6, v3, &qword_100725DC0);
  return swift_continuation_resume();
}

void *sub_1001759F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v71 = a3;
  uint64_t v68 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v4 - 8);
  uint64_t v65 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v63 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v60 = (char *)&v57 - v7;
  uint64_t v8 = sub_100007764(&qword_100720AE0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v61 = (char *)&v57 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = type metadata accessor for BundleRecordFetcher();
  __chkstk_darwin(v16);
  uint64_t v66 = v18;
  uint64_t v19 = *(void (**)(void))(v18 + 16);
  uint64_t v69 = v20;
  unint64_t v70 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19();
  unint64_t v21 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v74 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v67 = v11;
  if (v22)
  {
    id v62 = v15;
    swift_bridgeObjectRetain();
    id v59 = (id)a1;
    uint64_t v23 = (unsigned __int8 *)(a1 + 64);
    do
    {
      int v24 = *v23;
      id v25 = objc_allocWithZone((Class)PKTransactionReleasedDataElement);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v26 = [v25 init];
      NSString v27 = String._bridgeToObjectiveC()();
      [v26 setElementNamespace:v27];

      NSString v28 = String._bridgeToObjectiveC()();
      [v26 setIdentifier:v28];

      if (v24) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = 2;
      }
      [v26 setRetentionIntent:v29];
      sub_100176AAC(v24, v71, v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v30 = v26;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v23 += 40;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    unint64_t v21 = v74;
    uint64_t v15 = v62;
    uint64_t v11 = v67;
  }
  if (!(v21 >> 62))
  {
    uint64_t v31 = v69;
    uint64_t v32 = v70;
    if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_12;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    long long v48 = 0;
    uint64_t v54 = v66;
    goto LABEL_36;
  }
  swift_bridgeObjectRetain();
  uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v31 = v69;
  uint64_t v32 = v70;
  if (!v55) {
    goto LABEL_35;
  }
LABEL_12:
  id v33 = [objc_allocWithZone((Class)PKTransactionReleasedData) init];
  sub_1005DDB04(v21);
  swift_bridgeObjectRelease();
  sub_100176F3C();
  sub_100176F7C();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v33 setElements:isa];

  id v58 = [objc_allocWithZone((Class)PKTransactionReleasedDataApplication) init];
  AuditToken.wrapped.getter();
  uint64_t v35 = (uint64_t)v61;
  dispatch thunk of BundleRecordFetching.record(withAuditToken:)();
  id v59 = v33;
  uint64_t v36 = type metadata accessor for BundleRecord();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
  sub_1000BEA14(v35, (uint64_t)v15, &qword_100720AE0);
  uint64_t v37 = v63;
  type metadata accessor for BundleRecord();
  int v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48);
  if (v38(v15, 1, v36) || (BundleRecord.bundleIdentifier.getter(), !v45))
  {
    defaultLogger()();
    sub_100048D6C((uint64_t)v15, (uint64_t)v11, &qword_100720AE0);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v62 = v15;
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      if (v38(v11, 1, v36) || (uint64_t v44 = BundleRecord.applicationIdentifier.getter(), !v46))
      {
        uint64_t v42 = (uint64_t)v11;
        swift_bridgeObjectRelease();
        unint64_t v43 = 0xE500000000000000;
        uint64_t v44 = 0x3E6C696E3CLL;
      }
      else
      {
        unint64_t v43 = v46;
        uint64_t v42 = (uint64_t)v11;
      }
      uint64_t v72 = sub_100110D58(v44, v43, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000C6CC(v42, &qword_100720AE0);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "PKTransactionReleasedData.makeFromRequestedElements Record bundle identifier is nil for application identifier: %s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
      uint64_t v15 = v62;
      uint64_t v31 = v69;
    }
    else
    {
      sub_10000C6CC((uint64_t)v11, &qword_100720AE0);

      (*(void (**)(char *, uint64_t))(v64 + 8))(v37, v65);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (v38(v15, 1, v36))
  {
    NSString v47 = 0;
    long long v48 = v59;
    uint64_t v32 = v70;
    uint64_t v49 = v58;
  }
  else
  {
    BundleRecord.bundleIdentifier.getter();
    long long v48 = v59;
    uint64_t v32 = v70;
    uint64_t v49 = v58;
    if (v50)
    {
      NSString v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v47 = 0;
    }
  }
  [v49 setBundleIdentifier:v47];

  if (*(unsigned char *)(v68 + *(int *)(type metadata accessor for DigitalPresentmentCallingClientConfig() + 20))) {
    uint64_t v51 = 1;
  }
  else {
    uint64_t v51 = 2;
  }
  [v49 setClient:v51];
  DigitalPresentmentDisplayConfiguration.usageDescription.getter();
  if (v52)
  {
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v53 = 0;
  }
  uint64_t v54 = v66;
  [v49 setUsageDescription:v53];

  [v48 setApplication:v49];
  sub_10000C6CC((uint64_t)v15, &qword_100720AE0);
LABEL_36:
  (*(void (**)(char *, uint64_t))(v54 + 8))(v32, v31);
  return v48;
}

void sub_10017641C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  *(unsigned char *)(v8 + 56) = a6;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = a8;
  uint64_t v10 = self;
  id v11 = a3;
  id v12 = (id)PKPassKitCoreBundle();
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v10 newAssertionForBundle:v12 withReason:v13];

  if (v14)
  {
    sub_100007764(&qword_100725DD0);
    uint64_t v15 = swift_allocObject();
    *(_DWORD *)(v15 + 24) = 0;
    *(void *)(v15 + 16) = v14;
    *(void *)(v8 + 80) = v15;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001764F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v49 = *(void *)(v0 - 8);
  uint64_t v50 = v0;
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v1);
  long long v48 = (char *)&v48 - v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v48 - v6;
  unint64_t v8 = AuditToken.wrapped.getter();
  unsigned int v9 = v8;
  int v11 = v10;
  int v13 = v12;
  int v15 = v14;
  unint64_t v16 = HIDWORD(v8);
  unint64_t v17 = HIDWORD(v10);
  unint64_t v18 = HIDWORD(v12);
  unint64_t v19 = HIDWORD(v14);
  uint64_t v20 = self;
  id v51 = 0;
  uint64_t v52 = __PAIR64__(v16, v9);
  int v53 = v11;
  int v54 = v17;
  int v55 = v13;
  int v56 = v18;
  int v57 = v15;
  int v58 = v19;
  id v21 = [v20 bundleRecordForAuditToken:&v52 error:&v51];
  id v22 = v51;
  if (!v21)
  {
    id v37 = v51;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    int v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v40 = 136315138;
      swift_getErrorValue();
      uint64_t v41 = Error.localizedDescription.getter();
      id v51 = (id)sub_100110D58(v41, v42, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "received an error while fetching the application record. %s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v7, v50);
    return 0;
  }
  uint64_t v23 = v21;
  self;
  int v24 = (void *)swift_dynamicCastObjCClass();
  id v25 = v22;
  if (!v24)
  {

    defaultLogger()();
    unint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unable to cast bundle record to application record. Calling process is not an app clip.", v45, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v49 + 8))(v3, v50);
    return 0;
  }
  id v26 = [v24 appClipMetadata];

  if (!v26)
  {

    return 0;
  }
  NSString v27 = v48;
  defaultLogger()();
  id v28 = v23;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    id v32 = [v24 applicationIdentifier];
    if (v32)
    {
      id v33 = v32;
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;
    }
    else
    {
      unint64_t v36 = 0xE500000000000000;
      uint64_t v34 = 0x3E6C696E3CLL;
    }
    id v51 = (id)sub_100110D58(v34, v36, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "The application identifier %s is associated with an App Clip", v31, 0xCu);
    uint64_t v46 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v49 + 8))(v27, v50);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v49 + 8))(v27, v50);
    return 1;
  }
  return v46;
}

uint64_t sub_100176AAC(char a1, uint64_t a2, void *a3)
{
  id v36 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  __chkstk_darwin(v5);
  id v33 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100723FC8);
  __chkstk_darwin(v7 - 8);
  unsigned int v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (uint64_t *)((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v32 - v15;
  uint64_t v17 = type metadata accessor for DigitalPresentmentDisplayConfiguration();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a2, v17);
  if ((a1 & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  uint64_t v21 = *(void *)(DigitalPresentmentDisplayConfiguration.persistedElements.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (v21)
  {
    DigitalPresentmentDisplayConfiguration.persistedElementsStorageLifetimePeriod.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      return sub_10000C6CC((uint64_t)v9, &qword_100723FC8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
      (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
      int v23 = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 88))(v14, v10);
      if (v23 == enum case for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime.limit(_:))
      {
        (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v14, v10);
        uint64_t v24 = *v14;
        id v25 = v33;
        defaultLogger()();
        id v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v26, v27))
        {
          id v28 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)id v28 = 134217984;
          uint64_t v37 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "PKTransactionReleasedData - Setting retention period to %ld.", v28, 0xCu);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v35);
        [v36 setRetentionPeriod:v24];
        return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      }
      else
      {
        int v29 = v23;
        int v30 = enum case for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime.indefinitely(_:);
        uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
        uint64_t result = v31(v16, v10);
        if (v29 != v30) {
          return v31((char *)v14, v10);
        }
      }
    }
  }
  return result;
}

unint64_t sub_100176F3C()
{
  unint64_t result = qword_100725DC8;
  if (!qword_100725DC8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100725DC8);
  }
  return result;
}

unint64_t sub_100176F7C()
{
  unint64_t result = qword_100734030;
  if (!qword_100734030)
  {
    sub_100176F3C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100734030);
  }
  return result;
}

char *sub_100176FD4()
{
  uint64_t v0 = sub_100007764(&qword_100725DD8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  int v56 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v46 = (char *)v41 - v6;
  uint64_t v47 = type metadata accessor for AnyCodable();
  uint64_t v50 = *(void *)(v47 - 8);
  uint64_t v7 = __chkstk_darwin(v47);
  int v55 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v41 - v9;
  uint64_t v11 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007764(&qword_100725DE0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AnyCodableArray();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for ISO18013_5_1_ElementIdentifier.drivingPrivileges(_:), v11);
  sub_1002D8FF8((uint64_t)v14, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_10000C6CC((uint64_t)v17, &qword_100725DE0);
    return (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    int v57 = v10;
    uint64_t v23 = v50;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    uint64_t v24 = AnyCodableArray.value.getter();
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      unint64_t v42 = v21;
      uint64_t v43 = v19;
      uint64_t v44 = v18;
      uint64_t v26 = v49;
      os_log_type_t v27 = *(void (**)(void, void, void))(v23 + 16);
      unint64_t v28 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      v41[1] = v24;
      unint64_t v29 = v24 + v28;
      uint64_t v53 = *(void *)(v23 + 72);
      int v54 = v27;
      id v51 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
      uint64_t v52 = (void (**)(char *, uint64_t))(v23 + 8);
      int v30 = (void (**)(char *, char *, uint64_t))(v48 + 32);
      id v22 = (char *)_swiftEmptyArrayStorage;
      uint64_t v45 = v2;
      uint64_t v31 = v47;
      uint64_t v50 = v23 + 16;
      uint64_t v32 = (void (*)(char *, char *, uint64_t))v27;
      v27(v57, v24 + v28, v47);
      while (1)
      {
        id v33 = v55;
        v32(v55, v57, v31);
        uint64_t v34 = (uint64_t)v33;
        uint64_t v35 = v57;
        sub_1001775B4(v34, (uint64_t)v2);
        (*v52)(v35, v31);
        if ((*v51)(v2, 1, v26) == 1)
        {
          sub_10000C6CC((uint64_t)v2, &qword_100725DD8);
        }
        else
        {
          id v36 = *v30;
          uint64_t v37 = v46;
          (*v30)(v46, v2, v26);
          v36(v56, v37, v26);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v22 = (char *)sub_10010FB00(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
          }
          unint64_t v39 = *((void *)v22 + 2);
          unint64_t v38 = *((void *)v22 + 3);
          uint64_t v31 = v47;
          if (v39 >= v38 >> 1) {
            id v22 = (char *)sub_10010FB00(v38 > 1, v39 + 1, 1, (unint64_t)v22);
          }
          *((void *)v22 + 2) = v39 + 1;
          uint64_t v26 = v49;
          v36(&v22[((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v39], v56, v49);
          uint64_t v2 = v45;
        }
        v29 += v53;
        if (!--v25) {
          break;
        }
        v32(v35, (char *)v29, v31);
      }
      swift_bridgeObjectRelease();
      uint64_t v19 = v43;
      uint64_t v18 = v44;
      uint64_t v21 = v42;
    }
    else
    {
      swift_bridgeObjectRelease();
      id v22 = (char *)_swiftEmptyArrayStorage;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
  return v22;
}

uint64_t sub_1001775B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v123 = a2;
  uint64_t v3 = sub_100007764(&qword_1007239B0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  v112 = (char *)v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v111 = (char *)v99 - v6;
  uint64_t v7 = sub_100007764(&qword_100725DE8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  v115 = (char *)v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  v113 = (char *)v99 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)v99 - v13;
  __chkstk_darwin(v12);
  v114 = (char *)v99 - v15;
  uint64_t v118 = type metadata accessor for ISO18013_5_1_DrivingPrivilegeIdentifier();
  uint64_t v121 = *(void *)(v118 - 8);
  uint64_t v16 = __chkstk_darwin(v118);
  v110 = (char *)v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  v109 = (char *)v99 - v19;
  __chkstk_darwin(v18);
  v117 = (char *)v99 - v20;
  uint64_t v21 = sub_100007764(&qword_100725DF0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v24 = (char *)v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  os_log_type_t v27 = (char *)v99 - v26;
  __chkstk_darwin(v25);
  v124 = (void (*)(void, void))((char *)v99 - v28);
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v119 = *(void *)(v29 - 8);
  uint64_t v120 = v29;
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)v99 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v34 = (char *)v99 - v33;
  uint64_t v35 = sub_100007764(&qword_100725DF8);
  __chkstk_darwin(v35 - 8);
  uint64_t v37 = (char *)v99 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for AnyCodableDictionary();
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)v99 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = a1;
  AnyCodable.dictValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38) == 1)
  {
    uint64_t v42 = v123;
    sub_10000C6CC((uint64_t)v37, &qword_100725DF8);
    defaultLogger()();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "MobileDocumentReaderResponse DrivingPrivilege expected an AnyCodableDictionary representation, returning nil.", v45, 2u);
      swift_slowDealloc();
    }

    uint64_t v46 = type metadata accessor for AnyCodable();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v122, v46);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v34, v120);
    uint64_t v47 = v42;
LABEL_14:
    uint64_t v80 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v47, 1, 1, v80);
  }
  v106 = v32;
  v102 = v27;
  v103 = v24;
  v104 = v14;
  uint64_t v108 = v39;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v41, v37, v38);
  uint64_t v48 = v121;
  uint64_t v49 = (char *)(v121 + 104);
  uint64_t v50 = v117;
  uint64_t v51 = v118;
  v105 = *(void (**)(char *, void, uint64_t))(v121 + 104);
  v105(v117, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.vehicleCategoryCode(_:), v118);
  sub_10017829C((uint64_t)v124);
  int v54 = *(void (**)(char *, uint64_t))(v48 + 8);
  uint64_t v53 = v48 + 8;
  uint64_t v52 = v54;
  v54(v50, v51);
  uint64_t v55 = type metadata accessor for AnyCodable();
  uint64_t v56 = *(void *)(v55 - 8);
  int v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  int v58 = v57((uint64_t)v124, 1, v55);
  uint64_t v59 = v38;
  uint64_t v60 = v108;
  uint64_t v107 = v59;
  v116 = v41;
  if (v58 == 1)
  {
    uint64_t v61 = v56;
    sub_10000C6CC((uint64_t)v124, &qword_100725DF0);
LABEL_11:
    long long v76 = v106;
    defaultLogger()();
    os_log_type_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "MobileDocumentReaderResponse DrivingPrivilege missing vehicle category code, returning nil.", v79, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v122, v55);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v76, v120);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v116, v107);
    uint64_t v47 = v123;
    goto LABEL_14;
  }
  uint64_t v100 = v57;
  v101 = v52;
  v117 = v49;
  uint64_t v121 = v53;
  id v62 = v124;
  uint64_t v63 = AnyCodable.stringValue.getter();
  uint64_t v65 = v64;
  uint64_t v61 = v56;
  uint64_t v66 = v56 + 8;
  v124 = *(void (**)(void, void))(v56 + 8);
  v124(v62, v55);
  if (!v65) {
    goto LABEL_11;
  }
  uint64_t v125 = v63;
  uint64_t v126 = v65;
  sub_1000D5D70();
  Collection.nilIfEmpty.getter();
  swift_bridgeObjectRelease();
  if (!v128) {
    goto LABEL_11;
  }
  uint64_t v119 = v128;
  v106 = v127;
  uint64_t v67 = v109;
  v105(v109, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.issueDate(_:), v51);
  uint64_t v68 = (uint64_t)v102;
  sub_10017829C((uint64_t)v102);
  v101(v67, v51);
  int v69 = v100(v68, 1, v55);
  uint64_t v120 = v55;
  v99[1] = v66;
  if (v69 == 1)
  {
    sub_10000C6CC(v68, &qword_100725DF0);
    uint64_t v70 = type metadata accessor for Date();
    uint64_t v71 = (uint64_t)v111;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v111, 1, 1, v70);
    uint64_t v73 = (uint64_t)v114;
    uint64_t v72 = (uint64_t)v115;
    uint64_t v74 = (uint64_t)v113;
    long long v75 = v110;
LABEL_16:
    sub_10000C6CC(v71, &qword_1007239B0);
    uint64_t v86 = type metadata accessor for DateComponents();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v73, 1, 1, v86);
    goto LABEL_18;
  }
  long long v82 = v111;
  AnyCodable.dateValue.getter();
  uint64_t v71 = (uint64_t)v82;
  v124(v68, v55);
  uint64_t v83 = type metadata accessor for Date();
  uint64_t v84 = *(void *)(v83 - 8);
  int v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v71, 1, v83);
  uint64_t v73 = (uint64_t)v114;
  uint64_t v72 = (uint64_t)v115;
  uint64_t v74 = (uint64_t)v113;
  long long v75 = v110;
  if (v85 == 1) {
    goto LABEL_16;
  }
  Date.utcDayRepresentation.getter();
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v71, v83);
LABEL_18:
  uint64_t v87 = (uint64_t)v104;
  v105(v75, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.expiryDate(_:), v51);
  uint64_t v88 = (uint64_t)v103;
  sub_10017829C((uint64_t)v103);
  v101(v75, v51);
  uint64_t v89 = v120;
  if (v100(v88, 1, v120) == 1)
  {
    sub_10000C6CC(v88, &qword_100725DF0);
    uint64_t v90 = type metadata accessor for Date();
    uint64_t v91 = (uint64_t)v112;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v112, 1, 1, v90);
    uint64_t v92 = v123;
  }
  else
  {
    uint64_t v91 = (uint64_t)v112;
    AnyCodable.dateValue.getter();
    v124(v88, v89);
    uint64_t v93 = type metadata accessor for Date();
    uint64_t v94 = *(void *)(v93 - 8);
    int v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v91, 1, v93);
    uint64_t v92 = v123;
    if (v95 != 1)
    {
      Date.utcDayRepresentation.getter();
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v91, v93);
      goto LABEL_23;
    }
  }
  sub_10000C6CC(v91, &qword_1007239B0);
  uint64_t v96 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v87, 1, 1, v96);
LABEL_23:
  sub_1001793D8(v73, v74);
  sub_1001793D8(v87, v72);
  v97 = v116;
  sub_10017840C();
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.init(vehicleCategoryCode:issueDate:expirationDate:codes:)();
  v124(v122, v120);
  sub_10000C6CC(v87, &qword_100725DE8);
  sub_10000C6CC(v73, &qword_100725DE8);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v97, v107);
  uint64_t v98 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v92, 0, 1, v98);
}

uint64_t sub_10017829C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = AnyCodableDictionary.value.getter();
  uint64_t v3 = ISO18013_5_1_DrivingPrivilegeIdentifier.rawValue.getter();
  if (*(void *)(v2 + 16) && (unint64_t v5 = sub_100590548(v3, v4), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(v2 + 56);
    uint64_t v9 = type metadata accessor for AnyCodable();
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))(a1, v8 + *(void *)(v10 + 72) * v7, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
  }
  else
  {
    uint64_t v11 = type metadata accessor for AnyCodable();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10017840C()
{
  uint64_t v0 = sub_100007764(&qword_100725E00);
  __chkstk_darwin(v0 - 8);
  int v54 = (char *)v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code();
  uint64_t v55 = *(void *)(v53 - 8);
  uint64_t v2 = __chkstk_darwin(v53);
  id v62 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v52 = (char *)v47 - v4;
  uint64_t v5 = type metadata accessor for AnyCodable();
  uint64_t v58 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v61 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v63 = (char *)v47 - v8;
  uint64_t v9 = type metadata accessor for ISO18013_5_1_DrivingPrivilegeIdentifier();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100725DF0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100007764(&qword_100725DE0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnyCodableArray();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.codes(_:), v9);
  sub_10017829C((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v23 = v58;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v15, 1, v5) == 1)
  {
    sub_10000C6CC((uint64_t)v15, &qword_100725DF0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
LABEL_4:
    sub_10000C6CC((uint64_t)v18, &qword_100725DE0);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v24 = v55;
  uint64_t v50 = v22;
  AnyCodable.arrayValue.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v23 + 8);
  v25(v15, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
    goto LABEL_4;
  }
  uint64_t v59 = v25;
  uint64_t v60 = v23 + 8;
  os_log_type_t v27 = v50;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v50, v18, v19);
  uint64_t v28 = AnyCodableArray.value.getter();
  uint64_t v29 = *(void *)(v28 + 16);
  if (v29)
  {
    uint64_t v48 = v20;
    uint64_t v49 = v19;
    uint64_t v31 = v23 + 16;
    uint64_t v30 = *(void *)(v23 + 16);
    unint64_t v32 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v47[1] = v28;
    unint64_t v33 = v28 + v32;
    uint64_t v57 = *(void *)(v23 + 72);
    uint64_t v58 = v30;
    uint64_t v56 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    uint64_t v34 = (void (**)(void))(v24 + 32);
    uint64_t v26 = _swiftEmptyArrayStorage;
    uint64_t v35 = v53;
    uint64_t v36 = (uint64_t)v54;
    uint64_t v37 = v63;
    uint64_t v51 = v5;
    do
    {
      uint64_t v38 = (void (*)(char *, char *, uint64_t))v58;
      ((void (*)(char *, unint64_t, uint64_t))v58)(v37, v33, v5);
      uint64_t v39 = v61;
      v38(v61, v63, v5);
      uint64_t v40 = v39;
      uint64_t v37 = v63;
      sub_100178ACC(v40, v36);
      v59(v37, v5);
      if ((*v56)(v36, 1, v35) == 1)
      {
        sub_10000C6CC(v36, &qword_100725E00);
      }
      else
      {
        uint64_t v41 = v31;
        uint64_t v42 = *v34;
        uint64_t v43 = v52;
        (*v34)();
        ((void (*)(char *, char *, uint64_t))v42)(v62, v43, v35);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v26 = (void *)sub_10010FE30(0, v26[2] + 1, 1, (unint64_t)v26);
        }
        unint64_t v45 = v26[2];
        unint64_t v44 = v26[3];
        if (v45 >= v44 >> 1) {
          uint64_t v26 = (void *)sub_10010FE30(v44 > 1, v45 + 1, 1, (unint64_t)v26);
        }
        _OWORD v26[2] = v45 + 1;
        uint64_t v35 = v53;
        ((void (*)(char *, char *, uint64_t))v42)((char *)v26+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v45, v62, v53);
        uint64_t v36 = (uint64_t)v54;
        uint64_t v31 = v41;
        uint64_t v5 = v51;
      }
      v33 += v57;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    uint64_t v20 = v48;
    uint64_t v19 = v49;
    os_log_type_t v27 = v50;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
  return v26;
}

uint64_t sub_100178ACC@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v85 = a2;
  uint64_t v82 = type metadata accessor for ISO18013_5_1_DrivingPrivilegeIdentifier();
  uint64_t v3 = *(void *)(v82 - 8);
  uint64_t v4 = __chkstk_darwin(v82);
  uint64_t v80 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v69 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v69 - v9;
  uint64_t v11 = sub_100007764(&qword_100725DF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v79 = (uint64_t)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v78 = (uint64_t)v69 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v69 - v16;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v83 = *(void (***)(char *, uint64_t))(v18 - 8);
  uint64_t v84 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v81 = (char *)v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v69 - v21;
  uint64_t v23 = sub_100007764(&qword_100725DF8);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for AnyCodableDictionary();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)v69 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = a1;
  AnyCodable.dictValue.getter();
  uint64_t v30 = v26;
  uint64_t v31 = v27;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v30) == 1)
  {
    sub_10000C6CC((uint64_t)v25, &qword_100725DF8);
    defaultLogger()();
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = v85;
    if (v34)
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "MobileDocumentReaderResponse DrivingPrivilege Code expected an AnyCodableDictionary representation, returning nil.", v36, 2u);
      swift_slowDealloc();
    }

    uint64_t v37 = type metadata accessor for AnyCodable();
    (*(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8))(v86, v37);
    v83[1](v22, v84);
LABEL_14:
    uint64_t v57 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v35, 1, 1, v57);
  }
  uint64_t v73 = v8;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  uint64_t v76 = v30;
  v38(v29, v25, v30);
  uint64_t v39 = v82;
  long long v75 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  v75(v10, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.code(_:), v82);
  os_log_type_t v77 = v29;
  sub_10017829C((uint64_t)v17);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v3 + 8);
  v40(v10, v39);
  uint64_t v41 = type metadata accessor for AnyCodable();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (v74(v17, 1, v41) == 1)
  {
    sub_10000C6CC((uint64_t)v17, &qword_100725DF0);
LABEL_11:
    uint64_t v53 = v81;
    defaultLogger()();
    int v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "MobileDocumentReaderResponse DrivingPrivilege Code missing code, returning nil.", v56, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v42 + 8))(v86, v41);
    v83[1](v53, v84);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v77, v76);
    uint64_t v35 = v85;
    goto LABEL_14;
  }
  uint64_t v43 = v39;
  uint64_t v70 = v40;
  uint64_t v44 = AnyCodable.stringValue.getter();
  uint64_t v46 = v45;
  uint64_t v71 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v72 = v42 + 8;
  v71(v17, v41);
  if (!v46) {
    goto LABEL_11;
  }
  uint64_t v87 = v44;
  uint64_t v88 = v46;
  unint64_t v47 = sub_1000D5D70();
  Collection.nilIfEmpty.getter();
  swift_bridgeObjectRelease();
  if (!v90) {
    goto LABEL_11;
  }
  v69[1] = v47;
  uint64_t v84 = v90;
  uint64_t v83 = v89;
  uint64_t v48 = v73;
  v75(v73, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.sign(_:), v43);
  uint64_t v50 = v77;
  uint64_t v49 = v78;
  sub_10017829C(v78);
  v70(v48, v43);
  if (v74((char *)v49, 1, v41) == 1)
  {
    uint64_t v51 = v49;
    uint64_t v52 = v41;
    sub_10000C6CC(v51, &qword_100725DF0);
    uint64_t v81 = 0;
  }
  else
  {
    uint64_t v59 = AnyCodable.stringValue.getter();
    uint64_t v61 = v60;
    v71((char *)v49, v41);
    uint64_t v52 = v41;
    if (v61)
    {
      uint64_t v87 = v59;
      uint64_t v88 = v61;
      Collection.nilIfEmpty.getter();
      swift_bridgeObjectRelease();
      uint64_t v81 = (char *)v89;
    }
    else
    {
      uint64_t v81 = 0;
    }
  }
  id v62 = v80;
  v75(v80, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.value(_:), v43);
  uint64_t v63 = v79;
  sub_10017829C(v79);
  v70(v62, v43);
  if (v74((char *)v63, 1, v52) == 1)
  {
    sub_10000C6CC(v63, &qword_100725DF0);
    uint64_t v64 = v85;
  }
  else
  {
    uint64_t v65 = AnyCodable.stringValue.getter();
    uint64_t v67 = v66;
    v71((char *)v63, v52);
    uint64_t v64 = v85;
    if (v67)
    {
      uint64_t v87 = v65;
      uint64_t v88 = v67;
      Collection.nilIfEmpty.getter();
      swift_bridgeObjectRelease();
    }
  }
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code.init(code:sign:value:)();
  v71(v86, v52);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v50, v76);
  uint64_t v68 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v64, 0, 1, v68);
}

uint64_t sub_1001793D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100725DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_100179440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (double *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = &v3[OBJC_IVAR____TtC8coreidvd15DIPSPWebService_IDENTITY_SHARE_ENDPOINT];
  *(void *)uint64_t v13 = 0xD000000000000012;
  *((void *)v13 + 1) = 0x800000010063C740;
  sub_10015AE4C(a3, (uint64_t)&v19 - v11);
  uint64_t v14 = &v3[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  *(void *)uint64_t v14 = a1;
  *((void *)v14 + 1) = a2;
  sub_10015AE4C((uint64_t)v12, (uint64_t)v10);
  type metadata accessor for DIPHTTPSession(0);
  swift_allocObject();
  uint64_t v15 = v3;
  *(void *)&v15[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession] = sub_1005D20EC(v10);

  uint64_t v16 = (objc_class *)type metadata accessor for DIPWebService();
  v19.receiver = v15;
  v19.super_class = v16;
  id v17 = [super init];
  sub_10017DD3C((uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
  sub_10017DD3C(a3, type metadata accessor for DIPHTTPSession.Configuration);
  return v17;
}

uint64_t sub_1001795C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[23] = a6;
  v7[24] = v6;
  v7[21] = a4;
  v7[22] = a5;
  v7[19] = a2;
  v7[20] = a3;
  v7[18] = a1;
  sub_100007764(&qword_100723600);
  v7[25] = swift_task_alloc();
  v7[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v7[27] = v8;
  v7[28] = *(void *)(v8 - 8);
  v7[29] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v7[30] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPSignpost();
  v7[31] = v9;
  v7[32] = *(void *)(v9 - 8);
  v7[33] = swift_task_alloc();
  return _swift_task_switch(sub_10017975C, 0, 0);
}

uint64_t sub_10017975C()
{
  uint64_t v2 = (void *)v0[21];
  uint64_t v1 = v0[22];
  static DaemonSignposts.inputValidationRequest.getter();
  DIPSignpost.init(_:)();
  uint64_t v3 = v2[3];
  uint64_t v4 = sub_10000C728(v2, v3);
  v0[13] = v3;
  uint64_t v5 = sub_10002C2D8(v0 + 10);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16))(v5, v4, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[34] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100179884;
  uint64_t v7 = v0[19];
  uint64_t v8 = v0[20];
  return sub_10017CB78((uint64_t)(v0 + 10), v7, v8, v1, (uint64_t)&off_1006F2378);
}

uint64_t sub_100179884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[35] = a1;
  v5[36] = a2;
  v5[37] = a3;
  v5[38] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = sub_10017A13C;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v5 + 10));
    uint64_t v6 = sub_1001799A4;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001799A4()
{
  self;
  uint64_t v1 = (void *)swift_dynamicCastObjCClass();
  if (!v1 || [v1 statusCode] != (id)403)
  {
    unint64_t v15 = *(void *)(v0 + 288);
    uint64_t v16 = *(void **)(v0 + 296);
    uint64_t v17 = *(void *)(v0 + 280);
    uint64_t v19 = *(void *)(v0 + 256);
    uint64_t v18 = *(void *)(v0 + 264);
    uint64_t v20 = *(void *)(v0 + 248);
    v21._countAndFlagsBits = 0xD000000000000021;
    v21._object = (void *)0x800000010063CA00;
    v22._countAndFlagsBits = 0x3032373065323933;
    v22._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v22, v21);
    v23.value._countAndFlagsBits = sub_10006BAA8();
    DIPSignpost.end(workflowID:isBackground:)(v23, (Swift::Bool_optional)2);
    sub_10000C5F4(v17, v15);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v51 = 0;
    uint64_t v50 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 1;
LABEL_8:
    uint64_t v28 = *(void **)(v0 + 144);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    *uint64_t v28 = v53;
    v28[1] = v52;
    v28[2] = v51;
    v28[3] = v27;
    v28[4] = v50;
    v28[5] = v24;
    v28[6] = v25;
    v28[7] = v26;
    uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_9;
  }
  uint64_t v2 = *(void *)(v0 + 304);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10017DF0C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  unint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void **)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 280);
  if (!v2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 256) + 8))(*(void *)(v0 + 264), *(void *)(v0 + 248));

    swift_release();
    sub_10000C5F4(v5, v3);
    uint64_t v52 = *(unsigned __int8 *)(v0 + 24);
    uint64_t v53 = *(void *)(v0 + 16);
    uint64_t v27 = *(void *)(v0 + 40);
    uint64_t v51 = *(void *)(v0 + 32);
    uint64_t v24 = *(void *)(v0 + 56);
    uint64_t v50 = *(void *)(v0 + 48);
    uint64_t v25 = *(void *)(v0 + 64);
    uint64_t v26 = *(void *)(v0 + 72);
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 216);
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.serverResponseInconsistent(_:), v8);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();

  sub_10000C5F4(v5, v3);
  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 208);
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10) == 1)
  {
LABEL_14:
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 224);
  uint64_t v14 = *(void *)(v0 + 200);
  sub_100174A64(*(void *)(v0 + 208), v14);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 88))(v14, v13) != enum case for DIPError.Code.httpTooManyRequests(_:))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 216));
    goto LABEL_14;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 104))(*(void *)(v0 + 232), enum case for DIPError.Code.topekaDownstreamServiceProviderUnavailable(_:), *(void *)(v0 + 216));
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
LABEL_15:
  uint64_t v47 = *(void *)(v0 + 256);
  uint64_t v48 = *(void *)(v0 + 248);
  uint64_t v44 = *(void *)(v0 + 224);
  uint64_t v45 = *(void *)(v0 + 232);
  uint64_t v46 = *(void *)(v0 + 216);
  uint64_t v49 = *(void *)(v0 + 264);
  uint64_t v43 = *(void *)(v0 + 192);
  sub_10000C6CC(*(void *)(v0 + 208), &qword_100723600);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v31 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v32 = *(void *)(*(void *)v31 + 72);
  unint64_t v33 = (*(unsigned __int8 *)(*(void *)v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v31 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_100611020;
  unint64_t v35 = v34 + v33;
  uint64_t v36 = (void *)(v34 + v33 + v31[14]);
  uint64_t v37 = enum case for DIPError.PropertyKey.serverURL(_:);
  uint64_t v38 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v39 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104);
  v39(v35, v37, v38);
  v36[3] = &type metadata for String;
  *uint64_t v36 = 0xD000000000000013;
  v36[1] = 0x800000010063C9C0;
  uint64_t v40 = (void *)(v35 + v32 + v31[14]);
  v39(v35 + v32, enum case for DIPError.PropertyKey.conversationID(_:), v38);
  uint64_t v41 = *(void *)(v43 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v42 = *(void *)(v43 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v40[3] = &type metadata for String;
  *uint64_t v40 = v41;
  v40[1] = v42;
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v34);
  (*(void (**)(uint64_t, void, uint64_t))(v44 + 104))(v45, enum case for DIPError.Code.internalError(_:), v46);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v49, v48);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
LABEL_9:
  return v29();
}

uint64_t sub_10017A13C()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 10));
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[26];
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v5 = v0[27];
    uint64_t v4 = v0[28];
    uint64_t v6 = v0[25];
    sub_100174A64(v0[26], v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v4 + 88))(v6, v5) == enum case for DIPError.Code.httpTooManyRequests(_:))
    {
      (*(void (**)(void, void, void))(v0[28] + 104))(v0[29], enum case for DIPError.Code.topekaDownstreamServiceProviderUnavailable(_:), v0[27]);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      goto LABEL_6;
    }
    (*(void (**)(void, void))(v0[28] + 8))(v0[25], v0[27]);
  }
  swift_willThrow();
LABEL_6:
  uint64_t v26 = v0[32];
  uint64_t v27 = v0[31];
  uint64_t v23 = v0[28];
  uint64_t v24 = v0[29];
  uint64_t v25 = v0[27];
  uint64_t v28 = v0[33];
  uint64_t v22 = v0[24];
  sub_10000C6CC(v0[26], &qword_100723600);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v7 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v8 = *(void *)(*(void *)v7 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100611020;
  unint64_t v11 = v10 + v9;
  uint64_t v12 = (void *)(v10 + v9 + v7[14]);
  uint64_t v13 = enum case for DIPError.PropertyKey.serverURL(_:);
  uint64_t v14 = type metadata accessor for DIPError.PropertyKey();
  unint64_t v15 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104);
  v15(v11, v13, v14);
  v12[3] = &type metadata for String;
  *uint64_t v12 = 0xD000000000000013;
  v12[1] = 0x800000010063C9C0;
  unint64_t v16 = v11 + v8;
  uint64_t v17 = (void *)(v11 + v8 + v7[14]);
  v15(v16, enum case for DIPError.PropertyKey.conversationID(_:), v14);
  uint64_t v18 = *(void *)(v22 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v19 = *(void *)(v22 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v17[3] = &type metadata for String;
  *uint64_t v17 = v18;
  v17[1] = v19;
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v10);
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v24, enum case for DIPError.Code.internalError(_:), v25);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_10017A630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[42] = a6;
  v7[43] = v6;
  v7[40] = a4;
  v7[41] = a5;
  v7[38] = a2;
  v7[39] = a3;
  v7[37] = a1;
  sub_100007764(&qword_100723600);
  v7[44] = swift_task_alloc();
  v7[45] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v7[46] = v8;
  v7[47] = *(void *)(v8 - 8);
  v7[48] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v7[49] = v9;
  v7[50] = *(void *)(v9 - 8);
  v7[51] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v7[52] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPSignpost();
  v7[53] = v10;
  v7[54] = *(void *)(v10 - 8);
  v7[55] = swift_task_alloc();
  return _swift_task_switch(sub_10017A820, 0, 0);
}

uint64_t sub_10017A820()
{
  uint64_t v1 = v0[51];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[50];
  uint64_t v5 = v0[40];
  uint64_t v4 = v0[41];
  static DaemonSignposts.spNonceRequest.getter();
  DIPSignpost.init(_:)();
  UUID.init()();
  uint64_t v6 = UUID.uuidString.getter();
  uint64_t v8 = v7;
  v0[56] = v6;
  v0[57] = v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[32] = &type metadata for NonceRequest;
  uint64_t v9 = swift_allocObject();
  v0[29] = v9;
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0xE000000000000000;
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v5;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000AAD28(0, 0);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[58] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10017A9AC;
  uint64_t v11 = v0[38];
  uint64_t v12 = v0[39];
  return sub_10017CB78((uint64_t)(v0 + 29), v11, v12, v4, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_10017A9AC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*v4;
  v6[59] = a1;
  v6[60] = a2;
  v6[61] = v3;
  swift_task_dealloc();
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000AAC30(0, 0);
    uint64_t v7 = sub_10017B348;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 29));

    uint64_t v7 = sub_10017AB14;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10017AB14()
{
  unint64_t v2 = v0[60];
  uint64_t v1 = v0[61];
  uint64_t v3 = v0[59];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10002CEB0(v3, v2);
  JSONDecoder.init()();
  sub_10017DEB8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v4 = v1;
  uint64_t v6 = v0[59];
  unint64_t v5 = v0[60];
  uint64_t v7 = (void *)v0[57];
  if (v4)
  {
    uint64_t v8 = v0[47];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000AAC30(0, 0);
    sub_10000C5F4(v6, v5);
    swift_release();
    uint64_t v9 = enum case for DIPError.Code.internalError(_:);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104);
LABEL_5:
    uint64_t v29 = v0[59];
    unint64_t v28 = v0[60];
    v10(v0[48], v9, v0[46]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v29, v28);
    swift_errorRelease();
    uint64_t v57 = v0[54];
    uint64_t v61 = v0[53];
    uint64_t v63 = v0[55];
    uint64_t v54 = v0[47];
    uint64_t v55 = v0[48];
    uint64_t v56 = v0[46];
    uint64_t v52 = v0[43];
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v30 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v31 = *(void *)(*(void *)v30 + 72);
    unint64_t v32 = (*(unsigned __int8 *)(*(void *)v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v30 + 80);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_100611020;
    unint64_t v34 = v33 + v32;
    unint64_t v35 = (void *)(v33 + v32 + v30[14]);
    uint64_t v36 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v37 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v38 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 104);
    v38(v34, v36, v37);
    uint64_t v39 = *(void *)(v52 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v40 = *(void *)(v52 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v35[3] = &type metadata for String;
    void *v35 = v39;
    v35[1] = v40;
    uint64_t v41 = (void *)(v34 + v31 + v30[14]);
    v38(v34 + v31, enum case for DIPError.PropertyKey.serverURL(_:), v37);
    v41[3] = &type metadata for String;
    *uint64_t v41 = 0x69726168732D7073;
    v41[1] = 0xEA0000000000676ELL;
    swift_errorRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_10015C504(v33);
    (*(void (**)(uint64_t, void, uint64_t))(v54 + 104))(v55, enum case for DIPError.Code.internalError(_:), v56);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v63, v61);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v42 = (uint64_t (*)(void))v0[1];
    goto LABEL_6;
  }
  uint64_t v11 = v0[56];
  sub_10000C5F4(v0[59], v0[60]);
  swift_release();
  uint64_t v12 = v0[3];
  uint64_t v13 = v0[4];
  uint64_t v14 = v0[5];
  uint64_t v15 = v0[6];
  uint64_t v16 = v0[7];
  uint64_t v17 = v0[8];
  uint64_t v18 = v0[9];
  uint64_t v20 = v0[10];
  uint64_t v19 = v0[11];
  uint64_t v22 = v0[12];
  uint64_t v21 = v0[13];
  uint64_t v58 = v0[14];
  uint64_t v69 = v0[15];
  uint64_t v70 = v0[16];
  uint64_t v66 = v0[2];
  v0[17] = v66;
  v0[18] = v12;
  uint64_t v64 = v15;
  uint64_t v65 = v13;
  v0[19] = v13;
  v0[20] = v14;
  v0[21] = v15;
  v0[22] = v16;
  uint64_t v60 = v20;
  uint64_t v62 = v17;
  v0[23] = v17;
  v0[24] = v18;
  v0[25] = v20;
  v0[26] = v19;
  uint64_t v67 = v19;
  uint64_t v59 = v22;
  v0[27] = v22;
  v0[28] = v21;
  uint64_t v68 = v21;
  sub_1002B7940(0, 0xE000000000000000, v11, v7, (uint64_t)(v0 + 17), 0);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(0, 0);
  if (v24)
  {
    uint64_t v26 = v0[47];
    uint64_t v25 = v0[48];
    uint64_t v27 = v0[46];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = enum case for DIPError.Code.internalError(_:);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 104);
    v10(v25, enum case for DIPError.Code.internalError(_:), v27);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    goto LABEL_5;
  }
  uint64_t v50 = v0[59];
  unint64_t v51 = v0[60];
  uint64_t v44 = v0[54];
  uint64_t v45 = v0[55];
  uint64_t v53 = v0[53];
  v46._countAndFlagsBits = 0xD000000000000019;
  uint64_t v47 = (void *)v0[37];
  v46._object = (void *)0x800000010063C980;
  v48._countAndFlagsBits = 0x3361656436313837;
  v48._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v48, v46);
  v49.value._countAndFlagsBits = sub_10006BAA8();
  DIPSignpost.end(workflowID:isBackground:)(v49, (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  sub_10000C5F4(v50, v51);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v53);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  void *v47 = v66;
  v47[1] = v12;
  void v47[2] = v65;
  v47[3] = v14;
  v47[4] = v64;
  v47[5] = v16;
  v47[6] = v62;
  v47[7] = v18;
  v47[8] = v60;
  v47[9] = v67;
  v47[10] = v59;
  v47[11] = v68;
  v47[12] = v58;
  v47[13] = v69;
  v47[14] = v70;
  uint64_t v42 = (uint64_t (*)(void))v0[1];
LABEL_6:
  return v42();
}

uint64_t sub_10017B348()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[45];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 29));
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v4 = v0[46];
    uint64_t v5 = v0[47];
    uint64_t v6 = v0[44];
    sub_100174A64(v0[45], v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v6, v4) == enum case for DIPError.Code.httpTooManyRequests(_:))
    {
      uint64_t v7 = v0[45];
      (*(void (**)(void, void, void))(v0[47] + 104))(v0[48], enum case for DIPError.Code.topekaDownstreamServiceProviderUnavailable(_:), v0[46]);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      sub_10000C6CC(v7, &qword_100723600);
      goto LABEL_6;
    }
    (*(void (**)(void, void))(v0[47] + 8))(v0[44], v0[46]);
  }
  uint64_t v8 = v0[45];
  swift_willThrow();
  sub_10000C6CC(v8, &qword_100723600);
LABEL_6:
  uint64_t v28 = v0[53];
  uint64_t v29 = v0[55];
  uint64_t v24 = v0[47];
  uint64_t v25 = v0[48];
  uint64_t v26 = v0[46];
  uint64_t v27 = v0[54];
  uint64_t v23 = v0[43];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v9 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v10 = *(void *)(*(void *)v9 + 72);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100611020;
  unint64_t v13 = v12 + v11;
  uint64_t v14 = (void *)(v13 + v9[14]);
  uint64_t v15 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v16 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104);
  v17(v13, v15, v16);
  uint64_t v18 = *(void *)(v23 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v19 = *(void *)(v23 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v14[3] = &type metadata for String;
  *uint64_t v14 = v18;
  v14[1] = v19;
  uint64_t v20 = (void *)(v13 + v10 + v9[14]);
  v17(v13 + v10, enum case for DIPError.PropertyKey.serverURL(_:), v16);
  v20[3] = &type metadata for String;
  *uint64_t v20 = 0x69726168732D7073;
  v20[1] = 0xEA0000000000676ELL;
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v12);
  (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v25, enum case for DIPError.Code.internalError(_:), v26);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_10017B864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[68] = v6;
  v7[67] = a6;
  v7[66] = a5;
  v7[65] = a4;
  v7[63] = a2;
  v7[64] = a3;
  v7[62] = a1;
  sub_100007764(&qword_100723600);
  v7[69] = swift_task_alloc();
  v7[70] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v7[71] = v8;
  v7[72] = *(void *)(v8 - 8);
  v7[73] = swift_task_alloc();
  type metadata accessor for IdentitySharingRequest(0);
  v7[74] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v7[75] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPSignpost();
  v7[76] = v9;
  v7[77] = *(void *)(v9 - 8);
  v7[78] = swift_task_alloc();
  return _swift_task_switch(sub_10017BA2C, 0, 0);
}

uint64_t sub_10017BA2C()
{
  uint64_t v1 = v0[66];
  uint64_t v2 = v0[63];
  static DaemonSignposts.identitySharingRequest.getter();
  DIPSignpost.init(_:)();
  uint64_t v3 = sub_100007764(&qword_1007265A0);
  v0[79] = v3;
  v0[57] = v3;
  uint64_t v4 = sub_10002C2D8(v0 + 54);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v2, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[80] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10017BB5C;
  uint64_t v6 = v0[65];
  uint64_t v7 = v0[64];
  return sub_10017CB78((uint64_t)(v0 + 54), v7, v6, v1, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_10017BB5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*v4;
  v6[81] = a1;
  v6[82] = a2;
  v6[83] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = sub_10017C5B4;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 54));

    uint64_t v7 = sub_10017BC90;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10017BC90()
{
  uint64_t v1 = *(void *)(v0 + 664);
  unint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 648);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10002CEB0(v3, v2);
  JSONDecoder.init()();
  uint64_t v4 = sub_100007764(&qword_100725E70);
  sub_1000B6120(&qword_100725E78, &qword_100725E70);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    uint64_t v5 = *(void *)(v0 + 576);
    sub_10000C5F4(*(void *)(v0 + 648), *(void *)(v0 + 656));
    swift_release();
    uint64_t v6 = enum case for DIPError.Code.internalError(_:);
    uint64_t v7 = *(void (**)(void, uint64_t, void))(v5 + 104);
LABEL_5:
    unint64_t v24 = *(void *)(v0 + 656);
    uint64_t v25 = *(void *)(v0 + 648);
    v7(*(void *)(v0 + 584), v6, *(void *)(v0 + 568));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v25, v24);
    swift_errorRelease();
    uint64_t v57 = *(void *)(v0 + 616);
    uint64_t v58 = *(void *)(v0 + 608);
    uint64_t v59 = *(void *)(v0 + 624);
    uint64_t v26 = *(void *)(v0 + 592);
    uint64_t v54 = *(void *)(v0 + 576);
    uint64_t v55 = *(void *)(v0 + 584);
    uint64_t v56 = *(void *)(v0 + 568);
    uint64_t v51 = *(void *)(v0 + 544);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v27 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v28 = *(void *)(*(void *)v27 + 72);
    unint64_t v29 = (*(unsigned __int8 *)(*(void *)v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v27 + 80);
    uint64_t v52 = 2 * v28;
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_100614990;
    unint64_t v30 = v53 + v29;
    uint64_t v31 = (void *)(v53 + v29 + v27[14]);
    uint64_t v32 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v33 = type metadata accessor for DIPError.PropertyKey();
    unint64_t v34 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104);
    v34(v30, v32, v33);
    uint64_t v35 = *(void *)(v51 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v36 = *(void *)(v51 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v31[3] = &type metadata for String;
    void *v31 = v35;
    v31[1] = v36;
    uint64_t v37 = (void *)(v30 + v28 + v27[14]);
    v34(v30 + v28, enum case for DIPError.PropertyKey.requestID(_:), v33);
    swift_errorRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    JWSSignedJSON.payload.getter();
    uint64_t v39 = *(void *)(v26 + 16);
    uint64_t v38 = *(void *)(v26 + 24);
    swift_bridgeObjectRetain();
    sub_10017DD3C(v26, type metadata accessor for IdentitySharingRequest);
    v37[3] = &type metadata for String;
    *uint64_t v37 = v39;
    v37[1] = v38;
    uint64_t v40 = (void *)(v30 + v52 + v27[14]);
    v34(v30 + v52, enum case for DIPError.PropertyKey.serverURL(_:), v33);
    v40[3] = &type metadata for String;
    *uint64_t v40 = 0x69726168732D7073;
    v40[1] = 0xEA0000000000676ELL;
    sub_10015C504(v53);
    (*(void (**)(uint64_t, void, uint64_t))(v54 + 104))(v55, enum case for DIPError.Code.internalError(_:), v56);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v59, v58);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_6;
  }
  uint64_t v8 = *(unint64_t **)(v0 + 592);
  sub_10000C5F4(*(void *)(v0 + 648), *(void *)(v0 + 656));
  swift_release();
  JWSSignedJSON.payload.getter();
  uint64_t v62 = v8[2];
  unint64_t v63 = *v8;
  uint64_t v60 = (void *)v8[3];
  unint64_t v61 = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10017DD3C((uint64_t)v8, type metadata accessor for IdentitySharingRequest);
  JWSSignedJSON.payload.getter();
  long long v9 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 96) = v9;
  long long v10 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 64) = v10;
  long long v11 = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v0 + 160) = v11;
  long long v12 = *(_OWORD *)(v0 + 288);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 128) = v12;
  long long v13 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 32) = v13;
  uint64_t v15 = *(void *)(v0 + 40);
  uint64_t v14 = *(void *)(v0 + 48);
  uint64_t v17 = *(void *)(v0 + 56);
  uint64_t v16 = *(void *)(v0 + 64);
  uint64_t v19 = *(void *)(v0 + 72);
  uint64_t v18 = *(void *)(v0 + 80);
  uint64_t v20 = *(void *)(v0 + 104);
  *(void *)(v0 + 336) = *(void *)(v0 + 16);
  *(_OWORD *)(v0 + 344) = *(_OWORD *)(v0 + 24);
  *(void *)(v0 + 360) = v15;
  *(void *)(v0 + 368) = v14;
  *(void *)(v0 + 376) = v17;
  *(void *)(v0 + 384) = v16;
  *(void *)(v0 + 392) = v19;
  *(void *)(v0 + 400) = v18;
  *(_OWORD *)(v0 + 408) = *(_OWORD *)(v0 + 88);
  *(void *)(v0 + 424) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10017DD9C(v0 + 16);
  sub_1002B7940(v63, v61, v62, v60, v0 + 336, 0);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 496);
    uint64_t v6 = enum case for DIPError.Code.internalError(_:);
    uint64_t v7 = *(void (**)(void, uint64_t, void))(*(void *)(v0 + 576) + 104);
    v7(*(void *)(v0 + 584), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 568));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t))(*(void *)(v4 - 8) + 8))(v23);
    goto LABEL_5;
  }
  unint64_t v43 = *(void *)(v0 + 656);
  uint64_t v44 = *(void *)(v0 + 648);
  uint64_t v45 = *(void *)(v0 + 624);
  uint64_t v46 = *(void *)(v0 + 616);
  uint64_t v47 = *(void *)(v0 + 608);
  v48._countAndFlagsBits = 0xD00000000000001BLL;
  v48._object = (void *)0x800000010063C8E0;
  v49._countAndFlagsBits = 0x6561373163616336;
  v49._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v49, v48);
  v50.value._countAndFlagsBits = sub_10006BAA8();
  DIPSignpost.end(workflowID:isBackground:)(v50, (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  sub_10000C5F4(v44, v43);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
LABEL_6:
  return v41();
}

uint64_t sub_10017C5B4()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 54));
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) != 1)
  {
    uint64_t v4 = v0[72];
    uint64_t v5 = v0[71];
    uint64_t v6 = v0[69];
    sub_100174A64(v0[70], v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v4 + 88))(v6, v5) == enum case for DIPError.Code.httpTooManyRequests(_:))
    {
      uint64_t v7 = v0[70];
      (*(void (**)(void, void, void))(v0[72] + 104))(v0[73], enum case for DIPError.Code.topekaDownstreamServiceProviderUnavailable(_:), v0[71]);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      sub_10000C6CC(v7, &qword_100723600);
      goto LABEL_6;
    }
    (*(void (**)(void, void))(v0[72] + 8))(v0[69], v0[71]);
  }
  uint64_t v8 = v0[70];
  swift_willThrow();
  sub_10000C6CC(v8, &qword_100723600);
LABEL_6:
  uint64_t v31 = v0[77];
  uint64_t v32 = v0[76];
  uint64_t v33 = v0[78];
  uint64_t v34 = v0[74];
  uint64_t v28 = v0[72];
  uint64_t v29 = v0[73];
  uint64_t v30 = v0[71];
  uint64_t v25 = v0[68];
  sub_100007764((uint64_t *)&unk_1007225C0);
  long long v9 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v10 = *(void *)(*(void *)v9 + 72);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v9 + 80);
  uint64_t v26 = 2 * v10;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100614990;
  unint64_t v12 = v27 + v11;
  long long v13 = (void *)(v27 + v11 + v9[14]);
  uint64_t v14 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v15 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v16 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104);
  v16(v12, v14, v15);
  uint64_t v17 = *(void *)(v25 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v18 = *(void *)(v25 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v13[3] = &type metadata for String;
  *long long v13 = v17;
  v13[1] = v18;
  uint64_t v19 = (void *)(v12 + v10 + v9[14]);
  v16(v12 + v10, enum case for DIPError.PropertyKey.requestID(_:), v15);
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  JWSSignedJSON.payload.getter();
  uint64_t v21 = *(void *)(v34 + 16);
  uint64_t v20 = *(void *)(v34 + 24);
  swift_bridgeObjectRetain();
  sub_10017DD3C(v34, type metadata accessor for IdentitySharingRequest);
  v19[3] = &type metadata for String;
  *uint64_t v19 = v21;
  v19[1] = v20;
  uint64_t v22 = (void *)(v12 + v26 + v9[14]);
  v16(v12 + v26, enum case for DIPError.PropertyKey.serverURL(_:), v15);
  v22[3] = &type metadata for String;
  *uint64_t v22 = 0x69726168732D7073;
  v22[1] = 0xEA0000000000676ELL;
  sub_10015C504(v27);
  (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))(v29, enum case for DIPError.Code.internalError(_:), v30);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, v32);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_10017CB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[78] = v5;
  v6[77] = a5;
  v6[76] = a4;
  v6[75] = a3;
  v6[74] = a2;
  v6[73] = a1;
  uint64_t v7 = type metadata accessor for URLRequest();
  v6[79] = v7;
  v6[80] = *(void *)(v7 - 8);
  v6[81] = swift_task_alloc();
  sub_100007764(&qword_100720A68);
  v6[82] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL();
  v6[83] = v8;
  v6[84] = *(void *)(v8 - 8);
  v6[85] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPError.Code();
  v6[86] = v9;
  v6[87] = *(void *)(v9 - 8);
  v6[88] = swift_task_alloc();
  uint64_t v10 = sub_100007764(&qword_1007265A0);
  v6[89] = v10;
  v6[90] = *(void *)(v10 - 8);
  v6[91] = swift_task_alloc();
  v6[92] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v6[93] = v11;
  v6[94] = *(void *)(v11 - 8);
  v6[95] = swift_task_alloc();
  return _swift_task_switch(sub_10017CE00, 0, 0);
}

uint64_t sub_10017CE00()
{
  uint64_t v70 = v0;
  uint64_t v1 = v0 + 504;
  uint64_t v2 = *(void *)(v0 + 584);
  defaultLogger()();
  sub_10003BC28(v2, v0 + 440);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 752);
    uint64_t v63 = *(void *)(v0 + 744);
    uint64_t v65 = *(void *)(v0 + 760);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    sub_10000C728((void *)(v0 + 440), *(void *)(v0 + 464));
    *(void *)(v0 + 568) = swift_getDynamicType();
    sub_100007764(&qword_100720AC0);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 576) = sub_100110D58(v7, v8, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 440);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "coreidvd: sendPostRequest of type %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = v0 + 504;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v65, v63);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 760);
    uint64_t v10 = *(void *)(v0 + 752);
    uint64_t v11 = *(void *)(v0 + 744);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 440);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  sub_10003BC28(*(void *)(v0 + 584), v1);
  if (swift_dynamicCast())
  {
    uint64_t v12 = *(void *)(v0 + 584);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_10003BC28(v12, v0 + 536);
    swift_dynamicCast();
    sub_1000B6120(&qword_100725E68, &qword_1007265A0);
    uint64_t v13 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v15 = v14;
    uint64_t v16 = *(void *)(v0 + 736);
    uint64_t v17 = *(void *)(v0 + 728);
    uint64_t v18 = v1;
    uint64_t v19 = *(void *)(v0 + 720);
    uint64_t v20 = *(void *)(v0 + 712);
    swift_release();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v21(v17, v20);
    v21(v16, v20);
    uint64_t v1 = v18;
    uint64_t v22 = v13;
  }
  else
  {
    sub_100007764(&qword_100725E58);
    if (swift_dynamicCast())
    {
      sub_10003BC28(*(void *)(v0 + 584), v0 + 472);
      swift_dynamicCast();
      uint64_t v23 = *(void *)(v0 + 352);
      uint64_t v24 = *(void *)(v0 + 360);
      sub_10000C728((void *)(v0 + 328), v23);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
      unint64_t v15 = v25;
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 328);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 368);
    }
    else
    {
      if (!swift_dynamicCast())
      {
        uint64_t v52 = *(void *)(v0 + 704);
        uint64_t v53 = *(void *)(v0 + 696);
        uint64_t v54 = *(void *)(v0 + 688);
        uint64_t v55 = *(void **)(v0 + 584);
        uint64_t v68 = 0;
        unint64_t v69 = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        uint64_t v68 = 0xD000000000000015;
        unint64_t v69 = 0x800000010063C760;
        sub_10000C728(v55, v55[3]);
        swift_getDynamicType();
        v56._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t))(v53 + 104))(v52, enum case for DIPError.Code.badLogic(_:), v54);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        uint64_t v57 = *(void *)(v0 + 704);
        uint64_t v58 = *(void *)(v0 + 696);
        uint64_t v59 = *(void *)(v0 + 688);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1);
        (*(void (**)(uint64_t, void, uint64_t))(v58 + 104))(v57, enum case for DIPError.Code.internalError(_:), v59);
        swift_errorRetain();
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
        goto LABEL_16;
      }
      uint64_t v62 = *(void *)(v0 + 584);
      uint64_t v66 = v1;
      uint64_t v26 = *(void *)(v0 + 176);
      uint64_t v27 = *(void *)(v0 + 184);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000AAC30(v26, v27);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_10003BC28(v62, v0 + 408);
      swift_dynamicCast();
      uint64_t v28 = *(void *)(v0 + 232);
      uint64_t v29 = *(void *)(v0 + 240);
      uint64_t v30 = *(void *)(v0 + 248);
      uint64_t v32 = *(void *)(v0 + 272);
      uint64_t v31 = *(void *)(v0 + 280);
      uint64_t v33 = *(void *)(v0 + 296);
      uint64_t v64 = *(void *)(v0 + 288);
      uint64_t v34 = *(void *)(v0 + 312);
      uint64_t v61 = *(void *)(v0 + 304);
      uint64_t v35 = *(void *)(v0 + 320);
      *(void *)(v0 + 16) = *(void *)(v0 + 224);
      *(void *)(v0 + 24) = v28;
      *(void *)(v0 + 32) = v29;
      *(void *)(v0 + 40) = v30;
      *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 256);
      *(void *)(v0 + 64) = v32;
      *(void *)(v0 + 72) = v31;
      *(void *)(v0 + 80) = v64;
      *(void *)(v0 + 88) = v33;
      *(void *)(v0 + 96) = v61;
      *(void *)(v0 + 104) = v34;
      *(void *)(v0 + 112) = v35;
      sub_10017DCE8();
      uint64_t v22 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v15 = v36;
      swift_bridgeObjectRelease();
      uint64_t v1 = v66;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000AAC30(v31, v64);
      swift_release();
    }
  }
  uint64_t v37 = *(void *)(v0 + 672);
  uint64_t v38 = *(void *)(v0 + 664);
  uint64_t v39 = *(void *)(v0 + 656);
  *(void *)(v0 + 768) = v15;
  *(void *)(v0 + 776) = v22;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1);
  URL.init(string:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v39, 1, v38) == 1)
  {
    uint64_t v40 = *(void *)(v0 + 704);
    uint64_t v41 = *(void *)(v0 + 696);
    uint64_t v42 = *(void *)(v0 + 688);
    sub_10000C6CC(*(void *)(v0 + 656), &qword_100720A68);
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v40, enum case for DIPError.Code.badLogic(_:), v42);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v22, v15);
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v60 = *(uint64_t (**)(void))(v0 + 8);
    return v60();
  }
  uint64_t v43 = *(void *)(v0 + 680);
  uint64_t v44 = *(void *)(v0 + 648);
  uint64_t v45 = *(void *)(v0 + 608);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 672) + 32))(v43, *(void *)(v0 + 656), *(void *)(v0 + 664));
  sub_10002CEB0(v22, v15);
  sub_1005D28FC(v43, v45, 0, 0, v44);
  URLRequest.httpMethod.setter();
  v46.value._countAndFlagsBits = 0xD000000000000010;
  v46.value._object = (void *)0x8000000100630AC0;
  v47._countAndFlagsBits = 0x2D746E65746E6F43;
  v47._object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(v46, v47);
  URLRequest.httpBody.setter();
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  Swift::String v48 = (void *)swift_task_alloc();
  *(void *)(v0 + 784) = v48;
  *Swift::String v48 = v0;
  v48[1] = sub_10017D8C8;
  uint64_t v49 = *(void *)(v0 + 648);
  uint64_t v50 = *(void *)(v0 + 616);
  return v67(v49, v50, 0, 0);
}

uint64_t sub_10017D8C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v10 = *v5;
  *(void *)(*v5 + 792) = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v11 = sub_10017DB4C;
  }
  else
  {
    *(unsigned char *)(v10 + 824) = a4 & 1;
    *(void *)(v10 + 800) = a3;
    *(void *)(v10 + 808) = a2;
    *(void *)(v10 + 816) = a1;
    uint64_t v11 = sub_10017DA1C;
  }
  return _swift_task_switch(v11, 0, 0);
}

uint64_t sub_10017DA1C()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 672);
  uint64_t v3 = *(void *)(v0 + 664);
  uint64_t v4 = *(void *)(v0 + 648);
  uint64_t v5 = *(void *)(v0 + 640);
  uint64_t v6 = *(void *)(v0 + 632);
  sub_10000C5F4(*(void *)(v0 + 776), *(void *)(v0 + 768));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8);
  uint64_t v8 = *(void *)(v0 + 816);
  uint64_t v9 = *(void *)(v0 + 808);
  uint64_t v10 = *(void *)(v0 + 800);
  uint64_t v11 = *(unsigned __int8 *)(v0 + 824);
  return v7(v8, v9, v10, v11);
}

uint64_t sub_10017DB4C()
{
  uint64_t v1 = v0[85];
  uint64_t v2 = v0[84];
  uint64_t v3 = v0[83];
  uint64_t v4 = v0[81];
  uint64_t v5 = v0[80];
  uint64_t v6 = v0[79];
  sub_10000C5F4(v0[97], v0[96]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10017DC68()
{
  return swift_bridgeObjectRelease();
}

id sub_10017DC7C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DIPSPWebService();
  return [super dealloc];
}

uint64_t type metadata accessor for DIPSPWebService()
{
  return self;
}

unint64_t sub_10017DCE8()
{
  unint64_t result = qword_100725E60;
  if (!qword_100725E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100725E60);
  }
  return result;
}

uint64_t sub_10017DD3C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10017DD9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10017DE54()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 80))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 120, 7);
}

unint64_t sub_10017DEB8()
{
  unint64_t result = qword_100725E80;
  if (!qword_100725E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100725E80);
  }
  return result;
}

unint64_t sub_10017DF0C()
{
  unint64_t result = qword_100725E88;
  if (!qword_100725E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100725E88);
  }
  return result;
}

uint64_t sub_10017DF60()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v25 - v5;
  uint64_t v7 = type metadata accessor for String.Encoding();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self standardUserDefaults];
  v12._object = (void *)0x800000010063CA90;
  v12._countAndFlagsBits = 0xD000000000000024;
  Swift::String_optional v13 = NSUserDefaults.internalString(forKey:)(v12);

  if (!v13.value._object) {
    return 0;
  }
  unint64_t v14 = ((unint64_t)v13.value._object >> 56) & 0xF;
  if (((uint64_t)v13.value._object & 0x2000000000000000) == 0) {
    unint64_t v14 = v13.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v14)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  static String.Encoding.utf8.getter();
  uint64_t v15 = String.data(using:allowLossyConversion:)();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v17 >> 60 == 15)
  {
    defaultLogger()();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "KRL CDN response override value is set, but failed to parse value into data object", v20, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    return 0;
  }
  defaultLogger()();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Got override for KRL CDN response with internal settings value.", v24, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return v15;
}

void *sub_10017E2A8()
{
  uint64_t v30 = type metadata accessor for CharacterSet();
  uint64_t v0 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v2 = (char *)v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = [self standardUserDefaults];
  v4._object = (void *)0x800000010063CA70;
  v4._countAndFlagsBits = 0xD00000000000001DLL;
  Swift::String_optional v5 = NSUserDefaults.internalString(forKey:)(v4);

  countAndFlagsBits = _swiftEmptyArrayStorage;
  if (v5.value._object)
  {
    Swift::String_optional v33 = v5;
    uint64_t v31 = 10;
    unint64_t v32 = 0xE100000000000000;
    v29[2] = sub_1000B5358();
    uint64_t v7 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    int64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      uint64_t v31 = (uint64_t)_swiftEmptyArrayStorage;
      sub_10011144C(0, v8, 0);
      uint64_t v9 = (void (**)(char *, uint64_t))(v0 + 8);
      v29[1] = v7;
      uint64_t v10 = (void **)(v7 + 40);
      do
      {
        id v11 = *v10;
        v33.value._countAndFlagsBits = (uint64_t)*(v10 - 1);
        v33.value._object = v11;
        swift_bridgeObjectRetain();
        static CharacterSet.whitespacesAndNewlines.getter();
        uint64_t v12 = StringProtocol.trimmingCharacters(in:)();
        uint64_t v14 = v13;
        (*v9)(v2, v30);
        swift_bridgeObjectRelease();
        uint64_t v15 = (void *)v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10011144C(0, v15[2] + 1, 1);
          uint64_t v15 = (void *)v31;
        }
        unint64_t v17 = v15[2];
        unint64_t v16 = v15[3];
        if (v17 >= v16 >> 1)
        {
          sub_10011144C(v16 > 1, v17 + 1, 1);
          uint64_t v15 = (void *)v31;
        }
        v10 += 2;
        v15[2] = v17 + 1;
        uint64_t v18 = &v15[2 * v17];
        v18[4] = v12;
        v18[5] = v14;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      uint64_t v19 = v15[2];
      if (v19) {
        goto LABEL_10;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = _swiftEmptyArrayStorage;
      uint64_t v19 = _swiftEmptyArrayStorage[2];
      if (v19)
      {
LABEL_10:
        uint64_t v20 = v15 + 5;
        countAndFlagsBits = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v25 = *(v20 - 1);
          uint64_t v24 = *v20;
          uint64_t v26 = HIBYTE(*v20) & 0xF;
          if ((*v20 & 0x2000000000000000) == 0) {
            uint64_t v26 = v25 & 0xFFFFFFFFFFFFLL;
          }
          if (v26)
          {
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v33.value._countAndFlagsBits = (uint64_t)countAndFlagsBits;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_10011144C(0, countAndFlagsBits[2] + 1, 1);
              countAndFlagsBits = (void *)v33.value._countAndFlagsBits;
            }
            unint64_t v22 = countAndFlagsBits[2];
            unint64_t v21 = countAndFlagsBits[3];
            if (v22 >= v21 >> 1)
            {
              sub_10011144C(v21 > 1, v22 + 1, 1);
              countAndFlagsBits = (void *)v33.value._countAndFlagsBits;
            }
            countAndFlagsBits[2] = v22 + 1;
            os_log_type_t v23 = &countAndFlagsBits[2 * v22];
            v23[4] = v25;
            v23[5] = v24;
          }
          v20 += 2;
          --v19;
        }
        while (v19);
        goto LABEL_22;
      }
    }
    countAndFlagsBits = _swiftEmptyArrayStorage;
LABEL_22:
    swift_bridgeObjectRelease();
  }
  return countAndFlagsBits;
}

uint64_t sub_10017E5E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for ThreadSafeUploadTracker();
  uint64_t v8 = swift_allocObject();
  sub_100007764(&qword_100725F38);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)(v8 + 16) = v9;
  *(void *)(a4 + 72) = v8;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  sub_100030A10(a1, a4);
  *(void *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = a3;
  type metadata accessor for MobileDocumentReaderDataContainer();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 24) = a2;
  sub_100007764(&qword_100725F40);
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  *(void *)(v10 + 16) = AsyncCoreDataContainer.init(contextBuilder:)();
  *(void *)(a4 + 56) = v10;
  type metadata accessor for IdentityProofingDataContainer();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 24) = a2;
  sub_100007764(&qword_100725F48);
  swift_allocObject();
  swift_retain();
  *(void *)(v11 + 16) = AsyncCoreDataContainer.init(contextBuilder:)();
  swift_release();
  uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  *(void *)(a4 + 64) = v11;
  return result;
}

uint64_t sub_10017E768()
{
  type metadata accessor for EnvironmentManager();
  uint64_t v0 = swift_allocObject();
  memset(v3, 0, sizeof(v3));
  sub_100007764(&qword_100725F50);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 208) = 0;
  sub_10017F628((uint64_t)v3, v1 + 16);
  uint64_t result = sub_10017F690((uint64_t)v3);
  *(void *)(v0 + 16) = v1;
  qword_1007602E0 = v0;
  return result;
}

uint64_t sub_10017E7FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_10017F628(a1, (uint64_t)&v21);
  if (*((void *)&v22 + 1))
  {
    long long v11 = v30;
    a3[8] = v29;
    a3[9] = v11;
    long long v12 = v32;
    a3[10] = v31;
    a3[11] = v12;
    long long v13 = v26;
    a3[4] = v25;
    a3[5] = v13;
    long long v14 = v28;
    a3[6] = v27;
    a3[7] = v14;
    long long v15 = v22;
    *a3 = v21;
    a3[1] = v15;
    long long v16 = v24;
    a3[2] = v23;
    a3[3] = v16;
  }
  else
  {
    sub_10017F690(a1);
    sub_10017F690((uint64_t)&v21);
    defaultLogger()();
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = a2;
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No environment exists, creating new environment", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_10017E9F0((uint64_t)a3);
    return sub_10017F6F0((uint64_t)a3, a1);
  }
  return result;
}

uint64_t sub_10017E9F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v1 = type metadata accessor for AsyncCoreDataStore.StoreType();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::String v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for MobileDocumentReaderSupportChecker();
  long long v24 = (_UNKNOWN **)&protocol witness table for MobileDocumentReaderSupportChecker;
  sub_10002C2D8((uint64_t *)&v22);
  MobileDocumentReaderSupportChecker.init(suiteNameOverride:)();
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_100760360;
  uint64_t v6 = type metadata accessor for DIPConfigWebService();
  v21[3] = v6;
  v21[4] = &off_1006FC7D8;
  v21[0] = v5;
  uint64_t v7 = type metadata accessor for ConfigurationManager();
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = sub_1000279F4((uint64_t)v21, v6);
  __chkstk_darwin(v9);
  long long v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = *v11;
  v8[10] = v6;
  v8[11] = &off_1006FC7D8;
  v8[7] = v13;
  sub_10000C6B4(&v22, (uint64_t)(v8 + 2));
  swift_retain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v21);
  uint64_t v23 = v7;
  long long v24 = &off_1006F90B0;
  *(void *)&long long v22 = v8;
  uint64_t v14 = enum case for AsyncCoreDataStore.StoreType.disk(_:);
  long long v15 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v15(v4, enum case for AsyncCoreDataStore.StoreType.disk(_:), v1);
  type metadata accessor for DaemonCoreDataStore();
  swift_allocObject();
  uint64_t v16 = sub_100568900((uint64_t)v4);
  v15(v4, v14, v1);
  type metadata accessor for DaemonBiomeCoreDataStore();
  swift_allocObject();
  uint64_t v17 = sub_10020E2EC((uint64_t)v4);
  return sub_10017E5E4((uint64_t)&v22, v16, v17, v20);
}

uint64_t type metadata accessor for EnvironmentManager()
{
  return self;
}

uint64_t destroy for Environment(void *a1)
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (a1[10]) {
    uint64_t result = swift_release();
  }
  if (a1[12]) {
    uint64_t result = swift_release();
  }
  if (a1[14]) {
    uint64_t result = swift_release();
  }
  if (a1[16]) {
    uint64_t result = swift_release();
  }
  if (a1[18]) {
    uint64_t result = swift_release();
  }
  if (a1[20]) {
    uint64_t result = swift_release();
  }
  if (a1[22])
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Environment(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v5;
    *(void *)(a1 + 88) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v9;
    *(void *)(a1 + 104) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  uint64_t v11 = *(void *)(a2 + 112);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v11;
    *(void *)(a1 + 120) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  uint64_t v13 = *(void *)(a2 + 128);
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v13;
    *(void *)(a1 + 136) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  }
  uint64_t v15 = *(void *)(a2 + 144);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v15;
    *(void *)(a1 + 152) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  }
  uint64_t v17 = *(void *)(a2 + 160);
  if (v17)
  {
    uint64_t v18 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v17;
    *(void *)(a1 + 168) = v18;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
  uint64_t v19 = *(void *)(a2 + 176);
  if (v19)
  {
    uint64_t v20 = *(void *)(a2 + 184);
    *(void *)(a1 + 176) = v19;
    *(void *)(a1 + 184) = v20;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  }
  return a1;
}

uint64_t *assignWithCopy for Environment(uint64_t *a1, uint64_t *a2)
{
  sub_10000A128(a1, a2);
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  uint64_t v4 = a2[10];
  if (a1[10])
  {
    if (v4)
    {
      uint64_t v5 = a2[11];
      a1[10] = v4;
      a1[11] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[11];
    a1[10] = v4;
    a1[11] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
LABEL_8:
  uint64_t v7 = a2[12];
  if (a1[12])
  {
    if (v7)
    {
      uint64_t v8 = a2[13];
      a1[12] = v7;
      a1[13] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[13];
    a1[12] = v7;
    a1[13] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
LABEL_15:
  uint64_t v10 = a2[14];
  if (a1[14])
  {
    if (v10)
    {
      uint64_t v11 = a2[15];
      a1[14] = v10;
      a1[15] = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[15];
    a1[14] = v10;
    a1[15] = v12;
    swift_retain();
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
LABEL_22:
  uint64_t v13 = a2[16];
  if (a1[16])
  {
    if (v13)
    {
      uint64_t v14 = a2[17];
      a1[16] = v13;
      a1[17] = v14;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    uint64_t v15 = a2[17];
    a1[16] = v13;
    a1[17] = v15;
    swift_retain();
    goto LABEL_29;
  }
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
LABEL_29:
  uint64_t v16 = a2[18];
  if (a1[18])
  {
    if (v16)
    {
      uint64_t v17 = a2[19];
      a1[18] = v16;
      a1[19] = v17;
      swift_retain();
      swift_release();
      goto LABEL_36;
    }
    swift_release();
  }
  else if (v16)
  {
    uint64_t v18 = a2[19];
    a1[18] = v16;
    a1[19] = v18;
    swift_retain();
    goto LABEL_36;
  }
  *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
LABEL_36:
  uint64_t v19 = a2[20];
  if (a1[20])
  {
    if (v19)
    {
      uint64_t v20 = a2[21];
      a1[20] = v19;
      a1[21] = v20;
      swift_retain();
      swift_release();
      goto LABEL_43;
    }
    swift_release();
  }
  else if (v19)
  {
    uint64_t v21 = a2[21];
    a1[20] = v19;
    a1[21] = v21;
    swift_retain();
    goto LABEL_43;
  }
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
LABEL_43:
  uint64_t v22 = a2[22];
  if (!a1[22])
  {
    if (v22)
    {
      uint64_t v24 = a2[23];
      a1[22] = v22;
      a1[23] = v24;
      swift_retain();
      return a1;
    }
LABEL_49:
    *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
    return a1;
  }
  if (!v22)
  {
    swift_release();
    goto LABEL_49;
  }
  uint64_t v23 = a2[23];
  a1[22] = v22;
  a1[23] = v23;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for Environment(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for Environment(uint64_t a1, uint64_t a2)
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v6;
      *(void *)(a1 + 88) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v6;
    *(void *)(a1 + 88) = v8;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v9;
      *(void *)(a1 + 104) = v10;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v9;
    *(void *)(a1 + 104) = v11;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_15:
  uint64_t v12 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v12;
      *(void *)(a1 + 120) = v13;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v12;
    *(void *)(a1 + 120) = v14;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_22:
  uint64_t v15 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128))
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = v15;
      *(void *)(a1 + 136) = v16;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v15)
  {
    uint64_t v17 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v15;
    *(void *)(a1 + 136) = v17;
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
LABEL_29:
  uint64_t v18 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144))
  {
    if (v18)
    {
      uint64_t v19 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = v18;
      *(void *)(a1 + 152) = v19;
      swift_release();
      goto LABEL_36;
    }
    swift_release();
  }
  else if (v18)
  {
    uint64_t v20 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v18;
    *(void *)(a1 + 152) = v20;
    goto LABEL_36;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
LABEL_36:
  uint64_t v21 = *(void *)(a2 + 160);
  if (*(void *)(a1 + 160))
  {
    if (v21)
    {
      uint64_t v22 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = v21;
      *(void *)(a1 + 168) = v22;
      swift_release();
      goto LABEL_43;
    }
    swift_release();
  }
  else if (v21)
  {
    uint64_t v23 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v21;
    *(void *)(a1 + 168) = v23;
    goto LABEL_43;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_43:
  uint64_t v24 = *(void *)(a2 + 176);
  if (!*(void *)(a1 + 176))
  {
    if (v24)
    {
      uint64_t v26 = *(void *)(a2 + 184);
      *(void *)(a1 + 176) = v24;
      *(void *)(a1 + 184) = v26;
      return a1;
    }
LABEL_49:
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    return a1;
  }
  if (!v24)
  {
    swift_release();
    goto LABEL_49;
  }
  uint64_t v25 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = v24;
  *(void *)(a1 + 184) = v25;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Environment(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Environment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Environment()
{
  return &type metadata for Environment;
}

uint64_t sub_10017F628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100725F30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017F690(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100725F30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10017F6F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10017F728@<X0>(uint64_t *a1@<X8>)
{
  return sub_1005334E0(a1);
}

uint64_t sub_10017F744@<X0>(uint64_t *a1@<X8>)
{
  return sub_1005F688C(a1);
}

uint64_t sub_10017F760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v67 = a4;
  uint64_t v72 = a2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v6;
  __chkstk_darwin(v6);
  uint64_t v74 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for MobileDocumentReaderRequest.Document();
  __chkstk_darwin(v60);
  uint64_t v59 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MobileDocumentReaderRequest();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v65 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v64 = type metadata accessor for Logger();
  uint64_t v73 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v17 - 8);
  uint64_t v18 = type metadata accessor for DIPSignpost();
  uint64_t v70 = *(void *)(v18 - 8);
  uint64_t v71 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DaemonSignposts.MobileDocumentReader.buildRequest.getter();
  unint64_t v69 = v20;
  uint64_t v21 = v9;
  DIPSignpost.init(_:)();
  defaultLogger()();
  uint64_t v22 = a1;
  uint64_t v23 = a1;
  uint64_t v24 = v72;
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v66(v14, v23, v9);
  sub_1000338D4(v24, a3);
  sub_1000338D4(v24, a3);
  uint64_t v63 = v16;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v55 = v10 + 16;
    uint64_t v56 = v22;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v76 = v54;
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v57 = v21;
    uint64_t v58 = v25;
    MobileDocumentReaderRequest.document.getter();
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v75 = sub_100110D58(v28, v29, &v76);
    uint64_t v21 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    long long v30 = v58;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v21);
    *(_WORD *)(v27 + 12) = 2048;
    uint64_t v31 = -1;
    uint64_t v32 = v73;
    if (a3 >> 60 != 15)
    {
      switch(a3 >> 62)
      {
        case 1uLL:
          sub_10000C5E0(v24, a3);
          LODWORD(v31) = HIDWORD(v24) - v24;
          if (__OFSUB__(HIDWORD(v24), v24))
          {
            __break(1u);
LABEL_17:
            __break(1u);
            JUMPOUT(0x100180014);
          }
          uint64_t v31 = (int)v31;
LABEL_9:
          long long v30 = v58;
          break;
        case 2uLL:
          uint64_t v36 = *(void *)(v24 + 16);
          uint64_t v35 = *(void *)(v24 + 24);
          sub_10000C5E0(v24, a3);
          uint64_t v31 = v35 - v36;
          if (!__OFSUB__(v35, v36)) {
            goto LABEL_9;
          }
          goto LABEL_17;
        case 3uLL:
          sub_10000C5E0(v24, a3);
          uint64_t v31 = 0;
          break;
        default:
          sub_10000C5E0(v24, a3);
          uint64_t v31 = BYTE6(a3);
          break;
      }
    }
    uint64_t v75 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10000C5E0(v24, a3);
    _os_log_impl((void *)&_mh_execute_header, v30, v26, "ISO18013RequestBuilder building mdoc request with %s and logotype icon data %ld bytes", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v32 + 8))(v63, v64);
    uint64_t v33 = v74;
    uint64_t v34 = v56;
  }
  else
  {
    sub_10000C5E0(v24, a3);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    sub_10000C5E0(v24, a3);

    (*(void (**)(char *, uint64_t))(v73 + 8))(v63, v64);
    uint64_t v33 = v74;
    uint64_t v34 = v22;
  }
  uint64_t v37 = v68;
  uint64_t v38 = (uint64_t)v65;
  uint64_t v39 = (void (*)(uint64_t *, uint64_t, uint64_t))v66;
  v66(v65, v34, v21);
  sub_1000338D4(v24, a3);
  sub_100180024(v38, v24, a3, v67);
  if (v37)
  {
    (*(void (**)(char *, void, uint64_t))(v61 + 104))(v33, enum case for DIPError.Code.documentReaderCannotBuildRequest(_:), v62);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v40 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v41 = v39;
    unint64_t v42 = (*(unsigned __int8 *)(*(void *)v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v40 + 80);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_100610730;
    unint64_t v44 = v43 + v42;
    uint64_t v45 = (uint64_t *)(v44 + v40[14]);
    uint64_t v46 = v34;
    uint64_t v47 = enum case for DIPError.PropertyKey.documentRequest(_:);
    uint64_t v48 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104))(v44, v47, v48);
    v45[3] = v21;
    uint64_t v49 = sub_10002C2D8(v45);
    v41(v49, v46, v21);
    swift_errorRetain();
    sub_10015C504(v43);
    type metadata accessor for DIPError();
    sub_100184A18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    uint64_t v50 = v69;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v50, v71);
  }
  else
  {
    uint64_t v52 = v69;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v52, v71);
  }
}

uint64_t sub_100180024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v85 = a1;
  uint64_t v86 = a2;
  uint64_t v71 = a4;
  uint64_t v5 = sub_100007764(&qword_100725778);
  __chkstk_darwin(v5 - 8);
  unint64_t v69 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MobileDocumentType();
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v77 = v7;
  __chkstk_darwin(v7);
  uint64_t v84 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest();
  __chkstk_darwin(v73);
  uint64_t v72 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100725F80);
  __chkstk_darwin(v10 - 8);
  uint64_t v74 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for ISO18013ReaderRequest.DocRequest();
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v67 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MobileDocumentReaderRequest.Document();
  uint64_t v81 = *(void *)(v13 - 8);
  uint64_t v82 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v75 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v66 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v66 - v19;
  uint64_t v21 = sub_100007764(&qword_100725DF0);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for AnyCodable();
  uint64_t v24 = *(void *)(v87 - 8);
  uint64_t v25 = __chkstk_darwin(v87);
  uint64_t v27 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25);
  long long v30 = (char *)&v66 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v66 - v31;
  uint64_t v89 = &_swiftEmptyDictionarySingleton;
  uint64_t v33 = static ISO18013ReaderRequestInfoConstant.requestLogotypeIconDataKey.getter();
  unint64_t v35 = a3;
  uint64_t v36 = v33;
  uint64_t v37 = v34;
  unint64_t v78 = v35;
  uint64_t v80 = v18;
  if (v35 >> 60 == 15)
  {
    sub_10056005C(v33, v34, (uint64_t)v23);
    swift_bridgeObjectRelease();
    sub_10000C6CC((uint64_t)v23, &qword_100725DF0);
  }
  else
  {
    sub_10002CEB0(v86, v35);
    AnyCodable.init(value:)();
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v30, v32, v87);
    uint64_t v38 = v89;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v88 = v38;
    uint64_t v89 = (void *)0x8000000000000000;
    sub_100562D9C((uint64_t)v30, v36, v37, isUniquelyReferenced_nonNull_native);
    uint64_t v89 = v88;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v79 = static ISO18013ReaderRequestInfoConstant.requestInterpretWillNotRetainIntentAsDisplayOnlyKey.getter();
  uint64_t v41 = v40;
  uint64_t v42 = v85;
  MobileDocumentReaderRequest.document.getter();
  MobileDocumentReaderRequest.Document.isDisplayOnly.getter();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v81 + 8);
  unint64_t v44 = v20;
  uint64_t v45 = v82;
  v43(v44, v82);
  AnyCodable.init(value:)();
  uint64_t v46 = v30;
  uint64_t v47 = v45;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v27, v46, v87);
  uint64_t v48 = v89;
  char v49 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v88 = v48;
  uint64_t v89 = (void *)0x8000000000000000;
  sub_100562D9C((uint64_t)v27, v79, v41, v49);
  uint64_t v89 = v88;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v50 = v80;
  MobileDocumentReaderRequest.document.getter();
  uint64_t v51 = v84;
  MobileDocumentReaderRequest.Document.type.getter();
  v43(v50, v47);
  uint64_t v52 = v83;
  MobileDocumentType.iso18013Identifier.getter();
  if (v52)
  {
    sub_10000C5E0(v86, v78);
    uint64_t v53 = type metadata accessor for MobileDocumentReaderRequest();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v42, v53);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v51, v77);
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v76 + 8))(v51, v77);
    uint64_t v54 = v75;
    MobileDocumentReaderRequest.document.getter();
    sub_100183AA4();
    v43(v54, v47);
    ISO18013ReaderRequest.ItemsRequest.init(docType:namespaces:requestInfo:)();
    type metadata accessor for CBOREncoder();
    swift_allocObject();
    CBOREncoder.init()();
    sub_100184A18(&qword_100725FC0, (void (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest);
    sub_100184A18(&qword_100725FC8, (void (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest);
    CBOREncodedCBOR.init(value:tag:encoder:)();
    unint64_t v56 = v78;
    uint64_t v57 = v86;
    uint64_t v58 = type metadata accessor for COSE_Sign1();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v69, 1, 1, v58);
    uint64_t v59 = v67;
    ISO18013ReaderRequest.DocRequest.init(itemsRequest:readerAuth:)();
    sub_100007764((uint64_t *)&unk_100725FD0);
    uint64_t v60 = v68;
    unint64_t v61 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_100610730;
    unint64_t v63 = v62 + v61;
    uint64_t v64 = v70;
    (*(void (**)(unint64_t, char *, uint64_t))(v60 + 16))(v63, v59, v70);
    ISO18013ReaderRequest.init(version:docRequests:)();
    sub_10000C5E0(v57, v56);
    uint64_t v65 = type metadata accessor for MobileDocumentReaderRequest();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v65 - 8) + 8))(v42, v65);
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v59, v64);
  }
}

uint64_t sub_100180980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Milestone();
  v5[14] = v7;
  v5[15] = *(void *)(v7 - 8);
  v5[16] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[17] = v8;
  v5[18] = *(void *)(v8 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v5[21] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPSignpost();
  v5[22] = v9;
  v5[23] = *(void *)(v9 - 8);
  v5[24] = swift_task_alloc();
  return _swift_task_switch(sub_100180B98, 0, 0);
}

uint64_t sub_100180B98()
{
  static DaemonSignposts.MobileDocumentReader.signRequest.getter();
  DIPSignpost.init(_:)();
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    long long v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ISO18013RequestBuilder signDocumentRequest starting to sign document request", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 80);
  long long v15 = *(_OWORD *)(v0 + 64);

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 200) = v8;
  *(void *)(v0 + 208) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  *(void *)(v0 + 40) = ISO18013ReaderRequest.docRequests.getter();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 216) = v9;
  *(_OWORD *)(v9 + 16) = v15;
  *(void *)(v9 + 32) = v7;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v10;
  uint64_t v11 = sub_100007764(&qword_100725F70);
  uint64_t v12 = type metadata accessor for ISO18013ReaderRequest.DocRequest();
  unint64_t v13 = sub_10018198C();
  *uint64_t v10 = v0;
  v10[1] = sub_100180D80;
  return Sequence.asyncMap<A>(_:)(&unk_100725F68, v9, v11, v12, v13);
}

uint64_t sub_100180D80(uint64_t a1)
{
  long long v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  v3[29] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100181088;
  }
  else {
    uint64_t v4 = sub_100180EB0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100180EB0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    long long v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ISO18013RequestBuilder signDocumentRequest returning successfully", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[25];
  uint64_t v6 = v0[23];
  uint64_t v5 = v0[24];
  uint64_t v15 = v0[22];
  uint64_t v7 = v1;
  uint64_t v8 = v0[19];
  uint64_t v10 = v0[16];
  uint64_t v9 = v0[17];
  uint64_t v11 = v0[14];
  uint64_t v12 = v0[15];

  v4(v8, v9);
  static MobileDocumentReaderMilestone.readRequestSigned.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  ISO18013ReaderRequest.version.getter();
  ISO18013ReaderRequest.init(version:docRequests:)();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100181088()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[22];
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100184A18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100181274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  sub_100007764(&qword_100725778);
  v5[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for COSE_Sign1();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  uint64_t v7 = sub_100007764(&qword_100725F80);
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ISO18013SessionTranscript();
  v5[14] = v8;
  v5[15] = *(void *)(v8 - 8);
  v5[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ISO18013ReaderAuthentication();
  v5[17] = v9;
  v5[18] = *(void *)(v9 - 8);
  v5[19] = swift_task_alloc();
  return _swift_task_switch(sub_100181484, 0, 0);
}

uint64_t sub_100181484()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  (*(void (**)(void, void, void))(v0[15] + 16))(v0[16], v0[4], v0[14]);
  ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
  CBOREncodedCBOR.dataValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  ISO18013ReaderAuthentication.init(sessionTranscript:itemsRequestBytes:)();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[20] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001815A8;
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  return sub_1001819E8(v6, v5, v7, v8);
}

uint64_t sub_1001815A8()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10018180C;
  }
  else {
    uint64_t v2 = sub_1001816BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001816BC()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v9 = v0[17];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v3, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v5, 0, 1, v6);
  ISO18013ReaderRequest.DocRequest.init(itemsRequest:readerAuth:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10018180C()
{
  (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001818C8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10000C494;
  return sub_100181274(a1, a2, v6, v7, v8);
}

unint64_t sub_10018198C()
{
  unint64_t result = qword_100725F78;
  if (!qword_100725F78)
  {
    sub_100019364(&qword_100725F70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100725F78);
  }
  return result;
}

uint64_t sub_1001819E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a3;
  v4[16] = a4;
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[17] = v5;
  v4[18] = *(void *)(v5 - 8);
  v4[19] = swift_task_alloc();
  sub_100007764(&qword_100725778);
  v4[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[21] = v6;
  v4[22] = *(void *)(v6 - 8);
  v4[23] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SHA256();
  v4[24] = v7;
  v4[25] = *(void *)(v7 - 8);
  v4[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SHA256Digest();
  v4[27] = v8;
  v4[28] = *(void *)(v8 - 8);
  v4[29] = swift_task_alloc();
  sub_100007764(&qword_100725F90);
  v4[30] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for RFC8152SigStructure();
  v4[31] = v9;
  v4[32] = *(void *)(v9 - 8);
  v4[33] = swift_task_alloc();
  sub_100007764(&qword_10071FC78);
  v4[34] = swift_task_alloc();
  sub_100007764(&qword_100725F98);
  v4[35] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier();
  v4[36] = v10;
  v4[37] = *(void *)(v10 - 8);
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  return _swift_task_switch(sub_100181D74, 0, 0);
}

uint64_t sub_100181D74()
{
  uint64_t v1 = *(void *)(v0 + 120);
  unint64_t v2 = *(void *)(v1 + *(int *)(type metadata accessor for MobileDocumentReaderAuthenticationSession() + 28));
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v3)
  {
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v15 = *(void *)(v0 + 152);
    uint64_t v17 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v15, enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), v17);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100184A18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_14:
    (*(void (**)(void, void, void))(*(void *)(v0 + 144) + 104))(*(void *)(v0 + 152), enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), *(void *)(v0 + 136));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100184A18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_35:
      __break(1u);
    }
    id v4 = *(id *)(v2 + 32);
  }
  uint64_t v5 = v4;
  *(void *)(v0 + 320) = v4;
  swift_bridgeObjectRelease();
  type metadata accessor for SecCertificate(0);
  uint64_t v6 = Array<A>.derRepresentation()();
  *(void *)(v0 + 328) = v6;
  if (!v6)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 144) + 104))(*(void *)(v0 + 152), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 136));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100184A18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    goto LABEL_14;
  }
  uint64_t v7 = *(void *)(v0 + 272);
  SecCertificateRef.publicKeyAlgorithm()();
  uint64_t v8 = type metadata accessor for PublicKeyAlgorithm();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  uint64_t v11 = *(void *)(v0 + 288);
  uint64_t v12 = *(void *)(v0 + 296);
  uint64_t v13 = *(void *)(v0 + 272);
  uint64_t v14 = *(void *)(v0 + 280);
  if (v10 == 1)
  {
    sub_10000C6CC(*(void *)(v0 + 272), &qword_10071FC78);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v14, 1, 1, v11);
LABEL_13:
    uint64_t v18 = *(void *)(v0 + 280);
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v21 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease();
    sub_10000C6CC(v18, &qword_100725F98);
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v19, enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), v21);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100184A18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    goto LABEL_14;
  }
  sub_1001837B8(*(void *)(v0 + 280));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v11) == 1) {
    goto LABEL_13;
  }
  uint64_t v24 = *(void *)(v0 + 304);
  uint64_t v25 = *(void *)(v0 + 288);
  uint64_t v26 = *(void *)(v0 + 296);
  (*(void (**)(void, void, uint64_t))(v26 + 32))(*(void *)(v0 + 312), *(void *)(v0 + 280), v25);
  (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v24, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v25);
  sub_100184A18(&qword_100725FA0, (void (*)(uint64_t))&type metadata accessor for COSE_Sign1.AlgorithmIdentifier);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v28 = *(void *)(v0 + 88);
  uint64_t v27 = *(void *)(v0 + 96);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  *(void *)(v0 + 336) = v29;
  *(void *)(v0 + 344) = (v26 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v29(v24, v25);
  uint64_t v71 = v29;
  if (v27 != v28)
  {
    uint64_t v68 = *(void *)(v0 + 288);
    uint64_t v69 = *(void *)(v0 + 312);
    uint64_t v40 = *(void *)(v0 + 144);
    uint64_t v39 = *(void *)(v0 + 152);
    uint64_t v67 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(74);
    *(void *)(v0 + 72) = 0;
    *(void *)(v0 + 80) = 0xE000000000000000;
    v41._countAndFlagsBits = 0xD000000000000014;
    v41._object = (void *)0x800000010063CC90;
    String.append(_:)(v41);
    _print_unlocked<A, B>(_:_:)();
    v42._countAndFlagsBits = 0xD000000000000034;
    v42._object = (void *)0x800000010063CCB0;
    String.append(_:)(v42);
    (*(void (**)(uint64_t, void, uint64_t))(v40 + 104))(v39, enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), v67);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100184A18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    uint64_t v38 = v68;
    uint64_t v37 = v69;
    goto LABEL_21;
  }
  uint64_t v30 = ISO18013ReaderAuthentication.dataValue.getter();
  *(void *)(v0 + 352) = v30;
  *(void *)(v0 + 360) = v31;
  uint64_t v32 = *(void *)(v0 + 312);
  if (v31 >> 60 == 15)
  {
    uint64_t v33 = *(void *)(v0 + 288);
    uint64_t v35 = *(void *)(v0 + 144);
    uint64_t v34 = *(void *)(v0 + 152);
    uint64_t v36 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))(v34, enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), v36);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100184A18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    uint64_t v37 = v32;
    uint64_t v38 = v33;
LABEL_21:
    v71(v37, v38);
    goto LABEL_14;
  }
  uint64_t v43 = v30;
  unint64_t v44 = v31;
  uint64_t v45 = *(void *)(v0 + 240);
  COSE_Sign1.AlgorithmIdentifier.rawValue.getter();
  sub_10002CEB0(v43, v44);
  RFC8152SigStructure.init(algorithm:payload:)();
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  *(void *)(v0 + 368) = CBOREncoder.init()();
  uint64_t v46 = enum case for ISO18013PresentmentType.physical(_:);
  uint64_t v47 = type metadata accessor for ISO18013PresentmentType();
  uint64_t v48 = *(void *)(v47 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 104))(v45, v46, v47);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  CBOREncoder.presentmentType.setter();
  sub_100184A18(&qword_100725FA8, (void (*)(uint64_t))&type metadata accessor for RFC8152SigStructure);
  uint64_t v49 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  *(void *)(v0 + 376) = v49;
  *(void *)(v0 + 384) = v50;
  uint64_t v51 = v49;
  unint64_t v52 = v50;
  sub_100184A18(&qword_100722DF8, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  switch(v52 >> 62)
  {
    case 1uLL:
      if (v51 >> 32 < (int)v51) {
        goto LABEL_35;
      }
      sub_10002CEB0(v51, v52);
      sub_10018451C((int)v51, v51 >> 32);
      break;
    case 2uLL:
      uint64_t v53 = *(void *)(v51 + 16);
      uint64_t v54 = *(void *)(v51 + 24);
      sub_10002CEB0(v51, v52);
      swift_retain();
      swift_retain();
      sub_10018451C(v53, v54);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      *(void *)(v0 + 440) = 0;
      *(void *)(v0 + 446) = 0;
      goto LABEL_28;
    default:
      *(void *)(v0 + 454) = v51;
      *(_WORD *)(v0 + 462) = v52;
      *(unsigned char *)(v0 + 464) = BYTE2(v52);
      *(unsigned char *)(v0 + 465) = BYTE3(v52);
      *(unsigned char *)(v0 + 466) = BYTE4(v52);
      *(unsigned char *)(v0 + 467) = BYTE5(v52);
LABEL_28:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_10000C5F4(v51, v52);
  uint64_t v55 = *(void *)(v0 + 224);
  uint64_t v56 = *(void *)(v0 + 232);
  uint64_t v57 = *(void *)(v0 + 208);
  uint64_t v58 = *(void *)(v0 + 216);
  uint64_t v60 = *(void *)(v0 + 192);
  uint64_t v59 = *(void *)(v0 + 200);
  uint64_t v61 = *(void *)(v0 + 184);
  uint64_t v70 = *(void *)(v0 + 176);
  uint64_t v72 = *(void *)(v0 + 168);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v60);
  *(void *)(v0 + 40) = v58;
  *(void *)(v0 + 48) = sub_100184A18(&qword_100725FB0, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  uint64_t v62 = sub_10002C2D8((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v55 + 16))(v62, v56, v58);
  sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v58);
  uint64_t v63 = *(void *)(v0 + 56);
  uint64_t v64 = *(void *)(v0 + 64);
  *(void *)(v0 + 392) = v63;
  *(void *)(v0 + 400) = v64;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  defaultLogger()();
  uint64_t v65 = swift_task_alloc();
  *(void *)(v65 + 16) = v63;
  *(void *)(v65 + 24) = v64;
  Logger.cryptoParam(_:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v61, v72);
  uint64_t v66 = swift_task_alloc();
  *(void *)(v0 + 408) = v66;
  *(void *)uint64_t v66 = v0;
  *(void *)(v66 + 8) = sub_100182E24;
  *(_OWORD *)(v66 + 32) = *(_OWORD *)(v0 + 120);
  *(void *)(v66 + 16) = v63;
  *(void *)(v66 + 24) = v64;
  return _swift_task_switch(sub_100184628, 0, 0);
}

uint64_t sub_100182E24(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)*v3;
  v4[52] = a1;
  v4[53] = a2;
  v4[54] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100183514;
  }
  else
  {
    uint64_t v5 = sub_100182F78;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100182F78()
{
  uint64_t v2 = v0[52];
  unint64_t v1 = v0[53];
  uint64_t v3 = v0[20];
  COSE_Sign1.AlgorithmIdentifier.rawValue.getter();
  sub_10002CEB0(v2, v1);
  COSE_Sign1.init(algorithmIdentifier:keyIdentifier:initializationVector:partialInitializationVector:payload:signature:x509Chain:includeCBORTag:)();
  uint64_t v4 = type metadata accessor for COSE_Sign1();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  uint64_t v31 = v0[52];
  unint64_t v32 = v0[53];
  uint64_t v26 = v0[47];
  unint64_t v27 = v0[48];
  uint64_t v29 = v0[44];
  unint64_t v30 = v0[45];
  uint64_t v33 = (void (*)(uint64_t, uint64_t))v0[42];
  uint64_t v7 = v0[39];
  uint64_t v28 = (void *)v0[40];
  if (v6 == 1)
  {
    uint64_t v25 = v0[36];
    uint64_t v8 = v0[32];
    uint64_t v22 = v0[31];
    uint64_t v23 = v0[33];
    uint64_t v9 = v0[19];
    uint64_t v10 = v0[18];
    unint64_t v21 = v0[50];
    uint64_t v11 = v0[49];
    sub_10000C6CC(v0[20], &qword_100725778);
    unsigned int v24 = enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:);
    (*(void (**)(uint64_t))(v10 + 104))(v9);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100184A18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v11, v21);
    sub_10000C5F4(v26, v27);
    swift_release();

    sub_10000C5F4(v31, v32);
    sub_10000C5E0(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v23, v22);
    v33(v7, v25);
    (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], v24, v0[17]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v20 = v0[36];
    uint64_t v13 = v0[33];
    uint64_t v14 = v0[39];
    uint64_t v16 = v0[31];
    uint64_t v15 = v0[32];
    uint64_t v17 = v0[20];
    uint64_t v18 = v0[13];
    sub_10000C5F4(v0[49], v0[50]);
    sub_10000C5F4(v26, v27);
    swift_release();

    sub_10000C5F4(v31, v32);
    sub_10000C5E0(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v16);
    v33(v14, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v18, v17, v4);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100183514()
{
  uint64_t v1 = v0[47];
  unint64_t v2 = v0[48];
  unint64_t v3 = v0[45];
  uint64_t v4 = v0[44];
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[42];
  uint64_t v5 = (void *)v0[40];
  uint64_t v11 = v0[36];
  uint64_t v12 = v0[39];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[33];
  uint64_t v8 = v0[31];
  sub_10000C5F4(v0[49], v0[50]);
  sub_10000C5F4(v1, v2);
  swift_release();

  sub_10000C5E0(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  v13(v12, v11);
  (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), v0[17]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100184A18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001837B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PublicKeyAlgorithm();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 != enum case for PublicKeyAlgorithm.EC_P256(_:))
  {
    if (v8 == enum case for PublicKeyAlgorithm.EC_P384(_:))
    {
      uint64_t v9 = (unsigned int *)&enum case for COSE_Sign1.AlgorithmIdentifier.ES384(_:);
      goto LABEL_7;
    }
    if (v8 == enum case for PublicKeyAlgorithm.EC_P521(_:))
    {
      uint64_t v9 = (unsigned int *)&enum case for COSE_Sign1.AlgorithmIdentifier.ES512(_:);
      goto LABEL_7;
    }
    if (v8 != enum case for PublicKeyAlgorithm.ED_25519(_:) && v8 != enum case for PublicKeyAlgorithm.ED_448(_:))
    {
      uint64_t v15 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 1, 1, v15);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  uint64_t v9 = (unsigned int *)&enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:);
LABEL_7:
  uint64_t v10 = *v9;
  uint64_t v11 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a1, v10, v11);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
}

uint64_t sub_100183A10()
{
  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x800000010063CD90;
  v0._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v0);
  Swift::String v1 = Data.base16EncodedString()();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100183AA4()
{
  uint64_t v2 = v1;
  uint64_t v120 = type metadata accessor for MobileDocumentType();
  uint64_t v3 = *(void *)(v120 - 8);
  uint64_t v4 = __chkstk_darwin(v120);
  uint64_t v108 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v106 - v6;
  uint64_t v8 = type metadata accessor for MobileDocumentElement();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  v117 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v106 - v12;
  uint64_t v121 = v0;
  uint64_t v14 = MobileDocumentReaderRequest.Document.nonRetainedElements.getter();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 + 16);
  uint64_t v118 = v9;
  uint64_t v119 = v8;
  uint64_t v113 = v16;
  uint64_t v107 = v3;
  if (!v16)
  {
    swift_bridgeObjectRelease();
    uint64_t v123 = 0;
    uint64_t v18 = &_swiftEmptyDictionarySingleton;
    goto LABEL_34;
  }
  uint64_t v123 = 0;
  v115 = (void (**)(uint64_t, uint64_t))(v14
                                                + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)));
  unint64_t v114 = v9 + 16;
  v116 = (void (**)(char *, uint64_t))(v3 + 8);
  unint64_t v17 = 0;
  v112 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v18 = &_swiftEmptyDictionarySingleton;
  uint64_t v110 = v14;
  v111 = (void (**)(char *, uint64_t))v7;
  v109 = v13;
  while (1)
  {
    if (v17 >= *(void *)(v15 + 16)) {
      goto LABEL_77;
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, (char *)v115 + *(void *)(v9 + 72) * v17, v8);
    MobileDocumentReaderRequest.Document.type.getter();
    char v20 = MobileDocumentReaderRequest.Document.isRawDataTransfer.getter();
    uint64_t v21 = sub_1002A1340((uint64_t)v7, v20 & 1);
    if (v2)
    {
      (*v116)(v7, v120);
      (*v112)(v13, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v59 = (uint64_t)v123;
      goto LABEL_65;
    }
    uint64_t v122 = (void (**)(char *, uint64_t))v17;
    uint64_t v124 = 0;
    uint64_t v125 = v21;
    (*v116)(v7, v120);
    uint64_t v22 = *(void *)(v125 + 16);
    if (v22) {
      break;
    }
    uint64_t v19 = v123;
LABEL_4:
    uint64_t v123 = v19;
    unint64_t v17 = (unint64_t)v122 + 1;
    swift_bridgeObjectRelease();
    uint64_t v13 = v109;
    uint64_t v8 = v119;
    (*v112)(v109, v119);
    uint64_t v2 = v124;
    uint64_t v9 = v118;
    uint64_t v15 = v110;
    uint64_t v7 = (char *)v111;
    if (v17 == v113)
    {
      swift_bridgeObjectRelease();
LABEL_34:
      uint64_t v60 = MobileDocumentReaderRequest.Document.retainedElements.getter();
      uint64_t v61 = v60;
      v112 = *(void (***)(char *, uint64_t))(v60 + 16);
      if (!v112)
      {
        swift_bridgeObjectRelease();
        uint64_t v62 = 0;
        goto LABEL_67;
      }
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      unint64_t v114 = v60 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v113 = v9 + 16;
      v115 = (void (**)(uint64_t, uint64_t))(v107 + 8);
      uint64_t v110 = v60;
      v111 = (void (**)(char *, uint64_t))(v9 + 8);
      while (1)
      {
        if ((unint64_t)v63 >= *(void *)(v61 + 16)) {
          goto LABEL_78;
        }
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v117, v114 + *(void *)(v9 + 72) * (void)v63, v8);
        uint64_t v64 = (uint64_t)v108;
        MobileDocumentReaderRequest.Document.type.getter();
        char v65 = MobileDocumentReaderRequest.Document.isRawDataTransfer.getter();
        uint64_t v66 = sub_1002A1340(v64, v65 & 1);
        if (v2) {
          break;
        }
        uint64_t v67 = v66;
        uint64_t v122 = v63;
        uint64_t v124 = 0;
        (*v115)(v64, v120);
        uint64_t v68 = *(void *)(v67 + 16);
        v116 = (void (**)(char *, uint64_t))v67;
        if (v68)
        {
          uint64_t v69 = (uint64_t *)(v67 + 56);
          do
          {
            uint64_t v71 = *(v69 - 3);
            uint64_t v70 = *(v69 - 2);
            uint64_t v72 = *v69;
            uint64_t v126 = *(v69 - 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_10003BEDC((uint64_t)v62);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v129 = v18;
            uint64_t v127 = v70;
            unint64_t v75 = sub_100590548(v71, v70);
            uint64_t v76 = v18[2];
            BOOL v77 = (v74 & 1) == 0;
            uint64_t v78 = v76 + v77;
            if (__OFADD__(v76, v77)) {
              goto LABEL_71;
            }
            char v79 = v74;
            if (v18[3] >= v78)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_10016AF1C();
              }
            }
            else
            {
              sub_1001658D4(v78, isUniquelyReferenced_nonNull_native);
              unint64_t v80 = sub_100590548(v71, v127);
              if ((v79 & 1) != (v81 & 1)) {
                goto LABEL_79;
              }
              unint64_t v75 = v80;
            }
            uint64_t v82 = v129;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            if ((v79 & 1) == 0)
            {
              unint64_t v83 = sub_10015D044((uint64_t)_swiftEmptyArrayStorage);
              v82[(v75 >> 6) + 8] |= 1 << v75;
              uint64_t v84 = (uint64_t *)(v82[6] + 16 * v75);
              uint64_t v85 = v127;
              uint64_t *v84 = v71;
              v84[1] = v85;
              *(void *)(v82[7] + 8 * v75) = v83;
              uint64_t v86 = v82[2];
              BOOL v41 = __OFADD__(v86, 1);
              uint64_t v87 = v86 + 1;
              if (v41) {
                goto LABEL_75;
              }
              v82[2] = v87;
              swift_bridgeObjectRetain();
            }
            uint64_t v125 = v68;
            uint64_t v88 = v82[7];
            uint64_t v128 = v82;
            swift_bridgeObjectRelease();
            uint64_t v89 = 8 * v75;
            char v90 = swift_isUniquelyReferenced_nonNull_native();
            v129 = *(void **)(v88 + 8 * v75);
            uint64_t v91 = v129;
            *(void *)(v88 + 8 * v75) = 0x8000000000000000;
            uint64_t v92 = v126;
            unint64_t v94 = sub_100590548(v126, v72);
            uint64_t v95 = v91[2];
            BOOL v96 = (v93 & 1) == 0;
            uint64_t v97 = v95 + v96;
            if (__OFADD__(v95, v96)) {
              goto LABEL_72;
            }
            char v98 = v93;
            if (v91[3] >= v97)
            {
              if (v90)
              {
                v101 = v129;
                if (v93) {
                  goto LABEL_41;
                }
              }
              else
              {
                sub_10016AD70();
                v101 = v129;
                if (v98) {
                  goto LABEL_41;
                }
              }
            }
            else
            {
              sub_1001655C8(v97, v90);
              unint64_t v99 = sub_100590548(v92, v72);
              if ((v98 & 1) != (v100 & 1)) {
                goto LABEL_79;
              }
              unint64_t v94 = v99;
              v101 = v129;
              if (v98)
              {
LABEL_41:
                *(unsigned char *)(v101[7] + v94) = 1;
                goto LABEL_42;
              }
            }
            v101[(v94 >> 6) + 8] |= 1 << v94;
            v102 = (uint64_t *)(v101[6] + 16 * v94);
            uint64_t *v102 = v92;
            v102[1] = v72;
            *(unsigned char *)(v101[7] + v94) = 1;
            uint64_t v103 = v101[2];
            BOOL v41 = __OFADD__(v103, 1);
            uint64_t v104 = v103 + 1;
            if (v41) {
              goto LABEL_76;
            }
            v101[2] = v104;
            swift_bridgeObjectRetain();
LABEL_42:
            v69 += 4;
            *(void *)(v88 + v89) = v101;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v62 = sub_100184A70;
            uint64_t v68 = v125 - 1;
            uint64_t v18 = v128;
          }
          while (v125 != 1);
        }
        uint64_t v63 = (void (**)(char *, uint64_t))((char *)v122 + 1);
        swift_bridgeObjectRelease();
        uint64_t v8 = v119;
        (*v111)(v117, v119);
        uint64_t v2 = v124;
        uint64_t v9 = v118;
        uint64_t v61 = v110;
        if (v63 == v112)
        {
          swift_bridgeObjectRelease();
LABEL_67:
          sub_10003BEDC((uint64_t)v123);
          sub_10003BEDC((uint64_t)v62);
          return (uint64_t)v18;
        }
      }
      (*v115)(v64, v120);
      (*v111)(v117, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10003BEDC((uint64_t)v123);
      uint64_t v59 = (uint64_t)v62;
LABEL_65:
      sub_10003BEDC(v59);
      return (uint64_t)v18;
    }
  }
  uint64_t v23 = (uint64_t *)(v125 + 56);
  uint64_t v19 = v123;
  while (1)
  {
    uint64_t v24 = *(v23 - 3);
    uint64_t v25 = *(v23 - 2);
    uint64_t v26 = *(v23 - 1);
    uint64_t v27 = *v23;
    uint64_t v126 = v22;
    uint64_t v127 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10003BEDC((uint64_t)v19);
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    v129 = v18;
    unint64_t v30 = sub_100590548(v24, v25);
    uint64_t v31 = v18[2];
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      break;
    }
    char v34 = v29;
    if (v18[3] >= v33)
    {
      if ((v28 & 1) == 0) {
        sub_10016AF1C();
      }
    }
    else
    {
      sub_1001658D4(v33, v28);
      unint64_t v35 = sub_100590548(v24, v25);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_79;
      }
      unint64_t v30 = v35;
    }
    uint64_t v37 = v129;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if ((v34 & 1) == 0)
    {
      unint64_t v38 = sub_10015D044((uint64_t)_swiftEmptyArrayStorage);
      v37[(v30 >> 6) + 8] |= 1 << v30;
      uint64_t v39 = (uint64_t *)(v37[6] + 16 * v30);
      uint64_t *v39 = v24;
      v39[1] = v25;
      *(void *)(v37[7] + 8 * v30) = v38;
      uint64_t v40 = v37[2];
      BOOL v41 = __OFADD__(v40, 1);
      uint64_t v42 = v40 + 1;
      if (v41) {
        goto LABEL_73;
      }
      v37[2] = v42;
      swift_bridgeObjectRetain();
    }
    uint64_t v43 = v37[7];
    uint64_t v128 = v37;
    swift_bridgeObjectRelease();
    uint64_t v44 = 8 * v30;
    char v45 = swift_isUniquelyReferenced_nonNull_native();
    v129 = *(void **)(v43 + 8 * v30);
    uint64_t v46 = v129;
    *(void *)(v43 + 8 * v30) = 0x8000000000000000;
    unint64_t v48 = sub_100590548(v127, v27);
    uint64_t v49 = v46[2];
    BOOL v50 = (v47 & 1) == 0;
    uint64_t v51 = v49 + v50;
    if (__OFADD__(v49, v50)) {
      goto LABEL_70;
    }
    char v52 = v47;
    if (v46[3] >= v51)
    {
      if (v45)
      {
        uint64_t v55 = v129;
        if (v47) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_10016AD70();
        uint64_t v55 = v129;
        if (v52) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      sub_1001655C8(v51, v45);
      unint64_t v53 = sub_100590548(v127, v27);
      if ((v52 & 1) != (v54 & 1)) {
        goto LABEL_79;
      }
      unint64_t v48 = v53;
      uint64_t v55 = v129;
      if (v52)
      {
LABEL_9:
        *(unsigned char *)(v55[7] + v48) = 0;
        goto LABEL_10;
      }
    }
    v55[(v48 >> 6) + 8] |= 1 << v48;
    uint64_t v56 = (void *)(v55[6] + 16 * v48);
    *uint64_t v56 = v127;
    v56[1] = v27;
    *(unsigned char *)(v55[7] + v48) = 0;
    uint64_t v57 = v55[2];
    BOOL v41 = __OFADD__(v57, 1);
    uint64_t v58 = v57 + 1;
    if (v41) {
      goto LABEL_74;
    }
    v55[2] = v58;
    swift_bridgeObjectRetain();
LABEL_10:
    v23 += 4;
    *(void *)(v43 + v44) = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_100131C08;
    uint64_t v22 = v126 - 1;
    uint64_t v18 = v128;
    if (v126 == 1) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10018451C(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_100184A18(&qword_100722DF8, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001845FC()
{
  return sub_100183A10();
}

uint64_t sub_100184604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_100184628, 0, 0);
}

uint64_t sub_100184628()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for MobileDocumentReaderAuthenticationSession() + 32));
  uint64_t v3 = *v2;
  *(void *)(v0 + 48) = *v2;
  unint64_t v4 = v2[1];
  *(void *)(v0 + 56) = v4;
  if ((v4 & 0x2000000000000000) != 0)
  {
    sub_100184A0C(v3, v4);
    uint64_t v9 = (id)kSecKeyAlgorithmECDSASignatureDigestX962SHA256;
    uint64_t v10 = SecKeyRef.signSHA256Digest(_:algorithm:)();
    uint64_t v12 = v11;

    sub_100130188(*(void *)(v0 + 48), *(void *)(v0 + 56));
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v13(v10, v12);
  }
  else
  {
    sub_10000C728(*(void **)(v0 + 40), *(void *)(*(void *)(v0 + 40) + 24));
    sub_10002CEB0(v3, v4);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100184804;
    uint64_t v7 = *(void *)(v0 + 16);
    uint64_t v6 = *(void *)(v0 + 24);
    return sub_10054FA10(v7, v6, v3, v4);
  }
}

uint64_t sub_100184804(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 72) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_1001849A8;
  }
  else
  {
    *(void *)(v6 + 80) = a2;
    *(void *)(v6 + 88) = a1;
    uint64_t v7 = sub_100184938;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100184938()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  sub_100130188(v0[6], v0[7]);
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v2, v1);
}

uint64_t sub_1001849A8()
{
  sub_100130188(v0[6], v0[7]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

id sub_100184A0C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return (id)a1;
  }
  else {
    return (id)sub_10002CEB0(a1, a2);
  }
}

uint64_t sub_100184A18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013RequestBuilder()
{
  return &type metadata for ISO18013RequestBuilder;
}

uint64_t sub_100184A74(uint64_t a1, uint64_t *a2, const char *a3)
{
  uint64_t v7 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = 16 * i;
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 48) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = (uint64_t *)(*(void *)(a1 + 56) + v18);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    v26[0] = v20;
    v26[1] = v21;
    _OWORD v26[2] = v23;
    v26[3] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100195224(v26, a2, a3);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v27) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v7 + 8 * v12);
    if (!v16)
    {
      int64_t v17 = v12 + 1;
      if (v12 + 1 >= v27) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v17 = v12 + 2;
      if (v12 + 2 >= v27) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v17 = v12 + 3;
      if (v12 + 3 >= v27) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (v16)
      {
LABEL_14:
        int64_t v12 = v17;
        goto LABEL_15;
      }
      int64_t v25 = v12 + 4;
      if (v12 + 4 >= v27) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v7 + 8 * v25);
      v12 += 4;
      if (!v16) {
        break;
      }
    }
LABEL_15:
    unint64_t v10 = (v16 - 1) & v16;
  }
  while (1)
  {
    int64_t v12 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v12 >= v27) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v7 + 8 * v12);
    ++v25;
    if (v16) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100184C70(uint64_t a1, void *a2)
{
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v39 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v40 = a2;
  while (1)
  {
    if (v5)
    {
      uint64_t v42 = (v5 - 1) & v5;
      int64_t v43 = v6;
      unint64_t v8 = __clz(__rbit64(v5)) | (v6 << 6);
    }
    else
    {
      int64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_38;
      }
      if (v9 >= v39) {
        return swift_release();
      }
      unint64_t v10 = *(void *)(v38 + 8 * v9);
      int64_t v11 = v6 + 1;
      if (!v10)
      {
        int64_t v11 = v6 + 2;
        if (v6 + 2 >= v39) {
          return swift_release();
        }
        unint64_t v10 = *(void *)(v38 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v6 + 3;
          if (v6 + 3 >= v39) {
            return swift_release();
          }
          unint64_t v10 = *(void *)(v38 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v6 + 4;
            if (v6 + 4 >= v39) {
              return swift_release();
            }
            unint64_t v10 = *(void *)(v38 + 8 * v11);
            if (!v10)
            {
              uint64_t v12 = v6 + 5;
              if (v6 + 5 >= v39) {
                return swift_release();
              }
              unint64_t v10 = *(void *)(v38 + 8 * v12);
              if (!v10)
              {
                while (1)
                {
                  int64_t v11 = v12 + 1;
                  if (__OFADD__(v12, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v39) {
                    return swift_release();
                  }
                  unint64_t v10 = *(void *)(v38 + 8 * v11);
                  ++v12;
                  if (v10) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v6 + 5;
            }
          }
        }
      }
LABEL_23:
      uint64_t v42 = (v10 - 1) & v10;
      int64_t v43 = v11;
      unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    }
    unint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(a1 + 56) + 96 * v8;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 24);
    uint64_t v44 = *(void *)v16;
    uint64_t v45 = *(void *)(v16 + 16);
    uint64_t v19 = *(void *)(v16 + 40);
    uint64_t v46 = *(void *)(v16 + 32);
    char v47 = *(unsigned char *)(v16 + 48);
    uint64_t v20 = *(void *)(v16 + 64);
    uint64_t v48 = *(void *)(v16 + 56);
    uint64_t v49 = *(void *)(v16 + 72);
    char v50 = *(unsigned char *)(v16 + 88);
    uint64_t v51 = *(void *)(v16 + 80);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v52 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *a2;
    unint64_t v53 = (void *)*a2;
    *a2 = 0x8000000000000000;
    unint64_t v24 = sub_100590548(v14, v15);
    uint64_t v25 = *(void *)(v22 + 16);
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    char v28 = v23;
    if (*(void *)(v22 + 24) >= v27)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v31 = v53;
        if (v23) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_10016BB88();
        uint64_t v31 = v53;
        if (v28) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_100166DFC(v27, isUniquelyReferenced_nonNull_native);
      unint64_t v29 = sub_100590548(v14, v15);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_40;
      }
      unint64_t v24 = v29;
      uint64_t v31 = v53;
      if (v28)
      {
LABEL_4:
        uint64_t v7 = v31[7] + 96 * v24;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v7 = v44;
        *(void *)(v7 + 8) = v52;
        *(void *)(v7 + 16) = v45;
        *(void *)(v7 + 24) = v18;
        *(void *)(v7 + 32) = v46;
        *(void *)(v7 + 40) = v19;
        *(unsigned char *)(v7 + 48) = v47;
        *(void *)(v7 + 56) = v48;
        *(void *)(v7 + 64) = v20;
        *(void *)(v7 + 72) = v49;
        *(void *)(v7 + 80) = v51;
        *(unsigned char *)(v7 + 88) = v50;
        goto LABEL_5;
      }
    }
    v31[(v24 >> 6) + 8] |= 1 << v24;
    BOOL v32 = (uint64_t *)(v31[6] + 16 * v24);
    *BOOL v32 = v14;
    v32[1] = v15;
    uint64_t v33 = v31[7] + 96 * v24;
    *(void *)uint64_t v33 = v44;
    *(void *)(v33 + 8) = v52;
    *(void *)(v33 + 16) = v45;
    *(void *)(v33 + 24) = v18;
    *(void *)(v33 + 32) = v46;
    *(void *)(v33 + 40) = v19;
    *(unsigned char *)(v33 + 48) = v47;
    *(void *)(v33 + 56) = v48;
    *(void *)(v33 + 64) = v20;
    *(void *)(v33 + 72) = v49;
    *(void *)(v33 + 80) = v51;
    *(unsigned char *)(v33 + 88) = v50;
    uint64_t v34 = v31[2];
    BOOL v35 = __OFADD__(v34, 1);
    uint64_t v36 = v34 + 1;
    if (v35) {
      goto LABEL_37;
    }
    v31[2] = v36;
    swift_bridgeObjectRetain();
LABEL_5:
    a2 = v40;
    *uint64_t v40 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    unint64_t v5 = v42;
    int64_t v6 = v43;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001850DC(uint64_t a1, void *a2)
{
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v37 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v38 = a2;
  while (1)
  {
    if (v5)
    {
      uint64_t v40 = (v5 - 1) & v5;
      int64_t v41 = v6;
      unint64_t v8 = __clz(__rbit64(v5)) | (v6 << 6);
    }
    else
    {
      int64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_38;
      }
      if (v9 >= v37) {
        return swift_release();
      }
      unint64_t v10 = *(void *)(v36 + 8 * v9);
      int64_t v11 = v6 + 1;
      if (!v10)
      {
        int64_t v11 = v6 + 2;
        if (v6 + 2 >= v37) {
          return swift_release();
        }
        unint64_t v10 = *(void *)(v36 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v6 + 3;
          if (v6 + 3 >= v37) {
            return swift_release();
          }
          unint64_t v10 = *(void *)(v36 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v6 + 4;
            if (v6 + 4 >= v37) {
              return swift_release();
            }
            unint64_t v10 = *(void *)(v36 + 8 * v11);
            if (!v10)
            {
              uint64_t v12 = v6 + 5;
              if (v6 + 5 >= v37) {
                return swift_release();
              }
              unint64_t v10 = *(void *)(v36 + 8 * v12);
              if (!v10)
              {
                while (1)
                {
                  int64_t v11 = v12 + 1;
                  if (__OFADD__(v12, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v37) {
                    return swift_release();
                  }
                  unint64_t v10 = *(void *)(v36 + 8 * v11);
                  ++v12;
                  if (v10) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v6 + 5;
            }
          }
        }
      }
LABEL_23:
      uint64_t v40 = (v10 - 1) & v10;
      int64_t v41 = v11;
      unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    }
    uint64_t v13 = *(void *)(a1 + 56) + 96 * v8;
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    uint64_t v16 = *(void *)(v13 + 24);
    uint64_t v17 = *(void *)(v13 + 40);
    uint64_t v42 = *(void *)(v13 + 16);
    uint64_t v43 = *(void *)(v13 + 32);
    char v44 = *(unsigned char *)(v13 + 48);
    uint64_t v18 = *(void *)(v13 + 64);
    uint64_t v45 = *(void *)(v13 + 56);
    uint64_t v46 = *(void *)(v13 + 72);
    char v47 = *(unsigned char *)(v13 + 88);
    uint64_t v48 = *(void *)(v13 + 80);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *a2;
    uint64_t v49 = (void *)*a2;
    *a2 = 0x8000000000000000;
    unint64_t v22 = sub_100590548(v14, v15);
    uint64_t v23 = *(void *)(v20 + 16);
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    char v26 = v21;
    if (*(void *)(v20 + 24) >= v25)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v29 = v49;
        if (v21) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_10016BB88();
        unint64_t v29 = v49;
        if (v26) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_100166DFC(v25, isUniquelyReferenced_nonNull_native);
      unint64_t v27 = sub_100590548(v14, v15);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_40;
      }
      unint64_t v22 = v27;
      unint64_t v29 = v49;
      if (v26)
      {
LABEL_4:
        uint64_t v7 = v29[7] + 96 * v22;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v7 = v14;
        *(void *)(v7 + 8) = v15;
        *(void *)(v7 + 16) = v42;
        *(void *)(v7 + 24) = v16;
        *(void *)(v7 + 32) = v43;
        *(void *)(v7 + 40) = v17;
        *(unsigned char *)(v7 + 48) = v44;
        *(void *)(v7 + 56) = v45;
        *(void *)(v7 + 64) = v18;
        *(void *)(v7 + 72) = v46;
        *(void *)(v7 + 80) = v48;
        *(unsigned char *)(v7 + 88) = v47;
        goto LABEL_5;
      }
    }
    v29[(v22 >> 6) + 8] |= 1 << v22;
    char v30 = (uint64_t *)(v29[6] + 16 * v22);
    *char v30 = v14;
    v30[1] = v15;
    uint64_t v31 = v29[7] + 96 * v22;
    *(void *)uint64_t v31 = v14;
    *(void *)(v31 + 8) = v15;
    *(void *)(v31 + 16) = v42;
    *(void *)(v31 + 24) = v16;
    *(void *)(v31 + 32) = v43;
    *(void *)(v31 + 40) = v17;
    *(unsigned char *)(v31 + 48) = v44;
    *(void *)(v31 + 56) = v45;
    *(void *)(v31 + 64) = v18;
    *(void *)(v31 + 72) = v46;
    *(void *)(v31 + 80) = v48;
    *(unsigned char *)(v31 + 88) = v47;
    uint64_t v32 = v29[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_37;
    }
    v29[2] = v34;
    swift_bridgeObjectRetain();
LABEL_5:
    a2 = v38;
    *uint64_t v38 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    unint64_t v5 = v40;
    int64_t v6 = v41;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10018553C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __CFString *a3@<X5>, __SecTrust *a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, unint64_t a7)
{
  SecTrustRef v205 = a4;
  uint64_t v214 = a5;
  unint64_t v211 = a2;
  uint64_t v196 = a6;
  uint64_t v9 = type metadata accessor for KDFParams();
  __chkstk_darwin(v9 - 8);
  v195 = (char *)v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v191 = *(void *)(v11 - 8);
  uint64_t v192 = v11;
  __chkstk_darwin(v11);
  v193 = (char *)v177 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for EncryptionParams();
  uint64_t v198 = *(void *)(v13 - 8);
  uint64_t v199 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  v194 = (char *)v177 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v197 = (char *)v177 - v16;
  uint64_t v17 = type metadata accessor for Logger();
  object = *(void (***)(unint64_t, uint64_t))(v17 - 8);
  uint64_t v201 = v17;
  __chkstk_darwin(v17);
  unint64_t v202 = (unint64_t)v177 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (__SecKey *)type metadata accessor for ECIESOption();
  uint64_t v20 = (__SecKey *)*((void *)v19 - 1);
  v212 = v19;
  SecKeyRef v213 = v20;
  uint64_t v21 = __chkstk_darwin(v19);
  *(void *)&long long v207 = (char *)v177 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v208 = (unint64_t)v177 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  Class v27 = (Class)((char *)v177 - v26);
  __chkstk_darwin(v25);
  unint64_t isa = (unint64_t)v177 - v28;
  uint64_t v30 = type metadata accessor for DIPError.Code();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  v203 = (char *)v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  BOOL v35 = (char *)v177 - v34;
  uint64_t v190 = sub_100007764(&qword_1007264A0);
  uint64_t v36 = Data.init(base64Encoded:options:)();
  if (v37 >> 60 == 15) {
    goto LABEL_14;
  }
  unint64_t v38 = v37;
  uint64_t v209 = v30;
  v210 = v35;
  uint64_t v206 = v31;
  unint64_t v39 = a7;
  unint64_t v40 = (unint64_t)v35;
  switch(v37 >> 62)
  {
    case 1uLL:
      LODWORD(v41) = HIDWORD(v36) - v36;
      if (!__OFSUB__(HIDWORD(v36), v36))
      {
        uint64_t v41 = (int)v41;
LABEL_7:
        if (v41 == 65)
        {
          *(void *)&long long v218 = v36;
          *((void *)&v218 + 1) = v37;
          uint64_t v189 = v36;
          sub_1000338D4(v36, v37);
          unint64_t v45 = v211;
          sub_10002CEB0(a1, v211);
          sub_10051049C(a1, v45);
          sub_10000C5F4(a1, v45);
          unint64_t v46 = *((void *)&v218 + 1);
          uint64_t v47 = v218;
          uint64_t v48 = v209;
          if (!v214) {
            goto LABEL_18;
          }
          uint64_t v49 = v209;
          unint64_t v185 = a7;
          unint64_t v187 = v38;
          unint64_t v211 = *((void *)&v218 + 1);
          uint64_t v188 = v218;
          uint64_t v50 = enum case for ECIESOption.recipientSigningKey(_:);
          uint64_t v52 = v212;
          SecKeyRef v51 = v213;
          uint64_t v186 = *((void *)v213 + 13);
          ((void (*)(unint64_t, void, __SecKey *))v186)(isa, enum case for ECIESOption.recipientSigningKey(_:), v212);
          uint64_t v53 = v214;
          if (*(void *)(v214 + 16))
          {
            unint64_t v54 = sub_100590D20(isa);
            if (v55)
            {
              uint64_t v56 = (uint64_t *)(*(void *)(v53 + 56) + 16 * v54);
              uint64_t v57 = *v56;
              unint64_t v58 = v56[1];
              unint64_t v59 = v58 >> 62;
              unint64_t v183 = v58;
              uint64_t v184 = v57;
              sub_10002CEB0(v57, v58);
              uint64_t v60 = (SecKeyRef)((char *)v213 + 8);
              uint64_t v61 = (void (*)(unint64_t, __SecKey *))*((void *)v213 + 1);
              unint64_t v62 = isa;
              uint64_t v63 = v212;
              v61(v62, v212);
              unint64_t v40 = (unint64_t)v210;
              switch(v59)
              {
                case 1uLL:
                  LODWORD(v64) = HIDWORD(v184) - v184;
                  if (!__OFSUB__(HIDWORD(v184), v184))
                  {
                    uint64_t v64 = (int)v64;
LABEL_25:
                    uint64_t v48 = v209;
                    if (v64 == 65)
                    {
                      uint64_t v68 = v209;
                      SecKeyRef v213 = v60;
                      uint64_t v69 = v63;
                      unint64_t isa = enum case for ECIESOption.senderSigningKey(_:);
                      ((void (*)(Class, void, __SecKey *))v186)(v27, enum case for ECIESOption.senderSigningKey(_:), v69);
                      uint64_t v70 = v214;
                      if (*(void *)(v214 + 16))
                      {
                        unint64_t v71 = sub_100590D20((uint64_t)v27);
                        if (v72)
                        {
                          uint64_t v73 = (uint64_t *)(*(void *)(v70 + 56) + 16 * v71);
                          uint64_t v74 = *v73;
                          unint64_t v40 = v73[1];
                          sub_10002CEB0(*v73, v40);
                          v61((unint64_t)v27, v212);
                          Class v27 = (Class)v206;
                          switch(v40 >> 62)
                          {
                            case 1uLL:
                              LODWORD(v75) = HIDWORD(v74) - v74;
                              if (!__OFSUB__(HIDWORD(v74), v74))
                              {
                                uint64_t v75 = (int)v75;
                                goto LABEL_39;
                              }
                              __break(1u);
                              goto LABEL_99;
                            case 2uLL:
                              uint64_t v78 = *(void *)(v74 + 16);
                              uint64_t v77 = *(void *)(v74 + 24);
                              BOOL v44 = __OFSUB__(v77, v78);
                              uint64_t v75 = v77 - v78;
                              if (!v44) {
                                goto LABEL_39;
                              }
                              __break(1u);
LABEL_36:
                              sub_10000C5F4(v74, v40);
                              uint64_t v76 = v209;
                              goto LABEL_46;
                            case 3uLL:
                              goto LABEL_36;
                            default:
                              uint64_t v75 = BYTE6(v40);
LABEL_39:
                              uint64_t v76 = v209;
                              if (v75 != 65)
                              {
                                sub_10000C5F4(v74, v40);
                                goto LABEL_46;
                              }
                              uint64_t v214 = v74;
                              unint64_t v79 = v185;
                              if (!v185) {
                                goto LABEL_51;
                              }
                              v182 = (void (*)(uint64_t, __SecKey *))v61;
                              a1 = v208;
                              unint64_t v80 = v212;
                              ((void (*)(unint64_t, uint64_t, __SecKey *))v186)(v208, v50, v212);
                              if (*(void *)(v79 + 16))
                              {
                                unint64_t v81 = sub_100590D20(a1);
                                if (v82)
                                {
                                  unint64_t v83 = (uint64_t *)(*(void *)(v79 + 56) + 16 * v81);
                                  uint64_t v85 = *v83;
                                  unint64_t v84 = v83[1];
                                  sub_10002CEB0(*v83, v84);
                                  v182(a1, v212);
                                  switch(v84 >> 62)
                                  {
                                    case 1uLL:
                                      unint64_t v208 = v84;
                                      unint64_t v180 = v40;
                                      uint64_t v181 = v85;
                                      LODWORD(v86) = HIDWORD(v85) - v85;
                                      if (!__OFSUB__(HIDWORD(v85), v85))
                                      {
                                        uint64_t v86 = (int)v86;
                                        goto LABEL_59;
                                      }
                                      __break(1u);
                                      goto LABEL_126;
                                    case 2uLL:
                                      unint64_t v208 = v84;
                                      unint64_t v180 = v40;
                                      uint64_t v181 = v85;
                                      uint64_t v92 = *(void *)(v85 + 16);
                                      uint64_t v91 = *(void *)(v85 + 24);
                                      BOOL v44 = __OFSUB__(v91, v92);
                                      uint64_t v86 = v91 - v92;
                                      if (!v44) {
                                        goto LABEL_59;
                                      }
                                      __break(1u);
LABEL_56:
                                      sub_10000C5F4(v85, v84);
                                      goto LABEL_51;
                                    case 3uLL:
                                      goto LABEL_56;
                                    default:
                                      unint64_t v180 = v40;
                                      uint64_t v181 = v85;
                                      unint64_t v208 = v84;
                                      uint64_t v86 = BYTE6(v84);
LABEL_59:
                                      if (v86 != 65)
                                      {
                                        sub_10000C5F4(v181, v208);
                                        Class v27 = (Class)v206;
                                        unint64_t v40 = v180;
                                        goto LABEL_51;
                                      }
                                      uint64_t v93 = v207;
                                      unint64_t v39 = (unint64_t)v212;
                                      ((void (*)(void, unint64_t, __SecKey *))v186)(v207, isa, v212);
                                      if (*(void *)(v185 + 16))
                                      {
                                        unint64_t v94 = sub_100590D20(v93);
                                        if (v95)
                                        {
                                          BOOL v96 = (uint64_t *)(*(void *)(v185 + 56) + 16 * v94);
                                          uint64_t v97 = *v96;
                                          unint64_t v98 = v96[1];
                                          a3 = (__CFString *)(v98 >> 62);
                                          unint64_t v185 = v98;
                                          uint64_t v186 = v97;
                                          sub_10002CEB0(v97, v98);
                                          v182(v93, (__SecKey *)v39);
                                          switch((unint64_t)a3)
                                          {
                                            case 1uLL:
                                              goto LABEL_68;
                                            case 2uLL:
                                              uint64_t v101 = *(void *)(v186 + 16);
                                              uint64_t v100 = *(void *)(v186 + 24);
                                              BOOL v44 = __OFSUB__(v100, v101);
                                              uint64_t v99 = v100 - v101;
                                              if (!v44) {
                                                goto LABEL_71;
                                              }
                                              goto LABEL_131;
                                            case 3uLL:
                                              goto LABEL_84;
                                            default:
                                              uint64_t v99 = BYTE6(v185);
                                              goto LABEL_71;
                                          }
                                        }
                                      }
                                      v182(v93, (__SecKey *)v39);
                                      break;
                                  }
                                  goto LABEL_85;
                                }
                                uint64_t v87 = a1;
                                uint64_t v88 = v212;
                              }
                              else
                              {
                                uint64_t v87 = a1;
                                uint64_t v88 = v80;
                              }
                              v182(v87, v88);
LABEL_51:
                              (*((void (**)(char *, void, uint64_t))v27 + 13))(v210, enum case for DIPError.Code.internalError(_:), v209);
                              sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
                              type metadata accessor for DIPError();
                              sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                              swift_allocError();
                              DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
                              swift_willThrow();
                              uint64_t v89 = v214;
                              unint64_t v90 = v40;
                              break;
                          }
                          goto LABEL_52;
                        }
                        v61((unint64_t)v27, v212);
                        Class v27 = (Class)v206;
                        uint64_t v76 = v209;
                      }
                      else
                      {
                        v61((unint64_t)v27, v69);
                        Class v27 = (Class)v206;
                        uint64_t v76 = v68;
                      }
LABEL_46:
                      (*((void (**)(char *, void, uint64_t))v27 + 13))(v210, enum case for DIPError.Code.internalError(_:), v76);
                      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
                      type metadata accessor for DIPError();
                      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                      swift_allocError();
                      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
                      swift_willThrow();
LABEL_47:
                      sub_10000C5F4(v184, v183);
                      sub_10000C5F4(v188, v211);
                      return sub_10000C5E0(v189, v187);
                    }
                    sub_10000C5F4(v184, v183);
                    unint64_t v38 = v187;
                    uint64_t v47 = v188;
                    unint64_t v46 = v211;
LABEL_18:
                    (*(void (**)(unint64_t, void, uint64_t))(v206 + 104))(v40, enum case for DIPError.Code.internalError(_:), v48);
                    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
                    type metadata accessor for DIPError();
                    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                    swift_allocError();
                    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
                    swift_willThrow();
                    sub_10000C5F4(v47, v46);
                    return sub_10000C5E0(v189, v38);
                  }
                  __break(1u);
                  break;
                case 2uLL:
                  uint64_t v67 = *(void *)(v184 + 16);
                  uint64_t v66 = *(void *)(v184 + 24);
                  BOOL v44 = __OFSUB__(v66, v67);
                  uint64_t v64 = v66 - v67;
                  if (!v44) {
                    goto LABEL_25;
                  }
                  __break(1u);
LABEL_22:
                  sub_10000C5F4(v184, v183);
                  unint64_t v38 = v187;
                  uint64_t v47 = v188;
                  unint64_t v46 = v211;
                  uint64_t v48 = v209;
                  goto LABEL_18;
                case 3uLL:
                  goto LABEL_22;
                default:
                  uint64_t v64 = BYTE6(v183);
                  goto LABEL_25;
              }
              goto LABEL_89;
            }
            (*((void (**)(unint64_t, __SecKey *))v213 + 1))(isa, v212);
            unint64_t v38 = v187;
            uint64_t v47 = v188;
            unint64_t v46 = v211;
            uint64_t v48 = v209;
          }
          else
          {
            (*((void (**)(unint64_t, __SecKey *))v51 + 1))(isa, v52);
            unint64_t v38 = v187;
            uint64_t v47 = v188;
            unint64_t v46 = v211;
            uint64_t v48 = v49;
          }
          unint64_t v40 = (unint64_t)v210;
          goto LABEL_18;
        }
LABEL_13:
        sub_10000C5E0(v36, v37);
        uint64_t v31 = v206;
        uint64_t v30 = v209;
LABEL_14:
        (*(void (**)(char *, void, uint64_t))(v31 + 104))(v35, enum case for DIPError.Code.internalError(_:), v30);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        return swift_willThrow();
      }
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      LODWORD(v99) = HIDWORD(v186) - v186;
      if (__OFSUB__(HIDWORD(v186), v186))
      {
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        swift_bridgeObjectRetain();
        uint64_t v103 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v103) {
          goto LABEL_76;
        }
LABEL_133:
        swift_bridgeObjectRelease();
        SecKeyRef v213 = 0;
        goto LABEL_134;
      }
      uint64_t v99 = (int)v99;
LABEL_71:
      if (v99 != 65)
      {
LABEL_84:
        sub_10000C5F4(v186, v185);
LABEL_85:
        (*(void (**)(char *, void, uint64_t))(v206 + 104))(v210, enum case for DIPError.Code.internalError(_:), v209);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        goto LABEL_86;
      }
      CFArrayRef v102 = SecTrustCopyCertificateChain(v205);
      if (!v102
        || (a3 = (__CFString *)v102,
            *(void *)&long long v218 = 0,
            type metadata accessor for SecCertificate(0),
            static Array._conditionallyBridgeFromObjectiveC(_:result:)(),
            a3,
            (unint64_t v39 = v218) == 0))
      {
        (*(void (**)(char *, void, uint64_t))(v206 + 104))(v210, enum case for DIPError.Code.secTrustGetCertificateFailure(_:), v209);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        sub_10000C5F4(v186, v185);
LABEL_86:
        sub_10000C5F4(v181, v208);
        uint64_t v89 = v214;
        unint64_t v90 = v180;
LABEL_52:
        sub_10000C5F4(v89, v90);
        goto LABEL_47;
      }
      long long v207 = xmmword_100615040;
      long long v218 = xmmword_100615040;
      if (v39 >> 62) {
        goto LABEL_132;
      }
      uint64_t v103 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v103) {
        goto LABEL_133;
      }
LABEL_76:
      if (v103 < 1)
      {
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
        goto LABEL_140;
      }
      SecKeyRef v213 = 0;
      uint64_t v104 = 0;
      do
      {
        if ((v39 & 0xC000000000000001) != 0) {
          v109 = (__SecKey *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          v109 = (__SecKey *)*(id *)(v39 + 8 * v104 + 32);
        }
        uint64_t v110 = v109;
        if (!v213)
        {
          v111 = v109;
          SecKeyRef v213 = v110;
        }
        ++v104;
        CFDataRef v105 = SecCertificateCopyData(v110);
        uint64_t v106 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v108 = v107;

        Data.append(_:)();
        sub_10000C5F4(v106, v108);
      }
      while (v103 != v104);
LABEL_89:
      swift_bridgeObjectRelease();
      v212 = v213;
      v182 = (void (*)(uint64_t, __SecKey *))copyPublicKeyDataFromCertificate(_:)();
      SecTrustRef v205 = v112;
      if ((unint64_t)v112 >> 60 == 15)
      {

LABEL_134:
        (*(void (**)(char *, void, uint64_t))(v206 + 104))(v210, enum case for DIPError.Code.internalError(_:), v209);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        sub_10000C5F4(v188, v211);
        sub_10000C5F4(v181, v208);
        sub_10000C5F4(v186, v185);
        sub_10000C5F4(v214, v180);
        sub_10000C5F4(v184, v183);
        sub_10000C5E0(v189, v187);

        return sub_10000C5F4(v218, *((unint64_t *)&v218 + 1));
      }
      CFErrorRef error = 0;
      v204 = (__SecKey *)*((void *)v204 + 2);
      SecKeyRef v213 = SecKeyCopyPublicKey(v204);
      if (v213)
      {
        CFDataRef v113 = SecKeyCopyExternalRepresentation(v213, &error);
        if (v113)
        {
          CFDataRef v114 = v113;
          uint64_t v115 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v117 = v116;

          long long v216 = v207;
          Data.append(_:)();
          uint64_t v178 = v115;
          unint64_t v179 = v117;
          Data.append(_:)();
          Data.append(_:)();
          long long v215 = v207;
          Data.append(_:)();
          Data.append(_:)();
          Data.append(_:)();
          sub_100007764(&qword_1007264D0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100610730;
          unint64_t v40 = *((void *)&v215 + 1);
          Class v27 = (Class)v215;
          *(void *)(inited + 64) = &type metadata for Data;
          *(void *)(inited + 32) = kSecKeyKeyExchangeParameterSharedInfo;
          *(_OWORD *)(inited + 40) = __PAIR128__(v40, (unint64_t)v27);
          a3 = (id)kSecKeyKeyExchangeParameterSharedInfo;
          sub_10002CEB0((uint64_t)v27, v40);
          *(void *)&long long v207 = sub_10015D870(inited);
          uint64_t v119 = swift_initStackObject();
          *(_OWORD *)(v119 + 16) = xmmword_100614990;
          unint64_t isa = *((void *)&v216 + 1);
          a1 = v216;
          *(void *)(v119 + 64) = &type metadata for Data;
          *(void *)(v119 + 32) = a3;
          *(_OWORD *)(v119 + 40) = __PAIR128__(isa, a1);
          unint64_t v39 = kSecKeyEncryptionParameterRecryptCertificate;
          if (!kSecKeyEncryptionParameterRecryptCertificate)
          {
LABEL_141:
            v174 = a3;
            sub_10002CEB0(a1, isa);

            __break(1u);
            goto LABEL_142;
          }
          uint64_t v120 = v119;
          unint64_t v40 = *((void *)&v218 + 1);
          Class v27 = (Class)v218;
          *(void *)(v119 + 104) = &type metadata for Data;
          *(void *)(v119 + 72) = v39;
          *(_OWORD *)(v119 + 80) = __PAIR128__(v40, (unint64_t)v27);
          uint64_t v121 = (void *)kSecKeyEncryptionParameterRecryptParameters;
          if (!kSecKeyEncryptionParameterRecryptParameters)
          {
LABEL_142:
            v175 = a3;
            sub_10002CEB0(a1, isa);
            id v176 = (id)v39;
            sub_10002CEB0((uint64_t)v27, v40);

            __break(1u);
            goto LABEL_143;
          }
          *(void *)(v119 + 112) = kSecKeyEncryptionParameterRecryptParameters;
          *(void *)(v119 + 144) = sub_100007764(&qword_1007264D8);
          *(void *)(v120 + 120) = v207;
          uint64_t v122 = a3;
          sub_10002CEB0(a1, isa);
          id v123 = v121;
          id v124 = (id)v39;
          sub_10002CEB0((uint64_t)v27, v40);
          sub_10015D870(v120);
          uint64_t v125 = (void *)static DIPFeatures.sharedInstance.getter();
          if (v125
            && (unsigned __int8 v126 = [v125 isEnvNonQA], swift_unknownObjectRelease(), (v126 & 1) == 0))
          {
            uint64_t v127 = (unsigned int *)&enum case for DIPError.Code.sepRewrapInternalError(_:);
          }
          else
          {
            uint64_t v127 = (unsigned int *)&enum case for DIPError.Code.sepRewrapError(_:);
          }
          unint64_t v40 = *(void *)(v206 + 104);
          ((void (*)(char *, void, uint64_t))v40)(v203, *v127, v209);
          unint64_t isa = (unint64_t)Data._bridgeToObjectiveC()().super.isa;
          sub_100025C28(0, &qword_1007264E0);
          sub_1001D5EBC();
          Class v27 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          DecryptedDataWithParameters = (void *)SecKeyCreateDecryptedDataWithParameters();

          if (DecryptedDataWithParameters)
          {
            v204 = (__SecKey *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
            *(void *)&long long v207 = v130;

            defaultLogger()();
            a3 = (__CFString *)Logger.logObject.getter();
            os_log_type_t v131 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled((os_log_t)a3, v131))
            {
              v132 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v132 = 0;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)a3, v131, "rewrap with SEP key", v132, 2u);
              swift_slowDealloc();
            }

            object[1](v202, v201);
            v133._countAndFlagsBits = 0xD000000000000013;
            v133._object = (void *)0x800000010063D7B0;
            v134._countAndFlagsBits = 0x6239386161303431;
            v134._object = (void *)0xE800000000000000;
            logMilestone(tag:description:)(v134, v133);
            unint64_t v39 = (unint64_t)v207 >> 62;
            switch((unint64_t)v207 >> 62)
            {
              case 1uLL:
                LODWORD(v135) = HIDWORD(v204) - v204;
                if (__OFSUB__(HIDWORD(v204), v204)) {
                  goto LABEL_137;
                }
                uint64_t v135 = (int)v135;
LABEL_111:
                if (v135 >= 66)
                {
                  uint64_t v201 = Data.subdata(in:)();
                  unint64_t v202 = v140;
                  if (v39)
                  {
                    if (v39 == 1)
                    {
                      if (!__OFSUB__(HIDWORD(v204), v204))
                      {
                        uint64_t v141 = HIDWORD(v204) - (int)v204;
                        goto LABEL_119;
                      }
                      goto LABEL_139;
                    }
                    uint64_t v147 = *((void *)v204 + 2);
                    uint64_t v146 = *((void *)v204 + 3);
                    uint64_t v141 = v146 - v147;
                    if (__OFSUB__(v146, v147))
                    {
LABEL_140:
                      __break(1u);
                      goto LABEL_141;
                    }
                  }
                  else
                  {
                    uint64_t v141 = BYTE6(v207);
                  }
LABEL_119:
                  if (v141 >= 65)
                  {
                    uint64_t v148 = Data.subdata(in:)();
                    unint64_t v150 = v149;
                    v177[3] = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
                    sub_10000C5F4(v148, v150);
                    Class v151 = Data._bridgeToObjectiveC()().super.isa;
                    id v152 = (id)DigestSha256();

                    if (v152)
                    {
                      uint64_t v153 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                      unint64_t v155 = v154;

                      Swift::String v156 = Data.base64EncodedString(options:)(0);
                      v177[2] = v156._countAndFlagsBits;
                      object = (void (**)(unint64_t, uint64_t))v156._object;
                      sub_10000C5F4(v153, v155);
                      Class v157 = Data._bridgeToObjectiveC()().super.isa;
                      id v158 = (id)DigestSha256();

                      if (v158)
                      {
                        uint64_t v159 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                        unint64_t v161 = v160;

                        v177[1] = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
                        sub_10000C5F4(v159, v161);
                        Class v162 = Data._bridgeToObjectiveC()().super.isa;
                        id v163 = (id)DigestSha256();

                        if (v163)
                        {
                          uint64_t v164 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                          unint64_t v166 = v165;

                          Data.base64EncodedString(options:)(0);
                          sub_10000C5F4(v164, v166);
                          (*(void (**)(char *, void, uint64_t))(v191 + 104))(v193, enum case for EncryptionParamsAlgorithmIdentifier.EC_v3(_:), v192);
                          Data.base64EncodedString(options:)(0);
                          KDFParams.init(senderSigningKeyFingerprint:recipientSigningKeyFingerprint:conversationToken:sharedIdentifierNames:)();
                          v167 = v197;
                          EncryptionParams.init(alg:sender:recipientFingerprint:kdfParams:)();
                          uint64_t v169 = v198;
                          uint64_t v168 = v199;
                          (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v194, v167, v199);
                          sub_1001D5D7C();
                          sub_1001D5E1C();
                          EncryptedDataContainer.init(type:data:params:)();

                          v170 = v212;
                          sub_10000C5F4(v188, v211);
                          sub_10000C5E0((uint64_t)v182, (unint64_t)v205);
                          sub_10000C5F4(v181, v208);
                          sub_10000C5F4(v186, v185);
                          sub_10000C5F4(v201, v202);
                          sub_10000C5F4((uint64_t)v204, v207);
                          sub_10000C5F4(v178, v179);
                          sub_10000C5F4(v214, v180);
                          sub_10000C5F4(v184, v183);
                          sub_10000C5E0(v189, v187);

                          (*(void (**)(char *, uint64_t))(v169 + 8))(v167, v168);
                          (*(void (**)(char *, uint64_t))(v206 + 8))(v203, v209);
                          sub_10000C5F4(v215, *((unint64_t *)&v215 + 1));
                          sub_10000C5F4(v216, *((unint64_t *)&v216 + 1));
                          return sub_10000C5F4(v218, *((unint64_t *)&v218 + 1));
                        }
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v171 = v206;
                        uint64_t v172 = v209;
                        ((void (*)(char *, void, uint64_t))v40)(v210, enum case for DIPError.Code.internalError(_:), v209);
                        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
                        type metadata accessor for DIPError();
                        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                        swift_allocError();
                      }
                      else
                      {
LABEL_126:
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v171 = v206;
                        uint64_t v172 = v209;
                        ((void (*)(char *, void, uint64_t))v40)(v210, enum case for DIPError.Code.internalError(_:), v209);
                        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
                        type metadata accessor for DIPError();
                        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                        swift_allocError();
                      }
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v171 = v206;
                      uint64_t v172 = v209;
                      ((void (*)(char *, void, uint64_t))v40)(v210, enum case for DIPError.Code.internalError(_:), v209);
                      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
                      type metadata accessor for DIPError();
                      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                      swift_allocError();
                    }
                    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
                    swift_willThrow();

                    v173 = v212;
                    sub_10000C5F4(v188, v211);
                    sub_10000C5E0((uint64_t)v182, (unint64_t)v205);
                    sub_10000C5F4(v181, v208);
                    sub_10000C5F4(v186, v185);
                    sub_10000C5F4(v201, v202);
                    sub_10000C5F4((uint64_t)v204, v207);
                    sub_10000C5F4(v178, v179);
                    sub_10000C5F4(v214, v180);
                    sub_10000C5F4(v184, v183);
                    sub_10000C5E0(v189, v187);

                    (*(void (**)(char *, uint64_t))(v171 + 8))(v203, v172);
                    break;
                  }
LABEL_143:
                  __break(1u);
                  JUMPOUT(0x100187734);
                }
LABEL_116:
                uint64_t v142 = v206;
                uint64_t v143 = v209;
                v144 = v203;
                (*(void (**)(char *, char *, uint64_t))(v206 + 16))(v210, v203, v209);
                sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
                type metadata accessor for DIPError();
                sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                swift_allocError();
                DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
                swift_willThrow();

                v145 = v212;
                sub_10000C5F4(v188, v211);
                sub_10000C5E0((uint64_t)v182, (unint64_t)v205);
                sub_10000C5F4(v181, v208);
                sub_10000C5F4(v186, v185);
                sub_10000C5F4((uint64_t)v204, v207);
                sub_10000C5F4(v178, v179);
                sub_10000C5F4(v214, v180);
                sub_10000C5F4(v184, v183);
                sub_10000C5E0(v189, v187);

                (*(void (**)(char *, uint64_t))(v142 + 8))(v144, v143);
                break;
              case 2uLL:
                uint64_t v139 = *((void *)v204 + 2);
                uint64_t v138 = *((void *)v204 + 3);
                BOOL v44 = __OFSUB__(v138, v139);
                uint64_t v135 = v138 - v139;
                if (!v44) {
                  goto LABEL_111;
                }
                goto LABEL_138;
              case 3uLL:
                goto LABEL_116;
              default:
                uint64_t v135 = BYTE6(v207);
                goto LABEL_111;
            }
          }
          else
          {
            v136 = v203;
            errorFromCFError(_:_:_:)();
            swift_willThrow();

            v137 = v212;
            sub_10000C5F4(v188, v211);
            sub_10000C5E0((uint64_t)v182, (unint64_t)v205);
            sub_10000C5F4(v181, v208);
            sub_10000C5F4(v186, v185);
            sub_10000C5F4(v178, v179);
            sub_10000C5F4(v214, v180);
            sub_10000C5F4(v184, v183);
            sub_10000C5E0(v189, v187);

            (*(void (**)(char *, uint64_t))(v206 + 8))(v136, v209);
          }
          sub_10000C5F4(v215, *((unint64_t *)&v215 + 1));
          sub_10000C5F4(v216, *((unint64_t *)&v216 + 1));
          return sub_10000C5F4(v218, *((unint64_t *)&v218 + 1));
        }
LABEL_99:
      }
      (*(void (**)(char *, void, uint64_t))(v206 + 104))(v210, enum case for DIPError.Code.internalError(_:), v209);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      uint64_t v128 = v212;

      sub_10000C5F4(v188, v211);
      sub_10000C5E0((uint64_t)v182, (unint64_t)v205);
      sub_10000C5F4(v181, v208);
      sub_10000C5F4(v186, v185);
      sub_10000C5F4(v214, v180);
      sub_10000C5F4(v184, v183);
      sub_10000C5E0(v189, v187);

      return sub_10000C5F4(v218, *((unint64_t *)&v218 + 1));
    case 2uLL:
      uint64_t v43 = *(void *)(v36 + 16);
      uint64_t v42 = *(void *)(v36 + 24);
      BOOL v44 = __OFSUB__(v42, v43);
      uint64_t v41 = v42 - v43;
      if (!v44) {
        goto LABEL_7;
      }
      goto LABEL_67;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v41 = BYTE6(v37);
      goto LABEL_7;
  }
}

uint64_t sub_100187794@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for DIPKeyAlgorithm.ECC256(_:);
  uint64_t v3 = type metadata accessor for DIPKeyAlgorithm();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

unint64_t sub_100187808@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001C0F78(*a1);
  *a2 = result;
  return result;
}

void sub_100187834(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100187840(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v68 = a5;
  uint64_t v76 = a6;
  int v67 = a4;
  uint64_t v69 = a2;
  uint64_t v66 = a1;
  uint64_t v63 = *(void *)a3;
  uint64_t v62 = *(void *)(a3 + 8);
  uint64_t v61 = *(void *)(a3 + 16);
  uint64_t v60 = *(void *)(a3 + 24);
  uint64_t v59 = *(void *)(a3 + 32);
  uint64_t v58 = *(void *)(a3 + 40);
  char v8 = *(unsigned char *)(a3 + 48);
  uint64_t v57 = *(void *)(a3 + 56);
  uint64_t v56 = *(void *)(a3 + 64);
  uint64_t v55 = *(void *)(a3 + 72);
  uint64_t v54 = *(void *)(a3 + 80);
  char v9 = *(unsigned char *)(a3 + 88);
  uint64_t v10 = sub_100007764(&qword_100726408);
  __chkstk_darwin(v10 - 8);
  char v65 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DIPError.Code();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v6 + 169) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  uint64_t v16 = v6 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
  uint64_t v17 = sub_100007764((uint64_t *)&unk_100726030);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v64 = v16;
  uint64_t v53 = v19;
  uint64_t v52 = v18 + 56;
  v19((char *)v16, 1, 1, v17);
  long long v20 = *(_OWORD *)(a3 + 48);
  long long v70 = *(_OWORD *)(a3 + 32);
  long long v71 = v20;
  long long v72 = *(_OWORD *)(a3 + 64);
  uint64_t v73 = *(void *)(a3 + 80);
  sub_1000BEA14((uint64_t)&v72 + 8, (uint64_t)v74, (uint64_t *)&unk_100722630);
  sub_1000BEA14((uint64_t)v74, (uint64_t)&v75, (uint64_t *)&unk_100722630);
  if (*((void *)&v75 + 1))
  {
    int v51 = v9 & 1;
    uint64_t v50 = v8 & 1;
    long long v21 = v70;
    *(_OWORD *)(v6 + 40) = v70;
    sub_100007764(&qword_100730CD0);
    uint64_t v22 = swift_allocObject();
    long long v23 = v75;
    *(_OWORD *)(v22 + 16) = xmmword_100610730;
    *(_OWORD *)(v22 + 32) = v23;
    *(_OWORD *)(v6 + 56) = v21;
    *(void *)(v6 + 72) = v22;
    *(void *)(v6 + 80) = 0;
    uint64_t v24 = *(void *)(v6 + 96);
    uint64_t v25 = *(void *)(v6 + 104);
    uint64_t v49 = *(void *)(v6 + 128);
    uint64_t v48 = *(void *)(v6 + 136);
    uint64_t v47 = *(void *)(v6 + 144);
    uint64_t v46 = *(void *)(v6 + 152);
    long long v45 = *(_OWORD *)(v6 + 160);
    uint64_t v26 = v63;
    *(void *)(v6 + 88) = 0;
    *(void *)(v6 + 96) = v26;
    uint64_t v27 = v61;
    *(void *)(v6 + 104) = v62;
    *(void *)(v6 + 112) = v27;
    uint64_t v28 = v59;
    *(void *)(v6 + 120) = v60;
    *(void *)(v6 + 128) = v28;
    uint64_t v29 = v50;
    *(void *)(v6 + 136) = v58;
    *(void *)(v6 + 144) = v29;
    uint64_t v30 = v56;
    *(void *)(v6 + 152) = v57;
    *(void *)(v6 + 160) = v30;
    uint64_t v31 = v54;
    *(void *)(v6 + 168) = v55;
    *(void *)(v6 + 176) = v31;
    *(unsigned char *)(v6 + 184) = v51;
    swift_bridgeObjectRetain_n();
    sub_1001061B8((uint64_t)v74);
    sub_1001D7BDC(v24, v25);
    uint64_t v32 = v69;
    *(void *)(v6 + 192) = v66;
    *(void *)(v6 + 200) = v32;
    swift_bridgeObjectRelease();
    uint64_t v33 = (uint64_t)v65;
    v53(v65, 1, 1, v17);
    uint64_t v34 = v64;
    swift_beginAccess();
    sub_1001D9214(v33, v34, &qword_100726408);
    swift_endAccess();
    *(void *)(v6 + 208) = 0;
    *(void *)(v6 + 216) = 0;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v6 + 18) = v67 & 1;
    *(_WORD *)(v6 + 16) = 0;
    *(_WORD *)(v6 + 19) = 0;
    *(unsigned char *)(v6 + 21) = 0;
    uint64_t v35 = v76;
    *(void *)(v6 + 24) = v68;
    *(void *)(v6 + 32) = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DIPError.Code.unexpectedDaemonState(_:), v12);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v36 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v37 = (*(unsigned __int8 *)(*(void *)v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v36 + 80);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_100610730;
    unint64_t v39 = v38 + v37;
    unint64_t v40 = v39 + v36[14];
    uint64_t v41 = enum case for DIPError.PropertyKey.attributeID(_:);
    uint64_t v42 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104))(v39, v41, v42);
    long long v43 = v70;
    *(void *)(v40 + 24) = &type metadata for String;
    *(_OWORD *)unint64_t v40 = v43;
    swift_bridgeObjectRetain();
    sub_1001D7C4C(a3);
    sub_10015C504(v38);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1001D7BDC(*(void *)(v6 + 96), *(void *)(v6 + 104));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v6 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue, &qword_100726408);
    type metadata accessor for SubmittedAttributeWrapper(0);
    swift_deallocPartialClassInstance();
  }
  return v6;
}

uint64_t sub_100187F88(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v38 = a8;
  uint64_t v37 = a7;
  int v35 = a4;
  int v36 = a6;
  int v33 = a10;
  int v34 = a5;
  int v32 = a9;
  uint64_t v14 = sub_100007764(&qword_100726408);
  __chkstk_darwin(v14 - 8);
  uint64_t v31 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v10 + 169) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  uint64_t v16 = v10 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
  uint64_t v30 = v10 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
  uint64_t v17 = sub_100007764((uint64_t *)&unk_100726030);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v29 = v18 + 56;
  v28(v16, 1, 1, v17);
  *(void *)(v10 + 40) = a1;
  *(void *)(v10 + 48) = a2;
  *(void *)(v10 + 56) = a1;
  *(void *)(v10 + 64) = a2;
  *(void *)(v10 + 80) = 0;
  *(void *)(v10 + 88) = 0;
  *(void *)(v10 + 72) = a3;
  uint64_t v19 = *(void *)(v10 + 96);
  uint64_t v20 = *(void *)(v10 + 104);
  uint64_t v26 = *(void *)(v10 + 152);
  uint64_t v27 = v19;
  long long v25 = *(_OWORD *)(v10 + 160);
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 169) = 0u;
  swift_bridgeObjectRetain();
  sub_1001D7BDC(v27, v20);
  *(void *)(v10 + 192) = 0;
  *(void *)(v10 + 200) = 0;
  swift_bridgeObjectRelease();
  uint64_t v21 = (uint64_t)v31;
  v28((uint64_t)v31, 1, 1, v17);
  uint64_t v22 = v30;
  swift_beginAccess();
  sub_1001D9214(v21, v22, &qword_100726408);
  swift_endAccess();
  *(void *)(v10 + 208) = 0;
  *(void *)(v10 + 216) = 0;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v10 + 17) = 1;
  *(unsigned char *)(v10 + 18) = v34;
  *(unsigned char *)(v10 + 16) = v35;
  *(unsigned char *)(v10 + 19) = v32;
  *(unsigned char *)(v10 + 20) = v33;
  *(unsigned char *)(v10 + 21) = v36;
  uint64_t v23 = v38;
  *(void *)(v10 + 24) = v37;
  *(void *)(v10 + 32) = v23;
  return v10;
}

uint64_t sub_1001881E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v32 = a3;
  uint64_t v10 = sub_100007764(&qword_100726408);
  __chkstk_darwin(v10 - 8);
  uint64_t v29 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v7 + 169) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  uint64_t v12 = v7 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
  uint64_t v28 = v7 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
  uint64_t v13 = sub_100007764((uint64_t *)&unk_100726030);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v27(v12, 1, 1, v13);
  *(void *)(v7 + 40) = a1;
  *(void *)(v7 + 48) = a2;
  *(void *)(v7 + 56) = a1;
  *(void *)(v7 + 64) = a2;
  *(void *)(v7 + 80) = 0;
  *(void *)(v7 + 88) = 0;
  *(void *)(v7 + 72) = _swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(v7 + 96);
  uint64_t v25 = *(void *)(v7 + 104);
  uint64_t v26 = v15;
  uint64_t v16 = *(void *)(v7 + 112);
  uint64_t v23 = *(void *)(v7 + 144);
  uint64_t v24 = v16;
  long long v22 = *(_OWORD *)(v7 + 160);
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 169) = 0u;
  swift_bridgeObjectRetain();
  sub_1001D7BDC(v26, v25);
  uint64_t v17 = v31;
  *(void *)(v7 + 192) = v30;
  *(void *)(v7 + 200) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = (uint64_t)v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v29, v32, v13);
  v27(v18, 0, 1, v13);
  uint64_t v19 = v28;
  swift_beginAccess();
  sub_1001D9214(v18, v19, &qword_100726408);
  swift_endAccess();
  uint64_t v20 = v34;
  *(void *)(v7 + 208) = v33;
  *(void *)(v7 + 216) = v20;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v7 + 16) = 1;
  *(_WORD *)(v7 + 20) = 0;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  return v7;
}

void sub_100188458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v56 = a1;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v66 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for String.Encoding();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v55 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v5 + 16) & 1) != 0
    || (*(unsigned char *)(v5 + 18) & 1) != 0
    || (*(unsigned char *)(v5 + 21) & 1) != 0
    || *(unsigned char *)(v5 + 19) == 1)
  {
    sub_1001C0F88();
    if (v3) {
      return;
    }
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    uint64_t v54 = a2;
    uint64_t v52 = v9;
    *(void *)(v5 + 80) = v13;
    *(void *)(v5 + 88) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v54 = a2;
    uint64_t v52 = v9;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v51 = v10;
  uint64_t v17 = *(void *)(v5 + 40);
  uint64_t v18 = *(void *)(v5 + 48);
  uint64_t v19 = *(void **)(v5 + 72);
  uint64_t v20 = v19[2];
  uint64_t v53 = v7;
  *(void *)&long long v50 = v11;
  if (v20)
  {
    uint64_t v22 = v19[4];
    uint64_t v21 = v19[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v21 = 0;
  }
  uint64_t v59 = v17;
  uint64_t v60 = v18;
  char v61 = 0;
  uint64_t v62 = v15;
  uint64_t v63 = v16;
  uint64_t v64 = v22;
  uint64_t v65 = v21;
  swift_bridgeObjectRetain();
  unint64_t v23 = sub_1005086E4();
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v44 = v22;
    uint64_t v48 = v18;
    uint64_t v49 = v16;
    uint64_t v45 = v17;
    uint64_t v46 = v15;
    uint64_t v47 = v21;
    if (v24 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v66 + 104))(v52, enum case for DIPError.Code.unexpectedDeviceState(_:), v53);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    else
    {
      unint64_t v57 = v23;
      unint64_t v58 = v24;
      if (v54)
      {
        uint64_t v25 = v55;
        static String.Encoding.utf8.getter();
        uint64_t v26 = String.data(using:allowLossyConversion:)();
        unint64_t v28 = v27;
        (*(void (**)(char *, uint64_t))(v50 + 8))(v25, v51);
        if (v28 >> 60 != 15)
        {
          sub_10002CEB0(v26, v28);
          sub_10051049C(v26, v28);
          sub_10000C5E0(v26, v28);
          sub_10000C5E0(v26, v28);
        }
      }
      uint64_t v30 = v57;
      unint64_t v29 = v58;
      sub_10002CEB0(v57, v58);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000C5F4(v30, v29);
      id v32 = (id)DigestSha256();

      uint64_t v33 = v53;
      uint64_t v34 = v48;
      if (v32)
      {
        uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;

        Swift::String v38 = Data.base16EncodedString()();
        sub_10000C5F4(v35, v37);
        sub_10000C5F4(v30, v29);
        *(Swift::String *)(v5 + 192) = v38;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v39 = *(void *)(v5 + 96);
        uint64_t v66 = *(void *)(v5 + 104);
        uint64_t v55 = *(char **)(v5 + 128);
        uint64_t v40 = *(void *)(v5 + 136);
        uint64_t v52 = *(char **)(v5 + 144);
        uint64_t v53 = v40;
        uint64_t v51 = *(void *)(v5 + 152);
        long long v50 = *(_OWORD *)(v5 + 160);
        *(Swift::String *)(v5 + 96) = v38;
        uint64_t v41 = v54;
        *(void *)(v5 + 112) = v56;
        *(void *)(v5 + 120) = v41;
        *(void *)(v5 + 128) = v45;
        *(void *)(v5 + 136) = v34;
        uint64_t v42 = v46;
        *(void *)(v5 + 144) = 0;
        *(void *)(v5 + 152) = v42;
        uint64_t v43 = v44;
        *(void *)(v5 + 160) = v49;
        *(void *)(v5 + 168) = v43;
        *(void *)(v5 + 176) = v47;
        *(unsigned char *)(v5 + 184) = 0;
        swift_bridgeObjectRetain();
        sub_1001D7BDC(v39, v66);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v66 + 104))(v52, enum case for DIPError.Code.unexpectedDeviceState(_:), v33);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        sub_10000C5F4(v57, v58);
      }
    }
  }
}

uint64_t sub_100188B20(void *a1)
{
  id v86 = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v81 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  char v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v80 = (char *)&v58 - v10;
  uint64_t v11 = sub_100007764(&qword_100726408);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v82 = (char *)&v58 - v15;
  uint64_t v84 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v85 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100007764(&qword_100726488);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  object = v1[12]._object;
  if (object && (uint64_t v91 = (uint64_t)v1[6]._object) != 0)
  {
    uint64_t v62 = v22;
    uint64_t v63 = v6;
    uint64_t v64 = v9;
    uint64_t v65 = v14;
    long long v70 = (char *)&v58 - v20;
    uint64_t v66 = v21;
    uint64_t v67 = v19;
    uint64_t v59 = v3;
    uint64_t v60 = v2;
    char v61 = v5;
    uint64_t countAndFlagsBits = v1[12]._countAndFlagsBits;
    uint64_t v72 = v1[6]._countAndFlagsBits;
    uint64_t v25 = v1[7]._countAndFlagsBits;
    unint64_t v24 = v1[7]._object;
    uint64_t v26 = v1;
    uint64_t v87 = v1[8]._countAndFlagsBits;
    uint64_t v88 = v1[8]._object;
    unint64_t v27 = v1[9]._object;
    uint64_t v89 = v1[9]._countAndFlagsBits;
    uint64_t v28 = v1[10]._countAndFlagsBits;
    unint64_t v29 = v26[10]._object;
    uint64_t v30 = v26[11]._countAndFlagsBits;
    int object_low = LOBYTE(v26[11]._object);
    uint64_t v69 = type metadata accessor for DIPECIESSessionV3SecKey();
    uint64_t v71 = swift_allocObject();
    swift_bridgeObjectRetain();
    int v73 = object_low;
    uint64_t v74 = v30;
    long long v75 = v29;
    uint64_t v32 = v72;
    uint64_t v76 = v28;
    uint64_t v77 = v25;
    uint64_t v78 = v24;
    unint64_t v79 = v27;
    sub_1001D8008(v72, v91);
    uint64_t v33 = v90;
    uint64_t v34 = DIPECIESSessionV3SecKey.init(_:)();
    if (v33)
    {
      sub_1001D7BDC(v32, v91);
      return swift_bridgeObjectRelease();
    }
    else
    {
      char v36 = v73 & 1;
      uint64_t v37 = v34;
      sub_100007764(&qword_100726940);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100610730;
      *(void *)(inited + 32) = countAndFlagsBits;
      *(void *)(inited + 40) = object;
      uint64_t v39 = v91;
      *(void *)(inited + 48) = v32;
      *(void *)(inited + 56) = v39;
      uint64_t v40 = v78;
      *(void *)(inited + 64) = v77;
      *(void *)(inited + 72) = v40;
      uint64_t v41 = v88;
      *(void *)(inited + 80) = v87;
      *(void *)(inited + 88) = v41;
      *(unsigned char *)(inited + 96) = v89 & 1;
      uint64_t v42 = v76;
      *(void *)(inited + 104) = v79;
      *(void *)(inited + 112) = v42;
      uint64_t v43 = v74;
      *(void *)(inited + 120) = v75;
      *(void *)(inited + 128) = v43;
      *(unsigned char *)(inited + 136) = v36;
      unint64_t v44 = sub_10015D9A0(inited);
      uint64_t v93 = v69;
      unint64_t v94 = &protocol witness table for DIPECIESSessionV3SecKey;
      uint64_t v92 = v37;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v91 = v37;
      swift_retain();
      id v45 = v86;
      __DataStorage.init(length:)();
      swift_allocObject();
      __DataStorage.init(length:)();
      unint64_t v95 = v44;
      (*(void (**)(char *, void, uint64_t))(v83 + 104))(v85, enum case for EncryptionParamsAlgorithmIdentifier.EC_v3(_:), v84);
      sub_100007764(&qword_1007264A0);
      sub_1001D5D7C();
      sub_1001D5E1C();
      EncryptedDataContainer.init(alg:encryptor:remotePublicKey:senderSigningKey:recipientSigningKey:data:)();
      uint64_t v90 = 0;
      uint64_t v46 = *(void (**)(char *, void, uint64_t))(v81 + 104);
      uint64_t v47 = v63;
      v46(v80, enum case for EncryptedMessageEntity.device_see(_:), v63);
      v46(v64, enum case for EncryptedMessageEntity.sp(_:), v47);
      uint64_t v48 = v66;
      (*(void (**)(uint64_t, char *, uint64_t))(v66 + 16))(v62, v70, v67);
      uint64_t v49 = (uint64_t)v82;
      EncryptedMessage.init(sender:recipient:message:senderSigningKey:)();
      uint64_t v50 = sub_100007764((uint64_t *)&unk_100726030);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 0, 1, v50);
      uint64_t v51 = (uint64_t)v65;
      sub_1000BEA14(v49, (uint64_t)v65, &qword_100726408);
      uint64_t v52 = (uint64_t)v26 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
      swift_beginAccess();
      sub_1001D9214(v51, v52, &qword_100726408);
      swift_endAccess();
      uint64_t v53 = dispatch thunk of DIPECIESSessionV3SecKey.ePublicKeyData.getter();
      if (v54 >> 60 == 15)
      {
        (*(void (**)(char *, void, uint64_t))(v59 + 104))(v61, enum case for DIPError.Code.unexpectedDaemonState(_:), v60);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v70, v67);
      }
      else
      {
        uint64_t v55 = v53;
        unint64_t v56 = v54;
        Swift::String v57 = Data.base64EncodedString(options:)(0);
        swift_release();
        sub_10000C5E0(v55, v56);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v70, v67);
        v26[13] = v57;
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.unexpectedDaemonState(_:), v2);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
}

uint64_t sub_10018968C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001D7BDC(*(void *)(v0 + 96), *(void *)(v0 + 104));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue, &qword_100726408);
  return v0;
}

uint64_t sub_10018973C()
{
  sub_10018968C();

  return swift_deallocClassInstance();
}

uint64_t sub_100189794(uint64_t *a1, uint64_t *a2)
{
  return sub_1001BF4BC(*a1, *a2);
}

id sub_1001897A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService];
  *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService] = 0;

  uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService];
  *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService] = 0;

  uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService];
  *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService] = 0;

  char v9 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context];
  *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context] = 0;

  *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow] = 0;
  swift_release();
  uint64_t v10 = &v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages];
  swift_beginAccess();
  *(void *)uint64_t v10 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  unint64_t v11 = sub_10015DB5C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = (unint64_t *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
  swift_beginAccess();
  *uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v13 = (uint64_t)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey];
  swift_beginAccess();
  sub_1001D9214((uint64_t)&v32, v13, &qword_100726528);
  swift_endAccess();
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v14 = (uint64_t)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey];
  swift_beginAccess();
  sub_1001D9214((uint64_t)&v32, v14, &qword_100726528);
  swift_endAccess();
  *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim] = 0;
  swift_release();
  uint64_t v15 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper];
  *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper] = 0;

  uint64_t v16 = &v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData];
  uint64_t v17 = *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData];
  uint64_t v18 = *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 8];
  uint64_t v19 = *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 16];
  uint64_t v20 = *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 24];
  uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 32];
  uint64_t v22 = *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 40];
  uint64_t v23 = *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 48];
  uint64_t v24 = *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 56];
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((void *)v16 + 6) = 0;
  *((void *)v16 + 7) = 1;
  sub_1001D59E4(v17, v18, v19, v20, v21, v22, v23, v24);
  defaultLogger()();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Destroying IDVSessionProxy", v27, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v28 = (objc_class *)type metadata accessor for IDVSessionProxy(0);
  v31.receiver = v1;
  v31.super_class = v28;
  return [super dealloc];
}

uint64_t sub_100189E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  *(void *)&long long v81 = a1;
  *((void *)&v81 + 1) = a2;
  uint64_t v5 = type metadata accessor for DIPBackoffStrategy();
  uint64_t v74 = *(void *)(v5 - 8);
  uint64_t v75 = v5;
  __chkstk_darwin(v5);
  uint64_t v76 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPRetrier();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v79 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for UUID();
  uint64_t v73 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v72 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = type metadata accessor for DIPSignpost();
  uint64_t v77 = *(void *)(v12 - 8);
  uint64_t v78 = v12;
  __chkstk_darwin(v12);
  char v82 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v67 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = v4;
  uint64_t v22 = *(void **)(v4 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService);
  if (!v22)
  {
    (*(void (**)(char *, void))(v19 + 104))(v21, enum case for DIPError.Code.unexpectedDaemonState(_:));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v60 = 458;
    unint64_t v58 = 0xD000000000000024;
    uint64_t v59 = (void **)0x800000010063F220;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  uint64_t v68 = v19;
  uint64_t v69 = v18;
  uint64_t v65 = v8;
  uint64_t v66 = v7;
  long long v70 = v21;
  unint64_t v98 = _swiftEmptyArrayStorage;
  uint64_t v99 = _swiftEmptyArrayStorage;
  uint64_t v23 = qword_10071F5D0;
  id v24 = v22;
  id v80 = v24;
  if (v23 != -1) {
    id v24 = (id)swift_once();
  }
  *(void *)&long long v86 = _swiftEmptyArrayStorage;
  __chkstk_darwin(v24);
  uint64_t v60 = v25;
  char v61 = &v86;
  OS_dispatch_queue.sync<A>(execute:)();
  if (v3)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v70, enum case for DIPError.Code.internalError(_:), v69);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v60 = 469;
    unint64_t v58 = 0xD000000000000024;
    uint64_t v59 = (void **)0x800000010063F220;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    swift_errorRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v27 = (void *)v86;
  swift_bridgeObjectRelease();
  uint64_t v99 = v27;
  uint64_t v28 = sub_100577000(v81, *((uint64_t *)&v81 + 1));
  swift_bridgeObjectRelease();
  unint64_t v98 = (void *)v28;
  if (v27[2] != *(void *)(v28 + 16))
  {
    defaultLogger()();
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      objc_super v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)objc_super v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "We have more claims than just claims for the current requested providerId", v31, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v67 + 8))(v16, v14);
  }
  static DaemonSignposts.configureFetchWorkflow.getter();
  DIPSignpost.init(_:)();
  if (qword_10071F580 != -1) {
    swift_once();
  }
  BOOL v32 = (char *)[self deviceLockState] - 1 < (char *)2;
  BOOL v97 = v32;
  uint64_t v33 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context;
  uint64_t v34 = *(void **)(v100 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  LODWORD(v67) = v32;
  if (!v34)
  {
    uint64_t v39 = 0;
    uint64_t v37 = 0;
    uint64_t v40 = v99;
LABEL_21:
    uint64_t v43 = v71;
    uint64_t v64 = v39;
    uint64_t v45 = v37;
    swift_bridgeObjectRetain();
LABEL_22:
    uint64_t v63 = 0;
    uint64_t v47 = 0;
    goto LABEL_23;
  }
  id v35 = [v34 tier];
  if (v35)
  {
    char v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v39 = 0;
  }
  uint64_t v41 = *(void **)(v100 + v33);
  uint64_t v40 = v99;
  if (!v41) {
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  id v42 = [v41 regionCode];
  uint64_t v43 = v71;
  uint64_t v64 = v39;
  if (!v42)
  {
    uint64_t v45 = v37;
    goto LABEL_22;
  }
  unint64_t v44 = v42;
  uint64_t v45 = v37;
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v46;

LABEL_23:
  uint64_t v71 = 0;
  uint64_t v48 = v72;
  UUID.init()();
  uint64_t v49 = UUID.uuidString.getter();
  uint64_t v51 = v50;
  (*(void (**)(char *, uint64_t))(v73 + 8))(v48, v43);
  if (qword_10071F518 != -1) {
    swift_once();
  }
  *(void *)&long long v86 = 0;
  *((void *)&v86 + 1) = 0xE000000000000000;
  *(void *)&long long v87 = v49;
  *((void *)&v87 + 1) = v51;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v52 = v81;
  long long v91 = v81;
  *(void *)&long long v92 = v45;
  *((void *)&v92 + 1) = v64;
  *(void *)&long long v93 = v40;
  *((void *)&v93 + 1) = 8;
  *(void *)&long long v94 = v63;
  *((void *)&v94 + 1) = v47;
  *(void *)&long long v95 = qword_100760380;
  BYTE8(v95) = v67;
  HIDWORD(v95) = *(_DWORD *)&v85[3];
  *(_DWORD *)((char *)&v95 + 9) = *(_DWORD *)v85;
  uint64_t v96 = 0;
  (*(void (**)(char *, void, uint64_t))(v74 + 104))(v76, enum case for DIPBackoffStrategy.noBackoff(_:), v75);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v53 = v79;
  uint64_t v54 = DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)();
  __chkstk_darwin(v54);
  id v55 = v80;
  *(&v62 - 10) = (uint64_t)v80;
  *(&v62 - 9) = (uint64_t)&v86;
  unint64_t v56 = v82;
  *(&v62 - 8) = v100;
  *(&v62 - 7) = (uint64_t)v56;
  *(&v62 - 6) = (uint64_t)&v98;
  *(&v62 - 5) = v52;
  unint64_t v58 = *((void *)&v52 + 1);
  uint64_t v59 = &v99;
  uint64_t v60 = (uint64_t)&v97;
  uint64_t v57 = v71;
  DIPRetrier.sync(_:)();
  if (v57)
  {
    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v70, enum case for DIPError.Code.internalError(_:), v69);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v60 = 603;
    unint64_t v58 = 0xD000000000000024;
    uint64_t v59 = (void **)0x800000010063F220;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v53, v66);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v65 + 8))(v53, v66);
  }
  (*(void (**)(char *, uint64_t))(v77 + 8))(v56, v78);
  v83[8] = v94;
  v83[9] = v95;
  uint64_t v84 = v96;
  v83[4] = v90;
  v83[5] = v91;
  v83[6] = v92;
  v83[7] = v93;
  v83[0] = v86;
  v83[1] = v87;
  v83[2] = v88;
  v83[3] = v89;
  sub_1001D8DFC((uint64_t)v83);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10018AAD4(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v224 = a7;
  uint64_t v225 = a8;
  uint64_t v229 = a5;
  v230 = a6;
  v241 = a2;
  v238 = a9;
  uint64_t v12 = type metadata accessor for UUID();
  long long v215 = *(void (**)(char *, void, uint64_t))(v12 - 8);
  uint64_t v216 = v12;
  __chkstk_darwin(v12);
  uint64_t v214 = (void (**)(char *))((char *)&v199 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_100007764(&qword_100723600);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  v236 = (char *)&v199 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v232 = (char *)&v199 - v17;
  uint64_t v234 = type metadata accessor for DIPError.Code();
  uint64_t v237 = *(void *)(v234 - 8);
  uint64_t v18 = __chkstk_darwin(v234);
  v220 = (char *)&v199 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  long long v218 = (char *)&v199 - v20;
  uint64_t v21 = type metadata accessor for DIPError();
  uint64_t v222 = *(void *)(v21 - 8);
  uint64_t v223 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  v221 = (char *)&v199 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  SecKeyRef v213 = (char *)&v199 - v24;
  uint64_t v25 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v25 - 8);
  v231 = (char *)&v199 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DIPSignpost();
  uint64_t v227 = *(void *)(v27 - 8);
  uint64_t v228 = v27;
  __chkstk_darwin(v27);
  v233 = (char *)&v199 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for HardwareAttestationType();
  uint64_t v208 = *(void *)(v29 - 8);
  uint64_t v209 = v29;
  uint64_t v30 = __chkstk_darwin(v29);
  v204 = (char *)&v199 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  long long v207 = (char *)&v199 - v32;
  uint64_t v33 = type metadata accessor for KeystoreKeyType();
  uint64_t v211 = *(void *)(v33 - 8);
  uint64_t v212 = v33;
  uint64_t v34 = __chkstk_darwin(v33);
  SecTrustRef v205 = (char *)&v199 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v210 = (char *)&v199 - v36;
  uint64_t v244 = type metadata accessor for Logger();
  uint64_t v37 = *(void *)(v244 - 8);
  uint64_t v38 = __chkstk_darwin(v244);
  v217 = (char *)&v199 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v38);
  v219 = (char *)&v199 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  unint64_t v44 = (char *)&v199 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  v203 = (char *)&v199 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v206 = (char *)&v199 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v226 = (char *)&v199 - v50;
  __chkstk_darwin(v49);
  long long v52 = (char *)&v199 - v51;
  defaultLogger()();
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    id v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = a1;
    uint64_t v57 = v55;
    *(_DWORD *)id v55 = 134349056;
    *(void *)&v254[0] = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Attempting workflow try # %{public}ld", v57, 0xCu);
    swift_slowDealloc();
  }
  v235 = v44;

  v242 = *(void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v243 = v37 + 8;
  v242(v52, v244);
  unint64_t v58 = &a4[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken];
  uint64_t v59 = *(void *)&a4[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken];
  uint64_t v60 = *(void *)&a4[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8];
  char v61 = v241;
  uint64_t v63 = *(void *)&v241[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  uint64_t v62 = *(void *)&v241[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)a3 = v63;
  *(void *)(a3 + 8) = v62;
  sub_1002D4260(v59, v60, (uint64_t *)v251);
  long long v239 = v251[1];
  long long v240 = v251[0];
  uint64_t v64 = v252;
  uint64_t v65 = v253;
  sub_1000AAC30(*(void *)(a3 + 32), *(void *)(a3 + 40));
  *(_OWORD *)(a3 + 32) = v240;
  *(_OWORD *)(a3 + 48) = v239;
  *(void *)(a3 + 64) = v64;
  *(void *)(a3 + 72) = v65;
  swift_bridgeObjectRelease();
  uint64_t v66 = *(NSObject **)&a4[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__commonDispatchGroup];
  dispatch_group_enter(v66);
  long long v67 = *(_OWORD *)(a3 + 112);
  long long v68 = *(_OWORD *)(a3 + 144);
  v254[8] = *(_OWORD *)(a3 + 128);
  v254[9] = v68;
  long long v69 = *(_OWORD *)(a3 + 48);
  long long v70 = *(_OWORD *)(a3 + 80);
  long long v71 = *(_OWORD *)(a3 + 96);
  v254[4] = *(_OWORD *)(a3 + 64);
  v254[5] = v70;
  uint64_t v255 = *(void *)(a3 + 160);
  v254[6] = v71;
  v254[7] = v67;
  long long v72 = *(_OWORD *)(a3 + 16);
  v254[0] = *(_OWORD *)a3;
  v254[1] = v72;
  v254[2] = *(_OWORD *)(a3 + 32);
  v254[3] = v69;
  uint64_t v73 = swift_allocObject();
  long long v74 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v73 + 136) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v73 + 152) = v74;
  *(_OWORD *)(v73 + 168) = *(_OWORD *)(a3 + 144);
  long long v75 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v73 + 72) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v73 + 88) = v75;
  long long v76 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v73 + 104) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v73 + 120) = v76;
  long long v77 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v73 + 24) = *(_OWORD *)a3;
  *(void *)(v73 + 16) = v61;
  uint64_t v78 = *(void *)(a3 + 160);
  *(_OWORD *)(v73 + 40) = v77;
  *(_OWORD *)(v73 + 56) = *(_OWORD *)(a3 + 32);
  *(void *)(v73 + 184) = v78;
  *(void *)(v73 + 192) = a4;
  sub_1001D9024((uint64_t)v254);
  type metadata accessor for LegacySynthesizedWorkflows();
  unint64_t v79 = v61;
  id v80 = a4;
  long long v81 = "regenerated assessments";
  char v82 = 0;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  *(void *)&long long v239 = v58;
  swift_release();
  uint64_t v83 = v248[0];
  uint64_t v84 = *(void *)(v248[0] + 5976);
  uint64_t v85 = v233;
  if (!v84 || *(void *)(v84 + 16) != 8)
  {
    long long v86 = v226;
    defaultLogger()();
    swift_retain();
    long long v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v87, v88))
    {
      v236 = "regenerated assessments";
      uint64_t v89 = swift_slowAlloc();
      *(_DWORD *)uint64_t v89 = 134349312;
      uint64_t v90 = *(void *)(v83 + 5976);
      if (v90) {
        uint64_t v90 = *(void *)(v90 + 16);
      }
      v248[0] = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v89 + 12) = 2050;
      v248[0] = 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "assessmentGUIDs count (%{public}ld) doesn't match the request number (%{public}ld)", (uint8_t *)v89, 0x16u);
      swift_slowDealloc();
      uint64_t v85 = v233;
      long long v81 = v236;
    }
    else
    {
      swift_release();
    }

    v242(v86, v244);
    char v82 = 0;
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  if (!*(void *)(*(void *)v230 + 16))
  {
    id v91 = [self standardUserDefaults];
    v92._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v92._object = (void *)0x800000010063F340;
    Swift::Bool v93 = NSUserDefaults.internalBool(forKey:)(v92);

    if (v93)
    {
      uint64_t v85 = v233;
      goto LABEL_22;
    }
    v236 = v81;
    type metadata accessor for DIPAccountManager();
    static DIPAccountManager.sharedInstance.getter();
    sub_10000C728(v248, v249);
    uint64_t v94 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()();
    v241 = v80;
    v230 = 0;
    *(void *)&long long v240 = v66;
    v219 = (char *)v83;
    uint64_t v96 = (char *)v94;
    uint64_t v97 = v95;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v248);
    unint64_t v98 = sub_10006C648();
    uint64_t v99 = v230;
    sub_1001B8BCC((uint64_t)v98, 0, 0, 0xF000000000000000, (uint64_t)v248);
    v230 = v99;
    if (v99)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    v232 = v250;
    sub_10000C728(v248, v249);
    unint64_t v165 = v210;
    uint64_t v166 = v211;
    uint64_t v168 = v211 + 104;
    v167 = *(void (**)(void))(v211 + 104);
    LODWORD(v216) = enum case for KeystoreKeyType.standard(_:);
    long long v215 = (void (*)(char *, void, uint64_t))v167;
    v167(v210);
    swift_bridgeObjectRetain();
    uint64_t v169 = v165;
    v226 = v96;
    uint64_t v229 = v97;
    v170 = v230;
    uint64_t v171 = dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)();
    v230 = v170;
    if (v170)
    {
      (*(void (**)(char *, uint64_t))(v166 + 8))(v169, v212);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    v173 = *(void (**)(char *, uint64_t))(v166 + 8);
    uint64_t v211 = v166 + 8;
    v174 = (char *)v171;
    v175 = v172;
    uint64_t v201 = v173;
    uint64_t v202 = v168;
    v173(v169, v212);
    swift_bridgeObjectRelease();
    v232 = v250;
    uint64_t v214 = sub_10000C728(v248, v249);
    v177 = v207;
    uint64_t v176 = v208;
    uint64_t v178 = (void *)(v208 + 104);
    unint64_t v179 = *(void (**)(char *))(v208 + 104);
    unsigned int v200 = enum case for HardwareAttestationType.IDV(_:);
    uint64_t v180 = v209;
    v179(v207);
    v210 = v174;
    uint64_t v181 = v175;
    v182 = v230;
    dispatch thunk of DIPKeystoreProtocol.retrieveIdentityKey(label:constraints:attestationType:)();
    v230 = v182;
    if (v182)
    {
      (*(void (**)(char *, uint64_t))(v176 + 8))(v177, v180);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    v232 = v181;
    uint64_t v199 = v179;
    uint64_t v214 = v178;
    unint64_t v183 = *(void (**)(char *, uint64_t))(v176 + 8);
    v183(v177, v180);
    if (v247)
    {
      sub_10000C6CC((uint64_t)v246, &qword_100726528);
      uint64_t v184 = v206;
      defaultLogger()();
      unint64_t v185 = Logger.logObject.getter();
      os_log_type_t v186 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v185, v186))
      {
        unint64_t v187 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v187 = 0;
        _os_log_impl((void *)&_mh_execute_header, v185, v186, "detected INO key without any claims. proceeding to delete INO key", v187, 2u);
        swift_slowDealloc();
      }

      v242(v184, v244);
      sub_10000C728(v248, v249);
      uint64_t v188 = v230;
      dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)();
      v230 = v188;
      if (v188) {
        goto LABEL_55;
      }
      v210 = (char *)v183;
      swift_bridgeObjectRelease();
    }
    else
    {
      v210 = (char *)v183;
      swift_bridgeObjectRelease();
      sub_10000C6CC((uint64_t)v246, &qword_100726528);
    }
    uint64_t v189 = sub_10006C834();
    uint64_t v190 = v230;
    sub_1001B8BCC((uint64_t)v189, 0, 0, 0xF000000000000000, (uint64_t)v246);
    v230 = v190;
    if (!v190)
    {
      swift_bridgeObjectRelease();
      sub_10000C728(v246, v247);
      uint64_t v191 = v205;
      uint64_t v192 = v212;
      v215(v205, v216, v212);
      v193 = v230;
      dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)();
      v230 = v193;
      if (!v193)
      {
        v201(v191, v192);
        swift_bridgeObjectRelease();
        sub_10000C728(v246, v247);
        v194 = v204;
        uint64_t v195 = v209;
        ((void (*)(char *, void, uint64_t))v199)(v204, v200, v209);
        char v82 = v230;
        dispatch thunk of DIPKeystoreProtocol.retrieveIdentityKey(label:constraints:attestationType:)();
        if (!v82)
        {
          ((void (*)(char *, uint64_t))v210)(v194, v195);
          if (v245[3])
          {
            sub_10000C6CC((uint64_t)v245, &qword_100726528);
            defaultLogger()();
            uint64_t v196 = Logger.logObject.getter();
            os_log_type_t v197 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v196, v197))
            {
              uint64_t v198 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v198 = 0;
              _os_log_impl((void *)&_mh_execute_header, v196, v197, "detected SP key without any claims. proceeding to delete SP key", v198, 2u);
              swift_slowDealloc();
            }

            v242(v203, v244);
            sub_10000C728(v246, v247);
            dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            sub_10000C6CC((uint64_t)v245, &qword_100726528);
          }
          _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v246);
          _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v248);
          uint64_t v66 = v240;
          uint64_t v85 = v233;
          id v80 = v241;
          goto LABEL_21;
        }
        ((void (*)(char *, uint64_t))v210)(v194, v195);
        swift_bridgeObjectRelease();
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v246);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v248);
        v230 = v82;
LABEL_18:
        v232 = 0;
        uint64_t v100 = v217;
        defaultLogger()();
        uint64_t v101 = Logger.logObject.getter();
        os_log_type_t v102 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v103 = 0;
          _os_log_impl((void *)&_mh_execute_header, v101, v102, "ignoring Error deleting lingering keys when there are no claims", v103, 2u);
          swift_slowDealloc();
        }

        uint64_t v104 = v244;
        CFDataRef v105 = v242;
        v242(v100, v244);
        (*(void (**)(char *, void, uint64_t))(v237 + 104))(v220, enum case for DIPError.Code.deleteKeyWithoutClaimFailure(_:), v234);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v106 = v221;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v107 = v223;
        swift_allocError();
        uint64_t v108 = v222;
        (*(void (**)(uint64_t, char *, uint64_t))(v222 + 16))(v109, v106, v107);
        uint64_t v110 = v235;
        defaultLogger()();
        DIPRecordError(_:message:log:)();
        swift_errorRelease();
        v105(v110, v104);
        (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v107);
        swift_errorRelease();
        id v80 = v241;
        uint64_t v66 = v240;
        char v82 = v232;
        uint64_t v85 = v233;
LABEL_21:
        uint64_t v83 = (uint64_t)v219;
        goto LABEL_22;
      }
      v201(v191, v192);
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v246);
LABEL_15:
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v248);
      goto LABEL_18;
    }
LABEL_55:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_22:
  static DaemonSignposts.configureLoadClaimsAndPrefill.getter();
  DIPSignpost.init(_:)();
  sub_1001A1C10(v83);
  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v227 + 8))(v85, v228);
    swift_release();
    v111 = v238;
    void *v238 = v82;
    uint64_t v112 = enum case for DIPRetryResult.stopWithError(_:);
    uint64_t v113 = type metadata accessor for DIPRetryResult();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v113 - 8) + 104))(v111, v112, v113);
  }
  else
  {
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    id v114 = sub_1001BB87C(v83);
    uint64_t v115 = *(void **)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService];
    *(void *)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService] = v114;

    if (sub_10006CB30())
    {
      uint64_t v116 = *(void *)(v83 + 24);
      if (v116
        && (unint64_t v117 = (uint64_t *)(v116 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userAuthorizationBundleName),
            (uint64_t v118 = v117[1]) != 0))
      {
        uint64_t v119 = *v117;
        objc_allocWithZone((Class)type metadata accessor for DIPLocationHelper());
        swift_bridgeObjectRetain();
        id v120 = sub_1002D79F0(v119, v118, 0);
        swift_bridgeObjectRelease();
        uint64_t v121 = *(void **)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper];
        *(void *)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper] = v120;
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v237 + 104))(v218, enum case for DIPError.Code.missingLocationAuthorization(_:), v234);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v122 = sub_100007764((uint64_t *)&unk_100723460);
        unint64_t v123 = (*(unsigned __int8 *)(*(void *)(v122 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v122 - 8) + 80);
        uint64_t v124 = swift_allocObject();
        *(_OWORD *)(v124 + 16) = xmmword_100610730;
        unint64_t v125 = v124 + v123;
        uint64_t v126 = enum case for DIPError.PropertyKey.spWorkflowID(_:);
        uint64_t v127 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 104))(v125, v126, v127);
        uint64_t v128 = v83;
        uint64_t v129 = *(void *)(v83 + 24);
        if (v129)
        {
          uint64_t v130 = *(void *)(v129 + 16);
          uint64_t v131 = swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v131 = 0xEB00000000454C42;
          uint64_t v130 = 0x414C494156414E55;
        }
        v132 = (uint64_t *)(v125 + *(int *)(v122 + 48));
        v132[3] = (uint64_t)&type metadata for String;
        uint64_t *v132 = v130;
        v132[1] = v131;
        sub_10015C504(v124);
        Swift::String v133 = v213;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v134 = v223;
        swift_allocError();
        uint64_t v135 = v222;
        (*(void (**)(uint64_t, char *, uint64_t))(v222 + 16))(v136, v133, v134);
        v137 = v235;
        defaultLogger()();
        DIPRecordError(_:message:log:)();
        v242(v137, v244);
        (*(void (**)(char *, uint64_t))(v135 + 8))(v133, v134);
        swift_errorRelease();
        uint64_t v83 = v128;
        uint64_t v85 = v233;
      }
    }
    id v138 = [self standardUserDefaults];
    v139._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v139._object = (void *)0x800000010063F2B0;
    Swift::Bool v140 = NSUserDefaults.internalBool(forKey:)(v139);

    if (v140
      || (uint64_t v141 = *(void *)(v83 + 24)) != 0
      && (*(unsigned char *)(v141 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_useExternalGSToken) & 1) != 0)
    {
      uint64_t v143 = *(void **)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context];
      v144 = (void *)v239;
      if (v143 && (id v145 = [v143 httpHeaders]) != 0)
      {
        uint64_t v146 = v145;
        uint64_t v147 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        if (*(void *)(v147 + 16) && (unint64_t v150 = sub_100590548(v148, v149), (v151 & 1) != 0))
        {
          id v152 = (uint64_t *)(*(void *)(v147 + 56) + 16 * v150);
          uint64_t v154 = *v152;
          uint64_t v153 = v152[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v154 = 0;
          uint64_t v153 = 0;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v144 = (void *)v239;
      }
      else
      {
        uint64_t v154 = 0;
        uint64_t v153 = 0;
      }
      void *v144 = v154;
      v144[1] = v153;
    }
    else
    {
      uint64_t v142 = v239;
      *(void *)long long v239 = 0;
      *(void *)(v142 + 8) = 0;
    }
    swift_bridgeObjectRelease();
    *(void *)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow] = v83;
    swift_retain();
    swift_release();
    uint64_t v155 = *(void *)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation];
    uint64_t v156 = *(void *)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8];
    uint64_t v157 = *(void *)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
    uint64_t v158 = *(void *)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v159 = sub_1000448A4(v155, v156, v157, v158);
    swift_bridgeObjectRelease();
    uint64_t v160 = sub_1005F5180(v83, (uint64_t)v159);
    swift_release();
    swift_release();
    *(void *)&v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager] = v160;
    swift_release();
    v80[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state] = 2;
    sub_10018F128();
    v161._uint64_t countAndFlagsBits = 0xD000000000000016;
    v161._object = (void *)0x800000010063F2D0;
    v162._uint64_t countAndFlagsBits = 0x3837323838646361;
    v162._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v162, v161);
    swift_release();
    (*(void (**)(char *, uint64_t))(v227 + 8))(v85, v228);
    uint64_t v163 = enum case for DIPRetryResult.stop(_:);
    uint64_t v164 = type metadata accessor for DIPRetryResult();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v164 - 8) + 104))(v238, v163, v164);
  }
  dispatch_group_leave(v66);
}

uint64_t sub_10018CBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  sub_100007764(&qword_1007254C8);
  v4[6] = swift_task_alloc();
  return _swift_task_switch(sub_10018CC8C, 0, 0);
}

uint64_t sub_10018CC8C()
{
  uint64_t v1 = *(void **)(v0[5] + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (v1 && (id v2 = [v1 preferredLanguages]) != 0)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v4 = 0;
  }
  v0[7] = v4;
  uint64_t v5 = v0[6];
  uint64_t v6 = type metadata accessor for DIPSignpost.Config();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  void *v7 = v0;
  v7[1] = sub_10018CDCC;
  uint64_t v8 = v0[6];
  uint64_t v9 = v0[4];
  return sub_1002B9798(v9, v4, 0, v8, 0);
}

uint64_t sub_10018CDCC(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[9] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[6];
  if (v1)
  {
    sub_10000C6CC(v5, &qword_1007254C8);
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_10018CFB8;
  }
  else
  {
    v4[10] = a1;
    sub_10000C6CC(v5, &qword_1007254C8);
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_10018CF48;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10018CF48()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 80);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10018CFB8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10018D01C()
{
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  id v2 = (char *)v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10052CC28();
  *(void *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow] = v5;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation];
  uint64_t v6 = *(void *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8];
  uint64_t v8 = *(void *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
  uint64_t v9 = *(void *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000448A4(v7, v6, v8, v9);
  swift_bridgeObjectRelease();
  swift_retain();
  swift_retain();
  uint64_t v32 = v10;
  uint64_t v11 = sub_1005F5180(v5, (uint64_t)v10);
  swift_release();
  swift_release();
  *(void *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager] = v11;
  swift_release();
  uint64_t v12 = *(void *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__tiberiusSetupQueue];
  v27[3] = *(void *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__tiberiusSetupDispatchGroup];
  v27[4] = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v0;
  *(void *)(v13 + 24) = v5;
  uint64_t v40 = sub_1001D8A30;
  uint64_t v41 = v13;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  uint64_t v29 = &v38;
  uint64_t v38 = sub_100593800;
  uint64_t v39 = &unk_1006F9DC8;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v28 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = _swiftEmptyArrayStorage;
  v27[2] = sub_1001C6628((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v27[1] = sub_100007764((uint64_t *)&unk_1007208F0);
  v27[5] = sub_1000B6120(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  uint64_t v15 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v16 = v2;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v34 + 8);
  v34 += 8;
  v27[0] = v17;
  v17(v2, v15);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v33 + 8);
  v33 += 8;
  uint64_t v19 = v31;
  v18(v4, v31);
  swift_release();
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v28;
  *(void *)(v20 + 16) = v28;
  *(void *)(v20 + 24) = v5;
  uint64_t v40 = sub_1001D8A7C;
  uint64_t v41 = v20;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  uint64_t v38 = sub_100593800;
  uint64_t v39 = &unk_1006F9E18;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v23 = v21;
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  ((void (*)(char *, uint64_t))v27[0])(v16, v15);
  v18(v4, v19);
  swift_release();
  v23[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state] = 2;
  v24._object = (void *)0x800000010063F110;
  v25._uint64_t countAndFlagsBits = 0x3431386261376564;
  v25._object = (void *)0xE800000000000000;
  v24._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  logMilestone(tag:description:)(v25, v24);
  swift_release();
  return swift_release();
}

uint64_t sub_10018D54C(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v27 = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v28 = *(void *)(v2 - 8);
  uint64_t v29 = v2;
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DIPError();
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  __chkstk_darwin(v3);
  uint64_t v30 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v25 - v8;
  uint64_t v10 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for DIPSignpost();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DaemonSignposts.configureLoadPregeneratedAssessment.getter();
  DIPSignpost.init(_:)();
  id v15 = [self standardUserDefaults];
  v16._uint64_t countAndFlagsBits = 0xD000000000000024;
  v16._object = (void *)0x800000010063F1B0;
  Swift::Bool v17 = NSUserDefaults.internalBool(forKey:)(v16);

  if (v17)
  {
    defaultLogger()();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Ignoring precomputed assessment due to user defaults setting", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  else
  {
    if (qword_10071F5D0 != -1) {
      uint64_t v18 = swift_once();
    }
    v25[1] = v5;
    uint64_t v26 = v11;
    if (*(void *)(v33 + 24)) {
      uint64_t v18 = swift_bridgeObjectRetain();
    }
    uint64_t v34 = _swiftEmptyArrayStorage;
    __chkstk_darwin(v18);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();
    *(void *)(v27 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__pregeneratedAssessments) = v34;
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0xD000000000000037;
    v22._object = (void *)0x800000010063F1E0;
    v23._uint64_t countAndFlagsBits = 0x6137643236366435;
    v23._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v23, v22);
    uint64_t v11 = v26;
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10018DBCC(void *a1, uint64_t a2)
{
  uint64_t v111 = a2;
  uint64_t v121 = 0;
  uint64_t v3 = type metadata accessor for DIPError();
  uint64_t v108 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_100007764(&qword_100726860);
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  os_log_type_t v102 = (char *)v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100726688);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v110 = (char *)v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = ((char *)v100 - v10);
  uint64_t v122 = type metadata accessor for Logger();
  uint64_t v120 = *(void *)(v122 - 8);
  uint64_t v12 = __chkstk_darwin(v122);
  uint64_t v14 = (char *)v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v114 = (char *)v100 - v15;
  uint64_t v16 = type metadata accessor for DIPError.Code();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v109 = (char *)v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v107 = (char *)v100 - v21;
  __chkstk_darwin(v20);
  Swift::String v23 = (char *)v100 - v22;
  uint64_t v24 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v24 - 8);
  uint64_t v116 = type metadata accessor for DIPSignpost();
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v26 = (char *)v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DaemonSignposts.createClientGUIDFactory.getter();
  uint64_t v113 = v26;
  DIPSignpost.init(_:)();
  *(void *)(swift_allocObject() + 16) = a1;
  id v112 = a1;
  sub_100007764((uint64_t *)&unk_100722630);
  uint64_t v119 = "Tiberius configure complete";
  runAsyncAndBlock<A>(file:function:line:_:)();
  swift_release();
  uint64_t v118 = v16;
  uint64_t v117 = v17;
  if (!*((void *)&v123 + 1))
  {
    uint64_t v106 = v5;
    uint64_t v105 = v3;
    uint64_t v53 = *(void (**)(char *, void, uint64_t))(v17 + 104);
    uint64_t v109 = v23;
    v53(v23, enum case for DIPError.Code.odnMissingProfile(_:), v16);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v54 = sub_100007764((uint64_t *)&unk_100723460);
    uint64_t v55 = *(void *)(*(void *)(v54 - 8) + 72);
    unint64_t v56 = (*(unsigned __int8 *)(*(void *)(v54 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v54 - 8) + 80);
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_100611020;
    unint64_t v58 = (void *)(v57 + v56 + *(int *)(v54 + 48));
    uint64_t v59 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
    uint64_t v60 = type metadata accessor for DIPError.PropertyKey();
    char v61 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 104);
    v61(v57 + v56, v59, v60);
    uint64_t v62 = v111;
    uint64_t v63 = *(void *)(v111 + 16);
    uint64_t v64 = *(void *)(v63 + 16);
    uint64_t v65 = *(void *)(v63 + 24);
    v58[3] = &type metadata for String;
    *unint64_t v58 = v64;
    v58[1] = v65;
    unint64_t v66 = v57 + v56 + v55;
    v61(v66, enum case for DIPError.PropertyKey.spWorkflowID(_:), v60);
    uint64_t v67 = *(void *)(v62 + 24);
    if (v67)
    {
      uint64_t v68 = *(void *)(v67 + 16);
      uint64_t v69 = swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v68 = 0x414C494156414E55;
      uint64_t v69 = 0xEB00000000454C42;
    }
    uint64_t v75 = v105;
    uint64_t v73 = v114;
    uint64_t v29 = v121;
    long long v77 = (uint64_t *)(v66 + *(int *)(v54 + 48));
    v77[3] = (uint64_t)&type metadata for String;
    *long long v77 = v68;
    v77[1] = v69;
    swift_bridgeObjectRetain();
    sub_10015C504(v57);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(char *, uint64_t))(v120 + 8))(v73, v122);
    swift_errorRelease();
    uint64_t v28 = v106;
    uint64_t v74 = (uint64_t)v110;
LABEL_14:
    long long v71 = v112;
    goto LABEL_15;
  }
  uint64_t v27 = v111;
  uint64_t v28 = v5;
  uint64_t v29 = v121;
  sub_1001FFFF4(*((uint64_t *)&v123 + 1), v11);
  if (v29)
  {
    uint64_t v121 = v29;
    uint64_t v106 = v28;
    uint64_t v105 = v3;
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = v118;
    uint64_t v34 = v117;
    if (v32)
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "unexpected error getting augmented profile", v35, 2u);
      swift_slowDealloc();
    }

    uint64_t v36 = *(void (**)(char *, uint64_t))(v120 + 8);
    v100[1] = v120 + 8;
    uint64_t v101 = v36;
    v36(v14, v122);
    (*(void (**)(char *, void, uint64_t))(v34 + 104))(v109, enum case for DIPError.Code.odnErrorDecodingProfile(_:), v33);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v37 = sub_100007764((uint64_t *)&unk_100723460);
    uint64_t v38 = *(void *)(*(void *)(v37 - 8) + 72);
    unint64_t v39 = (*(unsigned __int8 *)(*(void *)(v37 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v37 - 8) + 80);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_100611020;
    unint64_t v41 = v40 + v39;
    uint64_t v42 = (void *)(v41 + *(int *)(v37 + 48));
    uint64_t v43 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
    uint64_t v44 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v45 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104);
    v45(v41, v43, v44);
    uint64_t v46 = *(void *)(v27 + 16);
    uint64_t v47 = *(void *)(v46 + 16);
    uint64_t v48 = *(void *)(v46 + 24);
    void v42[3] = &type metadata for String;
    *uint64_t v42 = v47;
    v42[1] = v48;
    unint64_t v49 = v41 + v38;
    v45(v49, enum case for DIPError.PropertyKey.spWorkflowID(_:), v44);
    uint64_t v50 = *(void *)(v27 + 24);
    if (v50)
    {
      uint64_t v51 = *(void *)(v50 + 16);
      uint64_t v52 = swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v51 = 0x414C494156414E55;
      uint64_t v52 = 0xEB00000000454C42;
    }
    uint64_t v75 = v105;
    uint64_t v74 = (uint64_t)v110;
    long long v76 = (uint64_t *)(v49 + *(int *)(v37 + 48));
    v76[3] = (uint64_t)&type metadata for String;
    *long long v76 = v51;
    v76[1] = v52;
    swift_bridgeObjectRetain();
    sub_10015C504(v40);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v73 = v114;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    v101(v73, v122);
    swift_errorRelease();
    uint64_t v29 = 0;
    uint64_t v28 = v106;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  uint64_t v70 = type metadata accessor for AugmentedProfile(0);
  (*(void (**)(NSObject *, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v11, 0, 1, v70);
  long long v71 = v112;
  uint64_t v72 = (uint64_t)v112 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile;
  swift_beginAccess();
  sub_1001D9214((uint64_t)v11, v72, &qword_100726688);
  swift_endAccess();
  uint64_t v73 = v114;
  uint64_t v74 = (uint64_t)v110;
  uint64_t v75 = v3;
LABEL_15:
  uint64_t v78 = (uint64_t)v71 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile;
  swift_beginAccess();
  sub_100048D6C(v78, v74, &qword_100726688);
  uint64_t v79 = type metadata accessor for AugmentedProfile(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 48))(v74, 1, v79)
    || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v74, 1, v104))
  {
    sub_10000C6CC(v74, &qword_100726688);
    char v80 = 0;
  }
  else
  {
    uint64_t v97 = v103;
    unint64_t v98 = v102;
    uint64_t v99 = v104;
    (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v102, v74, v104);
    sub_10000C6CC(v74, &qword_100726688);
    JWSSignedJSON.payload.getter();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
    char v80 = v132;
    sub_1001D8D24(v123, *((uint64_t *)&v123 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = v71;
  v133[3] = type metadata accessor for DeviceInformationProvider();
  v133[4] = (uint64_t)&protocol witness table for DeviceInformationProvider;
  sub_10002C2D8(v133);
  char v82 = v71;
  DeviceInformationProvider.init()();
  sub_10027E55C(v133, v80, (uint64_t)&unk_100726880, v81, &v123);
  if (v29)
  {
    (*(void (**)(char *, void, uint64_t))(v117 + 104))(v107, enum case for DIPError.Code.internalError(_:), v118);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v83 = v108;
    (*(void (**)(uint64_t, char *, uint64_t))(v108 + 16))(v84, v28, v75);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v120 + 8))(v73, v122);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v28, v75);
    swift_errorRelease();
  }
  else
  {
    uint64_t v85 = v124;
    uint64_t v86 = v125;
    uint64_t v87 = v126;
    uint64_t v88 = v127;
    uint64_t v89 = v128;
    uint64_t v90 = v129;
    uint64_t v91 = v130;
    uint64_t v92 = v131;
    Swift::Bool v93 = &v82[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory];
    uint64_t v94 = *(void *)&v82[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory];
    *(_OWORD *)Swift::Bool v93 = v123;
    *((void *)v93 + 2) = v85;
    *((void *)v93 + 3) = v86;
    *((void *)v93 + 4) = v87;
    *((void *)v93 + 5) = v88;
    *((void *)v93 + 6) = v89;
    *((void *)v93 + 7) = v90;
    *((void *)v93 + 8) = v91;
    *((void *)v93 + 9) = v92;
    sub_1001D6E40(v94);
  }
  uint64_t v95 = v113;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v95, v116);
}

uint64_t sub_10018EC30(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10018EC50, 0, 0);
}

uint64_t sub_10018EC50()
{
  uint64_t v1 = *(void *)(v0[3] + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager);
  v0[4] = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[5] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10018ED38;
    return sub_1005F058C();
  }
  else
  {
    uint64_t v4 = (void *)v0[2];
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10018ED38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10018EE58, 0, 0);
}

uint64_t sub_10018EE58()
{
  *(_OWORD *)*(void *)(v0 + 16) = *(_OWORD *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018EE78(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(sub_10018EE98, 0, 0);
}

uint64_t sub_10018EE98()
{
  uint64_t v1 = *(void *)(v0[5] + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager);
  v0[6] = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10018EF88;
    return sub_1005F2300();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = (uint64_t (*)(void, unint64_t))v0[1];
    return v4(0, 0xE000000000000000);
  }
}

uint64_t sub_10018EF88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  v3[8] = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10018F0AC, 0, 0);
}

uint64_t sub_10018F0AC()
{
  unint64_t v1 = v0[8];
  if (v1)
  {
    uint64_t v2 = v0[3];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = 0;
    unint64_t v1 = 0xE000000000000000;
  }
  uint64_t v3 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v3(v2, v1);
}

uint64_t sub_10018F128()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v2 - 8);
  uint64_t v32 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v28 - v13;
  defaultLogger()();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "creating identity key ahead", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v14, v8);
  uint64_t v19 = *(void *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
  if (v19)
  {
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v1;
    *(void *)(v20 + 24) = v19;
    aBlock[4] = sub_1001D884C;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100593800;
    aBlock[3] = &unk_1006F9D28;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain_n();
    uint64_t v22 = v1;
    static DispatchQoS.unspecified.getter();
    uint64_t v33 = _swiftEmptyArrayStorage;
    sub_1001C6628((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100007764((uint64_t *)&unk_1007208F0);
    sub_1000B6120(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
    uint64_t v23 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);
    swift_release();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v23);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
    return swift_release();
  }
  else
  {
    defaultLogger()();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "unexpected error in createIdentityKeyAhead - workflow is nil", v27, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(char *, uint64_t))v18)(v12, v8);
  }
}

uint64_t sub_10018F5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v34 = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DIPError();
  uint64_t v38 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v37 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v39 = *(void *)(v40 - 8);
  uint64_t v5 = __chkstk_darwin(v40);
  uint64_t v36 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v30 - v7;
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v44, v44[3]);
  uint64_t v32 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()();
  uint64_t v33 = v9;
  uint64_t v31 = v8;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v44);
  uint64_t v10 = sub_10006C648();
  sub_1001B8BCC((uint64_t)v10, 0, 0, 0xF000000000000000, (uint64_t)v44);
  swift_bridgeObjectRelease();
  sub_100030A10((uint64_t)v44, (uint64_t)v42);
  uint64_t v11 = (void *)swift_allocObject();
  sub_10000C6B4(v42, (uint64_t)(v11 + 2));
  uint64_t v12 = v32;
  v11[7] = v35;
  v11[8] = v12;
  v11[9] = v33;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_100007764(&qword_100726540);
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  v30[1] = v13;
  swift_release();
  uint64_t v14 = v34;
  uint64_t v15 = v34 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey;
  swift_beginAccess();
  sub_1001D9214((uint64_t)v43, v15, &qword_100726528);
  swift_endAccess();
  v16._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v16._object = (void *)0x800000010063F0B0;
  v17._uint64_t countAndFlagsBits = 0x6633356232316665;
  v17._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v17, v16);
  if (*(unsigned char *)(v14 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = v31;
    defaultLogger()();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Skipping sp identity key generation for Tiberius", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v40);
  }
  else
  {
    uint64_t v23 = v35;
    uint64_t v24 = sub_10006C834();
    sub_1001B8BCC((uint64_t)v24, 0, 0, 0xF000000000000000, (uint64_t)v43);
    swift_bridgeObjectRelease();
    sub_100030A10((uint64_t)v43, (uint64_t)v41);
    uint64_t v25 = (void *)swift_allocObject();
    sub_10000C6B4(v41, (uint64_t)(v25 + 2));
    uint64_t v26 = v32;
    v25[7] = v23;
    v25[8] = v26;
    v25[9] = v33;
    swift_retain();
    runAsyncAndBlock<A>(timeout:file:function:line:_:)();
    swift_release();
    uint64_t v27 = v34 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey;
    swift_beginAccess();
    sub_1001D9214((uint64_t)v42, v27, &qword_100726528);
    swift_endAccess();
    v28._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v28._object = (void *)0x800000010063F0E0;
    v29._uint64_t countAndFlagsBits = 0x3434336139663634;
    v29._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v29, v28);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v43);
  }
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v44);
}

uint64_t sub_10018FF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPKeyAlgorithm();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for KeystoreKeyType();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  return _swift_task_switch(sub_10019008C, 0, 0);
}

uint64_t sub_10019008C()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 32);
  sub_10000C728(*(void **)(v0 + 24), *(void *)(*(void *)(v0 + 24) + 24));
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(v6 + 72);
  *(void *)(v0 + 104) = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for KeystoreKeyType.temporary(_:), v3);
  uint64_t v9 = enum case for DIPKeyAlgorithm.ECC256(_:);
  uint64_t v10 = type metadata accessor for DIPKeyAlgorithm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(v4, v9, v10);
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100190220;
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v15 = *(void *)(v0 + 48);
  uint64_t v16 = *(void *)(v0 + 16);
  return DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)(v16, v7, v8, v14, v15, v12, v13, 0);
}

uint64_t sub_100190220()
{
  uint64_t v10 = *(void *)(*v1 + 96);
  uint64_t v2 = *(void *)(*v1 + 88);
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v6 = *(void *)(*v1 + 56);
  uint64_t v7 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v10, v3);
  if (v0)
  {
    return _swift_task_switch(sub_1001D9720, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
}

uint64_t sub_10019046C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPKeyAlgorithm();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for KeystoreKeyType();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  return _swift_task_switch(sub_100190590, 0, 0);
}

uint64_t sub_100190590()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10000C728(*(void **)(v0 + 24), *(void *)(*(void *)(v0 + 24) + 24));
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 64);
    unint64_t v3 = *(void *)(v2 + 72);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v3 = 0xEB00000000454C42;
    uint64_t v4 = 0x414C494156414E55;
  }
  *(void *)(v0 + 104) = v3;
  (*(void (**)(void, void, void))(*(void *)(v0 + 88) + 104))(*(void *)(v0 + 96), enum case for KeystoreKeyType.temporary(_:), *(void *)(v0 + 80));
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = enum case for DIPKeyAlgorithm.ECC256(_:);
  uint64_t v7 = type metadata accessor for DIPKeyAlgorithm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v5, v6, v7);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100190744;
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 16);
  return DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)(v13, v4, v3, v11, v12, v9, v10, 0);
}

uint64_t sub_100190744()
{
  uint64_t v10 = *(void *)(*v1 + 96);
  uint64_t v2 = *(void *)(*v1 + 88);
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v6 = *(void *)(*v1 + 56);
  uint64_t v7 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v10, v3);
  if (v0)
  {
    return _swift_task_switch(sub_100190990, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
}

uint64_t sub_100190990()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100190A8C()
{
  id v0 = [self standardUserDefaults];
  v1._object = (void *)0x800000010063F030;
  v1._uint64_t countAndFlagsBits = 0xD000000000000024;
  Swift::Bool v2 = NSUserDefaults.internalBool(forKey:)(v1);

  if (v2) {
    return 1;
  }
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)result;
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 valueForEntitlement:v5];

    if (v6)
    {
      _bridgeAnyObjectToAny(_:)();

      swift_unknownObjectRelease();
    }
    else
    {

      memset(v8, 0, sizeof(v8));
    }
    sub_1000BEA14((uint64_t)v8, (uint64_t)v9, (uint64_t *)&unk_100727200);
    if (v10)
    {
      if (swift_dynamicCast()) {
        return v7;
      }
    }
    else
    {
      sub_10000C6CC((uint64_t)v9, (uint64_t *)&unk_100727200);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100190BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10071F4A0 != -1) {
    uint64_t v7 = swift_once();
  }
  __chkstk_darwin(v7);
  *(&v12 - 2) = a1;
  *(&v12 - 1) = a2;
  swift_retain();
  sub_100007764(&qword_100726828);
  OS_dispatch_queue.sync<A>(execute:)();
  if (v3) {
    return swift_release();
  }
  if (!v14)
  {
    sub_10000C6CC((uint64_t)&v13, &qword_100726828);
    uint64_t v11 = static DispatchWorkItemFlags.barrier.getter();
    __chkstk_darwin(v11);
    *(&v12 - 2) = a1;
    *(&v12 - 1) = a2;
    sub_100007764((uint64_t *)&unk_100726830);
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v6);
  }
  sub_10000C6B4(&v13, v15);
  return swift_release();
}

uint64_t sub_100190E68(void *a1, void *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v8 = (unint64_t)a1;
  id v9 = [a1 page];
  uint64_t v10 = (unint64_t *)(v4 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages);
  swift_beginAccess();
  if (*v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((uint64_t)v9 < v15)
    {
LABEL_3:
      swift_beginAccess();
      unint64_t v8 = *v10;
      a4 = a2;
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v10 = v8;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v8 & 0x8000000000000000) != 0
        || (v8 & 0x4000000000000000) != 0)
      {
        unint64_t v8 = sub_1004EC938(v8);
        *uint64_t v10 = v8;
      }
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) > a3)
      {
        uint64_t v12 = *(void **)((v8 & 0xFFFFFFFFFFFFFF8) + 8 * a3 + 0x20);
        *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 8 * a3 + 0x20) = a4;

        specialized Array._endMutation()();
        swift_endAccess();
        unint64_t v8 = a3 + 1;
        a4 = *v10;
        if ((*v10 & 0xC000000000000001) == 0)
        {
          if (v8 < *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            long long v13 = *(void **)(a4 + 8 * v8 + 32);
            id v14 = v13;
            return (uint64_t)v13;
          }
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        swift_bridgeObjectRetain();
        goto LABEL_50;
      }
      __break(1u);
      goto LABEL_48;
    }
  }
  else if ((uint64_t)v9 < *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  id v9 = [(id)v8 page];
  if (!(*v10 >> 62))
  {
    uint64_t v16 = *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_15;
  }
LABEL_48:
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_15:
  if (v9 != (id)v16)
  {
    swift_beginAccess();
    id v28 = a2;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_32;
    }
    goto LABEL_54;
  }
  swift_beginAccess();
  uint64_t v17 = *v10;
  id v18 = a2;
  int v19 = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v10 = v17;
  if (!v19 || v17 < 0 || (v17 & 0x4000000000000000) != 0)
  {
    uint64_t v17 = sub_1004EC938(v17);
    *uint64_t v10 = v17;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_52;
  }
  if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) > a3)
  {
    os_log_type_t v20 = *(void **)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * a3 + 0x20);
    *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * a3 + 0x20) = v18;

    specialized Array._endMutation()();
    swift_endAccess();
    id v21 = [(id)v8 page];
    unint64_t v22 = (unint64_t)sub_10006691C();
    if (v22 >> 62) {
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v21 == (id)v23) {
      return 0;
    }
    uint64_t v24 = *(void *)(a4 + 6056);
    unint64_t v25 = v24 - 1;
    if (__OFSUB__(v24, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    unint64_t v26 = (unint64_t)sub_10006691C();
    a4 = v26;
    if ((v26 & 0xC000000000000001) == 0)
    {
      if ((v25 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v25 < *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v27 = *(id *)(v26 + 8 * v25 + 32);
LABEL_30:
        long long v13 = v27;
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }
      __break(1u);
      goto LABEL_61;
    }
LABEL_50:
    id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_30;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_32:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  id v29 = [(id)v8 page];
  unint64_t v30 = (unint64_t)sub_10006691C();
  if (v30 >> 62) {
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if ((uint64_t)v29 >= v31) {
    return 0;
  }
  uint64_t v23 = *(void *)(a4 + 6056);
  unint64_t v32 = (unint64_t)sub_10006691C();
  if (!(v32 >> 62))
  {
    uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_37;
  }
LABEL_58:
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
LABEL_37:
  swift_bridgeObjectRelease();
  if (v23 >= v33) {
    return 0;
  }
  unint64_t v34 = *(void *)(a4 + 6056);
  uint64_t result = (uint64_t)sub_10006691C();
  if ((result & 0xC000000000000001) == 0)
  {
    if ((v34 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v34 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v36 = *(id *)(result + 8 * v34 + 32);
      goto LABEL_42;
    }
    __break(1u);
    goto LABEL_64;
  }
LABEL_61:
  id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_42:
  long long v13 = v36;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(a4 + 6056);
  BOOL v38 = __OFADD__(v37, 1);
  uint64_t v39 = v37 + 1;
  if (!v38)
  {
    *(void *)(a4 + 6056) = v39;
    return (uint64_t)v13;
  }
LABEL_64:
  __break(1u);
  return result;
}

void sub_1001912FC(unsigned char *a1, void *a2, char *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v47 - v11;
  if (*a1 != 1) {
    goto LABEL_21;
  }
  id v13 = [a2 attributes];
  sub_100025C28(0, &qword_1007223C0);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v53 = v14;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_4;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v16) {
    goto LABEL_20;
  }
LABEL_4:
  if (v16 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v47 = a3;
  uint64_t v48 = v10;
  uint64_t v17 = 0;
  uint64_t v18 = v7;
  int v19 = (uint64_t *)&a3[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
  unint64_t v20 = v53;
  uint64_t v49 = v18;
  uint64_t v55 = (void (**)(char *, uint64_t))(v18 + 8);
  unint64_t v56 = v53 & 0xC000000000000001;
  *(void *)&long long v15 = 136446210;
  long long v51 = v15;
  uint64_t v50 = (char *)&type metadata for Any + 8;
  uint64_t v57 = v16;
  uint64_t v52 = v6;
  do
  {
    if (v56) {
      id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v21 = *(id *)(v20 + 8 * v17 + 32);
    }
    unint64_t v22 = v21;
    id v23 = [v21 identifier:v47, v48, v49, v50];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_100590548(v24, v26);
    LOBYTE(v24) = v28;
    swift_bridgeObjectRelease();
    if (v24)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v30 = *v19;
      uint64_t v58 = *v19;
      *int v19 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10016BB58();
        uint64_t v30 = v58;
      }
      swift_bridgeObjectRelease();
      sub_100561704(v27, v30);
      *int v19 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      defaultLogger()();
      id v31 = v22;
      unint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        v59[0] = v54;
        *(_DWORD *)uint64_t v34 = v51;
        id v35 = [v31 identifier];
        id v36 = v12;
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v39 = v38;

        unint64_t v20 = v53;
        uint64_t v40 = v37;
        uint64_t v12 = v36;
        *(void *)(v34 + 4) = sub_100110D58(v40, v39, v59);

        uint64_t v6 = v52;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "removed cached value for %{public}s", (uint8_t *)v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*v55)(v12, v6);
    }
    else
    {
      swift_endAccess();

      swift_bridgeObjectRelease();
    }
    ++v17;
  }
  while (v57 != v17);
  swift_bridgeObjectRelease();
  uint64_t v10 = v48;
  uint64_t v7 = v49;
  a3 = v47;
LABEL_21:
  defaultLogger()();
  unint64_t v41 = a3;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = v10;
    *(_DWORD *)uint64_t v44 = 134349056;
    uint64_t v46 = (char *)v41 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes;
    swift_beginAccess();
    uint64_t v58 = *(void *)(*(void *)v46 + 16);
    uint64_t v10 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v42, v43, "submitted attr count %{public}ld", v44, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v42 = v41;
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_100191890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v225 = a4;
  uint64_t v224 = a2;
  uint64_t v213 = sub_100007764(&qword_1007267E0);
  uint64_t v212 = *(void *)(v213 - 8);
  __chkstk_darwin(v213);
  uint64_t v8 = (char *)&v204 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v216 = type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v215 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  uint64_t v217 = (uint64_t)&v204 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v204 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v222 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  object = (char *)&v204 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v226 = v4;
  id v16 = sub_100195108();
  if (!v17)
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.invalidSPURL(_:), v10);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v21 = swift_allocError();
LABEL_66:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return v21;
  }
  uint64_t v219 = v10;
  BOOL v65 = *(unsigned char *)(a1 + 48) == 1;
  uint64_t v214 = v14;
  uint64_t v211 = a1;
  if (v65)
  {
    uint64_t v18 = *(void *)(a1 + 32);
    int v19 = *(void **)(a1 + 40);
    *(void *)&long long v233 = v16;
    *((void *)&v233 + 1) = v17;
    swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = v18;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v221 = *((void *)&v233 + 1);
    uint64_t v22 = v233;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v221 = *(void *)(a1 + 40);
    swift_bridgeObjectRetain();
  }
  id v23 = *(void **)(v226 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.unexpectedDaemonState(_:), v219);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v21 = swift_allocError();
    goto LABEL_66;
  }
  uint64_t v207 = v22;
  id v208 = v23;
  uint64_t v24 = sub_10006C434();
  unint64_t v230 = sub_10015CF20((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v229 = sub_10015CF20((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v25 = *(void *)(v224 + 16);
  uint64_t v223 = v13;
  uint64_t v209 = v11;
  uint64_t v206 = v8;
  if (!v25) {
    goto LABEL_67;
  }
  uint64_t v26 = v224 + 32;
  swift_bridgeObjectRetain();
  uint64_t v27 = 0;
  SecTrustRef v205 = v24 + 7;
  v231 = v24;
  unint64_t v228 = v25;
  uint64_t countAndFlagsBits = v26;
  uint64_t v210 = a3;
  while (1)
  {
    if (!*(void *)(a3 + 16)) {
      goto LABEL_10;
    }
    char v28 = (uint64_t *)(v26 + 16 * v27);
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    swift_bridgeObjectRetain_n();
    unint64_t v31 = sub_100590548(v30, v29);
    if (v32) {
      break;
    }
    swift_bridgeObjectRelease_n();
LABEL_10:
    if (++v27 == v25)
    {
      swift_bridgeObjectRelease();
      id v13 = v223;
LABEL_67:
      swift_bridgeObjectRelease();
      if (*(void *)(v230 + 16))
      {
        uint64_t v88 = v211;
        uint64_t v89 = v222;
        uint64_t v90 = object;
        uint64_t v91 = v214;
        (*(void (**)(char *, uint64_t, uint64_t))(v222 + 16))(object, v211 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionAlgorithm, v214);
        uint64_t v92 = (*(uint64_t (**)(char *, uint64_t))(v89 + 88))(v90, v91);
        uint64_t v93 = v92;
        if (v92 == enum case for EncryptionParamsAlgorithmIdentifier.EC_v1_ASN1(_:))
        {
          uint64_t v94 = *(void *)(v88 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate + 8);
          if (v94)
          {
            uint64_t v95 = *(void *)(v88 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate);
            SecCertificateRef v96 = createCertificateFromString(_:)(*(Swift::String *)(&v94 - 1));
            if (!v97)
            {
              SecCertificateRef v98 = v96;
              type metadata accessor for DIPECIESSessionECV1();
              swift_allocObject();
              DIPECIESSessionECV1.init(_:)();
              uint64_t v224 = 0;
              uint64_t v168 = self;
              swift_bridgeObjectRetain();
              Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              *(void *)&long long v233 = 0;
              id v170 = [v168 dataWithJSONObject:isa options:1 error:&v233];

              id v171 = (id)v233;
              if (!v170)
              {
                unint64_t v185 = v171;
                swift_bridgeObjectRelease();
                _convertNSErrorToError(_:)();

                swift_willThrow();
                swift_release();
                goto LABEL_128;
              }
              uint64_t v172 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v174 = v173;

              uint64_t v175 = v224;
              uint64_t v176 = dispatch thunk of DIPECIESSessionECV1.encrypt(_:_:_:)();
              if (v175)
              {
                swift_bridgeObjectRelease();
                sub_10000C5F4(v172, v174);

                swift_release();
                id v13 = v223;
LABEL_128:
                uint64_t v99 = v219;
                goto LABEL_121;
              }
              unint64_t v186 = v179;
              v231 = v178;
              uint64_t v224 = 0;
              sub_10000C5F4(v176, v177);
              uint64_t v187 = DIPSecCertificateCopySubjectPublicKeyInfoSHA256Digest();
              unint64_t v228 = v186;
              if (!v187)
              {
                swift_bridgeObjectRelease();
                uint64_t v202 = v223;
                (*(void (**)(char *, void, uint64_t))(v209 + 104))(v223, enum case for DIPError.Code.internalError(_:), v219);
                sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
                type metadata accessor for DIPError();
                sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                swift_allocError();
                DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
                swift_willThrow();
                sub_10000C5F4((uint64_t)v231, v228);
                unint64_t v203 = v174;
                id v13 = v202;
                uint64_t v99 = v219;
                sub_10000C5F4(v172, v203);

                swift_release();
                goto LABEL_121;
              }
              uint64_t v188 = (void *)v187;
              uint64_t v189 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v218 = v190;

              swift_bridgeObjectRetain();
              Swift::String v191 = Data.base64EncodedString(options:)(0);
              uint64_t countAndFlagsBits = v191._countAndFlagsBits;
              object = (char *)v191._object;
              uint64_t v192 = type metadata accessor for InputValidationRequestV1(0);
              uint64_t v240 = v192;
              uint64_t v241 = sub_1001C6628(&qword_1007267E8, (void (*)(uint64_t))type metadata accessor for InputValidationRequestV1);
              v193 = sub_10002C2D8(&v239);
              v194 = (char *)v193 + *(int *)(v192 + 24);
              uint64_t v195 = v222;
              uint64_t v196 = v93;
              uint64_t v197 = v214;
              (*(void (**)(char *, uint64_t, uint64_t))(v222 + 104))(v194, v196, v214);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v195 + 56))(v194, 0, 1, v197);
              uint64_t v198 = v189;
              unint64_t v199 = v218;
              Swift::String v200 = Data.base16EncodedString()();
              sub_10000C5F4(v198, v199);
              sub_10000C5F4((uint64_t)v231, v228);
              sub_10000C5F4(v172, v174);

              swift_release();
              uint64_t v201 = countAndFlagsBits;
              uint64_t *v193 = v229;
              v193[1] = v201;
              v193[2] = (uint64_t)object;
              *(Swift::String *)((char *)v193 + *(int *)(v192 + 28)) = v200;
              id v13 = v223;
              uint64_t v103 = v224;
              goto LABEL_74;
            }
            swift_bridgeObjectRelease();
            uint64_t v99 = v219;
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v99 = v219;
            (*(void (**)(char *, void, uint64_t))(v209 + 104))(v13, enum case for DIPError.Code.serverResponseInconsistent(_:), v219);
            sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
          }
LABEL_121:
          (*(void (**)(char *, void, uint64_t))(v209 + 104))(v13, enum case for DIPError.Code.internalError(_:), v99);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          uint64_t v21 = swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();

          swift_errorRelease();
LABEL_122:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v21;
        }
        if (v92 != enum case for EncryptionParamsAlgorithmIdentifier.EC_v3(_:))
        {
          int v147 = enum case for EncryptionParamsAlgorithmIdentifier.EC_v3_SH(_:);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v209 + 104))(v13, enum case for DIPError.Code.internalError(_:), v219);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          if (v93 != v147) {
            (*(void (**)(char *, uint64_t))(v222 + 8))(v90, v91);
          }
          uint64_t v99 = v219;
          goto LABEL_121;
        }
        uint64_t v110 = *(void **)(v88 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate + 8);
        if (v110)
        {
          uint64_t v111 = *(void *)(v88 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate);
          id v112 = v110;
        }
        else
        {
          uint64_t v163 = *(void *)(v225 + 24);
          if (v163
            && (uint64_t v164 = (uint64_t *)(v163 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate),
                (id v112 = (void *)v164[1]) != 0))
          {
            uint64_t v111 = *v164;
            swift_bridgeObjectRetain();
          }
          else
          {
            swift_bridgeObjectRelease();
            id v112 = (void *)0xE700000000000000;
            uint64_t v111 = 0x746C7561666564;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v165 = v217;
        uint64_t v103 = 0;
        sub_10006BFC0(v111, v112, v217);
        swift_bridgeObjectRelease();
        *(void *)&v232[0] = v230;
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_bridgeObjectRetain();
        __DataStorage.init(length:)();
        uint64_t v235 = 0;
        long long v233 = 0u;
        long long v234 = 0u;
        sub_100007764(&qword_100726808);
        sub_1001D87AC(&qword_100726810);
        sub_1001D87AC(&qword_100726818);
        v167 = v206;
        createEncryptedDataContainer<A>(with:to:senderSigningKey:encryptor:)();
        swift_release();
        sub_10000C6CC((uint64_t)&v233, &qword_1007265B8);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v165, v216);
        uint64_t v180 = type metadata accessor for InputValidationRequestV3(0);
        uint64_t v240 = v180;
        uint64_t v241 = sub_1001C6628(&qword_100726820, (void (*)(uint64_t))type metadata accessor for InputValidationRequestV3);
        uint64_t v181 = sub_10002C2D8(&v239);
        v182 = (char *)v181 + *(int *)(v180 + 20);
        uint64_t v183 = v212;
        uint64_t v184 = v213;
        (*(void (**)(char *, char *, uint64_t))(v212 + 32))(v182, v167, v213);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v183 + 56))(v182, 0, 1, v184);
        *uint64_t v181 = v229;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v100 = type metadata accessor for InputValidationRequestV1(0);
        uint64_t v240 = v100;
        uint64_t v241 = sub_1001C6628(&qword_1007267E8, (void (*)(uint64_t))type metadata accessor for InputValidationRequestV1);
        uint64_t v101 = sub_10002C2D8(&v239);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v222 + 56))((char *)v101 + *(int *)(v100 + 24), 1, 1, v214);
        v101[1] = 0;
        v101[2] = 0;
        uint64_t *v101 = v229;
        os_log_type_t v102 = (uint64_t *)((char *)v101 + *(int *)(v100 + 28));
        void *v102 = 0;
        v102[1] = 0;
        swift_bridgeObjectRetain();
        uint64_t v103 = 0;
      }
LABEL_74:
      uint64_t v104 = *(void **)(v226 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
      if (v104 && (id v105 = [v104 httpHeaders]) != 0)
      {
        uint64_t v106 = v105;
        uint64_t v107 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        *(void *)&long long v233 = &_swiftEmptyDictionarySingleton;
        uint64_t v108 = v13;
        if (v107)
        {
          uint64_t v109 = swift_bridgeObjectRetain();
          sub_100184A74(v109, (uint64_t *)&v233, "sp headers from context: %s = %s");
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        uint64_t v108 = v13;
        uint64_t v107 = 0;
        *(void *)&long long v233 = &_swiftEmptyDictionarySingleton;
      }
      uint64_t v224 = v103;
      uint64_t v113 = _sSo16DIHttpHeaderNamea8coreidvdE8allCasesSayABGvgZ_0();
      uint64_t v114 = *(void *)(v113 + 16);
      if (v114)
      {
        uint64_t v226 = v107;
        swift_bridgeObjectRetain();
        uint64_t v115 = 0;
        v231 = &_swiftEmptyDictionarySingleton;
        unint64_t v228 = v113;
        uint64_t countAndFlagsBits = v114;
        while (1)
        {
          uint64_t v116 = *(void **)(v113 + 8 * v115 + 32);
          uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v119 = v118;
          uint64_t v120 = v233;
          if (*(void *)(v233 + 16))
          {
            uint64_t v121 = v117;
            id v122 = v116;
            unint64_t v123 = sub_100590548(v121, v119);
            if (v124)
            {
              uint64_t v125 = (uint64_t *)(*(void *)(v120 + 56) + 16 * v123);
              uint64_t v126 = *v125;
              uint64_t v127 = v125[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v130 = v129;
              uint64_t v131 = v231;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)&v232[0] = v131;
              unint64_t v134 = sub_100590548(v128, v130);
              uint64_t v135 = v131[2];
              BOOL v136 = (v133 & 1) == 0;
              uint64_t v137 = v135 + v136;
              if (__OFADD__(v135, v136)) {
                goto LABEL_133;
              }
              char v138 = v133;
              if (v131[3] >= v137)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  sub_10016A364();
                }
              }
              else
              {
                sub_100164294(v137, isUniquelyReferenced_nonNull_native);
                unint64_t v139 = sub_100590548(v128, v130);
                if ((v138 & 1) != (v140 & 1)) {
                  goto LABEL_139;
                }
                unint64_t v134 = v139;
              }
              uint64_t v141 = *(void **)&v232[0];
              v231 = *(void **)&v232[0];
              if (v138)
              {
                uint64_t v142 = (void *)(*(void *)(*(void *)&v232[0] + 56) + 16 * v134);
                swift_bridgeObjectRelease();
                *uint64_t v142 = v126;
                v142[1] = v127;
              }
              else
              {
                *(void *)(*(void *)&v232[0] + 8 * (v134 >> 6) + 64) |= 1 << v134;
                uint64_t v143 = (uint64_t *)(v141[6] + 16 * v134);
                *uint64_t v143 = v128;
                v143[1] = v130;
                v144 = (void *)(v141[7] + 16 * v134);
                void *v144 = v126;
                v144[1] = v127;
                uint64_t v145 = v141[2];
                BOOL v60 = __OFADD__(v145, 1);
                uint64_t v146 = v145 + 1;
                if (v60) {
                  goto LABEL_136;
                }
                v141[2] = v146;
                swift_bridgeObjectRetain();
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v108 = v223;
              uint64_t v113 = v228;
              uint64_t v114 = countAndFlagsBits;
              goto LABEL_86;
            }
          }
          swift_bridgeObjectRelease();
LABEL_86:
          if (v114 == ++v115)
          {
            swift_bridgeObjectRelease();
            goto LABEL_104;
          }
        }
      }
      v231 = &_swiftEmptyDictionarySingleton;
LABEL_104:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v148 = [self standardUserDefaults];
      v149._uint64_t countAndFlagsBits = 0xD000000000000025;
      v149._object = (void *)0x800000010063EEC0;
      Swift::Bool v150 = NSUserDefaults.internalBool(forKey:)(v149);

      if (!v150)
      {
        sub_100030A10((uint64_t)&v239, (uint64_t)v232);
        char v151 = (void *)swift_allocObject();
        id v152 = v208;
        uint64_t v153 = v207;
        v151[2] = v208;
        v151[3] = v153;
        v151[4] = v221;
        sub_10000C6B4(v232, (uint64_t)(v151 + 5));
        uint64_t v154 = v225;
        v151[10] = v231;
        v151[11] = v154;
        id v155 = v152;
        swift_retain();
        sub_100007764(&qword_100726800);
        uint64_t v156 = v224;
        runAsyncAndBlock<A>(timeout:file:function:line:_:)();
        if (v156)
        {
          swift_release();
          (*(void (**)(char *, void, uint64_t))(v209 + 104))(v108, enum case for DIPError.Code.internalError(_:), v219);
          swift_errorRetain();
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          uint64_t v21 = swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_errorRelease();

          _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v239);
        }
        else
        {
          swift_release();
          long long v157 = v233;
          long long v158 = v234;
          uint64_t v159 = v235;
          uint64_t v160 = v236;
          uint64_t v161 = v237;
          uint64_t v162 = v238;
          if (*((void *)&v234 + 1) == 1)
          {

            uint64_t v21 = 0;
          }
          else
          {
            sub_1001D8758(v233, *((uint64_t *)&v233 + 1), v234, *((uint64_t *)&v234 + 1));
            uint64_t v21 = (uint64_t)sub_1001C66D4(v157, BYTE8(v157) & 1, v161, v162, v158, *((uint64_t *)&v158 + 1), v159, v160);
            sub_1001D8704(v157, *((uint64_t *)&v157 + 1), v158, *((uint64_t *)&v158 + 1));
          }
          _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v239);
          sub_1001D8704(v157, *((uint64_t *)&v157 + 1), v158, *((uint64_t *)&v158 + 1));
        }
        goto LABEL_122;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v239);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  uint64_t v33 = *(void *)(*(void *)(a3 + 56) + 8 * v31);
  swift_retain();
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v33 + 16) & 1) != 0 && (*(unsigned char *)(v33 + 17) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_10;
  }
  uint64_t v34 = v24[2];
  if (v34)
  {
    if (v231[4] == v30 && v231[5] == v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_19:
      id v35 = *(void **)(v33 + 72);
      if (v35[2])
      {
        uint64_t v36 = v35[4];
        uint64_t v37 = v35[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v38 = v230;
        char v39 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v233 = v38;
        unint64_t v41 = sub_100590548(v30, v29);
        uint64_t v42 = *(void *)(v38 + 16);
        BOOL v43 = (v40 & 1) == 0;
        uint64_t v44 = v42 + v43;
        if (__OFADD__(v42, v43)) {
          goto LABEL_134;
        }
        char v45 = v40;
        if (*(void *)(v38 + 24) >= v44)
        {
          if ((v39 & 1) == 0) {
            sub_10016A364();
          }
        }
        else
        {
          sub_100164294(v44, v39);
          unint64_t v46 = sub_100590548(v30, v29);
          if ((v45 & 1) != (v47 & 1)) {
            goto LABEL_139;
          }
          unint64_t v41 = v46;
        }
        uint64_t v55 = (void *)v233;
        unint64_t v230 = v233;
        if (v45)
        {
          unint64_t v56 = (void *)(*(void *)(v233 + 56) + 16 * v41);
          swift_bridgeObjectRelease();
          *unint64_t v56 = v36;
          v56[1] = v37;
        }
        else
        {
          *(void *)(v233 + 8 * (v41 >> 6) + 64) |= 1 << v41;
          uint64_t v57 = (uint64_t *)(v55[6] + 16 * v41);
          *uint64_t v57 = v30;
          v57[1] = v29;
          uint64_t v58 = (void *)(v55[7] + 16 * v41);
          *uint64_t v58 = v36;
          v58[1] = v37;
          uint64_t v59 = v55[2];
          BOOL v60 = __OFADD__(v59, 1);
          uint64_t v61 = v59 + 1;
          if (v60) {
            goto LABEL_137;
          }
          v55[2] = v61;
          swift_bridgeObjectRetain();
        }
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v24 = v231;
        unint64_t v25 = v228;
        uint64_t v26 = countAndFlagsBits;
        a3 = v210;
        goto LABEL_10;
      }
      swift_bridgeObjectRetain();
      uint64_t v48 = v230;
      swift_bridgeObjectRetain();
      unint64_t v49 = sub_100590548(v30, v29);
      char v51 = v50;
      swift_bridgeObjectRelease();
      if ((v51 & 1) == 0)
      {
LABEL_55:
        swift_release();
        swift_bridgeObjectRelease_n();
LABEL_63:
        uint64_t v24 = v231;
        unint64_t v25 = v228;
        uint64_t v26 = countAndFlagsBits;
        goto LABEL_10;
      }
      char v52 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v233 = v48;
      uint64_t v26 = countAndFlagsBits;
      if ((v52 & 1) == 0)
      {
        sub_10016A364();
        uint64_t v48 = v233;
      }
      swift_bridgeObjectRelease();
      unint64_t v53 = v49;
      uint64_t v54 = &v243;
      goto LABEL_54;
    }
    if (v34 != 1)
    {
      uint64_t v62 = v205;
      uint64_t v63 = 1;
      while (1)
      {
        uint64_t v64 = v63 + 1;
        if (__OFADD__(v63, 1)) {
          break;
        }
        BOOL v65 = *(v62 - 1) == v30 && *v62 == v29;
        if (v65 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_19;
        }
        v62 += 2;
        ++v63;
        if (v64 == v34) {
          goto LABEL_45;
        }
      }
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
    }
  }
LABEL_45:
  unint64_t v66 = *(void **)(v33 + 72);
  if (!v66[2])
  {
    swift_bridgeObjectRetain();
    uint64_t v48 = v229;
    swift_bridgeObjectRetain();
    unint64_t v78 = sub_100590548(v30, v29);
    char v80 = v79;
    swift_bridgeObjectRelease();
    if ((v80 & 1) == 0) {
      goto LABEL_55;
    }
    char v81 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v233 = v48;
    uint64_t v26 = countAndFlagsBits;
    if ((v81 & 1) == 0)
    {
      sub_10016A364();
      uint64_t v48 = v233;
    }
    swift_bridgeObjectRelease();
    unint64_t v53 = v78;
    uint64_t v54 = &v242;
LABEL_54:
    *(v54 - 32) = v48;
    sub_100560748(v53, v48);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v24 = v231;
    unint64_t v25 = v228;
    goto LABEL_10;
  }
  unint64_t v67 = v66[5];
  unint64_t v218 = v66[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v68 = v229;
  char v69 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v233 = v68;
  unint64_t v71 = sub_100590548(v30, v29);
  uint64_t v72 = *(void *)(v68 + 16);
  BOOL v73 = (v70 & 1) == 0;
  uint64_t v74 = v72 + v73;
  if (__OFADD__(v72, v73)) {
    goto LABEL_135;
  }
  char v75 = v70;
  if (*(void *)(v68 + 24) >= v74)
  {
    if ((v69 & 1) == 0) {
      sub_10016A364();
    }
    goto LABEL_58;
  }
  sub_100164294(v74, v69);
  unint64_t v76 = sub_100590548(v30, v29);
  if ((v75 & 1) == (v77 & 1))
  {
    unint64_t v71 = v76;
LABEL_58:
    char v82 = (void *)v233;
    unint64_t v229 = v233;
    if (v75)
    {
      uint64_t v83 = (unint64_t *)(*(void *)(v233 + 56) + 16 * v71);
      swift_bridgeObjectRelease();
      *uint64_t v83 = v218;
      v83[1] = v67;
    }
    else
    {
      *(void *)(v233 + 8 * (v71 >> 6) + 64) |= 1 << v71;
      uint64_t v84 = (uint64_t *)(v82[6] + 16 * v71);
      uint64_t *v84 = v30;
      v84[1] = v29;
      uint64_t v85 = (unint64_t *)(v82[7] + 16 * v71);
      *uint64_t v85 = v218;
      v85[1] = v67;
      uint64_t v86 = v82[2];
      BOOL v60 = __OFADD__(v86, 1);
      uint64_t v87 = v86 + 1;
      if (v60) {
        goto LABEL_138;
      }
      v82[2] = v87;
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
LABEL_139:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100193798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 80) = a1;
  id v13 = (void *)swift_task_alloc();
  *(void *)(v7 + 88) = v13;
  *id v13 = v7;
  v13[1] = sub_10019387C;
  return sub_1001795C8(v7 + 16, a3, a4, a5, a6, a7);
}

uint64_t sub_10019387C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1001939AC, 0, 0);
  }
}

uint64_t sub_1001939AC()
{
  sub_1000BEA14(v0 + 16, *(void *)(v0 + 80), &qword_100726800);
  Swift::String v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100193A1C(void **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v42 = a5;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  id v16 = [v15 getCurrentValue];
  if (v16)
  {
    uint64_t v17 = v16;
    char v39 = a2;
    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    char v40 = (void *)v19;

    self;
    uint64_t v20 = swift_dynamicCastObjCClass();
    if (v20)
    {
      uint64_t v21 = (void *)v20;
      char v39 = a6;
      uint64_t v22 = v18;
      id v23 = v40;
      id v24 = a3;
      if ([v15 format])
      {
        id v25 = [v15 format];
        if (v25 == (id)1)
        {
          uint64_t v26 = (id *)&DIAttributeImageEncodingPNG;
        }
        else if (v25 == (id)2)
        {
          uint64_t v26 = (id *)&DIAttributeImageEncodingJPEG;
        }
        else
        {
          uint64_t v26 = (id *)&DIAttributeImageEncodingUnknown;
        }
        id v28 = *v26;
      }
      else
      {
        id v28 = [v15 encoding];
      }
      uint64_t v29 = v28;
      id v30 = [a4 idDocType];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v31 = String._bridgeToObjectiveC()();

      swift_bridgeObjectRelease();
      uint64_t v32 = v41;
      uint64_t v33 = sub_100193E98(v22, v23, v29, (uint64_t)v31, v21);
      uint64_t v27 = v32;
      if (!v32)
      {
        uint64_t v35 = v33;
        uint64_t v36 = v34;
        sub_10000C5F4(v22, (unint64_t)v23);

        uint64_t v37 = v39;
        uint64_t *v39 = v35;
        v37[1] = v36;
        return;
      }
      sub_10000C5F4(v22, (unint64_t)v23);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.missingAttribute(_:), v11);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v27 = swift_allocError();
      swift_bridgeObjectRetain();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_10000C5F4(v18, (unint64_t)v40);
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.missingAttribute(_:), v11);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v27 = swift_allocError();
    swift_bridgeObjectRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  *uint64_t v42 = v27;
}

uint64_t sub_100193E98(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v43 = a4;
  uint64_t v40 = a1;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v10 - 8);
  uint64_t v39 = v10;
  __chkstk_darwin(v10);
  uint64_t v41 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [a5 acceptableDocs];
  if (v12)
  {
    uint64_t v13 = v12;
    sub_100025C28(0, &qword_1007225F0);
    unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v36 = a3;
    uint64_t v37 = v5;
    uint64_t v35 = a2;
    if (v14 >> 62) {
      goto LABEL_26;
    }
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v15)
    {
      unint64_t v42 = v14 & 0xC000000000000001;
      uint64_t v16 = 4;
      while (1)
      {
        uint64_t v6 = (_WORD *)(v16 - 4);
        id v17 = v42 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v14 + 8 * v16);
        id v18 = v17;
        uint64_t v19 = v16 - 3;
        if (__OFADD__(v6, 1)) {
          break;
        }
        uint64_t v6 = [v17 type];
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v22 = v21;
        if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23) {
          goto LABEL_22;
        }
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v25) {
          goto LABEL_23;
        }

        ++v16;
        if (v19 == v15) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_26:
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_15:
    swift_bridgeObjectRelease();
    a3 = v36;
    a2 = v35;
  }
  id v18 = [objc_allocWithZone((Class)DIAttributeDocumentScanRequirements) init];
  if (v18)
  {
    sub_100007764((uint64_t *)&unk_100726920);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_100610730;
    uint64_t v27 = (void *)DIAttributeImageEncodingJPEG;
    *(void *)(v26 + 32) = DIAttributeImageEncodingJPEG;
    type metadata accessor for DIAttributeImageEncoding(0);
    uint64_t v6 = v18;
    id v28 = v27;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v6 setSupportedEncoding:isa];
  }
  defaultLogger()();
  id v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v6 = (_WORD *)swift_slowAlloc();
    *uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "no document scan requirement is specified, using default requirement", (uint8_t *)v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v39);
  if (!v18)
  {
    __break(1u);
LABEL_22:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    a3 = v36;
    a2 = v35;
  }
  uint64_t v32 = (void (*)(char *, uint64_t))v18;
  uint64_t v33 = sub_100194280(v40, a2, a3, v32);

  return v33;
}

uint64_t sub_100194280(uint64_t a1, void *a2, void *a3, void (*a4)(char *, uint64_t))
{
  uint64_t v90 = a1;
  id v91 = a2;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v92 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v94 = (char *)v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v89 = (char *)v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v97 = (char *)v86 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v86 - v14;
  defaultLogger()();
  uint64_t v16 = a3;
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v95 = v9;
  uint64_t v96 = v8;
  uint64_t v93 = v6;
  if (v19)
  {
    uint64_t v88 = a4;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v99 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v98 = sub_100110D58(v21, v22, &v99);
    uint64_t v9 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v88;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, " ===== format entered = %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v96;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v15, v8);
  id v24 = v97;
  defaultLogger()();
  char v25 = a4;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  id v28 = &stru_10071A000;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v88 = v23;
    id v30 = (uint8_t *)v29;
    uint64_t v87 = swift_slowAlloc();
    uint64_t v99 = v87;
    *(_DWORD *)id v30 = 136315138;
    v86[1] = v30 + 4;
    id v31 = [v25 supportedEncoding];
    type metadata accessor for DIAttributeImageEncoding(0);
    uint64_t v32 = v16;
    uint64_t v33 = v25;
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = Array.description.getter();
    unint64_t v36 = v35;
    uint64_t v8 = v96;
    swift_bridgeObjectRelease();
    uint64_t v37 = v34;
    char v25 = v33;
    uint64_t v16 = v32;
    id v28 = &stru_10071A000;
    uint64_t v98 = sub_100110D58(v37, v36, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, " ===== supported list = %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v23 = v88;
    swift_slowDealloc();

    uint64_t v38 = v97;
  }
  else
  {

    uint64_t v38 = v24;
  }
  v23(v38, v8);
  id v39 = [v25 v28[210].attr];
  type metadata accessor for DIAttributeImageEncoding(0);
  uint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v39) = sub_10020F620((uint64_t)v16, v40);
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
    (*(void (**)(char *, void, uint64_t))(v92 + 104))(v94, enum case for DIPError.Code.unsupportedImageEncoding(_:), v93);
    unint64_t v45 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_21:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return v45;
  }
  uint64_t v97 = v16;
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;
  if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v43 == v44)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v46 & 1) == 0)
    {
      v73._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v99 = 0x616D693A61746164;
      unint64_t v100 = 0xEB000000002F6567;
      String.append(_:)(v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v74._uint64_t countAndFlagsBits = 0x2C3436657361623BLL;
      v74._object = (void *)0xE800000000000000;
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      uint64_t v76 = v99;
      unint64_t v75 = v100;
      Swift::String v77 = Data.base64EncodedString(options:)(0);
      uint64_t v99 = v76;
      unint64_t v100 = v75;
      swift_bridgeObjectRetain();
      String.append(_:)(v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v99;
    }
  }
  char v47 = v25;
  id v48 = objc_allocWithZone((Class)CIImage);
  uint64_t v50 = v90;
  unint64_t v49 = (unint64_t)v91;
  sub_10002CEB0(v90, (unint64_t)v91);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  char v52 = (char *)[v48 initWithData:isa];
  sub_10000C5F4(v50, v49);

  if (!v52)
  {
    (*(void (**)(char *, void, uint64_t))(v92 + 104))(v94, enum case for DIPError.Code.imageConversionFailed(_:), v93);
    unint64_t v45 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_21;
  }
  id v91 = [objc_allocWithZone((Class)CIContext) init];
  CGColorSpaceRef v53 = (CGColorSpaceRef)[v52 colorSpace];
  if (v53 || (CGColorSpaceRef v53 = CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3)) != 0)
  {
    id v54 = [v47 maximumCompressionRatio];
    CGFloat.init(truncating:)();
    uint64_t v56 = v55;

    sub_100007764((uint64_t *)&unk_100726930);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100610730;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v58 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 32) = v58;
    *(void *)(inited + 40) = v56;
    unint64_t v59 = sub_10015DB74(inited);
    sub_10051E184(v59);
    swift_bridgeObjectRelease();
    type metadata accessor for CIImageRepresentationOption(0);
    sub_1001C6628(&qword_10071F9B0, type metadata accessor for CIImageRepresentationOption);
    Class v60 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v61 = v91;
    id v62 = [v91 JPEGRepresentationOfImage:v52 colorSpace:v53 options:v60];

    CGColorSpaceRef v63 = v53;
    if (v62)
    {
      uint64_t v94 = v52;
      uint64_t v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v66 = v65;

      defaultLogger()();
      sub_10002CEB0(v64, v66);
      unint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v88 = v23;
        char v69 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)char v69 = 134349056;
        char v70 = v69;
        uint64_t v71 = 0;
        switch(v66 >> 62)
        {
          case 1uLL:
            LODWORD(v71) = HIDWORD(v64) - v64;
            if (__OFSUB__(HIDWORD(v64), v64))
            {
              __break(1u);
LABEL_33:
              __break(1u);
              JUMPOUT(0x1001950F8);
            }
            uint64_t v71 = (int)v71;
LABEL_30:
            uint64_t v99 = v71;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            sub_10000C5F4(v64, v66);
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "size of compressed image is %{public}ld", v70, 0xCu);
            swift_slowDealloc();
            uint64_t v23 = v88;
            break;
          case 2uLL:
            uint64_t v79 = *(void *)(v64 + 16);
            uint64_t v78 = *(void *)(v64 + 24);
            BOOL v80 = __OFSUB__(v78, v79);
            uint64_t v71 = v78 - v79;
            if (!v80) {
              goto LABEL_30;
            }
            goto LABEL_33;
          case 3uLL:
            goto LABEL_30;
          default:
            uint64_t v71 = BYTE6(v66);
            goto LABEL_30;
        }
      }
      else
      {
        sub_10000C5F4(v64, v66);
      }

      v23(v89, v8);
      v81._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v99 = 0x616D693A61746164;
      unint64_t v100 = 0xEB000000002F6567;
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v82._uint64_t countAndFlagsBits = 0x2C3436657361623BLL;
      v82._object = (void *)0xE800000000000000;
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      uint64_t v84 = v99;
      unint64_t v83 = v100;
      Swift::String v85 = Data.base64EncodedString(options:)(0);
      uint64_t v99 = v84;
      unint64_t v100 = v83;
      swift_bridgeObjectRetain();
      String.append(_:)(v85);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000C5F4(v64, v66);

      unint64_t v45 = v99;
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v92 + 104))(v94, enum case for DIPError.Code.jpegEncodingFailed(_:), v93);
      unint64_t v45 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v92 + 104))(v94, enum case for DIPError.Code.invalidColorSpace(_:), v93);
    unint64_t v45 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  return v45;
}

id sub_100195108()
{
  id result = *(id *)(v0 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (result)
  {
    id result = [result serviceURL];
    if (result)
    {
      uint64_t v2 = result;
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v5 = v4;

      uint64_t v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0) {
        uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v6)
      {
        uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 24);
          if (v8)
          {
            if (*(unsigned char *)(v8 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_allowUrlOverride)) {
              return (id)v3;
            }
          }
        }
      }
      id result = (id)swift_bridgeObjectRelease();
    }
  }
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *(void *)(v9 + 24);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *(void **)(v10 + 152);
  if (v11[2])
  {
    uint64_t v3 = v11[4];
    unint64_t v12 = v11[5];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      uint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v13)
    {
      swift_bridgeObjectRetain();
      return (id)v3;
    }
    return 0;
  }
  if (*(unsigned char *)(v10 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_allowUrlOverride)) {
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_100195224(uint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t v20 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  unint64_t v9 = a1[1];
  uint64_t v12 = a1[2];
  unint64_t v11 = a1[3];
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v21 = v12;
    uint64_t v16 = v15;
    v19[0] = swift_slowAlloc();
    uint64_t v26 = v19[0];
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v22 = v10;
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_100110D58(v22, v9, &v26);
    v19[1] = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_100110D58(v21, v11, &v26);
    uint64_t v10 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v20, (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v12 = v21;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v26 = *a2;
  *a2 = 0x8000000000000000;
  sub_100562120(v12, v11, v10, v9, isUniquelyReferenced_nonNull_native);
  *a2 = v26;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*sub_100195524(uint64_t a1, int a2, uint64_t a3))(void)
{
  uint64_t v82 = a3;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v89 = *(uint8_t **)(v6 - 8);
  uint64_t v90 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  BOOL v80 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  os_log_type_t v14 = (char *)&v76 - v13;
  int v83 = a2;
  if ((a2 & 1) == 0)
  {
    uint64_t v15 = sub_10006CF18();
    if (v16) {
      return (void (*)(void))v15;
    }
    uint64_t v18 = v10;
    defaultLogger()();
    BOOL v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "retrieving more nonce from INO", v21, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = v18;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v9);
  }
  uint64_t v77 = v10;
  uint64_t v78 = v9;
  uint64_t v84 = v8;
  Swift::String v81 = v3;
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v22 = sub_100007764((uint64_t *)&unk_100723460);
  uint64_t v23 = *(void *)(*(void *)(v22 - 8) + 72);
  unint64_t v24 = (*(unsigned __int8 *)(*(void *)(v22 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80);
  uint64_t v25 = (_OWORD *)swift_allocObject();
  v25[1] = xmmword_100611010;
  id v88 = v25;
  uint64_t v26 = (char *)v25 + v24;
  os_log_type_t v27 = &v26[*(int *)(v22 + 48)];
  uint64_t v28 = enum case for DIPError.PropertyKey.inoProviderID(_:);
  uint64_t v29 = type metadata accessor for DIPError.PropertyKey();
  id v17 = *(void (**)(void))(*(void *)(v29 - 8) + 104);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v26, v28, v29);
  id v30 = *(void **)(a1 + 16);
  uint64_t v31 = v30[8];
  uint64_t v32 = v30[9];
  *((void *)v27 + 3) = &type metadata for String;
  *(void *)os_log_type_t v27 = v31;
  *((void *)v27 + 1) = v32;
  uint64_t v87 = v32;
  uint64_t v85 = v22;
  uint64_t v33 = *(int *)(v22 + 48);
  uint64_t v34 = v23;
  unint64_t v35 = &v26[v23 + v33];
  v17();
  uint64_t v36 = v30[2];
  uint64_t v37 = v30[3];
  *((void *)v35 + 3) = &type metadata for String;
  *(void *)unint64_t v35 = v36;
  *((void *)v35 + 1) = v37;
  uint64_t v86 = v37;
  uint64_t v38 = &v26[2 * v23];
  ((void (*)(char *, void, uint64_t))v17)(v38, enum case for DIPError.PropertyKey.spProviderID(_:), v29);
  uint64_t v79 = a1;
  uint64_t v39 = *(void *)(a1 + 24);
  if (v39)
  {
    uint64_t v40 = *(void *)(v39 + 64);
    uint64_t v41 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v40 = 0x414C494156414E55;
    uint64_t v41 = 0xEB00000000454C42;
  }
  uint64_t v42 = v85;
  uint64_t v43 = (uint64_t *)&v38[*(int *)(v85 + 48)];
  v43[3] = (uint64_t)&type metadata for String;
  uint64_t *v43 = v40;
  v43[1] = v41;
  ((void (*)(char *, void, uint64_t))v17)(&v26[3 * v34], enum case for DIPError.PropertyKey.spWorkflowID(_:), v29);
  if (v39)
  {
    uint64_t v44 = *(void *)(v39 + 16);
    uint64_t v45 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v44 = 0x414C494156414E55;
    uint64_t v45 = 0xEB00000000454C42;
  }
  uint64_t v46 = *(int *)(v42 + 48);
  char v47 = (uint64_t *)&v26[3 * v34 + v46];
  v47[3] = (uint64_t)&type metadata for String;
  uint64_t *v47 = v44;
  v47[1] = v45;
  id v48 = &v26[4 * v34 + v46];
  v17();
  unint64_t v49 = v91;
  char v50 = v91[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state];
  *((void *)v48 + 3) = &type metadata for DIPState;
  *id v48 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v51 = sub_10015C504((uint64_t)v88);
  char v52 = *(void **)&v49[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService];
  if (!v52)
  {
    swift_bridgeObjectRelease();
    (*((void (**)(char *, void, uint64_t))v89 + 13))(v84, enum case for DIPError.Code.unexpectedDaemonState(_:), v90);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return v17;
  }
  CGColorSpaceRef v53 = *(void **)&v49[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService];
  if (!v53)
  {
    id v63 = v52;
    swift_bridgeObjectRelease();
    (*((void (**)(char *, void, uint64_t))v89 + 13))(v84, enum case for DIPError.Code.unexpectedDaemonState(_:), v90);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return v17;
  }
  char v54 = v83 & 1;
  if (v83) {
    uint64_t v55 = 1;
  }
  else {
    uint64_t v55 = 8;
  }
  uint64_t v56 = swift_allocObject();
  *(unsigned char *)(v56 + 16) = v54;
  *(void *)(v56 + 24) = v49;
  *(void *)(v56 + 32) = v51;
  *(void *)(v56 + 40) = v79;
  *(void *)(v56 + 48) = v53;
  uint64_t v57 = v82;
  *(void *)(v56 + 56) = v55;
  *(void *)(v56 + 64) = v57;
  *(void *)(v56 + 72) = v52;
  id v58 = v52;
  id v59 = v53;
  id v60 = v58;
  id v61 = v49;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v62 = v81;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  id v17 = v62;
  if (v62)
  {
    swift_release();
    (*((void (**)(char *, void, uint64_t))v89 + 13))(v84, enum case for DIPError.Code.internalError(_:), v90);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    swift_errorRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();

    return v17;
  }
  uint64_t v87 = v55;
  id v88 = v59;
  id v91 = (char *)v60;
  Swift::String v81 = 0;
  swift_release();
  id v17 = (void (*)(void))v92[9];
  uint64_t v64 = v92[14];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_27:
    (*((void (**)(char *, void, uint64_t))v89 + 13))(v84, enum case for DIPError.Code.serverResponseInconsistent(_:), v90);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return v17;
  }
  if (*(void *)(v64 + 16) != v87)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  id v17 = *(void (**)(void))(v64 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v65 = v80;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    os_log_type_t v68 = (uint8_t *)swift_slowAlloc();
    uint64_t v90 = swift_slowAlloc();
    v92[0] = v90;
    *(_DWORD *)os_log_type_t v68 = 136315138;
    uint64_t v89 = v68 + 4;
    swift_bridgeObjectRetain();
    uint64_t v69 = Array.description.getter();
    uint64_t v70 = v64;
    unint64_t v72 = v71;
    swift_bridgeObjectRelease();
    v92[17] = sub_100110D58(v69, v72, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v73 = v70;
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "received nonces: %s", v68, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v77 + 8))(v80, v78);
  }
  else
  {
    uint64_t v73 = v64;
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v77 + 8))(v65, v78);
  }
  id v75 = v88;
  if (v83)
  {
  }
  else
  {
    sub_10006D248(v73);
    swift_bridgeObjectRelease();
    sub_10006CF18();
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_100196238(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 408) = a8;
  *(void *)(v8 + 416) = v13;
  *(void *)(v8 + 392) = a6;
  *(void *)(v8 + 400) = a7;
  *(void *)(v8 + 376) = a4;
  *(void *)(v8 + 384) = a5;
  *(unsigned char *)(v8 + 544) = a2;
  *(void *)(v8 + 360) = a1;
  *(void *)(v8 + 368) = a3;
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 424) = v9;
  *(void *)(v8 + 432) = *(void *)(v9 - 8);
  *(void *)(v8 + 440) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPError.Code();
  *(void *)(v8 + 448) = v10;
  *(void *)(v8 + 456) = *(void *)(v10 - 8);
  *(void *)(v8 + 464) = swift_task_alloc();
  return _swift_task_switch(sub_10019636C, 0, 0);
}

uint64_t sub_10019636C()
{
  if (*(unsigned char *)(v0 + 544) == 1)
  {
    id v1 = sub_100195108();
    if (v2)
    {
      uint64_t v3 = *(void *)(*(void *)(v0 + 384) + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_nonceURL);
        *(void *)(v0 + 472) = v4;
        if (v4)
        {
          if (*(unsigned char *)(v4 + 32))
          {
            uint64_t v5 = *(void *)(v4 + 16);
            uint64_t v6 = *(void **)(v4 + 24);
            uint64_t v35 = (uint64_t)v1;
            uint64_t v36 = v2;
            swift_bridgeObjectRetain();
            v7._uint64_t countAndFlagsBits = v5;
            v7._object = v6;
            String.append(_:)(v7);
            uint64_t v9 = v35;
            uint64_t v8 = v36;
            swift_retain();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_retain();
            swift_bridgeObjectRelease();
            uint64_t v9 = *(void *)(v4 + 16);
            uint64_t v8 = *(void *)(v4 + 24);
            swift_bridgeObjectRetain();
          }
          *(void *)(v0 + 480) = v8;
          uint64_t v31 = (void *)swift_task_alloc();
          *(void *)(v0 + 488) = v31;
          void *v31 = v0;
          v31[1] = sub_100196884;
          uint64_t v32 = *(void *)(v0 + 400);
          uint64_t v33 = *(void *)(v0 + 408);
          uint64_t v34 = *(void *)(v0 + 384);
          return sub_10017A630(v0 + 136, v9, v8, v32, v33, v34);
        }
      }
      uint64_t v21 = *(void *)(v0 + 456);
      uint64_t v20 = *(void *)(v0 + 464);
      uint64_t v22 = *(void *)(v0 + 448);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v20, enum case for DIPError.Code.invalidSPURL(_:), v22);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      swift_bridgeObjectRetain();
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 456) + 104))(*(void *)(v0 + 464), enum case for DIPError.Code.invalidSPURL(_:), *(void *)(v0 + 448));
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      swift_bridgeObjectRetain();
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 432);
    uint64_t v10 = *(void *)(v0 + 440);
    uint64_t v12 = *(void *)(v0 + 424);
    uint64_t v13 = *(void *)(v0 + 384);
    UUID.init()();
    uint64_t v14 = UUID.uuidString.getter();
    uint64_t v16 = v15;
    *(void *)(v0 + 504) = v15;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    uint64_t v17 = *(void *)(v13 + 24);
    if (v17)
    {
      uint64_t v19 = *(void *)(v17 + 64);
      unint64_t v18 = *(void *)(v17 + 72);
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v18 = 0xEB00000000454C42;
      uint64_t v19 = 0x414C494156414E55;
    }
    *(void *)(v0 + 512) = v18;
    uint64_t v25 = *(void *)(v0 + 400);
    uint64_t v26 = *(void *)(v0 + 368);
    *(void *)(v0 + 256) = 0;
    *(void *)(v0 + 264) = 0xE000000000000000;
    *(void *)(v0 + 272) = v14;
    *(void *)(v0 + 280) = v16;
    *(void *)(v0 + 288) = v25;
    *(void *)(v0 + 296) = v19;
    *(void *)(v0 + 304) = v18;
    *(_OWORD *)(v0 + 312) = 0u;
    *(_OWORD *)(v0 + 328) = 0u;
    *(_OWORD *)(v0 + 344) = 0u;
    uint64_t v27 = *(void *)(v26 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
    uint64_t v28 = *(void *)(v26 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8);
    *(void *)(v0 + 520) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000AAD28(0, 0);
    swift_bridgeObjectRetain();
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 528) = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_100196A50;
    uint64_t v30 = *(void *)(v0 + 408);
    return sub_1002BDF24(v0 + 16, v0 + 256, v30, v27, v28);
  }
}

uint64_t sub_100196884()
{
  *(void *)(*(void *)v1 + 496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100196C84;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1001969A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001969A0()
{
  uint64_t v1 = *(void *)(v0 + 360);
  swift_release();
  long long v2 = *(_OWORD *)(v0 + 136);
  long long v3 = *(_OWORD *)(v0 + 152);
  long long v4 = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v1 + 48) = v4;
  *(_OWORD *)uint64_t v1 = v2;
  *(_OWORD *)(v1 + 16) = v3;
  long long v5 = *(_OWORD *)(v0 + 200);
  long long v6 = *(_OWORD *)(v0 + 216);
  long long v7 = *(_OWORD *)(v0 + 232);
  *(void *)(v1 + 112) = *(void *)(v0 + 248);
  *(_OWORD *)(v1 + 80) = v6;
  *(_OWORD *)(v1 + 96) = v7;
  *(_OWORD *)(v1 + 64) = v5;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100196A50()
{
  *(void *)(*(void *)v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    long long v2 = sub_100196D04;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000AAC30(0, 0);
    long long v2 = sub_100196BB0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100196BB0()
{
  uint64_t v1 = *(void *)(v0 + 360);
  long long v3 = *(_OWORD *)(v0 + 96);
  long long v2 = *(_OWORD *)(v0 + 112);
  long long v4 = *(_OWORD *)(v0 + 80);
  *(void *)(v1 + 112) = *(void *)(v0 + 128);
  *(_OWORD *)(v1 + 80) = v3;
  *(_OWORD *)(v1 + 96) = v2;
  *(_OWORD *)(v1 + 64) = v4;
  long long v5 = *(_OWORD *)(v0 + 16);
  long long v6 = *(_OWORD *)(v0 + 32);
  long long v7 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v1 + 48) = v7;
  *(_OWORD *)uint64_t v1 = v5;
  *(_OWORD *)(v1 + 16) = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(0, 0);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100196C84()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100196D04()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(0, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(0, 0);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100196DF4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v393 = a1;
  uint64_t v357 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v361 = *(void *)(v357 - 8);
  uint64_t v3 = __chkstk_darwin(v357);
  v352 = (char *)&v343 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v360 = (char *)&v343 - v5;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v358 = *(void *)(v6 - 8);
  uint64_t v359 = v6;
  __chkstk_darwin(v6);
  v349 = (char *)&v343 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_1007266F0);
  __chkstk_darwin(v8 - 8);
  v345 = (char *)&v343 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_1007266F8);
  __chkstk_darwin(v10 - 8);
  v344 = (char *)&v343 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DateComponents();
  uint64_t v347 = *(void *)(v12 - 8);
  uint64_t v348 = v12;
  __chkstk_darwin(v12);
  v355 = (char *)&v343 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v356 = type metadata accessor for Calendar();
  uint64_t v354 = *(void *)(v356 - 8);
  __chkstk_darwin(v356);
  v353 = (char *)&v343 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007764(&qword_1007239B0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  v346 = (char *)&v343 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v362 = (uint64_t)&v343 - v18;
  uint64_t v19 = sub_100007764(&qword_100726700);
  __chkstk_darwin(v19 - 8);
  uint64_t v367 = (uint64_t)&v343 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v391 = (int *)type metadata accessor for IdentityProofingResponse(0);
  uint64_t v388 = *((void *)v391 - 1);
  __chkstk_darwin(v391);
  uint64_t v379 = (uint64_t)&v343 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100007764(&qword_100726708);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v378 = (uint64_t)&v343 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v389 = (uint64_t)&v343 - v25;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v382 = *(void *)(v26 - 8);
  uint64_t v383 = v26;
  __chkstk_darwin(v26);
  v381 = (char *)&v343 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for HardwareAttestationType();
  uint64_t v386 = *(void *)(v28 - 8);
  uint64_t v387 = v28;
  __chkstk_darwin(v28);
  v384 = (char *)&v343 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v385 = type metadata accessor for IdentityProofingRequest(0);
  __chkstk_darwin(v385);
  v390 = (uint64_t *)((char *)&v343 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = sub_100007764(&qword_1007266A8);
  __chkstk_darwin(v31 - 8);
  v366 = (char *)&v343 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for ODNAssessmentResult(0);
  __chkstk_darwin(v33 - 8);
  uint64_t v365 = (uint64_t)&v343 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v372 = type metadata accessor for VerifiedClaim(0);
  uint64_t v363 = *(void *)(v372 - 8);
  uint64_t v35 = __chkstk_darwin(v372);
  uint64_t v350 = (uint64_t)&v343 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v364 = (uint64_t)&v343 - v38;
  __chkstk_darwin(v37);
  uint64_t v368 = (uint64_t)&v343 - v39;
  uint64_t v415 = type metadata accessor for DIPError.Code();
  uint64_t v416 = *(void *)(v415 - 8);
  __chkstk_darwin(v415);
  v417 = (char *)&v343 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for VerifiedClaimPresentment(0);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v370 = v41;
  uint64_t v371 = v42;
  __chkstk_darwin(v41);
  uint64_t v373 = (uint64_t)&v343 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v396 = sub_100007764(&qword_100723718);
  v394 = *(void **)(v396 - 8);
  __chkstk_darwin(v396);
  v395 = (char *)&v343 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v397 = (void *)sub_100007764((uint64_t *)&unk_100726500);
  v399 = (char *)*(v397 - 1);
  uint64_t v45 = __chkstk_darwin(v397);
  v376 = (char *)&v343 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __chkstk_darwin(v45);
  v377 = (char *)&v343 - v48;
  uint64_t v375 = v49;
  __chkstk_darwin(v47);
  uint64_t v398 = (uint64_t)&v343 - v50;
  uint64_t v51 = sub_100007764((uint64_t *)&unk_100726568);
  __chkstk_darwin(v51 - 8);
  uint64_t v409 = (uint64_t)&v343 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for Logger();
  uint64_t v403 = *(void *)(v53 - 8);
  uint64_t v404 = v53;
  uint64_t v54 = __chkstk_darwin(v53);
  v380 = (char *)&v343 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __chkstk_darwin(v54);
  v351 = (char *)&v343 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  v392 = (char *)&v343 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  v401 = (char *)&v343 - v61;
  __chkstk_darwin(v60);
  v402 = (char *)&v343 - v62;
  uint64_t v63 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v63 - 8);
  uint64_t v405 = (uint64_t)&v343 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v408 = type metadata accessor for DIPSignpost();
  uint64_t v407 = *(void *)(v408 - 8);
  __chkstk_darwin(v408);
  v410 = (char *)&v343 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = __chkstk_darwin(v66);
  v412 = (char *)&v343 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __chkstk_darwin(v68);
  v411 = (void (*)(uint64_t, uint64_t, uint64_t, char *))((char *)&v343 - v71);
  __chkstk_darwin(v70);
  uint64_t v73 = (char *)&v343 - v72;
  sub_100007764((uint64_t *)&unk_1007225C0);
  Swift::String v74 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v75 = (*(unsigned __int8 *)(*(void *)v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v74 + 80);
  uint64_t v76 = swift_allocObject();
  long long v369 = xmmword_100610730;
  *(_OWORD *)(v76 + 16) = xmmword_100610730;
  unint64_t v77 = v76 + v75 + v74[14];
  uint64_t v78 = *(void (**)(void))(v67 + 104);
  v78();
  uint64_t v374 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state;
  char v79 = *(unsigned char *)(v2 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state);
  *(void *)(v77 + 24) = &type metadata for DIPState;
  *(unsigned char *)unint64_t v77 = v79;
  unint64_t v80 = sub_10015C504(v76);
  unint64_t v480 = v80;
  v418 = (char *)v2;
  Swift::String v81 = *(void **)(v2 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow);
  if (!v81)
  {
    id v95 = (id)v80;
    (*(void (**)(char *, void, uint64_t))(v416 + 104))(v417, enum case for DIPError.Code.unexpectedDaemonState(_:), v415);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    swift_bridgeObjectRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_24:
    swift_bridgeObjectRelease();
    return (uint64_t)v95;
  }
  ((void (*)(char *, void, uint64_t))v78)(v73, enum case for DIPError.PropertyKey.inoProviderID(_:), v66);
  uint64_t v82 = v81[2];
  uint64_t v83 = *(void *)(v82 + 64);
  uint64_t v84 = *(void *)(v82 + 72);
  *((void *)&v458 + 1) = &type metadata for String;
  *(void *)&long long v457 = v83;
  *((void *)&v457 + 1) = v84;
  sub_1000078A8(&v457, &v448);
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v446[0] = v480;
  unint64_t v480 = 0x8000000000000000;
  sub_1005622A8(&v448, (uint64_t)v73, isUniquelyReferenced_nonNull_native);
  unint64_t v480 = *(void *)&v446[0];
  swift_bridgeObjectRelease();
  uint64_t v86 = *(void (**)(char *, uint64_t))(v67 + 8);
  v86(v73, v66);
  ((void (*)(char *, void, uint64_t))v78)(v73, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v66);
  uint64_t v87 = v81[2];
  uint64_t v88 = *(void *)(v87 + 16);
  uint64_t v89 = *(void *)(v87 + 24);
  *((void *)&v458 + 1) = &type metadata for String;
  *(void *)&long long v457 = v88;
  *((void *)&v457 + 1) = v89;
  sub_1000078A8(&v457, &v448);
  swift_bridgeObjectRetain();
  char v90 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v446[0] = v480;
  unint64_t v480 = 0x8000000000000000;
  sub_1005622A8(&v448, (uint64_t)v73, v90);
  unint64_t v480 = *(void *)&v446[0];
  swift_bridgeObjectRelease();
  id v400 = v73;
  v414 = (void (*)(uint64_t, uint64_t))v86;
  v86(v73, v66);
  uint64_t v91 = (uint64_t)v411;
  v413 = v78;
  ((void (*)(void (*)(uint64_t, uint64_t, uint64_t, char *), void, uint64_t))v78)(v411, enum case for DIPError.PropertyKey.spProviderID(_:), v66);
  v482 = v81;
  uint64_t v92 = v81[3];
  if (v92)
  {
    uint64_t v93 = *(void *)(v92 + 64);
    uint64_t v94 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v93 = 0x414C494156414E55;
    uint64_t v94 = 0xEB00000000454C42;
  }
  uint64_t v96 = (uint64_t)v418;
  uint64_t v97 = (uint64_t)v412;
  *((void *)&v458 + 1) = &type metadata for String;
  *(void *)&long long v457 = v93;
  *((void *)&v457 + 1) = v94;
  sub_1000078A8(&v457, &v448);
  char v98 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v446[0] = v480;
  unint64_t v480 = 0x8000000000000000;
  sub_1005622A8(&v448, v91, v98);
  unint64_t v480 = *(void *)&v446[0];
  swift_bridgeObjectRelease();
  v414(v91, v66);
  ((void (*)(uint64_t, void, uint64_t))v413)(v97, enum case for DIPError.PropertyKey.spWorkflowID(_:), v66);
  uint64_t v99 = v482[3];
  if (v99)
  {
    uint64_t v100 = *(void *)(v99 + 16);
    uint64_t v101 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v100 = 0x414C494156414E55;
    uint64_t v101 = 0xEB00000000454C42;
  }
  *((void *)&v458 + 1) = &type metadata for String;
  *(void *)&long long v457 = v100;
  *((void *)&v457 + 1) = v101;
  sub_1000078A8(&v457, &v448);
  char v102 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v446[0] = v480;
  unint64_t v480 = 0x8000000000000000;
  sub_1005622A8(&v448, v97, v102);
  unint64_t v480 = *(void *)&v446[0];
  swift_bridgeObjectRelease();
  uint64_t v103 = v414;
  v414(v97, v66);
  uint64_t v104 = v482[2];
  uint64_t v105 = *(void *)(v104 + 128);
  if (v105)
  {
    uint64_t v106 = *(void *)(v104 + 120);
    uint64_t v107 = (uint64_t)v400;
    ((void (*)(id, void, uint64_t))v413)(v400, enum case for DIPError.PropertyKey.inoLaunchTier(_:), v66);
    *((void *)&v458 + 1) = &type metadata for String;
    *(void *)&long long v457 = v106;
    *((void *)&v457 + 1) = v105;
    sub_1000078A8(&v457, &v448);
    swift_bridgeObjectRetain();
    char v108 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v446[0] = v480;
    unint64_t v480 = 0x8000000000000000;
    sub_1005622A8(&v448, v107, v108);
    unint64_t v480 = *(void *)&v446[0];
    swift_bridgeObjectRelease();
    uint64_t v109 = v107;
    uint64_t v96 = (uint64_t)v418;
    v103(v109, v66);
  }
  uint64_t v110 = *(void **)(v96 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (!v110)
  {
    (*(void (**)(char *, void, uint64_t))(v416 + 104))(v417, enum case for DIPError.Code.unexpectedDaemonState(_:), v415);
    id v95 = (id)v480;
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    swift_bridgeObjectRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_21:
    swift_release();
    goto LABEL_24;
  }
  uint64_t v111 = *(void **)(v96 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService);
  if (!v111)
  {
    (*(void (**)(char *, void, uint64_t))(v416 + 104))(v417, enum case for DIPError.Code.unexpectedDaemonState(_:), v415);
    id v95 = v110;
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    goto LABEL_21;
  }
  id v112 = v110;
  v414 = v111;
  static DaemonSignposts.getVerificationResultWaitForBAA.getter();
  DIPSignpost.init(_:)();
  OS_dispatch_group.wait(interval:)();
  char v113 = static DispatchTimeoutResult.== infix(_:_:)();
  uint64_t v114 = v409;
  if ((v113 & 1) == 0)
  {
    uint64_t v115 = (uint64_t)v402;
    defaultLogger()();
    uint64_t v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v116, v117))
    {
      uint64_t v118 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v118 = 0;
      _os_log_impl((void *)&_mh_execute_header, v116, v117, "BAA creation timed out.", v118, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, uint64_t))(v403 + 8))(v115, v404);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  uint64_t v119 = type metadata accessor for SharingCredentials(0);
  uint64_t v120 = *(void *)(v119 - 8);
  uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56);
  uint64_t v122 = v120 + 56;
  v121(v114, 1, 1, v119);
  unint64_t v123 = sub_10006C648();
  uint64_t v124 = v406;
  sub_1001B8BCC((uint64_t)v123, 0, 0, 0xF000000000000000, (uint64_t)v479);
  if (v124)
  {
    swift_bridgeObjectRelease();
    uint64_t v125 = v415;
    uint64_t v126 = v410;
    uint64_t v127 = v417;
LABEL_23:
    id v95 = (id)v480;
    (*(void (**)(char *, void, uint64_t))(v416 + 104))(v127, enum case for DIPError.Code.internalError(_:), v125);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    swift_release();
    swift_errorRelease();
    sub_10000C6CC(v409, (uint64_t *)&unk_100726568);
    (*(void (**)(char *, uint64_t))(v407 + 8))(v126, v408);
    goto LABEL_24;
  }
  uint64_t v406 = v122;
  v411 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v121;
  v412 = (char *)v119;
  swift_bridgeObjectRelease();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(&v457, *((uint64_t *)&v458 + 1));
  uint64_t v129 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()();
  uint64_t v131 = v130;
  v413 = 0;
  id v400 = v112;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v457);
  uint64_t v132 = (uint64_t)&v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey];
  swift_beginAccess();
  sub_100048D6C(v132, (uint64_t)&v457, &qword_100726528);
  if (*((void *)&v458 + 1))
  {
    sub_100030A10((uint64_t)&v457, (uint64_t)&v448);
    sub_10000C6CC((uint64_t)&v457, &qword_100726528);
    sub_10000C728(&v448, *((uint64_t *)&v449 + 1));
    char v133 = v413;
    uint64_t v134 = dispatch thunk of IdentityKey.attestation(_:)();
    if (v133)
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v448);
      uint64_t v125 = v415;
      id v112 = v400;
      uint64_t v126 = v410;
      uint64_t v127 = v417;
      goto LABEL_23;
    }
    uint64_t v135 = (void *)v134;
    v413 = 0;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v448);
  }
  else
  {
    sub_10000C6CC((uint64_t)&v457, &qword_100726528);
    uint64_t v135 = _swiftEmptyArrayStorage;
  }
  BOOL v136 = v482;
  uint64_t v405 = v129;
  v478 = v135;
  if (v135[2])
  {
    uint64_t v126 = v410;
    goto LABEL_33;
  }
  defaultLogger()();
  id v152 = Logger.logObject.getter();
  os_log_type_t v153 = static os_log_type_t.debug.getter();
  BOOL v154 = os_log_type_enabled(v152, v153);
  uint64_t v126 = v410;
  if (v154)
  {
    id v155 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v155 = 0;
    _os_log_impl((void *)&_mh_execute_header, v152, v153, "INO attestation is empty; generating key pair for INO",
      v155,
      2u);
    BOOL v136 = v482;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v403 + 8))(v401, v404);
  sub_100030A10((uint64_t)v479, (uint64_t)&v448);
  uint64_t v156 = (void *)swift_allocObject();
  sub_10000C6B4(&v448, (uint64_t)(v156 + 2));
  uint64_t v157 = v405;
  v156[7] = v136;
  v156[8] = v157;
  v156[9] = v131;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100007764(&qword_100726540);
  long long v158 = v413;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  if (v158)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_55:
    uint64_t v125 = v415;
    id v112 = v400;
    uint64_t v127 = v417;
    goto LABEL_23;
  }
  v413 = 0;
  swift_release();
  swift_beginAccess();
  sub_1001D9214((uint64_t)&v457, v132, &qword_100726528);
  swift_endAccess();
  sub_100048D6C(v132, (uint64_t)&v457, &qword_100726528);
  if (*((void *)&v458 + 1))
  {
    sub_100030A10((uint64_t)&v457, (uint64_t)&v448);
    sub_10000C6CC((uint64_t)&v457, &qword_100726528);
    sub_10000C728(&v448, *((uint64_t *)&v449 + 1));
    uint64_t v162 = v413;
    uint64_t v163 = dispatch thunk of IdentityKey.attestation(_:)();
    if (v162)
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v448);
      swift_bridgeObjectRelease();
      goto LABEL_55;
    }
    uint64_t v135 = (void *)v163;
    v413 = 0;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v448);
    BOOL v136 = v482;
  }
  else
  {
    sub_10000C6CC((uint64_t)&v457, &qword_100726528);
    uint64_t v135 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v478 = v135;
LABEL_33:
  sub_100048D6C(v132, (uint64_t)&v457, &qword_100726528);
  if (!*((void *)&v458 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10000C6CC((uint64_t)&v457, &qword_100726528);
    uint64_t v127 = v417;
    uint64_t v159 = v415;
    (*(void (**)(char *, void, uint64_t))(v416 + 104))(v417, enum case for DIPError.Code.unexpectedDaemonState(_:), v415);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v125 = v159;
    swift_allocError();
    swift_bridgeObjectRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v160 = v479;
LABEL_59:
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v160);
    swift_bridgeObjectRelease();
    id v112 = v400;
    goto LABEL_23;
  }
  sub_10000C6B4(&v457, (uint64_t)v477);
  uint64_t v127 = v417;
  if (!v135[2])
  {
    swift_bridgeObjectRelease();
    uint64_t v161 = v415;
    (*(void (**)(char *, void, uint64_t))(v416 + 104))(v127, enum case for DIPError.Code.unexpectedDaemonState(_:), v415);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v125 = v161;
    swift_allocError();
    swift_bridgeObjectRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
LABEL_58:
    uint64_t v160 = v477;
    goto LABEL_59;
  }
  uint64_t v137 = *(void *)(v136[2] + 128);
  v402 = (char *)v131;
  if (v137) {
    goto LABEL_36;
  }
  uint64_t v164 = sub_10006CA3C();
  uint64_t v165 = v164[2];
  if (v165)
  {
    uint64_t v166 = &v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
    swift_beginAccess();
    v167 = v164 + 5;
    do
    {
      uint64_t v168 = *(void *)v166;
      if (*(void *)(*(void *)v166 + 16))
      {
        uint64_t v169 = *(v167 - 1);
        uint64_t v170 = *v167;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v171 = sub_100590548(v169, v170);
        if (v172)
        {
          uint64_t v173 = *(void *)(*(void *)(v168 + 56) + 8 * v171);
          swift_retain();
          swift_bridgeObjectRelease();
          char v174 = *(unsigned char *)(v173 + 17);
          swift_release();
          swift_bridgeObjectRelease();
          if (v174)
          {
            swift_bridgeObjectRelease();
            BOOL v136 = v482;
            goto LABEL_36;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      v167 += 2;
      --v165;
    }
    while (v165);
  }
  swift_bridgeObjectRelease();
  BOOL v136 = v482;
  if (*(void *)&v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim])
  {
    swift_bridgeObjectRelease();
    uint64_t v175 = v392;
    defaultLogger()();
    uint64_t v176 = Logger.logObject.getter();
    os_log_type_t v177 = static os_log_type_t.debug.getter();
    BOOL v178 = os_log_type_enabled(v176, v177);
    unint64_t v179 = v410;
    uint64_t v180 = v412;
    uint64_t v181 = v411;
    if (v178)
    {
      v182 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v182 = 0;
      _os_log_impl((void *)&_mh_execute_header, v176, v177, "skipping proofing with server", v182, 2u);
      swift_slowDealloc();
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v403 + 8))(v175, v404);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
    sub_10000C6CC(v409, (uint64_t *)&unk_100726568);
    (*(void (**)(char *, uint64_t))(v407 + 8))(v179, v408);
    v181(v393, 1, 1, v180);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v477);
    swift_bridgeObjectRelease();
    goto LABEL_75;
  }
LABEL_36:
  id v138 = v400;
  v476 = _swiftEmptyArrayStorage;
  v475 = (char *)_swiftEmptyArrayStorage;
  v474 = (char *)_swiftEmptyArrayStorage;
  v473 = _swiftEmptyArrayStorage;
  v472 = _swiftEmptyArrayStorage;
  unint64_t v471 = sub_10015D9A0((uint64_t)_swiftEmptyArrayStorage);
  v470 = (char *)_swiftEmptyArrayStorage;
  unint64_t v469 = sub_10015DCA4((uint64_t)_swiftEmptyArrayStorage);
  v468 = _swiftEmptyArrayStorage;
  unint64_t v139 = (void *)v136[2];
  char v140 = (void *)v139[16];
  if (v140)
  {
    uint64_t v141 = v139[15];
    uint64_t v142 = *(void *)&v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim];
    if (!v142
      || ((uint64_t v143 = *(void *)(v142 + 32), v144 = *(void **)(v142 + 40), v143 == v141)
        ? (BOOL v145 = v140 == v144)
        : (BOOL v145 = 0),
          !v145
       && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
       && (v143 == v139[17] ? (BOOL v146 = v144 == (void *)v139[18]) : (BOOL v146 = 0),
           !v146 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&long long v457 = 0;
      *((void *)&v457 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      *(void *)&long long v457 = 0xD000000000000024;
      *((void *)&v457 + 1) = 0x800000010063E6C0;
      v204._uint64_t countAndFlagsBits = v141;
      v204._object = v140;
      String.append(_:)(v204);
      swift_bridgeObjectRelease();
      uint64_t v127 = v417;
      uint64_t v205 = v415;
      (*(void (**)(char *, void, uint64_t))(v416 + 104))(v417, enum case for DIPError.Code.unexpectedDaemonState(_:), v415);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      swift_bridgeObjectRetain();
      uint64_t v125 = v205;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
      goto LABEL_88;
    }
    uint64_t v147 = v142 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim;
    ((void (*)(char *, uint64_t, uint64_t))v394[2])(v395, v142 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim, v396);
    sub_1000B6120(&qword_100726518, &qword_100723718);
    sub_1000B6120(&qword_100726520, &qword_100723718);
    swift_retain();
    uint64_t v148 = v398;
    JWSSignedJSON.init(payload:)();
    uint64_t v149 = swift_bridgeObjectRetain();
    Swift::Bool v150 = v397;
    JWSSignedJSON.setCertificateChain(_:)((Swift::OpaquePointer)v149);
    if (v151)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      (*((void (**)(uint64_t, void *))v399 + 1))(v148, v150);
LABEL_50:
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
LABEL_95:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v477);
      swift_bridgeObjectRelease();
      uint64_t v127 = v417;
      uint64_t v126 = v410;
LABEL_96:
      uint64_t v125 = v415;
      id v112 = v400;
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
    JWSSignedJSON.setKid(_:)();
    uint64_t v206 = v399;
    uint64_t v207 = (char *)*((void *)v399 + 2);
    id v208 = v376;
    v401 = v399 + 16;
    v395 = v207;
    ((void (*)(char *, uint64_t, void *))v207)(v376, v148, v150);
    sub_100030A10((uint64_t)v477, (uint64_t)&v457);
    uint64_t v209 = v150;
    unint64_t v210 = (v206[80] + 16) & ~(unint64_t)v206[80];
    v413 = 0;
    unint64_t v211 = (v375 + v210 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v212 = swift_allocObject();
    unint64_t v213 = v212 + v210;
    uint64_t v214 = (void (*)(void))*((void *)v206 + 4);
    uint64_t v215 = v208;
    uint64_t v216 = v209;
    ((void (*)(unint64_t, char *, void *))v214)(v213, v215, v209);
    sub_10000C6B4(&v457, v212 + v211);
    uint64_t v217 = v377;
    unint64_t v218 = v413;
    runAsyncAndBlock<A>(timeout:file:function:line:_:)();
    if (v218)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      (*((void (**)(uint64_t, void *))v399 + 1))(v398, v216);
      goto LABEL_50;
    }
    v259 = (void *)*((void *)v399 + 1);
    v399 += 8;
    v413 = v214;
    v260 = v216;
    uint64_t v261 = v398;
    v394 = v259;
    ((void (*)(uint64_t, void *))v259)(v398, v260);
    swift_release();
    ((void (*)(uint64_t, char *, void *))v413)(v261, v217, v260);
    uint64_t v262 = v373;
    ((void (*)(uint64_t, uint64_t, void *))v395)(v373, v261, v260);
    *(void *)(v262 + *(int *)(v370 + 20)) = *(void *)(v147 + *(int *)(v372 + 20));
    sub_100007764(&qword_100726600);
    unint64_t v263 = (*(unsigned __int8 *)(v371 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v371 + 80);
    uint64_t v264 = swift_allocObject();
    *(_OWORD *)(v264 + 16) = v369;
    v401 = (char *)v264;
    uint64_t v265 = sub_1001D95B4(v262, v264 + v263, type metadata accessor for VerifiedClaimPresentment);
    __chkstk_darwin(v265);
    v266 = v418;
    swift_retain();
    uint64_t v267 = swift_bridgeObjectRetain();
    sub_1001BFBB8(v267, (void (*)(uint64_t, uint64_t, _OWORD *))sub_1001D7938);
    swift_bridgeObjectRelease();
    id v273 = v266;
    uint64_t v274 = swift_bridgeObjectRetain();
    sub_1001BFE50(v274, (uint64_t)v273, (uint64_t)&v480, &v475, &v468, (uint64_t *)&v469);

    uint64_t v303 = swift_bridgeObjectRelease();
    if (*(void *)(v142 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData))
    {
      __chkstk_darwin(v303);
      uint64_t v304 = swift_bridgeObjectRetain();
      sub_1001C0118(v304, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001D7958);
      v413 = 0;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1001D961C(v373, type metadata accessor for VerifiedClaimPresentment);
      ((void (*)(uint64_t, void *))v394)(v398, v397);
    }
    else
    {
      swift_release();
      sub_1001D961C(v373, type metadata accessor for VerifiedClaimPresentment);
      ((void (*)(uint64_t, void *))v394)(v398, v397);
      v413 = 0;
    }
    id v138 = v400;
  }
  else
  {
    v401 = 0;
  }
  uint64_t v183 = sub_10006CA3C();
  uint64_t v184 = v183[2];
  if (v184)
  {
    swift_bridgeObjectRetain();
    unint64_t v185 = v183 + 5;
    while (1)
    {
      uint64_t v186 = *v185;
      *(void *)&long long v457 = *(v185 - 1);
      *((void *)&v457 + 1) = v186;
      swift_bridgeObjectRetain();
      uint64_t v187 = v413;
      sub_10019DD48((uint64_t *)&v457, (uint64_t)v418, (uint64_t *)&v469, (uint64_t)&v480, v405, (uint64_t)v402, (void **)&v474, &v475, &v468, &v472, &v473, &v476);
      v413 = v187;
      if (v187) {
        break;
      }
      v185 += 2;
      swift_bridgeObjectRelease();
      if (!--v184)
      {
        swift_bridgeObjectRelease();
        id v138 = v400;
        goto LABEL_82;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
    goto LABEL_95;
  }
LABEL_82:
  swift_bridgeObjectRelease();
  uint64_t v188 = v482;
  char v189 = sub_10006CCE0();
  uint64_t v127 = v417;
  uint64_t v126 = v410;
  if ((v189 & 1) == 0)
  {
    *(void *)&v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator] = 0;
    swift_release();
    goto LABEL_103;
  }
  uint64_t v190 = (uint64_t)v418;
  uint64_t v191 = *(void *)&v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager];
  if (!v191)
  {
    (*(void (**)(char *, void, uint64_t))(v416 + 104))(v417, enum case for DIPError.Code.unexpectedDaemonState(_:), v415);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_101:
    v413 = 0;
    uint64_t v203 = v404;
    goto LABEL_102;
  }
  uint64_t v192 = *(void **)&v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService];
  if (!v192)
  {
    (*(void (**)(char *, void, uint64_t))(v416 + 104))(v417, enum case for DIPError.Code.unexpectedDaemonState(_:), v415);
    swift_retain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    goto LABEL_101;
  }
  swift_retain();
  swift_retain();
  v397 = v192;
  id v193 = [v138 serviceName];
  v194 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v398 = v195;
  v399 = v194;

  LODWORD(v395) = *(unsigned __int8 *)(v190 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius);
  uint64_t v196 = *(void *)(v190 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8);
  v394 = *(void **)(v190 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
  uint64_t v197 = *(void **)(v190 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper);
  int v198 = *(unsigned __int8 *)(v190 + v374);
  *(void *)&long long v459 = 0;
  long long v457 = 0u;
  long long v458 = 0u;
  *(void *)&long long v450 = 0;
  long long v448 = 0u;
  long long v449 = 0u;
  type metadata accessor for AssessDuringProofingODNator(0);
  memset(v481, 0, 80);
  swift_allocObject();
  id v199 = v197;
  swift_retain();
  Swift::String v200 = v397;
  swift_bridgeObjectRetain();
  uint64_t v201 = v413;
  uint64_t v202 = sub_1002F6988(v188, (uint64_t)v399, v398, (int)v395, (uint64_t)v394, v196, v198, v197, v191, v200, (uint64_t)&v457, (uint64_t)&v448, v481, 0);
  if (v201)
  {
    swift_release();

    v413 = 0;
    uint64_t v127 = v417;
    uint64_t v203 = v404;
LABEL_102:
    uint64_t v219 = v380;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(char *, uint64_t))(v403 + 8))(v219, v203);
    *(void *)&v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator] = 0;
    swift_release();
    swift_errorRelease();
    goto LABEL_103;
  }
  uint64_t v398 = v191;
  v399 = (char *)v200;
  uint64_t v268 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator;
  uint64_t v269 = (uint64_t)v418;
  *(void *)&v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator] = v202;
  swift_release();
  uint64_t v270 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim;
  uint64_t v271 = *(void *)(v269 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim);
  if (v271)
  {
    swift_retain();
    sub_1001B5898(v368, (uint64_t)v188, v271);
    v413 = 0;
    v281 = v280;
    sub_1001D961C(v368, type metadata accessor for VerifiedClaim);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v413 = 0;
    v281 = 0;
  }
  uint64_t v282 = v482[3];
  if (v282)
  {
    v283 = *(void **)(v282 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes);
    swift_bridgeObjectRetain();
  }
  else
  {
    v283 = _swiftEmptyArrayStorage;
  }
  uint64_t v284 = swift_bridgeObjectRetain();
  v285 = sub_1004D2144(v284, 1u, (uint64_t)v283);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&v446[0] = v285;
  uint64_t v286 = v482[3];
  if (v286)
  {
    v287 = *(void **)(v286 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes);
    swift_bridgeObjectRetain();
  }
  else
  {
    v287 = _swiftEmptyArrayStorage;
  }
  uint64_t v288 = swift_bridgeObjectRetain();
  v289 = sub_1004D2144(v288, 2u, (uint64_t)v287);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100162E54((uint64_t)v289);
  uint64_t v290 = (uint64_t)v418;
  uint64_t v291 = *(void *)&v418[v270];
  uint64_t v292 = *(void *)&v446[0];
  *(void *)&long long v459 = 0;
  long long v457 = 0u;
  long long v458 = 0u;
  uint64_t v293 = type metadata accessor for DIPPregeneratedAssessment(0);
  long long v448 = 0u;
  long long v449 = 0u;
  *(void *)&long long v450 = 0;
  uint64_t v294 = (uint64_t)v366;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v293 - 8) + 56))(v366, 1, 1, v293);
  uint64_t v295 = *(void *)(v290 + v268);
  swift_retain();
  swift_retain();
  uint64_t v296 = v365;
  uint64_t v188 = v482;
  sub_1001AA604(v482, v291, v281, v292, (uint64_t)&v457, (uint64_t)&v448, v294, v295, v365, 0, 0);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v294, &qword_1007266A8);
  sub_10000C6CC((uint64_t)&v448, &qword_100726690);
  sub_10000C6CC((uint64_t)&v457, &qword_100726690);
  sub_1001D961C(v296, type metadata accessor for ODNAssessmentResult);
  uint64_t v127 = v417;
  uint64_t v126 = v410;
LABEL_103:
  v467 = _swiftEmptyArrayStorage;
  uint64_t v220 = swift_beginAccess();
  if (!*(void *)(v188[761] + 16))
  {
LABEL_110:
    uint64_t v226 = v482[2];
    uint64_t v227 = *(void *)(v226 + 24);
    v399 = *(char **)(v226 + 16);
    sub_10000C728(v477, v477[3]);
    uint64_t v398 = v227;
    swift_bridgeObjectRetain();
    unint64_t v228 = v384;
    dispatch thunk of IdentityKey.attestationType()();
    unint64_t v229 = v467;
    unint64_t v230 = v470;
    v231 = v473;
    v232 = v475;
    long long v233 = v474;
    long long v234 = v472;
    swift_bridgeObjectRetain();
    v392 = v230;
    swift_bridgeObjectRetain();
    v397 = v231;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v395 = v233;
    swift_bridgeObjectRetain();
    v394 = v234;
    swift_bridgeObjectRetain();
    uint64_t v235 = v381;
    UUID.init()();
    uint64_t v236 = UUID.uuidString.getter();
    uint64_t v238 = v237;
    (*(void (**)(char *, uint64_t))(v382 + 8))(v235, v383);
    if (qword_10071F518 != -1) {
      swift_once();
    }
    uint64_t v239 = qword_100760380;
    uint64_t v240 = v390;
    void *v390 = 0;
    v240[1] = 0xE000000000000000;
    v240[2] = v236;
    v240[3] = v238;
    *((_OWORD *)v240 + 2) = 0u;
    *((_OWORD *)v240 + 3) = 0u;
    *((_OWORD *)v240 + 4) = 0u;
    uint64_t v241 = v398;
    v240[10] = v399;
    v240[11] = v241;
    uint64_t v242 = (int *)v385;
    (*(void (**)(char *, char *, uint64_t))(v386 + 32))((char *)v240 + *(int *)(v385 + 28), v228, v387);
    *(void *)((char *)v240 + v242[8]) = v229;
    *(void *)((char *)v240 + v242[9]) = v401;
    *(void *)((char *)v240 + v242[10]) = v392;
    *(void *)((char *)v240 + v242[11]) = v397;
    *(void *)((char *)v240 + v242[12]) = v232;
    *(void *)((char *)v240 + v242[13]) = v395;
    *(void *)((char *)v240 + v242[14]) = v394;
    *(void *)((char *)v240 + v242[15]) = v239;
    uint64_t v466 = 0;
    uint64_t v244 = v388;
    uint64_t v243 = v389;
    uint64_t v245 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v388 + 56))(v389, 1, 1, v391);
    v401 = (char *)&v343;
    __chkstk_darwin(v245);
    v246 = v482;
    id v112 = v400;
    swift_bridgeObjectRetain();
    uint64_t v247 = v413;
    DIPRetrier.sync(_:)();
    if (v247)
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
      swift_bridgeObjectRelease();
      sub_10000C6CC(v243, &qword_100726708);
      swift_errorRelease();
      sub_1001D961C((uint64_t)v240, type metadata accessor for IdentityProofingRequest);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v477);
      swift_bridgeObjectRelease();
      uint64_t v127 = v417;
      uint64_t v125 = v415;
      goto LABEL_23;
    }
    uint64_t v248 = v378;
    sub_100048D6C(v243, v378, &qword_100726708);
    int v249 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v244 + 48))(v248, 1, v391);
    uint64_t v127 = v417;
    if (v249 == 1)
    {
      swift_bridgeObjectRelease();
      sub_10000C6CC(v248, &qword_100726708);
LABEL_124:
      uint64_t v272 = v415;
      (*(void (**)(char *, void, uint64_t))(v416 + 104))(v127, enum case for DIPError.Code.serverResponseInconsistent(_:), v415);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v125 = v272;
      swift_allocError();
      swift_bridgeObjectRetain();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
      sub_10000C6CC(v389, &qword_100726708);
      swift_errorRelease();
      sub_1001D961C((uint64_t)v390, type metadata accessor for IdentityProofingRequest);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
    v250 = v246;
    uint64_t v251 = v248;
    uint64_t v252 = v379;
    sub_1001D7624(v251, v379, type metadata accessor for IdentityProofingResponse);
    uint64_t v253 = *(void *)(v252 + 112);
    v254 = v402;
    if (!v253)
    {
      sub_1001D961C(v379, type metadata accessor for IdentityProofingResponse);
      swift_bridgeObjectRelease();
      goto LABEL_124;
    }
    uint64_t v255 = v250[2];
    uint64_t v257 = *(void *)(v255 + 64);
    v256 = *(void **)(v255 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001C8A10(v477, v253, v257, v256, v405, v254);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v275 = v367;
    sub_100048D6C(v379 + v391[7], v367, &qword_100726700);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v363 + 48))(v275, 1, v372) != 1)
    {
      sub_1001D7624(v367, v364, type metadata accessor for VerifiedClaim);
      uint64_t v297 = *(void *)(v379 + v391[8]);
      if (v297)
      {
        v298 = &_swiftEmptyDictionarySingleton;
        *(void *)&long long v457 = &_swiftEmptyDictionarySingleton;
        uint64_t v299 = *(void *)(v297 + 16);
        if (v299)
        {
          uint64_t v300 = *(void *)(sub_100007764(&qword_100724178) - 8);
          uint64_t v301 = v297 + ((*(unsigned __int8 *)(v300 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v300 + 80));
          uint64_t v302 = *(void *)(v300 + 72);
          swift_bridgeObjectRetain_n();
          do
          {
            sub_1001A0C1C(&v457, v301, (uint64_t)v418, (uint64_t)v482, v477);
            v301 += v302;
            --v299;
          }
          while (v299);
          swift_bridgeObjectRelease_n();
          v298 = (void *)v457;
        }
      }
      else
      {
        v298 = 0;
      }
      swift_beginAccess();
      v306 = v482;
      swift_retain();
      uint64_t v307 = swift_bridgeObjectRetain();
      uint64_t v308 = sub_1001C8F2C(v307, (uint64_t)v306);
      swift_release();
      swift_bridgeObjectRelease();
      v411 = (void (*)(uint64_t, uint64_t, uint64_t, char *))sub_1001C90E8(v477, v364, (uint64_t)v298, v308, *(unsigned char *)(v306[2]+ OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimDataConsistency) & 1);
      v412 = v310;
      v413 = 0;
      uint64_t v311 = v309;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v312 = v364;
      JWSSignedJSON.payload.getter();
      v446[6] = v443;
      v446[7] = v444;
      uint64_t v447 = v445;
      v446[2] = v439;
      v446[3] = v440;
      v446[4] = v441;
      v446[5] = v442;
      v446[0] = v437;
      v446[1] = v438;
      uint64_t v405 = v439;
      uint64_t v406 = *((void *)&v438 + 1);
      swift_bridgeObjectRetain();
      sub_1001D6030((uint64_t)v446);
      JWSSignedJSON.payload.getter();
      long long v454 = v434;
      long long v455 = v435;
      uint64_t v456 = v436;
      long long v450 = v430;
      long long v451 = v431;
      long long v452 = v432;
      long long v453 = v433;
      long long v448 = v428;
      long long v449 = v429;
      v402 = (char *)*((void *)&v433 + 1);
      uint64_t v313 = v434;
      swift_bridgeObjectRetain();
      sub_1001D6030((uint64_t)&v448);
      JWSSignedJSON.payload.getter();
      long long v461 = v423;
      long long v462 = v424;
      long long v463 = v425;
      long long v464 = v426;
      uint64_t v465 = v427;
      long long v459 = v421;
      long long v460 = v422;
      long long v457 = v419;
      long long v458 = v420;
      v401 = (char *)*((void *)&v423 + 1);
      uint64_t v314 = v424;
      swift_bridgeObjectRetain();
      sub_1001D6030((uint64_t)&v457);
      uint64_t v315 = v312;
      uint64_t v316 = v350;
      sub_1001D95B4(v315, v350, type metadata accessor for VerifiedClaim);
      id v317 = [v400 serviceName];
      v318 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v398 = v319;
      v399 = v318;

      v320 = v482;
      uint64_t v321 = *(void *)(v482[2] + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_applicationACL);
      type metadata accessor for DIPStoredVerifiedClaim(0);
      v322 = (void *)swift_allocObject();
      uint64_t v323 = OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData;
      *(void *)((char *)v322 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData) = 0;
      uint64_t v324 = v405;
      v322[2] = v406;
      v322[3] = v324;
      v322[4] = v402;
      v322[5] = v313;
      v322[6] = v401;
      v322[7] = v314;
      sub_1001D7624(v316, (uint64_t)v322 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim, type metadata accessor for VerifiedClaim);
      *(void *)((char *)v322 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claimData) = v411;
      *(void *)((char *)v322 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_unverifiedClaimData) = v412;
      *(void *)((char *)v322 + v323) = v311;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v325 = (void *)((char *)v322 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_serviceName);
      uint64_t v326 = v398;
      void *v325 = v399;
      v325[1] = v326;
      *(void *)((char *)v322 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_acl) = v321;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v358 + 56))(v362, 1, 1, v359);
      uint64_t v327 = v320[2] + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimTTL;
      if ((*(unsigned char *)(v327 + 8) & 1) != 0 || (*(void *)v327 & 0x8000000000000000) == 0)
      {
        static Calendar.current.getter();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v354 + 56))(v344, 1, 1, v356);
        uint64_t v328 = type metadata accessor for TimeZone();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v328 - 8) + 56))(v345, 1, 1, v328);
        DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
        v329 = v349;
        Date.init()();
        uint64_t v330 = (uint64_t)v346;
        v331 = v355;
        v332 = v353;
        Calendar.date(byAdding:to:wrappingComponents:)();
        (*(void (**)(char *, uint64_t))(v358 + 8))(v329, v359);
        (*(void (**)(char *, uint64_t))(v347 + 8))(v331, v348);
        (*(void (**)(char *, uint64_t))(v354 + 8))(v332, v356);
        uint64_t v333 = v362;
        sub_10000C6CC(v362, &qword_1007239B0);
        sub_1000BEA14(v330, v333, &qword_1007239B0);
      }
      if (qword_10071F5D0 != -1) {
        swift_once();
      }
      uint64_t v334 = static DispatchWorkItemFlags.barrier.getter();
      __chkstk_darwin(v334);
      v335 = v413;
      OS_dispatch_queue.sync<A>(flags:execute:)();
      v413 = v335;
      if (v335)
      {
        v336 = *(void (**)(char *, uint64_t))(v361 + 8);
        v361 += 8;
        v336(v360, v357);
        defaultLogger()();
        v337 = Logger.logObject.getter();
        os_log_type_t v338 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v337, v338))
        {
          v339 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v339 = 0;
          _os_log_impl((void *)&_mh_execute_header, v337, v338, "storing claim failed, attempting update instead", v339, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v403 + 8))(v351, v404);
        uint64_t v340 = static DispatchWorkItemFlags.barrier.getter();
        __chkstk_darwin(v340);
        OS_dispatch_queue.sync<A>(flags:execute:)();
        v336(v352, v357);
        swift_errorRelease();
        v413 = 0;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v361 + 8))(v360, v357);
      }
      *(void *)&v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim] = v322;
      swift_retain();
      swift_release();
      v341._uint64_t countAndFlagsBits = 0xD000000000000023;
      v341._object = (void *)0x800000010063E660;
      v342._uint64_t countAndFlagsBits = 0x3464313061663533;
      v342._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v342, v341);

      swift_release();
      swift_release();
      sub_10000C6CC(v362, &qword_1007239B0);
      sub_1001D961C(v364, type metadata accessor for VerifiedClaim);
      sub_1001D961C(v379, type metadata accessor for IdentityProofingResponse);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
      (*(void (**)(char *, uint64_t))(v407 + 8))(v410, v408);
      sub_10000C6CC(v389, &qword_100726708);
      swift_errorRelease();
      sub_1001D961C((uint64_t)v390, type metadata accessor for IdentityProofingRequest);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v477);
      swift_bridgeObjectRelease();
      sub_1000BEA14(v409, v393, (uint64_t *)&unk_100726568);
LABEL_75:
      swift_bridgeObjectRelease();
      return 0;
    }
    sub_10000C6CC(v367, &qword_100726700);
    uint64_t v276 = *(void *)(v379 + v391[9]);
    if (v276)
    {
      v277 = (void *)swift_allocObject();
      v277[2] = v482;
      v277[3] = v276;
      v278 = v418;
      v277[4] = v418;
      type metadata accessor for LegacySynthesizedWorkflows();
      swift_retain_n();
      swift_retain();
      id v279 = v278;
      runAsyncAndBlock<A>(timeout:file:function:line:_:)();

      swift_release();
      swift_release();
      swift_release();
      sub_1001D961C(v379, type metadata accessor for IdentityProofingResponse);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
      sub_10000C6CC(v409, (uint64_t *)&unk_100726568);
      (*(void (**)(char *, uint64_t))(v407 + 8))(v410, v408);
      id v95 = (id)v457;
      v411(v393, 1, 1, v412);
      sub_10000C6CC(v389, &qword_100726708);
      swift_errorRelease();
      sub_1001D961C((uint64_t)v390, type metadata accessor for IdentityProofingRequest);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v477);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v95;
    }
    uint64_t v127 = v417;
    uint64_t v305 = v415;
    (*(void (**)(char *, void, uint64_t))(v416 + 104))(v417, enum case for DIPError.Code.serverResponseInconsistent(_:), v415);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v125 = v305;
    swift_allocError();
    swift_bridgeObjectRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1001D961C(v379, type metadata accessor for IdentityProofingResponse);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
    sub_10000C6CC(v389, &qword_100726708);
    swift_errorRelease();
    sub_1001D961C((uint64_t)v390, type metadata accessor for IdentityProofingRequest);
    swift_bridgeObjectRelease();
LABEL_88:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v477);
    swift_bridgeObjectRelease();
    uint64_t v126 = v410;
    id v112 = v400;
    goto LABEL_23;
  }
  uint64_t v221 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoECIESSession;
  if (*(void *)&v418[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoECIESSession]) {
    goto LABEL_105;
  }
  type metadata accessor for DIPECIESSessionECV3();
  swift_allocObject();
  uint64_t v224 = v413;
  uint64_t v225 = DIPECIESSessionECV3.init(_:)();
  if (v224)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v477);
    swift_bridgeObjectRelease();
    goto LABEL_96;
  }
  v413 = 0;
  uint64_t v258 = (uint64_t)v418;
  *(void *)&v418[v221] = v225;
  uint64_t v220 = swift_release();
  if (*(void *)(v258 + v221))
  {
LABEL_105:
    __chkstk_darwin(v220);
    swift_retain();
    uint64_t v222 = swift_bridgeObjectRetain();
    uint64_t v223 = v413;
    sub_1001C0300(v222, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001D77D8);
    id v112 = v400;
    if (v223)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v479);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v477);
      swift_bridgeObjectRelease();
      uint64_t v125 = v415;
      goto LABEL_23;
    }
    v413 = 0;
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_110;
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_10019BBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPKeyAlgorithm();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for KeystoreKeyType();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  return _swift_task_switch(sub_10019BCE4, 0, 0);
}

uint64_t sub_10019BCE4()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 32);
  sub_10000C728(*(void **)(v0 + 24), *(void *)(*(void *)(v0 + 24) + 24));
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(v6 + 72);
  *(void *)(v0 + 104) = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for KeystoreKeyType.temporary(_:), v3);
  uint64_t v9 = enum case for DIPKeyAlgorithm.ECC256(_:);
  uint64_t v10 = type metadata accessor for DIPKeyAlgorithm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(v4, v9, v10);
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100190744;
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v15 = *(void *)(v0 + 48);
  uint64_t v16 = *(void *)(v0 + 16);
  return DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)(v16, v7, v8, v14, v15, v12, v13, 0);
}

uint64_t sub_10019BE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_10019BE9C, 0, 0);
}

uint64_t sub_10019BE9C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = sub_100007764((uint64_t *)&unk_100726500);
  v0[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[6] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10019BFA8;
  uint64_t v6 = v0[4];
  return JWSSignedJSON.sign(_:)(v6, v3);
}

uint64_t sub_10019BFA8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1001D96DC, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10019C0DC(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t result = (uint64_t)sub_1004D0118(a1, a2);
  if (v6) {
    return result;
  }
  uint64_t v15 = v12;
  uint64_t v16 = v14;
  uint64_t v34 = result;
  uint64_t v35 = v13;
  sub_1000B60CC();
  sub_1001D7A5C();
  if ((BidirectionalCollection<>.starts<A>(with:)() & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v33 = v15;
  uint64_t v17 = *(void *)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  swift_bridgeObjectRetain();
  sub_1001D7CB8(a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = *a4;
  *a4 = 0x8000000000000000;
  sub_100562E48((_OWORD *)a3, v17, v18, isUniquelyReferenced_nonNull_native);
  *a4 = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = (uint64_t *)(a5 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes);
  swift_beginAccess();
  if (*(void *)(*v20 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100590548(v34, v33);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if (v22)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      uint64_t v23 = v35;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
  }
  type metadata accessor for SubmittedAttributeWrapper(0);
  uint64_t v30 = swift_allocObject();
  swift_bridgeObjectRetain();
  sub_1001D7CB8(a3);
  swift_bridgeObjectRetain();
  uint64_t v31 = v18;
  uint64_t v23 = v35;
  sub_100187840(v17, v31, a3, 0, v35, v16);
  swift_beginAccess();
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v38 = *v20;
  *uint64_t v20 = 0x8000000000000000;
  sub_100562DF0(v30, v34, v33, v32);
  *uint64_t v20 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_7:
  uint64_t v24 = *a6;
  if (!*(void *)(*a6 + 16))
  {
LABEL_12:
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = *a6;
    *a6 = 0x8000000000000000;
    uint64_t v29 = 1;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  unint64_t v25 = sub_100590548(v23, v16);
  if ((v26 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v27, 1))
  {
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = *a6;
    *a6 = 0x8000000000000000;
    uint64_t v29 = v27 + 1;
LABEL_13:
    sub_100562FE4(v29, v23, v16, v28);
    *a6 = v36;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_10019C41C(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, void **a5, uint64_t *a6)
{
  Swift::String v74 = a6;
  unint64_t v75 = a5;
  uint64_t v73 = a4;
  uint64_t v78 = a3;
  uint64_t v77 = a2;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v76 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void **)(a1 + 8);
  uint64_t v84 = *(void *)(a1 + 16);
  uint64_t v83 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v82 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v81 = *(void *)(a1 + 48);
  int v80 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v79 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v16 = *(void *)(a1 + 96);
  char v18 = *(unsigned char *)(a1 + 104);
  uint64_t result = (uint64_t)sub_1004D0118(v11, v12);
  if (!v6)
  {
    uint64_t v23 = v22;
    uint64_t v69 = result;
    uint64_t v72 = v20;
    uint64_t v70 = v8;
    uint64_t v71 = v10;
    uint64_t v24 = v83;
    v92[0] = v84;
    v92[1] = v83;
    v92[2] = v82;
    v92[3] = v13;
    v92[4] = v81;
    v92[5] = v14;
    char v93 = v80;
    uint64_t v94 = v79;
    uint64_t v95 = v15;
    uint64_t v96 = v17;
    uint64_t v97 = v16;
    char v98 = v18;
    uint64_t v25 = v21;
    type metadata accessor for SubmittedAttributeWrapper(0);
    uint64_t v26 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100187840(v84, v24, (uint64_t)v92, 1, v25, v23);
    uint64_t v27 = v23;
    uint64_t v84 = v25;
    char v28 = (uint64_t *)(v77 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes);
    swift_beginAccess();
    uint64_t v29 = v71;
    if (*(void *)(*v28 + 16))
    {
      uint64_t v30 = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100590548(v69, v30);
      char v32 = v31;
      swift_bridgeObjectRelease();
      if (v32)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        uint64_t v34 = v70;
        if (!*(void *)(v26 + 104)) {
          goto LABEL_9;
        }
        uint64_t v35 = *(void *)(v26 + 176);
        uint64_t v36 = *(void *)(v26 + 152);
        char v37 = *(unsigned char *)(v26 + 144);
        uint64_t v38 = *(void *)(v26 + 136);
        uint64_t v86 = *(void *)(v26 + 128);
        uint64_t v87 = v38;
        char v88 = v37 & 1;
        uint64_t v89 = v36;
        long long v90 = *(_OWORD *)(v26 + 160);
        uint64_t v91 = v35;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v39 = sub_1005086E4();
        unint64_t v41 = v40;
        uint64_t v83 = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v29 = v71;
        uint64_t v34 = v70;
        if (v41 >> 60 == 15)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v76 + 104))(v29, enum case for DIPError.Code.unexpectedDaemonState(_:), v34);
          type metadata accessor for DIPError();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          swift_bridgeObjectRetain();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          return swift_release();
        }
        Swift::String v42 = Data.base16EncodedString()();
        sub_10000C5E0(v39, v41);
        uint64_t v43 = v73;
        uint64_t v44 = *v73;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t *v43 = v44;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v44 = sub_10010F3C4(0, *((void *)v44 + 2) + 1, 1, v44);
          uint64_t *v43 = v44;
        }
        unint64_t v47 = *((void *)v44 + 2);
        unint64_t v46 = *((void *)v44 + 3);
        uint64_t v68 = v27;
        if (v47 >= v46 >> 1)
        {
          uint64_t v44 = sub_10010F3C4((char *)(v46 > 1), v47 + 1, 1, v44);
          uint64_t *v43 = v44;
        }
        *((void *)v44 + 2) = v47 + 1;
        *(Swift::String *)&v44[16 * v47 + 32] = v42;
        uint64_t v49 = *(void *)(v26 + 56);
        uint64_t v48 = *(void *)(v26 + 64);
        uint64_t v50 = *(void *)(v26 + 72);
        uint64_t v51 = *(void *)(v26 + 80);
        uint64_t v52 = *(void *)(v26 + 88);
        uint64_t v53 = v75;
        uint64_t v54 = *v75;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v55 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v53 = v54;
        if ((v55 & 1) == 0)
        {
          uint64_t v54 = sub_10010FF74(0, v54[2] + 1, 1, v54);
          *uint64_t v53 = v54;
        }
        unint64_t v57 = v54[2];
        unint64_t v56 = v54[3];
        if (v57 >= v56 >> 1)
        {
          uint64_t v54 = sub_10010FF74((void *)(v56 > 1), v57 + 1, 1, v54);
          *unint64_t v75 = v54;
        }
        v54[2] = v57 + 1;
        uint64_t v58 = &v54[5 * v57];
        v58[4] = v49;
        v58[5] = v48;
        v58[6] = v50;
        v58[7] = v51;
        v58[8] = v52;
        uint64_t v59 = v74;
        uint64_t v60 = *v74;
        if (*(void *)(*v74 + 16))
        {
          uint64_t v61 = v68;
          swift_bridgeObjectRetain();
          unint64_t v62 = sub_100590548(v84, v61);
          if (v63)
          {
            uint64_t v64 = *(void *)(*(void *)(v60 + 56) + 8 * v62);
            uint64_t result = swift_bridgeObjectRelease();
            if (__OFADD__(v64, 1))
            {
              __break(1u);
              return result;
            }
            char v65 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v85 = *v59;
            *uint64_t v59 = 0x8000000000000000;
            uint64_t v66 = v64 + 1;
LABEL_26:
            sub_100562FE4(v66, v84, v61, v65);
            *uint64_t v59 = v85;
            swift_release();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v61 = v68;
        }
        char v65 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v85 = *v59;
        *uint64_t v59 = 0x8000000000000000;
        uint64_t v66 = 1;
        goto LABEL_26;
      }
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    swift_retain();
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v99 = *v28;
    *char v28 = 0x8000000000000000;
    sub_100562DF0(v26, v69, v72, v33);
    *char v28 = v99;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_10019CC14(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, __CFString *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, unint64_t *a10, uint64_t *a11)
{
  unint64_t v130 = (unint64_t)a8;
  uint64_t v133 = a7;
  BOOL v136 = a5;
  uint64_t v137 = (char *)a6;
  uint64_t v119 = a4;
  uint64_t v129 = a3;
  uint64_t v134 = a1;
  uint64_t v135 = a2;
  uint64_t v126 = sub_100007764(&qword_100724178);
  uint64_t v123 = *(void *)(v126 - 8);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v123 + 64);
  uint64_t v12 = __chkstk_darwin(v126);
  uint64_t v120 = (char *)&v109 - (((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v121 = (char *)&v109 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v122 = (char *)&v109 - v16;
  __chkstk_darwin(v15);
  uint64_t v124 = (char *)&v109 - v17;
  uint64_t v131 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v128 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v127 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100007764((uint64_t *)&unk_100726030);
  uint64_t v125 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v109 - v23;
  uint64_t v25 = (__CFString *)type metadata accessor for DIPError.Code();
  uint64_t length = v25[-1].length;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v109 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v28 = (void *)type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v29 = *(v28 - 1);
  __chkstk_darwin(v28);
  char v31 = (char *)&v109 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v32 = v138;
  uint64_t result = sub_100190BF8((uint64_t)v136, (uint64_t)v137, (uint64_t)&v142);
  if (v32) {
    return result;
  }
  BOOL v136 = v25;
  uint64_t v137 = v27;
  char v113 = v11;
  uint64_t v114 = v22;
  uint64_t v118 = v24;
  uint64_t v115 = v19;
  id v138 = v31;
  os_log_type_t v117 = v28;
  uint64_t v116 = v29;
  uint64_t v34 = sub_1004D0118(v134, v135);
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  *(void *)&long long v141 = v37;
  *((void *)&v141 + 1) = v39;
  uint64_t v139 = 0x6E692D646579656BLL;
  unint64_t v140 = 0xE800000000000000;
  sub_1000B60CC();
  sub_1001D7A5C();
  if ((BidirectionalCollection<>.starts<A>(with:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v134 = v38;
  uint64_t v135 = v36;
  unint64_t v41 = (uint64_t *)(*(void *)(v133 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  if (v41[1])
  {
    uint64_t v42 = *v41;
    uint64_t v43 = (void *)v41[1];
  }
  else
  {
    uint64_t v43 = (void *)0xE700000000000000;
    uint64_t v42 = 0x746C7561666564;
  }
  uint64_t v50 = (uint64_t)v137;
  uint64_t v51 = (uint64_t)v138;
  uint64_t v52 = v136;
  uint64_t v53 = length;
  swift_bridgeObjectRetain();
  sub_10006BB48(v42, v43, v51);
  uint64_t v137 = 0;
  swift_bridgeObjectRelease();
  uint64_t v54 = (void *)RecipientEncryptionCertificate.keyAgreement.getter();
  uint64_t v55 = RecipientEncryptionCertificate.signing.getter();
  if (!v55)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, __CFString *))(v53 + 104))(v50, enum case for DIPError.Code.missingCertificate(_:), v52);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    (*(void (**)(uint64_t, void *))(v116 + 8))(v51, v117);
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v142);
  }
  unint64_t v56 = (void *)v55;
  uint64_t v57 = v129 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_value;
  uint64_t v58 = *(void *)(v129 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey);
  BOOL v136 = *(__CFString **)(v129 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey + 8);
  uint64_t v59 = v128;
  uint64_t v60 = (uint64_t)v127;
  (*(void (**)(char *, void, uint64_t))(v128 + 104))(v127, enum case for EncryptedMessageEntity.ino(_:), v131);
  uint64_t length = v58;
  uint64_t v133 = v57;
  uint64_t v61 = (uint64_t)v137;
  sub_1001B8108(&v142, v58, v136, (__SecTrust *)v54, (void *)v130, (unint64_t)v56, v60, (uint64_t)v118);
  if (v61)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v131);
    (*(void (**)(uint64_t, void *))(v116 + 8))(v51, v117);
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v142);
  }
  id v110 = v56;
  id v111 = v54;
  uint64_t v137 = (char *)v40;
  uint64_t v112 = a9;
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v131);
  uint64_t v63 = v125 + 16;
  unint64_t v62 = *(void (**)(void *, char *, uint64_t))(v125 + 16);
  uint64_t v64 = v115;
  v62(v114, v118, v115);
  sub_1000B6120(&qword_1007265C8, (uint64_t *)&unk_100726030);
  sub_1000B6120(&qword_1007265D0, (uint64_t *)&unk_100726030);
  char v65 = v124;
  JWSSignedJSON.init(payload:)();
  uint64_t v66 = swift_bridgeObjectRetain();
  JWSSignedJSON.setCertificateChain(_:)((Swift::OpaquePointer)v66);
  if (v67)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v123 + 8))(v65, v126);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v118, v64);
    (*(void (**)(char *, void *))(v116 + 8))(v138, v117);
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v142);
  }
  uint64_t v128 = v63;
  uint64_t v131 = (uint64_t)v62;
  swift_bridgeObjectRelease();
  uint64_t v68 = (void *)v130;
  uint64_t v69 = v126;
  JWSSignedJSON.setKid(_:)();
  uint64_t v70 = v65;
  uint64_t v127 = v34;
  uint64_t v71 = v123;
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v123 + 16);
  uint64_t v73 = v121;
  uint64_t v112 = v123 + 16;
  uint64_t v109 = v72;
  v72(v121, v70, v69);
  sub_100030A10((uint64_t)v68, (uint64_t)&v141);
  unint64_t v74 = *(unsigned __int8 *)(v71 + 80);
  uint64_t v75 = (v74 + 16) & ~v74;
  unint64_t v76 = ((unint64_t)v113 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v77 = swift_allocObject();
  uint64_t v78 = v73;
  uint64_t v79 = *(char **)(v71 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v79)(v77 + v75, v78, v69);
  sub_10000C6B4(&v141, v77 + v76);
  int v80 = v122;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  unint64_t v130 = v74;
  char v28 = a10;
  uint64_t v81 = (char *)(v71 + 8);
  uint64_t v82 = *(void (**)(char *, uint64_t))(v71 + 8);
  uint64_t v83 = v124;
  uint64_t v84 = v126;
  uint64_t v121 = v81;
  char v113 = v82;
  v82(v124, v126);
  swift_release();
  uint64_t v85 = v80;
  uint64_t v34 = v79;
  ((void (*)(char *, char *, uint64_t))v79)(v83, v85, v84);
  v109(v120, v83, v84);
  unint64_t v47 = *a10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a10 = v47;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_32;
  }
  while (1)
  {
    uint64_t v87 = v133;
    unint64_t v88 = v130;
    uint64_t v89 = (void (*)(void *, uint64_t, uint64_t))v131;
    unint64_t v90 = ~v130;
    unint64_t v92 = *(void *)(v47 + 16);
    unint64_t v91 = *(void *)(v47 + 24);
    uint64_t v93 = v123;
    if (v92 >= v91 >> 1)
    {
      unint64_t v106 = v47;
      unint64_t v107 = ~v130;
      uint64_t v108 = sub_100110098(v91 > 1, v92 + 1, 1, v106);
      unint64_t v90 = v107;
      unint64_t v88 = v130;
      uint64_t v93 = v123;
      unint64_t v47 = v108;
      *char v28 = v108;
    }
    *(void *)(v47 + 16) = v92 + 1;
    ((void (*)(unint64_t))v34)(v47 + ((v88 + 32) & v90) + *(void *)(v93 + 72) * v92);
    uint64_t v94 = (uint64_t *)(v119 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes);
    swift_beginAccess();
    uint64_t v95 = v115;
    char v28 = v114;
    uint64_t v96 = v136;
    if (!*(void *)(*v94 + 16)) {
      goto LABEL_29;
    }
    uint64_t v97 = (uint64_t)v135;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100590548((uint64_t)v127, v97);
    if ((v98 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v87 = v133;
LABEL_29:
      v89(v28, v87, v95);
      uint64_t v99 = *(void *)(v129 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_hash);
      uint64_t v100 = *(void *)(v129 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_hash + 8);
      type metadata accessor for SubmittedAttributeWrapper(0);
      uint64_t v101 = swift_allocObject();
      uint64_t v102 = (uint64_t)v28;
      char v28 = v135;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v103 = (uint64_t)v96;
      uint64_t v104 = (uint64_t)v127;
      sub_1001881E4((uint64_t)v127, (uint64_t)v28, v102, length, v103, v99, v100);
      swift_beginAccess();
      char v105 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v143 = *v94;
      *uint64_t v94 = 0x8000000000000000;
      sub_100562DF0(v101, v104, (uint64_t)v28, v105);
      *uint64_t v94 = v143;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();

      goto LABEL_30;
    }

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_30:
    v113(v124, v126);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v118, v95);
    (*(void (**)(char *, void *))(v116 + 8))(v138, v117);
    uint64_t v40 = (uint64_t)v137;
    uint64_t v38 = v134;
LABEL_6:
    uint64_t v44 = *a11;
    if (!*(void *)(*a11 + 16)) {
      goto LABEL_15;
    }
    swift_bridgeObjectRetain();
    unint64_t v45 = sub_100590548(v38, v40);
    if ((v46 & 1) == 0) {
      break;
    }
    unint64_t v47 = *(void *)(*(void *)(v44 + 56) + 8 * v45);
    swift_bridgeObjectRelease();
    if (!__OFADD__(v47, 1))
    {
      char v48 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v139 = *a11;
      *a11 = 0x8000000000000000;
      uint64_t v49 = v47 + 1;
      goto LABEL_16;
    }
    __break(1u);
LABEL_32:
    unint64_t v47 = sub_100110098(0, *(void *)(v47 + 16) + 1, 1, v47);
    *char v28 = v47;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v139 = *a11;
  *a11 = 0x8000000000000000;
  uint64_t v49 = 1;
LABEL_16:
  sub_100562FE4(v49, v38, v40, v48);
  *a11 = v139;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v142);
}

uint64_t sub_10019DC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_10019DC3C, 0, 0);
}

uint64_t sub_10019DC3C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = sub_100007764(&qword_100724178);
  v0[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[6] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10019BFA8;
  uint64_t v6 = v0[4];
  return JWSSignedJSON.sign(_:)(v6, v3);
}

uint64_t sub_10019DD48(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7, char **a8, void **a9, void **a10, void **a11, void **a12)
{
  uint64_t v96 = a7;
  uint64_t v97 = a8;
  uint64_t v98 = a4;
  uint64_t v18 = type metadata accessor for DIPError.Code();
  uint64_t v99 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v107 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  uint64_t v22 = (uint64_t *)(a2 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes);
  uint64_t result = swift_beginAccess();
  uint64_t v24 = *v22;
  if (*(void *)(v24 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v25 = sub_100590548(v20, v21);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v27 + 21) & 1) != 0
      || (*(unsigned char *)(v27 + 18) & 1) != 0
      || (*(unsigned char *)(v27 + 19) & 1) != 0
      || *(unsigned char *)(v27 + 16) == 1)
    {
      uint64_t v28 = *(void *)(v27 + 32);
      if (v28 && (uint64_t v29 = *a3, *(void *)(*a3 + 16)))
      {
        uint64_t v30 = *(void *)(v27 + 24);
        swift_bridgeObjectRetain();
        unint64_t v31 = sub_100590548(v30, v28);
        if ((v32 & 1) != 0 && *(void *)(*(void *)(v29 + 56) + 8 * v31) == 1)
        {
          v102[0] = v30;
          v102[1] = v28;
          uint64_t v100 = 46;
          unint64_t v101 = 0xE100000000000000;
          sub_1000B5358();
          uint64_t v33 = StringProtocol.components<A>(separatedBy:)();
          swift_bridgeObjectRelease();
          uint64_t v34 = *(void *)(v33 + 16);
          if (v34)
          {
            uint64_t v35 = v33 + 16 * v34;
            uint64_t v36 = *(void *)(v35 + 16);
            uint64_t v37 = *(void *)(v35 + 24);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v36 = 0;
            uint64_t v37 = 0;
          }
        }
        else
        {
          uint64_t v36 = 0;
          uint64_t v37 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v36 = 0;
        uint64_t v37 = 0;
      }
      sub_100188458(v36, v37);
      if (v12)
      {
        swift_release();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (!*(void *)(v27 + 104)) {
        goto LABEL_23;
      }
      uint64_t v38 = *(void *)(v27 + 176);
      uint64_t v39 = *(void *)(v27 + 152);
      char v40 = *(unsigned char *)(v27 + 144);
      uint64_t v41 = *(void *)(v27 + 136);
      v102[8] = *(void *)(v27 + 128);
      v102[9] = v41;
      char v103 = v40 & 1;
      uint64_t v104 = v39;
      long long v105 = *(_OWORD *)(v27 + 160);
      uint64_t v106 = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v42 = sub_1005086E4();
      unint64_t v44 = v43;
      uint64_t v95 = (void *)v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v44 >> 60 == 15) {
        goto LABEL_23;
      }
      uint64_t v45 = (uint64_t)v95;
      Swift::String v46 = Data.base16EncodedString()();
      uint64_t countAndFlagsBits = v46._countAndFlagsBits;
      object = v46._object;
      sub_10000C5E0(v45, v44);
      if (*(unsigned char *)(v27 + 16) == 1)
      {
        sub_100190BF8(a5, a6, (uint64_t)v102);
        uint64_t v49 = sub_10000C728(v102, v102[3]);
        SecKeyRef v50 = SecKeyCopyPublicKey(*(SecKeyRef *)(*v49 + 16));
        if (!v50)
        {
          (*(void (**)(char *, void, uint64_t))(v99 + 104))(v107, enum case for DIPError.Code.internalError(_:), v18);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          swift_release();
          swift_bridgeObjectRelease();
          return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v102);
        }
        SecKeyRef v51 = v50;
        sub_100188B20(v50);

        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v102);
      }
      if (*(unsigned char *)(v27 + 21) == 1)
      {
        uint64_t v95 = (void *)v46._countAndFlagsBits;
        uint64_t v53 = *(void *)(v27 + 40);
        uint64_t v52 = *(void *)(v27 + 48);
        uint64_t v54 = v96;
        uint64_t v55 = *v96;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v54 = v55;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v55 = sub_1001101DC(0, v55[2] + 1, 1, v55);
          *uint64_t v96 = v55;
        }
        unint64_t v58 = v55[2];
        unint64_t v57 = v55[3];
        if (v58 >= v57 >> 1)
        {
          uint64_t v55 = sub_1001101DC((void *)(v57 > 1), v58 + 1, 1, v55);
          *uint64_t v96 = v55;
        }
        v55[2] = v58 + 1;
        uint64_t v59 = &v55[4 * v58];
        v59[4] = v53;
        v59[5] = v52;
        uint64_t countAndFlagsBits = (uint64_t)v95;
        v59[6] = v95;
        v59[7] = v46._object;
        object = v46._object;
      }
      if (*(unsigned char *)(v27 + 18) == 1)
      {
        uint64_t v60 = v97;
        uint64_t v61 = *v97;
        char v62 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v60 = v61;
        if ((v62 & 1) == 0)
        {
          uint64_t v61 = sub_10010F3C4(0, *((void *)v61 + 2) + 1, 1, v61);
          char *v97 = v61;
        }
        unint64_t v64 = *((void *)v61 + 2);
        unint64_t v63 = *((void *)v61 + 3);
        if (v64 >= v63 >> 1)
        {
          uint64_t v61 = sub_10010F3C4((char *)(v63 > 1), v64 + 1, 1, v61);
          char *v97 = v61;
        }
        *((void *)v61 + 2) = v64 + 1;
        char v65 = &v61[16 * v64];
        *((void *)v65 + 4) = countAndFlagsBits;
        *((void *)v65 + 5) = object;
        uint64_t v66 = *(char ***)(v27 + 56);
        uint64_t v67 = *(void *)(v27 + 64);
        uint64_t v68 = *(void *)(v27 + 72);
        uint64_t v96 = *(void ***)(v27 + 80);
        uint64_t v97 = v66;
        uint64_t v69 = *(void *)(v27 + 88);
        uint64_t v70 = *a9;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v71 = swift_isUniquelyReferenced_nonNull_native();
        *a9 = v70;
        uint64_t v95 = a9;
        if ((v71 & 1) == 0)
        {
          uint64_t v70 = sub_10010FF74(0, v70[2] + 1, 1, v70);
          *a9 = v70;
        }
        unint64_t v73 = v70[2];
        unint64_t v72 = v70[3];
        if (v73 >= v72 >> 1)
        {
          uint64_t v70 = sub_10010FF74((void *)(v72 > 1), v73 + 1, 1, v70);
          *uint64_t v95 = v70;
        }
        v70[2] = v73 + 1;
        unint64_t v74 = &v70[5 * v73];
        v74[4] = v97;
        v74[5] = v67;
        uint64_t v75 = v96;
        v74[6] = v68;
        v74[7] = v75;
        char v74[8] = v69;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (*(unsigned char *)(v27 + 19) == 1)
      {
        uint64_t v76 = *(void *)(v27 + 88);
        if (!v76)
        {
LABEL_23:
          (*(void (**)(char *, void, uint64_t))(v99 + 104))(v107, enum case for DIPError.Code.unexpectedDaemonState(_:), v18);
          type metadata accessor for DIPError();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          swift_bridgeObjectRetain();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          return swift_release();
        }
        unint64_t v107 = *(char **)(v27 + 80);
        uint64_t v78 = *(void *)(v27 + 40);
        uint64_t v77 = *(void *)(v27 + 48);
        uint64_t v79 = *a10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v80 = swift_isUniquelyReferenced_nonNull_native();
        *a10 = v79;
        if ((v80 & 1) == 0)
        {
          uint64_t v79 = sub_1001100AC(0, v79[2] + 1, 1, v79);
          *a10 = v79;
        }
        unint64_t v82 = v79[2];
        unint64_t v81 = v79[3];
        if (v82 >= v81 >> 1)
        {
          uint64_t v79 = sub_1001100AC((void *)(v81 > 1), v82 + 1, 1, v79);
          *a10 = v79;
        }
        v79[2] = v82 + 1;
        uint64_t v83 = &v79[4 * v82];
        v83[4] = v78;
        v83[5] = v77;
        v83[6] = v107;
        v83[7] = v76;
      }
    }
    if (*(unsigned char *)(v27 + 20) != 1)
    {
      if (*(unsigned char *)(v27 + 18)) {
        return swift_release();
      }
      a11 = a12;
    }
    uint64_t v85 = *(void *)(v27 + 64);
    unint64_t v107 = *(char **)(v27 + 56);
    uint64_t v86 = *(void *)(v27 + 72);
    uint64_t v99 = *(void *)(v27 + 80);
    uint64_t v87 = *(void *)(v27 + 88);
    unint64_t v88 = *a11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v89 = swift_isUniquelyReferenced_nonNull_native();
    *a11 = v88;
    if ((v89 & 1) == 0)
    {
      unint64_t v88 = sub_10010FF74(0, v88[2] + 1, 1, v88);
      *a11 = v88;
    }
    unint64_t v91 = v88[2];
    unint64_t v90 = v88[3];
    if (v91 >= v90 >> 1)
    {
      unint64_t v88 = sub_10010FF74((void *)(v90 > 1), v91 + 1, 1, v88);
      *a11 = v88;
    }
    v88[2] = v91 + 1;
    unint64_t v92 = &v88[5 * v91];
    v92[4] = v107;
    v92[5] = v85;
    uint64_t v93 = v99;
    void v92[6] = v86;
    v92[7] = v93;
    v92[8] = v87;
    return swift_release();
  }
  return result;
}

uint64_t sub_10019E804(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t *a10)
{
  uint64_t v59 = a7;
  uint64_t v60 = a8;
  unint64_t v56 = a6;
  uint64_t v57 = a5;
  uint64_t v63 = sub_100007764(&qword_100726760);
  uint64_t v55 = *(void *)(v63 - 8);
  uint64_t v15 = __chkstk_darwin(v63);
  uint64_t v54 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v52 - v17;
  uint64_t v19 = type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v61 = *(void *)(v19 - 8);
  uint64_t v62 = v19;
  uint64_t v20 = *(void *)(v61 + 64);
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v58 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v52 - v22;
  if (*(void *)(a3 + 16)) {
    goto LABEL_9;
  }
  uint64_t v66 = (char *)&v52 - v22;
  unint64_t v64 = v18;
  uint64_t v24 = (void *)(*(void *)(a4 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  if (!v24[1])
  {
    unint64_t v25 = 0xE700000000000000;
    if (a1 != 0x746C7561666564) {
      goto LABEL_8;
    }
LABEL_6:
    if ((void *)v25 == a2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v18 = v64;
      uint64_t v23 = v66;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unint64_t v25 = v24[1];
  if (*v24 == a1) {
    goto LABEL_6;
  }
LABEL_8:
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v18 = v64;
  uint64_t v23 = v66;
  if ((v26 & 1) == 0) {
    return result;
  }
LABEL_9:
  uint64_t result = sub_10006BB48(a1, a2, (uint64_t)v23);
  if (v10) {
    return result;
  }
  uint64_t v66 = v23;
  unint64_t v64 = v18;
  swift_bridgeObjectRetain();
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v53 = sub_1001C04E8(v28, a3);
  uint64_t v57 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = (uint64_t *)(*(void *)(a4 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  if (v29[1])
  {
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
  }
  else
  {
    uint64_t v30 = 0x746C7561666564;
    unint64_t v31 = 0xE700000000000000;
  }
  uint64_t v32 = v61;
  uint64_t v33 = v66;
  if (v30 == a1 && (void *)v31 == a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v35 = *v56;
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v34) {
    goto LABEL_17;
  }
  uint64_t v35 = 0;
LABEL_19:
  uint64_t v36 = v62;
  uint64_t v37 = v58;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v58, v33, v62);
  sub_100030A10(v59, (uint64_t)v65);
  unint64_t v38 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  unint64_t v39 = (v20 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = swift_allocObject();
  uint64_t v41 = v53;
  *(void *)(v40 + 16) = v35;
  *(void *)(v40 + 24) = v41;
  (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v40 + v38, v37, v36);
  sub_10000C6B4(v65, v40 + v39);
  *(void *)(v40 + ((v39 + 47) & 0xFFFFFFFFFFFFFFF8)) = v60;
  swift_retain();
  uint64_t v42 = v63;
  unint64_t v43 = v64;
  uint64_t v44 = v57;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v36);
    return swift_release();
  }
  else
  {
    swift_release();
    uint64_t v45 = swift_bridgeObjectRetain();
    JWSSignedJSON.setCertificateChain(_:)((Swift::OpaquePointer)v45);
    if (v46)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v42);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v54, v43, v42);
      unint64_t v47 = *a10;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a10 = v47;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v47 = sub_1001101F0(0, *(void *)(v47 + 16) + 1, 1, v47);
        *a10 = v47;
      }
      unint64_t v50 = *(void *)(v47 + 16);
      unint64_t v49 = *(void *)(v47 + 24);
      if (v50 >= v49 >> 1)
      {
        unint64_t v47 = sub_1001101F0(v49 > 1, v50 + 1, 1, v47);
        *a10 = v47;
      }
      *(void *)(v47 + 16) = v50 + 1;
      uint64_t v51 = v55;
      (*(void (**)(unint64_t, char *, uint64_t))(v55 + 32))(v47+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(void *)(v51 + 72) * v50, v54, v42);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v43, v42);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v66, v36);
  }
}

uint64_t sub_10019EDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  return _swift_task_switch(sub_10019EE24, 0, 0);
}

uint64_t sub_10019EE24()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[11];
  v0[7] = v0[10];
  v0[8] = v2;
  v0[5] = type metadata accessor for DIPECIESSessionECV3();
  v0[6] = &protocol witness table for DIPECIESSessionECV3;
  v0[2] = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[15] = v3;
  sub_1001D7F60();
  sub_1001D7FB4();
  *uint64_t v3 = v0;
  v3[1] = sub_10019EF34;
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[9];
  return createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)(v6, v0 + 7, v4, v5, v0 + 2, 0, 0, &type metadata for IdVData);
}

uint64_t sub_10019EF34()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10019F078, 0, 0);
  }
  else
  {
    sub_10000C6CC(v2 + 16, &qword_1007265B8);
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10019F078()
{
  sub_10000C6CC(v0 + 16, &qword_1007265B8);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10019F0E4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, void *a9, void *a10)
{
  uint64_t v62 = a5;
  uint64_t v63 = (char *)a6;
  uint64_t v60 = a3;
  uint64_t v61 = a4;
  uint64_t v59 = a8;
  uint64_t v58 = type metadata accessor for DIPError.Code();
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v57 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v55 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v53 - v18;
  uint64_t v20 = sub_100007764(&qword_100723600);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  unint64_t v25 = (char *)v53 - v24;
  uint64_t v64 = a2;
  char v65 = v60;
  uint64_t v66 = a1;
  uint64_t v67 = v61;
  uint64_t v68 = v62;
  uint64_t v69 = (uint64_t)v63;
  uint64_t v70 = a7;
  char v71 = a9;
  DIPRetrier.sync(_:)();
  uint64_t v63 = v23;
  uint64_t v54 = v19;
  uint64_t v60 = v17;
  uint64_t v62 = v14;
  uint64_t v26 = v58;
  uint64_t v27 = v57;
  uint64_t v28 = *a9;
  if (*a9)
  {
    v53[1] = a1;
    swift_getErrorValue();
    swift_errorRetain();
    Error.dipErrorCode.getter();
    uint64_t v29 = v56;
    uint64_t v30 = v26;
    unint64_t v31 = v27;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v25, 1, v26) == 1) {
      goto LABEL_3;
    }
    uint64_t v39 = (uint64_t)v63;
    sub_100048D6C((uint64_t)v25, (uint64_t)v63, &qword_100723600);
    int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 88))(v39, v26);
    if (v40 != enum case for DIPError.Code.topekaInvalidNonce(_:))
    {
      if (v40 == enum case for DIPError.Code.topekaIdentityNotFound(_:))
      {
        uint64_t v44 = v54;
        defaultLogger()();
        DIPRecordError(_:message:log:)();
        uint64_t v45 = *(void (**)(char *, uint64_t))(v55 + 8);
        v45(v44, v62);
        defaultLogger()();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v46, v47))
        {
          char v48 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v48 = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "at proofing: identity not found, clearing local cache", v48, 2u);
          uint64_t v30 = v26;
          swift_slowDealloc();
        }

        v45(v60, v62);
        id v49 = [a10 serviceName];
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v52 = v51;

        sub_1001A3B94(v50, v52, 0);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v56 + 104))(v31, enum case for DIPError.Code.topekaCanNotResume(_:), v30);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v32 = swift_allocError();
        goto LABEL_4;
      }
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v39, v26);
LABEL_3:
      (*(void (**)(char *, void, uint64_t))(v29 + 104))(v31, enum case for DIPError.Code.internalError(_:), v26);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v32 = swift_allocError();
      swift_errorRetain();
      swift_bridgeObjectRetain();
LABEL_4:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      sub_10000C6CC((uint64_t)v25, &qword_100723600);
      uint64_t v33 = v59;
      *uint64_t v59 = v32;
      uint64_t v34 = enum case for DIPRetryResult.stopWithError(_:);
      uint64_t v35 = type metadata accessor for DIPRetryResult();
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104))(v33, v34, v35);
    }
    sub_10006D248((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v41 = v59;
    *uint64_t v59 = v28;
    uint64_t v42 = enum case for DIPRetryResult.retryWithError(_:);
    uint64_t v43 = type metadata accessor for DIPRetryResult();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104))(v41, v42, v43);
    return sub_10000C6CC((uint64_t)v25, &qword_100723600);
  }
  else
  {
    uint64_t v37 = enum case for DIPRetryResult.stop(_:);
    uint64_t v38 = type metadata accessor for DIPRetryResult();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104))(v59, v37, v38);
  }
}

uint64_t sub_10019F894@<X0>(char *a1@<X1>, uint64_t a2@<X2>, void (*a3)(char *, char *, uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void (*a6)(uint64_t, char *, uint64_t)@<X6>, uint64_t a7@<X7>, void *a8@<X8>, void *a9)
{
  uint64_t v87 = a7;
  uint64_t v96 = a6;
  uint64_t v97 = a5;
  uint64_t v102 = a3;
  uint64_t v103 = a4;
  uint64_t v98 = a8;
  uint64_t v12 = sub_100007764(&qword_100726640);
  __chkstk_darwin(v12 - 8);
  char v89 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for DIPError();
  uint64_t v88 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  unint64_t v90 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007764(&qword_100726708);
  __chkstk_darwin(v15 - 8);
  unint64_t v92 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for IdentityProofingRequest(0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_100007764(&qword_100726790);
  uint64_t v104 = *(void *)(v99 - 8);
  uint64_t v20 = *(void *)(v104 + 64);
  uint64_t v21 = __chkstk_darwin(v99);
  uint64_t v95 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v94 = (char *)&v82 - v23;
  __chkstk_darwin(v22);
  unint64_t v25 = (char *)&v82 - v24;
  uint64_t v26 = (char *)a3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken;
  uint64_t v27 = *(void *)((char *)a3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
  uint64_t v28 = *((void *)v26 + 1);
  uint64_t v93 = a1;
  uint64_t v30 = *(void *)&a1[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  uint64_t v29 = *(void *)&a1[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)a2 = v30;
  *(void *)(a2 + 8) = v29;
  uint64_t v31 = v103;
  sub_1002D4260(v27, v28, (uint64_t *)v106);
  long long v100 = v106[1];
  long long v101 = v106[0];
  uint64_t v32 = v107;
  uint64_t v33 = v108;
  sub_1000AAC30(*(void *)(a2 + 32), *(void *)(a2 + 40));
  long long v34 = v100;
  *(_OWORD *)(a2 + 32) = v101;
  *(_OWORD *)(a2 + 48) = v34;
  *(void *)(a2 + 64) = v32;
  *(void *)(a2 + 72) = v33;
  uint64_t v35 = v25;
  swift_bridgeObjectRelease();
  sub_1001D95B4(a2, (uint64_t)v19, type metadata accessor for IdentityProofingRequest);
  sub_1001C6628(&qword_100726798, (void (*)(uint64_t))type metadata accessor for IdentityProofingRequest);
  sub_1001C6628(&qword_1007267A0, (void (*)(uint64_t))type metadata accessor for IdentityProofingRequest);
  JWSSignedJSON.init(payload:)();
  unint64_t v36 = sub_10015CF20((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v37 = sub_100195524(v31, 0, v36);
  uint64_t v39 = v38;
  uint64_t v40 = (uint64_t)v96;
  uint64_t v41 = v104;
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = (uint64_t)v37;
  v42._object = v39;
  uint64_t v43 = v99;
  JWSSignedJSON.setNonce(_:)(v42);
  swift_bridgeObjectRelease();
  uint64_t v44 = swift_bridgeObjectRetain();
  JWSSignedJSON.setCertificateChain(_:)((Swift::OpaquePointer)v44);
  uint64_t v46 = v43;
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v35, v43);
    swift_bridgeObjectRelease();
    uint64_t v53 = v98;
    void *v98 = v45;
    uint64_t v54 = enum case for DIPRetryResult.stopWithError(_:);
    uint64_t v55 = type metadata accessor for DIPRetryResult();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 104))(v53, v54, v55);
  }
  swift_bridgeObjectRelease();
  JWSSignedJSON.setKid(_:)();
  os_log_type_t v47 = v95;
  uint64_t v102 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  v102(v95, v35, v43);
  sub_100030A10(v40, (uint64_t)v105);
  uint64_t v48 = *(unsigned __int8 *)(v41 + 80);
  uint64_t v49 = (v48 + 16) & ~v48;
  uint64_t v86 = v20 + 7;
  unint64_t v50 = (v49 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v97 = v48 | 7;
  uint64_t v51 = swift_allocObject();
  uint64_t v96 = *(void (**)(uint64_t, char *, uint64_t))(v41 + 32);
  v96(v51 + v49, v47, v43);
  sub_10000C6B4(v105, v51 + v50);
  unint64_t v52 = v94;
  *(void *)&long long v101 = 0x800000010063D480;
  *(void *)&long long v100 = 0x800000010063E580;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  uint64_t v83 = a9;
  uint64_t v84 = ~v48;
  uint64_t v57 = *(void (**)(char *, uint64_t))(v41 + 8);
  uint64_t v104 = v41 + 8;
  uint64_t v85 = v57;
  v57(v35, v43);
  swift_release();
  uint64_t v58 = v96;
  v96((uint64_t)v35, v52, v43);
  uint64_t v59 = v95;
  uint64_t v94 = v35;
  v102(v95, v35, v43);
  uint64_t v60 = (v48 + 24) & v84;
  unint64_t v61 = (v60 + v86) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v62 = swift_allocObject();
  uint64_t v102 = (void (*)(char *, char *, uint64_t))0xD000000000000029;
  uint64_t v63 = v62;
  uint64_t v64 = v93;
  *(void *)(v62 + 16) = v93;
  char v65 = v59;
  uint64_t v66 = v46;
  v58(v62 + v60, v65, v46);
  *(void *)(v63 + v61) = v103;
  uint64_t v67 = type metadata accessor for IdentityProofingResponse(0);
  id v68 = v64;
  swift_retain();
  uint64_t v69 = (uint64_t)v92;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v69, 0, 1, v67);
  sub_1001D9214(v69, v87, &qword_100726708);
  uint64_t v70 = v98;
  uint64_t v71 = v91;
  unint64_t v72 = v90;
  uint64_t v73 = (uint64_t)v89;
  uint64_t v74 = v88;
  if (!*v83)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v89, 1, 1, v91);
    goto LABEL_8;
  }
  *(void *)&v105[0] = *v83;
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  int v75 = swift_dynamicCast();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v73, v75 ^ 1u, 1, v71);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v73, 1, v71) == 1)
  {
LABEL_8:
    v85(v94, v66);
    sub_10000C6CC(v73, &qword_100726640);
LABEL_9:
    uint64_t v79 = (unsigned int *)&enum case for DIPRetryResult.stop(_:);
    goto LABEL_10;
  }
  uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 32);
  v76(v72, v73, v71);
  if ((DIPError.isAuthorizationError.getter() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v72, v71);
    v85(v94, v66);
    goto LABEL_9;
  }
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v77 = swift_allocError();
  v76(v78, (uint64_t)v72, v71);
  v85(v94, v66);
  *uint64_t v70 = v77;
  uint64_t v79 = (unsigned int *)&enum case for DIPRetryResult.retryWithError(_:);
LABEL_10:
  uint64_t v80 = *v79;
  uint64_t v81 = type metadata accessor for DIPRetryResult();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v81 - 8) + 104))(v70, v80, v81);
}

uint64_t sub_1001A0360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1001A0384, 0, 0);
}

uint64_t sub_1001A0384()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = sub_100007764(&qword_100726790);
  v0[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[6] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001A0490;
  uint64_t v6 = v0[4];
  return JWSSignedJSON.sign(_:)(v6, v3);
}

uint64_t sub_1001A0490()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1001A05C4, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1001A05C4()
{
  (*(void (**)(void, void))(v0[6] + 8))(v0[2], v0[5]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001A0638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  uint64_t v7 = sub_100007764(&qword_1007267C8);
  v4[3] = v7;
  v4[4] = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  v4[5] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v4[6] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1001A0754;
  return sub_1002BF970(v8, a3, a4);
}

uint64_t sub_1001A0754()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001A08FC;
  }
  else {
    uint64_t v2 = sub_1001A0868;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001A0868()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  JWSSignedJSON.payload.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001A08FC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001A0960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_1001A0984, 0, 0);
}

uint64_t sub_1001A0984()
{
  uint64_t v1 = *(void **)(v0[5] + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (v1 && (id v2 = [v1 preferredLanguages]) != 0)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v4 = 0;
  }
  type metadata accessor for LegacySynthesizedWorkflows();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001A0AAC;
  uint64_t v7 = v0[3];
  uint64_t v6 = v0[4];
  return sub_100068DDC(v7, v6, v4);
}

uint64_t sub_1001A0AAC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 56) = a1;
    return _swift_task_switch(sub_1001A0BF8, 0, 0);
  }
}

uint64_t sub_1001A0BF8()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A0C1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  long long v101 = a5;
  uint64_t v109 = a1;
  uint64_t v110 = a4;
  uint64_t v113 = a3;
  uint64_t v96 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v94 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v95 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_100007764(&qword_100726488);
  uint64_t v102 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v103 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v104 = v8;
  uint64_t v105 = v9;
  __chkstk_darwin(v8);
  uint64_t v112 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v106 = *(void *)(v11 - 8);
  uint64_t v107 = v11;
  __chkstk_darwin(v11);
  uint64_t v108 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v90 - v18;
  uint64_t v20 = sub_100007764((uint64_t *)&unk_100726030);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v99 = (char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  unint64_t v25 = (char *)&v90 - v24;
  uint64_t v98 = sub_100007764(&qword_100724178);
  uint64_t v100 = a2;
  JWSSignedJSON.payload.getter();
  EncryptedMessage.recipient.getter();
  uint64_t v97 = *(void (**)(char *, uint64_t))(v21 + 8);
  v97(v25, v20);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for EncryptedMessageEntity.device(_:), v13);
  sub_1001C6628(&qword_100726788, (void (*)(uint64_t))&type metadata accessor for EncryptedMessageEntity);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v114[0] == v115 && v114[1] == v116)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
    v26(v17, v13);
    v26(v19, v13);
  }
  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
    v28(v17, v13);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v19, v13);
    if ((v27 & 1) == 0) {
      return result;
    }
  }
  uint64_t v30 = *(void (**)(char *, uint64_t))(v113 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoECIESSession);
  if (!v30)
  {
    (*(void (**)(char *, void, uint64_t))(v106 + 104))(v108, enum case for DIPError.Code.unexpectedDaemonState(_:), v107);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  uint64_t v31 = (uint64_t *)(*(void *)(v110 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  if (v31[1])
  {
    uint64_t v32 = *v31;
    uint64_t v33 = (void *)v31[1];
  }
  else
  {
    uint64_t v33 = (void *)0xE700000000000000;
    uint64_t v32 = 0x746C7561666564;
  }
  uint64_t v34 = v117;
  uint64_t v36 = v111;
  uint64_t v35 = (uint64_t)v112;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10006BB48(v32, v33, v35);
  if (v34)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v37 = RecipientEncryptionCertificate.signing.getter();
  if (!v37) {
    goto LABEL_18;
  }
  uint64_t v38 = (void *)v37;
  v39.SecCertificateRef value = SecTrustRef.getLeafCertificate()().value;
  if (!v39.value)
  {

LABEL_18:
    (*(void (**)(char *, void, uint64_t))(v106 + 104))(v108, enum case for DIPError.Code.serverResponseInconsistent(_:), v107);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_19:
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 8))(v35, v104);
  }
  id v93 = v38;
  SecCertificateRef value = v39.value;
  uint64_t v41 = copyPublicKeyDataFromCertificate(_:)();
  if (v42 >> 60 == 15)
  {
    (*(void (**)(char *, void, uint64_t))(v106 + 104))(v108, enum case for DIPError.Code.keychainKeyExportFailure(_:), v107);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();

    return (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 8))(v35, v104);
  }
  uint64_t v91 = v41;
  unint64_t v92 = v42;
  SecCertificateRef v90 = value;
  uint64_t v43 = v99;
  JWSSignedJSON.payload.getter();
  EncryptedMessage.message.getter();
  v97(v43, v20);
  v114[3] = type metadata accessor for DIPECIESSessionECV3();
  v114[4] = &protocol witness table for DIPECIESSessionECV3;
  v114[0] = v30;
  sub_10000C728(v101, v101[3]);
  swift_retain();
  uint64_t v44 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()();
  unint64_t v46 = v45;
  uint64_t v47 = v94;
  (*(void (**)(char *, void, uint64_t))(v94 + 104))(v95, enum case for EncryptionParamsAlgorithmIdentifier.EC_v3(_:), v96);
  EncryptedDataContainer.getUnencryptedData(alg:decryptor:senderSigningKey:recipientSigningKey:)();
  sub_10000C5F4(v44, v46);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v95, v96);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v36);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v114);
  uint64_t v48 = 0;
  uint64_t v49 = *(void *)(v115 + 64);
  uint64_t v94 = v115 + 64;
  uint64_t v98 = v115;
  uint64_t v50 = 1 << *(unsigned char *)(v115 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & v49;
  uint64_t v95 = (char *)((unint64_t)(v50 + 63) >> 6);
  uint64_t v117 = 0;
  uint64_t v97 = v30;
  while (1)
  {
    if (v52)
    {
      uint64_t v99 = (char *)((v52 - 1) & v52);
      uint64_t v100 = v48;
      unint64_t v56 = __clz(__rbit64(v52)) | (v48 << 6);
    }
    else
    {
      uint64_t v57 = v48 + 1;
      if (__OFADD__(v48, 1)) {
        goto LABEL_56;
      }
      if (v57 >= (uint64_t)v95)
      {
LABEL_53:

        sub_10000C5E0(v91, v92);
        swift_release();
        goto LABEL_19;
      }
      unint64_t v58 = *(void *)(v94 + 8 * v57);
      uint64_t v59 = v48 + 1;
      if (!v58)
      {
        uint64_t v59 = v48 + 2;
        if (v48 + 2 >= (uint64_t)v95) {
          goto LABEL_53;
        }
        unint64_t v58 = *(void *)(v94 + 8 * v59);
        if (!v58)
        {
          uint64_t v59 = v48 + 3;
          if (v48 + 3 >= (uint64_t)v95) {
            goto LABEL_53;
          }
          unint64_t v58 = *(void *)(v94 + 8 * v59);
          if (!v58)
          {
            uint64_t v60 = v48 + 4;
            if (v48 + 4 >= (uint64_t)v95) {
              goto LABEL_53;
            }
            unint64_t v58 = *(void *)(v94 + 8 * v60);
            if (!v58)
            {
              while (1)
              {
                uint64_t v59 = v60 + 1;
                if (__OFADD__(v60, 1)) {
                  goto LABEL_57;
                }
                if (v59 >= (uint64_t)v95) {
                  goto LABEL_53;
                }
                unint64_t v58 = *(void *)(v94 + 8 * v59);
                ++v60;
                if (v58) {
                  goto LABEL_41;
                }
              }
            }
            uint64_t v59 = v48 + 4;
          }
        }
      }
LABEL_41:
      uint64_t v99 = (char *)((v58 - 1) & v58);
      uint64_t v100 = v59;
      unint64_t v56 = __clz(__rbit64(v58)) + (v59 << 6);
    }
    unint64_t v61 = (uint64_t *)(*(void *)(v98 + 48) + 16 * v56);
    uint64_t v63 = *v61;
    uint64_t v62 = v61[1];
    uint64_t v64 = *(void *)(v98 + 56) + 96 * v56;
    uint64_t v65 = *(void *)(v64 + 8);
    uint64_t v66 = *(void *)(v64 + 16);
    uint64_t v67 = *(void *)(v64 + 24);
    long long v101 = *(void **)v64;
    uint64_t v102 = v66;
    uint64_t v68 = *(void *)(v64 + 40);
    uint64_t v103 = *(char **)(v64 + 32);
    LODWORD(v106) = *(unsigned __int8 *)(v64 + 48);
    uint64_t v69 = *(char **)(v64 + 64);
    uint64_t v107 = *(void *)(v64 + 56);
    uint64_t v70 = *(void *)(v64 + 80);
    uint64_t v110 = *(void *)(v64 + 72);
    uint64_t v111 = v70;
    LODWORD(v113) = *(unsigned __int8 *)(v64 + 88);
    swift_bridgeObjectRetain();
    uint64_t v71 = v109;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v108 = v69;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v114[0] = *v71;
    uint64_t v73 = v114[0];
    *uint64_t v71 = 0x8000000000000000;
    unint64_t v75 = sub_100590548(v63, v62);
    uint64_t v76 = *(void *)(v73 + 16);
    BOOL v77 = (v74 & 1) == 0;
    uint64_t v78 = v76 + v77;
    if (__OFADD__(v76, v77)) {
      break;
    }
    char v79 = v74;
    if (*(void *)(v73 + 24) >= v78)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v82 = (void *)v114[0];
        if (v74) {
          goto LABEL_24;
        }
      }
      else
      {
        sub_10016BB88();
        uint64_t v82 = (void *)v114[0];
        if (v79) {
          goto LABEL_24;
        }
      }
    }
    else
    {
      sub_100166DFC(v78, isUniquelyReferenced_nonNull_native);
      unint64_t v80 = sub_100590548(v63, v62);
      if ((v79 & 1) != (v81 & 1)) {
        goto LABEL_58;
      }
      unint64_t v75 = v80;
      uint64_t v82 = (void *)v114[0];
      if (v79)
      {
LABEL_24:
        uint64_t v53 = v82[7] + 96 * v75;
        uint64_t v96 = *(void *)(v53 + 80);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v53 = v101;
        *(void *)(v53 + 8) = v65;
        *(void *)(v53 + 16) = v102;
        *(void *)(v53 + 24) = v67;
        *(void *)(v53 + 32) = v103;
        *(void *)(v53 + 40) = v68;
        *(unsigned char *)(v53 + 48) = v106;
        uint64_t v54 = v108;
        *(void *)(v53 + 56) = v107;
        *(void *)(v53 + 64) = v54;
        uint64_t v55 = v111;
        *(void *)(v53 + 72) = v110;
        *(void *)(v53 + 80) = v55;
        *(unsigned char *)(v53 + 88) = v113;
        goto LABEL_25;
      }
    }
    v82[(v75 >> 6) + 8] |= 1 << v75;
    uint64_t v83 = (uint64_t *)(v82[6] + 16 * v75);
    *uint64_t v83 = v63;
    v83[1] = v62;
    uint64_t v84 = v82[7] + 96 * v75;
    *(void *)uint64_t v84 = v101;
    *(void *)(v84 + 8) = v65;
    *(void *)(v84 + 16) = v102;
    *(void *)(v84 + 24) = v67;
    *(void *)(v84 + 32) = v103;
    *(void *)(v84 + 40) = v68;
    *(unsigned char *)(v84 + 48) = v106;
    uint64_t v85 = v108;
    *(void *)(v84 + 56) = v107;
    *(void *)(v84 + 64) = v85;
    uint64_t v86 = v111;
    *(void *)(v84 + 72) = v110;
    *(void *)(v84 + 80) = v86;
    *(unsigned char *)(v84 + 88) = v113;
    uint64_t v87 = v82[2];
    BOOL v88 = __OFADD__(v87, 1);
    uint64_t v89 = v87 + 1;
    if (v88) {
      goto LABEL_55;
    }
    v82[2] = v89;
    swift_bridgeObjectRetain();
LABEL_25:
    void *v109 = v82;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v112;
    uint64_t v48 = v100;
    unint64_t v52 = (unint64_t)v99;
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001A1C10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v52 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPBackoffStrategy();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for DIPRetrier();
  uint64_t v54 = *(void *)(v9 - 8);
  uint64_t v55 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10015DB68((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = v12 + 16;
  *uint64_t v8 = 0x4000000000000000;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DIPBackoffStrategy.linear(_:), v5);
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)();
  uint64_t v56 = v12;
  uint64_t v57 = a1;
  uint64_t v14 = v58;
  DIPRetrier.sync(_:)();
  if (v14) {
    goto LABEL_2;
  }
  swift_beginAccess();
  uint64_t v18 = *(void *)v13;
  uint64_t v19 = *(void **)(a1 + 16);
  if (*(void *)(*(void *)v13 + 16))
  {
    uint64_t v20 = v19[16];
    if (!v20)
    {
      char v27 = v11;
      uint64_t v28 = v19[17];
      uint64_t v29 = v19[18];
      swift_bridgeObjectRetain();
      unint64_t v30 = sub_100590548(v28, v29);
      if (v31)
      {
        uint64_t v32 = *(void *)(*(void *)(v18 + 56) + 8 * v30);
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v25 = v53;
        *(void *)(v53 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim) = v32;
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = v53;
      }
      uint64_t v11 = v27;
      goto LABEL_17;
    }
    uint64_t v58 = v12;
    uint64_t v21 = v19[15];
    swift_bridgeObjectRetain_n();
    unint64_t v22 = sub_100590548(v21, v20);
    if (v23)
    {
      uint64_t v24 = *(void *)(*(void *)(v18 + 56) + 8 * v22);
      swift_retain();
      swift_bridgeObjectRelease_n();
      uint64_t v25 = v53;
      *(void *)(v53 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim) = v24;
      swift_release();
      goto LABEL_17;
    }
    uint64_t v33 = v4;
    uint64_t v34 = v21;
    uint64_t v51 = v11;
    swift_bridgeObjectRelease();
    uint64_t v35 = v52;
    if (*(void *)(v18 + 16))
    {
      uint64_t v36 = v19[17];
      uint64_t v37 = v19[18];
      swift_bridgeObjectRetain();
      unint64_t v38 = sub_100590548(v36, v37);
      if (v39)
      {
        uint64_t v40 = *(void *)(*(void *)(v18 + 56) + 8 * v38);
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v25 = v53;
        *(void *)(v53 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim) = v40;
        swift_release();
        uint64_t v11 = v51;
LABEL_17:
        if (*(void *)(v25 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim))
        {
          v41._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
          v41._object = (void *)0x800000010063E460;
          v42._uint64_t countAndFlagsBits = 0x6431343936396236;
          v42._object = (void *)0xE800000000000000;
          logMilestone(tag:description:)(v42, v41);
        }
        goto LABEL_2;
      }
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v33, enum case for DIPError.Code.invalidStepUp(_:), v2);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v43 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v44 = (*(unsigned __int8 *)(*(void *)v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v43 + 80);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_100610730;
    unint64_t v46 = v45 + v44;
    uint64_t v47 = (uint64_t *)(v45 + v44 + v43[14]);
    uint64_t v48 = enum case for DIPError.PropertyKey.inoLaunchTier(_:);
    uint64_t v49 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 104))(v46, v48, v49);
    v47[3] = (uint64_t)&type metadata for String;
    uint64_t *v47 = v34;
    v47[1] = v20;
    sub_10015C504(v45);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v16 = v54;
    uint64_t v15 = v55;
    uint64_t v11 = v51;
    goto LABEL_3;
  }
  uint64_t v26 = v19[16];
  uint64_t v25 = v53;
  if (!v26) {
    goto LABEL_17;
  }
  (*(void (**)(char *, void, uint64_t))(v52 + 104))(v4, enum case for DIPError.Code.topekaCanNotResume(_:), v2);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
LABEL_2:
  uint64_t v16 = v54;
  uint64_t v15 = v55;
LABEL_3:
  (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v15);
  return swift_release();
}

uint64_t sub_1001A2370@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v29 - 8);
  uint64_t v6 = __chkstk_darwin(v29);
  uint64_t v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __chkstk_darwin(v6);
  if (qword_10071F5D0 != -1) {
    uint64_t v9 = swift_once();
  }
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v33 = &_swiftEmptyDictionarySingleton;
  __chkstk_darwin(v9);
  *(void *)&v26[-32] = v12;
  *(void *)&v26[-24] = v13;
  *(void *)&v26[-16] = v11;
  *(void *)&v26[-8] = &v33;
  swift_bridgeObjectRetain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = v33;
  swift_beginAccess();
  *(void *)(a1 + 16) = v14;
  swift_bridgeObjectRelease();
  defaultLogger()();
  swift_retain();
  swift_retain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    int v27 = v17;
    uint64_t v19 = v18;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v19 = 134349314;
    swift_beginAccess();
    uint64_t v31 = *(void *)(*(void *)(a1 + 16) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v19 + 12) = 2082;
    uint64_t v20 = *(void *)(v10 + 64);
    unint64_t v21 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_100110D58(v20, v21, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v27, "%{public}ld claims retrieved for %{public}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
    swift_release();
  }
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v29);
  uint64_t v22 = v30;
  uint64_t v23 = enum case for DIPRetryResult.stop(_:);
  uint64_t v24 = type metadata accessor for DIPRetryResult();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v22, v23, v24);
}

uint64_t sub_1001A2818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_100025D64;
  return sub_1001A586C(a1, a3, a4, a5);
}

uint64_t sub_1001A28E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_100025D64;
  return sub_1001B7438(a1, a3, a4, a5);
}

uint64_t sub_1001A29C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_10000C494;
  return sub_1001A586C(a1, a3, a4, a5);
}

void sub_1001A2AA0(void *a1, int a2, int a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v7);
  id v9 = a1;
  a5(v8, v9, v7);
  _Block_release(v7);
  _Block_release(v7);
  swift_bridgeObjectRelease();
}

uint64_t sub_1001A2B5C(uint64_t a1, unint64_t a2)
{
  uint64_t v42 = a1;
  unint64_t v43 = a2;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v44 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPError();
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  __chkstk_darwin(v5);
  unint64_t v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for DIPSignpost();
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v51 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  int v17 = (char *)&v42 - v16;
  defaultLogger()();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "coreidvd concludeVerification", v20, 2u);
    swift_slowDealloc();
  }

  unint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v17, v11);
  v22._uint64_t countAndFlagsBits = 0xD000000000000022;
  v22._object = (void *)0x800000010063E310;
  v23._uint64_t countAndFlagsBits = 0x3632666339313139;
  v23._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v23, v22);
  static DaemonSignposts.concludeVerificationTotal.getter();
  uint64_t v24 = v10;
  DIPSignpost.init(_:)();
  uint64_t v25 = v49;
  if ((sub_100190A8C() & 1) == 0)
  {
    (*(void (**)(char *, void, uint64_t))(v44 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v45);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v28 = v46;
    goto LABEL_7;
  }
  if (!v43)
  {
    uint64_t v32 = *(void **)(v25 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
    if (v32)
    {
      id v33 = [v32 serviceName];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v34;

      goto LABEL_10;
    }
    uint64_t v52 = 0;
    unint64_t v53 = 0xE000000000000000;
    _StringGuts.grow(_:)(100);
    v39._uint64_t countAndFlagsBits = 0xD000000000000048;
    v39._object = (void *)0x800000010063E3F0;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = 7104878;
    v40._object = (void *)0xE300000000000000;
    String.append(_:)(v40);
    v41._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v41._object = (void *)0x800000010063E440;
    String.append(_:)(v41);
    (*(void (**)(char *, void, uint64_t))(v44 + 104))(v4, enum case for DIPError.Code.unexpectedDaemonState(_:), v45);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v28 = v46;
LABEL_7:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v29 = v48;
    swift_allocError();
    uint64_t v30 = v47;
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v31, v28, v29);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v21(v15, v11);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v29);
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v24, v51);
  }
  unint64_t v26 = v43;
  uint64_t v27 = v42;
LABEL_10:
  swift_bridgeObjectRetain();
  sub_1001A3B94(v27, v26, 1);
  uint64_t v35 = swift_bridgeObjectRelease();
  if (qword_10071F4E0 != -1) {
    uint64_t v35 = swift_once();
  }
  sub_1002AB270(v35);
  v36._uint64_t countAndFlagsBits = 0xD000000000000023;
  v36._object = (void *)0x800000010063E3C0;
  v37._uint64_t countAndFlagsBits = 0x3364613234303837;
  v37._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v37, v36);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v24, v51);
}

id sub_1001A3290(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v4 - 8);
  BOOL v77 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v84 - 8);
  uint64_t v7 = __chkstk_darwin(v84 - 8);
  uint64_t v78 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v74 - v9;
  uint64_t v11 = sub_100007764(&qword_1007239B0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v79 = (uint64_t)&v74 - v15;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v86 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v74 - v20;
  defaultLogger()();
  Swift::String v22 = a1;
  Swift::String v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  char v81 = v14;
  uint64_t v83 = v2;
  if (v25)
  {
    uint64_t v82 = v16;
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v85 = v17;
    uint64_t v76 = v26;
    *(_DWORD *)unint64_t v26 = 138412290;
    uint64_t v87 = v22;
    uint64_t v28 = v22;
    unint64_t v80 = v10;
    uint64_t v29 = v28;
    uint64_t v16 = v82;
    uint64_t v17 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v22;

    uint64_t v10 = v80;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "confirmVerificationCompleted, feedback = %@", v76, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    Swift::String v23 = v22;
  }

  uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  uint64_t v30 = v17 + 8;
  uint64_t v31 = v32;
  v32(v21, v16);
  id result = [v22 consumed];
  if (result)
  {
    uint64_t v85 = v30;
    defaultLogger()();
    unint64_t v34 = v22;
    uint64_t v35 = v83;
    Swift::String v36 = v34;
    Swift::String v37 = v35;
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v82 = v16;
      uint64_t v83 = v36;
      Swift::String v40 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Swift::String v40 = 134217984;
      uint64_t v41 = (uint64_t)v37 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate;
      swift_beginAccess();
      uint64_t v42 = v79;
      sub_100048D6C(v41, v79, &qword_1007239B0);
      unint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
      uint64_t v44 = v6;
      uint64_t v45 = v84;
      int v46 = v43(v42, 1, v84);
      uint64_t v75 = v44;
      if (v46)
      {
        sub_10000C6CC(v42, &qword_1007239B0);
        uint64_t v47 = 0;
        Swift::String v36 = v83;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v10, v42, v45);
        sub_10000C6CC(v42, &qword_1007239B0);
        Swift::String v36 = v83;
        id v48 = [v83 finishDate];
        unint64_t v80 = v10;
        uint64_t v49 = v78;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Date.timeIntervalSince(_:)();
        uint64_t v47 = v50;
        uint64_t v51 = *(void (**)(char *, uint64_t))(v44 + 8);
        uint64_t v52 = v49;
        uint64_t v10 = v80;
        v51(v52, v45);
        v51(v10, v45);
      }
      uint64_t v87 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v38, v39, "confirmVerificationCompleted, assessment - feedback = %f seconds", v40, 0xCu);
      swift_slowDealloc();
      uint64_t v6 = v75;
      uint64_t v16 = v82;
    }
    else
    {

      unint64_t v38 = v37;
    }

    id result = (id)v31(v86, v16);
    uint64_t v53 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator;
    if (*(Class *)((char *)&v37->isa + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator))
    {
      uint64_t v54 = v36;
      uint64_t v55 = (uint64_t)v37 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate;
      swift_beginAccess();
      uint64_t v56 = (uint64_t)v81;
      sub_100048D6C(v55, (uint64_t)v81, &qword_1007239B0);
      uint64_t v57 = v84;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v56, 1, v84))
      {
        swift_retain();
        sub_10000C6CC(v56, &qword_1007239B0);
        uint64_t v58 = 0;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, v56, v57);
        swift_retain();
        sub_10000C6CC(v56, &qword_1007239B0);
        id v59 = [v54 finishDate];
        uint64_t v60 = v78;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Date.timeIntervalSince(_:)();
        uint64_t v58 = v61;
        uint64_t v62 = *(void (**)(char *, uint64_t))(v6 + 8);
        v62(v60, v57);
        v62(v10, v57);
      }
      uint64_t v63 = sub_1002E612C();
      uint64_t v65 = v64;
      uint64_t v66 = type metadata accessor for OTDRequest(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 48))(v65, 1, v66))
      {
        uint64_t v67 = v65 + *(int *)(v66 + 52);
        *(void *)uint64_t v67 = v58;
        *(unsigned char *)(v67 + 8) = 0;
      }
      ((void (*)(NSObject **, void))v63)(&v87, 0);
      id result = (id)swift_release();
      uint64_t v68 = *(Class *)((char *)&v37->isa + v53);
      if (v68)
      {
        if (v68[13])
        {
          uint64_t v69 = v68[12];
          uint64_t v70 = v68[13];
        }
        else
        {
          uint64_t v69 = v68[14];
          uint64_t v70 = v68[15];
          swift_bridgeObjectRetain();
        }
        uint64_t v71 = type metadata accessor for TaskPriority();
        uint64_t v72 = (uint64_t)v77;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v77, 1, 1, v71);
        uint64_t v73 = (void *)swift_allocObject();
        v73[2] = 0;
        v73[3] = 0;
        v73[4] = v68;
        v73[5] = v69;
        v73[6] = v70;
        swift_bridgeObjectRetain();
        swift_retain_n();
        sub_10014043C(v72, (uint64_t)&unk_1007266E8, (uint64_t)v73);
        swift_release();
        return (id)swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1001A3B94(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  LODWORD(v5) = a3;
  uint64_t v139 = a1;
  uint64_t v149 = type metadata accessor for KeystoreKeyType();
  uint64_t v160 = *(void *)(v149 - 8);
  uint64_t v7 = __chkstk_darwin(v149 - 8);
  uint64_t v142 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v147 = (char *)&v126 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v128 = (char *)&v126 - v12;
  __chkstk_darwin(v11);
  unint64_t v130 = (char *)&v126 - v13;
  uint64_t v150 = type metadata accessor for HardwareAttestationType();
  uint64_t v140 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v169 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = type metadata accessor for DIPError.Code();
  unint64_t v15 = *(void *)(v167 - 8);
  __chkstk_darwin(v167);
  uint64_t v17 = (char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v163 = *(void (**)(uint64_t, char *, uint64_t))(v18 - 8);
  *(void *)&long long v164 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v162 = (char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  Swift::String v22 = (char *)&v126 - v21;
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v170 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v133 = (char *)&v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v127 = (char *)&v126 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v168 = (char *)&v126 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v161 = (char *)&v126 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  unint64_t v34 = (char *)&v126 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v159 = (char *)&v126 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  os_log_type_t v39 = (char *)&v126 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  uint64_t v42 = (char *)&v126 - v41;
  uint64_t v151 = v4;
  unint64_t v132 = a2;
  uint64_t v134 = v40;
  uint64_t v165 = (uint64_t)v34;
  unint64_t v166 = v15;
  if (v5)
  {
    LODWORD(v158) = v5;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v43 = v4;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc();
      uint64_t v157 = v22;
      uint64_t v47 = v46;
      uint64_t v156 = swift_slowAlloc();
      uint64_t v172 = v156;
      *(_DWORD *)uint64_t v47 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v175 = sub_100110D58(v139, a2, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v47 + 12) = 2082;
      uint64_t v48 = *(void *)&v43[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
      unint64_t v49 = *(void *)&v43[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v175 = sub_100110D58(v48, v49, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a2 = v132;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "deleting non-persistent claims for %{public}s - %{public}s", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      Swift::String v22 = v157;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v53 = *(void (**)(char *, uint64_t))(v170 + 8);
    v53(v42, v134);
    LOBYTE(v5) = (_BYTE)v158;
  }
  else
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v50, v51))
    {
      long long v158 = v17;
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v172 = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v175 = sub_100110D58(v139, a2, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "deleting all claims for %{public}s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v53 = *(void (**)(char *, uint64_t))(v170 + 8);
      v53(v39, v134);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v53 = *(void (**)(char *, uint64_t))(v170 + 8);
      v53(v39, v23);
    }
  }
  uint64_t v131 = v53;
  if (qword_10071F5D0 == -1) {
    goto LABEL_10;
  }
  while (1)
  {
    swift_once();
LABEL_10:
    uint64_t v54 = v139;
    uint64_t v55 = sub_100577000(v139, a2);
    uint64_t v56 = sub_1005DDA6C(v55);
    swift_bridgeObjectRelease();
    uint64_t v175 = v56;
    if (v54 == 0x6E6F7275626974 && a2 == 0xE700000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      sub_1005D83B4(&v172, 0x6E6F7275626974, 0xE700000000000000);
      swift_bridgeObjectRelease();
    }
    uint64_t v57 = qword_100760868;
    if (v5)
    {
      uint64_t v58 = *(void *)&v151[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
      unint64_t v59 = *(void *)&v151[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
      uint64_t v60 = static DispatchWorkItemFlags.barrier.getter();
      __chkstk_darwin(v60);
      uint64_t v61 = v139;
      *(&v126 - 6) = v57;
      *(&v126 - 5) = v61;
      uint64_t v123 = v132;
      uint64_t v124 = v58;
      unint64_t v125 = v59;
      OS_dispatch_queue.sync<A>(flags:execute:)();
      LOBYTE(v5) = v165;
      a2 = v166;
      (*((void (**)(char *, void))v163 + 1))(v22, v164);
      uint64_t v65 = v159;
      defaultLogger()();
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "deleted non-persistent claims", v68, 2u);
        swift_slowDealloc();
      }

      uint64_t v69 = v65;
      uint64_t v70 = v134;
      uint64_t v71 = v131;
      v131(v69, v134);
    }
    else
    {
      uint64_t v62 = v162;
      uint64_t v63 = static DispatchWorkItemFlags.barrier.getter();
      __chkstk_darwin(v63);
      uint64_t v123 = v57;
      uint64_t v124 = v139;
      unint64_t v64 = v132;
      unint64_t v125 = v132;
      OS_dispatch_queue.sync<A>(flags:execute:)();
      (*((void (**)(char *, void))v163 + 1))(v62, v164);
      uint64_t v72 = v161;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v76 = (uint8_t *)swift_slowAlloc();
        uint64_t v172 = swift_slowAlloc();
        *(_DWORD *)uint64_t v76 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v171 = sub_100110D58(v139, v64, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "deleted all claims for %{public}s", v76, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        BOOL v77 = v161;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        BOOL v77 = v72;
      }
      uint64_t v70 = v134;
      uint64_t v71 = v131;
      v131(v77, v134);
      LOBYTE(v5) = v165;
      a2 = v166;
    }
    uint64_t v78 = v168;
    defaultLogger()();
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v79, v80))
    {
      char v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "deleting keys in the keychain", v81, 2u);
      uint64_t v78 = v168;
      uint64_t v71 = v131;
      uint64_t v70 = v134;
      swift_slowDealloc();
    }

    Swift::String v22 = (char *)(v170 + 8);
    v71(v78, v70);
    type metadata accessor for DIPAccountManager();
    static DIPAccountManager.sharedInstance.getter();
    sub_10000C728(&v172, v173);
    uint64_t v82 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()();
    uint64_t v84 = v83;
    uint64_t v154 = v82;
    uint64_t v129 = v22;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v172);
    uint64_t v85 = static HardwareAttestationType.allCases.getter();
    uint64_t v86 = v85;
    uint64_t v138 = *(void *)(v85 + 16);
    if (!v138) {
      break;
    }
    uint64_t v155 = v84;
    unint64_t v87 = 0;
    uint64_t v88 = *(unsigned __int8 *)(v140 + 80);
    uint64_t v167 = (v88 + 32) & ~v88;
    uint64_t v137 = v85 + v167;
    uint64_t v165 = v88 | 7;
    unint64_t v166 = v140 + 16;
    unsigned int v148 = enum case for KeystoreKeyType.standard(_:);
    os_log_type_t v153 = (void (**)(char *, void, uint64_t))(v160 + 104);
    id v152 = (void (**)(char *, uint64_t))(v160 + 8);
    unsigned int v141 = enum case for KeystoreKeyType.background(_:);
    BOOL v136 = (void (**)(char *, uint64_t))(v140 + 8);
    long long v164 = xmmword_100610730;
    uint64_t v89 = v150;
    uint64_t v135 = v85;
    while (v87 < *(void *)(v86 + 16))
    {
      uint64_t v90 = v89;
      uint64_t v91 = *(void *)(v140 + 72);
      unint64_t v145 = v87;
      unint64_t v92 = *(void (**)(char *, unint64_t, uint64_t))(v140 + 16);
      id v93 = v169;
      v92(v169, v137 + v91 * v87, v89);
      uint64_t v94 = sub_100007764(&qword_100722590);
      uint64_t v95 = v167;
      uint64_t v161 = (char *)(v91 + v167);
      uint64_t v162 = (char *)v94;
      uint64_t v96 = swift_allocObject();
      *(_OWORD *)(v96 + 16) = v164;
      uint64_t v163 = (void (*)(uint64_t, char *, uint64_t))v92;
      v92((char *)(v96 + v95), (unint64_t)v93, v90);
      sub_1001B8BCC(v96, 0, 0, 0xF000000000000000, (uint64_t)&v172);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      sub_10000C728(&v172, v173);
      sub_10000C728(&v172, v173);
      uint64_t v5 = *v153;
      uint64_t v97 = v130;
      uint64_t v98 = v149;
      (*v153)(v130, v148, v149);
      dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)();
      uint64_t v99 = (char *)*v152;
      (*v152)(v97, v98);
      dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)();
      Swift::String v22 = v99;
      swift_bridgeObjectRelease();
      uint64_t v170 = (uint64_t)v174;
      sub_10000C728(&v172, v173);
      sub_10000C728(&v172, v173);
      uint64_t v118 = v128;
      v5(v128, v141, v98);
      dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)();
      ((void (*)(char *, uint64_t))v99)(v118, v98);
      dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)();
      swift_bridgeObjectRelease();
      defaultLogger()();
      uint64_t v119 = Logger.logObject.getter();
      uint64_t v120 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v119, (os_log_type_t)v120))
      {
        uint64_t v121 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v121 = 0;
        _os_log_impl((void *)&_mh_execute_header, v119, (os_log_type_t)v120, "deleted keys SP Identity key", v121, 2u);
        swift_slowDealloc();
      }

      v131(v127, v134);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v172);
      uint64_t v89 = v150;
      ++v145;
      uint64_t v100 = *(void *)(v175 + 56);
      long long v158 = (char *)(v175 + 56);
      uint64_t v101 = 1 << *(unsigned char *)(v175 + 32);
      if (v101 < 64) {
        uint64_t v102 = ~(-1 << v101);
      }
      else {
        uint64_t v102 = -1;
      }
      a2 = v102 & v100;
      uint64_t v159 = (char *)((unint64_t)(v101 + 63) >> 6);
      uint64_t v168 = (char *)v175;
      swift_bridgeObjectRetain();
      uint64_t v103 = 0;
      if (a2)
      {
LABEL_35:
        uint64_t v170 = (a2 - 1) & a2;
        unint64_t v104 = __clz(__rbit64(a2)) | (v103 << 6);
        goto LABEL_50;
      }
      while (1)
      {
        if (__OFADD__(v103++, 1))
        {
          __break(1u);
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        if (v103 >= (uint64_t)v159) {
          goto LABEL_28;
        }
        unint64_t v114 = *(void *)&v158[8 * v103];
        if (!v114) {
          break;
        }
LABEL_49:
        uint64_t v170 = (v114 - 1) & v114;
        unint64_t v104 = __clz(__rbit64(v114)) + (v103 << 6);
LABEL_50:
        uint64_t v116 = *((void *)v168 + 6) + 16 * v104;
        uint64_t v5 = *(void (**)(char *, void, uint64_t))v116;
        Swift::String v22 = *(char **)(v116 + 8);
        uint64_t v117 = swift_allocObject();
        *(_OWORD *)(v117 + 16) = v164;
        v163(v117 + v167, v169, v89);
        swift_bridgeObjectRetain();
        sub_1001B8BCC(v117, 0, 0, 0xF000000000000000, (uint64_t)&v172);
        uint64_t v160 = v103;
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        uint64_t v157 = v174;
        uint64_t v156 = (uint64_t)sub_10000C728(&v172, v173);
        uint64_t v105 = v149;
        sub_10000C728(&v172, v173);
        uint64_t v106 = *v153;
        uint64_t v107 = v147;
        (*v153)(v147, v148, v105);
        dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)();
        BOOL v146 = v106;
        uint64_t v108 = (char *)*v152;
        (*v152)(v107, v105);
        dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)();
        uint64_t v157 = v108;
        swift_bridgeObjectRelease();
        v144 = v174;
        uint64_t v156 = v173;
        uint64_t v143 = sub_10000C728(&v172, v173);
        sub_10000C728(&v172, v173);
        uint64_t v109 = v142;
        v146(v142, v141, v105);
        dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)();
        uint64_t v103 = v160;
        ((void (*)(char *, uint64_t))v157)(v109, v105);
        swift_bridgeObjectRelease();
        dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)();
        a2 = v170;
        swift_bridgeObjectRelease();
        defaultLogger()();
        uint64_t v110 = Logger.logObject.getter();
        uint64_t v111 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v110, (os_log_type_t)v111))
        {
          uint64_t v112 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v112 = 0;
          _os_log_impl((void *)&_mh_execute_header, v110, (os_log_type_t)v111, "deleted keys INO Identity key", v112, 2u);
          swift_slowDealloc();
        }

        v131(v133, v134);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v172);
        uint64_t v89 = v150;
        if (a2) {
          goto LABEL_35;
        }
      }
      uint64_t v115 = v103 + 1;
      if (v103 + 1 >= (uint64_t)v159) {
        goto LABEL_28;
      }
      unint64_t v114 = *(void *)&v158[8 * v115];
      if (v114) {
        goto LABEL_48;
      }
      uint64_t v115 = v103 + 2;
      if (v103 + 2 >= (uint64_t)v159) {
        goto LABEL_28;
      }
      unint64_t v114 = *(void *)&v158[8 * v115];
      if (v114) {
        goto LABEL_48;
      }
      uint64_t v115 = v103 + 3;
      if (v103 + 3 < (uint64_t)v159)
      {
        unint64_t v114 = *(void *)&v158[8 * v115];
        if (!v114)
        {
          while (1)
          {
            uint64_t v103 = v115 + 1;
            if (__OFADD__(v115, 1)) {
              goto LABEL_60;
            }
            if (v103 >= (uint64_t)v159) {
              goto LABEL_28;
            }
            unint64_t v114 = *(void *)&v158[8 * v103];
            ++v115;
            if (v114) {
              goto LABEL_49;
            }
          }
        }
LABEL_48:
        uint64_t v103 = v115;
        goto LABEL_49;
      }
LABEL_28:
      uint64_t v86 = v135;
      swift_release();
      (*v136)(v169, v89);
      unint64_t v87 = v145;
      if (v145 == v138) {
        goto LABEL_58;
      }
    }
LABEL_61:
    __break(1u);
  }
LABEL_58:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001A586C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[55] = a4;
  v5[56] = v4;
  v5[53] = a2;
  v5[54] = a3;
  v5[52] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[57] = v6;
  v5[58] = *(void *)(v6 - 8);
  v5[59] = swift_task_alloc();
  type metadata accessor for SharingRegistrationResponse(0);
  v5[60] = swift_task_alloc();
  type metadata accessor for VerifiedClaimPresentment(0);
  v5[61] = swift_task_alloc();
  v5[62] = swift_task_alloc();
  uint64_t v7 = sub_100007764((uint64_t *)&unk_100726500);
  v5[63] = v7;
  v5[64] = *(void *)(v7 - 8);
  v5[65] = swift_task_alloc();
  v5[66] = swift_task_alloc();
  sub_100007764(&qword_1007266A8);
  v5[67] = swift_task_alloc();
  type metadata accessor for ODNAssessmentResult(0);
  v5[68] = swift_task_alloc();
  type metadata accessor for VerifiedClaim(0);
  v5[69] = swift_task_alloc();
  v5[70] = sub_100007764(&qword_100726510);
  v5[71] = swift_task_alloc();
  v5[72] = swift_task_alloc();
  v5[73] = swift_task_alloc();
  v5[74] = swift_task_alloc();
  v5[75] = swift_task_alloc();
  return _swift_task_switch(sub_1001A5AFC, 0, 0);
}

uint64_t sub_1001A5AFC()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 448) + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  id v4 = [self standardUserDefaults];
  v5._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v5._object = (void *)0x800000010063E120;
  Swift::Bool v6 = NSUserDefaults.internalBool(forKey:)(v5);

  if (v6
    || (uint64_t v10 = *(void *)(*(void *)(v0 + 424) + 24)) != 0
    && (uint64_t v11 = *(void **)(v10 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL)) != 0
    && (sub_10020F0CC(v2, v3, v11) & 1) != 0)
  {
    uint64_t v7 = *(void *)(*(void *)(v0 + 448) + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim);
    *(void *)(v0 + 608) = v7;
    if (v7)
    {
      type metadata accessor for DIPAccountManager();
      swift_retain();
      static DIPAccountManager.sharedInstance.getter();
      sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v8 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()();
      *(void *)(v0 + 616) = v8;
      *(void *)(v0 + 624) = v9;
      uint64_t v14 = v8;
      uint64_t v15 = v9;
      uint64_t v16 = *(void *)(v0 + 424);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
      uint64_t v17 = sub_1001B5AB8(v0 + 136, v0 + 176, v16, v14, v15);
      *(void *)(v0 + 632) = v17;
      *(void *)(v0 + 640) = v18;
      uint64_t v49 = v17;
      uint64_t v19 = *(void *)(v0 + 552);
      uint64_t v20 = *(void *)(v0 + 424);
      sub_10000C6B4((long long *)(v0 + 136), v0 + 56);
      sub_10000C6B4((long long *)(v0 + 176), v0 + 96);
      uint64_t v21 = sub_1001B5898(v19, v20, v7);
      *(void *)(v0 + 648) = v21;
      *(void *)(v0 + 656) = v22;
      *(void *)(v0 + 664) = v23;
      *(void *)(v0 + 672) = v24;
      uint64_t v25 = v24;
      uint64_t v26 = *(void *)(v0 + 600);
      uint64_t v27 = *(void *)(v0 + 592);
      uint64_t v47 = *(void *)(v0 + 584);
      uint64_t v28 = *(void *)(v0 + 560);
      uint64_t v29 = v21;
      uint64_t v48 = v21;
      uint64_t v42 = *(void *)(v0 + 536);
      uint64_t v43 = *(void *)(v0 + 448);
      uint64_t v44 = *(void **)(v0 + 424);
      uint64_t v45 = *(void *)(v0 + 544);
      uint64_t v30 = v22;
      uint64_t v31 = v23;
      sub_1001D7624(*(void *)(v0 + 552), v27, type metadata accessor for VerifiedClaim);
      uint64_t v32 = v26;
      uint64_t v46 = v26;
      uint64_t v33 = (uint64_t *)(v26 + *(int *)(v28 + 48));
      sub_1001D7624(v27, v32, type metadata accessor for VerifiedClaim);
      *uint64_t v33 = v29;
      v33[1] = v30;
      v33[2] = v31;
      *(_OWORD *)(v0 + 232) = 0u;
      *(void *)(v0 + 248) = 0;
      *(_OWORD *)(v0 + 216) = 0u;
      uint64_t v34 = type metadata accessor for DIPPregeneratedAssessment(0);
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      *(void *)(v0 + 288) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v42, 1, 1, v34);
      uint64_t v35 = *(void *)(v43 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001AA604(v44, v7, v25, 0, v0 + 216, v0 + 256, v42, v35, v45, 0, 0);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      sub_10000C6CC(v42, &qword_1007266A8);
      sub_10000C6CC(v0 + 256, &qword_100726690);
      sub_10000C6CC(v0 + 216, &qword_100726690);
      sub_100048D6C(v45, v0 + 296, &qword_100726690);
      *(void *)(v0 + 680) = *(void *)(v45 + 40);
      *(void *)(v0 + 688) = *(void *)(v45 + 48);
      uint64_t v36 = (uint64_t *)(v47 + *(int *)(v28 + 48));
      sub_1001D95B4(v46, v47, type metadata accessor for VerifiedClaim);
      *uint64_t v36 = v48;
      v36[1] = v30;
      v36[2] = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v38 = (void *)swift_task_alloc();
      *(void *)(v0 + 696) = v38;
      *uint64_t v38 = v0;
      v38[1] = sub_1001A63B4;
      uint64_t v39 = *(void *)(v0 + 584);
      uint64_t v40 = *(void *)(v0 + 520);
      uint64_t v41 = *(void *)(v0 + 488);
      return sub_1001B6C84(v40, v41, v37, v39, v48, v30, v31, v49);
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 464) + 104))(*(void *)(v0 + 472), enum case for DIPError.Code.unexpectedDaemonState(_:), *(void *)(v0 + 456));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 464) + 104))(*(void *)(v0 + 472), enum case for DIPError.Code.missingEntitlement(_:), *(void *)(v0 + 456));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
  }
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1001A63B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 704) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_1001A702C;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 584);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D961C(v4, type metadata accessor for VerifiedClaim);
    uint64_t v3 = sub_1001A6588;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A6588()
{
  uint64_t v43 = v0 + 56;
  uint64_t v1 = (void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 664);
  uint64_t v3 = *(void *)(v0 + 600);
  uint64_t v4 = *(void *)(v0 + 576);
  uint64_t v5 = *(void *)(v0 + 560);
  uint64_t v7 = *(void *)(v0 + 488);
  uint64_t v6 = *(void *)(v0 + 496);
  long long v40 = *(_OWORD *)(v0 + 648);
  (*(void (**)(void, void, void))(*(void *)(v0 + 512) + 32))(*(void *)(v0 + 528), *(void *)(v0 + 520), *(void *)(v0 + 504));
  sub_1001D7624(v7, v6, type metadata accessor for VerifiedClaimPresentment);
  uint64_t v8 = v4 + *(int *)(v5 + 48);
  sub_1001D95B4(v3, v4, type metadata accessor for VerifiedClaim);
  *(_OWORD *)uint64_t v8 = v40;
  *(void *)(v8 + 16) = v2;
  uint64_t v41 = v0 + 296;
  sub_100048D6C(v0 + 296, v0 + 336, &qword_100726690);
  uint64_t v9 = *(void *)(v0 + 360);
  if (v9)
  {
    uint64_t v10 = *(void *)(v0 + 368);
    sub_10000C728((void *)(v0 + 336), *(void *)(v0 + 360));
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = v11(v9, v10);
    uint64_t v1 = (void *)(v0 + 96);
    uint64_t v13 = v12;
    uint64_t v9 = v14;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 336);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000C6CC(v0 + 336, &qword_100726690);
    uint64_t v13 = 0;
  }
  uint64_t v15 = *(void *)(v0 + 704);
  sub_1001AB0F8(*(void *)(v0 + 424), *(void *)(v0 + 608), *(void *)(v0 + 576), *(void **)(v0 + 648), *(void *)(v0 + 656), *(void **)(v0 + 664), *(void *)(v0 + 496), v13, *(void *)(v0 + 480), v9, *(void **)(v0 + 632), v43, *(void **)(v0 + 640), v1);
  if (v15)
  {
    uint64_t v39 = *(void *)(v0 + 576);
    uint64_t v37 = *(void *)(v0 + 544);
    uint64_t v38 = *(void *)(v0 + 600);
    uint64_t v16 = *(void *)(v0 + 512);
    uint64_t v35 = *(void *)(v0 + 504);
    uint64_t v36 = *(void *)(v0 + 528);
    uint64_t v34 = *(void *)(v0 + 496);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1001D961C(v34, type metadata accessor for VerifiedClaimPresentment);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v36, v35);
    sub_10000C6CC(v41, &qword_100726690);
    sub_1001D961C(v37, type metadata accessor for ODNAssessmentResult);
    sub_10000C6CC(v38, &qword_100726510);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v1);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v43);
    sub_1001D961C(v39, type metadata accessor for VerifiedClaim);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 576);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D961C(v19, type metadata accessor for VerifiedClaim);
    sub_100048D6C(v41, v0 + 376, &qword_100726690);
    uint64_t v20 = *(void *)(v0 + 400);
    if (v20)
    {
      uint64_t v21 = *(void *)(v0 + 408);
      sub_10000C728((void *)(v0 + 376), *(void *)(v0 + 400));
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
      uint64_t v20 = v23;
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 376);
    }
    else
    {
      sub_10000C6CC(v0 + 376, &qword_100726690);
      uint64_t v22 = 0;
    }
    *(void *)(v0 + 712) = v20;
    uint64_t v24 = *(void *)(v0 + 664);
    uint64_t v25 = *(void *)(v0 + 568);
    uint64_t v26 = v25 + *(int *)(*(void *)(v0 + 560) + 48);
    long long v42 = *(_OWORD *)(v0 + 648);
    sub_1001D95B4(*(void *)(v0 + 600), v25, type metadata accessor for VerifiedClaim);
    *(_OWORD *)uint64_t v26 = v42;
    *(void *)(v26 + 16) = v24;
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 720) = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_1001A6BA8;
    uint64_t v28 = *(void *)(v0 + 680);
    uint64_t v29 = *(void *)(v0 + 624);
    uint64_t v30 = *(void *)(v0 + 616);
    uint64_t v31 = *(void *)(v0 + 480);
    uint64_t v32 = *(void *)(v0 + 424);
    uint64_t v33 = *(void *)(v0 + 416);
    return sub_1001AF5CC(v33, v32, v31, v30, v29, v22, v20, v28);
  }
}

uint64_t sub_1001A6BA8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 728) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_1001A71E4;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 568);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D961C(v4, type metadata accessor for VerifiedClaim);
    uint64_t v3 = sub_1001A6E48;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A6E48()
{
  uint64_t v1 = v0[75];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[66];
  uint64_t v5 = v0[63];
  uint64_t v4 = v0[64];
  uint64_t v6 = v0[62];
  uint64_t v7 = v0[60];
  swift_release();
  sub_1001D961C(v7, type metadata accessor for SharingRegistrationResponse);
  sub_1001D961C(v6, type metadata accessor for VerifiedClaimPresentment);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10000C6CC((uint64_t)(v0 + 37), &qword_100726690);
  sub_1001D961C(v2, type metadata accessor for ODNAssessmentResult);
  sub_10000C6CC(v1, &qword_100726510);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 12));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001A702C()
{
  uint64_t v1 = v0[75];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[68];
  swift_release();
  sub_10000C6CC((uint64_t)(v0 + 37), &qword_100726690);
  sub_1001D961C(v3, type metadata accessor for ODNAssessmentResult);
  sub_10000C6CC(v1, &qword_100726510);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 12));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 7));
  sub_1001D961C(v2, type metadata accessor for VerifiedClaim);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001A71E4()
{
  uint64_t v1 = v0[75];
  uint64_t v10 = v0[71];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[66];
  uint64_t v5 = v0[63];
  uint64_t v4 = v0[64];
  uint64_t v6 = v0[62];
  uint64_t v7 = v0[60];
  swift_release();
  sub_1001D961C(v7, type metadata accessor for SharingRegistrationResponse);
  sub_1001D961C(v6, type metadata accessor for VerifiedClaimPresentment);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10000C6CC((uint64_t)(v0 + 37), &qword_100726690);
  sub_1001D961C(v2, type metadata accessor for ODNAssessmentResult);
  sub_10000C6CC(v1, &qword_100726510);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 12));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 7));
  sub_1001D961C(v10, type metadata accessor for VerifiedClaim);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001A7400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v193 = a1;
  uint64_t v176 = a2;
  uint64_t v3 = sub_100007764(&qword_100726698);
  __chkstk_darwin(v3 - 8);
  uint64_t v175 = (char *)v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v182 = *(void *)(v5 - 8);
  uint64_t v183 = v5;
  __chkstk_darwin(v5);
  uint64_t v181 = (char *)v147 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v190 = sub_100007764(&qword_1007266A0);
  __chkstk_darwin(v190);
  uint64_t v188 = (char *)v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_1007266A8);
  uint64_t v177 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v184 = (uint64_t)v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = v10;
  __chkstk_darwin(v9);
  uint64_t v185 = (uint64_t)v147 - v11;
  uint64_t v12 = sub_100007764((uint64_t *)&unk_100726568);
  __chkstk_darwin(v12 - 8);
  uint64_t v192 = (uint64_t)v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v186 = *(void *)(v14 - 8);
  uint64_t v187 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v147 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v179 = *(void *)(v17 - 8);
  uint64_t v180 = v17;
  __chkstk_darwin(v17);
  uint64_t v191 = (char *)v147 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v19 - 8);
  uint64_t v20 = type metadata accessor for DIPError.Code();
  uint64_t v197 = *(void *)(v20 - 8);
  uint64_t v198 = v20;
  __chkstk_darwin(v20);
  uint64_t v219 = (char *)v147 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v22 - 8);
  uint64_t v23 = type metadata accessor for DIPSignpost();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v194 = v23;
  uint64_t v195 = v24;
  __chkstk_darwin(v23);
  uint64_t v196 = (char *)v147 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = v2;
  uint64_t v28 = *(void *)&v2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
  uint64_t v27 = *(void *)&v2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
  id v29 = [self standardUserDefaults];
  v30._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v30._object = (void *)0x800000010063E120;
  Swift::Bool v31 = NSUserDefaults.internalBool(forKey:)(v30);

  if (!v31)
  {
    uint64_t v68 = *(void *)(v193 + 24);
    if (!v68
      || (uint64_t v69 = *(void **)(v68 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL)) == 0
      || (sub_10020F0CC(v28, v27, v69) & 1) == 0)
    {
      (*(void (**)(char *, void, uint64_t))(v197 + 104))(v219, enum case for DIPError.Code.missingEntitlement(_:), v198);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return swift_willThrow();
    }
  }
  static DaemonSignposts.getVerificationResultWaitForSetup.getter();
  uint64_t v32 = v196;
  DIPSignpost.init(_:)();
  OS_dispatch_group.wait(interval:)();
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) == 0)
  {
    (*(void (**)(char *, void, uint64_t))(v197 + 104))(v219, enum case for DIPError.Code.timeoutTaskTiberiusSetup(_:), v198);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_12:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v195 + 8))(v32, v194);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  uint64_t v33 = &v26[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory];
  uint64_t v34 = *(void *)&v26[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory];
  if (!v34)
  {
    (*(void (**)(char *, void, uint64_t))(v197 + 104))(v219, enum case for DIPError.Code.unexpectedDaemonState(_:), v198);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_12;
  }
  uint64_t v173 = v26;
  uint64_t v35 = *((void *)v33 + 1);
  uint64_t v36 = *((void *)v33 + 3);
  uint64_t v167 = *((void *)v33 + 2);
  uint64_t v168 = v36;
  uint64_t v37 = *((void *)v33 + 5);
  uint64_t v169 = *((void *)v33 + 4);
  uint64_t v38 = *((void *)v33 + 7);
  uint64_t v171 = *((void *)v33 + 6);
  uint64_t v172 = v38;
  uint64_t v39 = *((void *)v33 + 8);
  uint64_t v164 = *((void *)v33 + 9);
  uint64_t v165 = v39;
  uint64_t v174 = v34;
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  uint64_t v166 = v35;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v170 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(char *, void, uint64_t))(v186 + 104))(v16, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v187);
  id v160 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  dispatch_group_t v158 = dispatch_group_create();
  uint64_t v40 = swift_allocObject();
  uint64_t v186 = v40;
  *(void *)(v40 + 16) = 0;
  uint64_t v157 = v40 + 16;
  uint64_t v41 = swift_allocObject();
  uint64_t v42 = type metadata accessor for SharingCredentials(0);
  *(void *)(v41 + 16) = 0;
  uint64_t v155 = v41 + 16;
  uint64_t v187 = v41;
  *(void *)(v41 + 24) = 0;
  uint64_t v151 = *(void *)(v42 - 8);
  uint64_t v152 = v42;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 56))(v192, 1, 1);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = 0u;
  uint64_t v154 = v43 + 16;
  *(_OWORD *)(v43 + 32) = 0u;
  *(void *)(v43 + 56) = 0;
  *(void *)(v43 + 64) = 0;
  *(void *)(v43 + 48) = 1;
  uint64_t v159 = v43;
  *(unsigned char *)(v43 + 72) = 0;
  sub_100007764(&qword_1007266B0);
  uint64_t v162 = swift_allocBox();
  uint64_t v45 = v44;
  uint64_t v46 = type metadata accessor for ODNAssessmentResult(0);
  uint64_t v148 = *(void *)(v46 - 8);
  uint64_t v149 = v46;
  uint64_t v47 = *(void (**)(void *, uint64_t, uint64_t))(v148 + 56);
  uint64_t v150 = v45;
  v47(v45, 1, 1);
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = 0;
  uint64_t v153 = v48 + 16;
  uint64_t v163 = v48;
  *(void *)(v48 + 24) = 0;
  sub_100007764(&qword_1007266B8);
  uint64_t v161 = swift_allocBox();
  uint64_t v50 = v49;
  uint64_t v51 = type metadata accessor for AssessmentAdditionalInfo(0);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56);
  uint64_t v156 = v50;
  v52(v50, 1, 1, v51);
  uint64_t v53 = (void *)swift_allocObject();
  uint64_t v54 = v172;
  uint64_t v55 = v174;
  void v53[2] = v173;
  v53[3] = v55;
  uint64_t v57 = v167;
  uint64_t v56 = v168;
  v53[4] = v35;
  v53[5] = v57;
  uint64_t v58 = v169;
  v53[6] = v56;
  v53[7] = v58;
  uint64_t v59 = v171;
  v53[8] = v37;
  v53[9] = v59;
  uint64_t v60 = v164;
  uint64_t v61 = v165;
  v53[10] = v54;
  v53[11] = v61;
  v53[12] = v60;
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = &unk_1007266C8;
  *(void *)(v62 + 24) = v53;
  sub_1001D6DD0(v174);
  uint64_t v63 = v173;
  unint64_t v64 = v190;
  uint64_t v66 = v188;
  uint64_t v65 = v189;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  if (v65)
  {
    swift_release();

    sub_1001D6E40(v174);
    (*(void (**)(char *, uint64_t))(v195 + 8))(v196, v194);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10000C6CC(v192, (uint64_t *)&unk_100726568);
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v173 = "rkflow ACL violation";
    v147[1] = 0;
    swift_release();
    long long v70 = *((_OWORD *)v66 + 7);
    long long v207 = *((_OWORD *)v66 + 6);
    long long v208 = v70;
    uint64_t v209 = *((void *)v66 + 16);
    long long v71 = *((_OWORD *)v66 + 3);
    long long v203 = *((_OWORD *)v66 + 2);
    long long v204 = v71;
    long long v72 = *((_OWORD *)v66 + 5);
    long long v205 = *((_OWORD *)v66 + 4);
    long long v206 = v72;
    long long v73 = *((_OWORD *)v66 + 1);
    long long v201 = *(_OWORD *)v66;
    long long v202 = v73;
    long long v74 = *(_OWORD *)(v66 + 216);
    long long v75 = *(_OWORD *)(v66 + 248);
    long long v216 = *(_OWORD *)(v66 + 232);
    long long v217 = v75;
    uint64_t v218 = *((void *)v66 + 33);
    long long v76 = *(_OWORD *)(v66 + 152);
    long long v77 = *(_OWORD *)(v66 + 184);
    long long v212 = *(_OWORD *)(v66 + 168);
    long long v213 = v77;
    long long v214 = *(_OWORD *)(v66 + 200);
    long long v215 = v74;
    uint64_t v78 = (uint64_t)&v66[*(int *)(v64 + 64)];
    long long v210 = *(_OWORD *)(v66 + 136);
    long long v211 = v76;
    uint64_t v79 = v185;
    sub_1000BEA14(v78, v185, &qword_1007266A8);
    sub_100048D6C(v79, v184, &qword_1007266A8);
    unint64_t v80 = (*(unsigned __int8 *)(v177 + 80) + 320) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80);
    unint64_t v81 = (v178 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v82 = (v81 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v190 = (v83 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v84 = swift_allocObject();
    long long v85 = v208;
    *(_OWORD *)(v84 + 144) = v207;
    *(_OWORD *)(v84 + 160) = v85;
    long long v86 = v204;
    *(_OWORD *)(v84 + 80) = v203;
    *(_OWORD *)(v84 + 96) = v86;
    long long v87 = v206;
    *(_OWORD *)(v84 + 112) = v205;
    *(_OWORD *)(v84 + 128) = v87;
    long long v88 = v202;
    *(_OWORD *)(v84 + 48) = v201;
    *(_OWORD *)(v84 + 64) = v88;
    long long v89 = v216;
    long long v90 = v217;
    long long v91 = v214;
    *(_OWORD *)(v84 + 264) = v215;
    *(_OWORD *)(v84 + 280) = v89;
    *(_OWORD *)(v84 + 296) = v90;
    long long v92 = v210;
    *(_OWORD *)(v84 + 200) = v211;
    long long v93 = v213;
    *(_OWORD *)(v84 + 216) = v212;
    *(_OWORD *)(v84 + 232) = v93;
    *(_OWORD *)(v84 + 248) = v91;
    uint64_t v94 = v162;
    *(void *)(v84 + 16) = v63;
    *(void *)(v84 + 24) = v94;
    uint64_t v95 = v193;
    *(void *)(v84 + 32) = v186;
    *(void *)(v84 + 40) = v95;
    *(void *)(v84 + 176) = v209;
    *(void *)(v84 + 312) = v218;
    *(_OWORD *)(v84 + 184) = v92;
    sub_1000BEA14(v184, v84 + v80, &qword_1007266A8);
    *(void *)(v84 + v81) = v187;
    *(void *)(v84 + v82) = v159;
    uint64_t v96 = v186;
    *(void *)(v84 + v83) = v163;
    *(void *)(v84 + v190) = v161;
    v200[4] = sub_1001D7170;
    v200[5] = v84;
    v200[0] = _NSConcreteStackBlock;
    v200[1] = 1107296256;
    v200[2] = sub_100593800;
    v200[3] = &unk_1006F9AF8;
    unint64_t v190 = (unint64_t)_Block_copy(v200);
    uint64_t v188 = v63;
    char v189 = v158;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1001D7238((uint64_t)&v201);
    uint64_t v97 = v191;
    static DispatchQoS.unspecified.getter();
    id v199 = _swiftEmptyArrayStorage;
    sub_1001C6628((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100007764((uint64_t *)&unk_1007208F0);
    sub_1000B6120(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
    uint64_t v98 = v181;
    uint64_t v99 = v183;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v100 = v96;
    uint64_t v102 = v189;
    uint64_t v101 = (const void *)v190;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v101);

    (*(void (**)(char *, uint64_t))(v182 + 8))(v98, v99);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v97, v180);
    swift_release();
    OS_dispatch_group.wait()();
    swift_beginAccess();
    uint64_t v103 = v163;
    if (*(void *)(v100 + 16))
    {
      swift_errorRetain();
      sub_1001D72D0((uint64_t)&v201);
      (*(void (**)(char *, void, uint64_t))(v197 + 104))(v219, enum case for DIPError.Code.internalError(_:), v198);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();

      swift_errorRelease();
      sub_1001D6E40(v174);
      sub_10000C6CC(v185, &qword_1007266A8);
      (*(void (**)(char *, uint64_t))(v195 + 8))(v196, v194);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_10000C6CC(v192, (uint64_t *)&unk_100726568);
      swift_release();
      return swift_release();
    }
    else
    {
      if ((_BYTE)v201) {
        uint64_t v104 = 50;
      }
      else {
        uint64_t v104 = 49;
      }
      uint64_t v105 = (char *)*((void *)&v205 + 1);
      uint64_t v106 = *((void *)&v206 + 1);
      long long v107 = v207;
      unint64_t v108 = v208;
      uint64_t v193 = v206;
      swift_bridgeObjectRetain();
      uint64_t v191 = (char *)v107;
      swift_bridgeObjectRetain();
      unint64_t v190 = v108;
      swift_bridgeObjectRetain();

      sub_1001D72D0((uint64_t)&v201);
      sub_1001D6E40(v174);
      sub_10000C6CC(v185, &qword_1007266A8);
      (*(void (**)(char *, uint64_t))(v195 + 8))(v196, v194);
      uint64_t v109 = *(void *)&v188[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator];
      uint64_t v184 = v104;
      if (v109
        && (uint64_t v110 = v150,
            swift_beginAccess(),
            !(*(unsigned int (**)(void *, uint64_t, uint64_t))(v148 + 48))(v110, 1, v149)))
      {
        uint64_t v113 = v110[20];
        uint64_t v112 = v175;
        if (v113)
        {
          uint64_t v114 = v110[25];
          unint64_t v115 = v110[26];
          uint64_t v116 = (char *)v110[24];
          uint64_t v177 = v110[23];
          uint64_t v178 = v114;
          uint64_t v105 = (char *)v110[21];
          uint64_t v117 = v110[22];
          uint64_t v184 = v110[19];
          uint64_t v174 = v113;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v193 = v117;
          unint64_t v190 = v115;
          uint64_t v191 = v116;
        }
        else
        {
          uint64_t v177 = v106;
          uint64_t v178 = *((void *)&v107 + 1);
          uint64_t v174 = 0xE100000000000000;
        }
        uint64_t v111 = v192;
      }
      else
      {
        uint64_t v177 = v106;
        uint64_t v178 = *((void *)&v107 + 1);
        uint64_t v174 = 0xE100000000000000;
        uint64_t v111 = v192;
        uint64_t v112 = v175;
      }
      uint64_t v118 = v152;
      int v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v111, 1, v152);
      uint64_t v196 = v105;
      uint64_t v120 = v103;
      if (v119)
      {
        uint64_t v121 = sub_100007764(&qword_100726548);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v112, 1, 1, v121);
      }
      else
      {
        uint64_t v122 = v111 + *(int *)(v118 + 20);
        uint64_t v123 = sub_100007764(&qword_100726548);
        uint64_t v124 = *(void *)(v123 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v124 + 16))(v112, v122, v123);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(v112, 0, 1, v123);
      }
      uint64_t v125 = (uint64_t)v112;
      uint64_t v126 = v176;
      sub_1000BEA14(v125, v176, &qword_100726698);
      uint64_t v195 = type metadata accessor for TiberiusIdentitySharingRequest(0);
      uint64_t v127 = v126 + *(int *)(v195 + 20);
      swift_beginAccess();
      uint64_t v128 = *(char **)(v187 + 24);
      uint64_t v194 = *(void *)(v187 + 16);
      uint64_t v219 = v128;
      swift_beginAccess();
      uint64_t v130 = *(void *)(v159 + 16);
      uint64_t v129 = *(void *)(v159 + 24);
      uint64_t v185 = *(void *)(v159 + 32);
      uint64_t v131 = *(void *)(v159 + 40);
      uint64_t v179 = *(void *)(v159 + 48);
      uint64_t v132 = v179;
      uint64_t v180 = v130;
      char v189 = *(NSObject **)(v159 + 56);
      uint64_t v182 = *(void *)(v159 + 64);
      uint64_t v183 = v131;
      LODWORD(v198) = *(unsigned __int8 *)(v159 + 72);
      swift_beginAccess();
      uint64_t v181 = *(char **)(v120 + 16);
      uint64_t v197 = *(void *)(v120 + 24);
      uint64_t v133 = v156;
      swift_beginAccess();
      uint64_t v134 = type metadata accessor for TiberiusWrappedAssessment(0);
      sub_100048D6C(v133, v127 + *(int *)(v134 + 32), &qword_1007266B8);
      uint64_t v135 = v219;
      *(void *)uint64_t v127 = v194;
      *(void *)(v127 + 8) = v135;
      uint64_t v136 = v185;
      uint64_t v137 = v174;
      *(void *)(v127 + 16) = v184;
      *(void *)(v127 + 24) = v137;
      uint64_t v138 = v193;
      *(void *)(v127 + 32) = v196;
      *(void *)(v127 + 40) = v138;
      uint64_t v139 = v191;
      *(void *)(v127 + 48) = v177;
      *(void *)(v127 + 56) = v139;
      unint64_t v140 = v190;
      *(void *)(v127 + 64) = v178;
      *(void *)(v127 + 72) = v140;
      *(void *)(v127 + 80) = v130;
      *(void *)(v127 + 88) = v129;
      uint64_t v141 = v182;
      uint64_t v142 = v183;
      *(void *)(v127 + 96) = v136;
      *(void *)(v127 + 104) = v142;
      *(void *)(v127 + 112) = v132;
      *(void *)(v127 + 120) = v189;
      *(void *)(v127 + 128) = v141;
      *(unsigned char *)(v127 + 136) = v198;
      uint64_t v143 = v197;
      *(void *)(v127 + 144) = v181;
      *(void *)(v127 + 152) = v143;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56))(v127, 0, 1, v134);
      uint64_t v145 = *(void *)&v188[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation];
      uint64_t v144 = *(void *)&v188[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8];
      swift_bridgeObjectRetain();
      sub_1001D7368(v180, v129, v136, v142, v179);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      BOOL v146 = (void *)(v176 + *(int *)(v195 + 24));
      *BOOL v146 = v145;
      v146[1] = v144;
      sub_10000C6CC(v192, (uint64_t *)&unk_100726568);
      swift_release();
      return swift_release();
    }
  }
}

uint64_t sub_1001A8B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[38] = a3;
  v4[39] = a4;
  v4[36] = a1;
  v4[37] = a2;
  sub_100007764(&qword_1007266A8);
  v4[40] = swift_task_alloc();
  return _swift_task_switch(sub_1001A8C30, 0, 0);
}

uint64_t sub_1001A8C30()
{
  uint64_t v1 = *(void *)(v0[38] + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__pregeneratedAssessments);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = type metadata accessor for DIPPregeneratedAssessment(0);
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    sub_1001D95B4(v1+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), v0[40], type metadata accessor for DIPPregeneratedAssessment);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v4 + 56))(v0[40], v5, 1, v3);
  type metadata accessor for DIPODNator(0);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[41] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1001A8D88;
  uint64_t v8 = v0[39];
  uint64_t v7 = v0[40];
  uint64_t v9 = v0[37];
  return sub_1002E4EC4((uint64_t)(v0 + 2), v9, v7, v8);
}

uint64_t sub_1001A8D88()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = (void *)*v1;
  v3[42] = v0;
  char v41 = *((unsigned char *)v3 + 16);
  uint64_t v40 = v2[3];
  uint64_t v39 = v2[4];
  uint64_t v38 = v2[5];
  uint64_t v37 = v2[6];
  uint64_t v36 = v2[7];
  uint64_t v35 = v2[8];
  uint64_t v34 = v2[9];
  uint64_t v33 = v2[10];
  uint64_t v32 = v2[11];
  uint64_t v31 = v2[12];
  uint64_t v30 = v2[13];
  uint64_t v29 = v2[14];
  uint64_t v28 = v2[15];
  uint64_t v27 = v2[16];
  uint64_t v26 = v2[17];
  uint64_t v25 = v2[18];
  char v24 = *((unsigned char *)v3 + 152);
  uint64_t v23 = v2[20];
  uint64_t v22 = v2[21];
  uint64_t v21 = v2[22];
  uint64_t v20 = v2[23];
  uint64_t v19 = v2[24];
  uint64_t v18 = v2[25];
  uint64_t v17 = v2[26];
  uint64_t v16 = v2[27];
  uint64_t v15 = v2[28];
  uint64_t v14 = v2[29];
  uint64_t v13 = v2[30];
  uint64_t v5 = v2[31];
  uint64_t v6 = v2[32];
  uint64_t v7 = v2[33];
  uint64_t v8 = v2[34];
  uint64_t v9 = v2[35];
  swift_task_dealloc();
  if (v0)
  {
    sub_10000C6CC(v2[40], &qword_1007266A8);
    return _swift_task_switch(sub_1001A92EC, 0, 0);
  }
  else
  {
    uint64_t v10 = v3[36];
    sub_10000C6CC(v2[40], &qword_1007266A8);
    swift_task_dealloc();
    *(unsigned char *)uint64_t v10 = v41;
    *(void *)(v10 + 8) = v40;
    *(void *)(v10 + 16) = v39;
    *(void *)(v10 + 24) = v38;
    *(void *)(v10 + 32) = v37;
    *(void *)(v10 + 40) = v36;
    *(void *)(v10 + 48) = v35;
    *(void *)(v10 + 56) = v34;
    *(void *)(v10 + 64) = v33;
    *(void *)(v10 + 72) = v32;
    *(void *)(v10 + 80) = v31;
    *(void *)(v10 + 88) = v30;
    *(void *)(v10 + 96) = v29;
    *(void *)(v10 + 104) = v28;
    *(void *)(v10 + 112) = v27;
    *(void *)(v10 + 120) = v26;
    *(void *)(v10 + 128) = v25;
    *(unsigned char *)(v10 + 136) = v24;
    *(void *)(v10 + 144) = v23;
    *(void *)(v10 + 152) = v22;
    *(void *)(v10 + 160) = v21;
    *(void *)(v10 + 168) = v20;
    *(void *)(v10 + 176) = v19;
    *(void *)(v10 + 184) = v18;
    *(void *)(v10 + 192) = v17;
    *(void *)(v10 + 200) = v16;
    *(void *)(v10 + 208) = v15;
    *(void *)(v10 + 216) = v14;
    *(void *)(v10 + 224) = v13;
    *(void *)(v10 + 232) = v5;
    *(void *)(v10 + 240) = v6;
    *(void *)(v10 + 248) = v7;
    *(void *)(v10 + 256) = v8;
    *(void *)(v10 + 264) = v9;
    uint64_t v11 = (uint64_t (*)(void))v4[1];
    return v11();
  }
}

uint64_t sub_1001A92EC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001A9350(uint64_t a1, int *a2)
{
  *(void *)(v2 + 288) = a1;
  uint64_t v5 = sub_100007764(&qword_1007266A0);
  uint64_t v6 = a2;
  uint64_t v7 = a1 + *(int *)(v5 + 64);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 296) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1001A9458;
  return v10(v2 + 16, v7);
}

uint64_t sub_1001A9458()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  char v40 = *(unsigned char *)(*v1 + 16);
  uint64_t v39 = *(void *)(*v1 + 24);
  uint64_t v38 = *(void *)(*v1 + 32);
  uint64_t v37 = *(void *)(*v1 + 40);
  uint64_t v36 = *(void *)(*v1 + 48);
  uint64_t v35 = *(void *)(*v1 + 56);
  uint64_t v34 = *(void *)(*v1 + 64);
  uint64_t v33 = *(void *)(*v1 + 72);
  uint64_t v32 = *(void *)(*v1 + 80);
  uint64_t v31 = *(void *)(*v1 + 88);
  uint64_t v30 = *(void *)(*v1 + 96);
  uint64_t v29 = *(void *)(*v1 + 104);
  uint64_t v28 = *(void *)(*v1 + 112);
  uint64_t v27 = *(void *)(*v1 + 120);
  uint64_t v26 = *(void *)(*v1 + 128);
  uint64_t v25 = *(void *)(*v1 + 136);
  uint64_t v24 = *(void *)(*v1 + 144);
  char v23 = *(unsigned char *)(*v1 + 152);
  uint64_t v22 = *(void *)(*v1 + 160);
  uint64_t v21 = *(void *)(*v1 + 168);
  uint64_t v20 = *(void *)(*v1 + 176);
  uint64_t v19 = *(void *)(*v1 + 184);
  uint64_t v18 = *(void *)(*v1 + 192);
  uint64_t v17 = *(void *)(*v1 + 200);
  uint64_t v16 = *(void *)(*v1 + 208);
  uint64_t v15 = *(void *)(*v1 + 216);
  uint64_t v14 = *(void *)(*v1 + 224);
  uint64_t v4 = *(void *)(*v1 + 232);
  uint64_t v5 = *(void *)(*v1 + 240);
  uint64_t v6 = *(void *)(*v1 + 248);
  uint64_t v7 = *(void *)(*v1 + 256);
  uint64_t v8 = *(void *)(*v1 + 264);
  uint64_t v9 = *(void *)(*v1 + 272);
  uint64_t v10 = *(void *)(*v1 + 280);
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v11 = *(void *)(v2 + 288);
    *(unsigned char *)uint64_t v11 = v40;
    *(void *)(v11 + 8) = v39;
    *(void *)(v11 + 16) = v38;
    *(void *)(v11 + 24) = v37;
    *(void *)(v11 + 32) = v36;
    *(void *)(v11 + 40) = v35;
    *(void *)(v11 + 48) = v34;
    *(void *)(v11 + 56) = v33;
    *(void *)(v11 + 64) = v32;
    *(void *)(v11 + 72) = v31;
    *(void *)(v11 + 80) = v30;
    *(void *)(v11 + 88) = v29;
    *(void *)(v11 + 96) = v28;
    *(void *)(v11 + 104) = v27;
    *(void *)(v11 + 112) = v26;
    *(void *)(v11 + 120) = v25;
    *(void *)(v11 + 128) = v24;
    *(unsigned char *)(v11 + 136) = v23;
    *(void *)(v11 + 144) = v22;
    *(void *)(v11 + 152) = v21;
    *(void *)(v11 + 160) = v20;
    *(void *)(v11 + 168) = v19;
    *(void *)(v11 + 176) = v18;
    *(void *)(v11 + 184) = v17;
    *(void *)(v11 + 192) = v16;
    *(void *)(v11 + 200) = v15;
    *(void *)(v11 + 208) = v14;
    *(void *)(v11 + 216) = v4;
    *(void *)(v11 + 224) = v5;
    *(void *)(v11 + 232) = v6;
    *(void *)(v11 + 240) = v7;
    *(void *)(v11 + 248) = v8;
    *(void *)(v11 + 256) = v9;
    *(void *)(v11 + 264) = v10;
  }
  uint64_t v12 = *(uint64_t (**)(void))(v3 + 8);
  return v12();
}

uint64_t sub_1001A994C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  uint64_t v96 = a8;
  uint64_t v89 = a7;
  long long v88 = a4;
  uint64_t v87 = a3;
  long long v93 = a11;
  uint64_t v14 = sub_100007764(&qword_1007266B8);
  __chkstk_darwin(v14 - 8);
  uint64_t v97 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100007764(&qword_100723600);
  __chkstk_darwin(v16 - 8);
  long long v86 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for DIPError.Code();
  uint64_t v84 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  unint64_t v83 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100007764(&qword_100726688);
  __chkstk_darwin(v19 - 8);
  uint64_t v91 = (uint64_t)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100007764(&qword_1007266A8);
  __chkstk_darwin(v21 - 8);
  char v23 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v26 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100007764(&qword_1007266B0);
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v82 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v30 - 8);
  uint64_t v95 = type metadata accessor for DIPSignpost();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v32 = (char *)&v82 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = swift_projectBox();
  uint64_t v92 = swift_projectBox();
  static DaemonSignposts.tiberiusGetVerificationResultFetchAssessment.getter();
  long long v93 = v32;
  DIPSignpost.init(_:)();
  if (*(void *)(a1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator))
  {
    swift_retain();
    defaultLogger()();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "AssessDuringProofingODNator present, fetching from it", v36, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v90);
    uint64_t v37 = type metadata accessor for DIPPregeneratedAssessment(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v23, 1, 1, v37);
    uint64_t v38 = type metadata accessor for AugmentedProfile(0);
    uint64_t v39 = v91;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v91, 1, 1, v38);
    sub_1002F85D4((uint64_t)&_swiftEmptyDictionarySingleton, (uint64_t)v23, v39, (uint64_t)v29);
    sub_10000C6CC(v39, &qword_100726688);
    sub_10000C6CC((uint64_t)v23, &qword_1007266A8);
    uint64_t v40 = type metadata accessor for ODNAssessmentResult(0);
    uint64_t v41 = *(void *)(v40 - 8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v29, 0, 1, v40);
    swift_beginAccess();
    sub_1001D9214((uint64_t)v29, v33, &qword_1007266B0);
    swift_beginAccess();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v33, 1, v40)
      || *(void *)(v33 + 120) == 1)
    {
      swift_release();
    }
    else
    {
      uint64_t v52 = (uint64_t *)(v87 + 16);
      uint64_t v53 = (uint64_t)v86;
      DIPError.Code.init(rawValue:)();
      uint64_t v54 = v84;
      uint64_t v55 = v85;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v53, 1, v85) == 1)
      {
        (*(void (**)(char *, void, uint64_t))(v54 + 104))(v83, enum case for DIPError.Code.odnErrorGettingAssessment(_:), v55);
        sub_10000C6CC(v53, &qword_100723600);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v83, v53, v55);
      }
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v56 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_release();
      swift_beginAccess();
      *uint64_t v52 = v56;
      swift_errorRelease();
    }
  }
  else
  {
    v99[3] = &type metadata for DIPClientGUID;
    v99[4] = &off_1006FC078;
    uint64_t v42 = swift_allocObject();
    v98[4] = &off_1006FC078;
    v99[0] = v42;
    long long v43 = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(v42 + 112) = *(_OWORD *)(a5 + 96);
    *(_OWORD *)(v42 + 128) = v43;
    *(void *)(v42 + 144) = *(void *)(a5 + 128);
    long long v44 = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(v42 + 48) = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(v42 + 64) = v44;
    long long v45 = *(_OWORD *)(a5 + 80);
    *(_OWORD *)(v42 + 80) = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(v42 + 96) = v45;
    long long v46 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)(v42 + 16) = *(_OWORD *)a5;
    *(_OWORD *)(v42 + 32) = v46;
    v98[3] = &type metadata for DIPClientGUID;
    uint64_t v47 = swift_allocObject();
    v98[0] = v47;
    long long v48 = *(_OWORD *)(a6 + 112);
    *(_OWORD *)(v47 + 112) = *(_OWORD *)(a6 + 96);
    *(_OWORD *)(v47 + 128) = v48;
    *(void *)(v47 + 144) = *(void *)(a6 + 128);
    long long v49 = *(_OWORD *)(a6 + 48);
    *(_OWORD *)(v47 + 48) = *(_OWORD *)(a6 + 32);
    *(_OWORD *)(v47 + 64) = v49;
    long long v50 = *(_OWORD *)(a6 + 80);
    *(_OWORD *)(v47 + 80) = *(_OWORD *)(a6 + 64);
    *(_OWORD *)(v47 + 96) = v50;
    long long v51 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)(v47 + 16) = *(_OWORD *)a6;
    *(_OWORD *)(v47 + 32) = v51;
    sub_1001D7238(a5);
    sub_1001D7238(a6);
    sub_1001AA604(v88, 0, 0, 0, (uint64_t)v99, (uint64_t)v98, v89, 0, (uint64_t)v29, 0, 0);
    sub_10000C6CC((uint64_t)v98, &qword_100726690);
    sub_10000C6CC((uint64_t)v99, &qword_100726690);
    uint64_t v40 = type metadata accessor for ODNAssessmentResult(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v29, 0, 1, v40);
    swift_beginAccess();
    sub_1001D9214((uint64_t)v29, v33, &qword_1007266B0);
  }
  swift_beginAccess();
  type metadata accessor for ODNAssessmentResult(0);
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48);
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (!v57(v33, 1, v40))
  {
    uint64_t v58 = *(void *)(v33 + 56);
    uint64_t v59 = *(void *)(v33 + 64);
    swift_bridgeObjectRetain();
  }
  uint64_t v60 = 1;
  if (v57(v33, 1, v40))
  {
    uint64_t v91 = 0;
    uint64_t v90 = 0;
    uint64_t v89 = 0;
    long long v88 = 0;
    uint64_t v87 = 0;
    long long v86 = 0;
    LODWORD(v85) = 0;
  }
  else
  {
    uint64_t v61 = *(void *)(v33 + 96);
    uint64_t v62 = *(void *)(v33 + 104);
    uint64_t v63 = *(void **)(v33 + 112);
    uint64_t v60 = *(void *)(v33 + 120);
    uint64_t v64 = *(void *)(v33 + 128);
    uint64_t v65 = *(char **)(v33 + 136);
    int v66 = *(unsigned __int8 *)(v33 + 144);
    uint64_t v91 = *(void *)(v33 + 88);
    uint64_t v90 = v61;
    uint64_t v89 = v62;
    long long v88 = v63;
    uint64_t v87 = v64;
    long long v86 = v65;
    LODWORD(v85) = v66;
    sub_1001D7368(v91, v61, v62, (uint64_t)v63, v60);
  }
  if (v57(v33, 1, v40))
  {
    uint64_t v84 = 0;
    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v67 = *(void *)(v33 + 224);
    uint64_t v84 = *(void *)(v33 + 216);
    swift_bridgeObjectRetain();
  }
  swift_beginAccess();
  if (v57(v33, 1, v40))
  {
    uint64_t v68 = type metadata accessor for AssessmentAdditionalInfo(0);
    uint64_t v69 = v97;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v97, 1, 1, v68);
  }
  else
  {
    uint64_t v69 = v97;
    sub_100048D6C(v33 + *(int *)(v40 + 44), v97, &qword_1007266B8);
  }
  uint64_t v70 = v96;
  swift_beginAccess();
  *(void *)(v70 + 16) = v58;
  *(void *)(v70 + 24) = v59;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v71 = *(void *)(a9 + 16);
  uint64_t v72 = *(void *)(a9 + 24);
  uint64_t v73 = *(void *)(a9 + 32);
  uint64_t v74 = *(void *)(a9 + 40);
  uint64_t v75 = *(void *)(a9 + 48);
  uint64_t v76 = v90;
  *(void *)(a9 + 16) = v91;
  *(void *)(a9 + 24) = v76;
  long long v77 = v88;
  *(void *)(a9 + 32) = v89;
  *(void *)(a9 + 40) = v77;
  uint64_t v78 = v87;
  *(void *)(a9 + 48) = v60;
  *(void *)(a9 + 56) = v78;
  *(void *)(a9 + 64) = v86;
  *(unsigned char *)(a9 + 72) = v85;
  sub_1001D7420(v71, v72, v73, v74, v75);
  swift_beginAccess();
  *(void *)(a10 + 16) = v84;
  *(void *)(a10 + 24) = v67;
  swift_bridgeObjectRelease();
  uint64_t v79 = v92;
  swift_beginAccess();
  sub_1001D9214(v69, v79, &qword_1007266B8);
  unint64_t v80 = v93;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v80, v95);
}

uint64_t sub_1001AA604@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  uint64_t v70 = a8;
  uint64_t v63 = a7;
  uint64_t v65 = a6;
  uint64_t v64 = a5;
  id v68 = a3;
  uint64_t v67 = a2;
  int v66 = a1;
  uint64_t v62 = a11;
  uint64_t v69 = a10;
  uint64_t v15 = type metadata accessor for DIPError.Code();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100007764(&qword_100726688);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v71 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v59 - v26;
  uint64_t v28 = *(void **)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (!v28)
  {
    uint64_t v33 = v25;
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for DIPError.Code.unexpectedDaemonState(_:), v15);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_11:
    uint64_t v36 = v71;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v22);
    uint64_t v37 = type metadata accessor for ODNAssessmentResult(0);
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(void *)(a9 + 32) = 0;
    uint64_t v38 = a9 + *(int *)(v37 + 44);
    uint64_t v39 = type metadata accessor for AssessmentAdditionalInfo(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
    *(_OWORD *)(a9 + 104) = 0u;
    *(_OWORD *)(a9 + 88) = 0u;
    *(_OWORD *)(a9 + 72) = 0u;
    *(_OWORD *)(a9 + 56) = 0u;
    *(_OWORD *)(a9 + 40) = 0u;
    *(void *)(a9 + 128) = 0;
    *(void *)(a9 + 136) = 0;
    *(void *)(a9 + 120) = 1;
    *(unsigned char *)(a9 + 144) = 0;
    *(_OWORD *)(a9 + 152) = 0u;
    *(_OWORD *)(a9 + 168) = 0u;
    *(_OWORD *)(a9 + 184) = 0u;
    *(_OWORD *)(a9 + 200) = 0u;
    *(_OWORD *)(a9 + 216) = 0u;
    return result;
  }
  uint64_t v29 = *(char **)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager);
  if (!v29)
  {
    uint64_t v33 = v25;
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for DIPError.Code.unexpectedDaemonState(_:), v15);
    id v34 = v28;
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    goto LABEL_11;
  }
  uint64_t v61 = v22;
  uint64_t v30 = *(void **)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService);
  if (!v30)
  {
    uint64_t v33 = v25;
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for DIPError.Code.unexpectedDaemonState(_:), v15);
    id v35 = v28;
    swift_retain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    swift_release();
    uint64_t v22 = v61;
    goto LABEL_11;
  }
  if (!v70)
  {
    uint64_t v48 = (uint64_t)v29;
    id v49 = v28;
    swift_retain();
    id v50 = v30;
    long long v51 = v66;
    swift_retain();
    id v59 = v49;
    id v52 = [v49 serviceName];
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v69 = v53;

    LODWORD(v62) = *(unsigned __int8 *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius);
    uint64_t v54 = *(void *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8);
    uint64_t v60 = *(void *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
    uint64_t v55 = *(void **)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper);
    int v56 = *(unsigned __int8 *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state);
    sub_100048D6C(v64, (uint64_t)v73, &qword_100726690);
    sub_100048D6C(v65, (uint64_t)v72, &qword_100726690);
    type metadata accessor for DIPODNator(0);
    memset(v74, 0, sizeof(v74));
    swift_allocObject();
    id v57 = v55;
    swift_retain();
    id v58 = v50;
    swift_bridgeObjectRetain();
    sub_1002E618C(v51, v70, v69, v62, v60, v54, v56, v55, v48, v58, (uint64_t)v73, (uint64_t)v72, (uint64_t *)v74, 0);
    sub_1002E88AC(v67, (uint64_t)v68, v63, a9);

    swift_release();
    return swift_release();
  }
  uint64_t v71 = v29;
  if (a4 && *(void *)(a4 + 16))
  {
    id v31 = v28;
    swift_retain();
    id v32 = v30;
    swift_retain();
    sub_1002F7874(v67, (uint64_t)v68, a4, a9);

    swift_release();
LABEL_20:
    return swift_release();
  }
  uint64_t v41 = v25;
  int v42 = *(unsigned __int8 *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius);
  id v68 = v28;
  swift_retain();
  id v43 = v30;
  swift_retain();
  if (v42 != 1 || !v69)
  {
    sub_1002F7874(0, 0, 0, a9);

    swift_release();
    goto LABEL_20;
  }
  defaultLogger()();
  long long v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    long long v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "fetching assessment based on attributes/bindings", v46, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v61);
  uint64_t v47 = v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile;
  swift_beginAccess();
  sub_100048D6C(v47, (uint64_t)v21, &qword_100726688);
  sub_1002F85D4(v69, v63, (uint64_t)v21, a9);
  swift_release();

  swift_release();
  return sub_10000C6CC((uint64_t)v21, &qword_100726688);
}

uint64_t sub_1001AB0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  uint64_t v301 = a8;
  uint64_t v290 = a7;
  uint64_t v315 = a5;
  uint64_t v316 = a6;
  id v314 = a4;
  uint64_t v309 = a2;
  uint64_t v311 = a1;
  uint64_t v280 = a9;
  uint64_t v296 = sub_100007764(&qword_1007265D8);
  uint64_t v295 = *(void *)(v296 - 8);
  __chkstk_darwin(v296);
  v278 = (char *)&v243 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SharingRegistrationResponse(0);
  __chkstk_darwin(v16 - 8);
  id v279 = (char *)&v243 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100007764((uint64_t *)&unk_1007265E0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v243 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v293 = type metadata accessor for UUID();
  uint64_t v291 = *(void *)(v293 - 8);
  __chkstk_darwin(v293);
  uint64_t v288 = (char *)&v243 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v292 = type metadata accessor for HardwareAttestationType();
  uint64_t v289 = *(void *)(v292 - 8);
  __chkstk_darwin(v292);
  uint64_t v304 = (char *)&v243 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v294 = type metadata accessor for SharingRegistrationRequest(0);
  __chkstk_darwin(v294);
  uint64_t v302 = (char *)&v243 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v298 = type metadata accessor for Logger();
  uint64_t v297 = *(void *)(v298 - 8);
  uint64_t v24 = __chkstk_darwin(v298);
  uint64_t v286 = (char *)&v243 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v268 = (char *)&v243 - v27;
  __chkstk_darwin(v26);
  uint64_t v271 = (char *)&v243 - v28;
  uint64_t v29 = type metadata accessor for DIPError.Code();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  id v32 = (char *)&v243 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DIPError();
  uint64_t v270 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v269 = (char *)&v243 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v277 = type metadata accessor for DispatchTime();
  uint64_t v276 = *(void *)(v277 - 8);
  uint64_t v35 = __chkstk_darwin(v277);
  uint64_t v274 = (char *)&v243 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v275 = (char *)&v243 - v37;
  uint64_t v272 = sub_100007764(&qword_100724178);
  unint64_t v267 = *(void *)(v272 - 8);
  uint64_t v38 = __chkstk_darwin(v272);
  uint64_t v265 = (char *)&v243 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  id v273 = (char *)&v243 - v40;
  uint64_t v41 = sub_100007764(&qword_100722300);
  __chkstk_darwin(v41 - 8);
  uint64_t v310 = (uint64_t)&v243 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v285 = type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v284 = *(void *)(v285 - 8);
  uint64_t v43 = __chkstk_darwin(v285);
  uint64_t v313 = (char *)&v243 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v319 = v44;
  __chkstk_darwin(v43);
  v281 = (char *)&v243 - v45;
  uint64_t v46 = sub_100007764(&qword_1007265F0);
  uint64_t v47 = __chkstk_darwin(v46 - 8);
  uint64_t v287 = (uint64_t)&v243 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __chkstk_darwin(v47);
  v266 = (char *)&v243 - v50;
  __chkstk_darwin(v49);
  id v317 = (char *)&v243 - v51;
  uint64_t v52 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v52 - 8);
  uint64_t v299 = type metadata accessor for DIPSignpost();
  uint64_t v300 = *(void *)(v299 - 8);
  __chkstk_darwin(v299);
  uint64_t v312 = (char *)&v243 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100007764(&qword_100726510);
  uint64_t v55 = __chkstk_darwin(v54);
  uint64_t v303 = (uint64_t *)((char *)&v243 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v55);
  id v58 = (char *)&v243 - v57;
  sub_1001D95B4(a3, (uint64_t)&v243 - v57, type metadata accessor for VerifiedClaim);
  uint64_t v59 = v315;
  uint64_t v60 = v316;
  uint64_t v61 = v320;
  uint64_t v308 = v54;
  uint64_t v62 = &v58[*(int *)(v54 + 48)];
  *(void *)uint64_t v62 = v314;
  *((void *)v62 + 1) = v59;
  *((void *)v62 + 2) = v60;
  uint64_t v63 = *(void **)(v61 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (!v63)
  {
    (*(void (**)(char *, void, uint64_t))(v30 + 104))(v32, enum case for DIPError.Code.unexpectedDaemonState(_:), v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v241 = 2807;
    unint64_t v239 = 0xD0000000000000A8;
    uint64_t v240 = (long long *)0x800000010063DDE0;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v92 = &qword_100726510;
    uint64_t v93 = (uint64_t)v58;
    return sub_10000C6CC(v93, v92);
  }
  uint64_t v260 = v30;
  uint64_t v261 = v29;
  uint64_t v262 = v33;
  unint64_t v263 = v32;
  uint64_t v282 = v58;
  v283 = v20;
  uint64_t v64 = *(void **)(v61 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService);
  if (!v64)
  {
    (*(void (**)(char *, void, uint64_t))(v260 + 104))(v263, enum case for DIPError.Code.unexpectedDaemonState(_:), v261);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v94 = v63;
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v241 = 2810;
    unint64_t v239 = 0xD0000000000000A8;
    uint64_t v240 = (long long *)0x800000010063DDE0;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    uint64_t v92 = &qword_100726510;
    uint64_t v93 = (uint64_t)v282;
    return sub_10000C6CC(v93, v92);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v65 = v63;
  id v66 = v64;
  static DaemonSignposts.getVerificationResultSharingRegistration.getter();
  DIPSignpost.init(_:)();
  uint64_t v67 = sub_100007764(&qword_1007265F8);
  uint64_t v68 = *(void *)(v67 - 8);
  uint64_t v69 = *(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56);
  uint64_t v251 = v68 + 56;
  v250 = v69;
  v69(v317, 1, 1, v67);
  uint64_t v70 = *(void *)(v311 + 24);
  id v255 = v65;
  id v259 = v66;
  uint64_t v254 = v70;
  if (!v70)
  {
    char v95 = sub_10006CB30();
    uint64_t v71 = v310;
    if (v95)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v284 + 56))(v310, 1, 1, v285);
      uint64_t v75 = v318;
      goto LABEL_22;
    }
LABEL_23:
    uint64_t v316 = _swiftEmptyArrayStorage;
LABEL_24:
    uint64_t v75 = v318;
    goto LABEL_25;
  }
  uint64_t v71 = v310;
  if ((*(unsigned char *)(v70 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareAccountAssessment) & 1) == 0
    && (sub_10006CB30() & 1) == 0)
  {
    goto LABEL_23;
  }
  uint64_t v248 = v68;
  uint64_t v249 = v67;
  sub_100048D6C(v70 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, v71, &qword_100722300);
  uint64_t v72 = v284;
  uint64_t v73 = v285;
  int v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v284 + 48))(v71, 1, v285);
  uint64_t v75 = v318;
  if (v74 == 1)
  {
LABEL_22:
    sub_10000C6CC(v71, &qword_100722300);
    uint64_t v316 = _swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  uint64_t v247 = a12;
  v246._rawValue = a11;
  uint64_t v76 = *(void *)(v72 + 32);
  long long v77 = v281;
  ((void (*)(char *, uint64_t, uint64_t))v76)(v281, v71, v73);
  BOOL v78 = *(unsigned char *)(v70 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareAccountAssessment) == 1;
  uint64_t v264 = v72 + 32;
  if (!v78)
  {
    uint64_t v316 = _swiftEmptyArrayStorage;
    char v151 = sub_10006CB30();
    if (v151)
    {
LABEL_50:
      uint64_t v152 = v320;
      uint64_t v153 = v274;
      static DispatchTime.now()();
      uint64_t v154 = v275;
      + infix(_:_:)();
      uint64_t v155 = *(void (**)(char *, uint64_t))(v276 + 8);
      uint64_t v156 = v277;
      v155(v153, v277);
      OS_dispatch_semaphore.wait(timeout:)();
      v155(v154, v156);
      if (static DispatchTimeoutResult.== infix(_:_:)())
      {
        (*(void (**)(char *, void, uint64_t))(v260 + 104))(v263, enum case for DIPError.Code.timeoutTaskDeviceInfo(_:), v261);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v241 = 2852;
        unint64_t v239 = 0xD0000000000000A8;
        uint64_t v240 = (long long *)0x800000010063DDE0;
        uint64_t v157 = v269;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v158 = v262;
        swift_allocError();
        uint64_t v159 = v270;
        (*(void (**)(uint64_t, char *, uint64_t))(v270 + 16))(v160, v157, v158);
        uint64_t v161 = v271;
        defaultLogger()();
        DIPRecordError(_:message:log:)();
        (*(void (**)(char *, uint64_t))(v297 + 8))(v161, v298);
        (*(void (**)(char *, uint64_t))(v159 + 8))(v157, v158);
        (*(void (**)(char *, uint64_t))(v284 + 8))(v281, v285);
        swift_errorRelease();
        goto LABEL_24;
      }
      long long v211 = (uint64_t *)(v152 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData);
      uint64_t v212 = *(void *)(v152 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 56);
      if (v212 == 1) {
        goto LABEL_96;
      }
      uint64_t v214 = *v211;
      uint64_t v213 = v211[1];
      uint64_t v215 = v211[2];
      uint64_t v216 = v211[3];
      uint64_t v217 = v211[4];
      uint64_t v218 = v211[5];
      uint64_t v219 = v211[6];
      sub_1001D6310(*v211, v213);
      sub_1001D62CC(v214, v213, v215, v216, v217, v218, v219, v212);
      sub_1001D59E4(v214, v213, v215, v216, v217, v218, v219, v212);
      if (v213 == 1)
      {
LABEL_96:
        uint64_t v220 = v268;
        defaultLogger()();
        uint64_t v221 = Logger.logObject.getter();
        os_log_type_t v222 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v221, v222))
        {
          uint64_t v223 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v223 = 0;
          _os_log_impl((void *)&_mh_execute_header, v221, v222, "Did not receive anything for DeviceInfo, skipping", v223, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v297 + 8))(v220, v298);
        (*(void (**)(char *, uint64_t))(v284 + 8))(v281, v285);
        goto LABEL_24;
      }
      uint64_t v226 = v284 + 16;
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v313, v281, v285);
      sub_100030A10(v247, (uint64_t)&v321);
      uint64_t v227 = *(unsigned __int8 *)(v226 + 64);
      uint64_t v245 = (void (*)(char *, char *, uint64_t))v76;
      uint64_t v228 = (v227 + 72) & ~v227;
      unint64_t v319 = (v319 + v228 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v229 = (char *)swift_allocObject();
      *((void *)v229 + 2) = v214;
      *((void *)v229 + 3) = v213;
      *((void *)v229 + 4) = v215;
      *((void *)v229 + 5) = v216;
      uint64_t v230 = v285;
      *((void *)v229 + 6) = v217;
      *((void *)v229 + 7) = v218;
      *((void *)v229 + 8) = v219;
      v245(&v229[v228], v313, v230);
      sub_10000C6B4(&v321, (uint64_t)&v229[v319]);
      uint64_t v231 = v249;
      uint64_t v241 = (uint64_t)v229;
      uint64_t v242 = v249;
      v232 = v266;
      uint64_t v233 = v318;
      runAsyncAndBlock<A>(timeout:file:function:line:_:)();
      uint64_t v75 = v233;
      if (v233)
      {
        swift_release();

        (*(void (**)(char *, uint64_t))(v284 + 8))(v281, v230);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v300 + 8))(v312, v299);
        uint64_t v225 = (uint64_t)v282;
LABEL_102:
        sub_10000C6CC(v225, &qword_100726510);
        goto LABEL_47;
      }
      swift_release();
      v250(v232, 0, 1, v231);
      uint64_t v236 = (uint64_t)v232;
      unint64_t v83 = v317;
      sub_1001D9214(v236, (uint64_t)v317, &qword_1007265F0);
      int v237 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v248 + 48))(v83, 1, v231);
      a10 = (uint64_t)v282;
      if (v237)
      {
LABEL_109:
        (*(void (**)(char *, uint64_t))(v284 + 8))(v281, v285);
LABEL_25:
        uint64_t v318 = v75;
        unint64_t v83 = a14;
        if (qword_10071F580 != -1) {
          goto LABEL_114;
        }
        goto LABEL_26;
      }
LABEL_111:
      JWSSignedJSON.setCertificateChain(_:)(v246);
      uint64_t v75 = v238;
      if (v238)
      {

        (*(void (**)(char *, uint64_t))(v284 + 8))(v281, v285);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v300 + 8))(v312, v299);
        sub_10000C6CC(a10, &qword_100726510);
        uint64_t v92 = &qword_1007265F0;
        uint64_t v93 = (uint64_t)v83;
        return sub_10000C6CC(v93, v92);
      }
      goto LABEL_109;
    }
LABEL_107:
    (*(void (**)(char *, uint64_t))(v72 + 8))(v77, v73);
    goto LABEL_24;
  }
  uint64_t v79 = *(void *)(*(void *)(v70 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes) + 16);
  uint64_t v245 = (void (*)(char *, char *, uint64_t))v76;
  if (v79)
  {
    uint64_t v315 = swift_bridgeObjectRetain();
    unint64_t v80 = (unsigned char *)(v315 + 64);
    unint64_t v81 = _swiftEmptyArrayStorage;
    unint64_t v82 = v319;
    unint64_t v83 = v303;
    do
    {
      char v87 = *v80;
      if (*v80)
      {
        long long v88 = (void *)*((void *)v80 - 4);
        uint64_t v89 = *((void *)v80 - 3);
        uint64_t v76 = *((void *)v80 - 2);
        uint64_t v90 = *((void *)v80 - 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v321 = v81;
        uint64_t v316 = v88;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1001115E0(0, v81[2] + 1, 1);
          unint64_t v81 = (void *)v321;
        }
        unint64_t v85 = v81[2];
        unint64_t v84 = v81[3];
        if (v85 >= v84 >> 1)
        {
          sub_1001115E0(v84 > 1, v85 + 1, 1);
          unint64_t v81 = (void *)v321;
        }
        v81[2] = v85 + 1;
        long long v86 = &v81[5 * v85];
        v86[4] = v316;
        v86[5] = v89;
        v86[6] = v76;
        v86[7] = v90;
        *((unsigned char *)v86 + 64) = v87;
        unint64_t v82 = v319;
        unint64_t v83 = v303;
      }
      v80 += 40;
      --v79;
    }
    while (v79);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v81 = _swiftEmptyArrayStorage;
    unint64_t v82 = v319;
    unint64_t v83 = v303;
  }
  uint64_t v162 = v318;
  uint64_t v163 = sub_1004D03AC((uint64_t)v83, v309, (uint64_t)v81);
  uint64_t v318 = v162;
  if (v162)
  {
    swift_release();

    (*(void (**)(char *, uint64_t))(v284 + 8))(v281, v285);
    (*(void (**)(char *, uint64_t))(v300 + 8))(v312, v299);
    sub_10000C6CC((uint64_t)v282, &qword_100726510);
    return sub_10000C6CC((uint64_t)v317, &qword_1007265F0);
  }
  uint64_t v166 = (char *)v163;
  unint64_t v167 = v164;
  uint64_t v168 = v165;
  swift_release();
  uint64_t v169 = (char **)((char *)v83 + *(int *)(v308 + 48));
  *uint64_t v169 = v166;
  v169[1] = (char *)v167;
  uint64_t v244 = v169;
  v169[2] = v168;
  uint64_t v170 = *((void *)v166 + 8);
  uint64_t v252 = v166 + 64;
  uint64_t v171 = 1 << v166[32];
  uint64_t v172 = -1;
  if (v171 < 64) {
    uint64_t v172 = ~(-1 << v171);
  }
  unint64_t v173 = v172 & v170;
  int64_t v253 = (unint64_t)(v171 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v175 = 0;
  uint64_t v176 = &_swiftEmptyDictionarySingleton;
  uint64_t v177 = v313;
  uint64_t v258 = v166;
  while (1)
  {
    if (v173)
    {
      uint64_t v305 = (v173 - 1) & v173;
      int64_t v306 = v175;
      unint64_t v179 = __clz(__rbit64(v173)) | (v175 << 6);
      goto LABEL_81;
    }
    unint64_t v180 = v175 + 1;
    if (__OFADD__(v175, 1))
    {
      __break(1u);
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
    if ((uint64_t)v180 >= v253) {
      goto LABEL_92;
    }
    unint64_t v181 = *(void *)&v252[8 * v180];
    int64_t v182 = v175 + 1;
    if (v181) {
      goto LABEL_80;
    }
    int64_t v182 = v175 + 2;
    if (v175 + 2 >= v253) {
      goto LABEL_92;
    }
    unint64_t v181 = *(void *)&v252[8 * v182];
    if (v181) {
      goto LABEL_80;
    }
    int64_t v182 = v175 + 3;
    if (v175 + 3 >= v253) {
      goto LABEL_92;
    }
    unint64_t v181 = *(void *)&v252[8 * v182];
    if (v181) {
      goto LABEL_80;
    }
    int64_t v182 = v175 + 4;
    if (v175 + 4 >= v253) {
      goto LABEL_92;
    }
    unint64_t v181 = *(void *)&v252[8 * v182];
    if (v181) {
      goto LABEL_80;
    }
    int64_t v182 = v175 + 5;
    if (v175 + 5 >= v253) {
      goto LABEL_92;
    }
    unint64_t v181 = *(void *)&v252[8 * v182];
    if (v181) {
      goto LABEL_80;
    }
    unint64_t v180 = v175 + 6;
    if (v175 + 6 >= v253)
    {
LABEL_92:
      swift_release();
      uint64_t v322 = (uint64_t)v176;
      uint64_t v202 = v318;
      sub_1001850DC((uint64_t)v244[1], &v322);
      uint64_t v203 = v322;
      uint64_t v204 = v284;
      uint64_t v205 = v284 + 16;
      long long v206 = v281;
      uint64_t v207 = v285;
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v177, v281, v285);
      sub_100030A10(v247, (uint64_t)&v321);
      unint64_t v208 = (*(unsigned __int8 *)(v205 + 64) + 24) & ~(unint64_t)*(unsigned __int8 *)(v205 + 64);
      uint64_t v209 = swift_allocObject();
      *(void *)(v209 + 16) = v203;
      v245((char *)(v209 + v208), v313, v207);
      uint64_t v76 = (uint64_t)v245;
      sub_10000C6B4(&v321, v209 + ((v82 + v208 + 7) & 0xFFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      uint64_t v177 = (char *)v272;
      uint64_t v241 = v209;
      uint64_t v242 = v272;
      long long v210 = v273;
      runAsyncAndBlock<A>(timeout:file:function:line:_:)();
      if (v202)
      {
        swift_release();

        (*(void (**)(char *, uint64_t))(v204 + 8))(v206, v207);
LABEL_101:
        (*(void (**)(char *, uint64_t))(v300 + 8))(v312, v299);
        sub_10000C6CC((uint64_t)v282, &qword_100726510);
        swift_bridgeObjectRelease();
        uint64_t v225 = (uint64_t)v303;
        goto LABEL_102;
      }
      swift_release();
      JWSSignedJSON.setCertificateChain(_:)(v246);
      if (v224)
      {

        (*(void (**)(char *, char *))(v267 + 8))(v210, v177);
        (*(void (**)(char *, uint64_t))(v284 + 8))(v281, v285);
        goto LABEL_101;
      }
      uint64_t v318 = 0;
      long long v234 = v210;
      unint64_t v82 = v267;
      uint64_t v166 = v265;
      (*(void (**)(char *, char *, char *))(v267 + 16))(v265, v234, v177);
      unint64_t v174 = sub_100110098(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      unint64_t v167 = *(void *)(v174 + 16);
      unint64_t v180 = *(void *)(v174 + 24);
      unint64_t v83 = (void *)(v167 + 1);
      if (v167 < v180 >> 1)
      {
LABEL_106:
        *(void *)(v174 + 16) = v83;
        unint64_t v235 = (*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
        uint64_t v316 = (void *)v174;
        (*(void (**)(unint64_t, char *, char *))(v82 + 32))(v174 + v235 + *(void *)(v82 + 72) * v167, v166, v177);
        (*(void (**)(char *, char *))(v82 + 8))(v273, v177);
        swift_bridgeObjectRelease();
        sub_10000C6CC((uint64_t)v303, &qword_100726510);
        uint64_t v72 = v284;
        uint64_t v73 = v285;
        long long v77 = v281;
        if (sub_10006CB30()) {
          goto LABEL_50;
        }
        goto LABEL_107;
      }
LABEL_117:
      unint64_t v174 = sub_100110098(v180 > 1, (int64_t)v83, 1, v174);
      goto LABEL_106;
    }
    unint64_t v181 = *(void *)&v252[8 * v180];
    if (!v181)
    {
      while (1)
      {
        int64_t v182 = v180 + 1;
        if (__OFADD__(v180, 1)) {
          goto LABEL_116;
        }
        if (v182 >= v253) {
          goto LABEL_92;
        }
        unint64_t v181 = *(void *)&v252[8 * v182];
        ++v180;
        if (v181) {
          goto LABEL_80;
        }
      }
    }
    int64_t v182 = v175 + 6;
LABEL_80:
    uint64_t v305 = (v181 - 1) & v181;
    int64_t v306 = v182;
    unint64_t v179 = __clz(__rbit64(v181)) + (v182 << 6);
LABEL_81:
    uint64_t v183 = *((void *)v166 + 7) + 96 * v179;
    a10 = *(void *)v183;
    unint64_t v83 = *(void **)(v183 + 8);
    unint64_t v167 = *(void *)(v183 + 24);
    uint64_t v184 = *(void *)(v183 + 32);
    uint64_t v185 = *(void *)(v183 + 40);
    uint64_t v307 = *(void *)(v183 + 16);
    uint64_t v308 = v184;
    LODWORD(v309) = *(unsigned __int8 *)(v183 + 48);
    uint64_t v186 = *(void *)(v183 + 64);
    uint64_t v310 = *(void *)(v183 + 56);
    uint64_t v187 = *(void *)(v183 + 80);
    id v314 = *(id *)(v183 + 72);
    uint64_t v315 = v187;
    LODWORD(v316) = *(unsigned __int8 *)(v183 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v188 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v321 = v176;
    unint64_t v190 = sub_100590548(a10, (uint64_t)v83);
    uint64_t v191 = v176[2];
    BOOL v192 = (v189 & 1) == 0;
    uint64_t v193 = v191 + v192;
    if (__OFADD__(v191, v192))
    {
      __break(1u);
      goto LABEL_111;
    }
    uint64_t v76 = v189;
    if (v176[3] >= v193)
    {
      if (v188)
      {
        if (v189) {
          goto LABEL_59;
        }
      }
      else
      {
        sub_10016BB88();
        uint64_t v176 = (void *)v321;
        if (v76) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      sub_100166DFC(v193, v188);
      uint64_t v176 = (void *)v321;
      unint64_t v194 = sub_100590548(a10, (uint64_t)v83);
      if ((v76 & 1) != (v195 & 1))
      {
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v190 = v194;
      if (v76)
      {
LABEL_59:
        uint64_t v76 = v176[7] + 96 * v190;
        uint64_t v256 = *(void *)(v76 + 64);
        uint64_t v257 = *(void *)(v76 + 80);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v76 = a10;
        *(void *)(v76 + 8) = v83;
        *(void *)(v76 + 16) = v307;
        *(void *)(v76 + 24) = v167;
        *(void *)(v76 + 32) = v308;
        *(void *)(v76 + 40) = v185;
        *(unsigned char *)(v76 + 48) = v309;
        *(void *)(v76 + 56) = v310;
        *(void *)(v76 + 64) = v186;
        uint64_t v178 = v315;
        *(void *)(v76 + 72) = v314;
        *(void *)(v76 + 80) = v178;
        *(unsigned char *)(v76 + 88) = (_BYTE)v316;
        goto LABEL_60;
      }
    }
    v176[(v190 >> 6) + 8] |= 1 << v190;
    uint64_t v196 = (uint64_t *)(v176[6] + 16 * v190);
    *uint64_t v196 = a10;
    v196[1] = (uint64_t)v83;
    uint64_t v197 = v176[7] + 96 * v190;
    *(void *)uint64_t v197 = a10;
    *(void *)(v197 + 8) = v83;
    *(void *)(v197 + 16) = v307;
    *(void *)(v197 + 24) = v167;
    *(void *)(v197 + 32) = v308;
    *(void *)(v197 + 40) = v185;
    *(unsigned char *)(v197 + 48) = v309;
    *(void *)(v197 + 56) = v310;
    *(void *)(v197 + 64) = v186;
    uint64_t v198 = v315;
    *(void *)(v197 + 72) = v314;
    *(void *)(v197 + 80) = v198;
    *(unsigned char *)(v197 + 88) = (_BYTE)v316;
    uint64_t v199 = v176[2];
    BOOL v200 = __OFADD__(v199, 1);
    uint64_t v201 = v199 + 1;
    if (v200) {
      break;
    }
    v176[2] = v201;
    swift_bridgeObjectRetain();
LABEL_60:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v177 = v313;
    unint64_t v82 = v319;
    uint64_t v166 = v258;
    unint64_t v173 = v305;
    int64_t v175 = v306;
  }
  __break(1u);
LABEL_114:
  swift_once();
LABEL_26:
  id v97 = [self deviceLockState];
  uint64_t v98 = v286;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v99 = Logger.logObject.getter();
  os_log_type_t v100 = static os_log_type_t.debug.getter();
  BOOL v101 = os_log_type_enabled(v99, v100);
  unint64_t v319 = (unint64_t)v83;
  uint64_t v315 = a10;
  if (v101)
  {
    id v314 = v97;
    uint64_t v102 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v321 = swift_slowAlloc();
    *(_DWORD *)uint64_t v102 = 136446210;
    if (a10) {
      uint64_t v103 = v301;
    }
    else {
      uint64_t v103 = 1701736302;
    }
    if (a10) {
      unint64_t v104 = a10;
    }
    else {
      unint64_t v104 = 0xE400000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v322 = sub_100110D58(v103, v104, (uint64_t *)&v321);
    id v97 = v314;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v99, v100, "share register is using guid %{public}s", v102, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v83 = (void *)v319;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(char *, uint64_t))(v297 + 8))(v98, v298);
  uint64_t v105 = (uint64_t)v302;
  uint64_t v106 = v290;
  sub_10000C728(v83, v83[3]);
  dispatch thunk of IdentityKey.attestationType()();
  if (v254)
  {
    long long v107 = *(char **)(v254 + 24);
    uint64_t v310 = *(void *)(v254 + 16);
    uint64_t v313 = v107;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v313 = (char *)0xEB00000000454C42;
    uint64_t v310 = 0x414C494156414E55;
  }
  id v314 = a13;
  unint64_t v108 = (unint64_t)v97 - 1;
  sub_100007764(&qword_100726600);
  uint64_t v109 = *(void *)(type metadata accessor for VerifiedClaimPresentment(0) - 8);
  unint64_t v110 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
  uint64_t v111 = swift_allocObject();
  *(_OWORD *)(v111 + 16) = xmmword_100610730;
  sub_1001D95B4(v106, v111 + v110, type metadata accessor for VerifiedClaimPresentment);
  uint64_t v112 = 0;
  uint64_t v113 = (uint64_t *)(v320 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData);
  uint64_t v114 = *(void *)(v320 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 56);
  if (v114 != 1)
  {
    uint64_t v309 = (uint64_t)v97 - 1;
    uint64_t v116 = v113[5];
    uint64_t v115 = v113[6];
    uint64_t v118 = v113[3];
    uint64_t v117 = v113[4];
    uint64_t v120 = v113[1];
    uint64_t v119 = v113[2];
    uint64_t v121 = *v113;
    sub_1001D62CC(*v113, v120, v119, v118, v117, v116, v115, v114);
    swift_bridgeObjectRetain();
    uint64_t v122 = v117;
    uint64_t v105 = (uint64_t)v302;
    uint64_t v123 = v115;
    unint64_t v108 = v309;
    sub_1001D59E4(v121, v120, v119, v118, v122, v116, v123, v114);
    uint64_t v112 = v114;
  }
  uint64_t v124 = v287;
  sub_100048D6C((uint64_t)v317, v287, &qword_1007265F0);
  uint64_t v125 = v288;
  UUID.init()();
  uint64_t v126 = UUID.uuidString.getter();
  uint64_t v128 = v127;
  (*(void (**)(char *, uint64_t))(v291 + 8))(v125, v293);
  *(void *)uint64_t v105 = 0;
  *(void *)(v105 + 8) = 0xE000000000000000;
  *(void *)(v105 + 16) = v126;
  *(void *)(v105 + 24) = v128;
  *(_OWORD *)(v105 + 32) = 0u;
  *(_OWORD *)(v105 + 48) = 0u;
  *(_OWORD *)(v105 + 64) = 0u;
  uint64_t v129 = (int *)v294;
  (*(void (**)(uint64_t, char *, uint64_t))(v289 + 32))(v105 + *(int *)(v294 + 24), v304, v292);
  uint64_t v130 = (uint64_t *)(v105 + v129[7]);
  uint64_t v131 = v313;
  *uint64_t v130 = v310;
  v130[1] = (uint64_t)v131;
  uint64_t v132 = (uint64_t *)(v105 + v129[8]);
  uint64_t v133 = v315;
  uint64_t *v132 = v301;
  v132[1] = v133;
  *(void *)(v105 + v129[9]) = v111;
  *(void *)(v105 + v129[10]) = v316;
  uint64_t v134 = (_OWORD *)(v105 + v129[11]);
  *uint64_t v134 = 0u;
  v134[1] = 0u;
  *(void *)(v105 + v129[12]) = v112;
  sub_1000BEA14(v124, v105 + v129[13], &qword_1007265F0);
  *(unsigned char *)(v105 + v129[14]) = v108 < 2;
  *(void *)&long long v321 = 0;
  uint64_t v135 = v295;
  unint64_t v136 = (unint64_t)v283;
  uint64_t v137 = v296;
  uint64_t v138 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v295 + 56))(v283, 1, 1, v296);
  __chkstk_darwin(v138);
  id v139 = v259;
  *(&v243 - 10) = v140;
  *(&v243 - 9) = (uint64_t)v139;
  uint64_t v141 = v311;
  *(&v243 - 8) = v105;
  *(&v243 - 7) = v141;
  unint64_t v142 = v319;
  *(&v243 - 6) = (uint64_t)v314;
  *(&v243 - 5) = v142;
  unint64_t v239 = v136;
  uint64_t v240 = &v321;
  id v143 = v255;
  uint64_t v241 = (uint64_t)v255;
  swift_bridgeObjectRetain();
  uint64_t v144 = v318;
  DIPRetrier.sync(_:)();
  if (v144)
  {
    (*(void (**)(char *, uint64_t))(v300 + 8))(v312, v299);
    sub_10000C6CC((uint64_t)v282, &qword_100726510);

    uint64_t v145 = (uint64_t)v283;
  }
  else
  {
    BOOL v146 = v312;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t v147 = (uint64_t)v283;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v283, 1, v137))
    {
      (*(void (**)(char *, void, uint64_t))(v260 + 104))(v263, enum case for DIPError.Code.serverResponseInconsistent(_:), v261);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      uint64_t v241 = 2955;
      unint64_t v239 = 0xD0000000000000A8;
      uint64_t v240 = (long long *)0x800000010063DDE0;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v300 + 8))(v146, v299);
      sub_10000C6CC((uint64_t)v282, &qword_100726510);
    }
    else
    {
      uint64_t v148 = v278;
      (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v278, v147, v137);
      uint64_t v149 = (uint64_t)v279;
      JWSSignedJSON.payload.getter();
      (*(void (**)(char *, uint64_t))(v135 + 8))(v148, v137);

      (*(void (**)(char *, uint64_t))(v300 + 8))(v146, v299);
      sub_10000C6CC((uint64_t)v282, &qword_100726510);
      sub_1001D7624(v149, v280, type metadata accessor for SharingRegistrationResponse);
    }
    uint64_t v145 = v147;
  }
  sub_10000C6CC(v145, (uint64_t *)&unk_1007265E0);
  swift_errorRelease();
  sub_1001D961C(v105, type metadata accessor for SharingRegistrationRequest);
LABEL_47:
  uint64_t v92 = &qword_1007265F0;
  uint64_t v93 = (uint64_t)v317;
  return sub_10000C6CC(v93, v92);
}

uint64_t sub_1001AD89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  return _swift_task_switch(sub_1001AD8C0, 0, 0);
}

uint64_t sub_1001AD8C0()
{
  *(void *)(v0 + 56) = *(void *)(v0 + 72);
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  uint64_t v2 = sub_100007764(&qword_1007264A0);
  sub_1001D5D7C();
  sub_1001D5E1C();
  *uint64_t v1 = v0;
  v1[1] = sub_1001AD9C8;
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  return createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)(v5, v0 + 56, v3, v4, v0 + 16, 0, 0, v2);
}

uint64_t sub_1001AD9C8()
{
  uint64_t v2 = *v1 + 16;
  uint64_t v3 = *v1;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  sub_10000C6CC(v2, &qword_1007265B8);
  if (v0)
  {
    return _swift_task_switch(sub_1001ADB10, 0, 0);
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
}

uint64_t sub_1001ADB10()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ADB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  return _swift_task_switch(sub_1001ADB4C, 0, 0);
}

uint64_t sub_1001ADB4C()
{
  uint64_t v1 = *(long long **)(v0 + 120);
  long long v3 = v1[1];
  long long v2 = v1[2];
  long long v4 = *v1;
  *(void *)(v0 + 64) = *((void *)v1 + 6);
  *(_OWORD *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v0 + 16) = v4;
  *(_OWORD *)(v0 + 88) = 0u;
  *(void *)(v0 + 104) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v5;
  sub_1001D67E0();
  sub_1001D6834();
  *uint64_t v5 = v0;
  v5[1] = sub_1001ADC54;
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 112);
  return createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)(v8, v0 + 16, v6, v7, v0 + 72, 0, 0, &type metadata for AccountAssessmentDeviceData);
}

uint64_t sub_1001ADC54()
{
  uint64_t v2 = *v1 + 72;
  uint64_t v3 = *v1;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc();
  sub_10000C6CC(v2, &qword_1007265B8);
  if (v0)
  {
    return _swift_task_switch(sub_1001ADD9C, 0, 0);
  }
  else
  {
    long long v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
}

uint64_t sub_1001ADD9C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ADDB4@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, void *a9, void *a10)
{
  uint64_t v66 = a6;
  uint64_t v67 = (char *)a7;
  uint64_t v64 = a2;
  uint64_t v65 = a5;
  uint64_t v63 = a8;
  uint64_t v62 = type metadata accessor for DIPError.Code();
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v61 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v59 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v20 = sub_100007764(&qword_100723600);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v56 - v24;
  uint64_t v68 = v64;
  uint64_t v69 = a3;
  uint64_t v70 = a1;
  uint64_t v71 = a4;
  uint64_t v72 = v65;
  uint64_t v73 = v66;
  uint64_t v74 = (uint64_t)v67;
  uint64_t v75 = a9;
  DIPRetrier.sync(_:)();
  uint64_t v66 = a4;
  uint64_t v67 = v23;
  uint64_t v64 = v17;
  uint64_t v65 = v14;
  uint64_t v26 = v62;
  uint64_t v27 = v61;
  uint64_t v28 = *a9;
  if (*a9)
  {
    uint64_t v58 = a1;
    swift_getErrorValue();
    swift_errorRetain();
    Error.dipErrorCode.getter();
    uint64_t v29 = v60;
    uint64_t v30 = v28;
    uint64_t v31 = v26;
    int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48))(v25, 1, v26);
    uint64_t v33 = v27;
    if (v32 == 1) {
      goto LABEL_3;
    }
    uint64_t v57 = v30;
    uint64_t v41 = (uint64_t)v67;
    sub_100048D6C((uint64_t)v25, (uint64_t)v67, &qword_100723600);
    int v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 88))(v41, v31);
    if (v42 != enum case for DIPError.Code.topekaInvalidNonce(_:))
    {
      if (v42 == enum case for DIPError.Code.topekaIdentityNotFound(_:))
      {
        defaultLogger()();
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v48 = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "identity not found, clearing local cache", v48, 2u);
          swift_slowDealloc();
        }

        uint64_t v49 = *(void (**)(char *, uint64_t))(v59 + 8);
        uint64_t v50 = v65;
        v49(v19, v65);
        id v51 = [a10 serviceName];
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v54 = v53;

        sub_1001A3B94(v52, v54, 0);
        swift_bridgeObjectRelease();
        uint64_t v55 = v64;
        defaultLogger()();
        DIPRecordError(_:message:log:)();
        v49(v55, v50);
        (*(void (**)(char *, void, uint64_t))(v60 + 104))(v33, enum case for DIPError.Code.topekaCanNotResume(_:), v31);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v34 = swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        goto LABEL_4;
      }
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v41, v31);
LABEL_3:
      (*(void (**)(char *, void, uint64_t))(v29 + 104))(v33, enum case for DIPError.Code.internalError(_:), v31);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v34 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
LABEL_4:
      swift_errorRelease();
      sub_10000C6CC((uint64_t)v25, &qword_100723600);
      uint64_t v35 = v63;
      *uint64_t v63 = v34;
      uint64_t v36 = enum case for DIPRetryResult.stopWithError(_:);
      uint64_t v37 = type metadata accessor for DIPRetryResult();
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 104))(v35, v36, v37);
    }
    sub_10006D248((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v43 = v63;
    *uint64_t v63 = v57;
    uint64_t v44 = enum case for DIPRetryResult.retryWithError(_:);
    uint64_t v45 = type metadata accessor for DIPRetryResult();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 104))(v43, v44, v45);
    return sub_10000C6CC((uint64_t)v25, &qword_100723600);
  }
  else
  {
    uint64_t v39 = enum case for DIPRetryResult.stop(_:);
    uint64_t v40 = type metadata accessor for DIPRetryResult();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104))(v63, v39, v40);
  }
}

uint64_t sub_1001AE5A0@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, void (*a6)(char *, void *)@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t *a9)
{
  uint64_t v103 = a7;
  uint64_t v111 = a6;
  v113._rawValue = a5;
  uint64_t v118 = a4;
  uint64_t v119 = a8;
  uint64_t v124 = 0;
  uint64_t v12 = sub_100007764(&qword_100726640);
  __chkstk_darwin(v12 - 8);
  uint64_t v105 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for DIPError();
  uint64_t v104 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v106 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100007764((uint64_t *)&unk_1007265E0);
  __chkstk_darwin(v15 - 8);
  long long v107 = (char *)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for DIPError.Code();
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v115 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SharingRegistrationRequest(0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = (void *)sub_100007764(&qword_100726648);
  uint64_t v123 = *(v120 - 1);
  uint64_t v21 = __chkstk_darwin(v120);
  uint64_t v114 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v110 = (char *)&v103 - v24;
  uint64_t v109 = v25;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v103 - v26;
  uint64_t v29 = *(void *)(a3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
  uint64_t v28 = *(void *)(a3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8);
  unint64_t v108 = a1;
  uint64_t v31 = *(void *)&a1[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  uint64_t v30 = *(void *)&a1[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)a2 = v31;
  *(void *)(a2 + 8) = v30;
  sub_1002D4260(v29, v28, (uint64_t *)v126);
  long long v121 = v126[1];
  long long v122 = v126[0];
  uint64_t v32 = v127;
  uint64_t v33 = v128;
  sub_1000AAC30(*(void *)(a2 + 32), *(void *)(a2 + 40));
  long long v34 = v121;
  *(_OWORD *)(a2 + 32) = v122;
  *(_OWORD *)(a2 + 48) = v34;
  *(void *)(a2 + 64) = v32;
  *(void *)(a2 + 72) = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a2;
  uint64_t v36 = v27;
  sub_1001D95B4(v35, (uint64_t)v20, type metadata accessor for SharingRegistrationRequest);
  sub_1001C6628(&qword_100726650, (void (*)(uint64_t))type metadata accessor for SharingRegistrationRequest);
  sub_1001C6628(&qword_100726658, (void (*)(uint64_t))type metadata accessor for SharingRegistrationRequest);
  JWSSignedJSON.init(payload:)();
  if (*(unsigned char *)(a3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius) == 1)
  {
    uint64_t v37 = v116;
    uint64_t v38 = v117;
    uint64_t v39 = v115;
    uint64_t v40 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v40 + 16) = 18;
    *(void *)(v40 + 40) = 0;
    *(_WORD *)(v40 + 48) = 0;
    *(void *)(v40 + 32) = 0;
    int v41 = SecRandomCopyBytes(kSecRandomDefault, 0x12uLL, (void *)(v40 + 32));
    if (v41)
    {
      int v42 = v41;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v37 + 104))(v39, enum case for DIPError.Code.systemSecError(_:), v38);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v43 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v44 = (*(unsigned __int8 *)(*(void *)v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v43 + 80);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_100610730;
      unint64_t v46 = v45 + v44;
      unint64_t v47 = v46 + v43[14];
      uint64_t v48 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v49 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 104))(v46, v48, v49);
      *(void *)(v47 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v47 = v42;
      sub_10015C504(v45);
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v50 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, void *))(v123 + 8))(v36, v120);
LABEL_11:
      uint64_t v66 = v119;
      *uint64_t v119 = v50;
      uint64_t v67 = enum case for DIPRetryResult.stopWithError(_:);
      uint64_t v68 = type metadata accessor for DIPRetryResult();
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 104))(v66, v67, v68);
    }
    uint64_t v55 = sub_10014D4E0(v40);
    unint64_t v57 = v56;
    swift_bridgeObjectRelease();
    Swift::String v58 = Data.base64EncodedString(options:)(0);
    sub_10000C5F4(v55, v57);
    uint64_t v59 = v120;
    JWSSignedJSON.setSalt(_:)(v58);
  }
  else
  {
    unint64_t v51 = sub_10015CF20((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v52 = v124;
    unint64_t v53 = sub_100195524(v118, 0, v51);
    uint64_t v50 = v52;
    if (v52)
    {
      (*(void (**)(char *, void *))(v123 + 8))(v36, v120);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    uint64_t v60 = (uint64_t)v53;
    uint64_t v61 = v54;
    swift_bridgeObjectRelease();
    v62._uint64_t countAndFlagsBits = v60;
    v62._object = v61;
    uint64_t v59 = v120;
    JWSSignedJSON.setNonce(_:)(v62);
  }
  swift_bridgeObjectRelease();
  JWSSignedJSON.setCertificateChain(_:)(v113);
  uint64_t v50 = v63;
  uint64_t v64 = v114;
  if (v63)
  {
    (*(void (**)(char *, void *))(v123 + 8))(v36, v59);
    goto LABEL_11;
  }
  uint64_t v65 = (uint64_t)v111;
  JWSSignedJSON.setKid(_:)();
  uint64_t v70 = v123;
  uint64_t v120 = *(void **)(v123 + 16);
  *(void *)&long long v121 = v123 + 16;
  ((void (*)(char *, char *, void *))v120)(v64, v36, v59);
  sub_100030A10(v65, (uint64_t)v125);
  uint64_t v71 = *(unsigned __int8 *)(v70 + 80);
  uint64_t v72 = (v71 + 16) & ~v71;
  v113._rawValue = (char *)v109 + 7;
  unint64_t v73 = ((unint64_t)v109 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v116 = v71 | 7;
  uint64_t v74 = swift_allocObject();
  uint64_t v115 = *(char **)(v70 + 32);
  ((void (*)(uint64_t, char *, void *))v115)(v74 + v72, v64, v59);
  sub_10000C6B4(v125, v74 + v73);
  uint64_t v75 = v110;
  *(void *)&long long v122 = 0xD0000000000000A8;
  uint64_t v117 = 0x800000010063DDE0;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  uint64_t v109 = a9;
  uint64_t v124 = 0;
  uint64_t v76 = *(void (**)(char *, void *))(v70 + 8);
  uint64_t v123 = v70 + 8;
  uint64_t v111 = v76;
  v76(v36, v59);
  swift_release();
  long long v77 = (void (*)(uint64_t, char *, void *))v115;
  ((void (*)(char *, char *, void *))v115)(v36, v75, v59);
  BOOL v78 = v114;
  unint64_t v110 = v36;
  ((void (*)(char *, char *, void *))v120)(v114, v36, v59);
  uint64_t v79 = (v71 + 24) & ~v71;
  unint64_t v80 = ((unint64_t)v113._rawValue + v79) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v81 = swift_allocObject();
  unint64_t v82 = v108;
  *(void *)(v81 + 16) = v108;
  v77(v81 + v79, v78, v59);
  *(void *)(v81 + v80) = v118;
  id v83 = v82;
  swift_retain();
  uint64_t v84 = sub_100007764(&qword_1007265D8);
  uint64_t v85 = (uint64_t)v107;
  uint64_t v86 = v124;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  char v87 = v59;
  swift_release();
  if (v86)
  {
    long long v88 = v109;
    uint64_t *v109 = v86;
    swift_errorRelease();
    uint64_t v89 = v119;
    uint64_t v90 = v112;
    uint64_t v91 = v110;
    uint64_t v92 = v106;
    uint64_t v93 = (uint64_t)v105;
    uint64_t v94 = v104;
    char v95 = v88;
  }
  else
  {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v85, 0, 1, v84);
    sub_1001D9214(v85, v103, (uint64_t *)&unk_1007265E0);
    uint64_t v89 = v119;
    uint64_t v90 = v112;
    uint64_t v91 = v110;
    uint64_t v92 = v106;
    uint64_t v93 = (uint64_t)v105;
    uint64_t v94 = v104;
    char v95 = v109;
  }
  if (!*v95)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v93, 1, 1, v90);
    goto LABEL_20;
  }
  *(void *)&v125[0] = *v95;
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  int v96 = swift_dynamicCast();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v94 + 56))(v93, v96 ^ 1u, 1, v90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v93, 1, v90) == 1)
  {
LABEL_20:
    v111(v91, v87);
    sub_10000C6CC(v93, &qword_100726640);
LABEL_21:
    os_log_type_t v100 = (unsigned int *)&enum case for DIPRetryResult.stop(_:);
    goto LABEL_22;
  }
  id v97 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 32);
  v97(v92, v93, v90);
  if ((DIPError.isAuthorizationError.getter() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v90);
    v111(v91, v87);
    goto LABEL_21;
  }
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v98 = swift_allocError();
  v97(v99, (uint64_t)v92, v90);
  v111(v91, v87);
  uint64_t *v89 = v98;
  os_log_type_t v100 = (unsigned int *)&enum case for DIPRetryResult.retryWithError(_:);
LABEL_22:
  uint64_t v101 = *v100;
  uint64_t v102 = type metadata accessor for DIPRetryResult();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v102 - 8) + 104))(v89, v101, v102);
}

uint64_t sub_1001AF3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1001AF408, 0, 0);
}

uint64_t sub_1001AF408()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = sub_100007764(&qword_100726648);
  v0[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[6] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10019BFA8;
  uint64_t v6 = v0[4];
  return JWSSignedJSON.sign(_:)(v6, v3);
}

uint64_t sub_1001AF514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_100025D64;
  return sub_1002C1358(a1, a3, a4);
}

uint64_t sub_1001AF5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 1248) = v8;
  *(void *)(v9 + 1240) = v41;
  *(void *)(v9 + 1232) = v40;
  *(void *)(v9 + 1224) = v39;
  *(void *)(v9 + 1216) = v38;
  *(_OWORD *)(v9 + 1200) = v37;
  *(void *)(v9 + 1192) = v36;
  *(void *)(v9 + 1184) = v35;
  *(void *)(v9 + 1176) = v34;
  *(void *)(v9 + 1168) = v32;
  *(void *)(v9 + 1160) = v31;
  *(void *)(v9 + 1152) = a8;
  *(void *)(v9 + 1144) = a7;
  *(void *)(v9 + 1136) = a6;
  *(void *)(v9 + 1128) = a5;
  *(void *)(v9 + 1120) = a4;
  *(void *)(v9 + 1112) = a3;
  *(void *)(v9 + 1104) = a2;
  *(void *)(v9 + 1096) = a1;
  uint64_t v10 = sub_100007764(&qword_100726548);
  *(void *)(v9 + 1256) = v10;
  *(void *)(v9 + 1264) = *(void *)(v10 - 8);
  *(void *)(v9 + 1272) = swift_task_alloc();
  *(void *)(v9 + 1280) = type metadata accessor for IdentitySharingRequest(0);
  *(void *)(v9 + 1288) = swift_task_alloc();
  *(void *)(v9 + 1296) = swift_task_alloc();
  uint64_t v11 = sub_100007764((uint64_t *)&unk_100726500);
  *(void *)(v9 + 1304) = v11;
  *(void *)(v9 + 1312) = *(void *)(v11 - 8);
  *(void *)(v9 + 1320) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization(0);
  *(void *)(v9 + 1328) = v12;
  *(void *)(v9 + 1336) = *(void *)(v12 - 8);
  *(void *)(v9 + 1344) = swift_task_alloc();
  uint64_t v13 = sub_100007764((uint64_t *)&unk_100726550);
  *(void *)(v9 + 1352) = v13;
  *(void *)(v9 + 1360) = *(void *)(v13 - 8);
  *(void *)(v9 + 1368) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Date();
  *(void *)(v9 + 1376) = v14;
  *(void *)(v9 + 1384) = *(void *)(v14 - 8);
  *(void *)(v9 + 1392) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for UUID();
  *(void *)(v9 + 1400) = v15;
  *(void *)(v9 + 1408) = *(void *)(v15 - 8);
  *(void *)(v9 + 1416) = swift_task_alloc();
  uint64_t v16 = sub_100007764(&qword_100723718);
  *(void *)(v9 + 1424) = v16;
  *(void *)(v9 + 1432) = *(void *)(v16 - 8);
  *(void *)(v9 + 1440) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for DIPError.Code();
  *(void *)(v9 + 1448) = v17;
  *(void *)(v9 + 1456) = *(void *)(v17 - 8);
  *(void *)(v9 + 1464) = swift_task_alloc();
  uint64_t v18 = sub_100007764(&qword_100724178);
  *(void *)(v9 + 1472) = v18;
  *(void *)(v9 + 1480) = *(void *)(v18 - 8);
  *(void *)(v9 + 1488) = swift_task_alloc();
  *(void *)(v9 + 1496) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for EncryptedMessageEntity();
  *(void *)(v9 + 1504) = v19;
  *(void *)(v9 + 1512) = *(void *)(v19 - 8);
  *(void *)(v9 + 1520) = swift_task_alloc();
  uint64_t v20 = sub_100007764((uint64_t *)&unk_100726030);
  *(void *)(v9 + 1528) = v20;
  *(void *)(v9 + 1536) = *(void *)(v20 - 8);
  *(void *)(v9 + 1544) = swift_task_alloc();
  *(void *)(v9 + 1552) = swift_task_alloc();
  uint64_t v21 = sub_100007764(&qword_100726560);
  *(void *)(v9 + 1560) = v21;
  *(void *)(v9 + 1568) = *(void *)(v21 - 8);
  *(void *)(v9 + 1576) = swift_task_alloc();
  uint64_t v22 = type metadata accessor for RecipientEncryptionCertificate();
  *(void *)(v9 + 1584) = v22;
  *(void *)(v9 + 1592) = *(void *)(v22 - 8);
  *(void *)(v9 + 1600) = swift_task_alloc();
  uint64_t v23 = type metadata accessor for Logger();
  *(void *)(v9 + 1608) = v23;
  *(void *)(v9 + 1616) = *(void *)(v23 - 8);
  *(void *)(v9 + 1624) = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  *(void *)(v9 + 1632) = swift_task_alloc();
  uint64_t v24 = type metadata accessor for DIPSignpost();
  *(void *)(v9 + 1640) = v24;
  *(void *)(v9 + 1648) = *(void *)(v24 - 8);
  *(void *)(v9 + 1656) = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_100726568);
  *(void *)(v9 + 1664) = swift_task_alloc();
  uint64_t v25 = type metadata accessor for SharingCredentials(0);
  *(void *)(v9 + 1672) = v25;
  *(void *)(v9 + 1680) = *(void *)(v25 - 8);
  *(void *)(v9 + 1688) = swift_task_alloc();
  uint64_t v26 = sub_100007764(&qword_100726510);
  *(void *)(v9 + 1696) = v26;
  *(void *)(v9 + 1704) = swift_task_alloc();
  *(void *)(v9 + 1712) = swift_task_alloc();
  *(void *)(v9 + 1720) = swift_task_alloc();
  *(void *)(v9 + 1728) = swift_task_alloc();
  uint64_t v27 = swift_task_alloc();
  *(void *)(v9 + 1736) = v27;
  sub_1001D95B4(v33, v27, type metadata accessor for VerifiedClaim);
  uint64_t v28 = (void *)(v27 + *(int *)(v26 + 48));
  *uint64_t v28 = v34;
  v28[1] = v35;
  v28[2] = v36;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  return _swift_task_switch(sub_1001AFE0C, 0, 0);
}

uint64_t sub_1001AFE0C()
{
  uint64_t v199 = v0;
  unint64_t v3 = (unint64_t)v0;
  uint64_t v4 = *((void *)v0 + 156);
  uint64_t v5 = *(void **)(v4 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  *((void *)v0 + 218) = v5;
  if (!v5)
  {
    uint64_t v19 = *((void *)v0 + 217);
    uint64_t v20 = *((void *)v0 + 183);
    uint64_t v21 = *((void *)v0 + 182);
    uint64_t v22 = *((void *)v0 + 181);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v20, enum case for DIPError.Code.unexpectedDaemonState(_:), v22);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_7:
    uint64_t v27 = v19;
LABEL_50:
    sub_10000C6CC(v27, &qword_100726510);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v55 = *(uint64_t (**)(void))(v3 + 8);
    return v55();
  }
  uint64_t v6 = *(void **)(v4 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService);
  *((void *)v0 + 219) = v6;
  if (!v6)
  {
    uint64_t v19 = *((void *)v0 + 217);
    uint64_t v23 = *((void *)v0 + 183);
    uint64_t v24 = *((void *)v0 + 182);
    uint64_t v25 = *((void *)v0 + 181);
    id v26 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v23, enum case for DIPError.Code.unexpectedDaemonState(_:), v25);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    goto LABEL_7;
  }
  uint64_t v7 = *((void *)v0 + 210);
  uint64_t v8 = *((void *)v0 + 209);
  uint64_t v9 = *((void *)v0 + 208);
  uint64_t v10 = *(void *)(v3 + 1112);
  uint64_t v11 = type metadata accessor for SharingRegistrationResponse(0);
  sub_100048D6C(v10 + *(int *)(v11 + 24), v9, (uint64_t *)&unk_100726568);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v8);
  uint64_t v13 = *(void *)(v3 + 1664);
  uint64_t v176 = (char *)v3;
  if (v12 == 1)
  {
    uint64_t v193 = *(void *)(v3 + 1736);
    uint64_t v14 = *(void *)(v3 + 1464);
    uint64_t v15 = *(void *)(v3 + 1456);
    uint64_t v16 = *(void *)(v3 + 1448);
    id v17 = v5;
    uint64_t v18 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v13, (uint64_t *)&unk_100726568);
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.serverResponseInconsistent(_:), v16);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

LABEL_49:
    uint64_t v27 = v193;
    goto LABEL_50;
  }
  uint64_t v28 = *(void *)(v3 + 1104);
  sub_1001D7624(v13, *(void *)(v3 + 1688), type metadata accessor for SharingCredentials);
  v5;
  v6;
  static DaemonSignposts.getVerificationResultBuildSharingRequest.getter();
  DIPSignpost.init(_:)();
  uint64_t v29 = *(void *)(v28 + 24);
  *(void *)(v3 + 1760) = v29;
  uint64_t v171 = v29;
  if (v29)
  {
    uint64_t v6 = *(void **)(v29 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_consumableDSD);
    if (v6)
    {
      uint64_t v2 = (Swift::String *)v6[2];
      if (v2)
      {
        uint64_t v30 = (_OWORD *)(v3 + 288);
        uint64_t v187 = (_OWORD *)(v3 + 544);
        unint64_t v190 = (_OWORD *)(v3 + 672);
        unint64_t v194 = (_OWORD *)(v3 + 416);
        swift_bridgeObjectRetain_n();
        uint64_t v31 = 0;
        unint64_t v3 = (unint64_t)"identityDocument";
        uint64_t v32 = (uint64_t)"deviceConfidenceAssessment";
        while (1)
        {
          uint64_t v33 = (void *)(*((unsigned char *)v6 + v31 + 32) ? 0x800000010062A6B0 : 0x800000010062A690);
          if (!*((unsigned char *)v6 + v31 + 32) || 0x800000010062A6B0 == 0x800000010062A690) {
            break;
          }
          uint64_t isUniquelyReferenced_nonNull_native = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (isUniquelyReferenced_nonNull_native) {
            goto LABEL_23;
          }
          if (v2 == (Swift::String *)++v31)
          {
            swift_bridgeObjectRelease();
            goto LABEL_26;
          }
        }
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
        JWSSignedJSON.payload.getter();
        long long v38 = v30[7];
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v194;
        v194[6] = v30[6];
        v194[7] = v38;
        long long v39 = v30[5];
        v194[4] = v30[4];
        v194[5] = v39;
        long long v40 = v30[1];
        _OWORD *v194 = *v30;
        v194[1] = v40;
        long long v41 = v30[3];
        v194[2] = v30[2];
        v194[3] = v41;
        uint64_t v1 = (uint8_t *)*((void *)v176 + 62);
        uint64_t v33 = (void *)*((void *)v176 + 63);
        swift_bridgeObjectRetain();
        sub_1001D6228((uint64_t)v194);
        if (v33)
        {
          int v42 = sub_100110204(0, 1, 1, _swiftEmptyArrayStorage);
          unint64_t v36 = v42[2];
          unint64_t v43 = v42[3];
          uint64_t isUniquelyReferenced_nonNull_native = v36 + 1;
          if (v36 >= v43 >> 1) {
            goto LABEL_130;
          }
          goto LABEL_25;
        }
LABEL_26:
        uint64_t v169 = _swiftEmptyArrayStorage;
        goto LABEL_27;
      }
    }
    uint64_t v32 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_47:
    unint64_t v36 = **(void **)(v3 + 1688);
    uint64_t v35 = *(void *)(v29 + 64);
    long long v37 = *(void **)(v29 + 72);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v35 = 0x414C494156414E55;
    unint64_t v36 = **(void **)(v3 + 1688);
    uint64_t v32 = (uint64_t)_swiftEmptyArrayStorage;
    long long v37 = (void *)0xEB00000000454C42;
  }
  swift_bridgeObjectRetain();
  *(void *)(v3 + 1776) = v32;
  *(void *)(v3 + 1768) = v36;
  sub_1001C8A10(*(void **)(v3 + 1224), v36, v35, v37, *(void *)(v3 + 1120), *(void **)(v3 + 1128));
  swift_bridgeObjectRelease();
  uint64_t v57 = v171;
  if (v171)
  {
    int v58 = *(unsigned __int8 *)(v171 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeEncryptedTSID);
    if (v58 == 2)
    {
      uint64_t v59 = 0;
      unint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
    }
    else
    {
      uint64_t v59 = 0;
      if (v58)
      {
        uint64_t v6 = *(void **)(v3 + 1160);
        unint64_t v60 = 0;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        if (v6)
        {
          swift_bridgeObjectRetain();
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v64 = Logger.logObject.getter();
          os_log_type_t v65 = static os_log_type_t.debug.getter();
          BOOL v66 = os_log_type_enabled(v64, v65);
          uint64_t v67 = *(void *)(v3 + 1624);
          uint64_t v68 = *(void *)(v3 + 1616);
          unint64_t v36 = *(void *)(v3 + 1608);
          if (v66)
          {
            unint64_t v190 = *(_OWORD **)(v3 + 1608);
            uint64_t v2 = *(Swift::String **)(v3 + 1152);
            uint64_t v1 = (uint8_t *)swift_slowAlloc();
            v198[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v1 = 136315138;
            uint64_t v32 = (uint64_t)(v1 + 12);
            unint64_t v36 = (unint64_t)(v1 + 4);
            swift_bridgeObjectRetain();
            *((void *)v176 + 136) = sub_100110D58((uint64_t)v2, (unint64_t)v6, v198);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v64, v65, "share is using guid %s", v1, 0xCu);
            swift_arrayDestroy();
            unint64_t v3 = (unint64_t)v176;
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, _OWORD *))(v68 + 8))(v67, v190);
          }
          else
          {
            swift_bridgeObjectRelease_n();

            (*(void (**)(uint64_t, unint64_t))(v68 + 8))(v67, v36);
          }
          uint64_t v62 = *(void *)(v3 + 1160);
          uint64_t v61 = *(void *)(v3 + 1152);
          unint64_t v60 = 0xE100000000000000;
          uint64_t v59 = 49;
          uint64_t v57 = v171;
        }
      }
      else
      {
        unint64_t v60 = 0;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
      }
    }
    if (*(unsigned char *)(v57 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeFGuid))
    {
      uint64_t v69 = v59;
      uint64_t v70 = v62;
      unint64_t v36 = v60;
      uint64_t v71 = v61;
      uint64_t v63 = swift_bridgeObjectRetain();
      uint64_t v61 = v71;
      unint64_t v60 = v36;
      uint64_t v62 = v70;
      uint64_t v59 = v69;
      uint64_t v170 = *(void *)(v3 + 1136);
    }
    else
    {
      uint64_t v170 = 0;
      uint64_t v63 = 0;
    }
  }
  else
  {
    uint64_t v170 = 0;
    uint64_t v63 = 0;
    uint64_t v59 = 0;
    unint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
  }
  uint64_t v163 = v3 + 16;
  uint64_t v166 = v60;
  uint64_t v167 = v62;
  *(void *)(v3 + 1816) = v62;
  uint64_t v164 = v63;
  uint64_t v165 = v61;
  *(void *)(v3 + 1808) = v61;
  *(void *)(v3 + 1800) = v60;
  uint64_t v168 = v59;
  *(void *)(v3 + 1792) = v59;
  *(void *)(v3 + 1784) = v63;
  uint64_t v72 = *(void *)(v3 + 1168);
  uint64_t v73 = *(void *)(v72 + 64);
  uint64_t v172 = v72 + 64;
  uint64_t v162 = (const char *)(v3 + 152);
  uint64_t v74 = -1;
  uint64_t v75 = -1 << *(unsigned char *)(v72 + 32);
  if (-v75 < 64) {
    uint64_t v74 = ~(-1 << -(char)v75);
  }
  uint64_t isUniquelyReferenced_nonNull_native = v74 & v73;
  int64_t v173 = (unint64_t)(63 - v75) >> 6;
  uint64_t v175 = *(void *)(v3 + 1168);
  swift_bridgeObjectRetain();
  int64_t v76 = 0;
  uint64_t v33 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    *(void *)(v3 + 1824) = v33;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v177 = (isUniquelyReferenced_nonNull_native - 1) & isUniquelyReferenced_nonNull_native;
      int64_t v179 = v76;
      unint64_t v78 = __clz(__rbit64(isUniquelyReferenced_nonNull_native)) | (v76 << 6);
      goto LABEL_92;
    }
    unint64_t v43 = v76 + 1;
    if (__OFADD__(v76, 1)) {
      goto LABEL_127;
    }
    uint64_t v32 = (uint64_t)v33;
    if ((uint64_t)v43 >= v173) {
      break;
    }
    unint64_t v79 = *(void *)(v172 + 8 * v43);
    int64_t v80 = v76 + 1;
    if (!v79)
    {
      int64_t v80 = v76 + 2;
      if (v76 + 2 >= v173) {
        break;
      }
      unint64_t v79 = *(void *)(v172 + 8 * v80);
      if (!v79)
      {
        int64_t v80 = v76 + 3;
        if (v76 + 3 >= v173) {
          break;
        }
        unint64_t v79 = *(void *)(v172 + 8 * v80);
        if (!v79)
        {
          int64_t v80 = v76 + 4;
          if (v76 + 4 >= v173) {
            break;
          }
          unint64_t v79 = *(void *)(v172 + 8 * v80);
          if (!v79)
          {
            int64_t v80 = v76 + 5;
            if (v76 + 5 >= v173) {
              break;
            }
            unint64_t v79 = *(void *)(v172 + 8 * v80);
            if (!v79)
            {
              unint64_t v43 = v76 + 6;
              if (v76 + 6 >= v173) {
                break;
              }
              unint64_t v79 = *(void *)(v172 + 8 * v43);
              if (!v79)
              {
                while (1)
                {
                  int64_t v80 = v43 + 1;
                  if (__OFADD__(v43, 1)) {
                    break;
                  }
                  if (v80 >= v173) {
                    goto LABEL_103;
                  }
                  unint64_t v79 = *(void *)(v172 + 8 * v80);
                  ++v43;
                  if (v79) {
                    goto LABEL_91;
                  }
                }
LABEL_129:
                __break(1u);
LABEL_130:
                int v42 = sub_100110204((void *)(v43 > 1), isUniquelyReferenced_nonNull_native, 1, v42);
LABEL_25:
                long long v42[2] = isUniquelyReferenced_nonNull_native;
                uint64_t v169 = v42;
                unint64_t v44 = &v42[3 * v36];
                *((unsigned char *)v44 + 32) = 0;
                v44[5] = v1;
                v44[6] = v33;
LABEL_27:
                swift_bridgeObjectRetain();
                unint64_t v36 = 32;
                uint64_t v1 = (uint8_t *)(v32 | 0x8000000000000000);
                while (1)
                {
                  unint64_t v43 = v36 - 32;
                  uint64_t v45 = (Swift::String *)(v36 - 31);
                  if (__OFADD__(v36 - 32, 1))
                  {
LABEL_128:
                    __break(1u);
                    goto LABEL_129;
                  }
                  uint64_t v33 = (void *)(*((unsigned char *)v6 + v36) ? v32 | 0x8000000000000000 : v3 | 0x8000000000000000);
                  if ((*((unsigned char *)v6 + v36) & 1) != 0 || (v3 | 0x8000000000000000) == (v32 | 0x8000000000000000)) {
                    break;
                  }
                  uint64_t isUniquelyReferenced_nonNull_native = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (isUniquelyReferenced_nonNull_native) {
                    goto LABEL_38;
                  }
                  ++v36;
                  if (v45 == v2)
                  {
                    swift_bridgeObjectRelease_n();
                    unint64_t v3 = (unint64_t)v176;
                    goto LABEL_45;
                  }
                }
                swift_bridgeObjectRelease();
LABEL_38:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v29 = v171;
                unint64_t v3 = (unint64_t)v176;
                if (*(unsigned char *)(v171 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareAccountAssessment))
                {
                  JWSSignedJSON.payload.getter();
                  long long v46 = v187[7];
                  v190[6] = v187[6];
                  v190[7] = v46;
                  long long v47 = v187[5];
                  v190[4] = v187[4];
                  v190[5] = v47;
                  long long v48 = v187[1];
                  *unint64_t v190 = *v187;
                  v190[1] = v48;
                  long long v49 = v187[3];
                  v190[2] = v187[2];
                  v190[3] = v49;
                  uint64_t v50 = *((void *)v176 + 96);
                  uint64_t v51 = *((void *)v176 + 97);
                  swift_bridgeObjectRetain();
                  sub_1001D6228((uint64_t)v190);
                  if (v51)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v169 = sub_100110204(0, v169[2] + 1, 1, v169);
                    }
                    unint64_t v53 = v169[2];
                    unint64_t v52 = v169[3];
                    if (v53 >= v52 >> 1) {
                      uint64_t v169 = sub_100110204((void *)(v52 > 1), v53 + 1, 1, v169);
                    }
                    uint64_t v32 = (uint64_t)v169;
                    v169[2] = v53 + 1;
                    unint64_t v54 = &v169[3 * v53];
                    *((unsigned char *)v54 + 32) = 1;
                    v54[5] = v50;
                    v54[6] = v51;
                    uint64_t v29 = v171;
                    goto LABEL_47;
                  }
LABEL_45:
                  uint64_t v29 = v171;
                }
                uint64_t v32 = (uint64_t)v169;
                goto LABEL_47;
              }
              int64_t v80 = v76 + 6;
            }
          }
        }
      }
    }
LABEL_91:
    uint64_t v177 = (v79 - 1) & v79;
    int64_t v179 = v80;
    unint64_t v78 = __clz(__rbit64(v79)) + (v80 << 6);
LABEL_92:
    uint64_t v81 = *(void *)(v175 + 56) + 96 * v78;
    uint64_t v32 = *(void *)v81;
    uint64_t v2 = *(Swift::String **)(v81 + 8);
    uint64_t v82 = *(void *)(v81 + 24);
    uint64_t v1 = *(uint8_t **)(v81 + 40);
    uint64_t v180 = *(void *)(v81 + 16);
    uint64_t v182 = *(void *)(v81 + 32);
    char v184 = *(unsigned char *)(v81 + 48);
    uint64_t v6 = *(void **)(v81 + 64);
    unint64_t v3 = *(void *)(v81 + 80);
    uint64_t v187 = *(_OWORD **)(v81 + 56);
    unint64_t v190 = *(_OWORD **)(v81 + 72);
    char v195 = *(unsigned char *)(v81 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v198[0] = (uint64_t)v33;
    unint64_t v84 = sub_100590548(v32, (uint64_t)v2);
    uint64_t v85 = v33[2];
    BOOL v86 = (v83 & 1) == 0;
    uint64_t v87 = v85 + v86;
    if (__OFADD__(v85, v86))
    {
      __break(1u);
      goto LABEL_123;
    }
    unint64_t v36 = v83;
    if (v33[3] >= v87)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v83) {
          goto LABEL_70;
        }
      }
      else
      {
        sub_10016BB88();
        uint64_t v33 = (void *)v198[0];
        if (v36) {
          goto LABEL_70;
        }
      }
    }
    else
    {
      sub_100166DFC(v87, isUniquelyReferenced_nonNull_native);
      uint64_t isUniquelyReferenced_nonNull_native = v198[0];
      unint64_t v88 = sub_100590548(v32, (uint64_t)v2);
      if ((v36 & 1) != (v89 & 1))
      {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      unint64_t v84 = v88;
      uint64_t v33 = (void *)isUniquelyReferenced_nonNull_native;
      if (v36)
      {
LABEL_70:
        uint64_t v77 = v33[7] + 96 * v84;
        unint64_t v36 = (unint64_t)v33;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v77 = v32;
        *(void *)(v77 + 8) = v2;
        *(void *)(v77 + 16) = v180;
        *(void *)(v77 + 24) = v82;
        *(void *)(v77 + 32) = v182;
        *(void *)(v77 + 40) = v1;
        *(unsigned char *)(v77 + 48) = v184;
        *(void *)(v77 + 56) = v187;
        *(void *)(v77 + 64) = v6;
        *(void *)(v77 + 72) = v190;
        *(void *)(v77 + 80) = v3;
        *(unsigned char *)(v77 + 88) = v195;
        goto LABEL_71;
      }
    }
    v33[(v84 >> 6) + 8] |= 1 << v84;
    uint64_t v90 = (uint64_t *)(v33[6] + 16 * v84);
    *uint64_t v90 = v32;
    v90[1] = (uint64_t)v2;
    uint64_t v91 = v33[7] + 96 * v84;
    *(void *)uint64_t v91 = v32;
    *(void *)(v91 + 8) = v2;
    *(void *)(v91 + 16) = v180;
    *(void *)(v91 + 24) = v82;
    *(void *)(v91 + 32) = v182;
    *(void *)(v91 + 40) = v1;
    *(unsigned char *)(v91 + 48) = v184;
    *(void *)(v91 + 56) = v187;
    *(void *)(v91 + 64) = v6;
    *(void *)(v91 + 72) = v190;
    *(void *)(v91 + 80) = v3;
    *(unsigned char *)(v91 + 88) = v195;
    uint64_t v92 = v33[2];
    BOOL v93 = __OFADD__(v92, 1);
    unint64_t v43 = v92 + 1;
    if (v93)
    {
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    v33[2] = v43;
    swift_bridgeObjectRetain();
LABEL_71:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v3 = (unint64_t)v176;
    uint64_t isUniquelyReferenced_nonNull_native = v177;
    int64_t v76 = v179;
  }
LABEL_103:
  uint64_t v94 = *(void *)(v3 + 1736);
  uint64_t v95 = *(void *)(v3 + 1728);
  uint64_t v96 = *(void *)(v3 + 1696);
  uint64_t v97 = *(void *)(v3 + 1192);
  long long v196 = *(_OWORD *)(v3 + 1176);
  swift_release();
  uint64_t v98 = *(void *)(v32 + 16);
  uint64_t v99 = v95 + *(int *)(v96 + 48);
  sub_1001D95B4(v94, v95, type metadata accessor for VerifiedClaim);
  *(_OWORD *)uint64_t v99 = v196;
  *(void *)(v99 + 16) = v97;
  uint64_t v100 = *(void *)(v3 + 1728);
  if (!v98)
  {
    uint64_t v101 = *(void *)(v3 + 1720);
    uint64_t v102 = *(void *)(v3 + 1192);
    uint64_t v103 = *(void *)(v3 + 1184);
    uint64_t v104 = *(void *)(v3 + 1176);
    uint64_t v105 = (void *)(v101 + *(int *)(*(void *)(v3 + 1696) + 48));
    sub_1001D95B4(*(void *)(v3 + 1728), v101, type metadata accessor for VerifiedClaim);
    *uint64_t v105 = v104;
    v105[1] = v103;
    v105[2] = v102;
    uint64_t v106 = *(void *)(v102 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000C6CC(v100, &qword_100726510);
    sub_1001D961C(v101, type metadata accessor for VerifiedClaim);
    if (v106) {
      goto LABEL_109;
    }
    swift_bridgeObjectRelease();
    sub_1001D5FEC(v168, v166);
    swift_bridgeObjectRelease();
    *(void *)(v3 + 1928) = _swiftEmptyArrayStorage;
    *(void *)(v3 + 1920) = 0;
    uint64_t v117 = *(void *)(v3 + 1760);
    id v118 = [*(id *)(v3 + 1744) serviceName];
    uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v191 = v120;
    uint64_t v197 = v119;

    uint64_t v121 = *(void *)(v3 + 1760);
    if (v117)
    {
      unint64_t v185 = *(void *)(v121 + 24);
      uint64_t v188 = *(void *)(v121 + 16);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v188 = 0x414C494156414E55;
      unint64_t v185 = 0xEB00000000454C42;
    }
    uint64_t v122 = *(void *)(v3 + 1704);
    uint64_t v123 = *(void *)(v3 + 1440);
    uint64_t v124 = *(void *)(v3 + 1432);
    uint64_t v125 = *(void *)(v3 + 1424);
    uint64_t v126 = *(void *)(v3 + 1192);
    uint64_t v127 = v122 + *(int *)(*(void *)(v3 + 1696) + 48);
    long long v183 = *(_OWORD *)(v3 + 1176);
    sub_1001D95B4(*(void *)(v3 + 1736), v122, type metadata accessor for VerifiedClaim);
    *(_OWORD *)uint64_t v127 = v183;
    *(void *)(v127 + 16) = v126;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v123, v122, v125);
    sub_1001D961C(v122, type metadata accessor for VerifiedClaim);
    JWSSignedJSON.payload.getter();
    (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v123, v125);
    long long v128 = *((_OWORD *)v162 + 7);
    *(_OWORD *)(v163 + 96) = *((_OWORD *)v162 + 6);
    *(_OWORD *)(v163 + 112) = v128;
    *(void *)(v163 + 128) = *((void *)v162 + 16);
    long long v129 = *((_OWORD *)v162 + 3);
    *(_OWORD *)(v163 + 32) = *((_OWORD *)v162 + 2);
    *(_OWORD *)(v163 + 48) = v129;
    long long v130 = *((_OWORD *)v162 + 5);
    *(_OWORD *)(v163 + 64) = *((_OWORD *)v162 + 4);
    *(_OWORD *)(v163 + 80) = v130;
    long long v131 = *((_OWORD *)v162 + 1);
    *(_OWORD *)uint64_t v163 = *(_OWORD *)v162;
    *(_OWORD *)(v163 + 16) = v131;
    uint64_t v181 = *(void *)(v3 + 16);
    *(void *)&long long v183 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    sub_1001D6030(v163);
    uint64_t v132 = *(void *)(v3 + 1416);
    uint64_t v133 = *(void *)(v3 + 1408);
    uint64_t v134 = *(void *)(v3 + 1400);
    uint64_t v135 = *(void *)(v3 + 1392);
    uint64_t v136 = *(void *)(v3 + 1384);
    uint64_t v137 = *(void *)(v3 + 1376);
    uint64_t v174 = *(void *)(v3 + 1776);
    v178._rawValue = *(void **)(v3 + 1208);
    UUID.init()();
    uint64_t v138 = UUID.uuidString.getter();
    uint64_t v140 = v139;
    uint64_t v141 = *(void (**)(uint64_t, uint64_t))(v133 + 8);
    *(void *)(v3 + 1936) = v141;
    *(void *)(v3 + 1944) = (v133 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v141(v132, v134);
    *(void *)(v3 + 1040) = v138;
    *(void *)(v3 + 1048) = v140;
    *(void *)(v3 + 1072) = 45;
    *(void *)(v3 + 1080) = 0xE100000000000000;
    *(void *)(v3 + 1056) = 0;
    *(void *)(v3 + 1064) = 0xE000000000000000;
    sub_1000B5358();
    uint64_t v142 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v144 = v143;
    swift_bridgeObjectRelease();
    Date.init()();
    uint64_t v145 = UTCTimestamp(_:)();
    uint64_t v147 = v146;
    uint64_t v148 = *(void (**)(uint64_t, uint64_t))(v136 + 8);
    v148(v135, v137);
    Date.init(timeIntervalSinceNow:)();
    uint64_t v149 = UTCTimestamp(_:)();
    uint64_t v151 = v150;
    v148(v135, v137);
    *((void *)v176 + 100) = v142;
    *((void *)v176 + 101) = v144;
    *((void *)v176 + 102) = v181;
    *((void *)v176 + 103) = v183;
    *((void *)v176 + 104) = v197;
    *((void *)v176 + 105) = v191;
    *((void *)v176 + 106) = v188;
    *((void *)v176 + 107) = v185;
    *((void *)v176 + 108) = v174;
    *((void *)v176 + 109) = v145;
    *((void *)v176 + 110) = v147;
    *((void *)v176 + 111) = v149;
    *((void *)v176 + 112) = v151;
    uint64_t v2 = (Swift::String *)v176;
    sub_1001D60D8();
    sub_1001D612C();
    JWSSignedJSON.init(payload:)();
    JWSSignedJSON.setCertificateChain(_:)(v178);
    if (v152)
    {
      uint64_t v153 = (void *)*((void *)v176 + 219);
      uint64_t v154 = (void *)*((void *)v176 + 218);
      uint64_t v192 = *((void *)v176 + 211);
      uint64_t v193 = *((void *)v176 + 217);
      uint64_t v155 = *((void *)v176 + 206);
      unint64_t v186 = *((void *)v176 + 205);
      uint64_t v189 = *((void *)v176 + 207);
      uint64_t v156 = *((void *)v176 + 171);
      uint64_t v157 = *((void *)v176 + 170);
      uint64_t v158 = *((void *)v176 + 169);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v3 = (unint64_t)v176;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v156, v158);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, unint64_t))(v155 + 8))(v189, v186);
      sub_1001D961C(v192, type metadata accessor for SharingCredentials);
      goto LABEL_49;
    }
    JWSSignedJSON.setKid(_:)();
LABEL_123:
    JWSSignedJSON.setNonce(_:)(v2[77]);
    uint64_t v159 = (void *)swift_task_alloc();
    v2[122]._uint64_t countAndFlagsBits = (uint64_t)v159;
    *uint64_t v159 = v2;
    v159[1] = sub_1001B3FE0;
    object = v2[84]._object;
    uint64_t countAndFlagsBits = v2[76]._countAndFlagsBits;
    return JWSSignedJSON.sign(_:)(countAndFlagsBits, object);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000C6CC(v100, &qword_100726510);
LABEL_109:
  if (v171
    && (long long v107 = *(void **)(v171 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate + 8)) != 0)
  {
    uint64_t v108 = *(void *)(v171 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v107 = (void *)0xE700000000000000;
    uint64_t v108 = 0x746C7561666564;
  }
  sub_10006BFC0(v108, v107, *(void *)(v3 + 1600));
  uint64_t v109 = *(void *)(v3 + 1240);
  swift_bridgeObjectRelease();
  *(void *)(v3 + 904) = v32;
  *(void *)(v3 + 912) = v168;
  *(void *)(v3 + 920) = v166;
  *(void *)(v3 + 928) = v165;
  *(void *)(v3 + 936) = v167;
  *(void *)(v3 + 944) = v170;
  *(void *)(v3 + 952) = v164;
  *(_OWORD *)(v3 + 960) = 0u;
  *(_OWORD *)(v3 + 976) = 0u;
  *(void *)(v3 + 992) = 0;
  unint64_t v110 = (void *)swift_task_alloc();
  *(void *)(v3 + 1832) = v110;
  unint64_t v111 = sub_1001D6180();
  unint64_t v112 = sub_1001D61D4();
  void *v110 = v3;
  v110[1] = sub_1001B18E8;
  uint64_t v113 = *(void *)(v3 + 1600);
  uint64_t v114 = *(void *)(v3 + 1576);
  uint64_t v115 = *(void *)(v3 + 1232);
  uint64_t v116 = *(void *)(v3 + 1216);
  unint64_t v201 = v111;
  unint64_t v202 = v112;
  return createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)(v114, v3 + 904, v113, v116, v3 + 960, v115, v109, &type metadata for SharingIdVData);
}

uint64_t sub_1001B18E8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 960;
  *(void *)(*v1 + 1840) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v3, &qword_1007265B8);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1001B4D44;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 1800);
    uint64_t v6 = *(void *)(v2 + 1792);
    sub_10000C6CC(v3, &qword_1007265B8);
    swift_bridgeObjectRelease();
    sub_1001D5FEC(v6, v5);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1001B1AAC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001B1AAC()
{
  JWSSignedJSON.setCertificateChain(_:)(*(Swift::OpaquePointer *)(v0 + 1208));
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 1752);
    long long v131 = *(void **)(v0 + 1744);
    uint64_t v155 = *(void *)(v0 + 1688);
    uint64_t v156 = *(void *)(v0 + 1736);
    uint64_t v145 = *(void *)(v0 + 1656);
    uint64_t v3 = *(void *)(v0 + 1648);
    uint64_t v138 = *(void *)(v0 + 1600);
    uint64_t v141 = *(void *)(v0 + 1640);
    uint64_t v4 = *(void *)(v0 + 1592);
    uint64_t v135 = *(void *)(v0 + 1584);
    uint64_t v5 = *(void *)(v0 + 1576);
    uint64_t v6 = *(void *)(v0 + 1568);
    uint64_t v7 = *(void *)(v0 + 1560);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v138, v135);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v145, v141);
LABEL_4:
    sub_1001D961C(v155, type metadata accessor for SharingCredentials);
    uint64_t v15 = v156;
LABEL_5:
    sub_10000C6CC(v15, &qword_100726510);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  uint64_t v8 = *(void *)(v0 + 1576);
  uint64_t v9 = *(void *)(v0 + 1568);
  uint64_t v10 = *(void *)(v0 + 1560);
  uint64_t v11 = *(void *)(v0 + 1128);
  uint64_t v12 = *(void *)(v0 + 1120);
  sub_100007764(&qword_1007265C0);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v0 + 1848) = v14;
  *(_OWORD *)(v14 + 16) = xmmword_100610730;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 16))(v14 + v13, v8, v10);
  sub_100190BF8(v12, v11, v0 + 1000);
  uint64_t v18 = *(void *)(v0 + 1712);
  uint64_t v19 = *(void *)(v0 + 1192);
  uint64_t v20 = v18 + *(int *)(*(void *)(v0 + 1696) + 48);
  long long v157 = *(_OWORD *)(v0 + 1176);
  sub_1001D95B4(*(void *)(v0 + 1736), v18, type metadata accessor for VerifiedClaim);
  *(_OWORD *)uint64_t v20 = v157;
  *(void *)(v20 + 16) = v19;
  char v21 = *(unsigned char *)(v19 + 32);
  *(unsigned char *)(v0 + 1996) = v21;
  uint64_t v22 = 1 << v21;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  else {
    uint64_t v23 = -1;
  }
  unint64_t v24 = v23 & *(void *)(v19 + 64);
  swift_bridgeObjectRetain();
  sub_1001D961C(v18, type metadata accessor for VerifiedClaim);
  *(_DWORD *)(v0 + 1992) = enum case for EncryptedMessageEntity.sp(_:);
  *(void *)(v0 + 1856) = _swiftEmptyArrayStorage;
  if (v24)
  {
    uint64_t v25 = 0;
    unint64_t v26 = __clz(__rbit64(v24));
    uint64_t v27 = (v24 - 1) & v24;
    uint64_t v28 = *(void **)(v0 + 1192);
    goto LABEL_13;
  }
  char v38 = *(unsigned char *)(v0 + 1996);
  unsigned int v39 = v38 & 0x3F;
  uint64_t v28 = *(void **)(v0 + 1192);
  if (v39 > 6)
  {
    unint64_t v40 = v28[9];
    if (v40)
    {
      uint64_t v25 = 1;
LABEL_18:
      uint64_t v27 = (v40 - 1) & v40;
      unint64_t v26 = __clz(__rbit64(v40)) + (v25 << 6);
LABEL_13:
      uint64_t v158 = (void *)(v0 + 1000);
      *(void *)(v0 + 1872) = v27;
      *(void *)(v0 + 1864) = v25;
      uint64_t v29 = *(void *)(v28[7] + 8 * v26);
      *(void *)(v0 + 1880) = v29;
      swift_retain();
      uint64_t v30 = (__SecTrust *)RecipientEncryptionCertificate.keyAgreement.getter();
      *(void *)(v0 + 1888) = v30;
      uint64_t v31 = RecipientEncryptionCertificate.signing.getter();
      *(void *)(v0 + 1896) = v31;
      if (v31)
      {
        uint64_t v32 = (void *)v31;
        uint64_t v33 = *(void *)(v0 + 1552);
        uint64_t v34 = *(void *)(v0 + 1520);
        uint64_t v35 = *(void **)(v0 + 1216);
        uint64_t v37 = *(void *)(v29 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey);
        unint64_t v36 = *(__CFString **)(v29 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey + 8);
        (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 1512) + 104))(v34, *(unsigned int *)(v0 + 1992), *(void *)(v0 + 1504));
        sub_1001B8108(v158, v37, v36, v30, v35, (unint64_t)v32, v34, v33);
        uint64_t v151 = v30;
        uint64_t v45 = *(void *)(v0 + 1552);
        uint64_t v46 = *(void *)(v0 + 1544);
        uint64_t v47 = *(void *)(v0 + 1536);
        uint64_t v48 = *(void *)(v0 + 1528);
        v49._rawValue = *(void **)(v0 + 1208);
        (*(void (**)(void, void))(*(void *)(v0 + 1512) + 8))(*(void *)(v0 + 1520), *(void *)(v0 + 1504));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v46, v45, v48);
        sub_1000B6120(&qword_1007265C8, (uint64_t *)&unk_100726030);
        sub_1000B6120(&qword_1007265D0, (uint64_t *)&unk_100726030);
        JWSSignedJSON.init(payload:)();
        JWSSignedJSON.setCertificateChain(_:)(v49);
        if (!v50)
        {
          JWSSignedJSON.setKid(_:)();
          JWSSignedJSON.setNonce(_:)(*(Swift::String *)(v0 + 1232));
          uint64_t v55 = (void *)swift_task_alloc();
          *(void *)(v0 + 1904) = v55;
          *uint64_t v55 = v0;
          v55[1] = sub_1001B2D80;
          uint64_t v56 = *(void *)(v0 + 1472);
          goto LABEL_44;
        }
        unint64_t v111 = *(void **)(v0 + 1752);
        uint64_t v116 = *(void **)(v0 + 1744);
        uint64_t v146 = *(void *)(v0 + 1736);
        uint64_t v142 = *(void *)(v0 + 1688);
        uint64_t v133 = *(void *)(v0 + 1640);
        uint64_t v137 = *(void *)(v0 + 1656);
        uint64_t v127 = *(void *)(v0 + 1600);
        uint64_t v130 = *(void *)(v0 + 1648);
        uint64_t v51 = *(void *)(v0 + 1592);
        uint64_t v121 = *(void *)(v0 + 1576);
        uint64_t v124 = *(void *)(v0 + 1584);
        uint64_t v52 = *(void *)(v0 + 1568);
        uint64_t v118 = *(void *)(v0 + 1560);
        uint64_t v53 = *(void *)(v0 + 1536);
        uint64_t v112 = *(void *)(v0 + 1528);
        uint64_t v114 = *(void *)(v0 + 1552);
        uint64_t v54 = *(void *)(v0 + 1480);
        uint64_t v109 = *(void *)(v0 + 1472);
        uint64_t v110 = *(void *)(v0 + 1496);

        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v110, v109);
        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v114, v112);
        swift_release();
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v158);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v121, v118);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v127, v124);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v137, v133);
      }
      else
      {
        uint64_t v115 = *(void **)(v0 + 1744);
        uint64_t v117 = *(void **)(v0 + 1752);
        uint64_t v146 = *(void *)(v0 + 1736);
        uint64_t v139 = *(void *)(v0 + 1656);
        uint64_t v142 = *(void *)(v0 + 1688);
        uint64_t v132 = *(void *)(v0 + 1648);
        uint64_t v136 = *(void *)(v0 + 1640);
        uint64_t v113 = *(void *)(v0 + 1592);
        uint64_t v126 = *(void *)(v0 + 1584);
        uint64_t v129 = *(void *)(v0 + 1600);
        uint64_t v123 = *(void *)(v0 + 1576);
        uint64_t v150 = v30;
        uint64_t v41 = *(void *)(v0 + 1568);
        uint64_t v120 = *(void *)(v0 + 1560);
        uint64_t v42 = *(void *)(v0 + 1464);
        uint64_t v43 = *(void *)(v0 + 1456);
        uint64_t v44 = *(void *)(v0 + 1448);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t))(v43 + 104))(v42, enum case for DIPError.Code.missingCertificate(_:), v44);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();

        swift_release();
        swift_release();
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v158);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v123, v120);
        (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v129, v126);
        (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v139, v136);
      }
      sub_1001D961C(v142, type metadata accessor for SharingCredentials);
      uint64_t v15 = v146;
      goto LABEL_5;
    }
    if (v39 >= 8)
    {
      unint64_t v40 = v28[10];
      if (v40)
      {
        uint64_t v25 = 2;
        goto LABEL_18;
      }
      unint64_t v40 = v28[11];
      if (v40)
      {
        uint64_t v25 = 3;
        goto LABEL_18;
      }
      if (v39 >= 9)
      {
        unint64_t v40 = v28[12];
        if (v40)
        {
          uint64_t v25 = 4;
          goto LABEL_18;
        }
        uint64_t v57 = 0;
        int64_t v58 = (unint64_t)((1 << v38) + 63) >> 6;
        if (v58 <= 5) {
          int64_t v58 = 5;
        }
        int64_t v59 = v58 - 5;
        while (v59 != v57)
        {
          unint64_t v40 = v28[v57++ + 13];
          if (v40)
          {
            uint64_t v25 = v57 + 4;
            goto LABEL_18;
          }
        }
      }
    }
  }
  uint64_t v60 = *(void *)(v0 + 1848);
  uint64_t v152 = *(void *)(v0 + 1600);
  uint64_t v61 = *(void *)(v0 + 1592);
  uint64_t v147 = *(void *)(v0 + 1584);
  uint64_t v62 = *(void *)(v0 + 1576);
  uint64_t v63 = *(void *)(v0 + 1568);
  uint64_t v64 = *(void *)(v0 + 1560);
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 1000);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v152, v147);
  *(void *)(v0 + 1928) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 1920) = v60;
  uint64_t v65 = *(void *)(v0 + 1760);
  id v66 = [*(id *)(v0 + 1744) serviceName];
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v69 = v68;

  uint64_t v70 = *(void *)(v0 + 1760);
  uint64_t v148 = v69;
  uint64_t v153 = v67;
  if (v65)
  {
    uint64_t v119 = *(void *)(v70 + 16);
    unint64_t v122 = *(void *)(v70 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v122 = 0xEB00000000454C42;
    uint64_t v119 = 0x414C494156414E55;
  }
  uint64_t v71 = *(void *)(v0 + 1704);
  uint64_t v72 = *(void *)(v0 + 1440);
  uint64_t v73 = *(void *)(v0 + 1432);
  uint64_t v74 = *(void *)(v0 + 1424);
  uint64_t v75 = *(void *)(v0 + 1192);
  uint64_t v76 = v71 + *(int *)(*(void *)(v0 + 1696) + 48);
  long long v143 = *(_OWORD *)(v0 + 1176);
  sub_1001D95B4(*(void *)(v0 + 1736), v71, type metadata accessor for VerifiedClaim);
  *(_OWORD *)uint64_t v76 = v143;
  *(void *)(v76 + 16) = v75;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v72, v71, v74);
  sub_1001D961C(v71, type metadata accessor for VerifiedClaim);
  JWSSignedJSON.payload.getter();
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
  long long v77 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 128) = v77;
  *(void *)(v0 + 144) = *(void *)(v0 + 280);
  long long v78 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 64) = v78;
  long long v79 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 96) = v79;
  long long v80 = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 32) = v80;
  uint64_t v82 = *(void *)(v0 + 16);
  uint64_t v81 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_1001D6030(v0 + 16);
  uint64_t v140 = v82;
  *(void *)&long long v143 = v81;
  uint64_t v83 = *(void *)(v0 + 1416);
  uint64_t v84 = *(void *)(v0 + 1408);
  uint64_t v85 = *(void *)(v0 + 1400);
  uint64_t v86 = *(void *)(v0 + 1392);
  uint64_t v87 = *(void *)(v0 + 1384);
  uint64_t v125 = *(void *)(v0 + 1376);
  uint64_t v128 = *(void *)(v0 + 1776);
  v134._rawValue = *(void **)(v0 + 1208);
  UUID.init()();
  uint64_t v88 = UUID.uuidString.getter();
  uint64_t v90 = v89;
  uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
  *(void *)(v0 + 1936) = v91;
  *(void *)(v0 + 1944) = (v84 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v91(v83, v85);
  *(void *)(v0 + 1040) = v88;
  *(void *)(v0 + 1048) = v90;
  *(void *)(v0 + 1072) = 45;
  *(void *)(v0 + 1080) = 0xE100000000000000;
  *(void *)(v0 + 1056) = 0;
  *(void *)(v0 + 1064) = 0xE000000000000000;
  sub_1000B5358();
  uint64_t v159 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v93 = v92;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v94 = UTCTimestamp(_:)();
  uint64_t v96 = v95;
  uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
  v97(v86, v125);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v98 = UTCTimestamp(_:)();
  uint64_t v100 = v99;
  v97(v86, v125);
  *(void *)(v0 + 800) = v159;
  *(void *)(v0 + 808) = v93;
  *(void *)(v0 + 816) = v140;
  *(void *)(v0 + 824) = v143;
  *(void *)(v0 + 832) = v153;
  *(void *)(v0 + 840) = v148;
  *(void *)(v0 + 848) = v119;
  *(void *)(v0 + 856) = v122;
  *(void *)(v0 + 864) = v128;
  *(void *)(v0 + 872) = v94;
  *(void *)(v0 + 880) = v96;
  *(void *)(v0 + 888) = v98;
  *(void *)(v0 + 896) = v100;
  sub_1001D60D8();
  sub_1001D612C();
  JWSSignedJSON.init(payload:)();
  JWSSignedJSON.setCertificateChain(_:)(v134);
  if (v101)
  {
    uint64_t v102 = *(void **)(v0 + 1752);
    uint64_t v144 = *(void **)(v0 + 1744);
    uint64_t v155 = *(void *)(v0 + 1688);
    uint64_t v156 = *(void *)(v0 + 1736);
    uint64_t v103 = *(void *)(v0 + 1648);
    uint64_t v149 = *(void *)(v0 + 1640);
    uint64_t v154 = *(void *)(v0 + 1656);
    uint64_t v104 = *(void *)(v0 + 1368);
    uint64_t v105 = *(void *)(v0 + 1360);
    uint64_t v106 = *(void *)(v0 + 1352);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v104, v106);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v154, v149);
    goto LABEL_4;
  }
  JWSSignedJSON.setKid(_:)();
  JWSSignedJSON.setNonce(_:)(*(Swift::String *)(v0 + 1232));
  long long v107 = (void *)swift_task_alloc();
  *(void *)(v0 + 1952) = v107;
  *long long v107 = v0;
  v107[1] = sub_1001B3FE0;
  uint64_t v56 = *(void *)(v0 + 1352);
LABEL_44:
  uint64_t v108 = *(void *)(v0 + 1216);
  return JWSSignedJSON.sign(_:)(v108, v56);
}

uint64_t sub_1001B2D80()
{
  *(void *)(*(void *)v1 + 1912) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1001B5004;
  }
  else
  {
    uint64_t v2 = sub_1001B2EF4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B2EF4()
{
  (*(void (**)(void, void, void))(*(void *)(v0 + 1480) + 16))(*(void *)(v0 + 1488), *(void *)(v0 + 1496), *(void *)(v0 + 1472));
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = *(void *)(v0 + 1856);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_100110098(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  long long v157 = (void *)(v0 + 1000);
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_100110098(v3 > 1, v4 + 1, 1, v2);
  }
  uint64_t v5 = *(void **)(v0 + 1896);
  uint64_t v6 = *(void **)(v0 + 1888);
  uint64_t v160 = *(void *)(v0 + 1552);
  uint64_t v7 = *(void *)(v0 + 1536);
  uint64_t v151 = *(void *)(v0 + 1528);
  uint64_t v8 = *(void *)(v0 + 1496);
  uint64_t v9 = *(void *)(v0 + 1488);
  uint64_t v10 = *(void *)(v0 + 1480);
  uint64_t v11 = *(void *)(v0 + 1472);
  *(void *)(v2 + 16) = v4 + 1;
  unint64_t v12 = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v2+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v4, v9, v11);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v160, v151);
  uint64_t v152 = *(void *)(v0 + 1912);
  unint64_t v15 = *(void *)(v0 + 1872);
  int64_t v16 = *(void *)(v0 + 1864);
  unint64_t v161 = v12;
  *(void *)(v0 + 1856) = v12;
  if (v15)
  {
    uint64_t v17 = (v15 - 1) & v15;
    unint64_t v18 = __clz(__rbit64(v15)) | (v16 << 6);
    uint64_t v13 = *(void *)(v0 + 1192);
    goto LABEL_7;
  }
  int64_t v32 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  int64_t v33 = (unint64_t)((1 << *(unsigned char *)(v0 + 1996)) + 63) >> 6;
  uint64_t v13 = *(void *)(v0 + 1192);
  if (v32 >= v33)
  {
LABEL_29:
    uint64_t v53 = *(void *)(v0 + 1848);
    uint64_t v54 = *(void *)(v0 + 1600);
    uint64_t v55 = *(void *)(v0 + 1592);
    uint64_t v56 = *(void *)(v0 + 1584);
    uint64_t v57 = *(void *)(v0 + 1576);
    uint64_t v58 = *(void *)(v0 + 1568);
    uint64_t v59 = *(void *)(v0 + 1560);
    swift_release();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v157);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    *(void *)(v0 + 1928) = v161;
    *(void *)(v0 + 1920) = v53;
    uint64_t v60 = *(void *)(v0 + 1760);
    id v61 = [*(id *)(v0 + 1744) serviceName];
    uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v141 = v62;

    uint64_t v63 = *(void *)(v0 + 1760);
    if (v60)
    {
      uint64_t v133 = *(void *)(v63 + 16);
      unint64_t v137 = *(void *)(v63 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v137 = 0xEB00000000454C42;
      uint64_t v133 = 0x414C494156414E55;
    }
    uint64_t v64 = *(void *)(v0 + 1704);
    uint64_t v65 = *(void *)(v0 + 1440);
    uint64_t v66 = *(void *)(v0 + 1432);
    uint64_t v67 = *(void *)(v0 + 1424);
    uint64_t v68 = *(void *)(v0 + 1192);
    uint64_t v69 = v64 + *(int *)(*(void *)(v0 + 1696) + 48);
    long long v129 = *(_OWORD *)(v0 + 1176);
    sub_1001D95B4(*(void *)(v0 + 1736), v64, type metadata accessor for VerifiedClaim);
    *(_OWORD *)uint64_t v69 = v129;
    *(void *)(v69 + 16) = v68;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v65, v64, v67);
    sub_1001D961C(v64, type metadata accessor for VerifiedClaim);
    JWSSignedJSON.payload.getter();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
    long long v70 = *(_OWORD *)(v0 + 264);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 128) = v70;
    *(void *)(v0 + 144) = *(void *)(v0 + 280);
    long long v71 = *(_OWORD *)(v0 + 200);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 184);
    *(_OWORD *)(v0 + 64) = v71;
    long long v72 = *(_OWORD *)(v0 + 232);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 216);
    *(_OWORD *)(v0 + 96) = v72;
    long long v73 = *(_OWORD *)(v0 + 168);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 152);
    *(_OWORD *)(v0 + 32) = v73;
    uint64_t v125 = *(void *)(v0 + 16);
    *(void *)&long long v129 = *(void *)(v0 + 24);
    swift_bridgeObjectRetain();
    sub_1001D6030(v0 + 16);
    uint64_t v74 = *(void *)(v0 + 1416);
    uint64_t v75 = *(void *)(v0 + 1408);
    uint64_t v76 = *(void *)(v0 + 1400);
    uint64_t v77 = *(void *)(v0 + 1392);
    uint64_t v78 = *(void *)(v0 + 1384);
    uint64_t v79 = *(void *)(v0 + 1376);
    uint64_t v111 = *(void *)(v0 + 1776);
    v118._rawValue = *(void **)(v0 + 1208);
    UUID.init()();
    uint64_t v80 = UUID.uuidString.getter();
    uint64_t v82 = v81;
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
    *(void *)(v0 + 1936) = v83;
    *(void *)(v0 + 1944) = (v75 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v83(v74, v76);
    *(void *)(v0 + 1040) = v80;
    *(void *)(v0 + 1048) = v82;
    *(void *)(v0 + 1072) = 45;
    *(void *)(v0 + 1080) = 0xE100000000000000;
    *(void *)(v0 + 1056) = 0;
    *(void *)(v0 + 1064) = 0xE000000000000000;
    sub_1000B5358();
    uint64_t v148 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v85 = v84;
    swift_bridgeObjectRelease();
    Date.init()();
    uint64_t v86 = UTCTimestamp(_:)();
    uint64_t v88 = v87;
    uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    uint64_t v90 = v79;
    v89(v77, v79);
    Date.init(timeIntervalSinceNow:)();
    uint64_t v91 = UTCTimestamp(_:)();
    uint64_t v93 = v92;
    v89(v77, v90);
    *(void *)(v0 + 800) = v148;
    *(void *)(v0 + 808) = v85;
    *(void *)(v0 + 816) = v125;
    *(void *)(v0 + 824) = v129;
    *(void *)(v0 + 832) = v158;
    *(void *)(v0 + 840) = v141;
    *(void *)(v0 + 848) = v133;
    *(void *)(v0 + 856) = v137;
    *(void *)(v0 + 864) = v111;
    *(void *)(v0 + 872) = v86;
    *(void *)(v0 + 880) = v88;
    *(void *)(v0 + 888) = v91;
    *(void *)(v0 + 896) = v93;
    sub_1001D60D8();
    sub_1001D612C();
    JWSSignedJSON.init(payload:)();
    JWSSignedJSON.setCertificateChain(_:)(v118);
    if (!v94)
    {
      JWSSignedJSON.setKid(_:)();
      JWSSignedJSON.setNonce(_:)(*(Swift::String *)(v0 + 1232));
      uint64_t v102 = (void *)swift_task_alloc();
      *(void *)(v0 + 1952) = v102;
      void *v102 = v0;
      v102[1] = sub_1001B3FE0;
      uint64_t v14 = *(void *)(v0 + 1352);
LABEL_39:
      uint64_t v13 = *(void *)(v0 + 1216);
      return JWSSignedJSON.sign(_:)(v13, v14);
    }
    uint64_t v95 = *(void **)(v0 + 1752);
    uint64_t v156 = *(void *)(v0 + 1688);
    uint64_t v159 = *(void *)(v0 + 1736);
    uint64_t v150 = *(void *)(v0 + 1656);
    uint64_t v96 = *(void *)(v0 + 1648);
    uint64_t v145 = *(void **)(v0 + 1744);
    uint64_t v149 = *(void *)(v0 + 1640);
    uint64_t v97 = *(void *)(v0 + 1368);
    uint64_t v98 = *(void *)(v0 + 1360);
    uint64_t v99 = *(void *)(v0 + 1352);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v150, v149);
    sub_1001D961C(v156, type metadata accessor for SharingCredentials);
    uint64_t v50 = v159;
LABEL_35:
    sub_10000C6CC(v50, &qword_100726510);
    goto LABEL_36;
  }
  uint64_t v34 = v13 + 64;
  unint64_t v35 = *(void *)(v13 + 64 + 8 * v32);
  ++v16;
  if (!v35)
  {
    int64_t v16 = v32 + 1;
    if (v32 + 1 < v33)
    {
      unint64_t v35 = *(void *)(v34 + 8 * v16);
      if (v35) {
        goto LABEL_13;
      }
      int64_t v16 = v32 + 2;
      if (v32 + 2 < v33)
      {
        unint64_t v35 = *(void *)(v34 + 8 * v16);
        if (v35) {
          goto LABEL_13;
        }
        int64_t v51 = v32 + 3;
        if (v51 < v33)
        {
          unint64_t v35 = *(void *)(v34 + 8 * v51);
          if (v35)
          {
            int64_t v16 = v51;
            goto LABEL_13;
          }
          while (1)
          {
            int64_t v16 = v51 + 1;
            if (__OFADD__(v51, 1)) {
              break;
            }
            if (v16 >= v33) {
              goto LABEL_29;
            }
            unint64_t v35 = *(void *)(v34 + 8 * v16);
            ++v51;
            if (v35) {
              goto LABEL_13;
            }
          }
LABEL_43:
          __break(1u);
          return JWSSignedJSON.sign(_:)(v13, v14);
        }
      }
    }
    goto LABEL_29;
  }
LABEL_13:
  uint64_t v17 = (v35 - 1) & v35;
  unint64_t v18 = __clz(__rbit64(v35)) + (v16 << 6);
LABEL_7:
  *(void *)(v0 + 1872) = v17;
  *(void *)(v0 + 1864) = v16;
  uint64_t v19 = *(void *)(*(void *)(v13 + 56) + 8 * v18);
  *(void *)(v0 + 1880) = v19;
  swift_retain();
  uint64_t v20 = (__SecTrust *)RecipientEncryptionCertificate.keyAgreement.getter();
  *(void *)(v0 + 1888) = v20;
  uint64_t v21 = RecipientEncryptionCertificate.signing.getter();
  *(void *)(v0 + 1896) = v21;
  if (!v21)
  {
    uint64_t v113 = *(void **)(v0 + 1744);
    uint64_t v116 = *(void **)(v0 + 1752);
    uint64_t v144 = *(void *)(v0 + 1688);
    uint64_t v147 = *(void *)(v0 + 1736);
    uint64_t v143 = *(void *)(v0 + 1656);
    uint64_t v135 = *(void *)(v0 + 1648);
    uint64_t v139 = *(void *)(v0 + 1640);
    uint64_t v131 = *(void *)(v0 + 1600);
    uint64_t v109 = *(void *)(v0 + 1592);
    uint64_t v123 = *(void *)(v0 + 1576);
    uint64_t v127 = *(void *)(v0 + 1584);
    uint64_t v36 = *(void *)(v0 + 1568);
    uint64_t v120 = *(void *)(v0 + 1560);
    uint64_t v154 = v20;
    uint64_t v37 = *(void *)(v0 + 1464);
    uint64_t v38 = *(void *)(v0 + 1456);
    uint64_t v39 = *(void *)(v0 + 1448);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v38 + 104))(v37, enum case for DIPError.Code.missingCertificate(_:), v39);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    swift_release();
    swift_release();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v157);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v123, v120);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v131, v127);
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v143, v139);
LABEL_18:
    sub_1001D961C(v144, type metadata accessor for SharingCredentials);
    uint64_t v50 = v147;
    goto LABEL_35;
  }
  uint64_t v22 = (void *)v21;
  uint64_t v23 = *(void *)(v0 + 1552);
  uint64_t v24 = *(void *)(v0 + 1520);
  uint64_t v25 = *(void **)(v0 + 1216);
  uint64_t v26 = v19 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey;
  uint64_t v27 = *(void *)(v19 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey);
  uint64_t v28 = *(__CFString **)(v26 + 8);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 1512) + 104))(v24, *(unsigned int *)(v0 + 1992), *(void *)(v0 + 1504));
  sub_1001B8108(v157, v27, v28, v20, v25, (unint64_t)v22, v24, v23);
  if (!v152)
  {
    uint64_t v155 = v20;
    uint64_t v40 = *(void *)(v0 + 1552);
    uint64_t v41 = *(void *)(v0 + 1544);
    uint64_t v42 = *(void *)(v0 + 1536);
    uint64_t v43 = *(void *)(v0 + 1528);
    v44._rawValue = *(void **)(v0 + 1208);
    (*(void (**)(void, void))(*(void *)(v0 + 1512) + 8))(*(void *)(v0 + 1520), *(void *)(v0 + 1504));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v41, v40, v43);
    sub_1000B6120(&qword_1007265C8, (uint64_t *)&unk_100726030);
    sub_1000B6120(&qword_1007265D0, (uint64_t *)&unk_100726030);
    JWSSignedJSON.init(payload:)();
    JWSSignedJSON.setCertificateChain(_:)(v44);
    if (!v45)
    {
      JWSSignedJSON.setKid(_:)();
      JWSSignedJSON.setNonce(_:)(*(Swift::String *)(v0 + 1232));
      uint64_t v52 = (void *)swift_task_alloc();
      *(void *)(v0 + 1904) = v52;
      *uint64_t v52 = v0;
      v52[1] = sub_1001B2D80;
      uint64_t v14 = *(void *)(v0 + 1472);
      goto LABEL_39;
    }
    uint64_t v106 = *(void **)(v0 + 1752);
    uint64_t v114 = *(void **)(v0 + 1744);
    uint64_t v144 = *(void *)(v0 + 1688);
    uint64_t v147 = *(void *)(v0 + 1736);
    uint64_t v132 = *(void *)(v0 + 1648);
    uint64_t v136 = *(void *)(v0 + 1640);
    uint64_t v140 = *(void *)(v0 + 1656);
    uint64_t v46 = *(void *)(v0 + 1592);
    uint64_t v124 = *(void *)(v0 + 1584);
    uint64_t v128 = *(void *)(v0 + 1600);
    uint64_t v47 = *(void *)(v0 + 1568);
    uint64_t v117 = *(void *)(v0 + 1560);
    uint64_t v121 = *(void *)(v0 + 1576);
    uint64_t v48 = *(void *)(v0 + 1536);
    uint64_t v108 = *(void *)(v0 + 1528);
    uint64_t v110 = *(void *)(v0 + 1552);
    uint64_t v49 = *(void *)(v0 + 1480);
    uint64_t v103 = *(void *)(v0 + 1472);
    uint64_t v104 = *(void *)(v0 + 1496);

    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v104, v103);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v110, v108);
    swift_release();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v157);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v121, v117);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v128, v124);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v140, v136);
    goto LABEL_18;
  }
  uint64_t v112 = *(void **)(v0 + 1752);
  uint64_t v115 = *(void **)(v0 + 1744);
  uint64_t v153 = *(void *)(v0 + 1736);
  uint64_t v146 = *(void *)(v0 + 1688);
  uint64_t v142 = *(void *)(v0 + 1656);
  uint64_t v134 = *(void *)(v0 + 1648);
  uint64_t v138 = *(void *)(v0 + 1640);
  uint64_t v130 = *(void *)(v0 + 1600);
  uint64_t v29 = *(void *)(v0 + 1592);
  uint64_t v122 = *(void *)(v0 + 1576);
  uint64_t v126 = *(void *)(v0 + 1584);
  uint64_t v30 = *(void *)(v0 + 1568);
  uint64_t v119 = *(void *)(v0 + 1560);
  uint64_t v107 = *(void *)(v0 + 1520);
  uint64_t v31 = *(void *)(v0 + 1512);
  uint64_t v105 = *(void *)(v0 + 1504);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v107, v105);
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v157);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v122, v119);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v130, v126);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v142, v138);
  sub_1001D961C(v146, type metadata accessor for SharingCredentials);
  sub_10000C6CC(v153, &qword_100726510);
  swift_release();
LABEL_36:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v100 = *(uint64_t (**)(void))(v0 + 8);
  return v100();
}

uint64_t sub_1001B3FE0()
{
  *(void *)(*(void *)v1 + 1960) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v2 = sub_1001B5334;
  }
  else
  {
    unint64_t v2 = sub_1001B4148;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B4148()
{
  uint64_t countAndFlagsBits = (void (*)(void *, void *))v0[121]._countAndFlagsBits;
  object = v0[120]._object;
  uint64_t v52 = v0[120]._countAndFlagsBits;
  v57._rawValue = v0[110]._object;
  uint64_t v54 = (char *)v0[109]._object;
  uint64_t v33 = (uint64_t)v0[108]._object;
  uint64_t v1 = (uint64_t)v0[107]._object;
  uint64_t v2 = v0[106]._countAndFlagsBits;
  uint64_t v42 = (int *)v0[104]._object;
  uint64_t v43 = (char *)v0[105]._object;
  uint64_t v3 = v0[85]._countAndFlagsBits;
  uint64_t v37 = v0[84]._object;
  uint64_t v38 = v0[85]._object;
  uint64_t v4 = v0[84]._countAndFlagsBits;
  Swift::OpaquePointer v44 = (unsigned __int8 *)v0[83]._object;
  uint64_t v45 = v0[88]._object;
  unint64_t v35 = v0[82]._object;
  uint64_t v36 = v0[83]._countAndFlagsBits;
  uint64_t v5 = v0[82]._countAndFlagsBits;
  uint64_t v34 = v0[81]._object;
  uint64_t v6 = (char *)v0[81]._countAndFlagsBits;
  uint64_t v49 = (uint64_t)v0[80]._object;
  uint64_t v46 = (int *)v0[80]._countAndFlagsBits;
  uint64_t v47 = v0[87]._object;
  uint64_t v39 = v0[79]._countAndFlagsBits;
  uint64_t v40 = v0[78]._object;
  uint64_t v41 = v0[79]._object;
  uint64_t v7 = v0[74]._object;
  uint64_t v8 = v0[74]._countAndFlagsBits;
  uint64_t v9 = v0[73]._object;
  (*(void (**)(void))(v5 + 16))();
  uint64_t v10 = (void *)(v1 + *(int *)(v2 + 48));
  sub_1001D95B4(v33, v1, type metadata accessor for VerifiedClaim);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v10 = v9;
  v10[1] = v8;
  v10[2] = v7;
  uint64_t v11 = *(void *)(v1 + *(int *)(type metadata accessor for VerifiedClaim(0) + 20));
  swift_retain();
  sub_1001D961C(v1, type metadata accessor for VerifiedClaim);
  (*(void (**)(uint64_t, void *, void *))(v3 + 16))(v4 + *(int *)(v36 + 24), v38, v37);
  (*(void (**)(uint64_t, void *, void *))(v5 + 32))(v4, v35, v34);
  *(void *)(v4 + *(int *)(v36 + 20)) = v11;
  (*(void (**)(void *, char *, void *))(v39 + 16))(v41, &v43[v42[5]], v40);
  sub_100007764(&qword_100726588);
  unint64_t v12 = (v44[80] + 32) & ~(unint64_t)v44[80];
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100610730;
  sub_1001D95B4(v4, v13 + v12, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization);
  UUID.init()();
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  countAndFlagsBits(v45, v47);
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0xE000000000000000;
  *((void *)v6 + 2) = v14;
  *((void *)v6 + 3) = v16;
  (*(void (**)(char *, void *, void *))(v39 + 32))(&v6[v46[5]], v41, v40);
  *(void *)&v6[v46[6]] = v13;
  *(void *)&v6[v46[7]] = object;
  *(void *)&v6[v46[8]] = v52;
  uint64_t v17 = &v6[v46[9]];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  uint64_t v18 = *(void *)&v54[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8];
  *(void *)uint64_t v6 = *(void *)&v54[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  *((void *)v6 + 1) = v18;
  sub_1001D95B4((uint64_t)v6, v49, type metadata accessor for IdentitySharingRequest);
  sub_1001C6628(&qword_100726590, (void (*)(uint64_t))type metadata accessor for IdentitySharingRequest);
  sub_1001C6628(&qword_100726598, (void (*)(uint64_t))type metadata accessor for IdentitySharingRequest);
  swift_bridgeObjectRetain();
  JWSSignedJSON.init(payload:)();
  uint64_t v19 = sub_100007764(&qword_1007265A0);
  v0[123]._uint64_t countAndFlagsBits = v19;
  JWSSignedJSON.setCertificateChain(_:)(v57);
  if (v20)
  {
    uint64_t v21 = v0[109]._object;
    uint64_t v22 = (void *)v0[109]._countAndFlagsBits;
    uint64_t v56 = (uint64_t)v0[105]._object;
    uint64_t v58 = (uint64_t)v0[108]._object;
    uint64_t v23 = v0[103]._countAndFlagsBits;
    uint64_t v53 = v0[102]._object;
    uint64_t v55 = v0[103]._object;
    int64_t v51 = v0[85]._object;
    uint64_t v24 = v0[85]._countAndFlagsBits;
    uint64_t v25 = v0[84]._object;
    uint64_t v26 = v0[84]._countAndFlagsBits;
    uint64_t v27 = v0[81]._countAndFlagsBits;
    uint64_t v28 = v0[68]._object;
    swift_bridgeObjectRelease();

    (*(void (**)(void *, uint64_t))(*(void *)(v19 - 8) + 8))(v28, v19);
    sub_1001D961C(v27, type metadata accessor for IdentitySharingRequest);
    sub_1001D961C(v26, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization);
    (*(void (**)(void *, void *))(v24 + 8))(v51, v25);
    (*(void (**)(void *, void *))(v23 + 8))(v55, v53);
    sub_1001D961C(v56, type metadata accessor for SharingCredentials);
    sub_10000C6CC(v58, &qword_100726510);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = (uint64_t (*)(void))v0->_object;
    return v29();
  }
  else
  {
    swift_bridgeObjectRelease();
    JWSSignedJSON.setKid(_:)();
    JWSSignedJSON.setNonce(_:)(v0[77]);
    uint64_t v31 = (void *)swift_task_alloc();
    v0[123]._object = v31;
    void *v31 = v0;
    v31[1] = sub_1001B4970;
    int64_t v32 = v0[76]._object;
    return JWSSignedJSON.sign(_:)(v32, v19);
  }
}

uint64_t sub_1001B4970()
{
  *(void *)(*(void *)v1 + 1984) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001B55A8;
  }
  else {
    uint64_t v2 = sub_1001B4A84;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B4A84()
{
  uint64_t v1 = (void *)v0[219];
  uint64_t v2 = (void *)v0[218];
  uint64_t v14 = v0[217];
  uint64_t v3 = v0[207];
  uint64_t v4 = v0[206];
  uint64_t v12 = v0[205];
  uint64_t v13 = v0[211];
  uint64_t v5 = v0[171];
  uint64_t v6 = v0[170];
  uint64_t v7 = v0[169];
  uint64_t v8 = v0[168];
  uint64_t v9 = v0[162];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);

  sub_1001D961C(v9, type metadata accessor for IdentitySharingRequest);
  sub_1001D961C(v8, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v12);
  sub_1001D961C(v13, type metadata accessor for SharingCredentials);
  sub_10000C6CC(v14, &qword_100726510);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1001B4D44()
{
  uint64_t v13 = *(void *)(v0 + 1800);
  uint64_t v12 = *(void *)(v0 + 1792);
  uint64_t v1 = *(void **)(v0 + 1744);
  uint64_t v2 = *(void *)(v0 + 1736);
  uint64_t v3 = *(void *)(v0 + 1688);
  uint64_t v4 = *(void *)(v0 + 1656);
  uint64_t v5 = *(void *)(v0 + 1648);
  uint64_t v6 = *(void *)(v0 + 1640);
  uint64_t v7 = *(void *)(v0 + 1600);
  uint64_t v8 = *(void *)(v0 + 1592);
  uint64_t v9 = *(void *)(v0 + 1584);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_1001D961C(v3, type metadata accessor for SharingCredentials);
  sub_10000C6CC(v2, &qword_100726510);
  swift_bridgeObjectRelease();
  sub_1001D5FEC(v12, v13);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1001B5004()
{
  uint64_t v1 = *(void **)(v0 + 1896);
  uint64_t v11 = *(void **)(v0 + 1752);
  uint64_t v14 = *(void **)(v0 + 1744);
  uint64_t v21 = *(void *)(v0 + 1688);
  uint64_t v22 = *(void *)(v0 + 1736);
  uint64_t v2 = *(void *)(v0 + 1648);
  uint64_t v19 = *(void *)(v0 + 1640);
  uint64_t v20 = *(void *)(v0 + 1656);
  uint64_t v3 = *(void *)(v0 + 1592);
  uint64_t v17 = *(void *)(v0 + 1584);
  uint64_t v18 = *(void *)(v0 + 1600);
  uint64_t v4 = *(void *)(v0 + 1568);
  uint64_t v15 = *(void *)(v0 + 1560);
  uint64_t v16 = *(void *)(v0 + 1576);
  uint64_t v5 = *(void *)(v0 + 1536);
  uint64_t v12 = *(void *)(v0 + 1528);
  uint64_t v13 = *(void *)(v0 + 1552);
  uint64_t v6 = *(void *)(v0 + 1496);
  uint64_t v7 = *(void *)(v0 + 1480);
  uint64_t v8 = *(void *)(v0 + 1472);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v13, v12);
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 1000);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v16, v15);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v18, v17);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v20, v19);
  sub_1001D961C(v21, type metadata accessor for SharingCredentials);
  sub_10000C6CC(v22, &qword_100726510);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1001B5334()
{
  uint64_t v1 = *(void **)(v0 + 1744);
  uint64_t v2 = *(void *)(v0 + 1736);
  uint64_t v3 = *(void *)(v0 + 1688);
  uint64_t v4 = *(void *)(v0 + 1656);
  uint64_t v5 = *(void *)(v0 + 1648);
  uint64_t v6 = *(void *)(v0 + 1640);
  uint64_t v7 = *(void *)(v0 + 1368);
  uint64_t v8 = *(void *)(v0 + 1360);
  uint64_t v9 = *(void *)(v0 + 1352);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_1001D961C(v3, type metadata accessor for SharingCredentials);
  sub_10000C6CC(v2, &qword_100726510);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1001B55A8()
{
  uint64_t v1 = *(void *)(v0 + 1968);
  uint64_t v2 = *(void **)(v0 + 1744);
  uint64_t v14 = *(void *)(v0 + 1688);
  uint64_t v15 = *(void *)(v0 + 1736);
  uint64_t v3 = *(void *)(v0 + 1648);
  uint64_t v12 = *(void *)(v0 + 1640);
  uint64_t v13 = *(void *)(v0 + 1656);
  uint64_t v4 = *(void *)(v0 + 1368);
  uint64_t v5 = *(void *)(v0 + 1360);
  uint64_t v6 = *(void *)(v0 + 1352);
  uint64_t v7 = *(void *)(v0 + 1344);
  uint64_t v8 = *(void *)(v0 + 1296);
  uint64_t v9 = *(void *)(v0 + 1096);

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v9, v1);
  sub_1001D961C(v8, type metadata accessor for IdentitySharingRequest);
  sub_1001D961C(v7, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v13, v12);
  sub_1001D961C(v14, type metadata accessor for SharingCredentials);
  sub_10000C6CC(v15, &qword_100726510);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1001B5898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100007764(&qword_100726510);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = *(void *)(a2 + 24);
  if (v13)
  {
    uint64_t v14 = *(void **)(v13 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v15 = sub_1004D03AC((uint64_t)v12, a3, (uint64_t)v14);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (!v3)
  {
    uint64_t v20 = *(int *)(v7 + 48);
    uint64_t v25 = a1;
    uint64_t v21 = (uint64_t *)&v12[v20];
    *uint64_t v21 = v15;
    v21[1] = v17;
    v21[2] = v19;
    uint64_t v22 = (uint64_t *)&v10[v20];
    sub_1001D95B4((uint64_t)v12, (uint64_t)v10, type metadata accessor for VerifiedClaim);
    *uint64_t v22 = v15;
    v22[1] = v17;
    v22[2] = v19;
    uint64_t v26 = v15;
    swift_bridgeObjectRetain();
    sub_1001D961C((uint64_t)v10, type metadata accessor for VerifiedClaim);
    sub_100184C70(v21[1], &v26);
    sub_1001D95B4((uint64_t)v12, (uint64_t)v10, type metadata accessor for VerifiedClaim);
    uint64_t v15 = *v21;
    sub_1001D7624((uint64_t)v10, v25, type metadata accessor for VerifiedClaim);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000C6CC((uint64_t)v12, &qword_100726510);
  }
  return v15;
}

uint64_t sub_1001B5AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v68 = a5;
  uint64_t v67 = a4;
  uint64_t v72 = a3;
  uint64_t v58 = a2;
  uint64_t v57 = a1;
  uint64_t v62 = type metadata accessor for DIPError.Code();
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v63 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for HardwareAttestationType();
  uint64_t v60 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v59 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for KeystoreKeyType();
  uint64_t v65 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v64 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for DIPSignpost();
  uint64_t v69 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v55 - v19;
  static DaemonSignposts.getVerificationResultKeysAndCertificates.getter();
  long long v70 = v20;
  DIPSignpost.init(_:)();
  static DaemonSignposts.getVerificationResultWaitForBAA.getter();
  uint64_t v82 = v18;
  uint64_t v21 = v5;
  DIPSignpost.init(_:)();
  OS_dispatch_group.wait(interval:)();
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) == 0)
  {
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = v7;
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "BAA creation timed out.", v24, 2u);
      uint64_t v7 = v56;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v25 = v82;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  uint64_t v26 = v72;
  uint64_t v27 = *(void *)(v72 + 24);
  if (v27)
  {
    switch(*(unsigned char *)(v27 + 200))
    {
      case 1:
      case 2:
      case 3:
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v28) {
          goto LABEL_9;
        }
        goto LABEL_10;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
LABEL_9:
  id v29 = [self standardUserDefaults];
  v30._uint64_t countAndFlagsBits = 0xD000000000000015;
  v30._object = (void *)0x800000010063DA90;
  Swift::Bool v31 = NSUserDefaults.internalBool(forKey:)(v30);

  if (v31)
  {
LABEL_10:
    int64_t v32 = sub_10006C648();
    uint64_t v33 = v71;
    sub_1001B8BCC((uint64_t)v32, 1, 0, 0xF000000000000000, (uint64_t)&v79);
    if (v33)
    {
      uint64_t v34 = *(void (**)(char *, uint64_t))(v69 + 8);
      v34(v25, v15);
      swift_bridgeObjectRelease();
LABEL_21:
      uint64_t v48 = v70;
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      v34(v48, v15);
      return v15;
    }
    uint64_t v56 = v7;
    uint64_t v55 = v21;
    uint64_t v71 = v15;
    swift_bridgeObjectRelease();
    sub_10000C728(&v79, v80);
    uint64_t v39 = v65;
    uint64_t v40 = v64;
    uint64_t v41 = v66;
    (*(void (**)(char *, void, uint64_t))(v65 + 104))(v64, enum case for KeystoreKeyType.standard(_:), v66);
    swift_bridgeObjectRetain();
    dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    swift_bridgeObjectRelease();
    uint64_t v45 = v56;
    sub_10000C728(&v79, v80);
    uint64_t v46 = v60;
    uint64_t v47 = v59;
    (*(void (**)(char *, void, uint64_t))(v60 + 104))(v59, enum case for HardwareAttestationType.IDV(_:), v45);
    dispatch thunk of DIPKeystoreProtocol.retrieveIdentityKey(label:constraints:attestationType:)();
    uint64_t v36 = 0;
    uint64_t v15 = v71;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
    swift_bridgeObjectRelease();
    sub_1000BEA14((uint64_t)&v77, (uint64_t)v81, &qword_100726528);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v79);
    uint64_t v25 = v82;
    uint64_t v26 = v72;
  }
  else
  {
    uint64_t v55 = v21;
    uint64_t v35 = v21 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey;
    swift_beginAccess();
    sub_100048D6C(v35, (uint64_t)v81, &qword_100726528);
    uint64_t v36 = v71;
  }
  sub_100048D6C((uint64_t)v81, (uint64_t)&v77, &qword_100726528);
  if (!v78)
  {
    sub_10000C6CC((uint64_t)&v77, &qword_100726528);
    (*(void (**)(char *, void, uint64_t))(v61 + 104))(v63, enum case for DIPError.Code.unexpectedDaemonState(_:), v62);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C6CC((uint64_t)v81, &qword_100726528);
    uint64_t v34 = *(void (**)(char *, uint64_t))(v69 + 8);
    v34(v25, v15);
    goto LABEL_21;
  }
  uint64_t v37 = v15;
  sub_10000C6B4(&v77, (uint64_t)&v79);
  sub_10000C728(&v79, v80);
  uint64_t v38 = dispatch thunk of IdentityKey.attestation(_:)();
  if (v36)
  {
LABEL_15:
    sub_10000C6CC((uint64_t)v81, &qword_100726528);
    uint64_t v34 = *(void (**)(char *, uint64_t))(v69 + 8);
    uint64_t v15 = v37;
    v34(v25, v37);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v79);
    goto LABEL_21;
  }
  uint64_t v15 = v38;
  uint64_t v42 = v55;
  if (*(unsigned char *)(v55 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius) == 1)
  {
    sub_10000C6CC((uint64_t)v81, &qword_100726528);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v69 + 8);
    v43(v25, v37);
    sub_100030A10((uint64_t)&v79, v57);
    sub_100030A10((uint64_t)&v79, v58);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v50 = sub_10006C834();
    sub_1001B8BCC((uint64_t)v50, 0, 0, 0xF000000000000000, (uint64_t)&v77);
    swift_bridgeObjectRelease();
    uint64_t v51 = v42 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey;
    swift_beginAccess();
    sub_100048D6C(v51, (uint64_t)&v75, &qword_100726528);
    if (v76)
    {
      sub_100030A10((uint64_t)&v75, (uint64_t)&v73);
      sub_10000C6CC((uint64_t)&v75, &qword_100726528);
      sub_10000C728(&v73, v74);
      uint64_t v52 = (void *)dispatch thunk of IdentityKey.attestation(_:)();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v73);
      uint64_t v26 = v72;
    }
    else
    {
      sub_10000C6CC((uint64_t)&v75, &qword_100726528);
      uint64_t v52 = _swiftEmptyArrayStorage;
    }
    if (!v52[2])
    {
      swift_bridgeObjectRelease();
      sub_100030A10((uint64_t)&v77, (uint64_t)&v73);
      uint64_t v53 = (void *)swift_allocObject();
      sub_10000C6B4(&v73, (uint64_t)(v53 + 2));
      uint64_t v54 = v67;
      v53[7] = v26;
      v53[8] = v54;
      v53[9] = v68;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100007764(&qword_100726540);
      runAsyncAndBlock<A>(timeout:file:function:line:_:)();
      swift_release();
      swift_beginAccess();
      sub_1001D9214((uint64_t)&v75, v51, &qword_100726528);
      swift_endAccess();
      sub_100048D6C(v51, (uint64_t)&v75, &qword_100726528);
      if (v76)
      {
        sub_100030A10((uint64_t)&v75, (uint64_t)&v73);
        sub_10000C6CC((uint64_t)&v75, &qword_100726528);
        sub_10000C728(&v73, v74);
        uint64_t v52 = (void *)dispatch thunk of IdentityKey.attestation(_:)();
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v73);
      }
      else
      {
        sub_10000C6CC((uint64_t)&v75, &qword_100726528);
        uint64_t v52 = _swiftEmptyArrayStorage;
      }
    }
    sub_100048D6C(v51, (uint64_t)&v73, &qword_100726528);
    if (!v74)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000C6CC((uint64_t)&v73, &qword_100726528);
      (*(void (**)(char *, void, uint64_t))(v61 + 104))(v63, enum case for DIPError.Code.internalError(_:), v62);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v77);
      goto LABEL_15;
    }
    sub_10000C6B4(&v73, (uint64_t)&v75);
    if (!*(void *)(v15 + 16) || !v52[2])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v61 + 104))(v63, enum case for DIPError.Code.unexpectedDeviceState(_:), v62);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v75);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v77);
      goto LABEL_15;
    }
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v77);
    sub_10000C6CC((uint64_t)v81, &qword_100726528);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v69 + 8);
    v43(v25, v37);
    sub_100030A10((uint64_t)&v79, v57);
    sub_10000C6B4(&v75, v58);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v79);
  Swift::OpaquePointer v44 = v70;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v43(v44, v37);
  return v15;
}

uint64_t sub_1001B6C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a8;
  v8[8] = v20;
  v8[5] = a6;
  v8[6] = a7;
  v8[3] = a2;
  v8[4] = a5;
  _OWORD v8[2] = a1;
  uint64_t v13 = sub_100007764((uint64_t *)&unk_100726500);
  v8[9] = v13;
  v8[10] = *(void *)(v13 - 8);
  v8[11] = swift_task_alloc();
  uint64_t v14 = sub_100007764(&qword_100723718);
  v8[12] = v14;
  v8[13] = *(void *)(v14 - 8);
  v8[14] = swift_task_alloc();
  uint64_t v15 = sub_100007764(&qword_100726510);
  v8[15] = v15;
  v8[16] = swift_task_alloc();
  uint64_t v16 = swift_task_alloc();
  v8[17] = v16;
  sub_1001D95B4(a4, v16, type metadata accessor for VerifiedClaim);
  uint64_t v17 = (void *)(v16 + *(int *)(v15 + 48));
  *uint64_t v17 = a5;
  v17[1] = a6;
  v17[2] = a7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1001B6E78, 0, 0);
}

uint64_t sub_1001B6E78()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 48);
  v5._rawValue = *(void **)(v0 + 56);
  uint64_t v7 = v1 + *(int *)(*(void *)(v0 + 120) + 48);
  long long v15 = *(_OWORD *)(v0 + 32);
  sub_1001D95B4(*(void *)(v0 + 136), v1, type metadata accessor for VerifiedClaim);
  *(_OWORD *)uint64_t v7 = v15;
  *(void *)(v7 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_1001D961C(v1, type metadata accessor for VerifiedClaim);
  sub_1000B6120(&qword_100726518, &qword_100723718);
  sub_1000B6120(&qword_100726520, &qword_100723718);
  JWSSignedJSON.init(payload:)();
  JWSSignedJSON.setCertificateChain(_:)(v5);
  if (v8)
  {
    uint64_t v9 = *(void *)(v0 + 136);
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 16), *(void *)(v0 + 72));
    sub_10000C6CC(v9, &qword_100726510);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    JWSSignedJSON.setKid(_:)();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1001B70E8;
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v13 = *(void *)(v0 + 72);
    return JWSSignedJSON.sign(_:)(v14, v13);
  }
}

uint64_t sub_1001B70E8()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001B7378;
  }
  else {
    uint64_t v2 = sub_1001B71FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B71FC()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 24);
  long long v13 = *(_OWORD *)(v0 + 32);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 16))(v4, *(void *)(v0 + 16), v6);
  uint64_t v9 = v1 + *(int *)(v3 + 48);
  sub_1001D95B4(v2, v1, type metadata accessor for VerifiedClaim);
  sub_10000C6CC(v2, &qword_100726510);
  *(_OWORD *)uint64_t v9 = v13;
  *(void *)(v9 + 16) = v7;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for VerifiedClaim(0) + 20));
  swift_retain();
  sub_1001D961C(v1, type metadata accessor for VerifiedClaim);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v4, v6);
  *(void *)(v8 + *(int *)(type metadata accessor for VerifiedClaimPresentment(0) + 20)) = v10;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1001B7378()
{
  uint64_t v1 = v0[17];
  (*(void (**)(void, void))(v0[10] + 8))(v0[2], v0[9]);
  sub_10000C6CC(v1, &qword_100726510);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1001B7438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[45] = a4;
  v5[46] = v4;
  v5[43] = a2;
  v5[44] = a3;
  v5[42] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[47] = v6;
  v5[48] = *(void *)(v6 - 8);
  v5[49] = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_1007264F0);
  v5[50] = swift_task_alloc();
  uint64_t v7 = sub_100007764(&qword_100725E70);
  v5[51] = v7;
  v5[52] = *(void *)(v7 - 8);
  v5[53] = swift_task_alloc();
  return _swift_task_switch(sub_1001B7590, 0, 0);
}

uint64_t sub_1001B7590()
{
  if (!*(void *)(v0[46] + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context))
  {
    (*(void (**)(void, void, void))(v0[48] + 104))(v0[49], enum case for DIPError.Code.unexpectedDaemonState(_:), v0[47]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_11:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_12;
  }
  id v1 = sub_100195108();
  if (!v2)
  {
    (*(void (**)(void, void, void))(v0[48] + 104))(v0[49], enum case for DIPError.Code.invalidSPURL(_:), v0[47]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_11;
  }
  uint64_t v3 = *(void **)(v0[46] + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService);
  v0[54] = v3;
  if (!v3)
  {
    uint64_t v13 = v0[48];
    uint64_t v12 = v0[49];
    uint64_t v14 = v0[47];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v12, enum case for DIPError.Code.unexpectedDaemonState(_:), v14);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v0[44] + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingURL);
    v0[55] = v5;
    if (v5)
    {
      if (*(unsigned char *)(v5 + 32) == 1)
      {
        uint64_t v6 = *(void *)(v5 + 16);
        uint64_t v7 = *(void **)(v5 + 24);
        uint64_t v27 = (uint64_t)v1;
        uint64_t v28 = v2;
        swift_bridgeObjectRetain();
        v8._uint64_t countAndFlagsBits = v6;
        v8._object = v7;
        String.append(_:)(v8);
        uint64_t v9 = v27;
        uint64_t v10 = v28;
        id v11 = v3;
        swift_retain();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v21 = v3;
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v9 = *(void *)(v5 + 16);
        uint64_t v10 = *(void *)(v5 + 24);
        swift_bridgeObjectRetain();
      }
      v0[56] = v10;
      uint64_t v22 = (void *)swift_task_alloc();
      v0[57] = v22;
      *uint64_t v22 = v0;
      v22[1] = sub_1001B7B28;
      uint64_t v23 = v0[53];
      uint64_t v25 = v0[44];
      uint64_t v24 = v0[45];
      uint64_t v26 = v0[43];
      return sub_10017B864(v23, v26, v9, v10, v24, v25);
    }
  }
  uint64_t v18 = v0[48];
  uint64_t v17 = v0[49];
  uint64_t v19 = v0[47];
  id v20 = v3;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, enum case for DIPError.Code.invalidSPURL(_:), v19);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();

LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1001B7B28()
{
  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001B7F4C;
  }
  else {
    uint64_t v2 = sub_1001B7C4C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B7C4C()
{
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  JWSSignedJSON.payload.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  long long v5 = *(_OWORD *)(v0 + 288);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 128) = v5;
  long long v6 = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v0 + 160) = v6;
  long long v7 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 64) = v7;
  long long v8 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 96) = v8;
  long long v9 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 32) = v9;
  swift_bridgeObjectRetain();
  sub_10017DD9C(v0 + 16);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v3, 1, v10);
  uint64_t v13 = *(void **)(v0 + 432);
  if (v12 == 1)
  {
    uint64_t v14 = *(void *)(v0 + 392);
    uint64_t v15 = *(void *)(v0 + 376);
    uint64_t v16 = *(void *)(v0 + 384);
    sub_10000C6CC(*(void *)(v0 + 400), (uint64_t *)&unk_1007264F0);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v14, enum case for DIPError.Code.serverResponseInconsistent(_:), v15);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 400);
    uint64_t v19 = *(void *)(v0 + 336);
    swift_release();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v19, v18, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_1001B7F4C()
{
  uint64_t v1 = (void *)v0[54];
  (*(void (**)(void, void, void))(v0[48] + 104))(v0[49], enum case for DIPError.Code.internalError(_:), v0[47]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1001B8108@<X0>(void *a1@<X0>, uint64_t a2@<X2>, __CFString *a3@<X3>, __SecTrust *a4@<X4>, void *a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unint64_t v109 = a6;
  uint64_t v100 = a7;
  uint64_t v107 = a5;
  uint64_t v104 = a3;
  uint64_t v105 = a4;
  uint64_t v102 = a1;
  uint64_t v103 = a2;
  uint64_t v110 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v11 = (char *)v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for EncryptedMessageEntity();
  uint64_t v97 = *(void *)(v12 - 8);
  uint64_t v98 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v99 = (char *)v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v101 = (char *)v77 - v15;
  uint64_t v16 = sub_100007764(&qword_100726488);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v96 = (char *)v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v106 = (uint64_t)v77 - v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v77 - v22;
  sub_100007764((uint64_t *)&unk_100726030);
  EncryptedMessage.message.getter();
  EncryptedDataContainer.data.getter();
  uint64_t v25 = v24;
  uint64_t v94 = v17;
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
  uint64_t v26 = v17 + 8;
  uint64_t v95 = v27;
  v27((uint64_t)v23, v16);
  if (!v25 || (uint64_t v28 = Data.init(base64Encoded:options:)(), v30 = v29, swift_bridgeObjectRelease(), v30 >> 60 == 15))
  {
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.badLogic(_:), v110);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  uint64_t v89 = v9;
  v77[1] = v26;
  uint64_t v78 = v16;
  uint64_t v79 = a8;
  uint64_t v90 = v11;
  uint64_t v91 = v28;
  unint64_t v92 = v30;
  uint64_t v32 = sub_100007764((uint64_t *)&unk_100726490);
  uint64_t v33 = sub_100007764(&qword_100725938);
  uint64_t v34 = *(void *)(*(void *)(v33 - 8) + 72);
  uint64_t v35 = *(unsigned __int8 *)(*(void *)(v33 - 8) + 80);
  uint64_t v36 = (v35 + 32) & ~v35;
  uint64_t v86 = v32;
  uint64_t v84 = v36 + 2 * v34;
  uint64_t v83 = v35 | 7;
  uint64_t v37 = swift_allocObject();
  long long v80 = xmmword_100611020;
  uint64_t v93 = v37;
  *(_OWORD *)(v37 + 16) = xmmword_100611020;
  uint64_t v85 = v36;
  uint64_t v38 = v37 + v36;
  uint64_t v39 = (void *)(v38 + *(int *)(v33 + 48));
  uint64_t v40 = enum case for ECIESOption.recipientSigningKey(_:);
  uint64_t v41 = type metadata accessor for ECIESOption();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(void (**)(void))(v42 + 104);
  uint64_t v44 = v42 + 104;
  unsigned int v81 = v40;
  ((void (*)(uint64_t, uint64_t, uint64_t))v43)(v38, v40, v41);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v45 = __DataStorage.init(length:)();
  void *v39 = 0x4100000000;
  v39[1] = v45 | 0x4000000000000000;
  uint64_t v87 = v34;
  uint64_t v88 = v33;
  uint64_t v46 = (void *)(v38 + v34 + *(int *)(v33 + 48));
  int v47 = enum case for ECIESOption.senderSigningKey(_:);
  uint64_t v82 = v44;
  v43();
  swift_allocObject();
  uint64_t v48 = __DataStorage.init(length:)();
  *uint64_t v46 = 0x4100000000;
  v46[1] = v48 | 0x4000000000000000;
  unint64_t v49 = sub_10015DDB8(v93);
  v50.SecCertificateRef value = SecTrustRef.getLeafCertificate()().value;
  if (!v50.value)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v89 + 104))(v90, enum case for DIPError.Code.serverResponseInconsistent(_:), v110);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return sub_10000C5E0(v91, v92);
  }
  SecCertificateRef value = v50.value;
  uint64_t v52 = copyPublicKeyDataFromCertificate(_:)();
  if (v53 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v89 + 104))(v90, enum case for DIPError.Code.keychainKeyExportFailure(_:), v110);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_10:

    return sub_10000C5E0(v91, v92);
  }
  uint64_t v54 = v52;
  unint64_t v55 = v53;
  LODWORD(v110) = v47;
  sub_10000C728(v107, v107[3]);
  uint64_t v56 = v108;
  uint64_t v57 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()();
  if (v56)
  {
    sub_10000C5E0(v54, v55);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v107 = value;
  uint64_t v108 = v57;
  uint64_t v93 = v49;
  unint64_t v109 = v58;
  uint64_t v59 = swift_allocObject();
  uint64_t v90 = (char *)v59;
  *(_OWORD *)(v59 + 16) = v80;
  uint64_t v60 = v59 + v85;
  uint64_t v61 = v88;
  uint64_t v62 = v54;
  uint64_t v63 = (uint64_t *)(v59 + v85 + *(int *)(v88 + 48));
  ((void (*)(uint64_t, void, uint64_t))v43)(v59 + v85, v81, v41);
  *uint64_t v63 = v62;
  v63[1] = v55;
  uint64_t v64 = (void *)(v60 + v87 + *(int *)(v61 + 48));
  v43();
  uint64_t v65 = v62;
  uint64_t v67 = v108;
  unint64_t v66 = v109;
  *uint64_t v64 = v108;
  v64[1] = v66;
  sub_1000338D4(v65, v55);
  uint64_t v68 = v93;
  sub_10002CEB0(v67, v66);
  unint64_t v69 = sub_10015DDB8((uint64_t)v90);
  sub_10000C728(v102, v102[3]);
  unint64_t v70 = v55;
  uint64_t v71 = v106;
  uint64_t v73 = v91;
  unint64_t v72 = v92;
  sub_10018553C(v91, v92, v104, v105, v68, v106, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v75 = v97;
  uint64_t v74 = v98;
  (*(void (**)(char *, void, uint64_t))(v97 + 104))(v101, enum case for EncryptedMessageEntity.device_see(_:), v98);
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v99, v100, v74);
  uint64_t v76 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v96, v71, v78);
  uint64_t v110 = sub_100007764(&qword_1007264A0);
  sub_1001D5D7C();
  sub_1001D5E1C();
  EncryptedMessage.init(sender:recipient:message:senderSigningKey:)();

  sub_10000C5E0(v73, v72);
  sub_10000C5F4(v108, v109);
  sub_10000C5E0(v65, v70);
  return v95(v106, v76);
}

uint64_t sub_1001B8BCC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v117 = a4;
  uint64_t v120 = a3;
  int v116 = a2;
  uint64_t v114 = a5;
  uint64_t v113 = type metadata accessor for DIPError.Code();
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  long long v7 = &v95[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v119 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = &v95[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v115 = &v95[-v12];
  uint64_t v130 = type metadata accessor for HardwareAttestationType();
  uint64_t v13 = *(void *)(v130 - 8);
  uint64_t v14 = __chkstk_darwin(v130);
  uint64_t v16 = &v95[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = &v95[-v18];
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = &v95[-v21];
  __chkstk_darwin(v20);
  uint64_t v24 = &v95[-v23];
  uint64_t v25 = v121;
  uint64_t result = sub_10030AC6C(a1, (uint64_t)&v95[-v23]);
  if (!v25)
  {
    uint64_t v110 = (void (*)(void, void))v22;
    uint64_t v108 = 0;
    uint64_t v121 = v13;
    uint64_t v104 = v11;
    uint64_t v111 = v8;
    uint64_t v107 = v16;
    unint64_t v109 = v19;
    uint64_t v27 = v24;
    uint64_t v105 = v7;
    uint64_t v28 = v115;
    defaultLogger()();
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      Swift::Bool v31 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v127 = swift_slowAlloc();
      *(_DWORD *)Swift::Bool v31 = 136446210;
      swift_beginAccess();
      uint64_t v32 = HardwareAttestationType.rawValue.getter();
      *(void *)&long long v124 = sub_100110D58(v32, v33, (uint64_t *)&v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "pre-selected attestation type is %{public}s", v31, 0xCu);
      swift_arrayDestroy();
      uint64_t v34 = v27;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v115 = *(unsigned char **)(v119 + 8);
      ((void (*)(unsigned char *, uint64_t))v115)(v28, v111);
      char v35 = v116;
    }
    else
    {

      uint64_t v115 = *(unsigned char **)(v119 + 8);
      ((void (*)(unsigned char *, uint64_t))v115)(v28, v111);
      char v35 = v116;
      uint64_t v34 = v27;
    }
    swift_beginAccess();
    uint64_t v36 = HardwareAttestationType.rawValue.getter();
    uint64_t v38 = v37;
    object = (void *)0xE000000000000000;
    swift_bridgeObjectRelease();
    *(void *)&long long v127 = v36;
    *((void *)&v127 + 1) = v38;
    v40._uint64_t countAndFlagsBits = 45;
    v40._object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    if (v35) {
      uint64_t v41 = 1702195828;
    }
    else {
      uint64_t v41 = 0x65736C6166;
    }
    if (v35) {
      unint64_t v42 = 0xE400000000000000;
    }
    else {
      unint64_t v42 = 0xE500000000000000;
    }
    unint64_t v43 = v42;
    String.append(_:)(*(Swift::String *)&v41);
    swift_bridgeObjectRelease();
    v44._uint64_t countAndFlagsBits = 45;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    unint64_t v45 = v117;
    uint64_t v46 = v109;
    uint64_t countAndFlagsBits = 0;
    if (v117 >> 60 != 15)
    {
      Swift::String v48 = Data.base64EncodedString(options:)(0);
      uint64_t countAndFlagsBits = v48._countAndFlagsBits;
      object = v48._object;
    }
    unint64_t v49 = object;
    String.append(_:)(*(Swift::String *)&countAndFlagsBits);
    swift_bridgeObjectRelease();
    long long v50 = v127;
    uint64_t v51 = (uint64_t *)(v118 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__keystoreDict);
    swift_beginAccess();
    uint64_t v52 = *v51;
    if (*(void *)(*v51 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v53 = sub_100590548(v50, *((uint64_t *)&v50 + 1));
      if (v54)
      {
        sub_100030A10(*(void *)(v52 + 56) + 40 * v53, (uint64_t)&v127);
      }
      else
      {
        uint64_t v129 = 0;
        long long v127 = 0u;
        long long v128 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v128 + 1))
      {
        swift_bridgeObjectRelease();
        sub_10000C6B4(&v127, v114);
        return (*(uint64_t (**)(unsigned char *, uint64_t))(v121 + 8))(v34, v130);
      }
    }
    else
    {
      uint64_t v129 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
    }
    uint64_t v97 = v51;
    uint64_t v100 = *((void *)&v50 + 1);
    sub_10000C6CC((uint64_t)&v127, (uint64_t *)&unk_100726440);
    uint64_t v129 = 0;
    long long v127 = 0u;
    long long v128 = 0u;
    unint64_t v55 = *(void (**)(void))(v121 + 104);
    unsigned int v96 = enum case for HardwareAttestationType.SE(_:);
    uint64_t v103 = v121 + 104;
    uint64_t v102 = (void (*)(unsigned char *, void, uint64_t))v55;
    v55(v110);
    uint64_t v56 = sub_1001C6628(&qword_100724970, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v99 = v56;
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v124 == v122) {
      char v57 = 1;
    }
    else {
      char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v58 = v121;
    uint64_t v59 = v121 + 8;
    uint64_t v60 = v110;
    uint64_t v110 = *(void (**)(void, void))(v121 + 8);
    v110(v60, v130);
    uint64_t v101 = v59;
    uint64_t v98 = v50;
    if (v57)
    {
      uint64_t v61 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isSEAvailable;
      int v62 = *(unsigned __int8 *)(v118 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isSEAvailable);
      if (v62 == 2 || (v62 & 1) != 0)
      {
        unint64_t v64 = v45;
        uint64_t v65 = v34;
        uint64_t v66 = swift_allocObject();
        uint64_t v67 = v120;
        *(unsigned char *)(v66 + 16) = v35 & 1;
        *(void *)(v66 + 24) = v67;
        *(void *)(v66 + 32) = v64;
        uint64_t v125 = type metadata accessor for DIPKeystoreSecureElement(0);
        uint64_t v126 = &protocol witness table for DIPKeystoreKeychain;
        sub_1000338D4(v67, v64);
        uint64_t v68 = v108;
        runAsyncAndBlock<A>(timeout:file:function:line:_:)();
        if (v68)
        {
          sub_10000C6CC((uint64_t)&v127, (uint64_t *)&unk_100726440);
          swift_bridgeObjectRelease();
          swift_release();
          sub_1001D5B48((uint64_t)&v124);
          return ((uint64_t (*)(unsigned char *, uint64_t))v110)(v65, v130);
        }
        sub_10000C6CC((uint64_t)&v127, (uint64_t *)&unk_100726440);
        swift_release();
        sub_1000BEA14((uint64_t)&v124, (uint64_t)&v127, (uint64_t *)&unk_100726440);
        sub_100048D6C((uint64_t)&v127, (uint64_t)&v124, (uint64_t *)&unk_100726440);
        uint64_t v69 = swift_allocObject();
        sub_1000BEA14((uint64_t)&v124, v69 + 16, (uint64_t *)&unk_100726440);
        runAsyncAndBlock<A>(file:function:line:_:)();
        swift_release();
        uint64_t v108 = 0;
        if (v124 == 1)
        {
          *(unsigned char *)(v118 + v61) = 1;
          uint64_t v34 = v65;
        }
        else
        {
          *(unsigned char *)(v118 + v61) = 0;
          unint64_t v70 = v109;
          uint64_t v71 = v130;
          v102(v109, enum case for HardwareAttestationType.SEP(_:), v130);
          uint64_t v34 = v65;
          swift_beginAccess();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v121 + 40))(v65, v70, v71);
        }
        unint64_t v45 = v117;
        char v35 = v116;
      }
      else
      {
        uint64_t v63 = v130;
        v102(v46, enum case for HardwareAttestationType.SEP(_:), v130);
        swift_beginAccess();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v58 + 40))(v34, v46, v63);
      }
    }
    unint64_t v72 = v104;
    defaultLogger()();
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.info.getter();
    BOOL v75 = os_log_type_enabled(v73, v74);
    uint64_t v76 = v111;
    uint64_t v106 = v34;
    if (v75)
    {
      long long v77 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v124 = swift_slowAlloc();
      *(_DWORD *)long long v77 = 136446210;
      uint64_t v78 = HardwareAttestationType.rawValue.getter();
      *(void *)&long long v122 = sub_100110D58(v78, v79, (uint64_t *)&v124);
      unint64_t v45 = v117;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "final selected attestation type is %{public}s", v77, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      char v35 = v116;
      swift_slowDealloc();
    }

    ((void (*)(unsigned char *, uint64_t))v115)(v72, v76);
    uint64_t v80 = v113;
    uint64_t v81 = v112;
    v102(v107, enum case for HardwareAttestationType.SEP(_:), v130);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v82 = v105;
    if (v124 == v122)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v83 = (uint64_t (*)(unsigned char *, uint64_t))v110;
      v110(v107, v130);
    }
    else
    {
      char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v83 = (uint64_t (*)(unsigned char *, uint64_t))v110;
      v110(v107, v130);
      if ((v84 & 1) == 0)
      {
        uint64_t v89 = v109;
        uint64_t v90 = v130;
        v102(v109, v96, v130);
        sub_1001C6628(&qword_100726450, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
        char v91 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v92 = v89;
        uint64_t v83 = (uint64_t (*)(unsigned char *, uint64_t))v110;
        v110(v92, v90);
        if ((v91 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(unsigned char *, void, uint64_t))(v81 + 104))(v82, enum case for DIPError.Code.unimplemented(_:), v80);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_10000C6CC((uint64_t)&v127, (uint64_t *)&unk_100726440);
          return v83(v106, v130);
        }
        goto LABEL_42;
      }
    }
    uint64_t v85 = swift_allocObject();
    *(unsigned char *)(v85 + 16) = v35 & 1;
    uint64_t v86 = v120;
    *(void *)(v85 + 24) = v120;
    *(void *)(v85 + 32) = v45;
    uint64_t v125 = type metadata accessor for DIPKeystoreKeychain();
    uint64_t v126 = &protocol witness table for DIPKeystoreKeychain;
    sub_1000338D4(v86, v45);
    uint64_t v87 = v108;
    runAsyncAndBlock<A>(timeout:file:function:line:_:)();
    if (v87)
    {
      sub_10000C6CC((uint64_t)&v127, (uint64_t *)&unk_100726440);
      swift_bridgeObjectRelease();
      swift_release();
      sub_1001D5B48((uint64_t)&v124);
      uint64_t v88 = v106;
      return v83(v88, v130);
    }
    sub_10000C6CC((uint64_t)&v127, (uint64_t *)&unk_100726440);
    swift_release();
    sub_1000BEA14((uint64_t)&v124, (uint64_t)&v127, (uint64_t *)&unk_100726440);
LABEL_42:
    uint64_t result = sub_100048D6C((uint64_t)&v127, (uint64_t)&v122, (uint64_t *)&unk_100726440);
    if (v123)
    {
      sub_10000C6B4(&v122, (uint64_t)&v124);
      swift_beginAccess();
      sub_10055ECA0((uint64_t)&v124, v98, v100);
      swift_endAccess();
      uint64_t result = sub_100048D6C((uint64_t)&v127, (uint64_t)&v124, (uint64_t *)&unk_100726440);
      uint64_t v93 = v114;
      uint64_t v94 = v106;
      if (v125)
      {
        sub_10000C6CC((uint64_t)&v127, (uint64_t *)&unk_100726440);
        sub_10000C6B4(&v124, v93);
        uint64_t v88 = v94;
        return v83(v88, v130);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B9D3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  type metadata accessor for DIPKeystoreSecureElement(0);
  swift_allocObject();
  sub_1000338D4(a3, a4);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1001B9E18;
  return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(a2, a3, a4);
}

uint64_t sub_1001B9E18(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 32) = a1;
    return _swift_task_switch(sub_1001B9F64, 0, 0);
  }
}

uint64_t sub_1001B9F64()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B9F88(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1001BA024;
  return sub_10030B7A8(a2, 0);
}

uint64_t sub_1001BA024(char a1)
{
  *(unsigned char *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001BA124, 0, 0);
}

uint64_t sub_1001BA124()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BA144(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  type metadata accessor for DIPKeystoreKeychain();
  swift_allocObject();
  sub_1000338D4(a3, a4);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1001B9E18;
  return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(a2, a3, a4);
}

uint64_t sub_1001BA220(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  __chkstk_darwin(v4);
  uint64_t v41 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_10015CF20((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v14 = a1;
  uint64_t v15 = a1;
  uint64_t v16 = v1;
  sub_100195524(v15, 0, v13);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    uint64_t v35 = 0;
    uint64_t v36 = v14;
    uint64_t v18 = v41;
    unint64_t v33 = v9;
    uint64_t v34 = v10;
    uint64_t v32 = v7;
    uint64_t v19 = Data.init(base16Encoded:)();
    if (v20 >> 60 == 15)
    {
      (*(void (**)(char *, void, uint64_t))(v40 + 104))(v18, enum case for DIPError.Code.serverResponseInconsistent(_:), v39);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return swift_willThrow();
    }
    else
    {
      uint64_t v21 = v19;
      unint64_t v22 = v20;
      if (sub_10006CB30())
      {
        uint64_t v23 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper];
        if (v23)
        {
          id v24 = v23;
          sub_1002D66D4();
        }
        uint64_t v41 = *(char **)&v16[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__deviceInfoQueue];
        uint64_t v25 = (void *)swift_allocObject();
        void v25[2] = v16;
        v25[3] = v21;
        v25[4] = v22;
        aBlock[4] = sub_1001C66B0;
        aBlock[5] = v25;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100593800;
        aBlock[3] = &unk_1006F9850;
        uint64_t v26 = _Block_copy(aBlock);
        uint64_t v27 = v16;
        sub_1000338D4(v21, v22);
        uint64_t v28 = v12;
        static DispatchQoS.unspecified.getter();
        aBlock[7] = _swiftEmptyArrayStorage;
        sub_1001C6628((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100007764((uint64_t *)&unk_1007208F0);
        sub_1000B6120(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
        uint64_t v29 = v21;
        os_log_type_t v30 = v33;
        uint64_t v31 = v32;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v26);
        sub_10000C5E0(v29, v22);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v31);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v34);
        return swift_release();
      }
      else
      {
        return sub_10000C5E0(v21, v22);
      }
    }
  }
  return result;
}

void sub_1001BA75C(char *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)&a1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper];
  id v7 = v6;
  uint64_t v8 = a1;
  sub_1001D4604(a2, a3, (uint64_t)v6, (uint64_t)v8);
}

void sub_1001BA7E4(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  *(void *)(a2 + 16) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10 && *(void *)(v10 + 16))
  {
    defaultLogger()();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "got IDS data", v13, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  }
  dispatch_group_leave(a3);
}

void sub_1001BA98C(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4, void *a5)
{
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = Data.init(base64Encoded:options:)();
  if (v15 >> 60 == 15)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v16._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
    v16._object = (void *)0x800000010063DC80;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = a2;
    v17._object = a3;
    String.append(_:)(v17);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.certificateDecodingFailed(_:), v10);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  uint64_t v46 = a4;
  v43._uint64_t countAndFlagsBits = a2;
  v43._object = a3;
  uint64_t v18 = v14;
  unint64_t v19 = v15;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  SecCertificateRef v21 = SecCertificateCreateWithData(kCFAllocatorDefault, isa);

  if (v21)
  {
    unint64_t v41 = v19;
    uint64_t v42 = v18;
    if (*v46)
    {
      uint64_t v22 = copyPublicKeyDataFromCertificate(_:)();
      if (v23 >> 60 == 15)
      {
        uint64_t v44 = 0;
        unint64_t v45 = 0xE000000000000000;
        _StringGuts.grow(_:)(75);
        v24._uint64_t countAndFlagsBits = 0xD000000000000049;
        v24._object = (void *)0x800000010063DD40;
        String.append(_:)(v24);
        String.append(_:)(v43);
        (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.certificateDecodingFailed(_:), v10);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
      else
      {
        unint64_t v28 = v23;
        SecCertificateRef v39 = v21;
        uint64_t v40 = v22;
        sub_10000C728(a5, a5[3]);
        uint64_t v29 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()();
        if (v5)
        {
          uint64_t v31 = v40;
          unint64_t v32 = v28;
        }
        else
        {
          uint64_t v33 = v29;
          unint64_t v34 = v30;
          uint64_t v35 = v40;
          char v36 = sub_100510850(v29, v30, v40, v28);
          sub_10000C5F4(v33, v34);
          if (v36)
          {
            type metadata accessor for DIPKeystoreKeychain();
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)();
            swift_bridgeObjectRelease();
            SecCertificateRef v38 = v39;
            static DIPKeystoreKeychain.storeKeychainCertificate(_:label:failIfDuplicate:)();
            sub_10000C5E0(v42, v41);

            sub_10000C5E0(v40, v28);
            *uint64_t v46 = 0;
            return;
          }
          uint64_t v44 = 0;
          unint64_t v45 = 0xE000000000000000;
          _StringGuts.grow(_:)(67);
          v37._uint64_t countAndFlagsBits = 0xD000000000000041;
          v37._object = (void *)0x800000010063DD90;
          String.append(_:)(v37);
          String.append(_:)(v43);
          uint64_t v46 = (unsigned char *)v28;
          (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.claimKeyMismatch(_:), v10);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          uint64_t v31 = v35;
          unint64_t v32 = (unint64_t)v46;
        }
        sub_10000C5E0(v31, v32);
      }
    }
    else
    {
      type metadata accessor for DIPKeystoreKeychain();
      IDV_INTERMEDIATE_CERT_KEYCHAIN_LABEL.getter();
      static DIPKeystoreKeychain.storeKeychainCertificate(_:label:failIfDuplicate:)();
      if (!v5)
      {
        sub_10000C5E0(v42, v41);
        swift_bridgeObjectRelease();

        return;
      }

      swift_bridgeObjectRelease();
    }
    unint64_t v27 = v41;
    uint64_t v26 = v42;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(63);
    v25._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
    v25._object = (void *)0x800000010063DD00;
    String.append(_:)(v25);
    String.append(_:)(v43);
    uint64_t v46 = (unsigned char *)v45;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.certificateDecodingFailed(_:), v10);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v26 = v18;
    unint64_t v27 = v19;
  }
  sub_10000C5E0(v26, v27);
}

id sub_1001BB198()
{
  uint64_t v0 = type metadata accessor for DIPBackoffStrategy();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v28 - v8;
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  uint64_t v10 = *(os_unfair_lock_s **)(qword_100760360 + 56);
  uint64_t v11 = (uint64_t)&v10[4];
  uint64_t v12 = v10 + 112;
  os_unfair_lock_lock(v10 + 112);
  sub_1002AC168(v11, (uint64_t)v39);
  os_unfair_lock_unlock(v12);
  sub_1000BEA14((uint64_t)v39, (uint64_t)v30, &qword_100722350);
  sub_1000BEA14((uint64_t)v30, (uint64_t)v31, &qword_100722350);
  if (sub_100044CCC((uint64_t)v31) == 1)
  {
    if (qword_10071F5F0 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_1000443D4((uint64_t)v4, (uint64_t)qword_1007608A0);
    sub_1001D95B4(v13, (uint64_t)v9, type metadata accessor for DIPHTTPSession.Configuration);
    uint64_t v14 = v29;
  }
  else
  {
    sub_100044CE4((uint64_t)&v32);
    sub_100044D90(v30);
    sub_100044F4C((uint64_t)&v32);
    unint64_t v15 = (uint64_t *)v36;
    if (v36[8]) {
      unint64_t v15 = &v33;
    }
    uint64_t v16 = *v15;
    Swift::String v17 = (uint64_t *)v37;
    if (v37[8]) {
      Swift::String v17 = &v34;
    }
    uint64_t v18 = *v17;
    unint64_t v19 = (uint64_t *)v38;
    if (v38[8]) {
      unint64_t v19 = &v35;
    }
    *uint64_t v3 = *v19;
    (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DIPBackoffStrategy.exponential(_:), v0);
    uint64_t v20 = v0;
    uint64_t v14 = v29;
    uint64_t v22 = *(void *)(v29 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier);
    uint64_t v21 = *(void *)(v29 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8);
    *(void *)uint64_t v9 = v16;
    *((void *)v9 + 1) = v18;
    (*(void (**)(char *, uint64_t *, uint64_t))(v1 + 32))(&v9[v4[6]], v3, v20);
    v9[v4[7]] = 1;
    v9[v4[8]] = 1;
    v9[v4[9]] = 0;
    unint64_t v23 = &v9[v4[10]];
    *(void *)unint64_t v23 = v22;
    *((void *)v23 + 1) = v21;
    swift_bridgeObjectRetain();
  }
  uint64_t v24 = *(void *)(v14 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation);
  uint64_t v25 = *(void *)(v14 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8);
  sub_1001D95B4((uint64_t)v9, (uint64_t)v7, type metadata accessor for DIPHTTPSession.Configuration);
  objc_allocWithZone((Class)type metadata accessor for DIPAssessmentWebService());
  swift_bridgeObjectRetain();
  id v26 = sub_10003C328(v24, v25, (uint64_t)v7);
  sub_1001D961C((uint64_t)v9, type metadata accessor for DIPHTTPSession.Configuration);
  return v26;
}

char *sub_1001BB560()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (uint64_t *)((char *)&v26[-1] - v6);
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  uint64_t v8 = *(os_unfair_lock_s **)(qword_100760360 + 56);
  uint64_t v9 = (uint64_t)&v8[4];
  uint64_t v10 = v8 + 112;
  os_unfair_lock_lock(v8 + 112);
  sub_1002AC168(v9, (uint64_t)v28);
  os_unfair_lock_unlock(v10);
  sub_1000BEA14((uint64_t)v28, (uint64_t)v26, &qword_100722350);
  sub_1000BEA14((uint64_t)v26, (uint64_t)v27, &qword_100722350);
  if (sub_100044CCC((uint64_t)v27) == 1)
  {
    if (qword_10071F5E8 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_1000443D4((uint64_t)v2, (uint64_t)qword_100760888);
    sub_1001D95B4(v11, (uint64_t)v7, type metadata accessor for DIPHTTPSession.Configuration);
  }
  else
  {
    uint64_t v12 = v27[5];
    uint64_t v13 = v27[6];
    uint64_t v14 = (void *)((char *)v7 + v2[6]);
    sub_100044D90(v26);
    *uint64_t v14 = v27[7];
    uint64_t v15 = enum case for DIPBackoffStrategy.exponential(_:);
    uint64_t v16 = type metadata accessor for DIPBackoffStrategy();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v14, v15, v16);
    Swift::String v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier);
    void *v7 = v12;
    v7[1] = v13;
    *((unsigned char *)v7 + v2[7]) = 0;
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    *((unsigned char *)v7 + v2[8]) = 1;
    *((unsigned char *)v7 + v2[9]) = 0;
    uint64_t v20 = (void *)((char *)v7 + v2[10]);
    *uint64_t v20 = v19;
    v20[1] = v18;
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = *(void *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation);
  uint64_t v22 = *(void *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8);
  sub_1001D95B4((uint64_t)v7, (uint64_t)v5, type metadata accessor for DIPHTTPSession.Configuration);
  objc_allocWithZone((Class)type metadata accessor for DIPTopekaWebService());
  swift_bridgeObjectRetain();
  unint64_t v23 = (char *)sub_1002B92C4(v21, v22, (uint64_t)v5);
  *(void *)&v23[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer + 8] = &off_1006F9808;
  swift_unknownObjectWeakAssign();
  sub_1001D961C((uint64_t)v7, type metadata accessor for DIPHTTPSession.Configuration);
  return v23;
}

id sub_1001BB87C(uint64_t a1)
{
  uint64_t v3 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v26 - v7);
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9 && (uint64_t v10 = v9 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_connectivity, (*(unsigned char *)(v10 + 32) & 1) == 0))
  {
    uint64_t v12 = *(void *)(v10 + 16);
    uint64_t v13 = *(void *)(v10 + 8);
    uint64_t v14 = (void *)((char *)v8 + v3[6]);
    *uint64_t v14 = *(void *)(v10 + 24);
    uint64_t v15 = enum case for DIPBackoffStrategy.exponential(_:);
    uint64_t v16 = type metadata accessor for DIPBackoffStrategy();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v14, v15, v16);
    Swift::String v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier);
    *uint64_t v8 = v13;
    v8[1] = v12;
    *((unsigned char *)v8 + v3[7]) = 0;
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    *((unsigned char *)v8 + v3[8]) = 1;
    *((unsigned char *)v8 + v3[9]) = 0;
    uint64_t v20 = (void *)((char *)v8 + v3[10]);
    *uint64_t v20 = v19;
    v20[1] = v18;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (qword_10071F5E8 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_1000443D4((uint64_t)v3, (uint64_t)qword_100760888);
    sub_1001D95B4(v11, (uint64_t)v8, type metadata accessor for DIPHTTPSession.Configuration);
  }
  uint64_t v21 = v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation;
  uint64_t v22 = *(void *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation);
  uint64_t v23 = *(void *)(v21 + 8);
  sub_1001D95B4((uint64_t)v8, (uint64_t)v6, type metadata accessor for DIPHTTPSession.Configuration);
  objc_allocWithZone((Class)type metadata accessor for DIPSPWebService());
  swift_bridgeObjectRetain();
  id v24 = sub_100179440(v22, v23, (uint64_t)v6);
  sub_1001D961C((uint64_t)v8, type metadata accessor for DIPHTTPSession.Configuration);
  return v24;
}

uint64_t sub_1001BBAD0(uint64_t a1, uint64_t a2)
{
  v2[31] = a1;
  v2[32] = a2;
  uint64_t v3 = type metadata accessor for Date();
  v2[33] = v3;
  v2[34] = *(void *)(v3 - 8);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[37] = v4;
  v2[38] = *(void *)(v4 - 8);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v2[41] = v5;
  v2[42] = *(void *)(v5 - 8);
  v2[43] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError();
  v2[44] = v6;
  v2[45] = *(void *)(v6 - 8);
  v2[46] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  v2[47] = v7;
  v2[48] = *(void *)(v7 - 8);
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPBackgroundDeferralStatus();
  v2[52] = v8;
  v2[53] = *(void *)(v8 - 8);
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  return _swift_task_switch(sub_1001BBDA8, 0, 0);
}

uint64_t sub_1001BBDA8()
{
  uint64_t v47 = v0;
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728((void *)(v0 + 208), *(void *)(v0 + 232));
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  *(void *)(v0 + 448) = 0;
  uint64_t v1 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 416);
  uint64_t v5 = *(void *)(v0 + 424);
  (*(void (**)(uint64_t))(v0 + 248))(v1);
  unsigned int v45 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
  uint64_t v44 = *(void (**)(uint64_t))(v5 + 104);
  v44(v3);
  char v6 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v7(v3, v4);
  v7(v2, v4);
  if ((v6 & 1) == 0)
  {
    if (qword_10071F5D0 != -1) {
      swift_once();
    }
    static DispatchWorkItemFlags.barrier.getter();
    OS_dispatch_queue.sync<A>(flags:execute:)();
    Swift::String v43 = *(uint64_t (**)(void, void))(*(void *)(v0 + 384) + 8);
    uint64_t v8 = v43(*(void *)(v0 + 408), *(void *)(v0 + 376));
    uint64_t v10 = *(void *)(v0 + 432);
    uint64_t v9 = *(void *)(v0 + 440);
    uint64_t v11 = *(void *)(v0 + 416);
    (*(void (**)(uint64_t))(v0 + 248))(v8);
    ((void (*)(uint64_t, void, uint64_t))v44)(v10, v45, v11);
    char v12 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
    v7(v10, v11);
    v7(v9, v11);
    if ((v12 & 1) == 0)
    {
      uint64_t v14 = *(void *)(v0 + 280);
      uint64_t v13 = *(void *)(v0 + 288);
      uint64_t v15 = *(void *)(v0 + 264);
      uint64_t v16 = *(void *)(v0 + 272);
      uint64_t v17 = qword_100760868;
      Date.init()();
      static Date.- infix(_:_:)();
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v42(v14, v15);
      static DispatchWorkItemFlags.barrier.getter();
      uint64_t v18 = swift_task_alloc();
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = v13;
      OS_dispatch_queue.sync<A>(flags:execute:)();
      uint64_t v19 = *(void *)(v0 + 288);
      uint64_t v20 = *(void *)(v0 + 264);
      v43(*(void *)(v0 + 400), *(void *)(v0 + 376));
      swift_task_dealloc();
      uint64_t v21 = ((uint64_t (*)(uint64_t, uint64_t))v42)(v19, v20);
      uint64_t v23 = *(void *)(v0 + 432);
      uint64_t v22 = *(void *)(v0 + 440);
      uint64_t v24 = *(void *)(v0 + 416);
      (*(void (**)(uint64_t))(v0 + 248))(v21);
      ((void (*)(uint64_t, void, uint64_t))v44)(v23, v45, v24);
      LOBYTE(v19) = static DIPBackgroundDeferralStatus.== infix(_:_:)();
      v7(v23, v24);
      v7(v22, v24);
      if ((v19 & 1) == 0)
      {
        static DispatchWorkItemFlags.barrier.getter();
        OS_dispatch_queue.sync<A>(flags:execute:)();
        uint64_t v25 = v43(*(void *)(v0 + 392), *(void *)(v0 + 376));
        uint64_t v27 = *(void *)(v0 + 432);
        uint64_t v26 = *(void *)(v0 + 440);
        uint64_t v28 = *(void *)(v0 + 416);
        (*(void (**)(uint64_t))(v0 + 248))(v25);
        ((void (*)(uint64_t, void, uint64_t))v44)(v27, v45, v28);
        char v29 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
        v7(v27, v28);
        v7(v26, v28);
        if ((v29 & 1) == 0)
        {
          if (qword_10071F4B0 != -1) {
            swift_once();
          }
          uint64_t v32 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
          uint64_t v33 = (uint64_t)&v32[4];
          uint64_t v34 = v32 + 52;
          os_unfair_lock_lock(v32 + 52);
          sub_1000262B4(v33, (_OWORD *)(v0 + 16));
          os_unfair_lock_unlock(v34);
          uint64_t v35 = *(void *)(v0 + 88);
          swift_retain();
          sub_1000262D0(v0 + 16);
          char v36 = *(os_unfair_lock_s **)(v35 + 16);
          Swift::String v37 = v36 + 4;
          SecCertificateRef v38 = v36 + 6;
          os_unfair_lock_lock(v36 + 6);
          sub_100006754(v37, &v46);
          os_unfair_lock_unlock(v38);
          uint64_t v39 = v46;
          swift_release();
          if (v39 <= 0) {
            sub_100437570();
          }
          v40._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
          v40._object = (void *)0x80000001006402B0;
          v41._uint64_t countAndFlagsBits = 0x3462333231303338;
          v41._object = (void *)0xE800000000000000;
          logMilestone(tag:description:)(v41, v40);
        }
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_1001BCB60()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1001BCC78, 0, 0);
}

uint64_t sub_1001BCC78()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001BCD6C()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[3] = v1;
  v0[4] = *(void *)(v1 - 8);
  v0[5] = swift_task_alloc();
  v0[6] = swift_task_alloc();
  return _swift_task_switch(sub_1001BCE38, 0, 0);
}

uint64_t sub_1001BCE38()
{
  if (qword_10071F580 != -1) {
    swift_once();
  }
  if ((char *)[self deviceLockState] - 1 > (char *)1)
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v0[7] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1001BD028;
    v10.n128_u64[0] = 2.0;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v9, &unk_100726960, 0, (char *)&type metadata for () + 8, v10);
  }
  else
  {
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Cannot continue gcdu background task because device is locked", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = v0[6];
    uint64_t v5 = v0[3];
    uint64_t v6 = v0[4];

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_1001BD028()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1001BD1D4;
  }
  else {
    os_log_type_t v2 = sub_1001BD13C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001BD13C()
{
  v1._object = (void *)0x80000001006401C0;
  v2._uint64_t countAndFlagsBits = 0x3532663139616266;
  v2._object = (void *)0xE800000000000000;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  logMilestone(tag:description:)(v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001BD1D4()
{
  defaultLogger()();
  Swift::String v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 134217984;
    v0[2] = 0x4000000000000000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ODN cleanup timed out after %f seconds", v3, 0xCu);
    swift_slowDealloc();
  }
  swift_errorRelease();

  (*(void (**)(void, void))(v0[4] + 8))(v0[5], v0[3]);
  v4._object = (void *)0x80000001006401C0;
  v5._uint64_t countAndFlagsBits = 0x3532663139616266;
  v5._object = (void *)0xE800000000000000;
  v4._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  logMilestone(tag:description:)(v5, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1001BD348()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return _swift_task_switch(sub_1001BD404, 0, 0);
}

uint64_t sub_1001BD404()
{
  if (qword_10071F4D0 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100760320;
  v0[5] = qword_100760320;
  swift_retain();
  uint64_t v2 = swift_task_alloc();
  v0[6] = v2;
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = 0;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001BD53C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0x6361436E61656C63, 0xEE00293A5F286568, sub_1001D967C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_1001BD53C()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001BD6C4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001BD658;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001BD658()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001BD6C4()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  swift_task_dealloc();
  swift_release();
  defaultLogger()();
  DIPLogError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_1001BD7A0(void (*a1)(void), uint64_t a2)
{
  unint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v27 = type metadata accessor for WarmerUpper();
  __chkstk_darwin(v27);
  uint64_t v28 = (uint64_t)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPBackgroundDeferralStatus();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v27 - v8;
  char v29 = (void *)type metadata accessor for Logger();
  uint64_t v10 = *(v29 - 1);
  __chkstk_darwin(v29);
  char v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPError.Code();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10071F4A8 != -1) {
    swift_once();
  }
  OS_dispatch_group.wait(interval:)();
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    uint64_t v17 = v30;
    v30();
    uint64_t v18 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
    char v29 = *(void **)(v4 + 104);
    ((void (*)(char *, void, uint64_t))v29)(v7, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v3);
    char v19 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
    v20(v7, v3);
    v20(v9, v3);
    if ((v19 & 1) == 0)
    {
      uint64_t v21 = runAsyncAndBlock<A>(file:function:line:_:)();
      ((void (*)(uint64_t))v17)(v21);
      ((void (*)(char *, uint64_t, uint64_t))v29)(v7, v18, v3);
      char v22 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
      v20(v7, v3);
      v20(v9, v3);
      if ((v22 & 1) == 0)
      {
        if (qword_10071F550 != -1) {
          swift_once();
        }
        uint64_t v23 = sub_1000443D4(v27, (uint64_t)qword_100760768);
        swift_beginAccess();
        uint64_t v24 = v28;
        sub_1001D95B4(v23, v28, (uint64_t (*)(void))type metadata accessor for WarmerUpper);
        sub_100417804((uint64_t)v30, v31);
        sub_1001D961C(v24, (uint64_t (*)(void))type metadata accessor for WarmerUpper);
        v25._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
        v25._object = (void *)0x80000001006401A0;
        v26._uint64_t countAndFlagsBits = 0x6338323638616632;
        v26._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v26, v25);
      }
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DIPError.Code.timeoutNetworkConfig(_:), v13);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(char *, void *))(v10 + 8))(v12, v29);
    swift_errorRelease();
  }
}

uint64_t sub_1001BDD6C()
{
  return _swift_task_switch(sub_1001BDD88, 0, 0);
}

uint64_t sub_1001BDD88()
{
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100025D64;
  return sub_1002AB734();
}

void sub_1001BDE4C(void (*a1)(void), uint64_t a2)
{
  uint64_t v36 = a2;
  Swift::String v37 = a1;
  uint64_t v34 = type metadata accessor for WarmerUpper();
  __chkstk_darwin(v34);
  uint64_t v35 = (uint64_t)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPBackgroundDeferralStatus();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v10 - 8);
  uint64_t v39 = (void (*)(char *, uint64_t, uint64_t))v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v33 - v14;
  uint64_t v16 = type metadata accessor for DIPError.Code();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  char v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10071F4A8 != -1) {
    swift_once();
  }
  OS_dispatch_group.wait(interval:)();
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    v37();
    uint64_t v20 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
    v21(v7, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v3);
    char v22 = static DIPBackgroundDeferralStatus.== infix(_:_:)();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v4 + 8);
    v23(v7, v3);
    v23(v9, v3);
    if ((v22 & 1) == 0)
    {
      if (qword_10071F580 != -1) {
        swift_once();
      }
      if ((char *)[self deviceLockState] - 1 > (char *)1)
      {
        uint64_t v39 = v21;
        if (qword_10071F550 != -1) {
          swift_once();
        }
        uint64_t v27 = sub_1000443D4(v34, (uint64_t)qword_100760768);
        swift_beginAccess();
        uint64_t v28 = v35;
        sub_1001D95B4(v27, v35, (uint64_t (*)(void))type metadata accessor for WarmerUpper);
        char v29 = v37;
        sub_1004181DC((uint64_t)v37, v36);
        uint64_t v30 = sub_1001D961C(v28, (uint64_t (*)(void))type metadata accessor for WarmerUpper);
        ((void (*)(uint64_t))v29)(v30);
        v39(v7, v20, v3);
        LOBYTE(v29) = static DIPBackgroundDeferralStatus.== infix(_:_:)();
        v23(v7, v3);
        v23(v9, v3);
        if ((v29 & 1) == 0)
        {
          v31._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
          v31._object = (void *)0x8000000100640180;
          v32._uint64_t countAndFlagsBits = 0x6439613736303839;
          v32._object = (void *)0xE800000000000000;
          logMilestone(tag:description:)(v32, v31);
        }
      }
      else
      {
        defaultLogger()();
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v24, v25))
        {
          Swift::String v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)Swift::String v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Cannot continue wudu background task because device is locked", v26, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v38 + 8))(v13, v39);
      }
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, enum case for DIPError.Code.timeoutNetworkConfig(_:), v16);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v38 + 8))(v15, v39);
    swift_errorRelease();
  }
}

BOOL sub_1001BE4C0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (v1)
  {
    int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius);
    id v3 = v1;
    uint64_t v4 = v3;
    if (v2 == 1
      && ([v3 invocationReason] == (id)1
       || [v4 invocationReason] == (id)3
       || [v4 invocationReason] == (id)2
       || [v4 invocationReason] == (id)4))
    {
      Swift::Bool v5 = 1;
    }
    else
    {
      id v6 = [self standardUserDefaults];
      v7._object = (void *)0x800000010063D3D0;
      v7._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      Swift::Bool v5 = NSUserDefaults.internalBool(forKey:)(v7);
    }
  }
  else
  {
    return 0;
  }
  return v5;
}

void sub_1001BE5C8()
{
  uint64_t v1 = v0;
  uint64_t v37 = type metadata accessor for DIPError.Code();
  v36[0] = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v38 = (char *)v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPError();
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  __chkstk_darwin(v3);
  uint64_t v39 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v43 - 8);
  uint64_t v10 = __chkstk_darwin(v43);
  uint64_t v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v42 = (char *)v36 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v36[1] = (char *)v36 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v36 - v17;
  defaultLogger()();
  char v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Asked to delete current claim due to self-heal", v21, 2u);
    swift_slowDealloc();
  }

  char v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v23 = v43;
  v22(v18, v43);
  if (*(void *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim))
  {
    uint64_t v29 = qword_10071F5D0;
    swift_retain();
    if (v29 != -1) {
      swift_once();
    }
    uint64_t v30 = static DispatchWorkItemFlags.barrier.getter();
    __chkstk_darwin(v30);
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v31 = v43;
    Swift::String v32 = v42;
    defaultLogger()();
    uint64_t v33 = Logger.logObject.getter();
    uint64_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, (os_log_type_t)v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v34, "Done deleting current claim due to self-heal; terminating process",
        v35,
        2u);
      swift_slowDealloc();
    }

    uint64_t v27 = v32;
    uint64_t v28 = v31;
  }
  else
  {
    defaultLogger()();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      Swift::String v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "No claim to delete during self-healing; terminating process",
        v26,
        2u);
      swift_slowDealloc();
    }

    uint64_t v27 = v12;
    uint64_t v28 = v23;
  }
  v22(v27, v28);
  exit(0);
}

void sub_1001BEC64()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v28 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (!v12)
  {
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No service name during self-healing; terminating process",
        v15,
        2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    exit(0);
  }
  id v16 = [v12 serviceName];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  defaultLogger()();
  swift_bridgeObjectRetain_n();
  os_log_type_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v30 = v1;
    char v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v31 = v3;
    uint64_t v33 = v23;
    uint64_t v29 = v2;
    *(_DWORD *)char v22 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_100110D58(v17, v19, &v33);
    uint64_t v2 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Asked to delete all claims for current service provider %{public}s due to self-heal", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v31;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
  v24(v11, v2);
  sub_1001A3B94(v17, v19, 0);
  defaultLogger()();
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Done deleting all claims for current service provider due to self-heal; terminating process",
      v27,
      2u);
    swift_slowDealloc();
  }

  v24(v9, v2);
  exit(0);
}

void sub_1001BF044()
{
}

void sub_1001BF070()
{
}

uint64_t sub_1001BF09C()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_100726418 + dword_100726418);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100025D64;
  return v3();
}

uint64_t sub_1001BF13C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _sSo16DIHttpHeaderNamea8coreidvdE8allCasesSayABGvgZ_0();
  *a1 = result;
  return result;
}

uint64_t sub_1001BF164(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      id v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1005DB334();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_1001BF2F4(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_1001BF2F4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1001BF4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100726030);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100007764(&qword_100726400);
  __chkstk_darwin(v8);
  Swift::Int v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100007764(&qword_100726408);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = &v25[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  BOOL v16 = &v25[-v15];
  if (*(void *)(a1 + 40) == *(void *)(a2 + 40) && *(void *)(a1 + 48) == *(void *)(a2 + 48)
    || (char v17 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)
      && (sub_10033E1C0(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void **)(a1 + 72), *(void *)(a2 + 56), *(void *)(a2 + 64), *(void **)(a2 + 72)) & 1) != 0&& *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20))
    {
      uint64_t v19 = a1 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
      swift_beginAccess();
      sub_100048D6C(v19, (uint64_t)v16, &qword_100726408);
      uint64_t v20 = a2 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
      swift_beginAccess();
      uint64_t v21 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_100048D6C((uint64_t)v16, (uint64_t)v10, &qword_100726408);
      sub_100048D6C(v20, v21, &qword_100726408);
      char v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v22((uint64_t)v10, 1, v4) == 1)
      {
        uint64_t v23 = &qword_100726408;
        sub_10000C6CC((uint64_t)v16, &qword_100726408);
        if (v22(v21, 1, v4) == 1)
        {
          char v17 = -1;
        }
        else
        {
          uint64_t v23 = &qword_100726400;
          char v17 = 0;
        }
      }
      else
      {
        sub_100048D6C((uint64_t)v10, (uint64_t)v14, &qword_100726408);
        if (v22(v21, 1, v4) == 1)
        {
          sub_10000C6CC((uint64_t)v16, &qword_100726408);
          (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v14, v4);
          char v17 = 0;
          uint64_t v23 = &qword_100726400;
        }
        else
        {
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 32))(v7, v21, v4);
          sub_1000B6120(&qword_100726410, (uint64_t *)&unk_100726030);
          char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
          v24(v7, v4);
          uint64_t v23 = &qword_100726408;
          sub_10000C6CC((uint64_t)v16, &qword_100726408);
          v24(v14, v4);
        }
      }
      sub_10000C6CC((uint64_t)v10, v23);
    }
    else
    {
      char v17 = 0;
    }
  }
  return v17 & 1;
}

uint64_t sub_1001BF8C0()
{
  type metadata accessor for DIPBackgroundActivityManager();
  static DIPBackgroundActivityManager.sharedInstance.getter();
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)();
  swift_release();
  static DIPBackgroundActivityManager.sharedInstance.getter();
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)();
  swift_release();
  static DIPBackgroundActivityManager.sharedInstance.getter();
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)();
  swift_release();
  static DIPBackgroundActivityManager.sharedInstance.getter();
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)();

  return swift_release();
}

uint64_t sub_1001BFA20(unint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    if (!v7) {
      return (uint64_t)v8;
    }
    uint64_t v24 = _swiftEmptyArrayStorage;
    uint64_t result = sub_10011144C(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0) {
      break;
    }
    uint64_t v10 = 0;
    uint64_t v8 = v24;
    while (v7 != v10)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(a1 + 8 * v10 + 32);
      }
      uint64_t v12 = v11;
      char v22 = v11;
      sub_100193A1C(&v22, a2, a3, a4, &v21, v23);
      if (v5)
      {
        swift_release();

        return (uint64_t)v8;
      }
      uint64_t v5 = 0;

      uint64_t v13 = v23[0];
      uint64_t v14 = v23[1];
      uint64_t v24 = v8;
      unint64_t v16 = v8[2];
      unint64_t v15 = v8[3];
      if (v16 >= v15 >> 1)
      {
        sub_10011144C(v15 > 1, v16 + 1, 1);
        uint64_t v8 = v24;
      }
      ++v10;
      _OWORD v8[2] = v16 + 1;
      char v17 = &v8[2 * v16];
      v17[4] = v13;
      v17[5] = v14;
      if (v7 == v10) {
        return (uint64_t)v8;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1001BFBB8(uint64_t a1, void (*a2)(uint64_t, uint64_t, _OWORD *))
{
  uint64_t v3 = v2;
  uint64_t v24 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v31 = v3;
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  int64_t v28 = v8;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v12 << 6))
  {
    unint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    unint64_t v18 = (_OWORD *)(*(void *)(a1 + 56) + 96 * i);
    long long v19 = v18[1];
    v29[0] = *v18;
    v29[1] = v19;
    long long v21 = v18[3];
    long long v20 = v18[4];
    long long v22 = v18[2];
    *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v18 + 73);
    void v29[3] = v21;
    *(_OWORD *)uint64_t v30 = v20;
    v29[2] = v22;
    swift_bridgeObjectRetain();
    sub_1001D7CB8((uint64_t)v29);
    uint64_t v23 = v31;
    a2(v16, v17, v29);
    uint64_t v3 = v23;
    if (v23)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v8 = v28;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v11 = __OFADD__(v8, 1);
    int64_t v12 = v8 + 1;
    if (v11)
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v25) {
      return swift_release();
    }
    unint64_t v13 = *(void *)(v24 + 8 * v12);
    if (!v13) {
      break;
    }
LABEL_17:
    uint64_t v31 = v3;
    unint64_t v6 = (v13 - 1) & v13;
    int64_t v28 = v12;
  }
  int64_t v14 = v12 + 1;
  if (v12 + 1 >= v25) {
    return swift_release();
  }
  unint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v12 + 2;
  if (v12 + 2 >= v25) {
    return swift_release();
  }
  unint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v12 + 3;
  if (v12 + 3 >= v25) {
    return swift_release();
  }
  unint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v12 + 4;
  if (v12 + 4 >= v25) {
    return swift_release();
  }
  unint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13)
  {
LABEL_16:
    int64_t v12 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v12 >= v25) {
      return swift_release();
    }
    unint64_t v13 = *(void *)(v24 + 8 * v12);
    ++v14;
    if (v13) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1001BFE50(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, void **a5, uint64_t *a6)
{
  uint64_t v30 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v45 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v45 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void *)(v45 + 56) + 96 * i;
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v23 = *(void *)(v20 + 16);
    uint64_t v24 = *(void *)(v20 + 40);
    char v25 = *(unsigned char *)(v20 + 48);
    uint64_t v26 = *(void *)(v20 + 56);
    uint64_t v27 = *(void *)(v20 + 80);
    char v28 = *(unsigned char *)(v20 + 88);
    v37[0] = v18;
    v37[1] = v19;
    v37[2] = v21;
    v37[3] = v22;
    v37[4] = v23;
    long long v38 = *(_OWORD *)(v20 + 24);
    uint64_t v39 = v24;
    char v40 = v25;
    uint64_t v41 = v26;
    long long v42 = *(_OWORD *)(v20 + 64);
    uint64_t v43 = v27;
    char v44 = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10019C41C((uint64_t)v37, a2, a3, a4, a5, a6);
    if (v6)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v31) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v30 + 8 * v11);
    if (!v15)
    {
      int64_t v16 = v11 + 1;
      if (v11 + 1 >= v31) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v30 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 2;
      if (v11 + 2 >= v31) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v30 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 3;
      if (v11 + 3 >= v31) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v30 + 8 * v16);
      if (v15)
      {
LABEL_14:
        int64_t v11 = v16;
        goto LABEL_15;
      }
      int64_t v29 = v11 + 4;
      if (v11 + 4 >= v31) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v30 + 8 * v29);
      v11 += 4;
      if (!v15) {
        break;
      }
    }
LABEL_15:
    unint64_t v9 = (v15 - 1) & v15;
  }
  while (1)
  {
    int64_t v11 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v11 >= v31) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v30 + 8 * v11);
    ++v29;
    if (v15) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1001C0118(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v6 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_retain();
    a2(v18, v19, v20);
    if (v3)
    {
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v22) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    if (!v15)
    {
      int64_t v16 = v11 + 1;
      if (v11 + 1 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 2;
      if (v11 + 2 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 3;
      if (v11 + 3 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v16);
      if (v15)
      {
LABEL_14:
        int64_t v11 = v16;
        goto LABEL_15;
      }
      int64_t v21 = v11 + 4;
      if (v11 + 4 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v21);
      v11 += 4;
      if (!v15) {
        break;
      }
    }
LABEL_15:
    unint64_t v9 = (v15 - 1) & v15;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v22) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v21;
    if (v15) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1001C0300(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v6 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v18, v19, v20);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v22) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    if (!v15)
    {
      int64_t v16 = v11 + 1;
      if (v11 + 1 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 2;
      if (v11 + 2 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 3;
      if (v11 + 3 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v16);
      if (v15)
      {
LABEL_14:
        int64_t v11 = v16;
        goto LABEL_15;
      }
      int64_t v21 = v11 + 4;
      if (v11 + 4 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v21);
      v11 += 4;
      if (!v15) {
        break;
      }
    }
LABEL_15:
    unint64_t v9 = (v15 - 1) & v15;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v22) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v21;
    if (v15) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1001C04E8(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = a2;
    unint64_t v4 = 0;
    uint64_t v28 = result + 32;
    uint64_t v5 = a2 + 56;
    uint64_t v26 = _swiftEmptyArrayStorage;
    unint64_t v29 = *(void *)(result + 16);
    while (1)
    {
      if (v4 <= v2) {
        unint64_t v6 = v2;
      }
      else {
        unint64_t v6 = v4;
      }
      unint64_t v7 = v4;
      unint64_t v27 = v6;
      while (1)
      {
        if (v7 == v6)
        {
          __break(1u);
          return result;
        }
        unint64_t v4 = v7 + 1;
        if (*(void *)(v3 + 16)) {
          break;
        }
LABEL_8:
        unint64_t v7 = v4;
        if (v4 == v2) {
          return (uint64_t)v26;
        }
      }
      uint64_t v8 = v28 + 40 * v7;
      uint64_t v9 = *(void *)v8;
      long long v33 = *(_OWORD *)(v8 + 8);
      uint64_t v10 = *(void *)(v8 + 32);
      uint64_t v30 = *(void *)(v8 + 24);
      Hasher.init(_seed:)();
      uint64_t v32 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v11 = Hasher._finalize()();
      uint64_t v12 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v13 = v11 & ~v12;
      if (((*(void *)(v5 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        goto LABEL_7;
      }
      uint64_t v14 = *(void *)(a2 + 48);
      unint64_t v15 = (void *)(v14 + 16 * v13);
      BOOL v16 = *v15 == v9 && v15[1] == (void)v33;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_25:
      swift_bridgeObjectRelease();
      int64_t v22 = v26;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1001115C0(0, v26[2] + 1, 1);
        int64_t v22 = v26;
      }
      unint64_t v2 = v29;
      unint64_t v24 = v22[2];
      unint64_t v23 = v22[3];
      if (v24 >= v23 >> 1)
      {
        uint64_t result = sub_1001115C0(v23 > 1, v24 + 1, 1);
        int64_t v22 = v26;
      }
      v22[2] = v24 + 1;
      uint64_t v26 = v22;
      char v25 = &v22[5 * v24];
      v25[4] = v9;
      *(_OWORD *)(v25 + 5) = v33;
      uint64_t v3 = a2;
      v25[7] = v30;
      v25[8] = v32;
      if (v4 == v29) {
        return (uint64_t)v26;
      }
    }
    uint64_t v17 = ~v12;
    for (unint64_t i = v13 + 1; ; unint64_t i = v19 + 1)
    {
      uint64_t v19 = i & v17;
      if (((*(void *)(v5 + (((i & v17) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v17)) & 1) == 0) {
        break;
      }
      uint64_t v20 = (void *)(v14 + 16 * v19);
      BOOL v21 = *v20 == v9 && v20[1] == (void)v33;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_25;
      }
    }
LABEL_7:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v3 = a2;
    unint64_t v2 = v29;
    unint64_t v6 = v27;
    goto LABEL_8;
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_1001C0788(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 64);
  int64_t v46 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v41 = a3 + 9;
  uint64_t v42 = v5;
  uint64_t v43 = a3;
  uint64_t v44 = v4;
  while (1)
  {
    while (1)
    {
      do
      {
        while (v8)
        {
          unint64_t v11 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
          unint64_t v12 = v11 | (v9 << 6);
          uint64_t v13 = a3[2];
          if (v13) {
            goto LABEL_21;
          }
        }
        BOOL v14 = __OFADD__(v9++, 1);
        if (v14) {
          goto LABEL_59;
        }
        if (v9 >= v46)
        {
LABEL_57:
          swift_release();
          return (uint64_t)a1;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v9);
        if (!v15)
        {
          int64_t v16 = v9 + 1;
          if (v9 + 1 >= v46) {
            goto LABEL_57;
          }
          unint64_t v15 = *(void *)(v5 + 8 * v16);
          if (v15) {
            goto LABEL_19;
          }
          int64_t v16 = v9 + 2;
          if (v9 + 2 >= v46) {
            goto LABEL_57;
          }
          unint64_t v15 = *(void *)(v5 + 8 * v16);
          if (v15) {
            goto LABEL_19;
          }
          int64_t v16 = v9 + 3;
          if (v9 + 3 >= v46) {
            goto LABEL_57;
          }
          unint64_t v15 = *(void *)(v5 + 8 * v16);
          if (v15)
          {
LABEL_19:
            int64_t v9 = v16;
          }
          else
          {
            int64_t v39 = v9 + 4;
            if (v9 + 4 >= v46) {
              goto LABEL_57;
            }
            unint64_t v15 = *(void *)(v5 + 8 * v39);
            for (v9 += 4; !v15; ++v39)
            {
              int64_t v9 = v39 + 1;
              if (__OFADD__(v39, 1)) {
                goto LABEL_62;
              }
              if (v9 >= v46) {
                goto LABEL_57;
              }
              unint64_t v15 = *(void *)(v5 + 8 * v9);
            }
          }
        }
        unint64_t v8 = (v15 - 1) & v15;
        unint64_t v12 = __clz(__rbit64(v15)) + (v9 << 6);
        uint64_t v13 = a3[2];
      }
      while (!v13);
LABEL_21:
      uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      uint64_t v20 = *(void *)(*(void *)(v4 + 56) + 8 * v12);
      BOOL v21 = a3[4] == *v17 && a3[5] == v18;
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_42:
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v29 = sub_100590548(v19, v18);
      uint64_t v30 = a1[2];
      BOOL v31 = (v28 & 1) == 0;
      uint64_t v32 = v30 + v31;
      if (__OFADD__(v30, v31)) {
        goto LABEL_60;
      }
      char v33 = v28;
      if (a1[3] >= v32)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_10016BB58();
        }
      }
      else
      {
        sub_100166DCC(v32, isUniquelyReferenced_nonNull_native);
        unint64_t v34 = sub_100590548(v19, v18);
        if ((v33 & 1) != (v35 & 1)) {
          goto LABEL_63;
        }
        unint64_t v29 = v34;
      }
      if (v33)
      {
        uint64_t v10 = a1[7];
        swift_release();
        *(void *)(v10 + 8 * v29) = v20;
      }
      else
      {
        a1[(v29 >> 6) + 8] |= 1 << v29;
        uint64_t v36 = (uint64_t *)(a1[6] + 16 * v29);
        *uint64_t v36 = v19;
        v36[1] = v18;
        *(void *)(a1[7] + 8 * v29) = v20;
        uint64_t v37 = a1[2];
        BOOL v14 = __OFADD__(v37, 1);
        uint64_t v38 = v37 + 1;
        if (v14) {
          goto LABEL_61;
        }
        a1[2] = v38;
        swift_bridgeObjectRetain();
      }
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
LABEL_6:
      a3 = v43;
      uint64_t v4 = v44;
      uint64_t v5 = v42;
    }
    if (v13 != 1)
    {
      BOOL v22 = a3[6] == v19 && a3[7] == v18;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_42;
      }
      if (v13 != 2) {
        break;
      }
    }
  }
  unint64_t v23 = v41;
  uint64_t v24 = 2;
  while (1)
  {
    uint64_t v25 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    BOOL v26 = *(v23 - 1) == v19 && *v23 == v18;
    if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_42;
    }
    v23 += 2;
    ++v24;
    if (v25 == v13) {
      goto LABEL_6;
    }
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C0B28()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  v0[5] = swift_task_alloc();
  return _swift_task_switch(sub_1001C0BF4, 0, 0);
}

uint64_t sub_1001C0BF4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Asked to delete everything due to self-heal", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[6] = v7;
  v0[7] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  if (qword_10071F5D0 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100760868;
  v0[8] = qword_100760868;
  unint64_t v11 = (char *)&dword_100732E60 + dword_100732E60;
  swift_retain();
  int64_t v9 = (void *)swift_task_alloc();
  v0[9] = v9;
  *int64_t v9 = v0;
  v9[1] = sub_1001C0D9C;
  return ((uint64_t (*)(_UNKNOWN **, uint64_t))v11)(&off_1006F1AB0, v8);
}

uint64_t sub_1001C0D9C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1001C0EB4, 0, 0);
}

void sub_1001C0EB4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done deleting everything due to self-heal; terminating process",
      v3,
      2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[6];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[2];

  v4(v5, v6);
  exit(0);
}

unint64_t sub_1001C0F78(unint64_t result)
{
  if (result >= 0xA) {
    return 10;
  }
  return result;
}

void sub_1001C0F88()
{
  uint64_t v0 = type metadata accessor for DIPError.Code();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)NSMutableData) initWithLength:32];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 length];
    id v7 = v5;
    if (SecRandomCopyBytes(kSecRandomDefault, (size_t)v6, [v7 mutableBytes]))
    {
      (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DIPError.Code.unexpectedDeviceState(_:), v0);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    else
    {
      id v8 = v7;
      uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;

      Data.base16EncodedString()();
      sub_10000C5F4(v9, v11);
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DIPError.Code.unexpectedDeviceState(_:), v0);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

id sub_1001C1328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v71 = a2;
  uint64_t v72 = a3;
  uint64_t v70 = a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  __chkstk_darwin(v4);
  uint64_t v69 = (char *)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPBackoffStrategy();
  uint64_t v66 = *(void *)(v6 - 8);
  uint64_t v67 = v6;
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v75 = v8;
  uint64_t v76 = v9;
  __chkstk_darwin(v8);
  unint64_t v64 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  BOOL v14 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t *)&v3[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation];
  uint64_t v20 = v3;
  UUID.init()();
  uint64_t v21 = UUID.uuidString.getter();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *uint64_t v19 = v21;
  v19[1] = v23;
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService] = 0;
  uint64_t v68 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__connection];
  swift_unknownObjectWeakInit();
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context] = 0;
  uint64_t v24 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages] = _swiftEmptyArrayStorage;
  uint64_t v25 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes;
  *(void *)&v20[v25] = sub_10015DB5C((uint64_t)_swiftEmptyArrayStorage);
  BOOL v26 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey];
  *((void *)v26 + 4) = 0;
  *(_OWORD *)BOOL v26 = 0u;
  *((_OWORD *)v26 + 1) = 0u;
  unint64_t v27 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey];
  *(_OWORD *)unint64_t v27 = 0u;
  *((_OWORD *)v27 + 1) = 0u;
  *((void *)v27 + 4) = 0;
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoECIESSession] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim] = 0;
  v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state] = 0;
  uint64_t v28 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__commonDispatchGroup;
  *(void *)&v20[v28] = dispatch_group_create();
  uint64_t v29 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__baaDispatchGroup;
  *(void *)&v20[v29] = dispatch_group_create();
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__errorInInit] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper] = 0;
  uint64_t v30 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKeyCreationDispatchSignal;
  *(void *)&v20[v30] = dispatch_group_create();
  uint64_t v60 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__baa_queue;
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  static DispatchQoS.unspecified.getter();
  uint64_t v78 = _swiftEmptyArrayStorage;
  uint64_t v59[3] = sub_1001C6628((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v59[2] = sub_100007764((uint64_t *)&unk_100726420);
  v59[4] = sub_1000B6120((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  v59[1] = v11;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v31 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v32 = v75;
  uint64_t v33 = v76 + 104;
  unint64_t v34 = *(void (**)(char *, void, uint64_t))(v76 + 104);
  char v35 = v64;
  unsigned int v63 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v34(v64, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v75);
  int v62 = v34;
  uint64_t v76 = v33;
  uint64_t v36 = v35;
  *(void *)&v20[v60] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v60 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__deviceInfoQueue;
  uint64_t v61 = v14;
  static DispatchQoS.unspecified.getter();
  uint64_t v78 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v34(v35, v31, v32);
  *(void *)&v20[v60] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v37 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__deviceInfoSemaphore;
  *(void *)&v20[v37] = dispatch_semaphore_create(0);
  uint64_t v38 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData];
  *((_OWORD *)v38 + 1) = 0u;
  *((_OWORD *)v38 + 2) = 0u;
  *(_OWORD *)uint64_t v38 = 0u;
  *((void *)v38 + 6) = 0;
  *((void *)v38 + 7) = 1;
  uint64_t v39 = enum case for DIPBackoffStrategy.noBackoff(_:);
  char v40 = v65;
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 104);
  uint64_t v42 = v67;
  v41(v65, enum case for DIPBackoffStrategy.noBackoff(_:), v67);
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)();
  v41(v40, v39, v42);
  uint64_t v43 = v69;
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)();
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager] = 0;
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator] = 0;
  v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius] = 0;
  uint64_t v44 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory];
  *(_OWORD *)uint64_t v44 = 0u;
  *((_OWORD *)v44 + 1) = 0u;
  *((_OWORD *)v44 + 2) = 0u;
  *((_OWORD *)v44 + 3) = 0u;
  *((_OWORD *)v44 + 4) = 0u;
  uint64_t v45 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__tiberiusSetupQueue;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  v62(v36, v63, v75);
  *(void *)&v20[v45] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v46 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__tiberiusSetupDispatchGroup;
  *(void *)&v20[v46] = dispatch_group_create();
  *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__pregeneratedAssessments] = _swiftEmptyArrayStorage;
  uint64_t v47 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile];
  uint64_t v48 = type metadata accessor for AugmentedProfile(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
  unint64_t v49 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate];
  uint64_t v50 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 1, 1, v50);
  uint64_t v51 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__keystoreDict;
  *(void *)&v20[v51] = sub_10015CDA0((uint64_t)_swiftEmptyArrayStorage);
  v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isSEAvailable] = 2;
  swift_unknownObjectWeakAssign();
  uint64_t v52 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
  uint64_t v53 = v72;
  *(void *)uint64_t v52 = v71;
  *((void *)v52 + 1) = v53;
  defaultLogger()();
  char v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Creating IDVSessionProxy", v56, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v73 + 8))(v43, v74);
  id result = (id)os_transaction_create();
  if (result)
  {
    *(void *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__jetsamTransaction] = result;

    uint64_t v58 = (objc_class *)type metadata accessor for IDVSessionProxy(0);
    v77.receiver = v20;
    v77.super_class = v58;
    return [super init];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C1CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DIPError();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  BOOL v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.internalError(_:), v7);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v15 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
  v15(v16, v14, v11);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v23);
  swift_errorRelease();
  uint64_t v17 = swift_allocError();
  v15(v18, v14, v11);
  *(void *)(v24 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__errorInInit) = v17;
  swift_errorRelease();
  uint64_t v19 = (void *)swift_allocError();
  v15(v20, v14, v11);
  sub_100566008(v19);
  swift_errorRelease();
  uint64_t v21 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void *))(v25 + 16))(v25, v21);

  swift_errorRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_1001C209C(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v154 = a2;
  uint64_t v140 = type metadata accessor for WarmerUpper();
  __chkstk_darwin(v140);
  uint64_t v141 = (uint64_t)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v155 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v144 = (uint64_t)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = type metadata accessor for DIPError.Code();
  uint64_t v149 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  uint64_t v150 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v9 - 8);
  uint64_t v152 = type metadata accessor for DIPSignpost();
  uint64_t v151 = *(void *)(v152 - 8);
  uint64_t v10 = __chkstk_darwin(v152);
  uint64_t v12 = (char *)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v143 = (char *)&v132 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v145 = (char *)&v132 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  long long v157 = (char *)&v132 - v18;
  __chkstk_darwin(v17);
  uint64_t v156 = (char *)&v132 - v19;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v136 = (char *)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v137 = (char *)&v132 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v139 = (char *)&v132 - v27;
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v132 - v28;
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  defaultLogger()();
  id v30 = a1;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v153 = a3;
  uint64_t v147 = v20;
  uint64_t v146 = v21;
  uint64_t v138 = v12;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v142 = (void (*)(char *, uint64_t))swift_slowAlloc();
    *(void *)&long long v159 = v142;
    *(_DWORD *)uint64_t v34 = 136446466;
    uint64_t v135 = (void (*)(void))(v34 + 4);
    id v35 = [v30 serviceName];
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    v158[0] = sub_100110D58(v36, v38, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v34 + 12) = 2050;
    id v39 = [v30 invocationReason];

    v158[0] = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v31, v32, "coreidvd configure for service %{public}s, reason %{public}lu", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v142 = *(void (**)(char *, uint64_t))(v146 + 8);
    v142(v29, v147);
  }
  else
  {

    uint64_t v142 = *(void (**)(char *, uint64_t))(v21 + 8);
    v142(v29, v20);
  }
  v40._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v40._object = (void *)0x800000010063FDE0;
  v41._uint64_t countAndFlagsBits = 0x6635626635333731;
  v41._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v41, v40);
  static DaemonSignposts.configureTotal.getter();
  DIPSignpost.init(_:)();
  static DaemonSignposts.configureTiberiusBeforeConfigure.getter();
  DIPSignpost.init(_:)();
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v42 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v43 = (*(unsigned __int8 *)(*(void *)v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v42 + 80);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_100610730;
  unint64_t v45 = v44 + v43 + v42[14];
  uint64_t v47 = v155 + 104;
  uint64_t v46 = *(void (**)(void))(v155 + 104);
  v46();
  uint64_t v48 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state;
  uint64_t v49 = v6;
  uint64_t v50 = v154;
  char v51 = *(unsigned char *)(v154 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state);
  *(void *)(v45 + 24) = &type metadata for DIPState;
  *(unsigned char *)unint64_t v45 = v51;
  unint64_t v161 = sub_10015C504(v44);
  if (*(unsigned char *)(v50 + v48))
  {
    (*(void (**)(char *, void, uint64_t))(v149 + 104))(v150, enum case for DIPError.Code.invalidCallSequence(_:), v148);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v52 = swift_allocError();
LABEL_11:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v61 = v153;
    _Block_copy(v153);
    sub_1001C1CA8(v52, (uint64_t)&v161, v50, (uint64_t)v61);
    _Block_release(v61);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v62 = v152;
    uint64_t v63 = v151;
    unint64_t v64 = v156;
    uint64_t v65 = v157;
    goto LABEL_12;
  }
  uint64_t v135 = v46;
  uint64_t v155 = v47;
  uint64_t v134 = v49;
  if ((sub_100190A8C() & 1) == 0)
  {
    (*(void (**)(char *, void, uint64_t))(v149 + 104))(v150, enum case for DIPError.Code.missingEntitlement(_:), v148);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v52 = swift_allocError();
    goto LABEL_11;
  }
  uint64_t v53 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context;
  char v54 = *(void **)(v50 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  *(void *)(v50 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context) = v30;
  id v55 = v30;

  id v133 = v55;
  id v56 = [v55 serviceName];
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v58;

  if (v57 == 0x6E6F7275626974 && v59 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v60 = v135;
LABEL_14:
    uint64_t v68 = v154;
    *(unsigned char *)(v154 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius) = 1;
    goto LABEL_15;
  }
  char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v60 = v135;
  if (v67) {
    goto LABEL_14;
  }
  uint64_t v68 = v154;
  uint64_t v76 = *(void **)(v154 + v53);
  if (!v76) {
    goto LABEL_24;
  }
  id v77 = [v76 httpHeaders];
  if (v77)
  {
    uint64_t v78 = v77;
    uint64_t v79 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v79 + 16) && (unint64_t v82 = sub_100590548(v80, v81), (v83 & 1) != 0))
    {
      char v84 = (uint64_t *)(*(void *)(v79 + 56) + 16 * v82);
      uint64_t v86 = *v84;
      uint64_t v85 = v84[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v68 = v154;
      if ((sub_100190A8C() & 1) != 0
        || (id v87 = [self standardUserDefaults],
            v88._uint64_t countAndFlagsBits = 0xD00000000000001ALL,
            v88._object = (void *)0x800000010063F2B0,
            Swift::Bool v89 = NSUserDefaults.internalBool(forKey:)(v88),
            v87,
            v89))
      {
        uint64_t v90 = (void *)(v68 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
        *uint64_t v90 = v86;
        v90[1] = v85;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v68 = v154;
    }
    uint64_t v60 = v135;
  }
LABEL_15:
  uint64_t v69 = *(void **)(v68 + v53);
  if (!v69)
  {
LABEL_24:
    (*(void (**)(char *, void, uint64_t))(v149 + 104))(v150, enum case for DIPError.Code.missingContextField(_:), v148);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v91 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v61 = v153;
    _Block_copy(v153);
    sub_1001C1CA8(v91, (uint64_t)&v161, v68, (uint64_t)v61);
    _Block_release(v61);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v62 = v152;
    uint64_t v63 = v151;
    uint64_t v65 = v157;
    unint64_t v64 = v156;
    goto LABEL_12;
  }
  id v70 = [v69 serviceName];
  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v73 = v72;

  uint64_t v74 = v144;
  ((void (*)(uint64_t, void, uint64_t))v60)(v144, enum case for DIPError.PropertyKey.inoProviderID(_:), v134);
  uint64_t v160 = &type metadata for String;
  *(void *)&long long v159 = v71;
  *((void *)&v159 + 1) = v73;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_10055ED78((uint64_t)&v159, v74);
  swift_endAccess();
  static DaemonSignposts.configureVerifyAccountStatus.getter();
  DIPSignpost.init(_:)();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(&v159, (uint64_t)v160);
  uint64_t v75 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius;
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  uint64_t v144 = v71;
  uint64_t v155 = v73;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v159);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  BOOL v92 = sub_1001BE4C0();
  uint64_t v61 = v153;
  uint64_t v65 = v157;
  unint64_t v64 = v156;
  if (!v92)
  {
    if (qword_10071F4D0 != -1) {
      swift_once();
    }
    swift_retain();
    sub_100200634();
    swift_release();
  }
  static DaemonSignposts.configureLoadConfig.getter();
  DIPSignpost.init(_:)();
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v93 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v94 = (uint64_t)&v93[4];
  uint64_t v95 = v93 + 52;
  os_unfair_lock_lock(v93 + 52);
  sub_1000262B4(v94, &v159);
  os_unfair_lock_unlock(v95);
  sub_100030A10((uint64_t)&v159, (uint64_t)v158);
  sub_1000262D0((uint64_t)&v159);
  sub_10000C728(v158, v158[3]);
  sub_100140E7C();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v158);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  id v96 = [v133 httpHeaders];
  if (v96)
  {
    uint64_t v97 = v96;
    uint64_t v98 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v98 + 16) && (unint64_t v101 = sub_100590548(v99, v100), (v102 & 1) != 0))
    {
      uint64_t v103 = (uint64_t *)(*(void *)(v98 + 56) + 16 * v101);
      uint64_t v105 = *v103;
      uint64_t v104 = v103[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v106 = (void *)(v154 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation);
      void *v106 = v105;
      v106[1] = v104;
      uint64_t v61 = v153;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v107 = v154;
  uint64_t v108 = sub_1001BB560();
  unint64_t v109 = *(void **)(v107 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService);
  *(void *)(v107 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService) = v108;

  id v110 = sub_1001BB198();
  uint64_t v111 = *(void **)(v107 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService);
  *(void *)(v107 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService) = v110;

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  if (sub_1001BE4C0())
  {
    swift_bridgeObjectRelease();
    uint64_t v112 = v139;
    defaultLogger()();
    uint64_t v113 = Logger.logObject.getter();
    os_log_type_t v114 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v113, v114))
    {
      uint64_t v115 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v115 = 0;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v113, v114, "Performing Tiberius background warmup", v115, 2u);
      swift_slowDealloc();

      v142(v112, v147);
    }
    else
    {

      v142(v112, v147);
      swift_bridgeObjectRelease();
    }
    uint64_t v62 = v152;
    uint64_t v107 = v154;
    uint64_t v63 = v151;
    if (qword_10071F550 != -1) {
      swift_once();
    }
    uint64_t v121 = sub_1000443D4(v140, (uint64_t)qword_100760768);
    swift_beginAccess();
    uint64_t v122 = v141;
    sub_1001D95B4(v121, v141, (uint64_t (*)(void))type metadata accessor for WarmerUpper);
    sub_10041715C();
    sub_1001D961C(v122, (uint64_t (*)(void))type metadata accessor for WarmerUpper);
  }
  else if (*(unsigned char *)(v107 + v75))
  {
    swift_bridgeObjectRelease();
    static DaemonSignposts.configureTiberiusCofigure.getter();
    int v116 = v138;
    DIPSignpost.init(_:)();
    unint64_t v117 = v137;
    defaultLogger()();
    uint64_t v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v120 = 0;
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "Performing Tiberius configure", v120, 2u);
      swift_slowDealloc();
    }

    v142(v117, v147);
    sub_10018D01C();
    swift_bridgeObjectRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t v63 = v151;
    uint64_t v62 = v152;
    (*(void (**)(char *, uint64_t))(v151 + 8))(v116, v152);
  }
  else
  {
    long long v128 = v136;
    defaultLogger()();
    uint64_t v129 = Logger.logObject.getter();
    os_log_type_t v130 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v129, v130))
    {
      uint64_t v131 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v131 = 0;
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "Performing standard configure", v131, 2u);
      swift_slowDealloc();
    }

    v142(v128, v147);
    sub_100189E8C(v144, v155);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v62 = v152;
    uint64_t v63 = v151;
  }
  (*((void (**)(const void *, void))v61 + 2))(v61, 0);
  uint64_t v123 = *(void (**)(char *, uint64_t))(v63 + 8);
  v123(v143, v62);
  v123(v145, v62);
  if (*(void *)(v107 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow))
  {
    swift_retain();
    uint64_t v124 = sub_10006BAA8();
    uint64_t v126 = v125;
    swift_release();
    v127.value._uint64_t countAndFlagsBits = v124;
    v127.value._object = v126;
    DIPSignpost.end(workflowID:isBackground:)(v127, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease();
  }
  else
  {
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  }
LABEL_12:
  uint64_t v66 = *(void (**)(char *, uint64_t))(v63 + 8);
  v66(v65, v62);
  v66(v64, v62);
  _Block_release(v61);
  _Block_release(v61);
  _Block_release(v61);
  _Block_release(v61);
  _Block_release(v61);
  _Block_release(v61);
}

uint64_t sub_1001C3B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a3;
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.internalError(_:), v6);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v14 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 16);
  v14(v15, v13, v10);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v21);
  swift_errorRelease();
  uint64_t v16 = (void *)swift_allocError();
  v14(v17, v13, v10);
  sub_100566008(v16);
  swift_errorRelease();
  uint64_t v18 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void, void *))(v22 + 16))(v22, 0, 0, v18);

  swift_errorRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1001C3F14(unint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v156 = *(void (***)(char *, void))(v4 - 8);
  long long v157 = (void *)v4;
  __chkstk_darwin(v4);
  uint64_t v155 = (char *)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Calendar.Identifier();
  uint64_t v152 = *(void *)(v6 - 8);
  uint64_t v153 = v6;
  __chkstk_darwin(v6);
  uint64_t v149 = (char *)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Calendar();
  uint64_t v150 = *(void *)(v8 - 8);
  uint64_t v151 = v8;
  __chkstk_darwin(v8);
  uint64_t v148 = (char *)&v146 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v10 - 8);
  unint64_t v161 = (char *)&v146 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v162 = *(uint64_t **)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v146 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v154 = (char *)&v146 - v16;
  uint64_t v164 = (uint8_t *)type metadata accessor for DIPError.Code();
  uint64_t v17 = *((void *)v164 - 1);
  __chkstk_darwin(v164);
  uint64_t v165 = (char *)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (void *)type metadata accessor for Logger();
  unint64_t v163 = *(v19 - 1);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v147 = (char *)&v146 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v146 - v22;
  unsigned int v24 = [a2 optional];
  id v159 = v19;
  if (v24)
  {
    id v25 = [(id)a1 getCurrentValue];
    swift_unknownObjectRelease();
    if (!v25)
    {
      defaultLogger()();
      uint64_t v81 = a2;
      unint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v82, v83))
      {
        char v84 = (uint8_t *)swift_slowAlloc();
        uint64_t v165 = (char *)swift_slowAlloc();
        uint64_t v168 = v165;
        *(_DWORD *)char v84 = 136446210;
        uint64_t v164 = v84 + 4;
        id v85 = [v81 identifier];
        uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v88 = v87;

        uint64_t v167 = sub_100110D58(v86, v88, (uint64_t *)&v168);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "optional attribute %{public}s not set", v84, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, id))(v163 + 8))(v23, v159);
      }
      else
      {

        (*(void (**)(char *, void *))(v163 + 8))(v23, v19);
      }
      return 0;
    }
  }
  uint64_t v146 = v12;
  uint64_t v26 = a2;
  uint64_t v158 = v17;
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v27 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v28 = (*(unsigned __int8 *)(*(void *)v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v27 + 80);
  uint64_t v29 = (_OWORD *)swift_allocObject();
  long long v160 = xmmword_100610730;
  v29[1] = xmmword_100610730;
  id v30 = (char *)v29 + v28;
  uint64_t v31 = (uint64_t *)&v30[v27[14]];
  uint64_t v32 = enum case for DIPError.PropertyKey.attributeID(_:);
  uint64_t v33 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v30, v32, v33);
  id v34 = [(id)a1 identifier];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;

  v31[3] = (uint64_t)&type metadata for String;
  uint64_t *v31 = v35;
  v31[1] = v37;
  unint64_t v38 = (uint64_t *)sub_10015C504((uint64_t)v29);
  self;
  uint64_t v39 = swift_dynamicCastObjCClass();
  if (v39)
  {
    Swift::String v40 = (void *)v39;
    id v41 = (id)a1;
    uint64_t v42 = v26;
    if (![v26 optional]) {
      goto LABEL_9;
    }
    id v43 = [v40 getCurrentValue];
    if (!v43) {
      goto LABEL_9;
    }
    uint64_t v44 = v43;
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    a1 = v46;

    swift_bridgeObjectRelease();
    uint64_t v47 = HIBYTE(a1) & 0xF;
    if ((a1 & 0x2000000000000000) == 0) {
      uint64_t v47 = v45 & 0xFFFFFFFFFFFFLL;
    }
    if (!v47)
    {
      swift_bridgeObjectRelease();
      uint64_t v103 = v147;
      defaultLogger()();
      id v104 = v42;
      uint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v105, v106))
      {
        uint64_t v107 = (uint8_t *)swift_slowAlloc();
        uint64_t v165 = (char *)swift_slowAlloc();
        uint64_t v168 = v165;
        uint64_t v164 = v107;
        *(_DWORD *)uint64_t v107 = 136446210;
        uint64_t v162 = (uint64_t *)(v107 + 4);
        id v108 = [v104 identifier];
        uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v111 = v110;

        uint64_t v167 = sub_100110D58(v109, v111, (uint64_t *)&v168);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "optional attribute %{public}s is empty", v164, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, id))(v163 + 8))(v103, v159);
    }
    else
    {
LABEL_9:
      self;
      uint64_t v48 = swift_dynamicCastObjCClass();
      if (!v48)
      {
        id v89 = [v40 submissionString];
        if (v89)
        {
          uint64_t v90 = v89;
          swift_bridgeObjectRelease();
          uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v93 = v92;

          sub_100007764(&qword_100730CD0);
          a1 = swift_allocObject();
          *(_OWORD *)(a1 + 16) = v160;
          *(void *)(a1 + 32) = v91;
          *(void *)(a1 + 40) = v93;
        }
        else
        {
          (*(void (**)(char *, void, uint8_t *))(v158 + 104))(v165, enum case for DIPError.Code.missingAttribute(_:), v164);
          type metadata accessor for DIPError();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
        }

        return a1;
      }
      uint64_t v49 = (void *)v48;
      id v50 = v41;
      swift_bridgeObjectRelease();
      id v51 = [v49 submissionString];
      if (v51)
      {
        uint64_t v52 = v51;
        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v55 = v54;

        sub_100007764(&qword_100730CD0);
        a1 = swift_allocObject();
        *(_OWORD *)(a1 + 16) = v160;
        *(void *)(a1 + 32) = v53;
        *(void *)(a1 + 40) = v55;

        return a1;
      }
    }
    return 0;
  }
  self;
  uint64_t v56 = swift_dynamicCastObjCClass();
  uint64_t v57 = v26;
  if (v56)
  {
    uint64_t v58 = (void *)v56;
    id v59 = (id)a1;
    id v60 = [v58 getCurrentValue];
    if (v60)
    {
      uint64_t v61 = v60;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      a1 = (unint64_t)v161;
      uint64_t v62 = v162;
      uint64_t v63 = (void (*)(char *, char *, uint64_t))v162[4];
      uint64_t v64 = v146;
      v63(v161, v15, v146);
      ((void (*)(unint64_t, void, uint64_t, uint64_t))v62[7])(a1, 0, 1, v64);
      if (((unsigned int (*)(unint64_t, uint64_t, uint64_t))v62[6])(a1, 1, v64) != 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v65 = v154;
        v63(v154, (char *)a1, v64);
        id v66 = [objc_allocWithZone((Class)NSDateFormatter) init];
        NSString v67 = [v57 submissionFormat];
        uint64_t v68 = v64;
        if (!v67)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v67 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [v66 setDateFormat:v67];

        uint64_t v70 = v152;
        uint64_t v69 = v153;
        uint64_t v71 = v149;
        (*(void (**)(char *, void, uint64_t))(v152 + 104))(v149, enum case for Calendar.Identifier.gregorian(_:), v153);
        uint64_t v72 = v148;
        Calendar.init(identifier:)();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v69);
        Class isa = Calendar._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v150 + 8))(v72, v151);
        [v66 setCalendar:isa];

        uint64_t v74 = v155;
        Locale.init(identifier:)();
        Class v75 = Locale._bridgeToObjectiveC()().super.isa;
        ((void (**)(char *, void *))v156)[1](v74, v157);
        [v66 setLocale:v75];

        sub_100007764(&qword_100730CD0);
        a1 = swift_allocObject();
        *(_OWORD *)(a1 + 16) = v160;
        Class v76 = Date._bridgeToObjectiveC()().super.isa;
        id v77 = [v66 stringFromDate:v76];

        uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v80 = v79;

        *(void *)(a1 + 32) = v78;
        *(void *)(a1 + 40) = v80;

        ((void (*)(char *, uint64_t))v62[1])(v65, v68);
        return a1;
      }
    }
    else
    {
      a1 = (unint64_t)v161;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v162[7])(v161, 1, 1, v146);
    }
    sub_10000C6CC(a1, &qword_1007239B0);
    (*(void (**)(char *, void, uint8_t *))(v158 + 104))(v165, enum case for DIPError.Code.missingAttribute(_:), v164);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return a1;
  }
  self;
  uint64_t v94 = swift_dynamicCastObjCClass();
  if (v94)
  {
    uint64_t v29 = (_OWORD *)v94;
    uint64_t v95 = (uint64_t)(id)a1;
    id v96 = [v29 getCurrentValue];
    if (v96)
    {
      uint64_t v97 = v96;
      sub_100025C28(0, (unint64_t *)&unk_100726910);
      unint64_t v98 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v98 >> 62))
      {
        if (*(void *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_27:
          uint64_t v99 = v57;
          id v100 = (id)v95;
          swift_bridgeObjectRetain();
          uint64_t v101 = v166;
          uint64_t v102 = sub_1001BFA20(v98, v38, v99, v29);
          if (!v101) {
            a1 = v102;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();

          return a1;
        }
        goto LABEL_84;
      }
LABEL_83:
      swift_bridgeObjectRetain();
      uint64_t v144 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v144) {
        goto LABEL_27;
      }
LABEL_84:
      swift_bridgeObjectRelease();
    }
LABEL_85:
    (*(void (**)(char *, void, uint8_t *))(v158 + 104))(v165, enum case for DIPError.Code.missingAttribute(_:), v164);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return a1;
  }
  self;
  uint64_t v112 = swift_dynamicCastObjCClass();
  if (!v112)
  {
    self;
    uint64_t v136 = swift_dynamicCastObjCClass();
    if (!v136)
    {
      self;
      if (swift_dynamicCastObjCClass())
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      else
      {
        (*(void (**)(char *, void, uint8_t *))(v158 + 104))(v165, enum case for DIPError.Code.badLogic(_:), v164);
        type metadata accessor for DIPError();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
      return a1;
    }
    unint64_t v137 = (void *)v136;
    uint64_t v95 = (uint64_t)(id)a1;
    id v138 = [v137 getCurrentValue];
    if (v138)
    {
      uint64_t v139 = v138;
      swift_bridgeObjectRelease();
      sub_100007764(&qword_100730CD0);
      a1 = swift_allocObject();
      *(_OWORD *)(a1 + 16) = v160;
      id v140 = [v139 value];
      uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v143 = v142;

      *(void *)(a1 + 32) = v141;
      *(void *)(a1 + 40) = v143;

      return a1;
    }
    goto LABEL_85;
  }
  uint64_t v113 = (void *)v112;
  uint64_t v57 = (char *)(id)a1;
  id v114 = [v113 getCurrentValue];
  if (!v114)
  {
LABEL_95:
    (*(void (**)(char *, void, uint8_t *))(v158 + 104))(v165, enum case for DIPError.Code.missingAttribute(_:), v164);
    type metadata accessor for DIPError();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    return a1;
  }
  uint64_t v95 = (uint64_t)v114;
  sub_100025C28(0, (unint64_t *)&unk_100726910);
  uint64_t v115 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v161 = (char *)v115;
  uint64_t v162 = v38;
  if (!((unint64_t)v115 >> 62))
  {
    unint64_t v98 = *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v98)
    {
LABEL_41:
      id v159 = v113;
      uint64_t v155 = v57;
      unint64_t v116 = 0;
      unint64_t v163 = v115 & 0xC000000000000001;
      *(void *)&long long v160 = DIAttributeImageEncodingPNG;
      long long v157 = (void *)DIAttributeImageEncodingJPEG;
      uint64_t v156 = (void (**)(char *, void))DIAttributeImageEncodingUnknown;
      a1 = (unint64_t)_swiftEmptyArrayStorage;
      while (v98 != v116)
      {
        if (v163) {
          id v117 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v117 = *(id *)(v115 + 8 * v116 + 32);
        }
        uint64_t v118 = v117;
        id v119 = [v117 getCurrentValue];

        if (!v119)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint8_t *))(v158 + 104))(v165, enum case for DIPError.Code.missingAttribute(_:), v164);
          type metadata accessor for DIPError();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();

          return a1;
        }
        uint64_t v57 = (char *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v121 = v120;

        if (v163) {
          uint64_t v122 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v122 = (uint64_t *)*(id *)(v115 + 8 * v116 + 32);
        }
        unint64_t v38 = v122;
        if ([v122 format])
        {
          id v123 = [v38 format];
          if (v123 == (id)1)
          {
            uint64_t v124 = (void *)v160;
          }
          else if (v123 == (id)2)
          {
            uint64_t v124 = v157;
          }
          else
          {
            uint64_t v124 = v156;
          }
          id v125 = v124;
        }
        else
        {
          id v125 = [v38 encoding];
        }
        uint64_t v126 = v125;

        uint64_t v29 = [v159 scanRequirements];
        sub_100025C28(0, (unint64_t *)&unk_10072F360);
        uint64_t v95 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v95 & 0xC000000000000001) != 0)
        {
          Swift::String_optional v127 = (void (*)(char *, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v116 >= *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_82;
          }
          Swift::String_optional v127 = (void (*)(char *, uint64_t))*(id *)(v95 + 8 * v116 + 32);
        }
        long long v128 = v127;
        swift_bridgeObjectRelease();
        uint64_t v129 = v166;
        uint64_t v130 = sub_100194280((uint64_t)v57, v121, v126, v128);
        uint64_t v166 = v129;
        if (v129)
        {

          swift_bridgeObjectRelease();
          sub_10000C5F4((uint64_t)v57, (unint64_t)v121);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return a1;
        }
        uint64_t v132 = v130;
        uint64_t v95 = v131;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          a1 = (unint64_t)sub_10010F3C4(0, *(void *)(a1 + 16) + 1, 1, (char *)a1);
        }
        unint64_t v134 = *(void *)(a1 + 16);
        unint64_t v133 = *(void *)(a1 + 24);
        uint64_t v29 = (_OWORD *)(v134 + 1);
        if (v134 >= v133 >> 1) {
          a1 = (unint64_t)sub_10010F3C4((char *)(v133 > 1), v134 + 1, 1, (char *)a1);
        }
        ++v116;
        *(void *)(a1 + 16) = v29;
        unint64_t v135 = a1 + 16 * v134;
        *(void *)(v135 + 32) = v132;
        *(void *)(v135 + 40) = v95;
        sub_10000C5F4((uint64_t)v57, (unint64_t)v121);
        uint64_t v115 = (uint64_t)v161;
        unint64_t v38 = v162;
        if (v98 == v116) {
          goto LABEL_93;
        }
      }
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    goto LABEL_94;
  }
  if (v115 < 0) {
    uint64_t v95 = v115;
  }
  else {
    uint64_t v95 = v115 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = (_OWORD *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_94:
    swift_bridgeObjectRelease();
    goto LABEL_95;
  }
  uint64_t v155 = v57;
  swift_bridgeObjectRetain();
  unint64_t v98 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v98 & 0x8000000000000000) == 0)
  {
    uint64_t v115 = (uint64_t)v161;
    unint64_t v38 = v162;
    uint64_t v57 = v155;
    if (!v98)
    {
      a1 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_93:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a1;
    }
    goto LABEL_41;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C58F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v6 = sub_100007764(&qword_1007268F8);
  __chkstk_darwin(v6 - 8);
  uint64_t v39 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_100726900);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v35 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v32 - v16;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v40 = v9;
  uint64_t v41 = a3;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v33 = v8;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc();
    id v34 = v15;
    uint64_t v38 = v11;
    v42[0] = v23;
    *(_DWORD *)uint64_t v22 = 136446210;
    swift_bridgeObjectRetain();
    long long v42[2] = sub_100110D58(a3, a4, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "perform local regex validation from pattern %{public}s", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v11 = v38;
    swift_slowDealloc();
    uint64_t v8 = v33;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  id v24 = [self standardUserDefaults];
  v25._object = (void *)0x800000010063FB30;
  v25._uint64_t countAndFlagsBits = 0xD000000000000024;
  Swift::Bool v26 = NSUserDefaults.internalBool(forKey:)(v25);

  if (v26)
  {
    char v27 = 1;
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v28 = v39;
    Regex<A>.init(_:)();
    uint64_t v29 = v40;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v28, 0, 1, v8);
    id v30 = v35;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v35, v28, v8);
    v42[0] = v36;
    v42[1] = v37;
    sub_1000B60CC();
    sub_1000B6120(&qword_100726908, &qword_100726900);
    char v27 = BidirectionalCollection<>.contains<A>(_:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v8);
  }
  return v27 & 1;
}

uint64_t _sSo16DIHttpHeaderNamea8coreidvdE8allCasesSayABGvgZ_0()
{
  sub_100007764(&qword_100726968);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100615470;
  uint64_t v1 = (void *)kDIHttpHeaderAppleAppInfo;
  uint64_t v2 = (void *)kDIHttpHeaderAppleGSToken;
  *(void *)(v0 + 32) = kDIHttpHeaderAppleAppInfo;
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = (void *)kDIHttpHeaderAppleIdentityId;
  uint64_t v4 = (void *)kDIHttpHeaderAppleRefererIdentifier;
  *(void *)(v0 + 48) = kDIHttpHeaderAppleIdentityId;
  *(void *)(v0 + 56) = v4;
  uint64_t v5 = (void *)kDIHttpHeaderAppleWebServiceSession;
  uint64_t v6 = (void *)kDIHttpHeaderAuthorization;
  *(void *)(v0 + 64) = kDIHttpHeaderAppleWebServiceSession;
  *(void *)(v0 + 72) = v6;
  uint64_t v7 = (void *)kDIHttpHeaderSEID;
  uint64_t v8 = (void *)kDIHttpHeaderConversationID;
  *(void *)(v0 + 80) = kDIHttpHeaderSEID;
  *(void *)(v0 + 88) = v8;
  uint64_t v9 = (void *)kDIHttpHeaderDIPGSToken;
  uint64_t v10 = (void *)kDIHttpHeaderXRequestID;
  *(void *)(v0 + 96) = kDIHttpHeaderDIPGSToken;
  *(void *)(v0 + 104) = v10;
  id v11 = v1;
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  id v15 = v5;
  id v16 = v6;
  id v17 = v7;
  id v18 = v8;
  id v19 = v9;
  id v20 = v10;
  return v0;
}

uint64_t sub_1001C600C()
{
  return sub_1000B6120(&qword_100725FE0, &qword_100725FE8);
}

uint64_t sub_1001C6048()
{
  return type metadata accessor for SubmittedAttributeWrapper(0);
}

uint64_t type metadata accessor for SubmittedAttributeWrapper(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100726018);
}

void sub_1001C6070()
{
  sub_1001C6140();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1001C6140()
{
  if (!qword_100726028)
  {
    sub_100019364((uint64_t *)&unk_100726030);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100726028);
    }
  }
}

uint64_t sub_1001C619C()
{
  return type metadata accessor for IDVSessionProxy(0);
}

uint64_t type metadata accessor for IDVSessionProxy(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_1007263A0);
}

void sub_1001C61C4()
{
  type metadata accessor for DIPRetrier();
  if (v0 <= 0x3F)
  {
    sub_1001C63CC(319, (unint64_t *)&unk_1007263D0, (void (*)(uint64_t))type metadata accessor for AugmentedProfile);
    if (v1 <= 0x3F)
    {
      sub_1001C63CC(319, (unint64_t *)&qword_100724D78, (void (*)(uint64_t))&type metadata accessor for Date);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_1001C63CC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for DIPCloudContainerState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DIPState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C657CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPState()
{
  return &type metadata for DIPState;
}

unint64_t sub_1001C65B8()
{
  unint64_t result = qword_1007263E0;
  if (!qword_1007263E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007263E0);
  }
  return result;
}

const char *sub_1001C660C()
{
  return sub_100580730(*(void *)(v0 + 16));
}

uint64_t sub_1001C6628(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001C6670()
{
  sub_10000C5F4(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1001C66B0()
{
  sub_1001BA75C(*(char **)(v0 + 16), *(NSObject **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001C66BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001C66CC()
{
  return swift_release();
}

id sub_1001C66D4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10015C3CC((uint64_t)_swiftEmptyArrayStorage);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    uint64_t v36 = &type metadata for String;
    *(void *)&long long v35 = a3;
    *((void *)&v35 + 1) = a4;
    sub_1000078A8(&v35, v34);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100562C48(v34, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a6)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    uint64_t v36 = &type metadata for String;
    *(void *)&long long v35 = a5;
    *((void *)&v35 + 1) = a6;
    sub_1000078A8(&v35, v34);
    swift_bridgeObjectRetain();
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    sub_100562C48(v34, v18, v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a8)
  {
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
    uint64_t v36 = &type metadata for String;
    *(void *)&long long v35 = a7;
    *((void *)&v35 + 1) = a8;
    sub_1000078A8(&v35, v34);
    swift_bridgeObjectRetain();
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    sub_100562C48(v34, v22, v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2) {
    uint64_t v26 = -6;
  }
  else {
    uint64_t v26 = a1;
  }
  id v27 = objc_allocWithZone((Class)NSError);
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v30 = [v27 initWithDomain:v28 code:v26 userInfo:isa];

  return v30;
}

void *sub_1001C6950(void *a1, void *a2, uint64_t a3)
{
  uint64_t v251 = a3;
  unint64_t v263 = a2;
  uint64_t v241 = type metadata accessor for Logger();
  uint64_t v248 = *(void *)(v241 - 8);
  uint64_t v4 = __chkstk_darwin(v241);
  uint64_t v242 = (char *)&v231 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v238 = (char *)&v231 - v7;
  __chkstk_darwin(v6);
  unint64_t v9 = (unint64_t)&v231 - v8;
  uint64_t v244 = type metadata accessor for DIPError.Code();
  uint64_t v243 = *(void *)(v244 - 8);
  __chkstk_darwin(v244);
  Swift::OpaquePointer v246 = (char *)&v231 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v245 = type metadata accessor for DIPError();
  uint64_t v237 = *(void *)(v245 - 8);
  __chkstk_darwin(v245);
  uint64_t v236 = (char *)&v231 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [a1 attributes];
  unint64_t v260 = sub_100025C28(0, &qword_1007223C0);
  unint64_t isa = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = (void *)sub_10015DC80((uint64_t)_swiftEmptyArrayStorage);
  if (isa >> 62) {
    goto LABEL_117;
  }
  id v15 = *(id *)((isa & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  unint64_t v239 = v9;
  if (v15)
  {
    uint64_t v264 = isa;
    int64_t v265 = isa & 0xC000000000000001;
    uint64_t v16 = 4;
    do
    {
      uint64_t v18 = v16 - 4;
      if (v265)
      {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v20 = (uint64_t *)(v16 - 3);
        if (__OFADD__(v18, 1)) {
          goto LABEL_107;
        }
      }
      else
      {
        id v19 = *(id *)(isa + 8 * v16);
        uint64_t v20 = (uint64_t *)(v16 - 3);
        if (__OFADD__(v18, 1))
        {
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          swift_bridgeObjectRelease();
          swift_errorRelease();

LABEL_110:
          swift_bridgeObjectRelease();
LABEL_111:
          swift_bridgeObjectRelease();
          goto LABEL_176;
        }
      }
      v266 = v20;
      char v21 = (uint64_t *)v15;
      id v22 = v19;
      id v23 = [v19 identifier:v231, v232];
      id v15 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      uint64_t v26 = (uint64_t)v14;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v268 = (uint64_t *)v26;
      unint64_t v29 = sub_100590548((uint64_t)v15, v25);
      uint64_t v30 = *(void *)(v26 + 16);
      BOOL v31 = (v28 & 1) == 0;
      uint64_t v32 = v30 + v31;
      if (__OFADD__(v30, v31)) {
        goto LABEL_108;
      }
      char v33 = v28;
      if (*(void *)(v26 + 24) >= v32)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v14 = v268;
          if (v28) {
            goto LABEL_5;
          }
        }
        else
        {
          sub_10016BB70();
          uint64_t v14 = v268;
          if (v33) {
            goto LABEL_5;
          }
        }
      }
      else
      {
        sub_100166DE4(v32, isUniquelyReferenced_nonNull_native);
        unint64_t v34 = sub_100590548((uint64_t)v15, v25);
        if ((v33 & 1) != (v35 & 1)) {
          goto LABEL_186;
        }
        unint64_t v29 = v34;
        uint64_t v14 = v268;
        if (v33)
        {
LABEL_5:
          uint64_t v17 = v14[7];

          *(void *)(v17 + 8 * v29) = v22;
          goto LABEL_6;
        }
      }
      v14[(v29 >> 6) + 8] |= 1 << v29;
      uint64_t v36 = (void *)(v14[6] + 16 * v29);
      *uint64_t v36 = v15;
      v36[1] = v25;
      *(void *)(v14[7] + 8 * v29) = v22;
      uint64_t v37 = v14[2];
      BOOL v38 = __OFADD__(v37, 1);
      uint64_t v39 = v37 + 1;
      if (v38)
      {
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:

        swift_bridgeObjectRelease();
        goto LABEL_111;
      }
      v14[2] = v39;
      swift_bridgeObjectRetain();
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v16;
      id v15 = v21;
      unint64_t isa = v264;
    }
    while (v266 != v21);
  }
  swift_bridgeObjectRelease_n();
  char v270 = 0;
  id v40 = [v263 attributes];
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v41)
    {
LABEL_119:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_120;
    }
  }
  else
  {
    uint64_t v41 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v41) {
      goto LABEL_119;
    }
  }
  id v247 = 0;
  unint64_t v42 = 0;
  uint64_t v240 = &v252[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
  unint64_t v260 = v9 & 0xC000000000000001;
  uint64_t v250 = v9 & 0xFFFFFFFFFFFFFF8;
  unint64_t v253 = v9;
  unint64_t v249 = v9 + 32;
  unsigned int v269 = enum case for DIPError.PropertyKey.page(_:);
  unint64_t v235 = (void (**)(unint64_t, uint64_t))(v248 + 8);
  LODWORD(v264) = enum case for DIPError.PropertyKey.attributeID(_:);
  long long v234 = &v268;
  uint64_t v231 = DIVerificationErrorDomain;
  *((void *)&v43 + 1) = 4;
  long long v259 = xmmword_100611020;
  *(void *)&long long v43 = 136446210;
  long long v233 = v43;
  v232 = (char *)&type metadata for Any + 8;
  uint64_t v262 = (uint64_t)v14;
  uint64_t v258 = v41;
  do
  {
    if (v260)
    {
      uint64_t v44 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v42 >= *(void *)(v250 + 16))
      {
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        swift_bridgeObjectRetain_n();
        id v15 = (id)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      uint64_t v44 = (uint64_t *)*(id *)(v249 + 8 * v42);
    }
    uint64_t v45 = v44;
    BOOL v38 = __OFADD__(v42, 1);
    int64_t v46 = v42 + 1;
    if (v38) {
      goto LABEL_113;
    }
    int64_t v265 = v46;
    uint64_t v47 = sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v48 = sub_100007764((uint64_t *)&unk_100723460);
    uint64_t v49 = *(void *)(*(void *)(v48 - 8) + 72);
    uint64_t v50 = *(unsigned __int8 *)(*(void *)(v48 - 8) + 80);
    uint64_t v51 = (v50 + 32) & ~v50;
    id v257 = (id)v47;
    uint64_t v254 = v50 | 7;
    unint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = v259;
    uint64_t v256 = (uint8_t *)v51;
    unint64_t v52 = v9 + v51;
    uint64_t v53 = (void *)(v9 + v51 + *(int *)(v48 + 48));
    uint64_t v54 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v55 = *(void *)(v54 - 8);
    uint64_t v56 = *(void (**)(void))(v55 + 104);
    id v15 = (id)(v55 + 104);
    ((void (*)(unint64_t, void, uint64_t))v56)(v52, v269, v54);
    id v57 = [v263 page:v231, v232];
    v53[3] = &type metadata for Int;
    *uint64_t v53 = v57;
    uint64_t v255 = v49;
    uint64_t v58 = *(int *)(v48 + 48);
    v266 = v45;
    id v59 = (unint64_t *)(v52 + v49 + v58);
    v56();
    id v60 = [v266 identifier];
    unint64_t isa = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v62 = v61;

    uint64_t v59[3] = (unint64_t)&type metadata for String;
    *id v59 = isa;
    v59[1] = v62;
    uint64_t v63 = v266;
    unint64_t v64 = sub_10015C504(v9);
    if ([v63 isAttributeTypeLabel]
      || [v63 isAttributeTypeFooter])
    {

      swift_bridgeObjectRelease();
      uint64_t v14 = (void *)v262;
      goto LABEL_34;
    }
    id v66 = [v63 identifier];
    unint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t isa = v67;

    uint64_t v14 = (void *)v262;
    if (!*(void *)(v262 + 16) || (v68 = v9, unint64_t v9 = v262, v69 = sub_100590548(v68, isa), (v70 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      if ([v63 holdLocally])
      {
        uint64_t v96 = *(void *)(v251 + 5992);
        uint64_t v97 = *(void *)(v96 + 16);
        if (!v97)
        {
          swift_bridgeObjectRelease();
LABEL_101:
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v243 + 104))(v246, enum case for DIPError.Code.unexpectedDaemonState(_:), v244);
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          uint64_t v163 = swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          uint64_t v261 = v163;
          swift_willThrow();
          swift_errorRelease();

LABEL_176:
          sub_1001912FC(&v270, v263, v252);
          return v263;
        }
        id v257 = (id)v64;
        swift_bridgeObjectRetain_n();
        uint64_t v256 = (uint8_t *)v96;
        uint64_t v98 = v96 + 64;
        while (1)
        {
          uint64_t v100 = *(void *)(v98 - 32);
          uint64_t v99 = *(void *)(v98 - 24);
          uint64_t v101 = *(void *)(v98 - 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v102 = [v266 identifier];
          uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v105 = v104;

          if (v100 == v103 && v99 == v105)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            goto LABEL_67;
          }
          char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v107) {
            break;
          }
          v98 += 40;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!--v97) {
            goto LABEL_59;
          }
        }
        swift_bridgeObjectRelease_n();
LABEL_67:
        uint64_t v14 = (void *)v262;
        if (!v101)
        {
LABEL_59:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v63 = v266;
          goto LABEL_101;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        id v117 = v266;
        int v118 = [v266 dataNodeProof];
        id v119 = [v117 dataNodeProofGroup];
        if (v119)
        {
          uint64_t v120 = v119;
          uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v123 = v122;
        }
        else
        {
          uint64_t v121 = 0;
          uint64_t v123 = 0;
        }
        type metadata accessor for SubmittedAttributeWrapper(0);
        uint64_t v124 = swift_allocObject();
        uint64_t v125 = v261;
        sub_100187F88(v100, v99, v101, 0, 0, v118, v121, v123, 1u, 0);
        uint64_t v261 = v125;
        if (v125)
        {

          swift_errorRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_110;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v15 = v266;
        id v126 = [v266 identifier];
        uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v129 = v128;

        unint64_t isa = (unint64_t)v240;
        swift_beginAccess();
        swift_retain();
        char v130 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v267 = *(void *)isa;
        *(void *)unint64_t isa = 0x8000000000000000;
        unint64_t v9 = (unint64_t)&v267;
        sub_100562DF0(v124, v127, v129, v130);
        *(void *)unint64_t isa = v267;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();

        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        if (![v63 optional])
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v243 + 104))(v246, enum case for DIPError.Code.missingAttribute(_:), v244);
          uint64_t v164 = v256;
          uint64_t v165 = swift_allocObject();
          *(_OWORD *)(v165 + 16) = xmmword_100610730;
          uint64_t v166 = (uint64_t *)&v164[v165 + *(int *)(v48 + 48)];
          v56();
          id v167 = [v63 identifier];
          uint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v170 = v169;

          v166[3] = (uint64_t)&type metadata for String;
          *uint64_t v166 = v168;
          v166[1] = v170;
          sub_10015C504(v165);
          uint64_t v171 = v236;
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          uint64_t v172 = v245;
          swift_allocError();
          (*(void (**)(uint64_t, char *, uint64_t))(v237 + 32))(v173, v171, v172);
          uint64_t v174 = v263;
          swift_errorRelease();

          sub_1001912FC(&v270, v174, v252);
          return v263;
        }
      }
      goto LABEL_34;
    }
    id v15 = *(id *)(v14[7] + 8 * v69);
    swift_bridgeObjectRelease();
    uint64_t v71 = v261;
    uint64_t v72 = sub_1001C3F14((unint64_t)v15, (char *)v63);
    uint64_t v261 = v71;
    if (v71)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v243 + 104))(v246, enum case for DIPError.Code.internalError(_:), v244);
      swift_errorRetain();
      uint64_t v175 = v236;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v176 = v245;
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v237 + 32))(v177, v175, v176);
      Swift::OpaquePointer v178 = v263;
      swift_errorRelease();
      swift_errorRelease();

      sub_1001912FC(&v270, v178, v252);
      return v263;
    }
    uint64_t v73 = (void *)v72;
    swift_bridgeObjectRelease();
    if (v73)
    {
      [v63 setIncorrect:0];
      id v74 = [v63 clientValidationRegex];
      if (v74)
      {
        Class v75 = v74;
        id v257 = v15;
        uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v9 = v77;

        uint64_t v78 = v73[2];
        if (v78)
        {
          uint64_t v79 = v73[4];
          uint64_t v80 = v73[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v81 = sub_1001C58F4(v79, v80, v76, v9);
          swift_bridgeObjectRelease();
          if ((v81 & 1) == 0)
          {
LABEL_48:
            swift_bridgeObjectRelease();
            unint64_t v88 = v239;
            defaultLogger()();
            uint64_t v63 = v63;
            id v89 = Logger.logObject.getter();
            os_log_type_t v90 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v89, v90))
            {
              uint64_t v91 = (uint8_t *)swift_slowAlloc();
              v266 = (uint64_t *)swift_slowAlloc();
              uint64_t v268 = v266;
              *(_DWORD *)uint64_t v91 = v233;
              uint64_t v256 = v91 + 4;
              uint64_t v92 = v63;
              id v93 = [v63 identifier];
              unint64_t isa = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v95 = v94;

              uint64_t v63 = v92;
              uint64_t v267 = sub_100110D58(isa, v95, (uint64_t *)&v268);
              uint64_t v14 = (void *)v262;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v89, v90, "regex validation for %{public}s failed", v91, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*v235)(v239, v241);
            }
            else
            {

              (*v235)(v88, v241);
              swift_bridgeObjectRelease();
            }
            id v15 = v257;
            char v270 = 1;
            id v131 = [v63 codeOnError];
            if (v131)
            {
              uint64_t v132 = v131;
              uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v135 = v134;
            }
            else
            {
              uint64_t v133 = 0;
              unint64_t v135 = 0xE000000000000000;
            }
            unint64_t v9 = sub_1005D18B4(v133, v135);
            char v141 = v140;
            [v63 setIncorrect:1];
            if (v247)
            {
LABEL_90:
            }
            else
            {
              sub_10015C3CC((uint64_t)_swiftEmptyArrayStorage);
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              if (v141) {
                unint64_t v9 = -6;
              }
              id v142 = objc_allocWithZone((Class)NSError);
              NSString v143 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              unint64_t isa = (unint64_t)Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              id v247 = [v142 initWithDomain:v143 code:v9 userInfo:isa];
            }
            swift_bridgeObjectRelease();
LABEL_34:
            uint64_t v65 = v258;
            goto LABEL_35;
          }
          unint64_t isa = 0;
          unint64_t v82 = v73 + 7;
          uint64_t v83 = v78 - 1;
          while (v83 != isa)
          {
            if (++isa >= v73[2]) {
              goto LABEL_116;
            }
            char v84 = v82 + 2;
            uint64_t v85 = *(v82 - 1);
            uint64_t v86 = *v82;
            swift_bridgeObjectRetain();
            char v87 = sub_1001C58F4(v85, v86, v76, v9);
            swift_bridgeObjectRelease();
            unint64_t v82 = v84;
            uint64_t v14 = (void *)v262;
            if ((v87 & 1) == 0) {
              goto LABEL_48;
            }
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        id v15 = v257;
        if (v247) {
          goto LABEL_90;
        }
      }
      else
      {
        [v63 attributeType];
        if (v247) {
          goto LABEL_90;
        }
      }
      id v144 = [v63 identifier];
      uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v257 = (id)v146;

      LODWORD(v256) = [v63 isSensitive];
      uint64_t v147 = v63;
      int v148 = [v63 notForVerification];
      int v149 = [v147 dataNodeProof];
      id v150 = [v147 dataNodeProofGroup];
      if (v150)
      {
        uint64_t v151 = v150;
        uint64_t v152 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v154 = v153;
      }
      else
      {
        uint64_t v152 = 0;
        uint64_t v154 = 0;
      }
      type metadata accessor for SubmittedAttributeWrapper(0);
      uint64_t v155 = swift_allocObject();
      uint64_t v156 = v261;
      sub_100187F88(v145, (uint64_t)v257, (uint64_t)v73, (int)v256, v148, v149, v152, v154, 0, 0);
      uint64_t v261 = v156;
      if (v156) {
        goto LABEL_114;
      }
      swift_retain();
      uint64_t v63 = v266;
      id v157 = [v266 identifier];
      uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v160 = v159;

      unint64_t isa = (unint64_t)v240;
      swift_beginAccess();
      char v161 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v267 = *(void *)isa;
      *(void *)unint64_t isa = 0x8000000000000000;
      sub_100562DF0(v155, v158, v160, v161);
      *(void *)unint64_t isa = v267;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      unint64_t v9 = 1;
    }
    else
    {
      unint64_t v9 = (unint64_t)[v63 supportingData];
      if (v9)
      {
        uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v110 = v109;

        int v111 = [v63 dataNodeProof];
        id v112 = [v63 dataNodeProofGroup];
        if (v112)
        {
          uint64_t v113 = v112;
          uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v116 = v115;
        }
        else
        {
          uint64_t v114 = 0;
          uint64_t v116 = 0;
        }
        type metadata accessor for SubmittedAttributeWrapper(0);
        uint64_t v136 = swift_allocObject();
        swift_bridgeObjectRetain();
        uint64_t v137 = v261;
        sub_100187F88(v108, v110, (uint64_t)_swiftEmptyArrayStorage, 0, 0, v111, v114, v116, 0, 1u);
        uint64_t v261 = v137;
        if (v137) {
          goto LABEL_109;
        }
        id v138 = (uint64_t *)v240;
        swift_beginAccess();
        swift_retain();
        char v139 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v267 = *v138;
        *id v138 = 0x8000000000000000;
        sub_100562DF0(v136, v108, v110, v139);
        *id v138 = v267;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        unint64_t v9 = 1;
        uint64_t v63 = v266;
      }
    }
    [v63 setCurrentValue:[v15 getCurrentValue]];
    swift_unknownObjectRelease();

    uint64_t v65 = v258;
    if (v9) {
      swift_release();
    }
LABEL_35:
    unint64_t v42 = v265;
  }
  while (v265 != v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v247)
  {
    id v162 = v263;
    sub_1001912FC(&v270, v162, v252);
    return v263;
  }
LABEL_120:
  id v179 = [v263 serverValidationGroup:v231, v232];
  if (!v179)
  {
LABEL_179:
    defaultLogger()();
    uint64_t v226 = Logger.logObject.getter();
    os_log_type_t v227 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v226, v227))
    {
      uint64_t v228 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v228 = 0;
      _os_log_impl((void *)&_mh_execute_header, v226, v227, "Finished input validation for a page", v228, 2u);
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v248 + 8))(v242, v241);
    id v229 = v263;
    sub_1001912FC(&v270, v229, v252);
    return v263;
  }
  uint64_t v180 = v179;
  sub_100007764(&qword_1007268F0);
  uint64_t v262 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v181 = *(void *)(v251 + 24);
  if (v181)
  {
    unint64_t v182 = *(void *)(v181 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v182 = (unint64_t)_swiftEmptyArrayStorage;
  }
  long long v183 = (uint64_t *)sub_10015DC8C((uint64_t)_swiftEmptyArrayStorage);
  if (v182 >> 62) {
    goto LABEL_148;
  }
  char v184 = *(uint64_t **)((v182 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v184)
  {
LABEL_126:
    uint64_t v264 = v182;
    int64_t v265 = v182 & 0xC000000000000001;
    uint64_t v185 = 4;
    do
    {
      uint64_t v187 = v185 - 4;
      if (v265)
      {
        uint64_t v188 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v189 = (uint64_t *)(v185 - 3);
        if (__OFADD__(v187, 1)) {
          goto LABEL_145;
        }
      }
      else
      {
        uint64_t v188 = *(void *)(v182 + 8 * v185);
        swift_retain();
        uint64_t v189 = (uint64_t *)(v185 - 3);
        if (__OFADD__(v187, 1))
        {
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          swift_bridgeObjectRetain_n();
          char v184 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v184) {
            break;
          }
          goto LABEL_126;
        }
      }
      v266 = v189;
      uint64_t v191 = *(void *)(v188 + 16);
      uint64_t v190 = *(void *)(v188 + 24);
      swift_bridgeObjectRetain();
      unint64_t v182 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v268 = v183;
      unint64_t v193 = sub_100590548(v191, v190);
      uint64_t v194 = v183[2];
      BOOL v195 = (v192 & 1) == 0;
      uint64_t v196 = v194 + v195;
      if (__OFADD__(v194, v195)) {
        goto LABEL_146;
      }
      char v197 = v192;
      if (v183[3] >= v196)
      {
        if (v182)
        {
          long long v183 = v268;
          if (v192) {
            goto LABEL_127;
          }
        }
        else
        {
          sub_10016BB64();
          long long v183 = v268;
          if (v197) {
            goto LABEL_127;
          }
        }
      }
      else
      {
        sub_100166DD8(v196, v182);
        unint64_t v198 = sub_100590548(v191, v190);
        if ((v197 & 1) != (v199 & 1)) {
          goto LABEL_186;
        }
        unint64_t v193 = v198;
        long long v183 = v268;
        if (v197)
        {
LABEL_127:
          uint64_t v186 = v183[7];
          swift_release();
          *(void *)(v186 + 8 * v193) = v188;
          goto LABEL_128;
        }
      }
      v183[(v193 >> 6) + 8] |= 1 << v193;
      uint64_t v200 = (uint64_t *)(v183[6] + 16 * v193);
      *uint64_t v200 = v191;
      v200[1] = v190;
      *(void *)(v183[7] + 8 * v193) = v188;
      uint64_t v201 = v183[2];
      BOOL v38 = __OFADD__(v201, 1);
      uint64_t v202 = v201 + 1;
      if (v38) {
        goto LABEL_147;
      }
      v183[2] = v202;
      swift_bridgeObjectRetain();
LABEL_128:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v185;
      unint64_t v182 = v264;
    }
    while (v266 != v184);
  }
  swift_bridgeObjectRelease_n();
  uint64_t v203 = *(void *)(v262 + 64);
  uint64_t v264 = v262 + 64;
  uint64_t v204 = 1 << *(unsigned char *)(v262 + 32);
  uint64_t v205 = -1;
  if (v204 < 64) {
    uint64_t v205 = ~(-1 << v204);
  }
  unint64_t v206 = v205 & v203;
  v266 = (uint64_t *)&v252[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
  swift_beginAccess();
  int64_t v207 = 0;
  int64_t v265 = (unint64_t)(v204 + 63) >> 6;
  if (!v206) {
    goto LABEL_153;
  }
  while (2)
  {
    unint64_t v208 = __clz(__rbit64(v206));
    v206 &= v206 - 1;
    unint64_t v209 = v208 | (v207 << 6);
LABEL_164:
    uint64_t v212 = (uint64_t *)(*(void *)(v262 + 48) + 16 * v209);
    uint64_t v213 = v212[1];
    uint64_t v214 = *(void **)(*(void *)(v262 + 56) + 8 * v209);
    if (!v183[2])
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_175:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v243 + 104))(v246, enum case for DIPError.Code.invalidSPURL(_:), v244);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v223 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v261 = v223;
      swift_willThrow();
      swift_errorRelease();
      swift_release();
      goto LABEL_176;
    }
    uint64_t v215 = *v212;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v216 = sub_100590548(v215, v213);
    if ((v217 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_175;
    }
    uint64_t v218 = *(void *)(v183[7] + 8 * v216);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v219 = *v266;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v220 = v261;
    uint64_t v221 = sub_1001C0788(&_swiftEmptyDictionarySingleton, v219, v214);
    uint64_t v261 = v220;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v222 = sub_100191890(v218, (uint64_t)v214, v221, v251);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v222)
    {
      swift_bridgeObjectRelease();
      swift_errorRetain();
      uint64_t v224 = v238;
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      swift_errorRelease();
      swift_release();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v248 + 8))(v224, v241);
      swift_release();
      char v270 = 1;
      id v225 = v263;
      sub_1001912FC(&v270, v225, v252);
      return v263;
    }
    swift_release();
    if (v206) {
      continue;
    }
    break;
  }
LABEL_153:
  BOOL v38 = __OFADD__(v207++, 1);
  if (v38)
  {
    __break(1u);
    goto LABEL_185;
  }
  if (v207 >= v265) {
    goto LABEL_178;
  }
  unint64_t v210 = *(void *)(v264 + 8 * v207);
  if (v210)
  {
LABEL_163:
    unint64_t v206 = (v210 - 1) & v210;
    unint64_t v209 = __clz(__rbit64(v210)) + (v207 << 6);
    goto LABEL_164;
  }
  int64_t v211 = v207 + 1;
  if (v207 + 1 >= v265) {
    goto LABEL_178;
  }
  unint64_t v210 = *(void *)(v264 + 8 * v211);
  if (v210) {
    goto LABEL_162;
  }
  int64_t v211 = v207 + 2;
  if (v207 + 2 >= v265) {
    goto LABEL_178;
  }
  unint64_t v210 = *(void *)(v264 + 8 * v211);
  if (v210) {
    goto LABEL_162;
  }
  int64_t v211 = v207 + 3;
  if (v207 + 3 >= v265)
  {
LABEL_178:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_179;
  }
  unint64_t v210 = *(void *)(v264 + 8 * v211);
  if (v210)
  {
LABEL_162:
    int64_t v207 = v211;
    goto LABEL_163;
  }
  while (1)
  {
    int64_t v207 = v211 + 1;
    if (__OFADD__(v211, 1)) {
      break;
    }
    if (v207 >= v265) {
      goto LABEL_178;
    }
    unint64_t v210 = *(void *)(v264 + 8 * v207);
    ++v211;
    if (v210) {
      goto LABEL_163;
    }
  }
LABEL_185:
  __break(1u);
LABEL_186:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001C8A10(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v21 = a3;
  id v22 = a4;
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = a5;
  v12._object = a6;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = v21;
  id v13 = v22;
  char v20 = 1;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = (void **)(a2 + 40);
    while (1)
    {
      uint64_t v17 = *v16;
      uint64_t v21 = (uint64_t)*(v16 - 1);
      id v22 = v17;
      swift_bridgeObjectRetain();
      sub_1001BA98C((uint64_t)&v21, v14, v13, &v20, a1);
      if (v6) {
        break;
      }
      v16 += 2;
      swift_bridgeObjectRelease();
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    sub_10000C728(a1, a1[3]);
    dispatch thunk of IdentityKey.persist()();
    if (!v6)
    {
      v18._object = (void *)0x800000010063DC40;
      v19._uint64_t countAndFlagsBits = 0x6462373964656164;
      v19._object = (void *)0xE800000000000000;
      v18._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
      logMilestone(tag:description:)(v19, v18);
    }
  }
}

uint64_t sub_1001C8BA0(uint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  char v35 = (unint64_t *)result;
  uint64_t v36 = 0;
  int64_t v4 = 0;
  uint64_t v7 = a3[8];
  uint64_t v5 = a3 + 8;
  uint64_t v6 = v7;
  uint64_t v8 = 1 << *((unsigned char *)v5 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v6;
  uint64_t v37 = v5;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v4 << 6);
    }
    else
    {
      int64_t v14 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_48;
      }
      if (v14 >= v38) {
        return sub_1004BA8A0(v35, a2, v36, (uint64_t)a3);
      }
      unint64_t v15 = v37[v14];
      ++v4;
      if (!v15)
      {
        int64_t v4 = v14 + 1;
        if (v14 + 1 >= v38) {
          return sub_1004BA8A0(v35, a2, v36, (uint64_t)a3);
        }
        unint64_t v15 = v37[v4];
        if (!v15)
        {
          int64_t v4 = v14 + 2;
          if (v14 + 2 >= v38) {
            return sub_1004BA8A0(v35, a2, v36, (uint64_t)a3);
          }
          unint64_t v15 = v37[v4];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v38) {
              return sub_1004BA8A0(v35, a2, v36, (uint64_t)a3);
            }
            unint64_t v15 = v37[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v4 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_49;
                }
                if (v4 >= v38) {
                  return sub_1004BA8A0(v35, a2, v36, (uint64_t)a3);
                }
                unint64_t v15 = v37[v4];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v4 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v4 << 6);
    }
    uint64_t v17 = (uint64_t *)(a3[6] + 16 * v13);
    unint64_t v42 = v13;
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void *)(*(void *)(a4 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
    int64_t v21 = *(void *)(v20 + 16);
    uint64_t v43 = *(void *)(a3[7] + 8 * v13);
    if (v21)
    {
      unint64_t v41 = v10;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10011144C(0, v21, 0);
      id v22 = (uint64_t *)(v20 + 40);
      do
      {
        uint64_t v24 = *(v22 - 1);
        uint64_t v23 = *v22;
        unint64_t v26 = _swiftEmptyArrayStorage[2];
        unint64_t v25 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain();
        if (v26 >= v25 >> 1) {
          sub_10011144C(v25 > 1, v26 + 1, 1);
        }
        v22 += 19;
        _swiftEmptyArrayStorage[2] = v26 + 1;
        id v27 = &_swiftEmptyArrayStorage[2 * v26];
        v27[4] = v24;
        v27[5] = v23;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      unint64_t v10 = v41;
      uint64_t v28 = _swiftEmptyArrayStorage[2];
      if (!v28) {
        goto LABEL_4;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v28 = _swiftEmptyArrayStorage[2];
      if (!v28) {
        goto LABEL_4;
      }
    }
    if (_swiftEmptyArrayStorage[4] == v18 && _swiftEmptyArrayStorage[5] == v19
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_42:
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_43;
    }
    if (v28 != 1) {
      break;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    char v11 = *(unsigned char *)(v43 + 17);
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if ((v11 & 1) == 0)
    {
LABEL_43:
      *(unint64_t *)((char *)v35 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      if (__OFADD__(v36++, 1))
      {
        __break(1u);
        return sub_1004BA8A0(v35, a2, v36, (uint64_t)a3);
      }
    }
  }
  unint64_t v29 = &_swiftEmptyArrayStorage[7];
  uint64_t v30 = 1;
  while (1)
  {
    uint64_t v31 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (*(v29 - 1) == v18 && *v29 == v19) {
      goto LABEL_42;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_42;
    }
    v29 += 2;
    ++v30;
    if (v31 == v28) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_1001C8F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    uint64_t v11 = sub_1001C8BA0((uint64_t)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, (void *)a1, a2);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    unint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    uint64_t v11 = sub_1001C8BA0((uint64_t)v12, v8, (void *)a1, a2);
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v11;
}

uint64_t sub_1001C90E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(v391) = a5;
  uint64_t v399 = a4;
  uint64_t v396 = a3;
  uint64_t v8 = sub_100007764(&qword_100726408);
  __chkstk_darwin(v8 - 8);
  uint64_t v383 = (uint64_t)&v341 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v384 = sub_100007764((uint64_t *)&unk_100726030);
  object = *(char **)(v384 - 8);
  uint64_t v10 = __chkstk_darwin(v384);
  v377 = (char *)&v341 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v378 = (char *)&v341 - v12;
  uint64_t v394 = type metadata accessor for Logger();
  uint64_t v387 = *(char **)(v394 - 8);
  __chkstk_darwin(v394);
  uint64_t v393 = (char *)&v341 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v435 = type metadata accessor for DIPError();
  uint64_t v386 = *(char **)(v435 - 8);
  uint64_t v14 = __chkstk_darwin(v435);
  uint64_t v379 = (char *)&v341 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v388 = (char *)&v341 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v382 = (char *)&v341 - v19;
  __chkstk_darwin(v18);
  v381 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v341 - v20);
  uint64_t v390 = type metadata accessor for String.Encoding();
  uint64_t v385 = *(void *)(v390 - 8);
  __chkstk_darwin(v390);
  uint64_t v389 = (char *)&v341 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v397 = type metadata accessor for DIPError.Code();
  uint64_t v395 = *(void *)(v397 - 8);
  __chkstk_darwin(v397);
  uint64_t v398 = (char *)&v341 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007764(&qword_100723718);
  JWSSignedJSON.payload.getter();
  uint64_t v23 = *(void *)(a2 + *(int *)(type metadata accessor for VerifiedClaim(0) + 20));
  JWSSignedJSON.payload.getter();
  v433[6] = v406;
  v433[7] = v407;
  uint64_t v434 = v408;
  v433[2] = v405[2];
  v433[3] = v405[3];
  v433[4] = v405[4];
  v433[5] = v405[5];
  v433[0] = v405[0];
  v433[1] = v405[1];
  uint64_t v24 = *((void *)&v406 + 1);
  unint64_t v25 = (void *)v407;
  swift_bridgeObjectRetain();
  sub_1001D6030((uint64_t)v433);
  Swift::String v26 = String.uppercased()();
  sub_1001D6030((uint64_t)&v432);
  v392 = (void *)v23;
  Swift::String v27 = String.uppercased()();
  if (v26._countAndFlagsBits == v27._countAndFlagsBits && v26._object == v27._object)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v395 + 104))(v398, enum case for DIPError.Code.invalidClaim(_:), v397);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_13:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return swift_willThrow();
    }
  }
  sub_10000C728(a1, a1[3]);
  uint64_t v29 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()();
  uint64_t v31 = v5;
  if (v5) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v33 = v29;
  unint64_t v34 = v30;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000C5F4(v33, v34);
  id v36 = (id)DigestSha256();

  if (!v36)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v395 + 104))(v398, enum case for DIPError.Code.unexpectedDaemonState(_:), v397);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_13;
  }
  uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  uint64_t v368 = v37;
  Swift::String v40 = Data.base64EncodedString(options:)(0);
  if (v40._countAndFlagsBits == v24 && v40._object == v25)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
    {
      (*(void (**)(char *, void, uint64_t))(v395 + 104))(v398, enum case for DIPError.Code.claimKeyMismatch(_:), v397);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return sub_10000C5F4(v368, (unint64_t)v39);
    }
  }
  if (v391)
  {
    BOOL v362 = 1;
  }
  else
  {
    id v42 = [self standardUserDefaults];
    v43._uint64_t countAndFlagsBits = 0xD000000000000022;
    v43._object = (void *)0x800000010063E950;
    BOOL v362 = NSUserDefaults.internalBool(forKey:)(v43);
  }
  uint64_t v44 = v392;
  uint64_t v404 = &_swiftEmptyDictionarySingleton;
  uint64_t v45 = v399;
  uint64_t v46 = swift_bridgeObjectRetain();
  uint64_t v403 = sub_1005D1B04(v46);
  unint64_t v47 = sub_100509684(v44, 0, 0xE000000000000000);
  v346 = v39;
  uint64_t v402 = v47;
  if (v396)
  {
    uint64_t v48 = swift_bridgeObjectRetain();
    goto LABEL_62;
  }
  uint64_t v391 = 0;
  uint64_t v49 = v45 + 64;
  uint64_t v50 = 1 << *(unsigned char *)(v45 + 32);
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & *(void *)(v45 + 64);
  int64_t v53 = (unint64_t)(v50 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v54 = 0;
  uint64_t v396 = (uint64_t)&_swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v52)
    {
      unint64_t v55 = __clz(__rbit64(v52));
      v52 &= v52 - 1;
      unint64_t v56 = v55 | (v54 << 6);
      goto LABEL_41;
    }
    BOOL v57 = __OFADD__(v54++, 1);
    if (v57)
    {
      __break(1u);
LABEL_191:
      swift_willThrow();
      swift_errorRetain();
      sub_10000C5F4(v368, (unint64_t)v346);
      swift_bridgeObjectRelease();
      uint64_t v330 = v373;
      unint64_t v329 = (unint64_t)v374;
      sub_10000C5F4(v373, (unint64_t)v374);
      sub_10000C5F4(v369, v370);
      sub_10000C5E0((uint64_t)v371, (unint64_t)v372);
      swift_bridgeObjectRelease();
      swift_release();
      sub_10000C5E0(v330, v329);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    if (v54 >= v53) {
      break;
    }
    unint64_t v58 = *(void *)(v49 + 8 * v54);
    if (!v58)
    {
      int64_t v59 = v54 + 1;
      if (v54 + 1 >= v53) {
        break;
      }
      unint64_t v58 = *(void *)(v49 + 8 * v59);
      if (!v58)
      {
        int64_t v59 = v54 + 2;
        if (v54 + 2 >= v53) {
          break;
        }
        unint64_t v58 = *(void *)(v49 + 8 * v59);
        if (!v58)
        {
          int64_t v59 = v54 + 3;
          if (v54 + 3 >= v53) {
            break;
          }
          unint64_t v58 = *(void *)(v49 + 8 * v59);
          if (!v58)
          {
            int64_t v59 = v54 + 4;
            if (v54 + 4 >= v53) {
              break;
            }
            unint64_t v58 = *(void *)(v49 + 8 * v59);
            if (!v58)
            {
              int64_t v59 = v54 + 5;
              if (v54 + 5 >= v53) {
                break;
              }
              unint64_t v58 = *(void *)(v49 + 8 * v59);
              if (!v58)
              {
                while (1)
                {
                  int64_t v54 = v59 + 1;
                  if (__OFADD__(v59, 1)) {
                    break;
                  }
                  if (v54 >= v53) {
                    goto LABEL_61;
                  }
                  unint64_t v58 = *(void *)(v49 + 8 * v54);
                  ++v59;
                  if (v58) {
                    goto LABEL_40;
                  }
                }
LABEL_200:
                __break(1u);
                goto LABEL_201;
              }
            }
          }
        }
      }
      int64_t v54 = v59;
    }
LABEL_40:
    unint64_t v52 = (v58 - 1) & v58;
    unint64_t v56 = __clz(__rbit64(v58)) + (v54 << 6);
LABEL_41:
    uint64_t v60 = *(void *)(*(void *)(v45 + 56) + 8 * v56);
    if (*(unsigned char *)(v60 + 21) == 1 && (*(unsigned char *)(v60 + 18) & 1) == 0 && (*(unsigned char *)(v60 + 16) & 1) == 0)
    {
      uint64_t v39 = *(void **)(v60 + 200);
      if (v39)
      {
        uint64_t v61 = *(void *)(v60 + 104);
        if (v61)
        {
          unint64_t v62 = *(void *)(v60 + 96);
          uint64_t v369 = *(void *)(v60 + 192);
          unint64_t v370 = v62;
          unint64_t v63 = *(void *)(v60 + 120);
          uint64_t v371 = *(_OWORD **)(v60 + 112);
          uint64_t v372 = (long long *)v63;
          unint64_t v64 = *(void (**)(void, void, void))(v60 + 136);
          uint64_t v373 = *(void *)(v60 + 128);
          uint64_t v374 = v64;
          unint64_t v367 = *(void *)(v60 + 144);
          int64_t v65 = *(void *)(v60 + 160);
          id v66 = *(void **)(v60 + 168);
          uint64_t v375 = *(void *)(v60 + 152);
          int64_t v376 = v65;
          unint64_t v67 = *(void **)(v60 + 176);
          int v68 = *(unsigned __int8 *)(v60 + 184);
          swift_bridgeObjectRetain();
          LODWORD(v364) = v68;
          v366 = v67;
          uint64_t v365 = v66;
          sub_1001D8008(v370, v61);
          uint64_t v69 = v396;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v405[0] = v69;
          unint64_t v72 = sub_100590548(v369, (uint64_t)v39);
          uint64_t v73 = *(void *)(v69 + 16);
          BOOL v74 = (v71 & 1) == 0;
          uint64_t v75 = v73 + v74;
          if (__OFADD__(v73, v74)) {
            goto LABEL_202;
          }
          if (*(void *)(v69 + 24) >= v75)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              unint64_t v95 = v72;
              LODWORD(v396) = v71;
              sub_10016BB88();
              LOBYTE(v71) = v396;
              unint64_t v72 = v95;
            }
          }
          else
          {
            LODWORD(v396) = v71;
            sub_100166DFC(v75, isUniquelyReferenced_nonNull_native);
            unint64_t v76 = sub_100590548(v369, (uint64_t)v39);
            int v77 = v71 & 1;
            LOBYTE(v71) = v396;
            if ((v396 & 1) != v77) {
              goto LABEL_204;
            }
            unint64_t v72 = v76;
          }
          char v78 = v367 & 1;
          int v79 = v364 & 1;
          uint64_t v80 = *(void **)&v405[0];
          uint64_t v396 = *(void *)&v405[0];
          if (v71)
          {
            uint64_t v81 = *(void *)(*(void *)&v405[0] + 56) + 96 * v72;
            uint64_t v361 = *(void (***)(char *, void, uint64_t))(v81 + 24);
            int64_t v82 = *(void *)(v81 + 80);
            unint64_t v363 = *(void *)(v81 + 64);
            int64_t v364 = v82;
            LODWORD(v369) = v79;
            v367 &= 1u;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(void *)uint64_t v81 = v370;
            *(void *)(v81 + 8) = v61;
            unint64_t v83 = (unint64_t)v372;
            *(void *)(v81 + 16) = v371;
            *(void *)(v81 + 24) = v83;
            char v84 = v374;
            *(void *)(v81 + 32) = v373;
            *(void *)(v81 + 40) = v84;
            *(unsigned char *)(v81 + 48) = v367;
            int64_t v85 = v376;
            *(void *)(v81 + 56) = v375;
            *(void *)(v81 + 64) = v85;
            uint64_t v86 = v366;
            *(void *)(v81 + 72) = v365;
            *(void *)(v81 + 80) = v86;
            *(unsigned char *)(v81 + 88) = v369;
          }
          else
          {
            *(void *)(*(void *)&v405[0] + 8 * (v72 >> 6) + 64) |= 1 << v72;
            char v87 = (void *)(v80[6] + 16 * v72);
            *char v87 = v369;
            v87[1] = v39;
            uint64_t v88 = v80[7] + 96 * v72;
            *(void *)uint64_t v88 = v370;
            *(void *)(v88 + 8) = v61;
            unint64_t v89 = (unint64_t)v372;
            *(void *)(v88 + 16) = v371;
            *(void *)(v88 + 24) = v89;
            os_log_type_t v90 = v374;
            *(void *)(v88 + 32) = v373;
            *(void *)(v88 + 40) = v90;
            *(unsigned char *)(v88 + 48) = v78;
            int64_t v91 = v376;
            *(void *)(v88 + 56) = v375;
            *(void *)(v88 + 64) = v91;
            uint64_t v92 = v366;
            *(void *)(v88 + 72) = v365;
            *(void *)(v88 + 80) = v92;
            *(unsigned char *)(v88 + 88) = v79;
            uint64_t v93 = v80[2];
            BOOL v57 = __OFADD__(v93, 1);
            uint64_t v94 = v93 + 1;
            if (v57) {
              goto LABEL_203;
            }
            v80[2] = v94;
            swift_bridgeObjectRetain();
          }
          uint64_t v45 = v399;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
  }
LABEL_61:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v31 = v391;
  uint64_t v48 = v396;
LABEL_62:
  int64_t v96 = 0;
  uint64_t v97 = *(void *)(v48 + 64);
  unint64_t v363 = v48 + 64;
  uint64_t v98 = 1 << *(unsigned char *)(v48 + 32);
  uint64_t v99 = -1;
  if (v98 < 64) {
    uint64_t v99 = ~(-1 << v98);
  }
  unint64_t v100 = v99 & v97;
  int64_t v364 = (unint64_t)(v98 + 63) >> 6;
  uint64_t v371 = v414;
  uint64_t v372 = &v412;
  uint64_t v357 = &v410;
  v353 = (void (**)(char *, uint64_t))(v385 + 8);
  unsigned int v358 = enum case for DIPError.Code.invalidClaim(_:);
  uint64_t v361 = (void (**)(char *, void, uint64_t))(v395 + 104);
  unsigned int v360 = enum case for DIPError.PropertyKey.attributeID(_:);
  uint64_t v356 = (void (**)(char *, uint64_t))(v387 + 8);
  uint64_t v354 = (void (**)(uint64_t, char *, uint64_t))(v386 + 16);
  v355 = (void (**)(char *, uint64_t))(v386 + 8);
  uint64_t v386 = (char *)&_swiftEmptyDictionarySingleton;
  v352 = (void (**)(char *, uint64_t))0x800000010063EA00;
  long long v359 = xmmword_100610730;
  v344 = (void *)0x800000010063EA30;
  unint64_t v345 = (unint64_t)"ode on the merkle tree";
  uint64_t v343 = (void *)0x800000010063EA50;
  Swift::String v342 = (void *)0x800000010063EA80;
  v351 = (void (**)(char *, char *, uint64_t))0x800000010063E9E0;
  unint64_t v347 = (unint64_t)"n the Merkle tree.";
  unint64_t v348 = (unint64_t)"error deleting stored claim";
  unint64_t v349 = 0x800000010063D350;
  unint64_t v350 = 0x800000010063E8B0;
  uint64_t v396 = v48;
  if ((v99 & v97) != 0) {
    goto LABEL_67;
  }
  while (2)
  {
    while (2)
    {
      BOOL v57 = __OFADD__(v96++, 1);
      if (v57)
      {
        __break(1u);
LABEL_193:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)&v405[0] = 0;
        *((void *)&v405[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v331._uint64_t countAndFlagsBits = 0xD000000000000013;
        v331._object = (void *)0x800000010063EB00;
        String.append(_:)(v331);
        uint64_t v332 = v39[5];
        uint64_t v333 = (void *)v39[6];
        swift_bridgeObjectRetain();
        v334._uint64_t countAndFlagsBits = v332;
        v334._object = v333;
        String.append(_:)(v334);
        swift_bridgeObjectRelease();
        v335._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
        v335._object = (void *)0x800000010063EBE0;
        String.append(_:)(v335);
        (*v361)(v398, enum case for DIPError.Code.unexpectedDaemonState(_:), v397);
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
LABEL_195:
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        sub_10000C5F4(v368, (unint64_t)v346);
LABEL_197:
        swift_release();
        (*v352)(v378, v384);
        return swift_release();
      }
      if (v96 >= v364) {
        goto LABEL_117;
      }
      unint64_t v104 = *(void *)(v363 + 8 * v96);
      if (v104) {
        goto LABEL_78;
      }
      int64_t v105 = v96 + 1;
      if (v96 + 1 >= v364) {
        goto LABEL_117;
      }
      unint64_t v104 = *(void *)(v363 + 8 * v105);
      if (v104) {
        goto LABEL_77;
      }
      int64_t v105 = v96 + 2;
      if (v96 + 2 >= v364) {
        goto LABEL_117;
      }
      unint64_t v104 = *(void *)(v363 + 8 * v105);
      if (v104) {
        goto LABEL_77;
      }
      int64_t v105 = v96 + 3;
      if (v96 + 3 >= v364)
      {
LABEL_117:
        swift_release();
        LODWORD(v367) = sub_1005099CC((uint64_t)v392);
        uint64_t v211 = 0;
        uint64_t v212 = *(void *)(v403 + 56);
        uint64_t v375 = v403 + 56;
        uint64_t v385 = v403;
        uint64_t v213 = 1 << *(unsigned char *)(v403 + 32);
        uint64_t v214 = -1;
        if (v213 < 64) {
          uint64_t v214 = ~(-1 << v213);
        }
        unint64_t v215 = v214 & v212;
        int64_t v376 = (unint64_t)(v213 + 63) >> 6;
        v381 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(object + 48);
        uint64_t v357 = (long long *)(object + 32);
        v351 = (void (**)(char *, char *, uint64_t))(object + 16);
        unint64_t v216 = &_swiftEmptyDictionarySingleton;
        v352 = (void (**)(char *, uint64_t))(object + 8);
        uint64_t v365 = (void *)0x800000010063EBC0;
        v366 = (void *)0x800000010063EBA0;
        unint64_t v363 = v348 | 0x8000000000000000;
        int64_t v364 = v347 | 0x8000000000000000;
        while (1)
        {
          if (v215)
          {
            uint64_t v217 = v31;
            v392 = (void *)((v215 - 1) & v215);
            uint64_t v395 = v211;
            unint64_t v218 = __clz(__rbit64(v215)) | (v211 << 6);
          }
          else
          {
            BOOL v57 = __OFADD__(v211, 1);
            uint64_t v219 = v211 + 1;
            if (v57) {
              goto LABEL_199;
            }
            if (v219 >= v376)
            {
LABEL_184:
              sub_10000C5F4(v368, (unint64_t)v346);
              swift_release();
              swift_bridgeObjectRelease();
              return (uint64_t)v386;
            }
            unint64_t v220 = *(void *)(v375 + 8 * v219);
            if (!v220)
            {
              uint64_t v221 = v219 + 1;
              if (v219 + 1 >= v376) {
                goto LABEL_184;
              }
              unint64_t v220 = *(void *)(v375 + 8 * v221);
              if (!v220)
              {
                uint64_t v221 = v219 + 2;
                if (v219 + 2 >= v376) {
                  goto LABEL_184;
                }
                unint64_t v220 = *(void *)(v375 + 8 * v221);
                if (!v220)
                {
                  uint64_t v221 = v219 + 3;
                  if (v219 + 3 >= v376) {
                    goto LABEL_184;
                  }
                  unint64_t v220 = *(void *)(v375 + 8 * v221);
                  if (!v220)
                  {
                    while (1)
                    {
                      uint64_t v219 = v221 + 1;
                      if (__OFADD__(v221, 1)) {
                        break;
                      }
                      if (v219 >= v376) {
                        goto LABEL_184;
                      }
                      unint64_t v220 = *(void *)(v375 + 8 * v219);
                      ++v221;
                      if (v220) {
                        goto LABEL_134;
                      }
                    }
LABEL_201:
                    __break(1u);
LABEL_202:
                    __break(1u);
LABEL_203:
                    __break(1u);
LABEL_204:
                    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                    return result;
                  }
                }
              }
              uint64_t v219 = v221;
            }
LABEL_134:
            uint64_t v217 = v31;
            v392 = (void *)((v220 - 1) & v220);
            uint64_t v395 = v219;
            unint64_t v218 = __clz(__rbit64(v220)) + (v219 << 6);
          }
          uint64_t v222 = (uint64_t *)(*(void *)(v385 + 48) + 16 * v218);
          uint64_t v223 = *v222;
          uint64_t v224 = (void *)v222[1];
          sub_100007764((uint64_t *)&unk_1007225C0);
          id v225 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v226 = (*(unsigned __int8 *)(*(void *)v225 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v225 + 80);
          uint64_t v227 = swift_allocObject();
          *(_OWORD *)(v227 + 16) = v359;
          unint64_t v228 = v227 + v226;
          id v229 = (uint64_t *)(v228 + v225[14]);
          uint64_t v230 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, void, uint64_t))(*(void *)(v230 - 8) + 104))(v228, v360, v230);
          v229[3] = (uint64_t)&type metadata for String;
          *id v229 = v223;
          v229[1] = (uint64_t)v224;
          swift_bridgeObjectRetain_n();
          unint64_t v231 = sub_10015C504(v227);
          if (!*(void *)(v45 + 16)) {
            goto LABEL_179;
          }
          uint64_t v396 = v231;
          swift_bridgeObjectRetain();
          unint64_t v232 = sub_100590548(v223, (uint64_t)v224);
          if ((v233 & 1) == 0)
          {
            swift_bridgeObjectRelease();
LABEL_179:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(void *)&v405[0] = 0;
            *((void *)&v405[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(60);
            v322._uint64_t countAndFlagsBits = 0xD000000000000013;
            v322._object = (void *)0x800000010063EB00;
            String.append(_:)(v322);
            v323._uint64_t countAndFlagsBits = v223;
            v323._object = v224;
            String.append(_:)(v323);
            swift_bridgeObjectRelease();
            v324._uint64_t countAndFlagsBits = 0xD000000000000027;
            v324._object = (void *)0x800000010063EB20;
            String.append(_:)(v324);
            (*v361)(v398, enum case for DIPError.Code.unexpectedDaemonState(_:), v397);
            sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
            sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            sub_10000C5F4(v368, (unint64_t)v346);
            return swift_release();
          }
          object = (char *)v223;
          uint64_t v234 = *(void *)(*(void *)(v45 + 56) + 8 * v232);
          swift_retain();
          swift_bridgeObjectRelease();
          uint64_t v236 = *(void *)(v234 + 40);
          unint64_t v235 = *(void **)(v234 + 48);
          swift_bridgeObjectRetain();
          uint64_t v237 = sub_1004D0118(v236, v235);
          uint64_t v31 = v217;
          if (v217)
          {
            sub_10000C5F4(v368, (unint64_t)v346);
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
LABEL_116:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          uint64_t v382 = v237;
          uint64_t v388 = v238;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v239 = v234 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
          swift_beginAccess();
          uint64_t v240 = v239;
          uint64_t v241 = v383;
          sub_100048D6C(v240, v383, &qword_100726408);
          uint64_t v39 = (void *)v234;
          if ((*v381)(v241, 1, v384) == 1) {
            break;
          }
          uint64_t v391 = 0;
          swift_bridgeObjectRelease();
          uint64_t v292 = *(void (**)(void, void, void))v357;
          (*(void (**)(char *, uint64_t, uint64_t))v357)(v378, v241, v384);
          if (!*(void *)(v234 + 200)) {
            goto LABEL_193;
          }
          Swift::String v293 = String.lowercased()();
          swift_bridgeObjectRetain();
          unint64_t v294 = sub_100590548(v293._countAndFlagsBits, (uint64_t)v293._object);
          char v296 = v295;
          swift_bridgeObjectRelease();
          if ((v296 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(void *)&v405[0] = 0;
            *((void *)&v405[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(74);
            v336._uint64_t countAndFlagsBits = 0xD000000000000013;
            v336._object = (void *)0x800000010063EC00;
            String.append(_:)(v336);
            uint64_t v337 = *(void *)(v234 + 40);
            os_log_type_t v338 = *(void **)(v234 + 48);
            swift_bridgeObjectRetain();
            v339._uint64_t countAndFlagsBits = v337;
            v339._object = v338;
            String.append(_:)(v339);
            swift_bridgeObjectRelease();
            v340._uint64_t countAndFlagsBits = 0xD000000000000035;
            v340._object = (void *)0x800000010063EC20;
            String.append(_:)(v340);
            (*v361)(v398, v358, v397);
            sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            goto LABEL_195;
          }
          object = (char *)v293._object;
          uint64_t v374 = v292;
          uint64_t v297 = v402;
          char v298 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v405[0] = v297;
          if ((v298 & 1) == 0)
          {
            sub_10016A364();
            uint64_t v297 = *(void *)&v405[0];
          }
          swift_bridgeObjectRelease();
          uint64_t v299 = (uint64_t *)(*(void *)(v297 + 56) + 16 * v294);
          uint64_t v301 = *v299;
          uint64_t v300 = v299[1];
          sub_100560748(v294, v297);
          uint64_t v402 = v297;
          swift_bridgeObjectRelease();
          uint64_t v302 = v234;
          uint64_t v303 = *(void *)(v234 + 216);
          if (!v303)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*v361)(v398, enum case for DIPError.Code.unexpectedDaemonState(_:), v397);
            sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            sub_10000C5F4(v368, (unint64_t)v346);
            goto LABEL_197;
          }
          uint64_t v373 = *(void *)(v234 + 208);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)&v405[0] = v301;
          *((void *)&v405[0] + 1) = v300;
          v304._uint64_t countAndFlagsBits = 46;
          v304._object = (void *)0xE100000000000000;
          String.append(_:)(v304);
          v305._uint64_t countAndFlagsBits = (uint64_t)v382;
          v305._object = v388;
          String.append(_:)(v305);
          swift_bridgeObjectRelease();
          uint64_t v306 = *((void *)&v405[0] + 1);
          uint64_t v396 = *(void *)&v405[0];
          uint64_t v307 = *v351;
          uint64_t v308 = v377;
          uint64_t v309 = v378;
          uint64_t v387 = (char *)v302;
          uint64_t v310 = v384;
          v307(v377, v378, v384);
          type metadata accessor for VerifiedEncryptedDataWrapper(0);
          uint64_t v311 = swift_allocObject();
          v374(v311 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_value, v308, v310);
          uint64_t v312 = (void *)(v311 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey);
          *uint64_t v312 = v373;
          v312[1] = v303;
          uint64_t v313 = (uint64_t *)(v311 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_hash);
          id v314 = object;
          *uint64_t v313 = v293._countAndFlagsBits;
          v313[1] = (uint64_t)v314;
          char v315 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v405[0] = v216;
          sub_100562E1C(v311, v396, v306, v315);
          unint64_t v216 = *(void **)&v405[0];
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*v352)(v309, v310);
          uint64_t v31 = v391;
          uint64_t v45 = v399;
LABEL_121:
          uint64_t v211 = v395;
          unint64_t v215 = (unint64_t)v392;
        }
        sub_10000C6CC(v241, &qword_100726408);
        if (*(unsigned char *)(v234 + 18) != 1)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_121;
        }
        uint64_t v387 = (char *)v234;
        if (!*(void *)(v234 + 104)) {
          goto LABEL_185;
        }
        uint64_t v242 = *((void *)v387 + 22);
        uint64_t v243 = *((void *)v387 + 19);
        char v244 = v387[144];
        uint64_t v245 = *((void *)v387 + 17);
        uint64_t v424 = *((void *)v387 + 16);
        uint64_t v425 = v245;
        char v426 = v244 & 1;
        long long v428 = *((_OWORD *)v387 + 10);
        uint64_t v427 = v243;
        uint64_t v429 = v242;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v246 = sub_1005086E4();
        uint64_t v391 = 0;
        uint64_t v247 = v246;
        unint64_t v249 = v248;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v249 >> 60 == 15
          || (Data.base16EncodedString()(),
              sub_10000C5E0(v247, v249),
              uint64_t v250 = Data.init(base16Encoded:)(),
              v251 >> 60 == 15))
        {
LABEL_185:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*v361)(v398, enum case for DIPError.Code.unexpectedDaemonState(_:), v397);
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_10000C5F4(v368, (unint64_t)v346);
          swift_release();
          return swift_release();
        }
        uint64_t v252 = v250;
        unint64_t v253 = v251;
        if (v367)
        {
          uint64_t v254 = 0;
          unint64_t v255 = 0xC000000000000000;
        }
        else
        {
          uint64_t v256 = v389;
          static String.Encoding.utf8.getter();
          uint64_t v254 = String.data(using:allowLossyConversion:)();
          unint64_t v255 = v257;
          (*v353)(v256, v390);
          if (v255 >> 60 == 15)
          {
            swift_bridgeObjectRelease();
            uint64_t v326 = v254;
            goto LABEL_188;
          }
          sub_10002CEB0(v254, v255);
        }
        *(void *)&v405[0] = v252;
        *((void *)&v405[0] + 1) = v253;
        sub_1000338D4(v252, v253);
        sub_10002CEB0(v254, v255);
        sub_10051049C(v254, v255);
        uint64_t v373 = v254;
        uint64_t v374 = (void (*)(void, void, void))v255;
        sub_10000C5F4(v254, v255);
        long long v258 = v405[0];
        Class v259 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000C5F4(v258, *((unint64_t *)&v258 + 1));
        id v260 = (id)DigestSha256();

        if (!v260)
        {
          swift_bridgeObjectRelease();
          uint64_t v325 = v373;
          unint64_t v255 = (unint64_t)v374;
          sub_10000C5F4(v373, (unint64_t)v374);
          uint64_t v326 = v325;
LABEL_188:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*v361)(v398, enum case for DIPError.Code.unexpectedDaemonState(_:), v397);
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_10000C5F4(v368, (unint64_t)v346);
          sub_10000C5E0(v252, v253);
          swift_release();
          sub_10000C5E0(v326, v255);
          return swift_release();
        }
        uint64_t v371 = (_OWORD *)v252;
        uint64_t v261 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v263 = v262;

        uint64_t v369 = v261;
        unint64_t v370 = v263;
        Swift::String v264 = Data.base16EncodedString()();
        uint64_t v265 = sub_10055FAE8(v264._countAndFlagsBits, (uint64_t)v264._object);
        uint64_t v267 = v266;
        swift_bridgeObjectRelease();
        uint64_t v372 = (long long *)v253;
        if (v267)
        {
          swift_bridgeObjectRelease();
          uint64_t v45 = v399;
          if (v265 == 0x6966697265766E75 && v267 == (void *)0xEA00000000006465
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_157:
            uint64_t v278 = (uint64_t)v387;
            *(void *)&v405[0] = 0x6966697265766E75;
            *((void *)&v405[0] + 1) = 0xEB000000002E6465;
            v279._uint64_t countAndFlagsBits = (uint64_t)v382;
            v279._object = v388;
            String.append(_:)(v279);
            swift_bridgeObjectRelease();
            long long v280 = v405[0];
            uint64_t v281 = *(void *)(v278 + 104);
            if (v281)
            {
              uint64_t v282 = *(void *)(v278 + 176);
              uint64_t v283 = *(void *)(v278 + 152);
              char v284 = *(unsigned char *)(v278 + 144);
              uint64_t v285 = *(void *)(v278 + 136);
              uint64_t v286 = *(void *)(v278 + 112);
              char v287 = *(unsigned char *)(v278 + 184) & 1;
              *(void *)&long long v415 = *(void *)(v278 + 96);
              *((void *)&v415 + 1) = v281;
              long long v417 = *(_OWORD *)(v278 + 120);
              uint64_t v416 = v286;
              uint64_t v418 = v285;
              char v419 = v284 & 1;
              long long v421 = *(_OWORD *)(v278 + 160);
              uint64_t v420 = v283;
              uint64_t v422 = v282;
              char v423 = v287;
              swift_bridgeObjectRetain();
              uint64_t v288 = v404;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v289 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)&v405[0] = v288;
              sub_100562E48(&v415, v280, *((uint64_t *)&v280 + 1), v289);
              uint64_t v404 = *(void **)&v405[0];
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              sub_100560268(*(uint64_t *)&v405[0], *((uint64_t *)&v405[0] + 1), (uint64_t)v405);
              swift_bridgeObjectRelease();
              sub_1001D7BDC(*(uint64_t *)&v405[0], *((uint64_t *)&v405[0] + 1));
            }
            uint64_t v291 = v373;
            unint64_t v290 = (unint64_t)v374;
            sub_10000C5E0(v373, (unint64_t)v374);
            sub_10000C5F4(v291, v290);
            sub_10000C5F4(v369, v370);
            sub_10000C5E0((uint64_t)v371, (unint64_t)v372);
            swift_release();
            uint64_t v31 = v391;
            goto LABEL_121;
          }
        }
        else
        {
          *(void *)&v405[0] = 0;
          *((void *)&v405[0] + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(52);
          v268._uint64_t countAndFlagsBits = 0xD000000000000015;
          v268._object = v366;
          String.append(_:)(v268);
          v269._uint64_t countAndFlagsBits = (uint64_t)object;
          v269._object = v224;
          String.append(_:)(v269);
          swift_bridgeObjectRelease();
          v270._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
          v270._object = v365;
          String.append(_:)(v270);
          (*v361)(v398, v358, v397);
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          swift_bridgeObjectRetain();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          uint64_t v45 = v399;
          if (v362) {
            goto LABEL_191;
          }
          uint64_t v271 = v393;
          defaultLogger()();
          uint64_t v267 = (void *)0xE000000000000000;
          DIPRecordError(_:message:log:)();
          (*v356)(v271, v394);
          swift_errorRelease();
          uint64_t v265 = 0;
        }
        *(void *)&v405[0] = 0;
        *((void *)&v405[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        swift_bridgeObjectRelease();
        *(void *)&v405[0] = 0x206E776F6E6B6E75;
        *((void *)&v405[0] + 1) = 0xEF222070756F7267;
        v272._uint64_t countAndFlagsBits = v265;
        v272._object = v267;
        String.append(_:)(v272);
        swift_bridgeObjectRelease();
        v273._uint64_t countAndFlagsBits = 34;
        v273._object = (void *)0xE100000000000000;
        String.append(_:)(v273);
        (*v361)(v398, v358, v397);
        uint64_t v274 = v379;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v275 = v435;
        swift_allocError();
        (*v354)(v276, v274, v275);
        if (v362)
        {
          swift_willThrow();
          swift_errorRetain();
          sub_10000C5F4(v368, (unint64_t)v346);
          swift_bridgeObjectRelease();
          uint64_t v328 = v373;
          unint64_t v327 = (unint64_t)v374;
          sub_10000C5F4(v373, (unint64_t)v374);
          sub_10000C5F4(v369, v370);
          sub_10000C5E0((uint64_t)v371, (unint64_t)v372);
          swift_release();
          sub_10000C5E0(v328, v327);
          (*v355)(v274, v275);
          swift_release();
          goto LABEL_183;
        }
        uint64_t v277 = v393;
        defaultLogger()();
        DIPRecordError(_:message:log:)();
        (*v356)(v277, v394);
        (*v355)(v274, v275);
        swift_errorRelease();
        goto LABEL_157;
      }
      unint64_t v104 = *(void *)(v363 + 8 * v105);
      if (!v104)
      {
        while (1)
        {
          int64_t v96 = v105 + 1;
          if (__OFADD__(v105, 1)) {
            break;
          }
          if (v96 >= v364) {
            goto LABEL_117;
          }
          unint64_t v104 = *(void *)(v363 + 8 * v96);
          ++v105;
          if (v104) {
            goto LABEL_78;
          }
        }
        __break(1u);
LABEL_199:
        __break(1u);
        goto LABEL_200;
      }
LABEL_77:
      int64_t v96 = v105;
LABEL_78:
      uint64_t v385 = (v104 - 1) & v104;
      unint64_t v103 = __clz(__rbit64(v104)) + (v96 << 6);
LABEL_79:
      os_log_type_t v106 = (uint64_t *)(*(void *)(v48 + 48) + 16 * v103);
      uint64_t v107 = *v106;
      uint64_t v108 = (char *)v106[1];
      uint64_t v109 = (long long *)(*(void *)(v48 + 56) + 96 * v103);
      long long v110 = v109[1];
      long long v409 = *v109;
      long long v410 = v110;
      long long v112 = v109[3];
      long long v111 = v109[4];
      long long v113 = v109[2];
      *(_OWORD *)((char *)&v413[1] + 1) = *(long long *)((char *)v109 + 73);
      long long v412 = v112;
      *(_OWORD *)v413 = v111;
      long long v411 = v113;
      uint64_t v114 = v402;
      swift_bridgeObjectRetain();
      sub_1001D7CB8((uint64_t)&v409);
      swift_bridgeObjectRetain();
      unint64_t v370 = v107;
      unint64_t v115 = sub_100590548(v107, (uint64_t)v108);
      char v117 = v116;
      swift_bridgeObjectRelease();
      if ((v117 & 1) == 0)
      {
        sub_1001D7C4C((uint64_t)&v409);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)&v405[0] = 0;
        *((void *)&v405[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v206._object = (void *)0x800000010063E980;
        v206._uint64_t countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v206);
        v207._uint64_t countAndFlagsBits = v370;
        v207._object = v108;
        String.append(_:)(v207);
        swift_bridgeObjectRelease();
        v208._uint64_t countAndFlagsBits = 0xD000000000000036;
        v208._object = (void *)0x800000010063E9A0;
        String.append(_:)(v208);
        (*v361)(v398, v358, v397);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        uint64_t v209 = v368;
        unint64_t v210 = (unint64_t)v346;
        goto LABEL_175;
      }
      uint64_t v387 = v108;
      char v118 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v405[0] = v114;
      if ((v118 & 1) == 0)
      {
        sub_10016A364();
        uint64_t v114 = *(void *)&v405[0];
      }
      swift_bridgeObjectRelease();
      id v119 = (int64_t *)(*(void *)(v114 + 56) + 16 * v115);
      uint64_t v120 = (void *)v119[1];
      int64_t v376 = *v119;
      sub_100560748(v115, v114);
      uint64_t v402 = v114;
      swift_bridgeObjectRelease();
      uint64_t v121 = (void (*)(void, void, void))*((void *)&v411 + 1);
      uint64_t v122 = v411;
      uint64_t v124 = (uint64_t)v371;
      unint64_t v123 = (unint64_t)v372;
      *uint64_t v371 = *v372;
      *(void *)(v124 + 16) = *(void *)(v123 + 16);
      *(_OWORD *)&v413[5] = __PAIR128__((unint64_t)v121, v122);
      uint64_t v369 = v413[1];
      v414[3] = v413[1];
      uint64_t v373 = v413[2];
      v414[4] = v413[2];
      unint64_t v125 = sub_1005086E4();
      if (v31)
      {
        sub_10000C5F4(v368, (unint64_t)v346);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1001D7C4C((uint64_t)&v409);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_116;
      }
      uint64_t v374 = v121;
      uint64_t v375 = v96;
      uint64_t v395 = v122;
      if (v126 >> 60 != 15)
      {
        *(void *)&v405[0] = v125;
        *((void *)&v405[0] + 1) = v126;
        sub_1000BEA14((uint64_t)v357, (uint64_t)v430, (uint64_t *)&unk_100722630);
        sub_1000BEA14((uint64_t)v430, (uint64_t)v431, (uint64_t *)&unk_100722630);
        if (v431[1])
        {
          uint64_t v127 = v389;
          static String.Encoding.utf8.getter();
          uint64_t v128 = String.data(using:allowLossyConversion:)();
          unint64_t v130 = v129;
          (*v353)(v127, v390);
          if (v130 >> 60 != 15)
          {
            sub_10002CEB0(v128, v130);
            sub_10051049C(v128, v130);
            sub_10000C5E0(v128, v130);
            sub_10000C5E0(v128, v130);
          }
        }
        long long v131 = v405[0];
        sub_10002CEB0(*(uint64_t *)&v405[0], *((unint64_t *)&v405[0] + 1));
        Class v132 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000C5F4(v131, *((unint64_t *)&v131 + 1));
        id v133 = (id)DigestSha256();

        if (!v133)
        {
          swift_bridgeObjectRelease();
          sub_1001D7C4C((uint64_t)&v409);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v400 = 0;
          unint64_t v401 = 0xE000000000000000;
          _StringGuts.grow(_:)(37);
          swift_bridgeObjectRelease();
          uint64_t v400 = 0x5B65646F6ELL;
          unint64_t v401 = 0xE500000000000000;
          v316._uint64_t countAndFlagsBits = v370;
          v316._object = v387;
          String.append(_:)(v316);
          swift_bridgeObjectRelease();
          v317._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
          v317._object = (void *)0x800000010063EAB0;
          String.append(_:)(v317);
          (*v361)(v398, v358, v397);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          uint64_t v318 = v368;
          unint64_t v319 = (unint64_t)v346;
          goto LABEL_174;
        }
        uint64_t v365 = v120;
        unint64_t v134 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v136 = v135;

        swift_bridgeObjectRetain();
        sub_10002CEB0((uint64_t)v134, v136);
        uint64_t v137 = Data.init(base16Encoded:)();
        unint64_t v139 = v138;
        v366 = v134;
        unint64_t v367 = v136;
        if (v138 >> 60 == 15)
        {
          sub_10000C5E0((uint64_t)v134, v136);
          sub_10000C5E0(v137, v139);
LABEL_173:
          swift_bridgeObjectRelease();
          sub_1001D7C4C((uint64_t)&v409);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v400 = 0;
          unint64_t v401 = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          swift_bridgeObjectRelease();
          uint64_t v400 = 0x5B65646F6ELL;
          unint64_t v401 = 0xE500000000000000;
          v320._uint64_t countAndFlagsBits = v370;
          v320._object = v387;
          String.append(_:)(v320);
          swift_bridgeObjectRelease();
          v321._uint64_t countAndFlagsBits = 0xD000000000000026;
          v321._object = (void *)0x800000010063EAD0;
          String.append(_:)(v321);
          (*v361)(v398, v358, v397);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_10000C5F4(v368, (unint64_t)v346);
          uint64_t v318 = (uint64_t)v366;
          unint64_t v319 = v367;
LABEL_174:
          sub_10000C5F4(v318, v319);
          unint64_t v210 = *((void *)&v405[0] + 1);
          uint64_t v209 = *(void *)&v405[0];
LABEL_175:
          sub_10000C5F4(v209, v210);
          return swift_release();
        }
        sub_10002CEB0((uint64_t)v134, v136);
        char v140 = sub_100510850((uint64_t)v134, v136, v137, v139);
        sub_10000C5E0(v137, v139);
        sub_10000C5F4((uint64_t)v134, v136);
        sub_10000C5F4((uint64_t)v134, v136);
        if ((v140 & 1) == 0) {
          goto LABEL_173;
        }
        sub_10000C5F4(v131, *((unint64_t *)&v131 + 1));
        sub_10000C5F4((uint64_t)v366, v367);
        uint64_t v121 = v374;
        uint64_t v122 = v395;
        uint64_t v120 = v365;
      }
      uint64_t v391 = 0;
      swift_bridgeObjectRelease();
      int64_t v141 = v376;
      *(void *)&v405[0] = v376;
      *((void *)&v405[0] + 1) = v120;
      swift_bridgeObjectRetain();
      v142._uint64_t countAndFlagsBits = 46;
      v142._object = (void *)0xE100000000000000;
      String.append(_:)(v142);
      swift_bridgeObjectRetain();
      v143._uint64_t countAndFlagsBits = v122;
      v143._object = v121;
      String.append(_:)(v143);
      swift_bridgeObjectRelease();
      uint64_t v144 = *((void *)&v405[0] + 1);
      uint64_t v387 = *(char **)&v405[0];
      *(void *)&v405[0] = v141;
      *((void *)&v405[0] + 1) = v120;
      uint64_t v400 = 46;
      unint64_t v401 = 0xE100000000000000;
      sub_1000B5358();
      uint64_t v39 = (void *)StringProtocol.components<A>(separatedBy:)();
      *(void *)&v405[0] = 0x6E692D646579656BLL;
      *((void *)&v405[0] + 1) = 0xE800000000000000;
      uint64_t v400 = 46;
      unint64_t v401 = 0xE100000000000000;
      uint64_t v145 = StringProtocol.components<A>(separatedBy:)();
      char v146 = sub_1004D0DC0(v145, v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v146 & 1) == 0)
      {
        uint64_t v101 = v386;
        char v102 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v405[0] = v101;
        sub_100562E48(&v409, (uint64_t)v387, v144, v102);
        uint64_t v386 = *(char **)&v405[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v48 = v396;
        int64_t v96 = v375;
        uint64_t v45 = v399;
        uint64_t v31 = v391;
        unint64_t v100 = v385;
        if (!v385) {
          continue;
        }
        goto LABEL_67;
      }
      break;
    }
    int64_t v376 = v144;
    uint64_t v45 = v399;
    uint64_t v147 = v435;
    uint64_t v31 = v391;
    uint64_t v39 = v387;
    int v148 = v374;
    if (!*(void *)(v399 + 16)) {
      goto LABEL_101;
    }
    swift_bridgeObjectRetain();
    uint64_t v149 = v395;
    unint64_t v150 = sub_100590548(v395, (uint64_t)v148);
    if ((v151 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_101:
      *(void *)&v405[0] = 0;
      *((void *)&v405[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v155._uint64_t countAndFlagsBits = 0xD000000000000017;
      v155._object = v351;
      String.append(_:)(v155);
      swift_bridgeObjectRetain();
      v156._uint64_t countAndFlagsBits = v395;
      v156._object = v148;
      String.append(_:)(v156);
      swift_bridgeObjectRelease();
      v157._uint64_t countAndFlagsBits = 8236;
      v157._object = (void *)0xE200000000000000;
      String.append(_:)(v157);
      uint64_t v158 = v409;
      uint64_t v159 = v148;
      uint64_t v160 = (void *)*((void *)&v409 + 1);
      swift_bridgeObjectRetain();
      v161._uint64_t countAndFlagsBits = v158;
      v161._object = v160;
      String.append(_:)(v161);
      swift_bridgeObjectRelease();
      v162._uint64_t countAndFlagsBits = 0xD000000000000028;
      v162._object = v352;
      String.append(_:)(v162);
      (*v361)(v398, v358, v397);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v163 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v164 = (*(unsigned __int8 *)(*(void *)v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v163 + 80);
      uint64_t v165 = swift_allocObject();
      *(_OWORD *)(v165 + 16) = v359;
      unint64_t v166 = v165 + v164;
      id v167 = (void *)(v166 + v163[14]);
      uint64_t v168 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, void, uint64_t))(*(void *)(v168 - 8) + 104))(v166, v360, v168);
      v167[3] = &type metadata for String;
      void *v167 = v395;
      v167[1] = v159;
      swift_bridgeObjectRetain();
      sub_10015C504(v165);
      uint64_t v169 = v388;
      uint64_t v170 = v147;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      (*v354)(v171, v169, v147);
      if (v362)
      {
        swift_willThrow();
        swift_errorRetain();
        sub_10000C5F4(v368, (unint64_t)v346);
        swift_bridgeObjectRelease();
        goto LABEL_182;
      }
      uint64_t v172 = v393;
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      (*v356)(v172, v394);
      (*v355)(v169, v147);
      goto LABEL_111;
    }
    uint64_t v152 = *(void *)(*(void *)(v45 + 56) + 8 * v150);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1001BF164(v149, (uint64_t)v148);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v373)
    {
      uint64_t v153 = *(void **)(v152 + 72);
      if (v153[2] && (v369 == v153[4] && v373 == v153[5] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_release();
        uint64_t v154 = v376;
LABEL_112:
        uint64_t v204 = v386;
        char v205 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v405[0] = v204;
        sub_100562E48(&v409, (uint64_t)v39, v154, v205);
        uint64_t v386 = *(char **)&v405[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v48 = v396;
        int64_t v96 = v375;
        unint64_t v100 = v385;
        if (!v385) {
          continue;
        }
LABEL_67:
        uint64_t v385 = (v100 - 1) & v100;
        unint64_t v103 = __clz(__rbit64(v100)) | (v96 << 6);
        goto LABEL_79;
      }
      uint64_t v373 = v152;
      *(void *)&v405[0] = 0;
      *((void *)&v405[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(72);
      v187._uint64_t countAndFlagsBits = 0xD000000000000020;
      v187._object = v343;
      String.append(_:)(v187);
      swift_bridgeObjectRetain();
      uint64_t v188 = v395;
      v189._uint64_t countAndFlagsBits = v395;
      v189._object = v148;
      String.append(_:)(v189);
      swift_bridgeObjectRelease();
      v190._uint64_t countAndFlagsBits = 8236;
      v190._object = (void *)0xE200000000000000;
      String.append(_:)(v190);
      uint64_t v191 = v409;
      uint64_t v192 = (uint64_t)v148;
      unint64_t v193 = (void *)*((void *)&v409 + 1);
      swift_bridgeObjectRetain();
      v194._uint64_t countAndFlagsBits = v191;
      v194._object = v193;
      String.append(_:)(v194);
      swift_bridgeObjectRelease();
      v195._uint64_t countAndFlagsBits = 0xD000000000000022;
      v195._object = v342;
      String.append(_:)(v195);
      (*v361)(v398, v358, v397);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v196 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v197 = (*(unsigned __int8 *)(*(void *)v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v196 + 80);
      uint64_t v198 = swift_allocObject();
      *(_OWORD *)(v198 + 16) = v359;
      unint64_t v199 = v198 + v197;
      uint64_t v200 = (uint64_t *)(v199 + v196[14]);
      uint64_t v201 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, void, uint64_t))(*(void *)(v201 - 8) + 104))(v199, v360, v201);
      v200[3] = (uint64_t)&type metadata for String;
      *uint64_t v200 = v188;
      v200[1] = v192;
      swift_bridgeObjectRetain();
      sub_10015C504(v198);
      uint64_t v169 = (char *)v381;
    }
    else
    {
      uint64_t v373 = v152;
      *(void *)&v405[0] = 0;
      *((void *)&v405[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v173._uint64_t countAndFlagsBits = 0xD000000000000017;
      v173._object = (void *)(v345 | 0x8000000000000000);
      String.append(_:)(v173);
      swift_bridgeObjectRetain();
      v174._uint64_t countAndFlagsBits = v149;
      v174._object = v148;
      String.append(_:)(v174);
      swift_bridgeObjectRelease();
      v175._uint64_t countAndFlagsBits = 8236;
      v175._object = (void *)0xE200000000000000;
      String.append(_:)(v175);
      uint64_t v176 = v409;
      uint64_t v177 = (uint64_t)v148;
      Swift::OpaquePointer v178 = (void *)*((void *)&v409 + 1);
      swift_bridgeObjectRetain();
      v179._uint64_t countAndFlagsBits = v176;
      v179._object = v178;
      String.append(_:)(v179);
      swift_bridgeObjectRelease();
      v180._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v180._object = v344;
      String.append(_:)(v180);
      (*v361)(v398, v358, v397);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v181 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v182 = (*(unsigned __int8 *)(*(void *)v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v181 + 80);
      uint64_t v183 = swift_allocObject();
      *(_OWORD *)(v183 + 16) = v359;
      unint64_t v184 = v183 + v182;
      uint64_t v185 = (uint64_t *)(v184 + v181[14]);
      uint64_t v186 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, void, uint64_t))(*(void *)(v186 - 8) + 104))(v184, v360, v186);
      v185[3] = (uint64_t)&type metadata for String;
      *uint64_t v185 = v149;
      v185[1] = v177;
      swift_bridgeObjectRetain();
      sub_10015C504(v183);
      uint64_t v169 = v382;
    }
    break;
  }
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v170 = v435;
  swift_allocError();
  (*v354)(v202, v169, v170);
  if (!v362)
  {
    uint64_t v203 = v393;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*v356)(v203, v394);
    (*v355)(v169, v170);
    swift_release();
LABEL_111:
    swift_errorRelease();
    uint64_t v31 = v391;
    uint64_t v45 = v399;
    uint64_t v154 = v376;
    uint64_t v39 = v387;
    goto LABEL_112;
  }
  swift_willThrow();
  swift_errorRetain();
  sub_10000C5F4(v368, (unint64_t)v346);
  swift_bridgeObjectRelease();
  swift_release();
LABEL_182:
  sub_1001D7C4C((uint64_t)&v409);
  (*v355)(v169, v170);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_183:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_errorRelease();
}

void sub_1001CCCD0(void *a1, unsigned char *a2, char *a3)
{
  id v308 = a1;
  uint64_t v5 = sub_100007764((uint64_t *)&unk_1007268D8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v307 = (char *)&v283 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v292 = (char *)&v283 - v8;
  uint64_t v9 = sub_100007764((uint64_t *)&unk_100726568);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v298 = (uint64_t)&v283 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v293 = (uint64_t)&v283 - v12;
  uint64_t v13 = (objc_class *)type metadata accessor for DIPError.PropertyKey();
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v314 = (unint64_t)&v283 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v313 = (char *)&v283 - v18;
  __chkstk_darwin(v17);
  uint64_t v312 = (char *)&v283 - v19;
  uint64_t v20 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v20 - 8);
  uint64_t v311 = (char *)&v283 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v309 = type metadata accessor for DIPSignpost();
  uint64_t v310 = *(void *)(v309 - 8);
  __chkstk_darwin(v309);
  Swift::String v317 = (char *)&v283 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v323 = type metadata accessor for DIPError();
  uint64_t v320 = *(void *)(v323 - 8);
  __chkstk_darwin(v323);
  unint64_t v319 = (char *)&v283 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v321 = type metadata accessor for DIPError.Code();
  uint64_t v322 = *(void *)(v321 - 8);
  __chkstk_darwin(v321);
  Swift::String v324 = (char *)&v283 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v326 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v326 - 8);
  uint64_t v26 = __chkstk_darwin(v326);
  char v296 = (char *)&v283 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  Swift::String v305 = (char *)&v283 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v297 = (char *)&v283 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v291 = (char *)&v283 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  unint64_t v294 = (char *)&v283 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  char v295 = (char *)&v283 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v306 = (char *)&v283 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v318 = (char *)&v283 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v283 - v43;
  __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v283 - v45;
  _Block_copy(a3);
  _Block_copy(a3);
  uint64_t v47 = sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v48 = sub_100007764((uint64_t *)&unk_100723460);
  uint64_t v49 = *(unsigned __int8 *)(*(void *)(v48 - 8) + 80);
  uint64_t v50 = (v49 + 32) & ~v49;
  uint64_t v51 = v50 + *(void *)(*(void *)(v48 - 8) + 72);
  uint64_t v303 = v47;
  uint64_t v300 = v51;
  uint64_t v301 = v49 | 7;
  uint64_t v52 = swift_allocObject();
  long long v299 = xmmword_100610730;
  *(_OWORD *)(v52 + 16) = xmmword_100610730;
  uint64_t v302 = v50;
  uint64_t v304 = v48;
  uint64_t v53 = v52 + v50 + *(int *)(v48 + 48);
  int64_t v54 = *(void (**)(void))(v14 + 104);
  Swift::String v316 = v13;
  char v315 = (objc_class *)(v14 + 104);
  v54();
  unint64_t v327 = a2;
  char v55 = a2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state];
  uint64_t v56 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state;
  *(void *)(v53 + 24) = &type metadata for DIPState;
  *(unsigned char *)uint64_t v53 = v55;
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  uint64_t v325 = a3;
  _Block_copy(a3);
  unint64_t v333 = sub_10015C504(v52);
  defaultLogger()();
  BOOL v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v57, v58))
  {
    int64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "coreidvd performVerification", v59, 2u);
    swift_slowDealloc();
  }

  unint64_t v62 = *(void (**)(void, void))(v25 + 8);
  uint64_t v60 = v25 + 8;
  uint64_t v61 = v62;
  uint64_t v63 = v326;
  v62(v46, v326);
  v64._object = (void *)0x800000010063F730;
  v65._uint64_t countAndFlagsBits = 0x3735666464613236;
  v65._object = (void *)0xE800000000000000;
  v64._uint64_t countAndFlagsBits = 0xD000000000000029;
  logMilestone(tag:description:)(v65, v64);
  id v66 = v327;
  if (v327[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius] == 1)
  {
    defaultLogger()();
    unint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = v63;
      char v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v70 = 0;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "performVerification called for Tiberius; nothing to do",
        v70,
        2u);
      swift_slowDealloc();

      v61(v44, v69);
    }
    else
    {

      v61(v44, v63);
      swift_bridgeObjectRelease();
    }
    v327[v56] = 4;
    int v79 = v325;
    (*((void (**)(char *, void, void, void))v325 + 2))(v325, 0, 0, 0);
    goto LABEL_14;
  }
  uint64_t v290 = v60;
  v71._uint64_t countAndFlagsBits = 0xD000000000000018;
  v71._object = (void *)0x800000010063F760;
  debugLogFootprint(_:)(v71);
  if ((sub_100190A8C() & 1) == 0)
  {
    (*(void (**)(char *, void, uint64_t))(v322 + 104))(v324, enum case for DIPError.Code.missingEntitlement(_:), v321);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v80 = swift_allocError();
LABEL_12:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    int v79 = v325;
    _Block_copy(v325);
    sub_1001C3B60(v80, (uint64_t)&v333, (uint64_t)v79);
    _Block_release(v79);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  unint64_t v72 = v66;
  OS_dispatch_group.wait()();
  if (*(void *)&v66[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__errorInInit])
  {
    swift_errorRetain();
    uint64_t v73 = v318;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v61(v73, v326);
    (*(void (**)(char *, void, uint64_t))(v322 + 104))(v324, enum case for DIPError.Code.restartCurrentTier(_:), v321);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    BOOL v74 = v319;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v75 = v323;
    uint64_t v76 = swift_allocError();
    uint64_t v77 = v320;
    (*(void (**)(uint64_t, char *, uint64_t))(v320 + 16))(v78, v74, v75);
    int v79 = v325;
    _Block_copy(v325);
    sub_1001C3B60(v76, (uint64_t)&v333, (uint64_t)v79);
    _Block_release(v79);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v74, v75);
    swift_bridgeObjectRelease();
LABEL_13:
    swift_errorRelease();
LABEL_14:
    _Block_release(v79);
    _Block_release(v79);
    _Block_release(v79);
    _Block_release(v79);
    _Block_release(v79);
    _Block_release(v79);
    return;
  }
  uint64_t v81 = *(void **)&v66[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
  if (!v81)
  {
    (*(void (**)(char *, void, uint64_t))(v322 + 104))(v324, enum case for DIPError.Code.unexpectedDaemonState(_:), v321);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v80 = swift_allocError();
    goto LABEL_12;
  }
  char v287 = v61;
  uint64_t v286 = 0xD000000000000029;
  uint64_t v284 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow;
  uint64_t v288 = 0xD000000000000016;
  swift_retain();
  static DaemonSignposts.performVerificationTotal.getter();
  DIPSignpost.init(_:)();
  uint64_t v82 = (uint64_t)v312;
  unint64_t v83 = v316;
  ((void (*)(char *, void, objc_class *))v54)(v312, enum case for DIPError.PropertyKey.inoProviderID(_:), v316);
  char v84 = v54;
  int64_t v85 = (void *)v81[2];
  unint64_t v86 = v85[8];
  char v87 = (unsigned char *)v85[9];
  uint64_t v330 = &type metadata for String;
  unint64_t v328 = v86;
  unint64_t v329 = v87;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_10055ED78((uint64_t)&v328, v82);
  ((void (*)(uint64_t, void, objc_class *))v84)(v82, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v83);
  unint64_t v89 = v85[2];
  uint64_t v88 = (unsigned char *)v85[3];
  uint64_t v330 = &type metadata for String;
  unint64_t v328 = v89;
  unint64_t v329 = v88;
  swift_bridgeObjectRetain();
  sub_10055ED78((uint64_t)&v328, v82);
  uint64_t v90 = (uint64_t)v313;
  ((void (*)(char *, void, objc_class *))v84)(v313, enum case for DIPError.PropertyKey.spProviderID(_:), v83);
  char v289 = v81;
  int64_t v91 = (void *)v81[3];
  uint64_t v312 = (char *)v56;
  uint64_t v285 = v84;
  if (v91)
  {
    unint64_t v93 = v91[8];
    uint64_t v92 = (unsigned char *)v91[9];
    int v79 = (char *)&type metadata for String;
    uint64_t v330 = &type metadata for String;
    unint64_t v328 = v93;
    unint64_t v329 = v92;
    swift_bridgeObjectRetain();
    sub_10055ED78((uint64_t)&v328, v90);
    uint64_t v94 = v314;
    ((void (*)(unint64_t, void, objc_class *))v84)(v314, enum case for DIPError.PropertyKey.spWorkflowID(_:), v83);
    uint64_t v95 = v91[2];
    unint64_t v96 = v91[3];
    swift_bridgeObjectRetain();
  }
  else
  {
    int v79 = (char *)&type metadata for String;
    uint64_t v330 = &type metadata for String;
    uint64_t v95 = 0x414C494156414E55;
    unint64_t v96 = 0xEB00000000454C42;
    unint64_t v328 = 0x414C494156414E55;
    unint64_t v329 = (unsigned char *)0xEB00000000454C42;
    sub_10055ED78((uint64_t)&v328, v90);
    uint64_t v94 = v314;
    ((void (*)(unint64_t, void, objc_class *))v84)(v314, enum case for DIPError.PropertyKey.spWorkflowID(_:), v83);
  }
  uint64_t v97 = (void *)0xD00000000000002FLL;
  uint64_t v330 = &type metadata for String;
  unint64_t v328 = v95;
  unint64_t v329 = (unsigned char *)v96;
  sub_10055ED78((uint64_t)&v328, v94);
  swift_endAccess();
  uint64_t v98 = *(void *)&v72[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
  uint64_t v99 = *(void *)&v72[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
  unint64_t v100 = [self standardUserDefaults];
  v101._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v101._object = (void *)0x800000010063E120;
  Swift::Bool v102 = NSUserDefaults.internalBool(forKey:)(v101);

  unint64_t v103 = v289;
  if (!v102
    && (sub_10020F0CC(v98, v99, *(void **)(v289[2] + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_applicationACL)) & 1) == 0)
  {
    (*(void (**)(char *, void, uint64_t))(v322 + 104))(v324, enum case for DIPError.Code.missingEntitlement(_:), v321);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v136 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    int v79 = v325;
    _Block_copy(v325);
    sub_1001C3B60(v136, (uint64_t)&v333, (uint64_t)v79);
    _Block_release(v79);
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  if (!v308)
  {
    unint64_t v109 = (unint64_t)sub_10006691C();
    if (v109 >> 62) {
      uint64_t v110 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v110 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    long long v111 = (objc_class *)v323;
    long long v112 = v324;
    uint64_t v113 = (uint64_t)v307;
    swift_bridgeObjectRelease();
    uint64_t v114 = v322;
    if (!v110)
    {
      id v167 = v297;
      defaultLogger()();
      uint64_t v168 = Logger.logObject.getter();
      uint64_t v169 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v168, (os_log_type_t)v169))
      {
        uint64_t v170 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v170 = 0;
        _os_log_impl((void *)&_mh_execute_header, v168, (os_log_type_t)v169, "Workflow does not containing any pages; skipping ahead to proofing",
          v170,
          2u);
        swift_slowDealloc();
      }

      v287(v167, v326);
      uint64_t v171 = sub_100007764((uint64_t *)&unk_1007268E0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 56))(v113, 1, 1, v171);
      uint64_t v172 = v298;
      Swift::String v173 = v327;
      sub_100196DF4(v298);
      swift_release();
      sub_10000C6CC(v113, (uint64_t *)&unk_1007268D8);
      sub_10000C6CC(v172, (uint64_t *)&unk_100726568);
      v312[(void)v173] = 4;
      Swift::String v194 = v296;
      defaultLogger()();
      Swift::String v195 = Logger.logObject.getter();
      os_log_type_t v196 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v195, v196))
      {
        unint64_t v197 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v197 = 0;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v195, v196, " state set to PROOFED", v197, 2u);
        swift_slowDealloc();

        v287(v194, v326);
      }
      else
      {

        v287(v194, v326);
        swift_bridgeObjectRelease();
      }
      uint64_t v205 = v310;
      uint64_t v206 = v309;
      int v79 = v325;
      (*((void (**)(char *, void, void, void))v325 + 2))(v325, 0, 0, 0);
      goto LABEL_89;
    }
    unint64_t v115 = v305;
    defaultLogger()();
    char v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v116, v117))
    {
      char v118 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v118 = 0;
      _os_log_impl((void *)&_mh_execute_header, v116, v117, "sending 1st page back", v118, 2u);
      swift_slowDealloc();
    }

    v287(v115, v326);
    v312[(void)v327] = 3;
    uint64_t v119 = v103[757];
    unint64_t v120 = (unint64_t)sub_10006691C();
    if (v120 >> 62) {
      uint64_t v121 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v121 = *(void *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    int v79 = v325;
    swift_bridgeObjectRelease();
    if (v119 >= v121)
    {
      uint64_t v166 = v321;
      (*(void (**)(char *, void, uint64_t))(v114 + 104))(v112, enum case for DIPError.Code.unexpectedDaemonState(_:), v321);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      int v174 = 0;
      goto LABEL_68;
    }
    unint64_t v122 = v103[757];
    unint64_t v123 = (unint64_t)sub_10006691C();
    if ((v123 & 0xC000000000000001) == 0)
    {
      if ((v122 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v122 < *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v124 = *(id *)(v123 + 8 * v122 + 32);
        goto LABEL_37;
      }
      __break(1u);
      goto LABEL_159;
    }
LABEL_156:
    id v124 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_37:
    unint64_t v122 = (unint64_t)v124;
    swift_bridgeObjectRelease();
    uint64_t v125 = v103[757];
    BOOL v126 = __OFADD__(v125, 1);
    uint64_t v127 = v125 + 1;
    if (!v126)
    {
      v103[757] = v127;
      swift_bridgeObjectRelease();
      v128._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
      v128._object = (void *)0x800000010063F880;
      v129._uint64_t countAndFlagsBits = 0x3266656261363438;
      v129._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v129, v128);
      sub_100084160();
      long long v111 = v130;
      unint64_t v131 = (unint64_t)sub_10006691C();
      if (!(v131 >> 62))
      {
        uint64_t v132 = *(void *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_40:
        swift_bridgeObjectRelease();
        (*((void (**)(char *, objc_class *, uint64_t, void))v79 + 2))(v79, v111, v132, 0);

        v133._object = (void *)0x800000010063F810;
        v133._uint64_t countAndFlagsBits = v288;
        debugLogFootprint(_:)(v133);
        v134.value._uint64_t countAndFlagsBits = sub_10006BAA8();
        unint64_t v135 = v317;
        DIPSignpost.end(workflowID:isBackground:)(v134, (Swift::Bool_optional)2);
        swift_bridgeObjectRelease();
LABEL_41:
        swift_release();
        (*(void (**)(char *, uint64_t))(v310 + 8))(v135, v309);
        goto LABEL_14;
      }
LABEL_160:
      uint64_t v132 = _CocoaArrayWrapper.endIndex.getter();
      goto LABEL_40;
    }
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  unint64_t v104 = v312;
  if (v312[(void)v72] < 3u)
  {
    unint64_t v328 = 0;
    unint64_t v329 = (unsigned char *)0xE000000000000000;
    id v105 = v308;
    _StringGuts.grow(_:)(63);
    v106._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
    v106._object = (void *)0x800000010063F9B0;
    String.append(_:)(v106);
    LOBYTE(v332) = v104[(void)v72];
    _print_unlocked<A, B>(_:_:)();
    v107._uint64_t countAndFlagsBits = 46;
    v107._object = (void *)0xE100000000000000;
    String.append(_:)(v107);
    (*(void (**)(char *, void, uint64_t))(v322 + 104))(v324, enum case for DIPError.Code.invalidCallSequence(_:), v321);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v108 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    int v79 = v325;
    _Block_copy(v325);
    sub_1001C3B60(v108, (uint64_t)&v333, (uint64_t)v79);
    _Block_release(v79);

    swift_bridgeObjectRelease();
LABEL_43:
    swift_errorRelease();
    v137._object = (void *)0x800000010063F810;
    v137._uint64_t countAndFlagsBits = v288;
    debugLogFootprint(_:)(v137);
LABEL_44:
    swift_release();
    (*(void (**)(char *, uint64_t))(v310 + 8))(v317, v309);
    goto LABEL_14;
  }
  uint64_t v138 = v103[757];
  unint64_t v139 = v138 - 1;
  if (__OFSUB__(v138, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v83 = (objc_class *)v308;
    char v140 = sub_10006691C();
    unint64_t v100 = v140;
    unint64_t v104 = v306;
    if (((unint64_t)v140 & 0xC000000000000001) == 0)
    {
      if ((v139 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v139 < *(void *)(((unint64_t)v140 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        int64_t v141 = v140[v139 + 4].isa;
        goto LABEL_50;
      }
      __break(1u);
      goto LABEL_141;
    }
  }
  int64_t v141 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_50:
  Swift::String v142 = v141;
  swift_bridgeObjectRelease();
  long long v111 = v142;
  id v143 = [(objc_class *)v83 page];
  unint64_t v314 = (unint64_t)v143 - 1;
  if (__OFSUB__(v143, 1))
  {
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  id v331 = 0;
  defaultLogger()();
  uint64_t v144 = Logger.logObject.getter();
  os_log_type_t v145 = static os_log_type_t.debug.getter();
  uint64_t v146 = v145;
  if (os_log_type_enabled(v144, v145))
  {
    uint64_t v147 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v147 = 134349056;
    unint64_t v328 = v314;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v144, (os_log_type_t)v146, "pageIndex is %{public}ld", v147, 0xCu);
    swift_slowDealloc();
  }

  v287(v104, v326);
  if ((uint64_t)[(objc_class *)v83 page] <= 0)
  {

    uint64_t v175 = v322;
    uint64_t v176 = v324;
    (*(void (**)(char *, void, uint64_t))(v322 + 104))(v324, enum case for DIPError.Code.invalidPage(_:), v321);
    uint64_t v177 = swift_allocObject();
    *(_OWORD *)(v177 + 16) = v299;
    Swift::OpaquePointer v178 = (void *)(v177 + v302 + *(int *)(v304 + 48));
    v285();
    uint64_t v114 = v175;
    id v179 = [(objc_class *)v83 page];
    v178[3] = &type metadata for Int;
    *Swift::OpaquePointer v178 = v179;
    sub_10015C504(v177);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    Swift::String v180 = v111;
    long long v111 = (objc_class *)v323;
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    long long v112 = v176;
    uint64_t v166 = v321;
    goto LABEL_66;
  }
  id v148 = [(objc_class *)v83 page];
  uint64_t v149 = v103[757];
  unint64_t v150 = v149 - 1;
  if (__OFSUB__(v149, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v146 = (uint64_t)v148;
    unint64_t v151 = (unint64_t)sub_10006691C();
    if ((v151 & 0xC000000000000001) == 0)
    {
      if ((v150 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v150 < *(void *)((v151 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v152 = *(id *)(v151 + 8 * v150 + 32);
        goto LABEL_59;
      }
      __break(1u);
      goto LABEL_156;
    }
  }
  id v152 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_59:
  uint64_t v153 = v152;
  swift_bridgeObjectRelease();
  id v154 = [v153 page];

  if ((uint64_t)v154 < v146)
  {
    unint64_t v328 = 0;
    unint64_t v329 = (unsigned char *)0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v155._uint64_t countAndFlagsBits = 0xD000000000000010;
    v155._object = (void *)0x800000010063F940;
    String.append(_:)(v155);
    id v332 = [(objc_class *)v83 page];
    v156._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v156);
    swift_bridgeObjectRelease();
    v157._object = (void *)0x800000010063F960;
    v157._uint64_t countAndFlagsBits = v286;
    String.append(_:)(v157);
    id v158 = [(objc_class *)v111 page];

    id v332 = v158;
    v159._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v159);
    swift_bridgeObjectRelease();
    unint64_t v327 = v329;
    uint64_t v160 = v321;
    uint64_t v114 = v322;
    Swift::String v161 = v324;
    (*(void (**)(char *, void, uint64_t))(v322 + 104))(v324, enum case for DIPError.Code.invalidPage(_:), v321);
    uint64_t v162 = swift_allocObject();
    *(_OWORD *)(v162 + 16) = v299;
    uint64_t v163 = v111;
    unint64_t v164 = (void *)(v162 + v302 + *(int *)(v304 + 48));
    v285();
    id v165 = [(objc_class *)v83 page];
    v164[3] = &type metadata for Int;
    *unint64_t v164 = v165;
    sub_10015C504(v162);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    long long v111 = (objc_class *)v323;
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    long long v112 = v161;
    uint64_t v166 = v160;
LABEL_66:

    int v174 = 0;
LABEL_67:
    int v79 = v325;
LABEL_68:
    uint64_t v181 = v310;
    (*(void (**)(char *, void, uint64_t))(v114 + 104))(v112, enum case for DIPError.Code.internalError(_:), v166);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v199 = v319;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v200 = swift_allocError();
    uint64_t v201 = v320;
    (*(void (**)(uint64_t, char *, objc_class *))(v320 + 16))(v202, v199, v111);
    _Block_copy(v79);
    sub_1001C3B60(v200, (uint64_t)&v333, (uint64_t)v79);
    _Block_release(v79);
    swift_errorRelease();
    (*(void (**)(char *, objc_class *))(v201 + 8))(v199, v111);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    v203._object = (void *)0x800000010063F810;
    v203._uint64_t countAndFlagsBits = v288;
    debugLogFootprint(_:)(v203);
    if (v174)
    {
      v204.value._uint64_t countAndFlagsBits = sub_10006BAA8();
      DIPSignpost.end(workflowID:isBackground:)(v204, (Swift::Bool_optional)2);
      swift_bridgeObjectRelease();
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v181 + 8))(v317, v309);
    goto LABEL_14;
  }
  Swift::String v316 = v111;

  char v315 = v83;
  id v182 = [(objc_class *)v83 page];
  uint64_t v183 = v103[757];
  unint64_t v184 = v183 - 1;
  if (__OFSUB__(v183, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v146 = (uint64_t)v182;
    unint64_t v185 = (unint64_t)sub_10006691C();
    if ((v185 & 0xC000000000000001) == 0)
    {
      if ((v184 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v184 < *(void *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v186 = *(id *)(v185 + 8 * v184 + 32);
        goto LABEL_74;
      }
      __break(1u);
LABEL_165:
      swift_bridgeObjectRetain();
      uint64_t v192 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
      uint64_t v191 = v316;
      goto LABEL_79;
    }
  }
  uint64_t v186 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_74:
  Swift::String v187 = (objc_class *)v186;
  swift_bridgeObjectRelease();
  id v188 = [(objc_class *)v187 page];

  if (v146 >= (uint64_t)v188)
  {
    uint64_t v193 = (uint64_t)v103;
    goto LABEL_83;
  }
  Swift::String v189 = (uint64_t *)&v327[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages];
  swift_beginAccess();
  uint64_t v190 = *v189;
  if ((*v189 & 0xC000000000000001) != 0) {
    goto LABEL_165;
  }
  uint64_t v191 = v316;
  if ((v314 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_167;
  }
  if (v314 >= *(void *)((v190 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_167:
    __break(1u);
    goto LABEL_168;
  }
  uint64_t v192 = (objc_class *)*(id *)(v190 + 8 * v314 + 32);
LABEL_79:
  uint64_t v193 = (uint64_t)v103;

  Swift::String v316 = v192;
LABEL_83:
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(&v328, (uint64_t)v330);
  dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()();
  uint64_t v198 = (char *)sub_1001C6950(v315, v316, v193);
  uint64_t v211 = v210;
  uint64_t v313 = v198;
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v328);
  if (v211)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v212 = (void *)_convertErrorToNSError(_:)();
    id v213 = [v212 domain];
    uint64_t v214 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v216 = v215;

    if (v214 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v216 == v217)
    {
      swift_bridgeObjectRelease_n();

      unint64_t v218 = v287;
    }
    else
    {
      char v230 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      unint64_t v218 = v287;
      if ((v230 & 1) == 0)
      {
        (*(void (**)(char *, void, uint64_t))(v322 + 104))(v324, enum case for DIPError.Code.internalError(_:), v321);
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v146 = swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
LABEL_110:
        Swift::String v187 = v315;
        swift_errorRelease();
        uint64_t v238 = v318;
        defaultLogger()();
        DIPRecordError(_:message:log:)();
        v218(v238, v326);
        sub_100084160();
        uint64_t v97 = v239;
        unint64_t v240 = (unint64_t)sub_10006691C();
        if (!(v240 >> 62))
        {
          uint64_t v241 = *(void *)((v240 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_112:
          int v79 = v325;
          swift_bridgeObjectRelease();
          sub_100566008((id)v146);
          uint64_t v242 = (void *)_convertErrorToNSError(_:)();
          (*((void (**)(char *, void *, uint64_t, void *))v79 + 2))(v79, v97, v241, v242);

          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          v243._object = (void *)0x800000010063F810;
          v243._uint64_t countAndFlagsBits = v288;
          debugLogFootprint(_:)(v243);
          goto LABEL_44;
        }
LABEL_168:
        uint64_t v241 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_112;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v146 = v211;
    goto LABEL_110;
  }
  uint64_t v219 = v295;
  defaultLogger()();
  unint64_t v220 = v193;
  swift_retain_n();
  uint64_t v221 = v315;
  int v79 = v327;
  uint64_t v222 = Logger.logObject.getter();
  os_log_type_t v223 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v222, v223))
  {
    uint64_t v224 = swift_slowAlloc();
    *(_DWORD *)uint64_t v224 = 134349568;
    unint64_t v328 = (unint64_t)[(objc_class *)v221 page];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v225 = (char *)v221;

    *(_WORD *)(v224 + 12) = 2050;
    unint64_t v226 = &v79[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages];
    swift_beginAccess();
    if (*(void *)v226 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v227 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v227 = *(void *)((*(void *)v226 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v328 = v227;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v224 + 22) = 2050;
    unint64_t v228 = (unint64_t)sub_10006691C();
    if (v228 >> 62) {
      uint64_t v229 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v229 = *(void *)((v228 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    unint64_t v220 = (unint64_t)v289;
    swift_release();
    unint64_t v328 = v229;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v222, v223, " page = %{public}ld, submittedPages = %{public}ld, totalPages = %{public}ld", (uint8_t *)v224, 0x20u);
    swift_slowDealloc();
    uint64_t v219 = v295;
    uint64_t v221 = (objc_class *)v225;
  }
  else
  {
    swift_release_n();
  }
  v287(v219, v326);
  unint64_t v231 = v316;
  unint64_t v232 = (void *)sub_100190E68(v221, v316, v314, v220);

  id v331 = v232;
  if (!v232)
  {
    uint64_t v244 = sub_100007764((uint64_t *)&unk_1007268E0);
    uint64_t v245 = (uint64_t)v292;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v244 - 8) + 56))(v292, 1, 1, v244);
    uint64_t v258 = sub_100196DF4(v293);
    uint64_t v318 = (char *)v221;
    sub_10000C6CC(v245, (uint64_t *)&unk_1007268D8);
    sub_10000C6CC(v293, (uint64_t *)&unk_100726568);
    if (v258)
    {
      *(void *)&v327[v284] = v258;
      swift_retain_n();
      swift_release();
      Class v259 = &v79[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages];
      swift_beginAccess();
      *(void *)Class v259 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      unint64_t v260 = sub_10015DB5C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v261 = (unint64_t *)&v79[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
      swift_beginAccess();
      *uint64_t v261 = v260;
      swift_bridgeObjectRelease();
      uint64_t v262 = *(void *)(v258 + 6056);
      unint64_t v263 = (unint64_t)sub_10006691C();
      if (v263 >> 62) {
        uint64_t v264 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v264 = *(void *)((v263 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v262 >= v264)
      {
        uint64_t v278 = v322;
        long long v112 = v324;
        uint64_t v166 = v321;
        (*(void (**)(char *, void, uint64_t))(v322 + 104))(v324, enum case for DIPError.Code.unexpectedDaemonState(_:), v321);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        long long v111 = (objc_class *)v323;
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();

        uint64_t v114 = v278;
        swift_release_n();

        int v174 = 1;
        goto LABEL_67;
      }
      unint64_t v265 = *(void *)(v258 + 6056);
      unint64_t v266 = (unint64_t)sub_10006691C();
      if ((v266 & 0xC000000000000001) == 0)
      {
        if ((v265 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v265 < *(void *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v267 = *(id *)(v266 + 8 * v265 + 32);
          goto LABEL_129;
        }
        __break(1u);
        goto LABEL_177;
      }
      id v267 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_129:
      unint64_t v265 = (unint64_t)v267;
      swift_bridgeObjectRelease();
      uint64_t v268 = *(void *)(v258 + 6056);
      BOOL v126 = __OFADD__(v268, 1);
      uint64_t v269 = v268 + 1;
      if (!v126)
      {
        *(void *)(v258 + 6056) = v269;
        swift_bridgeObjectRelease();
        sub_100084160();
        unint64_t v231 = v270;
        unint64_t v271 = (unint64_t)sub_10006691C();
        if (!(v271 >> 62))
        {
          uint64_t v272 = *(void *)((v271 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_132:
          swift_bridgeObjectRelease();
          uint64_t v273 = v272;
          int v79 = v325;
          (*((void (**)(char *, objc_class *, uint64_t, void))v325 + 2))(v325, v231, v273, 0);

          swift_release_n();
          v274._object = (void *)0x800000010063F810;
          v274._uint64_t countAndFlagsBits = v288;
          debugLogFootprint(_:)(v274);
          v275.value._uint64_t countAndFlagsBits = sub_10006BAA8();
          unint64_t v135 = v317;
          DIPSignpost.end(workflowID:isBackground:)(v275, (Swift::Bool_optional)2);
          swift_bridgeObjectRelease();
          goto LABEL_41;
        }
LABEL_178:
        uint64_t v272 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_132;
      }
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }
    v312[(void)v327] = 4;
    defaultLogger()();
    unint64_t v100 = Logger.logObject.getter();
    os_log_type_t v276 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v100, v276))
    {
      uint64_t v277 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v277 = 0;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v100, v276, " state set to PROOFED", v277, 2u);
      swift_slowDealloc();

      v287(v291, v326);
      goto LABEL_143;
    }
LABEL_142:

    v287(v291, v326);
    swift_bridgeObjectRelease();
LABEL_143:
    if (v289[746])
    {
      uint64_t v279 = v289[747];
      if (v279)
      {
        if (*(void *)(v279 + 16) >= 3uLL && !*(void *)&v79[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator])
        {
          if (qword_10071F4D0 != -1) {
            swift_once();
          }
          swift_retain();
          sub_100205680();
          swift_release();
        }
      }
    }
    v280._uint64_t countAndFlagsBits = 0xD000000000000035;
    v280._object = (void *)0x800000010063F8B0;
    v281._uint64_t countAndFlagsBits = 0x3130353364613635;
    v281._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v281, v280);
    int v79 = v325;
    (*((void (**)(char *, void, void, void))v325 + 2))(v325, 0, 0, 0);

    uint64_t v205 = v310;
    uint64_t v206 = v309;
LABEL_89:
    v207._object = (void *)0x800000010063F810;
    v207._uint64_t countAndFlagsBits = v288;
    debugLogFootprint(_:)(v207);
    v208.value._uint64_t countAndFlagsBits = sub_10006BAA8();
    uint64_t v209 = v317;
    DIPSignpost.end(workflowID:isBackground:)(v208, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v205 + 8))(v209, v206);
    goto LABEL_14;
  }
  defaultLogger()();
  swift_retain_n();
  char v233 = Logger.logObject.getter();
  os_log_type_t v234 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v233, v234))
  {
    swift_release_n();

    v287(v294, v326);
    swift_bridgeObjectRelease();
LABEL_115:
    v246._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v246._object = (void *)0x800000010063F8F0;
    v247._uint64_t countAndFlagsBits = 0x6364613635613838;
    v247._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v247, v246);
    swift_beginAccess();
    id v248 = v331;
    int v79 = v325;
    if (v331)
    {
      id v249 = v331;
      sub_100084160();
      unint64_t v251 = v250;
    }
    else
    {
      unint64_t v251 = 0;
    }
    uint64_t v252 = v309;
    unint64_t v253 = (unint64_t)sub_10006691C();
    if (v253 >> 62) {
      uint64_t v254 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v254 = *(void *)((v253 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    (*((void (**)(char *, void *, uint64_t, void))v79 + 2))(v79, v251, v254, 0);

    v255._object = (void *)0x800000010063F810;
    v255._uint64_t countAndFlagsBits = v288;
    debugLogFootprint(_:)(v255);
    v256.value._uint64_t countAndFlagsBits = sub_10006BAA8();
    unint64_t v257 = v317;
    DIPSignpost.end(workflowID:isBackground:)(v256, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v310 + 8))(v257, v252);
    goto LABEL_14;
  }
  uint64_t v235 = swift_slowAlloc();
  *(_DWORD *)uint64_t v235 = 134349312;
  swift_beginAccess();
  if (v331)
  {
    unint64_t v328 = (unint64_t)[v331 page];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v235 + 12) = 2050;
    unint64_t v236 = (unint64_t)sub_10006691C();
    if (v236 >> 62) {
      uint64_t v237 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v237 = *(void *)((v236 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v328 = v237;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v233, v234, "sending page %{public}ld / %{public}ld to client", (uint8_t *)v235, 0x16u);
    swift_slowDealloc();

    v287(v294, v326);
    goto LABEL_115;
  }
  uint64_t v282 = v325;
  _Block_release(v325);
  _Block_release(v282);
  _Block_release(v282);
  _Block_release(v282);
  _Block_release(v282);
  _Block_release(v282);
  _Block_release(v282);
  swift_release();
  __break(1u);
}

uint64_t sub_1001D0164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v3 = sub_100007764((uint64_t *)&unk_1007264F0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v31 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v29 - v6;
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DIPError();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.internalError(_:), v10);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v32 = v15;
  uint64_t v18 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 16);
  v18(v19, v17, v14);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v29);
  swift_errorRelease();
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = (uint64_t)v30;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v30, 1, 1, v20);
  uint64_t v23 = (void *)swift_allocError();
  v18(v24, v17, v14);
  sub_100566008(v23);
  uint64_t v25 = (uint64_t)v31;
  swift_errorRelease();
  sub_100048D6C(v22, v25, (uint64_t *)&unk_1007264F0);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v25, 1, v20) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v20);
  }
  uint64_t v27 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, Class, void *))(v33 + 16))(v33, isa, v27);

  swift_errorRelease();
  sub_10000C6CC(v22, (uint64_t *)&unk_1007264F0);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v17, v14);
}

void sub_1001D0664(unint64_t a1, unsigned char *a2, const void *a3)
{
  uint64_t v214 = a2;
  unint64_t v197 = a1;
  uint64_t v4 = sub_100007764((uint64_t *)&unk_1007264F0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v186 = (char *)&v178 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v188 = (char *)&v178 - v7;
  uint64_t v193 = type metadata accessor for UUID();
  uint64_t v187 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  uint64_t v192 = (char *)&v178 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = sub_100007764(&qword_1007265A0);
  uint64_t v194 = *(void *)(v196 - 8);
  uint64_t v9 = __chkstk_darwin(v196);
  uint64_t v191 = (char *)&v178 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = v10;
  __chkstk_darwin(v9);
  Swift::String v195 = (char *)&v178 - v11;
  uint64_t v212 = type metadata accessor for DIPError();
  uint64_t v206 = *(void *)(v212 - 8);
  __chkstk_darwin(v212);
  uint64_t v205 = (char *)&v178 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v13 - 8);
  Swift::String_optional v204 = (char *)&v178 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = type metadata accessor for DIPSignpost();
  uint64_t v201 = *(void *)(v202 - 8);
  __chkstk_darwin(v202);
  Swift::String_optional v208 = (char *)&v178 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  Swift::String v203 = (char *)&v178 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v178 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v178 - v23;
  uint64_t v25 = type metadata accessor for DIPError.Code();
  uint64_t v209 = *(void *)(v25 - 8);
  uint64_t v210 = v25;
  __chkstk_darwin(v25);
  uint64_t v211 = (char *)&v178 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  Swift::String v189 = (char *)&v178 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  Swift::String v207 = (char *)&v178 - v32;
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v178 - v33;
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  id v213 = a3;
  _Block_copy(a3);
  defaultLogger()();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "coreidvd shareVerificationResult", v37, 2u);
    swift_slowDealloc();
  }

  uint64_t v38 = *(void (**)(char *, uint64_t))(v28 + 8);
  uint64_t v200 = v27;
  uint64_t v199 = v28 + 8;
  uint64_t v198 = v38;
  v38(v34, v27);
  v39._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  v39._object = (void *)0x800000010063F600;
  v40._uint64_t countAndFlagsBits = 0x3466373737313563;
  v40._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v40, v39);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v41 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v42 = (*(unsigned __int8 *)(*(void *)v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v41 + 80);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_100610730;
  unint64_t v44 = v43 + v42 + v41[14];
  uint64_t v45 = *(void (**)(void))(v17 + 104);
  v45();
  uint64_t v46 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state;
  uint64_t v47 = v214;
  char v48 = v214[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state];
  *(void *)(v44 + 24) = &type metadata for DIPState;
  *(unsigned char *)unint64_t v44 = v48;
  unint64_t v222 = sub_10015C504(v43);
  if ((sub_100190A8C() & 1) == 0)
  {
    (*(void (**)(char *, void, uint64_t))(v209 + 104))(v211, enum case for DIPError.Code.missingEntitlement(_:), v210);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v64 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v50 = v213;
LABEL_10:
    _Block_copy(v50);
    sub_1001D0164(v64, (uint64_t)&v222, (uint64_t)v50);
    _Block_release(v50);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    goto LABEL_72;
  }
  int v49 = v47[v46];
  uint64_t v50 = v213;
  if (v49 != 4 && v49 != 8)
  {
    uint64_t v217 = 0;
    unint64_t v218 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v65._uint64_t countAndFlagsBits = 0xD000000000000031;
    v65._object = (void *)0x800000010063F660;
    String.append(_:)(v65);
    LOBYTE(v220) = v214[v46];
    _print_unlocked<A, B>(_:_:)();
    v66._uint64_t countAndFlagsBits = 0x657461747320;
    v66._object = (void *)0xE600000000000000;
    String.append(_:)(v66);
    (*(void (**)(char *, void, uint64_t))(v209 + 104))(v211, enum case for DIPError.Code.restartCurrentTier(_:), v210);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v67 = v205;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v68 = v212;
    uint64_t v69 = swift_allocError();
    uint64_t v70 = v206;
    (*(void (**)(uint64_t, char *, uint64_t))(v206 + 16))(v71, v67, v68);
    _Block_copy(v50);
    sub_1001D0164(v69, (uint64_t)&v222, (uint64_t)v50);
    _Block_release(v50);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v68);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    goto LABEL_72;
  }
  uint64_t v51 = *(void *)&v214[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
  if (!v51)
  {
    (*(void (**)(char *, void, uint64_t))(v209 + 104))(v211, enum case for DIPError.Code.unexpectedDaemonState(_:), v210);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v64 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    goto LABEL_10;
  }
  uint64_t v184 = v46;
  ((void (*)(char *, void, uint64_t))v45)(v24, enum case for DIPError.PropertyKey.inoProviderID(_:), v16);
  uint64_t v52 = *(void **)(v51 + 16);
  uint64_t v53 = v51;
  uint64_t v54 = v52[8];
  unint64_t v55 = v52[9];
  uint64_t v219 = &type metadata for String;
  uint64_t v217 = v54;
  unint64_t v218 = v55;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10055ED78((uint64_t)&v217, (uint64_t)v24);
  ((void (*)(char *, void, uint64_t))v45)(v24, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v16);
  uint64_t v57 = v52[2];
  unint64_t v56 = v52[3];
  uint64_t v219 = &type metadata for String;
  uint64_t v217 = v57;
  unint64_t v218 = v56;
  swift_bridgeObjectRetain();
  sub_10055ED78((uint64_t)&v217, (uint64_t)v24);
  ((void (*)(char *, void, uint64_t))v45)(v22, enum case for DIPError.PropertyKey.spProviderID(_:), v16);
  uint64_t v185 = v53;
  os_log_type_t v58 = *(void **)(v53 + 24);
  if (v58)
  {
    uint64_t v60 = v58[8];
    unint64_t v59 = v58[9];
    uint64_t v219 = &type metadata for String;
    uint64_t v217 = v60;
    unint64_t v218 = v59;
    swift_bridgeObjectRetain();
    sub_10055ED78((uint64_t)&v217, (uint64_t)v22);
    uint64_t v61 = (uint64_t)v203;
    ((void (*)(char *, void, uint64_t))v45)(v203, enum case for DIPError.PropertyKey.spWorkflowID(_:), v16);
    uint64_t v62 = v58[2];
    unint64_t v63 = v58[3];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v219 = &type metadata for String;
    uint64_t v62 = 0x414C494156414E55;
    unint64_t v63 = 0xEB00000000454C42;
    uint64_t v217 = 0x414C494156414E55;
    unint64_t v218 = 0xEB00000000454C42;
    sub_10055ED78((uint64_t)&v217, (uint64_t)v22);
    uint64_t v61 = (uint64_t)v203;
    ((void (*)(char *, void, uint64_t))v45)(v203, enum case for DIPError.PropertyKey.spWorkflowID(_:), v16);
  }
  uint64_t v219 = &type metadata for String;
  uint64_t v217 = v62;
  unint64_t v218 = v63;
  sub_10055ED78((uint64_t)&v217, v61);
  swift_endAccess();
  v72._uint64_t countAndFlagsBits = 0xD000000000000015;
  v72._object = (void *)0x800000010063F6A0;
  debugLogFootprint(_:)(v72);
  static DaemonSignposts.shareVerificationResultTotal.getter();
  DIPSignpost.init(_:)();
  unint64_t v73 = v52[16];
  if (v73)
  {
    uint64_t v74 = v52[15];
    ((void (*)(char *, void, uint64_t))v45)(v24, enum case for DIPError.PropertyKey.inoLaunchTier(_:), v16);
    uint64_t v219 = &type metadata for String;
    uint64_t v217 = v74;
    unint64_t v218 = v73;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_10055ED78((uint64_t)&v217, (uint64_t)v24);
    swift_endAccess();
  }
  uint64_t v75 = v214;
  sub_1001BA220(v185);
  uint64_t v76 = 0;
  uint64_t v77 = *(void **)&v75[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context];
  if (v77 && (id v78 = [v77 httpHeaders]) != 0)
  {
    int v79 = v78;
    uint64_t v80 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v80 = 0;
  }
  uint64_t v81 = (void *)kDISharingOptionHttpHeader;
  *(void *)&long long v220 = kDISharingOptionHttpHeader;
  type metadata accessor for DISharingOption(0);
  uint64_t v83 = v82;
  uint64_t v84 = sub_1001C6628(&qword_10071F9D0, type metadata accessor for DISharingOption);
  id v85 = v81;
  uint64_t v182 = v83;
  uint64_t v181 = v84;
  AnyHashable.init<A>(_:)();
  unint64_t v86 = v197;
  if (*(void *)(v197 + 16) && (unint64_t v87 = sub_100590504((uint64_t)&v217), (v88 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v86 + 56) + 32 * v87, (uint64_t)&v220);
  }
  else
  {
    long long v220 = 0u;
    long long v221 = 0u;
  }
  sub_1001D90FC((uint64_t)&v217);
  if (*((void *)&v221 + 1))
  {
    sub_100007764(&qword_100726808);
    if (swift_dynamicCast()) {
      unint64_t v89 = v215;
    }
    else {
      unint64_t v89 = 0;
    }
  }
  else
  {
    sub_10000C6CC((uint64_t)&v220, (uint64_t *)&unk_100727200);
    unint64_t v89 = 0;
  }
  uint64_t v217 = (uint64_t)&_swiftEmptyDictionarySingleton;
  if (v80)
  {
    uint64_t v90 = swift_bridgeObjectRetain();
    sub_100184A74(v90, &v217, "sp headers from context: %s = %s");
    swift_bridgeObjectRelease();
  }
  Swift::String v180 = v89;
  if (v89)
  {
    uint64_t v91 = swift_bridgeObjectRetain();
    sub_100184A74(v91, &v217, "sp headers from share options: %s = %s");
    swift_bridgeObjectRelease();
  }
  uint64_t v92 = v214;
  id v183 = (id)v80;
  uint64_t v93 = _sSo16DIHttpHeaderNamea8coreidvdE8allCasesSayABGvgZ_0();
  uint64_t v94 = *(char **)(v93 + 16);
  if (!v94)
  {
    unint64_t v96 = &_swiftEmptyDictionarySingleton;
LABEL_54:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v215 = (void (*)(void))kDISharingOptionNonce;
    id v130 = kDISharingOptionNonce;
    AnyHashable.init<A>(_:)();
    unint64_t v131 = v197;
    if (*(void *)(v197 + 16) && (unint64_t v132 = sub_100590504((uint64_t)&v217), (v133 & 1) != 0))
    {
      sub_10003BC28(*(void *)(v131 + 56) + 32 * v132, (uint64_t)&v220);
    }
    else
    {
      long long v220 = 0u;
      long long v221 = 0u;
    }
    sub_1001D90FC((uint64_t)&v217);
    if (*((void *)&v221 + 1))
    {
      if (swift_dynamicCast())
      {
        unint64_t v135 = v215;
        uint64_t v134 = v216;
        if (String.count.getter() > 64)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v209 + 104))(v211, enum case for DIPError.Code.invalidSPNonce(_:), v210);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
LABEL_69:
          uint64_t v50 = v213;
          defaultLogger()();
          uint64_t v153 = Logger.logObject.getter();
          os_log_type_t v154 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v153, v154))
          {
            Swift::String v155 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)Swift::String v155 = 0;
            _os_log_impl((void *)&_mh_execute_header, v153, v154, " state set to SHAREFAILED", v155, 2u);
            uint64_t v50 = v213;
            swift_slowDealloc();
          }

          v198(v207, v200);
          (*(void (**)(char *, void, uint64_t))(v209 + 104))(v211, enum case for DIPError.Code.internalError(_:), v210);
          swift_errorRetain();
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          Swift::String v156 = v205;
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          uint64_t v157 = v212;
          uint64_t v158 = swift_allocError();
          uint64_t v159 = v206;
          (*(void (**)(uint64_t, char *, uint64_t))(v206 + 16))(v160, v156, v157);
          _Block_copy(v50);
          sub_1001D0164(v158, (uint64_t)&v222, (uint64_t)v50);
          _Block_release(v50);
          swift_errorRelease();
          (*(void (**)(char *, uint64_t))(v159 + 8))(v156, v157);
          swift_bridgeObjectRelease();
          swift_errorRelease();
          v214[v184] = 8;
          v161._uint64_t countAndFlagsBits = 0xD000000000000013;
          v161._object = (void *)0x800000010063F6C0;
          debugLogFootprint(_:)(v161);
          swift_release();
          (*(void (**)(char *, uint64_t))(v201 + 8))(v208, v202);
          goto LABEL_72;
        }
LABEL_66:
        uint64_t v138 = (void *)swift_allocObject();
        uint64_t v139 = v185;
        v138[2] = v92;
        v138[3] = v139;
        v138[4] = v135;
        v138[5] = v134;
        swift_retain();
        id v140 = v92;
        uint64_t v141 = v196;
        Swift::String v142 = v195;
        Swift::String_optional v204 = (char *)0xD00000000000001ELL;
        runAsyncAndBlock<A>(timeout:file:function:line:_:)();
        if (v76)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_69;
        }
        swift_release();
        id v183 = v140;
        uint64_t v143 = v194;
        uint64_t v144 = *(void (**)(char *, char *, uint64_t))(v194 + 16);
        Swift::String v203 = (char *)0x800000010063D480;
        os_log_type_t v145 = v191;
        v144(v191, v142, v141);
        unint64_t v146 = (*(unsigned __int8 *)(v143 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
        unint64_t v147 = (v190 + v146 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v197 = 0x800000010063F630;
        uint64_t v148 = swift_allocObject();
        uint64_t v149 = v183;
        *(void *)(v148 + 16) = v183;
        (*(void (**)(unint64_t, char *, uint64_t))(v143 + 32))(v148 + v146, v145, v196);
        *(void *)(v148 + v147) = v139;
        *(void *)(v148 + ((v147 + 15) & 0xFFFFFFFFFFFFFFF8)) = v96;
        swift_retain();
        id v150 = v149;
        uint64_t v151 = v193;
        id v152 = v192;
        runAsyncAndBlock<A>(timeout:file:function:line:_:)();
        swift_release();
        uint64_t v162 = v189;
        defaultLogger()();
        uint64_t v163 = Logger.logObject.getter();
        os_log_type_t v164 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v163, v164))
        {
          id v165 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v165 = 0;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v163, v164, " state set to SHAREDONE", v165, 2u);
          swift_slowDealloc();

          v198(v162, v200);
        }
        else
        {

          v198(v162, v200);
          swift_bridgeObjectRelease();
        }
        uint64_t v50 = v213;
        uint64_t v166 = (uint64_t)v188;
        uint64_t v167 = v187;
        uint64_t v168 = (uint64_t)v186;
        uint64_t v169 = v195;
        v170._uint64_t countAndFlagsBits = 0xD000000000000027;
        v170._object = (void *)0x800000010063F6E0;
        v171._uint64_t countAndFlagsBits = 0x3932363265326332;
        v171._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v171, v170);
        (*(void (**)(uint64_t, char *, uint64_t))(v167 + 16))(v166, v152, v151);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v167 + 56))(v166, 0, 1, v151);
        sub_100048D6C(v166, v168, (uint64_t *)&unk_1007264F0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v168, 1, v151) == 1)
        {
          Class isa = 0;
        }
        else
        {
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v168, v151);
        }
        uint64_t v173 = v194;
        (*((void (**)(const void *, Class, void))v50 + 2))(v50, isa, 0);

        sub_10000C6CC(v166, (uint64_t *)&unk_1007264F0);
        (*(void (**)(char *, uint64_t))(v167 + 8))(v152, v151);
        (*(void (**)(char *, uint64_t))(v173 + 8))(v169, v196);
        v214[v184] = 7;
        v174.value._uint64_t countAndFlagsBits = sub_10006BAA8();
        uint64_t v175 = v208;
        DIPSignpost.end(workflowID:isBackground:)(v174, (Swift::Bool_optional)2);
        swift_bridgeObjectRelease();
        v176._uint64_t countAndFlagsBits = 0xD000000000000013;
        v176._object = (void *)0x800000010063F6C0;
        debugLogFootprint(_:)(v176);
        swift_release();
        (*(void (**)(char *, uint64_t))(v201 + 8))(v175, v202);
LABEL_72:
        _Block_release(v50);
        _Block_release(v50);
        _Block_release(v50);
        _Block_release(v50);
        return;
      }
    }
    else
    {
      sub_10000C6CC((uint64_t)&v220, (uint64_t *)&unk_100727200);
    }
    uint64_t v136 = sub_100195524(v185, 1, (uint64_t)v96);
    if (v76)
    {
      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
    unint64_t v135 = v136;
    uint64_t v134 = v137;
    uint64_t v92 = v214;
    goto LABEL_66;
  }
  uint64_t v179 = 0;
  swift_bridgeObjectRetain();
  uint64_t v95 = 0;
  unint64_t v96 = &_swiftEmptyDictionarySingleton;
  Swift::String v203 = v94;
  while (1)
  {
    uint64_t v97 = *(void **)(v93 + 8 * v95 + 32);
    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v100 = v99;
    uint64_t v101 = v217;
    if (*(void *)(v217 + 16)) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_36:
    if (v94 == (char *)++v95)
    {
      swift_bridgeObjectRelease();
      uint64_t v92 = v214;
      uint64_t v76 = v179;
      goto LABEL_54;
    }
  }
  uint64_t v102 = v98;
  unint64_t v103 = v97;
  unint64_t v104 = sub_100590548(v102, v100);
  if ((v105 & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_36;
  }
  Swift::String_optional v204 = v103;
  uint64_t v106 = v93;
  Swift::String v107 = (uint64_t *)(*(void *)(v101 + 56) + 16 * v104);
  uint64_t v108 = *v107;
  uint64_t v109 = v107[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v112 = v111;
  uint64_t v113 = v96;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v220 = v96;
  unint64_t v116 = sub_100590548(v110, v112);
  uint64_t v117 = v96[2];
  BOOL v118 = (v115 & 1) == 0;
  uint64_t v119 = v117 + v118;
  if (!__OFADD__(v117, v118))
  {
    char v120 = v115;
    if (v113[3] >= v119)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v123 = (void *)v220;
        if ((v115 & 1) == 0) {
          goto LABEL_43;
        }
      }
      else
      {
        sub_10016A364();
        unint64_t v123 = (void *)v220;
        if ((v120 & 1) == 0) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      sub_100164294(v119, isUniquelyReferenced_nonNull_native);
      unint64_t v121 = sub_100590548(v110, v112);
      if ((v120 & 1) != (v122 & 1)) {
        goto LABEL_82;
      }
      unint64_t v116 = v121;
      unint64_t v123 = (void *)v220;
      if ((v120 & 1) == 0)
      {
LABEL_43:
        v123[(v116 >> 6) + 8] |= 1 << v116;
        id v124 = (uint64_t *)(v123[6] + 16 * v116);
        *id v124 = v110;
        v124[1] = v112;
        uint64_t v125 = (void *)(v123[7] + 16 * v116);
        *uint64_t v125 = v108;
        v125[1] = v109;
        uint64_t v126 = v123[2];
        BOOL v127 = __OFADD__(v126, 1);
        uint64_t v128 = v126 + 1;
        if (v127) {
          goto LABEL_81;
        }
        unint64_t v96 = v123;
        v123[2] = v128;
        swift_bridgeObjectRetain();
        goto LABEL_49;
      }
    }
    unint64_t v96 = v123;
    Swift::String v129 = (void *)(v123[7] + 16 * v116);
    swift_bridgeObjectRelease();
    void *v129 = v108;
    v129[1] = v109;
LABEL_49:
    uint64_t v93 = v106;
    uint64_t v94 = v203;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_36;
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  uint64_t v177 = v213;
  _Block_release(v213);
  _Block_release(v177);
  _Block_release(v177);
  _Block_release(v177);
  _Block_release(v177);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_1001D22C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a3;
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.internalError(_:), v6);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v14 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 16);
  v14(v15, v13, v10);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v21);
  swift_errorRelease();
  uint64_t v16 = (void *)swift_allocError();
  v14(v17, v13, v10);
  sub_100566008(v16);
  swift_errorRelease();
  uint64_t v18 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0, v18);

  swift_errorRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_1001D2678(uint64_t a1, unsigned char *a2, const void *a3)
{
  uint64_t v196 = a1;
  uint64_t v194 = sub_100007764(&qword_1007265A0);
  uint64_t v190 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  uint64_t v193 = (char *)&v177 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v6 - 8);
  uint64_t v186 = (char *)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = type metadata accessor for DIPError();
  uint64_t v205 = *(void *)(v211 - 8);
  __chkstk_darwin(v211);
  Swift::String_optional v204 = (char *)&v177 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v9 - 8);
  Swift::String v189 = (char *)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = type metadata accessor for TiberiusIdentitySharingRequest(0);
  __chkstk_darwin(v187);
  uint64_t v192 = (uint64_t)&v177 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v12 - 8);
  uint64_t v200 = (char *)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = type metadata accessor for DIPSignpost();
  uint64_t v201 = *(void *)(v206 - 8);
  uint64_t v14 = __chkstk_darwin(v206);
  uint64_t v202 = (char *)&v177 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  Swift::String v207 = (char *)&v177 - v16;
  uint64_t v17 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v208 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v198 = (char *)&v177 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v199 = (char *)&v177 - v21;
  __chkstk_darwin(v20);
  Swift::String v203 = (char *)&v177 - v22;
  uint64_t v23 = type metadata accessor for DIPError.Code();
  uint64_t v24 = *(uint8_t **)(v23 - 8);
  uint64_t v209 = v23;
  uint64_t v210 = v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v177 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  Swift::String v195 = (char *)&v177 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  unint64_t v197 = (char *)&v177 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v185 = (char *)&v177 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  id v188 = (char *)&v177 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v191 = (char *)&v177 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v177 - v40;
  __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v177 - v42;
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  uint64_t v212 = (void (**)(void, void, void))a3;
  _Block_copy(a3);
  defaultLogger()();
  unint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "coreidvd getVerificationResult", v46, 2u);
    swift_slowDealloc();
  }

  int v49 = *(void (**)(char *, uint64_t))(v28 + 8);
  uint64_t v48 = v28 + 8;
  uint64_t v47 = v49;
  v49(v43, v27);
  v50._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v50._object = (void *)0x800000010063F3C0;
  v51._uint64_t countAndFlagsBits = 0x6566643037643566;
  v51._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v51, v50);
  if (sub_1001BE4C0())
  {
    defaultLogger()();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "getVerificationResult called for Tiberius warmup; nothing to do",
        v54,
        2u);
      swift_slowDealloc();
    }

    v47(v41, v27);
    unint64_t v55 = v212;
    v212[2](v212, 0, 0);
    a2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state] = 7;
    goto LABEL_17;
  }
  uint64_t v184 = v47;
  uint64_t v183 = v27;
  sub_100007764((uint64_t *)&unk_1007225C0);
  unint64_t v56 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v57 = (*(unsigned __int8 *)(*(void *)v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v56 + 80);
  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = xmmword_100610730;
  unint64_t v59 = v58 + v57 + v56[14];
  uint64_t v60 = *(void (**)(void))(v208 + 104);
  v60();
  uint64_t v61 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state;
  char v62 = a2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state];
  *(void *)(v59 + 24) = &type metadata for DIPState;
  *(unsigned char *)unint64_t v59 = v62;
  unint64_t v220 = sub_10015C504(v58);
  if ((sub_100190A8C() & 1) == 0)
  {
    (*((void (**)(char *, void, uint64_t))v210 + 13))(v26, enum case for DIPError.Code.missingEntitlement(_:), v209);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v79 = swift_allocError();
LABEL_14:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    unint64_t v55 = v212;
    _Block_copy(v212);
    sub_1001D22C8(v79, (uint64_t)&v220, (uint64_t)v55);
    _Block_release(v55);
    swift_bridgeObjectRelease();
LABEL_16:
    swift_errorRelease();
LABEL_17:
    _Block_release(v55);
    _Block_release(v55);
    _Block_release(v55);
    unint64_t v87 = v55;
    goto LABEL_18;
  }
  int v63 = a2[v61];
  if (v63 != 4 && v63 != 8)
  {
    uint64_t v215 = 0;
    unint64_t v216 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v80._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v80._object = (void *)0x800000010063F460;
    String.append(_:)(v80);
    LOBYTE(v218) = a2[v61];
    _print_unlocked<A, B>(_:_:)();
    v81._uint64_t countAndFlagsBits = 0x657461747320;
    v81._object = (void *)0xE600000000000000;
    String.append(_:)(v81);
    (*((void (**)(char *, void, uint64_t))v210 + 13))(v26, enum case for DIPError.Code.restartCurrentTier(_:), v209);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v82 = v204;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v83 = v211;
    uint64_t v84 = swift_allocError();
    uint64_t v85 = v205;
    (*(void (**)(uint64_t, char *, uint64_t))(v205 + 16))(v86, v82, v83);
    unint64_t v55 = v212;
    _Block_copy(v212);
    sub_1001D22C8(v84, (uint64_t)&v220, (uint64_t)v55);
    _Block_release(v55);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v82, v83);
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v64 = *(void *)&a2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
  if (!v64)
  {
    (*((void (**)(char *, void, uint64_t))v210 + 13))(v26, enum case for DIPError.Code.unexpectedDaemonState(_:), v209);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v79 = swift_allocError();
    goto LABEL_14;
  }
  uint64_t v178 = v61;
  uint64_t v65 = (uint64_t)v203;
  ((void (*)(char *, void, uint64_t))v60)(v203, enum case for DIPError.PropertyKey.inoProviderID(_:), v17);
  Swift::String v66 = *(void **)(v64 + 16);
  uint64_t v67 = v66[8];
  unint64_t v68 = v66[9];
  uint64_t v217 = &type metadata for String;
  uint64_t v215 = v67;
  unint64_t v216 = v68;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10055ED78((uint64_t)&v215, v65);
  ((void (*)(uint64_t, void, uint64_t))v60)(v65, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v17);
  uint64_t v70 = v66[2];
  unint64_t v69 = v66[3];
  uint64_t v179 = v66;
  uint64_t v217 = &type metadata for String;
  uint64_t v215 = v70;
  unint64_t v216 = v69;
  swift_bridgeObjectRetain();
  sub_10055ED78((uint64_t)&v215, v65);
  uint64_t v71 = (uint64_t)v199;
  ((void (*)(char *, void, uint64_t))v60)(v199, enum case for DIPError.PropertyKey.spProviderID(_:), v17);
  uint64_t v72 = *(void *)(v64 + 24);
  uint64_t v208 = v64;
  uint64_t v181 = v26;
  uint64_t v180 = v72;
  if (v72)
  {
    uint64_t v74 = *(void *)(v72 + 64);
    unint64_t v73 = *(void *)(v72 + 72);
    uint64_t v75 = v72;
    uint64_t v217 = &type metadata for String;
    uint64_t v215 = v74;
    unint64_t v216 = v73;
    swift_bridgeObjectRetain();
    sub_10055ED78((uint64_t)&v215, v71);
    uint64_t v76 = v198;
    ((void (*)(char *, void, uint64_t))v60)(v198, enum case for DIPError.PropertyKey.spWorkflowID(_:), v17);
    uint64_t v78 = *(void *)(v75 + 16);
    unint64_t v77 = *(void *)(v75 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v217 = &type metadata for String;
    uint64_t v78 = 0x414C494156414E55;
    unint64_t v77 = 0xEB00000000454C42;
    uint64_t v215 = 0x414C494156414E55;
    unint64_t v216 = 0xEB00000000454C42;
    sub_10055ED78((uint64_t)&v215, v71);
    uint64_t v76 = v198;
    ((void (*)(char *, void, uint64_t))v60)(v198, enum case for DIPError.PropertyKey.spWorkflowID(_:), v17);
  }
  uint64_t v88 = (uint64_t)v76;
  unint64_t v89 = v184;
  uint64_t v90 = v179;
  uint64_t v217 = &type metadata for String;
  uint64_t v215 = v78;
  unint64_t v216 = v77;
  sub_10055ED78((uint64_t)&v215, v88);
  swift_endAccess();
  v91._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v91._object = (void *)0x800000010063F4C0;
  debugLogFootprint(_:)(v91);
  static DaemonSignposts.getVerificationResultTotal.getter();
  DIPSignpost.init(_:)();
  unint64_t v92 = v90[16];
  if (v92)
  {
    uint64_t v93 = v90[15];
    uint64_t v94 = (uint64_t)v203;
    ((void (*)(char *, void, uint64_t))v60)(v203, enum case for DIPError.PropertyKey.inoLaunchTier(_:), v17);
    uint64_t v217 = &type metadata for String;
    uint64_t v215 = v93;
    unint64_t v216 = v92;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_10055ED78((uint64_t)&v215, v94);
    swift_endAccess();
  }
  static DaemonSignposts.getVerificationResultPrepare.getter();
  uint64_t v95 = v202;
  DIPSignpost.init(_:)();
  unint64_t v96 = a2;
  if (v180 && (*(unsigned char *)(v180 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingFormat) & 1) == 0)
  {
    unint64_t v103 = v191;
    defaultLogger()();
    unint64_t v104 = Logger.logObject.getter();
    os_log_type_t v105 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v104, v105))
    {
      uint64_t v106 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v106 = 0;
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "Using Tiberius sharing payload", v106, 2u);
      unint64_t v89 = v184;
      swift_slowDealloc();
    }

    v89(v103, v183);
    uint64_t v107 = v192;
    sub_1001A7400(v208, v192);
    uint64_t v182 = v48;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_1001C6628(&qword_1007268B0, (void (*)(uint64_t))type metadata accessor for TiberiusIdentitySharingRequest);
    uint64_t v135 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v137 = v136;
    sub_1001D961C(v107, type metadata accessor for TiberiusIdentitySharingRequest);
    uint64_t v138 = v201;
    goto LABEL_46;
  }
  uint64_t v97 = (void *)kDISharingOptionNonce;
  uint64_t v213 = kDISharingOptionNonce;
  type metadata accessor for DISharingOption(0);
  sub_1001C6628(&qword_10071F9D0, type metadata accessor for DISharingOption);
  id v98 = v97;
  AnyHashable.init<A>(_:)();
  uint64_t v99 = v196;
  if (*(void *)(v196 + 16))
  {
    unint64_t v100 = sub_100590504((uint64_t)&v215);
    uint64_t v101 = v195;
    if (v102)
    {
      sub_10003BC28(*(void *)(v99 + 56) + 32 * v100, (uint64_t)&v218);
    }
    else
    {
      long long v218 = 0u;
      long long v219 = 0u;
    }
    unint64_t v89 = v184;
  }
  else
  {
    long long v218 = 0u;
    long long v219 = 0u;
    unint64_t v89 = v184;
    uint64_t v101 = v195;
  }
  uint64_t v108 = v201;
  sub_1001D90FC((uint64_t)&v215);
  uint64_t v182 = v48;
  if (!*((void *)&v219 + 1))
  {
    sub_10000C6CC((uint64_t)&v218, (uint64_t *)&unk_100727200);
    goto LABEL_39;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_39:
    uint64_t v110 = 0;
    unint64_t v109 = 0xE000000000000000;
    goto LABEL_40;
  }
  uint64_t v110 = v213;
  unint64_t v109 = v214;
  if (String.count.getter() <= 64)
  {
LABEL_40:
    defaultLogger()();
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v113 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v113 = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Using default sharing payload", v113, 2u);
      swift_slowDealloc();
    }

    v89(v101, v183);
    uint64_t v114 = (void *)swift_allocObject();
    v114[2] = a2;
    v114[3] = v208;
    v114[4] = v110;
    void v114[5] = v109;
    swift_retain();
    char v115 = a2;
    uint64_t v116 = v194;
    uint64_t v117 = v193;
    runAsyncAndBlock<A>(timeout:file:function:line:_:)();
    uint64_t v177 = a2;
    uint64_t v118 = v108;
    swift_release();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_1000B6120(&qword_100725E68, &qword_1007265A0);
    uint64_t v132 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v134 = v133;
    (*(void (**)(char *, uint64_t))(v190 + 8))(v117, v116);
    unint64_t v137 = v134;
    uint64_t v135 = v132;
    uint64_t v138 = v118;
    unint64_t v96 = v177;
LABEL_46:
    swift_release();
    static String.Encoding.utf8.getter();
    uint64_t v139 = String.init(data:encoding:)();
    uint64_t v141 = v188;
    if (v140)
    {
      uint64_t v142 = v139;
      unint64_t v143 = v140;
      uint64_t v144 = *(void *)(v208 + 24);
      if (v144 && (*(unsigned char *)(v144 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingFormat) & 1) == 0)
      {
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v158 = Logger.logObject.getter();
        os_log_type_t v159 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v158, v159))
        {
          uint64_t v160 = (uint8_t *)swift_slowAlloc();
          uint64_t v211 = swift_slowAlloc();
          uint64_t v215 = v211;
          *(_DWORD *)uint64_t v160 = 136315138;
          uint64_t v210 = v160 + 4;
          swift_bridgeObjectRetain();
          *(void *)&long long v218 = sub_100110D58(v142, v143, &v215);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v158, v159, "Tiberius payload: %s", v160, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v89 = v184;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        v89(v141, v183);
        v161._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
        v161._object = (void *)0x800000010063F570;
        v162._uint64_t countAndFlagsBits = 0x3938363937346336;
        v162._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v162, v161);
        uint64_t v138 = v201;
      }
      else
      {
        v145._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
        v145._object = (void *)0x800000010063F530;
        v146._uint64_t countAndFlagsBits = 0x3233326439326339;
        v146._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v146, v145);
      }
      uint64_t v163 = v185;
      defaultLogger()();
      os_log_type_t v164 = Logger.logObject.getter();
      os_log_type_t v165 = static os_log_type_t.info.getter();
      BOOL v166 = os_log_type_enabled(v164, v165);
      uint64_t v177 = v96;
      if (v166)
      {
        uint64_t v167 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v167 = 0;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v164, v165, " state set to SHAREDONE", v167, 2u);
        uint64_t v138 = v201;
        swift_slowDealloc();

        v89(v163, v183);
      }
      else
      {

        v89(v163, v183);
        swift_bridgeObjectRelease();
      }
      uint64_t v168 = (uint64_t)v186;
      uint64_t v169 = v206;
      NSString v170 = String._bridgeToObjectiveC()();
      id v152 = v212;
      ((void (**)(void, NSString, void))v212)[2](v212, v170, 0);

      swift_bridgeObjectRelease();
      sub_10000C5F4(v135, v137);
      uint64_t v153 = *(void (**)(char *, uint64_t))(v138 + 8);
      v153(v202, v169);
      Swift::String v171 = v177;
      v177[v178] = 7;
      v172.value._uint64_t countAndFlagsBits = sub_10006BAA8();
      uint64_t v173 = v207;
      DIPSignpost.end(workflowID:isBackground:)(v172, (Swift::Bool_optional)2);
      swift_bridgeObjectRelease();
      Date.init()();
      uint64_t v174 = type metadata accessor for Date();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v174 - 8) + 56))(v168, 0, 1, v174);
      uint64_t v175 = (uint64_t)&v171[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate];
      swift_beginAccess();
      sub_1001D9214(v168, v175, &qword_1007239B0);
      swift_endAccess();
      v176._uint64_t countAndFlagsBits = 0xD000000000000018;
      v176._object = (void *)0x800000010063F4E0;
      debugLogFootprint(_:)(v176);
      swift_release();
      Swift::String v156 = v173;
      uint64_t v157 = v169;
    }
    else
    {
      swift_bridgeObjectRelease();
      (*((void (**)(char *, void, uint64_t))v210 + 13))(v181, enum case for DIPError.Code.jwsEncodingFailed(_:), v209);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      unint64_t v147 = v204;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v148 = v211;
      swift_allocError();
      uint64_t v149 = v205;
      (*(void (**)(uint64_t, char *, uint64_t))(v205 + 16))(v150, v147, v148);
      uint64_t v151 = (void *)_convertErrorToNSError(_:)();
      id v152 = v212;
      ((void (**)(void, void, void *))v212)[2](v212, 0, v151);

      swift_errorRelease();
      sub_10000C5F4(v135, v137);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v147, v148);
      uint64_t v153 = *(void (**)(char *, uint64_t))(v138 + 8);
      uint64_t v154 = v206;
      v153(v202, v206);
      v155._uint64_t countAndFlagsBits = 0xD000000000000018;
      v155._object = (void *)0x800000010063F4E0;
      debugLogFootprint(_:)(v155);
      swift_release();
      Swift::String v156 = v207;
      uint64_t v157 = v154;
    }
    v153(v156, v157);
    _Block_release(v152);
    _Block_release(v152);
    _Block_release(v152);
    unint64_t v87 = v152;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  (*((void (**)(char *, void, uint64_t))v210 + 13))(v181, enum case for DIPError.Code.invalidSPNonce(_:), v209);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  uint64_t v119 = *(void (**)(char *, uint64_t))(v108 + 8);
  v119(v95, v206);
  uint64_t v120 = v183;
  unint64_t v121 = v197;
  defaultLogger()();
  char v122 = Logger.logObject.getter();
  os_log_type_t v123 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v122, v123))
  {
    id v124 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v124 = 0;
    _os_log_impl((void *)&_mh_execute_header, v122, v123, " state set to SHAREFAILED", v124, 2u);
    swift_slowDealloc();
  }

  v184(v121, v120);
  (*((void (**)(char *, void, uint64_t))v210 + 13))(v181, enum case for DIPError.Code.internalError(_:), v209);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v125 = v204;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v126 = v211;
  uint64_t v127 = swift_allocError();
  uint64_t v128 = v205;
  (*(void (**)(uint64_t, char *, uint64_t))(v205 + 16))(v129, v125, v126);
  id v130 = v212;
  _Block_copy(v212);
  sub_1001D22C8(v127, (uint64_t)&v220, (uint64_t)v130);
  _Block_release(v130);
  swift_errorRelease();
  (*(void (**)(char *, uint64_t))(v128 + 8))(v125, v126);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  v96[v178] = 8;
  v131._uint64_t countAndFlagsBits = 0xD000000000000018;
  v131._object = (void *)0x800000010063F4E0;
  debugLogFootprint(_:)(v131);
  swift_release();
  v119(v207, v206);
  _Block_release(v130);
  _Block_release(v130);
  _Block_release(v130);
  unint64_t v87 = v130;
LABEL_18:
  _Block_release(v87);
}

void sub_1001D4604(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v138 = a4;
  uint64_t v147 = a3;
  uint64_t v145 = a2;
  uint64_t v139 = a1;
  uint64_t v131 = type metadata accessor for DIPError.Code();
  uint64_t v130 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v132 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = type metadata accessor for DIPError();
  uint64_t v134 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  unint64_t v133 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for DispatchTime();
  uint64_t v141 = *(void *)(v146 - 8);
  uint64_t v6 = __chkstk_darwin(v146);
  unint64_t v137 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v140 = (uint64_t)&v127 - v8;
  uint64_t v144 = type metadata accessor for Logger();
  uint64_t v143 = *(void *)(v144 - 8);
  uint64_t v9 = __chkstk_darwin(v144);
  uint64_t v11 = (char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v148 = (char *)&v127 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v136 = (char *)&v127 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v129 = (char *)&v127 - v17;
  __chkstk_darwin(v16);
  uint64_t v128 = (char *)&v127 - v18;
  uint64_t v19 = type metadata accessor for DeviceInformationProvider();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = 0;
  uint64_t v142 = v23 + 16;
  uint64_t v157 = 0;
  uint64_t v158 = 0;
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  uint64_t v154 = 0;
  uint64_t v24 = dispatch_group_create();
  dispatch_group_enter(v24);
  if (qword_10071F580 != -1) {
    swift_once();
  }
  uint64_t v25 = (void *)qword_1007607E8;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v23;
  *(void *)(v26 + 24) = v24;
  id v27 = v25;
  uint64_t v149 = v23;
  swift_retain();
  uint64_t v28 = v24;
  sub_1004E7ABC((uint64_t)v139, v145, (uint64_t)sub_1001D59C8, v26);

  swift_release();
  DeviceInformationProvider.init()();
  uint64_t v29 = DeviceInformationProvider.userAssignedDeviceName.getter();
  uint64_t v31 = v30;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  uint64_t v157 = v29;
  uint64_t v158 = v31;
  swift_bridgeObjectRetain();
  dispatch_group_enter(v28);
  uint64_t v32 = (void *)qword_1007607E8;
  uint64_t v33 = v28;
  id v34 = v32;
  sub_1004EDD00(0, (uint64_t)v34, &v155, v33);

  uint64_t v139 = v33;
  uint64_t v35 = v147;
  uint64_t v145 = v31;
  if (v147)
  {
    uint64_t v36 = sub_1002D7074();
    if (v36)
    {
      uint64_t v37 = (void *)v36;
      sub_100007764((uint64_t *)&unk_100726430);
      uint64_t v38 = swift_allocObject();
      long long v127 = xmmword_100610730;
      *(_OWORD *)(v38 + 16) = xmmword_100610730;
      [v37 coordinate];
      *(void *)(v38 + 56) = &type metadata for Double;
      *(void *)(v38 + 64) = &protocol witness table for Double;
      *(void *)(v38 + 32) = v39;
      uint64_t v40 = String.init(format:_:)();
      uint64_t v42 = v41;
      uint64_t v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = v127;
      [v37 coordinate];
      *(void *)(v43 + 56) = &type metadata for Double;
      *(void *)(v43 + 64) = &protocol witness table for Double;
      *(void *)(v43 + 32) = v44;
      uint64_t v45 = String.init(format:_:)();
      uint64_t v47 = v46;
      uint64_t v151 = 0;
      uint64_t v48 = __chkstk_darwin(v45);
      *(void *)&long long v127 = v48;
      if ((v42 & 0x1000000000000000) != 0 || !(v42 & 0x2000000000000000 | v40 & 0x1000000000000000))
      {
        _StringGuts._slowWithCString<A>(_:)();
      }
      else
      {
        __chkstk_darwin(v48);
        if ((v42 & 0x2000000000000000) != 0)
        {
          uint64_t v152 = v40;
          uint64_t v153 = v42 & 0xFFFFFFFFFFFFFFLL;
          BOOL v59 = (v40 > 0x20u || ((0x100003E01uLL >> v40) & 1) == 0)
             && (uint64_t v58 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
             && *v58 == 0;
          char v150 = v59;
          uint64_t v51 = swift_bridgeObjectRelease();
LABEL_22:
          if ((v150 & 1) == 0)
          {
            swift_bridgeObjectRelease();
LABEL_39:
            unint64_t v69 = v128;
            defaultLogger()();
            uint64_t v70 = Logger.logObject.getter();
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              uint64_t v72 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v72 = 0;
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "got GPS data", v72, 2u);
              swift_slowDealloc();
            }

            unint64_t v55 = *(void (**)(char *, uint64_t))(v143 + 8);
            uint64_t v57 = v144;
            v55(v69, v144);
LABEL_42:
            sub_1002D6C08();
            goto LABEL_43;
          }
          uint64_t v60 = v151;
          uint64_t v151 = 0;
          uint64_t v61 = __chkstk_darwin(v51);
          if ((v47 & 0x1000000000000000) != 0 || !(v47 & 0x2000000000000000 | v127 & 0x1000000000000000))
          {
            _StringGuts._slowWithCString<A>(_:)();
          }
          else
          {
            __chkstk_darwin(v61);
            if ((v47 & 0x2000000000000000) != 0)
            {
              uint64_t v152 = v62;
              uint64_t v153 = v47 & 0xFFFFFFFFFFFFFFLL;
              BOOL v66 = (v62 > 0x20u || ((0x100003E01uLL >> v62) & 1) == 0)
                 && (uint64_t v65 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
                 && *v65 == 0;
              char v150 = v66;
              swift_bridgeObjectRelease();
LABEL_37:
              if (v150)
              {
                uint64_t v67 = v151;
                swift_bridgeObjectRelease();
                sub_100007764(&qword_100725088);
                uint64_t v68 = swift_allocObject();
                *(_OWORD *)(v68 + 16) = xmmword_100611020;
                *(void *)(v68 + 32) = v60;
                *(void *)(v68 + 40) = v67;
                uint64_t v154 = v68;
              }
              goto LABEL_39;
            }
            if ((v62 & 0x1000000000000000) != 0)
            {
              uint64_t v63 = (v47 & 0xFFFFFFFFFFFFFFFLL) + 32;
              uint64_t v64 = v62 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              uint64_t v63 = _StringObject.sharedUTF8.getter();
            }
            char v150 = sub_100017C00(v63, v64, (void (*)(uint64_t *__return_ptr))sub_100130934) & 1;
          }
          swift_bridgeObjectRelease();
          goto LABEL_37;
        }
        if ((v40 & 0x1000000000000000) != 0)
        {
          uint64_t v49 = (v42 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v50 = v40 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v49 = _StringObject.sharedUTF8.getter();
        }
        char v150 = sub_100017C00(v49, v50, (void (*)(uint64_t *__return_ptr))sub_10013FF08) & 1;
      }
      uint64_t v51 = swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }
  defaultLogger()();
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "no GPS location available", v54, 2u);
    swift_slowDealloc();
  }

  unint64_t v55 = *(void (**)(char *, uint64_t))(v143 + 8);
  unint64_t v56 = v11;
  uint64_t v57 = v144;
  v55(v56, v144);
  if (v35) {
    goto LABEL_42;
  }
LABEL_43:
  unint64_t v73 = v137;
  static DispatchTime.now()();
  uint64_t v74 = v140;
  + infix(_:_:)();
  uint64_t v75 = *(void (**)(char *, uint64_t))(v141 + 8);
  uint64_t v76 = v146;
  v75(v73, v146);
  OS_dispatch_group.wait(timeout:)();
  v75((char *)v74, v76);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    (*(void (**)(char *, void, uint64_t))(v130 + 104))(v132, enum case for DIPError.Code.timeoutTaskDeviceInfoGroup(_:), v131);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v77 = v133;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001C6628((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v78 = v135;
    swift_allocError();
    uint64_t v79 = v134;
    (*(void (**)(uint64_t, char *, uint64_t))(v134 + 16))(v80, v77, v78);
    Swift::String v81 = v129;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v55(v81, v57);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v77, v78);
    swift_errorRelease();
  }
  id v82 = (id)qword_1007607E8;
  uint64_t v83 = sub_1004E7C64();
  uint64_t v85 = v84;
  sub_10013FEE4(v83, v84);
  if (v85 == 1) {
    sub_1004E995C();
  }
  uint64_t v86 = sub_1004E7C64();
  uint64_t v88 = v87;
  uint64_t v90 = v89;

  Swift::String v91 = (char *)v86;
  uint64_t v92 = v88;
  uint64_t v93 = v149;
  if (v88)
  {
    if (v88 == 1)
    {
      Swift::String v91 = 0;
      uint64_t v92 = 0;
    }
    else
    {
      uint64_t v94 = v86;
      defaultLogger()();
      uint64_t v95 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v97 = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "got SEID", v97, 2u);
        swift_slowDealloc();
      }

      v55(v136, v57);
      uint64_t v86 = v94;
      Swift::String v91 = (char *)v94;
      uint64_t v92 = v88;
    }
  }
  uint64_t v141 = v92;
  unint64_t v137 = v91;
  uint64_t v146 = v88;
  defaultLogger()();
  uint64_t v98 = v154;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v147 = v90;
  sub_1001D59D0(v86, v88);
  uint64_t v99 = Logger.logObject.getter();
  os_log_type_t v100 = static os_log_type_t.debug.getter();
  int v101 = v100;
  BOOL v102 = os_log_type_enabled(v99, v100);
  uint64_t v140 = v86;
  if (v102)
  {
    uint64_t v103 = swift_slowAlloc();
    unint64_t v104 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v103 = 138413314;
    swift_beginAccess();
    BOOL v105 = *(void *)(v93 + 16) != 0;
    id v106 = objc_allocWithZone((Class)NSNumber);
    LODWORD(v136) = v101;
    id v107 = [v106 initWithBool:v105];
    uint64_t v152 = (uint64_t)v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v104 = v107;
    swift_release();
    *(_WORD *)(v103 + 12) = 2112;
    id v108 = [objc_allocWithZone((Class)NSNumber) initWithBool:1];
    uint64_t v152 = (uint64_t)v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v104[1] = v108;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v103 + 22) = 2112;
    swift_beginAccess();
    id v109 = [objc_allocWithZone((Class)NSNumber) initWithBool:v156 != 0];
    uint64_t v152 = (uint64_t)v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v104[2] = v109;
    *(_WORD *)(v103 + 32) = 2112;
    id v110 = [objc_allocWithZone((Class)NSNumber) initWithBool:v98 != 0];
    uint64_t v152 = (uint64_t)v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v104[3] = v110;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v103 + 42) = 2112;
    id v111 = [objc_allocWithZone((Class)NSNumber) initWithBool:v141 != 0];
    uint64_t v152 = (uint64_t)v111;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v104[4] = v111;
    uint64_t v112 = v140;
    sub_10013FEE4(v140, v146);
    _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v136, "DeviceInfo: IDS = %@, name = %@, phone = %@, gps = %@, seid = %@", (uint8_t *)v103, 0x34u);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    uint64_t v113 = v143;
    uint64_t v114 = v144;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v113 + 8))(v148, v114);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    sub_10013FEE4(v86, v146);

    uint64_t v112 = v86;
    v55(v148, v57);
  }
  swift_beginAccess();
  uint64_t v115 = v157;
  uint64_t v116 = v158;
  swift_beginAccess();
  uint64_t v117 = v155;
  uint64_t v118 = v156;
  swift_beginAccess();
  uint64_t v119 = *(void *)(v149 + 16);
  swift_beginAccess();
  uint64_t v120 = v154;
  unint64_t v121 = (uint64_t *)(v138 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData);
  uint64_t v148 = *(char **)(v138 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData);
  uint64_t v122 = *(void *)(v138 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 16);
  uint64_t v145 = *(void *)(v138 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 8);
  uint64_t v123 = *(void *)(v138 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 24);
  uint64_t v144 = *(void *)(v138 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 32);
  uint64_t v143 = *(void *)(v138 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 40);
  uint64_t v142 = *(void *)(v138 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 48);
  unint64_t v136 = *(char **)(v138 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 56);
  *unint64_t v121 = v115;
  v121[1] = v116;
  v121[2] = v117;
  v121[3] = v118;
  id v124 = v137;
  v121[4] = v120;
  v121[5] = (uint64_t)v124;
  v121[6] = v141;
  v121[7] = v119;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v125 = v112;
  uint64_t v126 = v146;
  sub_1001D59D0(v125, v146);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001D59E4((uint64_t)v148, v145, v122, v123, v144, v143, v142, (uint64_t)v136);
  OS_dispatch_semaphore.signal()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10013FEE4(v140, v126);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_1001D5950()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D5988()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001D59C8(uint64_t a1)
{
  sub_1001BA7E4(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1001D59D0(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001D59E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8 != 1)
  {
    sub_1001D5A28(result, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001D5A28(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001D5A94(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  unint64_t v5 = *(void *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100025D64;
  return sub_1001BA144(a1, v4, v6, v5);
}

uint64_t sub_1001D5B48(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_1001D5BA0()
{
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 != 15) {
    sub_10000C5F4(*(void *)(v0 + 24), v1);
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D5BE8(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  unint64_t v5 = *(void *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100025D64;
  return sub_1001B9D3C(a1, v4, v6, v5);
}

uint64_t sub_1001D5C9C()
{
  if (*(void *)(v0 + 40)) {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  }

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001D5CDC(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100025D64;
  return sub_1001B9F88(a1, v1 + 16);
}

unint64_t sub_1001D5D7C()
{
  unint64_t result = qword_1007264A8;
  if (!qword_1007264A8)
  {
    sub_100019364(&qword_1007264A0);
    sub_1000B6120(&qword_1007264B0, &qword_1007264B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007264A8);
  }
  return result;
}

unint64_t sub_1001D5E1C()
{
  unint64_t result = qword_1007264C0;
  if (!qword_1007264C0)
  {
    sub_100019364(&qword_1007264A0);
    sub_1000B6120(&qword_1007264C8, &qword_1007264B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007264C0);
  }
  return result;
}

unint64_t sub_1001D5EBC()
{
  unint64_t result = qword_1007264E8;
  if (!qword_1007264E8)
  {
    sub_100025C28(255, &qword_1007264E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007264E8);
  }
  return result;
}

uint64_t sub_1001D5F28(uint64_t a1)
{
  uint64_t v4 = (uint64_t)(v1 + 2);
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = v1[9];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100025D64;
  return sub_10019046C(a1, v4, v5, v6, v7);
}

uint64_t sub_1001D5FEC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001D6030(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001D60D8()
{
  unint64_t result = qword_100726578;
  if (!qword_100726578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100726578);
  }
  return result;
}

unint64_t sub_1001D612C()
{
  unint64_t result = qword_100726580;
  if (!qword_100726580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100726580);
  }
  return result;
}

unint64_t sub_1001D6180()
{
  unint64_t result = qword_1007265A8;
  if (!qword_1007265A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007265A8);
  }
  return result;
}

unint64_t sub_1001D61D4()
{
  unint64_t result = qword_1007265B0;
  if (!qword_1007265B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007265B0);
  }
  return result;
}

uint64_t sub_1001D6228(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D62CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8 != 1)
  {
    sub_1001D6310(result, a2);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001D6310(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001D6378@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001ADDB4(*(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), a1, *(void **)(v1 + 72), *(void **)(v1 + 80));
}

uint64_t sub_1001D63B0()
{
  uint64_t v1 = type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 72) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + v6);

  return _swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_1001D64B0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RecipientEncryptionCertificate() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + 16;
  uint64_t v7 = v1 + v5;
  uint64_t v8 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100025D64;
  v9[16] = v7;
  v9[17] = v8;
  v9[14] = a1;
  v9[15] = v6;
  return _swift_task_switch(sub_1001ADB4C, 0, 0);
}

uint64_t sub_1001D65D4()
{
  uint64_t v1 = type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + v6);

  return _swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_1001D66BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RecipientEncryptionCertificate() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v5;
  uint64_t v8 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100025D64;
  v9[10] = v7;
  v9[11] = v8;
  v9[8] = a1;
  v9[9] = v6;
  return _swift_task_switch(sub_1001AD8C0, 0, 0);
}

unint64_t sub_1001D67E0()
{
  unint64_t result = qword_100726628;
  if (!qword_100726628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100726628);
  }
  return result;
}

unint64_t sub_1001D6834()
{
  unint64_t result = qword_100726630;
  if (!qword_100726630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100726630);
  }
  return result;
}

uint64_t sub_1001D6888@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001AE5A0(*(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void (**)(char *, void *))(v1 + 56), *(void *)(v1 + 64), a1, *(uint64_t **)(v1 + 72));
}

uint64_t sub_1001D68BC()
{
  return sub_1001D80B8(&qword_100726648);
}

uint64_t sub_1001D68C8(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100007764(&qword_100726648) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[3] = v6;
  v8[4] = v7;
  v8[1] = sub_100025D64;
  _OWORD v8[2] = a1;
  return _swift_task_switch(sub_1001AF408, 0, 0);
}

uint64_t sub_1001D69E8()
{
  return sub_1001D8284(&qword_100726648);
}

uint64_t sub_1001D69F4(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100007764(&qword_100726648) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v5;
  uint64_t v8 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100025D64;
  return sub_1001AF514(a1, v6, v7, v8);
}

uint64_t sub_1001D6B10()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D6B48()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D6B80()
{
  if (*(void *)(v0 + 48) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 73, 7);
}

uint64_t sub_1001D6BC8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1001D6C28(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100025D64;
  return sub_1001A8B98(a1, a2, v6, v2 + 24);
}

uint64_t sub_1001D6CE0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D6D18(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_10000C494;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1007266D0 + dword_1007266D0);
  return v6(a1, v4);
}

uint64_t sub_1001D6DD0(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001D6E40(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001D6EB0()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_1007266A8) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 320) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for DIPPregeneratedAssessment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v0 + v3, 1, v5))
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = v0 + v3 + *(int *)(v5 + 20);
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8, v2 | 7);
}

uint64_t sub_1001D7170()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_1007266A8) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 320) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001A994C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), v0 + 48, v0 + 184, v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(char **)(v0+ ((((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1001D7238(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D72D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D7368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001D73B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t sub_1001D7420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

const char *sub_1001D7468()
{
  return sub_100583C90(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

const char *sub_1001D7488()
{
  return sub_10058298C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_1001D74AC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001D74F4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000C494;
  return sub_1002F4314(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001D75BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1001A2370(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void *sub_1001D75C4()
{
  return sub_10057540C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(uint64_t **)(v0 + 40));
}

uint64_t sub_1001D75E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10019F0E4(*(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), a1, *(void **)(v1 + 72), *(void **)(v1 + 80));
}

uint64_t sub_1001D7624(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001D768C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D76D4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100025D64;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_1001A0984, 0, 0);
}

const char *sub_1001D7798()
{
  return sub_100577794(v0[2], v0[3], v0[4]);
}

const char *sub_1001D77B8()
{
  return sub_10057BF6C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001D77D8(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_10019E804(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(uint64_t **)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(unint64_t **)(v3 + 64));
}

uint64_t sub_1001D780C()
{
  return sub_1001D80B8((uint64_t *)&unk_100726500);
}

uint64_t sub_1001D7818(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100007764((uint64_t *)&unk_100726500) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[3] = v6;
  v8[4] = v7;
  v8[1] = sub_100025D64;
  _OWORD v8[2] = a1;
  return _swift_task_switch(sub_10019BE9C, 0, 0);
}

uint64_t sub_1001D7938(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_10019C0DC(a1, a2, a3, *(uint64_t **)(v3 + 16), *(void *)(v3 + 24), *(uint64_t **)(v3 + 32));
}

uint64_t sub_1001D7958(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_10019CC14(a1, a2, a3, *(void *)(v3 + 16), *(__CFString **)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void **)(v3 + 48), *(void *)(v3 + 56), *(unint64_t **)(v3 + 64), *(uint64_t **)(v3 + 72));
}

uint64_t sub_1001D7998(uint64_t a1)
{
  uint64_t v4 = (uint64_t)(v1 + 2);
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = v1[9];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100025D64;
  return sub_10019BBC0(a1, v4, v5, v6, v7);
}

unint64_t sub_1001D7A5C()
{
  unint64_t result = qword_100726748;
  if (!qword_100726748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100726748);
  }
  return result;
}

uint64_t sub_1001D7AB0()
{
  return sub_1001D80B8(&qword_100724178);
}

uint64_t sub_1001D7ABC(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100007764(&qword_100724178) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[3] = v6;
  v8[4] = v7;
  v8[1] = sub_100025D64;
  _OWORD v8[2] = a1;
  return _swift_task_switch(sub_10019DC3C, 0, 0);
}

uint64_t sub_1001D7BDC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001D7C4C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D7CB8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D7D24()
{
  uint64_t v1 = type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + v6);
  swift_release();

  return _swift_deallocObject(v0, ((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1001D7E24(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RecipientEncryptionCertificate() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = v1 + v6;
  uint64_t v11 = *(void *)(v1 + ((v6 + 47) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_100025D64;
  v12[13] = v10;
  v12[14] = v11;
  v12[11] = v8;
  v12[12] = v9;
  v12[9] = a1;
  v12[10] = v7;
  return _swift_task_switch(sub_10019EE24, 0, 0);
}

unint64_t sub_1001D7F60()
{
  unint64_t result = qword_100726778;
  if (!qword_100726778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100726778);
  }
  return result;
}

unint64_t sub_1001D7FB4()
{
  unint64_t result = qword_100726780;
  if (!qword_100726780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100726780);
  }
  return result;
}

uint64_t sub_1001D8008(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001D8078@<X0>(void *a1@<X8>)
{
  return sub_10019F894(*(char **)(v1 + 16), *(void *)(v1 + 24), *(void (**)(char *, char *, uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void (**)(uint64_t, char *, uint64_t))(v1 + 56), *(void *)(v1 + 64), a1, *(void **)(v1 + 72));
}

uint64_t sub_1001D80AC()
{
  return sub_1001D80B8(&qword_100726790);
}

uint64_t sub_1001D80B8(uint64_t *a1)
{
  uint64_t v2 = sub_100007764(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v1 + v7);

  return _swift_deallocObject(v1, v7 + 40, v6);
}

uint64_t sub_1001D8158(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100007764(&qword_100726790) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[3] = v6;
  v8[4] = v7;
  v8[1] = sub_100025D64;
  _OWORD v8[2] = a1;
  return _swift_task_switch(sub_1001A0384, 0, 0);
}

uint64_t sub_1001D8278()
{
  return sub_1001D8284(&qword_100726790);
}

uint64_t sub_1001D8284(uint64_t *a1)
{
  uint64_t v2 = sub_100007764(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release();

  return _swift_deallocObject(v1, v7 + 8, v6);
}

uint64_t sub_1001D8368(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100007764(&qword_100726790) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v5;
  uint64_t v8 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100025D64;
  return sub_1001A0638(a1, v6, v7, v8);
}

uint64_t sub_1001D8484()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001D84E4(uint64_t a1)
{
  char v4 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100025D64;
  return sub_100196238(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1001D85D4()
{
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 40);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1001D862C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)(v1 + 5);
  uint64_t v9 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100025D64;
  return sub_100193798(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1001D8704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001D8758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001D87AC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019364(&qword_100726808);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1001D8810(uint64_t a1@<X8>)
{
  sub_10012520C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_1001D882C(void *a1@<X8>)
{
  sub_100124B68(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1001D884C()
{
  return sub_10018F5CC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001D8858(uint64_t a1)
{
  uint64_t v4 = (uint64_t)(v1 + 2);
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = v1[9];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100025D64;
  return sub_10018FF68(a1, v4, v5, v6, v7);
}

uint64_t sub_1001D8920()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001D8968(uint64_t a1)
{
  uint64_t v4 = (uint64_t)(v1 + 2);
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = v1[9];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100025D64;
  return sub_10019046C(a1, v4, v5, v6, v7);
}

uint64_t sub_1001D8A30()
{
  return sub_10018D54C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001D8A3C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D8A7C()
{
  return sub_10018DBCC(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001D8A84()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D8ABC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100025D64;
  return _swift_task_switch(sub_10018EC50, 0, 0);
}

uint64_t sub_1001D8B6C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1001D8C18;
  v3[5] = v2;
  return _swift_task_switch(sub_10018EE98, 0, 0);
}

uint64_t sub_1001D8C18(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t sub_1001D8D24(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

const char *sub_1001D8D88()
{
  return sub_10058B778(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unint64_t **)(v0 + 40));
}

const char *sub_1001D8DA8()
{
  return sub_100574C40(*(void *)(v0 + 16), *(char ***)(v0 + 24));
}

void sub_1001D8DC4(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10018AAD4(a1, *(char **)(v2 + 16), *(void *)(v2 + 24), *(char **)(v2 + 32), *(void *)(v2 + 40), *(char **)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), a2);
}

uint64_t sub_1001D8DFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001D8ED0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 64))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 200, 7);
}

uint64_t sub_1001D8F6C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 192);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100025D64;
  return sub_10018CBF4(a1, v4, v5, v6);
}

uint64_t sub_1001D9024(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000AAD28(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1001D90FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D9154(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100025D64;
  return sub_1001A29C0(a1, v4, v5, v7, v6);
}

uint64_t sub_1001D9214(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007764(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001D927C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001D92C4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100025D64;
  return sub_1001A2818(a1, v4, v5, v7, v6);
}

uint64_t sub_1001D9384()
{
  uint64_t v1 = sub_100007764(&qword_1007265A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1001D9480(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100007764(&qword_1007265A0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100025D64;
  return sub_1001A28E0(a1, v7, v8, v9, v10);
}

uint64_t sub_1001D95B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001D961C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001D967C(uint64_t a1)
{
  return sub_100205538(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

const char *sub_1001D9688()
{
  return sub_100581A28(v0);
}

const char *sub_1001D96A4()
{
  return sub_10058DC60(*(void *)(v0 + 16));
}

void sub_1001D96C0()
{
  sub_100584C2C(v0);
}

const char *sub_1001D9708()
{
  return sub_1001D8DA8();
}

unint64_t sub_1001D9724(char a1)
{
  unint64_t result = 0x696C616974696E69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7465536E69676562;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x7465467075746573;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    case 7:
      unint64_t result = 0x6F5A6574656C6564;
      break;
    case 8:
      unint64_t result = 0x6465686361747461;
      break;
    case 9:
      unint64_t result = 0x6465686361746564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001D9890(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1001D9724(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1001D9724(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1001D991C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001D9724(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001D9980()
{
  sub_1001D9724(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001D99D4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001D9724(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1001D9A34@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001EDB10(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001D9A64@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001D9724(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void *sub_1001D9A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v80 = a4;
  uint64_t v81 = a6;
  uint64_t v78 = a5;
  uint64_t v79 = a3;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v87 = *(void *)(v9 - 8);
  uint64_t v88 = v9;
  __chkstk_darwin(v9);
  uint64_t v86 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v84);
  uint64_t v85 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  uint64_t v83 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v89 - 8);
  uint64_t v15 = __chkstk_darwin(v89);
  uint64_t v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v76 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  unint64_t v77 = (char *)&v76 - v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v76 - v23;
  v6[6] = dispatch_group_create();
  uint64_t v25 = (char *)v6 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_retrier;
  uint64_t v26 = type metadata accessor for DIPRetrier();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState;
  *(void *)((char *)v6 + v27) = sub_10015CB84((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v28 = OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName;
  *(void *)((char *)v6 + v28) = sub_10015CC88((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)((char *)v6 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs) = &_swiftEmptySetSingleton;
  uint64_t v29 = OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID;
  *(void *)((char *)v6 + v29) = sub_10015CC94((uint64_t)&_swiftEmptyArrayStorage);
  v6[3] = a1;
  v6[4] = a2;
  id v82 = v6;
  *((unsigned char *)v6 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state) = 0;
  uint64_t v30 = self;
  id v31 = [v30 standardUserDefaults];
  NSString v32 = String._bridgeToObjectiveC()();
  unsigned int v33 = [v31 BOOLForKey:v32];

  if (v33)
  {
    defaultLogger()();
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Using CloudKit sandbox container environment due to user defaults setting", v36, 2u);
      swift_slowDealloc();
    }

    uint64_t v37 = *(void (**)(char *, uint64_t))(v14 + 8);
    v37(v24, v89);
    id v38 = [v30 standardUserDefaults];
    NSString v39 = String._bridgeToObjectiveC()();
    id v40 = [v38 stringForKey:v39];

    if (!v40) {
      goto LABEL_7;
    }
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v43 = v42;

    uint64_t v92 = (void *)v41;
    unint64_t v93 = v43;
    uint64_t v90 = 16721;
    unint64_t v91 = 0xE200000000000000;
    sub_1000B5358();
    if (StringProtocol.contains<A>(_:)())
    {
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t v44 = 2;
      goto LABEL_21;
    }
    uint64_t v58 = v77;
    defaultLogger()();
    swift_bridgeObjectRetain();
    BOOL v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v92 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136315138;
      uint64_t v76 = v61 + 4;
      swift_bridgeObjectRetain();
      uint64_t v90 = sub_100110D58(v41, v43, (uint64_t *)&v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "CloudKit sandbox container in use but server environment name %s doesn't look compatible. Do you need to fix your CloudKit container environment setting?", v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v37(v77, v89);
      uint64_t v44 = 2;
      goto LABEL_21;
    }

    uint64_t v44 = 2;
    swift_bridgeObjectRelease_n();
    uint64_t v57 = v58;
    goto LABEL_20;
  }
  defaultLogger()();
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Using CloudKit production container environment", v47, 2u);
    swift_slowDealloc();
  }

  uint64_t v37 = *(void (**)(char *, uint64_t))(v14 + 8);
  v37(v20, v89);
  id v48 = [v30 standardUserDefaults];
  NSString v49 = String._bridgeToObjectiveC()();
  id v50 = [v48 stringForKey:v49];

  if (!v50)
  {
LABEL_18:
    uint64_t v44 = 1;
    goto LABEL_21;
  }
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v53 = v52;

  uint64_t v92 = (void *)v51;
  unint64_t v93 = v53;
  uint64_t v90 = 16721;
  unint64_t v91 = 0xE200000000000000;
  sub_1000B5358();
  if ((StringProtocol.contains<A>(_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v54, v55))
  {

    swift_bridgeObjectRelease_n();
    v37(v17, v89);
    goto LABEL_18;
  }
  unint64_t v56 = (uint8_t *)swift_slowAlloc();
  unint64_t v77 = (char *)swift_slowAlloc();
  uint64_t v92 = v77;
  *(_DWORD *)unint64_t v56 = 136315138;
  uint64_t v76 = v56 + 4;
  swift_bridgeObjectRetain();
  uint64_t v90 = sub_100110D58(v51, v53, (uint64_t *)&v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v54, v55, "CloudKit production container in use but server environment name %s doesn't look compatible. Do you need to fix your CloudKit container environment setting?", v56, 0xCu);
  uint64_t v44 = 1;
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v57 = v17;
LABEL_20:
  v37(v57, v89);
LABEL_21:
  uint64_t v62 = v81;
  id v63 = objc_allocWithZone((Class)CKContainerID);
  NSString v64 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v65 = [v63 initWithContainerIdentifier:v64 environment:v44];

  id v66 = [objc_allocWithZone((Class)CKContainerOptions) init];
  if (v62)
  {
    NSString v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v67 = 0;
  }
  [v66 setApplicationBundleIdentifierOverrideForNetworkAttribution:v67];

  id v68 = [objc_allocWithZone((Class)CKContainer) initWithContainerID:v65 options:v66];
  unint64_t v69 = v82;
  v82[2] = v68;
  uint64_t v89 = sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  uint64_t v92 = 0;
  unint64_t v93 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  uint64_t v70 = v65;
  uint64_t v72 = (void *)v69[3];
  unint64_t v71 = v69[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v92 = v72;
  unint64_t v93 = v71;
  v73._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v73._object = (void *)0x80000001006403A0;
  String.append(_:)(v73);
  static DispatchQoS.unspecified.getter();
  uint64_t v92 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007764((uint64_t *)&unk_100726420);
  sub_100031134((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v87 + 104))(v86, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v88);
  uint64_t v74 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  v69[5] = v74;
  return v69;
}

void *sub_1001DA590()
{
  return &_swiftEmptyArrayStorage;
}

unint64_t sub_1001DA59C()
{
  return sub_10015CF20((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1001DA5A8()
{
  return 0;
}

uint64_t sub_1001DA5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = a3;
  uint64_t v33 = a5;
  uint64_t v30 = a2;
  uint64_t v31 = a4;
  uint64_t v5 = type metadata accessor for DIPRetrier();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v34 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPBackoffStrategy();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100007764(&qword_100726CA0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v29 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v29 - v19;
  *uint64_t v11 = 0x3FC999999999999ALL;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DIPBackoffStrategy.exponential(_:), v8);
  uint64_t v21 = v35;
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
  sub_1000BEA14((uint64_t)v20, (uint64_t)v18, &qword_100726CA0);
  uint64_t v22 = v21 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_retrier;
  swift_beginAccess();
  sub_1001EE754((uint64_t)v18, v22);
  swift_endAccess();
  sub_1001EE7BC(v22, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5)) {
    return sub_10000C6CC((uint64_t)v15, &qword_100726CA0);
  }
  uint64_t v24 = v34;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v34, v15, v5);
  sub_10000C6CC((uint64_t)v15, &qword_100726CA0);
  uint64_t v25 = (void *)swift_allocObject();
  uint64_t v26 = v30;
  void v25[2] = v21;
  v25[3] = v26;
  v25[4] = v32;
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = v31;
  v27[2] = v21;
  v27[3] = v28;
  v27[4] = v33;
  swift_retain_n();
  swift_retain();
  swift_retain();
  DIPRetrier.async(action:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v24, v5);
}

uint64_t sub_1001DA980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(void *)(a4 + 40);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a4;
  v18[3] = a2;
  v18[4] = a3;
  v18[5] = a5;
  v18[6] = a6;
  aBlock[4] = sub_1001EE894;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FA920;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v22);
  return swift_release();
}

uint64_t sub_1001DAC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1001DCD3C((uint8_t *)sub_1001EE910, (uint64_t)v10);

  return swift_release();
}

uint64_t sub_1001DAD04(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, void (*a5)(uint64_t (*)(uint64_t a1), void *))
{
  uint64_t v21 = a3;
  uint64_t v22 = a2;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DIPError();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.internalError(_:), v8);
    swift_errorRetain();
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v16 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v17, v15, v12);
    swift_retain();
    sub_1001EE944(v16, v22, v21, a4);
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v19 = (void *)swift_allocObject();
    uint64_t v20 = v21;
    void v19[2] = v22;
    v19[3] = v20;
    v19[4] = a4;
    swift_retain();
    swift_retain();
    a5(sub_1001EE938, v19);
    return swift_release();
  }
}

uint64_t sub_1001DB030(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v22 = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPError();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPRetryResult();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.internalError(_:), v5);
    swift_errorRetain();
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v17 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v18, v12, v9);
    uint64_t v19 = v24;
    swift_retain();
    sub_1001F0970(v17, v22, v23, v19);
    swift_release();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))(v16, enum case for DIPRetryResult.stop(_:), v13);
    v23(v16);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t sub_1001DB39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v17[0] - 8);
  __chkstk_darwin(v17[0]);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a1;
  v14[3] = a3;
  v14[4] = a4;
  aBlock[4] = sub_1001EE884;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FA8D0;
  uint64_t v15 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void))(v11 + 8))(v13, v17[0]);
  return swift_release();
}

uint64_t sub_1001DB65C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return a2(0);
  }
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.internalError(_:), v4);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v12 = swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v13, v11, v8);
  a2(v12);
  swift_errorRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1001DB8F4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v22 = type metadata accessor for DIPRetryResult();
  uint64_t v5 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DIPError();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_projectBox();
  if (a1)
  {
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.internalError(_:), v8);
    swift_errorRetain();
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(v16, v15, v12);
  }
  swift_beginAccess();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v17 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v18, v16, v12);
  uint64_t *v7 = v17;
  uint64_t v19 = v22;
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DIPRetryResult.retryWithError(_:), v22);
  v24(v7);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v19);
}

uint64_t sub_1001DBC68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v3 + 40);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_1001EE6B8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FA790;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  sub_10003BDD0(a1);
  static DispatchQoS.unspecified.getter();
  v17[1] = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_1001DBF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
  if (v10 == 7) {
    return sub_1001DFA40(9, a2, a3);
  }
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  if ((v10 - 1) >= 6)
  {
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = a1;
    v18[3] = a2;
    v18[4] = a3;
    sub_10003BDD0(a2);
    swift_retain();
    sub_10003BDD0(a2);
    swift_retain();
    sub_1001DD7E0(7, 10, sub_1001EE6D8, (uint64_t)v18);
    swift_release();
    return swift_release();
  }
  else
  {
    sub_10003BDD0(a2);
    swift_retain();
    defaultLogger()();
    swift_retain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v24 = v22;
      uint64_t v21 = v15;
      *(_DWORD *)uint64_t v15 = 136446210;
      v20[1] = v15 + 4;
      uint64_t v17 = *(void *)(a1 + 24);
      unint64_t v16 = *(void *)(a1 + 32);
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_100110D58(v17, v16, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Container %{public}s is working, waiting for it to finish before deleting", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v19 = (void *)swift_allocObject();
    void v19[2] = a1;
    v19[3] = sub_1001EE6C8;
    v19[4] = v12;
    swift_retain();
    swift_retain();
    sub_1001DFA40(8, (uint64_t)sub_1001EE6FC, (uint64_t)v19);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1001DC2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  swift_retain();
  sub_10003BDD0(a2);
  sub_1001DD7E0(7, 10, (uint64_t (*)(void))sub_1001F29D8, (uint64_t)v6);

  return swift_release();
}

uint64_t sub_1001DC36C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DIPError();
  uint64_t result = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v47 = v14;
    uint64_t v48 = result;
    uint64_t v41 = a4;
    sub_100007764((uint64_t *)&unk_1007225C0);
    NSString v49 = a3;
    uint64_t v45 = v11;
    uint64_t v18 = sub_100007764((uint64_t *)&unk_100723460) - 8;
    uint64_t v17 = *(void *)v18;
    uint64_t v19 = *(void *)v18;
    uint64_t v43 = v9;
    uint64_t v20 = *(void *)(v17 + 72);
    uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
    uint64_t v50 = a1;
    uint64_t v44 = v8;
    uint64_t v22 = (v21 + 32) & ~v21;
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_100611020;
    uint64_t v24 = v23 + v22;
    uint64_t v25 = *(int *)(v18 + 56);
    os_log_type_t v46 = v16;
    uint64_t v26 = (uint64_t *)(v24 + v25);
    uint64_t v27 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    uint64_t v28 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v29 = *(void (**)(void))(*(void *)(v28 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v29)(v24, v27, v28);
    uint64_t v31 = *(void **)(a2 + 32);
    uint64_t v42 = *(void *)(a2 + 24);
    uint64_t v30 = v42;
    v26[3] = (uint64_t)&type metadata for String;
    *uint64_t v26 = v30;
    v26[1] = (uint64_t)v31;
    uint64_t v32 = v46;
    uint64_t v33 = v24 + v20 + *(int *)(v18 + 56);
    v29();
    char v34 = *(unsigned char *)(a2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(void *)(v33 + 24) = &type metadata for DIPCloudContainerState;
    *(unsigned char *)uint64_t v33 = v34;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_10015C504(v23);
    unint64_t v51 = 0;
    unint64_t v52 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v51 = 0xD000000000000021;
    unint64_t v52 = 0x8000000100640A10;
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = v42;
    uint64_t v36 = v49;
    v35._object = v31;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v43 + 104))(v45, enum case for DIPError.Code.internalError(_:), v44);
    swift_errorRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    if (v36)
    {
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v37 = v48;
      uint64_t v38 = swift_allocError();
      uint64_t v39 = v47;
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v40, v32, v37);
      v36(v38);
      swift_errorRelease();
      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v32, v37);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v32, v48);
      return swift_errorRelease();
    }
  }
  else if (a3)
  {
    return ((uint64_t (*)(void))a3)(0);
  }
  return result;
}

uint64_t sub_1001DC808(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DIPError.Code();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DIPError();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v53 = v17;
    uint64_t v54 = v18;
    uint64_t v50 = v20;
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v55 = v8;
    uint64_t v21 = sub_100007764((uint64_t *)&unk_100723460);
    uint64_t v57 = a3;
    uint64_t v23 = v21 - 8;
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v49 = v13;
    uint64_t v45 = *(void *)(v22 + 72);
    uint64_t v46 = a1;
    unint64_t v24 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_100611020;
    unint64_t v51 = v11;
    uint64_t v52 = v9;
    unint64_t v26 = v25 + v24;
    uint64_t v27 = (uint64_t *)(v25 + v24 + *(int *)(v23 + 56));
    uint64_t v28 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    uint64_t v29 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v47 = v12;
    uint64_t v48 = v15;
    uint64_t v30 = *(void (**)(void))(*(void *)(v29 - 8) + 104);
    uint64_t v56 = a4;
    ((void (*)(unint64_t, uint64_t, uint64_t))v30)(v25 + v24, v28, v29);
    uint64_t v32 = *(void *)(a2 + 24);
    uint64_t v31 = *(void **)(a2 + 32);
    v27[3] = (uint64_t)&type metadata for String;
    *uint64_t v27 = v32;
    v27[1] = (uint64_t)v31;
    unint64_t v33 = v26 + v45 + *(int *)(v23 + 56);
    v30();
    char v34 = *(unsigned char *)(a2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(void *)(v33 + 24) = &type metadata for DIPCloudContainerState;
    *(unsigned char *)unint64_t v33 = v34;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_10015C504(v25);
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(95);
    v35._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v35._object = (void *)0x8000000100640980;
    String.append(_:)(v35);
    swift_bridgeObjectRetain();
    v36._uint64_t countAndFlagsBits = v32;
    v36._object = v31;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 0xD000000000000040;
    v37._object = (void *)0x80000001006409A0;
    String.append(_:)(v37);
    (*(void (**)(char *, void, uint64_t))(v49 + 104))(v48, enum case for DIPError.Code.internalError(_:), v47);
    swift_errorRetain();
    uint64_t v38 = v50;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v39 = v53;
    swift_allocError();
    uint64_t v40 = v54;
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v41, v38, v39);
    uint64_t v42 = v51;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v55);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
    a3 = v57;
    uint64_t v17 = swift_errorRelease();
  }
  return a3(v17);
}

uint64_t sub_1001DCD3C(uint8_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v41 - v12;
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v16 = (char *)v41 - v15;
  uint64_t v17 = OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state;
  switch(*(unsigned char *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      defaultLogger()();
      swift_retain();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v43 = a2;
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v42 = a1;
        uint64_t v47 = v21;
        uint64_t v44 = v6;
        uint64_t v45 = v7;
        *(_DWORD *)uint64_t v20 = 136446210;
        uint64_t v22 = *(void *)(v3 + 24);
        unint64_t v23 = *(void *)(v3 + 32);
        swift_bridgeObjectRetain();
        uint64_t v46 = sub_100110D58(v22, v23, &v47);
        a2 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Attaching to container %{public}s; setup is already in progress",
          v20,
          0xCu);
        swift_arrayDestroy();
        a1 = v42;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v44);
      }
      else
      {

        swift_release();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
      }
      char v24 = 8;
      goto LABEL_16;
    case 7:
      defaultLogger()();
      swift_retain();
      Swift::String v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v43 = a2;
        Swift::String v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        uint64_t v42 = a1;
        uint64_t v47 = v38;
        uint64_t v44 = v6;
        uint64_t v45 = v7;
        *(_DWORD *)Swift::String v37 = 136446210;
        uint64_t v39 = *(void *)(v3 + 24);
        unint64_t v40 = *(void *)(v3 + 32);
        swift_bridgeObjectRetain();
        uint64_t v46 = sub_100110D58(v39, v40, &v47);
        a2 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Attached to container %{public}s; container deletion is in progress",
          v37,
          0xCu);
        swift_arrayDestroy();
        a1 = v42;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v44);
      }
      else
      {

        swift_release();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      }
      char v24 = 9;
LABEL_16:
      uint64_t result = sub_1001DFA40(v24, (uint64_t)a1, a2);
      break;
    case 8:
      if (a1) {
        uint64_t result = ((uint64_t (*)(void))a1)(0);
      }
      break;
    default:
      defaultLogger()();
      swift_retain();
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v45 = v7;
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v47 = v43;
        uint64_t v44 = v6;
        *(_DWORD *)uint64_t v27 = 136446210;
        v41[1] = v27 + 4;
        uint64_t v42 = v27;
        uint64_t v28 = a1;
        uint64_t v29 = a2;
        uint64_t v31 = *(void *)(v3 + 24);
        unint64_t v30 = *(void *)(v3 + 32);
        swift_bridgeObjectRetain();
        uint64_t v32 = v31;
        a2 = v29;
        a1 = v28;
        uint64_t v46 = sub_100110D58(v32, v30, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Attaching to container %{public}s; starting setup",
          v42,
          0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v44);
      }
      else
      {

        swift_release();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
      }
      int v33 = *(unsigned __int8 *)(v3 + v17);
      char v34 = (void *)swift_allocObject();
      _OWORD v34[2] = v3;
      v34[3] = a1;
      v34[4] = a2;
      swift_retain();
      sub_10003BDD0((uint64_t)a1);
      sub_1001DD7E0(1, v33, sub_1001EE6A8, (uint64_t)v34);
      uint64_t result = swift_release();
      break;
  }
  return result;
}

uint64_t sub_1001DD39C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DIPError();
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v45 = v14;
    uint64_t v46 = result;
    v39[1] = a4;
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v18 = sub_100007764((uint64_t *)&unk_100723460) - 8;
    uint64_t v17 = *(void *)v18;
    uint64_t v19 = *(void *)v18;
    uint64_t v42 = v8;
    uint64_t v40 = *(void *)(v17 + 72);
    unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_100611020;
    unint64_t v22 = v21 + v20;
    uint64_t v23 = *(int *)(v18 + 56);
    uint64_t v47 = a1;
    char v24 = (void *)(v22 + v23);
    uint64_t v41 = v11;
    uint64_t v25 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    uint64_t v26 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v43 = v16;
    uint64_t v44 = a3;
    uint64_t v27 = v9;
    uint64_t v28 = *(void (**)(void))(*(void *)(v26 - 8) + 104);
    ((void (*)(unint64_t, uint64_t, uint64_t))v28)(v22, v25, v26);
    uint64_t v29 = *(void *)(a2 + 24);
    uint64_t v30 = *(void *)(a2 + 32);
    v24[3] = &type metadata for String;
    *char v24 = v29;
    v24[1] = v30;
    unint64_t v31 = v22 + v40 + *(int *)(v18 + 56);
    uint64_t v32 = v44;
    v28();
    int v33 = v43;
    char v34 = *(unsigned char *)(a2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(void *)(v31 + 24) = &type metadata for DIPCloudContainerState;
    *(unsigned char *)unint64_t v31 = v34;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_10015C504(v21);
    (*(void (**)(char *, void, uint64_t))(v27 + 104))(v41, enum case for DIPError.Code.internalError(_:), v42);
    swift_errorRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    if (v32)
    {
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v35 = v46;
      uint64_t v36 = swift_allocError();
      uint64_t v37 = v45;
      (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v38, v33, v35);
      v32(v36);
      swift_errorRelease();
      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v33, v35);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v46);
      return swift_errorRelease();
    }
  }
  else if (a3)
  {
    return ((uint64_t (*)(void))a3)(0);
  }
  return result;
}

uint64_t sub_1001DD7E0(char a1, int a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v122 = a4;
  unint64_t v9 = 0xEB0000000064657ALL;
  uint64_t v10 = 0x696C616974696E69;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v120 = *(void *)(v11 - 8);
  unint64_t v121 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v116 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v111 - v14;
  uint64_t v16 = type metadata accessor for DIPError.Code();
  uint64_t v117 = *(void *)(v16 - 8);
  uint64_t v118 = v16;
  __chkstk_darwin(v16);
  uint64_t v119 = (char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DIPError();
  uint64_t v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  char v24 = (char *)&v111 - v23;
  uint64_t v25 = OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state;
  unint64_t v26 = 0x696C616974696E69;
  unint64_t v27 = 0xEB0000000064657ALL;
  switch(*((unsigned char *)v5 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state))
  {
    case 1:
      unint64_t v26 = 0x7465536E69676562;
      unint64_t v27 = 0xEA00000000007075;
      break;
    case 2:
      unint64_t v26 = 0xD000000000000011;
      uint64_t v28 = "setupCheckAccount";
      goto LABEL_8;
    case 3:
      unint64_t v26 = 0x7465467075746573;
      unint64_t v27 = 0xEF73656E6F5A6863;
      break;
    case 4:
      unint64_t v27 = 0x8000000100629AE0;
      unint64_t v26 = 0xD000000000000017;
      break;
    case 5:
      unint64_t v26 = 0xD000000000000010;
      uint64_t v28 = "setupCreateZones";
      goto LABEL_8;
    case 6:
      unint64_t v26 = 0xD000000000000018;
      uint64_t v28 = "setupCreateSubscriptions";
LABEL_8:
      unint64_t v27 = (unint64_t)(v28 - 32) | 0x8000000000000000;
      break;
    case 7:
      unint64_t v26 = 0x6F5A6574656C6564;
      unint64_t v27 = 0xEB0000000073656ELL;
      break;
    case 8:
      unint64_t v26 = 0x6465686361747461;
      unint64_t v27 = 0xE800000000000000;
      break;
    case 9:
      unint64_t v27 = 0xE800000000000000;
      unint64_t v26 = 0x6465686361746564;
      break;
    default:
      break;
  }
  switch(a1)
  {
    case 1:
      unint64_t v9 = 0xEA00000000007075;
      if (v26 == 0x7465536E69676562) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 2:
      unint64_t v29 = 0xD000000000000011;
      uint64_t v30 = "setupCheckAccount";
      goto LABEL_22;
    case 3:
      unint64_t v9 = 0xEF73656E6F5A6863;
      if (v26 != 0x7465467075746573) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 4:
      unint64_t v9 = 0x8000000100629AE0;
      if (v26 != 0xD000000000000017) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 5:
      unint64_t v29 = 0xD000000000000010;
      uint64_t v30 = "setupCreateZones";
      goto LABEL_22;
    case 6:
      unint64_t v29 = 0xD000000000000018;
      uint64_t v30 = "setupCreateSubscriptions";
LABEL_22:
      unint64_t v9 = (unint64_t)(v30 - 32) | 0x8000000000000000;
      if (v26 != v29) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 7:
      unint64_t v9 = 0xEB0000000073656ELL;
      if (v26 != 0x6F5A6574656C6564) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 8:
      uint64_t v10 = 0x6465686361747461;
      unint64_t v9 = 0xE800000000000000;
      goto LABEL_27;
    case 9:
      unint64_t v9 = 0xE800000000000000;
      if (v26 != 0x6465686361746564) {
        goto LABEL_31;
      }
      goto LABEL_28;
    default:
LABEL_27:
      if (v26 != v10) {
        goto LABEL_31;
      }
LABEL_28:
      if (v27 == v9)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
        goto LABEL_32;
      }
LABEL_31:
      uint64_t v113 = v22;
      uint64_t v114 = v21;
      uint64_t v115 = v20;
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v32)
      {
LABEL_32:
        if (a3) {
          return a3(0);
        }
        return result;
      }
      if (a2 == 10) {
        goto LABEL_39;
      }
      unint64_t v33 = sub_1001D9724(*((unsigned char *)v5 + v25));
      uint64_t v35 = v34;
      if (v33 == sub_1001D9724(a2) && v35 == v36)
      {
        swift_bridgeObjectRelease_n();
LABEL_39:
        defaultLogger()();
        swift_retain_n();
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = swift_slowAlloc();
          uint64_t v111 = swift_slowAlloc();
          uint64_t aBlock = v111;
          *(_DWORD *)uint64_t v40 = 136446722;
          uint64_t v112 = a3;
          uint64_t v42 = v5[3];
          unint64_t v41 = v5[4];
          swift_bridgeObjectRetain();
          uint64_t v129 = sub_100110D58(v42, v41, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 12) = 2080;
          unint64_t v43 = sub_1001D9724(a1);
          uint64_t v129 = sub_100110D58(v43, v44, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 22) = 2080;
          unint64_t v45 = sub_1001D9724(*((unsigned char *)v5 + v25));
          uint64_t v129 = sub_100110D58(v45, v46, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          a3 = v112;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "Cloud container %{public}s moving to state %s from state %s", (uint8_t *)v40, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        uint64_t v47 = *(uint64_t (**)(char *, unint64_t))(v120 + 8);
        uint64_t result = v47(v15, v121);
        *((unsigned char *)v5 + v25) = a1;
        switch(a1)
        {
          case 1:
            sub_1001EC594();
            sub_1001EC8D8();
            sub_1001ECA94();
            sub_1001DFF0C(1);
            return sub_1001DD7E0(2, 1, a3, v122);
          case 2:
            sub_1001DFF0C(2);
            os_log_type_t v96 = (void *)swift_allocObject();
            v96[2] = v5;
            v96[3] = a3;
            v96[4] = v122;
            uint64_t v97 = (void *)v5[2];
            uint64_t v98 = (void *)swift_allocObject();
            v98[2] = v5;
            v98[3] = sub_1001EE5F8;
            v98[4] = v96;
            long long v127 = sub_1001EE628;
            uint64_t v128 = v98;
            uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
            unint64_t v124 = 1107296256;
            uint64_t v125 = sub_10015B294;
            uint64_t v126 = &unk_1006FA6C8;
            uint64_t v99 = _Block_copy(&aBlock);
            swift_retain_n();
            sub_10003BDD0((uint64_t)a3);
            swift_retain();
            swift_release();
            [v97 accountInfoWithCompletionHandler:v99];
            _Block_release(v99);
            goto LABEL_56;
          case 3:
            sub_1001DFF0C(3);
            uint64_t v95 = (void *)swift_allocObject();
            v95[2] = v5;
            v95[3] = a3;
            v95[4] = v122;
            swift_retain();
            sub_10003BDD0((uint64_t)a3);
            sub_1001E1034(sub_1001EE5C8, (uint64_t)v95);
            goto LABEL_56;
          case 4:
            sub_1001DFF0C(4);
            os_log_type_t v100 = (void *)swift_allocObject();
            void v100[2] = v5;
            v100[3] = a3;
            v100[4] = v122;
            swift_retain();
            sub_10003BDD0((uint64_t)a3);
            sub_1001E2794(sub_1001EE598, (uint64_t)v100);
            goto LABEL_56;
          case 5:
            sub_1001DFF0C(5);
            int v101 = (void *)swift_allocObject();
            v101[2] = v5;
            v101[3] = a3;
            v101[4] = v122;
            swift_retain();
            sub_10003BDD0((uint64_t)a3);
            sub_1001E3EBC((uint8_t *)sub_1001EE568, (uint64_t)v101);
            goto LABEL_56;
          case 6:
            sub_1001DFF0C(6);
            BOOL v102 = (void *)swift_allocObject();
            v102[2] = v5;
            v102[3] = a3;
            v102[4] = v122;
            swift_retain();
            sub_10003BDD0((uint64_t)a3);
            sub_1001E5ECC((void (*)(void))sub_1001EE538, (uint64_t)v102);
            goto LABEL_56;
          case 7:
            sub_1001DFF0C(7);
            uint64_t v103 = (void *)swift_allocObject();
            v103[2] = v5;
            v103[3] = a3;
            v103[4] = v122;
            swift_retain();
            sub_10003BDD0((uint64_t)a3);
            sub_1001E8410((uint64_t)sub_1001EE528, (uint64_t)v103);
LABEL_56:
            uint64_t result = swift_release();
            break;
          case 8:
            unint64_t v104 = v116;
            defaultLogger()();
            swift_retain();
            BOOL v105 = Logger.logObject.getter();
            os_log_type_t v106 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v105, v106))
            {
              id v107 = (uint8_t *)swift_slowAlloc();
              uint64_t aBlock = swift_slowAlloc();
              *(_DWORD *)id v107 = 136446210;
              uint64_t v112 = a3;
              uint64_t v108 = v5[3];
              unint64_t v109 = v5[4];
              swift_bridgeObjectRetain();
              uint64_t v129 = sub_100110D58(v108, v109, &aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              a3 = v112;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v105, v106, "Container %{public}s entered attached state", v107, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              id v110 = v116;
            }
            else
            {

              swift_release();
              id v110 = v104;
            }
            v47(v110, v121);
            if (a3) {
              a3(0);
            }
            uint64_t result = sub_1001DFF0C(8);
            break;
          case 9:
            return result;
          default:
            sub_100007764((uint64_t *)&unk_1007225C0);
            uint64_t v48 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            uint64_t v49 = *(void *)v48;
            uint64_t v120 = *(void *)(*(void *)v48 + 72);
            unint64_t v50 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
            uint64_t v51 = swift_allocObject();
            *(_OWORD *)(v51 + 16) = xmmword_100611020;
            unint64_t v52 = v51 + v50;
            uint64_t v53 = v48[14];
            uint64_t v112 = a3;
            uint64_t v54 = (unint64_t *)(v51 + v50 + v53);
            uint64_t v55 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
            uint64_t v56 = type metadata accessor for DIPError.PropertyKey();
            uint64_t v57 = *(void (**)(void))(*(void *)(v56 - 8) + 104);
            ((void (*)(unint64_t, uint64_t, uint64_t))v57)(v52, v55, v56);
            unint64_t v59 = (void *)v5[4];
            unint64_t v121 = v5[3];
            unint64_t v58 = v121;
            v54[3] = (unint64_t)&type metadata for String;
            *uint64_t v54 = v58;
            v54[1] = (unint64_t)v59;
            os_log_type_t v60 = (void (*)(uint64_t))v112;
            uint64_t v61 = v52 + v120 + v48[14];
            v57();
            char v62 = *((unsigned char *)v5 + v25);
            *(void *)(v61 + 24) = &type metadata for DIPCloudContainerState;
            *(unsigned char *)uint64_t v61 = v62;
            swift_bridgeObjectRetain();
            sub_10015C504(v51);
            uint64_t aBlock = 0;
            unint64_t v124 = 0xE000000000000000;
            _StringGuts.grow(_:)(82);
            v63._uint64_t countAndFlagsBits = 0xD000000000000039;
            v63._object = (void *)0x8000000100640790;
            String.append(_:)(v63);
            swift_bridgeObjectRetain();
            v64._uint64_t countAndFlagsBits = v121;
            v64._object = v59;
            String.append(_:)(v64);
            swift_bridgeObjectRelease();
            v65._object = (void *)0x80000001006407D0;
            v65._uint64_t countAndFlagsBits = 0xD000000000000017;
            String.append(_:)(v65);
            (*(void (**)(char *, void, uint64_t))(v117 + 104))(v119, enum case for DIPError.Code.badLogic(_:), v118);
            uint64_t v66 = v113;
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            uint64_t v68 = v114;
            uint64_t v67 = v115;
            if (v60)
            {
              sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
              uint64_t v69 = swift_allocError();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v70, v66, v67);
              v60(v69);
              swift_errorRelease();
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v66, v67);
            break;
        }
        return result;
      }
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v37) {
        goto LABEL_39;
      }
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v71 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      uint64_t v72 = *(void *)v71;
      uint64_t v113 = *(void *)(*(void *)v71 + 72);
      uint64_t v73 = *(unsigned __int8 *)(v72 + 80);
      LODWORD(v116) = a2;
      uint64_t v74 = (v73 + 32) & ~v73;
      uint64_t v75 = swift_allocObject();
      unint64_t v121 = v75;
      *(_OWORD *)(v75 + 16) = xmmword_100611020;
      uint64_t v76 = v75 + v74;
      unint64_t v77 = (uint64_t *)(v76 + v71[14]);
      LODWORD(v120) = enum case for DIPError.PropertyKey.cloudContainerName(_:);
      uint64_t v78 = type metadata accessor for DIPError.PropertyKey();
      uint64_t v112 = a3;
      uint64_t v79 = *(void (**)(void))(*(void *)(v78 - 8) + 104);
      ((void (*)(uint64_t, void, uint64_t))v79)(v76, v120, v78);
      uint64_t v80 = (void *)v5[4];
      uint64_t v120 = v5[3];
      uint64_t v81 = v120;
      v77[3] = (uint64_t)&type metadata for String;
      *unint64_t v77 = v81;
      v77[1] = (uint64_t)v80;
      id v82 = v80;
      uint64_t v83 = v76 + v113 + v71[14];
      v79();
      *(void *)(v83 + 24) = &type metadata for DIPCloudContainerState;
      char v84 = (char)v116;
      *(unsigned char *)uint64_t v83 = (_BYTE)v116;
      swift_bridgeObjectRetain();
      unint64_t v121 = sub_10015C504(v121);
      uint64_t aBlock = 0;
      unint64_t v124 = 0xE000000000000000;
      _StringGuts.grow(_:)(75);
      v85._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v85._object = (void *)0x8000000100640810;
      String.append(_:)(v85);
      LOBYTE(v129) = a1;
      _print_unlocked<A, B>(_:_:)();
      v86._uint64_t countAndFlagsBits = 0x746E6F63206E6920;
      v86._object = (void *)0xEE002072656E6961;
      String.append(_:)(v86);
      swift_bridgeObjectRetain();
      v87._uint64_t countAndFlagsBits = v120;
      v87._object = v82;
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      v88._uint64_t countAndFlagsBits = 0x676E696D6F63203BLL;
      v88._object = (void *)0xEE00206D6F726620;
      String.append(_:)(v88);
      LOBYTE(v129) = *((unsigned char *)v5 + v25);
      _print_unlocked<A, B>(_:_:)();
      v89._uint64_t countAndFlagsBits = 0x746365707865202CLL;
      v89._object = (void *)0xEB00000000206465;
      String.append(_:)(v89);
      LOBYTE(v129) = v84;
      uint64_t v90 = (void (*)(uint64_t))v112;
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(char *, void, uint64_t))(v117 + 104))(v119, enum case for DIPError.Code.cloudContainerInvalidStateTransition(_:), v118);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v92 = v114;
      uint64_t v91 = v115;
      if (v90)
      {
        sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v93 = swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v92 + 16))(v94, v24, v91);
        v90(v93);
        swift_errorRelease();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v24, v91);
  }
}

uint64_t sub_1001DEB74(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v12);
  if (!a1) {
    return sub_1001DD7E0(a6, a7, a3, a4);
  }
  (*(void (**)(char *, void))(v14 + 104))((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for DIPError.Code.internalError(_:));
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v15 = (void (*)(char *, char *, uint64_t))swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001DF254(v15, a3, a4);
  return swift_errorRelease();
}

uint64_t sub_1001DED60(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v7);
  if (!a1) {
    return sub_1001DEF3C((uint64_t (*)(void))a3, a4);
  }
  (*(void (**)(char *, void))(v9 + 104))((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for DIPError.Code.internalError(_:));
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v10 = (void (*)(char *, char *, uint64_t))swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001DF254(v10, a3, a4);
  return swift_errorRelease();
}

uint64_t sub_1001DEF3C(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_retain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v23 = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = a2;
    uint64_t v13 = (uint8_t *)v12;
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446210;
    v22[1] = v13 + 4;
    uint64_t v25 = a1;
    uint64_t v14 = *(void *)(v3 + 24);
    unint64_t v15 = *(void *)(v3 + 32);
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_100110D58(v14, v15, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    a1 = v25;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Container %{public}s has detached", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  }
  else
  {

    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  *(unsigned char *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state) = 9;
  unint64_t v16 = sub_10015CB84((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v17 = (unint64_t *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
  swift_beginAccess();
  *uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  unint64_t v18 = sub_10015CC88((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v19 = (unint64_t *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
  swift_beginAccess();
  *uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
  swift_beginAccess();
  *uint64_t v20 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  *(void *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = sub_10015CC94((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t result = swift_bridgeObjectRelease();
  if (a1) {
    return a1(0);
  }
  return result;
}

uint64_t sub_1001DF254(void (*a1)(char *, char *, uint64_t), void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v57 = a3;
  uint64_t v66 = a2;
  char v62 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v65 = v5;
  __chkstk_darwin(v5);
  uint64_t v68 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  __chkstk_darwin(v7);
  unint64_t v59 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for DIPError();
  uint64_t v70 = *(void *)(v58 - 8);
  uint64_t v9 = __chkstk_darwin(v58);
  uint64_t v67 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v69 = (char *)&v55 - v11;
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v12 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v13 = *(void *)(*(void *)v12 + 72);
  unint64_t v14 = (*(unsigned __int8 *)(*(void *)v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100611020;
  unint64_t v16 = v15 + v14;
  uint64_t v17 = (uint64_t *)(v15 + v14 + v12[14]);
  uint64_t v18 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
  uint64_t v19 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v20 = *(void (**)(void))(*(void *)(v19 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v20)(v16, v18, v19);
  uint64_t v21 = v4;
  uint64_t v22 = *(void *)(v4 + 24);
  unint64_t v23 = *(void *)(v4 + 32);
  v17[3] = (uint64_t)&type metadata for String;
  uint64_t v56 = v22;
  *uint64_t v17 = v22;
  v17[1] = v23;
  uint64_t v24 = v16 + v13;
  uint64_t v25 = v58;
  uint64_t v26 = v12[14];
  uint64_t v27 = v70;
  uint64_t v28 = v24 + v26;
  v20();
  uint64_t v29 = v21;
  unint64_t v30 = v23;
  uint64_t v63 = OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state;
  char v31 = *(unsigned char *)(v29 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
  *(void *)(v28 + 24) = &type metadata for DIPCloudContainerState;
  *(unsigned char *)uint64_t v28 = v31;
  swift_bridgeObjectRetain();
  sub_10015C504(v15);
  (*(void (**)(char *, void, uint64_t))(v60 + 104))(v59, enum case for DIPError.Code.internalError(_:), v61);
  swift_errorRetain();
  char v32 = v69;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  defaultLogger()();
  unint64_t v33 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v33(v67, v32, v25);
  swift_retain();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    char v62 = v33;
    uint64_t v37 = v36;
    uint64_t v61 = swift_slowAlloc();
    v72[0] = v61;
    *(_DWORD *)uint64_t v37 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v71 = sub_100110D58(v56, v30, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v38 = v67;
    uint64_t v39 = Error.localizedDescription.getter();
    uint64_t v71 = sub_100110D58(v39, v40, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v67 = *(char **)(v70 + 8);
    ((void (*)(char *, uint64_t))v67)(v38, v25);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Container %{public}s entered error state due to error: %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v33 = v62;
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    unint64_t v41 = v67;
    uint64_t v67 = *(char **)(v27 + 8);
    ((void (*)(char *, uint64_t))v67)(v41, v25);
  }

  (*(void (**)(char *, uint64_t))(v64 + 8))(v68, v65);
  *(unsigned char *)(v29 + v63) = 9;
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v42 = swift_allocError();
  unint64_t v43 = v69;
  v33(v44, v69, v25);
  sub_1001E0024(v42);
  swift_errorRelease();
  unint64_t v45 = sub_10015CB84((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v46 = (void (*)(uint64_t, char *, uint64_t))v33;
  uint64_t v47 = (unint64_t *)(v29 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
  swift_beginAccess();
  unint64_t *v47 = v45;
  swift_bridgeObjectRelease();
  unint64_t v48 = sub_10015CC88((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v49 = (unint64_t *)(v29 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
  swift_beginAccess();
  unint64_t *v49 = v48;
  swift_bridgeObjectRelease();
  unint64_t v50 = (void *)(v29 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
  swift_beginAccess();
  *unint64_t v50 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  *(void *)(v29 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = sub_10015CC94((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v51 = v66;
  if (v66)
  {
    uint64_t v52 = swift_allocError();
    v46(v53, v43, v25);
    v51(v52);
    swift_errorRelease();
  }
  return ((uint64_t (*)(char *, uint64_t))v67)(v43, v25);
}

uint64_t sub_1001DFA40(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2) {
    return result;
  }
  uint64_t v43 = v10;
  uint64_t v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
  swift_beginAccess();
  if (!*(void *)(*v13 + 16))
  {
    swift_retain();
    goto LABEL_6;
  }
  sub_10003BDD0(a2);
  swift_bridgeObjectRetain();
  sub_10059076C(a1);
  char v15 = v14;
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
LABEL_6:
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v44 = *v13;
    *uint64_t v13 = 0x8000000000000000;
    sub_100563174((uint64_t)&_swiftEmptyArrayStorage, a1, isUniquelyReferenced_nonNull_native);
    *uint64_t v13 = v44;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  uint64_t v17 = swift_allocObject();
  uint64_t v41 = a2;
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  swift_beginAccess();
  uint64_t v42 = a3;
  swift_retain();
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v44 = *v13;
  uint64_t v19 = (char *)v44;
  *uint64_t v13 = 0x8000000000000000;
  unint64_t v21 = sub_10059076C(a1);
  uint64_t v22 = *((void *)v19 + 2);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    char v25 = v20;
    if (*((void *)v19 + 3) >= v24)
    {
      if (v18)
      {
        if ((v20 & 1) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        sub_10016C138();
        if ((v25 & 1) == 0) {
          goto LABEL_24;
        }
      }
    }
    else
    {
      sub_1001677C8(v24, v18);
      unint64_t v26 = sub_10059076C(a1);
      if ((v25 & 1) != (v27 & 1))
      {
LABEL_25:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v21 = v26;
      if ((v25 & 1) == 0)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    uint64_t v19 = *(char **)(*(void *)(v44 + 56) + 8 * v21);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_15;
    }
  }
  uint64_t v19 = sub_10011032C(0, *((void *)v19 + 2) + 1, 1, v19);
LABEL_15:
  unint64_t v29 = *((void *)v19 + 2);
  unint64_t v28 = *((void *)v19 + 3);
  if (v29 >= v28 >> 1) {
    uint64_t v19 = sub_10011032C((char *)(v28 > 1), v29 + 1, 1, v19);
  }
  *((void *)v19 + 2) = v29 + 1;
  unint64_t v30 = &v19[16 * v29];
  *((void *)v30 + 4) = sub_1001EE4F8;
  *((void *)v30 + 5) = v17;
  uint64_t v31 = v44;
  *(void *)(*(void *)(v44 + 56) + 8 * v21) = v19;
  *uint64_t v13 = v31;
  swift_endAccess();
  defaultLogger()();
  swift_retain_n();
  char v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136446466;
    unint64_t v35 = sub_1001D9724(a1);
    uint64_t v44 = sub_100110D58(v35, v36, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2082;
    uint64_t v40 = v8;
    uint64_t v37 = *(void *)(v4 + 24);
    unint64_t v38 = *(void *)(v4 + 32);
    swift_bridgeObjectRetain();
    uint64_t v44 = sub_100110D58(v37, v38, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Handler is waiting for state %{public}s in container %{public}s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10003BEDC(v41);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v12, v40);
  }
  else
  {
    sub_10003BEDC(v41);

    swift_release_n();
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v12, v8);
  }
}

uint64_t sub_1001DFF0C(char a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *v3;
  if (*(void *)(*v3 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_10059076C(a1);
    if (v7)
    {
      uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        uint64_t v10 = v8 + 40;
        do
        {
          uint64_t v11 = *(void (**)(void *))(v10 - 8);
          v12[0] = 0;
          swift_retain();
          v11(v12);
          swift_release();
          v10 += 16;
          --v9;
        }
        while (v9);
      }
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_1005604A4(a1);
      swift_endAccess();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001E0024(uint64_t a1)
{
  uint64_t v3 = (unint64_t *)(v1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
  swift_beginAccess();
  unint64_t v4 = *v3;
  uint64_t v20 = *v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(*v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(*v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_20:
    uint64_t v16 = *(void *)(*(void *)(v4 + 56) + 8 * v12);
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = v16 + 40;
      do
      {
        uint64_t v19 = *(void (**)(uint64_t *))(v18 - 8);
        uint64_t v21 = a1;
        swift_retain();
        v19(&v21);
        swift_release();
        v18 += 16;
        --v17;
      }
      while (v17);
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v8) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v20 + 8 * v13);
  ++v10;
  if (v14) {
    goto LABEL_19;
  }
  int64_t v10 = v13 + 1;
  if (v13 + 1 >= v8) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v20 + 8 * v10);
  if (v14) {
    goto LABEL_19;
  }
  int64_t v10 = v13 + 2;
  if (v13 + 2 >= v8) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v20 + 8 * v10);
  if (v14)
  {
LABEL_19:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_20;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_24:
    swift_release();
    *uint64_t v3 = sub_10015CB84((uint64_t)&_swiftEmptyArrayStorage);
    return swift_bridgeObjectRelease();
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v20 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1001E0218(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  int64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(a3 + 40);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a2;
  v16[4] = a4;
  v16[5] = a5;
  v16[6] = a1;
  aBlock[4] = sub_1001EE68C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FA718;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  sub_10003BDD0(a4);
  id v18 = a1;
  static DispatchQoS.unspecified.getter();
  BOOL v23 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v21);
  return swift_release();
}

void sub_1001E04F8(void *a1, void *a2, void (*a3)(uint64_t), uint64_t a4, void *a5)
{
  id v82 = a5;
  uint64_t v83 = a4;
  Swift::String v88 = a3;
  id v91 = a2;
  uint64_t v6 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v80 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for DIPError.Code();
  uint64_t v87 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  Swift::String v89 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v85 = v10;
  uint64_t v86 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v79 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v77 = (char *)&v76 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v78 = (char *)&v76 - v17;
  __chkstk_darwin(v16);
  char v84 = (char *)&v76 - v18;
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v19 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v20 = *(void *)(*(void *)v19 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(*(void *)v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v19 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100611020;
  BOOL v23 = (uint64_t *)(v22 + v21 + v19[14]);
  uint64_t v81 = v7;
  uint64_t v24 = *(void (**)(void))(v7 + 104);
  ((void (*)(unint64_t, void, uint64_t))v24)(v22 + v21, enum case for DIPError.PropertyKey.cloudContainerName(_:), v6);
  uint64_t v26 = a1[3];
  char v25 = (char *)a1[4];
  v23[3] = (uint64_t)&type metadata for String;
  uint64_t *v23 = v26;
  v23[1] = (uint64_t)v25;
  uint64_t v27 = v6;
  unint64_t v28 = v25;
  unint64_t v29 = v22 + v21 + v20 + v19[14];
  v24();
  char v30 = *((unsigned char *)a1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
  *(void *)(v29 + 24) = &type metadata for DIPCloudContainerState;
  *(unsigned char *)unint64_t v29 = v30;
  id v31 = v91;
  swift_bridgeObjectRetain();
  unint64_t v32 = sub_10015C504(v22);
  if (v31)
  {
    (*(void (**)(char *, void, uint64_t))(v87 + 104))(v89, enum case for DIPError.Code.internalError(_:), v90);
    swift_errorRetain();
    os_log_type_t v33 = v84;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v34 = v88;
    uint64_t v36 = v85;
    uint64_t v35 = v86;
    if (v88)
    {
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v37 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v38, v33, v36);
      v34(v37);
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v36);
    return;
  }
  uint64_t v76 = v26;
  char v84 = v28;
  uint64_t v39 = v78;
  uint64_t v41 = (uint64_t)v80;
  uint64_t v40 = v81;
  uint64_t v42 = v79;
  if (v82)
  {
    id v91 = v82;
    id v43 = [v91 accountStatus];
    if (v43 == (id)1)
    {
      char v44 = (*(uint64_t (**)(void))(*a1 + 360))();
      unint64_t v45 = v89;
      uint64_t v46 = v90;
      if (v44 & 1) == 0 || ([v91 supportsDeviceToDeviceEncryption])
      {
        swift_bridgeObjectRelease();
        if (v88) {
          v88(0);
        }
        id v47 = v91;

        return;
      }
      (*(void (**)(char *, void, uint64_t))(v87 + 104))(v45, enum case for DIPError.Code.cloudkitD2DEncryptionNotSupported(_:), v46);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v71 = v88;
      if (v88)
      {
        sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v72 = v85;
        uint64_t v73 = swift_allocError();
        uint64_t v74 = v86;
        (*(void (**)(uint64_t, char *, uint64_t))(v86 + 16))(v75, v42, v72);
        v71(v73);

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v42, v72);
        return;
      }
      (*(void (**)(char *, uint64_t))(v86 + 8))(v42, v85);
    }
    else
    {
      id v56 = v43;
      ((void (*)(uint64_t, void, uint64_t))v24)(v41, enum case for DIPError.PropertyKey.appleAccountStatus(_:), v27);
      id v57 = [v91 accountStatus];
      uint64_t v95 = &type metadata for Int;
      *(void *)&long long v94 = v57;
      sub_1000078A8(&v94, v93);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v92 = v32;
      sub_1005622A8(v93, v41, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v27);
      *(void *)&long long v94 = 0;
      *((void *)&v94 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(91);
      v59._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v59._object = (void *)0x8000000100640890;
      String.append(_:)(v59);
      uint64_t v60 = v84;
      swift_bridgeObjectRetain();
      v61._uint64_t countAndFlagsBits = v76;
      v61._object = v60;
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      v62._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
      v62._object = (void *)0x80000001006408B0;
      String.append(_:)(v62);
      *(void *)&v93[0] = v56;
      v63._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._uint64_t countAndFlagsBits = 0xD000000000000013;
      v64._object = (void *)0x80000001006408E0;
      String.append(_:)(v64);
      (*(void (**)(char *, void, uint64_t))(v87 + 104))(v89, enum case for DIPError.Code.invalidAppleAccount(_:), v90);
      uint64_t v65 = v77;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v66 = v88;
      if (v88)
      {
        sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v67 = v85;
        uint64_t v68 = swift_allocError();
        uint64_t v69 = v86;
        (*(void (**)(uint64_t, char *, uint64_t))(v86 + 16))(v70, v65, v67);
        v66(v68);

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v65, v67);
        return;
      }
      (*(void (**)(char *, uint64_t))(v86 + 8))(v65, v85);
    }

    return;
  }
  *(void *)&long long v94 = 0;
  *((void *)&v94 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(61);
  v48._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  v48._object = (void *)0x8000000100640830;
  String.append(_:)(v48);
  uint64_t v49 = v84;
  swift_bridgeObjectRetain();
  v50._uint64_t countAndFlagsBits = v76;
  v50._object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v87 + 104))(v89, enum case for DIPError.Code.unexpectedDeviceState(_:), v90);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  uint64_t v51 = v88;
  uint64_t v53 = v85;
  uint64_t v52 = v86;
  if (v88)
  {
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v54 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v55, v39, v53);
    v51(v54);
    swift_errorRelease();
  }
  (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v53);
}

uint64_t sub_1001E1034(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 312))(v11);
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v41 = v7;
    uint64_t v42 = v6;
    uint64_t v43 = a2;
    uint64_t v16 = v2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName;
    swift_beginAccess();
    uint64_t v17 = (uint64_t *)(v14 + 40);
    do
    {
      if (!*(void *)(*(void *)v16 + 16)) {
        goto LABEL_8;
      }
      uint64_t v19 = *(v17 - 1);
      uint64_t v18 = *v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100590548(v19, v18);
      LOBYTE(v19) = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
LABEL_8:
        swift_bridgeObjectRelease();
        id v26 = [self fetchAllRecordZonesOperation];
        id v27 = [objc_allocWithZone((Class)CKOperationConfiguration) init];
        [v27 setQualityOfService:17];
        [v26 setConfiguration:v27];
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = 0;
        uint64_t v29 = swift_allocObject();
        *(void *)(v29 + 16) = v2;
        *(void *)(v29 + 24) = v28;
        swift_retain();
        swift_retain();
        CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter();
        char v30 = (void *)swift_allocObject();
        void v30[2] = v2;
        v30[3] = v28;
        uint64_t v31 = v43;
        v30[4] = a1;
        v30[5] = v31;
        swift_retain();
        swift_retain();
        sub_10003BDD0((uint64_t)a1);
        CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter();
        sub_1001E999C(v26, 0);

        return swift_release();
      }
      v17 += 2;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    defaultLogger()();
    swift_retain();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      BOOL v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)BOOL v23 = 136446210;
      uint64_t v40 = a1;
      uint64_t v24 = *(void *)(v3 + 24);
      unint64_t v25 = *(void *)(v3 + 32);
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_100110D58(v24, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      a1 = v40;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Not fetching zones for container %{public}s since all zones are cached.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v10, v42);
    if (a1) {
      return a1(0);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    swift_retain();
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v33, v34))
    {

      swift_release();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
      if (!a1) {
        return result;
      }
      return a1(0);
    }
    uint64_t v43 = a2;
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v41 = v7;
    v46[0] = v36;
    uint64_t v40 = a1;
    *(_DWORD *)uint64_t v35 = 136446210;
    uint64_t v42 = v6;
    uint64_t v37 = *(void *)(v3 + 24);
    unint64_t v38 = *(void *)(v3 + 32);
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_100110D58(v37, v38, v46);
    a1 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Not fetching zones for container %{public}s since no zones are required.", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v13, v42);
    if (a1) {
      return a1(0);
    }
  }
  return result;
}

uint64_t sub_1001E1624(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(a4 + 40);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  char v17 = a3 & 1;
  *(unsigned char *)(v16 + 24) = a3 & 1;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a4;
  *(void *)(v16 + 48) = a5;
  aBlock[4] = sub_1001EE48C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FA560;
  uint64_t v18 = _Block_copy(aBlock);
  sub_1000EE5AC(a2, v17);
  id v19 = a1;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v22);
  return swift_release();
}

void sub_1001E190C(void *a1, char a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v24 = (void *)(a5 + 16);
    swift_errorRetain();
    defaultLogger()();
    sub_1000EE5AC(a1, 1);
    id v25 = a3;
    sub_1000EE5AC(a1, 1);
    id v26 = v25;
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    int v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v46 = v11;
      unint64_t v32 = (void *)v31;
      uint64_t v47 = swift_slowAlloc();
      uint64_t v49 = (uint64_t)v26;
      v50[0] = v47;
      *(_DWORD *)uint64_t v30 = 138412546;
      os_log_t v45 = v27;
      Swift::String v48 = v24;
      id v33 = v26;
      int v44 = v29;
      id v34 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v32 = v26;

      *(_WORD *)(v30 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v35 = Error.localizedDescription.getter();
      uint64_t v49 = sub_100110D58(v35, v36, v50);
      uint64_t v24 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000EE6D8(a1, 1);
      sub_1000EE6D8(a1, 1);
      os_log_t v37 = v45;
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v44, "fetchZones error received for zone ID %@: %s", (uint8_t *)v30, 0x16u);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v10);
    }
    else
    {

      sub_1000EE6D8(a1, 1);
      sub_1000EE6D8(a1, 1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    swift_beginAccess();
    *uint64_t v24 = a1;
    swift_errorRelease();
  }
  else
  {
    id v14 = a1;
    id v15 = [a3 zoneName];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    id v19 = [a3 zoneName];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    sub_100025C28(0, &qword_100726CC0);
    if (v20 == static CKRecordZoneID.defaultZoneName.getter() && v22 == v23)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_9:
      sub_1000EE6D8(a1, 0);
      return;
    }
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v38)
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    id v39 = [v14 zoneID];
    uint64_t v40 = (uint64_t *)(a4 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
    swift_beginAccess();
    if (v39)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v49 = *v40;
      *uint64_t v40 = 0x8000000000000000;
      sub_100563148((uint64_t)v39, v16, v18, isUniquelyReferenced_nonNull_native);
      *uint64_t v40 = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v42 = (void *)sub_1005603AC(v16, v18);
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    sub_1000EE6D8(a1, 0);
  }
}

void sub_1001E1E28(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v67 = a6;
  LODWORD(v64) = a5;
  uint64_t v63 = a4;
  uint64_t v65 = type metadata accessor for DIPError();
  uint64_t v9 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DIPError.Code();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v66 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(void *)(a1 + 16))
  {
    if (a2)
    {
      (*(void (**)(char *, void, uint64_t))(v17 + 104))(v66, enum case for DIPError.Code.internalError(_:), v16);
      swift_errorRetain();
      swift_errorRetain();
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v19 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      a2(v19);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    Swift::String v59 = v11;
    uint64_t v60 = v9;
    uint64_t v57 = v13;
    uint64_t v58 = v12;
    uint64_t v61 = a3;
    Swift::String v62 = a2;
    if (v64)
    {
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v30 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      uint64_t v31 = *(void *)v30;
      uint64_t v64 = *(void *)(*(void *)v30 + 72);
      unint64_t v32 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_100611020;
      unint64_t v34 = v33 + v32;
      uint64_t v35 = (void *)(v34 + v30[14]);
      uint64_t v36 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
      uint64_t v37 = type metadata accessor for DIPError.PropertyKey();
      char v38 = *(void (**)(void))(*(void *)(v37 - 8) + 104);
      ((void (*)(unint64_t, uint64_t, uint64_t))v38)(v34, v36, v37);
      id v39 = v38;
      uint64_t v40 = v67;
      uint64_t v41 = v67[3];
      uint64_t v42 = v67[4];
      v35[3] = &type metadata for String;
      void *v35 = v41;
      v35[1] = v42;
      unint64_t v43 = v34 + v64 + v30[14];
      v39();
      int v44 = v62;
      char v45 = *((unsigned char *)v40 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
      *(void *)(v43 + 24) = &type metadata for DIPCloudContainerState;
      *(unsigned char *)unint64_t v43 = v45;
      swift_bridgeObjectRetain();
      uint64_t v46 = v63;
      sub_1001EDCCC(v63, 1);
      sub_10015C504(v33);
      sub_1001EB4E0(v46);
      (*(void (**)(char *, void, uint64_t))(v17 + 104))(v66, enum case for DIPError.Code.internalError(_:), v16);
      uint64_t v47 = v59;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      if (v44)
      {
        sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v48 = v65;
        uint64_t v49 = swift_allocError();
        uint64_t v50 = v60;
        (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v51, v47, v48);
        v44(v49);
        sub_1001EDCD8(v46, 1);
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v48);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v65);
        sub_1001EDCD8(v46, 1);
      }
    }
    else
    {
      defaultLogger()();
      uint64_t v20 = v67;
      swift_retain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v24 = (void *)swift_slowAlloc();
        uint64_t v66 = (char *)swift_slowAlloc();
        uint64_t v70 = v66;
        *(_DWORD *)uint64_t v23 = 136446466;
        uint64_t v25 = v20[3];
        unint64_t v26 = v67[4];
        swift_bridgeObjectRetain();
        uint64_t v69 = sub_100110D58(v25, v26, (uint64_t *)&v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2112;
        swift_beginAccess();
        uint64_t v27 = swift_bridgeObjectRetain();
        sub_1004EB56C(v27);
        swift_bridgeObjectRelease();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        int v29 = v62;
        uint64_t v20 = v67;
        swift_release();
        Class v68 = isa;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v24 = isa;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Successfully fetched record zones for container %{public}s: %@", (uint8_t *)v23, 0x16u);
        sub_100007764(&qword_1007208D0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v58);
      }
      else
      {

        swift_release_n();
        (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v58);
        int v29 = v62;
      }
      swift_beginAccess();
      uint64_t v52 = swift_bridgeObjectRetain();
      sub_1004EB56C(v52);
      swift_bridgeObjectRelease();
      id v53 = [self standardUserDefaults];
      Class v54 = Array._bridgeToObjectiveC()().super.isa;
      uint64_t v55 = swift_release();
      (*(void (**)(uint64_t))(*v20 + 328))(v55);
      NSString v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v53 setObject:v54 forKey:v56];

      if (v29) {
        v29(0);
      }
    }
  }
}

uint64_t sub_1001E2794(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v64 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v58 - v10;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 320))(v9);
  uint64_t v13 = v12;
  if (!*(void *)(v12 + 16))
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    swift_retain();
    id v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v63 = a2;
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136446210;
      uint64_t v67 = v41 + 4;
      uint64_t v42 = *(void *)(v3 + 24);
      unint64_t v43 = *(void *)(v3 + 32);
      swift_bridgeObjectRetain();
      v69[9] = sub_100110D58(v42, v43, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Not fetching subscriptions for container %{public}s since no subscriptions are required.", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v11, v62);
    if (a1) {
      return a1(0);
    }
    return result;
  }
  uint64_t v63 = a2;
  Swift::String v59 = a1;
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v65 = v12 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(v12 + 32);
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  uint64_t v60 = v2;
  uint64_t v67 = (uint8_t *)(v2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
  uint64_t result = swift_beginAccess();
  int64_t v19 = 0;
  int64_t v66 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_23;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_55:
      __break(1u);
      return result;
    }
    if (v22 >= v66)
    {
      swift_release();
      uint64_t v23 = v64;
      goto LABEL_49;
    }
    uint64_t v23 = v64;
    unint64_t v24 = *(void *)(v65 + 8 * v22);
    ++v19;
    if (!v24)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v66) {
        goto LABEL_48;
      }
      unint64_t v24 = *(void *)(v65 + 8 * v19);
      if (!v24)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v66) {
          goto LABEL_48;
        }
        unint64_t v24 = *(void *)(v65 + 8 * v19);
        if (!v24) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_23:
    uint64_t v26 = *(void *)v67;
    if (!*(void *)(*(void *)v67 + 16))
    {
      swift_release();
      goto LABEL_45;
    }
    uint64_t v27 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v21);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v30 = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v26 + 32);
    unint64_t v32 = v30 & ~v31;
    if (((*(void *)(v26 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v33 = *(void *)(v26 + 48);
    unint64_t v34 = (void *)(v33 + 16 * v32);
    BOOL v35 = *v34 == v28 && v34[1] == v29;
    if (!v35 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v36 = ~v31;
      while (1)
      {
        unint64_t v32 = (v32 + 1) & v36;
        if (((*(void *)(v26 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0) {
          break;
        }
        uint64_t v37 = (void *)(v33 + 16 * v32);
        BOOL v38 = *v37 == v28 && v37[1] == v29;
        if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_6;
        }
      }
LABEL_40:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_45:
      id v44 = [self fetchAllSubscriptionsOperation];
      id v45 = [objc_allocWithZone((Class)CKOperationConfiguration) init];
      [v45 setQualityOfService:17];
      [v44 setConfiguration:v45];
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = 0;
      uint64_t v47 = swift_allocObject();
      uint64_t v48 = v60;
      *(void *)(v47 + 16) = v60;
      *(void *)(v47 + 24) = v46;
      swift_retain();
      swift_retain();
      CKFetchSubscriptionsOperation.perSubscriptionResultBlock.setter();
      uint64_t v49 = (void *)swift_allocObject();
      v49[2] = v48;
      v49[3] = v46;
      uint64_t v50 = (uint64_t)v59;
      uint64_t v51 = v63;
      v49[4] = v59;
      v49[5] = v51;
      swift_retain();
      swift_retain();
      sub_10003BDD0(v50);
      CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.setter();
      sub_1001E999C(v44, 0);

      return swift_release();
    }
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v25 = v22 + 3;
  if (v25 < v66)
  {
    unint64_t v24 = *(void *)(v65 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        int64_t v19 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_55;
        }
        if (v19 >= v66) {
          goto LABEL_48;
        }
        unint64_t v24 = *(void *)(v65 + 8 * v19);
        ++v25;
        if (v24) {
          goto LABEL_22;
        }
      }
    }
    int64_t v19 = v25;
    goto LABEL_22;
  }
LABEL_48:
  swift_release();
LABEL_49:
  defaultLogger()();
  uint64_t v52 = v60;
  swift_retain();
  id v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 136446210;
    uint64_t v56 = *(void *)(v52 + 24);
    unint64_t v57 = *(void *)(v52 + 32);
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_100110D58(v56, v57, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Not fetching subscriptions for container %{public}s since all subscriptions are cached.", v55, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v23, v62);
  if (v59) {
    return v59(0);
  }
  return result;
}

uint64_t sub_1001E2F74(void *a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v16 = (void *)(a6 + 16);
    swift_errorRetain();
    defaultLogger()();
    swift_bridgeObjectRetain();
    sub_1000EE5AC(a1, 1);
    swift_bridgeObjectRetain();
    sub_1000EE5AC(a1, 1);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      int64_t v25 = (void *)(a6 + 16);
      uint64_t v20 = v19;
      uint64_t v24 = swift_slowAlloc();
      v27[0] = v24;
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain();
      Swift::Int v26 = sub_100110D58(a4, a5, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v21 = Error.localizedDescription.getter();
      Swift::Int v26 = sub_100110D58(v21, v22, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000EE6D8(a1, 1);
      sub_1000EE6D8(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "fetch subscriptions error received for subscription ID %s: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v16 = v25;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_1000EE6D8(a1, 1);
      sub_1000EE6D8(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    swift_beginAccess();
    *uint64_t v16 = a1;
    return swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1005D83B4(&v26, a4, a5);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001E32A8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = a8;
  uint64_t v26 = a9;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v18 - 8);
  uint64_t v29 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a3 + 40);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a4;
  *(void *)(v21 + 24) = a5;
  *(void *)(v21 + 32) = a6;
  *(void *)(v21 + 40) = a1;
  a2 &= 1u;
  *(unsigned char *)(v21 + 48) = a2;
  *(void *)(v21 + 56) = a3;
  aBlock[4] = v25;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = v26;
  unint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  sub_10003BDD0(a5);
  sub_1001EDCCC(a1, a2);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v15);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

void sub_1001E3590(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v68 = a6;
  LODWORD(v65) = a5;
  uint64_t v64 = a4;
  uint64_t v66 = type metadata accessor for DIPError();
  uint64_t v9 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DIPError.Code();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v67 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(void *)(a1 + 16))
  {
    if (a2)
    {
      (*(void (**)(char *, void, uint64_t))(v17 + 104))(v67, enum case for DIPError.Code.internalError(_:), v16);
      swift_errorRetain();
      swift_errorRetain();
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v19 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      a2(v19);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v58 = v13;
    uint64_t v59 = v12;
    uint64_t v60 = v11;
    uint64_t v61 = v9;
    uint64_t v62 = a3;
    uint64_t v63 = a2;
    if (v65)
    {
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v31 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      uint64_t v32 = *(void *)v31;
      uint64_t v65 = *(void *)(*(void *)v31 + 72);
      unint64_t v33 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_100611020;
      unint64_t v35 = v34 + v33;
      uint64_t v36 = (void *)(v35 + v31[14]);
      uint64_t v37 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
      uint64_t v38 = type metadata accessor for DIPError.PropertyKey();
      id v39 = *(void (**)(void))(*(void *)(v38 - 8) + 104);
      ((void (*)(unint64_t, uint64_t, uint64_t))v39)(v35, v37, v38);
      os_log_type_t v40 = v39;
      uint64_t v41 = v68;
      uint64_t v42 = v68[3];
      uint64_t v43 = v68[4];
      v36[3] = &type metadata for String;
      *uint64_t v36 = v42;
      v36[1] = v43;
      unint64_t v44 = v35 + v65 + v31[14];
      v40();
      id v45 = v63;
      char v46 = *((unsigned char *)v41 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
      *(void *)(v44 + 24) = &type metadata for DIPCloudContainerState;
      *(unsigned char *)unint64_t v44 = v46;
      swift_bridgeObjectRetain();
      uint64_t v47 = v64;
      sub_1001EDCCC(v64, 1);
      sub_10015C504(v34);
      sub_1001EB4E0(v47);
      (*(void (**)(char *, void, uint64_t))(v17 + 104))(v67, enum case for DIPError.Code.internalError(_:), v16);
      uint64_t v48 = v60;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      if (v45)
      {
        sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v49 = v66;
        uint64_t v50 = swift_allocError();
        uint64_t v51 = v61;
        (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v52, v48, v49);
        v45(v50);
        sub_1001EDCD8(v47, 1);
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v48, v49);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v61 + 8))(v48, v66);
        sub_1001EDCD8(v47, 1);
      }
    }
    else
    {
      defaultLogger()();
      uint64_t v20 = v68;
      swift_retain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        v71[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446466;
        uint64_t v24 = v20[3];
        unint64_t v25 = v68[4];
        swift_bridgeObjectRetain();
        uint64_t v70 = sub_100110D58(v24, v25, v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2080;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v26 = Set.description.getter();
        unint64_t v28 = v27;
        swift_bridgeObjectRelease();
        uint64_t v29 = v26;
        uint64_t v20 = v68;
        uint64_t v69 = sub_100110D58(v29, v28, v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Successfully fetched subscriptions for container self.containerName%{public}s: %s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v30 = v63;
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v58 + 8))(v15, v59);
      }
      else
      {

        swift_release_n();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v15, v59);
        uint64_t v30 = v63;
      }
      id v53 = [self standardUserDefaults];
      swift_beginAccess();
      uint64_t v54 = swift_bridgeObjectRetain();
      sub_1004EB654(v54);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      uint64_t v56 = swift_release();
      (*(void (**)(uint64_t))(*v20 + 336))(v56);
      NSString v57 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v53 setObject:isa forKey:v57];

      if (v30) {
        v30(0);
      }
    }
  }
}

uint64_t sub_1001E3EBC(uint8_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v52 - v12;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 312))(v11);
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    swift_retain();
    os_log_type_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v54 = v6;
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v53 = v7;
      v63[0] = v43;
      uint64_t v60 = a2;
      *(_DWORD *)uint64_t v42 = 136446210;
      uint64_t v59 = v42 + 4;
      uint64_t v45 = *(void *)(v3 + 24);
      unint64_t v44 = *(void *)(v3 + 32);
      swift_bridgeObjectRetain();
      uint64_t v62 = sub_100110D58(v45, v44, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "No zones required for container %{public}s; skipping zone creation",
        v42,
        0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v13, v54);
      if (!a1) {
        return result;
      }
    }
    else
    {

      swift_release();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
      if (!a1) {
        return result;
      }
    }
    return ((uint64_t (*)(void))a1)(0);
  }
  NSString v57 = v10;
  uint64_t v53 = v7;
  uint64_t v54 = v6;
  uint64_t v59 = a1;
  uint64_t v60 = a2;
  uint64_t v16 = swift_allocObject();
  uint64_t v55 = v16;
  *(void *)(v16 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v17 = (void *)(v16 + 16);
  uint64_t v58 = v3;
  uint64_t v18 = v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName;
  swift_beginAccess();
  uint64_t v56 = v14;
  uint64_t v19 = (uint64_t *)(v14 + 40);
  do
  {
    uint64_t v20 = *(v19 - 1);
    uint64_t v21 = *v19;
    uint64_t v22 = *(void *)(*(void *)v18 + 16);
    swift_bridgeObjectRetain();
    if (v22
      && (swift_bridgeObjectRetain(), sub_100590548(v20, v21), char v24 = v23, swift_bridgeObjectRelease(), (v24 & 1) != 0))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      id v25 = objc_allocWithZone((Class)CKRecordZone);
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v25 initWithZoneName:v26];

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v19 += 2;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  if (*v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = *(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v29 = v58;
  unint64_t v28 = v59;
  uint64_t v30 = v57;
  if (v27)
  {
    id v31 = [objc_allocWithZone((Class)CKModifyRecordZonesOperation) init];
    uint64_t v32 = v55;
    sub_100025C28(0, &qword_100726CF8);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v31 setRecordZonesToSave:isa];

    id v34 = [objc_allocWithZone((Class)CKOperationConfiguration) init];
    [v34 setQualityOfService:17];
    [v31 setConfiguration:v34];
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = &_swiftEmptyArrayStorage;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = 0;
    uint64_t v37 = (void *)swift_allocObject();
    v37[2] = v29;
    v37[3] = v35;
    v37[4] = v36;
    swift_retain();
    swift_retain();
    swift_retain();
    CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter();
    uint64_t v38 = (void *)swift_allocObject();
    long long v38[2] = v29;
    v38[3] = v36;
    uint64_t v39 = v60;
    v38[4] = v28;
    v38[5] = v39;
    v38[6] = v35;
    v38[7] = v32;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10003BDD0((uint64_t)v28);
    swift_retain();
    CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter();
    sub_1001E999C(v31, 0);
    swift_release();

    swift_release();
  }
  else
  {
    defaultLogger()();
    swift_retain();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136446210;
      uint64_t v59 = v49 + 4;
      uint64_t v51 = *(void *)(v29 + 24);
      unint64_t v50 = *(void *)(v29 + 32);
      swift_bridgeObjectRetain();
      uint64_t v61 = sub_100110D58(v51, v50, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "No zones to create for container %{public}s; skipping zone creation",
        v49,
        0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v54);
    if (v28) {
      ((void (*)(void))v28)(0);
    }
  }
  return swift_release();
}

uint64_t sub_1001E465C(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v15 - 8);
  uint64_t v25 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(void *)(a4 + 40);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  char v19 = a3 & 1;
  *(unsigned char *)(v18 + 24) = a3 & 1;
  *(void *)(v18 + 32) = a4;
  *(void *)(v18 + 40) = a5;
  *(void *)(v18 + 48) = a1;
  *(void *)(v18 + 56) = a6;
  aBlock[4] = sub_1001EE15C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FA380;
  uint64_t v20 = _Block_copy(aBlock);
  sub_1000EE5AC(a2, v19);
  swift_retain();
  swift_retain();
  id v21 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v25);
  return swift_release();
}

void sub_1001E494C(void *a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v26 = (void *)(a6 + 16);
    swift_errorRetain();
    defaultLogger()();
    sub_1000EE5AC(a1, 1);
    id v27 = a5;
    sub_1000EE5AC(a1, 1);
    id v28 = v27;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v54 = v13;
      id v34 = (void *)v33;
      uint64_t v55 = swift_slowAlloc();
      uint64_t v57 = (uint64_t)v28;
      v58[0] = v55;
      *(_DWORD *)uint64_t v32 = 138412546;
      os_log_t v53 = v29;
      uint64_t v56 = v26;
      id v35 = v28;
      int v52 = v31;
      id v36 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v34 = v28;

      *(_WORD *)(v32 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v37 = Error.localizedDescription.getter();
      uint64_t v57 = sub_100110D58(v37, v38, v58);
      uint64_t v26 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000EE6D8(a1, 1);
      sub_1000EE6D8(a1, 1);
      os_log_t v39 = v53;
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v52, "createZones error received for zone ID %@: %s", (uint8_t *)v32, 0x16u);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v54 + 8))(v15, v12);
    }
    else
    {

      sub_1000EE6D8(a1, 1);
      sub_1000EE6D8(a1, 1);

      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    swift_beginAccess();
    *uint64_t v26 = a1;
    swift_errorRelease();
  }
  else
  {
    uint64_t v16 = (char **)(a4 + 16);
    id v17 = a1;
    id v18 = [v17 zoneID];
    id v19 = [v18 zoneName];

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    id v23 = [v17 zoneID];
    uint64_t v24 = (uint64_t *)(a3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
    swift_beginAccess();
    if (v23)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v57 = *v24;
      *uint64_t v24 = 0x8000000000000000;
      sub_100563148((uint64_t)v23, v20, v22, isUniquelyReferenced_nonNull_native);
      *uint64_t v24 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      os_log_type_t v40 = (void *)sub_1005603AC(v20, v22);
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    id v41 = [v17 zoneID];
    id v42 = [v41 zoneName];

    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v44;

    swift_beginAccess();
    char v46 = *v16;
    char v47 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v16 = v46;
    if ((v47 & 1) == 0)
    {
      char v46 = sub_10010F3C4(0, *((void *)v46 + 2) + 1, 1, v46);
      *uint64_t v16 = v46;
    }
    unint64_t v49 = *((void *)v46 + 2);
    unint64_t v48 = *((void *)v46 + 3);
    if (v49 >= v48 >> 1)
    {
      char v46 = sub_10010F3C4((char *)(v48 > 1), v49 + 1, 1, v46);
      *uint64_t v16 = v46;
    }
    *((void *)v46 + 2) = v49 + 1;
    unint64_t v50 = &v46[16 * v49];
    *((void *)v50 + 4) = v43;
    *((void *)v50 + 5) = v45;
    swift_endAccess();
    sub_1000EE6D8(a1, 0);
  }
}

uint64_t sub_1001E4E7C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = a8;
  uint64_t v28 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  id v27 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v16 - 8);
  uint64_t v31 = v16;
  __chkstk_darwin(v16);
  id v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(a3 + 40);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a4;
  *(void *)(v19 + 24) = a5;
  *(void *)(v19 + 32) = a6;
  *(void *)(v19 + 40) = a3;
  *(void *)(v19 + 48) = a1;
  char v20 = a2 & 1;
  *(unsigned char *)(v19 + 56) = a2 & 1;
  uint64_t v21 = v26;
  *(void *)(v19 + 64) = a7;
  *(void *)(v19 + 72) = v21;
  aBlock[4] = sub_1001EE0E8;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FA330;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  sub_10003BDD0(a5);
  swift_retain();
  sub_1001EDCCC(a1, v20);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  uint64_t v24 = v27;
  uint64_t v23 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v23);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v31);
  return swift_release();
}

uint64_t sub_1001E5194(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, void *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v91 = a8;
  uint64_t v93 = a7;
  LODWORD(v95) = a6;
  unint64_t v92 = a5;
  uint64_t v94 = a4;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DIPError();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v80 - v20;
  uint64_t v22 = type metadata accessor for DIPError.Code();
  uint64_t v96 = *(void *)(v22 - 8);
  uint64_t v97 = v22;
  __chkstk_darwin(v22);
  uint64_t v98 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 16))
  {
    if (a2)
    {
      (*(void (**)(char *, void, uint64_t))(v96 + 104))(v98, enum case for DIPError.Code.internalError(_:), v97);
      swift_errorRetain();
      swift_errorRetain();
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v25 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      a2(v25);
      swift_errorRelease();
      return swift_errorRelease();
    }
  }
  else
  {
    uint64_t v86 = v19;
    uint64_t v81 = v21;
    uint64_t v85 = v14;
    uint64_t v82 = v12;
    uint64_t v83 = v11;
    uint64_t v88 = v16;
    uint64_t v89 = v15;
    uint64_t v87 = a3;
    uint64_t v90 = a2;
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v26 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v27 = *(void *)(*(void *)v26 + 72);
    unint64_t v28 = (*(unsigned __int8 *)(*(void *)v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v26 + 80);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_100611020;
    unint64_t v30 = v29 + v28;
    uint64_t v31 = (uint64_t *)(v29 + v28 + v26[14]);
    uint64_t v32 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    uint64_t v33 = type metadata accessor for DIPError.PropertyKey();
    id v34 = *(void (**)(void))(*(void *)(v33 - 8) + 104);
    ((void (*)(unint64_t, uint64_t, uint64_t))v34)(v30, v32, v33);
    uint64_t v35 = v94;
    uint64_t v36 = *(void *)(v94 + 24);
    uint64_t v37 = *(void **)(v94 + 32);
    v31[3] = (uint64_t)&type metadata for String;
    uint64_t v84 = v36;
    uint64_t *v31 = v36;
    v31[1] = (uint64_t)v37;
    unint64_t v38 = v30 + v27 + v26[14];
    v34();
    char v39 = *(unsigned char *)(v35 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(void *)(v38 + 24) = &type metadata for DIPCloudContainerState;
    *(unsigned char *)unint64_t v38 = v39;
    swift_bridgeObjectRetain();
    unint64_t v40 = sub_10015C504(v29);
    uint64_t v41 = v35;
    if (v95)
    {
      uint64_t v61 = (uint64_t)v92;
      swift_errorRetain();
      sub_1001EB4E0(v61);
      (*(void (**)(char *, void, uint64_t))(v96 + 104))(v98, enum case for DIPError.Code.internalError(_:), v97);
      uint64_t v62 = v86;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v63 = v90;
      if (v90)
      {
        sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v64 = v89;
        uint64_t v65 = swift_allocError();
        uint64_t v66 = v88;
        (*(void (**)(uint64_t, char *, uint64_t))(v88 + 16))(v67, v62, v64);
        v63(v65);
        sub_1001EDCD8(v61, 1);
        swift_errorRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v62, v64);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v88 + 8))(v62, v89);
        return sub_1001EDCD8(v61, 1);
      }
    }
    else
    {
      unint64_t v95 = v40;
      unint64_t v92 = v37;
      uint64_t v42 = v93 + 16;
      uint64_t v43 = (void *)(v91 + 16);
      swift_beginAccess();
      uint64_t v44 = *(void *)(*(void *)v42 + 16);
      swift_beginAccess();
      if (*v43 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v45 = *(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v46 = v89;
      uint64_t v47 = v88;
      unint64_t v48 = v85;
      if (v44 == v45)
      {
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v49 = swift_bridgeObjectRetain();
        sub_1004EB56C(v49);
        swift_bridgeObjectRelease();
        id v50 = [self standardUserDefaults];
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        uint64_t v52 = swift_release();
        (*(void (**)(uint64_t))(*(void *)v41 + 328))(v52);
        NSString v53 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v50 setObject:isa forKey:v53];

        defaultLogger()();
        swift_retain_n();
        swift_retain();
        uint64_t v54 = Logger.logObject.getter();
        os_log_type_t v55 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v56 = swift_slowAlloc();
          v103[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v56 = 136446466;
          unint64_t v57 = (unint64_t)v92;
          swift_bridgeObjectRetain();
          uint64_t v100 = sub_100110D58(v84, v57, v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v56 + 12) = 2082;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          uint64_t v58 = Array.description.getter();
          unint64_t v60 = v59;
          swift_bridgeObjectRelease();
          uint64_t v99 = sub_100110D58(v58, v60, v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Created container %{public}s zones %{public}s", (uint8_t *)v56, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
          swift_release();
        }
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v48, v83);
        if (v90) {
          return ((uint64_t (*)(void))v90)(0);
        }
      }
      else
      {
        uint64_t v101 = 0;
        uint64_t v102 = 0xE000000000000000;
        _StringGuts.grow(_:)(69);
        v103[0] = v101;
        v103[1] = v102;
        v68._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
        v68._object = (void *)0x8000000100640690;
        String.append(_:)(v68);
        uint64_t v69 = v92;
        swift_bridgeObjectRetain();
        v70._uint64_t countAndFlagsBits = v84;
        v70._object = v69;
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        v71._uint64_t countAndFlagsBits = 0x746365707865203BLL;
        v71._object = (void *)0xED0000203D206465;
        String.append(_:)(v71);
        swift_beginAccess();
        if (*v43 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v72 = *(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v100 = v72;
        v73._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v73);
        swift_bridgeObjectRelease();
        v74._uint64_t countAndFlagsBits = 0x203D20746F67202CLL;
        v74._object = (void *)0xE800000000000000;
        String.append(_:)(v74);
        swift_beginAccess();
        uint64_t v99 = *(void *)(*(void *)v42 + 16);
        v75._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v96 + 104))(v98, enum case for DIPError.Code.cloudkitResponseInconsistent(_:), v97);
        uint64_t v76 = v81;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        unint64_t v77 = v90;
        if (v90)
        {
          sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          uint64_t v78 = swift_allocError();
          (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v79, v76, v46);
          v77(v78);
          swift_errorRelease();
        }
        return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v76, v46);
      }
    }
  }
  return result;
}

uint64_t sub_1001E5ECC(void (*a1)(void), uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v108 = a2;
  unint64_t v109 = a1;
  uint64_t v102 = type metadata accessor for DIPError.Code();
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v103 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for DIPError();
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  unint64_t v104 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v107 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v99 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v98 - v11;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 320))(v10);
  if (!*(void *)(v13 + 16))
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    swift_retain();
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v120 = swift_slowAlloc();
      uint64_t v98 = v7;
      *(_DWORD *)uint64_t v56 = 136446210;
      uint64_t v57 = *(void *)(v4 + 24);
      unint64_t v58 = *(void *)(v4 + 32);
      swift_bridgeObjectRetain();
      uint64_t v122 = sub_100110D58(v57, v58, &v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "No subscriptions required in container %{public}s; skipping subscription creation",
        v56,
        0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v107 + 8))(v12, v98);
    }
    else
    {

      swift_release();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v107 + 8))(v12, v7);
    }
    if (v109) {
      return ((uint64_t (*)(void))v109)(0);
    }
    return result;
  }
  uint64_t v98 = v7;
  uint64_t v14 = swift_allocObject();
  uint64_t v100 = v14;
  *(void *)(v14 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v15 = (void *)(v14 + 16);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v115 = v13 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v13 + 32);
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v16;
  uint64_t v20 = (uint64_t *)(v4 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
  uint64_t v117 = v4 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs;
  swift_beginAccess();
  uint64_t v113 = v20;
  swift_beginAccess();
  int64_t v21 = 0;
  int64_t v116 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v111 = v4;
  uint64_t v114 = v13;
  uint64_t v112 = v15;
  if (v19) {
    goto LABEL_51;
  }
LABEL_8:
  int64_t v22 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (v22 >= v116)
  {
LABEL_55:
    swift_release();
    uint64_t v3 = v99;
    if (!(*v15 >> 62))
    {
      if (!*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_71;
      }
      goto LABEL_57;
    }
LABEL_70:
    swift_bridgeObjectRetain();
    uint64_t v92 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v92)
    {
LABEL_71:
      defaultLogger()();
      swift_retain();
      uint64_t v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v93, v94))
      {
        unint64_t v95 = (uint8_t *)swift_slowAlloc();
        uint64_t v120 = swift_slowAlloc();
        *(_DWORD *)unint64_t v95 = 136446210;
        uint64_t v96 = *(void *)(v4 + 24);
        unint64_t v97 = *(void *)(v4 + 32);
        swift_bridgeObjectRetain();
        uint64_t v119 = sub_100110D58(v96, v97, &v120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "No subscriptions to create in container %{public}s; skipping subscription creation",
          v95,
          0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      (*(void (**)(void *, uint64_t))(v107 + 8))(v3, v98);
      if (v109) {
        v109(0);
      }
      return swift_release();
    }
LABEL_57:
    id v60 = [objc_allocWithZone((Class)CKModifySubscriptionsOperation) init];
    uint64_t v61 = v100;
    sub_100025C28(0, &qword_100726CF0);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v60 setSubscriptionsToSave:isa];

    id v63 = [objc_allocWithZone((Class)CKOperationConfiguration) init];
    [v63 setQualityOfService:17];
    [v60 setConfiguration:v63];
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = 0;
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = v4;
    *(void *)(v65 + 24) = v64;
    swift_retain();
    swift_retain();
    CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter();
    uint64_t v66 = (void *)swift_allocObject();
    v66[2] = v4;
    v66[3] = v64;
    uint64_t v67 = (uint64_t)v109;
    uint64_t v68 = v108;
    v66[4] = v109;
    v66[5] = v68;
    v66[6] = v61;
    swift_retain();
    swift_retain();
    sub_10003BDD0(v67);
    swift_retain();
    CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter();
    sub_1001E999C(v60, 0);
    swift_release();

    return swift_release();
  }
  unint64_t v23 = *(void *)(v115 + 8 * v22);
  ++v21;
  if (!v23)
  {
    int64_t v21 = v22 + 1;
    if (v22 + 1 >= v116) {
      goto LABEL_55;
    }
    unint64_t v23 = *(void *)(v115 + 8 * v21);
    if (!v23)
    {
      int64_t v21 = v22 + 2;
      if (v22 + 2 >= v116) {
        goto LABEL_55;
      }
      unint64_t v23 = *(void *)(v115 + 8 * v21);
      if (!v23)
      {
        int64_t v24 = v22 + 3;
        if (v24 < v116)
        {
          unint64_t v23 = *(void *)(v115 + 8 * v24);
          if (v23)
          {
            int64_t v21 = v24;
            goto LABEL_21;
          }
          while (1)
          {
            int64_t v21 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_69;
            }
            if (v21 >= v116) {
              goto LABEL_55;
            }
            unint64_t v23 = *(void *)(v115 + 8 * v21);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        goto LABEL_55;
      }
    }
  }
LABEL_21:
  unint64_t v19 = (v23 - 1) & v23;
  for (unint64_t i = __clz(__rbit64(v23)) + (v21 << 6); ; unint64_t i = v53 | (v21 << 6))
  {
    uint64_t v26 = 16 * i;
    uint64_t v27 = (uint64_t *)(*(void *)(v13 + 48) + v26);
    uint64_t v29 = *v27;
    unint64_t v28 = (void *)v27[1];
    unint64_t v30 = (uint64_t *)(*(void *)(v13 + 56) + v26);
    uint64_t v3 = (void *)v30[1];
    uint64_t v118 = *v30;
    uint64_t v31 = *(void *)v117;
    if (*(void *)(*(void *)v117 + 16))
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v32 = Hasher._finalize()();
      uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
      unint64_t v34 = v32 & ~v33;
      uint64_t v35 = v31 + 56;
      if ((*(void *)(v31 + 56 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34))
      {
        uint64_t v36 = *(void *)(v31 + 48);
        uint64_t v37 = (void *)(v36 + 16 * v34);
        BOOL v38 = *v37 == v29 && v37[1] == (void)v28;
        if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_7:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v4 = v111;
          uint64_t v13 = v114;
          uint64_t v15 = v112;
          if (!v19) {
            goto LABEL_8;
          }
          goto LABEL_51;
        }
        uint64_t v110 = ~v33;
        unint64_t v39 = (v34 + 1) & ~v33;
        if ((*(void *)(v35 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39))
        {
          unint64_t v40 = (void *)(v36 + 16 * v39);
          BOOL v41 = *v40 == v29 && v40[1] == (void)v28;
          if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_7;
          }
          for (unint64_t j = v39 + 1; ; unint64_t j = v43 + 1)
          {
            unint64_t v43 = j & v110;
            if (((*(void *)(v35 + (((j & v110) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v110)) & 1) == 0) {
              break;
            }
            uint64_t v44 = (void *)(v36 + 16 * v43);
            BOOL v45 = *v44 == v29 && v44[1] == (void)v28;
            if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_7;
            }
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v4 = v111;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v13 = v114;
      uint64_t v15 = v112;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v46 = *v113;
    uint64_t v47 = v118;
    if (!*(void *)(*v113 + 16)) {
      goto LABEL_60;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v48 = sub_100590548(v47, (uint64_t)v3);
    if ((v49 & 1) == 0) {
      break;
    }
    id v50 = *(id *)(*(void *)(v46 + 56) + 8 * v48);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_100025C28(0, &qword_100726CE8);
    id v51 = v50;
    v52._uint64_t countAndFlagsBits = v29;
    v52._object = v28;
    CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v51, v52);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    if (!v19) {
      goto LABEL_8;
    }
LABEL_51:
    unint64_t v53 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_60:
  swift_bridgeObjectRelease();
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v69 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v70 = *(void *)v69;
  int64_t v116 = *(void *)(*(void *)v69 + 72);
  unint64_t v71 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_100611020;
  unint64_t v73 = v72 + v71;
  Swift::String v74 = (uint64_t *)(v72 + v71 + v69[14]);
  uint64_t v75 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
  uint64_t v76 = type metadata accessor for DIPError.PropertyKey();
  unint64_t v77 = *(void (**)(void))(*(void *)(v76 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v77)(v73, v75, v76);
  uint64_t v78 = v111;
  uint64_t v80 = *(void **)(v111 + 32);
  uint64_t v117 = *(void *)(v111 + 24);
  uint64_t v79 = v117;
  v74[3] = (uint64_t)&type metadata for String;
  *Swift::String v74 = v79;
  v74[1] = (uint64_t)v80;
  int64_t v81 = v73 + v116 + v69[14];
  v77();
  char v82 = *(unsigned char *)(v78 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
  *(void *)(v81 + 24) = &type metadata for DIPCloudContainerState;
  *(unsigned char *)int64_t v81 = v82;
  swift_bridgeObjectRetain();
  sub_10015C504(v72);
  uint64_t v120 = 0;
  unint64_t v121 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  uint64_t v120 = 0xD00000000000001ALL;
  unint64_t v121 = 0x80000001006405A0;
  v83._uint64_t countAndFlagsBits = v118;
  v83._object = v3;
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._uint64_t countAndFlagsBits = 0x746E6F63206E6920;
  v84._object = (void *)0xEE002072656E6961;
  String.append(_:)(v84);
  swift_bridgeObjectRetain();
  v85._uint64_t countAndFlagsBits = v117;
  v85._object = v80;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v101 + 104))(v103, enum case for DIPError.Code.unexpectedDaemonState(_:), v102);
  uint64_t v86 = v104;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  uint64_t v87 = v106;
  uint64_t v88 = v105;
  if (v109)
  {
    uint64_t v89 = v109;
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v90 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v88 + 16))(v91, v86, v87);
    v89(v90);
    swift_errorRelease();
  }
  (*(void (**)(char *, uint64_t))(v88 + 8))(v86, v87);
  swift_release();
  return swift_release();
}

uint64_t sub_1001E6E1C(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = a8;
  uint64_t v26 = a9;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v18 - 8);
  uint64_t v29 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a5 + 40);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a3;
  a4 &= 1u;
  *(unsigned char *)(v21 + 24) = a4;
  *(void *)(v21 + 32) = a5;
  *(void *)(v21 + 40) = a1;
  *(void *)(v21 + 48) = a2;
  *(void *)(v21 + 56) = a6;
  aBlock[4] = v25;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = v26;
  int64_t v22 = _Block_copy(aBlock);
  sub_1000EE5AC(a3, a4);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v15);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

uint64_t sub_1001E7100(void *a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v20 = (void *)(a6 + 16);
    swift_errorRetain();
    defaultLogger()();
    sub_1000EE5AC(a1, 1);
    swift_bridgeObjectRetain();
    sub_1000EE5AC(a1, 1);
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v29 = (void *)(a6 + 16);
      uint64_t v24 = v23;
      uint64_t v28 = swift_slowAlloc();
      v31[0] = v28;
      *(_DWORD *)uint64_t v24 = 136315394;
      swift_bridgeObjectRetain();
      Swift::Int v30 = sub_100110D58(a4, a5, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v25 = Error.localizedDescription.getter();
      Swift::Int v30 = sub_100110D58(v25, v26, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000EE6D8(a1, 1);
      sub_1000EE6D8(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "createSubscriptions error received for subscription ID %s: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v20 = v29;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_1000EE6D8(a1, 1);
      sub_1000EE6D8(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    swift_beginAccess();
    *uint64_t v20 = a1;
    return swift_errorRelease();
  }
  else
  {
    id v15 = a1;
    Swift::Int v16 = CKSubscription.subscriptionID.getter();
    Swift::Int v18 = v17;
    swift_beginAccess();
    sub_1005D83B4(&v30, v16, v18);
    swift_endAccess();
    sub_1000EE6D8(a1, 0);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001E7450(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = a7;
  uint64_t v25 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v15 - 8);
  uint64_t v28 = v15;
  __chkstk_darwin(v15);
  Swift::Int v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(a3 + 40);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a4;
  *(void *)(v18 + 24) = a5;
  *(void *)(v18 + 32) = a6;
  *(void *)(v18 + 40) = a3;
  *(void *)(v18 + 48) = a1;
  char v19 = a2 & 1;
  *(unsigned char *)(v18 + 56) = a2 & 1;
  *(void *)(v18 + 64) = v24;
  aBlock[4] = sub_1001EDF78;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FA218;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  sub_10003BDD0(a5);
  swift_retain();
  sub_1001EDCCC(a1, v19);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  Swift::Int v30 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  uint64_t v21 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v28);
  return swift_release();
}

uint64_t sub_1001E7758(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v88 = a7;
  uint64_t v89 = a5;
  int v91 = a6;
  uint64_t v90 = a4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v87 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPError();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  Swift::Int v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  char v19 = (char *)&v76 - v18;
  uint64_t v20 = type metadata accessor for DIPError.Code();
  uint64_t v92 = *(void *)(v20 - 8);
  uint64_t v93 = v20;
  __chkstk_darwin(v20);
  os_log_type_t v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 16))
  {
    if (a2)
    {
      (*(void (**)(char *, void, uint64_t))(v92 + 104))(v22, enum case for DIPError.Code.internalError(_:), v93);
      swift_errorRetain();
      swift_errorRetain();
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v24 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      a2(v24);
      swift_errorRelease();
      return swift_errorRelease();
    }
  }
  else
  {
    uint64_t v80 = v17;
    unint64_t v77 = v19;
    Swift::String v83 = v22;
    int64_t v81 = v12;
    uint64_t v78 = v10;
    uint64_t v85 = v14;
    uint64_t v84 = v13;
    uint64_t v82 = a3;
    uint64_t v86 = a2;
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v25 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v26 = *(void *)(*(void *)v25 + 72);
    unint64_t v27 = (*(unsigned __int8 *)(*(void *)v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v25 + 80);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_100611020;
    unint64_t v29 = v28 + v27;
    Swift::Int v30 = v90;
    uint64_t v31 = (uint64_t *)(v29 + v25[14]);
    uint64_t v32 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    uint64_t v33 = type metadata accessor for DIPError.PropertyKey();
    unint64_t v34 = *(void (**)(void))(*(void *)(v33 - 8) + 104);
    ((void (*)(unint64_t, uint64_t, uint64_t))v34)(v29, v32, v33);
    uint64_t v35 = v30[3];
    uint64_t v36 = (void *)v30[4];
    uint64_t v31[3] = (uint64_t)&type metadata for String;
    uint64_t v79 = v35;
    uint64_t *v31 = v35;
    v31[1] = (uint64_t)v36;
    unint64_t v37 = v29 + v26 + v25[14];
    v34();
    char v38 = *((unsigned char *)v30 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(void *)(v37 + 24) = &type metadata for DIPCloudContainerState;
    *(unsigned char *)unint64_t v37 = v38;
    swift_bridgeObjectRetain();
    sub_10015C504(v28);
    if (v91)
    {
      uint64_t v57 = v89;
      swift_errorRetain();
      sub_1001EB4E0(v57);
      (*(void (**)(char *, void, uint64_t))(v92 + 104))(v83, enum case for DIPError.Code.internalError(_:), v93);
      unint64_t v58 = v80;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      unint64_t v59 = v86;
      if (v86)
      {
        sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v60 = v84;
        uint64_t v61 = swift_allocError();
        uint64_t v62 = v85;
        (*(void (**)(uint64_t, char *, uint64_t))(v85 + 16))(v63, v58, v60);
        v59(v61);
        sub_1001EDCD8(v57, 1);
        swift_errorRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v58, v60);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v85 + 8))(v58, v84);
        return sub_1001EDCD8(v57, 1);
      }
    }
    else
    {
      unint64_t v39 = v36;
      unint64_t v40 = (unint64_t *)(v88 + 16);
      BOOL v41 = (char *)v30 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs;
      swift_beginAccess();
      uint64_t v42 = *(void *)(*(void *)v41 + 16);
      swift_beginAccess();
      if (*v40 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v43 = *(void *)((*v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v44 = v85;
      BOOL v45 = v81;
      if (v42 == v43)
      {
        swift_bridgeObjectRelease();
        id v46 = [self standardUserDefaults];
        uint64_t v47 = swift_bridgeObjectRetain();
        sub_1004EB654(v47);
        swift_bridgeObjectRelease();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        uint64_t v49 = swift_release();
        (*(void (**)(uint64_t))(*v30 + 336))(v49);
        NSString v50 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v46 setObject:isa forKey:v50];

        defaultLogger()();
        swift_retain_n();
        id v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = swift_slowAlloc();
          uint64_t v95 = swift_slowAlloc();
          *(_DWORD *)uint64_t v53 = 136446466;
          swift_bridgeObjectRetain();
          uint64_t v97 = sub_100110D58(v79, (unint64_t)v39, &v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v53 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v54 = Set.description.getter();
          unint64_t v56 = v55;
          swift_bridgeObjectRelease();
          uint64_t v97 = sub_100110D58(v54, v56, &v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Created container %{public}s subscriptions %s", (uint8_t *)v53, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v81, v78);
        }
        else
        {

          swift_release_n();
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v45, v78);
        }
        if (v86) {
          return ((uint64_t (*)(void))v86)(0);
        }
      }
      else
      {
        uint64_t v95 = 0;
        unint64_t v96 = 0xE000000000000000;
        _StringGuts.grow(_:)(75);
        uint64_t v97 = v95;
        unint64_t v98 = v96;
        v64._uint64_t countAndFlagsBits = 0xD000000000000030;
        v64._object = (void *)0x8000000100640610;
        String.append(_:)(v64);
        swift_bridgeObjectRetain();
        v65._uint64_t countAndFlagsBits = v79;
        v65._object = v39;
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
        v66._uint64_t countAndFlagsBits = 0x746365707865203BLL;
        v66._object = (void *)0xED0000203D206465;
        String.append(_:)(v66);
        swift_beginAccess();
        unint64_t v67 = *v40;
        if (v67 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v68 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v94 = v68;
        v69._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v69);
        swift_bridgeObjectRelease();
        v70._uint64_t countAndFlagsBits = 0x203D20746F67202CLL;
        v70._object = (void *)0xE800000000000000;
        String.append(_:)(v70);
        uint64_t v94 = *(void *)(*(void *)v41 + 16);
        v71._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v71);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v92 + 104))(v83, enum case for DIPError.Code.cloudkitResponseInconsistent(_:), v93);
        uint64_t v72 = v77;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        uint64_t v73 = v84;
        if (v86)
        {
          sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          uint64_t v74 = swift_allocError();
          (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v75, v72, v73);
          v86(v74);
          swift_errorRelease();
        }
        return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v72, v73);
      }
    }
  }
  return result;
}

uint64_t sub_1001E8410(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_1001EC3C0();
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v2 + 312))();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v24 = a1;
    uint64_t v25 = a2;
    specialized ContiguousArray.reserveCapacity(_:)();
    sub_100025C28(0, &qword_100726CC0);
    uint64_t v8 = (void **)(v6 + 40);
    do
    {
      uint64_t v9 = (uint64_t)*(v8 - 1);
      uint64_t v10 = *v8;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
      swift_bridgeObjectRetain();
      v14._uint64_t countAndFlagsBits = v9;
      v14._object = v10;
      v15._uint64_t countAndFlagsBits = v11;
      v15._object = v13;
      CKRecordZoneID.init(zoneName:ownerName:)(v14, v15);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v8 += 2;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    a1 = v24;
    a2 = v25;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v16 = [objc_allocWithZone((Class)CKModifyRecordZonesOperation) init];
  sub_100025C28(0, &qword_100726CC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v16 setRecordZoneIDsToDelete:isa];

  id v18 = [objc_allocWithZone((Class)CKOperationConfiguration) init];
  [v18 setQualityOfService:17];
  [v16 setConfiguration:v18];
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = 0;
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = v3;
  v21[3] = v19;
  v21[4] = v20;
  swift_retain();
  swift_retain();
  swift_retain();
  CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.setter();
  os_log_type_t v22 = (void *)swift_allocObject();
  void v22[2] = v3;
  v22[3] = v20;
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10003BDD0(a1);
  CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter();
  sub_1001E999C(v16, 0);

  swift_release();

  return swift_release();
}

uint64_t sub_1001E8754(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Swift::String v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  Swift::Int v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a4 + 40);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  LOBYTE(a4) = a3 & 1;
  *(unsigned char *)(v18 + 24) = a3 & 1;
  *(void *)(v18 + 32) = a5;
  *(void *)(v18 + 40) = a1;
  *(void *)(v18 + 48) = a6;
  aBlock[4] = sub_1001EDE18;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FA150;
  uint64_t v19 = _Block_copy(aBlock);
  sub_1001EDCCC(a2, a4);
  swift_retain();
  id v20 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v23);
  return swift_release();
}

uint64_t sub_1001E8A40(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v25 = (uint64_t *)(a5 + 16);
    swift_errorRetain();
    defaultLogger()();
    sub_1001EDCCC(a1, 1);
    id v26 = a4;
    sub_1001EDCCC(a1, 1);
    id v27 = v26;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    int v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v42 = v11;
      uint64_t v33 = (void *)v32;
      uint64_t v43 = swift_slowAlloc();
      uint64_t v45 = (uint64_t)v27;
      v46[0] = v43;
      *(_DWORD *)uint64_t v31 = 138412546;
      os_log_t v41 = v28;
      uint64_t v44 = v25;
      id v34 = v27;
      int v40 = v30;
      id v35 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v33 = v27;

      *(_WORD *)(v31 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v36 = Error.localizedDescription.getter();
      uint64_t v45 = sub_100110D58(v36, v37, v46);
      uint64_t v25 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001EDCD8(a1, 1);
      sub_1001EDCD8(a1, 1);
      os_log_t v38 = v41;
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v40, "deleteZones error received for zone ID %@: %s", (uint8_t *)v31, 0x16u);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v10);
    }
    else
    {

      sub_1001EDCD8(a1, 1);
      sub_1001EDCD8(a1, 1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    swift_beginAccess();
    *uint64_t v25 = a1;
    return swift_errorRelease();
  }
  else
  {
    Swift::String v14 = (char **)(a3 + 16);
    id v15 = [a4 zoneName];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    swift_beginAccess();
    uint64_t v19 = *(char **)(a3 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a3 + 16) = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v19 = sub_10010F3C4(0, *((void *)v19 + 2) + 1, 1, v19);
      *Swift::String v14 = v19;
    }
    unint64_t v22 = *((void *)v19 + 2);
    unint64_t v21 = *((void *)v19 + 3);
    if (v22 >= v21 >> 1)
    {
      uint64_t v19 = sub_10010F3C4((char *)(v21 > 1), v22 + 1, 1, v19);
      *Swift::String v14 = v19;
    }
    *((void *)v19 + 2) = v22 + 1;
    uint64_t v23 = &v19[16 * v22];
    *((void *)v23 + 4) = v16;
    *((void *)v23 + 5) = v18;
    return swift_endAccess();
  }
}

uint64_t sub_1001E8E44(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = a7;
  uint64_t v25 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  Swift::String v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v15 - 8);
  uint64_t v28 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(a3 + 40);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a4;
  *(void *)(v18 + 24) = a5;
  *(void *)(v18 + 32) = a6;
  *(void *)(v18 + 40) = a1;
  LOBYTE(a6) = a2 & 1;
  *(unsigned char *)(v18 + 48) = a2 & 1;
  uint64_t v19 = v24;
  *(void *)(v18 + 56) = a3;
  *(void *)(v18 + 64) = v19;
  aBlock[4] = sub_1001EDDB0;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FA100;
  id v20 = _Block_copy(aBlock);
  swift_retain();
  sub_10003BDD0(a5);
  sub_1001EDCCC(a1, a6);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  int v30 = &_swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  uint64_t v21 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v28);
  return swift_release();
}

uint64_t sub_1001E914C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v61 = a7;
  uint64_t v63 = a6;
  LODWORD(v62) = a5;
  uint64_t v66 = a3;
  uint64_t v64 = type metadata accessor for DIPError();
  uint64_t v10 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DIPError.Code();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  Swift::String v65 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 16))
  {
    if (a2)
    {
      (*(void (**)(char *, void, uint64_t))(v18 + 104))(v65, enum case for DIPError.Code.internalError(_:), v17);
      swift_errorRetain();
      swift_errorRetain();
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v21 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      a2(v21);
      swift_errorRelease();
      return swift_errorRelease();
    }
  }
  else
  {
    uint64_t v56 = v13;
    uint64_t v57 = v12;
    uint64_t v55 = v14;
    uint64_t v59 = v10;
    uint64_t v60 = a2;
    uint64_t v58 = a4;
    if ((v62 & 1) == 0)
    {
      uint64_t v22 = v63;
      sub_1001EC3C0();
      defaultLogger()();
      swift_retain_n();
      swift_retain();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136446466;
        uint64_t v27 = *(void *)(v22 + 24);
        unint64_t v26 = *(void *)(v22 + 32);
        swift_bridgeObjectRetain();
        uint64_t v68 = sub_100110D58(v27, v26, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2082;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v28 = Array.description.getter();
        unint64_t v30 = v29;
        swift_bridgeObjectRelease();
        uint64_t v67 = sub_100110D58(v28, v30, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v31 = v60;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Deleted container %{public}s zones %{public}s", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v16, v56);
        if (!v31) {
          return result;
        }
      }
      else
      {

        swift_release_n();
        swift_release();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v16, v56);
        uint64_t v31 = v60;
        if (!v60) {
          return result;
        }
      }
      return ((uint64_t (*)(void))v31)(0);
    }
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v32 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v33 = *(void *)v32;
    uint64_t v62 = *(void *)(*(void *)v32 + 72);
    unint64_t v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_100611020;
    unint64_t v36 = v35 + v34;
    unint64_t v37 = (void *)(v36 + v32[14]);
    uint64_t v38 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    uint64_t v39 = type metadata accessor for DIPError.PropertyKey();
    int v40 = *(void (**)(void))(*(void *)(v39 - 8) + 104);
    ((void (*)(unint64_t, uint64_t, uint64_t))v40)(v36, v38, v39);
    os_log_t v41 = v40;
    uint64_t v42 = v63;
    uint64_t v43 = *(void *)(v63 + 24);
    uint64_t v44 = *(void *)(v63 + 32);
    v37[3] = &type metadata for String;
    *unint64_t v37 = v43;
    v37[1] = v44;
    unint64_t v45 = v36 + v62 + v32[14];
    v41();
    id v46 = v60;
    char v47 = *(unsigned char *)(v42 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(void *)(v45 + 24) = &type metadata for DIPCloudContainerState;
    *(unsigned char *)unint64_t v45 = v47;
    swift_bridgeObjectRetain();
    uint64_t v48 = v58;
    sub_1001EDCCC(v58, 1);
    sub_10015C504(v35);
    sub_1001EB4E0(v48);
    (*(void (**)(char *, void, uint64_t))(v18 + 104))(v65, enum case for DIPError.Code.internalError(_:), v17);
    uint64_t v49 = v57;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    if (v46)
    {
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v50 = v64;
      uint64_t v51 = swift_allocError();
      uint64_t v52 = v59;
      (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v53, v49, v50);
      v46(v51);
      sub_1001EDCD8(v48, 1);
      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v49, v50);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v59 + 8))(v49, v64);
      return sub_1001EDCD8(v48, 1);
    }
  }
  return result;
}

void sub_1001E999C(void *a1, char a2)
{
  id v5 = [objc_allocWithZone((Class)CKOperationGroup) init];
  switch(a2)
  {
    case 6:
      break;
    default:
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v5 setName:v6];

      break;
  }
  char v7 = (*((uint64_t (**)(id))*v2 + 44))([a1 setGroup:v5]);
  uint64_t v8 = &selRef_publicCloudDatabase;
  if ((v7 & 1) == 0) {
    uint64_t v8 = &selRef_privateCloudDatabase;
  }
  id v9 = [v2[2] *v8];
  [v9 addOperation:a1];
}

uint64_t sub_1001E9B9C(uint64_t a1, int a2, uint64_t a3, void (*a4)(uint64_t, void), uint64_t a5)
{
  uint64_t v51 = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  __chkstk_darwin(v9);
  char v47 = &v39[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v48 = type metadata accessor for DispatchQoS();
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v45 = &v39[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v12 - 8);
  uint64_t v43 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = &v39[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for DIPError.Code();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = &v39[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v19 = [self standardUserDefaults];
  v20._object = (void *)0x8000000100640460;
  v20._uint64_t countAndFlagsBits = 0xD000000000000028;
  Swift::Bool v21 = NSUserDefaults.internalBool(forKey:)(v20);

  if (v21)
  {
    (*(void (**)(unsigned char *, void, uint64_t))(v16 + 104))(v18, enum case for DIPError.Code.cloudkitAllRecordsHaveFailedToUpload(_:), v15);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v22 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    a4(v22, 0);
    return swift_errorRelease();
  }
  else
  {
    os_log_t v41 = a4;
    sub_100025C28(0, &qword_100726CE0);
    v54.value._rawValue = (void *)swift_bridgeObjectRetain();
    v54.is_nil = 0;
    Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v54, v55).super.super.super.super.isa;
    [(objc_class *)isa setSavePolicy:1];
    [(objc_class *)isa setAtomic:0];
    [(objc_class *)isa setConfiguration:a3];
    defaultLogger()();
    uint64_t v25 = isa;
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      int v40 = a2;
      uint64_t v29 = CKOperation.operationID.getter();
      uint64_t v52 = (void *)sub_100110D58(v29, v30, aBlock);
      LOBYTE(a2) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "The operation ID for save records is %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(unsigned char *, uint64_t))(v42 + 8))(v14, v43);
    uint64_t v31 = v41;
    uint64_t v32 = v44;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v32;
    *(void *)(v33 + 24) = v25;
    *(void *)(v33 + 32) = v31;
    *(void *)(v33 + 40) = v51;
    *(void *)(v33 + 48) = a1;
    *(unsigned char *)(v33 + 56) = a2;
    aBlock[4] = (uint64_t)sub_1001EDBAC;
    aBlock[5] = v33;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100593800;
    aBlock[3] = (uint64_t)&unk_1006F9FE8;
    unint64_t v34 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    uint64_t v35 = v25;
    swift_retain();
    swift_retain();
    unint64_t v36 = v45;
    static DispatchQoS.unspecified.getter();
    uint64_t v52 = &_swiftEmptyArrayStorage;
    sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100007764((uint64_t *)&unk_1007208F0);
    sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
    unint64_t v37 = v47;
    uint64_t v38 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v34);

    (*(void (**)(unsigned char *, uint64_t))(v49 + 8))(v37, v38);
    (*(void (**)(unsigned char *, uint64_t))(v46 + 8))(v36, v48);
    return swift_release();
  }
}

uint64_t sub_1001EA2C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &_swiftEmptyArrayStorage;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
  swift_retain();
  CKModifyRecordsOperation.perRecordSaveBlock.setter();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = v12;
  v13[6] = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
  sub_1001E999C(a2, a6);

  return swift_release();
}

uint64_t sub_1001EA3E0(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v43 - v13;
  if (a3)
  {
    uint64_t v22 = (char **)(a4 + 16);
    swift_errorRetain();
    id v23 = [a1 recordName];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    swift_beginAccess();
    os_log_type_t v27 = *v22;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v22 = v27;
    uint64_t v45 = v8;
    uint64_t v46 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      os_log_type_t v27 = sub_10010F3C4(0, *((void *)v27 + 2) + 1, 1, v27);
      *uint64_t v22 = v27;
    }
    unint64_t v30 = *((void *)v27 + 2);
    unint64_t v29 = *((void *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      os_log_type_t v27 = sub_10010F3C4((char *)(v29 > 1), v30 + 1, 1, v27);
      *uint64_t v22 = v27;
    }
    *((void *)v27 + 2) = v30 + 1;
    uint64_t v31 = &v27[16 * v30];
    *((void *)v31 + 4) = v24;
    *((void *)v31 + 5) = v26;
    swift_endAccess();
    defaultLogger()();
    sub_1000EE5AC(a2, 1);
    id v32 = a1;
    sub_1000EE5AC(a2, 1);
    id v33 = v32;
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      unint64_t v37 = (void *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v47 = (uint64_t)v33;
      v48[0] = (id)v44;
      *(_DWORD *)uint64_t v36 = 138412546;
      os_log_t v43 = v34;
      id v38 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v37 = v33;

      *(_WORD *)(v36 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v39 = Error.localizedDescription.getter();
      uint64_t v47 = sub_100110D58(v39, v40, (uint64_t *)v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000EE6D8(a2, 1);
      sub_1000EE6D8(a2, 1);
      os_log_t v41 = v43;
      _os_log_impl((void *)&_mh_execute_header, v43, v35, "Received an error while saving record %@ %s", (uint8_t *)v36, 0x16u);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000EE6D8(a2, 1);
    }
    else
    {
      sub_1000EE6D8(a2, 1);

      sub_1000EE6D8(a2, 1);
      sub_1000EE6D8(a2, 1);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v12, v45);
  }
  else
  {
    id v15 = a2;
    defaultLogger()();
    id v16 = v15;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      Swift::String v20 = (void *)swift_slowAlloc();
      uint64_t v46 = v9;
      *(_DWORD *)id v19 = 138412290;
      id v21 = [v16 recordID];
      v48[0] = v21;
      uint64_t v9 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::String v20 = v21;
      sub_1000EE6D8(a2, 0);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%@ successfully saved", v19, 0xCu);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000EE6D8(a2, 0);
    }
    else
    {
      sub_1000EE6D8(a2, 0);
      sub_1000EE6D8(a2, 0);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
}

uint64_t sub_1001EA93C(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), void (*a5)(char *, uint64_t), uint64_t a6, unint64_t a7)
{
  unint64_t v83 = a7;
  uint64_t v87 = a5;
  uint64_t v88 = a4;
  uint64_t v89 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v89 - 8);
  uint64_t v12 = __chkstk_darwin(v89);
  int64_t v81 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v82 = (char *)&v79 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)&v79 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  id v21 = (char *)&v79 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v79 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v79 - v25;
  uint64_t v27 = type metadata accessor for DIPError.Code();
  uint64_t v84 = *(void *)(v27 - 8);
  uint64_t v85 = v27;
  __chkstk_darwin(v27);
  uint64_t v86 = (char *)&v79 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a3;
  dispatch_group_leave(*(dispatch_group_t *)(a3 + 48));
  if (a2)
  {
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v47 = sub_100007764((uint64_t *)&unk_100723460) - 8;
    uint64_t v46 = *(void *)v47;
    uint64_t v48 = *(void *)v47;
    uint64_t v89 = a1;
    uint64_t v49 = *(void *)(v46 + 72);
    unint64_t v50 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_100611020;
    unint64_t v52 = v51 + v50;
    uint64_t v53 = (void *)(v52 + *(int *)(v47 + 56));
    uint64_t v54 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    uint64_t v55 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v56 = *(void (**)(void))(*(void *)(v55 - 8) + 104);
    ((void (*)(unint64_t, uint64_t, uint64_t))v56)(v52, v54, v55);
    uint64_t v57 = *(void *)(v29 + 24);
    uint64_t v58 = *(void *)(v29 + 32);
    v53[3] = &type metadata for String;
    *uint64_t v53 = v57;
    v53[1] = v58;
    unint64_t v59 = v52 + v49 + *(int *)(v47 + 56);
    v56();
    char v60 = *(unsigned char *)(v29 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(void *)(v59 + 24) = &type metadata for DIPCloudContainerState;
    *(unsigned char *)unint64_t v59 = v60;
    uint64_t v61 = v89;
    sub_1001EDCCC(v89, 1);
    swift_bridgeObjectRetain();
    sub_10015C504(v51);
    sub_1001EB4E0(v61);
    (*(void (**)(char *, void, uint64_t))(v84 + 104))(v86, enum case for DIPError.Code.internalError(_:), v85);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v62 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    v88(v62, 0);
    swift_errorRelease();
    return sub_1001EDCD8(v61, 1);
  }
  else
  {
    defaultLogger()();
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Received a success from cloudkit, will check if there are any partial upload failures...", v32, 2u);
      swift_slowDealloc();
    }
    uint64_t v80 = a6;
    id v33 = (uint64_t *)(a6 + 16);

    unint64_t v34 = *(void (**)(char *, uint64_t))(v11 + 8);
    v34(v26, v89);
    defaultLogger()();
    os_log_type_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Checking if all files have failed to upload.", v37, 2u);
      swift_slowDealloc();
    }

    v34(v24, v89);
    swift_beginAccess();
    uint64_t v38 = *(void *)(*v33 + 16);
    if (v83 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v39 = *(void *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v40 = v88;
    if (v38 == v39)
    {
      defaultLogger()();
      os_log_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        os_log_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "All the files have failed to upload.", v43, 2u);
        swift_slowDealloc();
      }

      v34(v21, v89);
      (*(void (**)(char *, void, uint64_t))(v84 + 104))(v86, enum case for DIPError.Code.cloudkitServerUnavailable(_:), v85);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v44 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      v40(v44, 0);
      return swift_errorRelease();
    }
    else
    {
      defaultLogger()();
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v63, v64))
      {
        Swift::String v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v65 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "There has been at least one successful record upload.. Checking if there are any record upload failures", v65, 2u);
        swift_slowDealloc();
      }

      v34(v18, v89);
      swift_beginAccess();
      if (*(void *)(*v33 + 16))
      {
        uint64_t v87 = v34;
        defaultLogger()();
        uint64_t v66 = v80;
        swift_retain();
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v69 = 134217984;
          swift_beginAccess();
          uint64_t v90 = *(void *)(*(void *)(v66 + 16) + 16);
          unint64_t v40 = v88;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "%ld have failed to upload. Returning a partial upload failure error.", v69, 0xCu);
          swift_slowDealloc();
        }
        else
        {

          swift_release();
        }
        uint64_t v74 = v85;
        uint64_t v75 = v86;
        uint64_t v76 = v84;
        v87(v82, v89);
        (*(void (**)(char *, void, uint64_t))(v76 + 104))(v75, enum case for DIPError.Code.cloudkitPartialUploadsFailure(_:), v74);
        sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v77 = swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_beginAccess();
        uint64_t v78 = *v33;
        swift_bridgeObjectRetain();
        v40(v77 | 0x8000000000000000, v78);
        swift_errorRelease();
        return swift_bridgeObjectRelease();
      }
      else
      {
        Swift::String v70 = v81;
        defaultLogger()();
        Swift::String v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v71, v72))
        {
          uint64_t v73 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v73 = 0;
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "All uploads successfully completed", v73, 2u);
          swift_slowDealloc();
        }

        v34(v70, v89);
        return ((uint64_t (*)(unint64_t, void))v40)(0xF000000000000007, 0);
      }
    }
  }
}

uint64_t sub_1001EB4E0(uint64_t a1)
{
  uint64_t v69 = type metadata accessor for Logger();
  uint64_t v68 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v3 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for DIPError();
  uint64_t v4 = *(void *)(v75 - 8);
  uint64_t v5 = __chkstk_darwin(v75);
  uint64_t v67 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v64 - v7;
  uint64_t v9 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPError.Code();
  uint64_t v74 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v73 = (char *)&v64 - v17;
  uint64_t v66 = a1;
  os_log_type_t v18 = (void *)_convertErrorToNSError(_:)();
  unint64_t v70 = sub_10015C504((uint64_t)&_swiftEmptyArrayStorage);
  id v72 = v18;
  id v19 = [v18 code];
  uint64_t v71 = v13;
  switch((unint64_t)v19)
  {
    case 1uLL:
    case 0xFuLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitInternalError(_:);
      goto LABEL_3;
    case 2uLL:
    case 0x16uLL:
      uint64_t v38 = v3;
      id v39 = [v72 userInfo];
      uint64_t v40 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (!*(void *)(v40 + 16) || (unint64_t v43 = sub_100590548(v41, v42), (v44 & 1) == 0))
      {
        long long v77 = 0u;
        long long v78 = 0u;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      sub_10003BC28(*(void *)(v40 + 56) + 32 * v43, (uint64_t)&v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*((void *)&v78 + 1))
      {
LABEL_24:
        sub_10000C6CC((uint64_t)&v77, (uint64_t *)&unk_100727200);
        goto LABEL_25;
      }
      sub_100025C28(0, &qword_100726CD0);
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_25:
        uint64_t v3 = v38;
        uint64_t v22 = v73;
        uint64_t v23 = v67;
        uint64_t v21 = v74;
        uint64_t v13 = v71;
        (*(void (**)(char *, void, uint64_t))(v74 + 104))(v73, enum case for DIPError.Code.internalError(_:), v71);
        goto LABEL_5;
      }
      uint64_t v45 = *(void **)&v76[0];
      NSDictionary.makeIterator()();
      NSDictionary.Iterator.next()();
      sub_1000BEA14((uint64_t)v76, (uint64_t)&v77, &qword_100726CD8);
      while (*((void *)&v78 + 1))
      {
        sub_1000078A8(&v79, v76);
        sub_100007764((uint64_t *)&unk_100723450);
        if (swift_dynamicCast())
        {
          unint64_t v63 = v80;
          swift_bridgeObjectRelease();
          uint64_t v35 = sub_1001EB4E0(v63);

          swift_release();
          swift_errorRelease();
          _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v77);
          return v35;
        }
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v77);
        NSDictionary.Iterator.next()();
        sub_1000BEA14((uint64_t)v76, (uint64_t)&v77, &qword_100726CD8);
      }
      swift_release();

      uint64_t v46 = v74;
      uint64_t v47 = v73;
      uint64_t v48 = v71;
      (*(void (**)(char *, void, uint64_t))(v74 + 104))(v73, enum case for DIPError.Code.internalError(_:), v71);
      uint64_t v21 = v46;
      uint64_t v3 = v38;
      uint64_t v13 = v48;
      uint64_t v22 = v47;
LABEL_4:
      uint64_t v23 = v67;
LABEL_5:
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v16, v22, v13);
      swift_errorRetain();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      defaultLogger()();
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v23, v8, v75);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        os_log_type_t v64 = v8;
        unint64_t v70 = v27;
        *(void *)&long long v77 = v27;
        *(_DWORD *)uint64_t v26 = 136315394;
        swift_getErrorValue();
        uint64_t v28 = Error.localizedDescription.getter();
        *(void *)&v76[0] = sub_100110D58(v28, v29, (uint64_t *)&v77);
        uint64_t v30 = v75;
        uint64_t v67 = v3;
        uint64_t v31 = v68;
        uint64_t v65 = v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v26 + 12) = 2080;
        sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        uint64_t v32 = Error.localizedDescription.getter();
        *(void *)&v76[0] = sub_100110D58(v32, v33, (uint64_t *)&v77);
        uint64_t v4 = v65;
        uint64_t v21 = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v23, v30);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Converting CloudKit error [%s] to DIPError [%s]", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        uint64_t v8 = v64;
        swift_slowDealloc();
        uint64_t v22 = v73;
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v31 + 8))(v67, v69);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v23, v75);

        (*(void (**)(char *, uint64_t))(v68 + 8))(v3, v69);
      }
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v34 = v75;
      uint64_t v35 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v36, v8, v34);

      (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v71);
      return v35;
    case 3uLL:
    case 4uLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.networkTimeOut(_:);
      goto LABEL_3;
    case 6uLL:
    case 0x17uLL:
      uint64_t v49 = v13;
      unint64_t v50 = v3;
      os_log_type_t v64 = v8;
      uint64_t v65 = v4;
      (*(void (**)(char *, void, uint64_t))(v74 + 104))(v73, enum case for DIPError.Code.cloudkitServerUnavailable(_:), v49);
      id v51 = [v72 userInfo];
      goto LABEL_27;
    case 7uLL:
      uint64_t v52 = v13;
      unint64_t v50 = v3;
      os_log_type_t v64 = v8;
      uint64_t v65 = v4;
      (*(void (**)(char *, void, uint64_t))(v74 + 104))(v73, enum case for DIPError.Code.cloudkitRateLimited(_:), v52);
      id v51 = [v72 userInfo];
LABEL_27:
      id v53 = v51;
      uint64_t v54 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v54 + 16) && (unint64_t v57 = sub_100590548(v55, v56), (v58 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v54 + 56) + 32 * v57, (uint64_t)&v77);
      }
      else
      {
        long long v77 = 0u;
        long long v78 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v78 + 1))
      {
        sub_100025C28(0, &qword_100726CC8);
        if (swift_dynamicCast())
        {
          unint64_t v59 = *(void **)&v76[0];
          (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.PropertyKey.serverRetryAfter(_:), v9);
          [v59 doubleValue];
          *((void *)&v78 + 1) = &type metadata for Double;
          *(void *)&long long v77 = v60;
          sub_1000078A8(&v77, v76);
          unint64_t v61 = v70;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v80 = v61;
          sub_1005622A8(v76, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
          unint64_t v70 = v80;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        }
      }
      else
      {
        sub_10000C6CC((uint64_t)&v77, (uint64_t *)&unk_100727200);
      }
      uint64_t v4 = v65;
      uint64_t v8 = v64;
      uint64_t v3 = v50;
      uint64_t v13 = v71;
      uint64_t v21 = v74;
      uint64_t v22 = v73;
      goto LABEL_4;
    case 9uLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.invalidAppleAccount(_:);
      goto LABEL_3;
    case 0xBuLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitRecordDoesNotExist(_:);
      goto LABEL_3;
    case 0xCuLL:
    case 0x18uLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.badLogic(_:);
      goto LABEL_3;
    case 0xEuLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitServerRecordChanged(_:);
      goto LABEL_3;
    case 0x12uLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitIncompatibleVersion(_:);
      goto LABEL_3;
    case 0x14uLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitOperationCancelled(_:);
      goto LABEL_3;
    case 0x15uLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitChangeTokenExpired(_:);
      goto LABEL_3;
    case 0x1AuLL:
    case 0x1CuLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitZoneNotFound(_:);
      goto LABEL_3;
    case 0x20uLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitAccountRestricted(_:);
      goto LABEL_3;
    case 0x6EuLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitManateeUnavailable(_:);
      goto LABEL_3;
    case 0x6FuLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitUnsyncedKeychain(_:);
      goto LABEL_3;
    case 0x70uLL:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitMissingManateeIdentity(_:);
      goto LABEL_3;
    default:
      uint64_t v20 = (unsigned int *)&enum case for DIPError.Code.internalError(_:);
LABEL_3:
      uint64_t v21 = v74;
      uint64_t v22 = v73;
      (*(void (**)(char *, void, uint64_t))(v74 + 104))(v73, *v20, v13);
      goto LABEL_4;
  }
}

void sub_1001EC3C0()
{
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  (*(void (**)(void))(*(void *)v0 + 328))();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 removeObjectForKey:v3];

  id v4 = [v1 standardUserDefaults];
  (*(void (**)(void))(*(void *)v0 + 336))();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 removeObjectForKey:v5];

  id v6 = [v1 standardUserDefaults];
  (*(void (**)(void))(*(void *)v0 + 344))();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 removeObjectForKey:v7];
}

void sub_1001EC594()
{
  id v1 = [self standardUserDefaults];
  (*(void (**)(void))(*(void *)v0 + 328))();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 arrayForKey:v2];

  if (!v3) {
    return;
  }
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v5 = (void *)sub_10015CC88((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v6 = *(void *)(v4 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v26 = (void *)(v0 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
    swift_beginAccess();
    *uint64_t v26 = v5;
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = v4 + 32;
  while (1)
  {
    sub_10003BC28(v7, (uint64_t)&v28);
    if (!swift_dynamicCast()) {
      goto LABEL_6;
    }
    sub_100025C28(0, &qword_100726CC0);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = v9;
    v12._object = v11;
    uint64_t v13 = CKRecordZoneID.init(zoneName:ownerName:)(v27, v12).super.isa;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = v5;
    unint64_t v16 = sub_100590548(v27._countAndFlagsBits, (uint64_t)v27._object);
    uint64_t v17 = v5[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    char v20 = v15;
    if (v5[3] >= v19)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        NSString v5 = v28;
        if ((v15 & 1) == 0) {
          goto LABEL_15;
        }
      }
      else
      {
        sub_10016BF84();
        NSString v5 = v28;
        if ((v20 & 1) == 0) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      sub_1001674E8(v19, isUniquelyReferenced_nonNull_native);
      unint64_t v21 = sub_100590548(v27._countAndFlagsBits, (uint64_t)v27._object);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_25;
      }
      unint64_t v16 = v21;
      NSString v5 = v28;
      if ((v20 & 1) == 0)
      {
LABEL_15:
        v5[(v16 >> 6) + 8] |= 1 << v16;
        *(Swift::String *)(v5[6] + 16 * v16) = v27;
        *(void *)(v5[7] + 8 * v16) = v13;
        uint64_t v23 = v5[2];
        BOOL v24 = __OFADD__(v23, 1);
        uint64_t v25 = v23 + 1;
        if (v24) {
          goto LABEL_24;
        }
        v5[2] = v25;
        swift_bridgeObjectRetain();
        goto LABEL_5;
      }
    }
    uint64_t v8 = v5[7];

    *(void *)(v8 + 8 * v16) = v13;
LABEL_5:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    v7 += 32;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1001EC8D8()
{
  uint64_t v1 = v0;
  id v2 = [self standardUserDefaults];
  (*(void (**)(void))(*(void *)v0 + 336))();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 arrayForKey:v3];

  if (v4)
  {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = &_swiftEmptySetSingleton;
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      uint64_t v7 = v5 + 32;
      do
      {
        sub_10003BC28(v7, (uint64_t)&v12);
        if (swift_dynamicCast())
        {
          sub_1005D83B4(&v12, v10, v11);
          swift_bridgeObjectRelease();
        }
        v7 += 32;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v8 = v13;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = &_swiftEmptySetSingleton;
    }
    uint64_t v9 = (void *)(v1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
    swift_beginAccess();
    *uint64_t v9 = v8;
    swift_bridgeObjectRelease();
  }
}

void sub_1001ECA94()
{
  uint64_t v62 = type metadata accessor for Logger();
  __chkstk_darwin(v62);
  id v1 = [self standardUserDefaults];
  (*(void (**)(void))(*(void *)v0 + 344))();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 dictionaryForKey:v2];

  if (v3)
  {
    uint64_t v57 = v0;
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v5 = sub_10015CC94((uint64_t)&_swiftEmptyArrayStorage);
    int64_t v6 = 0;
    uint64_t v61 = v4 + 64;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    unint64_t v9 = v8 & *(void *)(v4 + 64);
    int64_t v66 = (unint64_t)(v7 + 63) >> 6;
LABEL_5:
    unint64_t v59 = v5 & 0xC000000000000001;
    uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8;
    uint64_t v63 = v5;
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    uint64_t v58 = v10;
    if (!v9)
    {
LABEL_12:
      int64_t v16 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      if (v16 >= v66)
      {
        int64_t v67 = v6;
      }
      else
      {
        unint64_t v17 = *(void *)(v61 + 8 * v16);
        if (v17)
        {
LABEL_15:
          unint64_t v9 = (v17 - 1) & v17;
          unint64_t v12 = __clz(__rbit64(v17)) + (v16 << 6);
          int64_t v67 = v16;
          goto LABEL_11;
        }
        int64_t v25 = v6 + 2;
        if (v6 + 2 >= v66) {
          goto LABEL_43;
        }
        unint64_t v17 = *(void *)(v61 + 8 * v25);
        if (v17)
        {
LABEL_26:
          int64_t v16 = v25;
          goto LABEL_15;
        }
        if (v6 + 3 >= v66)
        {
          int64_t v67 = v6 + 2;
        }
        else
        {
          unint64_t v17 = *(void *)(v61 + 8 * (v6 + 3));
          if (v17)
          {
            int64_t v16 = v6 + 3;
            goto LABEL_15;
          }
          int64_t v25 = v6 + 4;
          if (v6 + 4 >= v66)
          {
            int64_t v67 = v6 + 3;
          }
          else
          {
            unint64_t v17 = *(void *)(v61 + 8 * v25);
            if (v17) {
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v16 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                goto LABEL_70;
              }
              if (v16 >= v66) {
                break;
              }
              unint64_t v17 = *(void *)(v61 + 8 * v16);
              ++v25;
              if (v17) {
                goto LABEL_15;
              }
            }
            int64_t v16 = v66 - 1;
LABEL_43:
            int64_t v67 = v16;
          }
        }
      }
      unint64_t v9 = 0;
      memset(v71, 0, sizeof(v71));
      long long v70 = 0u;
      goto LABEL_18;
    }
    while (1)
    {
      while (1)
      {
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v67 = v6;
        unint64_t v12 = v11 | (v6 << 6);
LABEL_11:
        uint64_t v13 = *(void *)(v4 + 56);
        uint64_t v14 = (void *)(*(void *)(v4 + 48) + 16 * v12);
        uint64_t v15 = v14[1];
        *(void *)&long long v70 = *v14;
        *((void *)&v70 + 1) = v15;
        sub_10003BC28(v13 + 32 * v12, (uint64_t)v71);
        swift_bridgeObjectRetain();
LABEL_18:
        sub_1000BEA14((uint64_t)&v70, (uint64_t)&v72, &qword_100726CA8);
        BOOL v18 = v73;
        if (!v73)
        {
          swift_release();
          *(void *)(v57 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = v63;
          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v19 = v72;
        sub_1000078A8(&v74, &v70);
        if (swift_dynamicCast()) {
          break;
        }
        swift_bridgeObjectRelease();
        int64_t v6 = v67;
        if (!v9) {
          goto LABEL_12;
        }
      }
      sub_100025C28(0, &qword_100726CB0);
      sub_100025C28(0, &qword_100726CB8);
      char v20 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      sub_100025C28(0, &qword_100726CC0);
      v21._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21._object = v22;
      v23._uint64_t countAndFlagsBits = v19;
      v23._object = v18;
      v24.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v23, v21).super.isa;
      if (v20)
      {
        uint64_t v29 = v63;
        if ((v63 & 0xC000000000000001) != 0)
        {
          if (v63 >= 0) {
            uint64_t v29 = v63 & 0xFFFFFFFFFFFFFF8;
          }
          id v30 = v20;
          uint64_t v31 = __CocoaDictionary.count.getter();
          if (!__OFADD__(v31, 1))
          {
            uint64_t v29 = sub_1001ED8BC(v29, v31 + 1);
            goto LABEL_52;
          }
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        id v38 = v20;
LABEL_52:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v70 = v29;
        unint64_t v40 = sub_10059071C((uint64_t)v24.super.isa);
        uint64_t v41 = *(void *)(v29 + 16);
        BOOL v42 = (v39 & 1) == 0;
        uint64_t v43 = v41 + v42;
        if (!__OFADD__(v41, v42))
        {
          if (*(void *)(v29 + 24) >= v43)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              char v56 = v39;
              sub_10016BF90();
              char v39 = v56;
            }
          }
          else
          {
            char v60 = v39;
            sub_1001674F4(v43, isUniquelyReferenced_nonNull_native);
            unint64_t v44 = sub_10059071C((uint64_t)v24.super.isa);
            int v46 = v45 & 1;
            char v39 = v60;
            if ((v60 & 1) != v46) {
              goto LABEL_75;
            }
            unint64_t v40 = v44;
          }
          uint64_t v47 = (void *)v70;
          uint64_t v48 = 8 * v40;
          int64_t v65 = v70;
          if (v39)
          {
            uint64_t v49 = *(void *)(v70 + 56);

            *(void *)(v49 + v48) = v20;
          }
          else
          {
            *(void *)(v70 + 8 * (v40 >> 6) + 64) |= 1 << v40;
            *(CKRecordZoneID *)(v47[6] + 8 * v40) = v24;
            *(void *)(v47[7] + 8 * v40) = v20;
            uint64_t v50 = v47[2];
            BOOL v51 = __OFADD__(v50, 1);
            uint64_t v52 = v50 + 1;
            if (v51) {
              goto LABEL_74;
            }
            void v47[2] = v52;
            id v53 = v24.super.isa;
          }

          swift_bridgeObjectRelease();
          sub_10000C5F4(v68, v69);
          int64_t v5 = v65;
          int64_t v6 = v67;
          goto LABEL_5;
        }
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      swift_bridgeObjectRetain();
      if (v59)
      {
        if (__CocoaDictionary.lookup(_:)())
        {
          swift_unknownObjectRelease();
          uint64_t v32 = __CocoaDictionary.count.getter();
          Swift::Int v33 = sub_1001ED8BC(v58, v32);
          swift_retain();
          unint64_t v34 = sub_10059071C((uint64_t)v24.super.isa);
          char v36 = v35;
          swift_release();
          if (v36)
          {

            unint64_t v37 = *(void **)(*(void *)(v33 + 56) + 8 * v34);
            sub_1005618F8(v34, v33);

            swift_bridgeObjectRelease();
            sub_10000C5F4(v68, v69);
            int64_t v5 = v33;
            goto LABEL_66;
          }
          goto LABEL_73;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v26 = sub_10059071C((uint64_t)v24.super.isa);
        char v28 = v27;
        swift_bridgeObjectRelease();
        if (v28)
        {
          int64_t v5 = v63;
          char v54 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v70 = v63;
          if ((v54 & 1) == 0)
          {
            sub_10016BF90();
            int64_t v5 = v70;
          }

          uint64_t v55 = *(void **)(*(void *)(v5 + 56) + 8 * v26);
          sub_1005618F8(v26, v5);

          swift_bridgeObjectRelease();
          sub_10000C5F4(v68, v69);
LABEL_66:
          int64_t v6 = v67;
          goto LABEL_5;
        }
      }
      sub_10000C5F4(v68, v69);
      int64_t v6 = v67;
      if (!v9) {
        goto LABEL_12;
      }
    }
  }
}

id *sub_1001ED504()
{
  swift_bridgeObjectRelease();
  sub_10000C6CC((uint64_t)v0 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_retrier, &qword_100726CA0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001ED594()
{
  sub_1001ED504();

  return swift_deallocClassInstance();
}

uint64_t sub_1001ED5EC()
{
  return type metadata accessor for DIPCloudContainer();
}

uint64_t type metadata accessor for DIPCloudContainer()
{
  uint64_t result = qword_1007269C8;
  if (!qword_1007269C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001ED640()
{
  sub_1001ED708();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1001ED708()
{
  if (!qword_1007269D8)
  {
    type metadata accessor for DIPRetrier();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1007269D8);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for DIPCloudContainerState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001ED82CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPCloudContainerState()
{
  return &type metadata for DIPCloudContainerState;
}

unint64_t sub_1001ED868()
{
  unint64_t result = qword_100726C98;
  if (!qword_100726C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100726C98);
  }
  return result;
}

Swift::Int sub_1001ED8BC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100007764(&qword_100725828);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_100025C28(0, &qword_100726CC0);
      do
      {
        swift_dynamicCast();
        sub_100025C28(0, &qword_100726CB8);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_1001674F4(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

unint64_t sub_1001EDB10(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F23F0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001EDB5C()
{
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1001EDBAC()
{
  return sub_1001EA2C0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
}

uint64_t sub_1001EDBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001EDBD0()
{
  return swift_release();
}

uint64_t sub_1001EDBD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001EDC20()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001EDC58(void *a1, void *a2, char a3)
{
  return sub_1001EA3E0(a1, a2, a3 & 1, v3);
}

uint64_t sub_1001EDC64()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001EDCB4(uint64_t a1, char a2)
{
  return sub_1001EDEF8(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1001EA93C);
}

uint64_t sub_1001EDCCC(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_1001EDCD8(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1001EDCE4()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001EDD20(void *a1, uint64_t a2, char a3)
{
  return sub_1001E8754(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
}

uint64_t sub_1001EDD34(uint64_t a1, char a2)
{
  return sub_1001EDEF8(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1001E8E44);
}

uint64_t sub_1001EDD4C()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  sub_1001EDCD8(*(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001EDDB0()
{
  return sub_1001E914C(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_1001EDDC4()
{
  sub_1001EDCD8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001EDE18()
{
  return sub_1001EE4A4((uint64_t (*)(void, void, void, void, void))sub_1001E8A40);
}

uint64_t sub_1001EDE34(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  return sub_1001E6E1C(a1, a2, a3, a4 & 1, *(void *)(v4 + 16), *(void *)(v4 + 24), (uint64_t)&unk_1006FA250, (uint64_t)sub_1001EDF94, (uint64_t)&unk_1006FA268);
}

uint64_t sub_1001EDE88()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001EDEE0(uint64_t a1, char a2)
{
  return sub_1001EDEF8(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1001E7450);
}

uint64_t sub_1001EDEF8(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, void, void, void, void, void, void))
{
  return a3(a1, a2 & 1, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_1001EDF14()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_release();
  sub_1001EDCD8(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001EDF78()
{
  return sub_1001E7758(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_1001EDF94()
{
  return sub_1001EE280((uint64_t (*)(void, void, void, void, void, void))sub_1001E7100);
}

uint64_t sub_1001EDFB0()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001EDFF8(void *a1, void *a2, char a3)
{
  return sub_1001E465C(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
}

uint64_t sub_1001EE008()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001EE068(uint64_t a1, char a2)
{
  return sub_1001E4E7C(a1, a2 & 1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1001EE07C()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_release();
  sub_1001EDCD8(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001EE0E8()
{
  return sub_1001E5194(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_1001EE100()
{
  sub_1000EE6D8(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_release();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001EE15C()
{
  return sub_1001EE280((uint64_t (*)(void, void, void, void, void, void))sub_1001E494C);
}

uint64_t sub_1001EE178(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  return sub_1001E6E1C(a1, a2, a3, a4 & 1, *(void *)(v4 + 16), *(void *)(v4 + 24), (uint64_t)&unk_1006FA458, (uint64_t)sub_1001EE268, (uint64_t)&unk_1006FA470);
}

uint64_t sub_1001EE1CC(uint64_t a1, char a2)
{
  return sub_1001EE368(a1, a2, (uint64_t)&unk_1006FA408, (uint64_t)sub_1001EE1F8, (uint64_t)&unk_1006FA420);
}

uint64_t sub_1001EE1F8()
{
  return sub_1001EE41C((uint64_t (*)(void, void, void, void, void, void))sub_1001E3590);
}

uint64_t sub_1001EE214()
{
  sub_1000EE6D8(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001EE268()
{
  return sub_1001EE280((uint64_t (*)(void, void, void, void, void, void))sub_1001E2F74);
}

uint64_t sub_1001EE280(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1001EE2A0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EE2E0(void *a1, void *a2, char a3)
{
  return sub_1001E1624(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1001EE2F0()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001EE340(uint64_t a1, char a2)
{
  return sub_1001EE368(a1, a2, (uint64_t)&unk_1006FA4F8, (uint64_t)sub_1001EE404, (uint64_t)&unk_1006FA510);
}

uint64_t sub_1001EE368(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1001E32A8(a1, a2 & 1, v5[2], v5[3], v5[4], v5[5], a3, a4, a5);
}

uint64_t sub_1001EE3A8()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  sub_1001EDCD8(*(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001EE404()
{
  return sub_1001EE41C((uint64_t (*)(void, void, void, void, void, void))sub_1001E1E28);
}

uint64_t sub_1001EE41C(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1001EE438()
{
  sub_1000EE6D8(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001EE48C()
{
  return sub_1001EE4A4((uint64_t (*)(void, void, void, void, void))sub_1001E190C);
}

uint64_t sub_1001EE4A4(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1001EE4C0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EE4F8(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1001EE528(uint64_t a1)
{
  return sub_1001DED60(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1001EE538(uint64_t a1)
{
  return sub_1001DEB74(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), 513, 8, 6);
}

uint64_t sub_1001EE568(uint64_t a1)
{
  return sub_1001DEB74(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), 504, 6, 5);
}

uint64_t sub_1001EE598(uint64_t a1)
{
  return sub_1001DEB74(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), 495, 5, 4);
}

uint64_t sub_1001EE5C8(uint64_t a1)
{
  return sub_1001DEB74(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), 486, 4, 3);
}

uint64_t sub_1001EE5F8(uint64_t a1)
{
  return sub_1001DEB74(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), 477, 3, 2);
}

uint64_t sub_1001EE628(void *a1, uint64_t a2)
{
  return sub_1001E0218(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1001EE634()
{
  swift_release();
  swift_errorRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001EE68C()
{
  return sub_1001EE8AC((uint64_t (*)(void, void, void, void, void))sub_1001E04F8);
}

uint64_t sub_1001EE6A8(uint64_t a1)
{
  return sub_1001DD39C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1001EE6B8()
{
  return sub_1001DBF2C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001EE6C8()
{
  return sub_1001DC2CC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001EE6D8(uint64_t a1)
{
  return sub_1001DC36C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1001EE6E4()
{
  return sub_1001F2990((void (*)(void))&_swift_release);
}

uint64_t sub_1001EE6FC(uint64_t a1)
{
  return sub_1001DC808(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1001EE70C()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001EE754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100726CA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001EE7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100726CA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001EE824()
{
  return sub_1001F2990((void (*)(void))&_swift_release);
}

uint64_t sub_1001EE83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001DA980(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_1001EE848()
{
  return sub_1001F2990((void (*)(void))&_swift_release);
}

uint64_t sub_1001EE860(uint64_t a1)
{
  return sub_1001DB39C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1001EE86C()
{
  return sub_1001F2990((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001EE884()
{
  return sub_1001DB65C(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1001EE894()
{
  return sub_1001EE8AC(sub_1001DAC54);
}

uint64_t sub_1001EE8AC(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1001EE8C8()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001EE910(uint64_t a1)
{
  return sub_1001DAD04(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32), *(void (**)(uint64_t (*)(uint64_t), void *))(v1 + 40));
}

uint64_t sub_1001EE920()
{
  return sub_1001F2990((void (*)(void))&_swift_release);
}

uint64_t sub_1001EE938(uint64_t a1)
{
  return sub_1001DB030(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1001EE944(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v193 = a2;
  uint64_t v7 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v199 = *(void *)(v7 - 8);
  uint64_t v200 = v7;
  __chkstk_darwin(v7);
  uint64_t v198 = (char *)&v181 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = type metadata accessor for Logger();
  uint64_t v195 = *(void *)(v194 - 8);
  uint64_t v9 = __chkstk_darwin(v194);
  id v188 = (char *)&v181 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  Swift::String v189 = (char *)&v181 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v191 = (char *)&v181 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v190 = (char *)&v181 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v197 = (char *)&v181 - v18;
  __chkstk_darwin(v17);
  uint64_t v192 = (char *)&v181 - v19;
  uint64_t v20 = type metadata accessor for DIPRetryResult();
  uint64_t v205 = *(void *)(v20 - 8);
  uint64_t v206 = (uint8_t *)v20;
  __chkstk_darwin(v20);
  char v22 = (uint64_t *)((char *)&v181 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = type metadata accessor for DIPError.Code();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v203 = v23;
  uint64_t v204 = v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v201 = (char *)&v181 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  char v28 = (char *)&v181 - v27;
  uint64_t v29 = sub_100007764(&qword_100726640);
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (char *)&v181 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DIPError();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v202 = (char *)&v181 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v196 = (char *)&v181 - v37;
  __chkstk_darwin(v36);
  char v39 = (char *)&v181 - v38;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = a3;
  *(void *)(v40 + 24) = a4;
  uint64_t v41 = a1;
  *(void *)&long long v207 = a1;
  uint64_t v42 = a4;
  uint64_t v43 = v41;
  swift_retain();
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  int v44 = swift_dynamicCast();
  char v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  if (!v44)
  {
    v45(v31, 1, 1, v32);
    sub_10000C6CC((uint64_t)v31, &qword_100726640);
    *char v22 = v43;
    uint64_t v55 = v205;
    char v54 = v206;
    (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v206);
    swift_errorRetain();
    a3(v22);
    (*(void (**)(uint64_t *, uint8_t *))(v55 + 8))(v22, v54);
    return swift_release();
  }
  uint64_t v185 = v42;
  uint64_t v186 = a3;
  uint64_t v187 = v40;
  v45(v31, 0, 1, v32);
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v39, v31, v32);
  DIPError.code.getter();
  uint64_t v46 = v203;
  uint64_t v47 = v204;
  int v48 = (*(uint64_t (**)(char *, uint64_t))(v204 + 88))(v28, v203);
  uint64_t v49 = v32;
  uint64_t v50 = v206;
  if (v48 == enum case for DIPError.Code.invalidAppleAccount(_:)) {
    goto LABEL_3;
  }
  uint64_t v184 = v39;
  uint64_t v183 = v22;
  uint64_t v182 = v33;
  if (v48 == enum case for DIPError.Code.networkTimeOut(_:))
  {
LABEL_6:
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v56 = v47;
    uint64_t v57 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
    uint64_t v58 = v32;
    v57(v59, v39, v32);
    (*(void (**)(char *, void, uint64_t))(v56 + 104))(v201, enum case for DIPError.Code.internalError(_:), v46);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v60 = DIPError.properties.getter();
    uint64_t v62 = v199;
    uint64_t v61 = v200;
    uint64_t v63 = (uint64_t)v198;
    (*(void (**)(char *, void, uint64_t))(v199 + 104))(v198, enum case for DIPError.PropertyKey.serverRetryAfter(_:), v200);
    if (*(void *)(v60 + 16))
    {
      unint64_t v64 = sub_1005905C0(v63);
      if (v65)
      {
        sub_10003BC28(*(void *)(v60 + 56) + 32 * v64, (uint64_t)&v207);
      }
      else
      {
        long long v207 = 0u;
        long long v208 = 0u;
      }
    }
    else
    {
      long long v207 = 0u;
      long long v208 = 0u;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v63, v61);
    if (*((void *)&v208 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v83 = v209;
        uint64_t v84 = swift_allocError();
        uint64_t v85 = v202;
        v57(v86, v202, v58);
        uint64_t v87 = v183;
        *uint64_t v183 = v84;
        v87[1] = v83;
        uint64_t v88 = (unsigned int *)&enum case for DIPRetryResult.retryAfterDelay(_:);
LABEL_24:
        uint64_t v91 = v205;
        (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v87, *v88, v50);
        v186(v87);
        (*(void (**)(uint64_t *, uint8_t *))(v91 + 8))(v87, v50);
        uint64_t v92 = *(void (**)(char *, uint64_t))(v182 + 8);
        v92(v85, v58);
        v92(v184, v58);
        return swift_release();
      }
    }
    else
    {
      sub_10000C6CC((uint64_t)&v207, (uint64_t *)&unk_100727200);
    }
    uint64_t v89 = swift_allocError();
    uint64_t v85 = v202;
    v57(v90, v202, v58);
    uint64_t v87 = v183;
    *uint64_t v183 = v89;
    uint64_t v88 = (unsigned int *)&enum case for DIPRetryResult.retryWithError(_:);
    goto LABEL_24;
  }
  if (v48 == enum case for DIPError.Code.cloudkitZoneNotFound(_:))
  {
    uint64_t v202 = (char *)v32;
    int64_t v66 = v197;
    defaultLogger()();
    uint64_t v67 = v193;
    swift_retain();
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v68, v69))
    {
      long long v70 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v207 = swift_slowAlloc();
      *(_DWORD *)long long v70 = 136446210;
      uint64_t v71 = *(void *)(v67 + 24);
      unint64_t v72 = *(void *)(v67 + 32);
      swift_bridgeObjectRetain();
      uint64_t v209 = sub_100110D58(v71, v72, (uint64_t *)&v207);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v73 = v182;
      long long v74 = v184;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Zone is missing in container %{public}s, deleting local caches", v70, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v195 + 8))(v197, v194);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v66, v194);
      uint64_t v73 = v182;
      long long v74 = v184;
    }
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v93 = v202;
    swift_allocError();
    uint64_t v94 = *(void (**)(uint64_t, char *, char *))(v73 + 16);
    v94(v95, v74, v93);
    (*(void (**)(char *, void, uint64_t))(v204 + 104))(v201, enum case for DIPError.Code.internalError(_:), v203);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
LABEL_27:
    unint64_t v96 = v196;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001EC3C0();
    unint64_t v97 = sub_10015CB84((uint64_t)&_swiftEmptyArrayStorage);
    unint64_t v98 = (unint64_t *)(v67 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
    swift_beginAccess();
    unint64_t *v98 = v97;
    swift_bridgeObjectRelease();
    unint64_t v99 = sub_10015CC88((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v100 = (unint64_t *)(v67 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
    swift_beginAccess();
    *uint64_t v100 = v99;
    swift_bridgeObjectRelease();
    uint64_t v101 = (void *)(v67 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
    swift_beginAccess();
    void *v101 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    *(void *)(v67 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = sub_10015CC94((uint64_t)&_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    uint64_t v102 = swift_allocError();
    v94(v103, v96, v93);
    unint64_t v104 = v183;
    *uint64_t v183 = v102;
    uint64_t v105 = v205;
    uint64_t v106 = v206;
    (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v104, enum case for DIPRetryResult.retryWithError(_:), v206);
    v186(v104);
    (*(void (**)(uint64_t *, uint8_t *))(v105 + 8))(v104, v106);
    uint64_t v107 = *(void (**)(char *, char *))(v73 + 8);
    v107(v96, v93);
    v107(v184, v93);
    return swift_release();
  }
  if (v48 == enum case for DIPError.Code.cloudkitServerUnavailable(_:)
    || v48 == enum case for DIPError.Code.cloudkitRateLimited(_:))
  {
    goto LABEL_6;
  }
  if (v48 == enum case for DIPError.Code.cloudkitServerRecordChanged(_:))
  {
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v202 = (char *)swift_allocError();
    uint64_t v75 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
    v75(v76, v39, v32);
    (*(void (**)(char *, void, uint64_t))(v47 + 104))(v201, enum case for DIPError.Code.internalError(_:), v46);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    long long v77 = v196;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v78 = swift_allocError();
    v75(v79, v77, v32);
    *char v22 = v78;
    uint64_t v80 = v205;
    (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v22, enum case for DIPRetryResult.retryWithError(_:), v50);
    v186(v22);
    (*(void (**)(uint64_t *, uint8_t *))(v80 + 8))(v22, v50);
    int64_t v81 = *(void (**)(char *, uint64_t))(v33 + 8);
    v81(v77, v32);
LABEL_16:
    uint64_t v82 = v184;
LABEL_36:
    v81(v82, v49);
    return swift_release();
  }
  uint64_t v108 = v205;
  if (v48 == enum case for DIPError.Code.cloudkitChangeTokenExpired(_:))
  {
    uint64_t v202 = (char *)v32;
    unint64_t v109 = v192;
    defaultLogger()();
    uint64_t v67 = v193;
    swift_retain();
    uint64_t v110 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v110, v111))
    {
      uint64_t v112 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v207 = swift_slowAlloc();
      *(_DWORD *)uint64_t v112 = 136446210;
      uint64_t v113 = *(void *)(v67 + 24);
      unint64_t v114 = *(void *)(v67 + 32);
      swift_bridgeObjectRetain();
      uint64_t v209 = sub_100110D58(v113, v114, (uint64_t *)&v207);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v73 = v182;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "Change token is expired in container %{public}s, deleting local caches", v112, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v195 + 8))(v109, v194);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v109, v194);
      uint64_t v73 = v182;
    }
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v93 = v202;
    swift_allocError();
    uint64_t v94 = *(void (**)(uint64_t, char *, char *))(v73 + 16);
    v94(v127, v184, v93);
    (*(void (**)(char *, void, uint64_t))(v204 + 104))(v201, enum case for DIPError.Code.internalError(_:), v203);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    goto LABEL_27;
  }
  if (v48 == enum case for DIPError.Code.cloudkitUnsyncedKeychain(_:))
  {
    uint64_t v115 = v39;
    uint64_t v116 = v46;
    uint64_t v117 = v191;
    defaultLogger()();
    uint64_t v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v120 = 0;
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "CloudKit keychain is still being synced", v120, 2u);
      uint64_t v117 = v191;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v195 + 8))(v117, v194);
    uint64_t v202 = (char *)sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v200 = swift_allocError();
    unint64_t v121 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
    v121(v122, v115, v49);
    (*(void (**)(char *, void, uint64_t))(v204 + 104))(v201, enum case for DIPError.Code.internalError(_:), v116);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v123 = v196;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v124 = swift_allocError();
    v121(v125, v123, v49);
    *char v22 = v124;
    (*(void (**)(uint64_t *, void, uint8_t *))(v108 + 104))(v22, enum case for DIPRetryResult.retryWithError(_:), v50);
    v186(v22);
    (*(void (**)(uint64_t *, uint8_t *))(v108 + 8))(v22, v50);
    int64_t v81 = *(void (**)(char *, uint64_t))(v33 + 8);
    v81(v123, v49);
    goto LABEL_35;
  }
  if (v48 != enum case for DIPError.Code.cloudkitMissingManateeIdentity(_:))
  {
    uint64_t v141 = v204;
    if (v48 == enum case for DIPError.Code.cloudkitManateeUnavailable(_:))
    {
LABEL_3:
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v51 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v52, v39, v32);
      *char v22 = v51;
      uint64_t v53 = v205;
      (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v50);
      v186(v22);
      (*(void (**)(uint64_t *, uint8_t *))(v53 + 8))(v22, v50);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v32);
      return swift_release();
    }
    if (v48 == enum case for DIPError.Code.cloudkitPartialUploadsFailure(_:))
    {
      uint64_t v142 = v33;
      uint64_t v143 = v46;
      uint64_t v144 = v189;
      defaultLogger()();
      uint64_t v145 = Logger.logObject.getter();
      os_log_type_t v146 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v145, v146))
      {
        uint64_t v147 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v147 = 0;
        _os_log_impl((void *)&_mh_execute_header, v145, v146, "There was a partial uploads failure.", v147, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v195 + 8))(v144, v194);
      v148._uint64_t countAndFlagsBits = 0xD000000000000018;
      v148._object = (void *)0x8000000100640B20;
      v149._uint64_t countAndFlagsBits = 0x3932353561313033;
      v149._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v149, v148);
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      uint64_t v150 = v142;
      uint64_t v151 = *(void (**)(uint64_t, char *, uint64_t))(v142 + 16);
      v151(v152, v39, v49);
      (*(void (**)(char *, void, uint64_t))(v204 + 104))(v201, enum case for DIPError.Code.internalError(_:), v143);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v153 = v196;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v154 = swift_allocError();
      v151(v155, v153, v49);
      uint64_t v156 = v183;
      *uint64_t v183 = v154;
      uint64_t v157 = v205;
      uint64_t v158 = v206;
      (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v156, enum case for DIPRetryResult.retryWithError(_:), v206);
      v186(v156);
      (*(void (**)(uint64_t *, uint8_t *))(v157 + 8))(v156, v158);
      int64_t v81 = *(void (**)(char *, uint64_t))(v150 + 8);
      v81(v153, v49);
      goto LABEL_16;
    }
    Swift::String v162 = v186;
    if (v48 != enum case for DIPError.Code.cloudkitCancelRequestedByClient(_:))
    {
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v175 = swift_allocError();
      uint64_t v202 = v28;
      uint64_t v176 = v175;
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v177, v39, v32);
      *char v22 = v176;
      uint64_t v178 = v205;
      uint64_t v179 = v33;
      uint64_t v180 = v206;
      (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v206);
      v162(v22);
      (*(void (**)(uint64_t *, uint8_t *))(v178 + 8))(v22, v180);
      (*(void (**)(char *, uint64_t))(v179 + 8))(v39, v32);
      (*(void (**)(char *, uint64_t))(v141 + 8))(v202, v203);
      return swift_release();
    }
    uint64_t v115 = v39;
    uint64_t v163 = v188;
    defaultLogger()();
    os_log_type_t v164 = Logger.logObject.getter();
    os_log_type_t v165 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v164, v165))
    {
      BOOL v166 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v166 = 0;
      _os_log_impl((void *)&_mh_execute_header, v164, v165, "", v166, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v195 + 8))(v163, v194);
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v167 = v33;
    uint64_t v168 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
    v168(v169, v115, v49);
    (*(void (**)(char *, void, uint64_t))(v141 + 104))(v201, enum case for DIPError.Code.internalError(_:), v203);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    NSString v170 = v196;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v171 = swift_allocError();
    v168(v172, v170, v49);
    *char v22 = v171;
    uint64_t v173 = v205;
    uint64_t v174 = v206;
    (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v206);
    v186(v22);
    (*(void (**)(uint64_t *, uint8_t *))(v173 + 8))(v22, v174);
    int64_t v81 = *(void (**)(char *, uint64_t))(v167 + 8);
    v81(v170, v49);
LABEL_35:
    uint64_t v82 = v115;
    goto LABEL_36;
  }
  uint64_t v128 = v39;
  uint64_t v129 = v33;
  uint64_t v130 = v190;
  defaultLogger()();
  swift_retain();
  uint64_t v131 = Logger.logObject.getter();
  os_log_type_t v132 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v131, v132))
  {
    unint64_t v133 = (uint8_t *)swift_slowAlloc();
    uint64_t v134 = swift_slowAlloc();
    *(_DWORD *)unint64_t v133 = 136446210;
    uint64_t v206 = v133 + 4;
    *(void *)&long long v207 = v134;
    uint64_t v135 = v128;
    uint64_t v136 = *(void *)(v193 + 24);
    unint64_t v137 = *(void *)(v193 + 32);
    swift_bridgeObjectRetain();
    uint64_t v138 = v136;
    uint64_t v49 = v32;
    uint64_t v209 = sub_100110D58(v138, v137, (uint64_t *)&v207);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v131, v132, "E2E encryption data in container %{public}s is unrecoverable, wiping container", v133, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v195 + 8))(v190, v194);
    uint64_t v139 = v187;
    uint64_t v140 = v201;
  }
  else
  {

    swift_release();
    (*(void (**)(char *, uint64_t))(v195 + 8))(v130, v194);
    uint64_t v139 = v187;
    uint64_t v140 = v201;
    uint64_t v135 = v39;
  }
  uint64_t v159 = swift_allocBox();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v129 + 16))(v160, v135, v49);
  (*(void (**)(char *, void, uint64_t))(v204 + 104))(v140, enum case for DIPError.Code.internalError(_:), v203);
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  Swift::String v161 = (void *)swift_allocObject();
  v161[2] = v159;
  v161[3] = sub_10016E1D0;
  v161[4] = v139;
  swift_retain();
  swift_retain();
  sub_1001DBC68((uint64_t)sub_1001F0964, (uint64_t)v161);
  swift_release();
  (*(void (**)(char *, uint64_t))(v129 + 8))(v135, v49);
  swift_release();
  return swift_release();
}

uint64_t sub_1001F094C()
{
  return sub_1001F2990((void (*)(void))&_swift_release);
}

uint64_t sub_1001F0964(uint64_t a1)
{
  return sub_1001DB8F4(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1001F0970(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v193 = a2;
  uint64_t v7 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v199 = *(void *)(v7 - 8);
  uint64_t v200 = v7;
  __chkstk_darwin(v7);
  uint64_t v198 = (char *)&v181 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = type metadata accessor for Logger();
  uint64_t v195 = *(void *)(v194 - 8);
  uint64_t v9 = __chkstk_darwin(v194);
  id v188 = (char *)&v181 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  Swift::String v189 = (char *)&v181 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v191 = (char *)&v181 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v190 = (char *)&v181 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v197 = (char *)&v181 - v18;
  __chkstk_darwin(v17);
  uint64_t v192 = (char *)&v181 - v19;
  uint64_t v20 = type metadata accessor for DIPRetryResult();
  uint64_t v205 = *(void *)(v20 - 8);
  uint64_t v206 = (uint8_t *)v20;
  __chkstk_darwin(v20);
  char v22 = (uint64_t *)((char *)&v181 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = type metadata accessor for DIPError.Code();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v203 = v23;
  uint64_t v204 = v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v201 = (char *)&v181 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  char v28 = (char *)&v181 - v27;
  uint64_t v29 = sub_100007764(&qword_100726640);
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (char *)&v181 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DIPError();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v202 = (char *)&v181 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v196 = (char *)&v181 - v37;
  __chkstk_darwin(v36);
  char v39 = (char *)&v181 - v38;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = a3;
  *(void *)(v40 + 24) = a4;
  uint64_t v41 = a1;
  *(void *)&long long v207 = a1;
  uint64_t v42 = a4;
  uint64_t v43 = v41;
  swift_retain();
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  int v44 = swift_dynamicCast();
  char v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  if (!v44)
  {
    v45(v31, 1, 1, v32);
    sub_10000C6CC((uint64_t)v31, &qword_100726640);
    *char v22 = v43;
    uint64_t v55 = v205;
    char v54 = v206;
    (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v206);
    swift_errorRetain();
    a3(v22);
    (*(void (**)(uint64_t *, uint8_t *))(v55 + 8))(v22, v54);
    return swift_release();
  }
  uint64_t v185 = v42;
  uint64_t v186 = a3;
  uint64_t v187 = v40;
  v45(v31, 0, 1, v32);
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v39, v31, v32);
  DIPError.code.getter();
  uint64_t v46 = v203;
  uint64_t v47 = v204;
  int v48 = (*(uint64_t (**)(char *, uint64_t))(v204 + 88))(v28, v203);
  uint64_t v49 = v32;
  uint64_t v50 = v206;
  if (v48 == enum case for DIPError.Code.invalidAppleAccount(_:)) {
    goto LABEL_3;
  }
  uint64_t v184 = v39;
  uint64_t v183 = v22;
  uint64_t v182 = v33;
  if (v48 == enum case for DIPError.Code.networkTimeOut(_:))
  {
LABEL_6:
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v56 = v47;
    uint64_t v57 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
    uint64_t v58 = v32;
    v57(v59, v39, v32);
    (*(void (**)(char *, void, uint64_t))(v56 + 104))(v201, enum case for DIPError.Code.internalError(_:), v46);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v60 = DIPError.properties.getter();
    uint64_t v62 = v199;
    uint64_t v61 = v200;
    uint64_t v63 = (uint64_t)v198;
    (*(void (**)(char *, void, uint64_t))(v199 + 104))(v198, enum case for DIPError.PropertyKey.serverRetryAfter(_:), v200);
    if (*(void *)(v60 + 16))
    {
      unint64_t v64 = sub_1005905C0(v63);
      if (v65)
      {
        sub_10003BC28(*(void *)(v60 + 56) + 32 * v64, (uint64_t)&v207);
      }
      else
      {
        long long v207 = 0u;
        long long v208 = 0u;
      }
    }
    else
    {
      long long v207 = 0u;
      long long v208 = 0u;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v63, v61);
    if (*((void *)&v208 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v83 = v209;
        uint64_t v84 = swift_allocError();
        uint64_t v85 = v202;
        v57(v86, v202, v58);
        uint64_t v87 = v183;
        *uint64_t v183 = v84;
        v87[1] = v83;
        uint64_t v88 = (unsigned int *)&enum case for DIPRetryResult.retryAfterDelay(_:);
LABEL_24:
        uint64_t v91 = v205;
        (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v87, *v88, v50);
        v186(v87);
        (*(void (**)(uint64_t *, uint8_t *))(v91 + 8))(v87, v50);
        uint64_t v92 = *(void (**)(char *, uint64_t))(v182 + 8);
        v92(v85, v58);
        v92(v184, v58);
        return swift_release();
      }
    }
    else
    {
      sub_10000C6CC((uint64_t)&v207, (uint64_t *)&unk_100727200);
    }
    uint64_t v89 = swift_allocError();
    uint64_t v85 = v202;
    v57(v90, v202, v58);
    uint64_t v87 = v183;
    *uint64_t v183 = v89;
    uint64_t v88 = (unsigned int *)&enum case for DIPRetryResult.retryWithError(_:);
    goto LABEL_24;
  }
  if (v48 == enum case for DIPError.Code.cloudkitZoneNotFound(_:))
  {
    uint64_t v202 = (char *)v32;
    int64_t v66 = v197;
    defaultLogger()();
    uint64_t v67 = v193;
    swift_retain();
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v68, v69))
    {
      long long v70 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v207 = swift_slowAlloc();
      *(_DWORD *)long long v70 = 136446210;
      uint64_t v71 = *(void *)(v67 + 24);
      unint64_t v72 = *(void *)(v67 + 32);
      swift_bridgeObjectRetain();
      uint64_t v209 = sub_100110D58(v71, v72, (uint64_t *)&v207);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v73 = v182;
      long long v74 = v184;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Zone is missing in container %{public}s, deleting local caches", v70, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v195 + 8))(v197, v194);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v66, v194);
      uint64_t v73 = v182;
      long long v74 = v184;
    }
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v93 = v202;
    swift_allocError();
    uint64_t v94 = *(void (**)(uint64_t, char *, char *))(v73 + 16);
    v94(v95, v74, v93);
    (*(void (**)(char *, void, uint64_t))(v204 + 104))(v201, enum case for DIPError.Code.internalError(_:), v203);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
LABEL_27:
    unint64_t v96 = v196;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1001EC3C0();
    unint64_t v97 = sub_10015CB84((uint64_t)&_swiftEmptyArrayStorage);
    unint64_t v98 = (unint64_t *)(v67 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
    swift_beginAccess();
    unint64_t *v98 = v97;
    swift_bridgeObjectRelease();
    unint64_t v99 = sub_10015CC88((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v100 = (unint64_t *)(v67 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
    swift_beginAccess();
    *uint64_t v100 = v99;
    swift_bridgeObjectRelease();
    uint64_t v101 = (void *)(v67 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
    swift_beginAccess();
    void *v101 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    *(void *)(v67 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = sub_10015CC94((uint64_t)&_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    uint64_t v102 = swift_allocError();
    v94(v103, v96, v93);
    unint64_t v104 = v183;
    *uint64_t v183 = v102;
    uint64_t v105 = v205;
    uint64_t v106 = v206;
    (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v104, enum case for DIPRetryResult.retryWithError(_:), v206);
    v186(v104);
    (*(void (**)(uint64_t *, uint8_t *))(v105 + 8))(v104, v106);
    uint64_t v107 = *(void (**)(char *, char *))(v73 + 8);
    v107(v96, v93);
    v107(v184, v93);
    return swift_release();
  }
  if (v48 == enum case for DIPError.Code.cloudkitServerUnavailable(_:)
    || v48 == enum case for DIPError.Code.cloudkitRateLimited(_:))
  {
    goto LABEL_6;
  }
  if (v48 == enum case for DIPError.Code.cloudkitServerRecordChanged(_:))
  {
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v202 = (char *)swift_allocError();
    uint64_t v75 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
    v75(v76, v39, v32);
    (*(void (**)(char *, void, uint64_t))(v47 + 104))(v201, enum case for DIPError.Code.internalError(_:), v46);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    long long v77 = v196;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v78 = swift_allocError();
    v75(v79, v77, v32);
    *char v22 = v78;
    uint64_t v80 = v205;
    (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v22, enum case for DIPRetryResult.retryWithError(_:), v50);
    v186(v22);
    (*(void (**)(uint64_t *, uint8_t *))(v80 + 8))(v22, v50);
    int64_t v81 = *(void (**)(char *, uint64_t))(v33 + 8);
    v81(v77, v32);
LABEL_16:
    uint64_t v82 = v184;
LABEL_36:
    v81(v82, v49);
    return swift_release();
  }
  uint64_t v108 = v205;
  if (v48 == enum case for DIPError.Code.cloudkitChangeTokenExpired(_:))
  {
    uint64_t v202 = (char *)v32;
    unint64_t v109 = v192;
    defaultLogger()();
    uint64_t v67 = v193;
    swift_retain();
    uint64_t v110 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v110, v111))
    {
      uint64_t v112 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v207 = swift_slowAlloc();
      *(_DWORD *)uint64_t v112 = 136446210;
      uint64_t v113 = *(void *)(v67 + 24);
      unint64_t v114 = *(void *)(v67 + 32);
      swift_bridgeObjectRetain();
      uint64_t v209 = sub_100110D58(v113, v114, (uint64_t *)&v207);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v73 = v182;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "Change token is expired in container %{public}s, deleting local caches", v112, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v195 + 8))(v109, v194);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v109, v194);
      uint64_t v73 = v182;
    }
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v93 = v202;
    swift_allocError();
    uint64_t v94 = *(void (**)(uint64_t, char *, char *))(v73 + 16);
    v94(v127, v184, v93);
    (*(void (**)(char *, void, uint64_t))(v204 + 104))(v201, enum case for DIPError.Code.internalError(_:), v203);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    goto LABEL_27;
  }
  if (v48 == enum case for DIPError.Code.cloudkitUnsyncedKeychain(_:))
  {
    uint64_t v115 = v39;
    uint64_t v116 = v46;
    uint64_t v117 = v191;
    defaultLogger()();
    uint64_t v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v120 = 0;
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "CloudKit keychain is still being synced", v120, 2u);
      uint64_t v117 = v191;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v195 + 8))(v117, v194);
    uint64_t v202 = (char *)sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v200 = swift_allocError();
    unint64_t v121 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
    v121(v122, v115, v49);
    (*(void (**)(char *, void, uint64_t))(v204 + 104))(v201, enum case for DIPError.Code.internalError(_:), v116);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v123 = v196;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v124 = swift_allocError();
    v121(v125, v123, v49);
    *char v22 = v124;
    (*(void (**)(uint64_t *, void, uint8_t *))(v108 + 104))(v22, enum case for DIPRetryResult.retryWithError(_:), v50);
    v186(v22);
    (*(void (**)(uint64_t *, uint8_t *))(v108 + 8))(v22, v50);
    int64_t v81 = *(void (**)(char *, uint64_t))(v33 + 8);
    v81(v123, v49);
    goto LABEL_35;
  }
  if (v48 != enum case for DIPError.Code.cloudkitMissingManateeIdentity(_:))
  {
    uint64_t v141 = v204;
    if (v48 == enum case for DIPError.Code.cloudkitManateeUnavailable(_:))
    {
LABEL_3:
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v51 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v52, v39, v32);
      *char v22 = v51;
      uint64_t v53 = v205;
      (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v50);
      v186(v22);
      (*(void (**)(uint64_t *, uint8_t *))(v53 + 8))(v22, v50);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v32);
      return swift_release();
    }
    if (v48 == enum case for DIPError.Code.cloudkitPartialUploadsFailure(_:))
    {
      uint64_t v142 = v33;
      uint64_t v143 = v46;
      uint64_t v144 = v189;
      defaultLogger()();
      uint64_t v145 = Logger.logObject.getter();
      os_log_type_t v146 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v145, v146))
      {
        uint64_t v147 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v147 = 0;
        _os_log_impl((void *)&_mh_execute_header, v145, v146, "There was a partial uploads failure.", v147, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v195 + 8))(v144, v194);
      v148._uint64_t countAndFlagsBits = 0xD000000000000018;
      v148._object = (void *)0x8000000100640B20;
      v149._uint64_t countAndFlagsBits = 0x3932353561313033;
      v149._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v149, v148);
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      uint64_t v150 = v142;
      uint64_t v151 = *(void (**)(uint64_t, char *, uint64_t))(v142 + 16);
      v151(v152, v39, v49);
      (*(void (**)(char *, void, uint64_t))(v204 + 104))(v201, enum case for DIPError.Code.internalError(_:), v143);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v153 = v196;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v154 = swift_allocError();
      v151(v155, v153, v49);
      uint64_t v156 = v183;
      *uint64_t v183 = v154;
      uint64_t v157 = v205;
      uint64_t v158 = v206;
      (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v156, enum case for DIPRetryResult.retryWithError(_:), v206);
      v186(v156);
      (*(void (**)(uint64_t *, uint8_t *))(v157 + 8))(v156, v158);
      int64_t v81 = *(void (**)(char *, uint64_t))(v150 + 8);
      v81(v153, v49);
      goto LABEL_16;
    }
    Swift::String v162 = v186;
    if (v48 != enum case for DIPError.Code.cloudkitCancelRequestedByClient(_:))
    {
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v175 = swift_allocError();
      uint64_t v202 = v28;
      uint64_t v176 = v175;
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v177, v39, v32);
      *char v22 = v176;
      uint64_t v178 = v205;
      uint64_t v179 = v33;
      uint64_t v180 = v206;
      (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v206);
      v162(v22);
      (*(void (**)(uint64_t *, uint8_t *))(v178 + 8))(v22, v180);
      (*(void (**)(char *, uint64_t))(v179 + 8))(v39, v32);
      (*(void (**)(char *, uint64_t))(v141 + 8))(v202, v203);
      return swift_release();
    }
    uint64_t v115 = v39;
    uint64_t v163 = v188;
    defaultLogger()();
    os_log_type_t v164 = Logger.logObject.getter();
    os_log_type_t v165 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v164, v165))
    {
      BOOL v166 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v166 = 0;
      _os_log_impl((void *)&_mh_execute_header, v164, v165, "", v166, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v195 + 8))(v163, v194);
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v167 = v33;
    uint64_t v168 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
    v168(v169, v115, v49);
    (*(void (**)(char *, void, uint64_t))(v141 + 104))(v201, enum case for DIPError.Code.internalError(_:), v203);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    NSString v170 = v196;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v171 = swift_allocError();
    v168(v172, v170, v49);
    *char v22 = v171;
    uint64_t v173 = v205;
    uint64_t v174 = v206;
    (*(void (**)(uint64_t *, void, uint8_t *))(v205 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v206);
    v186(v22);
    (*(void (**)(uint64_t *, uint8_t *))(v173 + 8))(v22, v174);
    int64_t v81 = *(void (**)(char *, uint64_t))(v167 + 8);
    v81(v170, v49);
LABEL_35:
    uint64_t v82 = v115;
    goto LABEL_36;
  }
  uint64_t v128 = v39;
  uint64_t v129 = v33;
  uint64_t v130 = v190;
  defaultLogger()();
  swift_retain();
  uint64_t v131 = Logger.logObject.getter();
  os_log_type_t v132 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v131, v132))
  {
    unint64_t v133 = (uint8_t *)swift_slowAlloc();
    uint64_t v134 = swift_slowAlloc();
    *(_DWORD *)unint64_t v133 = 136446210;
    uint64_t v206 = v133 + 4;
    *(void *)&long long v207 = v134;
    uint64_t v135 = v128;
    uint64_t v136 = *(void *)(v193 + 24);
    unint64_t v137 = *(void *)(v193 + 32);
    swift_bridgeObjectRetain();
    uint64_t v138 = v136;
    uint64_t v49 = v32;
    uint64_t v209 = sub_100110D58(v138, v137, (uint64_t *)&v207);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v131, v132, "E2E encryption data in container %{public}s is unrecoverable, wiping container", v133, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v195 + 8))(v190, v194);
    uint64_t v139 = v187;
    uint64_t v140 = v201;
  }
  else
  {

    swift_release();
    (*(void (**)(char *, uint64_t))(v195 + 8))(v130, v194);
    uint64_t v139 = v187;
    uint64_t v140 = v201;
    uint64_t v135 = v39;
  }
  uint64_t v159 = swift_allocBox();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v129 + 16))(v160, v135, v49);
  (*(void (**)(char *, void, uint64_t))(v204 + 104))(v140, enum case for DIPError.Code.internalError(_:), v203);
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  Swift::String v161 = (void *)swift_allocObject();
  v161[2] = v159;
  v161[3] = sub_10016DF18;
  v161[4] = v139;
  swift_retain();
  swift_retain();
  sub_1001DBC68((uint64_t)sub_1001F29DC, (uint64_t)v161);
  swift_release();
  (*(void (**)(char *, uint64_t))(v129 + 8))(v135, v49);
  swift_release();
  return swift_release();
}

uint64_t sub_1001F2978()
{
  return sub_1001F2990((void (*)(void))&_swift_release);
}

uint64_t sub_1001F2990(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1001F2A68()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  sub_10004440C(v0, qword_100726D00);
  *(void *)sub_1000443D4(v0, (uint64_t)qword_100726D00) = 5;
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

uint64_t sub_1001F2AF8(unsigned __int8 *a1, char *a2)
{
  return sub_10047251C(*a1, *a2);
}

Swift::Int sub_1001F2B04()
{
  return Hasher._finalize()();
}

uint64_t sub_1001F2C24()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001F2D20()
{
  return Hasher._finalize()();
}

unint64_t sub_1001F2E3C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001FA378(*a1);
  *a2 = result;
  return result;
}

void sub_1001F2E6C(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEF746E6F7246746ELL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEE006B636142746ELL;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6569666C6573;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 3:
      strcpy((char *)a1, "livenessVideo");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 4:
      strcpy((char *)a1, "auxiliaryVideo");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    default:
LABEL_3:
      *(void *)a1 = 0x656D75636F446469;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_1001F2F44(char *a1@<X8>)
{
  Swift::String v148 = a1;
  uint64_t v2 = type metadata accessor for URLResourceValues();
  uint64_t v128 = *(void *)(v2 - 8);
  uint64_t v129 = v2;
  __chkstk_darwin(v2);
  uint64_t v127 = (char *)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007764(&qword_100720A68);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v143 = (uint64_t)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v142 = (char *)&v120 - v7;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v150 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v126 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v120 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v131 = (os_unfair_lock_s *)((char *)&v120 - v15);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v144 = (os_unfair_lock_s *)((char *)&v120 - v17);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v135 = (os_unfair_lock_s *)((char *)&v120 - v19);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v141 = (void (*)(os_unfair_lock_s *, uint64_t))((char *)&v120 - v21);
  __chkstk_darwin(v20);
  os_log_type_t v132 = (os_unfair_lock_s *)((char *)&v120 - v22);
  uint64_t v23 = type metadata accessor for DIPError.Code();
  uint64_t v139 = *(void *)(v23 - 8);
  uint64_t v140 = v23;
  __chkstk_darwin(v23);
  uint64_t v145 = (char *)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v120 - v29;
  __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v120 - v32;
  unint64_t v34 = *(void *)(v1 + 40);
  if (v34 >> 60 == 15)
  {
    uint64_t v35 = v25;
    defaultLogger()();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "No asset data is set, so there is nothing to write to disk", v38, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v150 + 8))(v13, v8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v148, 1, 1, v35);
  }
  else
  {
    uint64_t v137 = v8;
    uint64_t v134 = v31;
    uint64_t v39 = v26;
    uint64_t v125 = v1;
    uint64_t v40 = *(void *)(v1 + 32);
    uint64_t v41 = self;
    uint64_t v136 = v40;
    uint64_t v42 = v40;
    uint64_t v43 = v39;
    unint64_t v130 = v34;
    sub_10002CEB0(v42, v34);
    id v44 = [v41 defaultManager];
    char v152 = 0;
    static URL.libraryDirectory.getter();
    URL.appendingPathComponent(_:isDirectory:)();
    char v45 = *(void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v146 = v25;
    uint64_t v133 = v39 + 8;
    uint64_t v138 = v45;
    v45(v30, v25);
    uint64_t v147 = v33;
    URL.path.getter();
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    LODWORD(v41) = [v44 fileExistsAtPath:v46 isDirectory:&v152];

    if (v41)
    {
      if ((v152 & 1) == 0)
      {
        *(void *)&v154[0] = 0;
        *((void *)&v154[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(47);
        swift_bridgeObjectRelease();
        *(void *)&v154[0] = 0xD000000000000014;
        *((void *)&v154[0] + 1) = 0x8000000100641000;
        uint64_t v79 = v44;
        uint64_t v80 = v147;
        v81._uint64_t countAndFlagsBits = URL.path.getter();
        String.append(_:)(v81);
        swift_bridgeObjectRelease();
        v82._uint64_t countAndFlagsBits = 0xD000000000000019;
        v82._object = (void *)0x8000000100641020;
        String.append(_:)(v82);
        (*(void (**)(char *, void, uint64_t))(v139 + 104))(v145, enum case for DIPError.Code.cloudkitCannotSaveDataBeforeUploads(_:), v140);
        sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1001FC0DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();

        sub_10000C5E0(v136, v130);
        v138(v80, v146);
        return;
      }
      uint64_t v47 = v132;
      defaultLogger()();
      int v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "uploads path exists", v50, 2u);
        swift_slowDealloc();
      }

      uint64_t v141 = *(void (**)(os_unfair_lock_s *, uint64_t))(v150 + 8);
      v141(v47, v137);
      uint64_t v51 = v146;
    }
    else
    {
      uint64_t v52 = (char *)v141;
      defaultLogger()();
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "uploads path doesn't exist. Creating the directory...", v55, 2u);
        swift_slowDealloc();
      }

      uint64_t v56 = *(void (**)(char *, uint64_t))(v150 + 8);
      v56(v52, v137);
      URL.path.getter();
      NSString v57 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)&v154[0] = 0;
      unsigned int v58 = [v44 createDirectoryAtPath:v57 withIntermediateDirectories:0 attributes:0 error:v154];

      if (!v58)
      {
        id v83 = *(id *)&v154[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10000C5E0(v136, v130);
        v138(v147, v146);
        return;
      }
      uint64_t v141 = (void (*)(os_unfair_lock_s *, uint64_t))v56;
      id v59 = *(id *)&v154[0];
      uint64_t v51 = v146;
    }
    URL.path.getter();
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    uint64_t v60 = (os_unfair_lock_s *)v125;
    uint64_t v61 = v134;
    URL.appendingPathComponent(_:)();
    uint64_t v62 = v30;
    uint64_t v63 = v138;
    v138(v62, v51);
    uint64_t v64 = (uint64_t)v142;
    uint64_t v122 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
    uint64_t v123 = v43 + 16;
    v122(v142, (uint64_t)v61, v51);
    int64_t v66 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56);
    char v65 = (os_unfair_lock_s *)(v43 + 56);
    uint64_t v124 = v66;
    v66(v64, 0, 1, v51);
    uint64_t v67 = v143;
    sub_1000BEA14(v64, v143, &qword_100720A68);
    uint64_t v68 = (uint64_t)v60 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL;
    swift_beginAccess();
    sub_10005D3BC(v67, v68);
    swift_endAccess();
    URL.path.getter();
    NSString v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    LODWORD(v68) = [v44 fileExistsAtPath:v69];

    os_log_type_t v132 = v65;
    if (v68)
    {
      long long v70 = v135;
      defaultLogger()();
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        id v121 = v44;
        *(void *)&v154[0] = v74;
        *(_DWORD *)uint64_t v73 = 136315138;
        uint64_t v145 = (char *)(v73 + 4);
        uint64_t v75 = v134;
        swift_beginAccess();
        uint64_t v76 = URL.absoluteString.getter();
        uint64_t v151 = sub_100110D58(v76, v77, (uint64_t *)v154);
        uint64_t v78 = v146;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Not writing asset to path %s because a file already exists at that path", v73, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v63 = v138;
        swift_slowDealloc();

        sub_10000C5E0(v136, v130);
        v141(v135, v137);
        v63(v147, v78);
      }
      else
      {

        sub_10000C5E0(v136, v130);
        v141(v70, v137);
        uint64_t v78 = v146;
        v63(v147, v146);
        uint64_t v75 = v134;
      }
      swift_beginAccess();
      uint64_t v105 = v148;
      v122(v148, (uint64_t)v75, v78);
      v124((uint64_t)v105, 0, 1, v78);
      v63(v75, v78);
    }
    else
    {
      id v121 = v44;
      if (qword_10071F4B0 != -1) {
        swift_once();
      }
      uint64_t v84 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
      uint64_t v85 = (uint64_t)&v84[4];
      uint64_t v86 = v84 + 52;
      os_unfair_lock_lock(v84 + 52);
      uint64_t v87 = v149;
      sub_1000262B4(v85, v154);
      uint64_t v88 = v146;
      if (v87)
      {
        os_unfair_lock_unlock(v86);
        __break(1u);
        os_unfair_lock_unlock(v60);
        __break(1u);
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_100760000);
        __break(1u);
        os_unfair_lock_unlock(v65);
        __break(1u);
      }
      else
      {
        os_unfair_lock_unlock(v86);
        uint64_t v89 = v155;
        swift_retain();
        sub_1000262D0((uint64_t)v154);
        uint64_t v90 = *(os_unfair_lock_s **)(v89 + 16);
        uint64_t v91 = v90 + 4;
        uint64_t v92 = v90 + 6;
        os_unfair_lock_lock(v90 + 6);
        sub_10023C370(v91);
        os_unfair_lock_unlock(v92);
        swift_release();
        defaultLogger()();
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v93, v94))
        {
          uint64_t v95 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v95 = 134217984;
          unint64_t v96 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
          uint64_t v97 = (uint64_t)&v96[4];
          unint64_t v98 = v96 + 52;
          os_unfair_lock_lock(v96 + 52);
          sub_1000262B4(v97, v154);
          os_unfair_lock_unlock(v98);
          uint64_t v99 = v155;
          swift_retain();
          sub_1000262D0((uint64_t)v154);
          uint64_t v100 = *(os_unfair_lock_s **)(v99 + 16);
          uint64_t v101 = v100 + 4;
          uint64_t v102 = v100 + 6;
          os_unfair_lock_lock(v100 + 6);
          sub_100006754(v101, v153);
          os_unfair_lock_unlock(v102);
          uint64_t v103 = v153[0];
          swift_release();
          *(void *)&v154[0] = v103;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "Current upload count: %ld", v95, 0xCu);
          swift_slowDealloc();
          uint64_t v88 = v146;
        }

        uint64_t v104 = v150 + 8;
        v141(v144, v137);
        Data.write(to:options:)();
        uint64_t v106 = v131;
        defaultLogger()();
        uint64_t v107 = Logger.logObject.getter();
        os_log_type_t v108 = static os_log_type_t.debug.getter();
        BOOL v109 = os_log_type_enabled(v107, v108);
        uint64_t v150 = v104;
        if (v109)
        {
          uint64_t v110 = (uint8_t *)swift_slowAlloc();
          *(void *)&v154[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v110 = 136315138;
          Swift::String v149 = v110 + 4;
          swift_beginAccess();
          uint64_t v111 = URL.path.getter();
          uint64_t v151 = sub_100110D58(v111, v112, (uint64_t *)v154);
          uint64_t v88 = v146;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v107, v108, "Writing the document to fileURL %s", v110, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v141(v131, v137);
        }
        else
        {

          v141(v106, v137);
        }
        uint64_t v113 = v138;
        id v114 = v121;
        uint64_t v115 = v127;
        URLResourceValues.init()();
        URLResourceValues.isExcludedFromBackup.setter();
        swift_beginAccess();
        URL.setResourceValues(_:)();
        swift_endAccess();

        sub_10000C5E0(v136, v130);
        (*(void (**)(char *, uint64_t))(v128 + 8))(v115, v129);
        v113(v147, v88);
        uint64_t v116 = v148;
        uint64_t v117 = *(void *)(v125 + 32);
        unint64_t v118 = *(void *)(v125 + 40);
        *(_OWORD *)(v125 + 32) = xmmword_100610EF0;
        sub_10000C5E0(v117, v118);
        os_log_type_t v119 = v134;
        v122(v116, (uint64_t)v134, v88);
        v124((uint64_t)v116, 0, 1, v88);
        v113(v119, v88);
      }
    }
  }
}

void sub_1001F4510()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v87 = v1;
  uint64_t v88 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  id v83 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v78 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v86 = (os_unfair_lock_s *)((char *)&v78 - v9);
  __chkstk_darwin(v8);
  uint64_t v85 = (os_unfair_lock_s *)((char *)&v78 - v10);
  uint64_t v11 = sub_100007764(&qword_100720A68);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v84 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v78 - v14;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v78 - v21;
  uint64_t v23 = v0 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL;
  swift_beginAccess();
  sub_100048D6C(v23, (uint64_t)v15, &qword_100720A68);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10000C6CC((uint64_t)v15, &qword_100720A68);
    defaultLogger()();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Asset is not on disk so there is nothing to delete", v26, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v88 + 8))(v7, v87);
    return;
  }
  uint64_t v80 = v23;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
  defaultLogger()();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v79 = v22;
  v27(v20, v22, v16);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v81 = v17;
  uint64_t v82 = v16;
  if (v30)
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(void *)&v91[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v78 = (void (*)(os_unfair_lock_s *, uint64_t))(v31 + 4);
    uint64_t v32 = URL.absoluteString.getter();
    v90[0] = sub_100110D58(v32, v33, (uint64_t *)v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v34 = *(os_unfair_lock_s **)(v17 + 8);
    ((void (*)(char *, uint64_t))v34)(v20, v82);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Deleting asset file at %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v35 = v87;
    swift_slowDealloc();
  }
  else
  {
    unint64_t v34 = *(os_unfair_lock_s **)(v17 + 8);
    ((void (*)(char *, uint64_t))v34)(v20, v16);

    uint64_t v35 = v87;
  }
  uint64_t v36 = *(void (**)(os_unfair_lock_s *, uint64_t))(v88 + 8);
  v36(v85, v35);
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  os_log_type_t v37 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v38 = v37 + 4;
  uint64_t v39 = v37 + 52;
  os_unfair_lock_lock(v37 + 52);
  uint64_t v40 = v89;
  sub_1000262B4((uint64_t)v38, v91);
  if (v40)
  {
    os_unfair_lock_unlock(v39);
    __break(1u);
    goto LABEL_21;
  }
  os_unfair_lock_unlock(v39);
  uint64_t v41 = v92;
  swift_retain();
  sub_1000262D0((uint64_t)v91);
  uint64_t v42 = *(os_unfair_lock_s **)(v41 + 16);
  uint64_t v43 = v42 + 4;
  id v44 = v42 + 6;
  os_unfair_lock_lock(v42 + 6);
  sub_10023C388(v43);
  uint64_t v89 = 0;
  os_unfair_lock_unlock(v44);
  swift_release();
  defaultLogger()();
  char v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  BOOL v47 = os_log_type_enabled(v45, v46);
  uint64_t v85 = v34;
  uint64_t v78 = v36;
  if (v47)
  {
    int v48 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)int v48 = 134217984;
    os_log_type_t v49 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
    uint64_t v50 = (uint64_t)&v49[4];
    uint64_t v38 = v49 + 52;
    os_unfair_lock_lock(v49 + 52);
    uint64_t v51 = v89;
    sub_1000262B4(v50, v91);
    if (!v51)
    {
      os_unfair_lock_unlock(v38);
      uint64_t v52 = v92;
      swift_retain();
      sub_1000262D0((uint64_t)v91);
      uint64_t v53 = *(os_unfair_lock_s **)(v52 + 16);
      os_log_type_t v54 = v53 + 4;
      uint64_t v55 = v53 + 6;
      os_unfair_lock_lock(v53 + 6);
      sub_100006754(v54, v90);
      uint64_t v89 = 0;
      os_unfair_lock_unlock(v55);
      uint64_t v56 = v90[0];
      swift_release();
      *(void *)&v91[0] = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Current upload count: %ld", v48, 0xCu);
      swift_slowDealloc();
      uint64_t v35 = v87;
      uint64_t v36 = v78;
      goto LABEL_14;
    }
LABEL_21:
    os_unfair_lock_unlock(v38);
    __break(1u);
    os_unfair_lock_unlock(v34);
    __break(1u);
    return;
  }
LABEL_14:

  uint64_t v57 = v88 + 8;
  v36(v86, v35);
  id v58 = [self defaultManager];
  id v59 = v79;
  URL._bridgeToObjectiveC()(v60);
  uint64_t v62 = v61;
  *(void *)&v91[0] = 0;
  unsigned int v63 = [v58 removeItemAtURL:v61 error:v91];

  if (v63)
  {
    uint64_t v64 = v81;
    id v65 = *(id *)&v91[0];
    uint64_t v66 = v82;
    ((void (*)(char *, uint64_t))v85)(v59, v82);
  }
  else
  {
    uint64_t v88 = v57;
    id v67 = *(id *)&v91[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v68 = (os_unfair_lock_s *)v83;
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    NSString v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v89 = 0;
      os_log_type_t v72 = v59;
      uint64_t v73 = (uint8_t *)v71;
      *(void *)&v91[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 136315138;
      uint64_t v86 = (os_unfair_lock_s *)(v73 + 4);
      swift_getErrorValue();
      uint64_t v74 = Error.localizedDescription.getter();
      v90[0] = sub_100110D58(v74, v75, (uint64_t *)v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "error occurred during removal of stored document %s. Not a fatal error as the proofing flow can continue.", v73, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      v78((os_unfair_lock_s *)v83, v87);
      uint64_t v64 = v81;
      uint64_t v66 = v82;
      ((void (*)(char *, uint64_t))v85)(v72, v82);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      v78(v68, v35);
      uint64_t v64 = v81;
      uint64_t v66 = v82;
      ((void (*)(char *, uint64_t))v85)(v59, v82);
    }
  }
  uint64_t v76 = (uint64_t)v84;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v84, 1, 1, v66);
  uint64_t v77 = v80;
  swift_beginAccess();
  sub_10005D3BC(v76, v77);
  swift_endAccess();
}

uint64_t sub_1001F4F58()
{
  swift_bridgeObjectRelease();
  sub_10000C5E0(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL, &qword_100720A68);
  sub_10000C5E0(*(void *)(v0 + OBJC_IVAR____TtC8coreidvd11UploadAsset_systemData), *(void *)(v0 + OBJC_IVAR____TtC8coreidvd11UploadAsset_systemData + 8));

  return swift_deallocClassInstance();
}

uint64_t sub_1001F4FE8()
{
  return type metadata accessor for UploadAsset(0);
}

uint64_t type metadata accessor for UploadAsset(uint64_t a1)
{
  return sub_100048DF0(a1, qword_100726D48);
}

void sub_1001F5010()
{
  sub_10005D364();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void *sub_1001F50C0()
{
  type metadata accessor for UploadsCloudContainer(0);
  swift_allocObject();
  unint64_t result = sub_1001F5144();
  qword_1007602F0 = (uint64_t)result;
  return result;
}

uint64_t sub_1001F5100()
{
  sub_100007764(&qword_100727220);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = &_swiftEmptyDictionarySingleton;
  qword_100726D18 = result;
  return result;
}

void *sub_1001F5144()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC8coreidvd21UploadsCloudContainer_name);
  *uint64_t v5 = 0x7364616F6C7075;
  v5[1] = 0xE700000000000000;
  uint64_t v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC8coreidvd21UploadsCloudContainer_containerIDProd);
  *uint64_t v6 = 0xD000000000000019;
  v6[1] = 0x8000000100640E10;
  uint64_t v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC8coreidvd21UploadsCloudContainer_containerIDNonProd);
  uint64_t *v7 = 0xD000000000000021;
  v7[1] = 0x8000000100640E30;
  uint64_t v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC8coreidvd21UploadsCloudContainer_networkAttributionBundleID);
  *uint64_t v8 = 0xD000000000000012;
  v8[1] = 0x8000000100640E60;
  uint64_t v9 = self;
  swift_retain();
  id v10 = [v9 standardUserDefaults];
  v11._object = (void *)0x8000000100640E80;
  v11._uint64_t countAndFlagsBits = 0xD000000000000019;
  Swift::Bool v12 = NSUserDefaults.internalBool(forKey:)(v11);

  if (v12)
  {
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Using nonprod uploads CloudKit container due to user defaults setting", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v16 = *v7;
    uint64_t v17 = v7[1];
  }
  else
  {
    uint64_t v16 = *v6;
    uint64_t v17 = v6[1];
  }
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v18 = *v5;
  uint64_t v19 = v5[1];
  uint64_t v20 = *v8;
  uint64_t v21 = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1001D9A90(v18, v19, v16, v17, v20, v21);
}

void *sub_1001F53D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = 0xD000000000000021;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  os_log_type_t v37 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - v8;
  id v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC8coreidvd21UploadsCloudContainer_name);
  *id v10 = 0x7364616F6C7075;
  v10[1] = 0xE700000000000000;
  uint64_t v36 = v10;
  Swift::String v11 = (void *)(v2 + OBJC_IVAR____TtC8coreidvd21UploadsCloudContainer_containerIDProd);
  *Swift::String v11 = 0xD000000000000019;
  v11[1] = 0x8000000100640E10;
  Swift::Bool v12 = (void *)(v2 + OBJC_IVAR____TtC8coreidvd21UploadsCloudContainer_containerIDNonProd);
  unint64_t v13 = 0x8000000100640E30;
  *Swift::Bool v12 = 0xD000000000000021;
  v12[1] = 0x8000000100640E30;
  os_log_type_t v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC8coreidvd21UploadsCloudContainer_networkAttributionBundleID);
  *os_log_type_t v14 = 0xD000000000000012;
  v14[1] = 0x8000000100640E60;
  unint64_t v15 = 0xD000000000000010;
  if (a1 == 1) {
    unint64_t v15 = 0xD000000000000021;
  }
  else {
    unint64_t v13 = 0x8000000100641390;
  }
  if (a1) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0xD000000000000019;
  }
  if (a1) {
    unint64_t v17 = v13;
  }
  else {
    unint64_t v17 = 0x8000000100640E10;
  }
  unint64_t v41 = v16;
  unint64_t v42 = v17;
  id v18 = [self standardUserDefaults];
  v19._object = (void *)0x8000000100640E80;
  v19._uint64_t countAndFlagsBits = 0xD000000000000019;
  Swift::Bool v20 = NSUserDefaults.internalBool(forKey:)(v19);

  if (v20)
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Internal setting for non-prod container enabled, using certification Uploads Container", v23, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v5);
    unint64_t v17 = 0x8000000100640E30;
    unint64_t v41 = 0xD000000000000021;
    unint64_t v42 = 0x8000000100640E30;
  }
  else
  {
    uint64_t v4 = v16;
  }
  uint64_t v24 = v37;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    v40[0] = swift_slowAlloc();
    uint64_t v35 = v5;
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_100110D58(v4, v17, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Initializing UploadsCloudContainer with Container ID: %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v35);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v5);
  }
  uint64_t v28 = *v36;
  uint64_t v29 = v36[1];
  swift_beginAccess();
  uint64_t v30 = v41;
  uint64_t v31 = v42;
  uint64_t v32 = *v14;
  uint64_t v33 = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1001D9A90(v28, v29, v30, v31, v32, v33);
}

uint64_t sub_1001F582C@<X0>(uint64_t *a1@<X0>, Swift::UInt a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for UploadsCloudContainer(0);
  swift_allocObject();
  uint64_t v6 = sub_1001F53D4(a2);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *a1;
  *a1 = 0x8000000000000000;
  sub_1005632AC((uint64_t)v6, a2, isUniquelyReferenced_nonNull_native);
  *a1 = v9;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6;
  return result;
}

uint64_t sub_1001F58DC@<X0>(uint64_t a1@<X0>, Swift::UInt a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(void *)(*(void *)a1 + 16) && (sub_100590DF4(a2), (v4 & 1) != 0)) {
    uint64_t result = swift_retain();
  }
  else {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

unint64_t sub_1001F593C()
{
  id v0 = [self standardUserDefaults];
  v1._uint64_t countAndFlagsBits = 0xD000000000000019;
  v1._object = (void *)0x8000000100640E80;
  Swift::Bool v2 = NSUserDefaults.internalBool(forKey:)(v1);

  if (v2) {
    return 0xD00000000000001BLL;
  }
  else {
    return 0xD000000000000013;
  }
}

unint64_t sub_1001F59DC()
{
  id v0 = [self standardUserDefaults];
  v1._object = (void *)0x8000000100640E80;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019;
  Swift::Bool v2 = NSUserDefaults.internalBool(forKey:)(v1);

  if (v2) {
    return 0xD000000000000023;
  }
  else {
    return 0xD00000000000001BLL;
  }
}

unint64_t sub_1001F5A84()
{
  id v0 = [self standardUserDefaults];
  v1._object = (void *)0x8000000100640E80;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019;
  Swift::Bool v2 = NSUserDefaults.internalBool(forKey:)(v1);

  if (v2) {
    return 0xD000000000000023;
  }
  else {
    return 0xD00000000000001BLL;
  }
}

uint64_t sub_1001F5B2C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)v21 - v14;
  v21[1] = *(void *)(v1 + 40);
  static DispatchTime.now()();
  if (qword_10071F4B8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for DispatchTimeInterval();
  sub_1000443D4(v16, (uint64_t)qword_100726D00);
  + infix(_:_:)();
  unint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v1;
  *(void *)(v18 + 24) = a1;
  aBlock[4] = sub_1001FA3FC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FAAF0;
  Swift::String v19 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v25 = _swiftEmptyArrayStorage;
  sub_1001FC0DC((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_10013FE88();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  v17(v15, v9);
  return swift_release();
}

uint64_t sub_1001F5EE8(uint64_t (*a1)(void))
{
  return a1(0);
}

uint64_t sub_1001F5F18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      v12[1] = v9 + 4;
      swift_getErrorValue();
      uint64_t v10 = Error.localizedDescription.getter();
      v12[2] = sub_100110D58(v10, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to warm up uploads CloudKit container due to error %{public}s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

uint64_t sub_1001F615C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, char a7, int a8)
{
  int v198 = a8;
  int v208 = a6;
  uint64_t v199 = a5;
  unint64_t v231 = a4;
  uint64_t v209 = a1;
  uint64_t v185 = type metadata accessor for UploadsCloudContainer.AnalyticsMetadata(0);
  uint64_t v11 = __chkstk_darwin(v185);
  uint64_t v184 = (uint64_t)&v171 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v183 = (char *)&v171 - v13;
  uint64_t v14 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v14 - 8);
  uint64_t v212 = (char *)&v171 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100007764((uint64_t *)&unk_1007271F0);
  uint64_t v194 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v196 = (uint64_t)&v171 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = v18;
  __chkstk_darwin(v17);
  uint64_t v211 = (uint64_t)&v171 - v19;
  uint64_t v218 = type metadata accessor for Date();
  uint64_t v203 = *(void *)(v218 - 8);
  uint64_t v20 = __chkstk_darwin(v218);
  long long v207 = (char *)&v171 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v201 = (char *)&v171 - v23;
  uint64_t v193 = v24;
  __chkstk_darwin(v22);
  uint64_t v210 = (char *)&v171 - v25;
  uint64_t v26 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v26 - 8);
  os_log_type_t v223 = (char *)&v171 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v224 - 8);
  uint64_t v29 = __chkstk_darwin(v224);
  uint64_t v206 = (char *)&v171 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  unint64_t v228 = (char *)&v171 - v31;
  uint64_t v32 = type metadata accessor for DIPError.Code();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v171 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v229 = type metadata accessor for Logger();
  uint64_t v204 = *(void *)(v229 - 8);
  uint64_t v36 = __chkstk_darwin(v229);
  uint64_t v215 = (char *)&v171 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v191 = (char *)&v171 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v200 = (char *)&v171 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  Swift::String v189 = (char *)&v171 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v213 = (char *)&v171 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v217 = (char *)&v171 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  unint64_t v222 = (char *)&v171 - v49;
  __chkstk_darwin(v48);
  uint64_t v51 = (char *)&v171 - v50;
  uint64_t v197 = a3;
  sub_100048D6C(a3, (uint64_t)&v233, (uint64_t *)&unk_1007271E0);
  if (!v234)
  {
    *(void *)&long long v219 = v28;
    char v60 = a7;
    uint64_t v192 = a2;
    sub_10000C6CC((uint64_t)&v233, (uint64_t *)&unk_1007271E0);
    goto LABEL_8;
  }
  sub_10000C6B4(&v233, (uint64_t)&v235);
  uint64_t v52 = *(os_unfair_lock_s **)(*sub_10000C728(&v235, *((uint64_t *)&v236 + 1)) + 16);
  uint64_t v53 = v52 + 4;
  os_log_type_t v54 = v52 + 5;
  os_unfair_lock_lock(v52 + 5);
  sub_10001B084(v53, &v233);
  os_unfair_lock_unlock(v54);
  if (v233 != 1)
  {
    *(void *)&long long v219 = v28;
    char v60 = a7;
    uint64_t v192 = a2;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v235);
LABEL_8:
    uint64_t v61 = swift_allocObject();
    uint64_t v205 = v61;
    *(void *)(v61 + 16) = &_swiftEmptyArrayStorage;
    uint64_t v62 = (void *)(v61 + 16);
    unint64_t v63 = v231;
    unint64_t v64 = v231 >> 62;
    if (v231 >> 62) {
      goto LABEL_21;
    }
    uint64_t v65 = *(void *)((v231 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (uint64_t i = v65; i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      unint64_t v66 = v63 & 0xC000000000000001;
      uint64_t v67 = 4;
      while (1)
      {
        uint64_t v68 = v67 - 4;
        if (!v66) {
          break;
        }
        NSString v69 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v70 = v67 - 3;
        if (__OFADD__(v68, 1)) {
          goto LABEL_20;
        }
LABEL_16:
        id v71 = sub_1001FB5B8(v69);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();

        ++v67;
        unint64_t v63 = v231;
        if (v70 == i) {
          goto LABEL_22;
        }
      }
      NSString v69 = *(unsigned char **)(v63 + 8 * v67);
      swift_retain();
      uint64_t v70 = v67 - 3;
      if (!__OFADD__(v68, 1)) {
        goto LABEL_16;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      swift_bridgeObjectRetain();
    }
LABEL_22:
    swift_bridgeObjectRelease();
    id v72 = [objc_allocWithZone((Class)CKOperationConfiguration) init];
    uint64_t v73 = v72;
    if (v208) {
      uint64_t v74 = 25;
    }
    else {
      uint64_t v74 = 17;
    }
    [v72 setQualityOfService:v74];
    uint64_t v182 = v73;
    [v73 setAllowsCellularAccess:v60 & 1];
    uint64_t v181 = os_transaction_create();
    unint64_t v187 = sub_10015DFAC((uint64_t)&_swiftEmptyArrayStorage);
    id v216 = [self defaultManager];
    uint64_t v75 = i;
    if (i)
    {
      if (i >= 1)
      {
        unint64_t v176 = v64;
        unint64_t v227 = v63 & 0xC000000000000001;
        unint64_t v226 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v219 + 48);
        long long v221 = (void (**)(char *, uint64_t, uint64_t))(v219 + 32);
        NSFileAttributeKey v190 = NSFileCreationDate;
        uint64_t v202 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v203 + 56);
        uint64_t v178 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v203 + 48);
        uint64_t v175 = (void (**)(char *, uint64_t, uint64_t))(v203 + 32);
        NSFileAttributeKey v173 = NSFileSize;
        uint64_t v172 = (void (**)(char *, char *, uint64_t))(v203 + 16);
        uint64_t v174 = (void (**)(char *, uint64_t))(v203 + 8);
        unint64_t v220 = (void (**)(char *, uint64_t))(v219 + 8);
        id v225 = (void (**)(char *, uint64_t))(v204 + 8);
        id v188 = (void (**)(char *, char *, uint64_t))(v219 + 16);
        swift_bridgeObjectRetain();
        uint64_t v186 = 0;
        uint64_t v76 = 0;
        *(void *)&long long v77 = 136315138;
        long long v219 = v77;
        unint64_t v214 = (char *)&type metadata for Any + 8;
        *(void *)&long long v77 = 136315650;
        long long v177 = v77;
        uint64_t v78 = v224;
        uint64_t v79 = v228;
        uint64_t v80 = (uint64_t)v223;
        while (1)
        {
          if (v227)
          {
            uint64_t v81 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v81 = *(void *)(v63 + 8 * v76 + 32);
            swift_retain();
          }
          uint64_t v82 = v81 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL;
          swift_beginAccess();
          sub_100048D6C(v82, v80, &qword_100720A68);
          if ((*v226)(v80, 1, v78) == 1)
          {
            sub_10000C6CC(v80, &qword_100720A68);
            id v83 = v222;
            defaultLogger()();
            swift_retain();
            uint64_t v84 = Logger.logObject.getter();
            os_log_type_t v85 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v84, v85))
            {
              uint64_t v86 = swift_slowAlloc();
              *(void *)&long long v235 = swift_slowAlloc();
              *(_DWORD *)uint64_t v86 = v219;
              uint64_t v87 = *(void *)(v81 + 16);
              unint64_t v88 = *(void *)(v81 + 24);
              swift_bridgeObjectRetain();
              uint64_t v89 = v87;
              uint64_t v80 = (uint64_t)v223;
              *(void *)(v86 + 4) = sub_100110D58(v89, v88, (uint64_t *)&v235);
              swift_release();
              uint64_t v75 = i;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v84, v85, "No file url is available for asset %s", (uint8_t *)v86, 0xCu);
              swift_arrayDestroy();
              unint64_t v63 = v231;
              swift_slowDealloc();
              uint64_t v78 = v224;
              swift_slowDealloc();
              swift_release();
            }
            else
            {

              swift_release_n();
            }
            (*v225)(v83, v229);
            uint64_t v79 = v228;
            goto LABEL_30;
          }
          (*v221)(v79, v80, v78);
          int v90 = *(unsigned __int8 *)(v81 + 48);
          if (v90 == 5)
          {
            uint64_t v91 = v217;
            defaultLogger()();
            swift_retain_n();
            uint64_t v92 = Logger.logObject.getter();
            os_log_type_t v93 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v92, v93))
            {
              uint64_t v94 = swift_slowAlloc();
              *(void *)&long long v235 = swift_slowAlloc();
              *(_DWORD *)uint64_t v94 = v219;
              uint64_t v95 = *(void *)(v81 + 16);
              unint64_t v96 = *(void *)(v81 + 24);
              swift_bridgeObjectRetain();
              *(void *)(v94 + 4) = sub_100110D58(v95, v96, (uint64_t *)&v235);
              swift_release_n();
              uint64_t v75 = i;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v92, v93, "No asset type is available for asset %s", (uint8_t *)v94, 0xCu);
              swift_arrayDestroy();
              unint64_t v63 = v231;
              swift_slowDealloc();
              uint64_t v78 = v224;
              swift_slowDealloc();
              swift_release();
            }
            else
            {
              swift_release_n();
            }

            (*v225)(v91, v229);
            uint64_t v79 = v228;
            (*v220)(v228, v78);
            goto LABEL_63;
          }
          URL.path.getter();
          NSString v97 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          *(void *)&long long v235 = 0;
          id v98 = [v216 attributesOfItemAtPath:v97 error:&v235];

          uint64_t v99 = (void *)v235;
          if (!v98)
          {
            id v106 = (id)v235;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            defaultLogger()();
            uint64_t v107 = v206;
            uint64_t v78 = v224;
            (*v188)(v206, v79, v224);
            swift_retain();
            swift_errorRetain();
            swift_retain();
            swift_errorRetain();
            os_log_type_t v108 = Logger.logObject.getter();
            os_log_type_t v109 = static os_log_type_t.debug.getter();
            int v110 = v109;
            if (os_log_type_enabled(v108, v109))
            {
              uint64_t v111 = swift_slowAlloc();
              uint64_t v180 = swift_slowAlloc();
              *(void *)&long long v235 = v180;
              *(_DWORD *)uint64_t v111 = v177;
              int v179 = v110;
              uint64_t v112 = *(void *)(v81 + 16);
              unint64_t v113 = *(void *)(v81 + 24);
              swift_bridgeObjectRetain();
              *(void *)(v111 + 4) = sub_100110D58(v112, v113, (uint64_t *)&v235);
              swift_release_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v111 + 12) = 2080;
              uint64_t v114 = URL.path.getter();
              *(void *)(v111 + 14) = sub_100110D58(v114, v115, (uint64_t *)&v235);
              swift_bridgeObjectRelease();
              uint64_t v116 = *v220;
              (*v220)(v107, v224);
              *(_WORD *)(v111 + 22) = 2080;
              swift_getErrorValue();
              uint64_t v117 = Error.localizedDescription.getter();
              *(void *)(v111 + 24) = sub_100110D58(v117, v118, (uint64_t *)&v235);
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v108, (os_log_type_t)v179, "Skipping analytics because no attributes are available for %s at url %s, error %s", (uint8_t *)v111, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              unint64_t v63 = v231;
              swift_slowDealloc();

              swift_errorRelease();
              swift_release();
              (*v225)(v215, v229);
              v116(v79, v224);
              uint64_t v78 = v224;
            }
            else
            {

              swift_errorRelease();
              swift_errorRelease();
              unint64_t v130 = *v220;
              (*v220)(v107, v78);
              swift_release_n();
              swift_errorRelease();
              swift_release();
              (*v225)(v215, v229);
              v130(v79, v78);
            }
LABEL_62:
            uint64_t v75 = i;
            goto LABEL_63;
          }
          type metadata accessor for FileAttributeKey(0);
          sub_1001FC0DC(&qword_10071FA00, type metadata accessor for FileAttributeKey);
          uint64_t v100 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
          id v101 = v99;

          if (!*(void *)(v100 + 16)) {
            break;
          }
          uint64_t v102 = v190;
          uint64_t v103 = sub_100590A94();
          uint64_t v104 = v213;
          if (v105)
          {
            sub_10003BC28(*(void *)(v100 + 56) + 32 * v103, (uint64_t)&v235);
          }
          else
          {
            long long v235 = 0u;
            long long v236 = 0u;
          }
          uint64_t v119 = (uint64_t)v212;

          if (!*((void *)&v236 + 1)) {
            goto LABEL_55;
          }
          uint64_t v120 = v218;
          int v121 = swift_dynamicCast();
          (*v202)(v119, v121 ^ 1u, 1, v120);
          if ((*v178)(v119, 1, v120) == 1) {
            goto LABEL_56;
          }
          (*v175)(v201, v119, v218);
          if (*(void *)(v100 + 16))
          {
            uint64_t v122 = v173;
            uint64_t v123 = sub_100590A94();
            if (v124)
            {
              sub_10003BC28(*(void *)(v100 + 56) + 32 * v123, (uint64_t)&v235);
            }
            else
            {
              long long v235 = 0u;
              long long v236 = 0u;
            }
          }
          else
          {
            long long v235 = 0u;
            long long v236 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v236 + 1))
          {
            sub_100025C28(0, &qword_100726CC8);
            if (swift_dynamicCast())
            {
              id v131 = v232;
              id v132 = [v232 unsignedLongLongValue];
              BOOL v133 = __CFADD__(v186, v132);
              v186 += (uint64_t)v132;
              if (v133) {
                goto LABEL_94;
              }
              id v134 = v132;
              uint64_t v135 = *(void *)(v81 + 24);
              uint64_t v180 = *(void *)(v81 + 16);
              uint64_t v136 = v185;
              uint64_t v137 = v183;
              uint64_t v138 = v218;
              (*v172)(&v183[*(int *)(v185 + 20)], v201, v218);
              unsigned char *v137 = v90;
              *(void *)&v137[*(int *)(v136 + 24)] = v134;
              uint64_t v139 = v184;
              sub_1001FC124((uint64_t)v137, v184);
              swift_bridgeObjectRetain();
              unint64_t v140 = v187;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)&long long v235 = v140;
              sub_1005633E8(v139, v180, v135, isUniquelyReferenced_nonNull_native);
              unint64_t v187 = v235;
              swift_release();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              (*v174)(v201, v138);
              uint64_t v79 = v228;
              uint64_t v78 = v224;
              (*v220)(v228, v224);
              unint64_t v63 = v231;
              goto LABEL_62;
            }
          }
          else
          {
            sub_10000C6CC((uint64_t)&v235, (uint64_t *)&unk_100727200);
          }
          uint64_t v142 = v189;
          defaultLogger()();
          swift_retain_n();
          uint64_t v143 = Logger.logObject.getter();
          os_log_type_t v144 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v143, v144))
          {
            uint64_t v145 = swift_slowAlloc();
            *(void *)&long long v235 = swift_slowAlloc();
            *(_DWORD *)uint64_t v145 = v219;
            uint64_t v146 = *(void *)(v81 + 16);
            unint64_t v147 = *(void *)(v81 + 24);
            swift_bridgeObjectRetain();
            *(void *)(v145 + 4) = sub_100110D58(v146, v147, (uint64_t *)&v235);
            swift_release_n();
            uint64_t v75 = i;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v143, v144, "No file size available for asset %s", (uint8_t *)v145, 0xCu);
            swift_arrayDestroy();
            unint64_t v63 = v231;
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();
          }
          else
          {
            swift_release_n();
          }

          (*v225)(v142, v229);
          (*v174)(v201, v218);
LABEL_60:
          uint64_t v79 = v228;
          uint64_t v78 = v224;
          (*v220)(v228, v224);
LABEL_63:
          uint64_t v80 = (uint64_t)v223;
LABEL_30:
          if (v75 == ++v76)
          {
            swift_bridgeObjectRelease();
            unint64_t v64 = v176;
            goto LABEL_78;
          }
        }
        long long v235 = 0u;
        long long v236 = 0u;
        uint64_t v119 = (uint64_t)v212;
        uint64_t v104 = v213;
LABEL_55:
        sub_10000C6CC((uint64_t)&v235, (uint64_t *)&unk_100727200);
        (*v202)(v119, 1, 1, v218);
LABEL_56:
        swift_bridgeObjectRelease();
        sub_10000C6CC(v119, &qword_1007239B0);
        defaultLogger()();
        swift_retain_n();
        uint64_t v125 = Logger.logObject.getter();
        os_log_type_t v126 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v125, v126))
        {
          uint64_t v127 = swift_slowAlloc();
          *(void *)&long long v235 = swift_slowAlloc();
          *(_DWORD *)uint64_t v127 = v219;
          uint64_t v128 = *(void *)(v81 + 16);
          unint64_t v129 = *(void *)(v81 + 24);
          swift_bridgeObjectRetain();
          *(void *)(v127 + 4) = sub_100110D58(v128, v129, (uint64_t *)&v235);
          swift_release_n();
          uint64_t v75 = i;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v125, v126, "No attributes available for asset %s", (uint8_t *)v127, 0xCu);
          swift_arrayDestroy();
          unint64_t v63 = v231;
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();
        }
        else
        {
          swift_release_n();
        }

        (*v225)(v104, v229);
        goto LABEL_60;
      }
      __break(1u);
LABEL_94:
      __break(1u);
    }
    else
    {
      uint64_t v186 = 0;
LABEL_78:
      Date.init()();
      type metadata accessor for NetworkMonitor();
      static NetworkMonitor.shared.getter();
      dispatch thunk of NetworkMonitor.currentPath.getter();
      swift_release();
      id v148 = [self standardUserDefaults];
      v149._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
      v149._object = (void *)0x80000001006410F0;
      Swift::Bool v150 = NSUserDefaults.internalBool(forKey:)(v149);

      if (!v150) {
        goto LABEL_92;
      }
      defaultLogger()();
      uint64_t v151 = Logger.logObject.getter();
      os_log_type_t v152 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v151, v152))
      {
        uint64_t v153 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v153 = 0;
        _os_log_impl((void *)&_mh_execute_header, v151, v152, "forceCloudkitPartialRecordsFailure internal setting enabled", v153, 2u);
        swift_slowDealloc();
      }

      uint64_t v154 = *(void (**)(char *, uint64_t))(v204 + 8);
      v154(v200, v229);
      if (v64)
      {
        swift_bridgeObjectRetain();
        uint64_t v155 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v155 < 2)
        {
LABEL_92:
          unint64_t v231 = *(void *)(v205 + 16);
          sub_100048D6C(v197, (uint64_t)&v235, (uint64_t *)&unk_1007271E0);
          uint64_t v159 = v196;
          sub_100048D6C(v211, v196, (uint64_t *)&unk_1007271F0);
          uint64_t v160 = v203;
          (*(void (**)(char *, char *, uint64_t))(v203 + 16))(v207, v210, v218);
          unint64_t v161 = (*(unsigned __int8 *)(v194 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80);
          unint64_t v162 = v63;
          unint64_t v163 = (v195 + *(unsigned __int8 *)(v160 + 80) + v161) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
          uint64_t i = (v163 + v193 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v164 = (v163 + v193 + 23) & 0xFFFFFFFFFFFFFFF8;
          os_log_type_t v165 = (char *)swift_allocObject();
          *((void *)v165 + 2) = v181;
          sub_1000BEA14((uint64_t)&v235, (uint64_t)(v165 + 24), (uint64_t *)&unk_1007271E0);
          uint64_t v166 = v192;
          *((void *)v165 + 8) = v209;
          *((void *)v165 + 9) = v166;
          *((void *)v165 + 10) = v199;
          *((void *)v165 + 11) = v162;
          *((void *)v165 + 12) = v205;
          sub_1000BEA14(v159, (uint64_t)&v165[v161], (uint64_t *)&unk_1007271F0);
          (*(void (**)(char *, char *, uint64_t))(v160 + 32))(&v165[v163], v207, v218);
          uint64_t v167 = &v165[i];
          *(void *)uint64_t v167 = v187;
          v167[8] = v208 & 1;
          uint64_t v168 = &v165[v164];
          *(void *)uint64_t v168 = v186;
          v168[8] = v198 & 1;
          swift_bridgeObjectRetain();
          uint64_t v169 = v231;
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          NSString v170 = v182;
          sub_1001E9B9C(v169, 5, (uint64_t)v182, (void (*)(uint64_t, void))sub_1001FBF88, (uint64_t)v165);
          swift_unknownObjectRelease();

          swift_bridgeObjectRelease();
          swift_release();
          sub_10000C6CC(v211, (uint64_t *)&unk_1007271F0);
          (*(void (**)(char *, uint64_t))(v160 + 8))(v210, v218);
          return swift_release();
        }
      }
      else if (*(uint64_t *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
      {
        goto LABEL_92;
      }
      defaultLogger()();
      uint64_t v156 = Logger.logObject.getter();
      os_log_type_t v157 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v156, v157))
      {
        uint64_t v158 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v158 = 0;
        _os_log_impl((void *)&_mh_execute_header, v156, v157, "Number of assets are greater than 1, will remove the first item from the disk to simulate partial failure.", v158, 2u);
        swift_slowDealloc();
      }

      v154(v191, v229);
      if (!v75) {
        goto LABEL_92;
      }
      if ((v63 & 0xC000000000000001) == 0)
      {
        if (!*(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          __break(1u);
        }
        swift_retain();
        sub_1001F4510();
        goto LABEL_91;
      }
    }
    swift_bridgeObjectRetain();
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
    sub_1001F4510();
LABEL_91:
    swift_release();
    goto LABEL_92;
  }
  defaultLogger()();
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "saveAssets: cancelToken.isCanceled is true, completing with canceled error code.", v57, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v204 + 8))(v51, v229);
  (*(void (**)(char *, void, uint64_t))(v33 + 104))(v35, enum case for DIPError.Code.cloudkitCancelRequestedByClient(_:), v32);
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001FC0DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v58 = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  v209(v58);
  swift_errorRelease();
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v235);
}

uint64_t sub_1001F8028(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v158 = a8;
  uint64_t v136 = a6;
  unint64_t v164 = a2;
  uint64_t v19 = sub_100007764(&qword_100727210);
  __chkstk_darwin(v19 - 8);
  unint64_t v140 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v168 = type metadata accessor for UploadsCloudContainer.AnalyticsMetadata(0);
  uint64_t v141 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  uint64_t v167 = (char *)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100007764((uint64_t *)&unk_1007271F0);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v125 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for DIPError();
  uint64_t v133 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  os_log_type_t v152 = (char *)&v125 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for DIPError.Code();
  uint64_t v26 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v155 = (char *)&v125 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for Logger();
  uint64_t v137 = *(void *)(v166 - 8);
  uint64_t v28 = __chkstk_darwin(v166);
  uint64_t v159 = (char *)&v125 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v151 = (char *)&v125 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v125 - v33;
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v125 - v35;
  uint64_t v37 = type metadata accessor for Date();
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v153 = (char *)&v125 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v165 = a1;
  uint64_t v135 = v38;
  uint64_t v134 = v26;
  if ((~a1 & 0xF000000000000007) == 0)
  {
    uint64_t v126 = v37;
    uint64_t v127 = (void (*)(void))a5;
    uint64_t v40 = a10;
    uint64_t v41 = (uint64_t *)(a9 + 16);
    defaultLogger()();
    swift_retain_n();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    int v44 = v43;
    a5 = (uint64_t)&unk_100610000;
    uint64_t v45 = (char *)&type metadata for Any;
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v165 = (uint64_t)v42;
      uint64_t v46 = swift_slowAlloc();
      LODWORD(v163) = v44;
      uint64_t v47 = (uint8_t *)v46;
      uint64_t v162 = swift_slowAlloc();
      v171[0] = v162;
      unint64_t v164 = a10;
      unint64_t v161 = v47;
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v160 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v47 + 4);
      swift_beginAccess();
      sub_100025C28(0, &qword_100727218);
      swift_bridgeObjectRetain();
      uint64_t v48 = Array.description.getter();
      unint64_t v50 = v49;
      uint64_t v45 = (char *)&type metadata for Any;
      a5 = 0x100610000;
      swift_bridgeObjectRelease();
      uint64_t v51 = v48;
      uint64_t v41 = (uint64_t *)(a9 + 16);
      *(void *)&long long v169 = sub_100110D58(v51, v50, v171);
      uint64_t v40 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v52 = (os_log_t)v165;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v165, (os_log_type_t)v163, "Successfully saved asset records %s to CloudKit", v161, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v165 = *(void *)(v137 + 8);
    ((void (*)(char *, uint64_t))v165)(v36, v166);
    uint64_t v37 = (uint64_t)v140;
    id v62 = &unk_1007271F0;
    sub_100048D6C(v40, (uint64_t)v24, (uint64_t *)&unk_1007271F0);
    uint64_t v147 = sub_1005F7F98((uint64_t)v24);
    uint64_t v149 = v63;
    uint64_t v146 = sub_1005F82EC((uint64_t)v24);
    uint64_t v150 = v64;
    sub_10000C6CC((uint64_t)v24, (uint64_t *)&unk_1007271F0);
    Date.timeIntervalSince(_:)();
    swift_beginAccess();
    uint64_t v65 = *v41;
    unint64_t v66 = (unint64_t)*v41 >> 62;
    uint64_t v67 = (uint64_t)v159;
    id v148 = v41;
    if (v66) {
      goto LABEL_55;
    }
    uint64_t v68 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v68; uint64_t v68 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v145 = a14;
      uint64_t v162 = a12;
      unint64_t v164 = v65 & 0xC000000000000001;
      swift_beginAccess();
      unint64_t v161 = (uint8_t *)(v141 + 56);
      uint64_t v160 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v141 + 48);
      uint64_t v144 = v137 + 8;
      a7 = 4;
      *(void *)&long long v69 = *(void *)(a5 + 1680);
      long long v139 = v69;
      uint64_t v138 = v45 + 8;
      id v132 = (void *)0x8000000100641260;
      int v143 = a15 & 1;
      int v142 = a13 & 1;
      id v131 = (void *)0x8000000100641280;
      unint64_t v130 = (void *)0x8000000100641240;
      unint64_t v129 = (void *)0x8000000100641210;
      uint64_t v128 = (void *)0x8000000100641190;
      uint64_t v157 = v65;
      unint64_t v163 = (char *)v68;
      while (1)
      {
        id v70 = v164 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v65 + 8 * a7);
        id v71 = v70;
        uint64_t v45 = (char *)(a7 - 3);
        if (__OFADD__(a7 - 4, 1)) {
          break;
        }
        id v72 = [v70 recordID];
        id v73 = [v72 recordName];

        a5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v75 = v74;

        uint64_t v76 = v162;
        if (*(void *)(v162 + 16) && (unint64_t v77 = sub_100590548(a5, v75), (v78 & 1) != 0))
        {
          sub_1001FC1E4(*(void *)(v76 + 56) + *(void *)(v141 + 72) * v77, v37);
          uint64_t v79 = 0;
        }
        else
        {
          uint64_t v79 = 1;
        }
        unint64_t v80 = v168;
        (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))v161)(v37, v79, 1, v168);
        swift_bridgeObjectRelease();
        if ((*v160)(v37, 1, v80) == 1)
        {
          sub_10000C6CC(v37, &qword_100727210);
          defaultLogger()();
          id v62 = v71;
          uint64_t v81 = Logger.logObject.getter();
          os_log_type_t v82 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v81, v82))
          {
            uint64_t v83 = swift_slowAlloc();
            uint64_t v172 = swift_slowAlloc();
            *(_DWORD *)uint64_t v83 = v139;
            id v84 = [v62 recordID];
            id v85 = [v84 recordName];

            uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            a5 = v87;

            uint64_t v37 = (uint64_t)v140;
            uint64_t v88 = v86;
            uint64_t v65 = v157;
            *(void *)(v83 + 4) = sub_100110D58(v88, a5, &v172);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v81, v82, "Not recording analytics for %s because no metadat is available", (uint8_t *)v83, 0xCu);
            swift_arrayDestroy();
            uint64_t v67 = (uint64_t)v159;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          ((void (*)(uint64_t, uint64_t))v165)(v67, v166);
        }
        else
        {
          uint64_t v89 = v167;
          sub_1001FC124(v37, (uint64_t)v167);
          switch(*v89)
          {
            case 1:
              v98._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
              v99._uint64_t countAndFlagsBits = 0x3133306264373835;
              v99._object = (void *)0xE800000000000000;
              v98._object = v131;
              logMilestone(tag:description:)(v99, v98);
              id v62 = (id)0xEE006B636142746ELL;
              break;
            case 2:
              v94._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
              v95._uint64_t countAndFlagsBits = 0x3730303166656435;
              v95._object = (void *)0xE800000000000000;
              v94._object = v130;
              logMilestone(tag:description:)(v95, v94);
              id v62 = (id)0xE600000000000000;
              break;
            case 3:
              v96._uint64_t countAndFlagsBits = 0xD000000000000024;
              v97._uint64_t countAndFlagsBits = 0x6337343733663332;
              v97._object = (void *)0xE800000000000000;
              v96._object = v129;
              logMilestone(tag:description:)(v97, v96);
              id v62 = (id)0xED00006F65646956;
              break;
            case 4:
              v92._uint64_t countAndFlagsBits = 0xD000000000000025;
              v93._uint64_t countAndFlagsBits = 0x6136383637396164;
              v93._object = (void *)0xE800000000000000;
              v92._object = v128;
              logMilestone(tag:description:)(v93, v92);
              id v62 = (id)0xEE006F6564695679;
              break;
            default:
              v90._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
              v91._uint64_t countAndFlagsBits = 0x3639333965343934;
              v91._object = (void *)0xE800000000000000;
              v90._object = v132;
              logMilestone(tag:description:)(v91, v90);
              id v62 = (id)0xEF746E6F7246746ELL;
              break;
          }
          a5 = v168;
          Date.timeIntervalSince(_:)();
          if ((unint64_t)*v148 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v100 < 0)
            {
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              goto LABEL_37;
            }
          }
          type metadata accessor for DaemonAnalytics();
          static DaemonAnalytics.sendUploadedAssetToCloudKitEvent(assetType:isUserInitiated:fileSizeBytes:batchUploadDurationSeconds:metaUploadDurationSeconds:batchSizeBytes:batchAssetCount:networkType:networkCost:isScheduledUpload:)();

          swift_bridgeObjectRelease();
          sub_1001FC188((uint64_t)v167);
          uint64_t v67 = (uint64_t)v159;
          uint64_t v65 = v157;
        }
        ++a7;
        if (v45 == v163) {
          goto LABEL_59;
        }
      }
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      if (v65 < 0) {
        id v62 = (id)v65;
      }
      else {
        id v62 = (id)(v65 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain();
    }
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v119 = v158;
    if ((unint64_t)v158 >> 62)
    {
      if (v158 < 0) {
        id v62 = (id)v158;
      }
      else {
        id v62 = (id)(v158 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain();
      a5 = _CocoaArrayWrapper.endIndex.getter();
      if (a5) {
        goto LABEL_61;
      }
    }
    else
    {
      a5 = *(void *)((v158 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (a5)
      {
LABEL_61:
        if (a5 >= 1)
        {
          uint64_t v124 = 0;
          unint64_t v168 = v119 & 0xC000000000000001;
          LODWORD(v167) = enum case for DIPError.Code.internalError(_:);
          unint64_t v164 = v134 + 104;
          unint64_t v163 = (char *)(v137 + 8);
          uint64_t v162 = 0x8000000100641060;
          unint64_t v161 = (uint8_t *)0x8000000100640FA0;
          uint64_t v160 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))0xD000000000000040;
          uint64_t v159 = (char *)0x8000000100641140;
          do
          {
            if (v168) {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              swift_retain();
            }
            sub_1001F4510();
            swift_release();
            ++v124;
          }
          while (a5 != v124);
          goto LABEL_72;
        }
        __break(1u);
        goto LABEL_74;
      }
    }
LABEL_72:
    swift_bridgeObjectRelease();
    v127(0);
    return (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v153, v126);
  }
  sub_100048D6C(a4, (uint64_t)&v169, (uint64_t *)&unk_1007271E0);
  if (!v170)
  {
LABEL_37:
    uint64_t v101 = v165;
    os_log_type_t v56 = (void *)v164;
    sub_1001FC248(v165);
    sub_10000C6CC((uint64_t)&v169, (uint64_t *)&unk_1007271E0);
    uint64_t v45 = 0;
    if (v101 < 0) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  sub_10000C6B4(&v169, (uint64_t)v171);
  uint64_t v53 = *(void *)(*sub_10000C728(v171, v171[3]) + 16);
  os_log_type_t v54 = (unsigned char *)(v53 + 16);
  uint64_t v55 = (os_unfair_lock_s *)(v53 + 20);
  os_log_type_t v56 = (void *)v164;
  sub_1001FC248(v165);
  os_unfair_lock_lock(v55);
  uint64_t v45 = 0;
  sub_10001B084(v54, &v169);
  os_unfair_lock_unlock(v55);
  if ((v169 & 1) == 0)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v171);
    uint64_t v101 = v165;
    if (v165 < 0)
    {
LABEL_40:
      id v62 = (id)(v101 & 0x7FFFFFFFFFFFFFFFLL);
      swift_bridgeObjectRetain();
      swift_errorRetain();
      unint64_t v118 = (void **)swift_bridgeObjectRetain();
      unint64_t v119 = (unint64_t)sub_1001FB314(v118, v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!(v119 >> 62))
      {
        uint64_t v65 = v136;
        uint64_t v120 = *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v120)
        {
LABEL_75:
          swift_bridgeObjectRelease_n();
LABEL_76:
          swift_errorRetain();
          ((void (*)(id))a5)(v62);
          swift_errorRelease();
          sub_1001FC298(v165);
          swift_errorRelease();
          return (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v153, v37);
        }
LABEL_42:
        uint64_t v127 = (void (*)(void))a5;
        uint64_t v67 = 4;
        while (1)
        {
          uint64_t v121 = v67 - 4;
          if ((v119 & 0xC000000000000001) != 0)
          {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            BOOL v122 = __OFADD__(v121, 1);
            a5 = v67 - 3;
            if (v122) {
              goto LABEL_54;
            }
          }
          else
          {
            swift_retain();
            BOOL v122 = __OFADD__(v121, 1);
            a5 = v67 - 3;
            if (v122) {
              goto LABEL_54;
            }
          }
          sub_1001F4510();
          if (v45) {
            break;
          }
          swift_release();
          ++v67;
          if (a5 == v120)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_52;
          }
        }
        swift_bridgeObjectRelease_n();
        swift_release();
        (*(void (**)(char *, void, uint64_t))(v134 + 104))(v155, enum case for DIPError.Code.internalError(_:), v154);
        swift_errorRetain();
        sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
        sub_1001FC0DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        uint64_t v123 = v151;
        defaultLogger()();
        DIPRecordError(_:message:log:)();
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v137 + 8))(v123, v166);
        swift_errorRelease();
LABEL_52:
        a5 = (uint64_t)v127;
        goto LABEL_76;
      }
LABEL_74:
      uint64_t v65 = v136;
      swift_bridgeObjectRetain();
      uint64_t v120 = _CocoaArrayWrapper.endIndex.getter();
      if (!v120) {
        goto LABEL_75;
      }
      goto LABEL_42;
    }
LABEL_38:
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v102 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v103 = (*(unsigned __int8 *)(*(void *)v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v102 + 80);
    uint64_t v104 = swift_allocObject();
    *(_OWORD *)(v104 + 16) = xmmword_100610730;
    unint64_t v105 = v104 + v103;
    id v106 = (void *)(v105 + v102[14]);
    uint64_t v107 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    uint64_t v108 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 104))(v105, v107, v108);
    uint64_t v109 = *(void *)(a7 + OBJC_IVAR____TtC8coreidvd21UploadsCloudContainer_name);
    uint64_t v110 = *(void *)(a7 + OBJC_IVAR____TtC8coreidvd21UploadsCloudContainer_name + 8);
    v106[3] = &type metadata for String;
    void *v106 = v109;
    v106[1] = v110;
    sub_1001FC2FC(v101);
    swift_bridgeObjectRetain();
    sub_10015C504(v104);
    (*(void (**)(char *, void, uint64_t))(v134 + 104))(v155, enum case for DIPError.Code.internalError(_:), v154);
    sub_1001FC248(v101);
    uint64_t v111 = v152;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    v112._uint64_t countAndFlagsBits = 0xD000000000000015;
    v112._object = (void *)0x80000001006412D0;
    v113._uint64_t countAndFlagsBits = 0x3031323638313933;
    v113._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v113, v112);
    sub_1001FC0DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v114 = v156;
    uint64_t v115 = swift_allocError();
    uint64_t v116 = v133;
    (*(void (**)(uint64_t, char *, uint64_t))(v133 + 16))(v117, v111, v114);
    ((void (*)(uint64_t))a5)(v115);
    swift_errorRelease();
    sub_1001FC298(v101);
    sub_1001FC298(v101);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v111, v114);
    return (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v153, v37);
  }
  defaultLogger()();
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    id v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "saveAssets: Save failed but cancelToken.isCanceled is true, completing with canceled error code.", v59, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v137 + 8))(v34, v166);
  (*(void (**)(char *, void, uint64_t))(v134 + 104))(v155, enum case for DIPError.Code.cloudkitCancelRequestedByClient(_:), v154);
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  sub_1001FC0DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v60 = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  ((void (*)(uint64_t))a5)(v60);
  swift_errorRelease();
  sub_1001FC298(v165);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v153, v37);
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v171);
}

uint64_t sub_1001F9A4C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return a2(0);
  }
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.internalError(_:), v4);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001FC0DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v12 = swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v13, v11, v8);
  a2(v12);
  swift_errorRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1001F9CE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6)
{
  int v20 = a5;
  uint64_t v11 = sub_100007764(&qword_10071FF30);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(&v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v11);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v12 + 32))(v15 + v14, &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)], v11);
  sub_100048D6C(a6, (uint64_t)v21, (uint64_t *)&unk_1007271E0);
  uint64_t v16 = swift_allocObject();
  sub_1000BEA14((uint64_t)v21, v16 + 16, (uint64_t *)&unk_1007271E0);
  *(void *)(v16 + 56) = a3;
  *(void *)(v16 + 64) = a2;
  *(unsigned char *)(v16 + 72) = a4;
  *(_WORD *)(v16 + 73) = v20;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1001FA500;
  *(void *)(v17 + 24) = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1001DA5B4(3, (uint64_t)sub_100030C14, v16, (uint64_t)sub_100030C64, v17);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1001F9F00(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    sub_100007764(&qword_10071FF30);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_100007764(&qword_10071FF30);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1001F9F64()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001F9FD4()
{
  sub_1001ED504();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1001FA088()
{
  return type metadata accessor for UploadsCloudContainer(0);
}

uint64_t type metadata accessor for UploadsCloudContainer(uint64_t a1)
{
  return sub_100048DF0(a1, qword_100726E88);
}

uint64_t sub_1001FA0B0()
{
  return swift_updateClassMetadata2();
}

unsigned char *storeEnumTagSinglePayload for UploadAsset.AssetType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001FA1C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadAsset.AssetType()
{
  return &type metadata for UploadAsset.AssetType;
}

unint64_t sub_1001FA200()
{
  unint64_t result = qword_1007271D8;
  if (!qword_1007271D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007271D8);
  }
  return result;
}

uint64_t sub_1001FA254(uint64_t a1)
{
  if (qword_10071F4C8 != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1);
  uint64_t v2 = (uint64_t)&v1[4];
  int v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1001FC310(v2, &v8);
  os_unfair_lock_unlock(v3);
  uint64_t result = v8;
  if (!v8)
  {
    __chkstk_darwin(0);
    unsigned int v6 = (uint64_t *)&v5[4];
    uint64_t v7 = v5 + 6;
    os_unfair_lock_lock(v5 + 6);
    sub_1001FC32C(v6, &v8);
    os_unfair_lock_unlock(v7);
    return v8;
  }
  return result;
}

unint64_t sub_1001FA378(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F1140, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001FA3C4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001FA3FC()
{
  return sub_1001DA5B4(*(void *)(v0 + 24), (uint64_t)sub_1001F5EE8, 0, (uint64_t)sub_1001F5F18, 0);
}

uint64_t sub_1001FA454(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001FA464()
{
  return swift_release();
}

uint64_t sub_1001FA46C()
{
  uint64_t v1 = sub_100007764(&qword_10071FF30);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001FA500(uint64_t a1)
{
  sub_100007764(&qword_10071FF30);

  return sub_1001F9F00(a1);
}

uint64_t sub_1001FA574()
{
  if (*(void *)(v0 + 40)) {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 75, 7);
}

uint64_t sub_1001FA5C4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for UploadsCloudContainer.AnalyticsMetadata(uint64_t a1)
{
  return sub_100048DF0(a1, qword_100727280);
}

uint64_t sub_1001FA61C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void *sub_1001FA654(unint64_t a1)
{
  uint64_t v122 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v122 - 8);
  uint64_t v3 = __chkstk_darwin(v122);
  uint64_t v5 = (char *)&v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v104 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v109 = (char *)&v104 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v104 - v11;
  uint64_t v13 = sub_100007764(&qword_100720A68);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v108 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v120 = (char *)&v104 - v16;
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  int v20 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v128 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v21 = (uint64_t)result;
    if (result) {
      goto LABEL_3;
    }
LABEL_57:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v21 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = (void *)swift_bridgeObjectRetain();
  if (!v21) {
    goto LABEL_57;
  }
LABEL_3:
  uint64_t v125 = v21;
  if (v21 >= 1)
  {
    uint64_t v117 = v20;
    uint64_t v107 = v12;
    Swift::String v112 = v8;
    uint64_t v23 = 0;
    unint64_t v126 = a1 & 0xC000000000000001;
    uint64_t v24 = (char *)_swiftEmptyArrayStorage;
    uint64_t v123 = v5;
    uint64_t v124 = v17;
    uint64_t v25 = v125;
    do
    {
      if (v126) {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v26 = *(id *)(a1 + 8 * v23 + 32);
      }
      uint64_t v27 = v26;
      id v28 = [v26 recordUUID];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v32 = v31;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = sub_10010F3C4(0, *((void *)v24 + 2) + 1, 1, v24);
        }
        unint64_t v34 = *((void *)v24 + 2);
        unint64_t v33 = *((void *)v24 + 3);
        if (v34 >= v33 >> 1) {
          uint64_t v24 = sub_10010F3C4((char *)(v33 > 1), v34 + 1, 1, v24);
        }
        *((void *)v24 + 2) = v34 + 1;
        uint64_t v35 = &v24[16 * v34];
        *((void *)v35 + 4) = v30;
        *((void *)v35 + 5) = v32;
        uint64_t v5 = v123;
        uint64_t v17 = v124;
        uint64_t v25 = v125;
      }
      else
      {
      }
      ++v23;
    }
    while (v25 != v23);
    swift_bridgeObjectRelease();
    unint64_t v119 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    Swift::String v113 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v114 = (void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    id v106 = (void (**)(char *, char *, uint64_t))(v18 + 16);
    unint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v121 = (void (**)(char *, uint64_t))(v2 + 8);
    swift_bridgeObjectRetain();
    uint64_t v36 = 0;
    *(void *)&long long v37 = 136315138;
    long long v116 = v37;
    uint64_t v115 = (char *)&type metadata for Any + 8;
    long long v110 = xmmword_100610EF0;
    unint64_t v118 = a1;
    while (1)
    {
      if (v126) {
        id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v44 = *(id *)(a1 + 8 * v36 + 32);
      }
      uint64_t v45 = v44;
      id v46 = [v44 assetFileURL];
      if (v46)
      {
        uint64_t v47 = v46;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v48 = (uint64_t)v120;
        URL.init(string:)();
        swift_bridgeObjectRelease();
        if ((*v119)(v48, 1, v17) == 1)
        {
          sub_10000C6CC(v48, &qword_100720A68);
          uint64_t v25 = v125;
        }
        else
        {
          unint64_t v49 = v117;
          (*v114)(v117, v48, v17);
          char v50 = URL.isFileOnDisk.getter();
          uint64_t v25 = v125;
          if (v50)
          {
            id v51 = [v45 assetType];
            if (!v51) {
              goto LABEL_41;
            }
            os_log_t v52 = v51;
            uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v55 = v54;

            v56._uint64_t countAndFlagsBits = v53;
            v56._object = v55;
            unint64_t v57 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F1140, v56);
            uint64_t v25 = v125;
            swift_bridgeObjectRelease();
            if (v57 <= 4)
            {
              id v58 = [v45 recordUUID];
              if (v58)
              {
                id v59 = v58;
                os_log_t v111 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v104 = v60;

                uint64_t v61 = (uint64_t)v108;
                (*v106)(v108, v117, v17);
                id v62 = *v105;
                (*v105)(v61, 0, 1, v17);
                type metadata accessor for UploadAsset(0);
                uint64_t v63 = swift_allocObject();
                uint64_t v64 = v17;
                uint64_t v65 = v63;
                *(_OWORD *)(v63 + 32) = v110;
                v62(v63 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL, 1, 1, v64);
                long long v66 = v110;
                *(_OWORD *)(v65 + OBJC_IVAR____TtC8coreidvd11UploadAsset_systemData) = v110;
                uint64_t v67 = v104;
                *(void *)(v65 + 16) = v111;
                *(void *)(v65 + 24) = v67;
                uint64_t v68 = *(void *)(v65 + 32);
                unint64_t v69 = *(void *)(v65 + 40);
                *(_OWORD *)(v65 + 32) = v66;
                sub_10000C5E0(v68, v69);
                *(unsigned char *)(v65 + 48) = v57;
                uint64_t v70 = v65 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL;
                swift_beginAccess();
                sub_10005D3BC(v61, v70);
                swift_endAccess();
                swift_retain();
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((v128 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v128 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                id v71 = v107;
                defaultLogger()();
                id v72 = v45;
                id v73 = Logger.logObject.getter();
                os_log_type_t v74 = static os_log_type_t.debug.getter();
                BOOL v75 = os_log_type_enabled(v73, v74);
                a1 = v118;
                uint64_t v25 = v125;
                if (v75)
                {
                  os_log_t v111 = v73;
                  uint64_t v76 = (_DWORD *)swift_slowAlloc();
                  v127[0] = swift_slowAlloc();
                  uint64_t v104 = v76;
                  *uint64_t v76 = v116;
                  id v77 = [v72 recordUUID];
                  if (v77)
                  {
                    char v78 = v77;
                    uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v81 = v80;
                  }
                  else
                  {
                    uint64_t v79 = 0;
                    unint64_t v81 = 0xE000000000000000;
                  }
                  uint64_t v101 = sub_100110D58(v79, v81, v127);
                  uint64_t v102 = (uint8_t *)v104;
                  *(void *)(v104 + 1) = v101;

                  swift_bridgeObjectRelease();
                  os_log_t v103 = v111;
                  _os_log_impl((void *)&_mh_execute_header, v111, v74, "Created the StoredUploadAsset with recordUUID %s", v102, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  swift_release();
                  (*v121)(v107, v122);
                  uint64_t v17 = v124;
                  (*v113)(v117, v124);
                  a1 = v118;
                  uint64_t v5 = v123;
                  goto LABEL_20;
                }
                swift_release();

                (*v121)(v71, v122);
                uint64_t v86 = *v113;
                uint64_t v87 = v117;
                uint64_t v17 = v124;
                goto LABEL_51;
              }
              defaultLogger()();
              Swift::String v98 = Logger.logObject.getter();
              os_log_type_t v99 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v98, v99))
              {
                uint64_t v100 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v100 = 0;
                _os_log_impl((void *)&_mh_execute_header, v98, v99, "recordUUID of the upload asset doesn't exist skipping the upload asset", v100, 2u);
                uint64_t v25 = v125;
                swift_slowDealloc();
              }

              (*v121)(v109, v122);
            }
            else
            {
LABEL_41:
              uint64_t v88 = v112;
              defaultLogger()();
              id v89 = v45;
              Swift::String v90 = Logger.logObject.getter();
              os_log_type_t v91 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v90, v91))
              {
                uint64_t v92 = swift_slowAlloc();
                os_log_t v111 = (os_log_t)swift_slowAlloc();
                v127[0] = (uint64_t)v111;
                *(_DWORD *)uint64_t v92 = v116;
                id v93 = [v89 recordUUID];
                if (v93)
                {
                  Swift::String v94 = v93;
                  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v97 = v96;
                }
                else
                {
                  uint64_t v95 = 0;
                  unint64_t v97 = 0xE000000000000000;
                }
                uint64_t v5 = v123;
                *(void *)(v92 + 4) = sub_100110D58(v95, v97, v127);

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v90, v91, "assetType of the upload asset with recordUUID %s doesn't exist skipping the upload asset", (uint8_t *)v92, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                (*v121)(v112, v122);
                uint64_t v17 = v124;
                (*v113)(v117, v124);
                a1 = v118;
                goto LABEL_20;
              }

              (*v121)(v88, v122);
            }
            uint64_t v86 = *v113;
            uint64_t v87 = v117;
LABEL_51:
            uint64_t v85 = v17;
            goto LABEL_40;
          }
          (*v113)(v49, v17);
        }
      }
      defaultLogger()();
      id v82 = v45;
      uint64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v38 = swift_slowAlloc();
        v127[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = v116;
        id v39 = [v82 recordUUID];
        if (v39)
        {
          uint64_t v40 = v39;
          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v43 = v42;
        }
        else
        {
          uint64_t v41 = 0;
          unint64_t v43 = 0xE000000000000000;
        }
        uint64_t v25 = v125;
        *(void *)(v38 + 4) = sub_100110D58(v41, v43, v127);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "assetURL of the upload asset with recordUUID %s doesn't exist skipping the upload asset", (uint8_t *)v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v5 = v123;
        (*v121)(v123, v122);
        a1 = v118;
        uint64_t v17 = v124;
        goto LABEL_20;
      }

      uint64_t v85 = v122;
      uint64_t v86 = *v121;
      uint64_t v87 = v5;
LABEL_40:
      v86(v87, v85);
LABEL_20:
      if (v25 == ++v36)
      {
        swift_bridgeObjectRelease();
        return (void *)v128;
      }
    }
  }
  __break(1u);
  return result;
}

void *sub_1001FB314(void **a1, void *a2)
{
  uint64_t v2 = a1;
  uint64_t v19 = &_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62) {
    goto LABEL_31;
  }
  for (uint64_t i = *(void *)(((unint64_t)a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = 0;
    uint64_t v16 = (unint64_t)v2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v17 = (unint64_t)v2 & 0xC000000000000001;
    uint64_t v15 = v2 + 4;
    while (1)
    {
      if (v17)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v6 = __OFADD__(v4++, 1);
        if (v6)
        {
LABEL_27:
          __break(1u);
          return v19;
        }
      }
      else
      {
        if (v4 >= *(void *)(v16 + 16))
        {
          __break(1u);
          goto LABEL_30;
        }
        uint64_t v5 = (uint64_t)v15[v4];
        swift_retain();
        BOOL v6 = __OFADD__(v4++, 1);
        if (v6) {
          goto LABEL_27;
        }
      }
      uint64_t v7 = a2[2];
      if (!v7) {
        goto LABEL_24;
      }
      uint64_t v2 = *(void ***)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      BOOL v9 = (void **)a2[4] == v2 && a2[5] == v8;
      if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_4:
      swift_release();
LABEL_5:
      if (v4 == i) {
        return v19;
      }
    }
    if (v7 == 1)
    {
LABEL_24:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t v2 = &v19;
      specialized ContiguousArray._endMutation()();
      goto LABEL_5;
    }
    uint64_t v10 = a2 + 7;
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t v12 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        break;
      }
      BOOL v13 = (void **)*(v10 - 1) == v2 && *v10 == v8;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_4;
      }
      v10 += 2;
      ++v11;
      if (v12 == v7) {
        goto LABEL_24;
      }
    }
LABEL_30:
    __break(1u);
LABEL_31:
    ;
  }
  return &_swiftEmptyArrayStorage;
}

id sub_1001FB4F8()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 initForReadingFromData:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

id sub_1001FB5B8(unsigned char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100007764(&qword_100720A68);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v48 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - v7;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPError.Code();
  uint64_t v40 = *(void *)(v13 - 8);
  uint64_t v41 = v13;
  __chkstk_darwin(v13);
  unint64_t v42 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = *(void *)&a1[OBJC_IVAR____TtC8coreidvd11UploadAsset_systemData + 8];
  if (v15 >> 60 == 15)
  {
    id v39 = v12;
    sub_100025C28(0, &qword_100727218);
    uint64_t v16 = v10;
    id v17 = objc_allocWithZone((Class)CKRecordID);
    swift_bridgeObjectRetain();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v19 = v17;
    uint64_t v10 = v16;
    uint64_t v2 = v1;
    id v20 = [v19 initWithRecordName:v18];

    v21._uint64_t countAndFlagsBits = 0x315F7465737341;
    v21._object = (void *)0xE700000000000000;
    Class isa = CKRecord.init(recordType:recordID:)(v21, (CKRecordID)v20).super.isa;
    goto LABEL_3;
  }
  uint64_t v27 = *(void *)&a1[OBJC_IVAR____TtC8coreidvd11UploadAsset_systemData];
  id v24 = objc_allocWithZone((Class)NSKeyedUnarchiver);
  sub_10002CEB0(v27, v15);
  id v28 = sub_1001FB4F8();
  if (v1)
  {
LABEL_9:
    sub_10000C5E0(v27, v15);
    return v24;
  }
  id v24 = v28;
  Class isa = (Class)[objc_allocWithZone((Class)CKRecord) initWithCoder:v28];
  if (!isa)
  {
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v42, enum case for DIPError.Code.invalidStoredData(_:), v41);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001FC0DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    goto LABEL_9;
  }
  id v39 = v12;

  sub_10000C5E0(v27, v15);
LABEL_3:
  uint64_t v22 = (uint64_t)&a1[OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL];
  swift_beginAccess();
  sub_100048D6C(v22, (uint64_t)v8, &qword_100720A68);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v23(v8, 1, v9) == 1)
  {
    sub_10000C6CC((uint64_t)v8, &qword_100720A68);
    uint64_t v8 = v48;
    id v24 = a1;
    sub_1001F2F44(v48);
    if (v2)
    {
LABEL_7:

      return v24;
    }
    int v25 = v23(v8, 1, v9);
    id v26 = v39;
    if (v25 == 1)
    {
      sub_10000C6CC((uint64_t)v8, &qword_100720A68);
      (*(void (**)(char *, void, uint64_t))(v40 + 104))(v42, enum case for DIPError.Code.unexpectedDaemonState(_:), v41);
      id v24 = (id)sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1001FC0DC((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      goto LABEL_7;
    }
  }
  else
  {
    id v26 = v39;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v26, v8, v9);
  id v29 = objc_allocWithZone((Class)CKAsset);
  URL._bridgeToObjectiveC()(v30);
  uint64_t v32 = v31;
  id v33 = [v29 initWithFileURL:v31];

  id v34 = v33;
  id v24 = isa;
  CKRecord.subscript.setter();
  if (a1[48] == 5)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v26, v9);
  }
  else
  {
    unint64_t v35 = 0xEF746E6F7246746ELL;
    uint64_t v36 = 0x656D75636F446469;
    switch(a1[48])
    {
      case 1:
        unint64_t v35 = 0xEE006B636142746ELL;
        break;
      case 2:
        unint64_t v35 = 0xE600000000000000;
        uint64_t v36 = 0x6569666C6573;
        break;
      case 3:
        unint64_t v35 = 0xED00006F65646956;
        uint64_t v36 = 0x7373656E6576696CLL;
        break;
      case 4:
        unint64_t v35 = 0xEE006F6564695679;
        uint64_t v36 = 0x7261696C69787561;
        break;
      default:
        break;
    }
    id v46 = &type metadata for String;
    uint64_t v47 = &protocol witness table for String;
    uint64_t v44 = v36;
    unint64_t v45 = v35;
    sub_100025C28(0, &qword_100727218);
    CKRecordKeyValueSetting.subscript.setter();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v26, v9);
  }
  return v24;
}

uint64_t sub_1001FBD78()
{
  uint64_t v1 = *(void *)(sub_100007764((uint64_t *)&unk_1007271F0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 104) & ~v2;
  uint64_t v13 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 48)) {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 24);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v8 = type metadata accessor for NWPath();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v3, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v3, v8);
  }
  uint64_t v10 = (v3 + v13 + v6) & ~v6;
  unint64_t v11 = ((v10 + v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 9;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v10, v4);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v11, v2 | v6 | 7);
}

uint64_t sub_1001FBF88(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(sub_100007764((uint64_t *)&unk_1007271F0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = v9 + *(void *)(v8 + 64);
  return sub_1001F8028(a1, a2, v2[2], (uint64_t)(v2 + 3), v2[8], v2[9], v2[10], v2[11], v2[12], (unint64_t)v2 + v6, (uint64_t)v2 + v9, *(uint64_t *)((char *)v2 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8)), *((unsigned char *)v2 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(uint64_t *)((char *)v2 + ((v10 + 23) & 0xFFFFFFFFFFFFFFF8)), *((unsigned char *)v2 + ((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001FC0DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FC124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UploadsCloudContainer.AnalyticsMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FC188(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UploadsCloudContainer.AnalyticsMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001FC1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UploadsCloudContainer.AnalyticsMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FC248(uint64_t a1)
{
  if (a1 < 0)
  {
    swift_errorRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    return swift_errorRetain();
  }
}

uint64_t sub_1001FC298(uint64_t a1)
{
  if ((~a1 & 0xF000000000000007) != 0) {
    return sub_1001FC2AC(a1);
  }
  return a1;
}

uint64_t sub_1001FC2AC(uint64_t a1)
{
  if (a1 < 0)
  {
    swift_errorRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_errorRelease();
  }
}

uint64_t sub_1001FC2FC(uint64_t a1)
{
  if ((~a1 & 0xF000000000000007) != 0) {
    return sub_1001FC248(a1);
  }
  return a1;
}

uint64_t sub_1001FC310@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1001F58DC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1001FC32C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001F582C(a1, *(void *)(v2 + 16), a2);
}

uint64_t *sub_1001FC348(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_1001FC430(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

unsigned char *sub_1001FC498(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_1001FC530(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_1001FC5C8(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_1001FC660(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_1001FC6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FC70C);
}

uint64_t sub_1001FC70C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 251)
  {
    unsigned int v4 = *a1;
    if (v4 >= 5) {
      return v4 - 4;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = &a1[*(int *)(a3 + 20)];
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001FC7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FC7C8);
}

unsigned char *sub_1001FC7C8(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 251)
  {
    *uint64_t result = a2 + 4;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001FC86C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001FC910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[17] = a7;
  v8[18] = v7;
  v8[15] = a5;
  v8[16] = a6;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  uint64_t v9 = type metadata accessor for Logger();
  v8[19] = v9;
  v8[20] = *(void *)(v9 - 8);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  v8[23] = swift_task_alloc();
  uint64_t v10 = sub_100007764(&qword_1007273A8);
  v8[24] = v10;
  v8[25] = *(void *)(v10 - 8);
  v8[26] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  v8[27] = v11;
  v8[28] = *(void *)(v11 - 8);
  v8[29] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for DIPError.Code();
  v8[30] = v12;
  v8[31] = *(void *)(v12 - 8);
  v8[32] = swift_task_alloc();
  return _swift_task_switch(sub_1001FCB10, 0, 0);
}

uint64_t sub_1001FCB10()
{
  id v1 = [self standardUserDefaults];
  v2._uint64_t countAndFlagsBits = 0xD000000000000027;
  v2._object = (void *)0x80000001006413F0;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    (*((void (**)(id, void, id))v0[15].super_class + 13))(v0[16].receiver, enum case for DIPError.Code.internalError(_:), v0[15].receiver);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    super_class = (uint64_t (*)(void))v0->super_class;
    return super_class();
  }
  uint64_t v4 = (uint64_t)v0[7].super_class;
  if (!v4)
  {
    (*((void (**)(id, void, id))v0[15].super_class + 13))(v0[16].receiver, enum case for DIPError.Code.workflowIdDoesNotExist(_:), v0[15].receiver);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v27 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v28 = (*(unsigned __int8 *)(*(void *)v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v27 + 80);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_100610730;
    unint64_t v30 = v29 + v28;
    uint64_t v31 = (void *)(v29 + v28 + v27[14]);
    uint64_t v32 = enum case for DIPError.PropertyKey.inoProviderID(_:);
    uint64_t v33 = type metadata accessor for DIPError.PropertyKey();
    unsigned int v50 = v32;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v30, v32, v33);
    uint64_t v31[3] = &type metadata for String;
    void *v31 = 0x61746E6567616DLL;
    v31[1] = 0xE700000000000000;
    sub_10015C504(v29);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    id v49 = 0;
LABEL_13:
    Class v46 = v0[15].super_class;
    id receiver = v0[16].receiver;
    id v48 = v0[15].receiver;
    Class v34 = v0[7].super_class;
    sub_100007764((uint64_t *)&unk_1007225C0);
    unint64_t v35 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v36 = *(void *)(*(void *)v35 + 72);
    unint64_t v37 = (*(unsigned __int8 *)(*(void *)v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v35 + 80);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_100611020;
    unint64_t v39 = v38 + v37;
    uint64_t v40 = (void *)(v38 + v37 + v35[14]);
    uint64_t v41 = type metadata accessor for DIPError.PropertyKey();
    unint64_t v42 = *(void (**)(unint64_t, void, uint64_t))(*(void *)(v41 - 8) + 104);
    v42(v39, v50, v41);
    uint64_t v40[3] = &type metadata for String;
    *uint64_t v40 = 0x61746E6567616DLL;
    v40[1] = 0xE700000000000000;
    unint64_t v43 = (void *)(v39 + v36 + v35[14]);
    v42(v39 + v36, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v41);
    v43[3] = &type metadata for String;
    unint64_t v44 = 0xE000000000000000;
    if (v34) {
      unint64_t v44 = (unint64_t)v34;
    }
    void *v43 = v49;
    v43[1] = v44;
    swift_bridgeObjectRetain();
    sub_10015C504(v38);
    (*((void (**)(id, void, id))v46 + 13))(receiver, enum case for DIPError.Code.internalError(_:), v48);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    swift_errorRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    goto LABEL_16;
  }
  uint64_t v5 = (uint64_t)v0[8].super_class;
  if (!v5)
  {
    (*((void (**)(id, void, id))v0[15].super_class + 13))(v0[16].receiver, enum case for DIPError.Code.proofingSessionIDUnavailable(_:), v0[15].receiver);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    id v49 = v0[7].receiver;
    unsigned int v50 = enum case for DIPError.PropertyKey.inoProviderID(_:);
    goto LABEL_13;
  }
  uint64_t v7 = (void (**)(Class, Class))v0[14].receiver;
  Class v6 = v0[14].super_class;
  Class v8 = v0[13].super_class;
  uint64_t v9 = v0[9].receiver;
  id v10 = v0[8].receiver;
  uint64_t v11 = (objc_class *)type metadata accessor for IdentitySelfHealer();
  uint64_t v12 = (char *)objc_allocWithZone(v11);
  uint64_t v13 = &v12[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
  *(void *)uint64_t v13 = v10;
  *((void *)v13 + 1) = v5;
  v0[4].id receiver = v12;
  v0[4].super_class = v11;
  swift_bridgeObjectRetain_n();
  id v14 = [super init];
  unint64_t v15 = (void *)v9[2];
  v9[2] = v14;

  uint64_t v16 = (void *)v9[2];
  if (v16) {
    id v17 = &off_100708438;
  }
  else {
    id v17 = 0;
  }
  id v18 = v16;
  UUID.init()();
  UUID.uuidString.getter();
  v7[1](v6, v8);
  v0[16].super_class = (Class)sub_1002D3994((uint64_t)v16, (uint64_t)v17, 0, 0);
  swift_bridgeObjectRelease();

  uint64_t v19 = (void *)swift_task_alloc();
  v0[17].id receiver = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_1001FD360;
  uint64_t v20 = (uint64_t)v0[13].receiver;
  uint64_t v21 = (uint64_t)v0[8].receiver;
  uint64_t v22 = (uint64_t)v0[6].super_class;
  uint64_t v23 = (uint64_t)v0[7].receiver;
  uint64_t v25 = (uint64_t)v0[5].super_class;
  uint64_t v24 = (uint64_t)v0[6].receiver;
  return sub_1001FE360(v20, v24, v22, v23, v4, v25, v21, v5);
}

uint64_t sub_1001FD360()
{
  Swift::String v2 = (void *)*v1;
  v2[35] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1001FDC68, 0, 0);
  }
  else
  {
    Swift::Bool v3 = (void *)swift_task_alloc();
    v2[36] = v3;
    *Swift::Bool v3 = v2;
    v3[1] = sub_1001FD4DC;
    uint64_t v4 = v2[26];
    return sub_1002C41B0(v4);
  }
}

uint64_t sub_1001FD4DC()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    Swift::String v2 = sub_1001FDF70;
  }
  else
  {
    Swift::String v2 = sub_1001FD5F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001FD5F8()
{
  uint64_t v47 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    Swift::Bool v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::Bool v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Action Notification successfully acknowledged by the server", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 160);

  Class v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v9._object = (void *)0x8000000100641580;
  v10._uint64_t countAndFlagsBits = 0x3536626261333430;
  v10._object = (void *)0xE800000000000000;
  v9._uint64_t countAndFlagsBits = 0xD000000000000018;
  logMilestone(tag:description:)(v10, v9);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  unint64_t v45 = v8;
  if (v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void **)(v0 + 264);
    uint64_t v14 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 208);
    uint64_t v15 = *(void *)(v0 + 192);
    uint64_t v16 = *(void *)(v0 + 168);
    uint64_t v17 = *(void *)(v0 + 152);
    defaultLogger()();
    DIPRecordError(_:message:log:)();

    swift_errorRelease();
    v45(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    goto LABEL_6;
  }
  sub_1001002FC(*(void *)(v0 + 128), *(void *)(v0 + 136));
  unint64_t v20 = v11;
  if (!v11)
  {
LABEL_22:
    defaultLogger()();
    swift_bridgeObjectRetain();
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void *)(v0 + 200);
    uint64_t v34 = *(void *)(v0 + 208);
    uint64_t v35 = *(void *)(v0 + 192);
    uint64_t v36 = *(void *)(v0 + 176);
    uint64_t v44 = *(void *)(v0 + 152);
    unint64_t v37 = *(void *)(v0 + 136);
    if (v32)
    {
      uint64_t v43 = *(void *)(v0 + 208);
      uint64_t v38 = *(void *)(v0 + 128);
      uint64_t v41 = *(void **)(v0 + 264);
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)unint64_t v39 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 80) = sub_100110D58(v38, v37, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "no proofing session exists with proofingSessionID: %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      v45(v36, v44);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v43, v35);
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease_n();
      v8(v36, v44);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    }
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v21)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    sub_1000FFAB4();
    uint64_t v40 = *(void **)(v0 + 264);
    (*(void (**)(void, void))(*(void *)(v0 + 200) + 8))(*(void *)(v0 + 208), *(void *)(v0 + 192));

    swift_release();
    goto LABEL_6;
  }
LABEL_12:
  if (v21 >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v42 = v21;
    while (1)
    {
      if ((v20 & 0xC000000000000001) != 0) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v23 = *(id *)(v20 + 8 * v22 + 32);
      }
      uint64_t v24 = v23;
      id v25 = [v23 managedObjectContext];
      if (v25)
      {
        id v26 = v25;
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = v24;
        *(unsigned char *)(v27 + 24) = 1;
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = sub_1001FF078;
        *(void *)(v28 + 24) = v27;
        *(void *)(v0 + 48) = sub_1000E4EA0;
        *(void *)(v0 + 56) = v28;
        *(void *)(v0 + 16) = _NSConcreteStackBlock;
        *(void *)(v0 + 24) = 1107296256;
        *(void *)(v0 + 32) = sub_100032314;
        *(void *)(v0 + 40) = &unk_1006FAC40;
        uint64_t v29 = _Block_copy((const void *)(v0 + 16));
        Class v8 = v24;
        swift_retain();
        swift_release();
        [v26 performBlockAndWait:v29];

        _Block_release(v29);
        LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        swift_release();

        if (v29)
        {
          __break(1u);
          goto LABEL_22;
        }
      }
      else
      {
      }
      if (v42 == ++v22) {
        goto LABEL_26;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001FDC68()
{
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v18 = *(void *)(v0 + 240);
  unint64_t v14 = *(void *)(v0 + 120);
  uint64_t v15 = *(void *)(v0 + 112);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v1 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100611020;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = (void *)(v5 + v1[14]);
  uint64_t v7 = enum case for DIPError.PropertyKey.inoProviderID(_:);
  uint64_t v8 = type metadata accessor for DIPError.PropertyKey();
  Swift::String v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v5, v7, v8);
  v6[3] = &type metadata for String;
  *uint64_t v6 = 0x61746E6567616DLL;
  v6[1] = 0xE700000000000000;
  Swift::String v10 = (void *)(v5 + v2 + v1[14]);
  v9();
  v10[3] = &type metadata for String;
  unint64_t v11 = 0xE000000000000000;
  if (v14) {
    unint64_t v11 = v14;
  }
  *Swift::String v10 = v15;
  v10[1] = v11;
  swift_bridgeObjectRetain();
  sub_10015C504(v4);
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v17, enum case for DIPError.Code.internalError(_:), v18);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1001FDF70()
{
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[24];
  unsigned int v23 = enum case for DIPError.Code.internalError(_:);
  (*(void (**)(void))(v0[31] + 104))(v0[32]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();

  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  uint64_t v20 = v0[31];
  uint64_t v21 = v0[32];
  uint64_t v22 = v0[30];
  unint64_t v18 = v0[15];
  uint64_t v19 = v0[14];
  sub_100007764((uint64_t *)&unk_1007225C0);
  unint64_t v5 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v6 = *(void *)(*(void *)v5 + 72);
  unint64_t v7 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100611020;
  unint64_t v9 = v8 + v7;
  Swift::String v10 = (void *)(v9 + v5[14]);
  uint64_t v11 = enum case for DIPError.PropertyKey.inoProviderID(_:);
  uint64_t v12 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);
  v13(v9, v11, v12);
  v10[3] = &type metadata for String;
  *Swift::String v10 = 0x61746E6567616DLL;
  v10[1] = 0xE700000000000000;
  unint64_t v14 = (void *)(v9 + v6 + v5[14]);
  v13(v9 + v6, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v12);
  v14[3] = &type metadata for String;
  unint64_t v15 = 0xE000000000000000;
  if (v18) {
    unint64_t v15 = v18;
  }
  *unint64_t v14 = v19;
  v14[1] = v15;
  swift_bridgeObjectRetain();
  sub_10015C504(v8);
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v21, v23, v22);
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1001FE360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[41] = a8;
  v8[42] = v14;
  v8[39] = a6;
  v8[40] = a7;
  v8[37] = a4;
  v8[38] = a5;
  v8[35] = a2;
  v8[36] = a3;
  v8[34] = a1;
  uint64_t v9 = type metadata accessor for DeviceInformationProvider();
  v8[43] = v9;
  v8[44] = *(void *)(v9 - 8);
  v8[45] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v8[46] = v10;
  v8[47] = *(void *)(v10 - 8);
  v8[48] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for KeystoreKeyType();
  v8[49] = v11;
  v8[50] = *(void *)(v11 - 8);
  v8[51] = swift_task_alloc();
  return _swift_task_switch(sub_1001FE4F0, 0, 0);
}

uint64_t sub_1001FE4F0()
{
  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  uint64_t v3 = v0[49];
  type metadata accessor for DIPKeystoreManager();
  uint64_t inited = swift_initStackObject();
  v0[52] = inited;
  *(void *)(inited + 16) = sub_10015CDA0((uint64_t)&_swiftEmptyArrayStorage);
  *(unsigned char *)(inited + 24) = 2;
  sub_100007764(&qword_100722590);
  uint64_t v5 = type metadata accessor for HardwareAttestationType();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  v0[53] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_100610730;
  (*(void (**)(unint64_t, void, uint64_t))(v6 + 104))(v8 + v7, enum case for HardwareAttestationType.SEP(_:), v5);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for KeystoreKeyType.temporary(_:), v3);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[54] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1001FE6DC;
  uint64_t v10 = v0[51];
  return sub_10012571C((uint64_t)(v0 + 19), 0x61746E6567616DLL, 0xE700000000000000, v8, v10);
}

uint64_t sub_1001FE6DC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[50] + 8))(v2[51], v2[49]);
  swift_bridgeObjectRelease();
  swift_release();
  if (v0) {
    uint64_t v3 = sub_1001FEDDC;
  }
  else {
    uint64_t v3 = sub_1001FE884;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001FE884()
{
  uint64_t v35 = v0 + 152;
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v30 = *(void *)(v0 + 344);
  uint64_t v31 = *(void *)(v0 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v6 = UUID.uuidString.getter();
  uint64_t v33 = v7;
  uint64_t v34 = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v8 = *(void *)(v31 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  uint64_t v32 = *(void *)(v31 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  type metadata accessor for DIPAccountManager();
  swift_bridgeObjectRetain();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728((void *)(v0 + 200), *(void *)(v0 + 224));
  uint64_t v9 = dispatch thunk of DIPAccountManagerProtocol.appleAuthHeader(_:)();
  uint64_t v28 = v10;
  uint64_t v29 = v9;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 200);
  DeviceInformationProvider.init()();
  uint64_t v11 = DeviceInformationProvider.uniqueDeviceID.getter();
  uint64_t v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v30);
  if (qword_10071F5F8 != -1) {
    swift_once();
  }
  uint64_t v14 = *(void *)(v0 + 320);
  uint64_t v15 = *(void *)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 296);
  long long v27 = *(_OWORD *)(v0 + 280);
  uint64_t v17 = qword_1007608B8;
  uint64_t v18 = unk_1007608C0;
  swift_bridgeObjectRetain();
  long long v26 = *(_OWORD *)(v0 + 304);
  sub_1000AAC30(0, 0);
  *(void *)(v0 + 16) = v32;
  *(void *)(v0 + 24) = v8;
  *(void *)(v0 + 32) = v34;
  *(void *)(v0 + 40) = v33;
  *(void *)(v0 + 48) = v29;
  *(void *)(v0 + 56) = v28;
  *(void *)(v0 + 64) = v11;
  *(void *)(v0 + 72) = v13;
  *(void *)(v0 + 80) = v17;
  *(void *)(v0 + 88) = v18;
  *(_OWORD *)(v0 + 96) = v27;
  *(void *)(v0 + 112) = v16;
  *(_OWORD *)(v0 + 120) = v26;
  *(void *)(v0 + 136) = v14;
  *(void *)(v0 + 144) = v15;
  sub_1001FEF44();
  sub_1001FEF98();
  JWSSignedJSON.init(payload:)();
  v19._rawValue = *(void **)(v0 + 192);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_100007764(&qword_1007273A8);
  *(void *)(v0 + 448) = v20;
  JWSSignedJSON.setCertificateChain(_:)(v19);
  uint64_t v21 = *(void *)(v0 + 272);
  swift_bridgeObjectRelease();
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v21, v20);
    sub_1001FEFEC(v35);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unsigned int v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  else
  {
    JWSSignedJSON.setKid(_:)();
    id v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v25;
    *id v25 = v0;
    v25[1] = sub_1001FEC38;
    return JWSSignedJSON.sign(_:)(v35, v20);
  }
}

uint64_t sub_1001FEC38()
{
  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001FEE60;
  }
  else {
    uint64_t v2 = sub_1001FED4C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001FED4C()
{
  sub_1001FEFEC(v0 + 152);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001FEDDC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001FEE60()
{
  (*(void (**)(void))(*(void *)(v0[56] - 8) + 8))(v0[34]);
  sub_1001FEFEC((uint64_t)(v0 + 19));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t type metadata accessor for IdentityProofingActionNotificationFlow()
{
  return self;
}

unint64_t sub_1001FEF44()
{
  unint64_t result = qword_100727398;
  if (!qword_100727398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100727398);
  }
  return result;
}

unint64_t sub_1001FEF98()
{
  unint64_t result = qword_1007273A0;
  if (!qword_1007273A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007273A0);
  }
  return result;
}

uint64_t sub_1001FEFEC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001FF040()
{
  return _swift_deallocObject(v0, 25, 7);
}

id sub_1001FF078()
{
  return sub_100034BCC(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1001FF084()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001FF094(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001FF0A4()
{
  return swift_release();
}

uint64_t type metadata accessor for PassManager()
{
  return self;
}

void sub_1001FF0D0(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_100025C28(0, &qword_100727470);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_100025C28(0, &qword_100727470);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  uint64_t v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

id sub_1001FF348(uint64_t a1, unint64_t a2)
{
  unint64_t v102 = a2;
  uint64_t v100 = a1;
  uint64_t v91 = type metadata accessor for Logger();
  uint64_t v90 = *(void *)(v91 - 8);
  uint64_t v2 = __chkstk_darwin(v91);
  uint64_t v4 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  unint64_t v6 = (char **)((char *)&v88 - v5);
  id v92 = [objc_allocWithZone((Class)PKPassLibrary) init];
  id v7 = [v92 passesOfType:1];
  sub_100025C28(0, &qword_100727458);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
LABEL_91:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_3;
    }
LABEL_92:
    swift_bridgeObjectRelease();
    defaultLogger()();
    unint64_t v84 = v102;
    swift_bridgeObjectRetain_n();
    uint64_t v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v85, v86))
    {
      uint64_t v87 = (uint8_t *)swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v87 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v114 = sub_100110D58(v100, v84, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "Did not find pass for credential %s", v87, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v90 + 8))(v4, v91);
    return 0;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9) {
    goto LABEL_92;
  }
LABEL_3:
  unint64_t v10 = 0;
  unint64_t v11 = v8 & 0xC000000000000001;
  uint64_t v97 = v8 & 0xFFFFFFFFFFFFFF8;
  unint64_t v96 = v8 + 32;
  id v12 = &selRef_facVersion;
  uint64_t v104 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v109 = (uint64_t)v4;
  id v89 = v6;
  unint64_t v95 = v8;
  uint64_t v94 = v9;
  unint64_t v93 = v8 & 0xC000000000000001;
  while (1)
  {
    if (v11)
    {
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v10 >= *(void *)(v97 + 16)) {
        goto LABEL_90;
      }
      id v14 = *(id *)(v96 + 8 * v10);
    }
    char v13 = v14;
    if (__OFADD__(v10++, 1))
    {
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    self;
    uint64_t v16 = swift_dynamicCastObjCClass();
    if (v16) {
      break;
    }
LABEL_6:

    if (v10 == v9) {
      goto LABEL_92;
    }
  }
  uint64_t v17 = (void *)v16;
  os_log_t v103 = v13;
  id v18 = v13;
  if (![v17 isIdentityPass])
  {
LABEL_5:

    char v13 = v103;
    goto LABEL_6;
  }
  id v101 = v17;
  id result = [v17 devicePaymentApplications];
  if (result)
  {
    uint64_t v20 = result;
    unint64_t v98 = v10;
    unint64_t v8 = (unint64_t)PKPaymentApplication_ptr;
    uint64_t v21 = sub_100025C28(0, &qword_100727460);
    unint64_t v6 = (char **)sub_1001FFFA4(&qword_100727468, &qword_100727460);
    uint64_t v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v105 = v21;
    if ((v22 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t v22 = v115[1];
      uint64_t v112 = v115[2];
      uint64_t v23 = v115[3];
      uint64_t v24 = v115[4];
      unint64_t v25 = v115[5];
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v26 = -1 << *(unsigned char *)(v22 + 32);
      uint64_t v27 = *(void *)(v22 + 56);
      uint64_t v112 = v22 + 56;
      uint64_t v28 = ~v26;
      uint64_t v29 = -v26;
      if (v29 < 64) {
        uint64_t v30 = ~(-1 << v29);
      }
      else {
        uint64_t v30 = -1;
      }
      unint64_t v25 = v30 & v27;
      uint64_t v23 = v28;
    }
    uint64_t v106 = v22 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v99 = v23;
    uint64_t v110 = (unint64_t)(v23 + 64) >> 6;
    id v111 = v18;
    while (1)
    {
LABEL_23:
      if (v22 < 0)
      {
        unint64_t v6 = (char **)v106;
        uint64_t v33 = __CocoaSet.Iterator.next()();
        if (!v33) {
          goto LABEL_4;
        }
        unint64_t v8 = v33;
        uint64_t v114 = v33;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v34 = (id)v115[0];
        swift_unknownObjectRelease();
        uint64_t v32 = v24;
        unint64_t v6 = (char **)v25;
        if (!v34) {
          goto LABEL_4;
        }
      }
      else
      {
        if (v25)
        {
          unint64_t v6 = (char **)((v25 - 1) & v25);
          unint64_t v31 = __clz(__rbit64(v25)) | (v24 << 6);
          uint64_t v32 = v24;
        }
        else
        {
          uint64_t v35 = v24 + 1;
          if (__OFADD__(v24, 1))
          {
            __break(1u);
            goto LABEL_89;
          }
          if (v35 >= v110) {
            goto LABEL_4;
          }
          unint64_t v36 = *(void *)(v112 + 8 * v35);
          uint64_t v32 = v24 + 1;
          if (!v36)
          {
            uint64_t v32 = v24 + 2;
            if (v24 + 2 >= v110) {
              goto LABEL_4;
            }
            unint64_t v36 = *(void *)(v112 + 8 * v32);
            if (!v36)
            {
              uint64_t v32 = v24 + 3;
              if (v24 + 3 >= v110) {
                goto LABEL_4;
              }
              unint64_t v36 = *(void *)(v112 + 8 * v32);
              if (!v36)
              {
                uint64_t v32 = v24 + 4;
                if (v24 + 4 >= v110) {
                  goto LABEL_4;
                }
                unint64_t v36 = *(void *)(v112 + 8 * v32);
                if (!v36)
                {
                  uint64_t v37 = v24 + 5;
                  while (v110 != v37)
                  {
                    unint64_t v36 = *(void *)(v112 + 8 * v37++);
                    if (v36)
                    {
                      uint64_t v32 = v37 - 1;
                      goto LABEL_42;
                    }
                  }
LABEL_4:
                  sub_100130AE4();
                  unint64_t v8 = v95;
                  uint64_t v9 = v94;
                  unint64_t v10 = v98;
                  unint64_t v11 = v93;
                  goto LABEL_5;
                }
              }
            }
          }
LABEL_42:
          unint64_t v6 = (char **)((v36 - 1) & v36);
          unint64_t v31 = __clz(__rbit64(v36)) + (v32 << 6);
        }
        id v34 = *(id *)(*(void *)(v22 + 48) + 8 * v31);
        if (!v34) {
          goto LABEL_4;
        }
      }
      if ([v34 v12[166]] == (id)1) {
        break;
      }

      uint64_t v24 = v32;
      unint64_t v25 = (unint64_t)v6;
    }
    Swift::String v113 = (char *)v6;
    unint64_t v6 = v12;
    unint64_t v108 = v25;
    id result = [v34 subcredentials];
    if (!result)
    {
      __break(1u);
      goto LABEL_98;
    }
    unint64_t v8 = (unint64_t)result;
    sub_100025C28(0, &qword_100727470);
    sub_1001FFFA4((unint64_t *)&qword_100727478, &qword_100727470);
    uint64_t v38 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v39 = v38 & 0xC000000000000001;
    uint64_t v107 = v24;
    if ((v38 & 0xC000000000000001) != 0)
    {
      uint64_t v40 = __CocoaSet.startIndex.getter();
      uint64_t v42 = v41;
      __CocoaSet.endIndex.getter();
      char v43 = static __CocoaSet.Index.== infix(_:_:)();
      swift_bridgeObjectRelease();
      unint64_t v8 = v40;
      if (v43)
      {
LABEL_76:
        sub_10011460C(v40, v42, v39 != 0);

        swift_bridgeObjectRelease();
LABEL_77:
        uint64_t v24 = v32;
        unint64_t v25 = (unint64_t)v113;
        uint64_t v4 = (char *)v109;
        id v18 = v111;
        id v12 = v6;
        goto LABEL_23;
      }
LABEL_52:
      sub_1001FF0D0(v8, v42, v39 != 0, v38);
      uint64_t v48 = v47;
      sub_10011460C(v8, v42, v39 != 0);
      swift_bridgeObjectRelease();
      id v49 = [v48 identifier];

      if (v49)
      {
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v8 = v51;

        BOOL v52 = v50 == v100 && v8 == v102;
        uint64_t v4 = (char *)v109;
        id v12 = v6;
        if (v52)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v53 & 1) == 0)
          {
LABEL_62:

            uint64_t v24 = v32;
            unint64_t v25 = (unint64_t)v113;
            id v18 = v111;
            goto LABEL_23;
          }
        }
        id v54 = [v101 uniqueID];
        if (v54)
        {
          id v59 = v54;
          uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v62 = v61;
          swift_bridgeObjectRelease();

          uint64_t v63 = v89;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          unint64_t v64 = v102;
          swift_bridgeObjectRetain_n();
          uint64_t v65 = Logger.logObject.getter();
          os_log_type_t v66 = static os_log_type_t.debug.getter();
          BOOL v67 = os_log_type_enabled(v65, v66);
          Swift::String v113 = (char *)v60;
          uint64_t v110 = v62;
          if (v67)
          {
            uint64_t v68 = swift_slowAlloc();
            uint64_t v109 = swift_slowAlloc();
            v115[0] = v109;
            *(_DWORD *)uint64_t v68 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v114 = sub_100110D58(v60, v62, v115);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v68 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v114 = sub_100110D58(v100, v64, v115);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v65, v66, "Found pass %s for credential %s", (uint8_t *)v68, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char **, uint64_t))(v90 + 8))(v63, v91);
          id v69 = v101;
          id v70 = [v101 localizedDescription];
          uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v73 = v72;

          unint64_t v74 = (unint64_t)[v69 identityType];
          if (v74 >= 4) {
            char v75 = 2;
          }
          else {
            char v75 = 0x3000102u >> (8 * v74);
          }
          id v76 = [v69 issuerAdministrativeAreaCode];
          if (v76)
          {
            id v77 = v76;
            uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v80 = v79;
          }
          else
          {
            uint64_t v78 = 0;
            uint64_t v80 = 0;
          }
          type metadata accessor for Pass();
          swift_allocObject();
          sub_10017641C((uint64_t)v113, v110, v34, v71, v73, v75, v78, v80);
          uint64_t v82 = v81;
          id v83 = v111;

          sub_100130AE4();
          return (id)v82;
        }
        goto LABEL_62;
      }

      goto LABEL_77;
    }
    char v44 = *(unsigned char *)(v38 + 32);
    uint64_t v40 = 1 << v44;
    unint64_t v45 = *(void *)(v38 + 56);
    if (v45)
    {
      uint64_t v46 = 0;
      goto LABEL_51;
    }
    unsigned int v55 = v44 & 0x3F;
    if (v55 >= 7)
    {
      unint64_t v45 = *(void *)(v38 + 64);
      if (v45)
      {
        uint64_t v46 = 1;
        goto LABEL_51;
      }
      if (v55 >= 8)
      {
        unint64_t v45 = *(void *)(v38 + 72);
        if (v45)
        {
          uint64_t v46 = 2;
LABEL_51:
          unint64_t v8 = __clz(__rbit64(v45)) + (v46 << 6);
          uint64_t v42 = *(unsigned int *)(v38 + 36);
          if (v8 == v40) {
            goto LABEL_76;
          }
          goto LABEL_52;
        }
        uint64_t v56 = 0;
        unint64_t v57 = (unint64_t)(v40 + 63) >> 6;
        if (v57 <= 3) {
          unint64_t v57 = 3;
        }
        unint64_t v58 = v57 - 3;
        while (v58 != v56)
        {
          unint64_t v45 = *(void *)(v38 + 80 + 8 * v56++);
          if (v45)
          {
            uint64_t v46 = v56 + 2;
            goto LABEL_51;
          }
        }
      }
    }
    uint64_t v42 = *(unsigned int *)(v38 + 36);
    goto LABEL_76;
  }
LABEL_98:
  __break(1u);
  return result;
}

uint64_t sub_1001FFFA4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100025C28(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FFFF4@<X0>(uint64_t a1@<X1>, NSObject *a2@<X8>)
{
  os_log_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AugmentedProfile(0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Data.init(base64Encoded:options:)();
  if (v14 >> 60 == 15)
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.assessmentProfileDecodingFailed(_:), v2);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  else
  {
    unint64_t v16 = v14;
    uint64_t v37 = v3;
    unint64_t v31 = v8;
    uint64_t v32 = v12;
    uint64_t v33 = v10;
    uint64_t v34 = v9;
    uint64_t v17 = v13;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_100209B18(&qword_1007275F8, (void (*)(uint64_t))type metadata accessor for AugmentedProfile);
    id v18 = v35;
    os_log_t v19 = v36;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v18)
    {
      swift_release();
      (*(void (**)(char *, void, uint64_t))(v37 + 104))(v5, enum case for DIPError.Code.invalidAssessmentProfile(_:), v2);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      return sub_10000C5E0(v17, v16);
    }
    else
    {
      uint64_t v37 = v17;
      swift_release();
      uint64_t v20 = v32;
      defaultLogger()();
      uint64_t v21 = (uint64_t)v31;
      sub_100208B68((uint64_t)v19, (uint64_t)v31);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        os_log_t v36 = v22;
        unint64_t v25 = (uint8_t *)v24;
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)unint64_t v25 = 136446210;
        uint64_t v39 = v26;
        uint64_t v35 = v25 + 4;
        uint64_t v27 = (uint64_t *)(v21 + *(int *)(v6 + 28));
        uint64_t v28 = *v27;
        unint64_t v29 = v27[1];
        swift_bridgeObjectRetain();
        uint64_t v38 = sub_100110D58(v28, v29, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100208BCC(v21);
        os_log_t v30 = v36;
        _os_log_impl((void *)&_mh_execute_header, v36, v23, "Decoded profile %{public}s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_10000C5E0(v37, v16);
      }
      else
      {
        sub_100208BCC(v21);
        sub_10000C5E0(v37, v16);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v20, v34);
    }
  }
}

uint64_t sub_1002005F8()
{
  type metadata accessor for DIPODNHelper();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100207474();
  qword_100760320 = v0;
  return result;
}

uint64_t sub_100200634()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = *(void *)(v0 + 16);
  aBlock[4] = sub_1002008B4;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FAFD8;
  uint64_t v9 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_100209B18((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1002008B4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Waking up odn", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v7 = [objc_allocWithZone((Class)OZRXp7MLSzffIeLD) init];
  id v8 = [objc_allocWithZone((Class)cSPXWY2zzg2zwzaR) initWithQAy7FB3BSYJUwsIc:0 Zwvxi3fDtAHqlF0d:0 KufCqgU8RstLzBzT:1 BGiN5h2SLMRO6B9R:0 Jf7L4ypvXegQqMcE:0 zeXRCfLmM5cdkEtz:0];
  aBlock[4] = nullsub_7;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100200ACC;
  aBlock[3] = &unk_1006FB000;
  uint64_t v9 = _Block_copy(aBlock);
  [v7 MypqGKKWznx4xnYa:v8 l8OCYbP9LFIvnTwG:0 ygOPXTiKN0J02x0j:v9];
  _Block_release(v9);
}

uint64_t sub_100200ACC(uint64_t a1, void *a2, void *a3, void *a4, unsigned int a5, void *a6)
{
  uint64_t v9 = a2;
  uint64_t v10 = *(void (**)(void *, unint64_t, void *, unint64_t, void *, unint64_t, void, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v11 = v9;
    uint64_t v9 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v16 = 0xF000000000000000;
    if (a4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  swift_retain();
  unint64_t v13 = 0xF000000000000000;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  id v14 = a3;
  a3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  if (a4)
  {
LABEL_4:
    id v17 = a4;
    a4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    goto LABEL_8;
  }
LABEL_7:
  unint64_t v19 = 0xF000000000000000;
LABEL_8:
  id v20 = a6;
  v10(v9, v13, a3, v16, a4, v19, a5, a6);

  sub_10000C5E0((uint64_t)a4, v19);
  sub_10000C5E0((uint64_t)a3, v16);
  sub_10000C5E0((uint64_t)v9, v13);

  return swift_release();
}

uint64_t sub_100200C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, long long *a9@<X8>, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v13 = v12;
  uint64_t v57 = a8;
  uint64_t v58 = a4;
  uint64_t v55 = a7;
  uint64_t v56 = a3;
  uint64_t v59 = a5;
  uint64_t v60 = a6;
  uint64_t v54 = a2;
  uint64_t v53 = a1;
  unint64_t v51 = a9;
  uint64_t v50 = type metadata accessor for Logger();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v48 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v62 = xmmword_100610EF0;
  long long v63 = xmmword_100615040;
  long long v64 = xmmword_100610EF0;
  int v65 = 0;
  unint64_t v66 = 0xBFF0000000000000;
  unint64_t v15 = *(void **)(v12 + 32);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v13;
  *(void *)(v16 + 24) = a10;
  *(void *)(v16 + 32) = a11;
  int v52 = a12;
  *(unsigned char *)(v16 + 40) = a12;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_100209CFC;
  *(void *)(v17 + 24) = v16;
  aBlock[4] = sub_1000E4EA0;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100032314;
  aBlock[3] = &unk_1006FADF8;
  unint64_t v18 = _Block_copy(aBlock);
  unint64_t v19 = v15;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v19, v18);

  _Block_release(v18);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v18)
  {
    __break(1u);
  }
  else
  {
    __chkstk_darwin(result);
    *(&v47 - 18) = v13;
    *(&v47 - 17) = a10;
    *(&v47 - 16) = a11;
    *((unsigned char *)&v47 - 120) = v52;
    uint64_t v21 = v57;
    *(&v47 - 14) = v55;
    *(&v47 - 13) = v21;
    uint64_t v22 = v54;
    *(&v47 - 12) = v53;
    *(&v47 - 11) = v22;
    uint64_t v23 = v58;
    *(&v47 - 10) = v56;
    *(&v47 - 9) = v23;
    uint64_t v24 = v60;
    *(&v47 - 8) = v59;
    *(&v47 - 7) = v24;
    *(&v47 - 6) = v25;
    *((unsigned char *)&v47 - 40) = v26 & 1;
    *(&v47 - 4) = v28;
    *(&v47 - 3) = v27;
    unint64_t v45 = &v62;
    uint64_t v29 = v67;
    uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
    if (v29)
    {
      id v30 = [self standardUserDefaults];
      v31._object = (void *)0x80000001006419F0;
      v31._uint64_t countAndFlagsBits = 0xD000000000000021;
      Swift::Bool v32 = NSUserDefaults.internalBool(forKey:)(v31);

      if (v32)
      {
        uint64_t v33 = v48;
        defaultLogger()();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v34, v35))
        {
          os_log_t v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_t v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Triggering tap-to-radar for ODN mypg due to user defaults setting", v36, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v50);
        if (static DIPFeatures.sharedInstance.getter())
        {
          uint64_t ObjectType = swift_getObjectType();
          swift_errorRetain();
          unint64_t v45 = 0;
          uint64_t v46 = ObjectType;
          DIPFeaturesProtocol.triggerTapToRadar(forContext:title:error:attachmentFilePaths:deleteOnAttach:description:)();
          swift_unknownObjectRelease();
          swift_errorRelease();
        }
      }
      swift_willThrow();
      long long v38 = v63;
      long long v39 = v64;
      sub_10000C5E0(v62, *((unint64_t *)&v62 + 1));
      sub_10000C5F4(v38, *((unint64_t *)&v38 + 1));
      return sub_10000C5E0(v39, *((unint64_t *)&v39 + 1));
    }
    else
    {
      int v40 = v65;
      unint64_t v41 = v66;
      long long v42 = v63;
      long long v43 = v64;
      char v44 = v51;
      *unint64_t v51 = v62;
      v44[1] = v42;
      v44[2] = v43;
      *((_DWORD *)v44 + 12) = v40;
      *((void *)v44 + 7) = v41;
    }
  }
  return result;
}

uint64_t sub_100201104(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t a6, void *a7, NSObject *a8, unint64_t a9, unint64_t a10, unint64_t a11, void *a12, NSObject *a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  dispatch_semaphore_t v231 = a8;
  id v230 = a7;
  uint64_t v247 = a5;
  LODWORD(v259) = a4;
  uint64_t v249 = a3;
  uint64_t v248 = a2;
  uint64_t v264 = a1;
  int v208 = a17;
  uint64_t v236 = a16;
  uint64_t v235 = a15;
  uint64_t v223 = a14;
  id v225 = a13;
  id v229 = a12;
  unint64_t v226 = a11;
  unint64_t v228 = a10;
  unint64_t v227 = a9;
  uint64_t v215 = type metadata accessor for Date();
  uint64_t v214 = *(void *)(v215 - 8);
  __chkstk_darwin(v215);
  uint64_t v213 = (char *)&v198 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = type metadata accessor for DispatchTime();
  uint64_t v234 = *(void *)(v238 - 8);
  uint64_t v19 = __chkstk_darwin(v238);
  id v232 = (char *)&v198 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v218 = (char *)&v198 - v22;
  unint64_t v221 = v23;
  __chkstk_darwin(v21);
  unint64_t v240 = (char *)&v198 - v24;
  uint64_t v242 = type metadata accessor for DIPError.Code();
  uint64_t v241 = *(void *)(v242 - 8);
  __chkstk_darwin(v242);
  uint64_t v243 = (uint64_t)&v198 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v256 = type metadata accessor for Logger();
  uint64_t v255 = *(void *)(v256 - 8);
  uint64_t v26 = __chkstk_darwin(v256);
  uint64_t v239 = (char *)&v198 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  long long v207 = (char *)&v198 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v203 = (char *)&v198 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v212 = (char *)&v198 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v224 = (char *)&v198 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v217 = (char *)&v198 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  id v216 = (char *)&v198 - v39;
  __chkstk_darwin(v38);
  uint64_t v245 = (char *)&v198 - v40;
  uint64_t v41 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v41 - 8);
  long long v43 = (char *)&v198 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = type metadata accessor for DIPSignpost();
  uint64_t v253 = *(void *)(v251 - 8);
  uint64_t v44 = __chkstk_darwin(v251);
  long long v233 = (char *)&v198 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v237 = (char *)&v198 - v47;
  unint64_t v220 = v48;
  __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v198 - v49;
  static DaemonSignposts.fetchAssessment.getter();
  uint64_t v244 = v50;
  unint64_t v219 = (unint64_t)v43;
  DIPSignpost.init(_:)();
  uint64_t v51 = swift_allocObject();
  long long v260 = xmmword_100610EF0;
  uint64_t v250 = v51;
  *(_OWORD *)(v51 + 16) = xmmword_100610EF0;
  uint64_t v206 = v51 + 16;
  uint64_t v52 = swift_allocObject();
  uint64_t v257 = v52;
  *(_OWORD *)(v52 + 16) = v260;
  uint64_t v209 = v52 + 16;
  uint64_t v53 = swift_allocObject();
  uint64_t v254 = v53;
  *(void *)(v53 + 16) = 0;
  uint64_t v211 = (uint64_t *)(v53 + 16);
  uint64_t v54 = swift_allocObject();
  uint64_t v258 = v54;
  *(_DWORD *)(v54 + 16) = 0;
  uint64_t v205 = v54 + 16;
  uint64_t v55 = swift_allocObject();
  uint64_t v252 = v55;
  *(_OWORD *)(v55 + 16) = v260;
  uint64_t v210 = v55 + 16;
  uint64_t v56 = swift_allocObject();
  *(void *)&long long v260 = v56;
  *(void *)(v56 + 16) = 0xBFF0000000000000;
  uint64_t v204 = v56 + 16;
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v57 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v58 = *(void *)v57;
  uint64_t v246 = *(void *)(*(void *)v57 + 72);
  unint64_t v59 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_100611020;
  unint64_t v61 = v60 + v59;
  long long v62 = (void *)(v60 + v59 + v57[14]);
  uint64_t v63 = enum case for DIPError.PropertyKey.spWorkflowID(_:);
  uint64_t v64 = type metadata accessor for DIPError.PropertyKey();
  int v65 = *(void (**)(void))(*(void *)(v64 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v65)(v61, v63, v64);
  v62[3] = &type metadata for String;
  unint64_t v66 = v249;
  *long long v62 = v248;
  v62[1] = v66;
  unint64_t v67 = v61 + v246 + v57[14];
  v65();
  *(void *)(v67 + 24) = &type metadata for DIPState;
  *(unsigned char *)unint64_t v67 = (_BYTE)v259;
  swift_bridgeObjectRetain();
  uint64_t v246 = sub_10015C504(v60);
  unint64_t v68 = a6;
  uint64_t v69 = v264;
  uint64_t v70 = v247;
  uint64_t v71 = v245;
  switch(a6 >> 62)
  {
    case 1uLL:
      LODWORD(v72) = HIDWORD(v247) - v247;
      if (__OFSUB__(HIDWORD(v247), v247))
      {
        __break(1u);
LABEL_59:
        __break(1u);
        JUMPOUT(0x1002034A4);
      }
      uint64_t v72 = (int)v72;
LABEL_6:
      if (v72 != 16)
      {
LABEL_9:
        id v83 = v239;
        defaultLogger()();
        unint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v84, v85))
        {
          os_log_type_t v86 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v86 = 0;
          _os_log_impl((void *)&_mh_execute_header, v84, v85, "invalid nonce size", v86, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v255 + 8))(v83, v256);
        (*(void (**)(uint64_t, void, uint64_t))(v241 + 104))(v243, enum case for DIPError.Code.invalidAssessmentGUID(_:), v242);
        type metadata accessor for DIPError();
        sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        uint64_t v87 = v251;
        uint64_t v88 = v253;
        goto LABEL_45;
      }
      defaultLogger()();
      sub_10002CEB0(v70, a6);
      sub_10002CEB0(v70, a6);
      id v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = v71;
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v79 = 136446210;
        uint64_t v70 = v247;
        uint64_t v239 = (char *)(v79 + 4);
        Swift::String v80 = Data.base64EncodedString(options:)(0);
        uint64_t v261 = sub_100110D58(v80._countAndFlagsBits, (unint64_t)v80._object, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000C5F4(v70, a6);
        unint64_t v68 = a6;
        sub_10000C5F4(v70, a6);
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "odn nonce %{public}s", v79, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v81 = *(char **)(v255 + 8);
        uint64_t v82 = v78;
      }
      else
      {
        sub_10000C5F4(v70, a6);
        sub_10000C5F4(v70, a6);

        uint64_t v81 = *(char **)(v255 + 8);
        uint64_t v82 = v71;
      }
      uint64_t v239 = v81;
      ((void (*)(char *, uint64_t))v81)(v82, v256);
      uint64_t v89 = 1;
      if (v259 == 9) {
        uint64_t v89 = 2;
      }
      uint64_t v247 = v89;
      uint64_t v90 = v227;
      unint64_t v91 = v228;
      sub_1000338D4(v227, v228);
      uint64_t v92 = sub_10051D8F4(v226);
      objc_allocWithZone((Class)cSPXWY2zzg2zwzaR);
      unint64_t v93 = v68;
      sub_10002CEB0(v70, v68);
      uint64_t v94 = (uint64_t)v229;
      swift_bridgeObjectRetain();
      uint64_t v95 = (uint64_t)v230;
      dispatch_semaphore_t v96 = v231;
      sub_10002CEB0((uint64_t)v230, (unint64_t)v231);
      id v97 = sub_1002089D4(v95, (unint64_t)v96, v90, v91, v247, v92, v94, v70, v93);
      if (!v97)
      {
        (*(void (**)(uint64_t, void, uint64_t))(v241 + 104))(v243, enum case for DIPError.Code.odnInitialize(_:), v242);
        type metadata accessor for DIPError();
        sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        uint64_t v87 = v251;
        uint64_t v88 = v253;
        uint64_t v69 = v264;
LABEL_45:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v171 = *(void **)(v69 + 56);
        uint64_t v172 = *(void **)(v69 + 64);
        *(_OWORD *)(v69 + 56) = 0u;
        *(_OWORD *)(v69 + 72) = 0u;
        sub_100209B60(v171, v172);
        return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v244, v87);
      }
      unint64_t v98 = v97;
      uint64_t v99 = v264;
      id v100 = *(id *)(v264 + 24);
      id v101 = v218;
      static DispatchTime.now()();
      unint64_t v102 = v240;
      + infix(_:_:)();
      uint64_t v103 = v234 + 8;
      uint64_t v104 = *(void (**)(char *, uint64_t))(v234 + 8);
      uint64_t v105 = v238;
      v104(v101, v238);
      OS_dispatch_semaphore.wait(timeout:)();

      uint64_t v201 = v103;
      uint64_t v200 = v104;
      v104(v102, v105);
      char v106 = static DispatchTimeoutResult.== infix(_:_:)();
      id v230 = v98;
      if ((v106 & 1) != 0 && (uint64_t v107 = *(void **)(v99 + 56)) != 0)
      {
        unint64_t v108 = *(void **)(v99 + 64);
        id v109 = v107;
        id v110 = v108;
        swift_bridgeObjectRetain();
        defaultLogger()();
        id v111 = Logger.logObject.getter();
        os_log_type_t v112 = static os_log_type_t.debug.getter();
        BOOL v113 = os_log_type_enabled(v111, v112);
        uint64_t v114 = v224;
        if (v113)
        {
          uint64_t v115 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v115 = 0;
          _os_log_impl((void *)&_mh_execute_header, v111, v112, "using collected NF data", v115, 2u);
          swift_slowDealloc();
        }

        ((void (*)(char *, uint64_t))v239)(v216, v256);
        id v116 = v230;
        [v230 setHostChallenge:v109];
        [v116 setChallengeResponse:v110];
        swift_bridgeObjectRetain();
        NSString v117 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v116 setSeid:v117];
        swift_bridgeObjectRelease();

        uint64_t v118 = v253;
        unint64_t v119 = v232;
        uint64_t v120 = v237;
      }
      else
      {
        uint64_t v121 = v217;
        defaultLogger()();
        uint64_t v122 = Logger.logObject.getter();
        os_log_type_t v123 = static os_log_type_t.debug.getter();
        BOOL v124 = os_log_type_enabled(v122, v123);
        uint64_t v120 = v237;
        uint64_t v114 = v224;
        if (v124)
        {
          uint64_t v125 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v125 = 0;
          _os_log_impl((void *)&_mh_execute_header, v122, v123, "passing nil as NF data", v125, 2u);
          swift_slowDealloc();
        }

        ((void (*)(char *, uint64_t))v239)(v121, v256);
        uint64_t v118 = v253;
        unint64_t v119 = v232;
      }
      unint64_t v126 = v225;
      if (v225) {
        dispatch_semaphore_t v231 = v225;
      }
      else {
        dispatch_semaphore_t v231 = dispatch_semaphore_create(0);
      }
      id v127 = objc_allocWithZone((Class)OZRXp7MLSzffIeLD);
      unint64_t v128 = v126;
      id v229 = [v127 init];
      static DaemonSignposts.odnMypg.getter();
      DIPSignpost.init(_:)();
      static DispatchTime.now()();
      uint64_t v129 = swift_allocObject();
      uint64_t v247 = v129;
      *(unsigned char *)(v129 + 16) = 0;
      int v198 = (unsigned char *)(v129 + 16);
      uint64_t v130 = swift_allocObject();
      uint64_t v245 = (char *)v130;
      *(unsigned char *)(v130 + 16) = 0;
      uint64_t v199 = (unsigned char *)(v130 + 16);
      char v131 = v223;
      unint64_t v228 = v223 & 1;
      defaultLogger()();
      id v132 = Logger.logObject.getter();
      os_log_type_t v133 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v132, v133))
      {
        uint64_t v134 = (uint8_t *)swift_slowAlloc();
        uint64_t v135 = swift_slowAlloc();
        *(_DWORD *)uint64_t v134 = 136315138;
        aBlock[0] = v135;
        if (v131) {
          uint64_t v136 = 49;
        }
        else {
          uint64_t v136 = 48;
        }
        uint64_t v261 = sub_100110D58(v136, 0xE100000000000000, aBlock);
        unint64_t v126 = v225;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v132, v133, "Calling with option = %s", v134, 0xCu);
        swift_arrayDestroy();
        uint64_t v120 = v237;
        swift_slowDealloc();
        uint64_t v105 = v238;
        swift_slowDealloc();

        uint64_t v137 = v224;
      }
      else
      {

        uint64_t v137 = v114;
      }
      ((void (*)(char *, uint64_t))v239)(v137, v256);
      uint64_t v138 = v251;
      LODWORD(v239) = v126 != 0;
      (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v233, v120, v251);
      uint64_t v139 = v234;
      (*(void (**)(char *, char *, uint64_t))(v234 + 16))(v240, v119, v105);
      unint64_t v140 = (*(unsigned __int8 *)(v118 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
      unint64_t v226 = (v140 + v220 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v227 = (v140 + v220 + 31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v224 = (char *)((v227 + 15) & 0xFFFFFFFFFFFFFFF8);
      id v225 = ((unint64_t)(v224 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v220 = ((unint64_t)&v225[1].isa + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v217 = (char *)((*(unsigned __int8 *)(v139 + 80) + v220 + 8) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80));
      unint64_t v221 = (unint64_t)&v217[v221 + 7] & 0xFFFFFFFFFFFFFFF8;
      unint64_t v219 = (v221 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v218 = (char *)((v219 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v141 = v105;
      unint64_t v202 = (unint64_t)(v218 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v142 = (v202 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v143 = (v142 + 15) & 0xFFFFFFFFFFFFFFF8;
      id v216 = (char *)((v143 + 23) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v144 = (unint64_t)(v216 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v145 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v118 + 32))(v145 + v140, v233, v138);
      unint64_t v146 = v145 + v226;
      unint64_t v147 = v249;
      *(void *)unint64_t v146 = v248;
      *(void *)(v146 + 8) = v147;
      *(unsigned char *)(v146 + 16) = (_BYTE)v259;
      *(void *)(v145 + v227) = v245;
      *(void *)&v224[v145] = v231;
      *(Class *)((char *)&v225->isa + v145) = (Class)v264;
      *(void *)(v145 + v220) = v260;
      (*(void (**)(char *, char *, uint64_t))(v139 + 32))(&v217[v145], v240, v141);
      *(void *)(v145 + v221) = v254;
      *(void *)(v145 + v219) = v258;
      *(void *)&v218[v145] = v250;
      *(void *)(v145 + v202) = v257;
      *(void *)(v145 + v142) = v252;
      id v148 = (void *)(v145 + v143);
      uint64_t v149 = v236;
      *id v148 = v235;
      v148[1] = v149;
      uint64_t v150 = v246;
      *(void *)&v216[v145] = v246;
      *(void *)(v145 + v144) = v247;
      aBlock[4] = (uint64_t)sub_10020A09C;
      aBlock[5] = v145;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100200ACC;
      aBlock[3] = (uint64_t)&unk_1006FAF10;
      uint64_t v151 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      os_log_type_t v152 = v231;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v153 = v257;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      id v154 = v230;
      uint64_t v155 = v152;
      sub_10003BDD0(v235);
      swift_release();
      id v156 = v229;
      [v229 MypqGKKWznx4xnYa:v154 l8OCYbP9LFIvnTwG:v228 ygOPXTiKN0J02x0j:v151];
      _Block_release(v151);

      uint64_t v157 = v222;
      sub_100209128((uint64_t)v152, v259, v150, (int)v239);
      if (v157)
      {

        swift_bridgeObjectRelease();
        v200(v232, v238);
        uint64_t v88 = v253;
        uint64_t v87 = v251;
        (*(void (**)(char *, uint64_t))(v253 + 8))(v237, v251);
        swift_release();
LABEL_43:
        swift_release();
        goto LABEL_44;
      }
      uint64_t v158 = v156;
      uint64_t v159 = v153;
      uint64_t v160 = v199;
      swift_beginAccess();
      if ((*v160 & 1) == 0)
      {
        Class v259 = v155;
        unint64_t v164 = v212;
        defaultLogger()();
        uint64_t v165 = Logger.logObject.getter();
        os_log_type_t v166 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v165, v166))
        {
          uint64_t v167 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v167 = 0;
          _os_log_impl((void *)&_mh_execute_header, v165, v166, "Timed out waiting for ODN data with semaphoreSignaledByODN = false", v167, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v255 + 8))(v164, v256);
        uint64_t v261 = 0;
        unint64_t v262 = 0xE000000000000000;
        _StringGuts.grow(_:)(36);
        swift_bridgeObjectRelease();
        uint64_t v261 = 0xD000000000000022;
        unint64_t v262 = 0x8000000100641800;
        unint64_t v168 = v213;
        static Date.now.getter();
        sub_100209B18((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v169 = v215;
        v170._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v170);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v214 + 8))(v168, v169);
        (*(void (**)(uint64_t, void, uint64_t))(v241 + 104))(v243, enum case for DIPError.Code.odnTimeoutWithPrecompute(_:), v242);
        type metadata accessor for DIPError();
        sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();

        v200(v232, v238);
        uint64_t v88 = v253;
        goto LABEL_42;
      }
      unint64_t v161 = v198;
      swift_beginAccess();
      *unint64_t v161 = 1;
      uint64_t v162 = v211;
      swift_beginAccess();
      uint64_t v163 = *v162;
      if (v163)
      {
        swift_errorRetain();
        sub_10020A2A8(v163, v150);
        swift_bridgeObjectRelease();
        swift_willThrow();

        swift_errorRelease();
        v200(v232, v238);
        uint64_t v88 = v253;
        uint64_t v87 = v251;
        (*(void (**)(char *, uint64_t))(v253 + 8))(v237, v251);
        swift_release();
        swift_release();
LABEL_44:
        uint64_t v258 = v260;
        uint64_t v69 = v264;
        goto LABEL_45;
      }
      uint64_t v174 = v155;
      uint64_t v88 = v253;
      uint64_t v175 = v260;
      if (v223)
      {
        swift_beginAccess();
        if (*(void *)(v252 + 24) >> 60 == 15)
        {
          unint64_t v176 = v203;
          defaultLogger()();
          long long v177 = Logger.logObject.getter();
          os_log_type_t v178 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v177, v178))
          {
            int v179 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)int v179 = 0;
            _os_log_impl((void *)&_mh_execute_header, v177, v178, "ODN no error and no cbor assessments", v179, 2u);
            uint64_t v88 = v253;
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v255 + 8))(v176, v256);
          (*(void (**)(uint64_t, void, uint64_t))(v241 + 104))(v243, enum case for DIPError.Code.odnNoCBORAssessmentData(_:), v242);
          type metadata accessor for DIPError();
          sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
LABEL_56:
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();

          v200(v232, v238);
LABEL_42:
          uint64_t v87 = v251;
          (*(void (**)(char *, uint64_t))(v88 + 8))(v237, v251);
          swift_release();
          goto LABEL_43;
        }
      }
      swift_beginAccess();
      unint64_t v180 = *(void *)(v159 + 24);
      if (v180 >> 60 == 15)
      {
        uint64_t v181 = v207;
        defaultLogger()();
        uint64_t v182 = Logger.logObject.getter();
        os_log_type_t v183 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v182, v183))
        {
          uint64_t v184 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v184 = 0;
          _os_log_impl((void *)&_mh_execute_header, v182, v183, "ODN no error and no assessments", v184, 2u);
          uint64_t v88 = v253;
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v255 + 8))(v181, v256);
        (*(void (**)(uint64_t, void, uint64_t))(v241 + 104))(v243, enum case for DIPError.Code.odnNoAssessmentData(_:), v242);
        type metadata accessor for DIPError();
        sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_56;
      }
      uint64_t v256 = *(void *)(v159 + 16);
      sub_10002CEB0(v256, v180);

      swift_bridgeObjectRelease();
      v200(v232, v238);
      uint64_t v185 = *(NSObject **)(v88 + 8);
      uint64_t v253 = v88 + 8;
      Class v259 = v185;
      ((void (*)(char *, uint64_t))v185)(v237, v251);
      swift_beginAccess();
      uint64_t v186 = *(void *)(v250 + 16);
      unint64_t v187 = *(void *)(v250 + 24);
      swift_beginAccess();
      uint64_t v188 = *(void *)(v252 + 16);
      unint64_t v189 = *(void *)(v252 + 24);
      swift_beginAccess();
      int v190 = *(_DWORD *)(v258 + 16);
      swift_beginAccess();
      uint64_t v191 = *(void *)(v175 + 16);
      uint64_t v192 = v208;
      unint64_t v193 = v208[1];
      uint64_t v243 = *v208;
      uint64_t v248 = v208[2];
      uint64_t v246 = v208[3];
      uint64_t v255 = v208[4];
      uint64_t v249 = v208[5];
      *int v208 = v186;
      v192[1] = v187;
      v192[2] = v256;
      v192[3] = v180;
      v192[4] = v188;
      v192[5] = v189;
      *((_DWORD *)v192 + 12) = v190;
      v192[7] = v191;
      sub_1000338D4(v186, v187);
      sub_1000338D4(v188, v189);
      sub_10000C5E0(v243, v193);
      sub_10000C5F4(v248, v246);
      sub_10000C5E0(v255, v249);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v194 = v264;
      uint64_t v195 = *(void **)(v264 + 56);
      uint64_t v196 = *(void **)(v264 + 64);
      *(_OWORD *)(v264 + 56) = 0u;
      *(_OWORD *)(v194 + 72) = 0u;
      sub_100209B60(v195, v196);
      uint64_t v197 = v244;
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      return ((uint64_t (*)(char *, uint64_t))v259)(v197, v251);
    case 2uLL:
      uint64_t v74 = *(void *)(v247 + 16);
      uint64_t v73 = *(void *)(v247 + 24);
      BOOL v75 = __OFSUB__(v73, v74);
      uint64_t v72 = v73 - v74;
      if (!v75) {
        goto LABEL_6;
      }
      goto LABEL_59;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v72 = BYTE6(a6);
      goto LABEL_6;
  }
}

unint64_t sub_1002034B4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, void (*a6)(char *, uint64_t), int a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26)
{
  uint64_t v161 = a8;
  LODWORD(v134) = a7;
  uint64_t v139 = a5;
  unint64_t v140 = a6;
  uint64_t v137 = a3;
  uint64_t v138 = a4;
  uint64_t v135 = a1;
  uint64_t v136 = a2;
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v149 = *(void *)(v26 - 8);
  uint64_t v150 = v26;
  __chkstk_darwin(v26);
  unint64_t v147 = (char *)&v132 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = type metadata accessor for DispatchQoS();
  uint64_t v146 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  uint64_t v145 = (char *)&v132 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = type metadata accessor for Logger();
  uint64_t v159 = *(void *)(v157 - 8);
  uint64_t v29 = __chkstk_darwin(v157);
  uint64_t v151 = (char *)&v132 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  unint64_t v142 = (char *)&v132 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  unint64_t v143 = (char *)&v132 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v132 - v36;
  __chkstk_darwin(v35);
  uint64_t v141 = (char *)&v132 - v38;
  uint64_t v39 = type metadata accessor for DispatchTime();
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v132 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43.value._uint64_t countAndFlagsBits = a10;
  v43.value._object = a11;
  DIPSignpost.end(workflowID:isBackground:)(v43, (Swift::Bool_optional)(a12 == 9));
  uint64_t v44 = *(void **)(a15 + 32);
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = sub_10020A88C;
  *(void *)(v45 + 24) = a15;
  uint64_t v169 = sub_10020AE08;
  Swift::String v170 = (void *)v45;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v166 = 1107296256;
  uint64_t v167 = sub_100032314;
  unint64_t v168 = &unk_1006FAF60;
  uint64_t v46 = _Block_copy(&aBlock);
  uint64_t v47 = v44;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v47, v46);

  _Block_release(v46);
  LOBYTE(v46) = swift_isEscapingClosureAtFileLocation();
  uint64_t v144 = a15;
  swift_release();
  unint64_t result = swift_release();
  if (v46)
  {
    __break(1u);
  }
  else
  {
    static DispatchTime.now()();
    unint64_t v49 = DispatchTime.uptimeNanoseconds.getter();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
    unint64_t result = DispatchTime.uptimeNanoseconds.getter();
    unint64_t v50 = v49 - result;
    if (v49 >= result)
    {
      uint64_t v51 = a23;
      uint64_t v160 = a22;
      uint64_t v52 = a21;
      uint64_t v154 = a14;
      uint64_t v153 = a13;
      uint64_t v156 = a16;
      double v53 = (double)v50 / 1000000000.0;
      swift_beginAccess();
      *(double *)(a16 + 16) = v53;
      uint64_t v54 = v161;
      uint64_t v155 = a20;
      uint64_t v158 = a21;
      uint64_t v152 = a19;
      if (v161)
      {
        swift_beginAccess();
        *(void *)(a18 + 16) = v54;
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRelease();
        defaultLogger()();
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = swift_slowAlloc();
          uint64_t v133 = a23;
          uint64_t v58 = v57;
          uint64_t aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = 134349314;
          unint64_t v59 = (void *)_convertErrorToNSError(_:)();
          id v60 = [v59 code];

          swift_errorRelease();
          uint64_t v164 = (uint64_t)v60;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_errorRelease();
          *(_WORD *)(v58 + 12) = 2082;
          swift_getErrorValue();
          uint64_t v61 = Error.localizedDescription.getter();
          uint64_t v164 = sub_100110D58(v61, v62, &aBlock);
          uint64_t v54 = v161;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "error retrieving ODIN data. %{public}ld - %{public}s", (uint8_t *)v58, 0x16u);
          swift_arrayDestroy();
          uint64_t v52 = v158;
          swift_slowDealloc();
          uint64_t v51 = v133;
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        (*(void (**)(char *, uint64_t))(v159 + 8))(v37, v157);
        if (!v51) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v63 = v160;
        uint64_t v132 = a19 + 16;
        swift_beginAccess();
        *(_DWORD *)(a19 + 16) = v134;
        uint64_t v134 = (uint64_t *)(a20 + 16);
        swift_beginAccess();
        uint64_t v64 = *(void *)(a20 + 16);
        unint64_t v65 = *(void *)(a20 + 24);
        uint64_t v66 = v135;
        unint64_t v67 = (unint64_t)v136;
        *(void *)(a20 + 16) = v135;
        *(void *)(a20 + 24) = v67;
        sub_1000338D4(v66, v67);
        sub_10000C5E0(v64, v65);
        uint64_t v136 = (uint64_t *)(a21 + 16);
        swift_beginAccess();
        uint64_t v68 = *(void *)(a21 + 16);
        unint64_t v69 = *(void *)(a21 + 24);
        uint64_t v70 = v137;
        unint64_t v71 = (unint64_t)v138;
        *(void *)(a21 + 16) = v137;
        *(void *)(a21 + 24) = v71;
        sub_1000338D4(v70, v71);
        sub_10000C5E0(v68, v69);
        uint64_t v138 = (uint64_t *)(v63 + 16);
        uint64_t v72 = v152;
        swift_beginAccess();
        uint64_t v73 = *(void *)(v63 + 16);
        unint64_t v74 = *(void *)(v63 + 24);
        uint64_t v75 = v139;
        unint64_t v76 = (unint64_t)v140;
        *(void *)(v63 + 16) = v139;
        *(void *)(v63 + 24) = v76;
        sub_1000338D4(v75, v76);
        sub_10000C5E0(v73, v74);
        os_log_type_t v77 = v141;
        defaultLogger()();
        swift_retain();
        swift_retain();
        sub_10002D658();
        sub_10002D658();
        uint64_t v78 = Logger.logObject.getter();
        os_log_type_t v79 = static os_log_type_t.debug.getter();
        BOOL v80 = os_log_type_enabled(v78, v79);
        uint64_t v133 = a23;
        if (v80)
        {
          uint64_t v81 = swift_slowAlloc();
          *(_DWORD *)uint64_t v81 = 67109632;
          swift_beginAccess();
          LODWORD(aBlock) = *(_DWORD *)(v72 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          *(_WORD *)(v81 + 8) = 1040;
          LODWORD(aBlock) = 3;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v81 + 14) = 2048;
          swift_beginAccess();
          uint64_t aBlock = *(void *)(v156 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v78, v79, " ODIN returned index %u, after %.*f seconds", (uint8_t *)v81, 0x18u);
          swift_slowDealloc();
        }
        else
        {

          swift_release();
          swift_release();
        }
        uint64_t v82 = v143;
        uint64_t v83 = v159 + 8;
        unint64_t v84 = *(void (**)(char *, uint64_t))(v159 + 8);
        uint64_t v85 = v157;
        v84(v77, v157);
        defaultLogger()();
        uint64_t v86 = v155;
        swift_retain_n();
        uint64_t v87 = Logger.logObject.getter();
        LODWORD(v141) = static os_log_type_t.debug.getter();
        BOOL v88 = os_log_type_enabled(v87, (os_log_type_t)v141);
        uint64_t v159 = v83;
        uint64_t v54 = v161;
        unint64_t v140 = v84;
        if (v88)
        {
          uint64_t v89 = (uint8_t *)swift_slowAlloc();
          uint64_t aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v89 = 136315138;
          uint64_t v90 = v134;
          swift_beginAccess();
          unint64_t v91 = *(void *)(v86 + 24);
          if (v91 >> 60 == 15)
          {
            object = (void *)0xE300000000000000;
            uint64_t countAndFlagsBits = 7104878;
          }
          else
          {
            uint64_t v94 = *v90;
            sub_10002CEB0(*v90, *(void *)(v86 + 24));
            Swift::String v95 = Data.base16EncodedString()();
            uint64_t countAndFlagsBits = v95._countAndFlagsBits;
            object = v95._object;
            uint64_t v96 = v94;
            uint64_t v54 = v161;
            sub_10000C5E0(v96, v91);
          }
          uint64_t v162 = sub_100110D58(countAndFlagsBits, (unint64_t)object, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v141, " tdata   %s", v89, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v85 = v157;
          v140(v143, v157);
          uint64_t v52 = v158;
        }
        else
        {

          swift_release_n();
          v84(v82, v85);
        }
        id v97 = v142;
        defaultLogger()();
        swift_retain_n();
        unint64_t v98 = Logger.logObject.getter();
        os_log_type_t v99 = static os_log_type_t.debug.getter();
        BOOL v100 = os_log_type_enabled(v98, v99);
        id v101 = v151;
        if (v100)
        {
          unint64_t v102 = (uint8_t *)swift_slowAlloc();
          uint64_t aBlock = swift_slowAlloc();
          *(_DWORD *)unint64_t v102 = 136315138;
          uint64_t v103 = v136;
          swift_beginAccess();
          unint64_t v104 = *(void *)(v52 + 24);
          if (v104 >> 60 == 15)
          {
            uint64_t v105 = (void *)0xE300000000000000;
            uint64_t v106 = 7104878;
          }
          else
          {
            uint64_t v107 = *v103;
            sub_10002CEB0(*v103, v104);
            Swift::String v108 = Data.base16EncodedString()();
            uint64_t v106 = v108._countAndFlagsBits;
            uint64_t v105 = v108._object;
            uint64_t v109 = v107;
            uint64_t v54 = v161;
            sub_10000C5E0(v109, v104);
          }
          uint64_t v162 = sub_100110D58(v106, (unint64_t)v105, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v52 = v158;
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v98, v99, " assessment %s", v102, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v85 = v157;
          v140(v142, v157);
          id v101 = v151;
        }
        else
        {

          swift_release_n();
          v140(v97, v85);
        }
        defaultLogger()();
        swift_retain_n();
        id v110 = Logger.logObject.getter();
        os_log_type_t v111 = static os_log_type_t.debug.getter();
        BOOL v112 = os_log_type_enabled(v110, v111);
        BOOL v113 = v138;
        if (v112)
        {
          uint64_t v114 = (uint8_t *)swift_slowAlloc();
          uint64_t aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v114 = 136315138;
          swift_beginAccess();
          unint64_t v115 = *(void *)(v160 + 24);
          if (v115 >> 60 == 15)
          {
            id v116 = (void *)0xE300000000000000;
            uint64_t v117 = 7104878;
          }
          else
          {
            uint64_t v118 = *v113;
            sub_10002CEB0(*v113, *(void *)(v160 + 24));
            Swift::String v119 = Data.base16EncodedString()();
            uint64_t v117 = v119._countAndFlagsBits;
            id v116 = v119._object;
            uint64_t v120 = v118;
            uint64_t v85 = v157;
            sub_10000C5E0(v120, v115);
          }
          uint64_t v163 = (void *)sub_100110D58(v117, (unint64_t)v116, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v110, v111, " cdata   %s", v114, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v140(v151, v85);
          uint64_t v51 = v133;
          uint64_t v52 = v158;
          if (!v133) {
            goto LABEL_32;
          }
        }
        else
        {

          swift_release_n();
          v140(v101, v85);
          uint64_t v51 = v133;
          if (!v133) {
            goto LABEL_32;
          }
        }
      }
      uint64_t v151 = a25;
      uint64_t v121 = v144;
      uint64_t v159 = *(void *)(v144 + 16);
      uint64_t v122 = (void *)swift_allocObject();
      uint64_t v123 = v54;
      uint64_t v124 = v155;
      uint64_t v125 = v156;
      v122[2] = v52;
      v122[3] = v124;
      uint64_t v126 = v152;
      v122[4] = v160;
      v122[5] = v126;
      v122[6] = v125;
      v122[7] = v123;
      v122[8] = v121;
      v122[9] = a25;
      v122[10] = v51;
      v122[11] = a24;
      v122[12] = a26;
      uint64_t v169 = sub_10020A924;
      Swift::String v170 = v122;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v166 = 1107296256;
      uint64_t v167 = sub_100593800;
      unint64_t v168 = &unk_1006FAFB0;
      uint64_t v157 = (uint64_t)_Block_copy(&aBlock);
      sub_10003BDD0(v51);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_10003BDD0(v51);
      swift_bridgeObjectRetain();
      swift_retain();
      id v127 = v145;
      static DispatchQoS.unspecified.getter();
      uint64_t v163 = _swiftEmptyArrayStorage;
      sub_100209B18((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100007764((uint64_t *)&unk_1007208F0);
      sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
      unint64_t v128 = v147;
      uint64_t v129 = v150;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v130 = (const void *)v157;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v130);
      sub_10003BEDC(v51);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v128, v129);
      (*(void (**)(char *, uint64_t))(v146 + 8))(v127, v148);
      swift_release();
LABEL_32:
      uint64_t v131 = v153;
      swift_beginAccess();
      *(unsigned char *)(v131 + 16) = 1;
      return OS_dispatch_semaphore.signal()();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002045E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void *, void, uint64_t), uint64_t a10, uint64_t a11)
{
  uint64_t v47 = a8;
  uint64_t v54 = a6;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = a1;
  uint64_t v20 = (uint64_t *)(a1 + 16);
  uint64_t v49 = a2;
  uint64_t v48 = a2 + 16;
  defaultLogger()();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Preparing to call odn completion function", v23, 2u);
    swift_slowDealloc();
  }
  uint64_t v50 = a11;
  uint64_t v24 = (uint64_t *)(a3 + 16);
  uint64_t v25 = a3;
  uint64_t v26 = (unsigned int *)(a4 + 16);
  uint64_t v27 = (uint64_t *)(a5 + 16);
  uint64_t v52 = a10;
  double v53 = a9;

  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  swift_beginAccess();
  unint64_t v28 = *(void *)(v51 + 24);
  if (v28 >> 60 == 15)
  {
    swift_beginAccess();
    unint64_t v29 = *(void *)(v25 + 24);
    if (v29 >> 60 == 15)
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v29 = 0;
      unsigned int v34 = 0;
      uint64_t v35 = 0;
      unint64_t v28 = 0xF000000000000000;
    }
    else
    {
      uint64_t v33 = *v24;
      swift_beginAccess();
      unint64_t v31 = *(void *)(v49 + 24);
      uint64_t v39 = v26;
      uint64_t v30 = *(void *)(v49 + 16);
      swift_beginAccess();
      unsigned int v34 = *v39;
      swift_beginAccess();
      uint64_t v35 = *v27;
      sub_1000338D4(v33, v29);
      sub_1000338D4(v33, v29);
      sub_1000338D4(v30, v31);
      v40._uint64_t countAndFlagsBits = 0xD000000000000016;
      v40._object = (void *)0x8000000100641BA0;
      v41._uint64_t countAndFlagsBits = 0x3632636634373131;
      v41._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v41, v40);
      sub_10000C5E0(v33, v29);
      uint64_t v32 = 0;
      unint64_t v28 = 0xC000000000000000;
    }
  }
  else
  {
    uint64_t v32 = *v20;
    swift_beginAccess();
    uint64_t v36 = *(void *)(v49 + 16);
    unint64_t v31 = *(void *)(v49 + 24);
    swift_beginAccess();
    uint64_t v33 = *(void *)(v25 + 16);
    unint64_t v29 = *(void *)(v25 + 24);
    swift_beginAccess();
    unsigned int v34 = *v26;
    uint64_t v30 = v36;
    swift_beginAccess();
    uint64_t v35 = *v27;
    sub_1000338D4(v32, v28);
    sub_1000338D4(v32, v28);
    sub_1000338D4(v30, v31);
    sub_1000338D4(v33, v29);
    v37._object = (void *)0x8000000100641BC0;
    v38._uint64_t countAndFlagsBits = 0x3962363931376166;
    v38._object = (void *)0xE800000000000000;
    v37._uint64_t countAndFlagsBits = 0xD000000000000011;
    logMilestone(tag:description:)(v38, v37);
    sub_10000C5E0(v32, v28);
  }
  v55[0] = v30;
  v55[1] = v31;
  v55[2] = v32;
  v55[3] = v28;
  v55[4] = v33;
  v55[5] = v29;
  v55[6] = v34;
  v55[7] = v35;
  uint64_t v42 = v54;
  if (v54)
  {
    swift_errorRetain();
    uint64_t v43 = sub_10020A2A8(v42, v47);
    swift_errorRelease();
  }
  else
  {
    uint64_t v43 = 0;
  }
  uint64_t v44 = v50;
  swift_beginAccess();
  v53(v55, *(unsigned __int8 *)(v44 + 16), v43);
  sub_10020A964(v30, v31, v32, v28, v33, v29);
  return swift_errorRelease();
}

uint64_t sub_100204A8C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(void *)(v3 + 16);
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  *(void *)(v15 + 32) = a3;
  aBlock[4] = sub_100209C70;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FAD30;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_100209B18((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void sub_100204D44(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = &_swiftEmptyDictionarySingleton;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = &_swiftEmptyDictionarySingleton;
    sub_100562120(49, 0xE100000000000000, 7105633, 0xE300000000000000, isUniquelyReferenced_nonNull_native);
    uint64_t v10 = (void *)aBlock[0];
    swift_bridgeObjectRelease();
  }
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting to clean ODN cache", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v15 = [objc_allocWithZone((Class)OZRXp7MLSzffIeLD) init];
  sub_10051E51C((uint64_t)v10);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  aBlock[4] = sub_100209CB4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100205484;
  aBlock[3] = &unk_1006FAD80;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v15 t5yVezCKaX2Zrwrw:isa uXxcS3vcKdsH38zZ:v18];
  _Block_release(v18);
}

uint64_t sub_100204FF8(int a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v30 - v15;
  if (a3)
  {
    uint64_t v34 = v11;
    swift_errorRetain();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v33 = v10;
      uint64_t v36 = v20;
      *(_DWORD *)uint64_t v19 = 136446210;
      uint64_t v32 = a5;
      swift_getErrorValue();
      uint64_t v21 = Error.localizedDescription.getter();
      uint64_t v35 = sub_100110D58(v21, v22, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error cleaning ODN cache: = %{public}s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v33);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v10);
    }
    return a4(a3);
  }
  uint64_t v33 = v10;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v23, v24))
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v33);
    return a4(a3);
  }
  uint64_t v34 = v11;
  uint64_t v32 = a4;
  uint64_t v25 = swift_slowAlloc();
  uint64_t v31 = swift_slowAlloc();
  uint64_t v36 = v31;
  *(_DWORD *)uint64_t v25 = 67240450;
  LODWORD(v35) = a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v25 + 8) = 2080;
  if (!a2) {
    sub_10015E1C8((uint64_t)_swiftEmptyArrayStorage);
  }
  v30[0] = v25 + 10;
  swift_bridgeObjectRetain();
  v30[1] = (char *)&type metadata for Any + 8;
  uint64_t v26 = Dictionary.description.getter();
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_100110D58(v26, v28, &v36);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v23, v24, "Successfully finished cleaning ODN cache. Records purged = %{public}u, metadata = %s", (uint8_t *)v25, 0x12u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v33);
  return v32(0);
}

uint64_t sub_100205484(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a3) {
    uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a4;
  v6(a2, v7, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100205538(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = sub_100007764(&qword_10071FF30);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100204A8C(a3, (uint64_t)sub_1001FA500, v9);
  return swift_release();
}

uint64_t sub_100205680()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = *(void *)(v0 + 16);
  aBlock[4] = sub_100209AF8;
  uint64_t v13 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FAC90;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_100209B18((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void sub_100205910(uint64_t a1)
{
  uint64_t v88 = a1;
  uint64_t v1 = type metadata accessor for TimeoutError();
  uint64_t v78 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v85 = type metadata accessor for DIPError();
  uint64_t v80 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  os_log_type_t v79 = (char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v81 = *(void *)(v3 - 8);
  uint64_t v82 = v3;
  __chkstk_darwin(v3);
  uint64_t v83 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v91 - 8);
  uint64_t v6 = __chkstk_darwin(v91);
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v84 = (char *)&v75 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v75 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v75 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v87 = (char *)&v75 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v86 = (char *)&v75 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v76 = (char *)&v75 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  os_log_type_t v77 = (char *)&v75 - v22;
  __chkstk_darwin(v21);
  os_log_type_t v24 = (char *)&v75 - v23;
  defaultLogger()();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "START getting NF data", v27, 2u);
    swift_slowDealloc();
  }

  uint64_t v28 = v91;
  uint64_t v89 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v90 = v5 + 8;
  v89(v24, v91);
  unint64_t v29 = self;
  unint64_t v93 = 0;
  id v30 = [v29 embeddedSecureElementWithError:&v93];
  uint64_t v31 = v93;
  if (!v30)
  {
    uint64_t v35 = v93;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      Swift::String v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v38 = 138412290;
      swift_errorRetain();
      Swift::String v40 = _swift_stdlib_bridgeErrorToNSError();
      unint64_t v93 = v40;
      uint64_t v28 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v39 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "No Embedded SE with error: %@", v38, 0xCu);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v48 = v88;
    uint64_t v58 = v89;
    v89(v11, v28);
    goto LABEL_26;
  }
  uint64_t v32 = v30;
  sub_100025C28(0, &qword_100727610);
  uint64_t v33 = v31;
  uint64_t v34 = v32;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  Swift::String v41 = v34;
  uint64_t v42 = v93;
  unint64_t v93 = 0;
  id v92 = 0;
  unsigned __int8 v43 = [v42 getCryptogram:&v93 challengeResponse:&v92];
  id v44 = v92;
  uint64_t v45 = v93;
  uint64_t v46 = v92;
  uint64_t v47 = v45;
  [v42 endSession];
  if ((v43 & 1) == 0)
  {
    unint64_t v59 = v77;
    defaultLogger()();
    id v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      unint64_t v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, " error getting NF challenge / cryptogram, resetting everything", v62, 2u);
      uint64_t v28 = v91;
      swift_slowDealloc();
    }

    v89(v59, v28);
    id v44 = 0;
    uint64_t v45 = 0;
    uint64_t v48 = v88;
    goto LABEL_18;
  }
  if (!v47)
  {
    uint64_t v45 = 0;
    uint64_t v47 = v41;
    uint64_t v48 = v88;
    goto LABEL_21;
  }
  uint64_t v48 = v88;
  if (!v46)
  {
    id v44 = 0;
    uint64_t v47 = v41;
    goto LABEL_21;
  }
  uint64_t v49 = v47;
  uint64_t v47 = v46;
  id v50 = [v41 serialNumber];

  if (!v50)
  {
    uint64_t v46 = v49;
    uint64_t v28 = v91;
LABEL_18:

LABEL_21:
    defaultLogger()();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    uint64_t v58 = v89;
    if (v65)
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "No NF data available", v66, 2u);
      swift_slowDealloc();
      unint64_t v67 = v42;
    }
    else
    {
      unint64_t v67 = v63;
      uint64_t v63 = v42;
    }

    v58(v86, v28);
    goto LABEL_25;
  }
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;

  defaultLogger()();
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v54, v55))
  {
    os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Retrieved NF seid and challenge/response", v56, 2u);
    swift_slowDealloc();
    uint64_t v57 = v42;
  }
  else
  {
    uint64_t v57 = v54;
    uint64_t v54 = v42;
  }

  uint64_t v28 = v91;
  uint64_t v72 = (void (*)(void, void))v89;
  v89(v76, v91);
  uint64_t v73 = *(void **)(v48 + 56);
  unint64_t v74 = *(void **)(v48 + 64);
  *(void *)(v48 + 56) = v45;
  *(void *)(v48 + 64) = v44;
  *(void *)(v48 + 72) = v51;
  *(void *)(v48 + 80) = v53;
  uint64_t v58 = (void (*)(char *, uint64_t))v72;
  sub_100209B60(v73, v74);
LABEL_25:

  uint64_t v14 = v87;
LABEL_26:
  defaultLogger()();
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "END getting NF data", v70, 2u);
    swift_slowDealloc();
  }

  v58(v14, v28);
  id v71 = *(id *)(v48 + 24);
  OS_dispatch_semaphore.signal()();
}

uint64_t sub_10020684C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = sub_100025C28(0, &qword_100727610);
  *uint64_t v3 = v1;
  v3[1] = sub_10000C494;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(a1, 0, 0, 0x657250636E797361, 0xEE0029286D726157, sub_100206944, 0, v4);
}

void sub_100206944(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100727618);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  id v5 = [self sharedHardwareManager];
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_100209BB4;
  void aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10015B294;
  aBlock[3] = &unk_1006FACE0;
  uint64_t v8 = _Block_copy(aBlock);
  swift_release();
  id v9 = [v5 startSecureElementManagerSessionWithPriority:v8];
  _Block_release(v8);
  swift_unknownObjectRelease();
}

uint64_t sub_100206B24(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v4);
  if (a2)
  {
    uint64_t v11 = a2;
    swift_errorRetain();
LABEL_3:
    sub_100007764(&qword_100727618);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a1)
  {
    (*(void (**)(char *, void))(v6 + 104))((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for DIPError.Code.nearfieldInconsistentCallbackError(_:));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v9 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    uint64_t v11 = v9;
    goto LABEL_3;
  }
  uint64_t v11 = (uint64_t)a1;
  id v8 = a1;
  sub_100007764(&qword_100727618);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100206D38(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  unint64_t v15 = *(void *)(a1 + 48);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 40);
    swift_bridgeObjectRetain();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v30 = v8;
      uint64_t v20 = v19;
      uint64_t v21 = swift_slowAlloc();
      unint64_t v29 = (uint8_t *)a2;
      uint64_t v32 = v21;
      *(_DWORD *)uint64_t v20 = 136446466;
      int v28 = a4;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_100110D58((uint64_t)v29, a3, &v32);
      uint64_t v27 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_100110D58(v16, v15, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "ODN asked to compute assessment for %{public}s but assessment computation for %{public}s is already in progress!", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v30);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    type metadata accessor for DaemonAnalytics();
    static DaemonAnalytics.sendODNConcurrentInvocationsEvent(workflowInProgress:newWorkflow:isBackground:)();
  }
  else
  {
    uint64_t v22 = a2;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v30 = v8;
      *(_DWORD *)uint64_t v25 = 136446210;
      unint64_t v29 = v25 + 4;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_100110D58(v22, a3, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "ODN asked to compute assessment for %{public}s; no assessment computation is in progress",
        v25,
        0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v30);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    *(void *)(a1 + 40) = v22;
    *(void *)(a1 + 48) = a3;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002071B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v13 = v2;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    if (*(void *)(a1 + 48))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      unint64_t v10 = *(void *)(a1 + 48);
    }
    else
    {
      unint64_t v10 = 0xE500000000000000;
      uint64_t v9 = 0x3E6C696E3CLL;
    }
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_100110D58(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ODN finished computing assessment for %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v13);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002073E8()
{
  swift_bridgeObjectRelease();
  sub_100209B60(v0[7], v0[8]);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DIPODNHelper()
{
  return self;
}

uint64_t sub_100207468()
{
  return sub_10015C28C(&qword_10071FF30);
}

uint64_t sub_100207474()
{
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v17 = sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  static DispatchQoS.unspecified.getter();
  os_log_type_t v18 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100209B18((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100007764((uint64_t *)&unk_100726420);
  sub_100031134((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v6 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v7 = v1 + 104;
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  uint64_t v12 = v3;
  uint64_t v13 = v7;
  uint64_t v9 = v16;
  v8(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v16);
  *(void *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 24) = dispatch_semaphore_create(0);
  static DispatchQoS.unspecified.getter();
  os_log_type_t v18 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v8(v12, v6, v9);
  *(void *)(v0 + 32) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  return v0;
}

uint64_t sub_10020778C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = ((char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = ((char *)&v99 - v8);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = ((char *)&v99 - v11);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = ((char *)&v99 - v14);
  __chkstk_darwin(v13);
  uint64_t v17 = ((char *)&v99 - v16);
  uint64_t v18 = sub_100007764(&qword_100727600);
  uint64_t result = __chkstk_darwin(v18 - 8);
  uint64_t v21 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (byte_1007600A0 != 1) {
    return result;
  }
  id v110 = v12;
  sub_100208FFC(a1, (uint64_t)v21);
  uint64_t v22 = sub_100007764(&qword_100726860);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1) {
    return sub_100209064((uint64_t)v21);
  }
  uint64_t v106 = v9;
  uint64_t v103 = v6;
  JWSSignedJSON.payload.getter();
  uint64_t v114 = v124[0];
  uint64_t v115 = v124[1];
  uint64_t v117 = v124[3];
  uint64_t v118 = v124[2];
  uint64_t v113 = v124[4];
  uint64_t v116 = v124[5];
  uint64_t v24 = v124[8];
  uint64_t v119 = v124[7];
  uint64_t v120 = v124[6];
  uint64_t v25 = v124[9];
  uint64_t v111 = v124[10];
  (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
  defaultLogger()();
  os_log_type_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v112 = v24;
  if (v28)
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Printing Augmented Profile Information:", v29, 2u);
    swift_slowDealloc();
  }

  uint64_t v30 = *(void (**)(NSObject *, uint64_t))(v3 + 8);
  uint64_t v108 = v3 + 8;
  uint64_t v107 = v30;
  v30(v17, v2);
  defaultLogger()();
  uint64_t v109 = v2;
  uint64_t v31 = v114;
  uint64_t v32 = v115;
  uint64_t v105 = v15;
  sub_1002090C4(v114, v115);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1002090C4(v31, v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v33 = Logger.logObject.getter();
  int v34 = static os_log_type_t.debug.getter();
  BOOL v35 = os_log_type_enabled(v33, (os_log_type_t)v34);
  unint64_t v104 = v33;
  if (v35)
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
    v124[0] = (uint64_t)v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v38 = v115;
    LODWORD(v102) = v34;
    id v101 = v37;
    if (v115)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = v114;
      uint64_t v40 = v114;
      unint64_t v41 = v38;
    }
    else
    {
      unint64_t v41 = 0xE300000000000000;
      uint64_t v40 = 4271950;
      uint64_t v39 = v114;
    }
    uint64_t v123 = sub_100110D58(v40, v41, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    BOOL v100 = v36;
    sub_1001D8D24(v39, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D8D24(v114, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v44 = v104;
    _os_log_impl((void *)&_mh_execute_header, v104, (os_log_type_t)v102, "  ord destination %s", v100, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v107(v105, v109);
  }
  else
  {
    uint64_t v42 = v114;
    uint64_t v43 = v115;
    sub_1001D8D24(v114, v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D8D24(v42, v43);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v107(v105, v109);
  }
  defaultLogger()();
  uint64_t v45 = v114;
  uint64_t v46 = v115;
  sub_1002090C4(v114, v115);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v47 = v45;
  unint64_t v48 = v117;
  sub_1002090C4(v47, v46);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v49 = Logger.logObject.getter();
  int v50 = static os_log_type_t.debug.getter();
  BOOL v51 = os_log_type_enabled(v49, (os_log_type_t)v50);
  uint64_t v105 = v49;
  if (v51)
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    v124[0] = (uint64_t)v53;
    *(_DWORD *)uint64_t v52 = 136315138;
    LODWORD(v104) = v50;
    unint64_t v102 = v53;
    if (v115)
    {
      swift_bridgeObjectRetain();
      uint64_t v54 = v118;
      unint64_t v55 = v48;
    }
    else
    {
      unint64_t v55 = 0xE300000000000000;
      uint64_t v54 = 4271950;
    }
    uint64_t v123 = sub_100110D58(v54, v55, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v58 = v115;
    id v101 = v52;
    sub_1001D8D24(v114, v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D8D24(v114, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v59 = v105;
    _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v104, "  otd destination %s", v101, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v56 = v114;
    uint64_t v57 = v115;
    sub_1001D8D24(v114, v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D8D24(v56, v57);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v107(v110, v109);
  defaultLogger()();
  uint64_t v60 = v114;
  uint64_t v61 = v115;
  sub_1002090C4(v114, v115);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1002090C4(v60, v61);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v62 = Logger.logObject.getter();
  int v63 = static os_log_type_t.debug.getter();
  BOOL v64 = os_log_type_enabled(v62, (os_log_type_t)v63);
  id v110 = v62;
  if (v64)
  {
    BOOL v65 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    v124[0] = (uint64_t)v66;
    *(_DWORD *)BOOL v65 = 136315138;
    LODWORD(v105) = v63;
    unint64_t v104 = v66;
    if (v115)
    {
      unint64_t v67 = v119;
      swift_bridgeObjectRetain();
      uint64_t v68 = v120;
      unint64_t v69 = v67;
    }
    else
    {
      unint64_t v69 = 0xE300000000000000;
      uint64_t v68 = 4271950;
    }
    uint64_t v123 = sub_100110D58(v68, v69, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v71 = v114;
    uint64_t v72 = v115;
    unint64_t v102 = v65;
    sub_1001D8D24(v114, v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D8D24(v71, v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v73 = v110;
    _os_log_impl((void *)&_mh_execute_header, v110, (os_log_type_t)v105, "  tsid enc cert   %s", v102, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v107(v106, v109);
  }
  else
  {
    uint64_t v70 = v115;
    sub_1001D8D24(v60, v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D8D24(v60, v70);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v107(v106, v109);
  }
  uint64_t v74 = v25 + 64;
  uint64_t v75 = 1 << *(unsigned char *)(v25 + 32);
  uint64_t v76 = -1;
  if (v75 < 64) {
    uint64_t v76 = ~(-1 << v75);
  }
  unint64_t v77 = v76 & *(void *)(v25 + 64);
  int64_t v78 = (unint64_t)(v75 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v79 = 0;
  uint64_t v80 = (char *)_swiftEmptyArrayStorage;
  if (!v77) {
    goto LABEL_28;
  }
LABEL_27:
  unint64_t v81 = __clz(__rbit64(v77));
  v77 &= v77 - 1;
  for (unint64_t i = v81 | (v79 << 6); ; unint64_t i = __clz(__rbit64(v84)) + (v79 << 6))
  {
    uint64_t v86 = (uint64_t *)(*(void *)(v25 + 48) + 16 * i);
    uint64_t v88 = *v86;
    uint64_t v87 = v86[1];
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10010F3C4(0, *((void *)v80 + 2) + 1, 1, v80);
      uint64_t v80 = (char *)result;
    }
    unint64_t v90 = *((void *)v80 + 2);
    unint64_t v89 = *((void *)v80 + 3);
    if (v90 >= v89 >> 1)
    {
      uint64_t result = (uint64_t)sub_10010F3C4((char *)(v89 > 1), v90 + 1, 1, v80);
      uint64_t v80 = (char *)result;
    }
    *((void *)v80 + 2) = v90 + 1;
    uint64_t v91 = &v80[16 * v90];
    *((void *)v91 + 4) = v88;
    *((void *)v91 + 5) = v87;
    if (v77) {
      goto LABEL_27;
    }
LABEL_28:
    int64_t v83 = v79 + 1;
    if (__OFADD__(v79, 1))
    {
      __break(1u);
LABEL_57:
      __break(1u);
      return result;
    }
    if (v83 >= v78) {
      goto LABEL_52;
    }
    unint64_t v84 = *(void *)(v74 + 8 * v83);
    ++v79;
    if (!v84)
    {
      int64_t v79 = v83 + 1;
      if (v83 + 1 >= v78) {
        goto LABEL_52;
      }
      unint64_t v84 = *(void *)(v74 + 8 * v79);
      if (!v84)
      {
        int64_t v79 = v83 + 2;
        if (v83 + 2 >= v78) {
          goto LABEL_52;
        }
        unint64_t v84 = *(void *)(v74 + 8 * v79);
        if (!v84)
        {
          int64_t v79 = v83 + 3;
          if (v83 + 3 >= v78) {
            goto LABEL_52;
          }
          unint64_t v84 = *(void *)(v74 + 8 * v79);
          if (!v84)
          {
            int64_t v79 = v83 + 4;
            if (v83 + 4 >= v78) {
              goto LABEL_52;
            }
            unint64_t v84 = *(void *)(v74 + 8 * v79);
            if (!v84) {
              break;
            }
          }
        }
      }
    }
LABEL_45:
    unint64_t v77 = (v84 - 1) & v84;
  }
  int64_t v85 = v83 + 5;
  if (v85 < v78)
  {
    unint64_t v84 = *(void *)(v74 + 8 * v85);
    if (!v84)
    {
      while (1)
      {
        int64_t v79 = v85 + 1;
        if (__OFADD__(v85, 1)) {
          goto LABEL_57;
        }
        if (v79 >= v78) {
          goto LABEL_52;
        }
        unint64_t v84 = *(void *)(v74 + 8 * v79);
        ++v85;
        if (v84) {
          goto LABEL_45;
        }
      }
    }
    int64_t v79 = v85;
    goto LABEL_45;
  }
LABEL_52:
  swift_release();
  sub_1001D8D24(v114, v115);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v123 = (uint64_t)v80;
  id v92 = v103;
  defaultLogger()();
  unint64_t v93 = Logger.logObject.getter();
  os_log_type_t v94 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v93, v94))
  {
    Swift::String v95 = (uint8_t *)swift_slowAlloc();
    uint64_t v122 = swift_slowAlloc();
    *(_DWORD *)Swift::String v95 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v96 = Array.description.getter();
    unint64_t v98 = v97;
    swift_bridgeObjectRelease();
    uint64_t v121 = sub_100110D58(v96, v98, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "  bindings keys   %s", v95, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v107(v92, v109);
  return swift_bridgeObjectRelease();
}

id sub_1002089D4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C5E0(a1, a2);
  }
  if (a4 >> 60 == 15)
  {
    Class v19 = 0;
    if (a6) {
      goto LABEL_6;
    }
LABEL_9:
    v20.super.Class isa = 0;
    unint64_t v21 = a9;
    if (a7) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  Class v19 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000C5E0(a3, a4);
  if (!a6) {
    goto LABEL_9;
  }
LABEL_6:
  v20.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v21 = a9;
  if (a7)
  {
LABEL_7:
    v22.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_10:
  v22.super.Class isa = 0;
LABEL_11:
  if (v21 >> 60 == 15)
  {
    Class v23 = 0;
  }
  else
  {
    Class v23 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C5E0(a8, v21);
  }
  id v24 = [v9 initWithQAy7FB3BSYJUwsIc:isa Zwvxi3fDtAHqlF0d:v19 KufCqgU8RstLzBzT:a5 BGiN5h2SLMRO6B9R:v20.super.isa Jf7L4ypvXegQqMcE:v22.super.isa zeXRCfLmM5cdkEtz:v23];

  return v24;
}

uint64_t sub_100208B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AugmentedProfile(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100208BCC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AugmentedProfile(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100208C28(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = Data.init(base64Encoded:options:)();
  if (v11 >> 60 == 15)
  {
    uint64_t v22 = v4;
    unint64_t v23 = v11;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v20 = v12;
      uint64_t v16 = (uint8_t *)v15;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v26 = v19;
      unint64_t v21 = v6;
      *(_DWORD *)uint64_t v16 = 136446210;
      uint64_t v18 = v16 + 4;
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_100110D58(a1, a2, &v26);
      uint64_t v6 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Invalid assessment GUID: %{public}s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v12 = v20;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, void, uint64_t))(v24 + 104))(v6, enum case for DIPError.Code.invalidAssessmentGUID(_:), v22);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  return v12;
}

uint64_t sub_100208FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100727600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100209064(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100727600);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002090C4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100209128(uint64_t a1, unsigned __int8 a2, uint64_t a3, int a4)
{
  int v70 = a4;
  uint64_t v78 = a3;
  uint64_t v82 = a1;
  int v4 = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v75 = *(void *)(v5 - 8);
  uint64_t v76 = v5;
  __chkstk_darwin(v5);
  unint64_t v77 = &v69[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v73 = *(void *)(v7 - 8);
  uint64_t v74 = v7;
  __chkstk_darwin(v7);
  uint64_t v72 = &v69[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v80 = *(void *)(v9 - 8);
  uint64_t v81 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = &v69[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  int64_t v79 = &v69[-v13];
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v83 = v14;
  uint64_t v84 = v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v71 = &v69[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = &v69[-v19];
  uint64_t v21 = __chkstk_darwin(v18);
  unint64_t v23 = &v69[-v22];
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = &v69[-v25];
  __chkstk_darwin(v24);
  BOOL v28 = &v69[-v27];
  if (v4 == 9) {
    double v29 = 60.0;
  }
  else {
    double v29 = 3.0;
  }
  uint64_t v88 = *(void *)&v29;
  uint64_t v30 = self;
  id v31 = [v30 standardUserDefaults];
  v32._uint64_t countAndFlagsBits = 0xD000000000000019;
  v32._object = (void *)0x80000001006417C0;
  Swift::Bool v33 = NSUserDefaults.internalBool(forKey:)(v32);

  if (v33)
  {
    defaultLogger()();
    int v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Disabling ODN timeout due to user defaults setting", v36, 2u);
      swift_slowDealloc();
    }

    uint64_t v38 = v83;
    uint64_t v37 = v84;
    (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v28, v83);
    uint64_t v88 = 0x416312CFE0000000;
    double v29 = 9999999.0;
  }
  else
  {
    id v39 = [v30 standardUserDefaults];
    v40._object = (void *)0x80000001006417E0;
    v40._uint64_t countAndFlagsBits = 0xD000000000000018;
    Swift::Bool v41 = NSUserDefaults.internalBool(forKey:)(v40);

    if (v41)
    {
      defaultLogger()();
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      uint64_t v38 = v83;
      if (v44)
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Forcing ODN timeout due to user defaults settings", v45, 2u);
        swift_slowDealloc();
      }

      uint64_t v46 = v26;
      uint64_t v37 = v84;
      (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v46, v38);
      uint64_t v88 = 0x3F1A36E2EB1C432DLL;
      double v29 = 0.0001;
    }
    else
    {
      uint64_t v38 = v83;
      uint64_t v37 = v84;
      if (v70)
      {
        defaultLogger()();
        uint64_t v47 = Logger.logObject.getter();
        os_log_type_t v48 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v49 = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "ODN triggered at proofing time, setting time out to a default value", v49, 2u);
          swift_slowDealloc();
        }

        uint64_t v37 = v84;
        (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v23, v38);
        v50._uint64_t countAndFlagsBits = 0xD000000000000043;
        v50._object = (void *)0x8000000100641890;
        v51._uint64_t countAndFlagsBits = 0x6233346566333836;
        v51._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v51, v50);
        uint64_t v88 = 0x402E000000000000;
        double v29 = 15.0;
      }
    }
  }
  defaultLogger()();
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 134349056;
    double v87 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "now we wait %{public}f seconds for ODN", v54, 0xCu);
    swift_slowDealloc();
  }

  unint64_t v55 = *(void (**)(unsigned char *, uint64_t))(v37 + 8);
  v55(v20, v38);
  static DispatchTime.now()();
  swift_beginAccess();
  uint64_t v56 = v79;
  + infix(_:_:)();
  uint64_t v57 = *(void (**)(unsigned char *, uint64_t))(v80 + 8);
  uint64_t v58 = v12;
  uint64_t v59 = v81;
  v57(v58, v81);
  OS_dispatch_semaphore.wait(timeout:)();
  v57(v56, v59);
  uint64_t result = static DispatchTimeoutResult.== infix(_:_:)();
  if (result)
  {
    uint64_t v61 = v71;
    defaultLogger()();
    unint64_t v62 = v88;
    sub_10002D658();
    sub_10002D658();
    int v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v65 = 68157952;
      LODWORD(v85) = 2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v65 + 8) = 2048;
      unint64_t v85 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Timed out waiting for ODN data after %.*f seconds", (uint8_t *)v65, 0x12u);
      swift_slowDealloc();
    }

    v55(v61, v38);
    unint64_t v85 = 0;
    unint64_t v86 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v85 = 0xD000000000000022;
    unint64_t v86 = 0x8000000100641800;
    uint64_t v66 = v72;
    static Date.now.getter();
    sub_100209B18((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v67 = v74;
    v68._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v68);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v73 + 8))(v66, v67);
    (*(void (**)(unsigned char *, void, uint64_t))(v75 + 104))(v77, enum case for DIPError.Code.odnTimeout(_:), v76);
    type metadata accessor for DIPError();
    sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    swift_bridgeObjectRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  return result;
}

void sub_100209AF8()
{
  sub_100205910(v0);
}

uint64_t sub_100209B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100209B10()
{
  return swift_release();
}

uint64_t sub_100209B18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100209B60(void *result, void *a2)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100209BA8()
{
  return sub_10015C28C(&qword_100727618);
}

uint64_t sub_100209BB4(void *a1, uint64_t a2)
{
  sub_100007764(&qword_100727618);

  return sub_100206B24(a1, a2);
}

uint64_t sub_100209C38()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100209C70()
{
  sub_100204D44(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100209C7C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100209CB4(int a1, uint64_t a2, uint64_t a3)
{
  return sub_100204FF8(a1, a2, a3, *(uint64_t (**)(uint64_t))(v3 + 16), *(uint64_t (**)(uint64_t))(v3 + 24));
}

uint64_t sub_100209CBC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100209CFC()
{
  return sub_100206D38(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_100209D0C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100209D1C()
{
  return sub_100201104(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void **)(v0 + 64), *(NSObject **)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void **)(v0 + 104), *(NSObject **)(v0 + 112), *(unsigned char *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(uint64_t **)(v0 + 144));
}

uint64_t sub_100209D78()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 != 15) {
    sub_10000C5F4(*(void *)(v0 + 16), v1);
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100209DC0()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100209DF8()
{
  return _swift_deallocObject(v0, 20, 7);
}

uint64_t sub_100209E08()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100209E18()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100209E28()
{
  uint64_t v9 = type metadata accessor for DIPSignpost();
  uint64_t v1 = *(void *)(v9 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v12 + 16) & ~v12;
  unint64_t v3 = (((v2 + *(void *)(v1 + 64) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = v4;
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v6 = (v11 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11;
  unint64_t v7 = (((((((((((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v2, v9);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + v7)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v12 | v11 | 7);
}

unint64_t sub_10020A09C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, void (*a6)(char *, uint64_t), int a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(type metadata accessor for DIPSignpost() - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v14 = v13 + *(void *)(v12 + 64);
  unint64_t v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)(type metadata accessor for DispatchTime() - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + v19 + 8) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v22 = (*(void *)(v20 + 64) + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1002034B4(a1, a2, a3, a4, a5, a6, a7, a8, v8 + v13, *(void *)(v8 + v15), *(void **)(v8 + v15 + 8), *(unsigned char *)(v8 + v15 + 16), *(void *)(v8 + v16), *(void *)(v8 + v17), *(void *)(v8 + v18), *(void *)(v8 + v19), v8 + v21, *(void *)(v8 + v22), *(void *)(v8 + v23),
           *(void *)(v8 + v24),
           *(void *)(v8 + v25),
           *(void *)(v8 + v26),
           *(void *)(v8 + v27),
           *(void *)(v8 + v27 + 8),
           *(char **)(v8 + ((v27 + 23) & 0xFFFFFFFFFFFFFFF8)),
           *(void *)(v8 + ((((v27 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10020A2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = a2;
  swift_bridgeObjectRetain();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    Swift::String v32 = v5;
    unint64_t v16 = (uint8_t *)v15;
    *(void *)&long long v40 = swift_slowAlloc();
    uint64_t v31 = v9;
    *(_DWORD *)unint64_t v16 = 136446210;
    uint64_t v30 = v16 + 4;
    swift_getErrorValue();
    uint64_t v17 = Error.localizedDescription.getter();
    *(void *)&v39[0] = sub_100110D58(v17, v18, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ODN error : %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v32;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v31);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v20 = v33;
  uint64_t v19 = v34;
  (*(void (**)(char *, void, uint64_t))(v33 + 104))(v8, enum case for DIPError.PropertyKey.underlyingErrno(_:), v34);
  unint64_t v21 = (void *)_convertErrorToNSError(_:)();
  id v22 = [v21 code];

  Swift::Bool v41 = &type metadata for Int;
  *(void *)&long long v40 = v22;
  sub_1000078A8(&v40, v39);
  uint64_t v23 = v35;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v38 = v23;
  sub_1005622A8(v39, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v19);
  unint64_t v25 = (void *)_convertErrorToNSError(_:)();
  id v26 = [v25 code];

  unint64_t v27 = *(void (**)(char *, void, uint64_t))(v36 + 104);
  if (v26 == (id)-31) {
    v27(v5, enum case for DIPError.Code.odnDisconnected(_:), v37);
  }
  else {
    v27(v5, enum case for DIPError.Code.odnError(_:), v37);
  }
  type metadata accessor for DIPError();
  sub_100209B18((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v28 = swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  return v28;
}

uint64_t sub_10020A88C()
{
  return sub_1002071B0(v0);
}

uint64_t sub_10020A894()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10020A8A4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10020A924()
{
  return sub_1002045E8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void (**)(void *, void, uint64_t))(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96));
}

uint64_t sub_10020A964(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a4 >> 60 != 15)
  {
    sub_10000C5E0(result, a2);
    sub_10000C5F4(a3, a4);
    return sub_10000C5E0(a5, a6);
  }
  return result;
}

uint64_t destroy for ODNData(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >> 60 != 15) {
    sub_10000C5F4(*a1, v2);
  }
  uint64_t result = sub_10000C5F4(a1[2], a1[3]);
  unint64_t v4 = a1[5];
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = a1[4];
    return sub_10000C5F4(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for ODNData(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_10002CEB0(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_10002CEB0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2 + 4;
  unint64_t v9 = a2[5];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_10002CEB0(*v8, a2[5]);
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v9;
  }
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 56) = a2[7];
  return a1;
}

uint64_t assignWithCopy for ODNData(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >> 60 == 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v5 = *(void *)a2;
      sub_10002CEB0(*(void *)a2, *(void *)(a2 + 8));
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v4;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
    sub_10004D25C(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)a2;
  sub_10002CEB0(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v4;
  sub_10000C5F4(v7, v8);
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);
  sub_10002CEB0(v9, v10);
  uint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  sub_10000C5F4(v11, v12);
  unint64_t v13 = (uint64_t *)(a2 + 32);
  unint64_t v14 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) >> 60 != 15)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v16 = *v13;
      sub_10002CEB0(*v13, *(void *)(a2 + 40));
      uint64_t v17 = *(void *)(a1 + 32);
      unint64_t v18 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = v16;
      *(void *)(a1 + 40) = v14;
      sub_10000C5F4(v17, v18);
      goto LABEL_15;
    }
    sub_10004D25C(a1 + 32);
    goto LABEL_13;
  }
  if (v14 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v13;
    goto LABEL_15;
  }
  uint64_t v15 = *v13;
  sub_10002CEB0(*v13, *(void *)(a2 + 40));
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v14;
LABEL_15:
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for DIPClientGUIDSeeds(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ODNData(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_10004D25C(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  sub_10000C5F4(v6, v4);
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10000C5F4(v7, v8);
  uint64_t v9 = (void *)(a2 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 40);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = *v9;
      *(void *)(a1 + 40) = v11;
      sub_10000C5F4(v12, v10);
      goto LABEL_11;
    }
    sub_10004D25C(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
LABEL_11:
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ODNData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 24) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 24) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ODNData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2)
    {
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ODNData()
{
  return &type metadata for ODNData;
}

void *sub_10020AE54(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  __chkstk_darwin(v12);
  unint64_t v14 = (id *)((char *)&v29.receiver - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4[3] = a2;
  v4[4] = 0;
  v4[2] = a1;
  if (a3)
  {
    v4[6] = 0;
  }
  else
  {
    uint64_t v15 = (objc_class *)type metadata accessor for IdentitySelfHealer();
    uint64_t v16 = (char *)objc_allocWithZone(v15);
    uint64_t v17 = &v16[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    v29.id receiver = v16;
    v29.super_class = v15;
    id v18 = [super init];
    v4[6] = v18;
    uint64_t v19 = (void *)((char *)v14 + v12[6]);
    *uint64_t v19 = 0x3FD0000000000000;
    uint64_t v20 = enum case for DIPBackoffStrategy.exponential(_:);
    uint64_t v21 = type metadata accessor for DIPBackoffStrategy();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v19, v20, v21);
    *unint64_t v14 = 0x4024000000000000;
    v14[1] = 1;
    *((unsigned char *)v14 + v12[7]) = 0;
    *((unsigned char *)v14 + v12[8]) = 0;
    *((unsigned char *)v14 + v12[9]) = 0;
    id v22 = (void *)((char *)v14 + v12[10]);
    *id v22 = 0;
    v22[1] = 0;
    id v23 = v18;
    UUID.init()();
    uint64_t v24 = UUID.uuidString.getter();
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    id v27 = objc_allocWithZone((Class)type metadata accessor for DIPTopekaWebService());
    a3 = (char *)sub_1002B92C4(v24, v26, (uint64_t)v14);
    *(void *)&a3[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer + 8] = &off_100708438;
    swift_unknownObjectWeakAssign();
  }
  v4[5] = a3;
  return v4;
}

uint64_t sub_10020B0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a1;
  v4[5] = a4;
  uint64_t v5 = type metadata accessor for DIPCertUsage();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPOIDVerifier();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v4[12] = v7;
  v4[13] = *(void *)(v7 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v4[15] = v8;
  v4[16] = *(void *)(v8 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_10020B2CC, 0, 0);
}

uint64_t sub_10020B2CC()
{
  uint64_t v40 = v0;
  defaultLogger()();
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v35 = *(void *)(v0 + 128);
    uint64_t v36 = *(void *)(v0 + 120);
    uint64_t v38 = *(void *)(v0 + 160);
    uint64_t v3 = *(void *)(v0 + 40);
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 136315138;
    uint64_t v5 = *(void *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = sub_100110D58(v5, v6, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetching encryption certificate for %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v7(v38, v36);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v9 = *(void *)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 128);
    swift_release();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  *(void *)(v0 + 168) = v7;
  unint64_t v11 = self;
  *(void *)(v0 + 176) = v11;
  id v12 = [v11 standardUserDefaults];
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 stringForKey:v13];

  if (v14)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    defaultLogger()();
    swift_bridgeObjectRetain_n();
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(void *)(v0 + 152);
    uint64_t v22 = *(void *)(v0 + 120);
    if (v20)
    {
      uint64_t v37 = *(void *)(v0 + 120);
      uint64_t v23 = v15;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 16) = sub_100110D58(v23, v17, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Merchant enc cert injected through user defaults: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v15 = v23;
      swift_slowDealloc();

      uint64_t v25 = v37;
      uint64_t v26 = v21;
    }
    else
    {
      swift_bridgeObjectRelease_n();

      uint64_t v26 = v21;
      uint64_t v25 = v22;
    }
    v7(v26, v25);
    sub_100007764(&qword_100730CD0);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_100610730;
    *(void *)(v32 + 32) = v15;
    *(void *)(v32 + 40) = v17;
    uint64_t v33 = decodeCertificateChain(fromBase64DER:)();
    swift_bridgeObjectRelease();
    **(void **)(v0 + 32) = v33;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }
  else
  {
    uint64_t v27 = *(void *)(v0 + 40);
    uint64_t v28 = *(void *)(v27 + 16);
    *(void *)(v0 + 184) = v28;
    uint64_t v29 = *(void *)(v27 + 24);
    *(void *)(v0 + 192) = v29;
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_10020B934;
    return sub_1002C8A10(v28, v29);
  }
}

uint64_t sub_10020B934(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 216) = v1;
  swift_task_dealloc();
  if (v1) {
    unint64_t v4 = sub_10020C468;
  }
  else {
    unint64_t v4 = sub_10020BA48;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10020BA48()
{
  uint64_t v1 = *(void *)(v0 + 216);
  unint64_t v2 = decodeCertificateChain(fromBase64DER:)();
  *(void *)(v0 + 224) = v2;
  if (!v1)
  {
    uint64_t v5 = *(void **)(v0 + 176);
    swift_bridgeObjectRelease();
    id v6 = [v5 standardUserDefaults];
    v7._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v7._object = (void *)0x8000000100641D30;
    Swift::Bool v8 = NSUserDefaults.internalBool(forKey:)(v7);

    if (v8)
    {
      defaultLogger()();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        unint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Skipping merchantId - uid match in RP Encryption certificate", v11, 2u);
        swift_slowDealloc();
      }
      id v12 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
      uint64_t v13 = *(void *)(v0 + 144);
      uint64_t v14 = *(void *)(v0 + 120);

      v12(v13, v14);
      goto LABEL_11;
    }
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      if (v27)
      {
LABEL_17:
        if ((v2 & 0xC000000000000001) != 0)
        {
          id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return DIPOIDVerifier.verifyChain(_:forUsage:)(v27, v28);
          }
          id v29 = *(id *)(v2 + 32);
        }
        uint64_t v30 = v29;
        swift_bridgeObjectRelease();
        Swift::String_optional v31 = SecCertificateRef.uid()();

        if (v31.value._object)
        {
          if (v31.value._countAndFlagsBits == *(void *)(v0 + 184) && v31.value._object == *(void **)(v0 + 192))
          {
            swift_bridgeObjectRelease();
LABEL_11:
            id v15 = [*(id *)(v0 + 176) standardUserDefaults];
            v16._uint64_t countAndFlagsBits = 0xD000000000000028;
            v16._object = (void *)0x8000000100641DC0;
            Swift::Bool v17 = NSUserDefaults.internalBool(forKey:)(v16);

            if (v17)
            {
              defaultLogger()();
              id v18 = Logger.logObject.getter();
              os_log_type_t v19 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v18, v19))
              {
                BOOL v20 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)BOOL v20 = 0;
                _os_log_impl((void *)&_mh_execute_header, v18, v19, "Skipping certificate validation of RP Encryption certificate", v20, 2u);
                swift_slowDealloc();
              }
              uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
              uint64_t v22 = *(void *)(v0 + 136);
              uint64_t v23 = *(void *)(v0 + 120);

              v21(v22, v23);
              v24._uint64_t countAndFlagsBits = 0xD000000000000072;
              v24._object = (void *)0x8000000100641EB0;
              v25._uint64_t countAndFlagsBits = 0x3833636461346630;
              v25._object = (void *)0xE800000000000000;
              logMilestone(tag:description:)(v25, v24);
              **(void **)(v0 + 32) = *(void *)(v0 + 224);
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
              goto LABEL_4;
            }
            uint64_t v33 = *(void *)(v0 + 56);
            uint64_t v32 = *(void *)(v0 + 64);
            uint64_t v34 = *(void *)(v0 + 48);
            DIPOIDVerifier.init()();
            (*(void (**)(uint64_t, void, uint64_t))(v33 + 104))(v32, enum case for DIPCertUsage.identityMerchantID(_:), v34);
            uint64_t v35 = (void *)swift_task_alloc();
            *(void *)(v0 + 232) = v35;
            void *v35 = v0;
            v35[1] = sub_10020C160;
            uint64_t v28 = *(void *)(v0 + 64);
            uint64_t v27 = v2;
            return DIPOIDVerifier.verifyChain(_:forUsage:)(v27, v28);
          }
          char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v36) {
            goto LABEL_11;
          }
          uint64_t v38 = *(void *)(v0 + 104);
          uint64_t v37 = *(void *)(v0 + 112);
          uint64_t v39 = *(void *)(v0 + 96);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, void, uint64_t))(v38 + 104))(v37, enum case for DIPError.Code.digitalPresentmentInvalidMerchantIDInCertificate(_:), v39);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_10000C588();
          swift_allocError();
LABEL_32:
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          goto LABEL_3;
        }
LABEL_31:
        uint64_t v41 = *(void *)(v0 + 104);
        uint64_t v40 = *(void *)(v0 + 112);
        uint64_t v42 = *(void *)(v0 + 96);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v40, enum case for DIPError.Code.digitalPresentmentMissingUIDInCertificate(_:), v42);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v26 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v27 = swift_bridgeObjectRetain();
      if (v26) {
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  swift_bridgeObjectRelease();
LABEL_3:
  (*(void (**)(void, void, void))(*(void *)(v0 + 104) + 104))(*(void *)(v0 + 112), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 96));
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
LABEL_4:
  return v3();
}

uint64_t sub_10020C160(void *a1)
{
  unint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 80);
  uint64_t v6 = *(void *)(*(void *)v2 + 56);
  *(void *)(*(void *)v2 + 240) = v1;
  swift_task_dealloc();
  Swift::String v7 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  Swift::Bool v8 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  if (v1)
  {
    uint64_t v9 = v4[11];
    uint64_t v11 = v4[8];
    uint64_t v10 = v4[9];
    uint64_t v12 = v4[6];
    swift_bridgeObjectRelease();
    (*v7)(v11, v12);
    (*v8)(v9, v10);
    uint64_t v13 = sub_10020C604;
  }
  else
  {
    uint64_t v14 = v4[11];
    uint64_t v16 = v4[8];
    uint64_t v15 = v4[9];
    uint64_t v17 = v4[6];

    (*v7)(v16, v17);
    (*v8)(v14, v15);
    uint64_t v13 = sub_10020C344;
  }
  return _swift_task_switch(v13, 0, 0);
}

uint64_t sub_10020C344()
{
  v1._uint64_t countAndFlagsBits = 0xD000000000000074;
  v1._object = (void *)0x8000000100641E30;
  v2._uint64_t countAndFlagsBits = 0x6361383661633664;
  v2._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v2, v1);
  v3._object = (void *)0x8000000100641EB0;
  v4._uint64_t countAndFlagsBits = 0x3833636461346630;
  v4._object = (void *)0xE800000000000000;
  v3._uint64_t countAndFlagsBits = 0xD000000000000072;
  logMilestone(tag:description:)(v4, v3);
  **(void **)(v0 + 32) = *(void *)(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10020C468()
{
  (*(void (**)(void, void, void))(v0[13] + 104))(v0[14], enum case for DIPError.Code.internalError(_:), v0[12]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10020C604()
{
  (*(void (**)(void, void, void))(v0[13] + 104))(v0[14], enum case for DIPError.Code.digitalPresentmentInvalidMerchantCertificateChain(_:), v0[12]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(void, void, void))(v0[13] + 104))(v0[14], enum case for DIPError.Code.internalError(_:), v0[12]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10020C860()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_10020C920, 0, 0);
}

uint64_t sub_10020C920()
{
  uint64_t v1 = *(void *)(v0[3] + 32);
  v0[7] = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[8] = v2;
    uint64_t v3 = sub_100007764((uint64_t *)&unk_100723650);
    uint64_t v4 = sub_100007764((uint64_t *)&unk_100723450);
    *uint64_t v2 = v0;
    v2[1] = sub_10020CB2C;
    return Task.value.getter(v0 + 2, v1, v3, v4, &protocol self-conformance witness table for Error);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10020CB2C()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10020CCB4;
  }
  else {
    uint64_t v2 = sub_10020CC40;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10020CC40()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10020CCB4()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10020CE04()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DigitalPresentmentEncryptionCertificateFetcher()
{
  return self;
}

uint64_t sub_10020CE78()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingExpirationActionProvider()
{
  return self;
}

uint64_t sub_10020CEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a2;
  uint64_t v46 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  __chkstk_darwin(v5);
  uint64_t v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100727810);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = sub_100007764((uint64_t *)&unk_100723978);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v18 = (char *)&v41 - v17;
  uint64_t v45 = v3;
  sub_100048D6C(a3, (uint64_t)v12, &qword_100727810);
  uint64_t v19 = type metadata accessor for ActionRequest(0);
  BOOL v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48);
  if (v20(v12, 1, v19) == 1)
  {
    swift_retain();
    uint64_t v21 = &qword_100727810;
    uint64_t v22 = (uint64_t)v12;
LABEL_5:
    sub_10000C6CC(v22, v21);
    uint64_t v41 = 0;
    uint64_t v24 = 0;
    goto LABEL_7;
  }
  sub_100048D6C((uint64_t)&v12[*(int *)(v19 + 20)], (uint64_t)v18, (uint64_t *)&unk_100723978);
  swift_retain();
  sub_10020D46C((uint64_t)v12, type metadata accessor for ActionRequest);
  uint64_t v23 = type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v18, 1, v23) == 1)
  {
    uint64_t v21 = (uint64_t *)&unk_100723978;
    uint64_t v22 = (uint64_t)v18;
    goto LABEL_5;
  }
  uint64_t v24 = *((void *)v18 + 27);
  uint64_t v41 = *((void *)v18 + 26);
  swift_bridgeObjectRetain();
  sub_10020D46C((uint64_t)v18, type metadata accessor for PendingActionContext);
LABEL_7:
  sub_100048D6C(a3, (uint64_t)v10, &qword_100727810);
  unsigned int v25 = v20(v10, 1, v19);
  uint64_t v26 = v42;
  if (v25 == 1)
  {
    sub_10000C6CC((uint64_t)v10, &qword_100727810);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = v46;
  }
  else
  {
    sub_100048D6C((uint64_t)&v10[*(int *)(v19 + 20)], (uint64_t)v16, (uint64_t *)&unk_100723978);
    sub_10020D46C((uint64_t)v10, type metadata accessor for ActionRequest);
    uint64_t v30 = type metadata accessor for PendingActionContext(0);
    int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v16, 1, v30);
    uint64_t v29 = v46;
    if (v31 == 1)
    {
      sub_10000C6CC((uint64_t)v16, (uint64_t *)&unk_100723978);
      uint64_t v27 = 0;
      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v27 = *((void *)v16 + 28);
      uint64_t v28 = *((void *)v16 + 29);
      swift_bridgeObjectRetain();
      sub_10020D46C((uint64_t)v16, type metadata accessor for PendingActionContext);
    }
  }
  uint64_t v32 = v27;
  uint64_t v33 = v47;
  sub_10051BB20(v41, v24, v32, v28, v29, v47, 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  defaultLogger()();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    char v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Attempting to start clearing the proofing session and the created credential", v36, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v43 + 8))(v26, v44);
  swift_retain();
  sub_100431D14(v29, v33, 0, 1);
  swift_release();
  uint64_t v37 = type metadata accessor for IdentityManagementSessionDelegate();
  id v38 = [self defaultCenter];
  NSString v39 = String._bridgeToObjectiveC()();
  uint64_t v48 = v37;
  sub_100007764((uint64_t *)&unk_10072E590);
  [v38 postNotificationName:v39 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

  return swift_unknownObjectRelease();
}

uint64_t sub_10020D46C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10020D4CC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Setting up IdentityProvisioningStreamListener", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  aBlock[4] = sub_10020DBD0;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D952C;
  aBlock[3] = &unk_1006FB0F8;
  uint64_t v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  uint64_t v17 = String.utf8CString.getter();
  xpc_set_event_stream_handler((const char *)(v17 + 32), a1, v16);
  swift_release();
  _Block_release(v16);
}

uint64_t sub_10020D6F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  Swift::String v50 = (char *)&v49 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v49 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v49 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v49 - v18;
  defaultLogger()();
  BOOL v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Received an event for IdentityProvisioningStreamListener", v22, 2u);
    swift_slowDealloc();
  }

  uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23(v19, v5);
  uint64_t v24 = (const char *)XPC_EVENT_KEY_NAME.getter();
  string = xpc_dictionary_get_string(a1, v24);
  uint64_t v26 = v5;
  if (string)
  {
    if (!strcmp(string, "Identity Provisioning Complete"))
    {
      uint64_t v34 = sub_10020DCA8(a1);
      if (v35 >> 60 == 15)
      {
        defaultLogger()();
        char v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          id v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v38 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to retrieve the data from the xpc event. Cannot perform Post Provisioning Cleanup", v38, 2u);
          swift_slowDealloc();
        }

        uint64_t v30 = v14;
      }
      else
      {
        uint64_t v39 = v34;
        unint64_t v40 = v35;
        id v41 = [self standardUserDefaults:v49];
        v42._object = (void *)0x8000000100642070;
        v42._uint64_t countAndFlagsBits = 0xD000000000000024;
        Swift::Bool v43 = NSUserDefaults.internalBool(forKey:)(v42);

        if (!v43)
        {
          sub_1004C8CEC(v39, v40);
          return sub_10000C5E0(v39, v40);
        }
        uint64_t v44 = v50;
        defaultLogger()();
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v47 = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Internal Setting to ignore provisioning completion has been enabled. Will ignore the incoming provisioning stream", v47, 2u);
          swift_slowDealloc();
        }
        sub_10000C5E0(v39, v40);

        uint64_t v30 = v44;
      }
    }
    else
    {
      defaultLogger()();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Invalid event name. Cannot perform Post Provisioning Cleanup", v29, 2u);
        swift_slowDealloc();
      }

      uint64_t v30 = v9;
    }
  }
  else
  {
    defaultLogger()();
    int v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "provisioning event doesn't exist", v33, 2u);
      swift_slowDealloc();
    }

    uint64_t v30 = v17;
  }
  return ((uint64_t (*)(char *, uint64_t))v23)(v30, v26);
}

uint64_t sub_10020DB90()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10020DBD0(void *a1)
{
  return sub_10020D6F0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10020DBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10020DBEC()
{
  return swift_release();
}

uint64_t sub_10020DBF4(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_10014D31C(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_10020DCA8(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&length - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&length - v7;
  xpc_type_t type = xpc_get_type(a1);
  if (type != (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
  {
    defaultLogger()();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Event Identity Provisioning Complete is not of type dictionary. Cannot perform Post Provisioning Cleanup", v12, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return 0;
  }
  size_t length = 0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  data = xpc_dictionary_get_data(a1, (const char *)(v14 + 32), &length);
  swift_release();
  if (!data)
  {
    defaultLogger()();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to get the receipt data for the key PKPassLibraryPendingProvisioningFinishedReceiptKey. Cannot perform Post Provisioning Cleanup", v18, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return 0;
  }
  return sub_10020DBF4(data, length);
}

uint64_t destroy for IdentityProvisioningStreamListener()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void *_s8coreidvd34IdentityProvisioningStreamListenerVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for IdentityProvisioningStreamListener(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for IdentityProvisioningStreamListener(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for IdentityProvisioningStreamListener()
{
  return &type metadata for IdentityProvisioningStreamListener;
}

uint64_t sub_10020E06C()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007764(&qword_100720A68);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004440C(v0, qword_100727818);
  uint64_t v6 = sub_1000443D4(v0, (uint64_t)qword_100727818);
  type metadata accessor for AsyncCoreDataStore();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v8 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 URLForResource:v9 withExtension:v10];

  if (v11)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v12(v5, v3, v0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v5, 0, 1, v0);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48))(v5, 1, v0);
    if (result != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v12)(v6, v5, v0);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v5, 1, 1, v0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10020E2EC(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  __chkstk_darwin(v1);
  uint64_t v30 = type metadata accessor for AsyncCoreDataStore.StoreType();
  uint64_t v28 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v29 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  NSString v10 = (char *)&v26 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v26 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  sub_100568D54((uint64_t)&v26 - v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
  static URL.libraryDirectory.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, v3);
  URL.appendingPathComponent(_:)();
  uint64_t v27 = v16;
  v16(v10, v3);
  if (qword_10071F4D8 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_1000443D4(v3, (uint64_t)qword_100727818);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v18(v10, v17, v3);
  v18(v7, (uint64_t)v13, v3);
  uint64_t v19 = v28;
  BOOL v20 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v26 = v13;
  uint64_t v21 = v30;
  uint64_t v22 = v31;
  v20(v29, v31, v30);
  type metadata accessor for AsyncCoreDataStore();
  swift_allocObject();
  uint64_t v23 = NSURLFileProtectionComplete;
  uint64_t v24 = AsyncCoreDataStore.init(persistentStoreName:modelURL:databaseURL:storeType:urlFileProtection:)();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v21);
  v27(v26, v3);
  uint64_t result = v32;
  *(void *)(v32 + 16) = v24;
  return result;
}

uint64_t type metadata accessor for DaemonBiomeCoreDataStore()
{
  return self;
}

uint64_t sub_10020E74C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = a2;
  uint64_t v7 = (char *)(a2 >> 62);
  unint64_t v75 = HIDWORD(a1);
  BOOL v8 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v78 = v8;
  size_t __n = BYTE6(a2);
  uint64_t v76 = (int)a1;
  size_t v77 = HIDWORD(a1) - (int)a1;
  uint64_t v74 = a1 >> 32;
  uint64_t v70 = (a1 >> 32) - (int)a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = (unint64_t *)(a3 + 40);
  unint64_t v72 = HIDWORD(v5);
  unint64_t v73 = v5 >> 40;
  uint64_t v80 = v7;
  unint64_t v71 = v5;
  int v79 = (int)v7;
  while (2)
  {
    uint64_t v11 = *(v9 - 1);
    unint64_t v10 = *v9;
    unint64_t v12 = *v9 >> 62;
    v9 += 2;
    uint64_t v13 = 0;
    switch(v12)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
        }
        uint64_t v13 = HIDWORD(v11) - (int)v11;
LABEL_14:
        sub_10002CEB0(v11, v10);
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 24);
        uint64_t v13 = v14 - v15;
        if (!__OFSUB__(v14, v15)) {
          goto LABEL_14;
        }
        goto LABEL_121;
      case 3uLL:
        break;
      default:
        uint64_t v13 = BYTE6(v10);
        break;
    }
    size_t v16 = __n;
    switch(v80)
    {
      case 1:
        size_t v16 = v77;
        if (v78) {
          goto LABEL_122;
        }
        goto LABEL_19;
      case 2:
        uint64_t v18 = *(void *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 24);
        BOOL v19 = __OFSUB__(v17, v18);
        size_t v16 = v17 - v18;
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_123;
      case 3:
        if (v13) {
          goto LABEL_7;
        }
        goto LABEL_118;
      default:
LABEL_19:
        if (v13 != v16)
        {
LABEL_7:
          sub_10000C5F4(v11, v10);
LABEL_8:
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        if (v13 >= 1)
        {
          switch((int)v12)
          {
            case 1:
              if ((int)v11 > v11 >> 32) {
                goto LABEL_124;
              }
              uint64_t v24 = __DataStorage._bytes.getter();
              if (v24)
              {
                uint64_t v25 = v24;
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v11, v26)) {
                  goto LABEL_126;
                }
                uint64_t v27 = (const void *)(v25 + (int)v11 - v26);
              }
              else
              {
                uint64_t v27 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v27) {
                  goto LABEL_154;
                }
                int v34 = memcmp(v27, __s1, __n);
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_135;
                }
                swift_retain();
                id v41 = (char *)__DataStorage._bytes.getter();
                if (v41)
                {
                  uint64_t v42 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v42)) {
                    goto LABEL_142;
                  }
                  v41 += v76 - v42;
                }
                uint64_t v43 = __DataStorage._length.getter();
                size_t v44 = v70;
                if (v43 < v70) {
                  size_t v44 = v43;
                }
                if (!v27) {
                  goto LABEL_147;
                }
                if (!v41) {
                  goto LABEL_148;
                }
                int v34 = memcmp(v27, v41, v44);
                sub_10000C5F4(a1, v5);
LABEL_101:
                sub_10000C5F4(v11, v10);
LABEL_102:
                if (!v34) {
                  goto LABEL_119;
                }
                goto LABEL_8;
              }
              uint64_t v61 = *(void *)(a1 + 16);
              uint64_t v62 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              int v63 = (char *)__DataStorage._bytes.getter();
              if (v63)
              {
                uint64_t v64 = __DataStorage._offset.getter();
                if (__OFSUB__(v61, v64)) {
                  goto LABEL_141;
                }
                v63 += v61 - v64;
              }
              BOOL v19 = __OFSUB__(v62, v61);
              int64_t v65 = v62 - v61;
              if (v19) {
                goto LABEL_136;
              }
              uint64_t v66 = __DataStorage._length.getter();
              if (v66 >= v65) {
                size_t v67 = v65;
              }
              else {
                size_t v67 = v66;
              }
              if (!v27) {
                goto LABEL_155;
              }
              unint64_t v5 = v71;
              LODWORD(v7) = v79;
              if (!v63) {
                goto LABEL_156;
              }
              int v40 = memcmp(v27, v63, v67);
              swift_release();
              swift_release();
LABEL_114:
              sub_10000C5F4(v11, v10);
              if (!v40) {
                goto LABEL_119;
              }
              break;
            case 2:
              uint64_t v28 = *(void *)(v11 + 16);
              swift_retain();
              swift_retain();
              uint64_t v29 = (char *)__DataStorage._bytes.getter();
              if (!v29) {
                goto LABEL_36;
              }
              uint64_t v30 = __DataStorage._offset.getter();
              if (__OFSUB__(v28, v30)) {
                goto LABEL_125;
              }
              v29 += v28 - v30;
LABEL_36:
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v29) {
                  goto LABEL_151;
                }
                int v34 = memcmp(v29, __s1, __n);
                swift_release();
                swift_release();
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_129;
                }
                swift_retain();
                uint64_t v7 = (char *)__DataStorage._bytes.getter();
                if (v7)
                {
                  uint64_t v31 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v31)) {
                    goto LABEL_140;
                  }
                  v7 += v76 - v31;
                }
                uint64_t v32 = __DataStorage._length.getter();
                size_t v33 = v70;
                if (v32 < v70) {
                  size_t v33 = v32;
                }
                if (!v29) {
                  goto LABEL_144;
                }
                if (!v7) {
                  goto LABEL_145;
                }
                int v34 = memcmp(v29, v7, v33);
                sub_10000C5F4(a1, v5);
                swift_release();
                swift_release();
                sub_10000C5F4(v11, v10);
                LODWORD(v7) = v79;
                goto LABEL_102;
              }
              uint64_t v55 = *(void *)(a1 + 16);
              uint64_t v69 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v56 = (char *)__DataStorage._bytes.getter();
              if (v56)
              {
                uint64_t v57 = __DataStorage._offset.getter();
                if (__OFSUB__(v55, v57)) {
                  goto LABEL_139;
                }
                v56 += v55 - v57;
              }
              BOOL v19 = __OFSUB__(v69, v55);
              int64_t v58 = v69 - v55;
              if (v19) {
                goto LABEL_134;
              }
              uint64_t v59 = __DataStorage._length.getter();
              if (v59 >= v58) {
                size_t v60 = v58;
              }
              else {
                size_t v60 = v59;
              }
              if (!v29) {
                goto LABEL_152;
              }
              unint64_t v5 = v71;
              if (!v56) {
                goto LABEL_153;
              }
              int v39 = memcmp(v29, v56, v60);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
LABEL_96:
              sub_10000C5F4(v11, v10);
LABEL_97:
              LODWORD(v7) = v79;
              if (!v39) {
                goto LABEL_119;
              }
              goto LABEL_8;
            case 3:
              memset(__s1, 0, 14);
              if (!v7) {
                goto LABEL_56;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_128;
                }
                sub_10002CEB0(a1, v5);
                uint64_t v35 = __DataStorage._bytes.getter();
                if (!v35) {
                  goto LABEL_146;
                }
                uint64_t v21 = v35;
                uint64_t v36 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v36;
                if (__OFSUB__(v76, v36)) {
                  goto LABEL_133;
                }
LABEL_52:
                uint64_t v37 = __DataStorage._length.getter();
                if (v37 >= v70) {
                  size_t v38 = v70;
                }
                else {
                  size_t v38 = v37;
                }
                int v39 = memcmp(__s1, (const void *)(v21 + v23), v38);
                sub_10000C5F4(a1, v5);
                goto LABEL_96;
              }
              uint64_t v51 = *(void *)(a1 + 16);
              uint64_t v52 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v53 = __DataStorage._offset.getter();
                if (__OFSUB__(v51, v53)) {
                  goto LABEL_138;
                }
                v47 += v51 - v53;
              }
              BOOL v19 = __OFSUB__(v52, v51);
              int64_t v49 = v52 - v51;
              if (v19) {
                goto LABEL_131;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_150;
              }
LABEL_80:
              if (v50 >= v49) {
                size_t v54 = v49;
              }
              else {
                size_t v54 = v50;
              }
              int v39 = memcmp(__s1, v47, v54);
              swift_release();
              swift_release();
              sub_10000C5F4(v11, v10);
              unint64_t v5 = v71;
              goto LABEL_97;
            default:
              __s1[0] = v11;
              LOWORD(__s1[1]) = v10;
              BYTE2(__s1[1]) = BYTE2(v10);
              BYTE3(__s1[1]) = BYTE3(v10);
              BYTE4(__s1[1]) = BYTE4(v10);
              BYTE5(__s1[1]) = BYTE5(v10);
              if (!v7)
              {
LABEL_56:
                __int16 __s2 = a1;
                char v83 = BYTE2(a1);
                char v84 = BYTE3(a1);
                char v85 = v75;
                char v86 = BYTE5(a1);
                char v87 = BYTE6(a1);
                char v88 = HIBYTE(a1);
                __int16 v89 = v5;
                char v90 = BYTE2(v5);
                char v91 = BYTE3(v5);
                char v92 = v72;
                char v93 = v73;
                int v40 = memcmp(__s1, &__s2, __n);
                goto LABEL_114;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_127;
                }
                sub_10002CEB0(a1, v5);
                uint64_t v20 = __DataStorage._bytes.getter();
                if (!v20)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
                  JUMPOUT(0x10020F09CLL);
                }
                uint64_t v21 = v20;
                uint64_t v22 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v22;
                if (__OFSUB__(v76, v22)) {
                  goto LABEL_132;
                }
                goto LABEL_52;
              }
              uint64_t v45 = *(void *)(a1 + 16);
              uint64_t v46 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v48 = __DataStorage._offset.getter();
                if (__OFSUB__(v45, v48)) {
                  goto LABEL_137;
                }
                v47 += v45 - v48;
              }
              BOOL v19 = __OFSUB__(v46, v45);
              int64_t v49 = v46 - v45;
              if (v19) {
                goto LABEL_130;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_149;
              }
              goto LABEL_80;
          }
          goto LABEL_8;
        }
LABEL_118:
        sub_10000C5F4(v11, v10);
LABEL_119:
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

uint64_t sub_10020F0CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10020F194(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (2)
  {
    uint64_t v6 = a2 + v5++;
    unint64_t v7 = 0xEA0000000000656DLL;
    unint64_t v8 = 0x616E2D6E65766967;
    switch(*(unsigned char *)(v6 + 32))
    {
      case 1:
        unint64_t v8 = 0x6E2D796C696D6166;
        unint64_t v7 = 0xEB00000000656D61;
        break;
      case 2:
        unint64_t v7 = 0xE300000000000000;
        unint64_t v8 = 7890291;
        break;
      case 3:
        unint64_t v7 = 0xE800000000000000;
        unint64_t v8 = 0x7469617274726F70;
        break;
      case 4:
        unint64_t v7 = 0xE700000000000000;
        unint64_t v8 = 0x73736572646461;
        break;
      case 5:
        unint64_t v7 = 0x8000000100629810;
        unint64_t v8 = 0xD000000000000011;
        break;
      case 6:
        unint64_t v8 = 0xD00000000000001ELL;
        unint64_t v7 = 0x8000000100629830;
        break;
      case 7:
        unint64_t v8 = 0xD000000000000018;
        unint64_t v7 = 0x8000000100629850;
        break;
      case 8:
        unint64_t v8 = 0x746E656D75636F64;
        unint64_t v7 = 0xEF7265626D756E2DLL;
        break;
      case 9:
        unint64_t v8 = 0xD000000000000013;
        unint64_t v7 = 0x8000000100629880;
        break;
      case 0xA:
        unint64_t v8 = 0xD000000000000012;
        unint64_t v7 = 0x80000001006298A0;
        break;
      case 0xB:
        unint64_t v7 = 0xE300000000000000;
        unint64_t v8 = 6645601;
        break;
      case 0xC:
        unint64_t v8 = 0x2D666F2D65746164;
        unint64_t v7 = 0xED00006874726962;
        break;
      case 0xD:
        unint64_t v8 = 0xD000000000000014;
        unint64_t v7 = 0x80000001006298D0;
        break;
      default:
        break;
    }
    uint64_t v9 = 0x616E2D6E65766967;
    unint64_t v10 = 0xEA0000000000656DLL;
    switch(a1)
    {
      case 1:
        unint64_t v10 = 0xEB00000000656D61;
        if (v8 == 0x6E2D796C696D6166) {
          goto LABEL_41;
        }
        goto LABEL_42;
      case 2:
        unint64_t v10 = 0xE300000000000000;
        if (v8 != 7890291) {
          goto LABEL_42;
        }
        goto LABEL_41;
      case 3:
        unint64_t v10 = 0xE800000000000000;
        if (v8 != 0x7469617274726F70) {
          goto LABEL_42;
        }
        goto LABEL_41;
      case 4:
        unint64_t v10 = 0xE700000000000000;
        if (v8 != 0x73736572646461) {
          goto LABEL_42;
        }
        goto LABEL_41;
      case 5:
        unint64_t v10 = 0x8000000100629810;
        if (v8 != 0xD000000000000011) {
          goto LABEL_42;
        }
        goto LABEL_41;
      case 6:
        unint64_t v11 = 0xD00000000000001ELL;
        BOOL v12 = "issuing-authority";
        goto LABEL_33;
      case 7:
        unint64_t v11 = 0xD000000000000018;
        BOOL v12 = "document-dhs-compliance-status";
        goto LABEL_33;
      case 8:
        unint64_t v10 = 0xEF7265626D756E2DLL;
        if (v8 != 0x746E656D75636F64) {
          goto LABEL_42;
        }
        goto LABEL_41;
      case 9:
        unint64_t v11 = 0xD000000000000013;
        BOOL v12 = "ion-date";
LABEL_33:
        unint64_t v10 = (unint64_t)v12 | 0x8000000000000000;
        if (v8 != v11) {
          goto LABEL_42;
        }
        goto LABEL_41;
      case 10:
        unint64_t v10 = 0x80000001006298A0;
        if (v8 != 0xD000000000000012) {
          goto LABEL_42;
        }
        goto LABEL_41;
      case 11:
        unint64_t v10 = 0xE300000000000000;
        if (v8 != 6645601) {
          goto LABEL_42;
        }
        goto LABEL_41;
      case 12:
        uint64_t v9 = 0x2D666F2D65746164;
        unint64_t v10 = 0xED00006874726962;
        goto LABEL_40;
      case 13:
        unint64_t v10 = 0x80000001006298D0;
        if (v8 != 0xD000000000000014) {
          goto LABEL_42;
        }
        goto LABEL_41;
      default:
LABEL_40:
        if (v8 != v9) {
          goto LABEL_42;
        }
LABEL_41:
        if (v7 == v10)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return 1;
        }
LABEL_42:
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0)
        {
          if (v2 == v5)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

uint64_t sub_10020F620(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = 5;
  while (1)
  {
    uint64_t v11 = v10 - 3;
    if (__OFADD__(v10 - 4, 1)) {
      break;
    }
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_7;
    }
    ++v10;
    if (v11 == v2) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10020F778(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      uint64_t v6 = v5;
      sub_100213B00();
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10020F8F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v40 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v40 - 8);
  uint64_t v4 = __chkstk_darwin(v40);
  int v39 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  size_t v38 = (char *)&v35 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v35 - v9;
  __chkstk_darwin(v8);
  uint64_t v36 = (char *)&v35 - v10;
  uint64_t v11 = sub_100007764(&qword_10071FC60);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for COSESignatureValidator();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v35 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  BOOL v19 = (char *)&v35 - v18;
  uint64_t v20 = sub_100007764(&qword_100725F90);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  uint64_t v23 = CBOREncoder.init()();
  uint64_t v42 = a2;
  *a2 = v23;
  uint64_t v24 = enum case for ISO18013PresentmentType.physical(_:);
  uint64_t v25 = type metadata accessor for ISO18013PresentmentType();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v22, v24, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v25);
  uint64_t v27 = v41;
  swift_retain();
  CBOREncoder.presentmentType.setter();
  swift_release();
  sub_100048D6C(v27, (uint64_t)v13, &qword_10071FC60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10000C6CC((uint64_t)v13, &qword_10071FC60);
    uint64_t v28 = *(void (**)(char *, void, uint64_t))(v3 + 104);
    uint64_t v29 = v40;
    v28(v36, enum case for DIPError.Code.documentReaderUnknownDeviceAuthAlgorithm(_:), v40);
    v28(v37, enum case for DIPError.Code.documentReaderInvalidDeviceAuthPublicKey(_:), v29);
    v28(v38, enum case for DIPError.Code.documentReaderMisformattedDeviceAuthSignature(_:), v29);
    v28(v39, enum case for DIPError.Code.documentReaderInvalidDeviceAuthSignature(_:), v29);
    uint64_t v30 = v35;
    COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)();
    sub_10000C6CC(v27, &qword_10071FC60);
    uint64_t v31 = type metadata accessor for ISO18013DeviceAuthenticator();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))((char *)v42 + *(int *)(v31 + 20), v30, v14);
  }
  else
  {
    sub_10000C6CC(v27, &qword_10071FC60);
    size_t v33 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v33(v19, v13, v14);
    uint64_t v34 = type metadata accessor for ISO18013DeviceAuthenticator();
    return ((uint64_t (*)(char *, char *, uint64_t))v33)((char *)v42 + *(int *)(v34 + 20), v19, v14);
  }
}

uint64_t type metadata accessor for ISO18013DeviceAuthenticator()
{
  uint64_t result = qword_100727968;
  if (!qword_100727968) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10020FDF0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v145 = a3;
  uint64_t v135 = a2;
  unint64_t v165 = a1;
  uint64_t v3 = type metadata accessor for COSE_Sign1();
  uint64_t v154 = *(void *)(v3 - 8);
  uint64_t v155 = v3;
  __chkstk_darwin(v3);
  unint64_t v128 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo();
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v134 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = type metadata accessor for COSEKey();
  uint64_t v129 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v138 = (uint64_t)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v162 = *(void *)(v7 - 8);
  uint64_t v163 = v7;
  __chkstk_darwin(v7);
  uint64_t v164 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007764(&qword_100725778);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v132 = (char *)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v144 = (char *)&v127 - v13;
  __chkstk_darwin(v12);
  uint64_t v148 = (char *)&v127 - v14;
  uint64_t v15 = sub_100007764(&qword_1007278D0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v150 = (char *)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v153 = (void (*)(char *, uint64_t))((char *)&v127 - v19);
  __chkstk_darwin(v18);
  uint64_t v157 = (char *)&v127 - v20;
  uint64_t v166 = type metadata accessor for ISO18013Response.DeviceAuth();
  uint64_t v161 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v166 - 8);
  uint64_t v21 = __chkstk_darwin(v166);
  uint64_t v131 = (char *)&v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v149 = (char *)&v127 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  unint64_t v143 = (char *)&v127 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v151 = (char *)&v127 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v147 = (char *)&v127 - v30;
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v127 - v31;
  uint64_t v33 = sub_100007764(&qword_100725770);
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (char *)&v127 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for ISO18013Response.DeviceSigned();
  uint64_t v158 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v36 - 8);
  uint64_t v169 = v158;
  uint64_t v37 = __chkstk_darwin(v36);
  unint64_t v152 = (unint64_t)&v127 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v127 - v40;
  __chkstk_darwin(v39);
  uint64_t v167 = (char *)&v127 - v42;
  uint64_t v168 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v168 - 8);
  uint64_t v44 = __chkstk_darwin(v168);
  uint64_t v156 = (char *)&v127 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v44);
  id v127 = (char *)&v127 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v133 = (char *)&v127 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v139 = (char *)&v127 - v51;
  __chkstk_darwin(v50);
  uint64_t v53 = (char *)&v127 - v52;
  defaultLogger()();
  size_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "ISO18013DeviceAuthenticator validating document", v56, 2u);
    swift_slowDealloc();
  }

  uint64_t v159 = *(void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v160 = v43 + 8;
  v159(v53, v168);
  ISO18013Response.Document.deviceSigned.getter();
  uint64_t v57 = v169;
  if (v169[6](v35, 1, v36) == 1)
  {
    sub_10000C6CC((uint64_t)v35, &qword_100725770);
    uint64_t v59 = v162;
    uint64_t v58 = v163;
    size_t v60 = v164;
    (*(void (**)(char *, void, uint64_t))(v162 + 104))(v164, enum case for DIPError.Code.documentReaderMalformedDeviceAuthStructure(_:), v163);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100213AB8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_25;
  }
  uint64_t v61 = v167;
  v57[4](v167, (uint64_t)v35, v36);
  ISO18013Response.DeviceSigned.deviceAuth.getter();
  uint64_t v62 = (uint64_t)v157;
  ISO18013Response.DeviceAuth.deviceMac.getter();
  int v63 = v169;
  uint64_t v64 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)v161 + 8);
  int64_t v65 = (void (*)(char *, uint64_t))*((void *)v161 + 1);
  uint64_t v66 = v32;
  uint64_t v67 = v166;
  v65(v66, v166);
  uint64_t v68 = type metadata accessor for COSE_Mac0();
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  uint64_t v142 = v68;
  uint64_t v141 = v70;
  uint64_t v140 = v69 + 48;
  int v71 = ((uint64_t (*)(uint64_t, uint64_t))v70)(v62, 1);
  sub_10000C6CC(v62, &qword_1007278D0);
  uint64_t v161 = v63[2];
  v161(v41, (uint64_t)v61, v36);
  if (v71 == 1)
  {
    unint64_t v72 = v147;
    ISO18013Response.DeviceSigned.deviceAuth.getter();
    uint64_t v157 = v41;
    uint64_t v73 = (uint64_t)v148;
    ISO18013Response.DeviceAuth.deviceSignature.getter();
    uint64_t v74 = v169;
    v65(v72, v67);
    unint64_t v75 = v74[1];
    ((void (*)(char *, uint64_t))v75)(v157, v36);
    LODWORD(v72) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v73, 1, v155);
    sub_10000C6CC(v73, &qword_100725778);
    if (v72 == 1)
    {
      uint64_t v59 = v162;
      uint64_t v58 = v163;
      uint64_t v76 = v75;
      size_t v60 = v164;
      (*(void (**)(char *, void, uint64_t))(v162 + 104))(v164, enum case for DIPError.Code.documentReaderMalformedDeviceAuthStructure(_:), v163);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100213AB8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      ((void (*)(char *, uint64_t))v76)(v167, v36);
      goto LABEL_25;
    }
    size_t v77 = (char *)v65;
  }
  else
  {
    size_t v77 = (char *)v65;
    unint64_t v75 = v63[1];
    ((void (*)(char *, uint64_t))v75)(v41, v36);
  }
  uint64_t v78 = v36;
  int v79 = v167;
  uint64_t v80 = v151;
  ISO18013Response.DeviceSigned.deviceAuth.getter();
  uint64_t v81 = (uint64_t)v153;
  ISO18013Response.DeviceAuth.deviceMac.getter();
  uint64_t v82 = v80;
  char v83 = v77;
  ((void (*)(char *, uint64_t))v77)(v82, v166);
  int v84 = v141(v81, 1, v142);
  sub_10000C6CC(v81, &qword_1007278D0);
  uint64_t v85 = v152;
  v161((char *)v152, (uint64_t)v79, v78);
  char v86 = (char *)v78;
  uint64_t v169 = (unsigned int (**)(char *, uint64_t, uint64_t))v75;
  if (v84 == 1)
  {
    ((void (*)(uint64_t, uint64_t))v75)(v85, v78);
  }
  else
  {
    char v87 = v143;
    ISO18013Response.DeviceSigned.deviceAuth.getter();
    uint64_t v88 = (uint64_t)v144;
    ISO18013Response.DeviceAuth.deviceSignature.getter();
    ((void (*)(char *, uint64_t))v83)(v87, v166);
    ((void (*)(uint64_t, char *))v75)(v85, v86);
    LODWORD(v87) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v88, 1, v155);
    sub_10000C6CC(v88, &qword_100725778);
    if (v87 != 1)
    {
      uint64_t v59 = v162;
      uint64_t v58 = v163;
      size_t v60 = v164;
      (*(void (**)(char *, void, uint64_t))(v162 + 104))(v164, enum case for DIPError.Code.documentReaderMalformedDeviceAuthStructure(_:), v163);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100213AB8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      ((void (*)(char *, char *))v169)(v167, v86);
      goto LABEL_25;
    }
  }
  __int16 v89 = v149;
  uint64_t v90 = (uint64_t)v167;
  ISO18013Response.DeviceSigned.deviceAuth.getter();
  uint64_t v91 = (uint64_t)v150;
  ISO18013Response.DeviceAuth.deviceMac.getter();
  uint64_t v161 = v64;
  uint64_t v153 = (void (*)(char *, uint64_t))v83;
  ((void (*)(char *, uint64_t))v83)(v89, v166);
  LODWORD(v89) = v141(v91, 1, v142);
  sub_10000C6CC(v91, &qword_1007278D0);
  uint64_t v58 = v163;
  size_t v60 = v164;
  uint64_t v59 = v162;
  uint64_t v157 = v86;
  if (v89 == 1) {
    goto LABEL_20;
  }
  char v92 = v86;
  char v93 = v139;
  defaultLogger()();
  os_log_type_t v94 = Logger.logObject.getter();
  os_log_type_t v95 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v94, v95))
  {
    uint64_t v96 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v96 = 0;
    _os_log_impl((void *)&_mh_execute_header, v94, v95, "ISO18013DeviceAuthenticator device signed structure contains a device mac.", v96, 2u);
    char v92 = v157;
    swift_slowDealloc();
  }

  v159(v93, v168);
  id v97 = [self standardUserDefaults];
  v98._object = (void *)0x8000000100642300;
  v98._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  Swift::Bool v99 = NSUserDefaults.internalBool(forKey:)(v98);

  if (!v99)
  {
    (*(void (**)(char *, void, uint64_t))(v59 + 104))(v60, enum case for DIPError.Code.documentReaderDeviceMacUnsupported(_:), v58);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100213AB8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    ((void (*)(uint64_t, char *))v169)(v90, v92);
LABEL_25:
    id v110 = [self standardUserDefaults];
    v111._uint64_t countAndFlagsBits = 0xD000000000000038;
    v111._object = (void *)0x80000001006421E0;
    Swift::Bool v112 = NSUserDefaults.internalBool(forKey:)(v111);

    if (v112)
    {
      uint64_t v113 = v156;
      defaultLogger()();
      DIPLogError(_:message:log:)();
      swift_errorRelease();
      return ((uint64_t (*)(char *, uint64_t))v159)(v113, v168);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v59 + 104))(v60, enum case for DIPError.Code.internalError(_:), v58);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100213AB8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return swift_errorRelease();
    }
  }
  BOOL v100 = v133;
  defaultLogger()();
  id v101 = Logger.logObject.getter();
  os_log_type_t v102 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v101, v102))
  {
    uint64_t v103 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v103 = 0;
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "ISO18013DeviceAuthenticator ignoring device mac. Continuing with validation.", v103, 2u);
    swift_slowDealloc();
  }

  v159(v100, v168);
LABEL_20:
  uint64_t v104 = ISO18013Response.Document.docType.getter();
  uint64_t v105 = v146;
  unint64_t v107 = sub_1002114F4(v145, v104, v106, v90);
  if (v105)
  {
    ((void (*)(uint64_t, char *))v169)(v90, v157);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  unint64_t v152 = v107;
  unint64_t v165 = v108;
  swift_bridgeObjectRelease();
  uint64_t v109 = (uint64_t)v134;
  ISO18013MobileSecurityObject.deviceKeyInfo.getter();
  sub_100211A50(v109, v138);
  (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v109, v137);
  uint64_t v115 = v131;
  ISO18013Response.DeviceSigned.deviceAuth.getter();
  uint64_t v116 = (uint64_t)v132;
  ISO18013Response.DeviceAuth.deviceSignature.getter();
  v153(v115, v166);
  uint64_t v118 = v154;
  uint64_t v117 = v155;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v116, 1, v155) == 1)
  {
    sub_10000C5F4(v152, v165);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v138, v130);
    ((void (*)(uint64_t, char *))v169)(v90, v157);
    return sub_10000C6CC(v116, &qword_100725778);
  }
  else
  {
    unint64_t v119 = (unint64_t)v128;
    (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v128, v116, v117);
    uint64_t v120 = v127;
    defaultLogger()();
    uint64_t v121 = Logger.logObject.getter();
    os_log_type_t v122 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v121, v122))
    {
      uint64_t v123 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v123 = 0;
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "ISO18013DeviceAuthenticator device signed structure contains a device signature. Validating signature now", v123, 2u);
      swift_slowDealloc();
    }

    v159(v120, v168);
    uint64_t v124 = v138;
    uint64_t v125 = v152;
    unint64_t v126 = v165;
    sub_1002120C8(v119, v138, v152, v165);
    sub_10000C5F4(v125, v126);
    (*(void (**)(unint64_t, uint64_t))(v154 + 8))(v119, v155);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v124, v130);
    return ((uint64_t (*)(char *, char *))v169)(v167, v157);
  }
}