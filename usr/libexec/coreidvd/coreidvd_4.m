uint64_t sub_1002B530C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;

  v1 = v0[33];
  v2 = v0[31];
  v3 = v0[32];
  (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
  v4 = *(void (**)(void))(v3 + 8);
  ((void (*)(uint64_t, uint64_t))v4)(v1, v2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v6 = v0[19];
  v5 = v0[20];
  v7 = v0[18];
  v8 = v0[14];
  v4();
  sub_100007764((uint64_t *)&unk_1007225C0);
  v9 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  v10 = (*(unsigned __int8 *)(*(void *)v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v9 + 80);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100610730;
  v12 = v11 + v10;
  v13 = (void *)(v12 + v9[14]);
  v14 = enum case for DIPError.PropertyKey.conversationID(_:);
  v15 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v12, v14, v15);
  v16 = *(void *)(v8 + 24);
  v17 = *(void *)(v8 + 32);
  v13[3] = &type metadata for String;
  *v13 = v16;
  v13[1] = v17;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v11);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.internalError(_:), v7);
  type metadata accessor for DIPError();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1002B5658(uint64_t a1)
{
  v1[122] = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[123] = v2;
  v1[124] = *(void *)(v2 - 8);
  v1[125] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[126] = v3;
  v1[127] = *(void *)(v3 - 8);
  v1[128] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[129] = v4;
  v1[130] = *(void *)(v4 - 8);
  v1[131] = swift_task_alloc();
  v1[132] = swift_task_alloc();
  v1[133] = swift_task_alloc();
  return _swift_task_switch(sub_1002B57EC, 0, 0);
}

uint64_t sub_1002B57EC()
{
  defaultLogger()();
  v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Refreshing configuration cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[133];
  uint64_t v5 = v0[130];
  uint64_t v6 = v0[129];

  v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[134] = v7;
  v0[135] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v6);
  v8 = (void *)swift_task_alloc();
  v0[136] = v8;
  void *v8 = v0;
  v8[1] = sub_1002B5948;
  return sub_1002B1A50((uint64_t)(v0 + 2), 1);
}

uint64_t sub_1002B5948()
{
  os_log_type_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v3[137] = v0;
  uint64_t v36 = v2[2];
  uint64_t v35 = v2[3];
  uint64_t v34 = v2[4];
  uint64_t v33 = v2[5];
  uint64_t v4 = v3[6];
  uint64_t v5 = v3[7];
  uint64_t v32 = v2[8];
  uint64_t v6 = v3[9];
  uint64_t v31 = v2[10];
  uint64_t v30 = v2[11];
  uint64_t v29 = v2[12];
  uint64_t v28 = v2[13];
  uint64_t v27 = v2[14];
  uint64_t v26 = v2[15];
  uint64_t v25 = v2[16];
  uint64_t v24 = v2[17];
  uint64_t v23 = v2[18];
  uint64_t v22 = v2[19];
  uint64_t v21 = v2[20];
  char v20 = *((unsigned char *)v3 + 168);
  uint64_t v19 = v2[22];
  char v18 = *((unsigned char *)v3 + 184);
  uint64_t v17 = v2[24];
  uint64_t v7 = v2[25];
  uint64_t v8 = v2[26];
  char v9 = *((unsigned char *)v3 + 216);
  uint64_t v10 = v2[28];
  char v11 = *((unsigned char *)v3 + 232);
  uint64_t v12 = v2[30];
  char v13 = *((unsigned char *)v3 + 248);
  uint64_t v65 = v2[32];
  char v66 = *((unsigned char *)v3 + 264);
  uint64_t v64 = v2[34];
  char v63 = *((unsigned char *)v3 + 280);
  uint64_t v62 = v2[36];
  uint64_t v61 = v2[37];
  uint64_t v60 = v2[38];
  uint64_t v59 = v2[39];
  uint64_t v58 = v2[40];
  uint64_t v57 = v2[41];
  uint64_t v56 = v2[42];
  char v54 = *((unsigned char *)v3 + 345);
  char v55 = *((unsigned char *)v3 + 344);
  uint64_t v53 = v2[44];
  char v52 = *((unsigned char *)v3 + 360);
  uint64_t v51 = v2[46];
  char v50 = *((unsigned char *)v3 + 376);
  uint64_t v49 = v2[48];
  char v48 = *((unsigned char *)v3 + 392);
  char v47 = *((unsigned char *)v3 + 393);
  uint64_t v46 = v2[50];
  char v45 = *((unsigned char *)v3 + 408);
  uint64_t v44 = v2[52];
  uint64_t v43 = v2[53];
  uint64_t v42 = v2[54];
  uint64_t v41 = v2[55];
  long long v40 = *((_OWORD *)v3 + 28);
  uint64_t v39 = v2[58];
  uint64_t v38 = v2[59];
  uint64_t v37 = v2[60];
  uint64_t v14 = v2[61];
  swift_task_dealloc();
  if (v0)
  {
    v15 = sub_1002B61E4;
  }
  else
  {
    v3[62] = v36;
    v3[63] = v35;
    v3[64] = v34;
    v3[65] = v33;
    v3[68] = v32;
    v3[70] = v31;
    v3[71] = v30;
    v3[72] = v29;
    v3[73] = v28;
    v3[74] = v27;
    v3[75] = v26;
    v3[76] = v25;
    v3[77] = v24;
    v3[78] = v23;
    v3[79] = v22;
    v3[80] = v21;
    *((unsigned char *)v3 + 648) = v20;
    v3[82] = v19;
    *((unsigned char *)v3 + 664) = v18;
    v3[84] = v17;
    v3[85] = v7;
    v3[86] = v8;
    *((unsigned char *)v3 + 696) = v9;
    v3[88] = v10;
    *((unsigned char *)v3 + 712) = v11;
    v3[90] = v12;
    *((unsigned char *)v3 + 728) = v13;
    v3[92] = v65;
    v3[66] = v4;
    v3[67] = v5;
    v3[69] = v6;
    *((unsigned char *)v3 + 744) = v66;
    v3[94] = v64;
    *((unsigned char *)v3 + 760) = v63;
    v3[96] = v62;
    v3[97] = v61;
    v3[98] = v60;
    v3[99] = v59;
    v3[100] = v58;
    v3[101] = v57;
    v3[102] = v56;
    *((unsigned char *)v3 + 824) = v55;
    *((unsigned char *)v3 + 825) = v54;
    v3[104] = v53;
    *((unsigned char *)v3 + 840) = v52;
    v3[106] = v51;
    *((unsigned char *)v3 + 856) = v50;
    v3[108] = v49;
    *((unsigned char *)v3 + 872) = v48;
    *((unsigned char *)v3 + 873) = v47;
    v3[110] = v46;
    *((unsigned char *)v3 + 888) = v45;
    v3[112] = v44;
    v3[113] = v43;
    v3[114] = v42;
    v3[115] = v41;
    *((_OWORD *)v3 + 58) = v40;
    v3[118] = v39;
    v3[119] = v38;
    v3[120] = v37;
    v3[121] = v14;
    sub_1002B6B6C((uint64_t)(v3 + 62));
    v15 = sub_1002B60B0;
  }
  return _swift_task_switch(v15, 0, 0);
}

uint64_t sub_1002B60B0()
{
  defaultLogger()();
  v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done refreshing configuration cache", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[134];
  uint64_t v5 = v0[132];
  uint64_t v6 = v0[129];

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002B61E4()
{
  v1 = (void (*)(uint64_t, uint64_t))v0[134];
  uint64_t v2 = v0[131];
  uint64_t v3 = v0[129];
  uint64_t v4 = v0[128];
  uint64_t v5 = v0[127];
  uint64_t v6 = v0[126];
  (*(void (**)(void, void, void))(v0[124] + 104))(v0[125], enum case for DIPError.Code.internalError(_:), v0[123]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002B6428()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DIPConfigWebService()
{
  return self;
}

uint64_t sub_1002B64A4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1002B65B8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000C494;
  return sub_1002B2CC4(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t *sub_1002B6690(uint64_t *a1)
{
  return sub_1002AC104(a1, *(uint64_t **)(v1 + 16));
}

uint64_t *sub_1002B66AC(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1002B6748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002B6800(uint64_t a1)
{
  return sub_1002AC1E0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002B681C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B6920(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002B6980(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v14 = *(_OWORD *)(a1 + 384);
  long long v15 = *(_OWORD *)(a1 + 400);
  long long v12 = *(_OWORD *)(a1 + 352);
  long long v13 = *(_OWORD *)(a1 + 368);
  long long v10 = *(_OWORD *)(a1 + 320);
  long long v11 = *(_OWORD *)(a1 + 336);
  long long v8 = *(_OWORD *)(a1 + 288);
  long long v9 = *(_OWORD *)(a1 + 304);
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v7 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  long long v5 = *(_OWORD *)(a1 + 240);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    v11,
    *((void *)&v11 + 1),
    v12,
    *((void *)&v12 + 1),
    v13,
    *((void *)&v13 + 1),
    v14,
    *((void *)&v14 + 1),
    v15,
    *((void *)&v15 + 1),
    *(void *)(a1 + 416),
    *(void *)(a1 + 424));
  return a1;
}

uint64_t sub_1002B6A2C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1002B6A90(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_1002B6AF0(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1002B6B28(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return sub_100030A10(v3, a1);
}

uint64_t sub_1002B6B6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B6CA8(uint64_t a1)
{
  return sub_1002B6800(a1);
}

uint64_t sub_1002B6CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  long long v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1002B6D2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ISO18013KnownDocTypes();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1002B6D90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002B6DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002B6E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002B6EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002B6F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B6F34);
}

uint64_t sub_1002B6F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1002B6FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B6FB4);
}

uint64_t sub_1002B6FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ISO18013KnownDocTypes();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DeveloperTestJapanNationalIDCardPayloadBuilder()
{
  uint64_t result = qword_100729A08;
  if (!qword_100729A08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002B7070()
{
  uint64_t result = type metadata accessor for ISO18013KnownDocTypes();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002B70FC(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for CredentialBuilderPayloadDetails();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1002B71BC, 0, 0);
}

uint64_t sub_1002B71BC()
{
  sub_10043AC40(v0[7], v0[8], v0[11]);
  uint64_t v1 = v0[8];
  v0[5] = type metadata accessor for DeveloperTestJapanNationalIDCardPayloadBuilder();
  v0[6] = sub_1002B7884();
  uint64_t v2 = sub_10002C2D8(v0 + 2);
  sub_1002B78DC(v1, (uint64_t)v2);
  type metadata accessor for Date();
  id v3 = objc_allocWithZone((Class)type metadata accessor for IdentityCredentialPayloadBuilder());
  v0[12] = IdentityCredentialPayloadBuilder.init(with:dateProvider:)();
  long long v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of IdentityCredentialPayloadBuilder.buildPayload(with:)
                                       + async function pointer to dispatch thunk of IdentityCredentialPayloadBuilder.buildPayload(with:));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002B732C;
  uint64_t v5 = v0[11];
  return v7(v5);
}

uint64_t sub_1002B732C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 112) = v2;
  swift_task_dealloc();
  if (v2)
  {
    long long v7 = sub_1002B74F4;
  }
  else
  {
    *(void *)(v6 + 120) = a2;
    *(void *)(v6 + 128) = a1;
    long long v7 = sub_1002B7460;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002B7460()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 128);
  return v4(v5, v6);
}

uint64_t sub_1002B74F4()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1002B7584(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1002B7618;
  return sub_1002B70FC(a1);
}

uint64_t sub_1002B7618(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t sub_1002B7728()
{
  uint64_t v1 = type metadata accessor for CredentialBuilderSignatureAlgorithm();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = swift_task_alloc();
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(length:)();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v3, enum case for CredentialBuilderSignatureAlgorithm.ES256(_:), v1);
  CredentialBuilderSignatureDetails.init(signingAlgorithm:issuerCertificate:signature:)();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return sub_10016DF40(v4);
}

unint64_t sub_1002B7884()
{
  unint64_t result = qword_100729A58;
  if (!qword_100729A58)
  {
    type metadata accessor for DeveloperTestJapanNationalIDCardPayloadBuilder();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729A58);
  }
  return result;
}

uint64_t sub_1002B78DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeveloperTestJapanNationalIDCardPayloadBuilder();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1002B7940(unint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  int v108 = a6;
  uint64_t v112 = a5;
  uint64_t v119 = a3;
  v120 = a4;
  unint64_t v118 = a2;
  unint64_t v121 = a1;
  uint64_t v110 = type metadata accessor for DIPError.Code();
  uint64_t v109 = *(void *)(v110 - 8);
  uint64_t v7 = __chkstk_darwin(v110);
  v104 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v117 = (uint64_t)&v101 - v9;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v115 = *(void *)(v10 - 8);
  uint64_t v116 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  v102 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v113 = (char *)&v101 - v13;
  uint64_t v14 = type metadata accessor for DIPError.PropertyKey();
  unint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  v107 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v17 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v18 = *(void *)(*(void *)v17 + 72);
  unint64_t v19 = (*(unsigned __int8 *)(*(void *)v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v17 + 80);
  uint64_t v114 = 2 * v18;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100614990;
  unint64_t v21 = v20 + v19;
  uint64_t v22 = (void *)(v21 + v17[14]);
  unint64_t v111 = v15;
  uint64_t v23 = *(void (**)(void))(v15 + 104);
  ((void (*)(unint64_t, void, uint64_t))v23)(v21, enum case for DIPError.PropertyKey.conversationID(_:), v14);
  v22[3] = &type metadata for String;
  *uint64_t v22 = v121;
  v22[1] = a2;
  uint64_t v24 = (void *)(v21 + v18 + v17[14]);
  v23();
  v24[3] = &type metadata for String;
  uint64_t v25 = v120;
  *uint64_t v24 = v119;
  v24[1] = v25;
  uint64_t v26 = v21 + v114;
  uint64_t v27 = v14;
  uint64_t v28 = (uint64_t *)(v26 + v17[14]);
  v106 = v23;
  v23();
  uint64_t v29 = v112;
  uint64_t v30 = *(void *)(v112 + 48);
  unint64_t v31 = *(void *)(v112 + 56);
  v28[3] = (uint64_t)&type metadata for String;
  uint64_t v114 = v30;
  *uint64_t v28 = v30;
  v28[1] = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v32 = v31;
  swift_bridgeObjectRetain();
  unint64_t v33 = sub_10015C504(v20);
  uint64_t v34 = *(void *)(v29 + 64);
  unint64_t v35 = *(void *)(v29 + 72);
  uint64_t v36 = v29;
  uint64_t v103 = v34;
  unint64_t v105 = v35;
  if (v35)
  {
    uint64_t v37 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000) == 0) {
      uint64_t v37 = v34 & 0xFFFFFFFFFFFFLL;
    }
    if (v37)
    {
      uint64_t v38 = (uint64_t)v107;
      ((void (*)(char *, void, uint64_t))v106)(v107, enum case for DIPError.PropertyKey.serverSubStatusCode(_:), v27);
      v124 = &type metadata for String;
      *(void *)&long long v123 = v34;
      *((void *)&v123 + 1) = v35;
      sub_1000078A8(&v123, v122);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v126 = v33;
      sub_1005622A8(v122, v38, isUniquelyReferenced_nonNull_native);
      unint64_t v33 = v126;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v38, v27);
    }
  }
  unint64_t object = v32;
  unint64_t v111 = v33;
  uint64_t v41 = v113;
  defaultLogger()();
  uint64_t v42 = v36;
  sub_1002B90A0(v36);
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v43, v44))
  {
    char v45 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v123 = swift_slowAlloc();
    *(_DWORD *)char v45 = 136446210;
    uint64_t v42 = v36;
    swift_bridgeObjectRetain();
    uint64_t v46 = v114;
    *(void *)&v122[0] = sub_100110D58(v114, v32, (uint64_t *)&v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002B9118(v42);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Server returned status %{public}s", v45, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    char v47 = *(void (**)(char *, uint64_t))(v115 + 8);
    v47(v41, v116);
  }
  else
  {
    sub_1002B9118(v36);

    char v47 = *(void (**)(char *, uint64_t))(v115 + 8);
    v47(v41, v116);
    uint64_t v46 = v114;
  }
  sub_1002B9190(v42, (uint64_t)v122);
  sub_1002B9190((uint64_t)v122, (uint64_t)&v123);
  char v48 = (void *)*((void *)&v123 + 1);
  if (*((void *)&v123 + 1))
  {
    uint64_t v49 = v123;
    if (v123 != __PAIR128__(v118, v121) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v126 = 0;
      unint64_t v127 = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      uint64_t v126 = 0xD00000000000001BLL;
      unint64_t v127 = 0x8000000100647430;
      v72._uint64_t countAndFlagsBits = v49;
      v72._unint64_t object = v48;
      String.append(_:)(v72);
      v73._uint64_t countAndFlagsBits = 0xD000000000000013;
      v73._unint64_t object = (void *)0x8000000100647330;
      String.append(_:)(v73);
      (*(void (**)(uint64_t, void, uint64_t))(v109 + 104))(v117, enum case for DIPError.Code.serverResponseInconsistent(_:), v110);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      goto LABEL_92;
    }
  }
  uint64_t v51 = *(void *)(v42 + 16);
  char v50 = *(void **)(v42 + 24);
  if ((v51 != v119 || v50 != v120) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v126 = 0;
    unint64_t v127 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    uint64_t v126 = 0xD000000000000016;
    unint64_t v127 = 0x8000000100647310;
    swift_bridgeObjectRetain();
    v70._uint64_t countAndFlagsBits = v51;
    v70._unint64_t object = v50;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    v71._uint64_t countAndFlagsBits = 0xD000000000000013;
    v71._unint64_t object = (void *)0x8000000100647330;
    String.append(_:)(v71);
    (*(void (**)(uint64_t, void, uint64_t))(v109 + 104))(v117, enum case for DIPError.Code.serverResponseInconsistent(_:), v110);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
LABEL_92:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return;
  }
  if ((v108 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  char v52 = self;
  swift_bridgeObjectRetain();
  id v53 = [v52 standardUserDefaults];
  v54._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v54._unint64_t object = (void *)0x8000000100647410;
  Swift::String_optional v55 = NSUserDefaults.internalString(forKey:)(v54);
  uint64_t countAndFlagsBits = v55.value._countAndFlagsBits;

  if (!v55.value._object)
  {
LABEL_23:
    uint64_t countAndFlagsBits = v46;
    goto LABEL_24;
  }
  unint64_t v57 = ((unint64_t)v55.value._object >> 56) & 0xF;
  if (((uint64_t)v55.value._object & 0x2000000000000000) == 0) {
    unint64_t v57 = v55.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v57)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  uint64_t v58 = v102;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = (uint8_t *)swift_slowAlloc();
    uint64_t v126 = swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v125 = sub_100110D58(v55.value._countAndFlagsBits, (unint64_t)v55.value._object, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Forcing response header status code to %{public}s due to user setting", v61, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v47(v58, v116);
  unint64_t object = (unint64_t)v55.value._object;
LABEL_24:
  uint64_t v62 = HIBYTE(object) & 0xF;
  uint64_t v63 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  unint64_t v121 = object;
  if ((object & 0x2000000000000000) != 0) {
    uint64_t v64 = HIBYTE(object) & 0xF;
  }
  else {
    uint64_t v64 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v64) {
    goto LABEL_91;
  }
  uint64_t v65 = v121;
  if ((v121 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v69 = (uint64_t)sub_1005D7B64(countAndFlagsBits, v65, 10);
    char v100 = v99;
    swift_bridgeObjectRelease();
    if ((v100 & 1) == 0) {
      goto LABEL_64;
    }
    goto LABEL_91;
  }
  if ((v121 & 0x2000000000000000) == 0)
  {
    if ((countAndFlagsBits & 0x1000000000000000) != 0) {
      char v66 = (unsigned __int8 *)((v121 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      char v66 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v67 = sub_1005D7B4C(v66, v63, 10);
    if ((v68 & 1) == 0)
    {
      uint64_t v69 = (uint64_t)v67;
LABEL_64:
      uint64_t v78 = countAndFlagsBits;
      uint64_t v79 = v109;
      v80 = *(void (**)(uint64_t, void, uint64_t))(v109 + 104);
      uint64_t v81 = v117;
      uint64_t v82 = v110;
      v80(v117, enum case for DIPError.Code.topekaOK(_:), v110);
      uint64_t v83 = DIPError.Code.rawValue.getter();
      v84 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
      v84(v81, v82);
      if (v69 == v83) {
        goto LABEL_68;
      }
      uint64_t v85 = v117;
      uint64_t v86 = v110;
      v80(v117, enum case for DIPError.Code.topekaOKToContinueWithErrorMin(_:), v110);
      uint64_t v87 = DIPError.Code.rawValue.getter();
      v84(v85, v86);
      v88 = v104;
      v80((uint64_t)v104, enum case for DIPError.Code.topekaOKToContinueWithErrorMax(_:), v86);
      uint64_t v89 = DIPError.Code.rawValue.getter();
      v84((uint64_t)v88, v86);
      if (v89 >= v87)
      {
        uint64_t countAndFlagsBits = v78;
        if (v69 >= v87 && v89 >= v69)
        {
LABEL_68:
          swift_bridgeObjectRelease();
          if (!v105) {
            goto LABEL_73;
          }
          unint64_t v90 = HIBYTE(v105) & 0xF;
          if ((v105 & 0x2000000000000000) == 0) {
            unint64_t v90 = v103 & 0xFFFFFFFFFFFFLL;
          }
          if (!v90)
          {
LABEL_73:
            swift_bridgeObjectRelease();
            return;
          }
          sub_1002B8920(v103, v105, v117);
          type metadata accessor for DIPError();
          sub_10000C588();
          swift_allocError();
          goto LABEL_92;
        }
        goto LABEL_91;
      }
      __break(1u);
      goto LABEL_96;
    }
LABEL_91:
    sub_1002B8920(countAndFlagsBits, v121, v117);
    swift_bridgeObjectRelease();
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    goto LABEL_92;
  }
  uint64_t v126 = countAndFlagsBits;
  unint64_t v127 = v121 & 0xFFFFFFFFFFFFFFLL;
  if (countAndFlagsBits != 43)
  {
    if (countAndFlagsBits == 45)
    {
      if (!v62)
      {
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
      if (v62 != 1)
      {
        if ((BYTE1(countAndFlagsBits) - 48) > 9u) {
          goto LABEL_57;
        }
        if (v62 == 2)
        {
          LOBYTE(v62) = 0;
          uint64_t v69 = -(uint64_t)(BYTE1(countAndFlagsBits) - 48);
          goto LABEL_63;
        }
        if ((BYTE2(countAndFlagsBits) - 48) > 9u) {
          goto LABEL_57;
        }
        uint64_t v69 = -10 * (BYTE1(countAndFlagsBits) - 48)
            - (BYTE2(countAndFlagsBits) - 48);
        uint64_t v95 = v62 - 3;
        if (v62 != 3)
        {
          v96 = (unsigned __int8 *)&v126 + 3;
          while (1)
          {
            unsigned int v97 = *v96 - 48;
            if (v97 > 9) {
              goto LABEL_57;
            }
            uint64_t v98 = 10 * v69;
            if ((unsigned __int128)(v69 * (__int128)10) >> 64 != (10 * v69) >> 63) {
              goto LABEL_57;
            }
            uint64_t v69 = v98 - v97;
            if (__OFSUB__(v98, v97)) {
              goto LABEL_57;
            }
            LOBYTE(v62) = 0;
            ++v96;
            if (!--v95) {
              goto LABEL_63;
            }
          }
        }
        goto LABEL_62;
      }
LABEL_94:
      uint64_t v69 = 0;
LABEL_63:
      if ((v62 & 1) == 0) {
        goto LABEL_64;
      }
      goto LABEL_91;
    }
    if (!v62 || (countAndFlagsBits - 48) > 9u)
    {
LABEL_57:
      uint64_t v69 = 0;
      LOBYTE(v62) = 1;
      goto LABEL_63;
    }
    uint64_t v69 = (countAndFlagsBits - 48);
    if (v62 != 1)
    {
      if ((BYTE1(countAndFlagsBits) - 48) > 9u) {
        goto LABEL_57;
      }
      uint64_t v69 = 10 * (countAndFlagsBits - 48) + (BYTE1(countAndFlagsBits) - 48);
      uint64_t v91 = v62 - 2;
      if (v62 != 2)
      {
        v92 = (unsigned __int8 *)&v126 + 2;
        while (1)
        {
          unsigned int v93 = *v92 - 48;
          if (v93 > 9) {
            goto LABEL_57;
          }
          uint64_t v94 = 10 * v69;
          if ((unsigned __int128)(v69 * (__int128)10) >> 64 != (10 * v69) >> 63) {
            goto LABEL_57;
          }
          uint64_t v69 = v94 + v93;
          if (__OFADD__(v94, v93)) {
            goto LABEL_57;
          }
          LOBYTE(v62) = 0;
          ++v92;
          if (!--v91) {
            goto LABEL_63;
          }
        }
      }
    }
LABEL_62:
    LOBYTE(v62) = 0;
    goto LABEL_63;
  }
  if (v62)
  {
    if (v62 == 1) {
      goto LABEL_94;
    }
    if ((BYTE1(countAndFlagsBits) - 48) > 9u) {
      goto LABEL_57;
    }
    uint64_t v69 = (BYTE1(countAndFlagsBits) - 48);
    if (v62 != 2)
    {
      if ((BYTE2(countAndFlagsBits) - 48) > 9u) {
        goto LABEL_57;
      }
      uint64_t v69 = 10 * (BYTE1(countAndFlagsBits) - 48) + (BYTE2(countAndFlagsBits) - 48);
      uint64_t v74 = v62 - 3;
      if (v62 != 3)
      {
        v75 = (unsigned __int8 *)&v126 + 3;
        while (1)
        {
          unsigned int v76 = *v75 - 48;
          if (v76 > 9) {
            goto LABEL_57;
          }
          uint64_t v77 = 10 * v69;
          if ((unsigned __int128)(v69 * (__int128)10) >> 64 != (10 * v69) >> 63) {
            goto LABEL_57;
          }
          uint64_t v69 = v77 + v76;
          if (__OFADD__(v77, v76)) {
            goto LABEL_57;
          }
          LOBYTE(v62) = 0;
          ++v75;
          if (!--v74) {
            goto LABEL_63;
          }
        }
      }
    }
    goto LABEL_62;
  }
LABEL_97:
  __break(1u);
}

uint64_t sub_1002B8920@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100007764(&qword_100723600);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v39[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(uint64_t (**)(uint64_t, void, uint64_t))(v10 + 104);
  uint64_t result = v13(a3, enum case for DIPError.Code.internalError(_:), v9);
  uint64_t v15 = HIBYTE(a2) & 0xF;
  uint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v17 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17) {
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1005D7B64(a1, a2, 10);
    char v37 = v36;
    uint64_t result = swift_bridgeObjectRelease();
    if (v37) {
      return result;
    }
    goto LABEL_36;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v39[0] = a1;
    v39[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (!v15) {
        goto LABEL_61;
      }
      if (v15 == 1) {
        goto LABEL_35;
      }
      if ((BYTE1(a1) - 48) > 9u) {
        goto LABEL_32;
      }
      if (v15 != 2)
      {
        if ((BYTE2(a1) - 48) > 9u) {
          goto LABEL_32;
        }
        uint64_t v20 = 10 * (BYTE1(a1) - 48) + (BYTE2(a1) - 48);
        uint64_t v21 = v15 - 3;
        if (v15 != 3)
        {
          uint64_t v22 = (unsigned __int8 *)v39 + 3;
          while (1)
          {
            unsigned int v23 = *v22 - 48;
            if (v23 > 9) {
              goto LABEL_32;
            }
            uint64_t v24 = 10 * v20;
            if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63) {
              goto LABEL_32;
            }
            uint64_t v20 = v24 + v23;
            if (__OFADD__(v24, v23)) {
              goto LABEL_32;
            }
            LOBYTE(v15) = 0;
            ++v22;
            if (!--v21) {
              goto LABEL_35;
            }
          }
        }
      }
    }
    else
    {
      if (a1 == 45)
      {
        if (v15)
        {
          if (v15 != 1)
          {
            if ((BYTE1(a1) - 48) > 9u) {
              goto LABEL_32;
            }
            if (v15 == 2)
            {
              LOBYTE(v15) = 0;
              goto LABEL_35;
            }
            if ((BYTE2(a1) - 48) > 9u) {
              goto LABEL_32;
            }
            uint64_t v31 = -10 * (BYTE1(a1) - 48) - (BYTE2(a1) - 48);
            uint64_t v32 = v15 - 3;
            if (v15 != 3)
            {
              unint64_t v33 = (unsigned __int8 *)v39 + 3;
              while (1)
              {
                unsigned int v34 = *v33 - 48;
                if (v34 > 9) {
                  goto LABEL_32;
                }
                uint64_t v35 = 10 * v31;
                if ((unsigned __int128)(v31 * (__int128)10) >> 64 != (10 * v31) >> 63) {
                  goto LABEL_32;
                }
                uint64_t v31 = v35 - v34;
                if (__OFSUB__(v35, v34)) {
                  goto LABEL_32;
                }
                LOBYTE(v15) = 0;
                ++v33;
                if (!--v32) {
                  goto LABEL_35;
                }
              }
            }
            goto LABEL_34;
          }
LABEL_35:
          if (v15) {
            return result;
          }
          goto LABEL_36;
        }
        __break(1u);
LABEL_61:
        __break(1u);
        return result;
      }
      if (!v15 || (a1 - 48) > 9u)
      {
LABEL_32:
        LOBYTE(v15) = 1;
        goto LABEL_35;
      }
      if (v15 != 1)
      {
        if ((BYTE1(a1) - 48) > 9u) {
          goto LABEL_32;
        }
        uint64_t v26 = 10 * (a1 - 48) + (BYTE1(a1) - 48);
        uint64_t v27 = v15 - 2;
        if (v15 != 2)
        {
          uint64_t v28 = (unsigned __int8 *)v39 + 2;
          while (1)
          {
            unsigned int v29 = *v28 - 48;
            if (v29 > 9) {
              goto LABEL_32;
            }
            uint64_t v30 = 10 * v26;
            if ((unsigned __int128)(v26 * (__int128)10) >> 64 != (10 * v26) >> 63) {
              goto LABEL_32;
            }
            uint64_t v26 = v30 + v29;
            if (__OFADD__(v30, v29)) {
              goto LABEL_32;
            }
            LOBYTE(v15) = 0;
            ++v28;
            if (!--v27) {
              goto LABEL_35;
            }
          }
        }
      }
    }
LABEL_34:
    LOBYTE(v15) = 0;
    goto LABEL_35;
  }
  if ((a1 & 0x1000000000000000) != 0) {
    uint64_t v18 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = (uint64_t)sub_1005D7B4C(v18, v16, 10);
  if ((v19 & 1) == 0)
  {
LABEL_36:
    DIPError.Code.init(rawValue:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      v13((uint64_t)v12, enum case for DIPError.Code.serverUnavailable(_:), v9);
      sub_1001746FC((uint64_t)v8);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v12, v9);
    }
    else
    {
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v25(v12, v8, v9);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(a3, v12, v9);
    }
  }
  return result;
}

id sub_1002B8DB8()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession];
  uint64_t v2 = *(void **)(v1 + 16);
  swift_retain();
  [v2 invalidateAndCancel];
  [*(id *)(v1 + 24) invalidateAndCancel];
  swift_release();
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for DIPWebService();
  [super dealloc];
}

uint64_t type metadata accessor for DIPWebService()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for DIPConversation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DIPConversation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for DIPConversation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPConversation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPConversation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPConversation()
{
  return &type metadata for DIPConversation;
}

uint64_t sub_1002B90A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B9118(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B9190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100722630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B91FC()
{
  _StringGuts.grow(_:)(24);
  uint64_t result = swift_bridgeObjectRelease();
  qword_100729A98 = 0xD000000000000016;
  unk_100729AA0 = 0x8000000100647E90;
  return result;
}

uint64_t sub_1002B9260()
{
  _StringGuts.grow(_:)(27);
  uint64_t result = swift_bridgeObjectRelease();
  qword_100729AA8 = 0xD000000000000019;
  unk_100729AB0 = 0x8000000100647E10;
  return result;
}

id sub_1002B92C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v6 = type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v7 = v6 - 8;
  uint64_t v8 = __chkstk_darwin(v6);
  char v48 = (double *)((char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v49 = (uint64_t)v42 - v10;
  uint64_t v11 = type metadata accessor for DIPBackoffStrategy();
  uint64_t v12 = *(char **)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DIPRetrier();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v4[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v19 = *(int *)(v7 + 32);
  uint64_t v50 = a3;
  os_log_type_t v44 = v12;
  uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))*((void *)v12 + 2);
  v42[0] = v11;
  v20(v14, a3 + v19, v11);
  uint64_t v21 = v4;
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v45 = v15;
  v42[1] = v16 + 32;
  uint64_t v43 = v22;
  v22(&v21[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_retrier], v18, v15);
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  unsigned int v23 = *(os_unfair_lock_s **)(qword_100760360 + 56);
  uint64_t v24 = (uint64_t)&v23[4];
  uint64_t v25 = v23 + 112;
  os_unfair_lock_lock(v23 + 112);
  sub_1002AC168(v24, (uint64_t)v54);
  os_unfair_lock_unlock(v25);
  sub_1000BEA14((uint64_t)v54, (uint64_t)v52, &qword_100722350);
  sub_1000BEA14((uint64_t)v52, (uint64_t)v53, &qword_100722350);
  if (sub_100044CCC((uint64_t)v53) != 1) {
    sub_100044D90(v52);
  }
  uint64_t v26 = enum case for DIPBackoffStrategy.noBackoff(_:);
  uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))*((void *)v44 + 13);
  uint64_t v28 = v42[0];
  v27(v14, enum case for DIPBackoffStrategy.noBackoff(_:), v42[0]);
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)();
  unsigned int v29 = &v21[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_redirectRetrier];
  uint64_t v30 = v45;
  os_log_type_t v44 = v21;
  uint64_t v31 = v43;
  v43(v29, v18, v45);
  v27(v14, v26, v28);
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)();
  uint64_t v32 = v44;
  v31(&v44[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_authRetrier], v18, v30);

  uint64_t v34 = v49;
  uint64_t v33 = v50;
  sub_1002D5548(v50, v49, type metadata accessor for DIPHTTPSession.Configuration);
  uint64_t v35 = &v32[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  uint64_t v36 = v47;
  char v37 = v48;
  *(void *)uint64_t v35 = v46;
  *((void *)v35 + 1) = v36;
  sub_1002D5548(v34, (uint64_t)v37, type metadata accessor for DIPHTTPSession.Configuration);
  type metadata accessor for DIPHTTPSession(0);
  swift_allocObject();
  uint64_t v38 = v32;
  *(void *)&v38[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession] = sub_1005D20EC(v37);

  uint64_t v39 = (objc_class *)type metadata accessor for DIPWebService();
  v51.receiver = v38;
  v51.super_class = v39;
  id v40 = [super init];
  sub_1002D54E8(v34, type metadata accessor for DIPHTTPSession.Configuration);
  sub_1002D54E8(v33, type metadata accessor for DIPHTTPSession.Configuration);
  return v40;
}

uint64_t sub_1002B9798(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v6 + 617) = a5;
  *(void *)(v6 + 328) = a4;
  *(void *)(v6 + 336) = v5;
  *(unsigned char *)(v6 + 616) = a3;
  *(void *)(v6 + 312) = a1;
  *(void *)(v6 + 320) = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 344) = v7;
  *(void *)(v6 + 352) = *(void *)(v7 - 8);
  *(void *)(v6 + 360) = swift_task_alloc();
  sub_100007764(&qword_1007254C8);
  *(void *)(v6 + 368) = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_100723610);
  *(void *)(v6 + 376) = swift_task_alloc();
  *(void *)(v6 + 384) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPSignpost.Config();
  *(void *)(v6 + 392) = v8;
  *(void *)(v6 + 400) = *(void *)(v8 - 8);
  *(void *)(v6 + 408) = swift_task_alloc();
  *(void *)(v6 + 416) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPSignpost();
  *(void *)(v6 + 424) = v9;
  *(void *)(v6 + 432) = *(void *)(v9 - 8);
  *(void *)(v6 + 440) = swift_task_alloc();
  *(void *)(v6 + 448) = swift_task_alloc();
  return _swift_task_switch(sub_1002B99AC, 0, 0);
}

uint64_t sub_1002B99AC()
{
  int v1 = *(unsigned __int8 *)(v0 + 616);
  static DaemonSignposts.workflowRecommendationRequest.getter();
  DIPSignpost.init(_:)();
  if (v1)
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v2) {
      uint64_t v3 = 0x726F772F312F312FLL;
    }
    else {
      uint64_t v3 = 0xD000000000000016;
    }
    if (v2) {
      unint64_t v4 = 0xED0000776F6C666BLL;
    }
    else {
      unint64_t v4 = 0x80000001006480E0;
    }
  }
  else
  {
    uint64_t v3 = 0x726F772F312F312FLL;
    swift_bridgeObjectRelease();
    unint64_t v4 = 0xED0000776F6C666BLL;
  }
  *(void *)(v0 + 456) = v3;
  *(void *)(v0 + 464) = v4;
  uint64_t v5 = self;
  id v6 = [v5 standardUserDefaults];
  v7._unint64_t object = (void *)0x8000000100647F00;
  v7._uint64_t countAndFlagsBits = 0xD000000000000010;
  Swift::String_optional v8 = NSUserDefaults.internalString(forKey:)(v7);

  if (v8.value._object)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100562120(v8.value._countAndFlagsBits, (uint64_t)v8.value._object, 0x6567412D72657355, 0xEA0000000000746ELL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  id v10 = [v5 standardUserDefaults];
  v11._uint64_t countAndFlagsBits = 0xD000000000000029;
  v11._unint64_t object = (void *)0x8000000100647F20;
  Swift::String_optional v12 = NSUserDefaults.internalString(forKey:)(v11);

  uint64_t v41 = v4;
  if (v12.value._object)
  {
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    sub_100562120(v12.value._countAndFlagsBits, (uint64_t)v12.value._object, 0x564F2D564E452D58, 0xEE00454449525245, v13);
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 472) = &_swiftEmptyDictionarySingleton;
  uint64_t v14 = *(void *)(v0 + 392);
  uint64_t v15 = *(void *)(v0 + 400);
  uint64_t v16 = *(void *)(v0 + 368);
  uint64_t v17 = *(void *)(v0 + 328);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 432) + 56);
  v18(*(void *)(v0 + 384), 1, 1, *(void *)(v0 + 424));
  sub_100048D6C(v17, v16, &qword_1007254C8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) == 1)
  {
    sub_10000C6CC(*(void *)(v0 + 368), &qword_1007254C8);
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 416);
    uint64_t v20 = *(void *)(v0 + 400);
    uint64_t v21 = *(void *)(v0 + 408);
    uint64_t v22 = *(void *)(v0 + 392);
    uint64_t v39 = *(void *)(v0 + 384);
    uint64_t v40 = *(void *)(v0 + 424);
    uint64_t v23 = v3;
    uint64_t v24 = *(void *)(v0 + 376);
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 32))(v21, *(void *)(v0 + 368), v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v21, v22);
    DIPSignpost.init(_:)();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    v18(v24, 0, 1, v40);
    uint64_t v25 = v24;
    uint64_t v3 = v23;
    sub_1000F0098(v25, v39);
  }
  uint64_t v26 = *(void *)(v0 + 312);
  *(void *)(v0 + 288) = &type metadata for WorkflowRecommendationRequest;
  uint64_t v27 = swift_allocObject();
  *(void *)(v0 + 264) = v27;
  long long v29 = *(_OWORD *)(v26 + 16);
  long long v28 = *(_OWORD *)(v26 + 32);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)v26;
  *(_OWORD *)(v27 + 32) = v29;
  *(_OWORD *)(v27 + 48) = v28;
  long long v30 = *(_OWORD *)(v26 + 96);
  long long v32 = *(_OWORD *)(v26 + 48);
  long long v31 = *(_OWORD *)(v26 + 64);
  *(_OWORD *)(v27 + 96) = *(_OWORD *)(v26 + 80);
  *(_OWORD *)(v27 + 112) = v30;
  *(_OWORD *)(v27 + 64) = v32;
  *(_OWORD *)(v27 + 80) = v31;
  long long v34 = *(_OWORD *)(v26 + 128);
  long long v33 = *(_OWORD *)(v26 + 144);
  long long v35 = *(_OWORD *)(v26 + 112);
  *(void *)(v27 + 176) = *(void *)(v26 + 160);
  *(_OWORD *)(v27 + 144) = v34;
  *(_OWORD *)(v27 + 160) = v33;
  *(_OWORD *)(v27 + 128) = v35;
  sub_1001D9024(v26);
  uint64_t v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v36;
  *uint64_t v36 = v0;
  v36[1] = sub_1002B9E2C;
  char v37 = *(unsigned char *)(v0 + 617);
  return sub_1002CE7F8(v0 + 264, v3, v41, (uint64_t)&_swiftEmptyDictionarySingleton, v37);
}

uint64_t sub_1002B9E2C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = (void *)*v4;
  v6[61] = a1;
  v6[62] = a2;
  v6[63] = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v3)
  {
    Swift::String v7 = sub_1002BB704;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 33));

    Swift::String v7 = sub_1002B9F70;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002B9F70()
{
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 384);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  uint64_t v6 = *(void *)(v0 + 488);
  unint64_t v5 = *(void *)(v0 + 496);
  if (v4)
  {
    sub_10002CEB0(*(void *)(v0 + 488), *(void *)(v0 + 496));
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 440);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v3, v1);
    sub_10002CEB0(v6, v5);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
  }
  uint64_t v8 = *(void *)(v0 + 504);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1002D55B0();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v8)
  {
    sub_10000C5F4(*(void *)(v0 + 488), *(void *)(v0 + 496));
    swift_release();
    uint64_t v10 = *(void *)(v0 + 488);
    unint64_t v9 = *(void *)(v0 + 496);
    uint64_t v58 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 352) + 104);
    v58(*(void *)(v0 + 360), enum case for DIPError.Code.serverResponseInconsistent(_:), *(void *)(v0 + 344));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v10, v9);
    swift_errorRelease();
    unsigned int v53 = enum case for DIPError.Code.internalError(_:);
    uint64_t v49 = *(void *)(v0 + 456);
    uint64_t v50 = *(void *)(v0 + 464);
    uint64_t v54 = *(void *)(v0 + 432);
    uint64_t v55 = *(void *)(v0 + 424);
    uint64_t v56 = *(void *)(v0 + 448);
    uint64_t v57 = *(void *)(v0 + 384);
    uint64_t v51 = *(void *)(v0 + 360);
    uint64_t v52 = *(void *)(v0 + 344);
    uint64_t v47 = *(void *)(v0 + 336);
    char v48 = *(long long **)(v0 + 312);
    sub_100007764((uint64_t *)&unk_1007225C0);
    Swift::String v11 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v12 = *(void *)(*(void *)v11 + 72);
    unint64_t v13 = (*(unsigned __int8 *)(*(void *)v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v11 + 80);
    uint64_t v46 = 2 * v12;
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_100614990;
    unint64_t v15 = v14 + v13;
    uint64_t v16 = (void *)(v14 + v13 + v11[14]);
    uint64_t v17 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v18 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v19 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104);
    v19(v15, v17, v18);
    uint64_t v20 = *(void *)(v47 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v21 = *(void *)(v47 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v16[3] = &type metadata for String;
    *uint64_t v16 = v20;
    v16[1] = v21;
    unint64_t v22 = v15 + v12;
    unint64_t v23 = v15 + v12 + v11[14];
    v19(v22, enum case for DIPError.PropertyKey.requestID(_:), v18);
    long long v24 = *v48;
    *(_OWORD *)(v0 + 248) = v48[1];
    *(_OWORD *)(v0 + 232) = v24;
    long long v25 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 296) = v25;
    *(void *)(v23 + 24) = &type metadata for String;
    *(_OWORD *)unint64_t v23 = v25;
    uint64_t v26 = (void *)(v15 + v46 + v11[14]);
    v19(v15 + v46, enum case for DIPError.PropertyKey.serverURL(_:), v18);
    v26[3] = &type metadata for String;
    *uint64_t v26 = v49;
    v26[1] = v50;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_1001061B8(v0 + 296);
    sub_10015C504(v14);
    v58(v51, v53, v52);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v55);
    sub_10000C6CC(v57, (uint64_t *)&unk_100723610);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
  else
  {
    long long v29 = *(uint64_t **)(v0 + 312);
    sub_10000C5F4(*(void *)(v0 + 488), *(void *)(v0 + 496));
    swift_release();
    uint64_t v30 = *(void *)(v0 + 16);
    uint64_t v31 = *(void *)(v0 + 40);
    uint64_t v32 = *(void *)(v0 + 48);
    *(void *)(v0 + 520) = v31;
    uint64_t v33 = *(void *)(v0 + 56);
    uint64_t v34 = *(void *)(v0 + 64);
    *(void *)(v0 + 528) = v33;
    uint64_t v35 = *(void *)(v0 + 72);
    uint64_t v36 = *(void *)(v0 + 80);
    *(void *)(v0 + 536) = v35;
    uint64_t v37 = *(void *)(v0 + 104);
    *(void *)(v0 + 552) = v37;
    uint64_t v38 = *(void *)(v0 + 128);
    *(void *)(v0 + 560) = *(void *)(v0 + 120);
    *(void *)(v0 + 568) = v38;
    long long v39 = *(_OWORD *)(v0 + 24);
    *(void *)(v0 + 512) = v39;
    long long v40 = *(_OWORD *)(v0 + 88);
    *(void *)(v0 + 544) = v40;
    uint64_t v41 = *v29;
    uint64_t v42 = v29[1];
    uint64_t v43 = v29[2];
    uint64_t v44 = v29[3];
    *(void *)(v0 + 136) = v30;
    *(_OWORD *)(v0 + 144) = v39;
    *(void *)(v0 + 160) = v31;
    *(void *)(v0 + 168) = v32;
    *(void *)(v0 + 176) = v33;
    *(void *)(v0 + 184) = v34;
    *(void *)(v0 + 192) = v35;
    *(void *)(v0 + 200) = v36;
    *(_OWORD *)(v0 + 208) = v40;
    *(void *)(v0 + 224) = v37;
    uint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v45;
    *uint64_t v45 = v0;
    v45[1] = sub_1002BA690;
    return sub_1002D1A8C(v41, v42, v43, v44, v0 + 136);
  }
}

uint64_t sub_1002BA690(uint64_t a1)
{
  *(void *)(*(void *)v1 + 584) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002BA790, 0, 0);
}

uint64_t sub_1002BA790()
{
  if (*(void *)(v0 + 584))
  {
    unsigned int v34 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(void))(*(void *)(v0 + 352) + 104))(*(void *)(v0 + 360));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void *)(v0 + 488);
    unint64_t v33 = *(void *)(v0 + 496);
    uint64_t v32 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 352) + 104);
    v32(*(void *)(v0 + 360), enum case for DIPError.Code.serverResponseInconsistent(_:), *(void *)(v0 + 344));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v1, v33);
    swift_errorRelease();
    uint64_t v24 = *(void *)(v0 + 456);
    uint64_t v25 = *(void *)(v0 + 464);
    uint64_t v30 = *(void *)(v0 + 448);
    uint64_t v28 = *(void *)(v0 + 432);
    uint64_t v29 = *(void *)(v0 + 424);
    uint64_t v31 = *(void *)(v0 + 384);
    uint64_t v26 = *(void *)(v0 + 360);
    uint64_t v27 = *(void *)(v0 + 344);
    uint64_t v22 = *(void *)(v0 + 336);
    unint64_t v23 = *(long long **)(v0 + 312);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v2 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v3 = *(void *)(*(void *)v2 + 72);
    unint64_t v4 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100614990;
    unint64_t v6 = v5 + v4;
    uint64_t v7 = (void *)(v5 + v4 + v2[14]);
    uint64_t v8 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v9 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104);
    v10(v6, v8, v9);
    uint64_t v11 = *(void *)(v22 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v12 = *(void *)(v22 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v7[3] = &type metadata for String;
    *uint64_t v7 = v11;
    v7[1] = v12;
    unint64_t v13 = v6 + v3 + v2[14];
    v10(v6 + v3, enum case for DIPError.PropertyKey.requestID(_:), v9);
    long long v14 = *v23;
    *(_OWORD *)(v0 + 248) = v23[1];
    *(_OWORD *)(v0 + 232) = v14;
    long long v15 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 296) = v15;
    *(void *)(v13 + 24) = &type metadata for String;
    *(_OWORD *)unint64_t v13 = v15;
    uint64_t v16 = (void *)(v6 + 2 * v3 + v2[14]);
    v10(v6 + 2 * v3, enum case for DIPError.PropertyKey.serverURL(_:), v9);
    v16[3] = &type metadata for String;
    *uint64_t v16 = v24;
    v16[1] = v25;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_1001061B8(v0 + 296);
    sub_10015C504(v5);
    v32(v26, v34, v27);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
    sub_10000C6CC(v31, (uint64_t *)&unk_100723610);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  else
  {
    type metadata accessor for LegacySynthesizedWorkflows();
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1002BAE80;
    uint64_t v20 = *(void *)(v0 + 568);
    uint64_t v21 = *(void *)(v0 + 320);
    return sub_100066964(v20, v21);
  }
}

uint64_t sub_1002BAE80(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 600) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1002BB190;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 608) = a1;
    uint64_t v5 = sub_1002BAFB0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002BAFB0()
{
  uint64_t v10 = v0[61];
  uint64_t v1 = v0[56];
  uint64_t v2 = v0[54];
  unint64_t v11 = v0[62];
  uint64_t v12 = v0[53];
  uint64_t v3 = v0[48];
  v4.value._uint64_t countAndFlagsBits = sub_10006BAA8();
  DIPSignpost.end(workflowID:isBackground:)(v4, (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  v5._unint64_t object = (void *)0x80000001006480C0;
  v6._uint64_t countAndFlagsBits = 0x3462386632356263;
  v6._unint64_t object = (void *)0xE800000000000000;
  v5._uint64_t countAndFlagsBits = 0xD000000000000019;
  logMilestone(tag:description:)(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C5F4(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v12);
  sub_10000C6CC(v3, (uint64_t *)&unk_100723610);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v8 = v0[76];
  return v7(v8);
}

uint64_t sub_1002BB190()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 488);
  unint64_t v1 = *(void *)(v0 + 496);
  unint64_t v33 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 352) + 104);
  v33(*(void *)(v0 + 360), enum case for DIPError.Code.serverResponseInconsistent(_:), *(void *)(v0 + 344));
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  sub_10000C5F4(v2, v1);
  swift_errorRelease();
  unsigned int v28 = enum case for DIPError.Code.internalError(_:);
  uint64_t v24 = *(void *)(v0 + 456);
  uint64_t v25 = *(void *)(v0 + 464);
  uint64_t v29 = *(void *)(v0 + 432);
  uint64_t v30 = *(void *)(v0 + 424);
  uint64_t v31 = *(void *)(v0 + 448);
  uint64_t v32 = *(void *)(v0 + 384);
  uint64_t v26 = *(void *)(v0 + 360);
  uint64_t v27 = *(void *)(v0 + 344);
  uint64_t v22 = *(void *)(v0 + 336);
  unint64_t v23 = *(long long **)(v0 + 312);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v3 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v4 = *(void *)(*(void *)v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v21 = 2 * v4;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100614990;
  unint64_t v7 = v6 + v5;
  uint64_t v8 = (void *)(v6 + v5 + v3[14]);
  uint64_t v9 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v10 = type metadata accessor for DIPError.PropertyKey();
  unint64_t v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104);
  v11(v7, v9, v10);
  uint64_t v12 = *(void *)(v22 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v13 = *(void *)(v22 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v8[3] = &type metadata for String;
  void *v8 = v12;
  v8[1] = v13;
  unint64_t v14 = v7 + v4;
  unint64_t v15 = v7 + v4 + v3[14];
  v11(v14, enum case for DIPError.PropertyKey.requestID(_:), v10);
  long long v16 = *v23;
  *(_OWORD *)(v0 + 248) = v23[1];
  *(_OWORD *)(v0 + 232) = v16;
  long long v17 = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 296) = v17;
  *(void *)(v15 + 24) = &type metadata for String;
  *(_OWORD *)unint64_t v15 = v17;
  uint64_t v18 = (void *)(v7 + v21 + v3[14]);
  v11(v7 + v21, enum case for DIPError.PropertyKey.serverURL(_:), v10);
  v18[3] = &type metadata for String;
  *uint64_t v18 = v24;
  v18[1] = v25;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_1001061B8(v0 + 296);
  sub_10015C504(v6);
  v33(v26, v28, v27);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  sub_10000C6CC(v32, (uint64_t *)&unk_100723610);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1002BB704()
{
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 360);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 264);
  unsigned int v30 = enum case for DIPError.Code.internalError(_:);
  uint64_t v31 = *(void (**)(uint64_t))(v1 + 104);
  v31(v2);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v22 = *(void *)(v0 + 456);
  uint64_t v23 = *(void *)(v0 + 464);
  uint64_t v28 = *(void *)(v0 + 448);
  uint64_t v26 = *(void *)(v0 + 432);
  uint64_t v27 = *(void *)(v0 + 424);
  uint64_t v29 = *(void *)(v0 + 384);
  uint64_t v24 = *(void *)(v0 + 360);
  uint64_t v25 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 336);
  uint64_t v21 = *(long long **)(v0 + 312);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v3 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v4 = *(void *)(*(void *)v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100614990;
  unint64_t v7 = v6 + v5;
  uint64_t v8 = (void *)(v6 + v5 + v3[14]);
  uint64_t v9 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v10 = type metadata accessor for DIPError.PropertyKey();
  unint64_t v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104);
  v11(v7, v9, v10);
  uint64_t v12 = *(void *)(v20 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v13 = *(void *)(v20 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v8[3] = &type metadata for String;
  void *v8 = v12;
  v8[1] = v13;
  unint64_t v14 = v7 + v4 + v3[14];
  v11(v7 + v4, enum case for DIPError.PropertyKey.requestID(_:), v10);
  long long v15 = *v21;
  *(_OWORD *)(v0 + 248) = v21[1];
  *(_OWORD *)(v0 + 232) = v15;
  long long v16 = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 296) = v16;
  *(void *)(v14 + 24) = &type metadata for String;
  *(_OWORD *)unint64_t v14 = v16;
  long long v17 = (void *)(v7 + 2 * v4 + v3[14]);
  v11(v7 + 2 * v4, enum case for DIPError.PropertyKey.serverURL(_:), v10);
  v17[3] = &type metadata for String;
  *long long v17 = v22;
  v17[1] = v23;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_1001061B8(v0 + 296);
  sub_10015C504(v6);
  ((void (*)(uint64_t, void, uint64_t))v31)(v24, v30, v25);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  sub_10000C6CC(v29, (uint64_t *)&unk_100723610);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_1002BBC1C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v6 + 657) = a5;
  *(void *)(v6 + 336) = a4;
  *(void *)(v6 + 344) = v5;
  *(unsigned char *)(v6 + 656) = a3;
  *(void *)(v6 + 320) = a1;
  *(void *)(v6 + 328) = a2;
  type metadata accessor for Workflow();
  *(void *)(v6 + 352) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 360) = v7;
  *(void *)(v6 + 368) = *(void *)(v7 - 8);
  *(void *)(v6 + 376) = swift_task_alloc();
  *(void *)(v6 + 384) = type metadata accessor for WorkflowRecommendationResponse();
  *(void *)(v6 + 392) = swift_task_alloc();
  sub_100007764(&qword_1007254C8);
  *(void *)(v6 + 400) = swift_task_alloc();
  sub_100007764((uint64_t *)&unk_100723610);
  *(void *)(v6 + 408) = swift_task_alloc();
  *(void *)(v6 + 416) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPSignpost.Config();
  *(void *)(v6 + 424) = v8;
  *(void *)(v6 + 432) = *(void *)(v8 - 8);
  *(void *)(v6 + 440) = swift_task_alloc();
  *(void *)(v6 + 448) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DIPSignpost();
  *(void *)(v6 + 456) = v9;
  *(void *)(v6 + 464) = *(void *)(v9 - 8);
  *(void *)(v6 + 472) = swift_task_alloc();
  *(void *)(v6 + 480) = swift_task_alloc();
  return _swift_task_switch(sub_1002BBE8C, 0, 0);
}

uint64_t sub_1002BBE8C()
{
  unint64_t v1 = 0xED0000776F6C666BLL;
  int v2 = *(unsigned __int8 *)(v0 + 656);
  static DaemonSignposts.workflowRecommendationRequest.getter();
  DIPSignpost.init(_:)();
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = 0xD000000000000016;
      unint64_t v1 = 0x80000001006480E0;
      goto LABEL_7;
    }
    unsigned int v4 = 808399663;
  }
  else
  {
    unsigned int v4 = 825176367;
  }
  uint64_t v3 = v4 | 0x726F772F00000000;
LABEL_7:
  uint64_t v46 = v3;
  uint64_t v47 = v1;
  *(void *)(v0 + 488) = v3;
  *(void *)(v0 + 496) = v1;
  uint64_t v5 = *(void *)(v0 + 464);
  uint64_t v6 = *(void *)(v0 + 432);
  uint64_t v44 = *(void *)(v0 + 424);
  uint64_t v42 = *(void *)(v0 + 456);
  uint64_t v43 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 416);
  uint64_t v41 = *(void *)(v0 + 336);
  sub_100007764(&qword_100729C78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100614990;
  *(void *)(inited + 32) = 0x6567412D72657355;
  *(void *)(inited + 40) = 0xEA0000000000746ELL;
  uint64_t v8 = self;
  id v9 = [v8 standardUserDefaults];
  v10._unint64_t object = (void *)0x8000000100647F00;
  v10._uint64_t countAndFlagsBits = 0xD000000000000010;
  Swift::String_optional v11 = NSUserDefaults.internalString(forKey:)(v10);

  *(Swift::String_optional *)(inited + 48) = v11;
  strcpy((char *)(inited + 64), "X-ENV-OVERRIDE");
  *(unsigned char *)(inited + 79) = -18;
  id v12 = [v8 standardUserDefaults];
  v13._uint64_t countAndFlagsBits = 0xD000000000000029;
  v13._unint64_t object = (void *)0x8000000100647F20;
  Swift::String_optional v14 = NSUserDefaults.internalString(forKey:)(v13);

  *(Swift::String_optional *)(inited + 80) = v14;
  *(void *)(inited + 96) = 0xD000000000000024;
  *(void *)(inited + 104) = 0x8000000100647F50;
  id v15 = [v8 standardUserDefaults];
  v16._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
  v16._unint64_t object = (void *)0x8000000100647F80;
  Swift::String_optional v17 = NSUserDefaults.internalString(forKey:)(v16);

  *(Swift::String_optional *)(inited + 112) = v17;
  unint64_t v18 = sub_10015E6C4(inited);
  uint64_t v19 = sub_1002BDBF8(v18);
  *(void *)(v0 + 504) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v20(v40, 1, 1, v42);
  sub_100048D6C(v41, v43, &qword_1007254C8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v43, 1, v44) == 1)
  {
    sub_10000C6CC(*(void *)(v0 + 400), &qword_1007254C8);
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 448);
    uint64_t v45 = *(void *)(v0 + 456);
    uint64_t v22 = *(void *)(v0 + 432);
    uint64_t v23 = *(void *)(v0 + 440);
    uint64_t v25 = *(void *)(v0 + 416);
    uint64_t v24 = *(void *)(v0 + 424);
    uint64_t v26 = *(void *)(v0 + 408);
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 32))(v23, *(void *)(v0 + 400), v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v23, v24);
    DIPSignpost.init(_:)();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    v20(v26, 0, 1, v45);
    sub_1000F0098(v26, v25);
  }
  uint64_t v27 = *(void *)(v0 + 328);
  *(void *)(v0 + 296) = &type metadata for WorkflowRecommendationRequest;
  uint64_t v28 = swift_allocObject();
  *(void *)(v0 + 272) = v28;
  long long v30 = *(_OWORD *)(v27 + 16);
  long long v29 = *(_OWORD *)(v27 + 32);
  *(_OWORD *)(v28 + 16) = *(_OWORD *)v27;
  *(_OWORD *)(v28 + 32) = v30;
  *(_OWORD *)(v28 + 48) = v29;
  long long v31 = *(_OWORD *)(v27 + 96);
  long long v33 = *(_OWORD *)(v27 + 48);
  long long v32 = *(_OWORD *)(v27 + 64);
  *(_OWORD *)(v28 + 96) = *(_OWORD *)(v27 + 80);
  *(_OWORD *)(v28 + 112) = v31;
  *(_OWORD *)(v28 + 64) = v33;
  *(_OWORD *)(v28 + 80) = v32;
  long long v35 = *(_OWORD *)(v27 + 128);
  long long v34 = *(_OWORD *)(v27 + 144);
  long long v36 = *(_OWORD *)(v27 + 112);
  *(void *)(v28 + 176) = *(void *)(v27 + 160);
  *(_OWORD *)(v28 + 144) = v35;
  *(_OWORD *)(v28 + 160) = v34;
  *(_OWORD *)(v28 + 128) = v36;
  sub_1001D9024(v27);
  uint64_t v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v37;
  *uint64_t v37 = v0;
  v37[1] = sub_1002BC2DC;
  char v38 = *(unsigned char *)(v0 + 657);
  return sub_1002CE7F8(v0 + 272, v46, v47, v19, v38);
}

uint64_t sub_1002BC2DC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*v4;
  v6[65] = a1;
  v6[66] = a2;
  v6[67] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = sub_1002BD6D0;
  }
  else
  {
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 34));

    uint64_t v7 = sub_1002BC41C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002BC41C()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 416);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  unint64_t v5 = *(void *)(v0 + 528);
  uint64_t v6 = *(void *)(v0 + 520);
  if (v4)
  {
    sub_10002CEB0(*(void *)(v0 + 520), *(void *)(v0 + 528));
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 472);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v3, v1);
    sub_10002CEB0(v6, v5);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
  }
  uint64_t v8 = *(void *)(v0 + 536);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1002D54A0(&qword_100729C80, (void (*)(uint64_t))type metadata accessor for WorkflowRecommendationResponse);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  unint64_t v9 = *(void *)(v0 + 528);
  uint64_t v10 = *(void *)(v0 + 520);
  if (v8)
  {
    uint64_t v11 = *(void *)(v0 + 368);
    sub_10000C5F4(v10, v9);
    swift_release();
    id v12 = *(void (**)(uint64_t, void, uint64_t))(v11 + 104);
LABEL_6:
    uint64_t v64 = v12;
    unint64_t v13 = *(void *)(v0 + 528);
    uint64_t v14 = *(void *)(v0 + 520);
    v12(*(void *)(v0 + 376), enum case for DIPError.Code.serverResponseInconsistent(_:), *(void *)(v0 + 360));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v14, v13);
    swift_errorRelease();
    unsigned int v59 = enum case for DIPError.Code.internalError(_:);
    uint64_t v55 = *(void *)(v0 + 488);
    uint64_t v56 = *(void *)(v0 + 496);
    uint64_t v62 = *(void *)(v0 + 480);
    uint64_t v60 = *(void *)(v0 + 464);
    uint64_t v61 = *(void *)(v0 + 456);
    uint64_t v63 = *(void *)(v0 + 416);
    uint64_t v57 = *(void *)(v0 + 376);
    uint64_t v58 = *(void *)(v0 + 360);
    uint64_t v53 = *(void *)(v0 + 344);
    uint64_t v54 = *(_OWORD **)(v0 + 328);
    sub_100007764((uint64_t *)&unk_1007225C0);
    id v15 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v16 = *(void *)(*(void *)v15 + 72);
    unint64_t v17 = (*(unsigned __int8 *)(*(void *)v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v15 + 80);
    uint64_t v52 = 2 * v16;
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_100614990;
    unint64_t v19 = v18 + v17;
    uint64_t v20 = (void *)(v18 + v17 + v15[14]);
    uint64_t v21 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v22 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v23 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104);
    v23(v19, v21, v22);
    uint64_t v24 = *(void *)(v53 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v25 = *(void *)(v53 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v20[3] = &type metadata for String;
    *uint64_t v20 = v24;
    v20[1] = v25;
    unint64_t v26 = v19 + v16;
    unint64_t v27 = v19 + v16 + v15[14];
    v23(v26, enum case for DIPError.PropertyKey.requestID(_:), v22);
    long long v28 = v54[1];
    *(_OWORD *)(v0 + 240) = *v54;
    *(_OWORD *)(v0 + 256) = v28;
    long long v29 = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 304) = v29;
    *(void *)(v27 + 24) = &type metadata for String;
    *(_OWORD *)unint64_t v27 = v29;
    long long v30 = (void *)(v19 + v52 + v15[14]);
    v23(v19 + v52, enum case for DIPError.PropertyKey.serverURL(_:), v22);
    v30[3] = &type metadata for String;
    *long long v30 = v55;
    v30[1] = v56;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_1001061B8(v0 + 304);
    sub_10015C504(v18);
    v64(v57, v59, v58);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v61);
    sub_10000C6CC(v63, (uint64_t *)&unk_100723610);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  uint64_t v33 = *(void *)(v0 + 392);
  sub_10000C5F4(v10, v9);
  swift_release();
  uint64_t v34 = *(void *)(v33 + 24);
  *(void *)(v0 + 544) = v34;
  long long v35 = *(uint64_t **)(v0 + 392);
  if (!v34)
  {
    id v12 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 368) + 104);
    v12(*(void *)(v0 + 376), enum case for DIPError.Code.topekaInternalServerError(_:), *(void *)(v0 + 360));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_1002D54E8((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for WorkflowRecommendationResponse);
    goto LABEL_6;
  }
  long long v36 = *(uint64_t **)(v0 + 328);
  uint64_t v37 = v35[11];
  *(void *)(v0 + 552) = v37;
  uint64_t v38 = v35[10];
  *(void *)(v0 + 560) = v38;
  uint64_t v39 = v35[9];
  *(void *)(v0 + 568) = v39;
  uint64_t v40 = v35[8];
  *(void *)(v0 + 576) = v40;
  uint64_t v41 = v35[7];
  *(void *)(v0 + 584) = v41;
  uint64_t v42 = v35[6];
  *(void *)(v0 + 592) = v42;
  uint64_t v43 = v35[5];
  *(void *)(v0 + 600) = v43;
  uint64_t v44 = v35[4];
  *(void *)(v0 + 608) = v44;
  uint64_t v45 = v35[2];
  *(void *)(v0 + 616) = v45;
  uint64_t v46 = v35[1];
  *(void *)(v0 + 624) = v46;
  uint64_t v47 = *v35;
  *(void *)(v0 + 632) = *v35;
  *(void *)(v0 + 144) = v47;
  *(void *)(v0 + 152) = v46;
  *(void *)(v0 + 160) = v45;
  *(void *)(v0 + 168) = v34;
  *(void *)(v0 + 176) = v44;
  *(void *)(v0 + 184) = v43;
  *(void *)(v0 + 192) = v42;
  *(void *)(v0 + 200) = v41;
  *(void *)(v0 + 208) = v40;
  *(void *)(v0 + 216) = v39;
  *(void *)(v0 + 224) = v38;
  *(void *)(v0 + 232) = v37;
  uint64_t v48 = v36[1];
  uint64_t v65 = *v36;
  uint64_t v50 = v36[2];
  uint64_t v49 = v36[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v51 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v51;
  *uint64_t v51 = v0;
  v51[1] = sub_1002BCD00;
  return sub_1002D1A8C(v65, v48, v50, v49, v0 + 144);
}

uint64_t sub_1002BCD00(uint64_t a1)
{
  uint64_t v6 = *(void *)(*(void *)v1 + 632);
  uint64_t v5 = *(void *)(*(void *)v1 + 624);
  uint64_t v4 = *(void *)(*(void *)v1 + 616);
  uint64_t v2 = *(void *)(*(void *)v1 + 544);
  *(void *)(*(void *)v1 + 648) = a1;
  swift_task_dealloc();
  sub_10023906C(v6, v5, v4, v2);
  return _swift_task_switch(sub_1002BCF48, 0, 0);
}

uint64_t sub_1002BCF48()
{
  if (*(void *)(v0 + 648))
  {
    uint64_t v46 = *(void *)(v0 + 392);
    unsigned int v48 = enum case for DIPError.Code.internalError(_:);
    uint64_t v1 = *(void (**)(void))(*(void *)(v0 + 368) + 104);
    v1(*(void *)(v0 + 376));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_1002D54E8(v46, (uint64_t (*)(void))type metadata accessor for WorkflowRecommendationResponse);
    unint64_t v47 = *(void *)(v0 + 528);
    uint64_t v2 = *(void *)(v0 + 520);
    ((void (*)(void, void, void))v1)(*(void *)(v0 + 376), enum case for DIPError.Code.serverResponseInconsistent(_:), *(void *)(v0 + 360));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v2, v47);
    swift_errorRelease();
    uint64_t v35 = *(void *)(v0 + 488);
    uint64_t v36 = *(void *)(v0 + 496);
    uint64_t v39 = *(void *)(v0 + 464);
    uint64_t v40 = *(void *)(v0 + 456);
    uint64_t v41 = *(void *)(v0 + 480);
    uint64_t v42 = *(void *)(v0 + 416);
    uint64_t v37 = *(void *)(v0 + 376);
    uint64_t v38 = *(void *)(v0 + 360);
    uint64_t v33 = *(void *)(v0 + 344);
    uint64_t v34 = *(_OWORD **)(v0 + 328);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v3 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v4 = *(void *)(*(void *)v3 + 72);
    unint64_t v5 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100614990;
    unint64_t v7 = v6 + v5;
    uint64_t v8 = (void *)(v6 + v5 + v3[14]);
    uint64_t v9 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v10 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104);
    v11(v7, v9, v10);
    uint64_t v12 = *(void *)(v33 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v13 = *(void *)(v33 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v8[3] = &type metadata for String;
    void *v8 = v12;
    v8[1] = v13;
    unint64_t v14 = v7 + v4 + v3[14];
    v11(v7 + v4, enum case for DIPError.PropertyKey.requestID(_:), v10);
    long long v15 = v34[1];
    *(_OWORD *)(v0 + 240) = *v34;
    *(_OWORD *)(v0 + 256) = v15;
    long long v16 = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 304) = v16;
    *(void *)(v14 + 24) = &type metadata for String;
    *(_OWORD *)unint64_t v14 = v16;
    unint64_t v17 = v7 + 2 * v4;
    uint64_t v18 = (void *)(v17 + v3[14]);
    v11(v17, enum case for DIPError.PropertyKey.serverURL(_:), v10);
    v18[3] = &type metadata for String;
    *uint64_t v18 = v35;
    v18[1] = v36;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_1001061B8(v0 + 304);
    sub_10015C504(v6);
    ((void (*)(uint64_t, void, uint64_t))v1)(v37, v48, v38);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
    sub_10000C6CC(v42, (uint64_t *)&unk_100723610);
  }
  else
  {
    unint64_t v43 = *(void *)(v0 + 528);
    uint64_t v20 = *(void *)(v0 + 520);
    uint64_t v21 = *(void *)(v0 + 480);
    uint64_t v22 = *(void *)(v0 + 464);
    uint64_t v45 = *(void *)(v0 + 456);
    uint64_t v23 = *(void *)(v0 + 416);
    uint64_t v24 = *(void *)(v0 + 392);
    uint64_t v25 = *(void *)(v0 + 384);
    unint64_t v26 = *(uint64_t **)(v0 + 352);
    uint64_t v44 = *(void *)(v0 + 320);
    swift_bridgeObjectRelease();
    sub_1002D5548(v24 + *(int *)(v25 + 20), (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Workflow);
    uint64_t v27 = *v26;
    long long v28 = (void *)v26[1];
    swift_bridgeObjectRetain();
    v29.value._uint64_t countAndFlagsBits = v27;
    v29.value._unint64_t object = v28;
    DIPSignpost.end(workflowID:isBackground:)(v29, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 0xD000000000000019;
    v30._unint64_t object = (void *)0x80000001006480C0;
    v31._uint64_t countAndFlagsBits = 0x3462386632356263;
    v31._unint64_t object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v31, v30);
    sub_10000C5F4(v20, v43);
    sub_1002D54E8(v24, (uint64_t (*)(void))type metadata accessor for WorkflowRecommendationResponse);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v45);
    sub_1002391A0((uint64_t)v26, v44);
    sub_10000C6CC(v23, (uint64_t *)&unk_100723610);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1002BD6D0()
{
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v1 = *(void *)(v0 + 376);
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 272);
  unsigned int v30 = enum case for DIPError.Code.internalError(_:);
  Swift::String v31 = *(void (**)(uint64_t))(v2 + 104);
  v31(v1);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v22 = *(void *)(v0 + 488);
  uint64_t v23 = *(void *)(v0 + 496);
  uint64_t v28 = *(void *)(v0 + 480);
  uint64_t v26 = *(void *)(v0 + 464);
  uint64_t v27 = *(void *)(v0 + 456);
  uint64_t v29 = *(void *)(v0 + 416);
  uint64_t v24 = *(void *)(v0 + 376);
  uint64_t v25 = *(void *)(v0 + 360);
  uint64_t v20 = *(void *)(v0 + 344);
  uint64_t v21 = *(_OWORD **)(v0 + 328);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v3 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v4 = *(void *)(*(void *)v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100614990;
  unint64_t v7 = v6 + v5;
  uint64_t v8 = (void *)(v6 + v5 + v3[14]);
  uint64_t v9 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v10 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104);
  v11(v7, v9, v10);
  uint64_t v12 = *(void *)(v20 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v13 = *(void *)(v20 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v8[3] = &type metadata for String;
  void *v8 = v12;
  v8[1] = v13;
  unint64_t v14 = v7 + v4 + v3[14];
  v11(v7 + v4, enum case for DIPError.PropertyKey.requestID(_:), v10);
  long long v15 = v21[1];
  *(_OWORD *)(v0 + 240) = *v21;
  *(_OWORD *)(v0 + 256) = v15;
  long long v16 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 304) = v16;
  *(void *)(v14 + 24) = &type metadata for String;
  *(_OWORD *)unint64_t v14 = v16;
  unint64_t v17 = (void *)(v7 + 2 * v4 + v3[14]);
  v11(v7 + 2 * v4, enum case for DIPError.PropertyKey.serverURL(_:), v10);
  v17[3] = &type metadata for String;
  *unint64_t v17 = v22;
  v17[1] = v23;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_1001061B8(v0 + 304);
  sub_10015C504(v6);
  ((void (*)(uint64_t, void, uint64_t))v31)(v24, v30, v25);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  sub_10000C6CC(v29, (uint64_t *)&unk_100723610);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_1002BDBF8(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(63 - v3) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v11 >= v6) {
      goto LABEL_41;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v6) {
        goto LABEL_41;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v6) {
          goto LABEL_41;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v6) {
            goto LABEL_41;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
LABEL_23:
    long long v15 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v10);
    unint64_t v16 = v15[1];
    if (v16)
    {
      uint64_t v17 = *v15;
      uint64_t v18 = HIBYTE(v16) & 0xF;
      if ((v16 & 0x2000000000000000) == 0) {
        uint64_t v18 = v17 & 0xFFFFFFFFFFFFLL;
      }
      if (v18)
      {
        unint64_t v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
        uint64_t v34 = v19[1];
        uint64_t v35 = *v19;
        unint64_t v20 = *(&_swiftEmptyDictionarySingleton + 2);
        if (*(&_swiftEmptyDictionarySingleton + 3) <= v20)
        {
          uint64_t v21 = v20 + 1;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          sub_100164294(v21, 1);
        }
        else
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
        }
        Hasher.init(_seed:)();
        String.hash(into:)();
        uint64_t result = Hasher._finalize()();
        uint64_t v22 = &_swiftEmptyDictionarySingleton + 8;
        uint64_t v23 = -1 << *((unsigned char *)&_swiftEmptyDictionarySingleton + 32);
        unint64_t v24 = result & ~v23;
        unint64_t v25 = v24 >> 6;
        if (((-1 << v24) & ~*(&_swiftEmptyDictionarySingleton + (v24 >> 6) + 8)) == 0)
        {
          char v27 = 0;
          unint64_t v28 = (unint64_t)(63 - v23) >> 6;
          while (++v25 != v28 || (v27 & 1) == 0)
          {
            BOOL v29 = v25 == v28;
            if (v25 == v28) {
              unint64_t v25 = 0;
            }
            v27 |= v29;
            uint64_t v30 = v22[v25];
            if (v30 != -1)
            {
              unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
              goto LABEL_40;
            }
          }
          goto LABEL_43;
        }
        unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(&_swiftEmptyDictionarySingleton + (v24 >> 6) + 8))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_40:
        *(void *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
        uint64_t v31 = 16 * v26;
        uint64_t v32 = (void *)(*(&_swiftEmptyDictionarySingleton + 6) + v31);
        *uint64_t v32 = v35;
        v32[1] = v34;
        uint64_t v33 = (void *)(*(&_swiftEmptyDictionarySingleton + 7) + v31);
        *uint64_t v33 = v17;
        v33[1] = v16;
        ++*(&_swiftEmptyDictionarySingleton + 2);
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v6)
  {
LABEL_41:
    sub_100130AE4();
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v6) {
      goto LABEL_41;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1002BDF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[21] = a5;
  v6[22] = v5;
  v6[19] = a3;
  v6[20] = a4;
  v6[17] = a1;
  v6[18] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[23] = v7;
  v6[24] = *(void *)(v7 - 8);
  v6[25] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v6[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPSignpost();
  v6[27] = v8;
  v6[28] = *(void *)(v8 - 8);
  v6[29] = swift_task_alloc();
  return _swift_task_switch(sub_1002BE074, 0, 0);
}

uint64_t sub_1002BE074()
{
  uint64_t v1 = *(void *)(v0 + 176);
  long long v7 = *(_OWORD *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  static DaemonSignposts.topekaNonceRequest.getter();
  DIPSignpost.init(_:)();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 240) = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v7;
  *(void *)(v4 + 48) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1002BE1A0;
  return DIPRetrier.retry<A>(operation:)(v0 + 16, &unk_100729C60, v4, &type metadata for NonceResponse);
}

uint64_t sub_1002BE1A0()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1002BE3DC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1002BE2BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002BE2BC()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  long long v14 = *(_OWORD *)(v0 + 16);
  long long v12 = *(_OWORD *)(v0 + 48);
  long long v13 = *(_OWORD *)(v0 + 32);
  long long v10 = *(_OWORD *)(v0 + 80);
  long long v11 = *(_OWORD *)(v0 + 64);
  long long v8 = *(_OWORD *)(v0 + 112);
  long long v9 = *(_OWORD *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 136);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(_OWORD *)uint64_t v4 = v14;
  *(_OWORD *)(v4 + 16) = v13;
  *(_OWORD *)(v4 + 32) = v12;
  *(_OWORD *)(v4 + 48) = v11;
  *(_OWORD *)(v4 + 64) = v10;
  *(_OWORD *)(v4 + 80) = v9;
  *(_OWORD *)(v4 + 96) = v8;
  *(void *)(v4 + 112) = v5;
  int64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1002BE3DC()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[24];
  swift_task_dealloc();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v4, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002BE5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[63] = a5;
  v6[64] = a6;
  v6[61] = a3;
  v6[62] = a4;
  v6[59] = a1;
  v6[60] = a2;
  uint64_t v7 = type metadata accessor for DIPError();
  v6[65] = v7;
  v6[66] = *(void *)(v7 - 8);
  v6[67] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v6[68] = swift_task_alloc();
  v6[69] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError.Code();
  v6[70] = v8;
  v6[71] = *(void *)(v8 - 8);
  v6[72] = swift_task_alloc();
  return _swift_task_switch(sub_1002BE728, 0, 0);
}

uint64_t sub_1002BE728()
{
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v23 = *(void *)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 488);
  uint64_t v2 = *(void *)(v0 + 496);
  uint64_t v4 = *(void *)(v0 + 480);
  *(_OWORD *)(v0 + 400) = *(_OWORD *)v4;
  uint64_t v22 = *(void *)(v4 + 16);
  *(void *)(v0 + 584) = v22;
  uint64_t v18 = *(void *)(v4 + 24);
  *(void *)(v0 + 592) = v18;
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v20 = *(void *)(v4 + 40);
  uint64_t v21 = *(void *)(v4 + 32);
  *(void *)(v0 + 600) = v5;
  sub_1000BEA14(v4 + 56, v0 + 280, &qword_100729C68);
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 400);
  uint64_t v6 = v3 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation;
  uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  *(void *)(v0 + 608) = v19;
  uint64_t v7 = *(void *)(v6 + 8);
  *(void *)(v0 + 616) = v7;
  sub_1002D52EC(v4);
  swift_bridgeObjectRetain();
  sub_1001145E0(v0 + 384);
  sub_1002D4260(v2, v1, (uint64_t *)(v0 + 232));
  uint64_t v8 = *(void *)(v0 + 232);
  uint64_t v9 = *(void *)(v0 + 240);
  *(void *)(v0 + 624) = v8;
  uint64_t v11 = *(void *)(v0 + 248);
  uint64_t v10 = *(void *)(v0 + 256);
  *(void *)(v0 + 632) = v9;
  *(void *)(v0 + 640) = v11;
  uint64_t v17 = *(void *)(v0 + 264);
  *(void *)(v0 + 648) = v10;
  *(void *)(v0 + 656) = v17;
  uint64_t v16 = *(void *)(v0 + 272);
  *(void *)(v0 + 664) = v16;
  long long v12 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 432) = v12;
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 264);
  sub_1001061B8(v0 + 432);
  sub_1001061B8(v0 + 416);
  sub_1001061B8(v0 + 448);
  sub_1002D5378((uint64_t *)(v0 + 280));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000AAD28(v8, v9);
  sub_1001145E0(v0 + 432);
  sub_1001145E0(v0 + 416);
  sub_1001145E0(v0 + 448);
  *(void *)(v0 + 352) = &type metadata for NonceRequest;
  long long v13 = (void *)swift_allocObject();
  *(void *)(v0 + 328) = v13;
  v13[2] = v19;
  v13[3] = v7;
  v13[4] = v22;
  v13[5] = v18;
  v13[6] = v21;
  v13[7] = v20;
  v13[8] = v5;
  v13[9] = v8;
  v13[10] = v9;
  v13[11] = v11;
  v13[12] = v10;
  v13[13] = v17;
  v13[14] = v16;
  long long v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 672) = v14;
  *long long v14 = v0;
  v14[1] = sub_1002BE9EC;
  return sub_1002CE7F8(v0 + 328, 0x6E6F6E2F312F312FLL, 0xEA00000000006563, v23, 0);
}

uint64_t sub_1002BE9EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*v4;
  v6[85] = a1;
  v6[86] = a2;
  v6[87] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = sub_1002BF6A0;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 41));

    uint64_t v7 = sub_1002BEB20;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002BEB20()
{
  uint64_t v1 = *(void *)(v0 + 696);
  unint64_t v2 = *(void *)(v0 + 688);
  uint64_t v3 = *(void *)(v0 + 680);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10002CEB0(v3, v2);
  JSONDecoder.init()();
  sub_10017DEB8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    uint64_t v43 = *(void *)(v0 + 680);
    unint64_t v44 = *(void *)(v0 + 688);
    uint64_t v4 = *(void *)(v0 + 576);
    uint64_t v5 = *(void *)(v0 + 568);
    uint64_t v41 = *(void *)(v0 + 560);
    uint64_t v42 = *(void *)(v0 + 536);
    uint64_t v6 = *(void *)(v0 + 528);
    uint64_t v7 = *(void *)(v0 + 520);
    uint64_t v45 = *(uint64_t **)(v0 + 472);
    sub_10000C5F4(v43, v44);
    swift_release();
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v8 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_100610730;
    unint64_t v11 = v10 + v9;
    long long v12 = (void *)(v11 + v8[14]);
    uint64_t v13 = enum case for DIPError.PropertyKey.serverURL(_:);
    uint64_t v14 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v11, v13, v14);
    v12[3] = &type metadata for String;
    *long long v12 = 0x6E6F6E2F312F312FLL;
    v12[1] = 0xEA00000000006563;
    swift_errorRetain();
    sub_10015C504(v10);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v41);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v15 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v16, v42, v7);
    sub_10000C5F4(v43, v44);
    swift_errorRelease();
    *uint64_t v45 = v15;
    uint64_t v17 = enum case for DIPRetrier.RetryResult.failure<A>(_:);
    uint64_t v18 = sub_100007764(&qword_100729C70);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v45, v17, v18);
    uint64_t v19 = *(void *)(v0 + 632);
    uint64_t v20 = *(void *)(v0 + 624);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000AAC30(v20, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  else
  {
    sub_10000C5F4(*(void *)(v0 + 680), *(void *)(v0 + 688));
    swift_release();
    uint64_t v23 = *(void *)(v0 + 16);
    uint64_t v24 = *(void *)(v0 + 24);
    *(void *)(v0 + 704) = v23;
    *(void *)(v0 + 712) = v24;
    uint64_t v25 = *(void *)(v0 + 32);
    uint64_t v26 = *(void *)(v0 + 40);
    *(void *)(v0 + 720) = v25;
    *(void *)(v0 + 728) = v26;
    uint64_t v27 = *(void *)(v0 + 48);
    uint64_t v28 = *(void *)(v0 + 56);
    *(void *)(v0 + 736) = v27;
    *(void *)(v0 + 744) = v28;
    uint64_t v29 = *(void *)(v0 + 64);
    uint64_t v30 = *(void *)(v0 + 72);
    *(void *)(v0 + 752) = v29;
    *(void *)(v0 + 760) = v30;
    uint64_t v31 = *(void *)(v0 + 80);
    uint64_t v32 = *(void *)(v0 + 88);
    *(void *)(v0 + 768) = v31;
    *(void *)(v0 + 776) = v32;
    uint64_t v33 = *(void *)(v0 + 96);
    *(void *)(v0 + 784) = v33;
    long long v34 = *(_OWORD *)(v0 + 104);
    long long v35 = *(_OWORD *)(v0 + 120);
    *(_OWORD *)(v0 + 792) = v34;
    *(_OWORD *)(v0 + 808) = v35;
    *(void *)(v0 + 136) = v23;
    *(void *)(v0 + 144) = v24;
    *(void *)(v0 + 152) = v25;
    *(void *)(v0 + 160) = v26;
    *(void *)(v0 + 168) = v27;
    *(void *)(v0 + 176) = v28;
    *(void *)(v0 + 184) = v29;
    *(void *)(v0 + 192) = v30;
    *(void *)(v0 + 200) = v31;
    *(void *)(v0 + 208) = v32;
    *(void *)(v0 + 216) = v33;
    *(void *)(v0 + 224) = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 824) = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_1002BF084;
    uint64_t v37 = *(void *)(v0 + 616);
    uint64_t v38 = *(void *)(v0 + 608);
    uint64_t v39 = *(void *)(v0 + 592);
    uint64_t v40 = *(void *)(v0 + 584);
    return sub_1002D1A8C(v38, v37, v40, v39, v0 + 136);
  }
}

uint64_t sub_1002BF084(uint64_t a1)
{
  *(void *)(*(void *)v1 + 832) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002BF1C0, 0, 0);
}

uint64_t sub_1002BF1C0()
{
  uint64_t v1 = *(void *)(v0 + 816);
  uint64_t v2 = *(void *)(v0 + 808);
  if (*(void *)(v0 + 832))
  {
    unint64_t v33 = *(void *)(v0 + 688);
    uint64_t v31 = *(void *)(v0 + 680);
    uint64_t v26 = *(void *)(v0 + 576);
    uint64_t v3 = *(void *)(v0 + 568);
    uint64_t v28 = *(void *)(v0 + 560);
    long long v35 = *(uint64_t **)(v0 + 472);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v4 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100610730;
    unint64_t v7 = v6 + v5;
    uint64_t v8 = (void *)(v7 + v4[14]);
    uint64_t v9 = enum case for DIPError.PropertyKey.serverURL(_:);
    uint64_t v10 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(v7, v9, v10);
    v8[3] = &type metadata for String;
    void *v8 = 0x6E6F6E2F312F312FLL;
    v8[1] = 0xEA00000000006563;
    swift_errorRetain();
    sub_10015C504(v6);
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v26, enum case for DIPError.Code.internalError(_:), v28);
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v11 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C5F4(v31, v33);
    swift_errorRelease();
    *long long v35 = v11;
    uint64_t v12 = enum case for DIPRetrier.RetryResult.failure<A>(_:);
    uint64_t v13 = sub_100007764(&qword_100729C70);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v35, v12, v13);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 800);
    long long v36 = *(_OWORD *)(v0 + 784);
    long long v32 = *(_OWORD *)(v0 + 752);
    long long v34 = *(_OWORD *)(v0 + 768);
    long long v29 = *(_OWORD *)(v0 + 720);
    long long v30 = *(_OWORD *)(v0 + 736);
    long long v27 = *(_OWORD *)(v0 + 704);
    unint64_t v15 = *(void *)(v0 + 688);
    uint64_t v16 = *(void *)(v0 + 680);
    uint64_t v17 = *(void *)(v0 + 472);
    v18._unint64_t object = (void *)0x8000000100647EE0;
    v19._uint64_t countAndFlagsBits = 0x3063363334336237;
    v19._unint64_t object = (void *)0xE800000000000000;
    v18._uint64_t countAndFlagsBits = 0xD000000000000016;
    logMilestone(tag:description:)(v19, v18);
    sub_10000C5F4(v16, v15);
    *(_OWORD *)uint64_t v17 = v27;
    *(_OWORD *)(v17 + 16) = v29;
    *(_OWORD *)(v17 + 32) = v30;
    *(_OWORD *)(v17 + 48) = v32;
    *(_OWORD *)(v17 + 64) = v34;
    *(_OWORD *)(v17 + 80) = v36;
    *(void *)(v17 + 96) = v14;
    *(void *)(v17 + 104) = v2;
    *(void *)(v17 + 112) = v1;
    uint64_t v20 = enum case for DIPRetrier.RetryResult.success<A>(_:);
    uint64_t v21 = sub_100007764(&qword_100729C70);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v17, v20, v21);
  }
  uint64_t v22 = *(void *)(v0 + 632);
  uint64_t v23 = *(void *)(v0 + 624);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(v23, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_1002BF6A0()
{
  uint64_t v1 = v0[71];
  uint64_t v2 = v0[70];
  uint64_t v3 = v0[68];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 41));
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) != 1)
  {
    uint64_t v4 = v0[71];
    uint64_t v5 = v0[70];
    uint64_t v6 = v0[69];
    sub_100048D6C(v0[68], v6, &qword_100723600);
    int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v6, v5);
    if (v7 == enum case for DIPError.Code.httpUnauthorized(_:)
      || v7 == enum case for DIPError.Code.httpAuthKitReprovision(_:)
      || v7 == enum case for DIPError.Code.httpAuthKitResync(_:))
    {
      uint64_t v10 = v0[87];
      uint64_t v11 = v0[59];
      sub_10000C6CC(v0[68], &qword_100723600);
      *(void *)uint64_t v11 = v10;
      *(void *)(v11 + 8) = 0;
      *(unsigned char *)(v11 + 16) = 1;
      uint64_t v12 = enum case for DIPRetrier.RetryResult.retry<A>(_:);
      uint64_t v13 = sub_100007764(&qword_100729C70);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
      goto LABEL_12;
    }
    (*(void (**)(void, void))(v0[71] + 8))(v0[69], v0[70]);
  }
  uint64_t v14 = v0[68];
  unint64_t v15 = (void *)v0[59];
  *unint64_t v15 = v0[87];
  uint64_t v16 = enum case for DIPRetrier.RetryResult.failure<A>(_:);
  uint64_t v17 = sub_100007764(&qword_100729C70);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v15, v16, v17);
  sub_10000C6CC(v14, &qword_100723600);
LABEL_12:
  uint64_t v18 = v0[79];
  uint64_t v19 = v0[78];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(v19, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1002BF970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[21] = a3;
  v4[22] = v3;
  v4[19] = a1;
  v4[20] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[23] = v5;
  v4[24] = *(void *)(v5 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[26] = v6;
  v4[27] = *(void *)(v6 - 8);
  v4[28] = swift_task_alloc();
  type metadata accessor for IdentityProofingResponse(0);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  type metadata accessor for IdentityProofingRequest(0);
  v4[31] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[32] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPSignpost();
  v4[33] = v7;
  v4[34] = *(void *)(v7 - 8);
  v4[35] = swift_task_alloc();
  return _swift_task_switch(sub_1002BFB80, 0, 0);
}

uint64_t sub_1002BFB80()
{
  uint64_t v1 = v0[20];
  static DaemonSignposts.identityProofingRequest.getter();
  DIPSignpost.init(_:)();
  uint64_t v2 = sub_100007764(&qword_100726790);
  v0[36] = v2;
  v0[17] = v2;
  uint64_t v3 = sub_10002C2D8(v0 + 14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v3, v1, v2);
  if (qword_10071F4E8 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_100729A98;
  uint64_t v5 = unk_100729AA0;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[37] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1002BFCE4;
  return sub_1002CE7F8((uint64_t)(v0 + 14), v4, v5, 0, 0);
}

uint64_t sub_1002BFCE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*v4;
  v6[38] = a1;
  v6[39] = a2;
  v6[40] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = sub_1002C0E8C;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 14));

    uint64_t v7 = sub_1002BFE14;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002BFE14()
{
  unint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 304);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10002CEB0(v3, v1);
  JSONDecoder.init()();
  *(void *)(v0 + 328) = sub_100007764(&qword_1007267C8);
  sub_1000B6120(&qword_100729C50, &qword_1007267C8);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v4 = *(void *)(v0 + 304);
  unint64_t v5 = *(void *)(v0 + 312);
  if (v2)
  {
    uint64_t v6 = *(void *)(v0 + 192);
    sub_10000C5F4(v4, v5);
    swift_release();
    unsigned int v45 = enum case for DIPError.Code.internalError(_:);
    uint64_t v46 = *(void (**)(void))(v6 + 104);
    uint64_t v8 = *(void *)(v0 + 304);
    unint64_t v7 = *(void *)(v0 + 312);
    v46(*(void *)(v0 + 200));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v8, v7);
    swift_errorRelease();
    uint64_t v42 = *(void *)(v0 + 272);
    uint64_t v43 = *(void *)(v0 + 264);
    uint64_t v44 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 248);
    uint64_t v40 = *(void *)(v0 + 200);
    uint64_t v41 = *(void *)(v0 + 184);
    uint64_t v37 = *(void *)(v0 + 176);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v10 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v11 = *(void *)(*(void *)v10 + 72);
    unint64_t v12 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
    uint64_t v38 = 2 * v11;
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_100614990;
    uint64_t v13 = (void *)(v39 + v12 + v10[14]);
    uint64_t v14 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v15 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v16 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104);
    v16(v39 + v12, v14, v15);
    uint64_t v17 = *(void *)(v37 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v18 = *(void *)(v37 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v13[3] = &type metadata for String;
    *uint64_t v13 = v17;
    v13[1] = v18;
    uint64_t v19 = (void *)(v39 + v12 + v11 + v10[14]);
    v16(v39 + v12 + v11, enum case for DIPError.PropertyKey.requestID(_:), v15);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    JWSSignedJSON.payload.getter();
    uint64_t v21 = *(void *)(v9 + 16);
    uint64_t v20 = *(void *)(v9 + 24);
    swift_bridgeObjectRetain();
    sub_1002D54E8(v9, type metadata accessor for IdentityProofingRequest);
    v19[3] = &type metadata for String;
    *uint64_t v19 = v21;
    v19[1] = v20;
    uint64_t v22 = (uint64_t *)(v39 + v12 + v38 + v10[14]);
    v16(v39 + v12 + v38, enum case for DIPError.PropertyKey.serverURL(_:), v15);
    uint64_t v24 = qword_100729A98;
    uint64_t v23 = unk_100729AA0;
    v22[3] = (uint64_t)&type metadata for String;
    *uint64_t v22 = v24;
    v22[1] = v23;
    swift_bridgeObjectRetain();
    sub_10015C504(v39);
    ((void (*)(uint64_t, void, uint64_t))v46)(v40, v45, v41);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v44, v43);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  else
  {
    long long v27 = *(_OWORD **)(v0 + 240);
    uint64_t v28 = *(uint64_t **)(v0 + 248);
    sub_10000C5F4(v4, v5);
    swift_release();
    JWSSignedJSON.payload.getter();
    uint64_t v29 = v28[1];
    uint64_t v47 = *v28;
    *(void *)(v0 + 336) = v29;
    uint64_t v30 = v28[2];
    uint64_t v31 = v28[3];
    *(void *)(v0 + 344) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D54E8((uint64_t)v28, type metadata accessor for IdentityProofingRequest);
    JWSSignedJSON.payload.getter();
    long long v32 = v27[1];
    *(_OWORD *)(v0 + 16) = *v27;
    *(_OWORD *)(v0 + 32) = v32;
    long long v33 = v27[2];
    long long v34 = v27[3];
    long long v35 = v27[5];
    *(_OWORD *)(v0 + 80) = v27[4];
    *(_OWORD *)(v0 + 96) = v35;
    *(_OWORD *)(v0 + 48) = v33;
    *(_OWORD *)(v0 + 64) = v34;
    sub_1002B90A0(v0 + 16);
    sub_1002D54E8((uint64_t)v27, type metadata accessor for IdentityProofingResponse);
    long long v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v36;
    *long long v36 = v0;
    v36[1] = sub_1002C04E4;
    return sub_1002D1A8C(v47, v29, v30, v31, v0 + 16);
  }
}

uint64_t sub_1002C04E4(uint64_t a1)
{
  uint64_t v2 = *(void *)v1 + 16;
  *(void *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1002B9118(v2);
  return _swift_task_switch(sub_1002C0634, 0, 0);
}

uint64_t sub_1002C0634()
{
  uint64_t v53 = v0;
  if (v0[45])
  {
    uint64_t v1 = v0[29];
    JWSSignedJSON.payload.getter();
    uint64_t v3 = *(void *)(v1 + 96);
    unint64_t v2 = *(void *)(v1 + 104);
    swift_bridgeObjectRetain();
    sub_1002D54E8(v1, type metadata accessor for IdentityProofingResponse);
    if (v2)
    {
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      BOOL v6 = os_log_type_enabled(v4, v5);
      uint64_t v7 = v0[27];
      uint64_t v8 = v0[28];
      uint64_t v9 = v0[26];
      if (v6)
      {
        uint64_t v50 = v0[28];
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        v52[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136315138;
        swift_bridgeObjectRetain();
        v0[18] = sub_100110D58(v3, v2, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Server runtime error: %s", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v50, v9);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
      }
    }
    uint64_t v47 = v0[41];
    uint64_t v48 = v0[19];
    unsigned int v51 = enum case for DIPError.Code.internalError(_:);
    uint64_t v20 = *(void (**)(void))(v0[24] + 104);
    v20(v0[25]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t))(*(void *)(v47 - 8) + 8))(v48);
    uint64_t v21 = v0[38];
    unint64_t v49 = v0[39];
    ((void (*)(void, void, void))v20)(v0[25], v51, v0[23]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v21, v49);
    swift_errorRelease();
    uint64_t v44 = v0[34];
    uint64_t v45 = v0[33];
    uint64_t v46 = v0[35];
    uint64_t v22 = v0[31];
    uint64_t v42 = v0[25];
    uint64_t v43 = v0[23];
    uint64_t v39 = v0[22];
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v23 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v24 = *(void *)(*(void *)v23 + 72);
    unint64_t v25 = (*(unsigned __int8 *)(*(void *)v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v23 + 80);
    uint64_t v40 = 2 * v24;
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_100614990;
    uint64_t v26 = (void *)(v41 + v25 + v23[14]);
    uint64_t v27 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v28 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v29 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104);
    v29(v41 + v25, v27, v28);
    uint64_t v30 = *(void *)(v39 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v31 = *(void *)(v39 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v26[3] = &type metadata for String;
    *uint64_t v26 = v30;
    v26[1] = v31;
    long long v32 = (void *)(v41 + v25 + v24 + v23[14]);
    v29(v41 + v25 + v24, enum case for DIPError.PropertyKey.requestID(_:), v28);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    JWSSignedJSON.payload.getter();
    uint64_t v34 = *(void *)(v22 + 16);
    uint64_t v33 = *(void *)(v22 + 24);
    swift_bridgeObjectRetain();
    sub_1002D54E8(v22, type metadata accessor for IdentityProofingRequest);
    v32[3] = &type metadata for String;
    *long long v32 = v34;
    v32[1] = v33;
    long long v35 = (uint64_t *)(v41 + v25 + v40 + v23[14]);
    v29(v41 + v25 + v40, enum case for DIPError.PropertyKey.serverURL(_:), v28);
    uint64_t v37 = qword_100729A98;
    uint64_t v36 = unk_100729AA0;
    v35[3] = (uint64_t)&type metadata for String;
    *long long v35 = v37;
    v35[1] = v36;
    swift_bridgeObjectRetain();
    sub_10015C504(v41);
    ((void (*)(uint64_t, void, uint64_t))v20)(v42, v51, v43);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v46, v45);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v12 = v0[38];
    unint64_t v11 = v0[39];
    uint64_t v13 = v0[34];
    uint64_t v14 = v0[35];
    uint64_t v15 = v0[33];
    v16.value._uint64_t countAndFlagsBits = sub_10006BAA8();
    DIPSignpost.end(workflowID:isBackground:)(v16, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 0xD000000000000019;
    v17._unint64_t object = (void *)0x8000000100647E70;
    v18._uint64_t countAndFlagsBits = 0x3566376339346663;
    v18._unint64_t object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v18, v17);
    sub_10000C5F4(v12, v11);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
  }
  return v19();
}

uint64_t sub_1002C0E8C()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 14));
  unsigned int v30 = enum case for DIPError.Code.internalError(_:);
  uint64_t v31 = *(void (**)(uint64_t))(v2 + 104);
  v31(v1);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v27 = v0[34];
  uint64_t v28 = v0[33];
  uint64_t v29 = v0[35];
  uint64_t v3 = v0[31];
  uint64_t v25 = v0[25];
  uint64_t v26 = v0[23];
  uint64_t v22 = v0[22];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v4 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v5 = *(void *)(*(void *)v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v23 = 2 * v5;
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100614990;
  unint64_t v7 = v24 + v6;
  uint64_t v8 = (void *)(v24 + v6 + v4[14]);
  uint64_t v9 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v10 = type metadata accessor for DIPError.PropertyKey();
  unint64_t v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104);
  v11(v7, v9, v10);
  uint64_t v12 = *(void *)(v22 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v13 = *(void *)(v22 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v8[3] = &type metadata for String;
  void *v8 = v12;
  v8[1] = v13;
  uint64_t v14 = (void *)(v7 + v5 + v4[14]);
  v11(v7 + v5, enum case for DIPError.PropertyKey.requestID(_:), v10);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  JWSSignedJSON.payload.getter();
  uint64_t v16 = *(void *)(v3 + 16);
  uint64_t v15 = *(void *)(v3 + 24);
  swift_bridgeObjectRetain();
  sub_1002D54E8(v3, type metadata accessor for IdentityProofingRequest);
  v14[3] = &type metadata for String;
  *uint64_t v14 = v16;
  v14[1] = v15;
  Swift::String v17 = (uint64_t *)(v7 + v23 + v4[14]);
  v11(v7 + v23, enum case for DIPError.PropertyKey.serverURL(_:), v10);
  uint64_t v19 = qword_100729A98;
  uint64_t v18 = unk_100729AA0;
  v17[3] = (uint64_t)&type metadata for String;
  *Swift::String v17 = v19;
  v17[1] = v18;
  swift_bridgeObjectRetain();
  sub_10015C504(v24);
  ((void (*)(uint64_t, void, uint64_t))v31)(v25, v30, v26);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1002C1358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[22] = v5;
  v4[23] = *(void *)(v5 - 8);
  v4[24] = swift_task_alloc();
  type metadata accessor for SharingRegistrationResponse(0);
  v4[25] = swift_task_alloc();
  type metadata accessor for SharingRegistrationRequest(0);
  v4[26] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v4[27] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPSignpost();
  v4[28] = v6;
  v4[29] = *(void *)(v6 - 8);
  v4[30] = swift_task_alloc();
  return _swift_task_switch(sub_1002C14FC, 0, 0);
}

uint64_t sub_1002C14FC()
{
  uint64_t v1 = v0[19];
  static DaemonSignposts.sharingRegistrationRequest.getter();
  DIPSignpost.init(_:)();
  uint64_t v2 = sub_100007764(&qword_100726648);
  v0[31] = v2;
  v0[17] = v2;
  uint64_t v3 = sub_10002C2D8(v0 + 14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v3, v1, v2);
  if (qword_10071F4F0 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_100729AA8;
  uint64_t v5 = unk_100729AB0;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[32] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1002C1660;
  return sub_1002CE7F8((uint64_t)(v0 + 14), v4, v5, 0, 0);
}

uint64_t sub_1002C1660(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*v4;
  v6[33] = a1;
  v6[34] = a2;
  v6[35] = v3;
  swift_task_dealloc();
  if (v3)
  {
    unint64_t v7 = sub_1002C2618;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 14));

    unint64_t v7 = sub_1002C1790;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002C1790()
{
  uint64_t v1 = *(void *)(v0 + 280);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  *(void *)(v0 + 288) = sub_100007764(&qword_1007265D8);
  sub_1000B6120(&qword_100729C48, &qword_1007265D8);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 184);
    swift_release();
    unsigned int v42 = enum case for DIPError.Code.internalError(_:);
    uint64_t v4 = *(void *)(v0 + 264);
    unint64_t v3 = *(void *)(v0 + 272);
    (*(void (**)(void))(v2 + 104))(*(void *)(v0 + 192));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_10000C5F4(v4, v3);
    uint64_t v39 = *(void *)(v0 + 232);
    uint64_t v40 = *(void *)(v0 + 224);
    uint64_t v41 = *(void *)(v0 + 240);
    uint64_t v5 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 184);
    uint64_t v37 = *(void *)(v0 + 192);
    uint64_t v38 = *(void *)(v0 + 176);
    uint64_t v33 = *(void *)(v0 + 168);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v6 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v7 = *(void *)(*(void *)v6 + 72);
    unint64_t v8 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
    uint64_t v34 = 2 * v7;
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_100614990;
    uint64_t v9 = (void *)(v35 + v8 + v6[14]);
    uint64_t v10 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104);
    v12(v35 + v8, v10, v11);
    uint64_t v13 = *(void *)(v33 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v14 = *(void *)(v33 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v9[3] = &type metadata for String;
    *uint64_t v9 = v13;
    v9[1] = v14;
    uint64_t v15 = (void *)(v35 + v8 + v7 + v6[14]);
    v12(v35 + v8 + v7, enum case for DIPError.PropertyKey.requestID(_:), v11);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    JWSSignedJSON.payload.getter();
    uint64_t v17 = *(void *)(v5 + 16);
    uint64_t v16 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain();
    sub_1002D54E8(v5, type metadata accessor for SharingRegistrationRequest);
    v15[3] = &type metadata for String;
    *uint64_t v15 = v17;
    v15[1] = v16;
    uint64_t v18 = (uint64_t *)(v35 + v8 + v34 + v6[14]);
    v12(v35 + v8 + v34, enum case for DIPError.PropertyKey.serverURL(_:), v11);
    uint64_t v20 = qword_100729AA8;
    uint64_t v19 = unk_100729AB0;
    v18[3] = (uint64_t)&type metadata for String;
    *uint64_t v18 = v20;
    v18[1] = v19;
    swift_bridgeObjectRetain();
    sub_10015C504(v35);
    (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))(v37, v42, v38);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  else
  {
    uint64_t v23 = *(_OWORD **)(v0 + 200);
    uint64_t v24 = *(uint64_t **)(v0 + 208);
    swift_release();
    JWSSignedJSON.payload.getter();
    uint64_t v25 = v24[1];
    uint64_t v43 = *v24;
    *(void *)(v0 + 296) = v25;
    uint64_t v26 = v24[2];
    uint64_t v27 = v24[3];
    *(void *)(v0 + 304) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D54E8((uint64_t)v24, type metadata accessor for SharingRegistrationRequest);
    JWSSignedJSON.payload.getter();
    long long v28 = v23[1];
    *(_OWORD *)(v0 + 16) = *v23;
    *(_OWORD *)(v0 + 32) = v28;
    long long v29 = v23[2];
    long long v30 = v23[3];
    long long v31 = v23[5];
    *(_OWORD *)(v0 + 80) = v23[4];
    *(_OWORD *)(v0 + 96) = v31;
    *(_OWORD *)(v0 + 48) = v29;
    *(_OWORD *)(v0 + 64) = v30;
    sub_1002B90A0(v0 + 16);
    sub_1002D54E8((uint64_t)v23, type metadata accessor for SharingRegistrationResponse);
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_1002C1E34;
    return sub_1002D1A8C(v43, v25, v26, v27, v0 + 16);
  }
}

uint64_t sub_1002C1E34(uint64_t a1)
{
  uint64_t v2 = *(void *)v1 + 16;
  *(void *)(*(void *)v1 + 320) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1002B9118(v2);
  return _swift_task_switch(sub_1002C1F84, 0, 0);
}

uint64_t sub_1002C1F84()
{
  if (v0[40])
  {
    uint64_t v38 = v0[36];
    uint64_t v40 = v0[18];
    uint64_t v1 = enum case for DIPError.Code.internalError(_:);
    unsigned int v42 = *(void (**)(void, uint64_t, void))(v0[23] + 104);
    unsigned int v39 = enum case for DIPError.Code.internalError(_:);
    v42(v0[24], enum case for DIPError.Code.internalError(_:), v0[22]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t))(*(void *)(v38 - 8) + 8))(v40);
    uint64_t v2 = v0[33];
    unint64_t v41 = v0[34];
    v42(v0[24], v1, v0[22]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_10000C5F4(v2, v41);
    uint64_t v35 = v0[29];
    uint64_t v36 = v0[28];
    uint64_t v37 = v0[30];
    uint64_t v3 = v0[26];
    uint64_t v32 = v0[23];
    uint64_t v33 = v0[24];
    uint64_t v34 = v0[22];
    uint64_t v29 = v0[21];
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v4 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v5 = *(void *)(*(void *)v4 + 72);
    unint64_t v6 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
    uint64_t v30 = 2 * v5;
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_100614990;
    uint64_t v7 = (void *)(v31 + v6 + v4[14]);
    uint64_t v8 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v9 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104);
    v10(v31 + v6, v8, v9);
    uint64_t v11 = *(void *)(v29 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v12 = *(void *)(v29 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v7[3] = &type metadata for String;
    *uint64_t v7 = v11;
    v7[1] = v12;
    uint64_t v13 = (void *)(v31 + v6 + v5 + v4[14]);
    v10(v31 + v6 + v5, enum case for DIPError.PropertyKey.requestID(_:), v9);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    JWSSignedJSON.payload.getter();
    uint64_t v15 = *(void *)(v3 + 16);
    uint64_t v14 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    sub_1002D54E8(v3, type metadata accessor for SharingRegistrationRequest);
    v13[3] = &type metadata for String;
    *uint64_t v13 = v15;
    v13[1] = v14;
    uint64_t v16 = (uint64_t *)(v31 + v6 + v30 + v4[14]);
    v10(v31 + v6 + v30, enum case for DIPError.PropertyKey.serverURL(_:), v9);
    uint64_t v18 = qword_100729AA8;
    uint64_t v17 = unk_100729AB0;
    v16[3] = (uint64_t)&type metadata for String;
    *uint64_t v16 = v18;
    v16[1] = v17;
    swift_bridgeObjectRetain();
    sub_10015C504(v31);
    (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v33, v39, v34);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
  }
  else
  {
    uint64_t v21 = v0[33];
    unint64_t v20 = v0[34];
    uint64_t v22 = v0[29];
    uint64_t v23 = v0[30];
    uint64_t v24 = v0[28];
    v25.value._uint64_t countAndFlagsBits = sub_10006BAA8();
    DIPSignpost.end(workflowID:isBackground:)(v25, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0xD000000000000025;
    v26._unint64_t object = (void *)0x8000000100647DE0;
    v27._uint64_t countAndFlagsBits = 0x3634363065363139;
    v27._unint64_t object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v27, v26);
    sub_10000C5F4(v21, v20);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1002C2618()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 14));
  unsigned int v26 = enum case for DIPError.Code.internalError(_:);
  uint64_t v29 = v0[30];
  uint64_t v27 = v0[29];
  uint64_t v28 = v0[28];
  uint64_t v1 = v0[26];
  uint64_t v23 = v0[23];
  uint64_t v24 = v0[24];
  uint64_t v25 = v0[22];
  uint64_t v20 = v0[21];
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v2 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v3 = *(void *)(*(void *)v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v21 = 2 * v3;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100614990;
  unint64_t v5 = v22 + v4;
  unint64_t v6 = (void *)(v22 + v4 + v2[14]);
  uint64_t v7 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v8 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v5, v7, v8);
  uint64_t v10 = *(void *)(v20 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v11 = *(void *)(v20 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v6[3] = &type metadata for String;
  *unint64_t v6 = v10;
  v6[1] = v11;
  uint64_t v12 = (void *)(v5 + v3 + v2[14]);
  v9();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  JWSSignedJSON.payload.getter();
  uint64_t v13 = *(void *)(v1 + 16);
  uint64_t v14 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_1002D54E8(v1, type metadata accessor for SharingRegistrationRequest);
  v12[3] = &type metadata for String;
  *uint64_t v12 = v13;
  v12[1] = v14;
  uint64_t v15 = (uint64_t *)(v5 + v21 + v2[14]);
  v9();
  uint64_t v17 = qword_100729AA8;
  uint64_t v16 = unk_100729AB0;
  v15[3] = (uint64_t)&type metadata for String;
  *uint64_t v15 = v17;
  v15[1] = v16;
  swift_bridgeObjectRetain();
  sub_10015C504(v22);
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v24, v26, v25);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1002C2A28(uint64_t a1, uint64_t a2)
{
  v3[132] = v2;
  v3[131] = a2;
  v3[130] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[133] = v4;
  v3[134] = *(void *)(v4 - 8);
  v3[135] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v3[136] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPSignpost();
  v3[137] = v5;
  v3[138] = *(void *)(v5 - 8);
  v3[139] = swift_task_alloc();
  return _swift_task_switch(sub_1002C2B78, 0, 0);
}

uint64_t sub_1002C2B78()
{
  uint64_t v1 = v0[131];
  static DaemonSignposts.identityPendingActionRequest.getter();
  DIPSignpost.init(_:)();
  unint64_t v2 = sub_1002D4404();
  v0[140] = v2;
  uint64_t v3 = sub_100007764(&qword_100729B80);
  v0[141] = v3;
  v0[129] = v3;
  uint64_t v4 = sub_10002C2D8(v0 + 126);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[142] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1002C2CBC;
  return sub_1002CE7F8((uint64_t)(v0 + 126), 0xD000000000000014, 0x8000000100647C80, v2, 0);
}

uint64_t sub_1002C2CBC(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v6 = (void *)*v4;
  v6[143] = a1;
  v6[144] = a2;
  v6[145] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = sub_1002C3DA4;
  }
  else
  {
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 126));

    uint64_t v7 = sub_1002C2DFC;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002C2DFC()
{
  uint64_t v1 = *(void *)(v0 + 1160);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  *(void *)(v0 + 1168) = sub_100007764(&qword_100729C38);
  sub_1000B6120(&qword_100729C40, &qword_100729C38);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 1072);
    swift_release();
    unsigned int v58 = enum case for DIPError.Code.internalError(_:);
    unint64_t v3 = *(void *)(v0 + 1152);
    uint64_t v4 = *(void *)(v0 + 1144);
    (*(void (**)(void))(v2 + 104))(*(void *)(v0 + 1080));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_10000C5F4(v4, v3);
    uint64_t v54 = *(void *)(v0 + 1104);
    uint64_t v55 = *(void *)(v0 + 1096);
    uint64_t v56 = *(void *)(v0 + 1112);
    uint64_t v51 = *(void *)(v0 + 1072);
    uint64_t v52 = *(void *)(v0 + 1080);
    uint64_t v53 = *(void *)(v0 + 1064);
    uint64_t v48 = *(void *)(v0 + 1056);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v5 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v6 = *(void *)(*(void *)v5 + 72);
    unint64_t v7 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
    uint64_t v50 = 2 * v6;
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_100614990;
    unint64_t v8 = v49 + v7;
    uint64_t v9 = (void *)(v49 + v7 + v5[14]);
    uint64_t v10 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104);
    v12(v8, v10, v11);
    uint64_t v13 = *(void *)(v48 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v14 = *(void *)(v48 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v9[3] = &type metadata for String;
    *uint64_t v9 = v13;
    v9[1] = v14;
    uint64_t v15 = (void *)(v8 + v6 + v5[14]);
    v12(v8 + v6, enum case for DIPError.PropertyKey.requestID(_:), v11);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    JWSSignedJSON.payload.getter();
    long long v16 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 448) = v16;
    *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 608);
    long long v17 = *(_OWORD *)(v0 + 528);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 384) = v17;
    long long v18 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 416) = v18;
    long long v19 = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v0 + 352) = v19;
    uint64_t v20 = *(void *)(v0 + 352);
    uint64_t v21 = *(void *)(v0 + 360);
    swift_bridgeObjectRetain();
    sub_1002D41A4(v0 + 336);
    v15[3] = &type metadata for String;
    *uint64_t v15 = v20;
    v15[1] = v21;
    uint64_t v22 = (void *)(v8 + v50 + v5[14]);
    v12(v8 + v50, enum case for DIPError.PropertyKey.serverURL(_:), v11);
    v22[3] = &type metadata for String;
    *uint64_t v22 = 0xD000000000000014;
    v22[1] = 0x8000000100647C80;
    sub_10015C504(v49);
    (*(void (**)(uint64_t, void, uint64_t))(v51 + 104))(v52, v58, v53);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v55);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  else
  {
    swift_release();
    JWSSignedJSON.payload.getter();
    long long v25 = *(_OWORD *)(v0 + 880);
    *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 864);
    *(_OWORD *)(v0 + 736) = v25;
    *(_OWORD *)(v0 + 752) = *(_OWORD *)(v0 + 896);
    long long v26 = *(_OWORD *)(v0 + 816);
    *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 800);
    *(_OWORD *)(v0 + 672) = v26;
    long long v27 = *(_OWORD *)(v0 + 848);
    *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 832);
    *(_OWORD *)(v0 + 704) = v27;
    long long v28 = *(_OWORD *)(v0 + 784);
    *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 768);
    *(_OWORD *)(v0 + 640) = v28;
    uint64_t v57 = *(void *)(v0 + 624);
    uint64_t v29 = *(void *)(v0 + 632);
    *(void *)(v0 + 1176) = v29;
    uint64_t v30 = *(void *)(v0 + 640);
    uint64_t v31 = *(void *)(v0 + 648);
    *(void *)(v0 + 1184) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D41A4(v0 + 624);
    JWSSignedJSON.payload.getter();
    long long v32 = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 128) = v32;
    long long v33 = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 160) = v33;
    long long v34 = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 64) = v34;
    long long v35 = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v0 + 96) = v35;
    long long v36 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v0 + 32) = v36;
    uint64_t v37 = *(void *)(v0 + 16);
    uint64_t v39 = *(void *)(v0 + 40);
    uint64_t v38 = *(void *)(v0 + 48);
    *(void *)(v0 + 1200) = v39;
    uint64_t v41 = *(void *)(v0 + 56);
    uint64_t v40 = *(void *)(v0 + 64);
    *(void *)(v0 + 1208) = v41;
    uint64_t v43 = *(void *)(v0 + 72);
    uint64_t v42 = *(void *)(v0 + 80);
    *(void *)(v0 + 1216) = v43;
    uint64_t v44 = *(void *)(v0 + 104);
    *(void *)(v0 + 1232) = v44;
    *(void *)(v0 + 912) = v37;
    long long v45 = *(_OWORD *)(v0 + 24);
    *(void *)(v0 + 1192) = v45;
    *(_OWORD *)(v0 + 920) = v45;
    *(void *)(v0 + 936) = v39;
    *(void *)(v0 + 944) = v38;
    *(void *)(v0 + 952) = v41;
    *(void *)(v0 + 960) = v40;
    *(void *)(v0 + 968) = v43;
    *(void *)(v0 + 976) = v42;
    long long v46 = *(_OWORD *)(v0 + 88);
    *(void *)(v0 + 1224) = v46;
    *(_OWORD *)(v0 + 984) = v46;
    *(void *)(v0 + 1000) = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D514C((void *)(v0 + 16));
    uint64_t v47 = (void *)swift_task_alloc();
    *(void *)(v0 + 1240) = v47;
    *uint64_t v47 = v0;
    v47[1] = sub_1002C356C;
    return sub_1002D1A8C(v57, v29, v30, v31, v0 + 912);
  }
}

uint64_t sub_1002C356C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 1248) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002C3768, 0, 0);
}

uint64_t sub_1002C3768()
{
  if (*(void *)(v0 + 1248))
  {
    uint64_t v35 = *(void *)(v0 + 1168);
    uint64_t v37 = *(void *)(v0 + 1040);
    uint64_t v1 = enum case for DIPError.Code.internalError(_:);
    uint64_t v40 = *(void (**)(void, uint64_t, void))(*(void *)(v0 + 1072) + 104);
    unsigned int v39 = enum case for DIPError.Code.internalError(_:);
    v40(*(void *)(v0 + 1080), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 1064));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t))(*(void *)(v35 - 8) + 8))(v37);
    unint64_t v38 = *(void *)(v0 + 1152);
    uint64_t v2 = *(void *)(v0 + 1144);
    v40(*(void *)(v0 + 1080), v1, *(void *)(v0 + 1064));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_10000C5F4(v2, v38);
    uint64_t v33 = *(void *)(v0 + 1104);
    uint64_t v34 = *(void *)(v0 + 1096);
    uint64_t v36 = *(void *)(v0 + 1112);
    uint64_t v30 = *(void *)(v0 + 1072);
    uint64_t v31 = *(void *)(v0 + 1080);
    uint64_t v32 = *(void *)(v0 + 1064);
    uint64_t v3 = *(void *)(v0 + 1056);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v4 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v5 = *(void *)(*(void *)v4 + 72);
    unint64_t v6 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
    uint64_t v29 = 2 * v5;
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_100614990;
    unint64_t v7 = (void *)(v28 + v6 + v4[14]);
    uint64_t v8 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v9 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104);
    v10(v28 + v6, v8, v9);
    uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v7[3] = &type metadata for String;
    *unint64_t v7 = v11;
    v7[1] = v12;
    uint64_t v13 = (void *)(v28 + v6 + v5 + v4[14]);
    v10(v28 + v6 + v5, enum case for DIPError.PropertyKey.requestID(_:), v9);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    JWSSignedJSON.payload.getter();
    long long v14 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 448) = v14;
    *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 608);
    long long v15 = *(_OWORD *)(v0 + 528);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 384) = v15;
    long long v16 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 416) = v16;
    long long v17 = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v0 + 352) = v17;
    uint64_t v19 = *(void *)(v0 + 352);
    uint64_t v18 = *(void *)(v0 + 360);
    swift_bridgeObjectRetain();
    sub_1002D41A4(v0 + 336);
    v13[3] = &type metadata for String;
    *uint64_t v13 = v19;
    v13[1] = v18;
    uint64_t v20 = (void *)(v28 + v6 + v29 + v4[14]);
    v10(v28 + v6 + v29, enum case for DIPError.PropertyKey.serverURL(_:), v9);
    v20[3] = &type metadata for String;
    *uint64_t v20 = 0xD000000000000014;
    v20[1] = 0x8000000100647C80;
    sub_10015C504(v28);
    (*(void (**)(uint64_t, void, uint64_t))(v30 + 104))(v31, v39, v32);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v34);
  }
  else
  {
    unint64_t v22 = *(void *)(v0 + 1152);
    uint64_t v23 = *(void *)(v0 + 1144);
    uint64_t v24 = *(void *)(v0 + 1112);
    uint64_t v25 = *(void *)(v0 + 1104);
    uint64_t v26 = *(void *)(v0 + 1096);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_10000C5F4(v23, v22);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_1002C3DA4()
{
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 1008);
  unsigned int v26 = enum case for DIPError.Code.internalError(_:);
  uint64_t v29 = *(void *)(v0 + 1112);
  uint64_t v27 = *(void *)(v0 + 1104);
  uint64_t v28 = *(void *)(v0 + 1096);
  uint64_t v23 = *(void *)(v0 + 1072);
  uint64_t v24 = *(void *)(v0 + 1080);
  uint64_t v25 = *(void *)(v0 + 1064);
  uint64_t v1 = *(void *)(v0 + 1056);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v2 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v3 = *(void *)(*(void *)v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v22 = 2 * v3;
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100614990;
  uint64_t v5 = (void *)(v21 + v4 + v2[14]);
  uint64_t v6 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v7 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v21 + v4, v6, v7);
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v5[3] = &type metadata for String;
  *uint64_t v5 = v9;
  v5[1] = v10;
  uint64_t v11 = (void *)(v21 + v4 + v3 + v2[14]);
  v8();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  JWSSignedJSON.payload.getter();
  long long v12 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 448) = v12;
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 608);
  long long v13 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v0 + 384) = v13;
  long long v14 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 416) = v14;
  long long v15 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 352) = v15;
  uint64_t v17 = *(void *)(v0 + 352);
  uint64_t v16 = *(void *)(v0 + 360);
  swift_bridgeObjectRetain();
  sub_1002D41A4(v0 + 336);
  v11[3] = &type metadata for String;
  *uint64_t v11 = v17;
  v11[1] = v16;
  uint64_t v18 = (void *)(v21 + v4 + v22 + v2[14]);
  v8();
  v18[3] = &type metadata for String;
  *uint64_t v18 = 0xD000000000000014;
  v18[1] = 0x8000000100647C80;
  sub_10015C504(v21);
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v24, v26, v25);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1002C41B0(uint64_t a1)
{
  v2[40] = a1;
  v2[41] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[42] = v3;
  v2[43] = *(void *)(v3 - 8);
  v2[44] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v2[45] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPSignpost();
  v2[46] = v4;
  v2[47] = *(void *)(v4 - 8);
  v2[48] = swift_task_alloc();
  return _swift_task_switch(sub_1002C42F8, 0, 0);
}

uint64_t sub_1002C42F8()
{
  uint64_t v1 = v0[40];
  static DaemonSignposts.identityPendingActionRequest.getter();
  DIPSignpost.init(_:)();
  uint64_t v2 = sub_100007764(&qword_1007273A8);
  v0[49] = v2;
  v0[39] = v2;
  uint64_t v3 = sub_10002C2D8(v0 + 36);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v3, v1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[50] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002C4430;
  return sub_1002CE7F8((uint64_t)(v0 + 36), 0xD000000000000018, 0x8000000100647BC0, 0, 0);
}

uint64_t sub_1002C4430(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v4;
  *(void *)(v7 + 408) = a3;
  *(void *)(v7 + 416) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v8 = sub_1002C4AB8;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v7 + 288);
    sub_10000C5F4(a1, a2);
    uint64_t v8 = sub_1002C4568;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_1002C4568()
{
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v1 = *(void **)(v0 + 408);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v2 = *(void *)(v0 + 384);
    uint64_t v4 = *(void *)(v0 + 368);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  }
  else
  {
    uint64_t v6 = *(void **)(v0 + 408);
    unsigned int v35 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(void))(*(void *)(v0 + 344) + 104))(*(void *)(v0 + 352));
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    uint64_t v32 = *(void *)(v0 + 376);
    uint64_t v33 = *(void *)(v0 + 368);
    uint64_t v34 = *(void *)(v0 + 384);
    uint64_t v29 = *(void *)(v0 + 344);
    uint64_t v30 = *(void *)(v0 + 352);
    uint64_t v7 = *(void *)(v0 + 328);
    uint64_t v31 = *(void *)(v0 + 336);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v8 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v9 = *(void *)(*(void *)v8 + 72);
    unint64_t v10 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
    uint64_t v28 = 2 * v9;
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_100614990;
    unint64_t v11 = v27 + v10;
    long long v12 = (void *)(v27 + v10 + v8[14]);
    uint64_t v13 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v14 = type metadata accessor for DIPError.PropertyKey();
    long long v15 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104);
    v15(v11, v13, v14);
    uint64_t v16 = *(void *)(v7 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v17 = *(void *)(v7 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v12[3] = &type metadata for String;
    *long long v12 = v16;
    v12[1] = v17;
    uint64_t v18 = (void *)(v11 + v9 + v8[14]);
    v15(v11 + v9, enum case for DIPError.PropertyKey.requestID(_:), v14);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    JWSSignedJSON.payload.getter();
    long long v19 = *(_OWORD *)(v0 + 168);
    long long v20 = *(_OWORD *)(v0 + 232);
    long long v21 = *(_OWORD *)(v0 + 264);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 128) = v21;
    *(void *)(v0 + 144) = *(void *)(v0 + 280);
    long long v22 = *(_OWORD *)(v0 + 200);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 184);
    *(_OWORD *)(v0 + 64) = v22;
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 216);
    *(_OWORD *)(v0 + 96) = v20;
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 152);
    *(_OWORD *)(v0 + 32) = v19;
    uint64_t v24 = *(void *)(v0 + 32);
    uint64_t v23 = *(void *)(v0 + 40);
    swift_bridgeObjectRetain();
    sub_1002D40EC(v0 + 16);
    v18[3] = &type metadata for String;
    *uint64_t v18 = v24;
    v18[1] = v23;
    uint64_t v25 = (void *)(v11 + v28 + v8[14]);
    v15(v11 + v28, enum case for DIPError.PropertyKey.serverURL(_:), v14);
    v25[3] = &type metadata for String;
    *uint64_t v25 = 0xD000000000000018;
    v25[1] = 0x8000000100647BC0;
    sub_10015C504(v27);
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v30, v35, v31);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1002C4AB8()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 288);
  unsigned int v27 = enum case for DIPError.Code.internalError(_:);
  uint64_t v30 = *(void *)(v0 + 384);
  uint64_t v28 = *(void *)(v0 + 376);
  uint64_t v29 = *(void *)(v0 + 368);
  uint64_t v24 = *(void *)(v0 + 344);
  uint64_t v25 = *(void *)(v0 + 352);
  uint64_t v26 = *(void *)(v0 + 336);
  uint64_t v21 = *(void *)(v0 + 328);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v1 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = 2 * v2;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100614990;
  unint64_t v4 = v22 + v3;
  uint64_t v5 = (void *)(v22 + v3 + v1[14]);
  uint64_t v6 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v7 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v4, v6, v7);
  uint64_t v9 = *(void *)(v21 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v10 = *(void *)(v21 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v5[3] = &type metadata for String;
  *uint64_t v5 = v9;
  v5[1] = v10;
  unint64_t v11 = (void *)(v4 + v2 + v1[14]);
  v8();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  JWSSignedJSON.payload.getter();
  long long v12 = *(_OWORD *)(v0 + 168);
  long long v13 = *(_OWORD *)(v0 + 232);
  long long v14 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 128) = v14;
  *(void *)(v0 + 144) = *(void *)(v0 + 280);
  long long v15 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 64) = v15;
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 96) = v13;
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 32) = v12;
  uint64_t v16 = *(void *)(v0 + 32);
  uint64_t v17 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_1002D40EC(v0 + 16);
  v11[3] = &type metadata for String;
  *unint64_t v11 = v16;
  v11[1] = v17;
  uint64_t v18 = (void *)(v4 + v23 + v1[14]);
  v8();
  v18[3] = &type metadata for String;
  *uint64_t v18 = 0xD000000000000018;
  v18[1] = 0x8000000100647BC0;
  sub_10015C504(v22);
  (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v25, v27, v26);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1002C4ED8(uint64_t a1, uint64_t a2)
{
  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  uint64_t v4 = type metadata accessor for ContinuousClock();
  v3[31] = v4;
  v3[32] = *(void *)(v4 - 8);
  v3[33] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[34] = v5;
  v3[35] = *(void *)(v5 - 8);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v3[38] = v6;
  v3[39] = *(void *)(v6 - 8);
  v3[40] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v3[41] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPSignpost();
  v3[42] = v7;
  v3[43] = *(void *)(v7 - 8);
  v3[44] = swift_task_alloc();
  return _swift_task_switch(sub_1002C50EC, 0, 0);
}

uint64_t sub_1002C50EC()
{
  uint64_t v1 = (_OWORD *)v0[29];
  static DaemonSignposts.identityLivenessConfigRequest.getter();
  DIPSignpost.init(_:)();
  unint64_t v2 = sub_1002D4404();
  v0[45] = v2;
  v0[21] = &type metadata for IdentityProofingLivenessConfigRequest;
  unint64_t v3 = (_OWORD *)swift_allocObject();
  v0[18] = v3;
  long long v4 = v1[1];
  v3[1] = *v1;
  v3[2] = v4;
  long long v5 = v1[5];
  long long v7 = v1[2];
  long long v6 = v1[3];
  v3[5] = v1[4];
  v3[6] = v5;
  v3[3] = v7;
  v3[4] = v6;
  long long v8 = v1[9];
  long long v10 = v1[6];
  long long v9 = v1[7];
  v3[9] = v1[8];
  v3[10] = v8;
  v3[7] = v10;
  v3[8] = v9;
  sub_1002D5080((uint64_t)v1);
  unint64_t v11 = (void *)swift_task_alloc();
  v0[46] = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_1002C522C;
  return sub_1002CE7F8((uint64_t)(v0 + 18), 0xD000000000000014, 0x8000000100647A70, v2, 0);
}

uint64_t sub_1002C522C(uint64_t a1, uint64_t a2, void *a3)
{
  long long v6 = (void *)*v4;
  v6[47] = a1;
  v6[48] = a2;
  v6[49] = v3;
  swift_task_dealloc();
  if (v3)
  {
    long long v7 = sub_1002C6C30;
  }
  else
  {
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 18));

    long long v7 = sub_1002C5368;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002C5368()
{
  uint64_t v1 = *(void *)(v0 + 392);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
  sub_1002D54A0(&qword_100729C30, (void (*)(uint64_t))type metadata accessor for IdentityProofingLivenessConfigResponseV2);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    swift_release();
    uint64_t v2 = *(void *)(v0 + 376);
    unint64_t v3 = *(void *)(v0 + 384);
    unsigned int v42 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(void))(*(void *)(v0 + 312) + 104))(*(void *)(v0 + 320));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_10000C5F4(v2, v3);
    uint64_t v40 = *(void *)(v0 + 336);
    uint64_t v41 = *(void *)(v0 + 352);
    uint64_t v36 = *(void *)(v0 + 312);
    uint64_t v37 = *(void *)(v0 + 320);
    uint64_t v38 = *(void *)(v0 + 304);
    uint64_t v39 = *(void *)(v0 + 344);
    uint64_t v34 = *(void *)(v0 + 240);
    unsigned int v35 = *(_OWORD **)(v0 + 232);
    sub_100007764((uint64_t *)&unk_1007225C0);
    long long v4 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v5 = *(void *)(*(void *)v4 + 72);
    unint64_t v6 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
    uint64_t v33 = 2 * v5;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_100614990;
    unint64_t v8 = v7 + v6;
    uint64_t v9 = (void *)(v8 + v4[14]);
    uint64_t v10 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
    long long v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104);
    v12(v8, v10, v11);
    uint64_t v13 = *(void *)(v34 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v14 = *(void *)(v34 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v9[3] = &type metadata for String;
    *uint64_t v9 = v13;
    v9[1] = v14;
    unint64_t v15 = v8 + v5;
    unint64_t v16 = v8 + v5 + v4[14];
    v12(v15, enum case for DIPError.PropertyKey.requestID(_:), v11);
    long long v17 = v35[1];
    *(_OWORD *)(v0 + 112) = *v35;
    *(_OWORD *)(v0 + 128) = v17;
    long long v18 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 176) = v18;
    *(void *)(v16 + 24) = &type metadata for String;
    *(_OWORD *)unint64_t v16 = v18;
    long long v19 = (void *)(v8 + v33 + v4[14]);
    v12(v8 + v33, enum case for DIPError.PropertyKey.serverURL(_:), v11);
    v19[3] = &type metadata for String;
    *long long v19 = 0xD000000000000014;
    v19[1] = 0x8000000100647A70;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_1001061B8(v0 + 176);
    sub_10015C504(v7);
    (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))(v37, v42, v38);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  else
  {
    uint64_t v23 = *(_OWORD **)(v0 + 224);
    uint64_t v22 = *(uint64_t **)(v0 + 232);
    swift_release();
    uint64_t v25 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v26 = v22[2];
    uint64_t v27 = v22[3];
    long long v28 = v23[5];
    long long v30 = v23[2];
    long long v29 = v23[3];
    *(_OWORD *)(v0 + 80) = v23[4];
    *(_OWORD *)(v0 + 96) = v28;
    *(_OWORD *)(v0 + 48) = v30;
    *(_OWORD *)(v0 + 64) = v29;
    long long v31 = v23[1];
    *(_OWORD *)(v0 + 16) = *v23;
    *(_OWORD *)(v0 + 32) = v31;
    sub_1002B90A0(v0 + 16);
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_1002C598C;
    return sub_1002D1A8C(v25, v24, v26, v27, v0 + 16);
  }
}

uint64_t sub_1002C598C(uint64_t a1)
{
  uint64_t v2 = *(void *)v1 + 16;
  *(void *)(*(void *)v1 + 408) = a1;
  swift_task_dealloc();
  sub_1002B9118(v2);
  return _swift_task_switch(sub_1002C5A98, 0, 0);
}

uint64_t sub_1002C5A98()
{
  uint64_t v53 = v0;
  if (*(void *)(v0 + 408))
  {
    uint64_t v48 = *(void *)(v0 + 224);
    uint64_t v1 = enum case for DIPError.Code.internalError(_:);
    unsigned int v47 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(void, void, void))(*(void *)(v0 + 312) + 104))(*(void *)(v0 + 320), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 304));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_1002D54E8(v48, type metadata accessor for IdentityProofingLivenessConfigResponseV2);
    uint64_t v2 = *(void *)(v0 + 376);
    unint64_t v49 = *(void *)(v0 + 384);
    (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 312) + 104))(*(void *)(v0 + 320), v1, *(void *)(v0 + 304));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_10000C5F4(v2, v49);
    uint64_t v45 = *(void *)(v0 + 336);
    uint64_t v46 = *(void *)(v0 + 352);
    uint64_t v41 = *(void *)(v0 + 312);
    uint64_t v42 = *(void *)(v0 + 320);
    uint64_t v43 = *(void *)(v0 + 304);
    uint64_t v44 = *(void *)(v0 + 344);
    uint64_t v39 = *(void *)(v0 + 240);
    uint64_t v40 = *(_OWORD **)(v0 + 232);
    sub_100007764((uint64_t *)&unk_1007225C0);
    unint64_t v3 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v4 = *(void *)(*(void *)v3 + 72);
    unint64_t v5 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100614990;
    unint64_t v7 = v6 + v5;
    unint64_t v8 = (void *)(v7 + v3[14]);
    uint64_t v9 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v10 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104);
    v11(v7, v9, v10);
    uint64_t v12 = *(void *)(v39 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v13 = *(void *)(v39 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v8[3] = &type metadata for String;
    void *v8 = v12;
    v8[1] = v13;
    unint64_t v14 = v7 + v4 + v3[14];
    v11(v7 + v4, enum case for DIPError.PropertyKey.requestID(_:), v10);
    long long v15 = v40[1];
    *(_OWORD *)(v0 + 112) = *v40;
    *(_OWORD *)(v0 + 128) = v15;
    long long v16 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 176) = v16;
    *(void *)(v14 + 24) = &type metadata for String;
    *(_OWORD *)unint64_t v14 = v16;
    long long v17 = (void *)(v7 + 2 * v4 + v3[14]);
    v11(v7 + 2 * v4, enum case for DIPError.PropertyKey.serverURL(_:), v10);
    v17[3] = &type metadata for String;
    *long long v17 = 0xD000000000000014;
    v17[1] = 0x8000000100647A70;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_1001061B8(v0 + 176);
    sub_10015C504(v6);
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v42, v47, v43);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v46, v45);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v18 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
    return v18();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  id v19 = [self standardUserDefaults];
  v20._uint64_t countAndFlagsBits = 0xD000000000000021;
  v20._unint64_t object = (void *)0x8000000100647B40;
  Swift::Double_optional v55 = NSUserDefaults.internalDouble(forKey:)(v20);
  uint64_t v21 = *(void *)&v55.is_nil;
  char v23 = v22;

  if (v23)
  {
    uint64_t v32 = *(void *)(v0 + 376);
    unint64_t v33 = *(void *)(v0 + 384);
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8))(*(void *)(v0 + 352), *(void *)(v0 + 336));
    sub_10000C5F4(v32, v33);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v18 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_7;
  }
  *(void *)(v0 + 416) = v21;
  defaultLogger()();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = *(void *)(v0 + 296);
  uint64_t v29 = *(void *)(v0 + 272);
  uint64_t v28 = *(void *)(v0 + 280);
  if (v26)
  {
    uint64_t v50 = *(void *)(v0 + 272);
    uint64_t v30 = swift_slowAlloc();
    v52[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315394;
    *(void *)(v0 + 208) = sub_100110D58(0xD000000000000026, 0x8000000100647AC0, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2048;
    *(void *)(v0 + 216) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s force delay %fs - start", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    long long v31 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v31(v27, v50);
  }
  else
  {

    long long v31 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v31(v27, v29);
  }
  *(void *)(v0 + 424) = v31;
  uint64_t v35 = static Duration.seconds(_:)();
  uint64_t v37 = v36;
  ContinuousClock.init()();
  uint64_t v51 = (char *)&dword_100725748 + dword_100725748;
  uint64_t v38 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v38;
  *uint64_t v38 = v0;
  v38[1] = sub_1002C6338;
  return ((uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t))v51)(v35, v37, 0, 0, 1);
}

uint64_t sub_1002C6338()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[32] + 8))(v2[33], v2[31]);
  if (v0) {
    unint64_t v3 = sub_1002C64A0;
  }
  else {
    unint64_t v3 = sub_1002C6994;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002C64A0()
{
  sub_1002D54E8(*(void *)(v0 + 224), type metadata accessor for IdentityProofingLivenessConfigResponseV2);
  uint64_t v2 = *(void *)(v0 + 376);
  unint64_t v1 = *(void *)(v0 + 384);
  unsigned int v28 = enum case for DIPError.Code.internalError(_:);
  (*(void (**)(void))(*(void *)(v0 + 312) + 104))(*(void *)(v0 + 320));
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  sub_10000C5F4(v2, v1);
  uint64_t v26 = *(void *)(v0 + 336);
  uint64_t v27 = *(void *)(v0 + 352);
  uint64_t v22 = *(void *)(v0 + 312);
  uint64_t v23 = *(void *)(v0 + 320);
  uint64_t v24 = *(void *)(v0 + 304);
  uint64_t v25 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 240);
  uint64_t v21 = *(_OWORD **)(v0 + 232);
  sub_100007764((uint64_t *)&unk_1007225C0);
  unint64_t v3 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v4 = *(void *)(*(void *)v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100614990;
  unint64_t v7 = v6 + v5;
  unint64_t v8 = (void *)(v7 + v3[14]);
  uint64_t v9 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v10 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104);
  v11(v7, v9, v10);
  uint64_t v12 = *(void *)(v20 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v13 = *(void *)(v20 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v8[3] = &type metadata for String;
  void *v8 = v12;
  v8[1] = v13;
  unint64_t v14 = v7 + v4 + v3[14];
  v11(v7 + v4, enum case for DIPError.PropertyKey.requestID(_:), v10);
  long long v15 = v21[1];
  *(_OWORD *)(v0 + 112) = *v21;
  *(_OWORD *)(v0 + 128) = v15;
  long long v16 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 176) = v16;
  *(void *)(v14 + 24) = &type metadata for String;
  *(_OWORD *)unint64_t v14 = v16;
  long long v17 = (void *)(v7 + 2 * v4 + v3[14]);
  v11(v7 + 2 * v4, enum case for DIPError.PropertyKey.serverURL(_:), v10);
  v17[3] = &type metadata for String;
  *long long v17 = 0xD000000000000014;
  v17[1] = 0x8000000100647A70;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_1001061B8(v0 + 176);
  sub_10015C504(v6);
  (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v23, v28, v24);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_1002C6994()
{
  uint64_t v25 = v0;
  unint64_t v1 = v0;
  defaultLogger()();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[52];
    uint64_t v5 = v0[47];
    uint64_t v6 = v0[43];
    uint64_t v22 = (void (*)(uint64_t, uint64_t))v0[53];
    uint64_t v23 = v0[44];
    uint64_t v20 = v0[36];
    uint64_t v21 = v0[42];
    unint64_t v18 = v0[48];
    uint64_t v19 = v0[34];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    v0[24] = sub_100110D58(0xD000000000000026, 0x8000000100647AC0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2048;
    v0[25] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s force delay %fs - end", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_10000C5F4(v5, v18);

    v22(v20, v19);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v23, v21);
  }
  else
  {
    unint64_t v8 = (void (*)(uint64_t, uint64_t))v0[53];
    uint64_t v9 = v0[47];
    unint64_t v10 = v0[48];
    uint64_t v12 = v0[43];
    uint64_t v11 = v0[44];
    uint64_t v13 = v1[42];
    uint64_t v14 = v1[36];
    uint64_t v15 = v1[34];
    sub_10000C5F4(v9, v10);

    v8(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v16 = (uint64_t (*)(void))v1[1];
  return v16();
}

uint64_t sub_1002C6C30()
{
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 144);
  unsigned int v22 = enum case for DIPError.Code.internalError(_:);
  uint64_t v23 = *(void *)(v0 + 344);
  uint64_t v24 = *(void *)(v0 + 336);
  uint64_t v25 = *(void *)(v0 + 352);
  uint64_t v19 = *(void *)(v0 + 312);
  uint64_t v20 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v17 = *(void *)(v0 + 240);
  unint64_t v18 = *(_OWORD **)(v0 + 232);
  sub_100007764((uint64_t *)&unk_1007225C0);
  unint64_t v1 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100614990;
  uint64_t v5 = (void *)(v4 + v3 + v1[14]);
  uint64_t v6 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v7 = type metadata accessor for DIPError.PropertyKey();
  unint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v4 + v3, v6, v7);
  uint64_t v9 = *(void *)(v17 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v10 = *(void *)(v17 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v5[3] = &type metadata for String;
  *uint64_t v5 = v9;
  v5[1] = v10;
  unint64_t v11 = v4 + v3 + v2 + v1[14];
  v8();
  long long v12 = v18[1];
  *(_OWORD *)(v0 + 112) = *v18;
  *(_OWORD *)(v0 + 128) = v12;
  long long v13 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 176) = v13;
  *(void *)(v11 + 24) = &type metadata for String;
  *(_OWORD *)unint64_t v11 = v13;
  uint64_t v14 = (void *)(v4 + v3 + 2 * v2 + v1[14]);
  v8();
  v14[3] = &type metadata for String;
  *uint64_t v14 = 0xD000000000000014;
  v14[1] = 0x8000000100647A70;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_1001061B8(v0 + 176);
  sub_10015C504(v4);
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v20, v22, v21);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1002C7044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[95] = v4;
  v5[94] = a4;
  v5[93] = a3;
  v5[92] = a2;
  v5[91] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[96] = v6;
  v5[97] = *(void *)(v6 - 8);
  v5[98] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[99] = v7;
  v5[100] = *(void *)(v7 - 8);
  v5[101] = swift_task_alloc();
  type metadata accessor for IdentityProofingRequestV2(0);
  v5[102] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v5[103] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPSignpost();
  v5[104] = v8;
  v5[105] = *(void *)(v8 - 8);
  v5[106] = swift_task_alloc();
  return _swift_task_switch(sub_1002C7224, 0, 0);
}

uint64_t sub_1002C7224()
{
  uint64_t v1 = v0[92];
  static DaemonSignposts.identityProofingRequestV2.getter();
  DIPSignpost.init(_:)();
  uint64_t v2 = sub_100007764(&qword_100728500);
  v0[107] = v2;
  v0[89] = v2;
  unint64_t v3 = sub_10002C2D8(v0 + 86);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v3, v1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[108] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002C735C;
  return sub_1002CE7F8((uint64_t)(v0 + 86), 0xD000000000000016, 0x80000001006479C0, 0, 0);
}

uint64_t sub_1002C735C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*v4;
  v6[109] = a1;
  v6[110] = a2;
  v6[111] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = sub_1002C8604;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 86));

    uint64_t v7 = sub_1002C7490;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002C7490()
{
  uint64_t v1 = *(void *)(v0 + 888);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  *(void *)(v0 + 896) = sub_100007764(&qword_100728580);
  sub_1000B6120(&qword_100729C28, &qword_100728580);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 776);
    swift_release();
    unsigned int v51 = enum case for DIPError.Code.internalError(_:);
    unint64_t v3 = *(void *)(v0 + 880);
    uint64_t v4 = *(void *)(v0 + 872);
    (*(void (**)(void))(v2 + 104))(*(void *)(v0 + 784));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_10000C5F4(v4, v3);
    uint64_t v48 = *(void *)(v0 + 840);
    uint64_t v49 = *(void *)(v0 + 832);
    uint64_t v50 = *(void *)(v0 + 848);
    uint64_t v5 = *(void *)(v0 + 816);
    uint64_t v45 = *(void *)(v0 + 776);
    uint64_t v46 = *(void *)(v0 + 784);
    uint64_t v47 = *(void *)(v0 + 768);
    uint64_t v42 = *(void *)(v0 + 760);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v6 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v7 = *(void *)(*(void *)v6 + 72);
    unint64_t v8 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
    uint64_t v43 = 2 * v7;
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_100614990;
    uint64_t v9 = (void *)(v44 + v8 + v6[14]);
    uint64_t v10 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
    long long v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104);
    v12(v44 + v8, v10, v11);
    uint64_t v13 = *(void *)(v42 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v14 = *(void *)(v42 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v9[3] = &type metadata for String;
    *uint64_t v9 = v13;
    v9[1] = v14;
    uint64_t v15 = (void *)(v44 + v8 + v7 + v6[14]);
    v12(v44 + v8 + v7, enum case for DIPError.PropertyKey.requestID(_:), v11);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    JWSSignedJSON.payload.getter();
    uint64_t v17 = *(void *)(v5 + 16);
    uint64_t v16 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain();
    sub_1002D54E8(v5, type metadata accessor for IdentityProofingRequestV2);
    v15[3] = &type metadata for String;
    *uint64_t v15 = v17;
    v15[1] = v16;
    unint64_t v18 = (void *)(v44 + v8 + v43 + v6[14]);
    v12(v44 + v8 + v43, enum case for DIPError.PropertyKey.serverURL(_:), v11);
    v18[3] = &type metadata for String;
    *unint64_t v18 = 0xD000000000000016;
    v18[1] = 0x80000001006479C0;
    sub_10015C504(v44);
    (*(void (**)(uint64_t, void, uint64_t))(v45 + 104))(v46, v51, v47);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v49);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  else
  {
    uint64_t v21 = *(uint64_t **)(v0 + 816);
    swift_release();
    JWSSignedJSON.payload.getter();
    uint64_t v22 = v21[1];
    uint64_t v52 = *v21;
    *(void *)(v0 + 904) = v22;
    uint64_t v23 = v21[2];
    uint64_t v24 = v21[3];
    *(void *)(v0 + 912) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D54E8((uint64_t)v21, type metadata accessor for IdentityProofingRequestV2);
    JWSSignedJSON.payload.getter();
    long long v25 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 320) = v25;
    long long v26 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 416) = v26;
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 144);
    long long v27 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 352) = v27;
    long long v28 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 384) = v28;
    uint64_t v29 = *(void *)(v0 + 304);
    uint64_t v30 = *(void *)(v0 + 312);
    *(void *)(v0 + 920) = v30;
    uint64_t v31 = *(void *)(v0 + 320);
    uint64_t v32 = *(void *)(v0 + 328);
    *(void *)(v0 + 928) = v32;
    uint64_t v33 = *(void *)(v0 + 336);
    uint64_t v34 = *(void *)(v0 + 344);
    *(void *)(v0 + 936) = v34;
    uint64_t v35 = *(void *)(v0 + 352);
    uint64_t v36 = *(void *)(v0 + 360);
    *(void *)(v0 + 944) = v36;
    uint64_t v37 = *(void *)(v0 + 368);
    uint64_t v38 = *(void *)(v0 + 376);
    *(void *)(v0 + 952) = v38;
    uint64_t v40 = *(void *)(v0 + 384);
    uint64_t v39 = *(void *)(v0 + 392);
    *(void *)(v0 + 960) = v39;
    *(void *)(v0 + 592) = v29;
    *(void *)(v0 + 600) = v30;
    *(void *)(v0 + 608) = v31;
    *(void *)(v0 + 616) = v32;
    *(void *)(v0 + 624) = v33;
    *(void *)(v0 + 632) = v34;
    *(void *)(v0 + 640) = v35;
    *(void *)(v0 + 648) = v36;
    *(void *)(v0 + 656) = v37;
    *(void *)(v0 + 664) = v38;
    *(void *)(v0 + 672) = v40;
    *(void *)(v0 + 680) = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100262B24(v0 + 304);
    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 968) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_1002C7BD8;
    return sub_1002D1A8C(v52, v22, v23, v24, v0 + 592);
  }
}

uint64_t sub_1002C7BD8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 976) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002C7DD4, 0, 0);
}

uint64_t sub_1002C7DD4()
{
  uint64_t v53 = v0;
  if (*(void *)(v0 + 976))
  {
    JWSSignedJSON.payload.getter();
    long long v1 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 560) = v1;
    *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 288);
    long long v2 = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 496) = v2;
    long long v3 = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v0 + 528) = v3;
    long long v4 = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 464) = v4;
    uint64_t v5 = *(void *)(v0 + 544);
    unint64_t v6 = *(void *)(v0 + 552);
    swift_bridgeObjectRetain();
    sub_100262B24(v0 + 448);
    if (v6)
    {
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      BOOL v9 = os_log_type_enabled(v7, v8);
      uint64_t v10 = *(void *)(v0 + 808);
      uint64_t v11 = *(void *)(v0 + 800);
      uint64_t v12 = *(void *)(v0 + 792);
      if (v9)
      {
        uint64_t v50 = *(void *)(v0 + 808);
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        v52[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 720) = sub_100110D58(v5, v6, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "server runtime error : %s", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v50, v12);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      }
    }
    uint64_t v44 = *(void *)(v0 + 896);
    uint64_t v47 = *(void *)(v0 + 728);
    uint64_t v20 = enum case for DIPError.Code.internalError(_:);
    unsigned int v51 = *(void (**)(void, uint64_t, void))(*(void *)(v0 + 776) + 104);
    unsigned int v49 = enum case for DIPError.Code.internalError(_:);
    v51(*(void *)(v0 + 784), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 768));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t))(*(void *)(v44 - 8) + 8))(v47);
    unint64_t v48 = *(void *)(v0 + 880);
    uint64_t v45 = *(void *)(v0 + 872);
    v51(*(void *)(v0 + 784), v20, *(void *)(v0 + 768));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_10000C5F4(v45, v48);
    uint64_t v42 = *(void *)(v0 + 840);
    uint64_t v43 = *(void *)(v0 + 832);
    uint64_t v46 = *(void *)(v0 + 848);
    uint64_t v21 = *(void *)(v0 + 816);
    uint64_t v39 = *(void *)(v0 + 776);
    uint64_t v40 = *(void *)(v0 + 784);
    uint64_t v41 = *(void *)(v0 + 768);
    uint64_t v36 = *(void *)(v0 + 760);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v22 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v23 = *(void *)(*(void *)v22 + 72);
    unint64_t v24 = (*(unsigned __int8 *)(*(void *)v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v22 + 80);
    uint64_t v37 = 2 * v23;
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_100614990;
    long long v25 = (void *)(v38 + v24 + v22[14]);
    uint64_t v26 = enum case for DIPError.PropertyKey.conversationID(_:);
    uint64_t v27 = type metadata accessor for DIPError.PropertyKey();
    long long v28 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104);
    v28(v38 + v24, v26, v27);
    uint64_t v29 = *(void *)(v36 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
    uint64_t v30 = *(void *)(v36 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
    v25[3] = &type metadata for String;
    *long long v25 = v29;
    v25[1] = v30;
    uint64_t v31 = (void *)(v38 + v24 + v23 + v22[14]);
    v28(v38 + v24 + v23, enum case for DIPError.PropertyKey.requestID(_:), v27);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    JWSSignedJSON.payload.getter();
    uint64_t v33 = *(void *)(v21 + 16);
    uint64_t v32 = *(void *)(v21 + 24);
    swift_bridgeObjectRetain();
    sub_1002D54E8(v21, type metadata accessor for IdentityProofingRequestV2);
    v31[3] = &type metadata for String;
    *uint64_t v31 = v33;
    v31[1] = v32;
    uint64_t v34 = (void *)(v38 + v24 + v37 + v22[14]);
    v28(v38 + v24 + v37, enum case for DIPError.PropertyKey.serverURL(_:), v27);
    v34[3] = &type metadata for String;
    *uint64_t v34 = 0xD000000000000016;
    v34[1] = 0x80000001006479C0;
    sub_10015C504(v38);
    (*(void (**)(uint64_t, void, uint64_t))(v39 + 104))(v40, v49, v41);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v46, v43);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    unint64_t v14 = *(void *)(v0 + 880);
    uint64_t v15 = *(void *)(v0 + 872);
    uint64_t v16 = *(void *)(v0 + 848);
    uint64_t v17 = *(void *)(v0 + 840);
    uint64_t v18 = *(void *)(v0 + 832);
    DIPSignpost.end(workflowID:isBackground:)(*(Swift::String_optional *)(v0 + 744), (Swift::Bool_optional)2);
    sub_10000C5F4(v15, v14);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v19();
}

uint64_t sub_1002C8604()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 86));
  unsigned int v24 = enum case for DIPError.Code.internalError(_:);
  uint64_t v27 = v0[106];
  uint64_t v25 = v0[105];
  uint64_t v26 = v0[104];
  uint64_t v1 = v0[102];
  uint64_t v21 = v0[97];
  uint64_t v22 = v0[98];
  uint64_t v23 = v0[96];
  uint64_t v18 = v0[95];
  sub_100007764((uint64_t *)&unk_1007225C0);
  long long v2 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v3 = *(void *)(*(void *)v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v19 = 2 * v3;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100614990;
  unint64_t v5 = v20 + v4;
  unint64_t v6 = (void *)(v20 + v4 + v2[14]);
  uint64_t v7 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v8 = type metadata accessor for DIPError.PropertyKey();
  BOOL v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v5, v7, v8);
  uint64_t v10 = *(void *)(v18 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v11 = *(void *)(v18 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v6[3] = &type metadata for String;
  *unint64_t v6 = v10;
  v6[1] = v11;
  uint64_t v12 = (void *)(v5 + v3 + v2[14]);
  v9();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  JWSSignedJSON.payload.getter();
  uint64_t v13 = *(void *)(v1 + 16);
  uint64_t v14 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_1002D54E8(v1, type metadata accessor for IdentityProofingRequestV2);
  v12[3] = &type metadata for String;
  *uint64_t v12 = v13;
  v12[1] = v14;
  uint64_t v15 = (void *)(v5 + v19 + v2[14]);
  v9();
  v15[3] = &type metadata for String;
  *uint64_t v15 = 0xD000000000000016;
  v15[1] = 0x80000001006479C0;
  sub_10015C504(v20);
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v22, v24, v23);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1002C8A10(uint64_t a1, uint64_t a2)
{
  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[37] = v4;
  v3[38] = *(void *)(v4 - 8);
  v3[39] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[40] = v5;
  v3[41] = *(void *)(v5 - 8);
  v3[42] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[43] = v6;
  v3[44] = *(void *)(v6 - 8);
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v3[47] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPSignpost();
  v3[48] = v7;
  v3[49] = *(void *)(v7 - 8);
  v3[50] = swift_task_alloc();
  return _swift_task_switch(sub_1002C8C24, 0, 0);
}

uint64_t sub_1002C8C24()
{
  static DaemonSignposts.getRPEncryptionCertificateRequest.getter();
  DIPSignpost.init(_:)();
  id v1 = [self standardUserDefaults];
  v2._uint64_t countAndFlagsBits = 0xD000000000000028;
  v2._unint64_t object = (void *)0x80000001006478B0;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Internal Settings returning hardcoded test encryption certificate", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[46];
    uint64_t v8 = v0[43];
    uint64_t v9 = v0[44];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    (*(void (**)(void, void))(v0[49] + 8))(v0[50], v0[48]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(_UNKNOWN **))v0[1];
    return v10(&off_1006F2500);
  }
  else
  {
    uint64_t v13 = v0[41];
    uint64_t v12 = v0[42];
    uint64_t v14 = v0[40];
    uint64_t v16 = v0[34];
    uint64_t v15 = v0[35];
    swift_bridgeObjectRetain();
    UUID.init()();
    uint64_t v17 = UUID.uuidString.getter();
    uint64_t v19 = v18;
    v0[51] = v17;
    v0[52] = v18;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    v0[32] = &type metadata for GetRPEncryptionCertificateRequest;
    uint64_t v20 = (void *)swift_allocObject();
    v0[29] = v20;
    v20[2] = 0;
    v20[3] = 0xE000000000000000;
    v20[4] = v17;
    v20[5] = v19;
    v20[6] = v16;
    v20[7] = v15;
    v20[8] = 0x61746E6567616DLL;
    v20[9] = 0xE700000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = (void *)swift_task_alloc();
    v0[53] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_1002C8F4C;
    return sub_1002CE7F8((uint64_t)(v0 + 29), 0xD000000000000019, 0x80000001006478E0, 0, 1);
  }
}

uint64_t sub_1002C8F4C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*v4;
  v6[54] = a1;
  v6[55] = a2;
  v6[56] = v3;
  swift_task_dealloc();
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1002C9E8C;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 29));

    uint64_t v7 = sub_1002C90A4;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002C90A4()
{
  unint64_t v2 = *(void *)(v0 + 440);
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 432);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10002CEB0(v3, v2);
  JSONDecoder.init()();
  sub_1002D4FA8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v4 = v1;
  uint64_t v6 = *(void *)(v0 + 432);
  unint64_t v5 = *(void *)(v0 + 440);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C5F4(v6, v5);
    swift_release();
    uint64_t v7 = enum case for DIPError.PropertyKey.serverURL(_:);
    unsigned int v36 = enum case for DIPError.Code.internalError(_:);
    uint64_t v37 = *(void *)(v0 + 432);
    unint64_t v38 = *(void *)(v0 + 440);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v9 = *(void *)(v0 + 312);
    uint64_t v10 = *(void *)(v0 + 296);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v11 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v12 = (*(unsigned __int8 *)(*(void *)v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v11 + 80);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_100610730;
    unint64_t v14 = v13 + v12;
    uint64_t v15 = (void *)(v14 + v11[14]);
    uint64_t v16 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v14, v7, v16);
    v15[3] = &type metadata for String;
    *uint64_t v15 = 0xD000000000000019;
    v15[1] = 0x80000001006478E0;
    swift_errorRetain();
    sub_10015C504(v13);
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v9, v36, v10);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v37, v38);
    swift_errorRelease();
    uint64_t v18 = *(void *)(v0 + 392);
    uint64_t v17 = *(void *)(v0 + 400);
    uint64_t v19 = *(void *)(v0 + 384);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  else
  {
    sub_10000C5F4(*(void *)(v0 + 432), *(void *)(v0 + 440));
    swift_release();
    uint64_t v22 = *(void *)(v0 + 16);
    uint64_t v23 = *(void *)(v0 + 40);
    uint64_t v24 = *(void *)(v0 + 48);
    uint64_t v25 = *(void *)(v0 + 56);
    uint64_t v26 = *(void *)(v0 + 64);
    *(void *)(v0 + 464) = v23;
    *(void *)(v0 + 472) = v25;
    uint64_t v27 = *(void *)(v0 + 128);
    *(void *)(v0 + 512) = *(void *)(v0 + 120);
    uint64_t v28 = *(void *)(v0 + 72);
    uint64_t v29 = *(void *)(v0 + 80);
    *(void *)(v0 + 480) = v28;
    long long v30 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 496) = v30;
    *(void *)(v0 + 520) = v27;
    long long v31 = *(_OWORD *)(v0 + 24);
    *(void *)(v0 + 456) = v31;
    long long v32 = *(_OWORD *)(v0 + 88);
    *(void *)(v0 + 488) = v32;
    *(void *)(v0 + 136) = v22;
    *(_OWORD *)(v0 + 144) = v31;
    *(void *)(v0 + 160) = v23;
    *(void *)(v0 + 168) = v24;
    *(void *)(v0 + 176) = v25;
    *(void *)(v0 + 184) = v26;
    *(void *)(v0 + 192) = v28;
    *(void *)(v0 + 200) = v29;
    *(_OWORD *)(v0 + 208) = v32;
    *(void *)(v0 + 224) = v30;
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 528) = v33;
    *uint64_t v33 = v0;
    v33[1] = sub_1002C9560;
    uint64_t v34 = *(void *)(v0 + 408);
    uint64_t v35 = *(void *)(v0 + 416);
    return sub_1002D1A8C(0, 0xE000000000000000, v34, v35, v0 + 136);
  }
}

uint64_t sub_1002C9560(uint64_t a1)
{
  *(void *)(*(void *)v1 + 536) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002C96AC, 0, 0);
}

uint64_t sub_1002C96AC()
{
  uint64_t v42 = v0;
  if (v0[67])
  {
    uint64_t v1 = v0[64];
    swift_bridgeObjectRelease();
    if (v1)
    {
      unint64_t v2 = v0[64];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = v0[63];
        uint64_t v6 = v0[44];
        uint64_t v39 = v0[45];
        uint64_t v38 = v0[43];
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 136315138;
        swift_bridgeObjectRetain();
        v0[33] = sub_100110D58(v5, v2, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Server runtime error : %s", v7, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v39, v38);
      }
      else
      {
        uint64_t v12 = v0[44];
        uint64_t v11 = v0[45];
        uint64_t v13 = v0[43];
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v14 = v0[38];
    uint64_t v15 = v0[39];
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v16 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v17 = (*(unsigned __int8 *)(*(void *)v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v16 + 80);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_100610730;
    unint64_t v19 = v18 + v17;
    uint64_t v20 = (void *)(v19 + v16[14]);
    uint64_t v21 = enum case for DIPError.PropertyKey.serverURL(_:);
    unsigned int v37 = enum case for DIPError.PropertyKey.serverURL(_:);
    uint64_t v22 = type metadata accessor for DIPError.PropertyKey();
    unsigned int v36 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104);
    v36(v19, v21, v22);
    v20[3] = &type metadata for String;
    *uint64_t v20 = 0xD000000000000019;
    v20[1] = 0x80000001006478E0;
    swift_errorRetain();
    sub_10015C504(v18);
    unsigned int v34 = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(uint64_t))(v14 + 104))(v15);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    unint64_t v40 = v0[55];
    uint64_t v35 = v0[54];
    uint64_t v23 = v0[38];
    uint64_t v24 = v0[39];
    uint64_t v25 = v0[37];
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v26 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v27 = (*(unsigned __int8 *)(*(void *)v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v26 + 80);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_100610730;
    uint64_t v29 = (void *)(v28 + v27 + v26[14]);
    v36(v28 + v27, v37, v22);
    v29[3] = &type metadata for String;
    *uint64_t v29 = 0xD000000000000019;
    v29[1] = 0x80000001006478E0;
    swift_errorRetain();
    sub_10015C504(v28);
    (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v24, v34, v25);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v35, v40);
    swift_errorRelease();
    uint64_t v31 = v0[49];
    uint64_t v30 = v0[50];
    uint64_t v32 = v0[48];
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = (uint64_t (*)(void))v0[1];
    return v33();
  }
  else
  {
    sub_10000C5F4(v0[54], v0[55]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t v8 = v0[65];
    (*(void (**)(void, void))(v0[49] + 8))(v0[50], v0[48]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
    return v9(v8);
  }
}

uint64_t sub_1002C9E8C()
{
  uint64_t v2 = v0[38];
  uint64_t v1 = v0[39];
  uint64_t v3 = v0[37];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 29));
  sub_100007764((uint64_t *)&unk_1007225C0);
  os_log_type_t v4 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100610730;
  unint64_t v7 = v6 + v5;
  uint64_t v8 = (void *)(v7 + v4[14]);
  uint64_t v9 = enum case for DIPError.PropertyKey.serverURL(_:);
  uint64_t v10 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(v7, v9, v10);
  v8[3] = &type metadata for String;
  void *v8 = 0xD000000000000019;
  v8[1] = 0x80000001006478E0;
  swift_errorRetain();
  sub_10015C504(v6);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  uint64_t v12 = v0[49];
  uint64_t v11 = v0[50];
  uint64_t v13 = v0[48];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1002CA194(uint64_t a1, uint64_t a2)
{
  v3[105] = v2;
  v3[104] = a2;
  v3[103] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[106] = v4;
  v3[107] = *(void *)(v4 - 8);
  v3[108] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError();
  v3[109] = v5;
  v3[110] = *(void *)(v5 - 8);
  v3[111] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[112] = v6;
  v3[113] = *(void *)(v6 - 8);
  v3[114] = swift_task_alloc();
  v3[115] = swift_task_alloc();
  v3[116] = swift_task_alloc();
  return _swift_task_switch(sub_1002CA35C, 0, 0);
}

uint64_t sub_1002CA35C()
{
  unsigned int v49 = v0;
  uint64_t v1 = (void *)sub_10015CF20((uint64_t)_swiftEmptyArrayStorage);
  id v2 = [self standardUserDefaults];
  v3._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
  v3._unint64_t object = (void *)0x8000000100647760;
  Swift::String_optional v4 = NSUserDefaults.internalString(forKey:)(v3);

  if (!v4.value._object)
  {
LABEL_29:
    v0[58].value._unint64_t object = v1;
    uint64_t countAndFlagsBits = v0[52].value._countAndFlagsBits;
    uint64_t v41 = sub_100007764(&qword_100729B78);
    v0[59].value._uint64_t countAndFlagsBits = v41;
    v0[46].value._unint64_t object = (void *)v41;
    uint64_t v42 = sub_10002C2D8(&v0[45].value._countAndFlagsBits);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v42, countAndFlagsBits, v41);
    swift_bridgeObjectRetain();
    uint64_t v43 = (void *)swift_task_alloc();
    v0[59].value._unint64_t object = v43;
    *uint64_t v43 = v0;
    v43[1] = sub_1002CA998;
    return sub_1002CE7F8((uint64_t)&v0[45], 0xD00000000000001ALL, 0x80000001006477A0, (uint64_t)v1, 0);
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[58].value._countAndFlagsBits;
  unint64_t object = (void (**)(uint64_t, uint64_t))v0[56].value._object;
  uint64_t v46 = v0[56].value._countAndFlagsBits;
  uint64_t v47 = v0;
  if (v7)
  {
    uint64_t v45 = v0[58].value._countAndFlagsBits;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    unint64_t v48 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    v0[51].value._uint64_t countAndFlagsBits = sub_100110D58(v4.value._countAndFlagsBits, (unint64_t)v4.value._object, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "DIPTopekaWebService registerTerminal using the following test headers: %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    object[1](v45, v46);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    object[1](v8, v46);
  }
  v0[49] = v4;
  sub_1000B5358();
  uint64_t v11 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  swift_bridgeObjectRelease();
  int64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    unint64_t v48 = _swiftEmptyArrayStorage;
    sub_10011144C(0, v12, 0);
    uint64_t v13 = v48;
    uint64_t v14 = v11 + 56;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = static String._fromSubstring(_:)();
      uint64_t v17 = v16;
      swift_bridgeObjectRelease();
      unint64_t v48 = v13;
      unint64_t v19 = v13[2];
      unint64_t v18 = v13[3];
      if (v19 >= v18 >> 1)
      {
        sub_10011144C(v18 > 1, v19 + 1, 1);
        uint64_t v13 = v48;
      }
      v13[2] = v19 + 1;
      uint64_t v20 = &v13[2 * v19];
      v20[4] = v15;
      v20[5] = v17;
      v14 += 32;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v21 = v13[2];
    if (!v21) {
      goto LABEL_28;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v21 = _swiftEmptyArrayStorage[2];
    if (!v21)
    {
LABEL_28:
      swift_bridgeObjectRelease();
      uint64_t v0 = v47;
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = v13 + 5;
  while (1)
  {
    uint64_t v25 = *(v22 - 1);
    uint64_t v24 = *v22;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v48 = v1;
    unint64_t v28 = sub_100590548(v25, v24);
    uint64_t v29 = v1[2];
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30))
    {
      __break(1u);
LABEL_36:
      __break(1u);
    }
    char v32 = v27;
    if (v1[3] < v31) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v27 & 1) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      sub_10016A364();
      uint64_t v1 = v48;
      if ((v32 & 1) == 0)
      {
LABEL_23:
        v1[(v28 >> 6) + 8] |= 1 << v28;
        uint64_t v35 = (uint64_t *)(v1[6] + 16 * v28);
        *uint64_t v35 = v25;
        v35[1] = v24;
        unsigned int v36 = (void *)(v1[7] + 16 * v28);
        *unsigned int v36 = 1702195828;
        v36[1] = 0xE400000000000000;
        uint64_t v37 = v1[2];
        BOOL v38 = __OFADD__(v37, 1);
        uint64_t v39 = v37 + 1;
        if (v38) {
          goto LABEL_36;
        }
        v1[2] = v39;
        swift_bridgeObjectRetain();
        goto LABEL_15;
      }
    }
LABEL_14:
    uint64_t v23 = (void *)(v1[7] + 16 * v28);
    swift_bridgeObjectRelease();
    *uint64_t v23 = 1702195828;
    v23[1] = 0xE400000000000000;
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 += 2;
    if (!--v21)
    {
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }
  sub_100164294(v31, isUniquelyReferenced_nonNull_native);
  uint64_t v1 = v48;
  unint64_t v33 = sub_100590548(v25, v24);
  if ((v32 & 1) == (v34 & 1))
  {
    unint64_t v28 = v33;
    if ((v32 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_14;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1002CA998(uint64_t a1, uint64_t a2, void *a3)
{
  os_log_type_t v6 = (void *)*v4;
  v6[120] = a1;
  v6[121] = a2;
  v6[122] = v3;
  swift_task_dealloc();
  if (v3)
  {
    BOOL v7 = sub_1002CC3A0;
  }
  else
  {
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 90));

    BOOL v7 = sub_1002CAB04;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002CAB04()
{
  uint64_t v78 = v0;
  uint64_t v1 = *(void *)(v0 + 976);
  unint64_t v2 = *(void *)(v0 + 968);
  uint64_t v3 = *(void *)(v0 + 960);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10002CEB0(v3, v2);
  JSONDecoder.init()();
  sub_1002D4F04();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    swift_release();
    unint64_t v4 = *(void *)(v0 + 968);
    uint64_t v5 = *(void *)(v0 + 960);
    defaultLogger()();
    sub_10002CEB0(v5, v4);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    unint64_t v9 = *(void *)(v0 + 968);
    if (v8)
    {
      Swift::String v71 = (long long *)(v0 + 640);
      unint64_t v10 = v9 >> 62;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      switch(v10)
      {
        case 1uLL:
          uint64_t v67 = (void *)(v0 + 680);
          log = v6;
          uint64_t v39 = *(void *)(v0 + 960);
          if (v39 >> 32 < (int)v39) {
            __break(1u);
          }
          unint64_t v40 = *(void *)(v0 + 968);
          sub_10002CEB0(*(void *)(v0 + 960), v40);
          swift_retain();
          uint64_t v41 = sub_1002D3810((int)v39, v39 >> 32, v40 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1002D395C);
          unint64_t v16 = v42;
          sub_10000C5F4(v39, v40);
          goto LABEL_18;
        case 2uLL:
          uint64_t v67 = (void *)(v0 + 680);
          log = v6;
          unint64_t v43 = *(void *)(v0 + 968);
          uint64_t v44 = *(void *)(v0 + 960);
          uint64_t v45 = v43 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v46 = *(void *)(v44 + 16);
          uint64_t v47 = *(void *)(v44 + 24);
          sub_10002CEB0(v44, v43);
          swift_retain();
          swift_retain();
          uint64_t v41 = sub_1002D3810(v46, v47, v45, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1002D395C);
          unint64_t v16 = v58;
          swift_release();
          swift_release();
LABEL_18:
          unint64_t v59 = *(void *)(v0 + 968);
          uint64_t v60 = *(void *)(v0 + 960);
          if (v16)
          {
            os_log_type_t v69 = v7;
            sub_10000C5F4(v60, v59);
            uint64_t v14 = v41;
            goto LABEL_14;
          }
          *(void *)(v0 + 768) = v60;
          *(void *)(v0 + 776) = v59;
          sub_10002CEB0(v60, v59);
          sub_100007764(&qword_100729C10);
          if (swift_dynamicCast())
          {
            sub_10000C6B4(v71, (uint64_t)v67);
            sub_10000C728(v67, *(void *)(v0 + 704));
            if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
            {
              os_log_type_t v69 = v7;
              sub_10000C5F4(*(void *)(v0 + 960), *(void *)(v0 + 968));
              sub_10000C728(v67, *(void *)(v0 + 704));
              dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
              uint64_t v14 = *(void *)(v0 + 752);
              unint64_t v16 = *(void *)(v0 + 760);
              _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v67);
              goto LABEL_14;
            }
            _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v67);
          }
          else
          {
            *(void *)(v0 + 672) = 0;
            *Swift::String v71 = 0u;
            *(_OWORD *)(v0 + 656) = 0u;
            sub_10000C6CC((uint64_t)v71, &qword_100729C18);
          }
          os_log_type_t v69 = v7;
          unint64_t v61 = *(void *)(v0 + 968);
          uint64_t v62 = *(void *)(v0 + 960);
          uint64_t v14 = sub_1002D375C(v62, v61);
          unint64_t v16 = v63;
          uint64_t v17 = v62;
          unint64_t v18 = v61;
LABEL_13:
          sub_10000C5F4(v17, v18);
LABEL_14:
          unint64_t v51 = *(void *)(v0 + 968);
          uint64_t v52 = *(void *)(v0 + 960);
          uint64_t v73 = *(void *)(v0 + 912);
          uint64_t v53 = *(void *)(v0 + 904);
          uint64_t v54 = *(void *)(v0 + 896);
          *(void *)(v0 + 800) = sub_100110D58(v14, v16, &v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10000C5F4(v52, v51);
          sub_10000C5F4(v52, v51);
          _os_log_impl((void *)&_mh_execute_header, log, v69, "There was an error while parsing the response from registerTerminal. Response: %s", v11, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v73, v54);
          break;
        case 3uLL:
          os_log_type_t v69 = v7;
          log = v6;
          unint64_t v48 = *(void *)(v0 + 968);
          uint64_t v49 = *(void *)(v0 + 960);
          *(void *)(v0 + 215) = 0;
          *(void *)(v0 + 221) = 0;
          uint64_t v14 = static String._fromUTF8Repairing(_:)();
          unint64_t v16 = v50;
          uint64_t v17 = v49;
          unint64_t v18 = v48;
          goto LABEL_13;
        default:
          os_log_type_t v69 = v7;
          log = v6;
          unint64_t v12 = *(void *)(v0 + 968);
          uint64_t v13 = *(void *)(v0 + 960);
          *(void *)(v0 + 201) = v13;
          *(_WORD *)(v0 + 209) = v12;
          *(unsigned char *)(v0 + 211) = BYTE2(v12);
          *(unsigned char *)(v0 + 212) = BYTE3(v12);
          *(unsigned char *)(v0 + 213) = BYTE4(v12);
          *(unsigned char *)(v0 + 214) = BYTE5(v12);
          uint64_t v14 = static String._fromUTF8Repairing(_:)();
          unint64_t v16 = v15;
          uint64_t v17 = v13;
          unint64_t v18 = v12;
          goto LABEL_13;
      }
    }
    else
    {
      uint64_t v35 = *(void *)(v0 + 960);
      uint64_t v36 = *(void *)(v0 + 912);
      uint64_t v37 = *(void *)(v0 + 904);
      uint64_t v38 = *(void *)(v0 + 896);
      sub_10000C5F4(v35, *(void *)(v0 + 968));
      sub_10000C5F4(v35, v9);

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    }
    unint64_t v55 = *(void *)(v0 + 968);
    uint64_t v56 = *(void *)(v0 + 960);
    (*(void (**)(void, void, void))(*(void *)(v0 + 856) + 104))(*(void *)(v0 + 864), enum case for DIPError.Code.jsonDecodingFailed(_:), *(void *)(v0 + 848));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v56, v55);
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v57 = *(uint64_t (**)(void))(v0 + 8);
    return v57();
  }
  else
  {
    swift_release();
    os_log_t loga = *(os_log_t *)(v0 + 424);
    uint64_t v76 = *(void *)(v0 + 432);
    *(void *)(v0 + 984) = loga;
    *(void *)(v0 + 992) = v76;
    uint64_t v70 = *(void *)(v0 + 440);
    uint64_t v72 = *(void *)(v0 + 448);
    *(void *)(v0 + 1000) = v70;
    *(void *)(v0 + 1008) = v72;
    uint64_t v66 = *(void *)(v0 + 456);
    uint64_t v68 = *(void *)(v0 + 464);
    *(void *)(v0 + 1016) = v66;
    *(void *)(v0 + 1024) = v68;
    uint64_t v19 = *(void *)(v0 + 472);
    uint64_t v20 = *(void *)(v0 + 480);
    *(void *)(v0 + 1032) = v19;
    *(void *)(v0 + 1040) = v20;
    uint64_t v21 = *(void *)(v0 + 488);
    uint64_t v22 = *(void *)(v0 + 496);
    *(void *)(v0 + 1048) = v21;
    *(void *)(v0 + 1056) = v22;
    uint64_t v23 = *(void *)(v0 + 504);
    *(void *)(v0 + 1064) = v23;
    long long v24 = *(_OWORD *)(v0 + 528);
    long long v65 = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 1072) = v65;
    *(_OWORD *)(v0 + 1088) = v24;
    JWSSignedJSON.payload.getter();
    long long v25 = *(_OWORD *)(v0 + 376);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 360);
    *(_OWORD *)(v0 + 160) = v25;
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 392);
    *(_OWORD *)(v0 + 185) = *(_OWORD *)(v0 + 401);
    long long v26 = *(_OWORD *)(v0 + 312);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 296);
    *(_OWORD *)(v0 + 96) = v26;
    long long v27 = *(_OWORD *)(v0 + 344);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 328);
    *(_OWORD *)(v0 + 128) = v27;
    long long v28 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 232);
    *(_OWORD *)(v0 + 32) = v28;
    long long v29 = *(_OWORD *)(v0 + 280);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 264);
    *(_OWORD *)(v0 + 64) = v29;
    uint64_t v30 = *(void *)(v0 + 24);
    uint64_t v64 = *(void *)(v0 + 16);
    *(void *)(v0 + 1104) = v30;
    uint64_t v31 = *(void *)(v0 + 32);
    uint64_t v32 = *(void *)(v0 + 40);
    *(void *)(v0 + 1112) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D3E90((void *)(v0 + 16));
    *(void *)(v0 + 544) = loga;
    *(void *)(v0 + 552) = v76;
    *(void *)(v0 + 560) = v70;
    *(void *)(v0 + 568) = v72;
    *(void *)(v0 + 576) = v66;
    *(void *)(v0 + 584) = v68;
    *(void *)(v0 + 592) = v19;
    *(void *)(v0 + 600) = v20;
    *(void *)(v0 + 608) = v21;
    *(void *)(v0 + 616) = v22;
    *(void *)(v0 + 624) = v23;
    *(void *)(v0 + 632) = v65;
    unint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 1120) = v33;
    *unint64_t v33 = v0;
    v33[1] = sub_1002CB528;
    return sub_1002D1A8C(v64, v30, v31, v32, v0 + 544);
  }
}

uint64_t sub_1002CB528(uint64_t a1)
{
  *(void *)(*(void *)v1 + 1128) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002CB698, 0, 0);
}

uint64_t sub_1002CB698()
{
  uint64_t v80 = v0;
  uint64_t v1 = *(void *)(v0 + 1096);
  unint64_t v2 = *(void *)(v0 + 1088);
  if (*(void *)(v0 + 1128))
  {
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = *(void *)(v0 + 1080);
        uint64_t v76 = *(void *)(v0 + 920);
        uint64_t v6 = *(void *)(v0 + 904);
        uint64_t v73 = *(void *)(v0 + 896);
        os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
        v79[0] = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v7 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 808) = sub_100110D58(v5, v2, v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Server runtime error : %s", v7, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v76, v73);
      }
      else
      {
        uint64_t v12 = *(void *)(v0 + 920);
        uint64_t v13 = *(void *)(v0 + 904);
        uint64_t v14 = *(void *)(v0 + 896);
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = *(void *)(v0 + 888);
    uint64_t v16 = *(void *)(v0 + 880);
    uint64_t v17 = *(void *)(v0 + 872);
    uint64_t v18 = *(void *)(v0 + 864);
    uint64_t v19 = *(void *)(v0 + 856);
    uint64_t v75 = *(void *)(v0 + 848);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v20 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v21 = (*(unsigned __int8 *)(*(void *)v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v20 + 80);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_100610730;
    unint64_t v23 = v22 + v21;
    long long v24 = (void *)(v23 + v20[14]);
    uint64_t v25 = enum case for DIPError.PropertyKey.serverURL(_:);
    uint64_t v26 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(v23, v25, v26);
    v24[3] = &type metadata for String;
    *long long v24 = 0xD00000000000001ALL;
    v24[1] = 0x80000001006477A0;
    swift_errorRetain();
    sub_10015C504(v22);
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, enum case for DIPError.Code.internalError(_:), v75);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v27, v15, v17);
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    unint64_t v28 = *(void *)(v0 + 968);
    uint64_t v29 = *(void *)(v0 + 960);
    defaultLogger()();
    sub_10002CEB0(v29, v28);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    unint64_t v33 = *(void *)(v0 + 968);
    if (v32)
    {
      os_log_type_t v69 = (long long *)(v0 + 640);
      char v34 = (uint8_t *)swift_slowAlloc();
      v79[0] = swift_slowAlloc();
      *(_DWORD *)char v34 = 136315138;
      uint64_t v78 = v30;
      switch(v33 >> 62)
      {
        case 1uLL:
          unint64_t v63 = (void *)(v0 + 680);
          uint64_t v41 = *(void *)(v0 + 960);
          if (v41 >> 32 < (int)v41) {
            __break(1u);
          }
          unint64_t v42 = *(void *)(v0 + 968);
          sub_10002CEB0(*(void *)(v0 + 960), v42);
          swift_retain();
          uint64_t v43 = sub_1002D3810((int)v41, v41 >> 32, v42 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1002D395C);
          unint64_t v45 = v44;
          sub_10000C5F4(v41, v42);
          goto LABEL_24;
        case 2uLL:
          unint64_t v63 = (void *)(v0 + 680);
          unint64_t v46 = *(void *)(v0 + 968);
          uint64_t v47 = *(void *)(v0 + 960);
          uint64_t v48 = v46 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v50 = *(void *)(v47 + 16);
          uint64_t v49 = *(void *)(v47 + 24);
          sub_10002CEB0(v47, v46);
          swift_retain();
          swift_retain();
          uint64_t v43 = sub_1002D3810(v50, v49, v48, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1002D395C);
          unint64_t v45 = v62;
          swift_release();
          swift_release();
LABEL_24:
          unint64_t v54 = *(void *)(v0 + 968);
          uint64_t v53 = *(void *)(v0 + 960);
          os_log_type_t v66 = v31;
          uint64_t v64 = v34;
          if (v45) {
            goto LABEL_18;
          }
          *(void *)(v0 + 768) = v53;
          *(void *)(v0 + 776) = v54;
          sub_10002CEB0(v53, v54);
          sub_100007764(&qword_100729C10);
          if (swift_dynamicCast())
          {
            sub_10000C6B4(v69, (uint64_t)v63);
            sub_10000C728(v63, *(void *)(v0 + 704));
            if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
            {
              sub_10000C5F4(*(void *)(v0 + 960), *(void *)(v0 + 968));
              sub_10000C728(v63, *(void *)(v0 + 704));
              dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
              uint64_t v43 = *(void *)(v0 + 752);
              unint64_t v45 = *(void *)(v0 + 760);
              _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v63);
              goto LABEL_19;
            }
            _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v63);
          }
          else
          {
            *(void *)(v0 + 672) = 0;
            *os_log_type_t v69 = 0u;
            *(_OWORD *)(v0 + 656) = 0u;
            sub_10000C6CC((uint64_t)v69, &qword_100729C18);
          }
          unint64_t v35 = *(void *)(v0 + 968);
          uint64_t v36 = *(void *)(v0 + 960);
          uint64_t v51 = sub_1002D375C(v36, v35);
LABEL_17:
          uint64_t v43 = v51;
          unint64_t v45 = v52;
          uint64_t v53 = v36;
          unint64_t v54 = v35;
LABEL_18:
          sub_10000C5F4(v53, v54);
LABEL_19:
          unint64_t v55 = *(void *)(v0 + 968);
          uint64_t v56 = *(void *)(v0 + 960);
          uint64_t v70 = *(void *)(v0 + 912);
          uint64_t v57 = *(void *)(v0 + 904);
          uint64_t v58 = *(void *)(v0 + 896);
          *(void *)(v0 + 800) = sub_100110D58(v43, v45, v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10000C5F4(v56, v55);
          sub_10000C5F4(v56, v55);
          _os_log_impl((void *)&_mh_execute_header, v78, v66, "There was an error while parsing the response from registerTerminal. Response: %s", v64, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v70, v58);
          break;
        case 3uLL:
          uint64_t v64 = v34;
          os_log_type_t v66 = v31;
          unint64_t v35 = *(void *)(v0 + 968);
          uint64_t v36 = *(void *)(v0 + 960);
          *(void *)(v0 + 215) = 0;
          *(void *)(v0 + 221) = 0;
          goto LABEL_16;
        default:
          uint64_t v64 = v34;
          os_log_type_t v66 = v31;
          unint64_t v35 = *(void *)(v0 + 968);
          uint64_t v36 = *(void *)(v0 + 960);
          *(void *)(v0 + 201) = v36;
          *(_WORD *)(v0 + 209) = v35;
          *(unsigned char *)(v0 + 211) = BYTE2(v35);
          *(unsigned char *)(v0 + 212) = BYTE3(v35);
          *(unsigned char *)(v0 + 213) = BYTE4(v35);
          *(unsigned char *)(v0 + 214) = BYTE5(v35);
LABEL_16:
          uint64_t v51 = static String._fromUTF8Repairing(_:)();
          goto LABEL_17;
      }
    }
    else
    {
      uint64_t v37 = *(void *)(v0 + 960);
      uint64_t v38 = *(void *)(v0 + 912);
      uint64_t v39 = *(void *)(v0 + 904);
      uint64_t v40 = *(void *)(v0 + 896);
      sub_10000C5F4(v37, *(void *)(v0 + 968));
      sub_10000C5F4(v37, v33);

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    }
    unint64_t v59 = *(void *)(v0 + 968);
    uint64_t v60 = *(void *)(v0 + 960);
    (*(void (**)(void, void, void))(*(void *)(v0 + 856) + 104))(*(void *)(v0 + 864), enum case for DIPError.Code.jsonDecodingFailed(_:), *(void *)(v0 + 848));
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v60, v59);
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v77 = *(void *)(v0 + 1080);
    long long v74 = *(_OWORD *)(v0 + 1064);
    long long v71 = *(_OWORD *)(v0 + 1032);
    long long v72 = *(_OWORD *)(v0 + 1048);
    long long v67 = *(_OWORD *)(v0 + 1000);
    long long v68 = *(_OWORD *)(v0 + 1016);
    long long v65 = *(_OWORD *)(v0 + 984);
    unint64_t v8 = *(void *)(v0 + 968);
    uint64_t v9 = *(void *)(v0 + 960);
    uint64_t v10 = *(void *)(v0 + 824);
    sub_10000C5F4(v9, v8);
    sub_10000C5F4(v9, v8);
    swift_bridgeObjectRelease();
    *(_OWORD *)uint64_t v10 = v65;
    *(_OWORD *)(v10 + 16) = v67;
    *(_OWORD *)(v10 + 32) = v68;
    *(_OWORD *)(v10 + 48) = v71;
    *(_OWORD *)(v10 + 64) = v72;
    *(_OWORD *)(v10 + 80) = v74;
    *(void *)(v10 + 96) = v77;
    *(void *)(v10 + 104) = v2;
    *(void *)(v10 + 112) = v1;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v11();
}

uint64_t sub_1002CC3A0()
{
  uint64_t v1 = v0[108];
  uint64_t v2 = v0[107];
  uint64_t v3 = v0[106];
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 90));
  sub_100007764((uint64_t *)&unk_1007225C0);
  os_log_type_t v4 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100610730;
  unint64_t v7 = v6 + v5;
  unint64_t v8 = (void *)(v7 + v4[14]);
  uint64_t v9 = enum case for DIPError.PropertyKey.serverURL(_:);
  uint64_t v10 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(v7, v9, v10);
  v8[3] = &type metadata for String;
  void *v8 = 0xD00000000000001ALL;
  v8[1] = 0x80000001006477A0;
  swift_errorRetain();
  sub_10015C504(v6);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1002CC6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 3240) = v6;
  *(unsigned char *)(v7 + 3600) = a6;
  *(void *)(v7 + 3232) = a5;
  *(void *)(v7 + 3224) = a4;
  *(void *)(v7 + 3216) = a3;
  *(void *)(v7 + 3208) = a2;
  *(void *)(v7 + 3200) = a1;
  uint64_t v8 = type metadata accessor for URLRequest();
  *(void *)(v7 + 3248) = v8;
  *(void *)(v7 + 3256) = *(void *)(v8 - 8);
  *(void *)(v7 + 3264) = swift_task_alloc();
  sub_100007764(&qword_100720A68);
  *(void *)(v7 + 3272) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  *(void *)(v7 + 3280) = v9;
  *(void *)(v7 + 3288) = *(void *)(v9 - 8);
  *(void *)(v7 + 3296) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DIPError.Code();
  *(void *)(v7 + 3304) = v10;
  *(void *)(v7 + 3312) = *(void *)(v10 - 8);
  *(void *)(v7 + 3320) = swift_task_alloc();
  uint64_t v11 = sub_100007764(&qword_100729B78);
  *(void *)(v7 + 3328) = v11;
  *(void *)(v7 + 3336) = *(void *)(v11 - 8);
  *(void *)(v7 + 3344) = swift_task_alloc();
  *(void *)(v7 + 3352) = swift_task_alloc();
  uint64_t v12 = sub_100007764(&qword_100728500);
  *(void *)(v7 + 3360) = v12;
  *(void *)(v7 + 3368) = *(void *)(v12 - 8);
  *(void *)(v7 + 3376) = swift_task_alloc();
  *(void *)(v7 + 3384) = swift_task_alloc();
  uint64_t v13 = sub_100007764(&qword_1007273A8);
  *(void *)(v7 + 3392) = v13;
  *(void *)(v7 + 3400) = *(void *)(v13 - 8);
  *(void *)(v7 + 3408) = swift_task_alloc();
  *(void *)(v7 + 3416) = swift_task_alloc();
  uint64_t v14 = sub_100007764(&qword_100729B80);
  *(void *)(v7 + 3424) = v14;
  *(void *)(v7 + 3432) = *(void *)(v14 - 8);
  *(void *)(v7 + 3440) = swift_task_alloc();
  *(void *)(v7 + 3448) = swift_task_alloc();
  uint64_t v15 = sub_100007764(&qword_100726648);
  *(void *)(v7 + 3456) = v15;
  *(void *)(v7 + 3464) = *(void *)(v15 - 8);
  *(void *)(v7 + 3472) = swift_task_alloc();
  *(void *)(v7 + 3480) = swift_task_alloc();
  uint64_t v16 = sub_100007764(&qword_100726790);
  *(void *)(v7 + 3488) = v16;
  *(void *)(v7 + 3496) = *(void *)(v16 - 8);
  *(void *)(v7 + 3504) = swift_task_alloc();
  *(void *)(v7 + 3512) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for Logger();
  *(void *)(v7 + 3520) = v17;
  *(void *)(v7 + 3528) = *(void *)(v17 - 8);
  *(void *)(v7 + 3536) = swift_task_alloc();
  return _swift_task_switch(sub_1002CCB70, 0, 0);
}

uint64_t sub_1002CCB70()
{
  v187 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 44;
  uint64_t v3 = (uint64_t)(v0 + 390);
  os_log_type_t v4 = v0 + 394;
  v181 = v0 + 400;
  uint64_t v5 = v0[400];
  defaultLogger()();
  sub_10003BC28(v5, (uint64_t)(v0 + 394));
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v173 = v0[441];
    uint64_t v175 = v0[440];
    uint64_t v177 = v0[442];
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v185 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    sub_10000C728(v4, v1[397]);
    v1[398] = swift_getDynamicType();
    sub_100007764(&qword_100720AC0);
    uint64_t v9 = String.init<A>(describing:)();
    v1[399] = sub_100110D58(v9, v10, &v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "coreidvd: sendPostRequest of type %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v177, v175);
  }
  else
  {
    uint64_t v11 = v0[442];
    uint64_t v12 = v0[441];
    uint64_t v13 = v1[440];
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v4);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  sub_10003BC28(*v181, v3);
  if (swift_dynamicCast())
  {
    uint64_t v14 = *v181;
    long long v15 = *((_OWORD *)v2 + 9);
    *((_OWORD *)v1 + 51) = *((_OWORD *)v2 + 8);
    *((_OWORD *)v1 + 52) = v15;
    v1[106] = v2[20];
    long long v16 = *((_OWORD *)v2 + 5);
    *((_OWORD *)v1 + 47) = *((_OWORD *)v2 + 4);
    *((_OWORD *)v1 + 48) = v16;
    long long v17 = *((_OWORD *)v2 + 7);
    *((_OWORD *)v1 + 49) = *((_OWORD *)v2 + 6);
    *((_OWORD *)v1 + 50) = v17;
    long long v18 = *((_OWORD *)v2 + 1);
    *((_OWORD *)v1 + 43) = *(_OWORD *)v2;
    *((_OWORD *)v1 + 44) = v18;
    long long v19 = *((_OWORD *)v2 + 3);
    *((_OWORD *)v1 + 45) = *((_OWORD *)v2 + 2);
    *((_OWORD *)v1 + 46) = v19;
    sub_1001D8DFC((uint64_t)(v1 + 86));
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_10003BC28(v14, (uint64_t)(v1 + 386));
    swift_dynamicCast();
    long long v20 = *(_OWORD *)(v1 + 37);
    long long v22 = *(_OWORD *)(v1 + 39);
    long long v21 = *(_OWORD *)(v1 + 41);
    *(_OWORD *)(v1 + 81) = v22;
    *(_OWORD *)(v1 + 83) = v21;
    long long v23 = *(_OWORD *)(v1 + 29);
    long long v25 = *(_OWORD *)(v1 + 31);
    long long v24 = *(_OWORD *)(v1 + 33);
    *(_OWORD *)(v1 + 73) = v25;
    *(_OWORD *)(v1 + 75) = v24;
    long long v26 = *(_OWORD *)(v1 + 33);
    long long v28 = *(_OWORD *)(v1 + 35);
    long long v27 = *(_OWORD *)(v1 + 37);
    *(_OWORD *)(v1 + 77) = v28;
    *(_OWORD *)(v1 + 79) = v27;
    long long v29 = *(_OWORD *)(v1 + 25);
    *(_OWORD *)(v1 + 65) = *(_OWORD *)(v1 + 23);
    *(_OWORD *)(v1 + 67) = v29;
    long long v30 = *(_OWORD *)(v1 + 29);
    long long v32 = *(_OWORD *)(v1 + 23);
    long long v31 = *(_OWORD *)(v1 + 25);
    long long v33 = *(_OWORD *)(v1 + 27);
    *(_OWORD *)(v1 + 69) = v33;
    *(_OWORD *)(v1 + 71) = v30;
    long long v34 = *(_OWORD *)(v1 + 41);
    *((_OWORD *)v1 + 9) = v22;
    *((_OWORD *)v1 + 10) = v34;
    *((_OWORD *)v1 + 5) = v25;
    *((_OWORD *)v1 + 6) = v26;
    *((_OWORD *)v1 + 7) = v28;
    *((_OWORD *)v1 + 8) = v20;
    *((_OWORD *)v1 + 1) = v32;
    *((_OWORD *)v1 + 2) = v31;
    v1[85] = v1[43];
    v1[22] = v1[43];
    *((_OWORD *)v1 + 3) = v33;
    *((_OWORD *)v1 + 4) = v23;
    sub_1002D4EB0();
    uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v37 = v36;
    sub_1001D8DFC((uint64_t)(v1 + 65));
LABEL_6:
    swift_release();
    goto LABEL_20;
  }
  if (swift_dynamicCast())
  {
    uint64_t v38 = v1[400];
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_10003BC28(v38, (uint64_t)(v1 + 374));
    swift_dynamicCast();
    sub_1000B6120(&qword_100729BF8, &qword_100726790);
    uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v37 = v39;
    uint64_t v40 = v1[439];
    uint64_t v41 = v1[438];
    uint64_t v42 = v1[437];
    uint64_t v43 = v3;
    uint64_t v44 = v1[436];
  }
  else if (swift_dynamicCast())
  {
    uint64_t v45 = v1[400];
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_10003BC28(v45, (uint64_t)(v1 + 370));
    swift_dynamicCast();
    sub_1000B6120(&qword_100729BF0, &qword_100726648);
    uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v37 = v46;
    uint64_t v40 = v1[435];
    uint64_t v41 = v1[434];
    uint64_t v42 = v1[433];
    uint64_t v43 = v3;
    uint64_t v44 = v1[432];
  }
  else
  {
    if (swift_dynamicCast())
    {
      uint64_t v179 = v3;
      uint64_t v176 = v1[400];
      uint64_t v47 = v1[307];
      uint64_t v48 = v1[308];
      uint64_t v49 = v1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000AAC30(v47, v48);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_10003BC28(v176, (uint64_t)(v1 + 358));
      swift_dynamicCast();
      uint64_t v50 = v1[314];
      uint64_t v51 = v1[315];
      uint64_t v52 = v1[316];
      uint64_t v53 = v1[317];
      uint64_t v54 = v1[318];
      uint64_t v55 = v1[319];
      uint64_t v56 = v1[320];
      uint64_t v57 = v49[321];
      uint64_t v58 = v49[323];
      uint64_t v178 = v49[322];
      uint64_t v59 = v49[325];
      uint64_t v174 = v49[324];
      v49[287] = v49[313];
      v49[288] = v50;
      v49[289] = v51;
      v49[290] = v52;
      v49[291] = v53;
      v49[292] = v54;
      v49[293] = v55;
      v49[294] = v56;
      v49[295] = v57;
      v49[296] = v178;
      v49[297] = v58;
      v49[298] = v174;
      v49[299] = v59;
      sub_10017DCE8();
      uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v37 = v60;
      swift_bridgeObjectRelease();
      uint64_t v3 = v179;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v61 = v56;
      uint64_t v1 = v49;
      sub_1000AAC30(v61, v57);
      goto LABEL_6;
    }
    if (swift_dynamicCast())
    {
      uint64_t v62 = v1[400];
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_10003BC28(v62, (uint64_t)(v1 + 354));
      swift_dynamicCast();
      sub_1000B6120(&qword_100729BE8, &qword_100729B80);
      uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v37 = v63;
      uint64_t v40 = v1[431];
      uint64_t v41 = v1[430];
      uint64_t v42 = v1[429];
      uint64_t v43 = v3;
      uint64_t v44 = v1[428];
    }
    else if (swift_dynamicCast())
    {
      uint64_t v64 = v1[400];
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_10003BC28(v64, (uint64_t)(v1 + 350));
      swift_dynamicCast();
      sub_1000B6120(&qword_100729BE0, &qword_1007273A8);
      uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v37 = v65;
      uint64_t v40 = v1[427];
      uint64_t v41 = v1[426];
      uint64_t v42 = v1[425];
      uint64_t v43 = v3;
      uint64_t v44 = v1[424];
    }
    else
    {
      if (!swift_dynamicCast())
      {
        if (swift_dynamicCast())
        {
          uint64_t v109 = *v181;
          long long v110 = *(_OWORD *)(v1 + 121);
          *(_OWORD *)(v1 + 139) = *(_OWORD *)(v1 + 119);
          *(_OWORD *)(v1 + 141) = v110;
          long long v111 = *(_OWORD *)(v1 + 125);
          *(_OWORD *)(v1 + 143) = *(_OWORD *)(v1 + 123);
          *(_OWORD *)(v1 + 145) = v111;
          long long v112 = *(_OWORD *)(v1 + 113);
          *(_OWORD *)(v1 + 131) = *(_OWORD *)(v1 + 111);
          *(_OWORD *)(v1 + 133) = v112;
          long long v113 = *(_OWORD *)(v1 + 117);
          *(_OWORD *)(v1 + 135) = *(_OWORD *)(v1 + 115);
          *(_OWORD *)(v1 + 137) = v113;
          long long v114 = *(_OWORD *)(v1 + 109);
          *(_OWORD *)(v1 + 127) = *(_OWORD *)(v1 + 107);
          *(_OWORD *)(v1 + 129) = v114;
          sub_1002D4020((uint64_t)(v1 + 127));
          type metadata accessor for JSONEncoder();
          swift_allocObject();
          JSONEncoder.init()();
          sub_10003BC28(v109, (uint64_t)(v1 + 366));
          swift_dynamicCast();
          long long v116 = *(_OWORD *)(v1 + 199);
          long long v115 = *(_OWORD *)(v1 + 201);
          long long v117 = *(_OWORD *)(v1 + 197);
          *(_OWORD *)(v1 + 159) = v116;
          *(_OWORD *)(v1 + 161) = v115;
          long long v118 = *(_OWORD *)(v1 + 201);
          long long v120 = *(_OWORD *)(v1 + 203);
          long long v119 = *(_OWORD *)(v1 + 205);
          *(_OWORD *)(v1 + 163) = v120;
          *(_OWORD *)(v1 + 165) = v119;
          long long v122 = *(_OWORD *)(v1 + 191);
          long long v121 = *(_OWORD *)(v1 + 193);
          long long v123 = *(_OWORD *)(v1 + 189);
          *(_OWORD *)(v1 + 151) = v122;
          *(_OWORD *)(v1 + 153) = v121;
          long long v124 = *(_OWORD *)(v1 + 193);
          long long v126 = *(_OWORD *)(v1 + 195);
          long long v125 = *(_OWORD *)(v1 + 197);
          *(_OWORD *)(v1 + 155) = v126;
          *(_OWORD *)(v1 + 157) = v125;
          long long v127 = *(_OWORD *)(v1 + 189);
          long long v128 = *(_OWORD *)(v1 + 187);
          *(_OWORD *)(v1 + 147) = v128;
          *(_OWORD *)(v1 + 149) = v127;
          *(_OWORD *)(v1 + 179) = v116;
          *(_OWORD *)(v1 + 181) = v118;
          long long v129 = *(_OWORD *)(v1 + 205);
          *(_OWORD *)(v1 + 183) = v120;
          *(_OWORD *)(v1 + 185) = v129;
          *(_OWORD *)(v1 + 171) = v122;
          *(_OWORD *)(v1 + 173) = v124;
          *(_OWORD *)(v1 + 175) = v126;
          *(_OWORD *)(v1 + 177) = v117;
          *(_OWORD *)(v1 + 167) = v128;
          *(_OWORD *)(v1 + 169) = v123;
          sub_1002D4E5C();
          uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
          unint64_t v37 = v130;
          sub_1002D4020((uint64_t)(v1 + 147));
        }
        else if (swift_dynamicCast())
        {
          uint64_t v131 = v1[400];
          uint64_t v180 = v3;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for JSONEncoder();
          swift_allocObject();
          JSONEncoder.init()();
          sub_10003BC28(v131, (uint64_t)(v1 + 378));
          swift_dynamicCast();
          uint64_t v132 = v1[334];
          uint64_t v133 = v1[335];
          uint64_t v134 = v1[336];
          uint64_t v135 = v1[337];
          uint64_t v136 = v1[338];
          uint64_t v137 = v1[339];
          uint64_t v138 = v1[340];
          v139 = v1;
          uint64_t v140 = v1[341];
          v139[326] = v132;
          v139[327] = v133;
          v139[328] = v134;
          v139[329] = v135;
          v139[330] = v136;
          v139[331] = v137;
          v139[332] = v138;
          v139[333] = v140;
          sub_1002D4E08();
          uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
          unint64_t v37 = v141;
          swift_bridgeObjectRelease();
          uint64_t v3 = v180;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v1 = v139;
          swift_bridgeObjectRelease();
        }
        else if (swift_dynamicCast())
        {
          uint64_t v142 = *v181;
          long long v143 = *(_OWORD *)(v1 + 265);
          *(_OWORD *)(v1 + 247) = *(_OWORD *)(v1 + 263);
          *(_OWORD *)(v1 + 249) = v143;
          long long v144 = *(_OWORD *)(v1 + 269);
          *(_OWORD *)(v1 + 251) = *(_OWORD *)(v1 + 267);
          *(_OWORD *)(v1 + 253) = v144;
          long long v145 = *(_OWORD *)(v1 + 257);
          *(_OWORD *)(v1 + 239) = *(_OWORD *)(v1 + 255);
          *(_OWORD *)(v1 + 241) = v145;
          long long v146 = *(_OWORD *)(v1 + 261);
          *(_OWORD *)(v1 + 243) = *(_OWORD *)(v1 + 259);
          *(_OWORD *)(v1 + 245) = v146;
          sub_1002D3F70((uint64_t)(v1 + 239));
          type metadata accessor for JSONEncoder();
          swift_allocObject();
          JSONEncoder.init()();
          sub_10003BC28(v142, (uint64_t)(v1 + 382));
          swift_dynamicCast();
          long long v147 = *(_OWORD *)(v1 + 215);
          long long v148 = *(_OWORD *)(v1 + 217);
          *(_OWORD *)(v1 + 279) = v147;
          *(_OWORD *)(v1 + 281) = v148;
          long long v149 = *(_OWORD *)(v1 + 219);
          long long v150 = *(_OWORD *)(v1 + 221);
          *(_OWORD *)(v1 + 283) = v149;
          *(_OWORD *)(v1 + 285) = v150;
          long long v151 = *(_OWORD *)(v1 + 207);
          long long v152 = *(_OWORD *)(v1 + 209);
          *(_OWORD *)(v1 + 271) = v151;
          *(_OWORD *)(v1 + 273) = v152;
          long long v153 = *(_OWORD *)(v1 + 211);
          long long v154 = *(_OWORD *)(v1 + 213);
          *(_OWORD *)(v1 + 275) = v153;
          *(_OWORD *)(v1 + 277) = v154;
          *(_OWORD *)(v1 + 235) = v149;
          *(_OWORD *)(v1 + 237) = v150;
          *(_OWORD *)(v1 + 231) = v147;
          *(_OWORD *)(v1 + 233) = v148;
          *(_OWORD *)(v1 + 227) = v153;
          *(_OWORD *)(v1 + 229) = v154;
          *(_OWORD *)(v1 + 223) = v151;
          *(_OWORD *)(v1 + 225) = v152;
          sub_1002D4DB4();
          uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
          unint64_t v37 = v155;
          sub_1002D3F70((uint64_t)(v1 + 271));
        }
        else
        {
          if (!swift_dynamicCast())
          {
            uint64_t v157 = v1[415];
            uint64_t v158 = v1[414];
            uint64_t v159 = v1[413];
            uint64_t v160 = v1[402];
            uint64_t v184 = v1[401];
            uint64_t v185 = 0;
            v161 = (void *)v1[400];
            unint64_t v186 = 0xE000000000000000;
            _StringGuts.grow(_:)(23);
            swift_bridgeObjectRelease();
            uint64_t v185 = 0xD000000000000015;
            unint64_t v186 = 0x8000000100630A40;
            sub_10000C728(v161, v161[3]);
            swift_getDynamicType();
            v162._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
            String.append(_:)(v162);
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, void, uint64_t))(v158 + 104))(v157, enum case for DIPError.Code.badLogic(_:), v159);
            sub_100007764((uint64_t *)&unk_1007225C0);
            v163 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            uint64_t v164 = v3;
            unint64_t v165 = (*(unsigned __int8 *)(*(void *)v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v163 + 80);
            uint64_t v166 = swift_allocObject();
            *(_OWORD *)(v166 + 16) = xmmword_100610730;
            unint64_t v167 = v166 + v165;
            v168 = (void *)(v167 + v163[14]);
            uint64_t v169 = enum case for DIPError.PropertyKey.serverURL(_:);
            uint64_t v170 = type metadata accessor for DIPError.PropertyKey();
            unint64_t v171 = v167;
            uint64_t v172 = v164;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v170 - 8) + 104))(v171, v169, v170);
            v168[3] = &type metadata for String;
            void *v168 = v184;
            v168[1] = v160;
            swift_bridgeObjectRetain();
            sub_10015C504(v166);
            type metadata accessor for DIPError();
            sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            uint64_t v70 = v1[415];
            uint64_t v71 = v1[414];
            uint64_t v182 = v1[413];
            uint64_t v72 = v1[402];
            uint64_t v73 = v1[401];
            _s8coreidvd24DigitalPresentmentHelperVwxx_0(v172);
            sub_100007764((uint64_t *)&unk_1007225C0);
            long long v74 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            unint64_t v75 = (*(unsigned __int8 *)(*(void *)v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v74 + 80);
            uint64_t v76 = swift_allocObject();
            *(_OWORD *)(v76 + 16) = xmmword_100610730;
            unint64_t v77 = v76 + v75;
            uint64_t v78 = v1;
            uint64_t v79 = (void *)(v77 + v74[14]);
            uint64_t v80 = enum case for DIPError.PropertyKey.serverURL(_:);
            uint64_t v81 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 104))(v77, v80, v81);
            uint64_t v79[3] = &type metadata for String;
            *uint64_t v79 = v73;
            v79[1] = v72;
            uint64_t v1 = v78;
            swift_bridgeObjectRetain();
            swift_errorRetain();
            sub_10015C504(v76);
            (*(void (**)(uint64_t, void, uint64_t))(v71 + 104))(v70, enum case for DIPError.Code.internalError(_:), v182);
            type metadata accessor for DIPError();
            sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            swift_errorRelease();
            goto LABEL_22;
          }
          (*(void (**)(void, void, void))(v1[417] + 32))(v1[418], v1[419], v1[416]);
          type metadata accessor for JSONEncoder();
          swift_allocObject();
          JSONEncoder.init()();
          sub_1000B6120(&qword_100729BB8, &qword_100729B78);
          uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
          unint64_t v37 = v156;
          (*(void (**)(void, void))(v1[417] + 8))(v1[418], v1[416]);
        }
        goto LABEL_6;
      }
      uint64_t v66 = v1[400];
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_10003BC28(v66, (uint64_t)(v1 + 362));
      swift_dynamicCast();
      sub_1000B6120(&qword_100729BD8, &qword_100728500);
      uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v37 = v67;
      uint64_t v40 = v1[423];
      uint64_t v41 = v1[422];
      uint64_t v42 = v1[421];
      uint64_t v43 = v3;
      uint64_t v44 = v1[420];
    }
  }
  swift_release();
  long long v68 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v68(v41, v44);
  uint64_t v69 = v44;
  uint64_t v3 = v43;
  v68(v40, v69);
LABEL_20:
  uint64_t v82 = v1[411];
  uint64_t v83 = v1[410];
  uint64_t v84 = v1[409];
  v1[443] = v37;
  v1[444] = v35;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v3);
  URL.init(string:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v84, 1, v83) == 1)
  {
    uint64_t v85 = v1[415];
    uint64_t v86 = v1[414];
    uint64_t v87 = v1[413];
    uint64_t v88 = v1[402];
    uint64_t v89 = v1[401];
    sub_10000C6CC(v1[409], &qword_100720A68);
    (*(void (**)(uint64_t, void, uint64_t))(v86 + 104))(v85, enum case for DIPError.Code.badLogic(_:), v87);
    sub_100007764((uint64_t *)&unk_1007225C0);
    unint64_t v90 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v91 = (*(unsigned __int8 *)(*(void *)v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v90 + 80);
    uint64_t v92 = swift_allocObject();
    *(_OWORD *)(v92 + 16) = xmmword_100610730;
    unint64_t v93 = v92 + v91;
    uint64_t v94 = (void *)(v93 + v90[14]);
    uint64_t v95 = enum case for DIPError.PropertyKey.serverURL(_:);
    uint64_t v96 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 104))(v93, v95, v96);
    v94[3] = &type metadata for String;
    *uint64_t v94 = v89;
    v94[1] = v88;
    swift_bridgeObjectRetain();
    sub_10015C504(v92);
    type metadata accessor for DIPError();
    sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v35, v37);
LABEL_22:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unsigned int v97 = (uint64_t (*)(void))v1[1];
    return v97();
  }
  uint64_t v99 = v1[412];
  uint64_t v100 = v1[408];
  char v101 = *((unsigned char *)v1 + 3600);
  uint64_t v102 = v1[403];
  (*(void (**)(uint64_t, void, void))(v1[411] + 32))(v99, v1[409], v1[410]);
  sub_10002CEB0(v35, v37);
  sub_1005D28FC(v99, v102, 0, v101, v100);
  URLRequest.httpMethod.setter();
  v103.value._uint64_t countAndFlagsBits = 0xD000000000000010;
  v103.value._unint64_t object = (void *)0x8000000100630AC0;
  v104._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
  v104._unint64_t object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(v103, v104);
  URLRequest.httpBody.setter();
  v183 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100733FA0 + dword_100733FA0);
  unint64_t v105 = (void *)swift_task_alloc();
  v1[445] = v105;
  *unint64_t v105 = v1;
  v105[1] = sub_1002CE330;
  char v106 = *((unsigned char *)v1 + 3600);
  uint64_t v107 = v1[404];
  uint64_t v108 = v1[408];
  return v183(v108, v107, 0, v106);
}

uint64_t sub_1002CE330(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v10 = *v5;
  *(void *)(*v5 + 3568) = v4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v11 = sub_1002CE644;
  }
  else
  {
    *(unsigned char *)(v10 + 3601) = a4 & 1;
    *(void *)(v10 + 3576) = a3;
    *(void *)(v10 + 3584) = a2;
    *(void *)(v10 + 3592) = a1;
    uint64_t v11 = sub_1002CE484;
  }
  return _swift_task_switch(v11, 0, 0);
}

uint64_t sub_1002CE484()
{
  uint64_t v1 = *(void *)(v0 + 3296);
  uint64_t v2 = *(void *)(v0 + 3288);
  uint64_t v3 = *(void *)(v0 + 3280);
  uint64_t v4 = *(void *)(v0 + 3264);
  uint64_t v5 = *(void *)(v0 + 3256);
  uint64_t v6 = *(void *)(v0 + 3248);
  sub_10000C5F4(*(void *)(v0 + 3552), *(void *)(v0 + 3544));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8);
  uint64_t v8 = *(void *)(v0 + 3592);
  uint64_t v9 = *(void *)(v0 + 3584);
  uint64_t v10 = *(void *)(v0 + 3576);
  uint64_t v11 = *(unsigned __int8 *)(v0 + 3601);
  return v7(v8, v9, v10, v11);
}

uint64_t sub_1002CE644()
{
  uint64_t v1 = v0[412];
  uint64_t v2 = v0[411];
  uint64_t v3 = v0[410];
  uint64_t v4 = v0[408];
  uint64_t v5 = v0[407];
  uint64_t v6 = v0[406];
  sub_10000C5F4(v0[444], v0[443]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002CE7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 2600) = v5;
  *(unsigned char *)(v6 + 201) = a5;
  *(void *)(v6 + 2592) = a4;
  *(void *)(v6 + 2584) = a3;
  *(void *)(v6 + 2576) = a2;
  *(void *)(v6 + 2568) = a1;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 2608) = v7;
  *(void *)(v6 + 2616) = *(void *)(v7 - 8);
  *(void *)(v6 + 2624) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v6 + 2632) = v8;
  *(void *)(v6 + 2640) = *(void *)(v8 - 8);
  *(void *)(v6 + 2648) = swift_task_alloc();
  uint64_t v9 = sub_100007764(&qword_100729B78);
  *(void *)(v6 + 2656) = v9;
  *(void *)(v6 + 2664) = *(void *)(v9 - 8);
  *(void *)(v6 + 2672) = swift_task_alloc();
  *(void *)(v6 + 2680) = swift_task_alloc();
  *(void *)(v6 + 2688) = swift_task_alloc();
  type metadata accessor for IdentityProofingRequestV2(0);
  *(void *)(v6 + 2696) = swift_task_alloc();
  uint64_t v10 = sub_100007764(&qword_100728500);
  *(void *)(v6 + 2704) = v10;
  *(void *)(v6 + 2712) = *(void *)(v10 - 8);
  *(void *)(v6 + 2720) = swift_task_alloc();
  *(void *)(v6 + 2728) = swift_task_alloc();
  uint64_t v11 = sub_100007764(&qword_1007273A8);
  *(void *)(v6 + 2736) = v11;
  *(void *)(v6 + 2744) = *(void *)(v11 - 8);
  *(void *)(v6 + 2752) = swift_task_alloc();
  *(void *)(v6 + 2760) = swift_task_alloc();
  uint64_t v12 = sub_100007764(&qword_100729B80);
  *(void *)(v6 + 2768) = v12;
  *(void *)(v6 + 2776) = *(void *)(v12 - 8);
  *(void *)(v6 + 2784) = swift_task_alloc();
  *(void *)(v6 + 2792) = swift_task_alloc();
  type metadata accessor for SharingRegistrationRequest(0);
  *(void *)(v6 + 2800) = swift_task_alloc();
  uint64_t v13 = sub_100007764(&qword_100726648);
  *(void *)(v6 + 2808) = v13;
  *(void *)(v6 + 2816) = *(void *)(v13 - 8);
  *(void *)(v6 + 2824) = swift_task_alloc();
  *(void *)(v6 + 2832) = swift_task_alloc();
  type metadata accessor for IdentityProofingRequest(0);
  *(void *)(v6 + 2840) = swift_task_alloc();
  uint64_t v14 = sub_100007764(&qword_100726790);
  *(void *)(v6 + 2848) = v14;
  *(void *)(v6 + 2856) = *(void *)(v14 - 8);
  *(void *)(v6 + 2864) = swift_task_alloc();
  *(void *)(v6 + 2872) = swift_task_alloc();
  return _swift_task_switch(sub_1002CEC58, 0, 0);
}

uint64_t sub_1002CEC58()
{
  uint64_t v120 = v0;
  if (*(unsigned char *)(v0 + 201))
  {
    uint64_t v1 = &_swiftEmptyDictionarySingleton;
  }
  else
  {
    if (qword_10071F580 != -1) {
      swift_once();
    }
    id v2 = (id)qword_1007607E8;
    uint64_t v3 = sub_1004E7C64();
    uint64_t v5 = v4;
    sub_10013FEE4(v3, v4);
    if (v5 == 1) {
      sub_1004E995C();
    }
    uint64_t v6 = sub_1004E7C64();
    unint64_t v8 = v7;

    uint64_t v1 = &_swiftEmptyDictionarySingleton;
    if (v8 >= 2)
    {
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      long long v119 = &_swiftEmptyDictionarySingleton;
      sub_100562120(v6, v8, v9, v11, isUniquelyReferenced_nonNull_native);
      uint64_t v1 = &_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v13 = *(void *)(v0 + 2592);
  if (v13)
  {
    swift_bridgeObjectRetain();
    char v14 = swift_isUniquelyReferenced_nonNull_native();
    long long v119 = &_swiftEmptyDictionarySingleton;
    sub_1002D340C(v13, (uint64_t)sub_1002D38C0, 0, v14, &v119);
    uint64_t v1 = v119;
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = v0 + 2256;
  long long v118 = (uint64_t *)(v0 + 2352);
  sub_10003BC28(*(void *)(v0 + 2568), v0 + 2256);
  sub_100007764(&qword_100729B88);
  sub_100007764(&qword_100729B90);
  if (swift_dynamicCast())
  {
    sub_10003BC28(*(void *)(v0 + 2568), v0 + 2512);
    swift_dynamicCast();
    uint64_t v16 = *(void *)(v0 + 2136);
    uint64_t v17 = *(void *)(v0 + 2144);
    sub_10000C728((void *)(v0 + 2112), v16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 2112);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 2152);
    goto LABEL_24;
  }
  if (swift_dynamicCast())
  {
    uint64_t v113 = *(void *)(v0 + 2872);
    long long v114 = v1;
    uint64_t v25 = *(void *)(v0 + 2864);
    uint64_t v26 = *(void *)(v0 + 2856);
    uint64_t v27 = *(void *)(v0 + 2848);
    long long v28 = *(uint64_t **)(v0 + 2840);
    sub_10003BC28(*(void *)(v0 + 2568), v0 + 2480);
    swift_dynamicCast();
    JWSSignedJSON.payload.getter();
    long long v29 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v29(v25, v27);
    uint64_t v18 = *v28;
    uint64_t v20 = v28[1];
    uint64_t v22 = v28[2];
    uint64_t v24 = v28[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v30 = type metadata accessor for IdentityProofingRequest;
    uint64_t v31 = (uint64_t)v28;
    uint64_t v15 = v0 + 2256;
LABEL_17:
    sub_1002D54E8(v31, v30);
    v29(v113, v27);
    uint64_t v1 = v114;
    goto LABEL_24;
  }
  if (swift_dynamicCast())
  {
    uint64_t v113 = *(void *)(v0 + 2832);
    long long v114 = v1;
    uint64_t v32 = *(void *)(v0 + 2824);
    uint64_t v33 = *(void *)(v0 + 2816);
    uint64_t v27 = *(void *)(v0 + 2808);
    long long v34 = *(uint64_t **)(v0 + 2800);
    sub_10003BC28(*(void *)(v0 + 2568), v0 + 2448);
    swift_dynamicCast();
    JWSSignedJSON.payload.getter();
    long long v29 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    uint64_t v35 = v32;
    uint64_t v15 = v0 + 2256;
    v29(v35, v27);
    uint64_t v18 = *v34;
    uint64_t v20 = v34[1];
    uint64_t v22 = v34[2];
    uint64_t v24 = v34[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v30 = type metadata accessor for SharingRegistrationRequest;
    uint64_t v31 = (uint64_t)v34;
    goto LABEL_17;
  }
  if (swift_dynamicCast())
  {
    uint64_t v115 = *(void *)(v0 + 2792);
    uint64_t v36 = *(void *)(v0 + 2784);
    uint64_t v37 = *(void *)(v0 + 2776);
    uint64_t v38 = *(void *)(v0 + 2768);
    sub_10003BC28(*(void *)(v0 + 2568), v0 + 2384);
    swift_dynamicCast();
    JWSSignedJSON.payload.getter();
    long long v39 = *(_OWORD *)(v0 + 1152);
    *(_OWORD *)(v0 + 1280) = *(_OWORD *)(v0 + 1136);
    *(_OWORD *)(v0 + 1296) = v39;
    *(_OWORD *)(v0 + 1312) = *(_OWORD *)(v0 + 1168);
    long long v40 = *(_OWORD *)(v0 + 1088);
    *(_OWORD *)(v0 + 1216) = *(_OWORD *)(v0 + 1072);
    *(_OWORD *)(v0 + 1232) = v40;
    long long v41 = *(_OWORD *)(v0 + 1120);
    *(_OWORD *)(v0 + 1248) = *(_OWORD *)(v0 + 1104);
    *(_OWORD *)(v0 + 1264) = v41;
    long long v42 = *(_OWORD *)(v0 + 1056);
    *(_OWORD *)(v0 + 1184) = *(_OWORD *)(v0 + 1040);
    *(_OWORD *)(v0 + 1200) = v42;
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v43(v36, v38);
    uint64_t v18 = *(void *)(v0 + 1184);
    uint64_t v20 = *(void *)(v0 + 1192);
    uint64_t v22 = *(void *)(v0 + 1200);
    uint64_t v24 = *(void *)(v0 + 1208);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D41A4(v0 + 1184);
    v43(v115, v38);
  }
  else if (swift_dynamicCast())
  {
    uint64_t v116 = *(void *)(v0 + 2760);
    uint64_t v44 = *(void *)(v0 + 2752);
    uint64_t v45 = *(void *)(v0 + 2744);
    uint64_t v46 = *(void *)(v0 + 2736);
    sub_10003BC28(*(void *)(v0 + 2568), v0 + 2288);
    swift_dynamicCast();
    JWSSignedJSON.payload.getter();
    long long v47 = *(_OWORD *)(v0 + 1440);
    *(_OWORD *)(v0 + 1560) = *(_OWORD *)(v0 + 1424);
    *(_OWORD *)(v0 + 1576) = v47;
    *(void *)(v0 + 1592) = *(void *)(v0 + 1456);
    long long v48 = *(_OWORD *)(v0 + 1376);
    *(_OWORD *)(v0 + 1496) = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1512) = v48;
    long long v49 = *(_OWORD *)(v0 + 1408);
    *(_OWORD *)(v0 + 1528) = *(_OWORD *)(v0 + 1392);
    *(_OWORD *)(v0 + 1544) = v49;
    long long v50 = *(_OWORD *)(v0 + 1344);
    *(_OWORD *)(v0 + 1464) = *(_OWORD *)(v0 + 1328);
    *(_OWORD *)(v0 + 1480) = v50;
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v51(v44, v46);
    uint64_t v18 = *(void *)(v0 + 1464);
    uint64_t v20 = *(void *)(v0 + 1472);
    uint64_t v22 = *(void *)(v0 + 1480);
    uint64_t v24 = *(void *)(v0 + 1488);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D40EC(v0 + 1464);
    v51(v116, v46);
  }
  else if (swift_dynamicCast())
  {
    uint64_t v117 = *(void *)(v0 + 2728);
    uint64_t v52 = *(void *)(v0 + 2720);
    uint64_t v53 = *(void *)(v0 + 2712);
    uint64_t v54 = *(void *)(v0 + 2704);
    uint64_t v55 = *(uint64_t **)(v0 + 2696);
    sub_10003BC28(*(void *)(v0 + 2568), v0 + 2224);
    swift_dynamicCast();
    JWSSignedJSON.payload.getter();
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    uint64_t v57 = v52;
    uint64_t v15 = v0 + 2256;
    v56(v57, v54);
    uint64_t v18 = *v55;
    uint64_t v20 = v55[1];
    uint64_t v22 = v55[2];
    uint64_t v24 = v55[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D54E8((uint64_t)v55, type metadata accessor for IdentityProofingRequestV2);
    v56(v117, v54);
  }
  else if (swift_dynamicCast())
  {
    uint64_t v73 = *(void *)(v0 + 2568);
    long long v74 = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 976) = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v0 + 992) = v74;
    long long v75 = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 1008) = *(_OWORD *)(v0 + 528);
    *(_OWORD *)(v0 + 1024) = v75;
    long long v76 = *(_OWORD *)(v0 + 448);
    *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 432);
    *(_OWORD *)(v0 + 928) = v76;
    long long v77 = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v0 + 944) = *(_OWORD *)(v0 + 464);
    *(_OWORD *)(v0 + 960) = v77;
    long long v78 = *(_OWORD *)(v0 + 416);
    *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 400);
    *(_OWORD *)(v0 + 896) = v78;
    sub_1002D4020(v0 + 880);
    uint64_t v79 = v73;
    uint64_t v15 = v0 + 2256;
    sub_10003BC28(v79, v0 + 2416);
    swift_dynamicCast();
    long long v80 = *(_OWORD *)(v0 + 800);
    *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 784);
    *(_OWORD *)(v0 + 640) = v80;
    long long v81 = *(_OWORD *)(v0 + 768);
    *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 752);
    *(_OWORD *)(v0 + 608) = v81;
    long long v82 = *(_OWORD *)(v0 + 864);
    *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 848);
    *(_OWORD *)(v0 + 704) = v82;
    long long v83 = *(_OWORD *)(v0 + 832);
    *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 816);
    *(_OWORD *)(v0 + 672) = v83;
    long long v84 = *(_OWORD *)(v0 + 736);
    *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 720);
    *(_OWORD *)(v0 + 576) = v84;
    uint64_t v18 = *(void *)(v0 + 560);
    uint64_t v20 = *(void *)(v0 + 568);
    uint64_t v22 = *(void *)(v0 + 576);
    uint64_t v24 = *(void *)(v0 + 584);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D4020(v0 + 560);
  }
  else if (swift_dynamicCast())
  {
    uint64_t v85 = *(void *)(v0 + 2568);
    long long v86 = *(_OWORD *)(v0 + 2064);
    *(_OWORD *)(v0 + 1664) = *(_OWORD *)(v0 + 2048);
    *(_OWORD *)(v0 + 1680) = v86;
    long long v87 = *(_OWORD *)(v0 + 2096);
    *(_OWORD *)(v0 + 1696) = *(_OWORD *)(v0 + 2080);
    *(_OWORD *)(v0 + 1712) = v87;
    long long v88 = *(_OWORD *)(v0 + 2000);
    *(_OWORD *)(v0 + 1600) = *(_OWORD *)(v0 + 1984);
    *(_OWORD *)(v0 + 1616) = v88;
    long long v89 = *(_OWORD *)(v0 + 2032);
    *(_OWORD *)(v0 + 1632) = *(_OWORD *)(v0 + 2016);
    *(_OWORD *)(v0 + 1648) = v89;
    sub_1002D3F70(v0 + 1600);
    uint64_t v90 = v85;
    uint64_t v15 = v0 + 2256;
    sub_10003BC28(v90, v0 + 2192);
    swift_dynamicCast();
    long long v91 = *(_OWORD *)(v0 + 1904);
    *(_OWORD *)(v0 + 1760) = *(_OWORD *)(v0 + 1888);
    *(_OWORD *)(v0 + 1776) = v91;
    long long v92 = *(_OWORD *)(v0 + 1872);
    *(_OWORD *)(v0 + 1728) = *(_OWORD *)(v0 + 1856);
    *(_OWORD *)(v0 + 1744) = v92;
    long long v93 = *(_OWORD *)(v0 + 1968);
    *(_OWORD *)(v0 + 1824) = *(_OWORD *)(v0 + 1952);
    *(_OWORD *)(v0 + 1840) = v93;
    long long v94 = *(_OWORD *)(v0 + 1936);
    *(_OWORD *)(v0 + 1792) = *(_OWORD *)(v0 + 1920);
    *(_OWORD *)(v0 + 1808) = v94;
    uint64_t v18 = *(void *)(v0 + 1728);
    uint64_t v20 = *(void *)(v0 + 1736);
    uint64_t v22 = *(void *)(v0 + 1744);
    uint64_t v24 = *(void *)(v0 + 1752);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002D3F70(v0 + 1728);
  }
  else
  {
    if (swift_dynamicCast())
    {
      uint64_t v95 = *(void *)(v0 + 2680);
      uint64_t v96 = v1;
      uint64_t v97 = *(void *)(v0 + 2664);
      uint64_t v98 = *(void *)(v0 + 2656);
      (*(void (**)(uint64_t, void, uint64_t))(v97 + 32))(v95, *(void *)(v0 + 2688), v98);
      JWSSignedJSON.payload.getter();
      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v95, v98);
      uint64_t v1 = v96;
      long long v99 = *(_OWORD *)(v0 + 320);
      *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 304);
      *(_OWORD *)(v0 + 128) = v99;
      long long v100 = *(_OWORD *)(v0 + 288);
      *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 272);
      *(_OWORD *)(v0 + 96) = v100;
      *(_OWORD *)(v0 + 185) = *(_OWORD *)(v0 + 377);
      long long v101 = *(_OWORD *)(v0 + 368);
      long long v102 = *(_OWORD *)(v0 + 336);
      *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 352);
      *(_OWORD *)(v0 + 176) = v101;
      *(_OWORD *)(v0 + 144) = v102;
      long long v103 = *(_OWORD *)(v0 + 256);
      *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 240);
      *(_OWORD *)(v0 + 64) = v103;
      long long v104 = *(_OWORD *)(v0 + 224);
      *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 208);
      *(_OWORD *)(v0 + 32) = v104;
      uint64_t v18 = *(void *)(v0 + 16);
      uint64_t v20 = *(void *)(v0 + 24);
      uint64_t v22 = *(void *)(v0 + 32);
      uint64_t v24 = *(void *)(v0 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1002D3E90((void *)(v0 + 16));
    }
    else
    {
      unint64_t v105 = v1;
      defaultLogger()();
      char v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v108 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v108 = 0;
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "unknown topeka request, conversation/request id not added to http header", v108, 2u);
        swift_slowDealloc();
      }
      uint64_t v109 = *(void *)(v0 + 2648);
      uint64_t v110 = *(void *)(v0 + 2640);
      uint64_t v111 = *(void *)(v0 + 2632);

      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
      uint64_t v18 = 0;
      uint64_t v20 = 0;
      uint64_t v22 = 0;
      uint64_t v24 = 0;
      uint64_t v1 = v105;
    }
    uint64_t v15 = v0 + 2256;
  }
LABEL_24:
  uint64_t v58 = *(void **)(v0 + 2568);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v15);
  uint64_t v59 = sub_1002CFF38(v18, v20, v22, v24, v1);
  *(void *)(v0 + 2880) = v59;
  swift_bridgeObjectRelease();
  sub_1001D5FEC(v18, v20);
  uint64_t v60 = v58[3];
  uint64_t v61 = sub_10000C728(v58, v60);
  *(void *)(v0 + 2376) = v60;
  uint64_t v62 = sub_10002C2D8(v118);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v60 - 8) + 16))(v62, v61, v60);
  sub_10003BC28((uint64_t)v118, v0 + 2320);
  int v63 = swift_dynamicCast();
  char v64 = v63;
  if (v63) {
    (*(void (**)(void, void))(*(void *)(v0 + 2664) + 8))(*(void *)(v0 + 2672), *(void *)(v0 + 2656));
  }
  uint64_t v65 = *(void *)(v0 + 2600);
  char v66 = *(unsigned char *)(v0 + 201);
  uint64_t v67 = *(void *)(v0 + 2584);
  uint64_t v68 = *(void *)(v0 + 2576);
  uint64_t v69 = *(void *)(v0 + 2568);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v118);
  uint64_t v70 = swift_task_alloc();
  *(void *)(v0 + 2888) = v70;
  *(void *)(v70 + 16) = v68;
  *(void *)(v70 + 24) = v67;
  *(void *)(v70 + 32) = v65;
  *(unsigned char *)(v70 + 40) = v64;
  *(void *)(v70 + 48) = v69;
  *(void *)(v70 + 56) = v59;
  *(unsigned char *)(v70 + 64) = v66;
  uint64_t v71 = (void *)swift_task_alloc();
  *(void *)(v0 + 2896) = v71;
  uint64_t v72 = sub_100007764(&qword_100729BA8);
  *uint64_t v71 = v0;
  v71[1] = sub_1002CF870;
  return DIPRetrier.retry<A>(operation:)(v0 + 2544, &unk_100729BA0, v70, v72);
}

uint64_t sub_1002CF870()
{
  *(void *)(*(void *)v1 + 2904) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1002CFB14;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    id v2 = sub_1002CF998;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002CF998()
{
  uint64_t v4 = v0[319];
  uint64_t v5 = v0[318];
  uint64_t v3 = v0[320];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v1(v5, v4, v3);
}

uint64_t sub_1002CFB14()
{
  uint64_t v19 = v0[328];
  uint64_t v20 = v0[326];
  uint64_t v17 = v0[323];
  uint64_t v18 = v0[327];
  uint64_t v15 = v0[325];
  uint64_t v16 = v0[322];
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v1 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100611020;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = (void *)(v5 + v1[14]);
  uint64_t v7 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v8 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v5, v7, v8);
  uint64_t v10 = *(void *)(v15 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v11 = *(void *)(v15 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v6[3] = &type metadata for String;
  *uint64_t v6 = v10;
  v6[1] = v11;
  uint64_t v12 = (void *)(v5 + v2 + v1[14]);
  v9();
  v12[3] = &type metadata for String;
  *uint64_t v12 = v16;
  v12[1] = v17;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v4);
  (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v19, enum case for DIPError.Code.internalError(_:), v20);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

void *sub_1002CFF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v67 = *(void *)(v10 - 8);
  uint64_t v68 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v12 = __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v63 - v15;
  if (a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = &_swiftEmptyDictionarySingleton;
  }
  if (!a2)
  {
    swift_bridgeObjectRetain();
    return v17;
  }
  uint64_t v65 = v14;
  uint64_t v66 = v13;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;
  if (!v17[2])
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v21 = v18;
  swift_bridgeObjectRetain();
  sub_100590548(v21, v20);
  char v23 = v22;
  swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
  {
LABEL_10:
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v70 = v17;
    sub_100562120(a1, a2, v24, v26, isUniquelyReferenced_nonNull_native);
    uint64_t v17 = v70;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v28 = v68;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v17[2])
  {
    sub_100590548(v29, v30);
    char v32 = v31;
    swift_bridgeObjectRelease();
    if (v32) {
      goto LABEL_16;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;
  swift_bridgeObjectRetain();
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v70 = v17;
  sub_100562120(a3, a4, v33, v35, v36);
  uint64_t v17 = v70;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v37 = self;
  uint64_t v38 = &stru_10071A000;
  id v39 = [v37 standardUserDefaults];
  v40._uint64_t countAndFlagsBits = 0xD000000000000022;
  v40._unint64_t object = (void *)0x8000000100647640;
  Swift::String_optional v41 = NSUserDefaults.internalString(forKey:)(v40);

  if (v41.value._object)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    long long v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v70 = (void *)swift_slowAlloc();
      char v64 = v37;
      *(_DWORD *)uint64_t v44 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v69 = sub_100110D58(v41.value._countAndFlagsBits, (unint64_t)v41.value._object, (uint64_t *)&v70);
      uint64_t v38 = &stru_10071A000;
      uint64_t v37 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Using shortcut response header: %s", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v28 = v68;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v67 + 8))(v16, v28);
    char v45 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v70 = v17;
    sub_100562120(v41.value._countAndFlagsBits, (uint64_t)v41.value._object, 0xD00000000000001DLL, 0x80000001006476F0, v45);
    uint64_t v17 = v70;
    swift_bridgeObjectRelease();
  }
  id v46 = [v37 v38[132].attr];
  v47._uint64_t countAndFlagsBits = 0xD000000000000015;
  v47._unint64_t object = (void *)0x8000000100647670;
  Swift::String_optional v48 = NSUserDefaults.internalString(forKey:)(v47);

  if (v48.value._object)
  {
    uint64_t v49 = v65;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    long long v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v70 = (void *)swift_slowAlloc();
      char v64 = v37;
      *(_DWORD *)uint64_t v52 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v69 = sub_100110D58(v48.value._countAndFlagsBits, (unint64_t)v48.value._object, (uint64_t *)&v70);
      uint64_t v38 = &stru_10071A000;
      uint64_t v37 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Using IVS-Test header: %s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v49, v68);
    char v53 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v70 = v17;
    sub_100562120(v48.value._countAndFlagsBits, (uint64_t)v48.value._object, 0xD000000000000014, 0x80000001006476D0, v53);
    uint64_t v17 = v70;
    swift_bridgeObjectRelease();
  }
  id v54 = [v37 v38[132].attr];
  v55._uint64_t countAndFlagsBits = 0xD000000000000019;
  v55._unint64_t object = (void *)0x8000000100647690;
  Swift::String_optional v56 = NSUserDefaults.internalString(forKey:)(v55);

  if (v56.value._object)
  {
    uint64_t v57 = v66;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v70 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v69 = sub_100110D58(v56.value._countAndFlagsBits, (unint64_t)v56.value._object, (uint64_t *)&v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Using Magenta-Test header: %s", v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v57, v68);
    char v61 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v70 = v17;
    sub_100562120(v56.value._countAndFlagsBits, (uint64_t)v56.value._object, 0xD000000000000018, 0x80000001006476B0, v61);
    uint64_t v17 = v70;
    swift_bridgeObjectRelease();
  }
  return v17;
}

uint64_t sub_1002D075C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 377) = a8;
  *(void *)(v8 + 168) = a6;
  *(void *)(v8 + 176) = a7;
  *(unsigned char *)(v8 + 376) = a5;
  *(void *)(v8 + 152) = a3;
  *(void *)(v8 + 160) = a4;
  *(void *)(v8 + 136) = a1;
  *(void *)(v8 + 144) = a2;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  *(void *)(v8 + 184) = v9;
  *(void *)(v8 + 192) = *(void *)(v9 - 8);
  *(void *)(v8 + 200) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  *(void *)(v8 + 208) = v10;
  *(void *)(v8 + 216) = *(void *)(v10 - 8);
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  sub_100007764(&qword_100720A68);
  *(void *)(v8 + 240) = swift_task_alloc();
  *(void *)(v8 + 248) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v8 + 256) = v11;
  *(void *)(v8 + 264) = *(void *)(v11 - 8);
  *(void *)(v8 + 272) = swift_task_alloc();
  *(void *)(v8 + 280) = swift_task_alloc();
  *(void *)(v8 + 288) = swift_task_alloc();
  *(void *)(v8 + 296) = swift_task_alloc();
  *(void *)(v8 + 304) = swift_task_alloc();
  *(void *)(v8 + 312) = swift_task_alloc();
  return _swift_task_switch(sub_1002D0974, 0, 0);
}

uint64_t sub_1002D0974()
{
  uint64_t v35 = v0;
  uint64_t v1 = (unsigned __int8 *)(v0 + 47);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[33];
    uint64_t v32 = v0[32];
    uint64_t v33 = v0[39];
    uint64_t v6 = v0[18];
    unint64_t v5 = v0[19];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[16] = sub_100110D58(v6, v5, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sending topeka post request to %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = (unsigned __int8 *)(v0 + 47);
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v8(v33, v32);
  }
  else
  {
    uint64_t v9 = v0[39];
    uint64_t v10 = v0[32];
    uint64_t v11 = v0[33];
    swift_bridgeObjectRelease_n();

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
  v0[40] = (uint64_t)v8;
  uint64_t v12 = v0[30];
  uint64_t v13 = v0[31];
  uint64_t v14 = v0[26];
  uint64_t v15 = v0[27];
  sub_1002D26DC(*v1, v13);
  sub_100048D6C(v13, v12, &qword_100720A68);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
  {
    sub_10000C6CC(v0[30], &qword_100720A68);
    swift_bridgeObjectRetain();
    uint64_t v16 = v0[18];
    uint64_t v17 = v0[19];
  }
  else
  {
    uint64_t v19 = v0[28];
    uint64_t v18 = v0[29];
    uint64_t v20 = v0[26];
    uint64_t v21 = v0[27];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v18, v0[30], v20);
    URL.appendingPathComponent(_:)();
    uint64_t v16 = URL.absoluteString.getter();
    uint64_t v17 = v22;
    char v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v23(v19, v20);
    v23(v18, v20);
  }
  v0[41] = v17;
  uint64_t v24 = (void *)v0[21];
  uint64_t v25 = v0[22];
  uint64_t v26 = v24[3];
  uint64_t v27 = sub_10000C728(v24, v26);
  v0[5] = v26;
  uint64_t v28 = sub_10002C2D8(v0 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v26 - 8) + 16))(v28, v27, v26);
  uint64_t v29 = (void *)swift_task_alloc();
  v0[42] = (uint64_t)v29;
  *uint64_t v29 = v0;
  v29[1] = sub_1002D0D04;
  char v30 = v1[1];
  return sub_1002CC6B4((uint64_t)(v0 + 2), v16, v17, v25, (uint64_t)&off_1006F28A0, v30);
}

uint64_t sub_1002D0D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void *)*v4;
  v5[43] = a1;
  v5[44] = a2;
  v5[45] = a3;
  v5[46] = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t v6 = sub_1002D1920;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v5 + 2));
    uint64_t v6 = sub_1002D0E4C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002D0E4C()
{
  uint64_t v80 = v0;
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (!v1) {
    goto LABEL_24;
  }
  uint64_t v2 = (void *)v1;
  id v3 = *(id *)(v0 + 360);
  id v4 = [v2 statusCode];
  if (v4 != (id)428)
  {
    if (v4 == (id)301)
    {
      defaultLogger()();
      unint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received 301 from server", v7, 2u);
        swift_slowDealloc();
      }
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      uint64_t v9 = *(void *)(v0 + 304);
      uint64_t v10 = *(void *)(v0 + 256);

      v8(v9, v10);
      NSString v11 = String._bridgeToObjectiveC()();
      id v12 = [v2 valueForHTTPHeaderField:v11];

      if (v12)
      {
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        *(void *)(v0 + 96) = v13;
        *(void *)(v0 + 104) = v15;
        sub_1000D5D70();
        Collection.nilIfEmpty.getter();
        swift_bridgeObjectRelease();
        unint64_t v16 = *(void *)(v0 + 56);
        if (v16)
        {
          uint64_t v17 = *(void *)(v0 + 48);
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v18 = Logger.logObject.getter();
          os_log_type_t v19 = static os_log_type_t.debug.getter();
          BOOL v20 = os_log_type_enabled(v18, v19);
          uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
          uint64_t v22 = *(void *)(v0 + 296);
          uint64_t v23 = *(void *)(v0 + 256);
          if (v20)
          {
            uint64_t v77 = *(void *)(v0 + 296);
            long long v76 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
            uint64_t v24 = (uint8_t *)swift_slowAlloc();
            uint64_t v79 = swift_slowAlloc();
            *(_DWORD *)uint64_t v24 = 136446210;
            swift_bridgeObjectRetain();
            *(void *)(v0 + 120) = sub_100110D58(v17, v16, &v79);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received 301 server response with location header %{public}s", v24, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v76(v77, v23);
          }
          else
          {
            swift_bridgeObjectRelease_n();

            v21(v22, v23);
          }
          sub_1002D46B0(v17, v16, *(unsigned char *)(v0 + 376));
          swift_bridgeObjectRelease();
        }
      }
      unint64_t v64 = *(void *)(v0 + 352);
      uint64_t v65 = *(void **)(v0 + 360);
      uint64_t v66 = *(void *)(v0 + 344);
      uint64_t v67 = *(void *)(v0 + 248);
      uint64_t v68 = *(void *)(v0 + 136);
      (*(void (**)(void, void, void))(*(void *)(v0 + 192) + 104))(*(void *)(v0 + 200), enum case for DIPError.Code.httpMovedPermanently(_:), *(void *)(v0 + 184));
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v69 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();

      sub_10000C5F4(v66, v64);
      sub_10000C6CC(v67, &qword_100720A68);
      *(void *)uint64_t v68 = v69;
      *(void *)(v68 + 8) = 0;
      *(unsigned char *)(v68 + 16) = 1;
      uint64_t v49 = (unsigned int *)&enum case for DIPRetrier.RetryResult.retry<A>(_:);
      goto LABEL_28;
    }
    NSString v50 = String._bridgeToObjectiveC()();
    id v51 = [v2 valueForHTTPHeaderField:v50];

    if (v51)
    {
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      defaultLogger()();
      swift_bridgeObjectRetain_n();
      Swift::String v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.debug.getter();
      BOOL v57 = os_log_type_enabled(v55, v56);
      uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      uint64_t v59 = *(void *)(v0 + 272);
      uint64_t v60 = *(void *)(v0 + 256);
      if (v57)
      {
        long long v75 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
        char v61 = (uint8_t *)swift_slowAlloc();
        uint64_t v79 = swift_slowAlloc();
        *(_DWORD *)char v61 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 112) = sub_100110D58(v52, v54, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Content-Location header set to %{public}s", v61, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v75(v59, v60);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        v58(v59, v60);
      }
      sub_1002D46B0(v52, v54, *(unsigned char *)(v0 + 376));
      swift_bridgeObjectRelease();
    }

LABEL_24:
    uint64_t v62 = *(void *)(v0 + 360);
    long long v78 = *(_OWORD *)(v0 + 344);
    uint64_t v63 = *(void *)(v0 + 136);
    sub_10000C6CC(*(void *)(v0 + 248), &qword_100720A68);
    *(_OWORD *)uint64_t v63 = v78;
    *(void *)(v63 + 16) = v62;
    uint64_t v49 = (unsigned int *)&enum case for DIPRetrier.RetryResult.success<A>(_:);
    goto LABEL_28;
  }
  defaultLogger()();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Received 428 from server", v27, 2u);
    swift_slowDealloc();
  }
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  uint64_t v29 = *(void *)(v0 + 288);
  uint64_t v30 = *(void *)(v0 + 256);

  v28(v29, v30);
  NSString v31 = String._bridgeToObjectiveC()();
  id v32 = [v2 valueForHTTPHeaderField:v31];

  if (v32)
  {
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    *(void *)(v0 + 80) = v33;
    *(void *)(v0 + 88) = v35;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void *)(v0 + 72);
    swift_bridgeObjectRelease();
    if (v36)
    {
      defaultLogger()();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        id v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Server indiciated registration is required", v39, 2u);
        swift_slowDealloc();
      }
      Swift::String v40 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      uint64_t v41 = *(void *)(v0 + 280);
      uint64_t v42 = *(void *)(v0 + 256);

      v40(v41, v42);
      type metadata accessor for DaemonAnalytics();
      static DaemonAnalytics.sendPasskitRegistrationEvent(success:preconditionFailed:)();
    }
  }
  unint64_t v43 = *(void *)(v0 + 352);
  uint64_t v44 = *(void **)(v0 + 360);
  uint64_t v45 = *(void *)(v0 + 344);
  uint64_t v46 = *(void *)(v0 + 248);
  Swift::String v47 = *(uint64_t **)(v0 + 136);
  (*(void (**)(void, void, void))(*(void *)(v0 + 192) + 104))(*(void *)(v0 + 200), enum case for DIPError.Code.httpPreconditionRequired(_:), *(void *)(v0 + 184));
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002D54A0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v48 = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();

  sub_10000C5F4(v45, v43);
  sub_10000C6CC(v46, &qword_100720A68);
  *Swift::String v47 = v48;
  uint64_t v49 = (unsigned int *)&enum case for DIPRetrier.RetryResult.failure<A>(_:);
LABEL_28:
  uint64_t v70 = *(void *)(v0 + 136);
  uint64_t v71 = *v49;
  uint64_t v72 = sub_100007764(&qword_100729BB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 104))(v70, v71, v72);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v73 = *(uint64_t (**)(void))(v0 + 8);
  return v73();
}

uint64_t sub_1002D1920()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = (void *)v0[17];
  sub_10000C6CC(v0[31], &qword_100720A68);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  *uint64_t v2 = v1;
  uint64_t v3 = v0[17];
  uint64_t v4 = enum case for DIPRetrier.RetryResult.failure<A>(_:);
  uint64_t v5 = sub_100007764(&qword_100729BB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104))(v3, v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1002D1A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[10] = a5;
  v6[11] = v5;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[12] = v7;
  v6[13] = *(void *)(v7 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  return _swift_task_switch(sub_1002D1BB0, 0, 0);
}

uint64_t sub_1002D1BB0()
{
  sub_1002B7940(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void **)(v0 + 72), *(void *)(v0 + 80), 1);
  *(void *)(v0 + 152) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 144);
    swift_getErrorValue();
    Error.dipErrorCode.getter();
    uint64_t v3 = type metadata accessor for DIPError.Code();
    uint64_t v4 = *(void *)(v3 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    {
LABEL_3:
      sub_10000C6CC(*(void *)(v0 + 144), &qword_100723600);
      goto LABEL_4;
    }
    uint64_t v8 = *(void *)(v0 + 136);
    sub_100048D6C(*(void *)(v0 + 144), v8, &qword_100723600);
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v8, v3);
    if (v9 != enum case for DIPError.Code.topekaSharedVerifiedClaimNeedsRefresh(_:)
      && v9 != enum case for DIPError.Code.topekaSharedVerifiedClaimExpired(_:))
    {
      if (v9 == enum case for DIPError.Code.topekaSelfHealDeleteCurrentClaim(_:))
      {
        defaultLogger()();
        os_log_type_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Received self heal delete current claim response code from server", v28, 2u);
          swift_slowDealloc();
        }
        uint64_t v29 = *(void *)(v0 + 128);
        uint64_t v30 = *(void *)(v0 + 96);
        uint64_t v31 = *(void *)(v0 + 104);
        uint64_t v32 = *(void *)(v0 + 88);

        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
        uint64_t v33 = v32 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer;
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        *(void *)(v0 + 160) = Strong;
        if (!Strong) {
          goto LABEL_3;
        }
        uint64_t v35 = *(void *)(v33 + 8);
        uint64_t ObjectType = swift_getObjectType();
        id v51 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v35 + 8) + **(int **)(v35 + 8));
        uint64_t v37 = (void *)swift_task_alloc();
        *(void *)(v0 + 168) = v37;
        *uint64_t v37 = v0;
        v37[1] = sub_1002D2254;
        uint64_t v23 = ObjectType;
        uint64_t v24 = v35;
        uint64_t v25 = v51;
        return v25(v23, v24);
      }
      if (v9 != enum case for DIPError.Code.topekaSelfHealDeleteAllClaimsForCurrentProvider(_:))
      {
        if (v9 != enum case for DIPError.Code.topekaSelfHealDeleteEverything(_:))
        {
          (*(void (**)(void, uint64_t))(v4 + 8))(*(void *)(v0 + 136), v3);
          goto LABEL_3;
        }
        defaultLogger()();
        os_log_type_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v38, v39))
        {
          Swift::String v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)Swift::String v40 = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "Received self heal delete everything response code from server", v40, 2u);
          swift_slowDealloc();
        }
        uint64_t v42 = *(void *)(v0 + 104);
        uint64_t v41 = *(void *)(v0 + 112);
        uint64_t v44 = *(void *)(v0 + 88);
        uint64_t v43 = *(void *)(v0 + 96);

        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
        uint64_t v45 = v44 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer;
        uint64_t v46 = swift_unknownObjectWeakLoadStrong();
        *(void *)(v0 + 192) = v46;
        if (!v46) {
          goto LABEL_3;
        }
        uint64_t v47 = *(void *)(v45 + 8);
        uint64_t v48 = swift_getObjectType();
        uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v47 + 24) + **(int **)(v47 + 24));
        uint64_t v49 = (void *)swift_task_alloc();
        *(void *)(v0 + 200) = v49;
        *uint64_t v49 = v0;
        v49[1] = sub_1002D25C8;
        uint64_t v23 = v48;
        uint64_t v24 = v47;
        uint64_t v25 = v52;
        return v25(v23, v24);
      }
    }
    sub_10000C6CC(*(void *)(v0 + 144), &qword_100723600);
    defaultLogger()();
    NSString v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received self heal delete all claims for current provider response code from server", v13, 2u);
      swift_slowDealloc();
    }
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v17 = *(void *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    uint64_t v18 = v17 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer;
    uint64_t v19 = swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 176) = v19;
    if (!v19) {
      goto LABEL_4;
    }
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = swift_getObjectType();
    NSString v50 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v20 + 16) + **(int **)(v20 + 16));
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1002D240C;
    uint64_t v23 = v21;
    uint64_t v24 = v20;
    uint64_t v25 = v50;
    return v25(v23, v24);
  }
LABEL_4:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 152);
  return v5(v6);
}

uint64_t sub_1002D2254()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 160);
  swift_task_dealloc();

  return _swift_task_switch(sub_1002D2368, 0, 0);
}

uint64_t sub_1002D2368()
{
  sub_10000C6CC(v0[18], &qword_100723600);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[19];
  return v1(v2);
}

uint64_t sub_1002D240C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 176);
  uint64_t v6 = *v0;
  swift_task_dealloc();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v6 + 8);
  uint64_t v4 = *(void *)(v1 + 152);
  return v3(v4);
}

uint64_t sub_1002D25C8()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 192);
  swift_task_dealloc();

  return _swift_task_switch(sub_1002D5604, 0, 0);
}

uint64_t sub_1002D26DC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v60 = *(void *)(v3 - 8);
  uint64_t v61 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v54 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v53 - v7;
  __chkstk_darwin(v6);
  Swift::String v55 = (char *)&v53 - v9;
  uint64_t v10 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v10 - 8);
  os_log_type_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  BOOL v57 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v58 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v53 - v17);
  LODWORD(v59) = a1;
  if (a1) {
    uint64_t v18 = 0xD000000000000013;
  }
  else {
    uint64_t v18 = 0xD000000000000010;
  }
  if (a1) {
    unint64_t v19 = 0x80000001006474D0;
  }
  else {
    unint64_t v19 = 0x80000001006474B0;
  }
  id v20 = [self standardUserDefaults];
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 stringForKey:v21];

  if (!v22)
  {
    uint64_t v56 = v13;
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0)
    {
LABEL_21:
      if (qword_10071F4B0 != -1) {
        swift_once();
      }
      uint64_t v44 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
      uint64_t v45 = (uint64_t)&v44[4];
      uint64_t v46 = v44 + 52;
      os_unfair_lock_lock(v44 + 52);
      sub_1000262B4(v45, v66);
      os_unfair_lock_unlock(v46);
      sub_100030A10((uint64_t)v66, (uint64_t)v64);
      sub_1000262D0((uint64_t)v66);
      sub_10000C728(v64, v65);
      sub_1001418CC((uint64_t)v67);
      sub_1000BEA14((uint64_t)v67, (uint64_t)v68, &qword_100722350);
      if (sub_100044CCC((uint64_t)v68) == 1)
      {
LABEL_24:
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v64);
        return v14[7](v62, 1, 1, v56);
      }
      memcpy(v69, v68, sizeof(v69));
      memcpy(v70, &v69[4], 0x169uLL);
      sub_100044CE4((uint64_t)v70);
      sub_100044D90(v67);
      uint64_t v34 = v70[4];
      unint64_t v33 = v70[5];
      swift_bridgeObjectRetain();
      sub_100044F4C((uint64_t)v70);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v64);
      goto LABEL_27;
    }
LABEL_12:
    if (qword_10071F4B0 != -1) {
      swift_once();
    }
    uint64_t v30 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
    uint64_t v31 = (uint64_t)&v30[4];
    uint64_t v32 = v30 + 52;
    os_unfair_lock_lock(v30 + 52);
    sub_1000262B4(v31, v66);
    os_unfair_lock_unlock(v32);
    sub_100030A10((uint64_t)v66, (uint64_t)v64);
    sub_1000262D0((uint64_t)v66);
    sub_10000C728(v64, v65);
    sub_1001418CC((uint64_t)v67);
    sub_1000BEA14((uint64_t)v67, (uint64_t)v68, &qword_100722350);
    if (sub_100044CCC((uint64_t)v68) == 1) {
      goto LABEL_24;
    }
    memcpy(v69, v68, sizeof(v69));
    memcpy(v70, &v69[4], 0x169uLL);
    sub_100044CE4((uint64_t)v70);
    sub_100044D90(v67);
    sub_1000BEA14((uint64_t)&v70[6], (uint64_t)v71, (uint64_t *)&unk_100722630);
    sub_1001061B8((uint64_t)v71);
    sub_100044F4C((uint64_t)v70);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v64);
    sub_1000BEA14((uint64_t)v71, (uint64_t)v66, (uint64_t *)&unk_100722630);
    unint64_t v33 = *((void *)&v66[0] + 1);
    if (!*((void *)&v66[0] + 1)) {
      return v14[7](v62, 1, 1, v56);
    }
    uint64_t v34 = *(void *)&v66[0];
LABEL_27:
    uint64_t v48 = v54;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      id v51 = (uint8_t *)swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)id v51 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v63 = sub_100110D58(v34, v33, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Using Topeka base url from config: %{public}s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v60 + 8))(v48, v61);
    URL.init(string:)();
    return swift_bridgeObjectRelease();
  }
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v25 = v24;

  sub_10043E3CC(v23, v25, v12);
  uint64_t v26 = v13;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v14[6])(v12, 1, v13) == 1)
  {
    uint64_t v58 = v14;
    uint64_t v56 = v13;
    swift_bridgeObjectRelease();
    sub_10000C6CC((uint64_t)v12, &qword_100720A68);
    defaultLogger()();
    swift_bridgeObjectRetain();
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446210;
      swift_bridgeObjectRetain();
      v68[0] = sub_100110D58(v23, v25, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not using Topeka base url %{public}s from user defaults because it is not valid", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v60 + 8))(v8, v61);
    uint64_t v14 = v58;
    if ((v59 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  uint64_t v35 = (char *)v58;
  uint64_t v59 = v14[4];
  ((void (*)(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t), char *, uint64_t))v59)(v58, v12, v13);
  uint64_t v36 = v55;
  defaultLogger()();
  uint64_t v37 = v57;
  ((void (*)(char *, char *, uint64_t))v14[2])(v57, v35, v26);
  swift_bridgeObjectRetain();
  os_log_type_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    unint64_t v54 = (char *)swift_slowAlloc();
    v69[0] = (uint64_t)v54;
    *(_DWORD *)uint64_t v40 = 136315394;
    os_log_t v53 = v38;
    swift_bridgeObjectRetain();
    v68[0] = sub_100110D58(v18, v19, v69);
    uint64_t v56 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v40 + 12) = 2082;
    uint64_t v41 = v57;
    uint64_t v42 = URL.absoluteString.getter();
    v68[0] = sub_100110D58(v42, v43, v69);
    uint64_t v26 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v14[1])(v41, v26);
    os_log_type_t v38 = v53;
    _os_log_impl((void *)&_mh_execute_header, v53, v39, "Using Topeka base url from defaults %s: %{public}s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    ((void (*)(char *, uint64_t))v14[1])(v37, v26);
  }

  (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v61);
  uint64_t v52 = v62;
  ((void (*)(uint64_t, uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))v59)(v62, v58, v26);
  return v14[7](v52, 0, 1, v26);
}

uint64_t sub_1002D3150()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_redirectRetrier;
  uint64_t v2 = type metadata accessor for DIPRetrier();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_authRetrier, v2);
  v3(v0 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_retrier, v2);
  uint64_t v4 = v0 + OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer;

  return sub_100025D08(v4);
}

id sub_1002D3218()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DIPTopekaWebService();
  return [super dealloc];
}

uint64_t sub_1002D331C()
{
  return type metadata accessor for DIPTopekaWebService();
}

uint64_t type metadata accessor for DIPTopekaWebService()
{
  uint64_t result = qword_100729AF8;
  if (!qword_100729AF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002D3370()
{
  uint64_t result = type metadata accessor for DIPRetrier();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002D340C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_100300E48();
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v10;
  uint64_t v63 = v9;
  uint64_t v14 = (void *)*a5;
  unint64_t v16 = sub_100590548(v7, v8);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      uint64_t v23 = (void *)*a5;
      if (v15) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_10016A364();
      uint64_t v23 = (void *)*a5;
      if (v20) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v23[(v16 >> 6) + 8] |= 1 << v16;
    os_log_type_t v28 = (uint64_t *)(v23[6] + 16 * v16);
    *os_log_type_t v28 = v11;
    v28[1] = v12;
    uint64_t v29 = (void *)(v23[7] + 16 * v16);
    *uint64_t v29 = v63;
    v29[1] = v13;
    uint64_t v30 = v23[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v23[2] = v32;
LABEL_13:
    uint64_t v33 = sub_100300E48();
    if (v34)
    {
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      uint64_t v39 = v35;
      uint64_t v40 = v36;
      do
      {
        uint64_t v49 = (void *)*a5;
        unint64_t v50 = sub_100590548(v37, v38);
        uint64_t v52 = v49[2];
        BOOL v53 = (v51 & 1) == 0;
        BOOL v31 = __OFADD__(v52, v53);
        uint64_t v54 = v52 + v53;
        if (v31) {
          goto LABEL_24;
        }
        char v55 = v51;
        if (v49[3] < v54)
        {
          sub_100164294(v54, 1);
          unint64_t v50 = sub_100590548(v37, v38);
          if ((v55 & 1) != (v56 & 1)) {
            goto LABEL_26;
          }
        }
        BOOL v57 = (void *)*a5;
        if (v55)
        {
          uint64_t v41 = 16 * v50;
          uint64_t v42 = (uint64_t *)(v57[7] + 16 * v50);
          uint64_t v44 = *v42;
          uint64_t v43 = v42[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v45 = (void *)(v57[7] + v41);
          swift_bridgeObjectRelease();
          *uint64_t v45 = v44;
          v45[1] = v43;
        }
        else
        {
          v57[(v50 >> 6) + 8] |= 1 << v50;
          uint64_t v58 = (uint64_t *)(v57[6] + 16 * v50);
          *uint64_t v58 = v37;
          v58[1] = v38;
          uint64_t v59 = (void *)(v57[7] + 16 * v50);
          *uint64_t v59 = v39;
          v59[1] = v40;
          uint64_t v60 = v57[2];
          BOOL v31 = __OFADD__(v60, 1);
          uint64_t v61 = v60 + 1;
          if (v31) {
            goto LABEL_25;
          }
          v57[2] = v61;
        }
        uint64_t v37 = sub_100300E48();
        uint64_t v38 = v46;
        uint64_t v39 = v47;
        uint64_t v40 = v48;
      }
      while (v46);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100130AE4();
    return swift_release();
  }
  sub_100164294(v19, a4 & 1);
  unint64_t v21 = sub_100590548(v11, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    uint64_t v23 = (void *)*a5;
    if ((v20 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    unint64_t v24 = (uint64_t *)(v23[7] + 16 * v16);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v27 = (void *)(v23[7] + 16 * v16);
    swift_bridgeObjectRelease();
    *os_log_type_t v27 = v26;
    v27[1] = v25;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D375C(uint64_t a1, unint64_t a2)
{
  sub_10002CEB0(a1, a2);
  sub_10014CDBC(a1, a2);
  sub_10000C5F4(a1, a2);
  uint64_t v4 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v4;
}

uint64_t sub_1002D37D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1002D3810(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t result = (uint64_t)sub_1002D3908(v9, v15, a4);
  if (v4) {
    return v16;
  }
  return result;
}

uint64_t sub_1002D38C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void *sub_1002D3908(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_1002D395C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

char *sub_1002D3994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v8 = __chkstk_darwin(v7);
  BOOL v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v36 - v11);
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v13 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v14 = (uint64_t)&v13[4];
  uint64_t v15 = v13 + 52;
  os_unfair_lock_lock(v13 + 52);
  sub_1000262B4(v14, v44);
  os_unfair_lock_unlock(v15);
  uint64_t v16 = v48;
  sub_10003BDD0((uint64_t)v48);
  uint64_t v17 = sub_1000262D0((uint64_t)v44);
  if (v16)
  {
    BOOL v18 = (char *)v16(v17);
    sub_10003BEDC((uint64_t)v16);
  }
  else
  {
    uint64_t v19 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
    uint64_t v20 = (uint64_t)&v19[4];
    unint64_t v21 = v19 + 52;
    os_unfair_lock_lock(v19 + 52);
    sub_1000262B4(v20, v42);
    os_unfair_lock_unlock(v21);
    sub_100030A10((uint64_t)v42, (uint64_t)v41);
    sub_1000262D0((uint64_t)v42);
    sub_10000C728(v41, v41[3]);
    sub_1001418CC((uint64_t)v43);
    sub_1000BEA14((uint64_t)v43, (uint64_t)v44, &qword_100722350);
    if (sub_100044CCC((uint64_t)v44) == 1)
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v41);
      if (qword_10071F5E8 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_1000443D4((uint64_t)v7, (uint64_t)qword_100760888);
      sub_1002D5548(v22, (uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
    }
    else
    {
      uint64_t v23 = v45;
      uint64_t v24 = v46;
      uint64_t v25 = v47;
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v41);
      uint64_t v26 = (void *)((char *)v12 + v7[6]);
      sub_100044D90(v43);
      *uint64_t v26 = v25;
      uint64_t v27 = enum case for DIPBackoffStrategy.exponential(_:);
      uint64_t v28 = type metadata accessor for DIPBackoffStrategy();
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v26, v27, v28);
      *uint64_t v12 = v23;
      v12[1] = v24;
      *((unsigned char *)v12 + v7[7]) = 0;
      *((unsigned char *)v12 + v7[8]) = 1;
      *((unsigned char *)v12 + v7[9]) = 0;
      uint64_t v29 = (void *)((char *)v12 + v7[10]);
      uint64_t v30 = v37;
      *uint64_t v29 = v36;
      v29[1] = v30;
      swift_bridgeObjectRetain();
    }
    sub_1002D5548((uint64_t)v12, (uint64_t)v10, type metadata accessor for DIPHTTPSession.Configuration);
    UUID.init()();
    uint64_t v31 = UUID.uuidString.getter();
    uint64_t v33 = v32;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v4);
    id v34 = objc_allocWithZone((Class)type metadata accessor for DIPTopekaWebService());
    BOOL v18 = (char *)sub_1002B92C4(v31, v33, (uint64_t)v10);
    *(void *)&v18[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer + 8] = v39;
    swift_unknownObjectWeakAssign();
    sub_1002D54E8((uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
  }
  return v18;
}

uint64_t sub_1002D3DB0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  char v10 = *(unsigned char *)(v1 + 64);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10000C494;
  return sub_1002D075C(a1, v4, v5, v6, v7, v8, v9, v10);
}

void *sub_1002D3E90(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  unint64_t v7 = a1[20];
  uint64_t v8 = a1[19];
  uint64_t v5 = a1[22];
  uint64_t v6 = a1[21];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000D79D0(v8, v7, v6, v5);
  return a1;
}

uint64_t sub_1002D3F70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002D4020(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002D40EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002D41A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002D4260@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DeviceInformationProvider();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v10 = a2;
  }
  else
  {
    type metadata accessor for DIPAccountManager();
    static DIPAccountManager.sharedInstance.getter();
    sub_10000C728(v18, v18[3]);
    a1 = dispatch thunk of DIPAccountManagerProtocol.appleAuthHeader(_:)();
    uint64_t v10 = v11;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v18);
  }
  swift_bridgeObjectRetain();
  DeviceInformationProvider.init()();
  uint64_t v12 = DeviceInformationProvider.uniqueDeviceID.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (qword_10071F5F8 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1007608B8;
  uint64_t result = swift_bridgeObjectRetain();
  *a3 = a1;
  a3[1] = v10;
  a3[2] = v12;
  a3[3] = v14;
  a3[4] = v15;
  a3[5] = result;
  return result;
}

unint64_t sub_1002D4404()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self standardUserDefaults];
  v5._unint64_t object = (void *)0x8000000100647B70;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  Swift::String_optional v6 = NSUserDefaults.internalString(forKey:)(v5);
  uint64_t countAndFlagsBits = v6.value._countAndFlagsBits;

  if (!v6.value._object) {
    return 0;
  }
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v15 = v6.value._countAndFlagsBits;
    uint64_t v17 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_100110D58(v15, (unint64_t)v6.value._object, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Using Liveness-Config test header: %s", v10, 0xCu);
    swift_arrayDestroy();
    uint64_t countAndFlagsBits = v15;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100007764(&qword_100720AC8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100610730;
  *(void *)(inited + 32) = 0xD000000000000020;
  *(void *)(inited + 40) = 0x8000000100647B90;
  *(void *)(inited + 48) = countAndFlagsBits;
  *(void *)(inited + 56) = v6.value._object;
  return sub_10015CF20(inited);
}

void sub_1002D46B0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v48 - v11;
  __chkstk_darwin(v10);
  uint64_t v52 = (char *)&v48 - v13;
  uint64_t v14 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v48 - v22;
  unint64_t v24 = 0xD000000000000010;
  if (a3) {
    unint64_t v24 = 0xD000000000000013;
  }
  unint64_t v53 = v24;
  if (a3) {
    unint64_t v25 = 0x80000001006474D0;
  }
  else {
    unint64_t v25 = 0x80000001006474B0;
  }
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_10043E3CC(a1, a2, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      swift_bridgeObjectRelease();
      sub_10000C6CC((uint64_t)v16, &qword_100720A68);
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v56 = sub_100110D58(a1, a2, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Not setting Topeka base URL to %{public}s because it is not a valid HTTPS url", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v55);
    }
    else
    {
      swift_bridgeObjectRelease();
      id v34 = v23;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
      uint64_t v35 = v52;
      defaultLogger()();
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v34, v17);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = swift_slowAlloc();
        unint64_t v50 = v25;
        uint64_t v39 = (uint8_t *)v38;
        uint64_t v49 = swift_slowAlloc();
        uint64_t v57 = v49;
        *(_DWORD *)uint64_t v39 = 136446210;
        uint64_t v51 = (uint64_t)(v39 + 4);
        uint64_t v40 = URL.absoluteString.getter();
        uint64_t v56 = sub_100110D58(v40, v41, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v42 = *(void (**)(char *, uint64_t))(v18 + 8);
        uint64_t v51 = (v18 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v42(v21, v17);
        os_log_type_t v43 = v37;
        uint64_t v44 = v42;
        _os_log_impl((void *)&_mh_execute_header, v36, v43, "Setting Topeka base URL to %{public}s", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v44 = *(void (**)(char *, uint64_t))(v18 + 8);
        uint64_t v51 = (v18 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v44(v21, v17);
      }

      (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v55);
      id v45 = [self standardUserDefaults];
      URL.absoluteString.getter();
      NSString v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v45 setObject:v46 forKey:v47];

      v44(v34, v17);
    }
  }
  else
  {
    defaultLogger()();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Clearing Topeka base URL", v31, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v54 + 8))(v9, v55);
    id v32 = [self standardUserDefaults];
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v32 removeObjectForKey:v33];
  }
}

unint64_t sub_1002D4DB4()
{
  unint64_t result = qword_100729BC0;
  if (!qword_100729BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729BC0);
  }
  return result;
}

unint64_t sub_1002D4E08()
{
  unint64_t result = qword_100729BC8;
  if (!qword_100729BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729BC8);
  }
  return result;
}

unint64_t sub_1002D4E5C()
{
  unint64_t result = qword_100729BD0;
  if (!qword_100729BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729BD0);
  }
  return result;
}

unint64_t sub_1002D4EB0()
{
  unint64_t result = qword_100729C00;
  if (!qword_100729C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729C00);
  }
  return result;
}

unint64_t sub_1002D4F04()
{
  unint64_t result = qword_100729C08;
  if (!qword_100729C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729C08);
  }
  return result;
}

uint64_t sub_1002D4F58()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

unint64_t sub_1002D4FA8()
{
  unint64_t result = qword_100729C20;
  if (!qword_100729C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729C20);
  }
  return result;
}

uint64_t sub_1002D4FFC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 176, 7);
}

uint64_t sub_1002D5080(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000AAD28(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1002D514C(void *a1)
{
  uint64_t v2 = a1[17];
  uint64_t v3 = a1[18];
  uint64_t v5 = a1[19];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1002D5210(v2, v3, v5);
  return a1;
}

uint64_t sub_1002D5210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002D5224(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  os_log_type_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *os_log_type_t v9 = v2;
  v9[1] = sub_100025D64;
  return sub_1002BE5C4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1002D52EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000AAD28(v2, v3);
  return a1;
}

uint64_t *sub_1002D5378(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1002D53B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 80))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1002D5414()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1002D54A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002D54E8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002D5548(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1002D55B0()
{
  unint64_t result = qword_100729C88;
  if (!qword_100729C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729C88);
  }
  return result;
}

ValueMetadata *type metadata accessor for Certificate()
{
  return &type metadata for Certificate;
}

uint64_t sub_1002D5618(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764(&qword_100729CA8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1002D5AF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  sub_10005D478();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1002D5768()
{
  return 1635017060;
}

uint64_t sub_1002D5778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1002D5800(uint64_t a1)
{
  unint64_t v2 = sub_1002D5AF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002D583C(uint64_t a1)
{
  unint64_t v2 = sub_1002D5AF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1002D5878@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002D5988(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1002D58A4(void *a1)
{
  return sub_1002D5618(a1, *v1, v1[1]);
}

void sub_1002D58C0()
{
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  SecCertificateRef v1 = SecCertificateCreateWithData(kCFAllocatorDefault, isa);

  if (v1)
  {
    type metadata accessor for SecCertificate(0);
    String.init<A>(describing:)();
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_1002D5934()
{
  unint64_t result = qword_100729C90;
  if (!qword_100729C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729C90);
  }
  return result;
}

void *sub_1002D5988(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100729C98);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = sub_10000C728(a1, a1[3]);
  sub_1002D5AF8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10005D424();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    char v7 = v9;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1002D5AF8()
{
  unint64_t result = qword_100729CA0;
  if (!qword_100729CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729CA0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Certificate.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002D5BE8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Certificate.CodingKeys()
{
  return &type metadata for Certificate.CodingKeys;
}

unint64_t sub_1002D5C24()
{
  unint64_t result = qword_100729CB0;
  if (!qword_100729CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729CB0);
  }
  return result;
}

unint64_t sub_1002D5C7C()
{
  unint64_t result = qword_100729CB8;
  if (!qword_100729CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729CB8);
  }
  return result;
}

unint64_t sub_1002D5CD4()
{
  unint64_t result = qword_100729CC0;
  if (!qword_100729CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729CC0);
  }
  return result;
}

CLLocationAccuracy sub_1002D5D28()
{
  CLLocationAccuracy result = kCLLocationAccuracyHundredMeters * 3.0;
  *(double *)&qword_100760370 = kCLLocationAccuracyHundredMeters * 3.0;
  return result;
}

CLLocationAccuracy sub_1002D5D48()
{
  CLLocationAccuracy result = kCLLocationAccuracyHundredMeters;
  qword_100760378 = *(void *)&kCLLocationAccuracyHundredMeters;
  return result;
}

uint64_t sub_1002D5DC0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 | a3)
  {
    uint64_t v15 = *(NSObject **)&v3[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_serviceQueue];
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = v3;
    v16[3] = a3;
    v16[4] = a1;
    v16[5] = a2;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = sub_1002D80EC;
    *(void *)(v17 + 24) = v16;
    aBlock[4] = sub_10020AE08;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100032314;
    aBlock[3] = &unk_1006FCC48;
    uint64_t v18 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v19 = v3;
    id v20 = (id)a3;
    swift_release();
    dispatch_sync(v15, v18);
    _Block_release(v18);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  else
  {
    defaultLogger()();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "skipping init as no effective bundles provided", v13, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

void sub_1002D604C(char *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager;
  if (!*(void *)&a1[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager])
  {
    uint64_t v36 = v9;
    if (a2)
    {
      id v13 = [a2 bundlePath];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      if (a4) {
        uint64_t v14 = a3;
      }
      else {
        uint64_t v14 = 0;
      }
      if (a4) {
        unint64_t v15 = a4;
      }
      else {
        unint64_t v15 = 0xE000000000000000;
      }
      unint64_t v37 = 0xD000000000000020;
      unint64_t v38 = 0x8000000100648220;
      unint64_t v16 = v15;
      String.append(_:)(*(Swift::String *)&v14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v17 = *(void **)&a1[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_serviceQueue];
    id v18 = objc_allocWithZone((Class)CLLocationManager);
    swift_bridgeObjectRetain();
    id v19 = v17;
    id v20 = a1;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [v18 initWithEffectiveBundlePath:v21 delegate:v20 onQueue:v19];

    if (v22)
    {
      id v23 = v22;
      if ([v23 locationServicesAvailable])
      {
        [v23 requestWhenInUseAuthorization];
        if (qword_10071F500 != -1) {
          swift_once();
        }
        [v23 setDistanceFilter:*(double *)&qword_100760378];
        if (qword_10071F4F8 != -1) {
          swift_once();
        }
        [v23 setDesiredAccuracy:*(double *)&qword_100760370];
        unint64_t v24 = self;
        NSString v25 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v26 = [v24 authorizationStatusForBundlePath:v25];

        uint64_t v35 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus;
        *(_DWORD *)&v20[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus] = v26;
        defaultLogger()();
        os_log_type_t v27 = v20;
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v28, v29))
        {
          os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
          id v34 = v27;
          uint64_t v31 = v30;
          *(_DWORD *)os_log_type_t v30 = 67240192;
          LODWORD(v37) = *(_DWORD *)&v20[v35];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v28, v29, "init Authorization status is %{public}d", v31, 8u);
          swift_slowDealloc();
        }
        else
        {

          uint64_t v28 = v27;
        }

        (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v8);
        [v23 requestLocation];

        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease();
LABEL_23:
    id v32 = *(void **)&a1[v12];
    *(void *)&a1[v12] = v22;
  }
}

id sub_1002D6448()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager;
  int v3 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager];
  if (!v3) {
    goto LABEL_9;
  }
  [v3 setDelegate:0];
  if ([self isMainThread])
  {
    unsigned int v4 = *(void **)&v1[v2];
    if (v4)
    {
      [v4 stopUpdatingLocation];
      uint64_t v5 = *(void **)&v1[v2];
LABEL_8:
      *(void *)&v1[v2] = 0;

LABEL_9:
      uint64_t v8 = 0;
      goto LABEL_10;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  uint64_t v6 = static OS_dispatch_queue.main.getter();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = sub_1002D8800;
  *(void *)(v7 + 16) = sub_1002D8800;
  *(void *)(v7 + 24) = v2;
  v13[4] = sub_10020AE08;
  v13[5] = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100032314;
  v13[3] = &unk_1006FCCC0;
  uint64_t v9 = _Block_copy(v13);
  uint64_t v10 = v1;
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v6, v9);

  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v6)
  {
    __break(1u);
    goto LABEL_7;
  }
LABEL_10:
  sub_10003BEDC((uint64_t)v8);
  uint64_t v11 = (objc_class *)type metadata accessor for DIPLocationHelper();
  v14.receiver = v1;
  v14.super_class = v11;
  return [super dealloc];
}

uint64_t sub_1002D66D4()
{
  return sub_1002D6C30((uint64_t)&unk_1006FCB68, (uint64_t)sub_1002D8080, (uint64_t)&unk_1006FCB80);
}

uint64_t sub_1002D66FC(char *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v41 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  objc_super v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v38 = a1;
  unint64_t v15 = *(void **)&a1[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location];
  if (!v15) {
    goto LABEL_3;
  }
  id v16 = v15;
  uint64_t v37 = v8;
  uint64_t v17 = v7;
  uint64_t v18 = v5;
  uint64_t v19 = v3;
  uint64_t v20 = v2;
  id v21 = v16;
  id v22 = [v16 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Date.timeIntervalSinceNow.getter();
  double v24 = v23;

  uint64_t v2 = v20;
  uint64_t v3 = v19;
  uint64_t v5 = v18;
  uint64_t v7 = v17;
  uint64_t v8 = v37;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v24 <= -600.0)
  {
LABEL_3:
    defaultLogger()();
    unsigned int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "requesting location", v28, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_100025C28(0, (unint64_t *)&qword_1007208E0);
    os_log_type_t v29 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v30 = swift_allocObject();
    uint64_t v31 = v38;
    *(void *)(v30 + 16) = v38;
    aBlock[4] = sub_1002D8088;
    aBlock[5] = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100593800;
    aBlock[3] = &unk_1006FCBD0;
    id v32 = _Block_copy(aBlock);
    id v33 = v31;
    swift_release();
    id v34 = v39;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1002D7FE0((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100007764((uint64_t *)&unk_1007208F0);
    sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
    uint64_t v35 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v35, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v34, v5);
  }
  return result;
}

uint64_t sub_1002D6C08()
{
  return sub_1002D6C30((uint64_t)&unk_1006FCB18, (uint64_t)sub_1002D8078, (uint64_t)&unk_1006FCB30);
}

uint64_t sub_1002D6C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(void *)&v3[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_serviceQueue];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = a3;
  unint64_t v15 = _Block_copy(aBlock);
  id v16 = v3;
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_1002D7FE0((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

void sub_1002D6ECC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager);
  if (v1)
  {
    id v2 = v1;
    sub_1002D7CBC(v2);
  }
}

id sub_1002D6F24(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "stop updating location", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return [a1 stopUpdatingLocation];
}

uint64_t sub_1002D7074()
{
  uint64_t v10 = 0;
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_serviceQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = &v10;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1002D8060;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000E4EA0;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100032314;
  aBlock[3] = &unk_1006FCAE0;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v10;
    swift_release();
    return v8;
  }
  return result;
}

void sub_1002D71D8(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v28 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - v12;
  defaultLogger()();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    id v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "attempting to get location", v16, 2u);
    swift_slowDealloc();
  }

  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v13, v4);
  if ((*(_DWORD *)(a1 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus) - 3) >= 2)
  {
    defaultLogger()();
    NSString v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No location authorization, returning nothing", v27, 2u);
      swift_slowDealloc();
    }

    v17(v11, v4);
  }
  else
  {
    uint64_t v18 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location;
    uint64_t v19 = *(void **)(a1 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location);
    if (v19)
    {
      defaultLogger()();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        id v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "got location update from delegate", v22, 2u);
        swift_slowDealloc();
      }

      v17(v8, v4);
      uint64_t v19 = *(void **)(a1 + v18);
    }
    double v23 = *a2;
    *a2 = v19;
    id v24 = v19;
  }
}

unint64_t sub_1002D74BC(void *a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v32 - v11;
  defaultLogger()();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Got a location update", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = *(void (**)(void, void))(v7 + 8);
  uint64_t v17 = v7 + 8;
  id v16 = v18;
  v18(v12, v6);
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v35 = v6;
    uint64_t v21 = swift_slowAlloc();
    id v33 = v16;
    id v22 = (uint8_t *)v21;
    double v23 = (void *)swift_slowAlloc();
    uint64_t v34 = v17;
    *(_DWORD *)id v22 = 138412290;
    v32[1] = v22 + 4;
    sub_100025C28(0, &qword_100729D78);
    uint64_t v24 = v3;
    NSString v25 = a1;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    Class v36 = isa;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *double v23 = isa;
    a1 = v25;
    uint64_t v3 = v24;
    uint64_t v6 = v35;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "locations %@", v22, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v16 = v33;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v16(v10, v6);
  if (!(a2 >> 62))
  {
    uint64_t v27 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v27) {
      goto LABEL_8;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  if (!v27) {
    return swift_bridgeObjectRelease();
  }
LABEL_8:
  unint64_t result = v27 - 1;
  if (__OFSUB__(v27, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_18:
    id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v29 = *(id *)(a2 + 8 * result + 32);
LABEL_13:
    id v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void **)(v3 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location);
    *(void *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location) = v30;

    return sub_1002D7CBC(a1);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DIPLocationHelper()
{
  return self;
}

id sub_1002D79F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v17 = a2;
  uint64_t v18 = (void *)a3;
  uint64_t v16 = a1;
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  *(void *)&v3[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location] = 0;
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  uint64_t v9 = v3;
  static DispatchQoS.unspecified.getter();
  os_log_type_t v20 = _swiftEmptyArrayStorage;
  sub_1002D7FE0((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007764((uint64_t *)&unk_100726420);
  sub_100031134((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v15);
  *(void *)&v9[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_serviceQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_DWORD *)&v9[OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus] = 0;

  uint64_t v10 = (objc_class *)type metadata accessor for DIPLocationHelper();
  v19.receiver = v9;
  v19.super_class = v10;
  id v11 = [super init];
  uint64_t v12 = v18;
  sub_1002D5DC0(v16, v17, (unint64_t)v18);

  return v11;
}

uint64_t sub_1002D7CBC(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  uint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  aBlock[4] = sub_1002D7FC0;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1006FCA68;
  id v11 = _Block_copy(aBlock);
  id v12 = a1;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1002D7FE0((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v15);
}

uint64_t sub_1002D7F88()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1002D7FC0()
{
  return sub_1002D6F24(*(void **)(v0 + 16));
}

uint64_t sub_1002D7FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002D7FD8()
{
  return swift_release();
}

uint64_t sub_1002D7FE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002D8028()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1002D8060()
{
  sub_1002D71D8(*(void *)(v0 + 16), *(void ***)(v0 + 24));
}

uint64_t sub_1002D8068()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1002D8078()
{
  sub_1002D6ECC(*(void *)(v0 + 16));
}

uint64_t sub_1002D8080()
{
  return sub_1002D66FC(*(char **)(v0 + 16));
}

id sub_1002D8088()
{
  return [*(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager) requestLocation];
}

uint64_t sub_1002D80A4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002D80EC()
{
  sub_1002D604C(*(char **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1002D80F8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002D8108(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v14 = a1;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = v2;
    uint64_t v9 = (uint8_t *)v8;
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    uint64_t v15 = sub_100110D58(v10, v11, &v16);
    a1 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to update location %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v13);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_1002D7CBC(a1);
}

uint64_t sub_1002D8350(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v45 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v42 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v42 - v14;
  defaultLogger()();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = v2;
    objc_super v19 = v13;
    uint64_t v20 = v5;
    uint64_t v21 = v4;
    id v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v22 = 67240192;
    int v46 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Authorization changed. new status %{public}d", v22, 8u);
    uint64_t v4 = v21;
    uint64_t v5 = v20;
    uint64_t v13 = v19;
    uint64_t v2 = v18;
    swift_slowDealloc();
  }

  NSString v25 = *(void (**)(void, void))(v5 + 8);
  double v23 = (char *)(v5 + 8);
  uint64_t v24 = (uint64_t (*)(void, void))v25;
  v25(v15, v4);
  uint64_t v26 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus;
  *(_DWORD *)(v2 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_authorizationStatus) = a1;
  uint64_t v27 = *(void **)(v2 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_location);
  if (v27)
  {
    id v28 = v27;
    defaultLogger()();
    id v29 = v28;
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v44 = v24;
      uint64_t v32 = swift_slowAlloc();
      id v45 = v23;
      id v33 = (uint8_t *)v32;
      os_log_type_t v43 = (void *)swift_slowAlloc();
      *(_DWORD *)id v33 = 138412290;
      NSString v47 = v29;
      id v29 = v29;
      uint64_t v24 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v43 = v27;

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Location information is already known %@. Will not request again.", v33, 0xCu);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v30 = v29;
    }

    return v24(v13, v4);
  }
  else
  {
    defaultLogger()();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      Class v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Location information doesn't exist. Will attempt to make a single location request based on the authorizationStatus", v36, 2u);
      swift_slowDealloc();
    }

    uint64_t result = v24(v10, v4);
    if ((*(_DWORD *)(v2 + v26) - 3) <= 1)
    {
      unint64_t v38 = v45;
      defaultLogger()();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        unint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Making a single location request", v41, 2u);
        swift_slowDealloc();
      }

      v24(v38, v4);
      return sub_1002D66D4();
    }
  }
  return result;
}

void sub_1002D8800()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager;
  [*(id *)(v1 + OBJC_IVAR____TtC8coreidvd17DIPLocationHelper_locationManager) stopUpdatingLocation];
  uint64_t v3 = *(void **)(v1 + v2);
  *(void *)(v1 + v2) = 0;
}

uint64_t sub_1002D8850()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002D88A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002D9010(a1, (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

uint64_t sub_1002D88B8(uint64_t a1)
{
  uint64_t v50 = a1;
  uint64_t v1 = type metadata accessor for AnyCodable();
  uint64_t v48 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  NSString v47 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v49 = *(void *)(v53 - 8);
  uint64_t v3 = __chkstk_darwin(v53);
  int v46 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v39 - v5;
  uint64_t v7 = sub_100007764(&qword_100720E08);
  uint64_t v52 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100729DB0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v51 = (char *)v39 - v14;
  uint64_t v15 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v19) {
    goto LABEL_16;
  }
  uint64_t v20 = v19;
  uint64_t v21 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  sub_1002E4E7C(&qword_100729438, (void (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier);
  uint64_t v45 = v21;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (!*(void *)(v20 + 16) || (unint64_t v22 = sub_100590548(v54, *((uint64_t *)&v54 + 1)), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_16:
    uint64_t v35 = (uint64_t)v51;
    uint64_t v34 = v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, 1, 1, v7);
    goto LABEL_17;
  }
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v40 = v1;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
    uint64_t v27 = v24 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
    id v28 = (void (**)(char *, uint64_t))(v49 + 8);
    uint64_t v42 = (void (**)(char *, uint64_t))(v52 + 8);
    os_log_type_t v43 = v26;
    uint64_t v44 = v52 + 16;
    uint64_t v41 = *(void *)(v52 + 72);
    v39[1] = v24;
    swift_bridgeObjectRetain();
    while (1)
    {
      v43(v9, v27, v7);
      CBOREncodedCBOR.value.getter();
      uint64_t v29 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v31 = v30;
      (*v28)(v6, v53);
      sub_1002E4E7C(&qword_100729DD0, (void (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v29 == (void)v54 && v31 == *((void *)&v54 + 1)) {
        break;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_24;
      }
      (*v42)(v9, v7);
      v27 += v41;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v40;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v51;
    uint64_t v34 = v52;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v9, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v7);
    swift_bridgeObjectRelease();
    uint64_t v1 = v40;
  }
  else
  {
LABEL_14:
    uint64_t v35 = (uint64_t)v51;
    uint64_t v34 = v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, 1, 1, v7);
    swift_bridgeObjectRelease();
  }
LABEL_17:
  sub_100048D6C(v35, (uint64_t)v13, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v13, 1, v7) == 1)
  {
    sub_10000C6CC(v35, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v13, &qword_100729DB0);
    long long v54 = 0u;
    long long v55 = 0u;
    uint64_t v56 = 0;
  }
  else
  {
    Class v36 = v46;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v7);
    uint64_t v37 = v47;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v53);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v1);
    sub_10000C6CC(v35, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  if (swift_dynamicCast()) {
    return v57;
  }
  else {
    return 0;
  }
}

uint64_t sub_1002D8FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002D9010(a1, (uint64_t (*)(void))&type metadata accessor for AnyCodableArray, a2);
}

uint64_t sub_1002D9010@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v57 = a1;
  uint64_t v4 = type metadata accessor for AnyCodable();
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  __chkstk_darwin(v4);
  uint64_t v53 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v56 = *(void *)(v61 - 8);
  uint64_t v6 = __chkstk_darwin(v61);
  uint64_t v52 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v45 - v8;
  uint64_t v10 = sub_100007764(&qword_100720E08);
  uint64_t v60 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100729DB0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v58 = (char *)v45 - v17;
  uint64_t v18 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v22) {
    goto LABEL_16;
  }
  uint64_t v23 = v22;
  uint64_t v24 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  sub_1002E4E7C(&qword_100729438, (void (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier);
  uint64_t v51 = v24;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if (!*(void *)(v23 + 16) || (unint64_t v25 = sub_100590548(v62, *((uint64_t *)&v62 + 1)), (v26 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v27 = *(void *)(*(void *)(v23 + 56) + 8 * v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_16:
    uint64_t v37 = v60;
    uint64_t v38 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v58, 1, 1, v10);
    goto LABEL_17;
  }
  uint64_t v46 = a3;
  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
    uint64_t v30 = v27 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
    uint64_t v31 = (void (**)(char *, uint64_t))(v56 + 8);
    uint64_t v48 = (void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v49 = v29;
    uint64_t v50 = v60 + 16;
    uint64_t v47 = *(void *)(v60 + 72);
    v45[1] = v27;
    swift_bridgeObjectRetain();
    while (1)
    {
      v49(v12, v30, v10);
      CBOREncodedCBOR.value.getter();
      uint64_t v32 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v34 = v33;
      (*v31)(v9, v61);
      sub_1002E4E7C(&qword_100729DD0, (void (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v32 == (void)v62 && v34 == *((void *)&v62 + 1)) {
        break;
      }
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v36) {
        goto LABEL_22;
      }
      (*v48)(v12, v10);
      v30 += v47;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v37 = v60;
    uint64_t v38 = (uint64_t)v58;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v58, v12, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v10);
  }
  else
  {
LABEL_14:
    uint64_t v37 = v60;
    uint64_t v38 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v58, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  a3 = v46;
LABEL_17:
  uint64_t v39 = v59;
  sub_100048D6C(v38, (uint64_t)v16, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v16, 1, v10) == 1)
  {
    sub_10000C6CC(v38, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v16, &qword_100729DB0);
    long long v62 = 0u;
    long long v63 = 0u;
    uint64_t v64 = 0;
  }
  else
  {
    uint64_t v40 = v52;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v10);
    uint64_t v41 = v53;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v61);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v41, v55);
    sub_10000C6CC(v38, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  uint64_t v42 = v39(0);
  int v43 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(a3, v43 ^ 1u, 1, v42);
}

uint64_t sub_1002D9778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v3 = type metadata accessor for AnyCodable();
  uint64_t v52 = *(void *)(v3 - 8);
  uint64_t v53 = v3;
  __chkstk_darwin(v3);
  uint64_t v51 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v54 = *(void *)(v58 - 8);
  uint64_t v5 = __chkstk_darwin(v58);
  uint64_t v50 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = sub_100007764(&qword_100720E08);
  uint64_t v57 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_100729DB0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v56 = (char *)&v43 - v16;
  uint64_t v17 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v21) {
    goto LABEL_16;
  }
  uint64_t v22 = v21;
  uint64_t v23 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier();
  sub_1002E4E7C(&qword_100729440, (void (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier);
  uint64_t v49 = v23;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (!*(void *)(v22 + 16) || (unint64_t v24 = sub_100590548(v59, *((uint64_t *)&v59 + 1)), (v25 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v26 = *(void *)(*(void *)(v22 + 56) + 8 * v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v26)
  {
LABEL_16:
    uint64_t v37 = (uint64_t)v56;
    uint64_t v36 = v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v56, 1, 1, v9);
    goto LABEL_17;
  }
  uint64_t v44 = a2;
  uint64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
    uint64_t v29 = v26 + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
    uint64_t v30 = (void (**)(char *, uint64_t))(v54 + 8);
    uint64_t v46 = (void (**)(char *, uint64_t))(v57 + 8);
    uint64_t v47 = v28;
    uint64_t v48 = v57 + 16;
    uint64_t v45 = *(void *)(v57 + 72);
    uint64_t v43 = v26;
    swift_bridgeObjectRetain();
    while (1)
    {
      v47(v11, v29, v9);
      CBOREncodedCBOR.value.getter();
      uint64_t v31 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v33 = v32;
      (*v30)(v8, v58);
      sub_1002E4E7C(&qword_100729DC0, (void (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v31 == (void)v59 && v33 == *((void *)&v59 + 1)) {
        break;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v35) {
        goto LABEL_22;
      }
      (*v46)(v11, v9);
      v29 += v45;
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v37 = (uint64_t)v56;
    uint64_t v36 = v57;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v11, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v9);
  }
  else
  {
LABEL_14:
    uint64_t v37 = (uint64_t)v56;
    uint64_t v36 = v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v56, 1, 1, v9);
  }
  swift_bridgeObjectRelease();
  a2 = v44;
LABEL_17:
  sub_100048D6C(v37, (uint64_t)v15, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v15, 1, v9) == 1)
  {
    sub_10000C6CC(v37, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v15, &qword_100729DB0);
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v38 = v50;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v9);
    uint64_t v39 = v51;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v58);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v53);
    sub_10000C6CC(v37, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  uint64_t v40 = type metadata accessor for AnyCodableArray();
  int v41 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(a2, v41 ^ 1u, 1, v40);
}

uint64_t sub_1002D9EBC(uint64_t a1)
{
  uint64_t v50 = a1;
  uint64_t v1 = type metadata accessor for AnyCodable();
  uint64_t v48 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v47 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v49 = *(void *)(v53 - 8);
  uint64_t v3 = __chkstk_darwin(v53);
  uint64_t v46 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v39 - v5;
  uint64_t v7 = sub_100007764(&qword_100720E08);
  uint64_t v52 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100729DB0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v51 = (char *)v39 - v14;
  uint64_t v15 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v19) {
    goto LABEL_16;
  }
  uint64_t v20 = v19;
  uint64_t v21 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier();
  sub_1002E4E7C(&qword_100729440, (void (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier);
  uint64_t v45 = v21;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (!*(void *)(v20 + 16) || (unint64_t v22 = sub_100590548(v54, *((uint64_t *)&v54 + 1)), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_16:
    uint64_t v35 = (uint64_t)v51;
    uint64_t v34 = v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, 1, 1, v7);
    goto LABEL_17;
  }
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v40 = v1;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
    uint64_t v27 = v24 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
    uint64_t v28 = (void (**)(char *, uint64_t))(v49 + 8);
    uint64_t v42 = (void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v43 = v26;
    uint64_t v44 = v52 + 16;
    uint64_t v41 = *(void *)(v52 + 72);
    v39[1] = v24;
    swift_bridgeObjectRetain();
    while (1)
    {
      v43(v9, v27, v7);
      CBOREncodedCBOR.value.getter();
      uint64_t v29 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v31 = v30;
      (*v28)(v6, v53);
      sub_1002E4E7C(&qword_100729DC0, (void (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v29 == (void)v54 && v31 == *((void *)&v54 + 1)) {
        break;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_24;
      }
      (*v42)(v9, v7);
      v27 += v41;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v40;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v51;
    uint64_t v34 = v52;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v9, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v7);
    swift_bridgeObjectRelease();
    uint64_t v1 = v40;
  }
  else
  {
LABEL_14:
    uint64_t v35 = (uint64_t)v51;
    uint64_t v34 = v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, 1, 1, v7);
    swift_bridgeObjectRelease();
  }
LABEL_17:
  sub_100048D6C(v35, (uint64_t)v13, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v13, 1, v7) == 1)
  {
    sub_10000C6CC(v35, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v13, &qword_100729DB0);
    long long v54 = 0u;
    long long v55 = 0u;
    uint64_t v56 = 0;
  }
  else
  {
    uint64_t v36 = v46;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v7);
    uint64_t v37 = v47;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v53);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v1);
    sub_10000C6CC(v35, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  if (swift_dynamicCast()) {
    return v57;
  }
  else {
    return 0;
  }
}

uint64_t sub_1002DA5FC(uint64_t a1)
{
  uint64_t v52 = a1;
  uint64_t v1 = type metadata accessor for AnyCodable();
  uint64_t v50 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v49 = (char *)v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v51 = *(void *)(v55 - 8);
  uint64_t v3 = __chkstk_darwin(v55);
  uint64_t v48 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v41 - v5;
  uint64_t v7 = sub_100007764(&qword_100720E08);
  uint64_t v54 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100729DB0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)v41 - v14;
  uint64_t v15 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v19) {
    goto LABEL_16;
  }
  uint64_t v20 = v19;
  uint64_t v21 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier();
  sub_1002E4E7C(&qword_100729440, (void (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier);
  uint64_t v47 = v21;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (!*(void *)(v20 + 16) || (unint64_t v22 = sub_100590548(v56, *((uint64_t *)&v56 + 1)), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_16:
    uint64_t v35 = (uint64_t)v53;
    uint64_t v34 = v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v53, 1, 1, v7);
    goto LABEL_17;
  }
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v42 = v1;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
    uint64_t v27 = v24 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
    uint64_t v28 = (void (**)(char *, uint64_t))(v51 + 8);
    uint64_t v44 = (void (**)(char *, uint64_t))(v54 + 8);
    uint64_t v45 = v26;
    uint64_t v46 = v54 + 16;
    uint64_t v43 = *(void *)(v54 + 72);
    v41[1] = v24;
    swift_bridgeObjectRetain();
    while (1)
    {
      v45(v9, v27, v7);
      CBOREncodedCBOR.value.getter();
      uint64_t v29 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v31 = v30;
      (*v28)(v6, v55);
      sub_1002E4E7C(&qword_100729DC0, (void (*)(uint64_t))&type metadata accessor for ISO18013_AAMVA_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v29 == (void)v56 && v31 == *((void *)&v56 + 1)) {
        break;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_24;
      }
      (*v44)(v9, v7);
      v27 += v43;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v42;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v53;
    uint64_t v34 = v54;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v53, v9, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v7);
    swift_bridgeObjectRelease();
    uint64_t v1 = v42;
  }
  else
  {
LABEL_14:
    uint64_t v35 = (uint64_t)v53;
    uint64_t v34 = v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v53, 1, 1, v7);
    swift_bridgeObjectRelease();
  }
LABEL_17:
  sub_100048D6C(v35, (uint64_t)v13, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v13, 1, v7) == 1)
  {
    sub_10000C6CC(v35, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v13, &qword_100729DB0);
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v36 = v48;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v7);
    uint64_t v37 = v49;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v55);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v1);
    sub_10000C6CC(v35, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  int v38 = swift_dynamicCast();
  uint64_t v39 = v59;
  if (!v38) {
    return 0;
  }
  return v39;
}

uint64_t sub_1002DAD40(uint64_t a1)
{
  uint64_t v52 = a1;
  uint64_t v1 = type metadata accessor for AnyCodable();
  uint64_t v50 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v49 = (char *)v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v51 = *(void *)(v55 - 8);
  uint64_t v3 = __chkstk_darwin(v55);
  uint64_t v48 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v41 - v5;
  uint64_t v7 = sub_100007764(&qword_100720E08);
  uint64_t v54 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100729DB0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)v41 - v14;
  uint64_t v15 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v19) {
    goto LABEL_16;
  }
  uint64_t v20 = v19;
  uint64_t v21 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  sub_1002E4E7C(&qword_100729438, (void (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier);
  uint64_t v47 = v21;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (!*(void *)(v20 + 16) || (unint64_t v22 = sub_100590548(v56, *((uint64_t *)&v56 + 1)), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_16:
    uint64_t v35 = (uint64_t)v53;
    uint64_t v34 = v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v53, 1, 1, v7);
    goto LABEL_17;
  }
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v42 = v1;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
    uint64_t v27 = v24 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
    uint64_t v28 = (void (**)(char *, uint64_t))(v51 + 8);
    uint64_t v44 = (void (**)(char *, uint64_t))(v54 + 8);
    uint64_t v45 = v26;
    uint64_t v46 = v54 + 16;
    uint64_t v43 = *(void *)(v54 + 72);
    v41[1] = v24;
    swift_bridgeObjectRetain();
    while (1)
    {
      v45(v9, v27, v7);
      CBOREncodedCBOR.value.getter();
      uint64_t v29 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v31 = v30;
      (*v28)(v6, v55);
      sub_1002E4E7C(&qword_100729DD0, (void (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v29 == (void)v56 && v31 == *((void *)&v56 + 1)) {
        break;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_24;
      }
      (*v44)(v9, v7);
      v27 += v43;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v42;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v53;
    uint64_t v34 = v54;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v53, v9, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v7);
    swift_bridgeObjectRelease();
    uint64_t v1 = v42;
  }
  else
  {
LABEL_14:
    uint64_t v35 = (uint64_t)v53;
    uint64_t v34 = v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v53, 1, 1, v7);
    swift_bridgeObjectRelease();
  }
LABEL_17:
  sub_100048D6C(v35, (uint64_t)v13, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v13, 1, v7) == 1)
  {
    sub_10000C6CC(v35, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v13, &qword_100729DB0);
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v36 = v48;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v7);
    uint64_t v37 = v49;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v55);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v1);
    sub_10000C6CC(v35, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  int v38 = swift_dynamicCast();
  uint64_t v39 = v59;
  if (!v38) {
    return 0;
  }
  return v39;
}

double sub_1002DB484@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v53 = a1;
  uint64_t v3 = type metadata accessor for AnyCodable();
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  __chkstk_darwin(v3);
  uint64_t v49 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v52 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - v7;
  uint64_t v9 = sub_100007764(&qword_100720E08);
  uint64_t v55 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_100729DB0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v41 - v16;
  uint64_t v17 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v21) {
    goto LABEL_16;
  }
  uint64_t v22 = v21;
  uint64_t v23 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  sub_1002E4E7C(&qword_100729438, (void (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier);
  uint64_t v47 = v23;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (!*(void *)(v22 + 16) || (unint64_t v24 = sub_100590548(v57, *((uint64_t *)&v57 + 1)), (v25 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v26 = *(void *)(*(void *)(v22 + 56) + 8 * v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v26)
  {
LABEL_16:
    uint64_t v37 = (uint64_t)v54;
    uint64_t v36 = v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v54, 1, 1, v9);
    goto LABEL_17;
  }
  uint64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    uint64_t v41 = v26;
    uint64_t v42 = a2;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
    uint64_t v29 = v26 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
    uint64_t v30 = (void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v44 = (void (**)(char *, uint64_t))(v55 + 8);
    uint64_t v45 = v28;
    uint64_t v46 = v55 + 16;
    uint64_t v43 = *(void *)(v55 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      v45(v11, v29, v9);
      CBOREncodedCBOR.value.getter();
      uint64_t v31 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v33 = v32;
      (*v30)(v8, v56);
      sub_1002E4E7C(&qword_100729DD0, (void (*)(uint64_t))&type metadata accessor for ISO18013_5_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v31 == (void)v57 && v33 == *((void *)&v57 + 1)) {
        break;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v35) {
        goto LABEL_24;
      }
      (*v44)(v11, v9);
      v29 += v43;
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        a2 = v42;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v37 = (uint64_t)v54;
    uint64_t v36 = v55;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v54, v11, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v9);
    swift_bridgeObjectRelease();
    a2 = v42;
  }
  else
  {
LABEL_14:
    uint64_t v37 = (uint64_t)v54;
    uint64_t v36 = v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v54, 1, 1, v9);
    swift_bridgeObjectRelease();
  }
LABEL_17:
  sub_100048D6C(v37, (uint64_t)v15, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v15, 1, v9) == 1)
  {
    sub_10000C6CC(v37, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v15, &qword_100729DB0);
    long long v57 = 0u;
    long long v58 = 0u;
    uint64_t v59 = 0;
  }
  else
  {
    int v38 = v48;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v9);
    uint64_t v39 = v49;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v38, v56);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v51);
    sub_10000C6CC(v37, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    double result = 0.0;
    *a2 = xmmword_100610EF0;
  }
  return result;
}

uint64_t sub_1002DBBB0(uint64_t a1)
{
  uint64_t v50 = a1;
  uint64_t v1 = type metadata accessor for AnyCodable();
  uint64_t v48 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v47 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v49 = *(void *)(v53 - 8);
  uint64_t v3 = __chkstk_darwin(v53);
  uint64_t v46 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v39 - v5;
  uint64_t v7 = sub_100007764(&qword_100720E08);
  uint64_t v52 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100729DB0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v51 = (char *)v39 - v14;
  uint64_t v15 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v19) {
    goto LABEL_16;
  }
  uint64_t v20 = v19;
  uint64_t v21 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier();
  sub_1002E4E7C(&qword_100724AA8, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier);
  uint64_t v45 = v21;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (!*(void *)(v20 + 16) || (unint64_t v22 = sub_100590548(v54, *((uint64_t *)&v54 + 1)), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_16:
    uint64_t v35 = (uint64_t)v51;
    uint64_t v34 = v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, 1, 1, v7);
    goto LABEL_17;
  }
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v40 = v1;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
    uint64_t v27 = v24 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
    uint64_t v28 = (void (**)(char *, uint64_t))(v49 + 8);
    uint64_t v42 = (void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v43 = v26;
    uint64_t v44 = v52 + 16;
    uint64_t v41 = *(void *)(v52 + 72);
    v39[1] = v24;
    swift_bridgeObjectRetain();
    while (1)
    {
      v43(v9, v27, v7);
      CBOREncodedCBOR.value.getter();
      uint64_t v29 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v31 = v30;
      (*v28)(v6, v53);
      sub_1002E4E7C(&qword_100729DE0, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v29 == (void)v54 && v31 == *((void *)&v54 + 1)) {
        break;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_24;
      }
      (*v42)(v9, v7);
      v27 += v41;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v40;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v51;
    uint64_t v34 = v52;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v9, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v7);
    swift_bridgeObjectRelease();
    uint64_t v1 = v40;
  }
  else
  {
LABEL_14:
    uint64_t v35 = (uint64_t)v51;
    uint64_t v34 = v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, 1, 1, v7);
    swift_bridgeObjectRelease();
  }
LABEL_17:
  sub_100048D6C(v35, (uint64_t)v13, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v13, 1, v7) == 1)
  {
    sub_10000C6CC(v35, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v13, &qword_100729DB0);
    long long v54 = 0u;
    long long v55 = 0u;
    uint64_t v56 = 0;
  }
  else
  {
    uint64_t v36 = v46;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v7);
    uint64_t v37 = v47;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v53);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v1);
    sub_10000C6CC(v35, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  if (swift_dynamicCast()) {
    return v57;
  }
  else {
    return 0;
  }
}

uint64_t sub_1002DC2F0(uint64_t a1)
{
  uint64_t v52 = a1;
  uint64_t v1 = type metadata accessor for AnyCodable();
  uint64_t v50 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v49 = (char *)v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v51 = *(void *)(v55 - 8);
  uint64_t v3 = __chkstk_darwin(v55);
  uint64_t v48 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v41 - v5;
  uint64_t v7 = sub_100007764(&qword_100720E08);
  uint64_t v54 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100729DB0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)v41 - v14;
  uint64_t v15 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v19) {
    goto LABEL_16;
  }
  uint64_t v20 = v19;
  uint64_t v21 = type metadata accessor for ISO23220_1_ElementIdentifier();
  sub_1002E4E7C(&qword_100724AA0, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier);
  uint64_t v47 = v21;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (!*(void *)(v20 + 16) || (unint64_t v22 = sub_100590548(v56, *((uint64_t *)&v56 + 1)), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_16:
    uint64_t v35 = (uint64_t)v53;
    uint64_t v34 = v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v53, 1, 1, v7);
    goto LABEL_17;
  }
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v42 = v1;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
    uint64_t v27 = v24 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
    uint64_t v28 = (void (**)(char *, uint64_t))(v51 + 8);
    uint64_t v44 = (void (**)(char *, uint64_t))(v54 + 8);
    uint64_t v45 = v26;
    uint64_t v46 = v54 + 16;
    uint64_t v43 = *(void *)(v54 + 72);
    v41[1] = v24;
    swift_bridgeObjectRetain();
    while (1)
    {
      v45(v9, v27, v7);
      CBOREncodedCBOR.value.getter();
      uint64_t v29 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v31 = v30;
      (*v28)(v6, v55);
      sub_1002E4E7C(&qword_100729DE8, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v29 == (void)v56 && v31 == *((void *)&v56 + 1)) {
        break;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_24;
      }
      (*v44)(v9, v7);
      v27 += v43;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v42;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v53;
    uint64_t v34 = v54;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v53, v9, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v7);
    swift_bridgeObjectRelease();
    uint64_t v1 = v42;
  }
  else
  {
LABEL_14:
    uint64_t v35 = (uint64_t)v53;
    uint64_t v34 = v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v53, 1, 1, v7);
    swift_bridgeObjectRelease();
  }
LABEL_17:
  sub_100048D6C(v35, (uint64_t)v13, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v13, 1, v7) == 1)
  {
    sub_10000C6CC(v35, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v13, &qword_100729DB0);
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v36 = v48;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v7);
    uint64_t v37 = v49;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v55);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v1);
    sub_10000C6CC(v35, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  int v38 = swift_dynamicCast();
  uint64_t v39 = v59;
  if (!v38) {
    return 0;
  }
  return v39;
}

double sub_1002DCA34@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v53 = a1;
  uint64_t v3 = type metadata accessor for AnyCodable();
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  __chkstk_darwin(v3);
  uint64_t v49 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v52 = *(void *)(v56 - 8);
  uint64_t v5 = __chkstk_darwin(v56);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - v7;
  uint64_t v9 = sub_100007764(&qword_100720E08);
  uint64_t v55 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_100729DB0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v41 - v16;
  uint64_t v17 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v21) {
    goto LABEL_16;
  }
  uint64_t v22 = v21;
  uint64_t v23 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier();
  sub_1002E4E7C(&qword_100724AA8, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier);
  uint64_t v47 = v23;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (!*(void *)(v22 + 16) || (unint64_t v24 = sub_100590548(v57, *((uint64_t *)&v57 + 1)), (v25 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v26 = *(void *)(*(void *)(v22 + 56) + 8 * v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v26)
  {
LABEL_16:
    uint64_t v37 = (uint64_t)v54;
    uint64_t v36 = v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v54, 1, 1, v9);
    goto LABEL_17;
  }
  uint64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    uint64_t v41 = v26;
    uint64_t v42 = a2;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
    uint64_t v29 = v26 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
    uint64_t v30 = (void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v44 = (void (**)(char *, uint64_t))(v55 + 8);
    uint64_t v45 = v28;
    uint64_t v46 = v55 + 16;
    uint64_t v43 = *(void *)(v55 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      v45(v11, v29, v9);
      CBOREncodedCBOR.value.getter();
      uint64_t v31 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v33 = v32;
      (*v30)(v8, v56);
      sub_1002E4E7C(&qword_100729DE0, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v31 == (void)v57 && v33 == *((void *)&v57 + 1)) {
        break;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v35) {
        goto LABEL_24;
      }
      (*v44)(v11, v9);
      v29 += v43;
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        a2 = v42;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v37 = (uint64_t)v54;
    uint64_t v36 = v55;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v54, v11, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v9);
    swift_bridgeObjectRelease();
    a2 = v42;
  }
  else
  {
LABEL_14:
    uint64_t v37 = (uint64_t)v54;
    uint64_t v36 = v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v54, 1, 1, v9);
    swift_bridgeObjectRelease();
  }
LABEL_17:
  sub_100048D6C(v37, (uint64_t)v15, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v15, 1, v9) == 1)
  {
    sub_10000C6CC(v37, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v15, &qword_100729DB0);
    long long v57 = 0u;
    long long v58 = 0u;
    uint64_t v59 = 0;
  }
  else
  {
    int v38 = v48;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v9);
    uint64_t v39 = v49;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v38, v56);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v51);
    sub_10000C6CC(v37, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    double result = 0.0;
    *a2 = xmmword_100610EF0;
  }
  return result;
}

uint64_t sub_1002DD160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v3 = type metadata accessor for AnyCodable();
  uint64_t v52 = *(void *)(v3 - 8);
  uint64_t v53 = v3;
  __chkstk_darwin(v3);
  uint64_t v51 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v54 = *(void *)(v58 - 8);
  uint64_t v5 = __chkstk_darwin(v58);
  uint64_t v50 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = sub_100007764(&qword_100720E08);
  uint64_t v57 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_100729DB0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v56 = (char *)&v43 - v16;
  uint64_t v17 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v21) {
    goto LABEL_16;
  }
  uint64_t v22 = v21;
  uint64_t v23 = type metadata accessor for ISO23220_1_ElementIdentifier();
  sub_1002E4E7C(&qword_100724AA0, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier);
  uint64_t v49 = v23;
  dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter();
  sub_1002E4E7C(&qword_100729DC8, (void (*)(uint64_t))&type metadata accessor for ISO18013KnownNamespaces);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (!*(void *)(v22 + 16) || (unint64_t v24 = sub_100590548(v59, *((uint64_t *)&v59 + 1)), (v25 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v26 = *(void *)(*(void *)(v22 + 56) + 8 * v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v26)
  {
LABEL_16:
    uint64_t v37 = (uint64_t)v56;
    uint64_t v36 = v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v56, 1, 1, v9);
    goto LABEL_17;
  }
  uint64_t v44 = a2;
  uint64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
    uint64_t v29 = v26 + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
    uint64_t v30 = (void (**)(char *, uint64_t))(v54 + 8);
    uint64_t v46 = (void (**)(char *, uint64_t))(v57 + 8);
    uint64_t v47 = v28;
    uint64_t v48 = v57 + 16;
    uint64_t v45 = *(void *)(v57 + 72);
    uint64_t v43 = v26;
    swift_bridgeObjectRetain();
    while (1)
    {
      v47(v11, v29, v9);
      CBOREncodedCBOR.value.getter();
      uint64_t v31 = ISO18013IssuerSignedItem.elementIdentifier.getter();
      uint64_t v33 = v32;
      (*v30)(v8, v58);
      sub_1002E4E7C(&qword_100729DE8, (void (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v31 == (void)v59 && v33 == *((void *)&v59 + 1)) {
        break;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v35) {
        goto LABEL_22;
      }
      (*v46)(v11, v9);
      v29 += v45;
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v37 = (uint64_t)v56;
    uint64_t v36 = v57;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v11, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v9);
  }
  else
  {
LABEL_14:
    uint64_t v37 = (uint64_t)v56;
    uint64_t v36 = v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v56, 1, 1, v9);
  }
  swift_bridgeObjectRelease();
  a2 = v44;
LABEL_17:
  sub_100048D6C(v37, (uint64_t)v15, &qword_100729DB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v15, 1, v9) == 1)
  {
    sub_10000C6CC(v37, &qword_100729DB0);
    sub_10000C6CC((uint64_t)v15, &qword_100729DB0);
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v61 = 0;
  }
  else
  {
    int v38 = v50;
    CBOREncodedCBOR.value.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v9);
    uint64_t v39 = v51;
    ISO18013IssuerSignedItem.elementValue.getter();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v58);
    AnyCodable.value.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v53);
    sub_10000C6CC(v37, &qword_100729DB0);
  }
  sub_100007764(&qword_100729DB8);
  uint64_t v40 = type metadata accessor for Date();
  int v41 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(a2, v41 ^ 1u, 1, v40);
}

uint64_t sub_1002DD8A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v50 = a4;
  uint64_t v56 = a3;
  uint64_t v60 = a1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  __chkstk_darwin(v5);
  uint64_t v54 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale.Region();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v55 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v50 - v11;
  uint64_t v13 = type metadata accessor for ISO18013Response.IssuerSigned();
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v50 - v17;
  uint64_t v19 = type metadata accessor for MobileDocumentType.Identifier();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a2;
  MobileDocumentType.storage.getter();
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v22, v19);
  if (v23 == enum case for MobileDocumentType.Identifier.nationalIDCard(_:))
  {
    (*(void (**)(char *, uint64_t))(v20 + 96))(v22, v19);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v22, v7);
    unint64_t v24 = v55;
    Locale.Region.init(stringLiteral:)();
    sub_1002E4E7C((unint64_t *)&unk_100723520, (void (*)(uint64_t))&type metadata accessor for Locale.Region);
    char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
    v26(v24, v7);
    v26(v12, v7);
    uint64_t v27 = v7;
    if (v25)
    {
      uint64_t v28 = v57;
      uint64_t v29 = v60;
      uint64_t v30 = v51;
      sub_1002DE198(v57, (uint64_t)v16);
      if (v30) {
        swift_bridgeObjectRelease();
      }
      else {
        sub_1002E22E8((uint64_t)v16, v56, v50);
      }
      uint64_t v46 = type metadata accessor for MobileDocumentType();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v28, v46);
      uint64_t v47 = type metadata accessor for ISO18013Response();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8))(v29, v47);
      return ((uint64_t (*)(char *, uint64_t))v26)(v22, v7);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = v55;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v55, v22, v27);
      uint64_t v58 = 0;
      unint64_t v59 = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v35._uint64_t countAndFlagsBits = 0xD000000000000026;
      v35._unint64_t object = (void *)0x800000010063BF50;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = Locale.Region.identifier.getter();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._uint64_t countAndFlagsBits = 0xD000000000000013;
      v37._unint64_t object = (void *)0x800000010063BF80;
      String.append(_:)(v37);
      int v38 = *(void (**)(char *, void, uint64_t))(v52 + 104);
      uint64_t v56 = v27;
      v38(v54, enum case for DIPError.Code.documentReaderUnsupportedNationalIDCardRegion(_:), v53);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1002E4E7C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      uint64_t v39 = type metadata accessor for MobileDocumentType();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v57, v39);
      uint64_t v40 = type metadata accessor for ISO18013Response();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v60, v40);
      return ((uint64_t (*)(char *, uint64_t))v26)(v34, v56);
    }
  }
  else if (v23 == enum case for MobileDocumentType.Identifier.driversLicense(_:))
  {
    uint64_t v31 = v57;
    uint64_t v32 = v60;
    uint64_t v33 = v51;
    sub_1002DE198(v57, (uint64_t)v18);
    if (v33) {
      swift_bridgeObjectRelease();
    }
    else {
      sub_1002DE6D0((uint64_t)v18, v56, v50);
    }
    uint64_t v48 = type metadata accessor for MobileDocumentType();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v31, v48);
    uint64_t v49 = type metadata accessor for ISO18013Response();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v32, v49);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v42._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v42._unint64_t object = (void *)0x80000001006310F0;
    String.append(_:)(v42);
    uint64_t v43 = type metadata accessor for MobileDocumentType();
    uint64_t v44 = v57;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v56 = v58;
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v54, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v53);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002E4E7C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v44, v43);
    uint64_t v45 = type metadata accessor for ISO18013Response();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(v60, v45);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
}

uint64_t sub_1002DE198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ISO18013Response.Document();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_100729DF0);
  __chkstk_darwin(v12 - 8);
  int v41 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ISO18013Response.IssuerSigned();
  uint64_t v39 = *(void *)(v14 - 8);
  uint64_t v40 = v14;
  __chkstk_darwin(v14);
  int v38 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = ISO18013Response.documents.getter();
  if (!v16) {
    goto LABEL_17;
  }
  uint64_t v42 = v9;
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v37 = v16;
  if (v17)
  {
    uint64_t v33 = v5;
    uint64_t v34 = v4;
    uint64_t v35 = a2;
    Swift::String v36 = v7;
    uint64_t v44 = *(void (**)(char *, unint64_t, uint64_t))(v42 + 16);
    uint64_t v45 = v42 + 16;
    unint64_t v18 = v16 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    uint64_t v19 = (void (**)(char *, uint64_t))(v42 + 8);
    uint64_t v43 = *(void *)(v42 + 72);
    while (1)
    {
      uint64_t v20 = v8;
      v44(v11, v18, v8);
      uint64_t v21 = ISO18013Response.Document.docType.getter();
      uint64_t v23 = v22;
      uint64_t v24 = MobileDocumentType.iso18013Identifier.getter();
      if (v2)
      {
        swift_bridgeObjectRelease();
        (*v19)(v11, v20);
        return swift_bridgeObjectRelease();
      }
      if (v21 == v24 && v23 == v25) {
        break;
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_14;
      }
      uint64_t v8 = v20;
      (*v19)(v11, v20);
      v18 += v43;
      if (!--v17)
      {
        uint64_t v27 = 1;
        a2 = v35;
        uint64_t v7 = v36;
        uint64_t v5 = v33;
        uint64_t v4 = v34;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_14:
    uint64_t v28 = (uint64_t)v41;
    uint64_t v29 = v42;
    uint64_t v8 = v20;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v11, v20);
    uint64_t v27 = 0;
    a2 = v35;
    uint64_t v7 = v36;
    uint64_t v5 = v33;
    uint64_t v4 = v34;
  }
  else
  {
    uint64_t v27 = 1;
LABEL_11:
    uint64_t v28 = (uint64_t)v41;
    uint64_t v29 = v42;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v28, v27, 1, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v28, 1, v8) == 1)
  {
    sub_10000C6CC(v28, &qword_100729DF0);
LABEL_17:
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.documentReaderInvalidResponse(_:), v4);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002E4E7C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  uint64_t v31 = v38;
  ISO18013Response.Document.issuerSigned.getter();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(a2, v31, v40);
}

uint64_t sub_1002DE6D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100007764(&qword_100729D80);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v477 = (uint64_t)&v459 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v504 = (uint64_t)&v459 - v9;
  uint64_t v10 = sub_100007764(&qword_100729D88);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v476 = (uint64_t)&v459 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v464 = (char *)&v459 - v14;
  __chkstk_darwin(v13);
  uint64_t v505 = (uint64_t)&v459 - v15;
  uint64_t v16 = sub_100007764(&qword_100729D90);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v475 = (uint64_t)&v459 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  v465 = (char *)&v459 - v20;
  __chkstk_darwin(v19);
  uint64_t v506 = (uint64_t)&v459 - v21;
  uint64_t v22 = sub_100007764(&qword_1007239B0);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v461 = (uint64_t)&v459 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v463 = (uint64_t)&v459 - v26;
  __chkstk_darwin(v25);
  uint64_t v467 = (uint64_t)&v459 - v27;
  uint64_t v28 = sub_100007764(&qword_100725DE8);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v473 = (uint64_t)&v459 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v472 = (uint64_t)&v459 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v474 = (uint64_t)&v459 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v460 = (char *)&v459 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v486 = (uint64_t)&v459 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v462 = (char *)&v459 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v487 = (uint64_t)&v459 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v466 = (char *)&v459 - v44;
  __chkstk_darwin(v43);
  uint64_t v507 = (uint64_t)&v459 - v45;
  uint64_t v470 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v469 = *(void *)(v470 - 8);
  __chkstk_darwin(v470);
  v468 = (char *)&v459 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100007764(&qword_100729D98);
  uint64_t v48 = __chkstk_darwin(v47 - 8);
  uint64_t v471 = (uint64_t)&v459 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __chkstk_darwin(v48);
  v459 = (char *)&v459 - v51;
  __chkstk_darwin(v50);
  uint64_t v496 = (uint64_t)&v459 - v52;
  uint64_t v481 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier();
  uint64_t v480 = *(void *)(v481 - 8);
  __chkstk_darwin(v481);
  v479 = (char *)&v459 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v523 = type metadata accessor for ISO18013_5_1_ElementIdentifier();
  uint64_t v519 = *(void *)(v523 - 8);
  __chkstk_darwin(v523);
  v522 = (char *)&v459 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for MobileDocumentElement();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v57 = __chkstk_darwin(v55);
  v490 = (char *)&v459 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __chkstk_darwin(v57);
  v510 = (char *)&v459 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v491 = (char *)&v459 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v521 = (char *)&v459 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v492 = (char *)&v459 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v511 = (char *)&v459 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v493 = (char *)&v459 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v512 = (char *)&v459 - v72;
  uint64_t v73 = __chkstk_darwin(v71);
  v494 = (char *)&v459 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  v513 = (char *)&v459 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  v495 = (char *)&v459 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v509 = (char *)&v459 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  v497 = (char *)&v459 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  v514 = (char *)&v459 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  v498 = (char *)&v459 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  v515 = (char *)&v459 - v88;
  uint64_t v89 = __chkstk_darwin(v87);
  v499 = (char *)&v459 - v90;
  uint64_t v91 = __chkstk_darwin(v89);
  v516 = (char *)&v459 - v92;
  uint64_t v93 = __chkstk_darwin(v91);
  v500 = (char *)&v459 - v94;
  uint64_t v95 = __chkstk_darwin(v93);
  v517 = (char *)&v459 - v96;
  uint64_t v97 = __chkstk_darwin(v95);
  v501 = (char *)&v459 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  long long v101 = (void (*)(char *, unint64_t, uint64_t))((char *)&v459 - v100);
  uint64_t v102 = __chkstk_darwin(v99);
  v503 = (char *)&v459 - v103;
  uint64_t v104 = __chkstk_darwin(v102);
  char v106 = (char *)&v459 - v105;
  uint64_t v107 = __chkstk_darwin(v104);
  uint64_t v109 = (char *)&v459 - v108;
  __chkstk_darwin(v107);
  uint64_t v111 = (char *)&v459 - v110;
  uint64_t v485 = type metadata accessor for PersonNameComponents();
  uint64_t v484 = *(void *)(v485 - 8);
  uint64_t v112 = __chkstk_darwin(v485);
  v483 = (char *)&v459 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v112);
  v502 = (char *)&v459 - v114;
  PersonNameComponents.init()();
  static MobileDocumentElement.givenName.getter();
  uint64_t v115 = *(void *)(a2 + 16);
  uint64_t v524 = a1;
  uint64_t v525 = v56;
  uint64_t v520 = a2;
  uint64_t v488 = v115;
  uint64_t v478 = a3;
  v518 = v101;
  v508 = v106;
  if (!v115)
  {
    uint64_t v120 = *(void (**)(char *, uint64_t))(v56 + 8);
    uint64_t v121 = (v56 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    goto LABEL_13;
  }
  uint64_t v116 = v56;
  unint64_t v117 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  long long v118 = *(void (**)(char *, unint64_t, uint64_t))(v116 + 16);
  v118(v109, a2 + v117, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  v489 = v111;
  char v119 = dispatch thunk of static Equatable.== infix(_:_:)();
  v526 = *(void (**)(char *, uint64_t))(v116 + 8);
  uint64_t v527 = (v116 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v526(v109, v55);
  if ((v119 & 1) == 0)
  {
    v482 = v118;
    if (v488 != 1)
    {
      uint64_t v122 = *(void *)(v525 + 72);
      unint64_t v123 = v520 + v122 + v117;
      uint64_t v124 = 1;
      while (1)
      {
        v482(v109, v123, v55);
        uint64_t v125 = v124 + 1;
        if (__OFADD__(v124, 1))
        {
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
LABEL_254:
          __break(1u);
LABEL_255:
          __break(1u);
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
          JUMPOUT(0x1002E22C0);
        }
        char v126 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v109, v55);
        if (v126) {
          break;
        }
        ++v124;
        v123 += v122;
        if (v125 == v488)
        {
          a2 = v520;
          swift_bridgeObjectRelease();
          uint64_t v56 = v525;
          uint64_t v120 = v526;
          uint64_t v121 = v527;
          char v106 = v508;
          goto LABEL_12;
        }
      }
      a2 = v520;
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    a2 = v520;
    swift_bridgeObjectRelease();
    uint64_t v56 = v525;
    uint64_t v120 = v526;
    uint64_t v121 = v527;
LABEL_12:
    uint64_t v111 = v489;
LABEL_13:
    uint64_t v527 = v121;
    v120(v111, v55);
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  uint64_t v56 = v525;
  uint64_t v120 = v526;
  v526(v489, v55);
  uint64_t v127 = v519;
  uint64_t v129 = (uint64_t)v522;
  uint64_t v128 = v523;
  (*(void (**)(char *, void, uint64_t))(v519 + 104))(v522, enum case for ISO18013_5_1_ElementIdentifier.givenName(_:), v523);
  uint64_t v130 = sub_1002D88B8(v129);
  unint64_t v132 = v131;
  (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v129, v128);
  if (v132)
  {
    uint64_t v529 = v130;
    unint64_t v530 = v132;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
  }
  PersonNameComponents.givenName.setter();
  uint64_t v133 = v480;
  uint64_t v134 = (uint64_t)v479;
  uint64_t v135 = v481;
  (*(void (**)(char *, void, uint64_t))(v480 + 104))(v479, enum case for ISO18013_AAMVA_ElementIdentifier.nameSuffix(_:), v481);
  uint64_t v136 = sub_1002D9EBC(v134);
  unint64_t v138 = v137;
  (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v134, v135);
  if (v138)
  {
    uint64_t v529 = v136;
    unint64_t v530 = v138;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
  }
  char v106 = v508;
  PersonNameComponents.nameSuffix.setter();
LABEL_20:
  static MobileDocumentElement.familyName.getter();
  uint64_t v139 = *(void *)(a2 + 16);
  v526 = v120;
  if (!v139) {
    goto LABEL_31;
  }
  unint64_t v140 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  unint64_t v141 = v503;
  v489 = *(char **)(v56 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v489)(v503, a2 + v140, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v142 = dispatch thunk of static Equatable.== infix(_:_:)();
  v120(v141, v55);
  if ((v142 & 1) == 0)
  {
    if (v139 != 1)
    {
      uint64_t v145 = *(void *)(v525 + 72);
      unint64_t v146 = a2 + v145 + v140;
      uint64_t v147 = 1;
      long long v148 = v503;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v489)(v148, v146, v55);
        uint64_t v149 = v147 + 1;
        if (__OFADD__(v147, 1)) {
          goto LABEL_248;
        }
        char v150 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v148, v55);
        if (v150) {
          break;
        }
        ++v147;
        v146 += v145;
        if (v149 == v139)
        {
          a2 = v520;
          swift_bridgeObjectRelease();
          uint64_t v56 = v525;
          uint64_t v120 = v526;
          goto LABEL_30;
        }
      }
      uint64_t v143 = v520;
      swift_bridgeObjectRelease();
      uint64_t v120 = v526;
      long long v144 = v508;
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = v525;
LABEL_30:
    char v106 = v508;
LABEL_31:
    uint64_t v151 = a2;
    uint64_t v152 = v527;
    v120(v106, v55);
    long long v153 = (char *)v518;
    goto LABEL_36;
  }
  uint64_t v143 = a2;
  swift_bridgeObjectRelease();
  long long v144 = v508;
LABEL_33:
  v120(v144, v55);
  uint64_t v154 = v519;
  uint64_t v156 = (uint64_t)v522;
  uint64_t v155 = v523;
  (*(void (**)(char *, void, uint64_t))(v519 + 104))(v522, enum case for ISO18013_5_1_ElementIdentifier.familyName(_:), v523);
  uint64_t v157 = sub_1002D88B8(v156);
  unint64_t v159 = v158;
  (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v156, v155);
  uint64_t v151 = v143;
  if (v159)
  {
    uint64_t v529 = v157;
    unint64_t v530 = v159;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v152 = v527;
  long long v153 = (char *)v518;
  uint64_t v56 = v525;
  PersonNameComponents.familyName.setter();
LABEL_36:
  uint64_t v160 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex();
  uint64_t v161 = *(void *)(v160 - 8);
  Swift::String v162 = (void (*)(char *, unint64_t, uint64_t))v161;
  v163 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v161 + 56);
  uint64_t v164 = v161 + 56;
  v163(v496, 1, 1, v160);
  static MobileDocumentElement.sex.getter();
  if (!*(void *)(v151 + 16))
  {
LABEL_46:
    uint64_t v176 = v526;
    v526(v153, v55);
    goto LABEL_60;
  }
  v508 = *(char **)(v151 + 16);
  v482 = v162;
  uint64_t v488 = v164;
  v489 = (char *)v163;
  v503 = (char *)v160;
  unint64_t v165 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  unint64_t v166 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  uint64_t v167 = v56;
  v168 = v501;
  v165(v501, v151 + v166, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v169 = dispatch thunk of static Equatable.== infix(_:_:)();
  v526(v168, v55);
  if ((v169 & 1) == 0)
  {
    uint64_t v56 = v167;
    if (v508 == (char *)1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v170 = *(void *)(v167 + 72);
      unint64_t v171 = v520 + v170 + v166;
      uint64_t v172 = 1;
      uint64_t v173 = v501;
      do
      {
        v165(v173, v171, v55);
        uint64_t v174 = v172 + 1;
        if (__OFADD__(v172, 1)) {
          goto LABEL_249;
        }
        char v175 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v173, v55);
        if (v175) {
          goto LABEL_47;
        }
        ++v172;
        v171 += v170;
      }
      while ((char *)v174 != v508);
      swift_bridgeObjectRelease();
      uint64_t v56 = v525;
      uint64_t v152 = v527;
    }
    long long v153 = (char *)v518;
    goto LABEL_46;
  }
LABEL_47:
  swift_bridgeObjectRelease();
  uint64_t v176 = v526;
  v526((char *)v518, v55);
  uint64_t v177 = v480;
  uint64_t v178 = (uint64_t)v479;
  uint64_t v179 = v481;
  (*(void (**)(char *, void, uint64_t))(v480 + 104))(v479, enum case for ISO18013_AAMVA_ElementIdentifier.sex(_:), v481);
  uint64_t v180 = sub_1002DA5FC(v178);
  char v182 = v181;
  (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v178, v179);
  uint64_t v183 = v519;
  uint64_t v185 = (uint64_t)v522;
  uint64_t v184 = v523;
  (*(void (**)(char *, void, uint64_t))(v519 + 104))(v522, enum case for ISO18013_5_1_ElementIdentifier.sex(_:), v523);
  uint64_t v186 = sub_1002DAD40(v185);
  char v188 = v187;
  uint64_t v189 = v183;
  uint64_t v152 = v527;
  (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v185, v184);
  uint64_t v56 = v525;
  if ((v182 & 1) == 0 || (v188 & 1) == 0)
  {
    if (v182) {
      uint64_t v190 = v186;
    }
    else {
      uint64_t v190 = v180;
    }
    switch(v190)
    {
      case 0:
        uint64_t v191 = v496;
        sub_10000C6CC(v496, &qword_100729D98);
        v192 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.unknown(_:);
        goto LABEL_56;
      case 1:
        uint64_t v191 = v496;
        sub_10000C6CC(v496, &qword_100729D98);
        v192 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.male(_:);
        goto LABEL_56;
      case 2:
        uint64_t v191 = v496;
        sub_10000C6CC(v496, &qword_100729D98);
        v192 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.female(_:);
LABEL_56:
        v193 = v503;
        (*((void (**)(uint64_t, void, char *))v482 + 13))(v191, *v192, v503);
        ((void (*)(uint64_t, void, uint64_t, char *))v489)(v191, 0, 1, v193);
        break;
      case 9:
        uint64_t v194 = v496;
        sub_10000C6CC(v496, &qword_100729D98);
        v195 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.notApplicable(_:);
        if ((v182 & 1) == 0) {
          v195 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.notSpecified(_:);
        }
        uint64_t v196 = (uint64_t)v459;
        v197 = v503;
        (*((void (**)(char *, void, char *))v482 + 13))(v459, *v195, v503);
        ((void (*)(uint64_t, void, uint64_t, char *))v489)(v196, 0, 1, v197);
        sub_1000BEA14(v196, v194, &qword_100729D98);
        break;
      default:
        break;
    }
  }
LABEL_60:
  v198 = v517;
  static MobileDocumentElement.portrait.getter();
  uint64_t v199 = v520;
  uint64_t v200 = *(void *)(v520 + 16);
  if (!v200) {
    goto LABEL_71;
  }
  unint64_t v201 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v202 = v500;
  v518 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  v518(v500, v520 + v201, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v203 = dispatch thunk of static Equatable.== infix(_:_:)();
  v176(v202, v55);
  if ((v203 & 1) == 0)
  {
    if (v200 != 1)
    {
      uint64_t v204 = *(void *)(v525 + 72);
      unint64_t v205 = v199 + v204 + v201;
      uint64_t v206 = 1;
      v207 = v500;
      while (1)
      {
        v518(v207, v205, v55);
        uint64_t v208 = v206 + 1;
        if (__OFADD__(v206, 1)) {
          goto LABEL_250;
        }
        char v209 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v207, v55);
        if (v209) {
          break;
        }
        ++v206;
        v205 += v204;
        if (v208 == v200)
        {
          uint64_t v199 = v520;
          swift_bridgeObjectRelease();
          uint64_t v56 = v525;
          uint64_t v176 = v526;
          uint64_t v152 = v527;
          goto LABEL_70;
        }
      }
      uint64_t v199 = v520;
      swift_bridgeObjectRelease();
      uint64_t v56 = v525;
      uint64_t v176 = v526;
      uint64_t v152 = v527;
      goto LABEL_73;
    }
    swift_bridgeObjectRelease();
    uint64_t v152 = v527;
    uint64_t v56 = v525;
LABEL_70:
    v198 = v517;
LABEL_71:
    v176(v198, v55);
    uint64_t v210 = 0;
    v501 = (char *)0xF000000000000000;
    goto LABEL_76;
  }
  swift_bridgeObjectRelease();
  uint64_t v152 = v527;
  uint64_t v56 = v525;
LABEL_73:
  v176(v517, v55);
  uint64_t v211 = v519;
  uint64_t v213 = (uint64_t)v522;
  uint64_t v212 = v523;
  (*(void (**)(char *, void, uint64_t))(v519 + 104))(v522, enum case for ISO18013_5_1_ElementIdentifier.portrait(_:), v523);
  double v214 = sub_1002DB484(v213, &v531);
  (*(void (**)(uint64_t, uint64_t, double))(v211 + 8))(v213, v212, v214);
  unint64_t v215 = *((void *)&v531 + 1);
  uint64_t v210 = v531;
  if (*((void *)&v531 + 1) >> 60 != 15)
  {
    long long v528 = v531;
    sub_1002E4D48();
    Collection.nilIfEmpty.getter();
    sub_10000C5E0(v210, v215);
    uint64_t v210 = v529;
    unint64_t v215 = v530;
  }
  v501 = (char *)v215;
LABEL_76:
  v503 = (char *)v210;
  v216 = v516;
  static MobileDocumentElement.age.getter();
  uint64_t v217 = *(void *)(v199 + 16);
  uint64_t v527 = v152;
  if (v217)
  {
    v218 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
    unint64_t v219 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
    v220 = v499;
    v218(v499, v199 + v219, v55);
    sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
    swift_bridgeObjectRetain();
    char v221 = dispatch thunk of static Equatable.== infix(_:_:)();
    v176(v220, v55);
    if (v221)
    {
      swift_bridgeObjectRelease();
      uint64_t v56 = v525;
      goto LABEL_94;
    }
    if (v217 != 1)
    {
      unint64_t v222 = v219;
      v518 = v218;
      uint64_t v223 = *(void *)(v525 + 72);
      unint64_t v224 = v199 + v223 + v222;
      uint64_t v225 = 1;
      v226 = v499;
      while (1)
      {
        v518(v226, v224, v55);
        uint64_t v227 = v225 + 1;
        if (__OFADD__(v225, 1)) {
          goto LABEL_251;
        }
        char v228 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v226, v55);
        if (v228) {
          break;
        }
        ++v225;
        v224 += v223;
        if (v227 == v217)
        {
          uint64_t v199 = v520;
          swift_bridgeObjectRelease();
          uint64_t v56 = v525;
          uint64_t v176 = v526;
          goto LABEL_86;
        }
      }
      uint64_t v199 = v520;
      swift_bridgeObjectRelease();
      uint64_t v56 = v525;
      uint64_t v176 = v526;
LABEL_94:
      v176(v516, v55);
      uint64_t v240 = v519;
      uint64_t v242 = (uint64_t)v522;
      uint64_t v241 = v523;
      (*(void (**)(char *, void, uint64_t))(v519 + 104))(v522, enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:), v523);
      v499 = (char *)sub_1002DAD40(v242);
      LODWORD(v489) = v243 & 1;
      (*(void (**)(uint64_t, uint64_t))(v240 + 8))(v242, v241);
      uint64_t v229 = ISO18013Response.IssuerSigned.namespaces.getter();
      if (!v229) {
        goto LABEL_95;
      }
      goto LABEL_88;
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = v525;
LABEL_86:
    v216 = v516;
  }
  v176(v216, v55);
  v499 = 0;
  LODWORD(v489) = 1;
  uint64_t v229 = ISO18013Response.IssuerSigned.namespaces.getter();
  if (!v229)
  {
LABEL_95:
    uint64_t v239 = 0;
    goto LABEL_96;
  }
LABEL_88:
  uint64_t v230 = v229;
  uint64_t v231 = v469;
  v232 = v468;
  uint64_t v233 = v470;
  (*(void (**)(char *, void, uint64_t))(v469 + 104))(v468, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v470);
  uint64_t v234 = ISO18013KnownNamespaces.rawValue.getter();
  uint64_t v236 = v235;
  (*(void (**)(char *, uint64_t))(v231 + 8))(v232, v233);
  if (*(void *)(v230 + 16) && (unint64_t v237 = sub_100590548(v234, v236), (v238 & 1) != 0))
  {
    uint64_t v239 = *(void *)(*(void *)(v230 + 56) + 8 * v237);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v239 = 0;
  }
  uint64_t v56 = v525;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_96:
  v244 = v515;
  v500 = (char *)sub_1002E4224(v239, (uint64_t (*)(uint64_t, uint64_t))j___s7CoreIDV30ISO18013_5_1_ElementIdentifierO09isAgeOverD0ySbSSFZ, 0, (uint64_t (*)(uint64_t, uint64_t))sub_1002E4034, 0, v199);
  swift_bridgeObjectRelease();
  uint64_t v245 = type metadata accessor for DateComponents();
  uint64_t v246 = *(void *)(v245 - 8);
  v516 = *(char **)(v246 + 56);
  v517 = (char *)v245;
  v508 = (char *)(v246 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t))v516)(v507, 1, 1);
  static MobileDocumentElement.dateOfBirth.getter();
  uint64_t v247 = *(void *)(v199 + 16);
  if (!v247) {
    goto LABEL_107;
  }
  unint64_t v248 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v249 = v498;
  v518 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  v518(v498, v199 + v248, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v250 = dispatch thunk of static Equatable.== infix(_:_:)();
  v176(v249, v55);
  if ((v250 & 1) == 0)
  {
    if (v247 != 1)
    {
      uint64_t v251 = *(void *)(v525 + 72);
      unint64_t v252 = v199 + v251 + v248;
      uint64_t v253 = 1;
      v254 = v498;
      while (1)
      {
        v518(v254, v252, v55);
        uint64_t v255 = v253 + 1;
        if (__OFADD__(v253, 1)) {
          goto LABEL_252;
        }
        char v256 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v254, v55);
        if (v256) {
          break;
        }
        ++v253;
        v252 += v251;
        if (v255 == v247)
        {
          uint64_t v199 = v520;
          swift_bridgeObjectRelease();
          uint64_t v56 = v525;
          uint64_t v176 = v526;
          goto LABEL_106;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v56 = v525;
      uint64_t v176 = v526;
      goto LABEL_109;
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = v525;
LABEL_106:
    v244 = v515;
LABEL_107:
    v176(v244, v55);
    goto LABEL_113;
  }
  swift_bridgeObjectRelease();
  uint64_t v56 = v525;
LABEL_109:
  v176(v515, v55);
  uint64_t v257 = v519;
  uint64_t v259 = (uint64_t)v522;
  uint64_t v258 = v523;
  (*(void (**)(char *, void, uint64_t))(v519 + 104))(v522, enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:), v523);
  uint64_t v260 = v467;
  sub_1002D9010(v259, (uint64_t (*)(void))&type metadata accessor for Date, v467);
  (*(void (**)(uint64_t, uint64_t))(v257 + 8))(v259, v258);
  uint64_t v261 = type metadata accessor for Date();
  uint64_t v262 = *(void *)(v261 - 8);
  int v263 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v262 + 48))(v260, 1, v261);
  uint64_t v264 = (uint64_t)v466;
  if (v263 == 1)
  {
    uint64_t v265 = v507;
    sub_10000C6CC(v507, &qword_100725DE8);
    sub_10000C6CC(v260, &qword_1007239B0);
    ((void (*)(uint64_t, uint64_t, uint64_t, char *))v516)(v264, 1, 1, v517);
  }
  else
  {
    Date.utcDayRepresentation.getter();
    uint64_t v265 = v507;
    sub_10000C6CC(v507, &qword_100725DE8);
    (*(void (**)(uint64_t, uint64_t))(v262 + 8))(v260, v261);
  }
  uint64_t v199 = v520;
  sub_1000BEA14(v264, v265, &qword_100725DE8);
LABEL_113:
  uint64_t v266 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Address();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v266 - 8) + 56))(v506, 1, 1, v266);
  v267 = v514;
  static MobileDocumentElement.address.getter();
  uint64_t v268 = *(void *)(v199 + 16);
  if (!v268)
  {
LABEL_123:
    v176(v267, v55);
    goto LABEL_124;
  }
  v269 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  unint64_t v270 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v271 = v497;
  v269(v497, v199 + v270, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v272 = dispatch thunk of static Equatable.== infix(_:_:)();
  v273 = v271;
  uint64_t v274 = v199;
  v275 = v176;
  v176(v273, v55);
  if ((v272 & 1) == 0)
  {
    v518 = v269;
    uint64_t v277 = v525;
    if (v268 != 1)
    {
      unint64_t v278 = v270;
      uint64_t v279 = *(void *)(v525 + 72);
      unint64_t v280 = v274 + v279 + v278;
      uint64_t v281 = 1;
      v282 = v497;
      while (1)
      {
        v518(v282, v280, v55);
        uint64_t v283 = v281 + 1;
        if (__OFADD__(v281, 1)) {
          goto LABEL_253;
        }
        char v284 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v282, v55);
        if (v284) {
          break;
        }
        ++v281;
        v280 += v279;
        if (v283 == v268)
        {
          uint64_t v199 = v520;
          swift_bridgeObjectRelease();
          uint64_t v56 = v525;
          uint64_t v176 = v526;
          v267 = v514;
          goto LABEL_123;
        }
      }
      uint64_t v276 = v520;
      swift_bridgeObjectRelease();
      v275 = v526;
      goto LABEL_126;
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = v277;
    uint64_t v176 = v275;
    uint64_t v199 = v274;
    v176(v514, v55);
LABEL_124:
    v285 = v509;
    goto LABEL_141;
  }
  uint64_t v276 = v274;
  swift_bridgeObjectRelease();
LABEL_126:
  v275(v514, v55);
  uint64_t v286 = v519;
  uint64_t v288 = (uint64_t)v522;
  uint64_t v287 = v523;
  v518 = *(void (**)(char *, unint64_t, uint64_t))(v519 + 104);
  v518(v522, enum case for ISO18013_5_1_ElementIdentifier.residentAddress(_:), v523);
  uint64_t v289 = sub_1002D88B8(v288);
  unint64_t v291 = v290;
  v292 = *(void (**)(uint64_t, uint64_t))(v286 + 8);
  v292(v288, v287);
  if (v291)
  {
    uint64_t v529 = v289;
    unint64_t v530 = v291;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
    v497 = (char *)*((void *)&v531 + 1);
    v515 = (char *)v531;
  }
  else
  {
    v515 = (char *)v289;
    v497 = 0;
  }
  uint64_t v293 = v523;
  uint64_t v199 = v276;
  uint64_t v294 = (uint64_t)v522;
  v518(v522, enum case for ISO18013_5_1_ElementIdentifier.residentCity(_:), v523);
  uint64_t v295 = sub_1002D88B8(v294);
  unint64_t v297 = v296;
  v292(v294, v293);
  if (v297)
  {
    uint64_t v529 = v295;
    unint64_t v530 = v297;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
    uint64_t v488 = *((void *)&v531 + 1);
    uint64_t v295 = v531;
  }
  else
  {
    uint64_t v488 = 0;
  }
  uint64_t v298 = v523;
  uint64_t v299 = (uint64_t)v522;
  v518(v522, enum case for ISO18013_5_1_ElementIdentifier.residentState(_:), v523);
  uint64_t v300 = sub_1002D88B8(v299);
  unint64_t v302 = v301;
  v292(v299, v298);
  v514 = (char *)v295;
  if (v302)
  {
    uint64_t v529 = v300;
    unint64_t v530 = v302;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
    v482 = (void (*)(char *, unint64_t, uint64_t))*((void *)&v531 + 1);
    v498 = (char *)v531;
  }
  else
  {
    v498 = (char *)v300;
    v482 = 0;
  }
  uint64_t v303 = v523;
  uint64_t v304 = (uint64_t)v522;
  v518(v522, enum case for ISO18013_5_1_ElementIdentifier.residentPostalCode(_:), v523);
  uint64_t v305 = sub_1002D88B8(v304);
  unint64_t v307 = v306;
  v292(v304, v303);
  if (v307)
  {
    uint64_t v529 = v305;
    unint64_t v530 = v307;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
    uint64_t v470 = *((void *)&v531 + 1);
  }
  else
  {
    uint64_t v470 = 0;
  }
  uint64_t v308 = v523;
  uint64_t v309 = (uint64_t)v522;
  v518(v522, enum case for ISO18013_5_1_ElementIdentifier.residentCountry(_:), v523);
  uint64_t v310 = sub_1002D88B8(v309);
  unint64_t v312 = v311;
  v292(v309, v308);
  if (v312)
  {
    uint64_t v529 = v310;
    unint64_t v530 = v312;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v56 = v525;
  uint64_t v176 = v526;
  v313 = v509;
  uint64_t v314 = (uint64_t)v465;
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.Address.init(street:city:state:postalCode:isoCountryCode:)();
  uint64_t v315 = v506;
  sub_10000C6CC(v506, &qword_100729D90);
  sub_1000BEA14(v314, v315, &qword_100729D90);
  v285 = v313;
LABEL_141:
  uint64_t v316 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.IssuingAuthority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v316 - 8) + 56))(v505, 1, 1, v316);
  static MobileDocumentElement.issuingAuthority.getter();
  uint64_t v317 = *(void *)(v199 + 16);
  if (!v317) {
    goto LABEL_151;
  }
  v318 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  v515 = (char *)((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
  v319 = v495;
  v518 = v318;
  v318(v495, (unint64_t)&v515[v199], v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  v320 = v285;
  char v321 = dispatch thunk of static Equatable.== infix(_:_:)();
  v322 = v319;
  uint64_t v323 = v199;
  v324 = v176;
  v176(v322, v55);
  if ((v321 & 1) == 0)
  {
    if (v317 != 1)
    {
      uint64_t v326 = *(void *)(v525 + 72);
      v327 = &v515[v323 + v326];
      uint64_t v328 = 1;
      v329 = v495;
      while (1)
      {
        v518(v329, (unint64_t)v327, v55);
        uint64_t v330 = v328 + 1;
        if (__OFADD__(v328, 1)) {
          goto LABEL_254;
        }
        char v331 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v329, v55);
        if (v331) {
          break;
        }
        ++v328;
        v327 += v326;
        if (v330 == v317)
        {
          uint64_t v199 = v520;
          swift_bridgeObjectRelease();
          uint64_t v56 = v525;
          uint64_t v176 = v526;
          v285 = v509;
          goto LABEL_151;
        }
      }
      uint64_t v325 = v520;
      swift_bridgeObjectRelease();
      v324 = v526;
      v320 = v509;
      goto LABEL_153;
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = v525;
    uint64_t v199 = v323;
    v285 = v320;
LABEL_151:
    v176(v285, v55);
    goto LABEL_161;
  }
  uint64_t v325 = v323;
  swift_bridgeObjectRelease();
LABEL_153:
  v324(v320, v55);
  uint64_t v332 = v519;
  uint64_t v334 = (uint64_t)v522;
  uint64_t v333 = v523;
  v518 = *(void (**)(char *, unint64_t, uint64_t))(v519 + 104);
  v518(v522, enum case for ISO18013_5_1_ElementIdentifier.issuingAuthority(_:), v523);
  uint64_t v335 = sub_1002D88B8(v334);
  unint64_t v337 = v336;
  v338 = *(void (**)(uint64_t, uint64_t))(v332 + 8);
  v338(v334, v333);
  if (v337)
  {
    uint64_t v529 = v335;
    unint64_t v530 = v337;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
    v514 = (char *)*((void *)&v531 + 1);
    v515 = (char *)v531;
  }
  else
  {
    v514 = 0;
    v515 = (char *)v335;
  }
  uint64_t v339 = v523;
  uint64_t v199 = v325;
  uint64_t v340 = (uint64_t)v522;
  v518(v522, enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v523);
  uint64_t v341 = sub_1002D88B8(v340);
  unint64_t v343 = v342;
  v338(v340, v339);
  if (v343)
  {
    uint64_t v529 = v341;
    unint64_t v530 = v343;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v344 = v523;
  uint64_t v345 = (uint64_t)v522;
  v518(v522, enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:), v523);
  uint64_t v346 = sub_1002D88B8(v345);
  unint64_t v348 = v347;
  v338(v345, v344);
  if (v348)
  {
    uint64_t v529 = v346;
    unint64_t v530 = v348;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v56 = v525;
  uint64_t v176 = v526;
  uint64_t v349 = (uint64_t)v464;
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.IssuingAuthority.init(name:jurisdiction:isoCountryCode:)();
  uint64_t v350 = v505;
  sub_10000C6CC(v505, &qword_100729D88);
  sub_1000BEA14(v349, v350, &qword_100729D88);
LABEL_161:
  v351 = v513;
  static MobileDocumentElement.drivingPrivileges.getter();
  v518 = *(void (**)(char *, unint64_t, uint64_t))(v199 + 16);
  if (!v518) {
    goto LABEL_171;
  }
  v352 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  unint64_t v353 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v354 = v494;
  v352(v494, v199 + v353, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v355 = dispatch thunk of static Equatable.== infix(_:_:)();
  v176(v354, v55);
  if ((v355 & 1) == 0)
  {
    if (v518 != (void (*)(char *, unint64_t, uint64_t))1)
    {
      unint64_t v357 = v353;
      uint64_t v358 = *(void *)(v525 + 72);
      unint64_t v359 = v199 + v358 + v357;
      uint64_t v360 = 1;
      v361 = v494;
      while (1)
      {
        v352(v361, v359, v55);
        v362 = (void (*)(char *, unint64_t, uint64_t))(v360 + 1);
        if (__OFADD__(v360, 1)) {
          goto LABEL_255;
        }
        char v363 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v361, v55);
        if (v363) {
          break;
        }
        ++v360;
        v359 += v358;
        if (v362 == v518)
        {
          uint64_t v199 = v520;
          swift_bridgeObjectRelease();
          uint64_t v56 = v525;
          uint64_t v176 = v526;
          v351 = v513;
          goto LABEL_171;
        }
      }
      uint64_t v199 = v520;
      swift_bridgeObjectRelease();
      uint64_t v56 = v525;
      uint64_t v176 = v526;
      v356 = v513;
      goto LABEL_173;
    }
    swift_bridgeObjectRelease();
    v351 = v513;
    uint64_t v56 = v525;
LABEL_171:
    v176(v351, v55);
    v514 = (char *)_swiftEmptyArrayStorage;
    v515 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_174;
  }
  swift_bridgeObjectRelease();
  v356 = v513;
  uint64_t v56 = v525;
LABEL_173:
  v176(v356, v55);
  v515 = sub_100176FD4();
  v514 = sub_1004C1958();
LABEL_174:
  uint64_t v364 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DHSComplianceStatus();
  v513 = *(char **)(v364 - 8);
  v365 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v513 + 7);
  v366 = v513 + 56;
  v365(v504, 1, 1, v364);
  v367 = v512;
  static MobileDocumentElement.documentDHSComplianceStatus.getter();
  uint64_t v368 = *(void *)(v199 + 16);
  if (!v368)
  {
LABEL_184:
    v176(v367, v55);
    v380 = v521;
    goto LABEL_197;
  }
  v497 = v366;
  v498 = (char *)v365;
  v509 = (char *)v364;
  unint64_t v369 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v370 = v493;
  v518 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  v518(v493, v199 + v369, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v371 = dispatch thunk of static Equatable.== infix(_:_:)();
  v372 = v370;
  v373 = v176;
  v176(v372, v55);
  if (v371)
  {
    swift_bridgeObjectRelease();
    goto LABEL_186;
  }
  if (v368 == 1)
  {
    uint64_t v199 = v520;
    swift_bridgeObjectRelease();
    v367 = v512;
    uint64_t v56 = v525;
    goto LABEL_184;
  }
  uint64_t v374 = *(void *)(v525 + 72);
  unint64_t v375 = v520 + v374 + v369;
  uint64_t v376 = 1;
  v377 = v493;
  while (1)
  {
    v518(v377, v375, v55);
    uint64_t v378 = v376 + 1;
    if (__OFADD__(v376, 1)) {
      goto LABEL_256;
    }
    char v379 = dispatch thunk of static Equatable.== infix(_:_:)();
    v526(v377, v55);
    if (v379) {
      break;
    }
    ++v376;
    v375 += v374;
    if (v378 == v368)
    {
      uint64_t v199 = v520;
      swift_bridgeObjectRelease();
      uint64_t v56 = v525;
      uint64_t v176 = v526;
      v367 = v512;
      goto LABEL_184;
    }
  }
  uint64_t v199 = v520;
  swift_bridgeObjectRelease();
  v373 = v526;
LABEL_186:
  v380 = v521;
  uint64_t v176 = v373;
  v373(v512, v55);
  uint64_t v381 = v480;
  uint64_t v382 = (uint64_t)v479;
  uint64_t v383 = v481;
  (*(void (**)(char *, void, uint64_t))(v480 + 104))(v479, enum case for ISO18013_AAMVA_ElementIdentifier.dhsCompliance(_:), v481);
  uint64_t v384 = sub_1002D9EBC(v382);
  uint64_t v386 = v385;
  (*(void (**)(uint64_t, uint64_t))(v381 + 8))(v382, v383);
  uint64_t v56 = v525;
  if (!v386) {
    goto LABEL_197;
  }
  if (v384 == 70 && v386 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v387 = v504;
    sub_10000C6CC(v504, &qword_100729D80);
    swift_bridgeObjectRelease();
    v388 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DHSComplianceStatus.compliant(_:);
  }
  else
  {
    if (v384 == 78 && v386 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v389 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v389 & 1) == 0) {
        goto LABEL_197;
      }
    }
    uint64_t v387 = v504;
    sub_10000C6CC(v504, &qword_100729D80);
    v388 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DHSComplianceStatus.noncompliant(_:);
  }
  v390 = v509;
  (*((void (**)(uint64_t, void, char *))v513 + 13))(v387, *v388, v509);
  ((void (*)(uint64_t, void, uint64_t, char *))v498)(v387, 0, 1, v390);
LABEL_197:
  v391 = v511;
  static MobileDocumentElement.documentNumber.getter();
  if (!*(void *)(v199 + 16)) {
    goto LABEL_207;
  }
  v518 = *(void (**)(char *, unint64_t, uint64_t))(v199 + 16);
  v392 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  unint64_t v393 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v394 = v492;
  v392(v492, v199 + v393, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v395 = dispatch thunk of static Equatable.== infix(_:_:)();
  v176(v394, v55);
  if ((v395 & 1) == 0)
  {
    if (v518 != (void (*)(char *, unint64_t, uint64_t))1)
    {
      uint64_t v398 = *(void *)(v525 + 72);
      unint64_t v399 = v199 + v398 + v393;
      uint64_t v400 = 1;
      v401 = v492;
      while (1)
      {
        v392(v401, v399, v55);
        v402 = (void (*)(char *, unint64_t, uint64_t))(v400 + 1);
        if (__OFADD__(v400, 1)) {
          goto LABEL_257;
        }
        char v403 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v401, v55);
        if (v403) {
          break;
        }
        ++v400;
        v399 += v398;
        if (v402 == v518)
        {
          uint64_t v199 = v520;
          swift_bridgeObjectRelease();
          uint64_t v56 = v525;
          uint64_t v176 = v526;
          v380 = v521;
          v391 = v511;
          goto LABEL_207;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v56 = v525;
      uint64_t v396 = v487;
      uint64_t v176 = v526;
      v397 = v511;
      goto LABEL_209;
    }
    swift_bridgeObjectRelease();
    v380 = v521;
    v391 = v511;
    uint64_t v56 = v525;
LABEL_207:
    v176(v391, v55);
    v513 = 0;
    v512 = 0;
    uint64_t v396 = v487;
    goto LABEL_213;
  }
  swift_bridgeObjectRelease();
  uint64_t v396 = v487;
  v397 = v511;
  uint64_t v56 = v525;
LABEL_209:
  v176(v397, v55);
  uint64_t v404 = v519;
  uint64_t v406 = (uint64_t)v522;
  uint64_t v405 = v523;
  (*(void (**)(char *, void, uint64_t))(v519 + 104))(v522, enum case for ISO18013_5_1_ElementIdentifier.documentNumber(_:), v523);
  uint64_t v407 = sub_1002D88B8(v406);
  unint64_t v409 = v408;
  (*(void (**)(uint64_t, uint64_t))(v404 + 8))(v406, v405);
  if (v409)
  {
    uint64_t v529 = v407;
    unint64_t v530 = v409;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
    v512 = (char *)*((void *)&v531 + 1);
    v513 = (char *)v531;
  }
  else
  {
    v513 = (char *)v407;
    v512 = 0;
  }
  uint64_t v199 = v520;
  v380 = v521;
LABEL_213:
  ((void (*)(uint64_t, uint64_t, uint64_t, char *))v516)(v396, 1, 1, v517);
  static MobileDocumentElement.documentIssueDate.getter();
  uint64_t v410 = *(void *)(v199 + 16);
  if (!v410) {
    goto LABEL_224;
  }
  v411 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  unint64_t v412 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v413 = v491;
  v518 = v411;
  v411(v491, v199 + v412, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v414 = dispatch thunk of static Equatable.== infix(_:_:)();
  v176(v413, v55);
  if ((v414 & 1) == 0)
  {
    if (v410 != 1)
    {
      uint64_t v415 = v199;
      uint64_t v416 = *(void *)(v525 + 72);
      unint64_t v417 = v415 + v416 + v412;
      uint64_t v418 = 1;
      v419 = v491;
      while (1)
      {
        v518(v419, v417, v55);
        uint64_t v420 = v418 + 1;
        if (__OFADD__(v418, 1)) {
          goto LABEL_258;
        }
        char v421 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v419, v55);
        if (v421) {
          break;
        }
        ++v418;
        v417 += v416;
        if (v420 == v410)
        {
          uint64_t v199 = v520;
          swift_bridgeObjectRelease();
          uint64_t v56 = v525;
          uint64_t v176 = v526;
          goto LABEL_223;
        }
      }
      uint64_t v199 = v520;
      swift_bridgeObjectRelease();
      uint64_t v176 = v526;
      goto LABEL_226;
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = v525;
LABEL_223:
    v380 = v521;
LABEL_224:
    v176(v380, v55);
    goto LABEL_230;
  }
  swift_bridgeObjectRelease();
LABEL_226:
  v176(v521, v55);
  uint64_t v422 = v519;
  uint64_t v424 = (uint64_t)v522;
  uint64_t v423 = v523;
  (*(void (**)(char *, void, uint64_t))(v519 + 104))(v522, enum case for ISO18013_5_1_ElementIdentifier.issueDate(_:), v523);
  uint64_t v425 = v463;
  sub_1002D9010(v424, (uint64_t (*)(void))&type metadata accessor for Date, v463);
  (*(void (**)(uint64_t, uint64_t))(v422 + 8))(v424, v423);
  uint64_t v426 = type metadata accessor for Date();
  uint64_t v427 = *(void *)(v426 - 8);
  int v428 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v427 + 48))(v425, 1, v426);
  uint64_t v56 = v525;
  if (v428 == 1)
  {
    uint64_t v429 = v487;
    sub_10000C6CC(v487, &qword_100725DE8);
    sub_10000C6CC(v425, &qword_1007239B0);
    uint64_t v430 = (uint64_t)v462;
    ((void (*)(char *, uint64_t, uint64_t, char *))v516)(v462, 1, 1, v517);
  }
  else
  {
    uint64_t v430 = (uint64_t)v462;
    Date.utcDayRepresentation.getter();
    uint64_t v429 = v487;
    sub_10000C6CC(v487, &qword_100725DE8);
    (*(void (**)(uint64_t, uint64_t))(v427 + 8))(v425, v426);
  }
  sub_1000BEA14(v430, v429, &qword_100725DE8);
LABEL_230:
  v431 = v510;
  ((void (*)(uint64_t, uint64_t, uint64_t, char *))v516)(v486, 1, 1, v517);
  static MobileDocumentElement.documentExpirationDate.getter();
  uint64_t v432 = *(void *)(v199 + 16);
  if (!v432) {
    goto LABEL_240;
  }
  v433 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  unint64_t v434 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v435 = v490;
  v433(v490, v199 + v434, v55);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v436 = dispatch thunk of static Equatable.== infix(_:_:)();
  v437 = v435;
  v438 = v176;
  v176(v437, v55);
  if ((v436 & 1) == 0)
  {
    v521 = (char *)v433;
    if (v432 != 1)
    {
      uint64_t v439 = v199;
      uint64_t v440 = *(void *)(v525 + 72);
      unint64_t v441 = v439 + v440 + v434;
      uint64_t v442 = 1;
      v443 = v490;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v521)(v443, v441, v55);
        uint64_t v444 = v442 + 1;
        if (__OFADD__(v442, 1)) {
          goto LABEL_259;
        }
        char v445 = dispatch thunk of static Equatable.== infix(_:_:)();
        v526(v443, v55);
        if (v445) {
          break;
        }
        ++v442;
        v441 += v440;
        if (v444 == v432)
        {
          swift_bridgeObjectRelease();
          v431 = v510;
          uint64_t v176 = v526;
          goto LABEL_240;
        }
      }
      swift_bridgeObjectRelease();
      v438 = v526;
      goto LABEL_242;
    }
    swift_bridgeObjectRelease();
    v431 = v510;
LABEL_240:
    v176(v431, v55);
    swift_bridgeObjectRelease();
    uint64_t v446 = v486;
    uint64_t v447 = v507;
    goto LABEL_246;
  }
  swift_bridgeObjectRelease();
LABEL_242:
  v438(v510, v55);
  swift_bridgeObjectRelease();
  uint64_t v448 = v519;
  uint64_t v450 = (uint64_t)v522;
  uint64_t v449 = v523;
  (*(void (**)(char *, void, uint64_t))(v519 + 104))(v522, enum case for ISO18013_5_1_ElementIdentifier.expiryDate(_:), v523);
  uint64_t v451 = v461;
  sub_1002D9010(v450, (uint64_t (*)(void))&type metadata accessor for Date, v461);
  (*(void (**)(uint64_t, uint64_t))(v448 + 8))(v450, v449);
  uint64_t v452 = type metadata accessor for Date();
  uint64_t v453 = *(void *)(v452 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v453 + 48))(v451, 1, v452) == 1)
  {
    uint64_t v454 = v486;
    sub_10000C6CC(v486, &qword_100725DE8);
    sub_10000C6CC(v451, &qword_1007239B0);
    uint64_t v455 = (uint64_t)v460;
    ((void (*)(char *, uint64_t, uint64_t, char *))v516)(v460, 1, 1, v517);
  }
  else
  {
    uint64_t v455 = (uint64_t)v460;
    Date.utcDayRepresentation.getter();
    uint64_t v454 = v486;
    sub_10000C6CC(v486, &qword_100725DE8);
    (*(void (**)(uint64_t, uint64_t))(v453 + 8))(v451, v452);
  }
  uint64_t v447 = v507;
  sub_1000BEA14(v455, v454, &qword_100725DE8);
  uint64_t v446 = v454;
LABEL_246:
  (*(void (**)(char *, char *, uint64_t))(v484 + 16))(v483, v502, v485);
  sub_100048D6C(v496, v471, &qword_100729D98);
  sub_100048D6C(v447, v474, &qword_100725DE8);
  sub_100048D6C(v506, v475, &qword_100729D90);
  sub_100048D6C(v505, v476, &qword_100729D88);
  sub_100048D6C(v504, v477, &qword_100729D80);
  uint64_t v456 = v487;
  sub_100048D6C(v487, v472, &qword_100725DE8);
  sub_100048D6C(v446, v473, &qword_100725DE8);
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.init(nameComponents:sex:portraitData:age:ageAtLeastElements:dateOfBirth:address:nationality:issuingAuthority:drivingPrivileges:aamvaDrivingPrivileges:documentDHSComplianceStatus:documentNumber:documentIssueDate:documentExpirationDate:)();
  uint64_t v457 = type metadata accessor for ISO18013Response.IssuerSigned();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v457 - 8) + 8))(v524, v457);
  sub_10000C6CC(v446, &qword_100725DE8);
  sub_10000C6CC(v456, &qword_100725DE8);
  sub_10000C6CC(v504, &qword_100729D80);
  sub_10000C6CC(v505, &qword_100729D88);
  sub_10000C6CC(v506, &qword_100729D90);
  sub_10000C6CC(v507, &qword_100725DE8);
  sub_10000C6CC(v496, &qword_100729D98);
  return (*(uint64_t (**)(char *, uint64_t))(v484 + 8))(v502, v485);
}

uint64_t sub_1002E22E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v245 = a1;
  uint64_t v215 = a3;
  uint64_t v4 = sub_100007764(&qword_100729D80);
  __chkstk_darwin(v4 - 8);
  double v214 = (char *)&v203 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_100729D88);
  __chkstk_darwin(v6 - 8);
  uint64_t v213 = (char *)&v203 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_100729D90);
  __chkstk_darwin(v8 - 8);
  uint64_t v212 = (char *)&v203 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v203 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100725DE8);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v203 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v203 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v227 = (uint64_t)&v203 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v205 = (char *)&v203 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v203 - v24;
  uint64_t v209 = type metadata accessor for ISO18013KnownNamespaces();
  uint64_t v208 = *(void *)(v209 - 8);
  __chkstk_darwin(v209);
  v207 = (char *)&v203 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = type metadata accessor for ISO23220_1_ElementIdentifier();
  uint64_t v220 = *(void *)(v221 - 8);
  __chkstk_darwin(v221);
  unint64_t v219 = (char *)&v203 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100007764(&qword_100729D98);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v226 = (uint64_t)&v203 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v239 = (uint64_t)&v203 - v31;
  uint64_t v32 = sub_100007764(&qword_100729DD8);
  __chkstk_darwin(v32 - 8);
  uint64_t v204 = (char *)&v203 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier();
  uint64_t v217 = *(void *)(v218 - 8);
  __chkstk_darwin(v218);
  v216 = (char *)&v203 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for MobileDocumentElement();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v235 = (char *)&v203 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v240 = (char *)&v203 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v236 = (char *)&v203 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  char v243 = (char *)&v203 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  unint64_t v237 = (char *)&v203 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v203 - v48;
  uint64_t v50 = __chkstk_darwin(v47);
  char v238 = (char *)&v203 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  v244 = (char *)&v203 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t v225 = (char *)&v203 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v230 = (char *)&v203 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  uint64_t v60 = (char *)&v203 - v59;
  __chkstk_darwin(v58);
  uint64_t v62 = (void (*)(char *, unint64_t, uint64_t))((char *)&v203 - v61);
  uint64_t v229 = type metadata accessor for PersonNameComponents();
  uint64_t v223 = *(void *)(v229 - 8);
  uint64_t v63 = __chkstk_darwin(v229);
  char v228 = (char *)&v203 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v63);
  uint64_t v234 = (char *)&v203 - v65;
  static MobileDocumentElement.givenName.getter();
  uint64_t v66 = *(void *)(a2 + 16);
  v232 = v25;
  uint64_t v242 = v36;
  uint64_t v231 = v66;
  uint64_t v211 = v16;
  uint64_t v210 = v19;
  uint64_t v222 = a2;
  uint64_t v206 = v12;
  uint64_t v241 = v49;
  if (v66)
  {
    unint64_t v203 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    uint64_t v67 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
    v67(v60, a2 + v203, v35);
    sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
    swift_bridgeObjectRetain();
    uint64_t v233 = v62;
    char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v69 = *(void (**)(char *, uint64_t))(v36 + 8);
    uint64_t v70 = (v36 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v71 = v69;
    v69(v60, v35);
    if (v68)
    {
      swift_bridgeObjectRelease();
LABEL_26:
      v71((char *)v233, v35);
      goto LABEL_29;
    }
    unint64_t v224 = v67;
    if (v231 != 1)
    {
      uint64_t v246 = v70;
      uint64_t v247 = v71;
      uint64_t v73 = *(void *)(v242 + 72);
      unint64_t v74 = a2 + v73 + v203;
      uint64_t v75 = 1;
      while (1)
      {
        v224(v60, v74, v35);
        uint64_t v76 = v75 + 1;
        if (__OFADD__(v75, 1))
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
          JUMPOUT(0x1002E4008);
        }
        char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
        v247(v60, v35);
        if (v77) {
          break;
        }
        ++v75;
        v74 += v73;
        if (v76 == v231)
        {
          a2 = v222;
          swift_bridgeObjectRelease();
          uint64_t v70 = v246;
          uint64_t v71 = v247;
          goto LABEL_12;
        }
      }
      a2 = v222;
      swift_bridgeObjectRelease();
      uint64_t v70 = v246;
      uint64_t v71 = v247;
      goto LABEL_26;
    }
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v72 = v230;
    v71((char *)v233, v35);
  }
  else
  {
    uint64_t v71 = *(void (**)(char *, uint64_t))(v36 + 8);
    uint64_t v70 = (v36 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v72 = v230;
    v71((char *)v62, v35);
  }
  static MobileDocumentElement.familyName.getter();
  uint64_t v78 = *(void *)(a2 + 16);
  uint64_t v247 = v71;
  if (!v78) {
    goto LABEL_24;
  }
  uint64_t v246 = v70;
  uint64_t v79 = v71;
  uint64_t v80 = *(void (**)(char *, unint64_t, uint64_t))(v242 + 16);
  unint64_t v81 = (*(unsigned __int8 *)(v242 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80);
  uint64_t v82 = v225;
  v80(v225, a2 + v81, v35);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
  v79(v82, v35);
  uint64_t v70 = v246;
  if ((v83 & 1) == 0)
  {
    if (v78 != 1)
    {
      uint64_t v233 = v80;
      uint64_t v84 = *(void *)(v242 + 72);
      unint64_t v85 = a2 + v84 + v81;
      uint64_t v86 = 1;
      uint64_t v87 = v225;
      while (1)
      {
        v233(v87, v85, v35);
        uint64_t v88 = v86 + 1;
        if (__OFADD__(v86, 1)) {
          goto LABEL_115;
        }
        char v89 = dispatch thunk of static Equatable.== infix(_:_:)();
        v247(v87, v35);
        if (v89) {
          break;
        }
        ++v86;
        v85 += v84;
        if (v88 == v78)
        {
          a2 = v222;
          swift_bridgeObjectRelease();
          uint64_t v70 = v246;
          uint64_t v71 = v247;
          goto LABEL_23;
        }
      }
      a2 = v222;
      swift_bridgeObjectRelease();
      uint64_t v70 = v246;
      goto LABEL_28;
    }
    swift_bridgeObjectRelease();
    uint64_t v71 = v247;
LABEL_23:
    uint64_t v72 = v230;
LABEL_24:
    v71(v72, v35);
    uint64_t v90 = v244;
    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v71 = v247;
  v247(v230, v35);
LABEL_29:
  uint64_t v91 = v217;
  uint64_t v92 = (uint64_t)v216;
  uint64_t v93 = v218;
  (*(void (**)(char *, void, uint64_t))(v217 + 104))(v216, enum case for ISO23220_1_Japan_ElementIdentifier.fullName(_:), v218);
  uint64_t v94 = sub_1002DBBB0(v92);
  unint64_t v96 = v95;
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v92, v93);
  uint64_t v247 = v71;
  if (v96)
  {
    uint64_t v249 = v94;
    unint64_t v250 = v96;
    sub_1000D5D70();
    Collection.nilIfEmpty.getter();
    swift_bridgeObjectRelease();
    uint64_t v90 = v244;
    if (*((void *)&v251 + 1))
    {
      id v97 = [objc_allocWithZone((Class)NSPersonNameComponentsFormatter) init];
      NSString v98 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v99 = [v97 personNameComponentsFromString:v98];

      if (v99)
      {
        uint64_t v100 = v228;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v101 = v223;
        uint64_t v102 = *(void (**)(char *, char *, uint64_t))(v223 + 32);
        uint64_t v103 = (uint64_t)v204;
        uint64_t v104 = v100;
        uint64_t v105 = v229;
        v102(v204, v104, v229);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v101 + 56))(v103, 0, 1, v105);
        uint64_t v106 = v101;
        uint64_t v90 = v244;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v103, 1, v105) != 1)
        {
          v102(v234, (char *)v103, v229);
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v103 = (uint64_t)v204;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v223 + 56))(v204, 1, 1, v229);
      }
      sub_10000C6CC(v103, &qword_100729DD8);
    }
  }
  else
  {
    uint64_t v90 = v244;
  }
LABEL_37:
  PersonNameComponents.init()();
LABEL_38:
  uint64_t v107 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex();
  uint64_t v231 = *(void *)(v107 - 8);
  uint64_t v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v231 + 56);
  uint64_t v109 = (void (*)(char *, unint64_t, uint64_t))(v231 + 56);
  v108(v239, 1, 1, v107);
  static MobileDocumentElement.sex.getter();
  uint64_t v110 = *(void *)(a2 + 16);
  uint64_t v246 = v70;
  if (!v110) {
    goto LABEL_49;
  }
  unint64_t v224 = v109;
  uint64_t v225 = (char *)v108;
  uint64_t v230 = (char *)v107;
  unint64_t v111 = (*(unsigned __int8 *)(v242 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80);
  unint64_t v112 = a2 + v111;
  uint64_t v113 = a2;
  uint64_t v114 = v238;
  uint64_t v233 = *(void (**)(char *, unint64_t, uint64_t))(v242 + 16);
  v233(v238, v112, v35);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v115 = dispatch thunk of static Equatable.== infix(_:_:)();
  v247(v114, v35);
  if ((v115 & 1) == 0)
  {
    if (v110 != 1)
    {
      uint64_t v116 = *(void *)(v242 + 72);
      unint64_t v117 = v113 + v116 + v111;
      uint64_t v118 = 1;
      char v119 = v238;
      while (1)
      {
        v233(v119, v117, v35);
        uint64_t v120 = v118 + 1;
        if (__OFADD__(v118, 1)) {
          goto LABEL_111;
        }
        char v121 = dispatch thunk of static Equatable.== infix(_:_:)();
        v247(v119, v35);
        if (v121) {
          break;
        }
        ++v118;
        v117 += v116;
        if (v120 == v110)
        {
          a2 = v222;
          goto LABEL_48;
        }
      }
      a2 = v222;
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    a2 = v113;
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v90 = v244;
LABEL_49:
    v247(v90, v35);
    uint64_t v122 = v241;
    goto LABEL_58;
  }
  swift_bridgeObjectRelease();
  a2 = v113;
LABEL_51:
  v247(v244, v35);
  uint64_t v123 = v220;
  uint64_t v124 = (uint64_t)v219;
  uint64_t v125 = v221;
  (*(void (**)(char *, void, uint64_t))(v220 + 104))(v219, enum case for ISO23220_1_ElementIdentifier.sex(_:), v221);
  uint64_t v126 = sub_1002DC2F0(v124);
  char v128 = v127;
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v124, v125);
  uint64_t v122 = v241;
  if ((v128 & 1) == 0)
  {
    switch(v126)
    {
      case 0:
        uint64_t v129 = v239;
        sub_10000C6CC(v239, &qword_100729D98);
        uint64_t v130 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.unknown(_:);
        goto LABEL_57;
      case 1:
        uint64_t v129 = v239;
        sub_10000C6CC(v239, &qword_100729D98);
        uint64_t v130 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.male(_:);
        goto LABEL_57;
      case 2:
        uint64_t v129 = v239;
        sub_10000C6CC(v239, &qword_100729D98);
        uint64_t v130 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.female(_:);
        goto LABEL_57;
      case 9:
        uint64_t v129 = v239;
        sub_10000C6CC(v239, &qword_100729D98);
        uint64_t v130 = (unsigned int *)&enum case for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Sex.notApplicable(_:);
LABEL_57:
        unint64_t v131 = v230;
        (*(void (**)(uint64_t, void, char *))(v231 + 104))(v129, *v130, v230);
        ((void (*)(uint64_t, void, uint64_t, char *))v225)(v129, 0, 1, v131);
        break;
      default:
        break;
    }
  }
LABEL_58:
  static MobileDocumentElement.portrait.getter();
  uint64_t v132 = *(void *)(a2 + 16);
  if (!v132) {
    goto LABEL_68;
  }
  unint64_t v133 = (*(unsigned __int8 *)(v242 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80);
  uint64_t v134 = v237;
  v244 = *(char **)(v242 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v244)(v237, a2 + v133, v35);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v135 = dispatch thunk of static Equatable.== infix(_:_:)();
  v247(v134, v35);
  if ((v135 & 1) == 0)
  {
    if (v132 != 1)
    {
      uint64_t v136 = *(void *)(v242 + 72);
      unint64_t v137 = a2 + v136 + v133;
      uint64_t v138 = 1;
      uint64_t v139 = v237;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v244)(v139, v137, v35);
        uint64_t v140 = v138 + 1;
        if (__OFADD__(v138, 1)) {
          goto LABEL_112;
        }
        char v141 = dispatch thunk of static Equatable.== infix(_:_:)();
        v247(v139, v35);
        if (v141) {
          break;
        }
        ++v138;
        v137 += v136;
        if (v140 == v132)
        {
          a2 = v222;
          swift_bridgeObjectRelease();
          uint64_t v122 = v241;
          goto LABEL_68;
        }
      }
      a2 = v222;
      swift_bridgeObjectRelease();
      uint64_t v122 = v241;
      goto LABEL_70;
    }
    swift_bridgeObjectRelease();
LABEL_68:
    v247(v122, v35);
    unint64_t v237 = 0;
    uint64_t v233 = (void (*)(char *, unint64_t, uint64_t))0xF000000000000000;
    char v142 = v243;
    goto LABEL_73;
  }
  swift_bridgeObjectRelease();
LABEL_70:
  v247(v122, v35);
  uint64_t v143 = v217;
  uint64_t v144 = (uint64_t)v216;
  uint64_t v145 = v218;
  (*(void (**)(char *, void, uint64_t))(v217 + 104))(v216, enum case for ISO23220_1_Japan_ElementIdentifier.portrait(_:), v218);
  double v146 = sub_1002DCA34(v144, &v251);
  (*(void (**)(uint64_t, uint64_t, double))(v143 + 8))(v144, v145, v146);
  unint64_t v148 = *((void *)&v251 + 1);
  uint64_t v147 = v251;
  if (*((void *)&v251 + 1) >> 60 != 15)
  {
    long long v248 = v251;
    sub_1002E4D48();
    Collection.nilIfEmpty.getter();
    sub_10000C5E0(v147, v148);
    uint64_t v147 = v249;
    unint64_t v148 = v250;
  }
  char v142 = v243;
  uint64_t v233 = (void (*)(char *, unint64_t, uint64_t))v148;
  unint64_t v237 = (char *)v147;
LABEL_73:
  static MobileDocumentElement.age.getter();
  uint64_t v149 = *(void *)(a2 + 16);
  if (!v149) {
    goto LABEL_83;
  }
  unint64_t v150 = (*(unsigned __int8 *)(v242 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80);
  uint64_t v151 = v236;
  v244 = *(char **)(v242 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v244)(v236, a2 + v150, v35);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v152 = dispatch thunk of static Equatable.== infix(_:_:)();
  v247(v151, v35);
  if ((v152 & 1) == 0)
  {
    if (v149 != 1)
    {
      uint64_t v153 = *(void *)(v242 + 72);
      unint64_t v154 = a2 + v153 + v150;
      uint64_t v155 = 1;
      uint64_t v156 = v236;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v244)(v156, v154, v35);
        uint64_t v157 = v155 + 1;
        if (__OFADD__(v155, 1)) {
          goto LABEL_113;
        }
        char v158 = dispatch thunk of static Equatable.== infix(_:_:)();
        v247(v156, v35);
        if (v158) {
          break;
        }
        ++v155;
        v154 += v153;
        char v142 = v243;
        if (v157 == v149)
        {
          a2 = v222;
          swift_bridgeObjectRelease();
          goto LABEL_83;
        }
      }
      a2 = v222;
      swift_bridgeObjectRelease();
      goto LABEL_85;
    }
    swift_bridgeObjectRelease();
    char v142 = v243;
LABEL_83:
    v247(v142, v35);
    uint64_t v236 = 0;
    LODWORD(v231) = 1;
    goto LABEL_86;
  }
  swift_bridgeObjectRelease();
LABEL_85:
  v247(v243, v35);
  uint64_t v159 = v220;
  uint64_t v160 = (uint64_t)v219;
  uint64_t v161 = v221;
  (*(void (**)(char *, void, uint64_t))(v220 + 104))(v219, enum case for ISO23220_1_ElementIdentifier.ageInYears(_:), v221);
  uint64_t v236 = (char *)sub_1002DC2F0(v160);
  LODWORD(v231) = v162 & 1;
  (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v160, v161);
LABEL_86:
  uint64_t v163 = ISO18013Response.IssuerSigned.namespaces.getter();
  uint64_t v164 = v240;
  if (v163)
  {
    uint64_t v165 = v163;
    unint64_t v166 = v207;
    static ISO23220_1_ElementIdentifier.namespaceIdentifier.getter();
    uint64_t v167 = ISO18013KnownNamespaces.rawValue.getter();
    uint64_t v169 = v168;
    (*(void (**)(char *, uint64_t))(v208 + 8))(v166, v209);
    if (*(void *)(v165 + 16) && (unint64_t v170 = sub_100590548(v167, v169), (v171 & 1) != 0))
    {
      uint64_t v172 = *(void *)(*(void *)(v165 + 56) + 8 * v170);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v172 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v172 = 0;
  }
  uint64_t v230 = (char *)sub_1002E4224(v172, (uint64_t (*)(uint64_t, uint64_t))j___s7CoreIDV28ISO23220_1_ElementIdentifierO09isAgeOverD0ySbSSFZ, 0, (uint64_t (*)(uint64_t, uint64_t))sub_1002E4054, 0, a2);
  swift_bridgeObjectRelease();
  uint64_t v173 = type metadata accessor for DateComponents();
  uint64_t v174 = *(void *)(v173 - 8);
  char v175 = *(char **)(v174 + 56);
  char v243 = (char *)v173;
  uint64_t v241 = v175;
  char v238 = (char *)(v174 + 56);
  ((void (*)(char *, uint64_t, uint64_t))v175)(v232, 1, 1);
  static MobileDocumentElement.dateOfBirth.getter();
  uint64_t v176 = *(void *)(a2 + 16);
  if (!v176) {
    goto LABEL_103;
  }
  unint64_t v177 = (*(unsigned __int8 *)(v242 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80);
  uint64_t v178 = v235;
  v244 = *(char **)(v242 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v244)(v235, a2 + v177, v35);
  sub_1002E4E7C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v179 = dispatch thunk of static Equatable.== infix(_:_:)();
  v247(v178, v35);
  if ((v179 & 1) == 0)
  {
    if (v176 != 1)
    {
      uint64_t v180 = *(void *)(v242 + 72);
      unint64_t v181 = v222 + v180 + v177;
      uint64_t v182 = 1;
      while (1)
      {
        uint64_t v183 = v235;
        ((void (*)(char *, unint64_t, uint64_t))v244)(v235, v181, v35);
        uint64_t v184 = v182 + 1;
        if (__OFADD__(v182, 1)) {
          goto LABEL_114;
        }
        char v185 = dispatch thunk of static Equatable.== infix(_:_:)();
        v247(v183, v35);
        if (v185) {
          break;
        }
        ++v182;
        v181 += v180;
        if (v184 == v176)
        {
          swift_bridgeObjectRelease();
          uint64_t v164 = v240;
          goto LABEL_103;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v164 = v240;
      goto LABEL_105;
    }
    swift_bridgeObjectRelease();
LABEL_103:
    v247(v164, v35);
    swift_bridgeObjectRelease();
    goto LABEL_109;
  }
  swift_bridgeObjectRelease();
LABEL_105:
  v247(v164, v35);
  swift_bridgeObjectRelease();
  uint64_t v186 = v220;
  uint64_t v187 = (uint64_t)v219;
  uint64_t v188 = v221;
  (*(void (**)(char *, void, uint64_t))(v220 + 104))(v219, enum case for ISO23220_1_ElementIdentifier.birthDate(_:), v221);
  uint64_t v189 = (uint64_t)v206;
  sub_1002DD160(v187, (uint64_t)v206);
  (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v187, v188);
  uint64_t v190 = type metadata accessor for Date();
  uint64_t v191 = *(void *)(v190 - 8);
  int v192 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 48))(v189, 1, v190);
  uint64_t v193 = (uint64_t)v205;
  if (v192 == 1)
  {
    sub_10000C6CC((uint64_t)v232, &qword_100725DE8);
    sub_10000C6CC(v189, &qword_1007239B0);
    ((void (*)(uint64_t, uint64_t, uint64_t, char *))v241)(v193, 1, 1, v243);
  }
  else
  {
    Date.utcDayRepresentation.getter();
    sub_10000C6CC((uint64_t)v232, &qword_100725DE8);
    (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v189, v190);
  }
  sub_1000BEA14(v193, (uint64_t)v232, &qword_100725DE8);
LABEL_109:
  uint64_t v194 = v223;
  (*(void (**)(char *, char *, uint64_t))(v223 + 16))(v228, v234, v229);
  sub_100048D6C(v239, v226, &qword_100729D98);
  uint64_t v195 = (uint64_t)v232;
  sub_100048D6C((uint64_t)v232, v227, &qword_100725DE8);
  uint64_t v196 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.Address();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v196 - 8) + 56))(v212, 1, 1, v196);
  uint64_t v197 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.IssuingAuthority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v197 - 8) + 56))(v213, 1, 1, v197);
  uint64_t v198 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DHSComplianceStatus();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v198 - 8) + 56))(v214, 1, 1, v198);
  uint64_t v199 = v243;
  uint64_t v200 = (void (*)(char *, uint64_t, uint64_t, char *))v241;
  ((void (*)(char *, uint64_t, uint64_t, char *))v241)(v210, 1, 1, v243);
  v200(v211, 1, 1, v199);
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.init(nameComponents:sex:portraitData:age:ageAtLeastElements:dateOfBirth:address:nationality:issuingAuthority:drivingPrivileges:aamvaDrivingPrivileges:documentDHSComplianceStatus:documentNumber:documentIssueDate:documentExpirationDate:)();
  uint64_t v201 = type metadata accessor for ISO18013Response.IssuerSigned();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v201 - 8) + 8))(v245, v201);
  sub_10000C6CC(v195, &qword_100725DE8);
  sub_10000C6CC(v239, &qword_100729D98);
  return (*(uint64_t (**)(char *, uint64_t))(v194 + 8))(v234, v229);
}

uint64_t sub_1002E4034()
{
  return static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)();
}

uint64_t sub_1002E4054()
{
  return static ISO23220_1_ElementIdentifier.parseAgeOverElement(_:)();
}

uint64_t sub_1002E4070(int a1, int a2, Swift::Int a3, uint64_t a4, void *a5)
{
  _StringGuts.grow(_:)(a3);
  v7._unint64_t object = (void *)0x8000000100648390;
  v7._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = a4;
  v9._unint64_t object = a5;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 46;
  v11._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0;
}

uint64_t sub_1002E417C(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 46;
  v8._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

unint64_t sub_1002E4224(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v118 = a4;
  uint64_t v119 = a5;
  uint64_t v122 = a2;
  uint64_t v123 = a3;
  uint64_t v107 = type metadata accessor for Logger();
  uint64_t v125 = *(char **)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v106 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for AnyCodable();
  uint64_t v9 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v113 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for ISO18013IssuerSignedItem();
  uint64_t v11 = *(void *)(v115 - 8);
  uint64_t v12 = __chkstk_darwin(v115);
  unint64_t v112 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v97 - v14;
  uint64_t v16 = sub_100007764(&qword_100720E08);
  uint64_t v100 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v19 = sub_100541DAC(a6);
    unint64_t v108 = sub_10016DA04((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v102 = *((void *)v19 + 2);
    if (v102)
    {
      unint64_t v20 = 0;
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v101 = v19 + 32;
      uint64_t v121 = v100 + 16;
      uint64_t v116 = (void (**)(char *, uint64_t))(v11 + 8);
      unint64_t v111 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v105 = (void (**)(char *, uint64_t))(v125 + 8);
      uint64_t v120 = (void (**)(char *, uint64_t))(v100 + 8);
      uint64_t v22 = v115;
      uint64_t v99 = a1;
      uint64_t v110 = v18;
      NSString v98 = v19;
      uint64_t v97 = v21;
      unint64_t v117 = v15;
      while (v20 < *((void *)v19 + 2))
      {
        uint64_t v109 = *(void *)&v101[8 * v20];
        if (v21)
        {
          unint64_t v103 = v20;
          uint64_t v25 = a1 + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
          uint64_t v26 = *(char **)(v100 + 16);
          uint64_t v124 = *(void *)(v100 + 72);
          uint64_t v125 = v26;
          swift_bridgeObjectRetain();
          uint64_t v27 = v116;
          while (1)
          {
            ((void (*)(char *, uint64_t, uint64_t))v125)(v18, v25, v16);
            CBOREncodedCBOR.value.getter();
            uint64_t v28 = ISO18013IssuerSignedItem.elementIdentifier.getter();
            uint64_t v30 = v29;
            uint64_t v31 = *v27;
            (*v27)(v15, v22);
            LOBYTE(v28) = v122(v28, v30);
            swift_bridgeObjectRelease();
            if (v28)
            {
              CBOREncodedCBOR.value.getter();
              uint64_t v32 = ISO18013IssuerSignedItem.elementIdentifier.getter();
              uint64_t v34 = v33;
              v31(v15, v22);
              uint64_t v35 = v118(v32, v34);
              LOBYTE(v32) = v36;
              swift_bridgeObjectRelease();
              if ((v32 & 1) == 0)
              {
                uint64_t v37 = v16;
                uint64_t v38 = v112;
                uint64_t v39 = v37;
                CBOREncodedCBOR.value.getter();
                uint64_t v40 = v113;
                ISO18013IssuerSignedItem.elementValue.getter();
                v31(v38, v22);
                AnyCodable.value.getter();
                (*v111)(v40, v114);
                if (v127[3])
                {
                  if (swift_dynamicCast())
                  {
                    int v41 = v126;
                    uint64_t v42 = v109;
                    uint64_t v16 = v39;
                    if (v35 == v109)
                    {
                      uint64_t v43 = v106;
                      uint64_t v44 = defaultLogger()();
                      __chkstk_darwin(v44);
                      *(&v97 - 2) = v42;
                      Logger.sensitive(_:)();
                      (*v105)(v43, v107);
                      unint64_t v45 = v108;
                      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      v127[0] = v45;
                      unint64_t v48 = sub_1005906D8(v42);
                      uint64_t v49 = *(void *)(v45 + 16);
                      BOOL v50 = (v47 & 1) == 0;
                      uint64_t v51 = v49 + v50;
                      uint64_t v18 = v110;
                      if (__OFADD__(v49, v50)) {
                        goto LABEL_61;
                      }
                      int v104 = v41;
                      if (*(void *)(v45 + 24) >= v51)
                      {
                        uint64_t v27 = v116;
                        uint64_t v15 = v117;
                        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                        {
                          char v93 = v47;
                          sub_10016B818();
                          char v47 = v93;
                        }
                      }
                      else
                      {
                        char v52 = v47;
                        sub_100166818(v51, isUniquelyReferenced_nonNull_native);
                        unint64_t v53 = sub_1005906D8(v42);
                        int v55 = v54 & 1;
                        char v47 = v52;
                        int v56 = v52 & 1;
                        uint64_t v27 = v116;
                        uint64_t v15 = v117;
                        if (v56 != v55) {
                          goto LABEL_67;
                        }
                        unint64_t v48 = v53;
                      }
                      unint64_t v85 = (void *)v127[0];
                      unint64_t v108 = v127[0];
                      if (v47)
                      {
                        *(unsigned char *)(*(void *)(v127[0] + 56) + v48) = v104;
LABEL_49:
                        swift_bridgeObjectRelease();
                        uint64_t v22 = v115;
                        goto LABEL_10;
                      }
                      *(void *)(v127[0] + 8 * (v48 >> 6) + 64) |= 1 << v48;
                      *(void *)(v85[6] + 8 * v48) = v42;
                      *(unsigned char *)(v85[7] + v48) = v104;
                      uint64_t v86 = v85[2];
                      BOOL v87 = __OFADD__(v86, 1);
                      uint64_t v88 = v86 + 1;
                      if (v87) {
                        goto LABEL_63;
                      }
                      goto LABEL_48;
                    }
                    uint64_t v18 = v110;
                    if (v35 < v109 && (v126 & 1) == 0)
                    {
                      uint64_t v57 = v106;
                      uint64_t v58 = defaultLogger()();
                      __chkstk_darwin(v58);
                      *(&v97 - 2) = v35;
                      *(&v97 - 1) = v42;
                      Logger.sensitive(_:)();
                      (*v105)(v57, v107);
                      unint64_t v59 = v108;
                      char v60 = swift_isUniquelyReferenced_nonNull_native();
                      v127[0] = v59;
                      unint64_t v62 = sub_1005906D8(v42);
                      uint64_t v63 = *(void *)(v59 + 16);
                      BOOL v64 = (v61 & 1) == 0;
                      uint64_t v65 = v63 + v64;
                      if (__OFADD__(v63, v64)) {
                        goto LABEL_62;
                      }
                      if (*(void *)(v59 + 24) >= v65)
                      {
                        uint64_t v27 = v116;
                        uint64_t v15 = v117;
                        if ((v60 & 1) == 0)
                        {
                          char v94 = v61;
                          sub_10016B818();
                          char v61 = v94;
                        }
                      }
                      else
                      {
                        char v66 = v61;
                        sub_100166818(v65, v60);
                        unint64_t v67 = sub_1005906D8(v42);
                        int v69 = v68 & 1;
                        char v61 = v66;
                        int v70 = v66 & 1;
                        uint64_t v27 = v116;
                        uint64_t v15 = v117;
                        if (v70 != v69) {
                          goto LABEL_67;
                        }
                        unint64_t v62 = v67;
                      }
                      unint64_t v85 = (void *)v127[0];
                      unint64_t v108 = v127[0];
                      if (v61)
                      {
                        *(unsigned char *)(*(void *)(v127[0] + 56) + v62) = 0;
                        goto LABEL_49;
                      }
                      *(void *)(v127[0] + 8 * (v62 >> 6) + 64) |= 1 << v62;
                      *(void *)(v85[6] + 8 * v62) = v42;
                      *(unsigned char *)(v85[7] + v62) = 0;
                      uint64_t v89 = v85[2];
                      BOOL v87 = __OFADD__(v89, 1);
                      uint64_t v88 = v89 + 1;
                      if (v87) {
                        goto LABEL_65;
                      }
LABEL_48:
                      v85[2] = v88;
                      goto LABEL_49;
                    }
                    if (v109 < v35 && v126)
                    {
                      uint64_t v71 = v106;
                      uint64_t v72 = defaultLogger()();
                      __chkstk_darwin(v72);
                      *(&v97 - 2) = v35;
                      *(&v97 - 1) = v42;
                      Logger.sensitive(_:)();
                      (*v105)(v71, v107);
                      unint64_t v73 = v108;
                      char v74 = swift_isUniquelyReferenced_nonNull_native();
                      v127[0] = v73;
                      unint64_t v76 = sub_1005906D8(v42);
                      uint64_t v77 = *(void *)(v73 + 16);
                      BOOL v78 = (v75 & 1) == 0;
                      uint64_t v79 = v77 + v78;
                      if (__OFADD__(v77, v78)) {
                        goto LABEL_64;
                      }
                      if (*(void *)(v73 + 24) >= v79)
                      {
                        uint64_t v27 = v116;
                        uint64_t v15 = v117;
                        if ((v74 & 1) == 0)
                        {
                          char v95 = v75;
                          sub_10016B818();
                          char v75 = v95;
                        }
                      }
                      else
                      {
                        char v80 = v75;
                        sub_100166818(v79, v74);
                        unint64_t v81 = sub_1005906D8(v42);
                        int v83 = v82 & 1;
                        char v75 = v80;
                        int v84 = v80 & 1;
                        uint64_t v27 = v116;
                        uint64_t v15 = v117;
                        if (v84 != v83) {
                          goto LABEL_67;
                        }
                        unint64_t v76 = v81;
                      }
                      uint64_t v90 = (void *)v127[0];
                      unint64_t v108 = v127[0];
                      if (v75)
                      {
                        *(unsigned char *)(*(void *)(v127[0] + 56) + v76) = 1;
                      }
                      else
                      {
                        *(void *)(v127[0] + 8 * (v76 >> 6) + 64) |= 1 << v76;
                        *(void *)(v90[6] + 8 * v76) = v42;
                        *(unsigned char *)(v90[7] + v76) = 1;
                        uint64_t v91 = v90[2];
                        BOOL v87 = __OFADD__(v91, 1);
                        uint64_t v92 = v91 + 1;
                        if (v87) {
                          goto LABEL_66;
                        }
                        v90[2] = v92;
                      }
                      goto LABEL_49;
                    }
                    uint64_t v22 = v115;
                    goto LABEL_22;
                  }
                }
                else
                {
                  sub_10000C6CC((uint64_t)v127, &qword_100729DB8);
                }
                uint64_t v22 = v115;
                uint64_t v16 = v39;
                uint64_t v18 = v110;
LABEL_22:
                uint64_t v27 = v116;
                uint64_t v15 = v117;
                goto LABEL_10;
              }
              uint64_t v15 = v117;
            }
LABEL_10:
            (*v120)(v18, v16);
            v25 += v124;
            if (!--v21)
            {
              a1 = v99;
              swift_bridgeObjectRelease();
              uint64_t v19 = v98;
              unint64_t v20 = v103;
              uint64_t v21 = v97;
              break;
            }
          }
        }
        ++v20;
        uint64_t v23 = v106;
        uint64_t v24 = defaultLogger()();
        __chkstk_darwin(v24);
        *(&v97 - 2) = v109;
        Logger.sensitive(_:)();
        (*v105)(v23, v107);
        if (v20 == v102) {
          goto LABEL_56;
        }
      }
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
LABEL_56:
      swift_bridgeObjectRelease();
      return v108;
    }
  }
  else
  {
    return sub_10016DA04((uint64_t)_swiftEmptyArrayStorage);
  }
  return result;
}

unint64_t sub_1002E4D48()
{
  unint64_t result = qword_100729DA8;
  if (!qword_100729DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100729DA8);
  }
  return result;
}

uint64_t sub_1002E4D9C()
{
  return sub_1002E417C(*(void *)(v0 + 16), 101, 0xD000000000000062, (void *)0x8000000100648460);
}

uint64_t sub_1002E4DD4()
{
  return sub_1002E4070(*(void *)(v0 + 16), *(void *)(v0 + 24), 114, 0xD000000000000041, (void *)0x8000000100648410);
}

uint64_t sub_1002E4E0C()
{
  return sub_1002E4070(*(void *)(v0 + 16), *(void *)(v0 + 24), 115, 0xD000000000000042, (void *)0x80000001006483C0);
}

uint64_t sub_1002E4E44()
{
  return sub_1002E417C(*(void *)(v0 + 16), 102, 0xD000000000000063, (void *)0x8000000100648320);
}

uint64_t sub_1002E4E7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002E4EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[38] = a3;
  v4[39] = a4;
  v4[36] = a1;
  v4[37] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[40] = v5;
  v4[41] = *(void *)(v5 - 8);
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v4[44] = v6;
  v4[45] = *(void *)(v6 - 8);
  v4[46] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError();
  v4[47] = v7;
  v4[48] = *(void *)(v7 - 8);
  v4[49] = swift_task_alloc();
  sub_100007764(&qword_1007266A8);
  v4[50] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPPregeneratedAssessment(0);
  v4[51] = v8;
  v4[52] = *(void *)(v8 - 8);
  v4[53] = swift_task_alloc();
  return _swift_task_switch(sub_1002E50DC, 0, 0);
}

uint64_t sub_1002E50DC()
{
  uint64_t v88 = v0;
  uint64_t v1 = v0[51];
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[50];
  sub_100048D6C(v0[38], v3, &qword_1007266A8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000C6CC(v0[50], &qword_1007266A8);
    defaultLogger()();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "getOrCreateGUIDS: no pre-generated assessment available; generating new guids",
        v9,
        2u);
      swift_slowDealloc();
    }
    uint64_t v11 = v0[41];
    uint64_t v10 = v0[42];
    uint64_t v12 = v0[40];

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    uint64_t v13 = (void *)swift_task_alloc();
    v0[54] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1002E56BC;
    return sub_10027C7E8((uint64_t)(v0 + 19));
  }
  else
  {
    uint64_t v4 = v0[53];
    uint64_t v5 = v0[39];
    sub_100307BEC(v0[50], v4, type metadata accessor for DIPPregeneratedAssessment);
    sub_100301E18(v4, v5, (uint64_t)v54);
    char v53 = v54[0];
    uint64_t v15 = v55;
    uint64_t v16 = v56;
    uint64_t v17 = v57;
    uint64_t v51 = v59;
    uint64_t v52 = v58;
    uint64_t v49 = v61;
    uint64_t v50 = v60;
    uint64_t v47 = v63;
    uint64_t v48 = v62;
    uint64_t v45 = v65;
    uint64_t v46 = v64;
    uint64_t v43 = v67;
    uint64_t v44 = v66;
    uint64_t v41 = v69;
    uint64_t v42 = v68;
    uint64_t v40 = v70;
    char v39 = v71;
    uint64_t v37 = v73;
    uint64_t v38 = v72;
    uint64_t v35 = v75;
    uint64_t v36 = v74;
    uint64_t v33 = v77;
    uint64_t v34 = v76;
    uint64_t v31 = v79;
    uint64_t v32 = v78;
    uint64_t v29 = v81;
    uint64_t v30 = v80;
    uint64_t v27 = v83;
    uint64_t v28 = v82;
    uint64_t v25 = v85;
    uint64_t v26 = v84;
    uint64_t v23 = v87;
    uint64_t v24 = v86;
    uint64_t v18 = v0[52];
    uint64_t v19 = v0[51];
    uint64_t v20 = v0[37];
    sub_100307BEC(v0[53], v20, type metadata accessor for DIPPregeneratedAssessment);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v19);
    uint64_t v21 = v0[36];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    *(unsigned char *)uint64_t v21 = v53;
    *(void *)(v21 + 8) = v15;
    *(void *)(v21 + 16) = v16;
    *(void *)(v21 + 24) = v17;
    *(void *)(v21 + 32) = v52;
    *(void *)(v21 + 40) = v51;
    *(void *)(v21 + 48) = v50;
    *(void *)(v21 + 56) = v49;
    *(void *)(v21 + 64) = v48;
    *(void *)(v21 + 72) = v47;
    *(void *)(v21 + 80) = v46;
    *(void *)(v21 + 88) = v45;
    *(void *)(v21 + 96) = v44;
    *(void *)(v21 + 104) = v43;
    *(void *)(v21 + 112) = v42;
    *(void *)(v21 + 120) = v41;
    *(void *)(v21 + 128) = v40;
    *(unsigned char *)(v21 + 136) = v39;
    *(void *)(v21 + 144) = v38;
    *(void *)(v21 + 152) = v37;
    *(void *)(v21 + 160) = v36;
    *(void *)(v21 + 168) = v35;
    *(void *)(v21 + 176) = v34;
    *(void *)(v21 + 184) = v33;
    *(void *)(v21 + 192) = v32;
    *(void *)(v21 + 200) = v31;
    *(void *)(v21 + 208) = v30;
    *(void *)(v21 + 216) = v29;
    *(void *)(v21 + 224) = v28;
    *(void *)(v21 + 232) = v27;
    *(void *)(v21 + 240) = v26;
    *(void *)(v21 + 248) = v25;
    *(void *)(v21 + 256) = v24;
    *(void *)(v21 + 264) = v23;
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_1002E56BC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1002E5B24, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 448) = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_1002E5840;
    return sub_10027D02C(v2 + 16);
  }
}

uint64_t sub_1002E5840()
{
  *(void *)(*(void *)v1 + 456) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002E5CE8;
  }
  else {
    uint64_t v2 = sub_1002E5954;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002E5954()
{
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 416) + 56))(*(void *)(v0 + 296), 1, 1, *(void *)(v0 + 408));
  uint64_t v22 = *(void *)(v0 + 144);
  uint64_t v23 = *(void *)(v0 + 136);
  long long v20 = *(_OWORD *)(v0 + 104);
  long long v21 = *(_OWORD *)(v0 + 120);
  long long v18 = *(_OWORD *)(v0 + 72);
  long long v19 = *(_OWORD *)(v0 + 88);
  long long v16 = *(_OWORD *)(v0 + 40);
  long long v17 = *(_OWORD *)(v0 + 56);
  long long v15 = *(_OWORD *)(v0 + 24);
  char v14 = *(unsigned char *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 280);
  long long v12 = *(_OWORD *)(v0 + 240);
  long long v13 = *(_OWORD *)(v0 + 256);
  long long v10 = *(_OWORD *)(v0 + 208);
  long long v11 = *(_OWORD *)(v0 + 224);
  long long v8 = *(_OWORD *)(v0 + 176);
  long long v9 = *(_OWORD *)(v0 + 192);
  long long v7 = *(_OWORD *)(v0 + 160);
  char v3 = *(unsigned char *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 288);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(unsigned char *)uint64_t v4 = v3;
  *(_OWORD *)(v4 + 8) = v7;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 56) = v10;
  *(_OWORD *)(v4 + 72) = v11;
  *(_OWORD *)(v4 + 88) = v12;
  *(_OWORD *)(v4 + 104) = v13;
  *(void *)(v4 + 120) = v2;
  *(void *)(v4 + 128) = v1;
  *(unsigned char *)(v4 + 136) = v14;
  *(_OWORD *)(v4 + 144) = v15;
  *(_OWORD *)(v4 + 160) = v16;
  *(_OWORD *)(v4 + 176) = v17;
  *(_OWORD *)(v4 + 192) = v18;
  *(_OWORD *)(v4 + 208) = v19;
  *(_OWORD *)(v4 + 224) = v20;
  *(_OWORD *)(v4 + 240) = v21;
  *(void *)(v4 + 256) = v23;
  *(void *)(v4 + 264) = v22;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1002E5B24()
{
  (*(void (**)(void, void, void))(v0[45] + 104))(v0[46], enum case for DIPError.Code.unexpectedDaemonState(_:), v0[44]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1002E5CE8()
{
  sub_1001D72D0((uint64_t)(v0 + 19));
  (*(void (**)(void, void, void))(v0[45] + 104))(v0[46], enum case for DIPError.Code.unexpectedDaemonState(_:), v0[44]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1002E5EB4()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_1001EDBD8((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007764((uint64_t *)&unk_100726420);
  sub_1000B6120((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100729DF8 = result;
  return result;
}

void sub_1002E6118()
{
  off_100729E00 = &_swiftEmptyDictionarySingleton;
}

uint64_t (*sub_1002E612C())()
{
  return j__swift_endAccess;
}

uint64_t sub_1002E618C(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t *a13, char a14)
{
  uint64_t v16 = v14;
  id v105 = a8;
  int v95 = a7;
  uint64_t v103 = a6;
  uint64_t v94 = a5;
  int v93 = a4;
  uint64_t v102 = a3;
  uint64_t v92 = a2;
  int v104 = a13;
  uint64_t v118 = a12;
  uint64_t v91 = type metadata accessor for Logger();
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  unint64_t v96 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for DIPError.Code();
  uint64_t v19 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v101 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v14 + 216) = 0u;
  uint64_t v21 = v14 + 216;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 232) = 0u;
  *(_OWORD *)(v14 + 248) = 0u;
  *(_OWORD *)(v14 + 264) = 0u;
  *(void *)(v14 + 280) = 0xF000000000000000;
  uint64_t v22 = v14 + 288;
  *(_OWORD *)(v14 + 288) = 0u;
  *(_OWORD *)(v14 + 304) = 0u;
  *(_OWORD *)(v14 + 320) = 0u;
  *(_OWORD *)(v14 + 336) = 0u;
  *(void *)(v14 + 352) = 0xF000000000000000;
  *(void *)(v14 + 360) = 0;
  *(void *)(v14 + 384) = 0x6567616D2E6D6F63;
  *(void *)(v14 + 392) = 0xEB0000000061746ELL;
  *(_WORD *)(v14 + 400) = 257;
  uint64_t v23 = v14 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest;
  *(void *)(v16 + 368) = 0;
  *(void *)(v16 + 376) = 0;
  uint64_t v24 = type metadata accessor for ORDRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  uint64_t v26 = type metadata accessor for OTDRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = (void *)(v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  *uint64_t v27 = 0;
  v27[1] = 0;
  uint64_t v106 = a11;
  sub_100048D6C(a11, (uint64_t)&v110, &qword_100726690);
  uint64_t v107 = a1;
  if (v111)
  {
    sub_10000C6B4(&v110, (uint64_t)&v112);
  }
  else
  {
    sub_10006D828((uint64_t)&v112);
    sub_10000C6CC((uint64_t)&v110, &qword_100726690);
  }
  if (!v113)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC((uint64_t)&v112, &qword_100726690);
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v101, enum case for DIPError.Code.assessmentGUIDsExhausted(_:), v100);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100308600(v104);
    swift_release();
    swift_release();

    sub_10000C6CC(v118, &qword_100726690);
    sub_10000C6CC(v106, &qword_100726690);
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v21, &qword_100726690);
    swift_bridgeObjectRelease();
    sub_10000C5E0(*(void *)(v16 + 272), *(void *)(v16 + 280));
    sub_10000C6CC(v22, &qword_100726690);
    swift_bridgeObjectRelease();
    sub_10000C5E0(*(void *)(v16 + 344), *(void *)(v16 + 352));
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_10000C6CC(v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest, &qword_10072A880);
    sub_10000C6CC(v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest, &qword_10072A888);
    swift_bridgeObjectRelease();
    type metadata accessor for DIPODNator(0);
    swift_deallocPartialClassInstance();
    return v16;
  }
  uint64_t v99 = a9;
  uint64_t v97 = v21;
  uint64_t v98 = v22;
  sub_10000C6B4(&v112, (uint64_t)&v115);
  uint64_t v29 = v116;
  uint64_t v28 = v117;
  sub_10000C728(&v115, v116);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v29, v28);
  uint64_t v32 = v31;
  if (qword_10071F4D0 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v33 = sub_100208C28(v30, (unint64_t)v32);
  if (v15)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100308600(v104);
    swift_bridgeObjectRelease();
LABEL_12:
    swift_release();
    swift_release();

LABEL_13:
    sub_10000C6CC(v118, &qword_100726690);
    sub_10000C6CC(v106, &qword_100726690);
LABEL_14:
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v115);
    uint64_t v22 = v98;
    uint64_t v21 = v97;
    goto LABEL_15;
  }
  uint64_t v35 = v30;
  uint64_t v36 = v33;
  unint64_t v37 = v34;
  uint64_t v89 = v35;
  swift_release();
  if (v37 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v112 = 0;
    *((void *)&v112 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    *(void *)&long long v112 = 0xD000000000000026;
    *((void *)&v112 + 1) = 0x80000001006492B0;
    v38._uint64_t countAndFlagsBits = v89;
    v38._unint64_t object = v32;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 41;
    v39._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v101, enum case for DIPError.Code.internalError(_:), v100);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100308600(v104);
    goto LABEL_12;
  }
  sub_100048D6C(v118, (uint64_t)&v108, &qword_100726690);
  if (v109)
  {
    sub_10000C6B4(&v108, (uint64_t)&v110);
  }
  else
  {
    sub_10006D828((uint64_t)&v110);
    sub_10000C6CC((uint64_t)&v108, &qword_100726690);
  }
  uint64_t v87 = v36;
  unint64_t v88 = v37;
  if (!v111)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC((uint64_t)&v110, &qword_100726690);
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v101, enum case for DIPError.Code.assessmentGUIDsExhausted(_:), v100);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5E0(v87, v88);
    sub_100308600(v104);
    swift_release();
    swift_release();

    goto LABEL_13;
  }
  sub_10000C6B4(&v110, (uint64_t)&v112);
  uint64_t v42 = v113;
  uint64_t v41 = v114;
  sub_10000C728(&v112, v113);
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v42, v41);
  uint64_t v45 = v44;
  swift_retain();
  uint64_t v46 = sub_100208C28(v43, (unint64_t)v45);
  uint64_t v86 = 0;
  uint64_t v48 = v46;
  uint64_t v49 = v47;
  id v85 = a10;
  swift_release();
  if ((unint64_t)v49 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v110 = 0;
    *((void *)&v110 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v110 = 0xD000000000000024;
    *((void *)&v110 + 1) = 0x80000001006492E0;
    v50._uint64_t countAndFlagsBits = v43;
    v50._unint64_t object = v45;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._uint64_t countAndFlagsBits = 41;
    v51._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v101, enum case for DIPError.Code.internalError(_:), v100);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5E0(v87, v88);
    sub_100308600(v104);
    swift_release();
    swift_release();

    sub_10000C6CC(v118, &qword_100726690);
    sub_10000C6CC(v106, &qword_100726690);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v112);
    goto LABEL_14;
  }
  uint64_t v101 = v49;
  uint64_t v52 = v96;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  BOOL v55 = os_log_type_enabled(v53, v54);
  uint64_t v84 = v32;
  uint64_t v83 = v43;
  uint64_t v82 = v48;
  if (v55)
  {
    uint64_t v56 = swift_slowAlloc();
    uint64_t v100 = swift_slowAlloc();
    *(void *)&long long v110 = v100;
    *(_DWORD *)uint64_t v56 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)&long long v108 = sub_100110D58(v89, (unint64_t)v32, (uint64_t *)&v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v56 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v108 = sub_100110D58(v43, (unint64_t)v45, (uint64_t *)&v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v57 = v45;
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Using aguid %{public}s, tguid %s", (uint8_t *)v56, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v90 + 8))(v96, v91);
  }
  else
  {

    uint64_t v57 = v45;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v52, v91);
  }
  uint64_t v58 = v98;
  uint64_t v59 = v97;
  uint64_t v60 = v107;
  uint64_t v61 = v107[2];
  uint64_t v62 = *(void *)(v61 + 24);
  *(void *)(v16 + 16) = *(void *)(v61 + 16);
  *(void *)(v16 + 24) = v62;
  uint64_t v63 = (void *)v60[3];
  if (v63)
  {
    uint64_t v64 = v63[3];
    *(void *)(v16 + 32) = v63[2];
    *(void *)(v16 + 40) = v64;
    uint64_t v65 = v63[9];
    *(void *)(v16 + 48) = v63[8];
    *(void *)(v16 + 56) = v65;
    uint64_t v66 = v63[16];
    *(void *)(v16 + 64) = v63[15];
    *(void *)(v16 + 72) = v66;
    uint64_t v68 = v63[17];
    unint64_t v67 = v63[18];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v68 = 0x414C494156414E55;
    unint64_t v67 = 0xEB00000000454C42;
    *(void *)(v16 + 32) = 0x414C494156414E55;
    *(void *)(v16 + 40) = 0xEB00000000454C42;
    *(void *)(v16 + 48) = 0x414C494156414E55;
    *(void *)(v16 + 56) = 0xEB00000000454C42;
    *(void *)(v16 + 64) = 0;
    *(void *)(v16 + 72) = 0;
  }
  swift_bridgeObjectRetain();
  sub_10000C6CC(v118, &qword_100726690);
  sub_10000C6CC(v106, &qword_100726690);
  *(void *)(v16 + 80) = v68;
  *(void *)(v16 + 88) = v67;
  uint64_t v69 = v107[750];
  uint64_t v70 = v107[751];
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v16 + 96) = v69;
  *(void *)(v16 + 104) = v70;
  uint64_t v71 = v102;
  *(unsigned char *)(v16 + 184) = v93 & 1;
  *(void *)(v16 + 168) = v92;
  *(void *)(v16 + 176) = v71;
  id v72 = v85;
  uint64_t v73 = v103;
  *(void *)(v16 + 192) = v94;
  *(void *)(v16 + 200) = v73;
  *(unsigned char *)(v16 + 208) = v95;
  *(void *)(v16 + 144) = v105;
  *(void *)(v16 + 152) = v99;
  *(void *)(v16 + 160) = v72;
  sub_100030A10((uint64_t)&v115, (uint64_t)&v110);
  swift_beginAccess();
  sub_1001D9214((uint64_t)&v110, v59, &qword_100726690);
  swift_endAccess();
  uint64_t v74 = v84;
  *(void *)(v16 + 256) = v89;
  *(void *)(v16 + 264) = v74;
  swift_bridgeObjectRelease();
  uint64_t v75 = *(void *)(v16 + 272);
  unint64_t v76 = *(void *)(v16 + 280);
  unint64_t v77 = v88;
  *(void *)(v16 + 272) = v87;
  *(void *)(v16 + 280) = v77;
  sub_10000C5E0(v75, v76);
  sub_100030A10((uint64_t)&v112, (uint64_t)&v110);
  swift_beginAccess();
  sub_1001D9214((uint64_t)&v110, v58, &qword_100726690);
  swift_endAccess();
  *(void *)(v16 + 328) = v83;
  *(void *)(v16 + 336) = v57;
  swift_bridgeObjectRelease();
  uint64_t v78 = *(void *)(v16 + 344);
  unint64_t v79 = *(void *)(v16 + 352);
  uint64_t v80 = v101;
  *(void *)(v16 + 344) = v82;
  *(void *)(v16 + 352) = v80;
  sub_10000C5E0(v78, v79);
  sub_1000BEA14((uint64_t)v104, v16 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory, &qword_10072A900);
  *(unsigned char *)(v16 + 402) = a14 & 1;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v112);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v115);
  return v16;
}

uint64_t sub_1002E73D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7, uint64_t a8, unsigned __int8 a9, char a10)
{
  uint64_t v11 = v10;
  uint64_t v88 = a8;
  uint64_t v90 = a7;
  uint64_t v85 = a1;
  LODWORD(v89) = a9;
  uint64_t v17 = sub_100007764(&qword_100727600);
  __chkstk_darwin(v17 - 8);
  uint64_t v83 = (uint64_t)v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AugmentedProfile(0);
  __chkstk_darwin(v19 - 8);
  uint64_t v86 = ((char *)v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v97 = type metadata accessor for Logger();
  uint64_t v94 = *(void *)(v97 - 8);
  uint64_t v21 = __chkstk_darwin(v97);
  uint64_t v84 = (char *)v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v87 = (char *)v82 - v24;
  __chkstk_darwin(v23);
  uint64_t v91 = (char *)v82 - v25;
  uint64_t v93 = type metadata accessor for DIPError.Code();
  uint64_t v92 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  *(void *)&long long v98 = (char *)v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)v82 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_OWORD *)(v11 + 248) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 264) = 0u;
  *(void *)(v11 + 280) = 0xF000000000000000;
  *(_OWORD *)(v11 + 288) = 0u;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 336) = 0u;
  *(void *)(v11 + 352) = 0xF000000000000000;
  *(void *)(v11 + 360) = 0;
  *(void *)(v11 + 384) = 0x6567616D2E6D6F63;
  *(void *)(v11 + 392) = 0xEB0000000061746ELL;
  *(_WORD *)(v11 + 400) = 257;
  uint64_t v31 = v11 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest;
  *(void *)(v11 + 368) = 0;
  *(void *)(v11 + 376) = 0;
  uint64_t v32 = type metadata accessor for ORDRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  uint64_t v33 = v11 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  uint64_t v34 = type metadata accessor for OTDRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
  uint64_t v35 = (void *)(v11 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  *uint64_t v35 = 0;
  v35[1] = 0;
  *(void *)(v11 + 16) = a5;
  *(void *)(v11 + 24) = a6;
  *(void *)&long long v96 = a5;
  *(void *)(v11 + 32) = a5;
  *(void *)(v11 + 40) = a6;
  *(void *)(v11 + 48) = a3;
  *(void *)(v11 + 56) = a4;
  int v95 = (void *)a3;
  *(void *)(v11 + 168) = a3;
  *(void *)(v11 + 176) = a4;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  *(void *)(v11 + 80) = 0;
  *(void *)(v11 + 88) = 0xE000000000000000;
  *(void *)(v11 + 96) = 0;
  *(void *)(v11 + 104) = 0;
  *(unsigned char *)(v11 + 208) = v89;
  *(unsigned char *)(v11 + 184) = 1;
  *(void *)(v11 + 144) = 0;
  *(void *)(v11 + 192) = 0;
  *(void *)(v11 + 200) = 0;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  if (a2)
  {
    uint64_t v36 = v88;
    uint64_t v37 = v85;
  }
  else
  {
    UUID.init()();
    uint64_t v37 = UUID.uuidString.getter();
    a2 = v38;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    uint64_t v36 = v88;
  }
  Swift::String v39 = v90;
  id v40 = sub_100044470(v37, a2, (uint64_t)v90, v36);
  swift_bridgeObjectRelease();
  *(void *)(v11 + 160) = v40;
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v41 = UUID.uuidString.getter();
  uint64_t v43 = v42;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  uint64_t v44 = sub_1000448A4(v41, v43, (uint64_t)v39, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = sub_1005F6404(v96, a6, (uint64_t)v95, a4, (uint64_t)v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v11 + 152) = v45;
  swift_retain_n();
  sub_100007764((uint64_t *)&unk_100722630);
  uint64_t v90 = "coreidvd/DIPODNator.swift";
  runAsyncAndBlock<A>(file:function:line:_:)();
  swift_release();
  int v95 = v45;
  if (*((void *)&v99[0] + 1))
  {
    unint64_t v89 = a6;
    uint64_t v46 = v86;
    uint64_t v47 = 0;
    sub_1001FFFF4(*((uint64_t *)&v99[0] + 1), v86);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v63 = v83;
    sub_100048D6C((uint64_t)v46, v83, &qword_100727600);
    uint64_t v64 = sub_100007764(&qword_100726860);
    uint64_t v65 = *(void *)(v64 - 8);
    int v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64);
    uint64_t v62 = v87;
    uint64_t v60 = v91;
    if (v66 == 1)
    {
      sub_100302FA0((uint64_t)v46, type metadata accessor for AugmentedProfile);
      sub_10000C6CC(v63, &qword_100727600);
      char v61 = 0;
    }
    else
    {
      uint64_t v88 = 0;
      uint64_t v67 = v63;
      JWSSignedJSON.payload.getter();
      sub_100302FA0((uint64_t)v46, type metadata accessor for AugmentedProfile);
      uint64_t v68 = *((void *)&v99[0] + 1);
      uint64_t v85 = *(void *)&v99[0];
      uint64_t v84 = (char *)*((void *)&v100 + 1);
      v82[1] = *((void *)&v101 + 1);
      v82[2] = v101;
      *(void *)&long long v96 = v102;
      unint64_t v89 = v103;
      uint64_t v86 = v104;
      char v61 = v105;
      uint64_t v69 = v67;
      uint64_t v47 = v88;
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v69, v64);
      uint64_t v45 = v95;
      uint64_t v60 = v91;
      sub_1001D8D24(v85, v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    (*(void (**)(void, void, uint64_t))(v92 + 104))(v98, enum case for DIPError.Code.odnMissingProfile(_:), v93);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v48 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    uint64_t v49 = *(void *)v48;
    uint64_t v88 = *(void *)(*(void *)v48 + 72);
    unint64_t v50 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_100611020;
    unint64_t v52 = v51 + v50;
    char v53 = (void *)(v52 + v48[14]);
    uint64_t v54 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
    uint64_t v55 = type metadata accessor for DIPError.PropertyKey();
    uint64_t v56 = *(void *)(v55 - 8);
    unint64_t v89 = 0x8000000100648890;
    uint64_t v57 = *(void (**)(void))(v56 + 104);
    ((void (*)(unint64_t, uint64_t, uint64_t))v57)(v52, v54, v55);
    v53[3] = &type metadata for String;
    uint64_t v58 = v96;
    *char v53 = v96;
    v53[1] = a6;
    uint64_t v59 = (void *)(v52 + v88 + v48[14]);
    uint64_t v45 = v95;
    v57();
    uint64_t v60 = v91;
    v59[3] = &type metadata for String;
    *uint64_t v59 = v58;
    v59[1] = a6;
    swift_bridgeObjectRetain();
    sub_10015C504(v51);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(char *, void))(v94 + 8))(v60, v97);
    swift_errorRelease();
    char v61 = 0;
    uint64_t v47 = 0;
    uint64_t v62 = v87;
  }
  v106[3] = type metadata accessor for DeviceInformationProvider();
  v106[4] = (uint64_t)&protocol witness table for DeviceInformationProvider;
  sub_10002C2D8(v106);
  swift_retain();
  DeviceInformationProvider.init()();
  sub_10027E55C(v106, v61, (uint64_t)&unk_10072A7C0, (uint64_t)v45, v99);
  if (v47)
  {
    uint64_t v70 = (_OWORD *)(v11 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory);
    *uint64_t v70 = 0u;
    v70[1] = 0u;
    v70[2] = 0u;
    v70[3] = 0u;
    v70[4] = 0u;
    defaultLogger()();
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Ignoring error initialing GUIDFactory. This will result in errors getting Assessments which may not be mandatory", v73, 2u);
      swift_slowDealloc();
    }

    uint64_t v74 = *(void (**)(char *, uint64_t))(v94 + 8);
    uint64_t v75 = v97;
    v74(v62, v97);
    (*(void (**)(void, void, uint64_t))(v92 + 104))(v98, enum case for DIPError.Code.odnGUIDFactoryIssueInitializing(_:), v93);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_errorRelease();
    swift_release();
    v74(v60, v75);
    swift_errorRelease();
  }
  else
  {
    long long v98 = v99[1];
    long long v97 = v100;
    long long v96 = v101;
    uint64_t v76 = v102;
    unint64_t v77 = v103;
    swift_release();
    uint64_t v78 = v11 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory;
    long long v79 = v98;
    *(_OWORD *)uint64_t v78 = v99[0];
    *(_OWORD *)(v78 + 16) = v79;
    long long v80 = v96;
    *(_OWORD *)(v78 + 32) = v97;
    *(_OWORD *)(v78 + 48) = v80;
    *(void *)(v78 + 64) = v76;
    *(void *)(v78 + 72) = v77;
  }
  *(unsigned char *)(v11 + 402) = a10 & 1;
  return v11;
}

uint64_t sub_1002E8558(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1002E85EC;
  return sub_1005F058C();
}

uint64_t sub_1002E85EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 40) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002E86EC, 0, 0);
}

uint64_t sub_1002E86EC()
{
  *(_OWORD *)*(void *)(v0 + 16) = *(_OWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002E870C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1002E879C;
  return sub_1005F2300();
}

uint64_t sub_1002E879C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (a2) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = 0xE000000000000000;
  }
  long long v8 = *(uint64_t (**)(uint64_t, unint64_t))(v5 + 8);
  return v8(v6, v7);
}

uint64_t sub_1002E88AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v5 = sub_100007764(&qword_100726688);
  __chkstk_darwin(v5 - 8);
  uint64_t v46 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_1007266A8);
  __chkstk_darwin(v7 - 8);
  long long v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for DIPPregeneratedAssessment(0);
  uint64_t v10 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v39 = (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = type metadata accessor for DIPSignpost();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = [self standardUserDefaults];
  v21._unint64_t object = (void *)0x8000000100648CB0;
  v21._uint64_t countAndFlagsBits = 0xD000000000000012;
  Swift::Bool v22 = NSUserDefaults.internalBool(forKey:)(v21);

  if (v22)
  {
    defaultLogger()();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Skipping ODIN due to setting", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v26 = v47;
    swift_beginAccess();
    sub_100048D6C(v26 + 216, a4, &qword_100726690);
    uint64_t v28 = *(void *)(v26 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    uint64_t v27 = *(void *)(v26 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
    uint64_t v29 = a4 + *(int *)(type metadata accessor for ODNAssessmentResult(0) + 44);
    uint64_t v30 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(void *)(a4 + 128) = 0;
    *(void *)(a4 + 136) = 0;
    *(void *)(a4 + 120) = 1;
    *(unsigned char *)(a4 + 144) = 0;
    *(_OWORD *)(a4 + 152) = 0u;
    *(_OWORD *)(a4 + 168) = 0u;
    *(_OWORD *)(a4 + 184) = 0u;
    *(_OWORD *)(a4 + 200) = 0u;
    *(void *)(a4 + 216) = v28;
    *(void *)(a4 + 224) = v27;
    return swift_bridgeObjectRetain();
  }
  else
  {
    static DaemonSignposts.getVerificationResultFetchAssesssment.getter();
    DIPSignpost.init(_:)();
    sub_100048D6C(v43, (uint64_t)v9, &qword_1007266A8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v42) == 1)
    {
      sub_10000C6CC((uint64_t)v9, &qword_1007266A8);
      uint64_t v32 = sub_1002E9848(v40, v41, 1);
      memset(v48, 0, sizeof(v48));
      uint64_t v49 = 1;
      uint64_t v33 = type metadata accessor for AugmentedProfile(0);
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      char v52 = 0;
      uint64_t v34 = v46;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v46, 1, 1, v33);
      sub_1002ECA0C(v32, 0, (uint64_t)v48, v34, 1, a4);
      swift_bridgeObjectRelease();
      sub_10000C6CC((uint64_t)v34, &qword_100726688);
    }
    else
    {
      uint64_t v35 = v39;
      sub_100307BEC((uint64_t)v9, v39, type metadata accessor for DIPPregeneratedAssessment);
      uint64_t v36 = type metadata accessor for AugmentedProfile(0);
      uint64_t v37 = (uint64_t)v46;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v46, 1, 1, v36);
      sub_1002EB410(v35, v37, a4);
      sub_10000C6CC(v37, &qword_100726688);
      sub_100302FA0(v35, type metadata accessor for DIPPregeneratedAssessment);
    }
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v15, v45);
  }
}

uint64_t sub_1002E8ED0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v34 = a2;
  uint64_t v5 = sub_100007764(&qword_100723600);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v33[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_100007764(&qword_100726640);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = &v33[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v36 = a1;
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  uint64_t v15 = type metadata accessor for DIPError();
  int v16 = swift_dynamicCast();
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  if (!v16)
  {
    v17(v14, 1, 1, v15);
    sub_10000C6CC((uint64_t)v14, &qword_100726640);
    long long v37 = 0u;
    long long v38 = 0u;
    char v21 = v34;
LABEL_13:
    sub_10000C6CC((uint64_t)&v37, (uint64_t *)&unk_100727200);
    uint64_t v24 = 0;
    char v25 = 1;
    goto LABEL_14;
  }
  uint64_t v18 = *(void *)(v15 - 8);
  v17(v14, 0, 1, v15);
  uint64_t v19 = DIPError.properties.getter();
  (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v14, v15);
  (*(void (**)(unsigned char *, void, uint64_t))(v9 + 104))(v11, enum case for DIPError.PropertyKey.underlyingErrno(_:), v8);
  if (*(void *)(v19 + 16))
  {
    unint64_t v20 = sub_1005905C0((uint64_t)v11);
    char v21 = v34;
    if (v22)
    {
      sub_10003BC28(*(void *)(v19 + 56) + 32 * v20, (uint64_t)&v37);
    }
    else
    {
      long long v37 = 0u;
      long long v38 = 0u;
    }
  }
  else
  {
    long long v37 = 0u;
    long long v38 = 0u;
    char v21 = v34;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  if (!*((void *)&v38 + 1)) {
    goto LABEL_13;
  }
  int v23 = swift_dynamicCast();
  if (v23) {
    uint64_t v24 = v36;
  }
  else {
    uint64_t v24 = 0;
  }
  char v25 = v23 ^ 1;
LABEL_14:
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  uint64_t v26 = type metadata accessor for DIPError.Code();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48))(v7, 1, v26) == 1)
  {
    sub_10000C6CC((uint64_t)v7, &qword_100723600);
    uint64_t v28 = -1;
  }
  else
  {
    uint64_t v28 = DIPError.Code.rawValue.getter();
    (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v7, v26);
  }
  uint64_t v29 = *(void *)(v35 + 32);
  uint64_t v30 = *(void *)(v35 + 40);
  *(void *)&long long v37 = 0;
  *((void *)&v37 + 1) = 0xE000000000000000;
  LOBYTE(v36) = *(unsigned char *)(v35 + 208);
  swift_bridgeObjectRetain();
  uint64_t result = _print_unlocked<A, B>(_:_:)();
  long long v32 = v37;
  *(void *)a3 = v28;
  *(void *)(a3 + 8) = v24;
  *(unsigned char *)(a3 + 16) = v25;
  *(void *)(a3 + 24) = v29;
  *(void *)(a3 + 32) = v30;
  *(_OWORD *)(a3 + 40) = v32;
  *(unsigned char *)(a3 + 56) = v21;
  return result;
}

unint64_t sub_1002E931C()
{
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD00000000000001CLL;
}

uint64_t sub_1002E93D0(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_100720910);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = qword_1007600A8;
  uint64_t v12 = unk_1007600B0;
  uint64_t v13 = byte_1007600A1;
  id v14 = objc_allocWithZone((Class)NSNumber);
  swift_bridgeObjectRetain();
  id v15 = [v14 initWithBool:v13];
  int v16 = (void *)sub_100025C28(0, &qword_100726CC8);
  long long v38 = v16;
  v37[0] = (uint64_t)v15;
  sub_10055F2A8((uint64_t)v37, v11, v12);
  if (qword_10071F580 != -1) {
    swift_once();
  }
  id v17 = [objc_allocWithZone((Class)NSNumber) initWithBool:(char *)objc_msgSend(self, "deviceLockState") - 1 < (char *)2];
  long long v38 = v16;
  v37[0] = (uint64_t)v17;
  sub_10055F2A8((uint64_t)v37, 0x6563697665447369, 0xEE0064656B636F4CLL);
  if (a3)
  {
    unint64_t v18 = a3;
    uint64_t v19 = v36;
  }
  else
  {
    static Locale.current.getter();
    Locale.region.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v35);
    uint64_t v20 = type metadata accessor for Locale.Region();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, v20) == 1)
    {
      sub_10000C6CC((uint64_t)v10, &qword_100720910);
      uint64_t v19 = 0;
      unint64_t v18 = 0xE000000000000000;
    }
    else
    {
      uint64_t v19 = Locale.Region.identifier.getter();
      unint64_t v18 = v22;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v20);
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_10043E9FC(v19, v18);
  swift_bridgeObjectRelease();
  long long v38 = &type metadata for Int;
  v37[0] = v23;
  sub_10055F2A8((uint64_t)v37, 0xD000000000000011, 0x8000000100648D50);
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v37, (uint64_t)v38);
  uint64_t v24 = (void *)dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccount()();
  if (v24)
  {
    char v25 = v24;
    id v26 = [v24 appleID];

    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v37);
    if (v26)
    {
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;

      long long v38 = &type metadata for String;
      v37[0] = v27;
      v37[1] = v29;
      sub_10055F2A8((uint64_t)v37, 0x6469656C707061, 0xE700000000000000);
    }
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v37);
  }
  sub_1002FED0C(a1);
  uint64_t v30 = sub_1002FDE10(*a1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v37[0] = *a1;
  *a1 = 0x8000000000000000;
  sub_10030088C((uint64_t)v30, (uint64_t)sub_100300838, 0, isUniquelyReferenced_nonNull_native, v37);
  *a1 = v37[0];
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002E9848(uint64_t a1, uint64_t a2, int a3)
{
  int v192 = a3;
  uint64_t v216 = a2;
  uint64_t v197 = a1;
  uint64_t v202 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v202 - 8);
  uint64_t v4 = __chkstk_darwin(v202);
  uint64_t v6 = (char *)&v186 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v189 = (char *)&v186 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v199 = (char *)&v186 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v191 = (char *)&v186 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v196 = (char *)&v186 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v186 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v204 = (char *)&v186 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v186 - v20;
  defaultLogger()();
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Preparing bindings dict from claim", v24, 2u);
    swift_slowDealloc();
  }

  char v25 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v201 = v3 + 8;
  uint64_t v200 = v25;
  v25(v21, v202);
  unint64_t v226 = sub_10015C3CC((uint64_t)_swiftEmptyArrayStorage);
  if (!v197 || !v216)
  {
LABEL_111:
    if (*(void *)(v193 + 144) && (unint64_t v166 = sub_1002D7074()) != 0)
    {
      uint64_t v167 = v166;
      [v166 coordinate];
      uint64_t v168 = Double.description.getter();
      *((void *)&v225 + 1) = &type metadata for String;
      *(void *)&long long v224 = v168;
      *((void *)&v224 + 1) = v169;
      sub_1000078A8(&v224, &v222);
      unint64_t v170 = v226;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v221 = v170;
      sub_100562C48(&v222, 0xD000000000000018, 0x8000000100648CF0, isUniquelyReferenced_nonNull_native);
      unint64_t v172 = v221;
      swift_bridgeObjectRelease();
      [v167 coordinate];
      uint64_t v173 = Double.description.getter();
      *((void *)&v225 + 1) = &type metadata for String;
      *(void *)&long long v224 = v173;
      *((void *)&v224 + 1) = v174;
      sub_1000078A8(&v224, &v222);
      char v175 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v221 = v172;
      sub_100562C48(&v222, 0xD000000000000019, 0x8000000100648D10, v175);
      unint64_t v176 = v221;
      swift_bridgeObjectRelease();
      [v167 horizontalAccuracy];
      uint64_t v177 = Double.description.getter();
      *((void *)&v225 + 1) = &type metadata for String;
      *(void *)&long long v224 = v177;
      *((void *)&v224 + 1) = v178;
      sub_1000078A8(&v224, &v222);
      char v179 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v221 = v176;
      sub_100562C48(&v222, 0xD000000000000022, 0x80000001006494D0, v179);
      unint64_t v226 = v221;
      swift_bridgeObjectRelease();
      uint64_t v6 = v189;
      defaultLogger()();
      uint64_t v180 = Logger.logObject.getter();
      os_log_type_t v181 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v180, v181))
      {
        uint64_t v182 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v182 = 0;
        _os_log_impl((void *)&_mh_execute_header, v180, v181, "got GPS data", v182, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      defaultLogger()();
      uint64_t v167 = Logger.logObject.getter();
      os_log_type_t v183 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v167, v183))
      {
        uint64_t v184 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v184 = 0;
        _os_log_impl((void *)&_mh_execute_header, v167, v183, "no GPS location available", v184, 2u);
        swift_slowDealloc();
      }
    }
    char v185 = v192;

    v200(v6, v202);
    if (v185) {
      sub_1002E93D0((uint64_t *)&v226, 0, 0);
    }
    return v226;
  }
  uint64_t v26 = *(void *)(v197 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claimData);
  uint64_t v27 = *(void *)(v26 + 64);
  uint64_t v210 = v26 + 64;
  uint64_t v28 = 1 << *(unsigned char *)(v26 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  int64_t v211 = (unint64_t)(v28 + 63) >> 6;
  unint64_t v203 = (char *)&v222 + 8;
  swift_retain();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v194 = (unint64_t)"Forcing assessment error";
  unint64_t v205 = (void *)0x8000000100649060;
  *(void *)&long long v34 = 136315394;
  long long v190 = v34;
  uint64_t v188 = (char *)&type metadata for Any + 8;
  *(void *)&long long v34 = 136315138;
  long long v198 = v34;
  uint64_t v187 = v6;
  uint64_t v195 = v17;
  uint64_t v206 = v26;
  if (!v30) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v219 = (v30 - 1) & v30;
  uint64_t v220 = v32;
  for (unint64_t i = __clz(__rbit64(v30)) | (v32 << 6); ; unint64_t i = __clz(__rbit64(v38)) + (v37 << 6))
  {
    uint64_t v40 = *(void *)(v26 + 56);
    uint64_t v41 = (uint64_t *)(*(void *)(v26 + 48) + 16 * i);
    uint64_t v42 = v26;
    uint64_t v44 = *v41;
    uint64_t v43 = (void *)v41[1];
    uint64_t v45 = (void *)(v40 + 96 * i);
    uint64_t v46 = v45[8];
    uint64_t v47 = v45[9];
    unint64_t v48 = v45[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_1004D0118(v44, v43);
    if (v33)
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v33 = 0;
      unint64_t v30 = v219;
      uint64_t v32 = v220;
      uint64_t v26 = v42;
      if (v219) {
        goto LABEL_8;
      }
      goto LABEL_9;
    }
    uint64_t v212 = v46;
    uint64_t v209 = (uint64_t)v49;
    unint64_t v213 = v50;
    uint64_t v215 = v44;
    uint64_t v217 = (uint64_t)v43;
    uint64_t v207 = v47;
    unint64_t v214 = v48;
    uint64_t v53 = *(void *)(v216 + 16);
    uint64_t v218 = 0;
    if (v53)
    {
      uint64_t v54 = v217;
      uint64_t v55 = v52;
      uint64_t v56 = v51;
      swift_bridgeObjectRetain();
      sub_100590548(v215, v54);
      LODWORD(v208) = v57;
      swift_bridgeObjectRelease();
      uint64_t v51 = v56;
      uint64_t v52 = v55;
    }
    else
    {
      LODWORD(v208) = 0;
    }
    *(void *)&long long v224 = v51;
    *((void *)&v224 + 1) = v52;
    *(void *)&long long v222 = 0x6E692D646579656BLL;
    *((void *)&v222 + 1) = 0xE800000000000000;
    uint64_t v58 = v52;
    uint64_t v59 = v51;
    sub_1000B60CC();
    sub_1001D7A5C();
    if (BidirectionalCollection<>.starts<A>(with:)())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v60 = [self standardUserDefaults];
      v61._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      v61._unint64_t object = v205;
      Swift::Bool v62 = NSUserDefaults.internalBool(forKey:)(v61);

      unint64_t v63 = v214;
      if (v62 && v214)
      {
        swift_bridgeObjectRetain();
        uint64_t v64 = v204;
        defaultLogger()();
        unint64_t v65 = v213;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        int v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.debug.getter();
        BOOL v68 = os_log_type_enabled(v66, v67);
        uint64_t v69 = v207;
        if (v68)
        {
          uint64_t v70 = swift_slowAlloc();
          *(void *)&long long v224 = swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = v190;
          swift_bridgeObjectRetain();
          *(void *)&long long v222 = sub_100110D58(v209, v65, (uint64_t *)&v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v70 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)&long long v222 = sub_100110D58(v69, v63, (uint64_t *)&v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "ODN bindings keyed-in attribute %s: %s", (uint8_t *)v70, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v71 = v204;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          uint64_t v71 = v64;
        }
        v200(v71, v202);
      }
      else
      {
        uint64_t v85 = v195;
        defaultLogger()();
        unint64_t v65 = v213;
        swift_bridgeObjectRetain_n();
        uint64_t v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.debug.getter();
        BOOL v88 = os_log_type_enabled(v86, v87);
        uint64_t v69 = v207;
        if (v88)
        {
          unint64_t v89 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v224 = swift_slowAlloc();
          *(_DWORD *)unint64_t v89 = v198;
          swift_bridgeObjectRetain();
          *(void *)&long long v222 = sub_100110D58(v209, v65, (uint64_t *)&v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "ODN bindings keyed-in attribute %s", v89, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v200(v85, v202);
        if (!v63)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v110 = sub_100590548(v209, v65);
          char v112 = v111;
          swift_bridgeObjectRelease();
          if (v112)
          {
            uint64_t v113 = v226;
            char v114 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v221 = v113;
            if ((v114 & 1) == 0)
            {
              sub_10016B194();
              uint64_t v113 = v221;
            }
            swift_bridgeObjectRelease();
            sub_1000078A8((_OWORD *)(*(void *)(v113 + 56) + 32 * v110), &v222);
            sub_10056130C(v110, v113);
            unint64_t v226 = v113;
            swift_bridgeObjectRelease();
          }
          else
          {
            long long v222 = 0u;
            long long v223 = 0u;
          }
          swift_bridgeObjectRelease();
          sub_10000C6CC((uint64_t)&v222, (uint64_t *)&unk_100727200);
          uint64_t v102 = v209;
          goto LABEL_51;
        }
      }
      *((void *)&v225 + 1) = &type metadata for String;
      *(void *)&long long v224 = v69;
      *((void *)&v224 + 1) = v63;
      sub_1000078A8(&v224, &v222);
      swift_bridgeObjectRetain();
      unint64_t v100 = v226;
      char v101 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v221 = v100;
      unint64_t v226 = 0x8000000000000000;
      uint64_t v102 = v209;
      sub_100562C48(&v222, v209, v65, v101);
      unint64_t v226 = v221;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_51:
      *(void *)&long long v224 = v102;
      *((void *)&v224 + 1) = v65;
      v103._uint64_t countAndFlagsBits = 0x657261685373692ELL;
      v103._unint64_t object = (void *)0xE900000000000064;
      String.append(_:)(v103);
      uint64_t v105 = *((void *)&v224 + 1);
      uint64_t v104 = v224;
      id v106 = objc_allocWithZone((Class)NSNumber);
      id v107 = [v106 initWithBool:v208 & 1];
      *((void *)&v225 + 1) = sub_100025C28(0, &qword_100726CC8);
      *(void *)&long long v224 = v107;
      sub_1000078A8(&v224, &v222);
      unint64_t v108 = v226;
      char v109 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v221 = v108;
LABEL_63:
      sub_100562C48(&v222, v104, v105, v109);
      unint64_t v226 = v221;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_64;
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v224 = v59;
    *((void *)&v224 + 1) = v58;
    *(void *)&long long v222 = 0x746E656D75636F64;
    *((void *)&v222 + 1) = 0xE800000000000000;
    char v72 = BidirectionalCollection<>.starts<A>(with:)();
    swift_bridgeObjectRelease();
    if (v72)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v73 = [self standardUserDefaults];
      v74._unint64_t object = (void *)(v194 | 0x8000000000000000);
      v74._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      Swift::Bool v75 = NSUserDefaults.internalBool(forKey:)(v74);

      unint64_t v76 = v214;
      uint64_t v77 = v217;
      if (v75 && v214)
      {
        swift_bridgeObjectRetain();
        uint64_t v78 = v196;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        long long v79 = Logger.logObject.getter();
        os_log_type_t v80 = static os_log_type_t.debug.getter();
        BOOL v81 = os_log_type_enabled(v79, v80);
        uint64_t v82 = v207;
        if (v81)
        {
          uint64_t v83 = swift_slowAlloc();
          *(void *)&long long v224 = swift_slowAlloc();
          *(_DWORD *)uint64_t v83 = v190;
          swift_bridgeObjectRetain();
          uint64_t v84 = v215;
          *(void *)&long long v222 = sub_100110D58(v215, v77, (uint64_t *)&v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v83 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)&long long v222 = sub_100110D58(v82, v76, (uint64_t *)&v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "ODN bindings document attribute %s: %s", (uint8_t *)v83, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v200(v196, v202);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          v200(v78, v202);
          uint64_t v84 = v215;
        }
      }
      else
      {
        int v95 = v191;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        long long v96 = Logger.logObject.getter();
        os_log_type_t v97 = static os_log_type_t.debug.getter();
        BOOL v98 = os_log_type_enabled(v96, v97);
        uint64_t v82 = v207;
        if (v98)
        {
          uint64_t v99 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v224 = swift_slowAlloc();
          *(_DWORD *)uint64_t v99 = v198;
          swift_bridgeObjectRetain();
          *(void *)&long long v222 = sub_100110D58(v215, v77, (uint64_t *)&v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v96, v97, "ODN bindings document attribute %s", v99, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v200(v95, v202);
        uint64_t v84 = v215;
        if (!v76)
        {
          swift_bridgeObjectRetain();
          uint64_t v117 = v226;
          swift_bridgeObjectRetain();
          unint64_t v121 = sub_100590548(v84, v77);
          char v123 = v122;
          swift_bridgeObjectRelease();
          if (v123)
          {
            char v124 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v221 = v117;
            if ((v124 & 1) == 0)
            {
              sub_10016B194();
              uint64_t v117 = v221;
            }
            swift_bridgeObjectRelease();
            sub_1000078A8((_OWORD *)(*(void *)(v117 + 56) + 32 * v121), &v222);
            sub_10056130C(v121, v117);
            unint64_t v226 = v117;
            swift_bridgeObjectRelease();
          }
          else
          {
            long long v222 = 0u;
            long long v223 = 0u;
          }
          swift_bridgeObjectRelease();
          sub_10000C6CC((uint64_t)&v222, (uint64_t *)&unk_100727200);
          goto LABEL_62;
        }
      }
      *((void *)&v225 + 1) = &type metadata for String;
      *(void *)&long long v224 = v82;
      *((void *)&v224 + 1) = v76;
      sub_1000078A8(&v224, &v222);
      swift_bridgeObjectRetain();
      unint64_t v115 = v226;
      char v116 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v221 = v115;
      sub_100562C48(&v222, v84, v77, v116);
      uint64_t v117 = v221;
      unint64_t v226 = v221;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_62:
      *(void *)&long long v224 = v84;
      *((void *)&v224 + 1) = v77;
      v118._uint64_t countAndFlagsBits = 0x657261685373692ELL;
      v118._unint64_t object = (void *)0xE900000000000064;
      String.append(_:)(v118);
      uint64_t v105 = *((void *)&v224 + 1);
      uint64_t v104 = v224;
      id v119 = objc_allocWithZone((Class)NSNumber);
      id v120 = [v119 initWithBool:v208 & 1];
      *((void *)&v225 + 1) = sub_100025C28(0, &qword_100726CC8);
      *(void *)&long long v224 = v120;
      sub_1000078A8(&v224, &v222);
      char v109 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v221 = v117;
      goto LABEL_63;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v90 = v199;
    defaultLogger()();
    unint64_t v91 = v217;
    swift_bridgeObjectRetain();
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = swift_slowAlloc();
      *(void *)&long long v224 = swift_slowAlloc();
      *(_DWORD *)uint64_t v94 = v198;
      swift_bridgeObjectRetain();
      *(void *)(v94 + 4) = sub_100110D58(v215, v91, (uint64_t *)&v224);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Skipping ODN bindings for attribute %s", (uint8_t *)v94, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v200)(v90, v202);
LABEL_64:
    uint64_t v33 = v218;
    unint64_t v30 = v219;
    uint64_t v26 = v206;
    uint64_t v32 = v220;
    if (v219) {
      goto LABEL_8;
    }
LABEL_9:
    BOOL v36 = __OFADD__(v32, 1);
    int64_t v37 = v32 + 1;
    if (v36)
    {
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    if (v37 >= v211) {
      goto LABEL_74;
    }
    unint64_t v38 = *(void *)(v210 + 8 * v37);
    if (!v38) {
      break;
    }
LABEL_19:
    uint64_t v219 = (v38 - 1) & v38;
    uint64_t v220 = v37;
  }
  int64_t v39 = v37 + 1;
  if (v37 + 1 >= v211) {
    goto LABEL_74;
  }
  unint64_t v38 = *(void *)(v210 + 8 * v39);
  if (v38) {
    goto LABEL_18;
  }
  int64_t v39 = v37 + 2;
  if (v37 + 2 >= v211) {
    goto LABEL_74;
  }
  unint64_t v38 = *(void *)(v210 + 8 * v39);
  if (v38)
  {
LABEL_18:
    int64_t v37 = v39;
    goto LABEL_19;
  }
  int64_t v39 = v37 + 3;
  if (v37 + 3 < v211)
  {
    unint64_t v38 = *(void *)(v210 + 8 * v39);
    if (!v38)
    {
      while (1)
      {
        int64_t v37 = v39 + 1;
        if (__OFADD__(v39, 1)) {
          break;
        }
        if (v37 >= v211) {
          goto LABEL_74;
        }
        unint64_t v38 = *(void *)(v210 + 8 * v37);
        ++v39;
        if (v38) {
          goto LABEL_19;
        }
      }
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
    goto LABEL_18;
  }
LABEL_74:
  swift_release();
  uint64_t v125 = *(char **)(v197 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_unverifiedClaimData);
  uint64_t v126 = *((void *)v125 + 8);
  uint64_t v204 = v125 + 64;
  uint64_t v127 = 1 << v125[32];
  uint64_t v128 = -1;
  if (v127 < 64) {
    uint64_t v128 = ~(-1 << v127);
  }
  unint64_t v129 = v128 & v126;
  unint64_t v205 = (void *)((unint64_t)(v127 + 63) >> 6);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v130 = 0;
  uint64_t v199 = v125;
  while (2)
  {
    if (v129)
    {
      uint64_t v219 = v130;
      uint64_t v220 = (v129 - 1) & v129;
      unint64_t v131 = __clz(__rbit64(v129)) | (v130 << 6);
LABEL_92:
      char v135 = (uint64_t *)(*((void *)v125 + 6) + 16 * v131);
      uint64_t v137 = *v135;
      uint64_t v136 = (void *)v135[1];
      uint64_t v138 = *((void *)v125 + 7) + 96 * v131;
      uint64_t v139 = *(char **)(v138 + 72);
      uint64_t v140 = *(void *)(v138 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v141 = sub_1004D0118(v137, v136);
      if (v33)
      {
        swift_errorRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v33 = 0;
      }
      else
      {
        unint64_t v203 = v139;
        unint64_t v214 = v142;
        uint64_t v215 = (uint64_t)v141;
        swift_bridgeObjectRelease();
        uint64_t v143 = v216;
        uint64_t v144 = *(void *)(v216 + 16);
        uint64_t v218 = 0;
        if (v144 && (unint64_t v145 = sub_100590548(v137, (uint64_t)v136), (v146 & 1) != 0))
        {
          uint64_t v147 = *(void *)(v143 + 56) + 96 * v145;
          uint64_t v148 = *(void *)v147;
          uint64_t v217 = *(void *)(v147 + 8);
          uint64_t v149 = *(void *)(v147 + 24);
          int64_t v211 = *(void *)(v147 + 16);
          uint64_t v212 = v148;
          uint64_t v210 = *(void *)(v147 + 32);
          *(void *)&long long v198 = *(void *)(v147 + 40);
          uint64_t v208 = *(unsigned __int8 *)(v147 + 48);
          uint64_t v207 = *(void *)(v147 + 56);
          uint64_t v206 = *(void *)(v147 + 72);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v209 = v149;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          LODWORD(v213) = 1;
        }
        else
        {
          LODWORD(v213) = 0;
          int64_t v211 = 0;
          uint64_t v212 = 0;
          uint64_t v217 = 0;
          uint64_t v209 = 0;
          uint64_t v210 = 0;
          uint64_t v208 = 0;
          uint64_t v207 = 0;
          uint64_t v206 = 0;
        }
        swift_bridgeObjectRelease();
        sub_1001D7BDC(v212, v217);
        if (v140)
        {
          *((void *)&v225 + 1) = &type metadata for String;
          *(void *)&long long v224 = v203;
          *((void *)&v224 + 1) = v140;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000078A8(&v224, &v222);
          uint64_t v150 = v214;
          swift_bridgeObjectRetain();
          unint64_t v151 = v226;
          char v152 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v221 = v151;
          unint64_t v226 = 0x8000000000000000;
          uint64_t v153 = v215;
          sub_100562C48(&v222, v215, v150, v152);
          unint64_t v226 = v221;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v150 = v214;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v153 = v215;
          unint64_t v154 = sub_100590548(v215, v150);
          char v156 = v155;
          swift_bridgeObjectRelease();
          if (v156)
          {
            uint64_t v157 = v226;
            char v158 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v222 = v157;
            if ((v158 & 1) == 0)
            {
              sub_10016B194();
              uint64_t v157 = v222;
            }
            swift_bridgeObjectRelease();
            sub_1000078A8((_OWORD *)(*(void *)(v157 + 56) + 32 * v154), &v224);
            sub_10056130C(v154, v157);
            unint64_t v226 = v157;
            swift_bridgeObjectRelease();
          }
          else
          {
            long long v224 = 0u;
            long long v225 = 0u;
          }
          swift_bridgeObjectRelease();
          sub_10000C6CC((uint64_t)&v224, (uint64_t *)&unk_100727200);
        }
        *(void *)&long long v224 = v153;
        *((void *)&v224 + 1) = v150;
        v159._uint64_t countAndFlagsBits = 0x657261685373692ELL;
        v159._unint64_t object = (void *)0xE900000000000064;
        String.append(_:)(v159);
        uint64_t v161 = *((void *)&v224 + 1);
        uint64_t v160 = v224;
        id v162 = objc_allocWithZone((Class)NSNumber);
        id v163 = [v162 initWithBool:v213];
        *((void *)&v225 + 1) = sub_100025C28(0, &qword_100726CC8);
        *(void *)&long long v224 = v163;
        sub_1000078A8(&v224, &v222);
        unint64_t v164 = v226;
        char v165 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v221 = v164;
        sub_100562C48(&v222, v160, v161, v165);
        unint64_t v226 = v221;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v33 = v218;
        uint64_t v125 = v199;
      }
      uint64_t v130 = v219;
      unint64_t v129 = v220;
      continue;
    }
    break;
  }
  BOOL v36 = __OFADD__(v130, 1);
  uint64_t v132 = v130 + 1;
  if (v36) {
    goto LABEL_122;
  }
  if (v132 >= (uint64_t)v205)
  {
LABEL_110:
    swift_release();
    swift_release();
    uint64_t v6 = v187;
    goto LABEL_111;
  }
  unint64_t v133 = *(void *)&v204[8 * v132];
  if (v133)
  {
LABEL_91:
    uint64_t v219 = v132;
    uint64_t v220 = (v133 - 1) & v133;
    unint64_t v131 = __clz(__rbit64(v133)) + (v132 << 6);
    goto LABEL_92;
  }
  uint64_t v134 = v132 + 1;
  if (v132 + 1 >= (uint64_t)v205) {
    goto LABEL_110;
  }
  unint64_t v133 = *(void *)&v204[8 * v134];
  if (v133) {
    goto LABEL_90;
  }
  uint64_t v134 = v132 + 2;
  if (v132 + 2 >= (uint64_t)v205) {
    goto LABEL_110;
  }
  unint64_t v133 = *(void *)&v204[8 * v134];
  if (v133) {
    goto LABEL_90;
  }
  uint64_t v134 = v132 + 3;
  if (v132 + 3 >= (uint64_t)v205) {
    goto LABEL_110;
  }
  unint64_t v133 = *(void *)&v204[8 * v134];
  if (v133)
  {
LABEL_90:
    uint64_t v132 = v134;
    goto LABEL_91;
  }
  while (1)
  {
    uint64_t v132 = v134 + 1;
    if (__OFADD__(v134, 1)) {
      break;
    }
    if (v132 >= (uint64_t)v205) {
      goto LABEL_110;
    }
    unint64_t v133 = *(void *)&v204[8 * v132];
    ++v134;
    if (v133) {
      goto LABEL_91;
    }
  }
LABEL_124:
  __break(1u);
  return result;
}

void sub_1002EB410(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v105 = a2;
  uint64_t v106 = a1;
  uint64_t v96 = a3;
  uint64_t v99 = type metadata accessor for DIPError.Code();
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v100 = (uint64_t)v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007764(&qword_1007266B8);
  __chkstk_darwin(v4 - 8);
  uint64_t v97 = (uint64_t)v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_10072A7D8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  unint64_t v104 = (unint64_t)v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v107 = (uint64_t)v94 - v9;
  uint64_t v10 = sub_100007764(&qword_10072A6E8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v102 = (int *)((char *)v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v108 = (uint64_t)v94 - v13;
  uint64_t v14 = type metadata accessor for AugmentedProfile(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  char v101 = ((char *)v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v94 - v18;
  uint64_t v20 = sub_100007764(&qword_100726688);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  v94[0] = (uint64_t)v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  char v25 = (char *)v94 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)v94 - v26;
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  v94[2] = (uint64_t)v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  v94[1] = (uint64_t)v94 - v33;
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)v94 - v34;
  defaultLogger()();
  BOOL v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  Swift::String v103 = v27;
  if (v38)
  {
    int64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Using pre-computed assessment", v39, 2u);
    uint64_t v27 = v103;
    swift_slowDealloc();
  }

  uint64_t v40 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v95 = v29 + 8;
  v40(v35, v28);
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v41(v27, 1, 1, v14);
  sub_100048D6C(v105, (uint64_t)v25, &qword_100726688);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v25, 1, v14) == 1)
  {
    sub_10000C6CC((uint64_t)v25, &qword_100726688);
    swift_retain();
    sub_100007764((uint64_t *)&unk_100722630);
    runAsyncAndBlock<A>(file:function:line:_:)();
    swift_release();
    if (*((void *)&v112[0] + 1))
    {
      uint64_t v42 = v101;
      sub_1001FFFF4(*((uint64_t *)&v112[0] + 1), v101);
      sub_1002F5F4C((uint64_t)v42);
      uint64_t v47 = v94[0];
      sub_100307BEC((uint64_t)v42, v94[0], type metadata accessor for AugmentedProfile);
      uint64_t v48 = (uint64_t)v103;
      sub_10000C6CC((uint64_t)v103, &qword_100726688);
      swift_bridgeObjectRelease();
      v41((char *)v47, 0, 1, v14);
      sub_1000BEA14(v47, v48, &qword_100726688);
    }
    uint64_t v44 = v106;
    uint64_t v45 = v108;
    uint64_t v46 = v104;
    uint64_t v43 = v107;
  }
  else
  {
    sub_10000C6CC((uint64_t)v27, &qword_100726688);
    sub_100307BEC((uint64_t)v25, (uint64_t)v19, type metadata accessor for AugmentedProfile);
    sub_1003086F8((uint64_t)v19, (uint64_t)v27, type metadata accessor for AugmentedProfile);
    v41(v27, 0, 1, v14);
    sub_1002F5F4C((uint64_t)v19);
    sub_100302FA0((uint64_t)v19, type metadata accessor for AugmentedProfile);
    uint64_t v43 = v107;
    uint64_t v44 = v106;
    uint64_t v45 = v108;
    uint64_t v46 = v104;
  }
  uint64_t v49 = (int *)type metadata accessor for DIPPregeneratedAssessment(0);
  unint64_t v50 = (uint64_t *)(v44 + v49[7]);
  uint64_t v51 = *v50;
  uint64_t v52 = v50[1];
  uint64_t v53 = (unint64_t *)(v44 + v49[6]);
  uint64_t v54 = v53[1];
  unint64_t v104 = *v53;
  uint64_t v55 = (uint64_t *)(v44 + v49[12]);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  type metadata accessor for DIPODNator(0);
  uint64_t v105 = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LODWORD(v99) = sub_100301724(v51, v52);
  uint64_t v100 = v58;
  char v101 = v59;
  id v60 = (uint64_t *)(v44 + v49[10]);
  uint64_t v61 = v60[1];
  uint64_t v98 = *v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v62 = (uint64_t)v102;
  sub_1002EC390((uint64_t)v102, v46, v44);
  sub_1000BEA14(v62, v45, &qword_10072A6E8);
  sub_1000BEA14(v46, v43, &qword_10072A7D8);
  Date.timeIntervalSinceNow.getter();
  double v64 = -v63;
  if ((~COERCE__INT64(-v63) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v63 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v63 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v102 = v49;
  uint64_t v65 = *(void *)(v44 + v49[13]);
  uint64_t v66 = sub_100007764(&qword_100728600);
  int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 48))(v45, 1, v66);
  if (v67 == 1)
  {
    uint64_t v68 = 0;
  }
  else
  {
    uint64_t v68 = v65 + 1;
    if (__OFADD__(v65, 1))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
  }
  uint64_t v69 = sub_100007764(&qword_10072A7F8);
  int v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 48))(v43, 1, v69);
  if (v70 == 1)
  {
    uint64_t v71 = v61;
    uint64_t v72 = 0;
  }
  else
  {
    uint64_t v72 = v65 + 2;
    if (__OFADD__(v65, 2))
    {
LABEL_27:
      __break(1u);
      return;
    }
    uint64_t v71 = v61;
  }
  uint64_t v95 = v57;
  BOOL v73 = v70 == 1;
  v111[0] = v57;
  v111[1] = v56;
  v111[2] = v57;
  v111[3] = v56;
  v111[4] = v98;
  v111[5] = v71;
  memset(v112, 0, sizeof(v112));
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v113 = 1;
  char v116 = 0;
  uint64_t v74 = v105;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v98 = (uint64_t)v64;
  uint64_t v75 = (uint64_t)v103;
  char v93 = v73;
  char v76 = v99 & 1;
  uint64_t v92 = v72;
  uint64_t v77 = v107;
  char v91 = v67 == 1;
  uint64_t v78 = v108;
  uint64_t v79 = v109;
  sub_1002F2AE0(v104, v74, v111, v100, (uint64_t)v101, v65, (uint64_t *)v112, v99 & 1, v108, v68, v91, v107, v92, v93, (uint64_t)v103, (uint64_t)v64, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (__OFADD__(v65, 1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v80 = v97;
  sub_1002F5C8C(v98, v76, v78, v65 + 1, v97);
  BOOL v81 = (uint64_t *)(v106 + v102[8]);
  uint64_t v83 = *v81;
  uint64_t v82 = v81[1];
  v110[3] = &type metadata for String;
  v110[4] = &off_1006FBE20;
  v110[0] = v83;
  v110[1] = v82;
  swift_bridgeObjectRetain();
  sub_10000C6CC(v75, &qword_100726688);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v85 = *(void *)(v79 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  uint64_t v84 = *(void *)(v79 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
  uint64_t v86 = v96;
  sub_1000BEA14((uint64_t)v110, v96, &qword_100726690);
  *(void *)(v86 + 40) = v95;
  *(void *)(v86 + 48) = v56;
  uint64_t v87 = v105;
  *(void *)(v86 + 56) = v104;
  *(void *)(v86 + 64) = v87;
  *(void *)(v86 + 72) = 0;
  *(void *)(v86 + 80) = 0;
  sub_1000BEA14((uint64_t)v112, v86 + 88, &qword_10072A8A0);
  *(_OWORD *)(v86 + 152) = 0u;
  *(_OWORD *)(v86 + 168) = 0u;
  *(_OWORD *)(v86 + 184) = 0u;
  *(_OWORD *)(v86 + 200) = 0u;
  *(void *)(v86 + 216) = v85;
  *(void *)(v86 + 224) = v84;
  uint64_t v88 = type metadata accessor for ODNAssessmentResult(0);
  sub_1000BEA14(v80, v86 + *(int *)(v88 + 44), &qword_1007266B8);
  swift_bridgeObjectRetain();
  sub_10000C6CC(v77, &qword_10072A7D8);
  sub_10000C6CC(v78, &qword_10072A6E8);
  unint64_t v89 = *(void **)(v79 + 376);
  if (v89)
  {
    id v90 = v89;
    OS_dispatch_semaphore.signal()();
  }
}

uint64_t sub_1002EC1DC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1002EC1FC, 0, 0);
}

uint64_t sub_1002EC1FC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_1002EC290;
  return sub_1005F058C();
}

uint64_t sub_1002EC290(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100308760, 0, 0);
}

uint64_t sub_1002EC390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v39 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v42 - 8);
  uint64_t v7 = __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v45 = sub_100007764(&qword_10072A7F8);
  uint64_t v11 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100007764(&qword_100728600);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DIPPregeneratedAssessment(0);
  if (*(void *)(a3 + *(int *)(v18 + 60) + 8))
  {
    uint64_t v19 = v18;
    uint64_t v20 = Data.init(base64Encoded:options:)();
    if (v21 >> 60 != 15)
    {
      unint64_t v22 = v21;
      if (*(void *)(a3 + *(int *)(v19 + 64) + 8))
      {
        uint64_t v37 = v20;
        unint64_t v38 = v21;
        uint64_t v24 = Data.init(base64Encoded:options:)();
        uint64_t v20 = v37;
        unint64_t v22 = v38;
        if (v23 >> 60 != 15)
        {
          unint64_t v35 = v23;
          uint64_t v36 = v24;
          type metadata accessor for JSONDecoder();
          swift_allocObject();
          JSONDecoder.init()();
          sub_1000B6120(&qword_10072A8E8, &qword_100728600);
          dispatch thunk of JSONDecoder.decode<A>(_:from:)();
          sub_1000B6120(&qword_10072A8F0, &qword_10072A7F8);
          unint64_t v32 = v35;
          dispatch thunk of JSONDecoder.decode<A>(_:from:)();
          sub_10000C5E0(v37, v38);
          swift_release();
          sub_10000C5E0(v36, v32);
          uint64_t v33 = v43;
          (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v43, v17, v14);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v33, 0, 1, v14);
          uint64_t v30 = v44;
          uint64_t v34 = v45;
          (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v44, v13, v45);
          uint64_t v28 = 0;
          uint64_t v29 = v34;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v30, v28, 1, v29);
        }
      }
      sub_10000C5E0(v20, v22);
    }
  }
  defaultLogger()();
  char v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "No Encrypted Containers from pre-generated assessment", v27, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v42);
  uint64_t v28 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v43, 1, 1, v14);
  uint64_t v30 = v44;
  uint64_t v29 = v45;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v30, v28, 1, v29);
}

uint64_t sub_1002ECA0C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v7 = v6;
  int v346 = a5;
  uint64_t v373 = a6;
  uint64_t v374 = a4;
  unint64_t v347 = (uint64_t *)a3;
  int v348 = a2;
  uint64_t v351 = a1;
  uint64_t v8 = sub_100007764(&qword_1007266B8);
  __chkstk_darwin(v8 - 8);
  uint64_t v339 = (uint64_t)&v323 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v336 = type metadata accessor for String.Encoding();
  v338 = *(char **)(v336 - 8);
  __chkstk_darwin(v336);
  unint64_t v337 = (char *)&v323 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007764(&qword_100726860);
  uint64_t v352 = *(void *)(v11 - 8);
  uint64_t v353 = v11;
  __chkstk_darwin(v11);
  uint64_t v340 = (char *)&v323 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_10072A7D8);
  uint64_t v344 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v350 = (char *)&v323 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v335 = (uint64_t)&v323 - v17;
  uint64_t v345 = v18;
  __chkstk_darwin(v16);
  uint64_t v356 = (uint64_t)&v323 - v19;
  uint64_t v20 = sub_100007764(&qword_10072A6E8);
  uint64_t v342 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v349 = (uint64_t)&v323 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v341 = (uint64_t)&v323 - v24;
  uint64_t v343 = v25;
  __chkstk_darwin(v23);
  uint64_t v354 = (uint64_t)&v323 - v26;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v358 = *(void *)(v27 - 8);
  uint64_t v359 = v27;
  uint64_t v28 = __chkstk_darwin(v27);
  v361 = (char *)&v323 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v360 = (char *)&v323 - v30;
  uint64_t v31 = type metadata accessor for DIPError.Code();
  uint64_t v369 = *(void *)(v31 - 8);
  unint64_t v370 = v31;
  __chkstk_darwin(v31);
  uint64_t v377 = (uint64_t)&v323 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100007764(&qword_100726688);
  __chkstk_darwin(v33 - 8);
  unint64_t v35 = (char *)&v323 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v379 = type metadata accessor for AugmentedProfile(0);
  uint64_t v36 = *(void *)(v379 - 8);
  uint64_t v37 = __chkstk_darwin(v379);
  unint64_t v364 = (unint64_t)&v323 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  v367 = ((char *)&v323 - v40);
  uint64_t v41 = __chkstk_darwin(v39);
  unint64_t v363 = (unint64_t)&v323 - v42;
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v323 - v43;
  uint64_t v380 = type metadata accessor for Logger();
  uint64_t v45 = *(void *)(v380 - 8);
  uint64_t v46 = __chkstk_darwin(v380);
  uint64_t v368 = (char *)&v323 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v46);
  v366 = (char *)&v323 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v365 = (uint64_t)&v323 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  v362 = (char *)&v323 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  unint64_t v357 = (char *)&v323 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v355 = (uint64_t)&v323 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  v372 = (char *)&v323 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v62 = (char *)&v323 - v61;
  __chkstk_darwin(v60);
  double v64 = (char *)&v323 - v63;
  defaultLogger()();
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  BOOL v67 = os_log_type_enabled(v65, v66);
  unint64_t v376 = v7;
  if (v67)
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Computing new assessment", v68, 2u);
    unint64_t v7 = v376;
    swift_slowDealloc();
  }

  uint64_t v69 = v45 + 8;
  int v70 = *(void (**)(char *, uint64_t))(v45 + 8);
  v70(v64, v380);
  uint64_t v71 = v379;
  uint64_t v375 = swift_allocBox();
  uint64_t v73 = v72;
  sub_100048D6C((uint64_t)v374, (uint64_t)v35, &qword_100726688);
  int v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v35, 1, v71);
  uint64_t v378 = v69;
  if (v74 != 1)
  {
    sub_100307BEC((uint64_t)v35, (uint64_t)v44, type metadata accessor for AugmentedProfile);
    sub_1003086F8((uint64_t)v44, v73, type metadata accessor for AugmentedProfile);
    sub_1002F5F4C((uint64_t)v44);
    uint64_t v374 = 0;
LABEL_7:
    sub_100302FA0((uint64_t)v44, type metadata accessor for AugmentedProfile);
    uint64_t v76 = v379;
    swift_bridgeObjectRetain();
    uint64_t v77 = Data.init(base64Encoded:options:)();
    unint64_t v79 = v78;
    swift_bridgeObjectRelease();
    if (v79 >> 60 == 15)
    {
      uint64_t v80 = v366;
      defaultLogger()();
      BOOL v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v83 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "assessment profile is missing, skip assessment", v83, 2u);
        swift_slowDealloc();
      }

      v70(v80, v380);
      (*(void (**)(uint64_t, void, unint64_t))(v369 + 104))(v377, enum case for DIPError.Code.odnMissingProfile(_:), v370);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v84 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      uint64_t v85 = *(void *)v84;
      *(void *)&long long v379 = *(void *)(*(void *)v84 + 72);
      unint64_t v86 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      uint64_t v87 = swift_allocObject();
      *(_OWORD *)(v87 + 16) = xmmword_100611020;
      unint64_t v88 = v87 + v86;
      unint64_t v89 = (void *)(v88 + v84[14]);
      uint64_t v90 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
      uint64_t v91 = type metadata accessor for DIPError.PropertyKey();
      char v371 = v70;
      uint64_t v92 = *(void (**)(void))(*(void *)(v91 - 8) + 104);
      ((void (*)(unint64_t, uint64_t, uint64_t))v92)(v88, v90, v91);
      unint64_t v93 = v376;
      uint64_t v94 = *(void *)(v376 + 16);
      uint64_t v95 = *(void *)(v376 + 24);
      v89[3] = &type metadata for String;
      *unint64_t v89 = v94;
      v89[1] = v95;
      uint64_t v96 = (void *)(v88 + v379 + v84[14]);
      v92();
      uint64_t v97 = *(void *)(v93 + 32);
      uint64_t v98 = *(void *)(v93 + 40);
      v96[3] = &type metadata for String;
      void *v96 = v97;
      v96[1] = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10015C504(v87);
      type metadata accessor for DIPError();
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v99 = v372;
      defaultLogger()();
      DIPRecordError(_:message:log:)();
LABEL_16:
      v371(v99, v380);
      swift_errorRelease();
      swift_beginAccess();
      uint64_t v122 = v373;
      sub_100048D6C(v93 + 216, v373, &qword_100726690);
      char v123 = (uint64_t *)(v93 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
LABEL_17:
      uint64_t v125 = *v123;
      uint64_t v124 = v123[1];
      uint64_t v126 = v122 + *(int *)(type metadata accessor for ODNAssessmentResult(0) + 44);
      uint64_t v127 = type metadata accessor for AssessmentAdditionalInfo(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 56))(v126, 1, 1, v127);
      *(_OWORD *)(v122 + 104) = 0u;
      *(_OWORD *)(v122 + 88) = 0u;
      *(_OWORD *)(v122 + 72) = 0u;
      *(_OWORD *)(v122 + 56) = 0u;
      *(_OWORD *)(v122 + 40) = 0u;
      *(void *)(v122 + 128) = 0;
      *(void *)(v122 + 136) = 0;
      *(void *)(v122 + 120) = 1;
      *(unsigned char *)(v122 + 144) = 0;
      *(_OWORD *)(v122 + 152) = 0u;
      *(_OWORD *)(v122 + 168) = 0u;
      *(_OWORD *)(v122 + 184) = 0u;
      *(_OWORD *)(v122 + 200) = 0u;
      *(void *)(v122 + 216) = v125;
      *(void *)(v122 + 224) = v124;
LABEL_18:
      swift_bridgeObjectRetain();
      return swift_release();
    }
    uint64_t v100 = *(int *)(v76 + 24);
    v366 = (char *)v73;
    if (!*(void *)(v73 + v100 + 8)
      || (swift_bridgeObjectRetain(),
          uint64_t v101 = Data.init(base64Encoded:options:)(),
          unint64_t v103 = v102,
          swift_bridgeObjectRelease(),
          v103 >> 60 == 15))
    {
      v367 = v77;
      unint64_t v364 = v79;
      uint64_t v104 = v365;
      defaultLogger()();
      uint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v105, v106))
      {
        uint64_t v107 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v107 = 0;
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "assessment profileInfo is missing, skip assessment", v107, 2u);
        swift_slowDealloc();
      }

      v70((char *)v104, v380);
      (*(void (**)(uint64_t, void, unint64_t))(v369 + 104))(v377, enum case for DIPError.Code.assessmentProfileInfoMissing(_:), v370);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v108 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      uint64_t v109 = *(void *)v108;
      *(void *)&long long v379 = *(void *)(*(void *)v108 + 72);
      unint64_t v110 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
      uint64_t v111 = swift_allocObject();
      *(_OWORD *)(v111 + 16) = xmmword_100611020;
      unint64_t v112 = v111 + v110;
      uint64_t v113 = (void *)(v112 + v108[14]);
      uint64_t v114 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
      uint64_t v115 = type metadata accessor for DIPError.PropertyKey();
      char v371 = v70;
      char v116 = *(void (**)(void))(*(void *)(v115 - 8) + 104);
      ((void (*)(unint64_t, uint64_t, uint64_t))v116)(v112, v114, v115);
      unint64_t v93 = v376;
      uint64_t v117 = *(void *)(v376 + 16);
      uint64_t v118 = *(void *)(v376 + 24);
      v113[3] = &type metadata for String;
      void *v113 = v117;
      v113[1] = v118;
      id v119 = (void *)(v112 + v379 + v108[14]);
      v116();
      uint64_t v120 = *(void *)(v93 + 32);
      uint64_t v121 = *(void *)(v93 + 40);
      v119[3] = &type metadata for String;
      *id v119 = v120;
      v119[1] = v121;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10015C504(v111);
      type metadata accessor for DIPError();
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t v99 = v372;
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      sub_10000C5E0((uint64_t)v367, v364);
      goto LABEL_16;
    }
    uint64_t v377 = v101;
    swift_beginAccess();
    unint64_t v370 = v7 + 216;
    sub_100048D6C(v7 + 216, (uint64_t)&v397, &qword_100726690);
    uint64_t v154 = v400;
    sub_10000C6CC((uint64_t)&v397, &qword_100726690);
    if (!v154
      || *(void *)(v7 + 280) >> 60 == 15
      || !*(void *)(v7 + 264)
      || (swift_beginAccess(),
          sub_100048D6C(v7 + 288, (uint64_t)&v397, &qword_100726690),
          uint64_t v155 = v400,
          sub_10000C6CC((uint64_t)&v397, &qword_100726690),
          !v155)
      || *(void *)(v7 + 352) >> 60 == 15
      || !*(void *)(v7 + 336))
    {
      swift_retain();
      char v156 = v374;
      runAsyncAndBlock<A>(timeout:file:function:line:_:)();
      uint64_t v374 = v156;
      if (v156)
      {
        sub_10000C5E0(v377, v103);
        sub_10000C5E0((uint64_t)v77, v79);
        swift_release();
LABEL_30:
        swift_release();
        goto LABEL_31;
      }
      swift_release();
    }
    unint64_t v180 = *(void *)(v7 + 280);
    os_log_type_t v181 = v361;
    if (v180 >> 60 == 15 || (uint64_t v182 = *(void *)(v7 + 264)) == 0)
    {
      defaultLogger()();
      long long v190 = Logger.logObject.getter();
      os_log_type_t v191 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v190, v191))
      {
        int v192 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v192 = 0;
        _os_log_impl((void *)&_mh_execute_header, v190, v191, "No assessment guid was set; skipping assessment",
          v192,
          2u);
        swift_slowDealloc();
        sub_10000C5E0((uint64_t)v77, v79);

        sub_10000C5E0(v377, v103);
      }
      else
      {
        sub_10000C5E0(v377, v103);
        sub_10000C5E0((uint64_t)v77, v79);
      }
      v70(v362, v380);
      uint64_t v122 = v373;
      sub_100048D6C(v370, v373, &qword_100726690);
      char v123 = (uint64_t *)(v7 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
      goto LABEL_17;
    }
    char v371 = v70;
    uint64_t v183 = *(void *)(v7 + 272);
    unint64_t v330 = *(void *)(v7 + 256);
    v362 = (char *)v183;
    unint64_t v363 = v180;
    sub_1000338D4(v183, v180);
    swift_bridgeObjectRetain();
    UUID.init()();
    uint64_t v184 = UUID.uuidString.getter();
    uint64_t v369 = v185;
    uint64_t v186 = *(void *)(v7 + 72);
    uint64_t v365 = v182;
    uint64_t v333 = v184;
    if (v186)
    {
      uint64_t v187 = *(void *)(v7 + 64);
      if (qword_10071F5D0 != -1) {
        swift_once();
      }
      uint64_t v188 = v374;
      uint64_t v189 = sub_10056EF70(*(void *)(v7 + 48), *(void *)(v7 + 56), v187, v186);
      uint64_t v374 = v188;
      if (v188)
      {
        sub_10000C5E0((uint64_t)v362, v363);
        sub_10000C5E0((uint64_t)v77, v79);
        swift_bridgeObjectRelease();
        sub_10000C5E0(v377, v103);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v358 + 8))(v360, v359);
        swift_release();
        int v70 = v371;
        goto LABEL_31;
      }
      uint64_t v199 = *(void *)(v189 + 16);
      uint64_t v198 = v358;
      uint64_t v197 = v359;
      if (v199)
      {
        uint64_t v200 = v189 + 16 * v199;
        uint64_t v201 = *(void *)(v200 + 24);
        uint64_t v333 = *(void *)(v200 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v369 = v201;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v193 = v355;
      defaultLogger()();
      unint64_t v194 = Logger.logObject.getter();
      os_log_type_t v195 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v194, v195))
      {
        uint64_t v196 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v196 = 0;
        _os_log_impl((void *)&_mh_execute_header, v194, v195, "No launch tiers, so no sessions to search for", v196, 2u);
        swift_slowDealloc();
      }

      v371((char *)v193, v380);
      uint64_t v198 = v358;
      uint64_t v197 = v359;
    }
    uint64_t v202 = v360;
    uint64_t v203 = UUID.uuidString.getter();
    uint64_t v355 = v204;
    uint64_t v331 = *(void *)(v7 + 328);
    uint64_t v332 = v203;
    uint64_t v334 = *(void *)(v7 + 336);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v205 = v357;
    defaultLogger()();
    (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v181, v202, v197);
    swift_retain_n();
    uint64_t v206 = Logger.logObject.getter();
    LODWORD(v329) = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v206, (os_log_type_t)v329))
    {
      os_log_t v328 = v206;
      v367 = v77;
      unint64_t v364 = v79;
      uint64_t v207 = swift_slowAlloc();
      uint64_t v397 = swift_slowAlloc();
      *(_DWORD *)uint64_t v207 = 136315394;
      uint64_t v208 = UUID.uuidString.getter();
      *(void *)&v390[0] = sub_100110D58(v208, v209, &v397);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v361 = *(char **)(v198 + 8);
      ((void (*)(char *, uint64_t))v361)(v181, v197);
      *(_WORD *)(v207 + 12) = 2080;
      if (*(void *)(v7 + 336))
      {
        uint64_t v210 = *(void *)(v7 + 328);
        unint64_t v211 = *(void *)(v7 + 336);
      }
      else
      {
        unint64_t v211 = 0xE500000000000000;
        uint64_t v210 = 0x3E6C696E3CLL;
      }
      uint64_t v212 = v357;
      swift_bridgeObjectRetain();
      *(void *)&v390[0] = sub_100110D58(v210, v211, &v397);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v213 = v328;
      _os_log_impl((void *)&_mh_execute_header, v328, (os_log_type_t)v329, "using tsid %s ts session %%@ tguid %s", (uint8_t *)v207, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      int v70 = v371;
      v371(v212, v380);
      unint64_t v79 = v364;
      uint64_t v77 = v367;
    }
    else
    {
      v361 = *(char **)(v198 + 8);
      ((void (*)(char *, uint64_t))v361)(v181, v197);

      swift_release_n();
      int v70 = v371;
      v371(v205, v380);
    }
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v397 = v332;
    uint64_t v398 = v355;
    uint64_t v399 = v333;
    *(void *)&long long v400 = v369;
    *((void *)&v400 + 1) = v331;
    uint64_t v401 = v334;
    sub_100307024();
    unint64_t v214 = v374;
    uint64_t v215 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v374 = v214;
    if (!v214)
    {
      unint64_t v327 = v103;
      uint64_t v217 = v215;
      unint64_t v218 = v216;
      swift_release();
      sub_100007764(&qword_100724098);
      uint64_t v219 = swift_allocObject();
      *(_OWORD *)(v219 + 16) = xmmword_100610730;
      *(void *)(v219 + 32) = v217;
      *(void *)(v219 + 40) = v218;
      unint64_t v357 = (char *)v219;
      os_log_t v328 = v217;
      unint64_t v329 = v218;
      sub_10002CEB0((uint64_t)v217, v218);
      if (qword_10071F580 != -1) {
        swift_once();
      }
      id v326 = [self deviceLockState];
      uint64_t v221 = v352;
      uint64_t v220 = v353;
      long long v222 = v366;
      int v223 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v352 + 48))(v366, 1, v353);
      uint64_t v224 = v354;
      unint64_t v225 = v332;
      if (v223)
      {
        uint64_t v226 = 0;
        uint64_t v227 = 0;
      }
      else
      {
        v367 = v77;
        unint64_t v364 = v79;
        char v228 = v340;
        (*(void (**)(char *, char *, uint64_t))(v221 + 16))(v340, v222, v220);
        JWSSignedJSON.payload.getter();
        (*(void (**)(char *, uint64_t))(v221 + 8))(v228, v220);
        uint64_t v229 = v397;
        uint64_t v230 = v398;
        uint64_t v231 = v399;
        uint64_t v226 = v402;
        uint64_t v227 = v403;
        uint64_t v352 = v405;
        uint64_t v353 = v404;
        uint64_t v340 = v406;
        sub_1002090C4(v397, v398);
        uint64_t v324 = v229;
        uint64_t v325 = v231;
        sub_1001D8D24(v229, v230);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v230)
        {
          swift_bridgeObjectRetain();
          sub_1001D8D24(v324, v230);
        }
        else
        {
          uint64_t v226 = 0;
          uint64_t v227 = 0;
        }
        unint64_t v7 = v376;
        int v70 = v371;
        unint64_t v79 = v364;
        uint64_t v77 = v367;
        unint64_t v225 = v332;
      }
      uint64_t v232 = v224;
      uint64_t v233 = v224;
      uint64_t v234 = v374;
      sub_1002EF964(v232, v356, v226, v227, v225, v355, v330, v365);
      uint64_t v374 = v234;
      if (!v234)
      {
        swift_bridgeObjectRelease();
        uint64_t v235 = v341;
        sub_100048D6C(v233, v341, &qword_10072A6E8);
        uint64_t v236 = sub_100007764(&qword_100728600);
        uint64_t v237 = *(void *)(v236 - 8);
        int v238 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v237 + 48))(v235, 1, v236);
        unint64_t v364 = v79;
        v367 = v77;
        if (v238 == 1)
        {
          sub_10000C6CC(v235, &qword_10072A6E8);
          uint64_t v239 = v356;
        }
        else
        {
          uint64_t v240 = v233;
          EncryptedDataContainer.data.getter();
          uint64_t v242 = v241;
          (*(void (**)(uint64_t, uint64_t))(v237 + 8))(v235, v236);
          if (!v242) {
            goto LABEL_77;
          }
          char v243 = v337;
          static String.Encoding.utf8.getter();
          uint64_t object = String.data(using:allowLossyConversion:)();
          unint64_t v246 = v245;
          swift_bridgeObjectRelease();
          uint64_t v247 = v338 + 8;
          long long v248 = (void (*)(char *, uint64_t))*((void *)v338 + 1);
          uint64_t v249 = v243;
          uint64_t v250 = v336;
          v248(v249, v336);
          if (v246 >> 60 != 15)
          {
            v338 = v247;
            uint64_t v239 = v356;
            uint64_t v291 = v335;
            sub_100048D6C(v356, v335, &qword_10072A7D8);
            uint64_t v292 = sub_100007764(&qword_10072A7F8);
            uint64_t v293 = *(void *)(v292 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v293 + 48))(v291, 1, v292) != 1)
            {
              EncryptedDataContainer.data.getter();
              uint64_t v310 = v291;
              uint64_t v312 = v311;
              (*(void (**)(uint64_t, uint64_t))(v293 + 8))(v310, v292);
              if (v312)
              {
                v313 = v337;
                static String.Encoding.utf8.getter();
                uint64_t v286 = String.data(using:allowLossyConversion:)();
                unint64_t v7 = v314;
                swift_bridgeObjectRelease();
                v248(v313, v250);
                if (v7 >> 60 != 15)
                {
                  sub_10002CEB0(object, v246);
                  unint64_t v285 = *((void *)v357 + 2);
                  unint64_t v294 = *((void *)v357 + 3);
                  int64_t countAndFlagsBits = v285 + 1;
                  if (v285 < v294 >> 1) {
                    goto LABEL_104;
                  }
                  goto LABEL_109;
                }
              }
              uint64_t v315 = object;
              unint64_t v316 = v246;
              goto LABEL_107;
            }
            sub_10000C5E0(object, v246);
            sub_10000C6CC(v291, &qword_10072A7D8);
            unint64_t v7 = v376;
          }
          else
          {
LABEL_77:
            uint64_t v239 = v356;
          }
          uint64_t v233 = v240;
        }
        while (1)
        {
          unint64_t v251 = (unint64_t)v326 - 1;
          if (qword_10071F4D0 != -1) {
            swift_once();
          }
          BOOL v252 = v251 < 2;
          uint64_t v352 = *(void *)(v7 + 32);
          uint64_t v353 = qword_100760320;
          uint64_t v341 = *(void *)(v7 + 40);
          LODWORD(v340) = *(unsigned __int8 *)(v7 + 208);
          uint64_t v253 = *(char **)(v7 + 368);
          unint64_t v337 = (char *)v251;
          v338 = v253;
          sub_100048D6C(v233, v349, &qword_10072A6E8);
          sub_100048D6C(v239, (uint64_t)v350, &qword_10072A7D8);
          unint64_t v254 = (*(unsigned __int8 *)(v342 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v342 + 80);
          unint64_t v255 = (v343 + *(unsigned __int8 *)(v344 + 80) + v254) & ~(unint64_t)*(unsigned __int8 *)(v344 + 80);
          uint64_t v256 = v255 + v345;
          unint64_t v257 = (v255 + v345) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v258 = (v257 + 63) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v259 = swift_allocObject();
          uint64_t v260 = v375;
          *(void *)(v259 + 16) = v376;
          uint64_t v261 = (void *)(v257 + v259);
          *(unsigned char *)(v259 + 24) = v252;
          uint64_t v262 = v333;
          *(void *)(v259 + 32) = v260;
          *(void *)(v259 + 40) = v262;
          uint64_t v263 = v259 + v254;
          unint64_t v7 = v376;
          uint64_t v264 = v369;
          uint64_t v265 = v351;
          *(void *)(v259 + 48) = v369;
          *(void *)(v259 + 56) = v265;
          sub_1000BEA14(v349, v263, &qword_10072A6E8);
          sub_1000BEA14((uint64_t)v350, v259 + v255, &qword_10072A7D8);
          *(unsigned char *)(v259 + v256) = v346 & 1;
          uint64_t v266 = v355;
          v261[1] = v332;
          v261[2] = v266;
          v261[3] = v262;
          v261[4] = v264;
          uint64_t v267 = v259 + v258;
          uint64_t v268 = v334;
          v261[5] = v331;
          v261[6] = v268;
          v269 = v347;
          sub_1000BEA14((uint64_t)v347, v267, &qword_10072A8A0);
          swift_retain();
          uint64_t v369 = v264;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v270 = v377;
          uint64_t v271 = v327;
          sub_1000338D4(v377, v327);
          uint64_t v350 = v338;
          swift_retain();
          uint64_t v272 = v351;
          swift_bridgeObjectRetain();
          uint64_t v273 = v270;
          swift_bridgeObjectRetain();
          sub_100307CA0(v269);
          unint64_t v275 = v363;
          unint64_t v274 = v364;
          uint64_t v276 = v272;
          uint64_t v277 = (uint64_t)v362;
          unint64_t v278 = v374;
          sub_100200C18((uint64_t)v367, v364, v273, v271, v276, (uint64_t)v357, (uint64_t)v362, v363, &v407, v352, v341, v340);
          if (v278)
          {
            uint64_t v279 = (uint64_t)v278;
            sub_10000C5E0(v277, v275);
            swift_bridgeObjectRelease();

            unint64_t v280 = v327;
            sub_10000C5E0(v273, v327);
            swift_release();
            swift_release();
            sub_10000C5E0((uint64_t)v367, v274);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10000C5E0(v273, v280);
            sub_10000C5F4((uint64_t)v328, v329);
            sub_10000C6CC(v356, &qword_10072A7D8);
            sub_10000C6CC(v354, &qword_10072A6E8);
            ((void (*)(char *, uint64_t))v361)(v360, v359);
            swift_release();
            int v70 = v371;
            uint64_t v157 = v368;
            uint64_t v158 = v279;
            goto LABEL_32;
          }
          uint64_t v281 = v273;
          unint64_t v282 = (unint64_t)v337;
          swift_bridgeObjectRelease();

          sub_10000C5E0(v281, v327);
          swift_release();
          swift_release();
          Swift::String v283 = Data.base64EncodedString(options:)(0);
          int64_t countAndFlagsBits = v283._countAndFlagsBits;
          uint64_t object = (uint64_t)v283._object;
          unint64_t v285 = 0;
          uint64_t v286 = v409;
          if (v409 >> 60 != 15)
          {
            uint64_t v287 = v408;
            sub_10002CEB0(v408, v409);
            Swift::String v288 = Data.base64EncodedString(options:)(0);
            unint64_t v285 = v288._countAndFlagsBits;
            unint64_t v278 = v288._object;
            sub_10000C5E0(v287, v286);
          }
          uint64_t v380 = (uint64_t)v278;
          sub_100048D6C(v370, (uint64_t)v396, &qword_100726690);
          uint64_t v289 = v354;
          if (v396[3])
          {
            sub_100007764(&qword_100728CC0);
            int v290 = swift_dynamicCast();
            unint64_t v246 = v330;
            if (v290)
            {
              long long v387 = v393;
              long long v388 = v394;
              uint64_t v389 = v395;
              long long v383 = v390[2];
              long long v384 = v390[3];
              long long v385 = v391;
              long long v386 = v392;
              long long v381 = v390[0];
              long long v382 = v390[1];
              nullsub_7(&v381);
            }
            else
            {
              sub_10027F5C0((uint64_t)&v381);
            }
            sub_1000BEA14((uint64_t)&v381, (uint64_t)&v397, &qword_100728CB0);
          }
          else
          {
            sub_10000C6CC((uint64_t)v396, &qword_100726690);
            sub_10027F5C0((uint64_t)v390);
            sub_1000BEA14((uint64_t)v390, (uint64_t)&v397, &qword_100728CB0);
            unint64_t v246 = v330;
          }
          unint64_t v294 = v410;
          if (v410 != -1) {
            break;
          }
          __break(1u);
LABEL_109:
          unint64_t v357 = (char *)sub_10010FE64((void *)(v294 > 1), countAndFlagsBits, 1, v357);
LABEL_104:
          uint64_t v317 = v357;
          *((void *)v357 + 2) = countAndFlagsBits;
          v318 = &v317[2 * v285];
          v318[4] = object;
          v318[5] = v246;
          sub_10002CEB0(v286, v7);
          unint64_t v319 = v317[3];
          int64_t v320 = v285 + 2;
          if (v320 > (uint64_t)(v319 >> 1)) {
            unint64_t v357 = (char *)sub_10010FE64((void *)(v319 > 1), v320, 1, v357);
          }
          char v321 = v357;
          *((void *)v357 + 2) = v320;
          v322 = &v321[2 * countAndFlagsBits];
          v322[4] = v286;
          v322[5] = v7;
          sub_10000C5E0(object, v246);
          uint64_t v315 = v286;
          unint64_t v316 = v7;
LABEL_107:
          sub_10000C5E0(v315, v316);
          unint64_t v7 = v376;
          uint64_t v239 = v356;
          uint64_t v233 = v354;
        }
        v372 = (char *)v285;
        uint64_t v374 = (char *)v283._object;
        uint64_t v378 = v283._countAndFlagsBits;
        sub_1002F5C8C(0, v282 < 2, v289, v410 + 1, v339);
        *((void *)&v382 + 1) = &type metadata for String;
        *(void *)&long long v383 = &off_1006FBE20;
        *(void *)&long long v381 = v246;
        *((void *)&v381 + 1) = v365;
        sub_1000BEA14((uint64_t)&v397, (uint64_t)v390, &qword_100728CB0);
        if (sub_10027F5A8((uint64_t)v390) == 1)
        {
          uint64_t v295 = v355;
          swift_bridgeObjectRetain();
          sub_10000C5E0((uint64_t)v362, v363);
          sub_10000C5E0((uint64_t)v367, v364);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v376 = 0;
          unint64_t v296 = 0;
          unint64_t v370 = 0;
          char v371 = 0;
          uint64_t v297 = 0;
          uint64_t v298 = 0;
          uint64_t v299 = 0;
          uint64_t v300 = 0;
        }
        else
        {
          uint64_t v301 = 49;
          if (LOBYTE(v390[0])) {
            uint64_t v301 = 50;
          }
          unint64_t v376 = v301;
          unint64_t v370 = *((void *)&v392 + 1);
          uint64_t v297 = v392;
          char v371 = (void (*)(char *, uint64_t))*((void *)&v391 + 1);
          uint64_t v299 = *((void *)&v393 + 1);
          uint64_t v298 = v393;
          uint64_t v300 = v394;
          uint64_t v295 = v355;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_10000C5E0((uint64_t)v362, v363);
          sub_10000C5E0((uint64_t)v367, v364);
          sub_1003083C8(&v397);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v296 = 0xE100000000000000;
        }
        sub_100307078((uint64_t *)&v407, (void (*)(uint64_t, uint64_t))sub_10000C5E0, (void (*)(uint64_t, uint64_t))sub_10000C5F4);
        sub_10000C5E0(v377, v327);
        sub_10000C5F4((uint64_t)v328, v329);
        sub_10000C6CC(v356, &qword_10072A7D8);
        sub_10000C6CC(v289, &qword_10072A6E8);
        ((void (*)(char *, uint64_t))v361)(v360, v359);
        unint64_t v302 = v366;
        swift_beginAccess();
        uint64_t v303 = &v302[*(int *)(v379 + 28)];
        uint64_t v305 = *(void *)v303;
        uint64_t v304 = *((void *)v303 + 1);
        uint64_t v306 = v373;
        sub_1000BEA14((uint64_t)&v381, v373, &qword_100726690);
        *(void *)(v306 + 40) = v332;
        *(void *)(v306 + 48) = v295;
        unint64_t v307 = v374;
        *(void *)(v306 + 56) = v378;
        *(void *)(v306 + 64) = v307;
        uint64_t v308 = v380;
        *(void *)(v306 + 72) = v372;
        *(void *)(v306 + 80) = v308;
        *(_OWORD *)(v306 + 88) = 0u;
        *(_OWORD *)(v306 + 104) = 0u;
        *(void *)(v306 + 128) = 0;
        *(void *)(v306 + 136) = 0;
        *(void *)(v306 + 120) = 1;
        *(unsigned char *)(v306 + 144) = 0;
        *(void *)(v306 + 152) = v376;
        *(void *)(v306 + 160) = v296;
        *(void *)(v306 + 168) = v371;
        *(void *)(v306 + 176) = v297;
        *(void *)(v306 + 184) = v370;
        *(void *)(v306 + 192) = v298;
        *(void *)(v306 + 200) = v299;
        *(void *)(v306 + 208) = v300;
        *(void *)(v306 + 216) = v305;
        *(void *)(v306 + 224) = v304;
        uint64_t v309 = type metadata accessor for ODNAssessmentResult(0);
        sub_1000BEA14(v339, v306 + *(int *)(v309 + 44), &qword_1007266B8);
        goto LABEL_18;
      }
      sub_10000C5E0((uint64_t)v362, v363);
      swift_bridgeObjectRelease();
      sub_10000C5E0((uint64_t)v77, v79);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000C5E0(v377, v327);
      sub_10000C5F4((uint64_t)v328, v329);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v361)(v360, v359);
      goto LABEL_30;
    }
    sub_10000C5E0((uint64_t)v362, v363);
    swift_release();
    sub_10000C5E0((uint64_t)v77, v79);
    swift_bridgeObjectRelease();
    sub_10000C5E0(v377, v103);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v361)(v360, v359);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_31:
    uint64_t v157 = v368;
    uint64_t v158 = (uint64_t)v374;
LABEL_32:
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    Swift::String v159 = Logger.logObject.getter();
    os_log_type_t v160 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v159, v160))
    {
      uint64_t v161 = (uint8_t *)swift_slowAlloc();
      uint64_t v162 = swift_slowAlloc();
      char v371 = v70;
      uint64_t v397 = v162;
      *(_DWORD *)uint64_t v161 = 136446210;
      *(void *)&v390[0] = v158;
      swift_errorRetain();
      sub_100007764((uint64_t *)&unk_100723450);
      uint64_t v163 = String.init<A>(reflecting:)();
      *(void *)&v390[0] = sub_100110D58(v163, v164, &v397);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v7 = v376;
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v159, v160, "ignoring failed to generate assessment data. error %{public}s", v161, 0xCu);
      swift_arrayDestroy();
      int v70 = v371;
      swift_slowDealloc();
      swift_slowDealloc();

      char v165 = v368;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      char v165 = v157;
    }
    uint64_t v166 = v380;
    v70(v165, v380);
    uint64_t v167 = v372;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v70(v167, v166);
    sub_1002E8ED0(v158, 2, (uint64_t)&v397);
    uint64_t v380 = v397;
    uint64_t v168 = v398;
    uint64_t v169 = v399;
    long long v379 = v400;
    uint64_t v170 = v401;
    uint64_t v171 = v402;
    unint64_t v172 = v7;
    char v173 = (char)v403;
    swift_errorRelease();
    swift_beginAccess();
    uint64_t v174 = v373;
    sub_100048D6C(v172 + 216, v373, &qword_100726690);
    unint64_t v175 = v172 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId;
    uint64_t v177 = *(void *)(v172 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    uint64_t v176 = *(void *)(v175 + 8);
    uint64_t v178 = v174 + *(int *)(type metadata accessor for ODNAssessmentResult(0) + 44);
    uint64_t v179 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v179 - 8) + 56))(v178, 1, 1, v179);
    *(_OWORD *)(v174 + 72) = 0u;
    *(_OWORD *)(v174 + 56) = 0u;
    *(_OWORD *)(v174 + 40) = 0u;
    *(void *)(v174 + 88) = v380;
    *(void *)(v174 + 96) = v168;
    *(void *)(v174 + 104) = v169;
    *(_OWORD *)(v174 + 112) = v379;
    *(void *)(v174 + 128) = v170;
    *(void *)(v174 + 136) = v171;
    *(unsigned char *)(v174 + 144) = v173;
    *(_OWORD *)(v174 + 152) = 0u;
    *(_OWORD *)(v174 + 168) = 0u;
    *(_OWORD *)(v174 + 184) = 0u;
    *(_OWORD *)(v174 + 200) = 0u;
    *(void *)(v174 + 216) = v177;
    *(void *)(v174 + 224) = v176;
    return swift_bridgeObjectRetain();
  }
  sub_10000C6CC((uint64_t)v35, &qword_100726688);
  swift_retain();
  sub_100007764((uint64_t *)&unk_100722630);
  runAsyncAndBlock<A>(file:function:line:_:)();
  swift_release();
  if (v398)
  {
    uint64_t v75 = v367;
    sub_1001FFFF4(v398, v367);
    uint64_t v374 = 0;
    sub_1002F5F4C((uint64_t)v75);
    uint64_t v153 = v363;
    sub_100307BEC((uint64_t)v75, v363, type metadata accessor for AugmentedProfile);
    swift_bridgeObjectRelease();
    sub_100307BEC(v153, v73, type metadata accessor for AugmentedProfile);
    uint64_t v44 = (char *)v364;
    sub_1003086F8(v73, v364, type metadata accessor for AugmentedProfile);
    sub_10020778C((uint64_t)v44);
    goto LABEL_7;
  }
  *(void *)&long long v379 = " the training GUID (";
  defaultLogger()();
  unint64_t v129 = Logger.logObject.getter();
  os_log_type_t v130 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v129, v130))
  {
    unint64_t v131 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v131 = 0;
    _os_log_impl((void *)&_mh_execute_header, v129, v130, "assessment profile is missing, skip assessment", v131, 2u);
    swift_slowDealloc();
  }

  char v371 = v70;
  v70(v62, v380);
  (*(void (**)(uint64_t, void, unint64_t))(v369 + 104))(v377, enum case for DIPError.Code.odnMissingProfile(_:), v370);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v132 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v133 = *(void *)v132;
  uint64_t v374 = *(char **)(*(void *)v132 + 72);
  unint64_t v134 = (*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
  uint64_t v135 = swift_allocObject();
  *(_OWORD *)(v135 + 16) = xmmword_100611020;
  unint64_t v136 = v135 + v134;
  uint64_t v137 = (void *)(v136 + v132[14]);
  uint64_t v138 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
  uint64_t v139 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v140 = *(void (**)(void))(*(void *)(v139 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v140)(v136, v138, v139);
  unint64_t v141 = v376;
  uint64_t v142 = *(void *)(v376 + 16);
  uint64_t v143 = *(void *)(v376 + 24);
  v137[3] = &type metadata for String;
  *uint64_t v137 = v142;
  v137[1] = v143;
  uint64_t v144 = &v374[v136 + v132[14]];
  v140();
  uint64_t v145 = *(void *)(v141 + 32);
  uint64_t v146 = *(void *)(v141 + 40);
  *((void *)v144 + 3) = &type metadata for String;
  *(void *)uint64_t v144 = v145;
  *((void *)v144 + 1) = v146;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10015C504(v135);
  type metadata accessor for DIPError();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  uint64_t v147 = v372;
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v371(v147, v380);
  swift_errorRelease();
  swift_beginAccess();
  uint64_t v148 = v373;
  sub_100048D6C(v141 + 216, v373, &qword_100726690);
  uint64_t v150 = *(void *)(v141 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  uint64_t v149 = *(void *)(v141 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
  uint64_t v151 = v148 + *(int *)(type metadata accessor for ODNAssessmentResult(0) + 44);
  uint64_t v152 = type metadata accessor for AssessmentAdditionalInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v152 - 8) + 56))(v151, 1, 1, v152);
  *(_OWORD *)(v148 + 104) = 0u;
  *(_OWORD *)(v148 + 88) = 0u;
  *(_OWORD *)(v148 + 72) = 0u;
  *(_OWORD *)(v148 + 56) = 0u;
  *(_OWORD *)(v148 + 40) = 0u;
  *(void *)(v148 + 128) = 0;
  *(void *)(v148 + 136) = 0;
  *(void *)(v148 + 120) = 1;
  *(unsigned char *)(v148 + 144) = 0;
  *(_OWORD *)(v148 + 152) = 0u;
  *(_OWORD *)(v148 + 168) = 0u;
  *(_OWORD *)(v148 + 184) = 0u;
  *(_OWORD *)(v148 + 200) = 0u;
  *(void *)(v148 + 216) = v150;
  *(void *)(v148 + 224) = v149;
  swift_deallocBox();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002EF700(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1002EF720, 0, 0);
}

uint64_t sub_1002EF720()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_1002EF7B4;
  return sub_1005F058C();
}

uint64_t sub_1002EF7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002EF8B4, 0, 0);
}

uint64_t sub_1002EF8B4()
{
  *(_OWORD *)*(void *)(v0 + 16) = *(_OWORD *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002EF8D4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10000C494;
  return sub_1002F13A4();
}

void sub_1002EF964(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v59 = a7;
  uint64_t v60 = a8;
  unint64_t v61 = a5;
  uint64_t v68 = a1;
  uint64_t v69 = a2;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DIPError.Code();
  uint64_t v65 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100007764(&qword_10072A7F8);
  uint64_t v66 = *(void *)(v18 - 8);
  uint64_t v67 = v18;
  __chkstk_darwin(v18);
  uint64_t v58 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v64 = *(void *)(v62 - 8);
  uint64_t v20 = __chkstk_darwin(v62);
  uint64_t v57 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v63 = (char *)&v53 - v22;
  uint64_t v78 = sub_100007764(&qword_100728600);
  uint64_t v70 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a4)
  {
    defaultLogger()();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "No tsidEnc cert provided, skipping encryption and sending nil", v31, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v32 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v68, 1, 1, v78);
    uint64_t v33 = v69;
    uint64_t v35 = v66;
    uint64_t v34 = v67;
    goto LABEL_7;
  }
  uint64_t v25 = v24;
  swift_bridgeObjectRetain();
  v26._int64_t countAndFlagsBits = a3;
  v26._uint64_t object = a4;
  SecCertificateRef v27 = createCertificateFromString(_:)(v26);
  if (v28)
  {
    swift_bridgeObjectRelease();
    return;
  }
  SecCertificateRef v36 = v27;
  uint64_t v37 = copyPublicKeyDataFromCertificate(_:)();
  if (v38 >> 60 != 15)
  {
    uint64_t v39 = v37;
    unint64_t v40 = v38;
    uint64_t v41 = type metadata accessor for DIPECIESSessionECV3SH();
    swift_allocObject();
    uint64_t v42 = DIPECIESSessionECV3SH.init(_:)();
    uint64_t v56 = v39;
    uint64_t v43 = *(void (**)(void))(v64 + 104);
    unsigned int v55 = enum case for EncryptionParamsAlgorithmIdentifier.EC_v3_SH(_:);
    v64 += 104;
    uint64_t v54 = (void (*)(char *, void, uint64_t))v43;
    v43(v63);
    uint64_t v76 = v41;
    uint64_t v77 = &protocol witness table for DIPECIESSessionECV3;
    uint64_t v75 = v42;
    type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v65 = v42;
    swift_retain();
    uint64_t v44 = v36;
    unint64_t v45 = v40;
    uint64_t v46 = (char *)v44;
    uint64_t v47 = v56;
    __DataStorage.init(length:)();
    uint64_t v71 = 49;
    unint64_t v72 = 0xE100000000000000;
    unint64_t v73 = v61;
    uint64_t v74 = a6;
    sub_10002CEB0(v47, v45);
    sub_100307114();
    sub_100307168();
    uint64_t v63 = v46;
    unint64_t v61 = v45;
    EncryptedDataContainer.init(alg:encryptor:remoteCertificate:senderSigningKey:recipientSigningKey:data:)();
    v54(v57, v55, v62);
    uint64_t v76 = v41;
    uint64_t v77 = &protocol witness table for DIPECIESSessionECV3;
    uint64_t v75 = v65;
    swift_allocObject();
    swift_retain();
    uint64_t v48 = v60;
    swift_bridgeObjectRetain();
    __DataStorage.init(length:)();
    uint64_t v71 = 49;
    unint64_t v72 = 0xE100000000000000;
    unint64_t v73 = v59;
    uint64_t v74 = v48;
    sub_1003071BC();
    sub_100307210();
    uint64_t v49 = v58;
    EncryptedDataContainer.init(alg:encryptor:remoteCertificate:senderSigningKey:recipientSigningKey:data:)();
    swift_release();
    uint64_t v50 = v70;
    uint64_t v51 = v68;
    uint64_t v52 = v78;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v68, v25, v78);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v51, 0, 1, v52);
    uint64_t v35 = v66;
    uint64_t v34 = v67;
    uint64_t v33 = v69;
    (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v69, v49, v67);
    uint64_t v32 = 0;
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v33, v32, 1, v34);
    return;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v65 + 104))(v17, enum case for DIPError.Code.certificateDecodingFailed(_:), v15);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
}

void sub_1002F01D8(uint64_t a1, char a2, uint64_t a3, char *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t, uint64_t), char a12, uint64_t *a13, uint64_t a14)
{
  uint64_t v141 = a7;
  uint64_t v142 = a8;
  LODWORD(v174) = a5;
  uint64_t v18 = *a13;
  uint64_t v160 = a13[1];
  uint64_t v161 = v18;
  uint64_t v19 = a13[2];
  uint64_t v158 = a13[3];
  uint64_t v159 = v19;
  uint64_t v20 = a13[4];
  uint64_t v162 = a13[5];
  uint64_t v163 = v20;
  uint64_t v157 = a14;
  sub_1000BEA14(a14, (uint64_t)v186, &qword_10072A8A0);
  uint64_t v149 = v186[1];
  uint64_t v150 = v186[0];
  uint64_t v147 = v186[3];
  uint64_t v148 = v186[2];
  uint64_t v145 = v186[5];
  uint64_t v146 = v186[4];
  uint64_t v144 = v186[6];
  int v143 = v187;
  uint64_t v166 = a1;
  sub_1000BEA14(a1, (uint64_t)v185, &qword_10072A840);
  unint64_t v134 = v185[1];
  uint64_t v135 = v185[0];
  unint64_t v136 = v185[3];
  uint64_t v137 = v185[2];
  unint64_t v138 = v185[5];
  uint64_t v139 = v185[4];
  uint64_t v21 = sub_100007764(&qword_10072A7D0);
  __chkstk_darwin(v21 - 8);
  uint64_t v140 = (uint64_t)&v131 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DIPError.Code();
  uint64_t v151 = *(void *)(v23 - 8);
  uint64_t v152 = v23;
  __chkstk_darwin(v23);
  uint64_t v153 = (uint64_t)&v131 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DIPError();
  unint64_t v155 = *(void *)(v25 - 8);
  uint64_t v156 = v25;
  __chkstk_darwin(v25);
  uint64_t v154 = (char *)&v131 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100007764(&qword_100726688);
  __chkstk_darwin(v27 - 8);
  uint64_t v171 = (uint64_t)&v131 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100007764(&qword_10072A7D8);
  __chkstk_darwin(v29 - 8);
  uint64_t v169 = (char *)&v131 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100007764(&qword_10072A6E8);
  uint64_t v132 = *(void *)(v31 - 8);
  uint64_t v133 = v31;
  __chkstk_darwin(v31);
  uint64_t v168 = (char *)&v131 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v167 = (char *)&v131 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v170 = (char *)&v131 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  char v165 = (char *)&v131 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v164 = (uint64_t)&v131 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  unint64_t v45 = (char *)&v131 - v44;
  uint64_t v46 = __chkstk_darwin(v43);
  uint64_t v48 = (char *)&v131 - v47;
  __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v131 - v49;
  uint64_t v173 = type metadata accessor for AugmentedProfile(0);
  uint64_t v51 = swift_projectBox();
  uint64_t v177 = v34;
  uint64_t v172 = v51;
  if (a2)
  {
    defaultLogger()();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "odn callback called (completed in time)", v54, 2u);
      uint64_t v34 = v177;
      swift_slowDealloc();
    }

    unsigned int v55 = *(void (**)(char *, uint64_t))(v34 + 8);
    v55(v50, v33);
  }
  else
  {
    defaultLogger()();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "odn callback called (completed late)", v58, 2u);
      uint64_t v34 = v177;
      swift_slowDealloc();
    }

    unsigned int v55 = *(void (**)(char *, uint64_t))(v34 + 8);
    v55(v48, v33);
  }
  uint64_t v175 = v33;
  if (a3)
  {
    uint64_t v176 = (void (*)(uint64_t, uint64_t))v55;
    swift_errorRetain();
    uint64_t v167 = a4;
    sub_1002E8ED0(a3, 2, (uint64_t)&v194);
    long long v59 = v194;
    uint64_t v60 = a3;
    uint64_t v61 = *((void *)&v195 + 1);
    uint64_t v62 = *((void *)&v196 + 1);
    uint64_t v166 = v196;
    uint64_t v163 = v197;
    LODWORD(v162) = BYTE8(v197);
    uint64_t v63 = v195;
    if (a2)
    {
      uint64_t v164 = v60;
      uint64_t v64 = (uint64_t)v165;
      defaultLogger()();
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v67 = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "odn callback received an error but completed in time; not logging the error separately",
          v67,
          2u);
        swift_slowDealloc();
      }

      uint64_t v68 = v171;
    }
    else
    {
      uint64_t v64 = v164;
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      uint64_t v68 = v171;
    }
    uint64_t v75 = v64;
    uint64_t v76 = v175;
    v177 += 8;
    v176(v75, v175);
    long long v192 = 0u;
    long long v193 = 0u;
    long long v191 = 0u;
    long long v198 = v59;
    *(void *)&long long v199 = v63;
    *((void *)&v199 + 1) = v61;
    *(void *)&long long v200 = v166;
    *((void *)&v200 + 1) = v62;
    *(void *)&long long v201 = v163;
    BYTE8(v201) = v162;
    uint64_t v77 = sub_100007764(&qword_100728600);
    uint64_t v78 = (uint64_t)v168;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v168, 1, 1, v77);
    uint64_t v79 = sub_100007764(&qword_10072A7F8);
    uint64_t v80 = (uint64_t)v169;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v169, 1, 1, v79);
    uint64_t v81 = v172;
    swift_beginAccess();
    sub_1003086F8(v81, v68, type metadata accessor for AugmentedProfile);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v173 - 8) + 56))(v68, 0, 1);
    os_log_type_t v82 = v167;
    sub_1002F2AE0(0, 0, (uint64_t *)&v191, 0, 0, -1, (uint64_t *)&v198, v174 & 1, v78, 0, 1, v80, 0, 1, v68, 0, 1u);
    sub_1003084C8((uint64_t)&v194);
    swift_errorRelease();
    sub_10000C6CC(v68, &qword_100726688);
    sub_10000C6CC(v80, &qword_10072A7D8);
    sub_10000C6CC(v78, &qword_10072A6E8);
    uint64_t v83 = v170;
    defaultLogger()();
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v84, v85))
    {
      unint64_t v86 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "signaling shareTimeSemaphore because we are done", v86, 2u);
      swift_slowDealloc();
    }

    v176((uint64_t)v83, v76);
    uint64_t v87 = (void *)*((void *)v82 + 47);
    if (v87)
    {
LABEL_21:
      id v88 = v87;
      OS_dispatch_semaphore.signal()();
    }
  }
  else
  {
    defaultLogger()();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "assessments retrieved", v71, 2u);
      swift_slowDealloc();
    }

    char v165 = (char *)(v177 + 8);
    v55(v45, v33);
    if (a2)
    {
      uint64_t v72 = 0;
      uint64_t v177 = 0;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      uint64_t v169 = 0;
      uint64_t v170 = 0;
      LODWORD(v168) = 0;
      uint64_t v164 = 1;
    }
    else
    {
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v89 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      uint64_t v90 = *(void *)v89;
      uint64_t v177 = *(void *)(*(void *)v89 + 72);
      unint64_t v91 = (*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
      uint64_t v92 = swift_allocObject();
      *(_OWORD *)(v92 + 16) = xmmword_100611020;
      unint64_t v93 = v92 + v91;
      uint64_t v94 = v89[14];
      uint64_t v176 = (void (*)(uint64_t, uint64_t))v55;
      uint64_t v95 = a4;
      uint64_t v96 = (void *)(v93 + v94);
      uint64_t v97 = enum case for DIPError.PropertyKey.spWorkflowID(_:);
      uint64_t v98 = type metadata accessor for DIPError.PropertyKey();
      uint64_t v99 = *(void (**)(void))(*(void *)(v98 - 8) + 104);
      ((void (*)(unint64_t, uint64_t, uint64_t))v99)(v93, v97, v98);
      uint64_t v100 = *((void *)v95 + 4);
      uint64_t v101 = *((void *)v95 + 5);
      v96[3] = &type metadata for String;
      void *v96 = v100;
      v96[1] = v101;
      a4 = v95;
      unsigned int v55 = (void (*)(char *, uint64_t))v176;
      uint64_t v102 = v93 + v177 + v89[14];
      v99();
      char v103 = a4[208];
      *(void *)(v102 + 24) = &type metadata for DIPState;
      *(unsigned char *)uint64_t v102 = v103;
      swift_bridgeObjectRetain();
      sub_10015C504(v92);
      (*(void (**)(uint64_t, void, uint64_t))(v151 + 104))(v153, enum case for DIPError.Code.odnTimeout(_:), v152);
      uint64_t v104 = v154;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      uint64_t v105 = v156;
      uint64_t v106 = swift_allocError();
      unint64_t v107 = v155;
      (*(void (**)(uint64_t, char *, uint64_t))(v155 + 16))(v108, v104, v105);
      sub_1002E8ED0(v106, 2, (uint64_t)v178);
      uint64_t v72 = v178[0];
      uint64_t v177 = v178[1];
      uint64_t v73 = v179;
      uint64_t v74 = v180;
      uint64_t v164 = v181;
      uint64_t v169 = v183;
      uint64_t v170 = v182;
      LODWORD(v168) = v184;
      (*(void (**)(char *, uint64_t))(v107 + 8))(v104, v105);
      swift_errorRelease();
    }
    uint64_t v109 = v166;
    uint64_t v176 = a11;
    if (a4[184] == 1)
    {
      sub_1000BEA14(v166, (uint64_t)&v194, &qword_10072A840);
      if (*((void *)&v195 + 1) >> 60 != 15)
      {
        uint64_t v166 = v74;
        long long v198 = v194;
        long long v199 = v195;
        long long v200 = v196;
        long long v201 = v197;
        uint64_t v110 = v140;
        sub_100048D6C(a10, v140, &qword_10072A6E8);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v132 + 56))(v110, 0, 1, v133);
        sub_1000338D4(v135, v134);
        sub_10002CEB0(v137, v136);
        sub_1000338D4(v139, v138);
        sub_1002F2470(v141, v142, (uint64_t *)&v198, v174 & 1, a9, v110, (uint64_t)v176);
        uint64_t v74 = v166;
        sub_100307430(v109, (void (*)(void))sub_10000C5E0, (void (*)(uint64_t, unint64_t))sub_10000C5F4);
        sub_10000C6CC(v110, &qword_10072A7D0);
      }
    }
    if (a12)
    {
      sub_1000BEA14(v109, (uint64_t)&v191, &qword_10072A840);
      if (*((void *)&v192 + 1) >> 60 == 15)
      {
        uint64_t countAndFlagsBits = 0;
        uint64_t object = 0;
      }
      else
      {
        Swift::String v113 = Data.base64EncodedString(options:)(0);
        uint64_t object = v113._object;
        uint64_t countAndFlagsBits = v113._countAndFlagsBits;
      }
      unint64_t v155 = countAndFlagsBits;
      uint64_t v156 = (uint64_t)object;
      uint64_t v166 = a10;
      uint64_t v114 = v74;
      uint64_t v115 = v73;
      char v116 = a4[208] != 9;
      LODWORD(v154) = v174 & 1;
      uint64_t v153 = sub_100303000(v109, v116, (char)v154);
      uint64_t v174 = v117;
      sub_1000BEA14(v109, (uint64_t)v189, &qword_10072A840);
      if (v189[3] >> 60 == 15) {
        uint64_t v118 = 0;
      }
      else {
        uint64_t v118 = v190;
      }
      sub_1000BEA14(v157, (uint64_t)v188, &qword_10072A8A0);
      if (v188[4] == 1)
      {
        uint64_t v120 = (uint64_t)v169;
        uint64_t v119 = (uint64_t)v170;
        int v121 = (int)v168;
        uint64_t v122 = v164;
      }
      else
      {
        uint64_t v120 = v144;
        swift_bridgeObjectRetain();
        uint64_t v122 = v146;
        swift_bridgeObjectRetain();
        sub_1001D7420(v72, v177, v115, v114, v164);
        uint64_t v72 = v150;
        uint64_t v177 = v149;
        uint64_t v114 = v147;
        uint64_t v115 = v148;
        uint64_t v119 = v145;
        int v121 = v143;
      }
      uint64_t v169 = (char *)v120;
      uint64_t v170 = (char *)v119;
      LODWORD(v168) = v121;
      uint64_t v164 = v72;
      v203[0] = v72;
      v203[1] = v177;
      v203[2] = v115;
      v203[3] = v114;
      v203[4] = v122;
      v203[5] = v119;
      v203[6] = v120;
      char v204 = v121;
      v202[0] = v161;
      v202[1] = v160;
      v202[2] = v159;
      v202[3] = v158;
      v202[4] = v163;
      v202[5] = v162;
      uint64_t v123 = v172;
      swift_beginAccess();
      uint64_t v124 = v123;
      uint64_t v125 = v171;
      sub_1003086F8(v124, v171, type metadata accessor for AugmentedProfile);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v173 - 8) + 56))(v125, 0, 1);
      sub_1002F2AE0(v155, v156, v202, v153, v174, v118, v203, (int)v154, v166, v118 + 1, 0, (uint64_t)v176, v118 + 2, 0, v125, 0, 0);
      sub_1001D7420(v164, v177, v115, v114, v122);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000C6CC(v125, &qword_100726688);
    }
    else
    {
      sub_1001D7420(v72, v177, v73, v74, v164);
    }
    uint64_t v126 = v175;
    uint64_t v127 = v167;
    defaultLogger()();
    uint64_t v128 = Logger.logObject.getter();
    os_log_type_t v129 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v128, v129))
    {
      os_log_type_t v130 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v130 = 0;
      _os_log_impl((void *)&_mh_execute_header, v128, v129, "signaling shareTimeSemaphore because we are done", v130, 2u);
      swift_slowDealloc();
    }

    v55(v127, v126);
    uint64_t v87 = (void *)*((void *)a4 + 47);
    if (v87) {
      goto LABEL_21;
    }
  }
}

uint64_t sub_1002F13A4()
{
  v1[72] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[73] = v2;
  v1[74] = *(void *)(v2 - 8);
  v1[75] = swift_task_alloc();
  return _swift_task_switch(sub_1002F1464, 0, 0);
}

uint64_t sub_1002F1464()
{
  uint64_t v1 = (uint64_t *)(v0[72] + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory);
  uint64_t v2 = *v1;
  v0[76] = *v1;
  uint64_t v3 = v1[1];
  v0[77] = v3;
  uint64_t v4 = v1[2];
  v0[78] = v4;
  uint64_t v5 = v1[3];
  v0[79] = v5;
  uint64_t v6 = v1[4];
  v0[80] = v6;
  uint64_t v7 = v1[5];
  v0[81] = v7;
  uint64_t v8 = v1[6];
  v0[82] = v8;
  uint64_t v9 = v1[7];
  v0[83] = v9;
  uint64_t v10 = v1[8];
  v0[84] = v10;
  uint64_t v11 = v1[9];
  v0[85] = v11;
  if (v2)
  {
    v0[36] = v2;
    v0[37] = v3;
    v0[38] = v4;
    v0[39] = v5;
    v0[40] = v6;
    v0[41] = v7;
    v0[42] = v8;
    v0[43] = v9;
    v0[44] = v10;
    v0[45] = v11;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[86] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1002F1718;
    return sub_10027C7E8((uint64_t)(v0 + 19));
  }
  else
  {
    (*(void (**)(void, void, void))(v0[74] + 104))(v0[75], enum case for DIPError.Code.internalError(_:), v0[73]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_1002F1718()
{
  *(void *)(*(void *)v1 + 696) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002F22E0;
  }
  else {
    uint64_t v2 = sub_1002F182C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002F182C()
{
  uint64_t v2 = v0[34];
  uint64_t v1 = (void *)v0[35];
  v0[88] = v2;
  v0[89] = v1;
  uint64_t v3 = qword_10071F4D0;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = v0[87];
  swift_retain();
  v0[90] = sub_100208C28(v2, (unint64_t)v1);
  v0[91] = v5;
  if (v4)
  {
    uint64_t v6 = v0[76];
    swift_release();
    swift_bridgeObjectRelease();
    sub_1001D72D0((uint64_t)(v0 + 19));
    uint64_t v7 = v6;
LABEL_7:
    sub_1001D6E40(v7);
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  unint64_t v8 = v5;
  swift_release();
  if (v8 >> 60 == 15)
  {
    uint64_t v9 = v0[76];
    uint64_t v10 = v0[75];
    uint64_t v11 = v0[74];
    uint64_t v12 = v0[73];
    sub_1001D72D0((uint64_t)(v0 + 19));
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = v2;
    v13._uint64_t object = v1;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 41;
    v14._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.internalError(_:), v12);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v7 = v9;
    goto LABEL_7;
  }
  uint64_t v17 = (void *)swift_task_alloc();
  v0[92] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_1002F1BF8;
  return sub_10027D02C((uint64_t)(v0 + 2));
}

uint64_t sub_1002F1BF8()
{
  *(void *)(*(void *)v1 + 744) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002F2374;
  }
  else {
    uint64_t v2 = sub_1002F1D0C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002F1D0C()
{
  uint64_t v1 = *(void *)(v0 + 744);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void **)(v0 + 144);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v4 = sub_100208C28(v3, (unint64_t)v2);
  if (v1)
  {
    unint64_t v6 = *(void *)(v0 + 728);
    uint64_t v7 = *(void *)(v0 + 720);
    uint64_t v8 = *(void *)(v0 + 608);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1001D72D0(v0 + 16);
    sub_10000C5E0(v7, v6);
    swift_bridgeObjectRelease();
    sub_1001D72D0(v0 + 152);
    uint64_t v9 = v8;
LABEL_5:
    sub_1001D6E40(v9);
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_7;
  }
  uint64_t v10 = v4;
  unint64_t v11 = v5;
  swift_release();
  if (v11 >> 60 == 15)
  {
    unint64_t v41 = *(void *)(v0 + 728);
    uint64_t v40 = *(void *)(v0 + 720);
    uint64_t v12 = *(void *)(v0 + 608);
    uint64_t v13 = *(void *)(v0 + 600);
    uint64_t v14 = *(void *)(v0 + 592);
    uint64_t v15 = *(void *)(v0 + 584);
    sub_1001D72D0(v0 + 152);
    sub_1001D72D0(v0 + 16);
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = v3;
    v16._uint64_t object = v2;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 41;
    v17._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for DIPError.Code.internalError(_:), v15);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5E0(v40, v41);
    uint64_t v9 = v12;
    goto LABEL_5;
  }
  uint64_t v19 = *(void *)(v0 + 720);
  uint64_t v37 = *(void *)(v0 + 712);
  unint64_t v38 = *(void *)(v0 + 728);
  uint64_t v43 = v2;
  uint64_t v36 = *(void *)(v0 + 704);
  uint64_t v39 = *(void *)(v0 + 608);
  uint64_t v42 = v10;
  uint64_t v20 = *(void **)(v0 + 576);
  *(void *)(v0 + 392) = &type metadata for DIPClientGUID;
  *(void *)(v0 + 400) = &off_1006FC078;
  uint64_t v21 = swift_allocObject();
  *(void *)(v0 + 368) = v21;
  long long v22 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v21 + 112) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v21 + 128) = v22;
  *(void *)(v21 + 144) = *(void *)(v0 + 280);
  long long v23 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v21 + 48) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v21 + 64) = v23;
  long long v24 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v21 + 80) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v21 + 96) = v24;
  long long v25 = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v21 + 32) = v25;
  sub_1000BEA14(v0 + 368, v0 + 408, &qword_100726690);
  swift_beginAccess();
  sub_1001D9214(v0 + 408, (uint64_t)(v20 + 27), &qword_100726690);
  swift_endAccess();
  v20[32] = v36;
  v20[33] = v37;
  swift_bridgeObjectRelease();
  uint64_t v26 = v20[34];
  unint64_t v27 = v20[35];
  v20[34] = v19;
  v20[35] = v38;
  sub_10002CEB0(v19, v38);
  sub_10000C5E0(v26, v27);
  *(void *)(v0 + 472) = &type metadata for DIPClientGUID;
  *(void *)(v0 + 480) = &off_1006FC078;
  uint64_t v28 = swift_allocObject();
  *(void *)(v0 + 448) = v28;
  sub_10000C5E0(v19, v38);
  sub_1001D6E40(v39);
  long long v29 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v28 + 112) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v28 + 128) = v29;
  *(void *)(v28 + 144) = *(void *)(v0 + 144);
  long long v30 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v28 + 64) = v30;
  long long v31 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v28 + 80) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v28 + 96) = v31;
  long long v32 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v28 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v28 + 32) = v32;
  sub_1000BEA14(v0 + 448, v0 + 488, &qword_100726690);
  swift_beginAccess();
  sub_1001D9214(v0 + 488, (uint64_t)(v20 + 36), &qword_100726690);
  swift_endAccess();
  v20[41] = v3;
  v20[42] = v43;
  swift_bridgeObjectRelease();
  uint64_t v33 = v20[43];
  unint64_t v34 = v20[44];
  v20[43] = v42;
  v20[44] = v11;
  sub_10000C5E0(v33, v34);
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
  return v18();
}

uint64_t sub_1002F22E0()
{
  sub_1001D6E40(*(void *)(v0 + 608));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002F2374()
{
  uint64_t v1 = v0[76];
  sub_10000C5E0(v0[90], v0[91]);
  swift_bridgeObjectRelease();
  sub_1001D72D0((uint64_t)(v0 + 19));
  sub_1001D6E40(v1);
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1002F2470(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v39 = a7;
  uint64_t v40 = a6;
  uint64_t v41 = a5;
  uint64_t v42 = a2;
  LODWORD(v38) = a4;
  uint64_t v43 = a1;
  uint64_t v10 = *a3;
  uint64_t v35 = a3[1];
  uint64_t v36 = v10;
  uint64_t v11 = a3[2];
  uint64_t v33 = a3[3];
  uint64_t v34 = v11;
  uint64_t v12 = a3[4];
  uint64_t v31 = a3[5];
  uint64_t v32 = v12;
  uint64_t v37 = *((unsigned int *)a3 + 12);
  uint64_t v30 = a3[7];
  uint64_t v13 = type metadata accessor for DIPError.Code();
  v29[3] = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v14 = type metadata accessor for DIPError();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  v29[4] = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v17 - 8);
  uint64_t v45 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v29 - v19;
  swift_beginAccess();
  sub_100048D6C(v8 + 216, (uint64_t)&v46, &qword_100726690);
  if (!*((void *)&v47 + 1))
  {
    uint64_t v28 = &v46;
    return sub_10000C6CC((uint64_t)v28, &qword_100726690);
  }
  sub_100007764(&qword_100728CC0);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    return result;
  }
  v29[1] = v14;
  v29[2] = v15;
  v56[6] = v64;
  v56[7] = v65;
  uint64_t v57 = v66;
  v56[2] = v60;
  v56[3] = v61;
  v56[4] = v62;
  v56[5] = v63;
  v56[0] = v58;
  v56[1] = v59;
  swift_beginAccess();
  sub_100048D6C(v8 + 288, (uint64_t)v55, &qword_100726690);
  if (!v55[3])
  {
    sub_1001D72D0((uint64_t)v56);
    uint64_t v28 = (long long *)v55;
    return sub_10000C6CC((uint64_t)v28, &qword_100726690);
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return sub_1001D72D0((uint64_t)v56);
  }
  long long v64 = v52;
  long long v65 = v53;
  uint64_t v66 = v54;
  long long v60 = v48;
  long long v61 = v49;
  long long v62 = v50;
  long long v63 = v51;
  long long v58 = v46;
  long long v59 = v47;
  char v22 = *(unsigned char *)(v8 + 208) != 9;
  *(void *)&long long v46 = v36;
  *((void *)&v46 + 1) = v35;
  *(void *)&long long v47 = v34;
  *((void *)&v47 + 1) = v33;
  *(void *)&long long v48 = v32;
  *((void *)&v48 + 1) = v31;
  *(void *)&long long v49 = v37;
  *((void *)&v49 + 1) = v30;
  uint64_t v38 = sub_100303000((uint64_t)&v46, v22, v38 & 1);
  uint64_t v24 = v23;
  defaultLogger()();
  long long v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = v24;
    *(_WORD *)unint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Storing assessment for reuse", v27, 2u);
    uint64_t v24 = v37;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v44 + 8))(v20, v45);
  sub_10030362C(*(void *)(v8 + 32), *(void *)(v8 + 40), a3[2], a3[3], v38, v24, *((unsigned int *)a3 + 12), v43, v42, (uint64_t)v56, (uint64_t)&v58, v41, v40, v39);
  sub_1001D72D0((uint64_t)&v58);
  sub_1001D72D0((uint64_t)v56);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F2AE0(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  LODWORD(v212) = a8;
  os_log_t v213 = a7;
  uint64_t v184 = a6;
  uint64_t v185 = a4;
  uint64_t v200 = a5;
  unint64_t v208 = a1;
  uint64_t v209 = a2;
  uint64_t v214 = a15;
  uint64_t object = a3;
  sub_1000BEA14((uint64_t)a3, (uint64_t)v227, &qword_10072A890);
  uint64_t v198 = v228;
  uint64_t v199 = v229;
  uint64_t v197 = v230;
  uint64_t v17 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v17 - 8);
  uint64_t v202 = (char *)v172 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DIPError.Code();
  uint64_t v177 = *(void *)(v19 - 8);
  uint64_t v178 = v19;
  __chkstk_darwin(v19);
  unsigned __int8 v179 = (char *)v172 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = type metadata accessor for DIPError();
  uint64_t v194 = *(void *)(v190 - 8);
  __chkstk_darwin(v190);
  long long v193 = (char *)v172 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v188 = *(void *)(v22 - 8);
  uint64_t v189 = v22;
  __chkstk_darwin(v22);
  unsigned __int8 v187 = (char *)v172 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100007764(&qword_100727600);
  __chkstk_darwin(v24 - 8);
  v172[0] = (uint64_t)v172 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = type metadata accessor for DIPODINPair(0);
  __chkstk_darwin(v186);
  long long v195 = (char *)v172 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100007764(&qword_10072A888);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  long long v196 = (char *)v172 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v183 = (uint64_t)v172 - v31;
  __chkstk_darwin(v30);
  uint64_t v182 = (char *)v172 - v32;
  uint64_t v33 = sub_100007764(&qword_100726688);
  uint64_t v34 = __chkstk_darwin(v33 - 8);
  uint64_t v175 = (uint64_t)v172 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v191 = (uint64_t)v172 - v37;
  __chkstk_darwin(v36);
  uint64_t v206 = (uint64_t)v172 - v38;
  uint64_t v39 = sub_100007764(&qword_10072A880);
  uint64_t v40 = __chkstk_darwin(v39 - 8);
  uint64_t v207 = (uint64_t)v172 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  uint64_t v43 = (char *)v172 - v42;
  uint64_t v44 = sub_100007764(&qword_10072A7D8);
  __chkstk_darwin(v44 - 8);
  long long v46 = (char *)v172 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100007764(&qword_10072A6E8);
  __chkstk_darwin(v47 - 8);
  long long v49 = (char *)v172 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = __chkstk_darwin(v50);
  long long v201 = (char *)v172 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t countAndFlagsBits = (char *)v172 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  long long v192 = (char *)v172 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  uint64_t v176 = (char *)v172 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  long long v62 = (char *)v172 - v61;
  __chkstk_darwin(v60);
  long long v64 = (char *)v172 - v63;
  defaultLogger()();
  long long v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  BOOL v67 = os_log_type_enabled(v65, v66);
  long long v222 = v49;
  if (v67)
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Preparing ODN web requests", v68, 2u);
    long long v49 = v222;
    swift_slowDealloc();
  }

  uint64_t v221 = *(void (**)(char *, uint64_t))(v51 + 8);
  v221(v64, v50);
  uint64_t v69 = sub_100007764(&qword_100728600);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v49, 1, 1, v69);
  uint64_t v70 = sub_100007764(&qword_10072A7F8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v46, 1, 1, v70);
  uint64_t v71 = v220;
  uint64_t v72 = *(void *)(v220 + 40);
  Swift::String v73 = *(Swift::String *)(v220 + 384);
  uint64_t v216 = *(void *)(v220 + 32);
  uint64_t v217 = v72;
  Swift::Bool v74 = String.hasPrefix(_:)(v73);
  unint64_t v218 = v46;
  uint64_t v215 = v51 + 8;
  if (v74)
  {
    uint64_t v181 = a13;
    uint64_t v205 = a10;
    LODWORD(v204) = a11 & 1;
    int v180 = a14 & 1;
    sub_10000C6CC((uint64_t)v46, &qword_10072A7D8);
    sub_10000C6CC((uint64_t)v49, &qword_10072A6E8);
    sub_100048D6C(a9, (uint64_t)v49, &qword_10072A6E8);
    sub_100048D6C(a12, (uint64_t)v46, &qword_10072A7D8);
  }
  else
  {
    defaultLogger()();
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Label Ingestion Not Allowed, skipping EncryptedContainers", v77, 2u);
      swift_slowDealloc();
    }

    v221(v62, v50);
    uint64_t v181 = 0;
    uint64_t v205 = 0;
    int v180 = 1;
    LODWORD(v204) = 1;
  }
  uint64_t v210 = v50;
  LODWORD(v203) = a17;
  swift_beginAccess();
  sub_100048D6C(v71 + 216, (uint64_t)v223, &qword_100726690);
  sub_10027E080((uint64_t)v223, v225);
  sub_10000C6CC((uint64_t)v223, &qword_100726690);
  uint64_t v78 = (uint64_t *)(*(void *)(v71 + 160) + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v80 = *v78;
  uint64_t v79 = v78[1];
  uint64_t v81 = v206;
  sub_100048D6C(v214, v206, &qword_100726688);
  uint64_t v82 = type metadata accessor for AugmentedProfile(0);
  uint64_t v83 = *(void *)(v82 - 8);
  uint64_t v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
  v172[1] = v83 + 48;
  uint64_t v173 = v84;
  unsigned int v85 = v84(v81, 1, v82);
  uint64_t v86 = v217;
  uint64_t v174 = v82;
  if (v85 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000C6CC(v81, &qword_100726688);
    unint64_t v87 = 0xE700000000000000;
    uint64_t v88 = 0x4E574F4E4B4E55;
  }
  else
  {
    unint64_t v89 = (uint64_t *)(v81 + *(int *)(v82 + 28));
    uint64_t v88 = *v89;
    unint64_t v87 = v89[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100302FA0(v81, type metadata accessor for AugmentedProfile);
  }
  uint64_t v90 = v86;
  unint64_t v91 = (int *)type metadata accessor for ORDRequest(0);
  sub_100048D6C((uint64_t)v222, (uint64_t)&v43[v91[11]], &qword_10072A6E8);
  *(void *)uint64_t v43 = v80;
  *((void *)v43 + 1) = v79;
  uint64_t v92 = v209;
  *((void *)v43 + 2) = v208;
  *((void *)v43 + 3) = v92;
  sub_1000BEA14((uint64_t)v225, (uint64_t)(v43 + 32), &qword_10072A898);
  *((void *)v43 + 12) = v216;
  *((void *)v43 + 13) = v90;
  *((void *)v43 + 14) = v88;
  *((void *)v43 + 15) = v87;
  unint64_t v93 = v213;
  sub_1000BEA14((uint64_t)v213, (uint64_t)(v43 + 128), &qword_10072A8A0);
  v43[185] = (char)v212;
  uint64_t v94 = &v43[v91[12]];
  *(void *)uint64_t v94 = v205;
  v94[8] = v204;
  uint64_t v95 = &v43[v91[13]];
  *(void *)uint64_t v95 = a16;
  v95[8] = v203 & 1;
  (*(void (**)(char *, void, uint64_t, int *))(*((void *)v91 - 1) + 56))(v43, 0, 1, v91);
  uint64_t v96 = v207;
  sub_1000BEA14((uint64_t)v43, v207, &qword_10072A880);
  uint64_t v97 = v220;
  uint64_t v98 = v220 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest;
  swift_beginAccess();
  sub_100307CA0(v93);
  swift_bridgeObjectRetain();
  sub_1001D9214(v96, v98, &qword_10072A880);
  swift_endAccess();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v99 = object;
  sub_1000BEA14((uint64_t)object, (uint64_t)v223, &qword_10072A890);
  sub_100007764(&qword_10072A890);
  sub_100307CDC();
  uint64_t v100 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v102 = v101;
  swift_release();
  sub_10002CEB0(v100, v102);
  Swift::String v103 = Data.base64EncodedString(options:)(0);
  uint64_t v209 = v100;
  sub_10000C5F4(v100, v102);
  sub_1000BEA14((uint64_t)v99, (uint64_t)v231, &qword_10072A890);
  uint64_t v104 = v210;
  if (!*((void *)&v231[0] + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  long long v232 = v231[0];
  int64x2_t v233 = (int64x2_t)v231[1];
  long long v234 = v231[2];
  if (!v200 || *(void *)(v97 + 200))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v224[0] = v232;
    sub_1001145E0((uint64_t)v224);
    v226[0] = v233;
    sub_1001145E0((uint64_t)v226);
    sub_1000BEA14((uint64_t)&v234, (uint64_t)v223, (uint64_t *)&unk_100722630);
    sub_1001145E0((uint64_t)v223);
LABEL_16:
    defaultLogger()();
    uint64_t v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.debug.getter();
    BOOL v107 = os_log_type_enabled(v105, v106);
    uint64_t v108 = (uint64_t)v218;
    if (v107)
    {
      uint64_t v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Skipping OTD web request because required properties aren't available", v109, 2u);
      swift_slowDealloc();
    }

    v221(countAndFlagsBits, v104);
    goto LABEL_19;
  }
  uint64_t v207 = *(void *)(v97 + 192);
  unint64_t v208 = v102;
  swift_beginAccess();
  sub_100048D6C(v97 + 288, (uint64_t)v223, &qword_100726690);
  sub_100307D98(object);
  uint64_t v121 = v200;
  swift_bridgeObjectRetain();
  sub_10027E080((uint64_t)v223, v226);
  sub_10000C6CC((uint64_t)v223, &qword_100726690);
  uint64_t v122 = (int *)type metadata accessor for OTDRequest(0);
  uint64_t v123 = v182;
  sub_100048D6C((uint64_t)v218, (uint64_t)&v182[v122[10]], &qword_10072A7D8);
  uint64_t v124 = v217;
  swift_bridgeObjectRetain();
  uint64_t v125 = v213;
  sub_100307CA0(v213);
  Swift::String_optional v126 = experimentalGroup()();
  uint64_t countAndFlagsBits = (char *)v126.value._countAndFlagsBits;
  uint64_t object = (uint64_t *)v126.value._object;
  *(Swift::String *)uint64_t v123 = v103;
  *((void *)v123 + 2) = v184;
  sub_1000BEA14((uint64_t)v226, (uint64_t)(v123 + 24), &qword_10072A898);
  *((void *)v123 + 11) = v216;
  *((void *)v123 + 12) = v124;
  *((void *)v123 + 13) = v185;
  *((void *)v123 + 14) = v121;
  *((void *)v123 + 15) = 2;
  v123[128] = (char)v212;
  uint64_t v127 = &v123[v122[11]];
  *(void *)uint64_t v127 = v181;
  v127[8] = v180;
  sub_1000BEA14((uint64_t)v125, (uint64_t)&v123[v122[12]], &qword_10072A8A0);
  uint64_t v128 = &v123[v122[13]];
  *(void *)uint64_t v128 = 0;
  v128[8] = 1;
  os_log_type_t v129 = &v123[v122[14]];
  os_log_type_t v130 = object;
  *(void *)os_log_type_t v129 = countAndFlagsBits;
  *((void *)v129 + 1) = v130;
  uint64_t v131 = *((void *)v122 - 1);
  uint64_t v132 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v131 + 56);
  uint64_t v133 = (uint64_t *)(v131 + 56);
  v132((uint64_t)v123, 0, 1, v122);
  uint64_t v134 = (uint64_t)v123;
  uint64_t v135 = v183;
  sub_1000BEA14(v134, v183, &qword_10072A888);
  uint64_t v136 = v97 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  swift_beginAccess();
  sub_1001D9214(v135, v136, &qword_10072A888);
  swift_endAccess();
  uint64_t countAndFlagsBits = *(char **)(v97 + 272);
  uint64_t v137 = *(uint64_t **)(v97 + 280);
  uint64_t v212 = v122;
  os_log_t v213 = v137;
  uint64_t v138 = *(void *)(v97 + 168);
  uint64_t v139 = *(void *)(v97 + 176);
  uint64_t v140 = *(void *)(v97 + 72);
  uint64_t v206 = *(void *)(v97 + 64);
  uint64_t v141 = *(void *)(v97 + 80);
  uint64_t v142 = *(void *)(v97 + 88);
  uint64_t v204 = v138;
  uint64_t v205 = v141;
  int v143 = v122;
  uint64_t v144 = v132;
  uint64_t object = v133;
  v132((uint64_t)v196, 1, 1, v143);
  uint64_t v146 = *(void *)(v97 + 96);
  uint64_t v145 = *(void *)(v97 + 104);
  uint64_t v147 = v191;
  sub_100048D6C(v214, v191, &qword_100726688);
  if (!v145)
  {
    uint64_t v198 = v139;
    uint64_t v199 = v142;
    uint64_t v200 = v140;
    uint64_t v150 = v175;
    sub_100048D6C(v147, v175, &qword_100726688);
    if (v173(v150, 1, v174) == 1)
    {
      swift_bridgeObjectRetain();
      sub_1000338D4((uint64_t)countAndFlagsBits, (unint64_t)v213);
      uint64_t v148 = v200;
      swift_bridgeObjectRetain();
      uint64_t v142 = v199;
      swift_bridgeObjectRetain();
      uint64_t v149 = v198;
      swift_bridgeObjectRetain();
      sub_10000C6CC(v147, &qword_100726688);
      sub_10000C6CC(v150, &qword_100726688);
      uint64_t v214 = 0;
      uint64_t v203 = 0;
      goto LABEL_38;
    }
    uint64_t v151 = v172[0];
    sub_100048D6C(v150, v172[0], &qword_100727600);
    swift_bridgeObjectRetain();
    sub_1000338D4((uint64_t)countAndFlagsBits, (unint64_t)v213);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100302FA0(v150, type metadata accessor for AugmentedProfile);
    uint64_t v152 = sub_100007764(&qword_100726860);
    uint64_t v153 = *(void *)(v152 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152) == 1)
    {
      sub_10000C6CC(v191, &qword_100726688);
      sub_10000C6CC(v151, &qword_100727600);
    }
    else
    {
      JWSSignedJSON.payload.getter();
      sub_10000C6CC(v191, &qword_100726688);
      uint64_t v154 = v223[0];
      uint64_t v155 = v223[1];
      uint64_t v156 = v223[3];
      uint64_t v214 = v223[2];
      uint64_t v197 = v223[6];
      uint64_t v191 = v223[7];
      uint64_t v203 = v223[8];
      uint64_t v185 = v223[9];
      uint64_t v183 = v223[5];
      uint64_t v184 = v223[10];
      uint64_t v157 = v152;
      uint64_t v158 = (char *)v223[4];
      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v151, v157);
      sub_1002090C4(v154, v155);
      uint64_t v181 = v154;
      uint64_t v182 = v158;
      sub_1001D8D24(v154, v155);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v155)
      {
        swift_bridgeObjectRetain();
        uint64_t v203 = v156;
        sub_1001D8D24(v181, v155);
LABEL_37:
        uint64_t v142 = v199;
        uint64_t v148 = v200;
        uint64_t v149 = v198;
        goto LABEL_38;
      }
    }
    uint64_t v214 = 0;
    uint64_t v203 = 0;
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  sub_1000338D4((uint64_t)countAndFlagsBits, (unint64_t)v213);
  uint64_t v214 = v146;
  uint64_t v203 = v145;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000C6CC(v147, &qword_100726688);
  uint64_t v148 = v140;
  uint64_t v149 = v139;
LABEL_38:
  uint64_t v159 = v186;
  uint64_t v160 = v195;
  uint64_t v161 = (uint64_t)&v195[*(int *)(v186 + 52)];
  v144(v161, 1, 1, v212);
  uint64_t v162 = (uint64_t)v160;
  uint64_t v163 = &v160[*(int *)(v159 + 56)];
  *(void *)uint64_t v163 = 0;
  *((void *)v163 + 1) = 0;
  uint64_t v164 = v213;
  *(void *)uint64_t v162 = countAndFlagsBits;
  *(void *)(v162 + 8) = v164;
  int64x2_t v165 = v233;
  *(_OWORD *)(v162 + 16) = v232;
  *(int64x2_t *)(v162 + 32) = v165;
  *(_OWORD *)(v162 + 48) = v234;
  uint64_t v166 = v207;
  *(void *)(v162 + 64) = v207;
  *(void *)(v162 + 72) = 0;
  *(void *)(v162 + 80) = v166;
  *(void *)(v162 + 88) = 0;
  *(void *)(v162 + 96) = v204;
  *(void *)(v162 + 104) = v149;
  uint64_t v167 = v217;
  *(void *)(v162 + 112) = v216;
  *(void *)(v162 + 120) = v167;
  *(unsigned char *)(v162 + 128) = 0;
  *(void *)(v162 + 136) = v206;
  *(void *)(v162 + 144) = v148;
  *(void *)(v162 + 152) = v205;
  *(void *)(v162 + 160) = v142;
  sub_1001D9214((uint64_t)v196, v161, &qword_10072A888);
  swift_bridgeObjectRelease();
  uint64_t v168 = v203;
  *(void *)uint64_t v163 = v214;
  *((void *)v163 + 1) = v168;
  if (qword_10071F5D0 != -1) {
    swift_once();
  }
  uint64_t v169 = v187;
  uint64_t v170 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v170);
  uint64_t v171 = v169;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  uint64_t v108 = (uint64_t)v218;
  (*(void (**)(char *, uint64_t))(v188 + 8))(v171, v189);
  sub_100302FA0(v162, type metadata accessor for DIPODINPair);
  uint64_t v104 = v210;
  unint64_t v102 = v208;
LABEL_19:
  if (*(unsigned char *)(v97 + 402) == 1)
  {
    uint64_t v110 = v201;
    defaultLogger()();
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v111, v112))
    {
      Swift::String v113 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v113 = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Configured to not immediately send to Assessment Server", v113, 2u);
      swift_slowDealloc();
    }

    sub_10000C5E0(v209, v102);
    v221(v110, v104);
  }
  else
  {
    if (*(void *)(v97 + 104))
    {
      uint64_t v114 = *(void *)(v97 + 96);
      uint64_t v115 = *(void *)(v97 + 104);
    }
    else
    {
      uint64_t v114 = *(void *)(v97 + 112);
      uint64_t v115 = *(void *)(v97 + 120);
      swift_bridgeObjectRetain();
    }
    uint64_t v116 = v209;
    uint64_t v117 = type metadata accessor for TaskPriority();
    uint64_t v118 = (uint64_t)v202;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 56))(v202, 1, 1, v117);
    uint64_t v119 = (void *)swift_allocObject();
    v119[2] = 0;
    v119[3] = 0;
    v119[4] = v97;
    v119[5] = v114;
    v119[6] = v115;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10014043C(v118, (uint64_t)&unk_1007266E8, (uint64_t)v119);
    swift_release();
    sub_10000C5E0(v116, v102);
    uint64_t v108 = (uint64_t)v218;
  }
  sub_10000C6CC(v108, &qword_10072A7D8);
  return sub_10000C6CC((uint64_t)v222, &qword_10072A6E8);
}

uint64_t sub_1002F4314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[15] = a5;
  v6[16] = a6;
  v6[14] = a4;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[17] = v7;
  v6[18] = *(void *)(v7 - 8);
  v6[19] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError();
  v6[20] = v8;
  v6[21] = *(void *)(v8 - 8);
  v6[22] = swift_task_alloc();
  v6[23] = swift_task_alloc();
  sub_100007764(&qword_10072A888);
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OTDRequest(0);
  v6[26] = v9;
  v6[27] = *(void *)(v9 - 8);
  v6[28] = swift_task_alloc();
  sub_100007764(&qword_10072A880);
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ORDRequest(0);
  v6[31] = v10;
  v6[32] = *(void *)(v10 - 8);
  v6[33] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v6[34] = v11;
  v6[35] = *(void *)(v11 - 8);
  v6[36] = swift_task_alloc();
  v6[37] = swift_task_alloc();
  v6[38] = swift_task_alloc();
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  v6[41] = swift_task_alloc();
  return _swift_task_switch(sub_1002F4618, 0, 0);
}

uint64_t sub_1002F4618()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Sending ODN Results", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[41];
  uint64_t v5 = v0[34];
  uint64_t v6 = v0[35];
  uint64_t v7 = v0[31];
  uint64_t v8 = v0[32];
  uint64_t v9 = v0[30];
  uint64_t v10 = v0[14];

  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[42] = v11;
  v0[43] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v4, v5);
  uint64_t v12 = OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest;
  v0[44] = OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest;
  uint64_t v13 = v10 + v12;
  swift_beginAccess();
  sub_100048D6C(v13, v9, &qword_10072A880);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    sub_10000C6CC(v0[30], &qword_10072A880);
  }
  else
  {
    uint64_t v14 = v0[14];
    sub_100307BEC(v0[30], v0[33], type metadata accessor for ORDRequest);
    if (*(unsigned char *)(v14 + 400) == 1)
    {
      uint64_t v15 = (void *)v0[14];
      uint64_t v16 = v15[21];
      uint64_t v17 = v15[22];
      uint64_t v18 = v15[24];
      uint64_t v19 = v15[25];
      uint64_t v20 = (void *)swift_task_alloc();
      v0[45] = v20;
      *uint64_t v20 = v0;
      v20[1] = sub_1002F4BC4;
      uint64_t v21 = v0[33];
      uint64_t v22 = v0[15];
      uint64_t v23 = v0[16];
      return sub_10003C500(v16, v17, v22, v23, v18, v19, v21);
    }
    sub_100302FA0(v0[33], type metadata accessor for ORDRequest);
  }
  defaultLogger()();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "no ORD available or configured to not send", v27, 2u);
    swift_slowDealloc();
  }
  uint64_t v28 = v0[40];
  uint64_t v29 = v0[34];

  v11(v28, v29);
  uint64_t v30 = v0[26];
  uint64_t v31 = v0[27];
  uint64_t v32 = v0[25];
  uint64_t v33 = v0[14];
  uint64_t v34 = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  v0[47] = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  uint64_t v35 = v33 + v34;
  swift_beginAccess();
  sub_100048D6C(v35, v32, &qword_10072A888);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v30) == 1)
  {
    sub_10000C6CC(v0[25], &qword_10072A888);
LABEL_19:
    defaultLogger()();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "no OTD available or configured to not send", v43, 2u);
      swift_slowDealloc();
    }
    uint64_t v44 = (void (*)(uint64_t, uint64_t))v0[42];
    uint64_t v45 = v0[39];
    uint64_t v46 = v0[34];

    v44(v45, v46);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = (uint64_t (*)(void))v0[1];
    return v47();
  }
  uint64_t v36 = v0[14];
  sub_100307BEC(v0[25], v0[28], type metadata accessor for OTDRequest);
  if (*(unsigned char *)(v36 + 401) != 1)
  {
    sub_100302FA0(v0[28], type metadata accessor for OTDRequest);
    goto LABEL_19;
  }
  uint64_t v37 = (void *)swift_task_alloc();
  v0[48] = v37;
  *uint64_t v37 = v0;
  v37[1] = sub_1002F5064;
  uint64_t v38 = v0[28];
  uint64_t v39 = v0[15];
  uint64_t v40 = v0[16];
  return sub_10003D424(v38, v39, v40);
}

uint64_t sub_1002F4BC4()
{
  *(void *)(*(void *)v1 + 368) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1002F5320;
  }
  else {
    os_log_type_t v2 = sub_1002F4CD8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002F4CD8()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[14] + v0[44];
  sub_100302FA0(v0[33], type metadata accessor for ORDRequest);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v3, 1, 1, v2);
  swift_beginAccess();
  sub_1001D9214(v3, v4, &qword_10072A880);
  swift_endAccess();
  uint64_t v5 = v0[26];
  uint64_t v6 = v0[27];
  uint64_t v7 = v0[25];
  uint64_t v8 = v0[14];
  uint64_t v9 = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  v0[47] = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  uint64_t v10 = v8 + v9;
  swift_beginAccess();
  sub_100048D6C(v10, v7, &qword_10072A888);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
    sub_10000C6CC(v0[25], &qword_10072A888);
LABEL_8:
    defaultLogger()();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "no OTD available or configured to not send", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[42];
    uint64_t v21 = v0[39];
    uint64_t v22 = v0[34];

    v20(v21, v22);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  uint64_t v11 = v0[14];
  sub_100307BEC(v0[25], v0[28], type metadata accessor for OTDRequest);
  if (*(unsigned char *)(v11 + 401) != 1)
  {
    sub_100302FA0(v0[28], type metadata accessor for OTDRequest);
    goto LABEL_8;
  }
  uint64_t v12 = (void *)swift_task_alloc();
  v0[48] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1002F5064;
  uint64_t v13 = v0[28];
  uint64_t v14 = v0[15];
  uint64_t v15 = v0[16];
  return sub_10003D424(v13, v14, v15);
}

uint64_t sub_1002F5064()
{
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002F58C8;
  }
  else {
    uint64_t v2 = sub_1002F5178;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002F5178()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[14] + v0[47];
  sub_100302FA0(v0[28], type metadata accessor for OTDRequest);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v3, 1, 1, v2);
  swift_beginAccess();
  sub_1001D9214(v3, v4, &qword_10072A888);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1002F5320()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[42];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[23];
  uint64_t v6 = v0[20];
  uint64_t v5 = v0[21];
  (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.internalError(_:), v0[17]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  swift_errorRelease();
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to send ORD request; continuing on", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[42];
  uint64_t v12 = v0[37];
  uint64_t v13 = v0[34];
  uint64_t v14 = v0[23];
  uint64_t v15 = v0[20];
  uint64_t v16 = v0[21];

  swift_errorRelease();
  v11(v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  uint64_t v17 = v0[32];
  uint64_t v18 = v0[31];
  uint64_t v19 = v0[29];
  uint64_t v20 = v0[14] + v0[44];
  sub_100302FA0(v0[33], type metadata accessor for ORDRequest);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v19, 1, 1, v18);
  swift_beginAccess();
  sub_1001D9214(v19, v20, &qword_10072A880);
  swift_endAccess();
  uint64_t v22 = v0[26];
  uint64_t v21 = v0[27];
  uint64_t v23 = v0[25];
  uint64_t v24 = v0[14];
  uint64_t v25 = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  v0[47] = OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest;
  uint64_t v26 = v24 + v25;
  swift_beginAccess();
  sub_100048D6C(v26, v23, &qword_10072A888);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v22) == 1)
  {
    sub_10000C6CC(v0[25], &qword_10072A888);
LABEL_10:
    defaultLogger()();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "no OTD available or configured to not send", v35, 2u);
      swift_slowDealloc();
    }
    uint64_t v36 = (void (*)(uint64_t, uint64_t))v0[42];
    uint64_t v37 = v0[39];
    uint64_t v38 = v0[34];

    v36(v37, v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = (uint64_t (*)(void))v0[1];
    return v39();
  }
  uint64_t v27 = v0[14];
  sub_100307BEC(v0[25], v0[28], type metadata accessor for OTDRequest);
  if (*(unsigned char *)(v27 + 401) != 1)
  {
    sub_100302FA0(v0[28], type metadata accessor for OTDRequest);
    goto LABEL_10;
  }
  uint64_t v28 = (void *)swift_task_alloc();
  v0[48] = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_1002F5064;
  uint64_t v29 = v0[28];
  uint64_t v30 = v0[15];
  uint64_t v31 = v0[16];
  return sub_10003D424(v29, v30, v31);
}

uint64_t sub_1002F58C8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[42];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[34];
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[20];
  (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for DIPError.Code.internalError(_:), v0[17]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v1(v2, v3);
  swift_errorRelease();
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to send OTD request; continuing on", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[42];
  uint64_t v12 = v0[36];
  uint64_t v13 = v0[34];
  uint64_t v14 = v0[21];
  uint64_t v15 = v0[22];
  uint64_t v16 = v0[20];

  swift_errorRelease();
  v11(v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  uint64_t v17 = v0[27];
  uint64_t v18 = v0[26];
  uint64_t v19 = v0[24];
  uint64_t v20 = v0[14] + v0[47];
  sub_100302FA0(v0[28], type metadata accessor for OTDRequest);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v19, 1, 1, v18);
  swift_beginAccess();
  sub_1001D9214(v19, v20, &qword_10072A888);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_1002F5C8C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v10 = sub_100007764(&qword_10072A6E8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_100007764(&qword_100728600);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = &v26[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100048D6C(a3, (uint64_t)v12, &qword_10072A6E8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10000C6CC((uint64_t)v12, &qword_10072A6E8);
  }
  else
  {
    uint64_t v28 = a4;
    uint64_t v17 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32);
    v17(v16, v12, v13);
    uint64_t countAndFlagsBits = v5[2]._countAndFlagsBits;
    uint64_t object = v5[2]._object;
    if (String.hasPrefix(_:)(v5[24]))
    {
      int v27 = a2 & 1;
      uint64_t v20 = type metadata accessor for AssessmentAdditionalInfo(0);
      uint64_t v21 = (unsigned char *)(a5 + *(int *)(v20 + 28));
      v17(v21, v16, v13);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v21, 0, 1, v13);
      *(void *)a5 = countAndFlagsBits;
      *(void *)(a5 + 8) = object;
      *(unsigned char *)(a5 + 16) = v27;
      uint64_t v22 = v28;
      *(void *)(a5 + 24) = v29;
      *(unsigned char *)(a5 + 32) = 0;
      uint64_t v23 = a5 + *(int *)(v20 + 32);
      *(void *)uint64_t v23 = v22;
      *(unsigned char *)(v23 + 8) = 0;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a5, 0, 1, v20);
      return swift_bridgeObjectRetain();
    }
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v16, v13);
  }
  uint64_t v25 = type metadata accessor for AssessmentAdditionalInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(a5, 1, 1, v25);
}

uint64_t sub_1002F5F4C(uint64_t a1)
{
  uint64_t v3 = sub_100007764(&qword_100727600);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v43 = (uint64_t)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v42 = (uint64_t)v37 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v37 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v37 - v11;
  uint64_t v13 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AugmentedProfile(0) + 28));
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = (void *)(v1 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  *uint64_t v16 = v15;
  v16[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100048D6C(a1, (uint64_t)v12, &qword_100727600);
  uint64_t v17 = sub_100007764(&qword_100726860);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v12, 1, v17);
  uint64_t v47 = a1;
  uint64_t v48 = v1;
  uint64_t v44 = v19;
  uint64_t v45 = v18 + 48;
  uint64_t v46 = v18;
  if (v20 == 1)
  {
    sub_10000C6CC((uint64_t)v12, &qword_100727600);
    char v21 = 1;
  }
  else
  {
    JWSSignedJSON.payload.getter();
    uint64_t v22 = v50;
    uint64_t v38 = v49;
    uint64_t v23 = v18;
    v37[1] = v53;
    uint64_t v41 = v54;
    uint64_t v40 = v55;
    uint64_t v39 = v56;
    char v21 = v57;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v17);
    a1 = v47;
    uint64_t v1 = v48;
    uint64_t v19 = v44;
    sub_1001D8D24(v38, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)(v1 + 400) = v21;
  sub_100048D6C(a1, (uint64_t)v10, &qword_100727600);
  if (v19(v10, 1, v17) == 1)
  {
    sub_10000C6CC((uint64_t)v10, &qword_100727600);
    char v24 = 1;
  }
  else
  {
    JWSSignedJSON.payload.getter();
    uint64_t v25 = v50;
    uint64_t v38 = v49;
    uint64_t v41 = v54;
    uint64_t v40 = v55;
    uint64_t v39 = v56;
    char v24 = v58;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v17);
    uint64_t v26 = v25;
    a1 = v47;
    uint64_t v1 = v48;
    uint64_t v19 = v44;
    sub_1001D8D24(v38, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)(v1 + 401) = v24;
  uint64_t v27 = v42;
  sub_100048D6C(a1, v42, &qword_100727600);
  if (v19((char *)v27, 1, v17) == 1)
  {
    sub_10000C6CC(v27, &qword_100727600);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
  }
  else
  {
    JWSSignedJSON.payload.getter();
    uint64_t v28 = v49;
    uint64_t v29 = v50;
    uint64_t v41 = v54;
    uint64_t v40 = v55;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v27, v17);
    sub_1002090C4(v28, v29);
    sub_1001D8D24(v28, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v29)
    {
      swift_bridgeObjectRetain();
      sub_1001D8D24(v28, v29);
    }
    else
    {
      uint64_t v28 = 0;
    }
    a1 = v47;
    uint64_t v1 = v48;
    uint64_t v19 = v44;
  }
  *(void *)(v1 + 112) = v28;
  *(void *)(v1 + 120) = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = v43;
  sub_100048D6C(a1, v43, &qword_100727600);
  if (v19((char *)v30, 1, v17) == 1)
  {
    sub_10000C6CC(v30, &qword_100727600);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    JWSSignedJSON.payload.getter();
    uint64_t v33 = v30;
    uint64_t v34 = v49;
    uint64_t v35 = v50;
    uint64_t v31 = v51;
    uint64_t v32 = v52;
    uint64_t v47 = v54;
    uint64_t v45 = v55;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v33, v17);
    sub_1002090C4(v34, v35);
    sub_1001D8D24(v34, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v35)
    {
      swift_bridgeObjectRetain();
      sub_1001D8D24(v34, v35);
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
    }
    uint64_t v1 = v48;
  }
  *(void *)(v1 + 128) = v31;
  *(void *)(v1 + 136) = v32;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F659C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v0 + 216, &qword_100726690);
  swift_bridgeObjectRelease();
  sub_10000C5E0(*(void *)(v0 + 272), *(void *)(v0 + 280));
  sub_10000C6CC(v0 + 288, &qword_100726690);
  swift_bridgeObjectRelease();
  sub_10000C5E0(*(void *)(v0 + 344), *(void *)(v0 + 352));
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_ordRequest, &qword_10072A880);
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_otdRequest, &qword_10072A888);
  swift_bridgeObjectRelease();
  sub_1001D6E40(*(void *)(v0 + OBJC_IVAR____TtC8coreidvd10DIPODNator_clientGUIDFactory));
  return v0;
}

uint64_t sub_1002F66F8()
{
  sub_1002F659C();

  return swift_deallocClassInstance();
}

uint64_t sub_1002F6750()
{
  return type metadata accessor for DIPODNator(0);
}

uint64_t type metadata accessor for DIPODNator(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100729E50);
}

void sub_1002F6778()
{
  sub_1002F6914(319, &qword_100729E68, (void (*)(uint64_t))type metadata accessor for ORDRequest);
  if (v0 <= 0x3F)
  {
    sub_1002F6914(319, (unint64_t *)&qword_100729E70, (void (*)(uint64_t))type metadata accessor for OTDRequest);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1002F6914(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *sub_1002F6968@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_1002F6988(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t *a13, unsigned __int8 a14)
{
  uint64_t v15 = v14;
  uint64_t v56 = a8;
  int v55 = a7;
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  int v52 = a4;
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v48 = a9;
  uint64_t v49 = a1;
  uint64_t v46 = a13;
  uint64_t v47 = a10;
  int v45 = a14;
  uint64_t v44 = a12;
  uint64_t v43 = a11;
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v20);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v21 - 8);
  *(unsigned char *)(v14 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 0;
  uint64_t v22 = v14 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  uint64_t v41 = v15;
  uint64_t v23 = type metadata accessor for ODNAssessmentResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  uint64_t v42 = OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_workQueue;
  uint64_t v40 = sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v58[0] = _swiftEmptyArrayStorage;
  uint64_t v38 = sub_1001EDBD8((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v37 = sub_100007764((uint64_t *)&unk_100726420);
  uint64_t v39 = sub_1000B6120((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v24 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v25 = v17 + 104;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
  uint64_t v36 = v25;
  uint64_t v35 = v19;
  v26(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v16);
  uint64_t v27 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v28 = v41;
  *(void *)(v41 + v42) = v27;
  uint64_t v42 = OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_recomputeQueue;
  static DispatchQoS.userInitiated.getter();
  v58[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v26(v35, v24, v16);
  *(void *)(v28 + v42) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v29 = v28;
  swift_release();
  uint64_t v30 = v43;
  sub_100048D6C(v43, (uint64_t)v58, &qword_100726690);
  uint64_t v31 = v44;
  sub_100048D6C(v44, (uint64_t)v57, &qword_100726690);
  uint64_t v32 = v58[7];
  sub_1002E618C(v49, v50, v51, v52, v53, v54, v55, v56, v48, v47, (uint64_t)v58, (uint64_t)v57, v46, v45);
  sub_10000C6CC(v31, &qword_100726690);
  sub_10000C6CC(v30, &qword_100726690);
  if (!v32) {
    *(unsigned char *)(v29 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 0;
  }
  return v29;
}

uint64_t sub_1002F6E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v11 = v10;
  uint64_t v34 = a7;
  uint64_t v35 = a8;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  int v26 = a10;
  int v27 = a9;
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v16);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v17 - 8);
  *(unsigned char *)(v10 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 0;
  uint64_t v18 = v10 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  uint64_t v19 = type metadata accessor for ODNAssessmentResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t v25 = OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_workQueue;
  v24[4] = sub_100025C28(0, (unint64_t *)&qword_1007208E0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = _swiftEmptyArrayStorage;
  v24[2] = sub_1001EDBD8((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v24[1] = sub_100007764((uint64_t *)&unk_100726420);
  v24[3] = sub_1000B6120((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v20 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v21 = v13 + 104;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
  v24[0] = v21;
  v22(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v12);
  *(void *)(v11 + v25) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v25 = OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_recomputeQueue;
  static DispatchQoS.userInitiated.getter();
  uint64_t v36 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v22(v15, v20, v12);
  *(void *)(v11 + v25) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  swift_release();
  sub_1002E73D4(v28, v29, v30, v31, v32, v33, v34, v35, v27, v26);
  *(unsigned char *)(v11 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 0;
  return v11;
}

uint64_t sub_1002F7284(uint64_t *a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v38 = type metadata accessor for Logger();
  uint64_t v3 = __chkstk_darwin(v38);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v32 - v6;
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  uint64_t v10 = (void *)a1[2];
  uint64_t v11 = a1[4];
  uint64_t v12 = v10[2];
  uint64_t v39 = v13;
  if (v12)
  {
    unint64_t v14 = v10[5];
    uint64_t v37 = v10[4];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v14 = 0;
  }
  id v15 = [self standardUserDefaults];
  v16._uint64_t object = (void *)0x8000000100649060;
  v16._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  Swift::Bool v17 = NSUserDefaults.internalBool(forKey:)(v16);

  if (v17 && v14)
  {
    swift_bridgeObjectRetain();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc();
      LODWORD(v35) = v20;
      uint64_t v22 = v21;
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v41 = v34;
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v33 = (uint8_t *)v11;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_100110D58(v9, v8, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v23 = v37;
      uint64_t v43 = sub_100110D58(v37, v14, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v35, "ODN bindings user entered keyed-in attribute %s: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v38);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v38);
      uint64_t v23 = v37;
    }
  }
  else
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v36 = v9;
    if (v26)
    {
      int v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(void *)&long long v41 = v35;
      uint64_t v34 = v27;
      *(_DWORD *)int v27 = 136315138;
      uint64_t v33 = v27 + 4;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_100110D58(v9, v8, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "ODN bindings user entered keyed-in attribute %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v38);
    uint64_t v23 = v37;
    if (!v14)
    {
      long long v41 = 0u;
      long long v42 = 0u;
      uint64_t v9 = v36;
      goto LABEL_16;
    }
    uint64_t v9 = v36;
  }
  *((void *)&v42 + 1) = &type metadata for String;
  *(void *)&long long v41 = v23;
  *((void *)&v41 + 1) = v14;
LABEL_16:
  swift_bridgeObjectRetain();
  sub_10055F2A8((uint64_t)&v41, v9, v8);
  *(void *)&long long v41 = v9;
  *((void *)&v41 + 1) = v8;
  swift_bridgeObjectRetain();
  v28._uint64_t countAndFlagsBits = 0x657261685373692ELL;
  v28._uint64_t object = (void *)0xE900000000000064;
  String.append(_:)(v28);
  long long v29 = v41;
  id v30 = [objc_allocWithZone((Class)NSNumber) initWithBool:1];
  *((void *)&v42 + 1) = sub_100025C28(0, &qword_100726CC8);
  *(void *)&long long v41 = v30;
  return sub_10055F2A8((uint64_t)&v41, v29, *((uint64_t *)&v29 + 1));
}

uint64_t sub_1002F7874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v71 = a3;
  uint64_t v78 = a1;
  uint64_t v79 = a2;
  uint64_t v77 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v69 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v72 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v73 = *(void *)(v6 - 8);
  uint64_t v74 = v6;
  __chkstk_darwin(v6);
  uint64_t v70 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_1007266B0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for ODNAssessmentResult(0);
  uint64_t v76 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v13 - 8);
  uint64_t v14 = type metadata accessor for DIPSignpost();
  uint64_t v75 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  Swift::String v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v80 = *(void *)(v17 - 8);
  uint64_t v81 = (char *)v17;
  uint64_t v18 = __chkstk_darwin(v17);
  int v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v65 - v21;
  id v23 = [self standardUserDefaults];
  v24._uint64_t object = (void *)0x8000000100648CB0;
  v24._uint64_t countAndFlagsBits = 0xD000000000000012;
  Swift::Bool v25 = NSUserDefaults.internalBool(forKey:)(v24);

  if (v25)
  {
    uint64_t v26 = v83;
    defaultLogger()();
    int v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      long long v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Skipping ODIN due to setting", v29, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, char *))(v80 + 8))(v22, v81);
    swift_beginAccess();
    sub_100048D6C(v26 + 216, a4, &qword_100726690);
    uint64_t v31 = *(void *)(v26 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    uint64_t v30 = *(void *)(v26 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
    uint64_t v32 = a4 + *(int *)(v82 + 44);
    uint64_t v33 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(void *)(a4 + 128) = 0;
    *(void *)(a4 + 136) = 0;
    *(void *)(a4 + 120) = 1;
    *(unsigned char *)(a4 + 144) = 0;
    *(_OWORD *)(a4 + 152) = 0u;
    *(_OWORD *)(a4 + 168) = 0u;
    *(_OWORD *)(a4 + 184) = 0u;
    *(_OWORD *)(a4 + 200) = 0u;
    *(void *)(a4 + 216) = v31;
    *(void *)(a4 + 224) = v30;
    return swift_bridgeObjectRetain();
  }
  uint64_t v35 = v76;
  os_log_type_t v66 = v20;
  uint64_t v36 = v78;
  uint64_t v37 = v79;
  BOOL v67 = v12;
  uint64_t v38 = v77;
  uint64_t v68 = v14;
  static DaemonSignposts.getVerificationResultFetchAssesssment.getter();
  DIPSignpost.init(_:)();
  uint64_t v39 = v83;
  if (*(unsigned char *)(v83 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) == 1)
  {
    uint64_t v40 = v83 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
    swift_beginAccess();
    sub_100048D6C(v40, (uint64_t)v10, &qword_1007266B0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v10, 1, v82) == 1)
    {
      sub_10000C6CC((uint64_t)v10, &qword_1007266B0);
LABEL_17:
      uint64_t v59 = v68;
      uint64_t v60 = v75;
      sub_1002FB1F4(a4);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v16, v59);
    }
    uint64_t v58 = (uint64_t)v67;
    sub_100307BEC((uint64_t)v10, (uint64_t)v67, type metadata accessor for ODNAssessmentResult);
    if (*(void *)(v58 + 120) == 1)
    {
      sub_100302FA0(v58, type metadata accessor for ODNAssessmentResult);
      goto LABEL_17;
    }
    uint64_t v61 = v66;
    defaultLogger()();
    long long v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v62, v63))
    {
      long long v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "fetchAssessment: previous assessment contains error.", v64, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, char *))(v80 + 8))(v61, v81);
    sub_100307BEC(v58, a4, type metadata accessor for ODNAssessmentResult);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v16, v68);
  }
  else
  {
    uint64_t v81 = v16;
    *(unsigned char *)(v83 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 1;
    dispatch_semaphore_t v41 = dispatch_semaphore_create(0);
    long long v42 = *(void **)(v39 + 368);
    *(void *)(v39 + 368) = v41;

    dispatch_semaphore_t v43 = dispatch_semaphore_create(0);
    uint64_t v44 = *(void **)(v39 + 376);
    *(void *)(v39 + 376) = v43;

    v88[0] = sub_1002E9848(v36, v37, 0);
    uint64_t v45 = v38;
    uint64_t v46 = v70;
    uint64_t v47 = v71;
    if (v71)
    {
      uint64_t v48 = *(void *)(v71 + 16);
      if (v48)
      {
        swift_bridgeObjectRetain();
        uint64_t v49 = (_OWORD *)(v47 + 56);
        do
        {
          aBlock = (void **)*((void *)v49 - 3);
          long long v85 = *(v49 - 1);
          long long v50 = *v49;
          uint64_t v49 = (_OWORD *)((char *)v49 + 40);
          long long v86 = v50;
          sub_1002F7284((uint64_t *)&aBlock, (uint64_t)v88);
          --v48;
        }
        while (v48);
        swift_bridgeObjectRelease();
      }
    }
    sub_1002E93D0(v88, 0, 0);
    uint64_t v51 = v88[0];
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v39;
    *(void *)(v52 + 24) = v51;
    *((void *)&v86 + 1) = sub_100307C98;
    uint64_t v87 = v52;
    aBlock = _NSConcreteStackBlock;
    *(void *)&long long v85 = 1107296256;
    *((void *)&v85 + 1) = sub_100593800;
    *(void *)&long long v86 = &unk_1006FCFA8;
    uint64_t v53 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v88[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100007764((uint64_t *)&unk_1007208F0);
    sub_1000B6120(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
    uint64_t v54 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v53);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v54, v45);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v74);
    swift_release();
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    uint64_t v55 = a4 + *(int *)(v82 + 44);
    uint64_t v56 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 1, 1, v56);
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(void *)(a4 + 128) = 0;
    *(void *)(a4 + 136) = 0;
    *(void *)(a4 + 120) = 1;
    *(unsigned char *)(a4 + 144) = 0;
    *(_OWORD *)(a4 + 152) = 0u;
    *(_OWORD *)(a4 + 168) = 0u;
    *(_OWORD *)(a4 + 184) = 0u;
    *(_OWORD *)(a4 + 200) = 0u;
    *(_OWORD *)(a4 + 216) = 0u;
    char v57 = v81;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v57, v68);
  }
}

uint64_t sub_1002F82CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100726688);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  uint64_t v7 = sub_100007764(&qword_1007266B0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v23 - v11 + 16;
  uint64_t v13 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v13 - 8);
  uint64_t v14 = type metadata accessor for DIPSignpost();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  static DaemonSignposts.getVerificationResultFetchAssesssmentProofing.getter();
  DIPSignpost.init(_:)();
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = 1;
  uint64_t v18 = type metadata accessor for AugmentedProfile(0);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 1, 1, v18);
  sub_1002ECA0C(a2, 0, (uint64_t)v23, v6, 1, (uint64_t)v12);
  sub_10000C6CC((uint64_t)v6, &qword_100726688);
  uint64_t v19 = type metadata accessor for ODNAssessmentResult(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 0, 1, v19);
  sub_1000BEA14((uint64_t)v12, (uint64_t)v10, &qword_1007266B0);
  uint64_t v20 = a1 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess();
  sub_1001D9214((uint64_t)v10, v20, &qword_1007266B0);
  swift_endAccess();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_1002F85D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v91 = a2;
  uint64_t v92 = a3;
  uint64_t v80 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v85 = *(void *)(v5 - 8);
  uint64_t v86 = v5;
  __chkstk_darwin(v5);
  uint64_t v83 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for DispatchQoS();
  uint64_t v82 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v81 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_1007266A8);
  uint64_t v78 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v79 = v9;
  uint64_t v76 = (uint64_t)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100726688);
  uint64_t v77 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v77 + 64);
  __chkstk_darwin(v10 - 8);
  uint64_t v90 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_1007266B0);
  __chkstk_darwin(v12 - 8);
  unint64_t v89 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for ODNAssessmentResult(0);
  uint64_t v88 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v16 - 8);
  uint64_t v17 = type metadata accessor for DIPSignpost();
  uint64_t v87 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v93 = *(void *)(v20 - 8);
  uint64_t v94 = (char *)v20;
  uint64_t v21 = __chkstk_darwin(v20);
  id v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v71 - v24;
  id v26 = [self standardUserDefaults];
  v27._uint64_t object = (void *)0x8000000100648CB0;
  v27._uint64_t countAndFlagsBits = 0xD000000000000012;
  Swift::Bool v28 = NSUserDefaults.internalBool(forKey:)(v27);

  if (v28)
  {
    uint64_t v29 = v96;
    defaultLogger()();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Skipping ODIN due to setting", v32, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, char *))(v93 + 8))(v25, v94);
    swift_beginAccess();
    sub_100048D6C(v29 + 216, a4, &qword_100726690);
    uint64_t v34 = *(void *)(v29 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    uint64_t v33 = *(void *)(v29 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
    uint64_t v35 = a4 + *(int *)(v95 + 44);
    uint64_t v36 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(void *)(a4 + 128) = 0;
    *(void *)(a4 + 136) = 0;
    *(void *)(a4 + 120) = 1;
    *(unsigned char *)(a4 + 144) = 0;
    *(_OWORD *)(a4 + 152) = 0u;
    *(_OWORD *)(a4 + 168) = 0u;
    *(_OWORD *)(a4 + 184) = 0u;
    *(_OWORD *)(a4 + 200) = 0u;
    *(void *)(a4 + 216) = v34;
    *(void *)(a4 + 224) = v33;
    return swift_bridgeObjectRetain();
  }
  uint64_t v38 = v88;
  uint64_t v72 = v23;
  uint64_t v39 = (uint64_t)v89;
  uint64_t v74 = v11;
  uint64_t v73 = v15;
  uint64_t v40 = (uint64_t)v90;
  uint64_t v41 = v91;
  uint64_t v42 = v92;
  uint64_t v75 = v17;
  static DaemonSignposts.getVerificationResultFetchAssesssment.getter();
  DIPSignpost.init(_:)();
  uint64_t v43 = v96;
  if (*(unsigned char *)(v96 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) != 1)
  {
    *(unsigned char *)(v96 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 1;
    dispatch_semaphore_t v45 = dispatch_semaphore_create(0);
    uint64_t v46 = *(void **)(v43 + 368);
    *(void *)(v43 + 368) = v45;

    dispatch_semaphore_t v47 = dispatch_semaphore_create(0);
    uint64_t v48 = *(void **)(v43 + 376);
    *(void *)(v43 + 376) = v47;

    uint64_t v93 = *(void *)(v43 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_workQueue);
    uint64_t v49 = v40;
    sub_100048D6C(v42, v40, &qword_100726688);
    uint64_t v50 = v76;
    sub_100048D6C(v41, v76, &qword_1007266A8);
    uint64_t v51 = *(unsigned __int8 *)(v77 + 80);
    uint64_t v94 = v19;
    uint64_t v52 = (v51 + 16) & ~v51;
    unint64_t v53 = (v74 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v54 = (*(unsigned __int8 *)(v78 + 80) + v53 + 8) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
    unint64_t v55 = (v79 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v56 = swift_allocObject();
    sub_1000BEA14(v49, v56 + v52, &qword_100726688);
    *(void *)(v56 + v53) = v43;
    sub_1000BEA14(v50, v56 + v54, &qword_1007266A8);
    *(void *)(v56 + v55) = v80;
    aBlock[4] = sub_100307A30;
    aBlock[5] = v56;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100593800;
    aBlock[3] = &unk_1006FCF58;
    char v57 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v58 = v81;
    static DispatchQoS.unspecified.getter();
    uint64_t v97 = _swiftEmptyArrayStorage;
    sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100007764((uint64_t *)&unk_1007208F0);
    sub_1000B6120(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
    uint64_t v59 = v83;
    uint64_t v60 = v86;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v57);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v58, v84);
    swift_release();
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    uint64_t v61 = a4 + *(int *)(v95 + 44);
    uint64_t v62 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 1, 1, v62);
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(void *)(a4 + 128) = 0;
    *(void *)(a4 + 136) = 0;
    *(void *)(a4 + 120) = 1;
    *(unsigned char *)(a4 + 144) = 0;
    *(_OWORD *)(a4 + 152) = 0u;
    *(_OWORD *)(a4 + 168) = 0u;
    *(_OWORD *)(a4 + 184) = 0u;
    *(_OWORD *)(a4 + 200) = 0u;
    *(_OWORD *)(a4 + 216) = 0u;
    os_log_type_t v63 = v94;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v63, v75);
  }
  uint64_t v44 = v96 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess();
  sub_100048D6C(v44, v39, &qword_1007266B0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v39, 1, v95) == 1)
  {
    sub_10000C6CC(v39, &qword_1007266B0);
LABEL_12:
    uint64_t v65 = v75;
    uint64_t v66 = v87;
    sub_1002FB1F4(a4);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v19, v65);
  }
  uint64_t v64 = (uint64_t)v73;
  sub_100307BEC(v39, (uint64_t)v73, type metadata accessor for ODNAssessmentResult);
  if (*(void *)(v64 + 120) == 1)
  {
    sub_100302FA0(v64, type metadata accessor for ODNAssessmentResult);
    goto LABEL_12;
  }
  BOOL v67 = v72;
  defaultLogger()();
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "fetchAssessment: previous assessment contains error.", v70, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, char *))(v93 + 8))(v67, v94);
  sub_100307BEC(v64, a4, type metadata accessor for ODNAssessmentResult);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v19, v75);
}

uint64_t sub_1002F919C(uint64_t (*a1)(char *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v116 = a4;
  uint64_t v124 = a3;
  uint64_t v125 = a2;
  uint64_t v135 = a1;
  uint64_t v4 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v4 - 8);
  uint64_t v115 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = type metadata accessor for DIPSignpost();
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v117 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_1007266A8);
  __chkstk_darwin(v7 - 8);
  uint64_t v123 = (uint64_t)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for DIPPregeneratedAssessment(0);
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v114 = (uint64_t)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for DIPError.Code();
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v111 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007764(&qword_1007266B0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v129 = (uint64_t)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v128 = (uint64_t)&v108 - v14;
  uint64_t v136 = sub_100007764(&qword_100726860);
  uint64_t v130 = *(void *)(v136 - 8);
  uint64_t v15 = __chkstk_darwin(v136);
  os_log_type_t v112 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v108 = (char *)&v108 - v17;
  *(void *)&long long v134 = type metadata accessor for Logger();
  uint64_t v133 = *(void *)(v134 - 8);
  uint64_t v18 = __chkstk_darwin(v134);
  uint64_t v127 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v132 = (char *)&v108 - v21;
  __chkstk_darwin(v20);
  Swift::String v113 = (char *)&v108 - v22;
  uint64_t v23 = type metadata accessor for AugmentedProfile(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  Swift::String v27 = ((char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v108 - v28;
  uint64_t v30 = sub_100007764(&qword_100726688);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v120 = (char *)&v108 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v108 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)&v108 - v37;
  __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v108 - v39;
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v41((char *)&v108 - v39, 1, 1, v23);
  sub_100048D6C((uint64_t)v135, (uint64_t)v38, &qword_100726688);
  uint64_t v135 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v42 = v135(v38, 1, v23);
  uint64_t v131 = v40;
  if (v42 == 1)
  {
    sub_10000C6CC((uint64_t)v38, &qword_100726688);
    uint64_t v43 = v125;
    swift_retain();
    sub_100007764((uint64_t *)&unk_100722630);
    runAsyncAndBlock<A>(file:function:line:_:)();
    swift_release();
    if (*((void *)&v137 + 1))
    {
      sub_1001FFFF4(*((uint64_t *)&v137 + 1), v27);
      sub_1002F5F4C((uint64_t)v27);
      sub_100307BEC((uint64_t)v27, (uint64_t)v35, type metadata accessor for AugmentedProfile);
      swift_bridgeObjectRelease();
      v41(v35, 0, 1, v23);
      uint64_t v57 = v43;
      uint64_t v58 = (uint64_t)v131;
      sub_1001D9214((uint64_t)v35, (uint64_t)v131, &qword_100726688);
    }
    else
    {
      uint64_t v57 = v43;
      uint64_t v58 = (uint64_t)v131;
    }
  }
  else
  {
    sub_100307BEC((uint64_t)v38, (uint64_t)v29, type metadata accessor for AugmentedProfile);
    sub_10000C6CC((uint64_t)v40, &qword_100726688);
    sub_1003086F8((uint64_t)v29, (uint64_t)v40, type metadata accessor for AugmentedProfile);
    v41(v40, 0, 1, v23);
    uint64_t v57 = v125;
    sub_1002F5F4C((uint64_t)v29);
    sub_100302FA0((uint64_t)v29, type metadata accessor for AugmentedProfile);
    uint64_t v58 = (uint64_t)v40;
  }
  uint64_t v44 = v136;
  dispatch_semaphore_t v45 = v132;
  defaultLogger()();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  BOOL v48 = os_log_type_enabled(v46, v47);
  uint64_t v126 = v23;
  if (v48)
  {
    uint64_t v49 = 4271950;
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v143 = swift_slowAlloc();
    *(_DWORD *)uint64_t v50 = 136315138;
    swift_beginAccess();
    if (v135((char *)v58, 1, v23))
    {
      unint64_t v51 = 0xE300000000000000;
    }
    else
    {
      uint64_t v54 = v57;
      uint64_t v55 = v130;
      uint64_t v56 = v136;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v58, 1, v136))
      {
        unint64_t v51 = 0xE300000000000000;
      }
      else
      {
        uint64_t v59 = v108;
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v108, v58, v56);
        JWSSignedJSON.payload.getter();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v56);
        int v60 = v142;
        sub_1001D8D24(v137, *((uint64_t *)&v137 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v61 = 0x800000010062A750;
        unint64_t v62 = 0xD000000000000018;
        if (v60 != 1)
        {
          unint64_t v62 = 0x6146737961776C61;
          unint64_t v61 = 0xEE006B6361626C6CLL;
        }
        if (v60) {
          uint64_t v49 = v62;
        }
        else {
          uint64_t v49 = 0x746C7561666564;
        }
        if (v60) {
          unint64_t v51 = v61;
        }
        else {
          unint64_t v51 = 0xE700000000000000;
        }
      }
      uint64_t v57 = v54;
      dispatch_semaphore_t v45 = v132;
    }
    *(void *)&long long v137 = sub_100110D58(v49, v51, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "fetchAssessment: requirePregenerated set at : %s", v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v52 = *(void (**)(char *, uint64_t))(v133 + 8);
    uint64_t v53 = v134;
    v52(v45, v134);
    uint64_t v58 = (uint64_t)v131;
    uint64_t v44 = v136;
  }
  else
  {

    uint64_t v52 = *(void (**)(char *, uint64_t))(v133 + 8);
    uint64_t v53 = v134;
    v52(v45, v134);
  }
  swift_beginAccess();
  int v63 = v135((char *)v58, 1, v126);
  uint64_t v64 = v127;
  uint64_t v65 = v130;
  if (v63 || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v58, 1, v44)) {
    goto LABEL_24;
  }
  uint64_t v85 = v112;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v112, v58, v44);
  JWSSignedJSON.payload.getter();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v85, v44);
  unsigned int v86 = v142;
  sub_1001D8D24(v137, *((uint64_t *)&v137 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v86 > 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v58 = (uint64_t)v131;
    char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v87 & 1) == 0)
    {
LABEL_24:
      uint64_t v66 = v123;
      sub_100048D6C(v124, v123, &qword_1007266A8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v66, 1, v122) == 1)
      {
        sub_10000C6CC(v66, &qword_1007266A8);
        defaultLogger()();
        BOOL v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v67, v68))
        {
          os_log_type_t v69 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v69 = 0;
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "No Pregenerated available, computing a new one", v69, 2u);
          swift_slowDealloc();
        }

        v52(v64, v53);
        static DaemonSignposts.getVerificationResultFetchAssesssmentProofing.getter();
        uint64_t v70 = v117;
        DIPSignpost.init(_:)();
        long long v137 = 0u;
        *(_OWORD *)uint64_t v138 = 0u;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        *(void *)&v138[16] = 1;
        LOBYTE(v141) = 0;
        uint64_t v71 = v120;
        sub_100048D6C(v58, (uint64_t)v120, &qword_100726688);
        uint64_t v72 = v128;
        sub_1002ECA0C(v116, 0, (uint64_t)&v137, v71, 1, v128);
        sub_10000C6CC((uint64_t)v71, &qword_100726688);
        uint64_t v73 = type metadata accessor for ODNAssessmentResult(0);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v72, 0, 1, v73);
        uint64_t v74 = v72;
        uint64_t v75 = v129;
        sub_1000BEA14(v74, v129, &qword_1007266B0);
        uint64_t v76 = v57 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
        swift_beginAccess();
        sub_1001D9214(v75, v76, &qword_1007266B0);
        swift_endAccess();
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v70, v119);
      }
      else
      {
        uint64_t v77 = v114;
        sub_100307BEC(v66, v114, type metadata accessor for DIPPregeneratedAssessment);
        uint64_t v78 = (uint64_t)v120;
        sub_100048D6C(v58, (uint64_t)v120, &qword_100726688);
        uint64_t v79 = v128;
        sub_1002EB410(v77, v78, v128);
        sub_10000C6CC(v78, &qword_100726688);
        sub_100302FA0(v77, type metadata accessor for DIPPregeneratedAssessment);
        uint64_t v80 = type metadata accessor for ODNAssessmentResult(0);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v79, 0, 1, v80);
        uint64_t v81 = v79;
        uint64_t v82 = v129;
        sub_1000BEA14(v81, v129, &qword_1007266B0);
        uint64_t v83 = v57 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
        swift_beginAccess();
        sub_1001D9214(v82, v83, &qword_1007266B0);
        swift_endAccess();
      }
      return sub_10000C6CC(v58, &qword_100726688);
    }
  }
  (*(void (**)(char *, void, uint64_t))(v109 + 104))(v111, enum case for DIPError.Code.odnForcedFallback(_:), v110);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  uint64_t v88 = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1002E8ED0(v88, 2, (uint64_t)&v137);
  uint64_t v135 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)&v137 + 1);
  uint64_t v136 = v137;
  uint64_t v89 = v138[0];
  long long v134 = *(_OWORD *)&v138[8];
  uint64_t v90 = v139;
  uint64_t v91 = v140;
  char v92 = v141;
  swift_errorRelease();
  swift_beginAccess();
  uint64_t v93 = v128;
  sub_100048D6C(v57 + 216, v128, &qword_100726690);
  uint64_t v94 = v57 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId;
  uint64_t v95 = v57;
  uint64_t v97 = *(void *)(v57 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
  uint64_t v96 = *(void *)(v94 + 8);
  uint64_t v98 = type metadata accessor for ODNAssessmentResult(0);
  uint64_t v99 = v93 + *(int *)(v98 + 44);
  uint64_t v100 = type metadata accessor for AssessmentAdditionalInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v99, 1, 1, v100);
  *(_OWORD *)(v93 + 72) = 0u;
  *(_OWORD *)(v93 + 56) = 0u;
  *(_OWORD *)(v93 + 40) = 0u;
  unint64_t v101 = v135;
  *(void *)(v93 + 88) = v136;
  *(void *)(v93 + 96) = v101;
  *(void *)(v93 + 104) = v89;
  *(_OWORD *)(v93 + 112) = v134;
  *(void *)(v93 + 128) = v90;
  *(void *)(v93 + 136) = v91;
  *(unsigned char *)(v93 + 144) = v92;
  *(_OWORD *)(v93 + 152) = 0u;
  *(_OWORD *)(v93 + 168) = 0u;
  *(_OWORD *)(v93 + 184) = 0u;
  *(_OWORD *)(v93 + 200) = 0u;
  *(void *)(v93 + 216) = v97;
  *(void *)(v93 + 224) = v96;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v93, 0, 1, v98);
  uint64_t v102 = v93;
  uint64_t v103 = v129;
  sub_1000BEA14(v102, v129, &qword_1007266B0);
  uint64_t v104 = v95 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v105 = v103;
  uint64_t v58 = (uint64_t)v131;
  sub_1001D9214(v105, v104, &qword_1007266B0);
  swift_endAccess();
  os_log_type_t v106 = *(void **)(v95 + 376);
  if (v106)
  {
    id v107 = v106;
    OS_dispatch_semaphore.signal()();
  }
  return sub_10000C6CC(v58, &qword_100726688);
}

uint64_t sub_1002FA598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v80 = a3;
  uint64_t v81 = a4;
  uint64_t v79 = a2;
  uint64_t v75 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v76 = *(void *)(v6 - 8);
  uint64_t v77 = v6;
  __chkstk_darwin(v6);
  uint64_t v78 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v82 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007764(&qword_1007266B0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for ODNAssessmentResult(0);
  uint64_t v74 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v84 = *(void *)(v16 - 8);
  uint64_t v85 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v69 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v69 - v23;
  id v25 = [self standardUserDefaults];
  v26._uint64_t object = (void *)0x8000000100648CB0;
  v26._uint64_t countAndFlagsBits = 0xD000000000000012;
  Swift::Bool v27 = NSUserDefaults.internalBool(forKey:)(v26);

  if (v27)
  {
    defaultLogger()();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Skipping ODIN due to setting", v30, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v84 + 8))(v24, v85);
    uint64_t v31 = v86;
    swift_beginAccess();
    sub_100048D6C(v31 + 216, a5, &qword_100726690);
    uint64_t v33 = *(void *)(v31 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    uint64_t v32 = *(void *)(v31 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
    uint64_t v34 = a5 + *(int *)(v83 + 44);
    uint64_t v35 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
    *(_OWORD *)(a5 + 104) = 0u;
    *(_OWORD *)(a5 + 88) = 0u;
    *(_OWORD *)(a5 + 72) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(void *)(a5 + 128) = 0;
    *(void *)(a5 + 136) = 0;
    *(void *)(a5 + 120) = 1;
    *(unsigned char *)(a5 + 144) = 0;
    *(_OWORD *)(a5 + 152) = 0u;
    *(_OWORD *)(a5 + 168) = 0u;
    *(_OWORD *)(a5 + 184) = 0u;
    *(_OWORD *)(a5 + 200) = 0u;
    *(void *)(a5 + 216) = v33;
    *(void *)(a5 + 224) = v32;
    return swift_bridgeObjectRetain();
  }
  uint64_t v71 = v13;
  os_log_type_t v69 = v19;
  uint64_t v70 = v15;
  uint64_t v72 = v10;
  uint64_t v37 = v78;
  uint64_t v73 = v8;
  defaultLogger()();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Fetching identity profile assessment", v40, 2u);
    swift_slowDealloc();
  }

  uint64_t v41 = *(void (**)(char *, uint64_t))(v84 + 8);
  int v42 = v22;
  uint64_t v43 = v85;
  v41(v42, v85);
  uint64_t v44 = v86;
  dispatch_semaphore_t v45 = v37;
  uint64_t v46 = v81;
  uint64_t v47 = v82;
  uint64_t v49 = v79;
  unint64_t v48 = v80;
  if (*(unsigned char *)(v86 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) != 1)
  {
    *(unsigned char *)(v86 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_odnNatorState) = 1;
    dispatch_semaphore_t v53 = dispatch_semaphore_create(0);
    uint64_t v54 = *(void **)(v44 + 368);
    *(void *)(v44 + 368) = v53;

    dispatch_semaphore_t v55 = dispatch_semaphore_create(0);
    uint64_t v56 = *(void **)(v44 + 376);
    *(void *)(v44 + 376) = v55;

    uint64_t v57 = sub_1003028A0(v75, v49, v48, v46);
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v44;
    *(void *)(v58 + 24) = v57;
    aBlock[4] = sub_1003075EC;
    aBlock[5] = v58;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100593800;
    aBlock[3] = &unk_1006FCE40;
    uint64_t v59 = _Block_copy(aBlock);
    swift_retain();
    int v60 = v72;
    static DispatchQoS.unspecified.getter();
    char v87 = _swiftEmptyArrayStorage;
    sub_1001EDBD8((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100007764((uint64_t *)&unk_1007208F0);
    sub_1000B6120(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
    uint64_t v61 = v77;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v59);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v45, v61);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v60, v73);
    swift_release();
    *(void *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    uint64_t v62 = a5 + *(int *)(v83 + 44);
    uint64_t v63 = type metadata accessor for AssessmentAdditionalInfo(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 1, 1, v63);
    *(_OWORD *)(a5 + 104) = 0u;
    *(_OWORD *)(a5 + 88) = 0u;
    *(_OWORD *)(a5 + 72) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(void *)(a5 + 128) = 0;
    *(void *)(a5 + 136) = 0;
    *(void *)(a5 + 120) = 1;
    *(unsigned char *)(a5 + 144) = 0;
    *(_OWORD *)(a5 + 152) = 0u;
    *(_OWORD *)(a5 + 168) = 0u;
    *(_OWORD *)(a5 + 184) = 0u;
    *(_OWORD *)(a5 + 200) = 0u;
    *(_OWORD *)(a5 + 216) = 0u;
    return result;
  }
  uint64_t v50 = v86 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess();
  uint64_t v51 = v50;
  uint64_t v52 = (uint64_t)v71;
  sub_100048D6C(v51, (uint64_t)v71, &qword_1007266B0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v52, 1, v83) == 1)
  {
    sub_10000C6CC(v52, &qword_1007266B0);
    return sub_1002FB1F4(a5);
  }
  uint64_t v64 = (uint64_t)v70;
  sub_100307BEC(v52, (uint64_t)v70, type metadata accessor for ODNAssessmentResult);
  if (*(void *)(v64 + 120) == 1)
  {
    sub_100302FA0(v64, type metadata accessor for ODNAssessmentResult);
    return sub_1002FB1F4(a5);
  }
  uint64_t v65 = v69;
  defaultLogger()();
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v66, v67))
  {
    os_log_type_t v68 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "fetchAssessment: previous assessment contains error.", v68, 2u);
    swift_slowDealloc();
  }

  v41(v65, v43);
  return sub_100307BEC(v64, a5, type metadata accessor for ODNAssessmentResult);
}

uint64_t sub_1002FAEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100726688);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  uint64_t v7 = sub_100007764(&qword_1007266B0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v23 - v11 + 16;
  uint64_t v13 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v13 - 8);
  uint64_t v14 = type metadata accessor for DIPSignpost();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  static DaemonSignposts.getIdentityProofingAssessment.getter();
  DIPSignpost.init(_:)();
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = 1;
  uint64_t v18 = type metadata accessor for AugmentedProfile(0);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 1, 1, v18);
  sub_1002ECA0C(a2, 0, (uint64_t)v23, v6, 1, (uint64_t)v12);
  sub_10000C6CC((uint64_t)v6, &qword_100726688);
  uint64_t v19 = type metadata accessor for ODNAssessmentResult(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 0, 1, v19);
  sub_1000BEA14((uint64_t)v12, (uint64_t)v10, &qword_1007266B0);
  uint64_t v20 = a1 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess();
  sub_1001D9214((uint64_t)v10, v20, &qword_1007266B0);
  swift_endAccess();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_1002FB1F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v88 = a1;
  uint64_t v84 = type metadata accessor for DIPError.Code();
  uint64_t v81 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v86 = *(void *)(v4 - 8);
  uint64_t v87 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v85 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v91 = (unint64_t)&v75 - v8;
  __chkstk_darwin(v7);
  uint64_t v78 = (char *)&v75 - v9;
  uint64_t v89 = type metadata accessor for ODNAssessmentResult(0);
  uint64_t v83 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v77 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007764(&qword_1007266B0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v79 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v80 = (char *)&v75 - v14;
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v15 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v16 = *(void *)(*(void *)v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(*(void *)v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v15 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100611020;
  unint64_t v19 = v18 + v17;
  uint64_t v20 = (void *)(v18 + v17 + v15[14]);
  uint64_t v21 = enum case for DIPError.PropertyKey.spWorkflowID(_:);
  uint64_t v22 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v23 = *(void (**)(void))(*(void *)(v22 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v23)(v19, v21, v22);
  uint64_t v24 = *(void *)(v2 + 32);
  uint64_t v25 = *(void *)(v2 + 40);
  v20[3] = &type metadata for String;
  *uint64_t v20 = v24;
  v20[1] = v25;
  unint64_t v26 = v19 + v16 + v15[14];
  v23();
  unsigned __int8 v27 = *(unsigned char *)(v2 + 208);
  *(void *)(v26 + 24) = &type metadata for DIPState;
  *(unsigned char *)unint64_t v26 = v27;
  swift_bridgeObjectRetain();
  unint64_t v28 = sub_10015C504(v18);
  uint64_t v90 = v2;
  os_log_type_t v29 = *(void **)(v2 + 376);
  if (!v29)
  {
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v82, enum case for DIPError.Code.odnSemaphoreNotSet(_:), v84);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v31 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v32 = (char *)v91;
LABEL_7:
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    dispatch_semaphore_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136446210;
      uint64_t v92 = v31;
      swift_errorRetain();
      sub_100007764((uint64_t *)&unk_100723450);
      uint64_t v48 = String.init<A>(reflecting:)();
      uint64_t v92 = sub_100110D58(v48, v49, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "waitAndGetAssessmentInProcess: ignoring failed to generate assessment data. error %{public}s", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v50 = *(void (**)(char *, uint64_t))(v86 + 8);
    uint64_t v51 = v32;
    uint64_t v52 = v87;
    v50(v51, v87);
    dispatch_semaphore_t v53 = v85;
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    v50(v53, v52);
    uint64_t v54 = v90;
    sub_1002E8ED0(v31, 2, (uint64_t)&aBlock);
    uint64_t v86 = v94;
    uint64_t v87 = aBlock;
    unint64_t v91 = v95;
    dispatch_semaphore_t v55 = v96;
    uint64_t v56 = v97;
    uint64_t v57 = v98;
    uint64_t v58 = v99;
    char v59 = v100;
    int v60 = *(void **)(v54 + 368);
    if (v60)
    {
      id v61 = v60;
      OS_dispatch_semaphore.signal()();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
    swift_beginAccess();
    uint64_t v62 = v88;
    sub_100048D6C(v54 + 216, v88, &qword_100726690);
    uint64_t v64 = *(void *)(v54 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId);
    uint64_t v63 = *(void *)(v54 + OBJC_IVAR____TtC8coreidvd10DIPODNator_profileId + 8);
    uint64_t v65 = v62 + *(int *)(v89 + 44);
    uint64_t v66 = type metadata accessor for AssessmentAdditionalInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v65, 1, 1, v66);
    *(_OWORD *)(v62 + 72) = 0u;
    *(_OWORD *)(v62 + 56) = 0u;
    *(_OWORD *)(v62 + 40) = 0u;
    uint64_t v67 = v86;
    *(void *)(v62 + 88) = v87;
    *(void *)(v62 + 96) = v67;
    *(void *)(v62 + 104) = v91;
    *(void *)(v62 + 112) = v55;
    *(void *)(v62 + 120) = v56;
    *(void *)(v62 + 128) = v57;
    *(void *)(v62 + 136) = v58;
    *(unsigned char *)(v62 + 144) = v59;
    *(_OWORD *)(v62 + 152) = 0u;
    *(_OWORD *)(v62 + 168) = 0u;
    *(_OWORD *)(v62 + 184) = 0u;
    *(_OWORD *)(v62 + 200) = 0u;
    *(void *)(v62 + 216) = v64;
    *(void *)(v62 + 224) = v63;
    swift_bridgeObjectRetain();
    return sub_10003BEDC(v84);
  }
  id v30 = v29;
  sub_100209128((uint64_t)v30, v27, v28, 0);
  id v76 = v30;
  uint64_t v33 = v83;
  uint64_t v34 = (uint64_t)v80;
  uint64_t v35 = v89;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v80, 1, 1, v89);
  uint64_t v36 = v90;
  uint64_t v37 = *(NSObject **)(v90 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_workQueue);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v34;
  *(void *)(v38 + 24) = v36;
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = sub_1003075B8;
  *(void *)(v39 + 24) = v38;
  uint64_t v97 = sub_1000E4EA0;
  uint64_t v98 = v39;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v94 = 1107296256;
  uint64_t v95 = sub_100032314;
  uint64_t v96 = &unk_1006FCDF0;
  uint64_t v40 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v37, v40);
  _Block_release(v40);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    return result;
  }
  uint64_t v43 = v79;
  sub_100048D6C(v34, v79, &qword_1007266B0);
  int v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v43, 1, v35);
  uint64_t v32 = (char *)v91;
  if (v44 == 1)
  {
    uint64_t v83 = v38;
    sub_10000C6CC(v43, &qword_1007266B0);
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v82, enum case for DIPError.Code.odnTimeout(_:), v84);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v31 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    sub_10000C6CC(v34, &qword_1007266B0);
    uint64_t v84 = (uint64_t)sub_1003075B8;
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  uint64_t v68 = v77;
  sub_100307BEC(v43, v77, type metadata accessor for ODNAssessmentResult);
  os_log_type_t v69 = v78;
  defaultLogger()();
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.debug.getter();
  BOOL v72 = os_log_type_enabled(v70, v71);
  uint64_t v73 = v87;
  if (v72)
  {
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v74 = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "After waiting and have an assessment result", v74, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v86 + 8))(v69, v73);
  sub_100307BEC(v68, v88, type metadata accessor for ODNAssessmentResult);
  sub_10000C6CC(v34, &qword_1007266B0);
  return swift_release();
}

uint64_t sub_1002FBE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007266B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a2 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult;
  swift_beginAccess();
  sub_100048D6C(v7, (uint64_t)v6, &qword_1007266B0);
  return sub_1001D9214((uint64_t)v6, a1, &qword_1007266B0);
}

void sub_1002FBECC()
{
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult, &qword_1007266B0);

  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_recomputeQueue);
}

uint64_t sub_1002FBF24()
{
  sub_1002F659C();
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd27AssessDuringProofingODNator_assessmentResult, &qword_1007266B0);

  return swift_deallocClassInstance();
}

uint64_t sub_1002FBFB4()
{
  return type metadata accessor for AssessDuringProofingODNator(0);
}

uint64_t type metadata accessor for AssessDuringProofingODNator(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072A238);
}

void sub_1002FBFDC()
{
  sub_1002F6914(319, (unint64_t *)&unk_10072A248, (void (*)(uint64_t))type metadata accessor for ODNAssessmentResult);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for ODNAssessmentResult(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072A748);
}

uint64_t sub_1002FC0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  swift_bridgeObjectRetain();
  return sub_100307568(v5, v2, a1, a2);
}

uint64_t type metadata accessor for AssessmentPregenerator()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for AssessDuringProofingODNator.ODNatorState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002FC254);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssessDuringProofingODNator.ODNatorState()
{
  return &type metadata for AssessDuringProofingODNator.ODNatorState;
}

uint64_t sub_1002FC28C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
    return v4;
  }
  uint64_t v7 = a2[3];
  if (v7)
  {
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(void *)(a1 + 32) = a2[4];
  }
  uint64_t v11 = a2[6];
  *(void *)(v4 + 40) = a2[5];
  *(void *)(v4 + 48) = v11;
  uint64_t v12 = a2[8];
  *(void *)(v4 + 56) = a2[7];
  *(void *)(v4 + 64) = v12;
  uint64_t v13 = a2[10];
  *(void *)(v4 + 72) = a2[9];
  *(void *)(v4 + 80) = v13;
  uint64_t v14 = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14 == 1)
  {
    long long v15 = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(v4 + 104) = v15;
    *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(v4 + 129) = *(_OWORD *)((char *)a2 + 129);
    uint64_t v16 = a2[20];
    if (v16)
    {
LABEL_8:
      *(void *)(v4 + 152) = a2[19];
      *(void *)(v4 + 160) = v16;
      uint64_t v17 = a2[22];
      *(void *)(v4 + 168) = a2[21];
      *(void *)(v4 + 176) = v17;
      uint64_t v18 = a2[24];
      *(void *)(v4 + 184) = a2[23];
      *(void *)(v4 + 192) = v18;
      uint64_t v19 = a2[26];
      *(void *)(v4 + 200) = a2[25];
      *(void *)(v4 + 208) = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v20 = a2[12];
    *(void *)(v4 + 88) = a2[11];
    *(void *)(v4 + 96) = v20;
    *(unsigned char *)(v4 + 104) = *((unsigned char *)a2 + 104);
    *(void *)(v4 + 112) = a2[14];
    *(void *)(v4 + 120) = v14;
    uint64_t v21 = a2[17];
    *(void *)(v4 + 128) = a2[16];
    *(void *)(v4 + 136) = v21;
    *(unsigned char *)(v4 + 144) = *((unsigned char *)a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = a2[20];
    if (v16) {
      goto LABEL_8;
    }
  }
  long long v22 = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(v4 + 168) = v22;
  long long v23 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v4 + 200) = v23;
LABEL_11:
  uint64_t v24 = a2[28];
  *(void *)(v4 + 216) = a2[27];
  *(void *)(v4 + 224) = v24;
  uint64_t v25 = *(int *)(a3 + 44);
  unint64_t v26 = (void *)(v4 + v25);
  unsigned __int8 v27 = (uint64_t *)((char *)a2 + v25);
  uint64_t v28 = type metadata accessor for AssessmentAdditionalInfo(0);
  uint64_t v29 = *(void *)(v28 - 8);
  id v30 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  if (v30(v27, 1, v28))
  {
    uint64_t v31 = sub_100007764(&qword_1007266B8);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    uint64_t v32 = v27[1];
    *unint64_t v26 = *v27;
    v26[1] = v32;
    *((unsigned char *)v26 + 16) = *((unsigned char *)v27 + 16);
    v26[3] = v27[3];
    *((unsigned char *)v26 + 32) = *((unsigned char *)v27 + 32);
    uint64_t v33 = *(int *)(v28 + 28);
    uint64_t v34 = (char *)v26 + v33;
    uint64_t v35 = (char *)v27 + v33;
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_100007764(&qword_100728600);
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      uint64_t v38 = sub_100007764(&qword_10072A6E8);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    uint64_t v39 = *(int *)(v28 + 32);
    uint64_t v40 = (char *)v26 + v39;
    uint64_t v41 = (char *)v27 + v39;
    *(void *)uint64_t v40 = *(void *)v41;
    v40[8] = v41[8];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return v4;
}

uint64_t sub_1002FC658(void *a1, uint64_t a2)
{
  if (a1[3]) {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[15] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[20])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for AssessmentAdditionalInfo(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = &v4[*(int *)(v5 + 28)];
    uint64_t v8 = sub_100007764(&qword_100728600);
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8);
    if (!result)
    {
      uint64_t v9 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
      return v9(v7, v8);
    }
  }
  return result;
}

uint64_t sub_1002FC7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12 == 1)
  {
    long long v13 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v13;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
    uint64_t v14 = *(void *)(a2 + 160);
    if (v14)
    {
LABEL_6:
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v14;
      uint64_t v15 = *(void *)(a2 + 176);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v15;
      uint64_t v16 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v16;
      uint64_t v17 = *(void *)(a2 + 208);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v18;
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v12;
    uint64_t v19 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v19;
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = *(void *)(a2 + 160);
    if (v14) {
      goto LABEL_6;
    }
  }
  long long v20 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v20;
  long long v21 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v21;
LABEL_9:
  uint64_t v22 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v22;
  uint64_t v23 = *(int *)(a3 + 44);
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for AssessmentAdditionalInfo(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48);
  swift_bridgeObjectRetain();
  if (v28(v25, 1, v26))
  {
    uint64_t v29 = sub_100007764(&qword_1007266B8);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    uint64_t v30 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v30;
    *((unsigned char *)v24 + 16) = *((unsigned char *)v25 + 16);
    v24[3] = v25[3];
    *((unsigned char *)v24 + 32) = *((unsigned char *)v25 + 32);
    uint64_t v31 = *(int *)(v26 + 28);
    uint64_t v32 = (char *)v24 + v31;
    uint64_t v33 = (char *)v25 + v31;
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_100007764(&qword_100728600);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = sub_100007764(&qword_10072A6E8);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    uint64_t v37 = *(int *)(v26 + 32);
    uint64_t v38 = (char *)v24 + v37;
    uint64_t v39 = (char *)v25 + v37;
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t sub_1002FCB60(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v6)
    {
      sub_10000A128((uint64_t *)a1, (uint64_t *)a2);
      goto LABEL_8;
    }
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  }
  else if (v6)
  {
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
    goto LABEL_8;
  }
  long long v7 = *a2;
  long long v8 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
LABEL_8:
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (_OWORD *)(a1 + 88);
  uint64_t v10 = (long long *)((char *)a2 + 88);
  uint64_t v11 = *((void *)a2 + 15);
  if (*(void *)(a1 + 120) == 1)
  {
    if (v11 == 1)
    {
      long long v12 = *v10;
      long long v13 = *(long long *)((char *)a2 + 104);
      long long v14 = *(long long *)((char *)a2 + 120);
      *(_OWORD *)(a1 + 129) = *(long long *)((char *)a2 + 129);
      *(_OWORD *)(a1 + 104) = v13;
      *(_OWORD *)(a1 + 120) = v14;
      *uint64_t v9 = v12;
    }
    else
    {
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      uint64_t v18 = *((void *)a2 + 12);
      *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
      *(void *)(a1 + 96) = v18;
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      *(void *)(a1 + 120) = *((void *)a2 + 15);
      *(void *)(a1 + 128) = *((void *)a2 + 16);
      *(void *)(a1 + 136) = *((void *)a2 + 17);
      *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v11 == 1)
  {
    sub_1002FD2C4(a1 + 88);
    long long v16 = *(long long *)((char *)a2 + 104);
    long long v15 = *(long long *)((char *)a2 + 120);
    long long v17 = *v10;
    *(_OWORD *)(a1 + 129) = *(long long *)((char *)a2 + 129);
    *(_OWORD *)(a1 + 104) = v16;
    *(_OWORD *)(a1 + 120) = v15;
    *uint64_t v9 = v17;
  }
  else
  {
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    uint64_t v19 = *((void *)a2 + 12);
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    *(void *)(a1 + 96) = v19;
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(void *)(a1 + 120) = *((void *)a2 + 15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 128) = *((void *)a2 + 16);
    *(void *)(a1 + 136) = *((void *)a2 + 17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
  }
  long long v20 = (_OWORD *)(a1 + 152);
  long long v21 = (long long *)((char *)a2 + 152);
  uint64_t v22 = *((void *)a2 + 20);
  if (*(void *)(a1 + 160))
  {
    if (v22)
    {
      *(void *)(a1 + 152) = *((void *)a2 + 19);
      *(void *)(a1 + 160) = *((void *)a2 + 20);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 168) = *((void *)a2 + 21);
      *(void *)(a1 + 176) = *((void *)a2 + 22);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *((void *)a2 + 23);
      *(void *)(a1 + 192) = *((void *)a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 200) = *((void *)a2 + 25);
      *(void *)(a1 + 208) = *((void *)a2 + 26);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1002FD318(a1 + 152);
      long long v23 = *(long long *)((char *)a2 + 200);
      long long v25 = *v21;
      long long v24 = *(long long *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 184) = *(long long *)((char *)a2 + 184);
      *(_OWORD *)(a1 + 200) = v23;
      *long long v20 = v25;
      *(_OWORD *)(a1 + 168) = v24;
    }
  }
  else if (v22)
  {
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    *(void *)(a1 + 160) = *((void *)a2 + 20);
    *(void *)(a1 + 168) = *((void *)a2 + 21);
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    *(void *)(a1 + 184) = *((void *)a2 + 23);
    *(void *)(a1 + 192) = *((void *)a2 + 24);
    *(void *)(a1 + 200) = *((void *)a2 + 25);
    *(void *)(a1 + 208) = *((void *)a2 + 26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v26 = *v21;
    long long v27 = *(long long *)((char *)a2 + 168);
    long long v28 = *(long long *)((char *)a2 + 200);
    *(_OWORD *)(a1 + 184) = *(long long *)((char *)a2 + 184);
    *(_OWORD *)(a1 + 200) = v28;
    *long long v20 = v26;
    *(_OWORD *)(a1 + 168) = v27;
  }
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = *(int *)(a3 + 44);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = (uint64_t)a2 + v29;
  uint64_t v32 = type metadata accessor for AssessmentAdditionalInfo(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (v36)
    {
      sub_100302FA0(v30, type metadata accessor for AssessmentAdditionalInfo);
      goto LABEL_28;
    }
    *(void *)uint64_t v30 = *(void *)v31;
    *(void *)(v30 + 8) = *(void *)(v31 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v30 + 16) = *(unsigned char *)(v31 + 16);
    uint64_t v45 = *(void *)(v31 + 24);
    *(unsigned char *)(v30 + 32) = *(unsigned char *)(v31 + 32);
    *(void *)(v30 + 24) = v45;
    uint64_t v46 = *(int *)(v32 + 28);
    uint64_t v47 = (void *)(v30 + v46);
    uint64_t v48 = (void *)(v31 + v46);
    uint64_t v49 = sub_100007764(&qword_100728600);
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v50 + 48);
    uint64_t v64 = v47;
    LODWORD(v47) = v51(v47, 1, v49);
    int v52 = v51(v48, 1, v49);
    if (v47)
    {
      if (!v52)
      {
        (*(void (**)(void *, void *, uint64_t))(v50 + 16))(v64, v48, v49);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v64, 0, 1, v49);
        goto LABEL_39;
      }
      size_t v53 = *(void *)(*(void *)(sub_100007764(&qword_10072A6E8) - 8) + 64);
      uint64_t v54 = v64;
    }
    else
    {
      if (!v52)
      {
        (*(void (**)(void *, void *, uint64_t))(v50 + 24))(v64, v48, v49);
        goto LABEL_39;
      }
      (*(void (**)(void *, uint64_t))(v50 + 8))(v64, v49);
      size_t v53 = *(void *)(*(void *)(sub_100007764(&qword_10072A6E8) - 8) + 64);
      uint64_t v54 = v64;
    }
    memcpy(v54, v48, v53);
LABEL_39:
    uint64_t v59 = *(int *)(v32 + 32);
    uint64_t v60 = v30 + v59;
    id v61 = (uint64_t *)(v31 + v59);
    uint64_t v62 = *v61;
    *(unsigned char *)(v60 + 8) = *((unsigned char *)v61 + 8);
    *(void *)uint64_t v60 = v62;
    return a1;
  }
  if (v36)
  {
LABEL_28:
    uint64_t v44 = sub_100007764(&qword_1007266B8);
    memcpy((void *)v30, (const void *)v31, *(void *)(*(void *)(v44 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v30 = *(void *)v31;
  *(void *)(v30 + 8) = *(void *)(v31 + 8);
  *(unsigned char *)(v30 + 16) = *(unsigned char *)(v31 + 16);
  uint64_t v37 = *(void *)(v31 + 24);
  *(unsigned char *)(v30 + 32) = *(unsigned char *)(v31 + 32);
  *(void *)(v30 + 24) = v37;
  uint64_t v38 = *(int *)(v32 + 28);
  uint64_t v39 = (void *)(v30 + v38);
  uint64_t v40 = (const void *)(v31 + v38);
  swift_bridgeObjectRetain();
  uint64_t v41 = sub_100007764(&qword_100728600);
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    uint64_t v43 = sub_100007764(&qword_10072A6E8);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 16))(v39, v40, v41);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  uint64_t v55 = *(int *)(v32 + 32);
  uint64_t v56 = v30 + v55;
  uint64_t v57 = (uint64_t *)(v31 + v55);
  uint64_t v58 = *v57;
  *(unsigned char *)(v56 + 8) = *((unsigned char *)v57 + 8);
  *(void *)uint64_t v56 = v58;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  return a1;
}

uint64_t sub_1002FD2C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002FD318(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002FD36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = (_OWORD *)(a1 + v5);
  long long v7 = (_OWORD *)(a2 + v5);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  uint64_t v8 = type metadata accessor for AssessmentAdditionalInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = sub_100007764(&qword_1007266B8);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    *uint64_t v6 = *v7;
    *((unsigned char *)v6 + 16) = *((unsigned char *)v7 + 16);
    *((void *)v6 + 3) = *((void *)v7 + 3);
    *((unsigned char *)v6 + 32) = *((unsigned char *)v7 + 32);
    uint64_t v11 = *(int *)(v8 + 28);
    long long v12 = (char *)v6 + v11;
    long long v13 = (char *)v7 + v11;
    uint64_t v14 = sub_100007764(&qword_100728600);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = sub_100007764(&qword_10072A6E8);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v17 = *(int *)(v8 + 32);
    uint64_t v18 = (char *)v6 + v17;
    uint64_t v19 = (char *)v7 + v17;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_1002FD5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24)) {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  }
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 120) == 1) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a2 + 120);
  if (v9 == 1)
  {
    sub_1002FD2C4(a1 + 88);
LABEL_6:
    long long v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v12;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
LABEL_8:
  if (*(void *)(a1 + 160))
  {
    uint64_t v13 = *(void *)(a2 + 160);
    if (v13)
    {
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 176);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v14;
      swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v15;
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a2 + 208);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = v16;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_1002FD318(a1 + 152);
  }
  long long v17 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v17;
  long long v18 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v18;
LABEL_13:
  uint64_t v19 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(int *)(a3 + 44);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for AssessmentAdditionalInfo(0);
  uint64_t v24 = *(void *)(v23 - 8);
  long long v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (v27)
    {
      sub_100302FA0(v21, type metadata accessor for AssessmentAdditionalInfo);
      goto LABEL_19;
    }
    uint64_t v35 = *(void *)(v22 + 8);
    *(void *)uint64_t v21 = *(void *)v22;
    *(void *)(v21 + 8) = v35;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
    *(void *)(v21 + 24) = *(void *)(v22 + 24);
    *(unsigned char *)(v21 + 32) = *(unsigned char *)(v22 + 32);
    uint64_t v36 = *(int *)(v23 + 28);
    uint64_t v37 = (void *)(v21 + v36);
    uint64_t v38 = (void *)(v22 + v36);
    uint64_t v39 = sub_100007764(&qword_100728600);
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
    int v52 = v37;
    LODWORD(v37) = v41(v37, 1, v39);
    int v42 = v41(v38, 1, v39);
    if (v37)
    {
      if (!v42)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 32))(v52, v38, v39);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v52, 0, 1, v39);
        goto LABEL_30;
      }
      size_t v43 = *(void *)(*(void *)(sub_100007764(&qword_10072A6E8) - 8) + 64);
      uint64_t v44 = v52;
    }
    else
    {
      if (!v42)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 40))(v52, v38, v39);
        goto LABEL_30;
      }
      (*(void (**)(void *, uint64_t))(v40 + 8))(v52, v39);
      size_t v43 = *(void *)(*(void *)(sub_100007764(&qword_10072A6E8) - 8) + 64);
      uint64_t v44 = v52;
    }
    memcpy(v44, v38, v43);
LABEL_30:
    uint64_t v48 = *(int *)(v23 + 32);
    uint64_t v49 = v21 + v48;
    uint64_t v50 = v22 + v48;
    *(void *)uint64_t v49 = *(void *)v50;
    *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
    return a1;
  }
  if (v27)
  {
LABEL_19:
    uint64_t v34 = sub_100007764(&qword_1007266B8);
    memcpy((void *)v21, (const void *)v22, *(void *)(*(void *)(v34 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  *(void *)(v21 + 24) = *(void *)(v22 + 24);
  *(unsigned char *)(v21 + 32) = *(unsigned char *)(v22 + 32);
  uint64_t v28 = *(int *)(v23 + 28);
  uint64_t v29 = (void *)(v21 + v28);
  uint64_t v30 = (const void *)(v22 + v28);
  uint64_t v31 = sub_100007764(&qword_100728600);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = sub_100007764(&qword_10072A6E8);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  uint64_t v45 = *(int *)(v23 + 32);
  uint64_t v46 = v21 + v45;
  uint64_t v47 = v22 + v45;
  *(void *)uint64_t v46 = *(void *)v47;
  *(unsigned char *)(v46 + 8) = *(unsigned char *)(v47 + 8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_1002FDB4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002FDB60);
}

uint64_t sub_1002FDB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100007764(&qword_1007266B8);
    long long v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 44);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1002FDC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002FDC34);
}

uint64_t sub_1002FDC34(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 24) = a2;
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_1007266B8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1002FDCE0()
{
  sub_1002F6914(319, (unint64_t *)&unk_10072A758, (void (*)(uint64_t))type metadata accessor for AssessmentAdditionalInfo);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1002FDDBC()
{
  unint64_t result = qword_10072A7A0;
  if (!qword_10072A7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10072A7A0);
  }
  return result;
}

void *sub_1002FDE10(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100729DD8);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v128 = (char *)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  long long v6 = (char *)&v124 - v5;
  uint64_t v7 = type metadata accessor for PersonNameComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v130 = v7;
  uint64_t v131 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v126 = (char *)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v129 = (char *)&v124 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v124 - v13;
  uint64_t v132 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v132 - 8);
  uint64_t v16 = __chkstk_darwin(v132);
  long long v18 = (char *)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v127 = (char *)&v124 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v124 - v22;
  __chkstk_darwin(v21);
  long long v25 = (char *)&v124 - v24;
  defaultLogger()();
  int v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Attempting to guess name components", v28, 2u);
    swift_slowDealloc();
  }

  uint64_t v29 = *(void (**)(char *, uint64_t))(v15 + 8);
  v29(v25, v132);
  long long v137 = &_swiftEmptyDictionarySingleton;
  if (*(void *)(a1 + 16))
  {
    unint64_t v30 = sub_100590548(0x6D614E7473726966, 0xE900000000000065);
    if (v31)
    {
      sub_10003BC28(*(void *)(a1 + 56) + 32 * v30, (uint64_t)&v135);
      if (swift_dynamicCast())
      {
        uint64_t v125 = v29;
        uint64_t v32 = *((void *)&v134[0] + 1);
        if (*(void *)(a1 + 16))
        {
          uint64_t v33 = *(void *)&v134[0];
          unint64_t v34 = sub_100590548(0x656D614E7473616CLL, 0xE800000000000000);
          if (v35)
          {
            sub_10003BC28(*(void *)(a1 + 56) + 32 * v34, (uint64_t)&v135);
            if (swift_dynamicCast())
            {
              Swift::String v36 = (Swift::String)v134[0];
              *(void *)&long long v135 = v33;
              *((void *)&v135 + 1) = v32;
              swift_bridgeObjectRetain();
              v37._uint64_t countAndFlagsBits = 32;
              v37._uint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v37);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              String.append(_:)(v36);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v38 = [objc_allocWithZone((Class)NSPersonNameComponentsFormatter) init];
              NSString v39 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              id v40 = [v38 personNameComponentsFromString:v39];

              if (v40)
              {
                uint64_t v41 = v129;
                static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v42 = v131;
                size_t v43 = v41;
                uint64_t v44 = v130;
                uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v131 + 32);
                v124(v6, v43, v130);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v6, 0, 1, v44);
                int v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v6, 1, v44);
                uint64_t v29 = v125;
                if (v45 != 1)
                {
                  v124(v14, v6, v44);
                  uint64_t v46 = PersonNameComponents.namePrefix.getter();
                  if (v47)
                  {
                    uint64_t v136 = &type metadata for String;
                    *(void *)&long long v135 = v46;
                    *((void *)&v135 + 1) = v47;
                    sub_1000078A8(&v135, v134);
                    uint64_t v48 = v137;
                    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    uint64_t v133 = v48;
                    sub_100562C48(v134, 0xD000000000000010, 0x8000000100648ED0, isUniquelyReferenced_nonNull_native);
                    long long v137 = v133;
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v50 = PersonNameComponents.familyName.getter();
                  if (v51)
                  {
                    uint64_t v136 = &type metadata for String;
                    *(void *)&long long v135 = v50;
                    *((void *)&v135 + 1) = v51;
                    sub_1000078A8(&v135, v134);
                    int v52 = v137;
                    char v53 = swift_isUniquelyReferenced_nonNull_native();
                    uint64_t v133 = v52;
                    sub_100562C48(v134, 0xD000000000000010, 0x8000000100648EB0, v53);
                    long long v137 = v133;
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v54 = PersonNameComponents.givenName.getter();
                  if (v55)
                  {
                    uint64_t v136 = &type metadata for String;
                    *(void *)&long long v135 = v54;
                    *((void *)&v135 + 1) = v55;
                    sub_1000078A8(&v135, v134);
                    uint64_t v56 = v137;
                    char v57 = swift_isUniquelyReferenced_nonNull_native();
                    uint64_t v133 = v56;
                    sub_100562C48(v134, 0x6947646573726170, 0xEF656D614E6E6576, v57);
                    long long v137 = v133;
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v58 = PersonNameComponents.middleName.getter();
                  if (v59)
                  {
                    uint64_t v136 = &type metadata for String;
                    *(void *)&long long v135 = v58;
                    *((void *)&v135 + 1) = v59;
                    sub_1000078A8(&v135, v134);
                    uint64_t v60 = v137;
                    char v61 = swift_isUniquelyReferenced_nonNull_native();
                    uint64_t v133 = v60;
                    sub_100562C48(v134, 0xD000000000000010, 0x8000000100648E90, v61);
                    long long v137 = v133;
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v62 = PersonNameComponents.nameSuffix.getter();
                  if (v63)
                  {
                    uint64_t v136 = &type metadata for String;
                    *(void *)&long long v135 = v62;
                    *((void *)&v135 + 1) = v63;
                    sub_1000078A8(&v135, v134);
                    uint64_t v64 = v137;
                    char v65 = swift_isUniquelyReferenced_nonNull_native();
                    uint64_t v133 = v64;
                    sub_100562C48(v134, 0xD000000000000010, 0x8000000100648E70, v65);
                    long long v137 = v133;
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v66 = PersonNameComponents.nickname.getter();
                  if (v67)
                  {
                    uint64_t v136 = &type metadata for String;
                    *(void *)&long long v135 = v66;
                    *((void *)&v135 + 1) = v67;
                    sub_1000078A8(&v135, v134);
                    uint64_t v68 = v137;
                    char v69 = swift_isUniquelyReferenced_nonNull_native();
                    uint64_t v133 = v68;
                    sub_100562C48(v134, 0x694E646573726170, 0xEE00656D614E6B63, v69);
                    long long v137 = v133;
                    swift_bridgeObjectRelease();
                  }
                  (*(void (**)(char *, uint64_t))(v131 + 8))(v14, v44);
                  if (!*(void *)(a1 + 16)) {
                    goto LABEL_48;
                  }
                  goto LABEL_27;
                }
              }
              else
              {
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v131 + 56))(v6, 1, 1, v130);
                uint64_t v29 = v125;
              }
              sub_10000C6CC((uint64_t)v6, &qword_100729DD8);
              defaultLogger()();
              uint64_t v117 = Logger.logObject.getter();
              os_log_type_t v118 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v117, v118))
              {
                uint64_t v119 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v119 = 0;
                _os_log_impl((void *)&_mh_execute_header, v117, v118, "Could not get nameComponents out of name", v119, 2u);
                swift_slowDealloc();
              }

              v29(v23, v132);
              if (!*(void *)(a1 + 16)) {
                goto LABEL_48;
              }
              goto LABEL_27;
            }
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v29 = v125;
      }
    }
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_48;
  }
LABEL_27:
  unint64_t v70 = sub_100590548(0xD000000000000012, 0x8000000100648D70);
  if ((v71 & 1) == 0) {
    goto LABEL_48;
  }
  sub_10003BC28(*(void *)(a1 + 56) + 32 * v70, (uint64_t)&v135);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_48;
  }
  uint64_t v72 = *((void *)&v134[0] + 1);
  if (!*(void *)(a1 + 16)
    || (uint64_t v73 = *(void *)&v134[0], v74 = sub_100590548(0xD000000000000011, 0x8000000100648D90), (v75 & 1) == 0)
    || (sub_10003BC28(*(void *)(a1 + 56) + 32 * v74, (uint64_t)&v135), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  Swift::String v76 = (Swift::String)v134[0];
  *(void *)&long long v135 = v73;
  *((void *)&v135 + 1) = v72;
  swift_bridgeObjectRetain();
  v77._uint64_t countAndFlagsBits = 32;
  v77._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v78 = [objc_allocWithZone((Class)NSPersonNameComponentsFormatter) init];
  NSString v79 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v80 = [v78 personNameComponentsFromString:v79];

  if (v80)
  {
    uint64_t v81 = v129;
    static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v82 = v131;
    uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v131 + 32);
    uint64_t v84 = (uint64_t)v128;
    uint64_t v85 = v81;
    uint64_t v86 = v130;
    v83(v128, v85, v130);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56))(v84, 0, 1, v86);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v84, 1, v86) != 1)
    {
      uint64_t v87 = v126;
      v83(v126, (char *)v84, v86);
      uint64_t v88 = PersonNameComponents.namePrefix.getter();
      if (v89)
      {
        uint64_t v136 = &type metadata for String;
        *(void *)&long long v135 = v88;
        *((void *)&v135 + 1) = v89;
        sub_1000078A8(&v135, v134);
        uint64_t v90 = v137;
        char v91 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v133 = v90;
        sub_100562C48(v134, 0xD000000000000018, 0x8000000100648E50, v91);
        long long v137 = v133;
        swift_bridgeObjectRelease();
      }
      uint64_t v92 = PersonNameComponents.familyName.getter();
      if (v93)
      {
        uint64_t v136 = &type metadata for String;
        *(void *)&long long v135 = v92;
        *((void *)&v135 + 1) = v93;
        sub_1000078A8(&v135, v134);
        uint64_t v94 = v137;
        char v95 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v133 = v94;
        sub_100562C48(v134, 0xD000000000000018, 0x8000000100648E30, v95);
        long long v137 = v133;
        swift_bridgeObjectRelease();
      }
      uint64_t v96 = PersonNameComponents.givenName.getter();
      if (v97)
      {
        uint64_t v136 = &type metadata for String;
        *(void *)&long long v135 = v96;
        *((void *)&v135 + 1) = v97;
        sub_1000078A8(&v135, v134);
        uint64_t v98 = v137;
        char v99 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v133 = v98;
        sub_100562C48(v134, 0xD000000000000017, 0x8000000100648E10, v99);
        long long v137 = v133;
        swift_bridgeObjectRelease();
      }
      uint64_t v100 = PersonNameComponents.middleName.getter();
      if (v101)
      {
        uint64_t v136 = &type metadata for String;
        *(void *)&long long v135 = v100;
        *((void *)&v135 + 1) = v101;
        sub_1000078A8(&v135, v134);
        uint64_t v102 = v137;
        char v103 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v133 = v102;
        sub_100562C48(v134, 0xD000000000000018, 0x8000000100648DF0, v103);
        long long v137 = v133;
        swift_bridgeObjectRelease();
      }
      uint64_t v104 = PersonNameComponents.nameSuffix.getter();
      if (v105)
      {
        uint64_t v136 = &type metadata for String;
        *(void *)&long long v135 = v104;
        *((void *)&v135 + 1) = v105;
        sub_1000078A8(&v135, v134);
        os_log_type_t v106 = v137;
        char v107 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v133 = v106;
        sub_100562C48(v134, 0xD000000000000018, 0x8000000100648DD0, v107);
        long long v137 = v133;
        swift_bridgeObjectRelease();
      }
      uint64_t v108 = PersonNameComponents.nickname.getter();
      if (v109)
      {
        uint64_t v136 = &type metadata for String;
        *(void *)&long long v135 = v108;
        *((void *)&v135 + 1) = v109;
        sub_1000078A8(&v135, v134);
        uint64_t v110 = v137;
        char v111 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v133 = v110;
        sub_100562C48(v134, 0xD000000000000016, 0x8000000100648DB0, v111);
        long long v137 = v133;
        swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v131 + 8))(v87, v130);
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v84 = (uint64_t)v128;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v131 + 56))(v128, 1, 1, v130);
  }
  sub_10000C6CC(v84, &qword_100729DD8);
  uint64_t v120 = v127;
  defaultLogger()();
  uint64_t v121 = Logger.logObject.getter();
  os_log_type_t v122 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v121, v122))
  {
    uint64_t v123 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v123 = 0;
    _os_log_impl((void *)&_mh_execute_header, v121, v122, "Could not get nameComponents out of doc name", v123, 2u);
    swift_slowDealloc();
  }

  v29(v120, v132);
LABEL_48:
  defaultLogger()();
  os_log_type_t v112 = v137;
  swift_bridgeObjectRetain();
  Swift::String v113 = Logger.logObject.getter();
  os_log_type_t v114 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v113, v114))
  {
    uint64_t v115 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v115 = 134349056;
    *(void *)&long long v135 = v112[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v113, v114, "Guessed %{public}ld name components", v115, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v29(v18, v132);
  swift_beginAccess();
  return v137;
}

uint64_t sub_1002FED0C(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v130 = *(void *)(v2 - 8);
  uint64_t v131 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v120 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v121 = (char *)&v120 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v123 = (char *)&v120 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v124 = (char *)&v120 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v120 - v11;
  uint64_t v13 = type metadata accessor for CharacterSet();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v132 = v13;
  uint64_t v133 = v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v18 = sub_100590548(0x31746565727473, 0xE700000000000000), (v19 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v136);
    int v20 = swift_dynamicCast();
    uint64_t v21 = (uint64_t)v134;
    if (!v20) {
      uint64_t v21 = 0;
    }
    uint64_t v129 = v21;
    if (v20) {
      uint64_t v22 = v135;
    }
    else {
      uint64_t v22 = 0;
    }
  }
  else
  {
    uint64_t v129 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v23 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v24 = sub_100590548(0x32746565727473, 0xE700000000000000), (v25 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v23 + 56) + 32 * v24, (uint64_t)&v136);
    int v26 = swift_dynamicCast();
    if (v26) {
      uint64_t v27 = (uint64_t)v134;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v26) {
      uint64_t v28 = v135;
    }
    else {
      uint64_t v28 = 0;
    }
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  uint64_t v29 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v30 = sub_100590548(2037672291, 0xE400000000000000), (v31 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v29 + 56) + 32 * v30, (uint64_t)&v136);
    int v32 = swift_dynamicCast();
    if (v32) {
      uint64_t v33 = (uint64_t)v134;
    }
    else {
      uint64_t v33 = 0;
    }
    if (v32) {
      unint64_t v34 = v135;
    }
    else {
      unint64_t v34 = 0;
    }
  }
  else
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0;
  }
  uint64_t v35 = *a1;
  uint64_t v36 = *(void *)(*a1 + 16);
  os_log_type_t v122 = v12;
  if (v36 && (unint64_t v37 = sub_100590548(0x6574617473, 0xE500000000000000), (v38 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v35 + 56) + 32 * v37, (uint64_t)&v136);
    int v39 = swift_dynamicCast();
    if (v39) {
      uint64_t v40 = (uint64_t)v134;
    }
    else {
      uint64_t v40 = 0;
    }
    if (v39) {
      uint64_t v41 = v135;
    }
    else {
      uint64_t v41 = 0;
    }
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
  }
  uint64_t v42 = *a1;
  uint64_t v43 = *(void *)(*a1 + 16);
  if (!v43) {
    goto LABEL_42;
  }
  unint64_t v44 = sub_100590548(0x6F436C6174736F70, 0xEA00000000006564);
  if ((v45 & 1) == 0)
  {
    uint64_t v43 = 0;
LABEL_42:
    uint64_t v47 = 0;
    goto LABEL_43;
  }
  sub_10003BC28(*(void *)(v42 + 56) + 32 * v44, (uint64_t)&v136);
  int v46 = swift_dynamicCast();
  uint64_t v43 = (uint64_t)v134;
  if (v46)
  {
    uint64_t v47 = v135;
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v47 = 0;
  }
LABEL_43:
  uint64_t v48 = sub_1002FFA68(v129, v22, v27, v28, v33, v34, v40, v41, v43, v47);
  uint64_t v50 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::Int v136 = v48;
  uint64_t v137 = v50;
  static CharacterSet.whitespacesAndNewlines.getter();
  unint64_t v126 = sub_1000B5358();
  uint64_t v51 = StringProtocol.trimmingCharacters(in:)();
  Swift::Int v53 = v52;
  uint64_t v54 = *(void (**)(char *, uint64_t))(v133 + 8);
  v133 += 8;
  uint64_t v125 = v54;
  v54(v16, v132);
  swift_bridgeObjectRelease();
  uint64_t v55 = *a1;
  if (*(void *)(*a1 + 16))
  {
    unint64_t v56 = sub_100590548(0xD000000000000010, 0x8000000100648EF0);
    if (v57)
    {
      sub_10003BC28(*(void *)(v55 + 56) + 32 * v56, (uint64_t)&v136);
      int v58 = swift_dynamicCast();
      uint64_t v59 = (uint64_t)v134;
      if (!v58) {
        uint64_t v59 = 0;
      }
      uint64_t v129 = v59;
      if (v58) {
        uint64_t v60 = v135;
      }
      else {
        uint64_t v60 = 0;
      }
    }
    else
    {
      uint64_t v129 = 0;
      uint64_t v60 = 0;
    }
  }
  else
  {
    uint64_t v129 = 0;
    uint64_t v60 = 0;
  }
  uint64_t v61 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v62 = sub_100590548(0xD000000000000010, 0x8000000100648F10), (v63 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v61 + 56) + 32 * v62, (uint64_t)&v136);
    int v64 = swift_dynamicCast();
    uint64_t v65 = (uint64_t)v134;
    if (!v64) {
      uint64_t v65 = 0;
    }
    uint64_t v128 = v65;
    if (v64) {
      uint64_t v66 = v135;
    }
    else {
      uint64_t v66 = 0;
    }
  }
  else
  {
    uint64_t v128 = 0;
    uint64_t v66 = 0;
  }
  uint64_t v67 = *a1;
  uint64_t v68 = *(void *)(*a1 + 16);
  Swift::Int v127 = v51;
  if (v68 && (unint64_t v69 = sub_100590548(0x746E656D75636F64, 0xED0000797469632ELL), (v70 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v67 + 56) + 32 * v69, (uint64_t)&v136);
    int v71 = swift_dynamicCast();
    if (v71) {
      uint64_t v72 = (uint64_t)v134;
    }
    else {
      uint64_t v72 = 0;
    }
    if (v71) {
      uint64_t v73 = v135;
    }
    else {
      uint64_t v73 = 0;
    }
  }
  else
  {
    uint64_t v72 = 0;
    uint64_t v73 = 0;
  }
  uint64_t v74 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v75 = sub_100590548(0x746E656D75636F64, 0xEE0065746174732ELL), (v76 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v74 + 56) + 32 * v75, (uint64_t)&v136);
    int v77 = swift_dynamicCast();
    if (v77) {
      uint64_t v78 = (uint64_t)v134;
    }
    else {
      uint64_t v78 = 0;
    }
    if (v77) {
      NSString v79 = v135;
    }
    else {
      NSString v79 = 0;
    }
  }
  else
  {
    uint64_t v78 = 0;
    NSString v79 = 0;
  }
  uint64_t v80 = *a1;
  uint64_t v81 = *(void *)(*a1 + 16);
  if (!v81) {
    goto LABEL_84;
  }
  unint64_t v82 = sub_100590548(0xD000000000000013, 0x8000000100648F30);
  if ((v83 & 1) == 0)
  {
    uint64_t v81 = 0;
LABEL_84:
    uint64_t v85 = 0;
    goto LABEL_85;
  }
  sub_10003BC28(*(void *)(v80 + 56) + 32 * v82, (uint64_t)&v136);
  int v84 = swift_dynamicCast();
  uint64_t v81 = (uint64_t)v134;
  if (v84)
  {
    uint64_t v85 = v135;
  }
  else
  {
    uint64_t v81 = 0;
    uint64_t v85 = 0;
  }
LABEL_85:
  uint64_t v86 = sub_1002FFA68(v129, v60, v128, v66, v72, v73, v78, v79, v81, v85);
  uint64_t v88 = v87;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::Int v136 = v86;
  uint64_t v137 = v88;
  static CharacterSet.whitespacesAndNewlines.getter();
  Swift::Int v89 = StringProtocol.trimmingCharacters(in:)();
  Swift::Int v91 = v90;
  v125(v16, v132);
  swift_bridgeObjectRelease();
  long long v134 = &_swiftEmptySetSingleton;
  Swift::Int v92 = v127;
  if (String.count.getter() >= 1)
  {
    swift_bridgeObjectRetain();
    sub_1005D83B4(&v136, v92, v53);
    swift_bridgeObjectRelease();
  }
  if (String.count.getter() >= 1)
  {
    swift_bridgeObjectRetain();
    sub_1005D83B4(&v136, v89, v91);
    swift_bridgeObjectRelease();
  }
  if (v134[2])
  {
    sub_1002FFEB4((uint64_t)v134);
    uint64_t v93 = swift_bridgeObjectRelease();
    if (qword_10071F508 != -1) {
      uint64_t v93 = swift_once();
    }
    __chkstk_darwin(v93);
    sub_100007764(&qword_10072A860);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();
    if (v138)
    {
      defaultLogger()();
      uint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v94, v95))
      {
        uint64_t v96 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v96 = 0;
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "no geo location available", v96, 2u);
        swift_slowDealloc();
      }

      uint64_t v97 = *(uint64_t (**)(char *, uint64_t))(v130 + 8);
      uint64_t v98 = v97(v123, v131);
    }
    else
    {
      uint64_t v104 = Double.description.getter();
      uint64_t v139 = &type metadata for String;
      Swift::Int v136 = v104;
      uint64_t v137 = v105;
      sub_10055F2A8((uint64_t)&v136, 0x4C73736572646461, 0xEA00000000007461);
      uint64_t v106 = Double.description.getter();
      uint64_t v139 = &type metadata for String;
      Swift::Int v136 = v106;
      uint64_t v137 = v107;
      sub_10055F2A8((uint64_t)&v136, 0x4C73736572646461, 0xEA00000000006E6FLL);
      defaultLogger()();
      uint64_t v108 = Logger.logObject.getter();
      os_log_type_t v109 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v108, v109))
      {
        uint64_t v110 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v110 = 0;
        _os_log_impl((void *)&_mh_execute_header, v108, v109, "got geo location", v110, 2u);
        swift_slowDealloc();
      }

      uint64_t v97 = *(uint64_t (**)(char *, uint64_t))(v130 + 8);
      uint64_t v98 = v97(v124, v131);
    }
    __chkstk_darwin(v98);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();
    if (v138)
    {
      char v111 = v120;
      defaultLogger()();
      os_log_type_t v112 = Logger.logObject.getter();
      os_log_type_t v113 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v112, v113))
      {
        os_log_type_t v114 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v114 = 0;
        uint64_t v115 = "no document geo location available";
LABEL_107:
        _os_log_impl((void *)&_mh_execute_header, v112, v113, v115, v114, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      uint64_t v116 = Double.description.getter();
      uint64_t v139 = &type metadata for String;
      Swift::Int v136 = v116;
      uint64_t v137 = v117;
      sub_10055F2A8((uint64_t)&v136, 0xD000000000000013, 0x8000000100648F50);
      uint64_t v118 = Double.description.getter();
      uint64_t v139 = &type metadata for String;
      Swift::Int v136 = v118;
      uint64_t v137 = v119;
      sub_10055F2A8((uint64_t)&v136, 0xD000000000000013, 0x8000000100648F70);
      char v111 = v121;
      defaultLogger()();
      os_log_type_t v112 = Logger.logObject.getter();
      os_log_type_t v113 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v112, v113))
      {
        os_log_type_t v114 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v114 = 0;
        uint64_t v115 = "got document geo location";
        goto LABEL_107;
      }
    }

    return v97(v111, v131);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v99 = v122;
  defaultLogger()();
  uint64_t v100 = Logger.logObject.getter();
  os_log_type_t v101 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v100, v101))
  {
    uint64_t v102 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v102 = 0;
    _os_log_impl((void *)&_mh_execute_header, v100, v101, "No Address bindings provided for geo location", v102, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v99, v131);
}

uint64_t sub_1002FFA68(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, void *a8, uint64_t a9, void *a10)
{
  uint64_t v48 = a5;
  uint64_t v17 = type metadata accessor for CharacterSet();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  int v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = 0;
  unint64_t v51 = 0xE000000000000000;
  if (a2)
  {
    int v46 = a6;
    uint64_t v47 = a3;
    uint64_t v21 = a8;
    uint64_t v22 = a7;
    v49._uint64_t countAndFlagsBits = a1;
    v49._uint64_t object = a2;
    swift_bridgeObjectRetain();
    static CharacterSet.whitespacesAndNewlines.getter();
    sub_1000B5358();
    uint64_t v23 = StringProtocol.trimmingCharacters(in:)();
    char v25 = v24;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    swift_bridgeObjectRelease();
    if (String.count.getter() >= 1)
    {
      v26._uint64_t countAndFlagsBits = v23;
      v26._uint64_t object = v25;
      String.append(_:)(v26);
    }
    swift_bridgeObjectRelease();
    a7 = v22;
    a8 = v21;
    a6 = v46;
    a3 = v47;
  }
  uint64_t v27 = v17;
  if (a4)
  {
    v49._uint64_t countAndFlagsBits = a3;
    v49._uint64_t object = a4;
    swift_bridgeObjectRetain();
    static CharacterSet.whitespacesAndNewlines.getter();
    sub_1000B5358();
    uint64_t v28 = StringProtocol.trimmingCharacters(in:)();
    unint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    swift_bridgeObjectRelease();
    if (String.count.getter() >= 1)
    {
      v49._uint64_t countAndFlagsBits = 32;
      v49._uint64_t object = (void *)0xE100000000000000;
      v31._uint64_t countAndFlagsBits = v28;
      v31._uint64_t object = v30;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      String.append(_:)(v49);
    }
    swift_bridgeObjectRelease();
  }
  if (a6)
  {
    v49._uint64_t countAndFlagsBits = v48;
    v49._uint64_t object = a6;
    swift_bridgeObjectRetain();
    static CharacterSet.whitespacesAndNewlines.getter();
    sub_1000B5358();
    uint64_t v32 = StringProtocol.trimmingCharacters(in:)();
    unint64_t v34 = v33;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v27);
    swift_bridgeObjectRelease();
    if (String.count.getter() >= 1)
    {
      v49._uint64_t countAndFlagsBits = 8236;
      v49._uint64_t object = (void *)0xE200000000000000;
      v35._uint64_t countAndFlagsBits = v32;
      v35._uint64_t object = v34;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      String.append(_:)(v49);
    }
    swift_bridgeObjectRelease();
  }
  if (a8)
  {
    v49._uint64_t countAndFlagsBits = a7;
    v49._uint64_t object = a8;
    swift_bridgeObjectRetain();
    static CharacterSet.whitespacesAndNewlines.getter();
    sub_1000B5358();
    uint64_t v36 = StringProtocol.trimmingCharacters(in:)();
    char v38 = v37;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v27);
    swift_bridgeObjectRelease();
    if (String.count.getter() >= 1)
    {
      v49._uint64_t countAndFlagsBits = 8236;
      v49._uint64_t object = (void *)0xE200000000000000;
      v39._uint64_t countAndFlagsBits = v36;
      v39._uint64_t object = v38;
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      String.append(_:)(v49);
    }
    swift_bridgeObjectRelease();
  }
  if (a10)
  {
    v49._uint64_t countAndFlagsBits = a9;
    v49._uint64_t object = a10;
    swift_bridgeObjectRetain();
    static CharacterSet.whitespacesAndNewlines.getter();
    sub_1000B5358();
    uint64_t v40 = StringProtocol.trimmingCharacters(in:)();
    uint64_t v42 = v41;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v27);
    swift_bridgeObjectRelease();
    if (String.count.getter() >= 1)
    {
      v49._uint64_t countAndFlagsBits = 32;
      v49._uint64_t object = (void *)0xE100000000000000;
      v43._uint64_t countAndFlagsBits = v40;
      v43._uint64_t object = v42;
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      String.append(_:)(v49);
    }
    swift_bridgeObjectRelease();
  }
  return v50;
}

void sub_1002FFEB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v18[-v11];
  uint64_t v13 = dispatch_group_create();
  sub_1003013B4(a1, v13);
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v14(v10, v6);
  OS_dispatch_group.wait(timeout:)();
  v14(v12, v6);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
  }
  else
  {
    defaultLogger()();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "geocodeAddressString callback not invoked in the specified timeout", v17, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void sub_100300124(unint64_t a1, uint64_t a2, NSObject *a3, NSObject *a4, NSObject *a5)
{
  dispatch_group_t v26 = a3;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10071F508 != -1) {
    uint64_t v11 = swift_once();
  }
  __chkstk_darwin(v11);
  *(&v26 - 2) = a4;
  *(&v26 - 1) = a5;
  sub_100007764(&qword_10072A860);
  OS_dispatch_queue.sync<A>(execute:)();
  if ((v29 & 1) == 0) {
    goto LABEL_6;
  }
  if (a2)
  {
    uint64_t aBlock = 0;
    unint64_t v28 = 0xE000000000000000;
    swift_errorRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    uint64_t aBlock = (void **)0xD000000000000025;
    unint64_t v28 = 0x8000000100648FB0;
    v14._uint64_t countAndFlagsBits = (uint64_t)a4;
    v14._uint64_t object = a5;
    String.append(_:)(v14);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
LABEL_6:
    dispatch_group_leave(v26);
    return;
  }
  if (!a1) {
    goto LABEL_19;
  }
  if (!(a1 >> 62))
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_10;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_18;
  }
LABEL_10:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_13;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v16 = *(id *)(a1 + 32);
LABEL_13:
    uint64_t isEscapingClosureAtFileLocation = (uint64_t)v16;
    swift_bridgeObjectRelease();
    id v18 = [isEscapingClosureAtFileLocation location:v26];
    if (v18)
    {
      uint64_t v19 = v18;
      int v20 = qword_100729DF8;
      uint64_t v21 = (void *)swift_allocObject();
      v21[2] = a4;
      v21[3] = a5;
      v21[4] = v19;
      uint64_t v22 = swift_allocObject();
      uint64_t v23 = sub_1003076A4;
      *(void *)(v22 + 16) = sub_1003076A4;
      *(void *)(v22 + 24) = v21;
      Swift::String v31 = sub_10020AE08;
      uint64_t v32 = v22;
      uint64_t aBlock = _NSConcreteStackBlock;
      unint64_t v28 = 1107296256;
      uint64_t v29 = sub_100032314;
      unint64_t v30 = &unk_1006FCF08;
      unint64_t v24 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      id v25 = v19;
      swift_retain();
      swift_release();
      dispatch_sync(v20, v24);

      _Block_release(v24);
      uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
LABEL_20:
        dispatch_group_leave(v26);
        sub_10003BEDC((uint64_t)v23);
        return;
      }
      __break(1u);
    }

LABEL_19:
    uint64_t v23 = 0;
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t sub_10030052C(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_10071F510 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  [a3 coordinate];
  double v7 = v6;
  double v9 = v8;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = off_100729E00;
  off_100729E00 = (_UNKNOWN *)0x8000000000000000;
  sub_100563B0C(a1, a2, isUniquelyReferenced_nonNull_native, v7, v9);
  off_100729E00 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_100300630(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_100025C28(0, &qword_10072A868);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1003006D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_10071F510 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v6 = off_100729E00;
  if (*((void *)off_100729E00 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_100590548(a1, a2);
    long long v9 = 0uLL;
    if (v8) {
      long long v9 = *(_OWORD *)(v6[7] + 16 * v7);
    }
    long long v13 = v9;
    char v10 = v8 ^ 1;
    swift_bridgeObjectRelease();
    long long v11 = v13;
  }
  else
  {
    long long v11 = 0uLL;
    char v10 = 1;
  }
  *(_OWORD *)a3 = v11;
  *(unsigned char *)(a3 + 16) = v10 & 1;
  return swift_endAccess();
}

unsigned char *sub_1003007CC@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100300838@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_10003BC28((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10030088C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v38 = v8;
  uint64_t v39 = 0;
  uint64_t v40 = v11 & v9;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100300FEC(&v34);
  uint64_t v12 = *((void *)&v34 + 1);
  if (!*((void *)&v34 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100130AE4();
    return swift_release();
  }
  while (1)
  {
    uint64_t v15 = v34;
    sub_1000078A8(&v35, v33);
    uint64_t v16 = *a5;
    unint64_t v18 = sub_100590548(v15, v12);
    uint64_t v19 = *(void *)(v16 + 16);
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (*(void *)(v16 + 24) >= v21)
    {
      if (a4)
      {
        if (v17) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_10016B194();
        if (v22) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      sub_100165DE8(v21, a4 & 1);
      unint64_t v23 = sub_100590548(v15, v12);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_22;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_6:
        uint64_t v13 = 32 * v18;
        sub_10003BC28(*(void *)(*a5 + 56) + v13, (uint64_t)v31);
        sub_10003BC28((uint64_t)v31, (uint64_t)v32);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v31);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v33);
        swift_bridgeObjectRelease();
        Swift::String v14 = (_OWORD *)(*(void *)(*a5 + 56) + v13);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v14);
        sub_1000078A8(v32, v14);
        goto LABEL_7;
      }
    }
    id v25 = (void *)*a5;
    *(void *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    dispatch_group_t v26 = (uint64_t *)(v25[6] + 16 * v18);
    *dispatch_group_t v26 = v15;
    v26[1] = v12;
    sub_1000078A8(v33, (_OWORD *)(v25[7] + 32 * v18));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_21;
    }
    v25[2] = v29;
LABEL_7:
    sub_100300FEC(&v34);
    uint64_t v12 = *((void *)&v34 + 1);
    a4 = 1;
    if (!*((void *)&v34 + 1)) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100300AF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100300FEC(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  sub_1000078A8(v49, v47);
  Swift::String v14 = *(void **)a5;
  unint64_t v16 = sub_100590548(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_10016B194();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    char v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    id v25 = (uint64_t *)(v24[6] + 16 * v16);
    *id v25 = v13;
    v25[1] = v12;
    sub_1000078A8(v47, (_OWORD *)(v24[7] + 32 * v16));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v28;
LABEL_16:
    sub_100300FEC(&v48);
    for (uint64_t i = *((void *)&v48 + 1); *((void *)&v48 + 1); uint64_t i = *((void *)&v48 + 1))
    {
      uint64_t v31 = v48;
      sub_1000078A8(v49, v47);
      uint64_t v32 = *(void **)a5;
      unint64_t v34 = sub_100590548(v31, i);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        sub_100165DE8(v37, 1);
        unint64_t v39 = sub_100590548(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        unint64_t v34 = v39;
      }
      if (v38)
      {
        sub_10003BC28((uint64_t)v47, (uint64_t)v46);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v47);
        swift_bridgeObjectRelease();
        unint64_t v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v34);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v30);
        sub_1000078A8(v46, v30);
      }
      else
      {
        uint64_t v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
        *uint64_t v42 = v31;
        v42[1] = i;
        sub_1000078A8(v47, (_OWORD *)(v41[7] + 32 * v34));
        uint64_t v43 = v41[2];
        BOOL v27 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        void v41[2] = v44;
      }
      sub_100300FEC(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100130AE4();
    return swift_release();
  }
  sub_100165DE8(v19, a4 & 1);
  unint64_t v21 = sub_100590548(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_10003BC28((uint64_t)v47, (uint64_t)v46);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v47);
    swift_bridgeObjectRelease();
    unint64_t v23 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v16);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v23);
    sub_1000078A8(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100300E48()
{
  void (*v14)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  void v23[4];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    uint64_t v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 56) + v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    Swift::String v14 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    _OWORD v23[2] = v12;
    v23[3] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(&v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
  unint64_t v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      BOOL v18 = v0[1];
      uint64_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        uint64_t v5 = (v19 - 1) & v19;
        unint64_t v6 = __clz(__rbit64(v19)) + (v16 << 6);
        int64_t v4 = v16;
        goto LABEL_3;
      }
      char v20 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        uint64_t v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          unint64_t v16 = v20;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          uint64_t v19 = *(void *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            unint64_t v16 = v3 + 3;
            goto LABEL_7;
          }
          char v20 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            uint64_t v19 = *(void *)(v18 + 8 * v20);
            if (v19) {
              goto LABEL_10;
            }
            unint64_t v16 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              uint64_t v19 = *(void *)(v18 + 8 * v16);
              if (v19) {
                goto LABEL_7;
              }
              int64_t v4 = v17 - 1;
              unint64_t v21 = v3 + 6;
              while (v17 != v21)
              {
                uint64_t v19 = *(void *)(v18 + 8 * v21++);
                if (v19)
                {
                  unint64_t v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_100300FEC@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_10003BC28(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_1000BEA14((uint64_t)&v23, (uint64_t)v22, &qword_100726CA8);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_10000C6CC((uint64_t)v21, &qword_10072A858);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_1003011D8@<X0>(void *a1@<X8>)
{
  void (*v17)(void *__return_ptr, void *);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  void v31[6];
  void v32[6];

  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = (uint64_t *)(*(void *)(v3 + 56) + 32 * v8);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = v12[2];
    uint64_t v16 = v12[3];
    v1[3] = v6;
    v1[4] = v7;
    int64_t v17 = (void (*)(void *__return_ptr, void *))v1[5];
    v32[0] = v10;
    v32[1] = v11;
    _OWORD v32[2] = v13;
    v32[3] = v14;
    v32[4] = v15;
    v32[5] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v31, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v19 = v31[0];
    char v20 = v31[1];
    unint64_t v21 = v31[2];
    char v22 = v31[3];
    long long v23 = v31[4];
    char v24 = v31[5];
LABEL_23:
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v21;
    a1[3] = v22;
    a1[4] = v23;
    a1[5] = v24;
    return result;
  }
  id v25 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    uint64_t v26 = (unint64_t)(v1[2] + 64) >> 6;
    if (v25 < v26)
    {
      BOOL v27 = v1[1];
      uint64_t v28 = *(void *)(v27 + 8 * v25);
      if (v28)
      {
LABEL_7:
        uint64_t v7 = (v28 - 1) & v28;
        unint64_t v8 = __clz(__rbit64(v28)) + (v25 << 6);
        int64_t v6 = v25;
        goto LABEL_3;
      }
      uint64_t v29 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v26)
      {
        uint64_t v28 = *(void *)(v27 + 8 * v29);
        if (v28)
        {
LABEL_10:
          id v25 = v29;
          goto LABEL_7;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v26)
        {
          uint64_t v28 = *(void *)(v27 + 8 * (v5 + 3));
          if (v28)
          {
            id v25 = v5 + 3;
            goto LABEL_7;
          }
          uint64_t v29 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v26)
          {
            uint64_t v28 = *(void *)(v27 + 8 * v29);
            if (v28) {
              goto LABEL_10;
            }
            id v25 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v26)
            {
              uint64_t v28 = *(void *)(v27 + 8 * v25);
              if (v28) {
                goto LABEL_7;
              }
              int64_t v6 = v26 - 1;
              unint64_t v30 = v5 + 6;
              while (v26 != v30)
              {
                uint64_t v28 = *(void *)(v27 + 8 * v30++);
                if (v28)
                {
                  id v25 = v30 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v19 = 0;
    char v20 = 0;
    unint64_t v21 = 0;
    char v22 = 0;
    long long v23 = 0;
    char v24 = 0;
    v1[3] = v6;
    v1[4] = 0;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void sub_1003013B4(uint64_t a1, NSObject *a2)
{
  uint64_t v23 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v24 = (unint64_t)(v3 + 63) >> 6;
  char v22 = v27;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  if (v5) {
    goto LABEL_6;
  }
LABEL_7:
  if (!__OFADD__(v6++, 1))
  {
    if (v6 >= v24) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v23 + 8 * v6);
    if (v10)
    {
LABEL_19:
      unint64_t v5 = (v10 - 1) & v10;
      for (unint64_t i = __clz(__rbit64(v10)) + (v6 << 6); ; unint64_t i = v7 | (v6 << 6))
      {
        uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
        uint64_t v14 = *v12;
        uint64_t v13 = v12[1];
        uint64_t v15 = qword_10071F508;
        uint64_t v16 = swift_bridgeObjectRetain();
        if (v15 != -1) {
          uint64_t v16 = swift_once();
        }
        __chkstk_darwin(v16);
        sub_100007764(&qword_10072A860);
        OS_dispatch_queue.sync<A>(execute:)();
        if (v27[0])
        {
          dispatch_group_enter(a2);
          id v17 = [objc_allocWithZone((Class)CLGeocoder) init:v22];
          NSString v18 = String._bridgeToObjectiveC()();
          uint64_t v19 = (void *)swift_allocObject();
          v19[2] = a2;
          v19[3] = v14;
          v19[4] = v13;
          v27[2] = sub_100307658;
          v27[3] = v19;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          v27[0] = sub_100300630;
          v27[1] = &unk_1006FCE90;
          char v20 = _Block_copy(aBlock);
          swift_bridgeObjectRetain();
          unint64_t v21 = a2;
          swift_release();
          [v17 geocodeAddressString:v18 completionHandler:v20];
          _Block_release(v20);
          swift_bridgeObjectRelease();

          if (!v5) {
            goto LABEL_7;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          if (!v5) {
            goto LABEL_7;
          }
        }
LABEL_6:
        unint64_t v7 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
      }
    }
    int64_t v11 = v6 + 1;
    if (v6 + 1 >= v24) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v23 + 8 * v11);
    if (!v10)
    {
      int64_t v11 = v6 + 2;
      if (v6 + 2 >= v24) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v23 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v6 + 3;
        if (v6 + 3 >= v24) {
          goto LABEL_29;
        }
        unint64_t v10 = *(void *)(v23 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v6 + 4;
          if (v6 + 4 < v24)
          {
            unint64_t v10 = *(void *)(v23 + 8 * v11);
            if (v10) {
              goto LABEL_18;
            }
            while (1)
            {
              int64_t v6 = v11 + 1;
              if (__OFADD__(v11, 1)) {
                goto LABEL_31;
              }
              if (v6 >= v24) {
                break;
              }
              unint64_t v10 = *(void *)(v23 + 8 * v6);
              ++v11;
              if (v10) {
                goto LABEL_19;
              }
            }
          }
LABEL_29:
          swift_release();
          return;
        }
      }
    }
LABEL_18:
    int64_t v6 = v11;
    goto LABEL_19;
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t sub_100301724(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPError();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  __chkstk_darwin(v6);
  char v38 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v41 - 8);
  uint64_t v9 = __chkstk_darwin(v41);
  unint64_t v34 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v32 - v12;
  uint64_t v14 = type metadata accessor for String.Encoding();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2
    && (static String.Encoding.utf8.getter(),
        uint64_t v18 = String.data(using:allowLossyConversion:)(),
        unint64_t v20 = v19,
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14),
        v20 >> 60 != 15))
  {
    v32[1] = a1;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1003085AC();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v25 = v18;
    swift_release();
    unint64_t v26 = v43;
    v32[0] = v42;
    uint64_t v27 = v44;
    char v28 = v45;
    unsigned int v33 = v46 & 1;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v42 = v32[0];
    unint64_t v43 = v26;
    uint64_t v44 = v27;
    char v45 = v28;
    char v46 = 2;
    sub_1003073DC();
    uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v31 = v30;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v42 = v29;
    unint64_t v43 = v31;
    static String.Encoding.utf8.getter();
    sub_100307514();
    String.init<A>(bytes:encoding:)();
    sub_10000C5E0(v25, v20);
    sub_10000C5F4(v29, v31);
    return v33;
  }
  else
  {
    defaultLogger()();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "no duaDataAug, using defaults", v23, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v41);
    swift_bridgeObjectRetain();
    return 0;
  }
}

uint64_t sub_100301E18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v96 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v93 = *(void *)(v5 - 8);
  uint64_t v94 = v5;
  __chkstk_darwin(v5);
  Swift::Int v92 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DIPPregeneratedAssessment(0);
  __chkstk_darwin(v11);
  uint64_t v95 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Data.init(base64Encoded:options:)();
  if (v14 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v15 = v14;
  uint64_t v97 = v13;
  uint64_t v16 = Data.init(base64Encoded:options:)();
  if (v17 >> 60 == 15)
  {
    sub_10000C5E0(v97, v15);
LABEL_4:
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.base64DecodingFailed(_:), v7);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_8:
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.internalError(_:), v7);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  uint64_t v87 = a3;
  uint64_t v88 = a1;
  unint64_t v90 = v17;
  uint64_t v91 = v16;
  uint64_t v89 = v8;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  unint64_t v18 = v15;
  uint64_t v19 = JSONDecoder.init()();
  sub_10030864C();
  uint64_t v20 = v97;
  unint64_t v21 = v110;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v21)
  {
    swift_release();
    sub_10000C5E0(v91, v90);
    sub_10000C5E0(v20, v18);
    uint64_t v8 = v89;
    goto LABEL_8;
  }
  unint64_t v110 = v18;
  v109[0] = v98;
  v109[1] = v99;
  v109[2] = v100;
  v109[3] = v101;
  unint64_t v22 = v90;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  v108[0] = v98;
  v108[1] = v99;
  v108[2] = v100;
  v108[3] = v101;
  sub_10027C544(v109, (uint64_t)v102);
  uint64_t v73 = v102[1];
  uint64_t v74 = v102[0];
  uint64_t v71 = v102[3];
  uint64_t v72 = v102[2];
  uint64_t v70 = v102[4];
  uint64_t v85 = v102[5];
  uint64_t v86 = v19;
  uint64_t v83 = v102[7];
  uint64_t v84 = v102[6];
  uint64_t v81 = v102[9];
  uint64_t v82 = v102[8];
  uint64_t v79 = v102[11];
  uint64_t v80 = v102[10];
  uint64_t v77 = v102[13];
  uint64_t v78 = v102[12];
  uint64_t v75 = v103;
  uint64_t v76 = v102[14];
  uint64_t v24 = v104;
  sub_1003086A0((uint64_t)v109);
  sub_10027C544(v108, (uint64_t)v105);
  uint64_t v96 = v24;
  uint64_t v53 = v105[0];
  uint64_t v68 = v105[2];
  uint64_t v69 = v105[1];
  uint64_t v66 = v105[4];
  uint64_t v67 = v105[3];
  uint64_t v64 = v105[6];
  uint64_t v65 = v105[5];
  uint64_t v62 = v105[8];
  uint64_t v63 = v105[7];
  uint64_t v60 = v105[10];
  uint64_t v61 = v105[9];
  uint64_t v58 = v105[12];
  uint64_t v59 = v105[11];
  uint64_t v56 = v105[14];
  uint64_t v57 = v105[13];
  uint64_t v54 = v107;
  uint64_t v55 = v106;
  sub_1003086A0((uint64_t)v108);
  uint64_t v8 = v89;
  uint64_t v25 = (void *)(v88 + *(int *)(v11 + 32));
  if (v103 == *v25 && v104 == v25[1])
  {
    uint64_t v26 = v95;
    sub_1003086F8(v88, v95, type metadata accessor for DIPPregeneratedAssessment);
  }
  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v26 = v95;
    sub_1003086F8(v88, v95, type metadata accessor for DIPPregeneratedAssessment);
    if ((v27 & 1) == 0)
    {
      sub_1001D72D0((uint64_t)v102);
      sub_1001D72D0((uint64_t)v105);
      sub_100302FA0(v26, type metadata accessor for DIPPregeneratedAssessment);
      goto LABEL_22;
    }
  }
  char v28 = (void *)(v26 + *(int *)(v11 + 40));
  if (v106 != *v28 || v107 != v28[1])
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_100302FA0(v26, type metadata accessor for DIPPregeneratedAssessment);
    if (v29) {
      goto LABEL_17;
    }
    sub_1001D72D0((uint64_t)v102);
    sub_1001D72D0((uint64_t)v105);
LABEL_22:
    uint64_t v51 = v91;
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.guidSeedMismatch(_:), v7);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    sub_10000C5E0(v51, v90);
    sub_10000C5E0(v97, v110);
    goto LABEL_8;
  }
  sub_100302FA0(v26, type metadata accessor for DIPPregeneratedAssessment);
LABEL_17:
  unint64_t v30 = v92;
  defaultLogger()();
  unint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    unsigned int v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "using guids from pre-generated assessment", v33, 2u);
    swift_slowDealloc();
  }
  sub_10000C5E0(v97, v110);
  swift_release();
  sub_10000C5E0(v91, v22);

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v30, v94);
  uint64_t v34 = v87;
  uint64_t v35 = v72;
  *(void *)(v87 + 8) = v73;
  *(void *)(v34 + 16) = v35;
  uint64_t v36 = v70;
  *(void *)(v34 + 24) = v71;
  *(void *)(v34 + 32) = v36;
  *(unsigned char *)uint64_t v34 = v74 & 1;
  uint64_t v37 = v84;
  *(void *)(v34 + 40) = v85;
  *(void *)(v34 + 48) = v37;
  uint64_t v38 = v82;
  *(void *)(v34 + 56) = v83;
  *(void *)(v34 + 64) = v38;
  uint64_t v39 = v80;
  *(void *)(v34 + 72) = v81;
  *(void *)(v34 + 80) = v39;
  uint64_t v40 = v78;
  *(void *)(v34 + 88) = v79;
  *(void *)(v34 + 96) = v40;
  uint64_t v41 = v76;
  *(void *)(v34 + 104) = v77;
  *(void *)(v34 + 112) = v41;
  uint64_t v42 = v96;
  *(void *)(v34 + 120) = v75;
  *(void *)(v34 + 128) = v42;
  *(unsigned char *)(v34 + 136) = v53 & 1;
  uint64_t v43 = v68;
  *(void *)(v34 + 144) = v69;
  *(void *)(v34 + 152) = v43;
  uint64_t v44 = v66;
  *(void *)(v34 + 160) = v67;
  *(void *)(v34 + 168) = v44;
  uint64_t v45 = v64;
  *(void *)(v34 + 176) = v65;
  *(void *)(v34 + 184) = v45;
  uint64_t v46 = v62;
  *(void *)(v34 + 192) = v63;
  *(void *)(v34 + 200) = v46;
  uint64_t v47 = v60;
  *(void *)(v34 + 208) = v61;
  *(void *)(v34 + 216) = v47;
  uint64_t v48 = v58;
  *(void *)(v34 + 224) = v59;
  *(void *)(v34 + 232) = v48;
  uint64_t v49 = v56;
  *(void *)(v34 + 240) = v57;
  *(void *)(v34 + 248) = v49;
  uint64_t v50 = v54;
  *(void *)(v34 + 256) = v55;
  *(void *)(v34 + 264) = v50;
  return result;
}

uint64_t sub_1003028A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v4 = sub_100007764(&qword_100723998);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PDF417ParsedData();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v45 - 8);
  uint64_t v12 = __chkstk_darwin(v45);
  uint64_t v40 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v40 - v15;
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v40 - v17;
  defaultLogger()();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Preparing bindings dict from PDF417ParsedData", v21, 2u);
    swift_slowDealloc();
  }

  unint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v18, v45);
  v50[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  sub_100048D6C(v41, (uint64_t)v6, &qword_100723998);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000C6CC((uint64_t)v6, &qword_100723998);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    uint64_t v23 = PDF417ParsedData.getBindings()();
    unint64_t v24 = sub_10051E8DC(v23);
    swift_bridgeObjectRelease();
    uint64_t v25 = v50[0];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v48 = v25;
    sub_100300AF0(v24, (uint64_t)sub_100300838, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v48);
    v50[0] = v48;
    swift_bridgeObjectRelease();
    uint64_t v27 = defaultLogger()();
    __chkstk_darwin(v27);
    *(&v40 - 2) = (char *)v50;
    Logger.sensitive(_:)();
    v22(v16, v45);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  sub_1002E93D0(v50, v42, v43);
  uint64_t v28 = v44;
  if (!v44) {
    goto LABEL_12;
  }
  swift_retain();
  OS_dispatch_group.wait()();
  char v29 = *(void **)(v28 + 112);
  if (!v29 || v29[2] != 2)
  {
    swift_release();
LABEL_12:
    unsigned int v33 = v40;
    defaultLogger()();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "No GPS location available for bindings", v36, 2u);
      swift_slowDealloc();
    }

    v22(v33, v45);
    goto LABEL_15;
  }
  uint64_t v49 = &type metadata for Double;
  *(void *)&long long v48 = v29[4];
  sub_1000078A8(&v48, v47);
  swift_bridgeObjectRetain();
  char v30 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v46 = v50[0];
  v50[0] = 0x8000000000000000;
  sub_100562C48(v47, 0xD000000000000018, 0x8000000100648CF0, v30);
  v50[0] = v46;
  swift_bridgeObjectRelease();
  uint64_t v49 = &type metadata for Double;
  if (v29[2] >= 2uLL)
  {
    uint64_t v31 = v29[5];
    swift_bridgeObjectRelease();
    *(void *)&long long v48 = v31;
    sub_1000078A8(&v48, v47);
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v46 = v50[0];
    v50[0] = 0x8000000000000000;
    sub_100562C48(v47, 0xD000000000000019, 0x8000000100648D10, v32);
    v50[0] = v46;
    swift_release();
    swift_bridgeObjectRelease();
LABEL_15:
    v37._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v37._uint64_t object = (void *)0x8000000100648CD0;
    v38._uint64_t countAndFlagsBits = 0x6133333630313834;
    v38._uint64_t object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v38, v37);
    return v50[0];
  }
  __break(1u);
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_100302E74(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000C494;
  return sub_1002E8558(a1);
}

uint64_t sub_100302F10()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1001D8C18;
  return sub_1002E870C();
}

uint64_t sub_100302FA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100303000(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v9 - 8);
  sub_1000BEA14(a1, (uint64_t)&v41, &qword_10072A840);
  if (*((void *)&v42 + 1) >> 60 == 15) {
    return v6;
  }
  v45[0] = v41;
  v45[1] = v42;
  void v45[2] = v43;
  long long v46 = v44;
  sub_1000BEA14((uint64_t)v45, (uint64_t)v47, &qword_100728698);
  sub_1000BEA14((uint64_t)v47, (uint64_t)v48, &qword_100728698);
  if (v48[1] >> 60 == 15) {
    return 0;
  }
  v29[1] = v8;
  int v31 = a2 & 1;
  sub_100307430(a1, (void (*)(void))sub_1000338D4, (void (*)(uint64_t, unint64_t))sub_10002CEB0);
  sub_100294910((uint64_t)v47);
  Swift::String v10 = Data.base64EncodedString(options:)(0);
  uint64_t countAndFlagsBits = v10._countAndFlagsBits;
  sub_1002949F8((uint64_t)v47);
  if (byte_1007600A1) {
    double v11 = *((double *)&v46 + 1);
  }
  else {
    double v11 = -1.0;
  }
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100610730;
  *(void *)(v12 + 56) = &type metadata for Double;
  *(void *)(v12 + 64) = &protocol witness table for Double;
  *(double *)(v12 + 32) = v11;
  uint64_t v13 = String.init(format:_:)();
  uint64_t v15 = v14;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v33 = JSONEncoder.init()();
  char v32 = v29;
  double v40 = 0.0;
  uint64_t v16 = __chkstk_darwin(v33);
  v29[-2] = &v40;
  if ((v15 & 0x1000000000000000) != 0 || !(v15 & 0x2000000000000000 | v13 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v29[2] = v29;
    __chkstk_darwin(v16);
    v29[-2] = sub_10030736C;
    v29[-1] = v17;
    if ((v15 & 0x2000000000000000) != 0)
    {
      uint64_t v34 = v13;
      uint64_t object = v15 & 0xFFFFFFFFFFFFFFLL;
      if v13 <= 0x20u && ((0x100003E01uLL >> v13))
      {
        BOOL v23 = 0;
      }
      else
      {
        unint64_t v22 = (unsigned char *)_swift_stdlib_strtod_clocale();
        if (v22) {
          BOOL v23 = *v22 == 0;
        }
        else {
          BOOL v23 = 0;
        }
      }
      char v20 = v31;
      uint64_t v21 = countAndFlagsBits;
      char v39 = v23;
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    if ((v13 & 0x1000000000000000) != 0)
    {
      uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v19 = v13 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v18 = _StringObject.sharedUTF8.getter();
    }
    char v39 = sub_100017C00(v18, v19, (void (*)(uint64_t *__return_ptr))sub_100130934) & 1;
    swift_bridgeObjectRelease();
  }
  char v20 = v31;
  uint64_t v21 = countAndFlagsBits;
LABEL_20:
  double v24 = v40;
  if (!v39) {
    double v24 = -1.0;
  }
  uint64_t v34 = v21;
  uint64_t object = (uint64_t)v10._object;
  double v36 = v24;
  char v37 = v20;
  char v38 = a3;
  sub_1003073DC();
  uint64_t v26 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v28 = v27;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v34 = v26;
  uint64_t object = v28;
  static String.Encoding.utf8.getter();
  sub_100307514();
  uint64_t v6 = String.init<A>(bytes:encoding:)();
  sub_100307430(a1, (void (*)(void))sub_10000C5E0, (void (*)(uint64_t, unint64_t))sub_10000C5F4);
  sub_10000C5F4(v26, v28);
  return v6;
}

uint64_t sub_10030362C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = v14;
  uint64_t v114 = a8;
  uint64_t v115 = a7;
  uint64_t v116 = a6;
  uint64_t v113 = a5;
  uint64_t v112 = a2;
  uint64_t v111 = a1;
  uint64_t v16 = type metadata accessor for DIPError.Code();
  uint64_t v130 = *(void *)(v16 - 8);
  uint64_t v131 = v16;
  __chkstk_darwin(v16);
  uint64_t v132 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v118 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for DIPPregeneratedAssessment(0);
  __chkstk_darwin(v109);
  uint64_t v117 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100007764(&qword_10072A7D8);
  __chkstk_darwin(v20 - 8);
  uint64_t v122 = (uint64_t)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_100007764(&qword_10072A7F8);
  uint64_t v123 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  unint64_t v126 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100007764(&qword_10072A7D0);
  __chkstk_darwin(v23 - 8);
  v125._uint64_t object = (char *)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125._uint64_t countAndFlagsBits = sub_100007764(&qword_10072A6E8);
  uint64_t v124 = *(void *)(v125._countAndFlagsBits - 8);
  __chkstk_darwin(v125._countAndFlagsBits);
  uint64_t v26 = (char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v27 = Data.base64EncodedString(options:)(0);
  uint64_t countAndFlagsBits = v27._countAndFlagsBits;
  uint64_t object = v27._object;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v28 = 49;
  if (*(unsigned char *)a10) {
    uint64_t v28 = 50;
  }
  uint64_t v29 = *(void *)(a10 + 72);
  uint64_t v30 = *(void *)(a10 + 80);
  uint64_t v31 = *(void *)(a10 + 88);
  uint64_t v32 = *(void *)(a10 + 96);
  uint64_t v33 = *(void *)(a10 + 104);
  uint64_t v34 = *(void *)(a10 + 112);
  uint64_t v133 = v28;
  unint64_t v134 = 0xE100000000000000;
  uint64_t v135 = v29;
  uint64_t v136 = v30;
  uint64_t v137 = v31;
  uint64_t v138 = v32;
  uint64_t v139 = v33;
  uint64_t v140 = v34;
  unint64_t v35 = sub_100307264();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v127 = v35;
  uint64_t v36 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v129 = v15;
  if (v15)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v38 = 0;
LABEL_17:
    uint64_t v73 = v131;
    uint64_t v74 = *(void (**)(char *, void, uint64_t))(v130 + 104);
    uint64_t v75 = v132;
    v74(v132, enum case for DIPError.Code.jsonEncodingFailed(_:), v131);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    if (v38) {
      swift_bridgeObjectRelease();
    }
    if (!v129) {
      swift_bridgeObjectRelease();
    }
    v74(v75, enum case for DIPError.Code.internalError(_:), v73);
    goto LABEL_22;
  }
  uint64_t v39 = v36;
  unint64_t v40 = v37;
  uint64_t v106 = v26;
  uint64_t v107 = a10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v41 = Data.base64EncodedString(options:)(0);
  uint64_t v105 = v41._countAndFlagsBits;
  uint64_t v128 = v41._object;
  sub_10000C5F4(v39, v40);
  uint64_t v42 = 49;
  if (*(unsigned char *)a11) {
    uint64_t v42 = 50;
  }
  uint64_t v43 = *(void *)(a11 + 72);
  uint64_t v44 = *(void *)(a11 + 80);
  uint64_t v45 = *(void *)(a11 + 88);
  uint64_t v46 = *(void *)(a11 + 96);
  uint64_t v47 = *(void *)(a11 + 104);
  uint64_t v48 = *(void *)(a11 + 112);
  uint64_t v133 = v42;
  unint64_t v134 = 0xE100000000000000;
  uint64_t v135 = v43;
  uint64_t v136 = v44;
  uint64_t v137 = v45;
  uint64_t v138 = v46;
  uint64_t v139 = v47;
  uint64_t v140 = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v49 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v127 = 0;
  uint64_t v50 = v49;
  unint64_t v52 = v51;
  uint64_t v104 = a11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v53 = Data.base64EncodedString(options:)(0);
  sub_10000C5F4(v50, v52);
  uint64_t v54 = v125._object;
  sub_100048D6C(a13, (uint64_t)v125._object, &qword_10072A7D0);
  int v55 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v124 + 48))(v54, 1, v125._countAndFlagsBits);
  uint64_t v108 = v53._object;
  if (v55 == 1)
  {
    sub_10000C6CC((uint64_t)v54, &qword_10072A7D0);
    v125._uint64_t countAndFlagsBits = 0;
    v125._uint64_t object = 0;
    uint64_t v56 = v126;
  }
  else
  {
    uint64_t v57 = (uint64_t)v106;
    sub_1000BEA14((uint64_t)v54, (uint64_t)v106, &qword_10072A6E8);
    sub_1003072D4();
    unint64_t v58 = v127;
    uint64_t v59 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v127 = v58;
    uint64_t v56 = v126;
    if (v58)
    {
      sub_10000C6CC(v57, &qword_10072A6E8);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_16:
      int v38 = 1;
      goto LABEL_17;
    }
    uint64_t v61 = v59;
    unint64_t v62 = v60;
    Swift::String v125 = Data.base64EncodedString(options:)(0);
    sub_10000C5F4(v61, v62);
    sub_10000C6CC(v57, &qword_10072A6E8);
  }
  unint64_t v126 = (char *)v53._countAndFlagsBits;
  uint64_t v63 = v122;
  sub_100048D6C(a14, v122, &qword_10072A7D8);
  uint64_t v64 = v123;
  uint64_t v65 = v121;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v63, 1, v121) == 1)
  {
    swift_release();
    sub_10000C6CC(v63, &qword_10072A7D8);
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = (int *)v109;
    uint64_t v69 = v107;
    goto LABEL_24;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v56, v63, v65);
  sub_1000B6120(&qword_10072A828, &qword_10072A7F8);
  unint64_t v70 = v127;
  uint64_t v71 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v127 = v70;
  uint64_t v69 = v107;
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v56, v65);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v77 = v71;
  unint64_t v78 = v72;
  Swift::String v79 = Data.base64EncodedString(options:)(0);
  uint64_t v80 = v64;
  uint64_t v66 = v79._countAndFlagsBits;
  uint64_t v67 = v79._object;
  swift_release();
  sub_10000C5F4(v77, v78);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v56, v65);
  uint64_t v68 = (int *)v109;
LABEL_24:
  uint64_t v81 = v117;
  uint64_t v82 = v112;
  swift_bridgeObjectRetain();
  Date.init()();
  long long v142 = *(_OWORD *)(v69 + 120);
  long long v83 = v142;
  *uint64_t v81 = v111;
  v81[1] = v82;
  uint64_t v84 = (void *)((char *)v81 + v68[6]);
  uint64_t v85 = (uint64_t)object;
  *uint64_t v84 = countAndFlagsBits;
  v84[1] = v85;
  uint64_t v86 = (void *)((char *)v81 + v68[7]);
  uint64_t v87 = v116;
  *uint64_t v86 = v113;
  v86[1] = v87;
  *(_OWORD *)((char *)v81 + v68[8]) = v83;
  uint64_t v88 = (void *)((char *)v81 + v68[9]);
  uint64_t v89 = (uint64_t)v128;
  uint64_t *v88 = v105;
  v88[1] = v89;
  uint64_t v90 = v104;
  *(_OWORD *)((char *)v81 + v68[10]) = *(_OWORD *)(v104 + 120);
  long long v91 = *(_OWORD *)(v90 + 120);
  Swift::Int v92 = (void *)((char *)v81 + v68[11]);
  uint64_t v93 = v108;
  void *v92 = v126;
  v92[1] = v93;
  uint64_t v94 = (void *)((char *)v81 + v68[12]);
  *uint64_t v94 = v114;
  v94[1] = a9;
  *(void *)((char *)v81 + v68[13]) = v115;
  long long v141 = v91;
  *(void *)((char *)v81 + v68[14]) = a12;
  uint64_t v95 = (void *)((char *)v81 + v68[15]);
  uint64_t v96 = v125._object;
  *uint64_t v95 = v125._countAndFlagsBits;
  v95[1] = (uint64_t)v96;
  uint64_t v97 = (void *)((char *)v81 + v68[16]);
  *uint64_t v97 = v66;
  v97[1] = (uint64_t)v67;
  swift_bridgeObjectRetain();
  sub_1001061B8((uint64_t)&v142);
  sub_1001061B8((uint64_t)&v141);
  uint64_t v98 = qword_10071F5D0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v99 = v127;
  if (v98 != -1) {
    swift_once();
  }
  long long v100 = v118;
  uint64_t v101 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v101);
  OS_dispatch_queue.sync<A>(flags:execute:)();
  uint64_t v103 = v131;
  uint64_t v102 = v132;
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v119 + 8))(v100, v120);
    sub_100302FA0((uint64_t)v81, type metadata accessor for DIPPregeneratedAssessment);
    (*(void (**)(char *, void, uint64_t))(v130 + 104))(v102, enum case for DIPError.Code.internalError(_:), v103);
LABEL_22:
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  (*(void (**)(char *, uint64_t))(v119 + 8))(v100, v120);
  return sub_100302FA0((uint64_t)v81, type metadata accessor for DIPPregeneratedAssessment);
}

uint64_t sub_10030437C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v7 + 397) = a7;
  *(void *)(v7 + 928) = a6;
  *(void *)(v7 + 920) = a5;
  *(void *)(v7 + 912) = a4;
  *(void *)(v7 + 904) = a3;
  *(void *)(v7 + 896) = a2;
  *(void *)(v7 + 888) = a1;
  uint64_t v8 = type metadata accessor for DIPError.Code();
  *(void *)(v7 + 936) = v8;
  *(void *)(v7 + 944) = *(void *)(v8 - 8);
  *(void *)(v7 + 952) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  *(void *)(v7 + 960) = v9;
  *(void *)(v7 + 968) = *(void *)(v9 - 8);
  *(void *)(v7 + 976) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  *(void *)(v7 + 984) = v10;
  *(void *)(v7 + 992) = *(void *)(v10 - 8);
  *(void *)(v7 + 1000) = swift_task_alloc();
  *(void *)(v7 + 1008) = swift_task_alloc();
  sub_100007764(&qword_10072A7D0);
  *(void *)(v7 + 1016) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for String.Encoding();
  *(void *)(v7 + 1024) = v11;
  *(void *)(v7 + 1032) = *(void *)(v11 - 8);
  *(void *)(v7 + 1040) = swift_task_alloc();
  sub_100007764(&qword_10072A7D8);
  *(void *)(v7 + 1048) = swift_task_alloc();
  *(void *)(v7 + 1056) = swift_task_alloc();
  *(void *)(v7 + 1064) = swift_task_alloc();
  uint64_t v12 = sub_100007764(&qword_10072A6E8);
  *(void *)(v7 + 1072) = v12;
  *(void *)(v7 + 1080) = *(void *)(v12 - 8);
  *(void *)(v7 + 1088) = swift_task_alloc();
  *(void *)(v7 + 1096) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for UUID();
  *(void *)(v7 + 1104) = v13;
  *(void *)(v7 + 1112) = *(void *)(v13 - 8);
  *(void *)(v7 + 1120) = swift_task_alloc();
  sub_100007764(&qword_100727600);
  *(void *)(v7 + 1128) = swift_task_alloc();
  *(void *)(v7 + 1136) = swift_task_alloc();
  *(void *)(v7 + 1144) = type metadata accessor for AugmentedProfile(0);
  *(void *)(v7 + 1152) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Logger();
  *(void *)(v7 + 1160) = v14;
  *(void *)(v7 + 1168) = *(void *)(v14 - 8);
  *(void *)(v7 + 1176) = swift_task_alloc();
  *(void *)(v7 + 1184) = swift_task_alloc();
  return _swift_task_switch(sub_10030479C, 0, 0);
}

uint64_t sub_10030479C()
{
  uint64_t v34 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v32 = *(void *)(v0 + 1184);
    uint64_t v3 = *(void *)(v0 + 1168);
    uint64_t v31 = *(void *)(v0 + 1160);
    unint64_t v4 = *(void *)(v0 + 896);
    uint64_t v5 = *(void *)(v0 + 888);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 880) = sub_100110D58(v5, v4, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Pre-generating assessment for workflow ID %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(v32, v31);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 1184);
    uint64_t v9 = *(void *)(v0 + 1168);
    uint64_t v10 = *(void *)(v0 + 1160);
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v7(v8, v10);
  }
  *(void *)(v0 + 1192) = v7;
  sub_1001FFFF4(*(void *)(v0 + 912), *(NSObject **)(v0 + 1152));
  uint64_t v11 = (void *)(v0 + 512);
  uint64_t v12 = (uint64_t *)(v0 + 768);
  uint64_t v13 = *(void *)(v0 + 1152);
  uint64_t v14 = *(void *)(v0 + 1136);
  sub_10020778C(v13);
  sub_100048D6C(v13, v14, &qword_100727600);
  uint64_t v15 = sub_100007764(&qword_100726860);
  *(void *)(v0 + 1200) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v0 + 1208) = v16;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  *(void *)(v0 + 1216) = v17;
  *(void *)(v0 + 1224) = (v16 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  int v18 = v17(v14, 1, v15);
  uint64_t v19 = *(void *)(v0 + 1136);
  if (v18 == 1)
  {
    sub_10000C6CC(*(void *)(v0 + 1136), &qword_100727600);
    char v20 = 0;
  }
  else
  {
    JWSSignedJSON.payload.getter();
    uint64_t v21 = *(void *)(v0 + 400);
    uint64_t v22 = *(void *)(v0 + 408);
    uint64_t v23 = v15;
    char v20 = *(unsigned char *)(v0 + 507);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v23);
    uint64_t v24 = v21;
    uint64_t v11 = (void *)(v0 + 512);
    uint64_t v25 = v22;
    uint64_t v12 = (uint64_t *)(v0 + 768);
    sub_1001D8D24(v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v26 = *(void *)(v0 + 928);
  uint64_t v27 = *(void *)(v0 + 920);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v27;
  *(void *)(v28 + 24) = v26;
  *(void *)(v0 + 792) = type metadata accessor for DeviceInformationProvider();
  *(void *)(v0 + 800) = &protocol witness table for DeviceInformationProvider;
  sub_10002C2D8(v12);
  swift_bridgeObjectRetain();
  DeviceInformationProvider.init()();
  sub_10027E55C(v12, v20, (uint64_t)&unk_10072A7E8, v28, v11);
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 1232) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_100304D24;
  return sub_10027C7E8(v0 + 152);
}

uint64_t sub_100304D24()
{
  *(void *)(*(void *)v1 + 1240) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100306BC8;
  }
  else {
    os_log_type_t v2 = sub_100304E38;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100304E38()
{
  uint64_t v1 = v0[35];
  v0[156] = v0[34];
  v0[157] = v1;
  swift_bridgeObjectRetain();
  os_log_type_t v2 = (void *)swift_task_alloc();
  v0[158] = v2;
  *os_log_type_t v2 = v0;
  v2[1] = sub_100304EF0;
  return sub_10027D02C((uint64_t)(v0 + 2));
}

uint64_t sub_100304EF0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1001D72D0(v2 + 152);
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100306D4C;
  }
  else
  {
    uint64_t v3 = sub_100305018;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100305018()
{
  uint64_t v181 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t)(v0 + 2);
  uint64_t v3 = (uint64_t)(v0 + 19);
  uint64_t v4 = (uint64_t)(v0 + 64);
  uint64_t v5 = v0[17];
  uint64_t v6 = v1[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = Data.init(base64Encoded:options:)();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v9 >> 60 == 15)
  {
    uint64_t v10 = v1[144];
    uint64_t v11 = v1[119];
    uint64_t v12 = v1[118];
    uint64_t v13 = v1[117];
    swift_bridgeObjectRelease();
    sub_1001D72D0(v2);
    sub_1001D72D0(v3);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v11, enum case for DIPError.Code.internalError(_:), v13);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100306FB8(v4);
LABEL_14:
    sub_100302FA0(v10, type metadata accessor for AugmentedProfile);
    goto LABEL_15;
  }
  uint64_t v173 = v4;
  uint64_t v174 = v7;
  if (qword_10071F4D0 != -1) {
    swift_once();
  }
  uint64_t v14 = v1[159];
  unint64_t v15 = v1[157];
  uint64_t v16 = v1[156];
  swift_retain();
  uint64_t v17 = sub_100208C28(v16, v15);
  if (v14)
  {
    sub_100302FA0(v1[144], type metadata accessor for AugmentedProfile);
    swift_release();
    sub_100306FB8(v173);
    swift_bridgeObjectRelease();
    sub_1001D72D0(v2);
    sub_1001D72D0(v3);
    sub_10000C5E0(v7, v9);
    swift_bridgeObjectRelease();
LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = (uint64_t (*)(void))v1[1];
    goto LABEL_16;
  }
  uint64_t v19 = v17;
  unint64_t v20 = v18;
  uint64_t v171 = v1;
  swift_release();
  if (v20 >> 60 == 15)
  {
    uint64_t v10 = v1[144];
    uint64_t v21 = v1[119];
    uint64_t v22 = v1[118];
    uint64_t v23 = v1[117];
    swift_bridgeObjectRelease();
    sub_1001D72D0(v2);
    sub_1001D72D0(v3);
    swift_bridgeObjectRelease();
    uint64_t v24 = v23;
    uint64_t v1 = v171;
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for DIPError.Code.internalError(_:), v24);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100306FB8(v173);
LABEL_13:
    sub_10000C5E0(v174, v9);
    goto LABEL_14;
  }
  unint64_t v169 = v20;
  uint64_t v170 = v19;
  uint64_t v10 = v1[144];
  if (!*(void *)(v10 + *(int *)(v1[143] + 24) + 8))
  {
LABEL_12:
    uint64_t v28 = v1[119];
    uint64_t v29 = v1[118];
    uint64_t v30 = v1[117];
    swift_bridgeObjectRelease();
    sub_1001D72D0(v2);
    sub_1001D72D0(v3);
    swift_bridgeObjectRelease();
    uint64_t v31 = v30;
    uint64_t v1 = v171;
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v28, enum case for DIPError.Code.internalError(_:), v31);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1001EDBD8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_100306FB8(v173);
    sub_10000C5E0(v170, v20);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = Data.init(base64Encoded:options:)();
  unint64_t v27 = v26;
  swift_bridgeObjectRelease();
  if (v27 >> 60 == 15)
  {
    uint64_t v10 = v1[144];
    goto LABEL_12;
  }
  uint64_t v162 = v25;
  unint64_t v163 = v27;
  uint64_t v34 = v1 + 105;
  int v35 = *((unsigned __int8 *)v171 + 397);
  UUID.init()();
  uint64_t v161 = UUID.uuidString.getter();
  uint64_t v168 = v36;
  if (v35 == 1)
  {
    unint64_t v37 = (void *)sub_100025C28(0, &qword_100726CC8);
    v38.super.super.Class isa = NSNumber.init(integerLiteral:)(2).super.super.isa;
  }
  else
  {
    unint64_t v37 = &type metadata for Int;
    v38.super.super.Class isa = (Class)1;
  }
  v171[104] = v37;
  v171[101] = v38.super.super.isa;
  sub_1000078A8(v171 + 101, v34);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v180[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  unint64_t v40 = v171;
  sub_100562C48(v171 + 105, 0xD000000000000012, 0x8000000100648A60, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v41 = UUID.uuidString.getter();
  uint64_t v43 = v42;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  JSONEncoder.init()();
  v171[90] = v41;
  uint64_t v164 = v43;
  v171[91] = v43;
  v171[92] = v161;
  v171[93] = v168;
  v171[94] = v5;
  v171[95] = v6;
  sub_100307024();
  uint64_t v44 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v148 = v41;
  uint64_t v45 = v171[137];
  uint64_t v150 = v171[133];
  uint64_t v147 = (unsigned __int8 *)v171 + 397;
  int v154 = *((unsigned __int8 *)v171 + 397);
  uint64_t v46 = v44;
  unint64_t v48 = v47;
  swift_release();
  sub_100007764(&qword_100724098);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_100610730;
  *(void *)(v49 + 32) = v46;
  *(void *)(v49 + 40) = v48;
  uint64_t v159 = (void *)v49;
  uint64_t v50 = sub_100007764(&qword_100728600);
  uint64_t v143 = *(void *)(v50 - 8);
  uint64_t v145 = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v143 + 56))(v45, 1, 1);
  uint64_t v51 = sub_100007764(&qword_10072A7F8);
  uint64_t v52 = *(void *)(v51 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v150, 1, 1, v51);
  uint64_t v157 = v46;
  unint64_t v158 = v48;
  if (v154 == 1)
  {
    uint64_t v137 = v52;
    Swift::String v53 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v171[152];
    uint64_t v54 = v171[150];
    uint64_t v55 = v171[141];
    sub_100048D6C(v171[144], v55, &qword_100727600);
    uint64_t v139 = v51;
    if (v53(v55, 1, v54) == 1)
    {
      uint64_t v56 = v171[141];
      sub_10002CEB0(v157, v48);
      sub_10000C6CC(v56, &qword_100727600);
      uint64_t v57 = 0;
      unint64_t v58 = 0;
    }
    else
    {
      uint64_t v132 = v171[150];
      uint64_t v134 = v171[151];
      uint64_t v70 = v171[141];
      sub_10002CEB0(v157, v48);
      uint64_t v71 = v70;
      JWSSignedJSON.payload.getter();
      uint64_t v72 = v171[36];
      uint64_t v73 = v171[42];
      uint64_t v152 = v171[37];
      uint64_t v131 = (void *)v171[43];
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v71, v132);
      sub_1002090C4(v72, v152);
      uint64_t v133 = v72;
      uint64_t v74 = v72;
      unint64_t v58 = v131;
      uint64_t v57 = v73;
      sub_1001D8D24(v74, v152);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v152)
      {
        swift_bridgeObjectRetain();
        sub_1001D8D24(v133, v152);
      }
      else
      {
        uint64_t v57 = 0;
        unint64_t v58 = 0;
      }
      unint64_t v40 = v171;
    }
    sub_1002EF964(v40[136], v40[132], v57, v58, v148, v164, v40[156], v40[157]);
    uint64_t v92 = v40[137];
    uint64_t v156 = v40[136];
    uint64_t v93 = v40[133];
    uint64_t v178 = v40[132];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D9214(v156, v92, &qword_10072A6E8);
    sub_1001D9214(v178, v93, &qword_10072A7D8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v92, 1, v145))
    {
      EncryptedDataContainer.data.getter();
      if (v94)
      {
        uint64_t v95 = v40[130];
        uint64_t v96 = v40[129];
        uint64_t v97 = v40;
        uint64_t v98 = v40[128];
        static String.Encoding.utf8.getter();
        uint64_t v99 = String.data(using:allowLossyConversion:)();
        unint64_t v101 = v100;
        swift_bridgeObjectRelease();
        uint64_t v102 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
        v102(v95, v98);
        if (v101 >> 60 == 15)
        {
          unint64_t v40 = v97;
        }
        else
        {
          uint64_t v166 = v99;
          uint64_t v59 = (uint64_t)v159;
          if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v137 + 48))(v97[133], 1, v139))
          {
            unint64_t v40 = v97;
            sub_10000C5E0(v99, v101);
            goto LABEL_27;
          }
          EncryptedDataContainer.data.getter();
          if (v117)
          {
            uint64_t v118 = v171[130];
            uint64_t v119 = v171[128];
            static String.Encoding.utf8.getter();
            uint64_t v120 = String.data(using:allowLossyConversion:)();
            unint64_t v122 = v121;
            swift_bridgeObjectRelease();
            v102(v118, v119);
            if (v122 >> 60 != 15)
            {
              sub_10002CEB0(v166, v101);
              unint64_t v124 = v159[2];
              unint64_t v123 = v159[3];
              unint64_t v125 = v124 + 1;
              if (v124 >= v123 >> 1) {
                uint64_t v159 = sub_10010FE64((void *)(v123 > 1), v124 + 1, 1, v159);
              }
              v159[2] = v125;
              unint64_t v126 = &v159[2 * v124];
              v126[4] = v166;
              v126[5] = v101;
              sub_10002CEB0(v120, v122);
              unint64_t v127 = v159[3];
              int64_t v128 = v124 + 2;
              if (v128 > (uint64_t)(v127 >> 1)) {
                uint64_t v159 = sub_10010FE64((void *)(v127 > 1), v128, 1, v159);
              }
              uint64_t v59 = (uint64_t)v159;
              v159[2] = v128;
              uint64_t v129 = &v159[2 * v125];
              v129[4] = v120;
              v129[5] = v122;
              sub_10000C5E0(v166, v101);
              sub_10000C5E0(v120, v122);
              unint64_t v40 = v171;
              goto LABEL_27;
            }
          }
          sub_10000C5E0(v166, v101);
          unint64_t v40 = v171;
        }
      }
    }
  }
  else
  {
    sub_10002CEB0(v46, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v59 = (uint64_t)v159;
LABEL_27:
  uint64_t v172 = (long long *)(v40 + 82);
  if (qword_10071F580 != -1) {
    swift_once();
  }
  uint64_t v60 = v40[112];
  uint64_t v61 = v40[111];
  id v175 = [self deviceLockState];
  swift_retain();
  sub_1000338D4(v162, v163);
  swift_bridgeObjectRetain();
  sub_100200C18(v174, v9, v162, v163, (uint64_t)&_swiftEmptyDictionarySingleton, v59, v170, v169, v172, v61, v60, 9u);
  unint64_t v138 = (unint64_t)v175 - 1;
  uint64_t v149 = v40[83];
  uint64_t v151 = v40[82];
  uint64_t v144 = v40[85];
  uint64_t v146 = v40[84];
  uint64_t v141 = v40[87];
  uint64_t v142 = v40[86];
  uint64_t v176 = *((unsigned int *)v40 + 176);
  uint64_t v140 = v40[89];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C5E0(v162, v163);
  swift_release();
  uint64_t v136 = *((unsigned int *)v40 + 176);
  uint64_t v160 = v40[84];
  unint64_t v165 = v40[85];
  sub_10002CEB0(v160, v165);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  unint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  BOOL v64 = os_log_type_enabled(v62, v63);
  uint64_t v65 = (void (*)(uint64_t, uint64_t))v40[149];
  uint64_t v66 = v40[147];
  uint64_t v67 = v40[145];
  unint64_t v68 = v40[112];
  if (v64)
  {
    uint64_t v130 = v40[111];
    uint64_t v135 = (void (*)(uint64_t, uint64_t))v40[149];
    uint64_t v69 = (uint8_t *)swift_slowAlloc();
    v180[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = 136446210;
    swift_bridgeObjectRetain();
    v40[109] = sub_100110D58(v130, v68, v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Successfully pre-generated an assessment for workflow ID %{public}s", v69, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v135(v66, v67);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v65(v66, v67);
  }
  int v75 = *v147;
  v40[74] = v151;
  v40[75] = v149;
  v40[76] = v146;
  v40[77] = v144;
  v40[78] = v142;
  v40[79] = v141;
  v40[80] = v176;
  v40[81] = v140;
  sub_100307078((uint64_t *)v172, (void (*)(uint64_t, uint64_t))sub_1000338D4, (void (*)(uint64_t, uint64_t))sub_10002CEB0);
  uint64_t v76 = sub_100303000((uint64_t)(v40 + 74), 0, v138 < 2);
  uint64_t v78 = v77;
  sub_100307078((uint64_t *)v172, (void (*)(uint64_t, uint64_t))sub_10000C5E0, (void (*)(uint64_t, uint64_t))sub_10000C5F4);
  if (v75 == 1)
  {
    uint64_t v79 = v40[135];
    uint64_t v80 = v40[134];
    uint64_t v81 = v40[133];
    uint64_t v82 = v78;
    uint64_t v83 = v40[131];
    uint64_t v177 = v76;
    uint64_t v84 = v40[127];
    uint64_t v153 = v40[111];
    uint64_t v155 = v40[112];
    sub_100048D6C(v40[137], v84, &qword_10072A6E8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v79 + 56))(v84, 0, 1, v80);
    sub_100048D6C(v81, v83, &qword_10072A7D8);
    sub_10030362C(v153, v155, v160, v165, v177, v82, v136, v161, v168, v3, v2, (uint64_t)&_swiftEmptyDictionarySingleton, v84, v83);
    uint64_t v103 = v40[131];
    uint64_t v104 = v40[127];
    sub_1001D72D0(v2);
    sub_1001D72D0(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v103, &qword_10072A7D8);
    sub_10000C6CC(v104, &qword_10072A7D0);
    if (qword_10071F5D0 != -1) {
      swift_once();
    }
    uint64_t v105 = v40[126];
    uint64_t v106 = v40[125];
    uint64_t v107 = v40[124];
    uint64_t v108 = v40[123];
    uint64_t v179 = v40[112];
    uint64_t v109 = v40[111];
    uint64_t v110 = qword_100760868;
    Date.init()();
    static Date.- infix(_:_:)();
    uint64_t v167 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
    v167(v106, v108);
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v111 = (void *)swift_task_alloc();
    v111[2] = v110;
    v111[3] = v109;
    v111[4] = v179;
    v111[5] = v105;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    uint64_t v112 = v40[140];
    uint64_t v113 = v40[139];
    uint64_t v114 = v40[138];
    uint64_t v115 = v40[126];
    uint64_t v116 = v40[123];
    (*(void (**)(void, void))(v40[121] + 8))(v40[122], v40[120]);
    sub_100306FB8(v173);
    sub_10000C5F4(v160, v165);
    sub_10000C5E0(v170, v169);
    sub_10000C5E0(v174, v9);
    sub_100307078((uint64_t *)v172, (void (*)(uint64_t, uint64_t))sub_10000C5E0, (void (*)(uint64_t, uint64_t))sub_10000C5F4);
    sub_10000C5E0(v162, v163);
    sub_10000C5F4(v157, v158);
    swift_task_dealloc();
    v167(v115, v116);
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v112, v114);
  }
  else
  {
    uint64_t v85 = v40[140];
    uint64_t v86 = v40[139];
    uint64_t v87 = v40[138];
    sub_1001D72D0(v2);
    sub_1001D72D0(v3);
    swift_bridgeObjectRelease();
    sub_100306FB8(v173);
    sub_10000C5F4(v160, v165);
    sub_10000C5E0(v170, v169);
    sub_10000C5E0(v174, v9);
    sub_100307078((uint64_t *)v172, (void (*)(uint64_t, uint64_t))sub_10000C5E0, (void (*)(uint64_t, uint64_t))sub_10000C5F4);
    sub_10000C5E0(v162, v163);
    sub_10000C5F4(v157, v158);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v87);
    swift_bridgeObjectRelease();
  }
  uint64_t v88 = v40[144];
  uint64_t v89 = v40;
  uint64_t v90 = v40[137];
  uint64_t v91 = v89[133];
  sub_100302FA0(v88, type metadata accessor for AugmentedProfile);
  sub_10000C6CC(v91, &qword_10072A7D8);
  sub_10000C6CC(v90, &qword_10072A6E8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = (uint64_t (*)(void))v89[1];
LABEL_16:
  return v32();
}

uint64_t sub_100306BC8()
{
  uint64_t v1 = *(void *)(v0 + 1152);
  sub_100306FB8(v0 + 512);
  sub_100302FA0(v1, type metadata accessor for AugmentedProfile);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100306D4C()
{
  uint64_t v1 = *(void *)(v0 + 1152);
  sub_100306FB8(v0 + 512);
  sub_100302FA0(v1, type metadata accessor for AugmentedProfile);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100306ED0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100306F08()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1003087A4;
  swift_bridgeObjectRetain();
  return sub_1001D8C18(v2, v3);
}

uint64_t sub_100306FB8(uint64_t a1)
{
  return a1;
}

unint64_t sub_100307024()
{
  unint64_t result = qword_10072A7F0;
  if (!qword_10072A7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072A7F0);
  }
  return result;
}

uint64_t *sub_100307078(uint64_t *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  a2(*a1, a1[1]);
  a3(v6, v7);
  a2(v8, v9);
  return a1;
}

const char *sub_1003070F4()
{
  return sub_10058C968(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

unint64_t sub_100307114()
{
  unint64_t result = qword_10072A800;
  if (!qword_10072A800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072A800);
  }
  return result;
}

unint64_t sub_100307168()
{
  unint64_t result = qword_10072A808;
  if (!qword_10072A808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072A808);
  }
  return result;
}

unint64_t sub_1003071BC()
{
  unint64_t result = qword_10072A810;
  if (!qword_10072A810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072A810);
  }
  return result;
}

unint64_t sub_100307210()
{
  unint64_t result = qword_10072A818;
  if (!qword_10072A818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072A818);
  }
  return result;
}

unint64_t sub_100307264()
{
  unint64_t result = qword_10072A820;
  if (!qword_10072A820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072A820);
  }
  return result;
}

uint64_t sub_1003072B8()
{
  return sub_100586C78(*(NSObject **)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_1003072D4()
{
  unint64_t result = qword_10072A830;
  if (!qword_10072A830)
  {
    sub_100019364(&qword_10072A6E8);
    sub_1000B6120(&qword_10072A838, &qword_100728600);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072A830);
  }
  return result;
}

unsigned char *sub_10030736C@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unint64_t sub_1003073DC()
{
  unint64_t result = qword_10072A848;
  if (!qword_10072A848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072A848);
  }
  return result;
}

uint64_t sub_100307430(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t, unint64_t))
{
  return a1;
}

void sub_100307480(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void), void (*a10)(uint64_t, unint64_t))
{
  if (a4 >> 60 != 15)
  {
    a9();
    a10(a3, a4);
    ((void (*)(uint64_t, uint64_t))a9)(a5, a6);
  }
}

unint64_t sub_100307514()
{
  unint64_t result = qword_10072A850;
  if (!qword_10072A850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072A850);
  }
  return result;
}

uint64_t sub_100307568(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t sub_100307580()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003075B8()
{
  return sub_1002FBE0C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1003075C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003075D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003075E0()
{
  return swift_release();
}

uint64_t sub_1003075EC()
{
  return sub_1002FAEEC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_1003075F4()
{
  return sub_1002E931C();
}

uint64_t sub_1003075FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1003006D4(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100307618()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100307658(unint64_t a1, uint64_t a2)
{
  sub_100300124(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100307664()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003076A4()
{
  return sub_10030052C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1003076B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003076C0()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_100726688) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(sub_100007764(&qword_1007266A8) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6 + 8) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = v0 + v3;
  uint64_t v10 = type metadata accessor for AugmentedProfile(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = sub_100007764(&qword_100726860);
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v13 = type metadata accessor for DIPPregeneratedAssessment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v0 + v7, 1, v13))
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = v0 + v7 + *(int *)(v13 + 20);
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v8 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | v6 | 7);
}

uint64_t sub_100307A30()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_100726688) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(sub_100007764(&qword_1007266A8) - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = *(void *)(v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1002F919C((uint64_t (*)(char *, uint64_t, uint64_t))(v0 + v2), v6, v0 + v5, v7);
}

uint64_t sub_100307B40(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = sub_100025D64;
  return _swift_task_switch(sub_1002EC1FC, 0, 0);
}

uint64_t sub_100307BEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100307C58()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100307C98()
{
  return sub_1002F82CC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t *sub_100307CA0(uint64_t *a1)
{
  return a1;
}

unint64_t sub_100307CDC()
{
  unint64_t result = qword_10072A8A8;
  if (!qword_10072A8A8)
  {
    sub_100019364(&qword_10072A890);
    sub_100307024();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10072A8A8);
  }
  return result;
}

uint64_t sub_100307D50()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t *sub_100307D98(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100307DD0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

const char *sub_100307E20()
{
  return sub_10056FF20(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_100307E3C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t sub_100307EAC(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = sub_100025D64;
  return _swift_task_switch(sub_1002EF720, 0, 0);
}

uint64_t sub_100307F58()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10000C494;
  return sub_1002EF8D4();
}

uint64_t sub_100307FF4()
{
  uint64_t v1 = *(void *)(sub_100007764(&qword_10072A6E8) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(sub_100007764(&qword_10072A7D8) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  unint64_t v8 = (v7 + *(void *)(v5 + 64)) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v0 + v3;
  uint64_t v10 = sub_100007764(&qword_100728600);
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  unint64_t v12 = (v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = v0 + v7;
  uint64_t v14 = sub_100007764(&qword_10072A7F8);
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v12 + 32) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v12 + 57, v2 | v6 | 7);
}

void sub_10030827C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(sub_100007764(&qword_10072A6E8) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(sub_100007764(&qword_10072A7D8) - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  sub_1002F01D8(a1, a2, a3, *(char **)(v3 + 16), *(unsigned __int8 *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), v3 + v8, (void (*)(uint64_t, uint64_t))(v3 + v11), *(unsigned char *)(v3 + v11 + *(void *)(v10 + 64)), (uint64_t *)(((v11 + *(void *)(v10 + 64)) & 0xFFFFFFFFFFFFFFF8) + v3 + 8), v3 + ((((v11 + *(void *)(v10 + 64)) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t *sub_1003083C8(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100308424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003084C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100308500(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = sub_100025D64;
  return _swift_task_switch(sub_1002EC1FC, 0, 0);
}

unint64_t sub_1003085AC()
{
  unint64_t result = qword_10072A8F8;
  if (!qword_10072A8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072A8F8);
  }
  return result;
}

uint64_t *sub_100308600(uint64_t *a1)
{
  return a1;
}

unint64_t sub_10030864C()
{
  unint64_t result = qword_10072A910;
  if (!qword_10072A910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10072A910);
  }
  return result;
}

uint64_t sub_1003086A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003086F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10030878C@<X0>(uint64_t a1@<X8>)
{
  return sub_1003075FC(a1);
}

uint64_t sub_1003087A8()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[239] = v1;
  v0[240] = *(void *)(v1 - 8);
  v0[241] = swift_task_alloc();
  v0[242] = swift_task_alloc();
  v0[243] = swift_task_alloc();
  v0[244] = swift_task_alloc();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[245] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003088B8;
  return sub_100446714();
}

uint64_t sub_1003088B8(char a1)
{
  *(unsigned char *)(*(void *)v1 + 1675) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003089B8, 0, 0);
}

uint64_t sub_1003089B8()
{
  if (*(unsigned char *)(v0 + 1675)) {
    goto LABEL_7;
  }
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  v3._uint64_t object = (void *)0x80000001006497E0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000010;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    defaultLogger()();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Forcing cv to disabled due to user defaults setting", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void *)(v0 + 1952);
LABEL_6:
    uint64_t v9 = *(void *)(v0 + 1920);
    uint64_t v10 = *(void *)(v0 + 1912);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
LABEL_7:
    uint64_t v11 = 0;
    goto LABEL_8;
  }
  id v14 = [v1 standardUserDefaults];
  v15._uint64_t countAndFlagsBits = 0x76632E6775626564;
  v15._uint64_t object = (void *)0xEF656C62616E652ELL;
  Swift::Bool v16 = NSUserDefaults.internalBool(forKey:)(v15);

  if (v16)
  {
    defaultLogger()();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Forcing cv to enabled due to user defaults setting", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = *(void *)(v0 + 1944);
    uint64_t v21 = *(void *)(v0 + 1920);
    uint64_t v22 = *(void *)(v0 + 1912);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    uint64_t v11 = 1;
    goto LABEL_8;
  }
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v23 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v24 = (uint64_t)&v23[4];
  uint64_t v25 = v23 + 52;
  os_unfair_lock_lock(v23 + 52);
  sub_1000262B4(v24, (_OWORD *)(v0 + 1680));
  os_unfair_lock_unlock(v25);
  sub_100030A10(v0 + 1680, v0 + 1872);
  sub_1000262D0(v0 + 1680);
  sub_10000C728((void *)(v0 + 1872), *(void *)(v0 + 1896));
  sub_1001418CC(v0 + 880);
  sub_1000BEA14(v0 + 880, v0 + 16, &qword_100722350);
  if (sub_100044CCC(v0 + 16) == 1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 1872);
LABEL_20:
    defaultLogger()();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v27, "No enableCV set in active config; defaulting isCVEnabled to false",
        v28,
        2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void *)(v0 + 1928);
    goto LABEL_6;
  }
  memcpy((void *)(v0 + 448), (const void *)(v0 + 16), 0x1B0uLL);
  sub_100044D90((uint64_t *)(v0 + 880));
  memcpy((void *)(v0 + 1312), (const void *)(v0 + 480), 0x169uLL);
  sub_1000BEA14(v0 + 1609, v0 + 1673, &qword_10072A938);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 1872);
  sub_1000BEA14(v0 + 1673, v0 + 1674, &qword_10072A938);
  int v26 = *(unsigned __int8 *)(v0 + 1674);
  if (v26 == 2) {
    goto LABEL_20;
  }
  uint64_t v11 = v26 & 1;
  defaultLogger()();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 67109120;
    *(_DWORD *)(v0 + 1676) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Using enableCV value from bootstrap: %{BOOL}d", v31, 8u);
    swift_slowDealloc();
  }
  uint64_t v32 = *(void *)(v0 + 1936);
  uint64_t v33 = *(void *)(v0 + 1920);
  uint64_t v34 = *(void *)(v0 + 1912);

  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
LABEL_8:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v12(v11);
}

uint64_t sub_100308EE8()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[245] = v1;
  v0[246] = *(void *)(v1 - 8);
  v0[247] = swift_task_alloc();
  v0[248] = swift_task_alloc();
  v0[249] = swift_task_alloc();
  return _swift_task_switch(sub_100308FC0, 0, 0);
}

uint64_t sub_100308FC0()
{
  id v1 = [self standardUserDefaults];
  v2._uint64_t object = (void *)0x80000001006497B0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000020;
  Swift::Double_optional v26 = NSUserDefaults.internalDouble(forKey:)(v2);
  double v3 = *(double *)&v26.is_nil;
  char v5 = v4;

  if ((v5 & 1) == 0)
  {
    os_log_type_t v6 = (void *)(v0 + 1992);
    double v7 = v3;
    defaultLogger()();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v8, v9)) {
      goto LABEL_13;
    }
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    *(double *)(v0 + 1952) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v11 = "Overriding cv background check chance to %f due to internal default setting";
    unint64_t v12 = v8;
    os_log_type_t v13 = v9;
    goto LABEL_4;
  }
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  Swift::Bool v16 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v17 = (uint64_t)&v16[4];
  os_log_type_t v18 = v16 + 52;
  os_unfair_lock_lock(v16 + 52);
  sub_1000262B4(v17, (_OWORD *)(v0 + 1680));
  os_unfair_lock_unlock(v18);
  sub_100030A10(v0 + 1680, v0 + 1872);
  sub_1000262D0(v0 + 1680);
  sub_10000C728((void *)(v0 + 1872), *(void *)(v0 + 1896));
  sub_1001418CC(v0 + 16);
  sub_1000BEA14(v0 + 16, v0 + 880, &qword_100722350);
  if (sub_100044CCC(v0 + 880) == 1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 1872);
LABEL_10:
    os_log_type_t v6 = (void *)(v0 + 1976);
    defaultLogger()();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    double v7 = 0.25;
    if (!os_log_type_enabled(v8, v19)) {
      goto LABEL_13;
    }
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    uint64_t v11 = "No cvBackgroundChance set in active config; using default background check chance";
    unint64_t v12 = v8;
    os_log_type_t v13 = v19;
    id v14 = v20;
    uint32_t v15 = 2;
    goto LABEL_12;
  }
  memcpy((void *)(v0 + 448), (const void *)(v0 + 880), 0x1B0uLL);
  sub_100044D90((uint64_t *)(v0 + 16));
  memcpy((void *)(v0 + 1312), (const void *)(v0 + 480), 0x169uLL);
  sub_1000BEA14(v0 + 1616, v0 + 1928, &qword_10072A920);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 1872);
  sub_1000BEA14(v0 + 1928, v0 + 1912, &qword_10072A920);
  if (*(unsigned char *)(v0 + 1920)) {
    goto LABEL_10;
  }
  os_log_type_t v6 = (void *)(v0 + 1984);
  double v7 = *(double *)(v0 + 1912);
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v24))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    *(double *)(v0 + 1944) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v11 = "Using cvBackgroundChance value from bootstrap: %f";
    unint64_t v12 = v8;
    os_log_type_t v13 = v24;
LABEL_4:
    id v14 = v10;
    uint32_t v15 = 12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, v14, v15);
    swift_slowDealloc();
  }
LABEL_13:

  (*(void (**)(void, void))(*(void *)(v0 + 1968) + 8))(*v6, *(void *)(v0 + 1960));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(__n128))(v0 + 8);
  v22.n128_f64[0] = v7;
  return v21(v22);
}

uint64_t sub_1003093D0()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[245] = v1;
  v0[246] = *(void *)(v1 - 8);
  v0[247] = swift_task_alloc();
  v0[248] = swift_task_alloc();
  v0[249] = swift_task_alloc();
  return _swift_task_switch(sub_1003094A8, 0, 0);
}

uint64_t sub_1003094A8()
{
  id v1 = [self standardUserDefaults];
  v2._uint64_t object = (void *)0x8000000100649790;
  v2._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  Swift::Double_optional v24 = NSUserDefaults.internalDouble(forKey:)(v2);
  uint64_t v3 = *(void *)&v24.is_nil;
  char v5 = v4;

  if ((v5 & 1) == 0)
  {
    os_log_type_t v6 = (void *)(v0 + 1992);
    uint64_t v7 = v3;
    defaultLogger()();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v8, v9)) {
      goto LABEL_13;
    }
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    *(void *)(v0 + 1952) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v11 = "Overriding cvRandomizationWindow to %f due to internal default setting";
    unint64_t v12 = v8;
    os_log_type_t v13 = v9;
    goto LABEL_4;
  }
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  id v14 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v15 = (uint64_t)&v14[4];
  Swift::Bool v16 = v14 + 52;
  os_unfair_lock_lock(v14 + 52);
  sub_1000262B4(v15, (_OWORD *)(v0 + 1680));
  os_unfair_lock_unlock(v16);
  sub_100030A10(v0 + 1680, v0 + 1872);
  sub_1000262D0(v0 + 1680);
  sub_10000C728((void *)(v0 + 1872), *(void *)(v0 + 1896));
  sub_1001418CC(v0 + 16);
  sub_1000BEA14(v0 + 16, v0 + 880, &qword_100722350);
  if (sub_100044CCC(v0 + 880) == 1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 1872);
LABEL_10:
    os_log_type_t v6 = (void *)(v0 + 1976);
    defaultLogger()();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v17, "Active config is not available; using default randomization window",
        v18,
        2u);
      uint64_t v7 = 0x40F5180000000000;
      goto LABEL_12;
    }
    uint64_t v7 = 0x40F5180000000000;
    goto LABEL_13;
  }
  memcpy((void *)(v0 + 448), (const void *)(v0 + 880), 0x1B0uLL);
  sub_100044D90((uint64_t *)(v0 + 16));
  memcpy((void *)(v0 + 1312), (const void *)(v0 + 480), 0x169uLL);
  sub_1000BEA14(v0 + 1632, v0 + 1928, &qword_10072A920);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 1872);
  sub_1000BEA14(v0 + 1928, v0 + 1912, &qword_10072A920);
  if (*(unsigned char *)(v0 + 1920)) {
    goto LABEL_10;
  }
  os_log_type_t v6 = (void *)(v0 + 1984);
  uint64_t v7 = *(void *)(v0 + 1912);
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v22))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    *(void *)(v0 + 1944) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v11 = "Using cvRandomizationWindow value from bootstrap: %f";
    unint64_t v12 = v8;
    os_log_type_t v13 = v22;
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, v10, 0xCu);
LABEL_12:
    swift_slowDealloc();
  }
LABEL_13:

  (*(void (**)(void, void))(*(void *)(v0 + 1968) + 8))(*v6, *(void *)(v0 + 1960));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v19 = *(uint64_t (**)(__n128))(v0 + 8);
  v20.n128_u64[0] = v7;
  return v19(v20);
}

double sub_1003098D4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self standardUserDefaults];
  v5._uint64_t object = (void *)0x8000000100649740;
  v5._uint64_t countAndFlagsBits = 0xD000000000000022;
  Swift::Double_optional v15 = NSUserDefaults.internalDouble(forKey:)(v5);
  double v6 = *(double *)&v15.is_nil;
  char v8 = v7;

  if (v8) {
    return 3600.0;
  }
  double v9 = v6;
  defaultLogger()();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v12 = 134217984;
    *(double *)&v14[1] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Overriding cv dynamic task grace period to %f due to internal default setting", v12, 0xCu);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v9;
}

double sub_100309AB0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self standardUserDefaults];
  v5._uint64_t object = (void *)0x8000000100649770;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  Swift::Double_optional v15 = NSUserDefaults.internalDouble(forKey:)(v5);
  double v6 = *(double *)&v15.is_nil;
  char v8 = v7;

  if (v8) {
    return 86400.0;
  }
  double v9 = v6;
  defaultLogger()();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v12 = 134217984;
    *(double *)&v14[1] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Overriding cv acceptance window to %f due to internal default setting", v12, 0xCu);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v9;
}

uint64_t sub_100309C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureFlagProvider();
  Swift::String v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_100309CF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeatureFlagProvider();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100309D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureFlagProvider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100309DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureFlagProvider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100309E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureFlagProvider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100309E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureFlagProvider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100309EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100309F00);
}

uint64_t sub_100309F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KRLConfigurationProvider();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100309F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100309F80);
}

uint64_t sub_100309F80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KRLConfigurationProvider();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CVConfigurationProvider()
{
  uint64_t result = qword_10072A998;
  if (!qword_10072A998) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10030A03C()
{
  uint64_t result = type metadata accessor for FeatureFlagProvider();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10030A0C8(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v2[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPSignpost();
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  return _swift_task_switch(sub_10030A210, 0, 0);
}

uint64_t sub_10030A210()
{
  uint64_t v1 = *(_OWORD **)(v0 + 120);
  uint64_t v26 = *(void *)(v0 + 128);
  static DaemonSignposts.claimValidityRequest.getter();
  DIPSignpost.init(_:)();
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v2 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v3 = *(void *)(*(void *)v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v25 = 2 * v3;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100614990;
  unint64_t v5 = v27 + v4;
  uint64_t v6 = (void *)(v5 + v2[14]);
  uint64_t v7 = enum case for DIPError.PropertyKey.conversationID(_:);
  uint64_t v8 = type metadata accessor for DIPError.PropertyKey();
  double v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v5, v7, v8);
  uint64_t v10 = *(void *)(v26 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v11 = *(void *)(v26 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v6[3] = &type metadata for String;
  *uint64_t v6 = v10;
  v6[1] = v11;
  unint64_t v12 = v5 + v3 + v2[14];
  v9();
  long long v13 = v1[1];
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v13;
  long long v14 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 104) = v14;
  *(void *)(v12 + 24) = &type metadata for String;
  *(_OWORD *)unint64_t v12 = v14;
  Swift::Double_optional v15 = (void *)(v5 + v25 + v2[14]);
  v9();
  v15[3] = &type metadata for String;
  *Swift::Double_optional v15 = 0xD000000000000013;
  v15[1] = 0x8000000100649800;
  swift_bridgeObjectRetain();
  sub_1001061B8(v0 + 104);
  *(void *)(v0 + 192) = sub_10015C504(v27);
  *(void *)(v0 + 72) = &type metadata for ClaimValidityRequest;
  Swift::Bool v16 = (_OWORD *)swift_allocObject();
  *(void *)(v0 + 48) = v16;
  long long v17 = v1[3];
  long long v19 = *v1;
  long long v18 = v1[1];
  v16[3] = v1[2];
  v16[4] = v17;
  v16[1] = v19;
  v16[2] = v18;
  long long v20 = v1[7];
  long long v22 = v1[4];
  long long v21 = v1[5];
  v16[7] = v1[6];
  v16[8] = v20;
  v16[5] = v22;
  v16[6] = v21;
  sub_10030AB68((uint64_t)v1);
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_10030A51C;
  return sub_1002CE7F8(v0 + 48, 0xD000000000000013, 0x8000000100649800, 0, 0);
}

uint64_t sub_10030A51C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*v4;
  v6[26] = a1;
  v6[27] = a2;
  v6[28] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = sub_10030A948;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v6 + 6));

    uint64_t v7 = sub_10030A64C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10030A64C()
{
  unint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10002CEB0(v3, v2);
  JSONDecoder.init()();
  sub_10030AC18();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v5 = v0[26];
  unint64_t v4 = v0[27];
  if (v1)
  {
    uint64_t v7 = v0[18];
    uint64_t v6 = v0[19];
    uint64_t v8 = v0[17];
    sub_10000C5F4(v0[26], v0[27]);
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.internalError(_:), v8);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    swift_errorRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v5, v4);
    uint64_t v10 = v0[22];
    uint64_t v9 = v0[23];
    uint64_t v11 = v0[21];
    swift_errorRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v15 = v0[22];
    uint64_t v14 = v0[23];
    uint64_t v16 = v0[21];
    sub_10000C5F4(v0[26], v0[27]);
    sub_10000C5F4(v5, v4);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v17 = v0[10];
    uint64_t v18 = v0[11];
    uint64_t v19 = v0[12];
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v20(v17, v18, v19);
  }
}

uint64_t sub_10030A948()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 6));
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  uint64_t v5 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v6 = v0[21];
  swift_errorRelease();
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10030AAF4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 144, 7);
}

uint64_t sub_10030AB68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000AAD28(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_10030AC18()
{
  unint64_t result = qword_10072A9D8;
  if (!qword_10072A9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10072A9D8);
  }
  return result;
}

uint64_t sub_10030AC6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v71 - v11;
  uint64_t v13 = type metadata accessor for DeviceInformationProvider();
  uint64_t v77 = *(void *)(v13 - 8);
  uint64_t v78 = v13;
  __chkstk_darwin(v13);
  uint64_t v76 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for HardwareAttestationType();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(a1);
  uint64_t v89 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v90 = (char *)&v71 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v91 = (char *)&v71 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v71 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v99 = (char *)&v71 - v27;
  uint64_t v28 = *(void *)(a1 + 16);
  if (!v28)
  {
    uint64_t v32 = enum case for HardwareAttestationType.SEP(_:);
    unint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 104);
    return v40(a2, v32, v15);
  }
  int v75 = v10;
  uint64_t v72 = v12;
  uint64_t v73 = v7;
  uint64_t v74 = v6;
  uint64_t v79 = a2;
  uint64_t v80 = v3;
  os_log_type_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
  uint64_t v29 = v16 + 16;
  uint64_t v87 = v30;
  unint64_t v31 = v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
  uint64_t v32 = enum case for HardwareAttestationType.SEP(_:);
  uint64_t v94 = (void (**)(char *, uint64_t, uint64_t))(v29 + 88);
  unsigned int v88 = enum case for HardwareAttestationType.SE(_:);
  unsigned int v85 = enum case for HardwareAttestationType.IDV(_:);
  unsigned int v84 = enum case for HardwareAttestationType.OP(_:);
  uint64_t v33 = *(void *)(v29 + 56);
  uint64_t v81 = v26;
  uint64_t v82 = v33;
  swift_bridgeObjectRetain();
  unsigned int v86 = v32;
  uint64_t v34 = v99;
  uint64_t v93 = (void (**)(char *, uint64_t))(v29 - 8);
  uint64_t v83 = v29;
  while (1)
  {
    v87(v34, v31, v15);
    uint64_t v92 = *v94;
    v92(v25, v32, v15);
    sub_10030C588(&qword_100724970, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v97 == (char *)v95 && v98 == v96) {
      char v36 = 1;
    }
    else {
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v37 = *v93;
    (*v93)(v25, v15);
    if (v36) {
      goto LABEL_27;
    }
    v92(v91, v88, v15);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v97 == (char *)v95 && v98 == v96)
    {
      swift_bridgeObjectRelease_n();
      v37(v91, v15);
LABEL_24:
      swift_bridgeObjectRelease();
      int v43 = hasSEService();
      v37(v99, v15);
      if (v43)
      {
        uint64_t v44 = v79;
        uint64_t v45 = v88;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v92)(v44, v45, v15);
      }
LABEL_28:
      uint64_t v44 = v79;
      uint64_t v45 = v86;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v92)(v44, v45, v15);
    }
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37(v91, v15);
    if (v38) {
      goto LABEL_24;
    }
    v92(v90, v85, v15);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v97 == (char *)v95 && v98 == v96)
    {
      swift_bridgeObjectRelease_n();
      v37(v90, v15);
LABEL_27:
      v37(v99, v15);
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37(v90, v15);
    if (v39) {
      goto LABEL_27;
    }
    unint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92;
    v92(v89, v84, v15);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v97 == (char *)v95 && v98 == v96) {
      break;
    }
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37(v89, v15);
    if (v41) {
      goto LABEL_31;
    }
    uint64_t v34 = v99;
    v37(v99, v15);
    v31 += v82;
    --v28;
    uint64_t v32 = v86;
    if (!v28)
    {
      swift_bridgeObjectRelease();
      a2 = v79;
      return v40(a2, v32, v15);
    }
  }
  swift_bridgeObjectRelease_n();
  v37(v89, v15);
LABEL_31:
  swift_bridgeObjectRelease();
  if (!hasSEService())
  {
    v37(v99, v15);
    return v40(v79, v86, v15);
  }
  uint64_t v46 = v76;
  DeviceInformationProvider.init()();
  uint64_t v47 = DeviceInformationProvider.hardwarePlatform.getter();
  unint64_t v49 = v48;
  (*(void (**)(char *, uint64_t))(v77 + 8))(v46, v78);
  if (qword_10071F580 != -1) {
    swift_once();
  }
  id v50 = (id)qword_1007607E8;
  uint64_t v51 = sub_1004E7C64();
  uint64_t v53 = v52;
  sub_10013FEE4(v51, v52);
  if (v53 == 1) {
    sub_1004E995C();
  }
  uint64_t v54 = sub_1004E7C64();
  if (v55 == 1)
  {
    swift_bridgeObjectRelease();

    goto LABEL_43;
  }
  uint64_t v57 = v56;
  sub_10013FEE4(v54, v55);

  if ((v57 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_43:
    defaultLogger()();
    os_log_type_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    uint64_t v66 = v74;
    if (v65)
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "failed to get SE type", v67, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v66);
    v37(v99, v15);
    return v40(v79, v86, v15);
  }
  unint64_t v58 = v72;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = swift_slowAlloc();
    uint64_t v91 = (char *)v47;
    uint64_t v62 = v61;
    uint64_t v90 = (char *)swift_slowAlloc();
    uint64_t v97 = v90;
    *(_DWORD *)uint64_t v62 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v95 = sub_100110D58((uint64_t)v91, v49, (uint64_t *)&v97);
    unint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v62 + 12) = 1026;
    LODWORD(v95) = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "soc %{public}s, se %{public}u", (uint8_t *)v62, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v73 + 8))(v58, v74);
  unsigned __int8 v68 = sub_10030C5D0();
  swift_bridgeObjectRelease();
  v37(v99, v15);
  uint64_t v69 = v86;
  switch(v57)
  {
    case 2:
LABEL_51:
      if (v68 <= 5u) {
        goto LABEL_54;
      }
      goto LABEL_52;
    case 1:
      if (v68 <= 4u) {
        goto LABEL_54;
      }
      goto LABEL_52;
    case 0:
      goto LABEL_51;
  }
  if (v68 > 1u)
  {
LABEL_52:
    uint64_t v70 = v79;
    uint64_t v69 = v88;
    return v40(v70, v69, v15);
  }
LABEL_54:
  uint64_t v70 = v79;
  return v40(v70, v69, v15);
}

uint64_t sub_10030B7A8(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 320) = a2;
  *(void *)(v2 + 168) = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  *(void *)(v2 + 176) = v3;
  *(void *)(v2 + 184) = *(void *)(v3 - 8);
  *(void *)(v2 + 192) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  *(void *)(v2 + 200) = v4;
  *(void *)(v2 + 208) = *(void *)(v4 - 8);
  *(void *)(v2 + 216) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v2 + 224) = v5;
  *(void *)(v2 + 232) = *(void *)(v5 - 8);
  *(void *)(v2 + 240) = swift_task_alloc();
  *(void *)(v2 + 248) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPKeyAlgorithm();
  *(void *)(v2 + 256) = v6;
  *(void *)(v2 + 264) = *(void *)(v6 - 8);
  *(void *)(v2 + 272) = swift_task_alloc();
  return _swift_task_switch(sub_10030B990, 0, 0);
}

uint64_t sub_10030B990()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 280) = v1;
  *(unsigned char *)(v1 + 16) = 0;
  uint64_t v2 = self;
  *(void *)(v0 + 288) = v2;
  id v3 = [v2 standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 BOOLForKey:v4];

  if (v5)
  {
    *(unsigned char *)(v1 + 16) = 1;
    goto LABEL_10;
  }
  if ((*(unsigned char *)(v0 + 320) & 1) != 0 || !hasSEService())
  {
LABEL_10:
    sub_10030C340(v1);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(id))(v0 + 8);
    return v13(v5);
  }
  sub_100128728(*(void *)(v0 + 168), v0 + 56);
  if (!*(void *)(v0 + 80))
  {
    sub_100128680(v0 + 56);
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 256);
  sub_10000C6B4((long long *)(v0 + 56), v0 + 16);
  uint64_t v9 = *(void *)(v0 + 40);
  sub_10000C728((void *)(v0 + 16), v9);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for DIPKeyAlgorithm.ECC256(_:), v8);
  unint64_t v10 = sub_10015CEE4((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v0 + 296) = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10030BC30;
  uint64_t v12 = *(void *)(v0 + 272);
  return dispatch thunk of DIPKeystoreProtocol.generateIdentityKeyPair(label:algorithm:constraints:enableUAM:temporary:)(v0 + 96, 0xD000000000000014, 0x8000000100649900, v12, v10, 1, 1, v9);
}

uint64_t sub_10030BC30()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[33] + 8))(v2[34], v2[32]);
    swift_bridgeObjectRelease();
    id v3 = sub_10030BF68;
  }
  else
  {
    uint64_t v4 = (uint64_t)(v2 + 12);
    uint64_t v6 = v2[33];
    uint64_t v5 = v2[34];
    uint64_t v7 = v2[32];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v4);
    id v3 = sub_10030BDA4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10030BDA4()
{
  uint64_t v1 = (void *)v0[36];
  *(unsigned char *)(v0[35] + 16) = 1;
  id v2 = [v1 standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setBool:1 forKey:v3];

  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "set se service available to true", v6, 2u);
    swift_slowDealloc();
  }
  uint64_t v7 = v0[31];
  uint64_t v8 = v0[28];
  uint64_t v9 = v0[29];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  uint64_t v10 = v0[35];
  uint64_t v11 = *(unsigned __int8 *)(v10 + 16);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  sub_10030C340(v10);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t))v0[1];
  return v12(v11);
}

uint64_t sub_10030BF68()
{
  uint64_t v13 = v0[30];
  uint64_t v14 = v0[29];
  uint64_t v15 = v0[28];
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[24];
  uint64_t v11 = v0[27];
  uint64_t v12 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v5._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.keychainSEKeyCreateFailure(_:), v4);
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10030C588((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v6, v11, v12);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v11, v12);
  swift_errorRelease();
  uint64_t v7 = v0[35];
  uint64_t v8 = *(unsigned __int8 *)(v7 + 16);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  sub_10030C340(v7);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(v8);
}

uint64_t sub_10030C230()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 removeObjectForKey:v1];

  type metadata accessor for DIPKeystoreKeychain();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10030C330()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030C340(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::String v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    v13[0] = v2;
    uint64_t v9 = (uint8_t *)v8;
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    swift_beginAccess();
    if (*(unsigned char *)(a1 + 16)) {
      uint64_t v10 = 1702195828;
    }
    else {
      uint64_t v10 = 0x65736C6166;
    }
    if (*(unsigned char *)(a1 + 16)) {
      unint64_t v11 = 0xE400000000000000;
    }
    else {
      unint64_t v11 = 0xE500000000000000;
    }
    v13[1] = sub_100110D58(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "se service available = %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, void))(v3 + 8))(v5, v13[0]);
  }
  else
  {

    swift_release_n();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t sub_10030C588(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10030C5D0()
{
  sub_1000B60CC();
  sub_1001D7A5C();
  if (BidirectionalCollection<>.starts<A>(with:)()) {
    return 0;
  }
  uint64_t v0 = 2;
  if ((BidirectionalCollection<>.starts<A>(with:)() & 1) == 0)
  {
    if (BidirectionalCollection<>.starts<A>(with:)()) {
      return 2;
    }
    else {
      return 3;
    }
  }
  return v0;
}

uint64_t sub_10030C6D8()
{
  sub_100007764(&qword_10072B3E8);
  type metadata accessor for URLQueryItem();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100617510;
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  URLQueryItem.init(name:value:)();
  return v0;
}

uint64_t sub_10030C870()
{
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  uint64_t v9 = 0;
  unint64_t v10 = 0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0x72756F5361746164;
  v1._uint64_t object = (void *)0xED000022203A6563;
  String.append(_:)(v1);
  unint64_t v2 = 0xE300000000000000;
  unint64_t v3 = 5919309;
  switch(*v0)
  {
    case 1:
      unint64_t v3 = 5391183;
      break;
    case 2:
      unint64_t v2 = 0xE600000000000000;
      unint64_t v3 = 0x454349564544;
      break;
    case 3:
      unint64_t v2 = 0x800000010062A1E0;
      unint64_t v3 = 0xD000000000000013;
      break;
    case 4:
      unint64_t v2 = 0xE800000000000000;
      unint64_t v3 = 0x4E495F444559454BLL;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x203A617461640A22;
  v5._uint64_t object = (void *)0xE900000000000022;
  String.append(_:)(v5);
  memcpy(__dst, v0 + 8, sizeof(__dst));
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = 34;
  v6._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v9;
}

uint64_t sub_10030C9E8(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072B0E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10033F8E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10030CBE8()
{
  if (*v0) {
    return 0x4974736575716572;
  }
  else {
    return 0x61737265766E6F63;
  }
}

uint64_t sub_10030CC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10033ED80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10030CC5C(uint64_t a1)
{
  unint64_t v2 = sub_10040BE90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030CC98(uint64_t a1)
{
  unint64_t v2 = sub_10040BE90();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10030CCD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10033EEA4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10030CD04(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072D8B8, (void (*)(void))sub_10040BE90, (uint64_t)&type metadata for RequestHeader.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10030CD64()
{
  uint64_t result = 0x61737265766E6F63;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x4974736575716572;
      break;
    case 2:
      uint64_t result = 0x65736E6F70736572;
      break;
    case 3:
      uint64_t result = 0x6F43737574617473;
      break;
    case 4:
      uint64_t result = 0x7574617453627573;
      break;
    case 5:
      uint64_t result = 0x654D737574617473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10030CE60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10033F148(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10030CE88(uint64_t a1)
{
  unint64_t v2 = sub_10033F8E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030CEC4(uint64_t a1)
{
  unint64_t v2 = sub_10033F8E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10030CF00@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10033F454(a1, (uint64_t *)v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_10030CF4C(void *a1)
{
  return sub_10030C9E8(a1);
}

uint64_t sub_10030CF64()
{
  uint64_t v1 = 0x6449656369766564;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E49746E65696C63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7A69726F68747561;
  }
}

uint64_t sub_10030CFD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10033F934(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10030CFF8(uint64_t a1)
{
  unint64_t v2 = sub_100403558();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030D034(uint64_t a1)
{
  unint64_t v2 = sub_100403558();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10030D070@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10033FABC(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10030D0B4(void *a1)
{
  return sub_10032EC98(a1, &qword_10072CC38, (void (*)(void))sub_100403558, (uint64_t)&type metadata for AppleCredentials.CodingKeys, (uint64_t)&KeyedEncodingContainer.encode(_:forKey:));
}

Swift::Int sub_10030D104()
{
  return sub_100330AA0();
}

uint64_t sub_10030D120()
{
  return String.hash(into:)();
}

Swift::Int sub_10030D13C()
{
  return sub_100330B20();
}

uint64_t sub_10030D158@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1006F28D0;
  return sub_100330B78(v2, a1, a2);
}

void sub_10030D164(void *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000010062A070;
}

uint64_t sub_10030D184()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10030D1E4()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_10030D234()
{
  qword_100760380 = (uint64_t)&off_1006F23A0;
}

uint64_t sub_10030D248(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  __chkstk_darwin(v5);
  uint64_t v26 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for EncodingError();
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v21 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v23 = (char *)&v21 - v10;
  uint64_t v11 = sub_100007764(&qword_10072C5D0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FF674();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v15 = *(_OWORD *)(v3 + 16);
  v27[0] = *(_OWORD *)v3;
  v27[1] = v15;
  char v28 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v16 = v23;
    *(void *)&v27[0] = v2;
    swift_errorRetain();
    sub_100007764((uint64_t *)&unk_100723450);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      uint64_t v18 = v21;
      uint64_t v17 = v22;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v21, v16, v7);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v19, v18, v7);
      (*(void (**)(char *, void, uint64_t))(v24 + 104))(v26, enum case for DIPError.Code.jsonEncodingFailed(_:), v25);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v7);
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, void, uint64_t))(v24 + 104))(v26, enum case for DIPError.Code.internalError(_:), v25);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    return swift_errorRelease();
  }
  else
  {
    sub_1000BEA14(v3 + 32, (uint64_t)v30, &qword_100729C68);
    sub_1000BEA14((uint64_t)v30, (uint64_t)v27, &qword_100729C68);
    char v28 = 1;
    sub_1003FD160();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v27[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v27[0]) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&v27[0] = *(void *)(v3 + 112);
    char v28 = 4;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v27[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v27[0]) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14(v3 + 144, (uint64_t)v31, &qword_10072C5E0);
    sub_1000BEA14((uint64_t)v31, (uint64_t)v27, &qword_10072C5E0);
    char v28 = 7;
    sub_100007764(&qword_10072C5E8);
    sub_10033E3A4(&qword_10072C5F0, &qword_10072C5E8, (void (*)(void))sub_1003FF6C8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v27[0]) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_1000BEA14(v3 + 160, (uint64_t)v29, &qword_100722398);
    sub_1000BEA14((uint64_t)v29, (uint64_t)v27, &qword_100722398);
    char v28 = 9;
    sub_100007764(&qword_100722398);
    sub_1003FF71C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

unint64_t sub_10030DAAC(char a1)
{
  unint64_t result = 0x4874736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x72656469766F7270;
      break;
    case 3:
      unint64_t result = 1919248756;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0x756F4365636E6F6ELL;
      break;
    case 6:
      unint64_t result = 0x6F436E6F69676572;
      break;
    case 7:
      unint64_t result = 0x696C696261706163;
      break;
    case 8:
      unint64_t result = 0x6563697665447369;
      break;
    case 9:
      unint64_t result = 0x747865746E6F63;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10030DC1C()
{
  return sub_10030DAAC(*v0);
}

uint64_t sub_10030DC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10033FCFC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10030DC4C(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10030DC58(uint64_t a1)
{
  unint64_t v2 = sub_1003FF674();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030DC94(uint64_t a1)
{
  unint64_t v2 = sub_1003FF674();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10030DCD0()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

__n128 sub_10030DD1C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100340168(a1, (uint64_t)v9);
  if (!v2)
  {
    long long v5 = v9[9];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(void *)(a2 + 160) = v10;
    long long v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    long long v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    __n128 result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10030DD94(void *a1)
{
  return sub_10030D248(a1);
}

uint64_t sub_10030DDF0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CC18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100401444();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[3];
  long long v17 = v3[2];
  long long v18 = v9;
  long long v10 = v3[5];
  long long v19 = v3[4];
  long long v20 = v10;
  long long v11 = v3[1];
  long long v15 = *v3;
  long long v16 = v11;
  char v14 = 0;
  sub_100402DB8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v15) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v15 = *((void *)v3 + 14);
    char v14 = 2;
    type metadata accessor for LegacyWorkflowPackage(0);
    sub_10033E308(&qword_10072CC20, (void (*)(uint64_t))type metadata accessor for LegacyWorkflowPackage);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10030DFF0(char a1)
{
  unint64_t result = 0x776F6C666B726F77;
  switch(a1)
  {
    case 2:
      unint64_t result = 0x7365636E6F6ELL;
      break;
    case 3:
      unint64_t result = 0x726F576F73726570;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x656D737365737361;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10030E104(char a1)
{
  unint64_t result = 0x776F6C666B726F77;
  switch(a1)
  {
    case 2:
      unint64_t result = 0x7365636E6F6ELL;
      break;
    case 3:
      unint64_t result = 0x726F576F73726570;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x656D737365737361;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10030E218()
{
  uint64_t v1 = 0x45656D69746E7572;
  if (*v0 != 1) {
    uint64_t v1 = 0x776F6C666B726F77;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65736E6F70736572;
  }
}

uint64_t sub_10030E28C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034126C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10030E2B4(uint64_t a1)
{
  unint64_t v2 = sub_100401444();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030E2F0(uint64_t a1)
{
  unint64_t v2 = sub_100401444();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10030E32C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100340DB4(a1, v8);
  if (!v2)
  {
    long long v5 = v12;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v13;
    *(void *)(a2 + 112) = v14;
    long long v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    double result = *(double *)&v9;
    long long v7 = v10;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

uint64_t sub_10030E394(void *a1)
{
  return sub_10030DDF0(a1);
}

uint64_t sub_10030E3AC(unsigned __int8 *a1, char *a2)
{
  return sub_100470694(*a1, *a2);
}

Swift::Int sub_10030E3B8()
{
  return sub_10047343C();
}

uint64_t sub_10030E3C4()
{
  return sub_10029BBC4();
}

Swift::Int sub_10030E3CC()
{
  return sub_10047343C();
}

unint64_t sub_10030E3D4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10034140C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10030E404@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10030DFF0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10030E430()
{
  return sub_10030E104(*v0);
}

unint64_t sub_10030E438@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10034140C(a1);
  *a2 = result;
  return result;
}

void sub_10030E460(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_10030E46C(uint64_t a1)
{
  unint64_t v2 = sub_10033E260();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030E4A8(uint64_t a1)
{
  unint64_t v2 = sub_10033E260();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10030E4E4(uint64_t a1)
{
  unint64_t v100 = v2;
  uint64_t v94 = v1;
  uint64_t v3 = (void *)__chkstk_darwin(a1);
  uint64_t v4 = sub_100007764(&qword_100722320);
  __chkstk_darwin(v4 - 8);
  uint64_t v79 = (uint64_t)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v6 - 8);
  uint64_t v80 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPSignpost();
  uint64_t v81 = *(void *)(v8 - 8);
  uint64_t v82 = v8;
  __chkstk_darwin(v8);
  uint64_t v83 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for DIPError.Code();
  uint64_t v85 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v87 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007764(&qword_100722328);
  __chkstk_darwin(v11 - 8);
  unsigned int v84 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100722338);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v89 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unsigned int v86 = (char *)&v78 - v16;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v90 = *(void *)(v17 - 8);
  uint64_t v91 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  long long v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v78 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v78 - v24;
  uint64_t v26 = sub_100007764(&qword_10072B060);
  uint64_t v92 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  char v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v3[3];
  uint64_t v93 = v3;
  sub_10000C728(v3, v29);
  sub_10033E260();
  os_log_type_t v30 = v100;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v30)
  {
    unint64_t v100 = v20;
    LOBYTE(v98[0]) = 0;
    if (KeyedDecodingContainer.contains(_:)())
    {
      uint64_t v34 = v25;
      defaultLogger()();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "decoding legacy", v37, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v90 + 8))(v34, v91);
      v97[0] = 0;
      KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
      uint64_t v78 = v28;
      uint64_t v89 = 0;
      sub_10000C728(v98, v99);
      uint64_t v48 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
      uint64_t v32 = v94;
      if ((v49 & 1) == 0 && v48 > 2)
      {
        (*(void (**)(char *, void, uint64_t))(v85 + 104))(v87, enum case for DIPError.Code.serverResponseInconsistent(_:), v88);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
LABEL_19:
        (*(void (**)(char *, uint64_t))(v92 + 8))(v78, v26);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v98);
        uint64_t v31 = (uint64_t)v93;
        goto LABEL_3;
      }
      uint64_t v58 = sub_100007764((uint64_t *)&unk_100722340);
      sub_1000279F4((uint64_t)v98, v99);
      sub_1000B6120(&qword_10072B078, (uint64_t *)&unk_100722340);
      uint64_t v59 = (uint64_t)v86;
      os_log_type_t v60 = v89;
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      if (v60) {
        goto LABEL_19;
      }
      uint64_t v89 = (char *)v26;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v59, 0, 1, v58);
      sub_1000BEA14(v59, v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, &qword_100722338);
      sub_100007764(&qword_100722330);
      sub_1000279F4((uint64_t)v98, v99);
      sub_1000B6120(&qword_10072B080, &qword_100722330);
      uint64_t v62 = (uint64_t)v84;
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
      sub_1000BEA14(v62, v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow, &qword_100722328);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v98);
      uint64_t v52 = v92;
      uint64_t v26 = (uint64_t)v89;
      char v28 = v78;
    }
    else
    {
      LOBYTE(v98[0]) = 1;
      if (KeyedDecodingContainer.contains(_:)())
      {
        defaultLogger()();
        char v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.debug.getter();
        BOOL v40 = os_log_type_enabled(v38, v39);
        uint64_t v32 = v94;
        if (v40)
        {
          char v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "decoding LegacyINOWorkflow", v41, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v90 + 8))(v23, v91);
        uint64_t v42 = sub_100007764((uint64_t *)&unk_100722340);
        LOBYTE(v98[0]) = 1;
        sub_1000B6120(&qword_10072B078, (uint64_t *)&unk_100722340);
        uint64_t v43 = (uint64_t)v89;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v43, 0, 1, v42);
        sub_1000BEA14(v43, v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, &qword_100722338);
        uint64_t v50 = v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow;
        uint64_t v51 = sub_100007764(&qword_100722330);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 1, 1, v51);
        uint64_t v52 = v92;
      }
      else
      {
        uint64_t v32 = v94;
        uint64_t v44 = v94 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow;
        uint64_t v45 = sub_100007764((uint64_t *)&unk_100722340);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v44, 1, 1, v45);
        uint64_t v46 = v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow;
        uint64_t v47 = sub_100007764(&qword_100722330);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 1, 1, v47);
        uint64_t v52 = v92;
      }
    }
    LOBYTE(v98[0]) = 4;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v54 = (uint64_t *)(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentProfile);
    *uint64_t v54 = v53;
    v54[1] = v55;
    sub_100007764(&qword_1007268F0);
    v97[0] = 5;
    sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    uint64_t v56 = v28;
    uint64_t v57 = v26;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentGUIDs) = v98[0];
    LOBYTE(v98[0]) = 6;
    uint64_t v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v94 = 0;
    os_log_type_t v63 = (uint64_t *)(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentBaseURL);
    *os_log_type_t v63 = v61;
    v63[1] = v64;
    v97[5927] = 7;
    sub_100239270();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)v98, (uint64_t)v97, &qword_1007222F8);
    sub_1000BEA14((uint64_t)v97, v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_imageQualityCriteria, &qword_1007222F8);
    char v95 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v31 = (uint64_t)v93;
    uint64_t v89 = 0;
    uint64_t v78 = v56;
    *(void *)(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces) = v96;
    static DaemonSignposts.configureDecodePersoWorkflow.getter();
    DIPSignpost.init(_:)();
    id v66 = [self standardUserDefaults];
    v67._uint64_t object = (void *)0x8000000100649AA0;
    v67._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    Swift::Bool v68 = NSUserDefaults.internalBool(forKey:)(v67);

    if (v68)
    {
      uint64_t v69 = v100;
      defaultLogger()();
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v72 = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Skipping perso workflow due to user defaults settings", v72, 2u);
        uint64_t v69 = v100;
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v90 + 8))(v69, v91);
      uint64_t v73 = v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_persoWorkflow;
      uint64_t v74 = sub_100007764((uint64_t *)&unk_100722360);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v73, 1, 1, v74);
      uint64_t v26 = v57;
      int v75 = v78;
    }
    else
    {
      sub_100007764((uint64_t *)&unk_100722360);
      LOBYTE(v96) = 3;
      sub_1000B6120(&qword_10072B070, (uint64_t *)&unk_100722360);
      int v75 = v78;
      uint64_t v76 = v89;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      if (v76)
      {
        uint64_t v89 = v76;
        (*(void (**)(char *, uint64_t))(v81 + 8))(v83, v82);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v75, v26);
        uint64_t v65 = v94;
        sub_10000C6CC(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, &qword_100722338);
        sub_10000C6CC(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow, &qword_100722328);
        if (!v65) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000BEA14(v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_imageQualityCriteria, (uint64_t)v98, &qword_1007222F8);
        sub_10023932C((uint64_t)v98);
        goto LABEL_3;
      }
      sub_1000BEA14(v79, v32 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_persoWorkflow, &qword_100722320);
    }
    uint64_t v77 = v83;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v77, v82);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v75, v26);
    goto LABEL_4;
  }
  uint64_t v31 = (uint64_t)v93;
  uint64_t v32 = v94;
LABEL_3:
  type metadata accessor for LegacyWorkflowPackage(0);
  swift_deallocPartialClassInstance();
LABEL_4:
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v31);
  return v32;
}

uint64_t sub_10030F6A0(uint64_t a1)
{
  __chkstk_darwin(a1);
  sub_10000C6CC(v1 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, &qword_100722338);
  sub_10000C6CC(v1 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow, &qword_100722328);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v1 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_persoWorkflow, &qword_100722320);
  sub_1000BEA14(v1 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_imageQualityCriteria, (uint64_t)v3, &qword_1007222F8);
  sub_10023932C((uint64_t)v3);
  return v1;
}

uint64_t sub_10030F798(uint64_t a1)
{
  sub_10030F6A0(a1);

  return swift_deallocClassInstance();
}

uint64_t sub_10030F7F0()
{
  return type metadata accessor for LegacyWorkflowPackage(0);
}

uint64_t type metadata accessor for LegacyWorkflowPackage(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072AA10);
}

void sub_10030F818()
{
  sub_1003F09D4(319, &qword_10072AA20, (uint64_t *)&unk_100722340);
  if (v0 <= 0x3F)
  {
    sub_1003F09D4(319, &qword_10072AA28, &qword_100722330);
    if (v1 <= 0x3F)
    {
      sub_1003F09D4(319, (unint64_t *)&unk_10072AA30, (uint64_t *)&unk_100722360);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_10030F96C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for LegacyWorkflowPackage(0);
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_10030E4E4(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10030F9C8(void *a1)
{
  uint64_t v2 = sub_100007764(&qword_10072B088);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10033E260();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v8 = 1;
  sub_100007764((uint64_t *)&unk_100722340);
  sub_1000B6120(&qword_10072B090, (uint64_t *)&unk_100722340);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10030FB54(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CA18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100402968();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  v10[7] = 0;
  sub_100007764(&qword_100726808);
  sub_1001D87AC(&qword_100726818);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v10[6] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for InputValidationRequestV1(0);
    v10[5] = 2;
    type metadata accessor for EncryptionParamsAlgorithmIdentifier();
    sub_10033E308(&qword_100722578, (void (*)(uint64_t))&type metadata accessor for EncryptionParamsAlgorithmIdentifier);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v10[4] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10030FDB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = sub_100007764(&qword_10072B580);
  __chkstk_darwin(v3 - 8);
  uint64_t v27 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100007764(&qword_10072CA08);
  uint64_t v26 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InputValidationRequestV1(0);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t **)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  uint64_t v11 = (uint64_t)v10 + *(int *)(v8 + 32);
  uint64_t v12 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = (void *)((char *)v10 + *(int *)(v8 + 36));
  *uint64_t v13 = 0;
  v13[1] = 0;
  sub_10000C728(a1, a1[3]);
  sub_100402968();
  char v28 = v6;
  uint64_t v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v14)
  {
    uint64_t v30 = v11;
    uint64_t v24 = v13;
    uint64_t v16 = v26;
    uint64_t v15 = (uint64_t)v27;
    sub_100007764(&qword_100726808);
    char v34 = 0;
    sub_1001D87AC(&qword_100726810);
    uint64_t v17 = v28;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *uint64_t v10 = v35;
    char v33 = 1;
    v10[1] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v10[2] = v18;
    char v32 = 2;
    sub_10033E308(&qword_100722198, (void (*)(uint64_t))&type metadata accessor for EncryptionParamsAlgorithmIdentifier);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1001D9214(v15, v30, &qword_10072B580);
    char v31 = 3;
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v29);
    uint64_t v23 = v24;
    swift_bridgeObjectRelease();
    *uint64_t v23 = v20;
    v23[1] = v22;
    sub_10035C2C4((uint64_t)v10, v25, type metadata accessor for InputValidationRequestV1);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return sub_10035C32C((uint64_t)v10, type metadata accessor for InputValidationRequestV1);
}

unint64_t sub_100310180()
{
  unint64_t result = 0x7461447475706E69;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x654B63696C627570;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10031022C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100341458(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100310254(uint64_t a1)
{
  unint64_t v2 = sub_100402968();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100310290(uint64_t a1)
{
  unint64_t v2 = sub_100402968();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003102CC(uint64_t a1, uint64_t a2)
{
  return sub_100311558(a1, a2, &qword_10072C1A8, (void (*)(uint64_t))type metadata accessor for InputValidationRequestV1);
}

uint64_t sub_100310314@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10030FDB0(a1, a2);
}

uint64_t sub_10031032C(void *a1)
{
  return sub_10030FB54(a1);
}

uint64_t sub_100310344(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C9F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100402914();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  v10[7] = 0;
  sub_100007764(&qword_100726808);
  sub_1001D87AC(&qword_100726818);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for InputValidationRequestV3(0);
    v10[6] = 1;
    sub_100007764(&qword_1007267E0);
    sub_1000B6120(&qword_10072C9F8, &qword_1007267E0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10031053C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = sub_100007764(&qword_10072B4E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100007764(&qword_10072C9D8);
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for InputValidationRequestV3(0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v11 = 0;
  uint64_t v12 = (uint64_t)v11 + *(int *)(v9 + 28);
  uint64_t v13 = sub_100007764(&qword_1007267E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  sub_10000C728(a1, a1[3]);
  sub_100402914();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v19 = v12;
    uint64_t v15 = v21;
    uint64_t v14 = (uint64_t)v22;
    sub_100007764(&qword_100726808);
    char v25 = 0;
    sub_1001D87AC(&qword_100726810);
    uint64_t v16 = v23;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *uint64_t v11 = v26;
    char v24 = 1;
    sub_1000B6120(&qword_10072C9E8, &qword_1007267E0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v16);
    uint64_t v17 = v20;
    sub_1001D9214(v14, v19, &qword_10072B4E0);
    sub_10035C2C4((uint64_t)v11, v17, type metadata accessor for InputValidationRequestV3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return sub_10035C32C((uint64_t)v11, type metadata accessor for InputValidationRequestV3);
}

uint64_t sub_100310898(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072CA00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100402408();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100310A4C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100007764(&qword_10072C9A8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004026CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = a2;
  char v13 = 0;
  sub_100007764(&qword_1007268F0);
  sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v3)
  {
    uint64_t v14 = a3;
    char v13 = 1;
    sub_100007764(&qword_10072C990);
    sub_1004027F0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_100310C24(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7365726975716572;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x756F656D69547263;
      break;
    case 5:
      unint64_t result = 0x6B6174655278616DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100310D18(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CBF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1004033BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000BEA14(v3, (uint64_t)v12, &qword_10072CC00);
  sub_1000BEA14((uint64_t)v12, (uint64_t)v11, &qword_10072CC00);
  v10[15] = 0;
  sub_100007764(&qword_10072CBE0);
  sub_1004034B4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100310F64(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072D088);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FC96C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v10[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[0] = *(void *)(v3 + 24);
    char v11 = 2;
    sub_100007764(&qword_100722410);
    sub_10033E3A4(&qword_10072D078, &qword_100722410, (void (*)(void))sub_100404CE0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1000BEA14(v3 + 32, (uint64_t)v14, &qword_100728AF0);
    sub_1000BEA14((uint64_t)v14, (uint64_t)v10, &qword_100728AF0);
    char v11 = 3;
    sub_100404D34();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 80, (uint64_t)v13, &qword_10072D098);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v10, &qword_10072D098);
    char v11 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + 88, (uint64_t)v12, &qword_10072D098);
    sub_1000BEA14((uint64_t)v12, (uint64_t)v10, &qword_10072D098);
    char v11 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10031125C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a4;
  uint64_t v6 = sub_100007764(&qword_10072D070);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FCA14();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    v11[1] = v11[0];
    char v12 = 1;
    sub_100007764(&qword_100722410);
    sub_10033E3A4(&qword_10072D078, &qword_100722410, (void (*)(void))sub_100404CE0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10031142C()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x7461447475706E69;
  }
}

uint64_t sub_100311470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100341638(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100311498(uint64_t a1)
{
  unint64_t v2 = sub_100402914();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003114D4(uint64_t a1)
{
  unint64_t v2 = sub_100402914();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100311510(uint64_t a1, uint64_t a2)
{
  return sub_100311558(a1, a2, &qword_10072C198, (void (*)(uint64_t))type metadata accessor for InputValidationRequestV3);
}

uint64_t sub_100311558(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10033E308(a3, a4);
  uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v6;
}

uint64_t sub_100311608@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10031053C(a1, a2);
}

uint64_t sub_100311620(void *a1)
{
  return sub_100310344(a1);
}

unint64_t sub_100311638()
{
  unint64_t result = 0x646F43726F727265;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x657A696C61636F6CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003116E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100341734(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031170C(uint64_t a1)
{
  unint64_t v2 = sub_100402408();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100311748(uint64_t a1)
{
  unint64_t v2 = sub_100402408();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100311784@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100341914(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1003117C8(void *a1)
{
  return sub_100310898(a1);
}

uint64_t sub_1003117E0()
{
  if (*v0) {
    return 0x7373416567616D69;
  }
  else {
    return 0x6568636163657270;
  }
}

uint64_t sub_100311830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100341BF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100311858(uint64_t a1)
{
  unint64_t v2 = sub_1004026CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100311894(uint64_t a1)
{
  unint64_t v2 = sub_1004026CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003118D0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100341D24(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1003118FC(void *a1)
{
  return sub_100310A4C(a1, *v1, v1[1]);
}

unint64_t sub_100311920()
{
  return 0xD000000000000012;
}

uint64_t sub_10031193C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100341F78(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100311968(uint64_t a1)
{
  unint64_t v2 = sub_100404430();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003119A4(uint64_t a1)
{
  unint64_t v2 = sub_100404430();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003119E0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10032E98C(a1, &qword_10072CF28, (void (*)(void))sub_100404430, a2);
}

uint64_t sub_100311A1C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10032EB50(a1, a2, a3, &qword_10072CF38, (void (*)(void))sub_100404430);
}

uint64_t sub_100311A58(char *a1, char *a2)
{
  return sub_1004704A8(*a1, *a2);
}

Swift::Int sub_100311A64()
{
  return Hasher._finalize()();
}

uint64_t sub_100311AC0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100311B00()
{
  return Hasher._finalize()();
}

uint64_t sub_100311B58@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1006F29E8;
  return sub_100075FD0(v2, a1, a2);
}

void sub_100311B64(uint64_t *a1@<X8>)
{
  uint64_t v2 = 30770;
  if (*v1) {
    uint64_t v2 = 30771;
  }
  *a1 = v2;
  a1[1] = 0xE200000000000000;
}

uint64_t sub_100311B80()
{
  if (*v0) {
    return 30771;
  }
  else {
    return 30770;
  }
}

uint64_t sub_100311B98@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1006F29E8;
  return sub_100329650(a1, v2, a2);
}

uint64_t sub_100311BA4(uint64_t a1)
{
  unint64_t v2 = sub_10040C228();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100311BE0(uint64_t a1)
{
  unint64_t v2 = sub_10040C228();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100311C1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072D908, (uint64_t)sub_10040C228, (uint64_t)&type metadata for IdentityProofingImageAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035D940, a2);
}

uint64_t sub_100311C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t *a6@<X8>)
{
  uint64_t result = a5(a1, a2, a3, a4);
  if (!v6)
  {
    *a6 = result;
    a6[1] = v9;
    a6[2] = v10;
    a6[3] = v11;
  }
  return result;
}

uint64_t sub_100311CAC(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072D918, (void (*)(void))sub_10040C228, (uint64_t)&type metadata for IdentityProofingImageAsset.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

unint64_t sub_100311D0C()
{
  return sub_100310C24(*v0);
}

uint64_t sub_100311D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100342000(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100311D3C(uint64_t a1)
{
  unint64_t v2 = sub_1004033BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100311D78(uint64_t a1)
{
  unint64_t v2 = sub_1004033BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100311DB4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1003422C4(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_100311DF8(void *a1)
{
  return sub_100310D18(a1);
}

unint64_t sub_100311E34()
{
  unint64_t result = 0x6F69676552627573;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t result = 0x6974616E69676170;
      break;
    case 3:
      unint64_t result = 0x436E616353636F64;
      break;
    case 4:
      unint64_t result = 0x6761506863746177;
      break;
    case 5:
      unint64_t result = 0x616E696761506D64;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100311F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003425B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100311F50(uint64_t a1)
{
  unint64_t v2 = sub_1003FC96C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100311F8C(uint64_t a1)
{
  unint64_t v2 = sub_1003FC96C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100311FC8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1003428A4(a1, (uint64_t)v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_100312014(void *a1)
{
  return sub_100310F64(a1);
}

uint64_t sub_100312058()
{
  if (*v0) {
    return 0x6974616E69676170;
  }
  else {
    return 0x746E656D75636F64;
  }
}

uint64_t sub_1003120A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100342E6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003120C8(uint64_t a1)
{
  unint64_t v2 = sub_1003FCA14();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100312104(uint64_t a1)
{
  unint64_t v2 = sub_1003FCA14();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100312140@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100342F84(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100312170(void *a1)
{
  return sub_10031125C(a1, *v1, v1[1], v1[2]);
}

unint64_t sub_100312190(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      unint64_t result = 1701869940;
      break;
    case 3:
      unint64_t result = 0x72656469766F7270;
      break;
    case 4:
      unint64_t result = 0x6574726F70707573;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    case 7:
      unint64_t result = 0x726F4D6E7261656CLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    case 9:
      unint64_t result = 0x65726564726F6E75;
      break;
    case 10:
      unint64_t result = 0xD000000000000027;
      break;
    case 11:
      unint64_t result = 0xD000000000000024;
      break;
    case 12:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 13:
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    case 14:
      unint64_t result = 0xD000000000000016;
      break;
    case 15:
      unint64_t result = 0x70536E6F69676572;
      break;
    case 17:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1003123C4(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      unint64_t result = 1701869940;
      break;
    case 3:
      unint64_t result = 0x72656469766F7270;
      break;
    case 4:
      unint64_t result = 0x6574726F70707573;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    case 7:
      unint64_t result = 0x726F4D6E7261656CLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    case 9:
      unint64_t result = 0x65726564726F6E75;
      break;
    case 10:
      unint64_t result = 0xD000000000000027;
      break;
    case 11:
      unint64_t result = 0xD000000000000024;
      break;
    case 12:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 13:
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    case 14:
      unint64_t result = 0xD000000000000016;
      break;
    case 15:
      unint64_t result = 0x70536E6F69676572;
      break;
    case 17:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003125F8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1003328A0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100312190);
}

Swift::Int sub_100312610(uint64_t a1, uint64_t a2)
{
  return sub_100332950(a1, a2, (void (*)(uint64_t))sub_100312190);
}

uint64_t sub_100312628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003329D4(a1, a2, a3, (void (*)(void))sub_100312190);
}

Swift::Int sub_100312640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100332A44(a1, a2, a3, (void (*)(uint64_t))sub_100312190);
}

uint64_t sub_100312658@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100343D28();
  *a1 = result;
  return result;
}

unint64_t sub_100312698@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100312190(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1003126C4()
{
  return sub_1003123C4(*v0);
}

uint64_t sub_1003126CC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100343D28();
  *a1 = result;
  return result;
}

uint64_t sub_100312704(uint64_t a1)
{
  unint64_t v2 = sub_10033E2B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100312740(uint64_t a1)
{
  unint64_t v2 = sub_10033E2B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031277C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v3 = sub_100007764(&qword_100722310);
  __chkstk_darwin(v3 - 8);
  uint64_t v70 = (char *)v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_10072B098);
  uint64_t v69 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v7 = (char *)v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  uint64_t v9 = (int *)__chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v12 = (char *)v11 + v9[13];
  *(void *)char v12 = 0;
  unsigned char v12[8] = 1;
  char v13 = (char *)v11 + v9[14];
  *(void *)char v13 = 0;
  unsigned char v13[8] = 1;
  uint64_t v14 = (char *)v11 + v9[15];
  *(void *)uint64_t v14 = 0;
  v14[8] = 1;
  uint64_t v15 = (char *)v11 + v9[16];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v72 = a1;
  uint64_t v73 = (uint64_t *)v15;
  uint64_t v16 = v9[17];
  *((unsigned char *)v11 + v16) = 2;
  uint64_t v75 = v9[19];
  uint64_t v76 = v9;
  *(uint64_t *)((char *)v11 + v75) = 0;
  uint64_t v74 = v9[20];
  uint64_t v77 = v11;
  *(uint64_t *)((char *)v11 + v74) = 0;
  sub_10000C728(a1, a1[3]);
  sub_10033E2B4();
  uint64_t v17 = v71;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    os_log_type_t v71 = (uint64_t *)v14;
    id v66 = (uint64_t *)v13;
    Swift::String v67 = (uint64_t *)v12;
    uint64_t v65 = v16;
    uint64_t v19 = v69;
    uint64_t v18 = (uint64_t)v70;
    LOBYTE(v79) = 0;
    uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v22 = v77;
    *uint64_t v77 = v20;
    v22[1] = v23;
    LOBYTE(v79) = 1;
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
    char v25 = v76;
    v22[2] = v24;
    _OWORD v22[3] = v26;
    LOBYTE(v79) = 3;
    v22[4] = KeyedDecodingContainer.decode(_:forKey:)();
    v22[5] = v27;
    LOBYTE(v79) = 4;
    v22[6] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v22[7] = v28;
    uint64_t v29 = sub_100007764(&qword_1007268F0);
    char v78 = 5;
    v64[1] = sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v64[0] = v29;
    uint64_t v30 = v79;
    if (!v79) {
      uint64_t v30 = _swiftEmptyArrayStorage;
    }
    v22[8] = (uint64_t)v30;
    type metadata accessor for HardwareAttestationType();
    LOBYTE(v79) = 6;
    sub_10033E308(&qword_1007224C0, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v18, (uint64_t)v22 + v25[9], &qword_100722310);
    LOBYTE(v79) = 7;
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v32 = (uint64_t *)((char *)v22 + v25[11]);
    *char v32 = v31;
    v32[1] = v33;
    sub_100007764(&qword_10072B0A8);
    uint64_t v70 = v7;
    char v78 = 8;
    sub_10033E3A4(&qword_10072B0B0, &qword_10072B0A8, (void (*)(void))sub_10033E350);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(uint64_t *)((char *)v22 + v25[10]) = (uint64_t)v79;
    sub_100007764(&qword_100722518);
    char v78 = 9;
    sub_1000B5C70();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(uint64_t *)((char *)v22 + v25[12]) = (uint64_t)v79;
    sub_100007764(&qword_100726808);
    char v78 = 15;
    sub_1001D87AC(&qword_100726810);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    unint64_t v34 = (unint64_t)v79;
    if (!v79) {
      unint64_t v34 = sub_10015CF20((uint64_t)_swiftEmptyArrayStorage);
    }
    *(uint64_t *)((char *)v77 + v75) = v34;
    sub_100007764(&qword_10072B0C0);
    char v78 = 16;
    sub_10033E3A4(&qword_10072B0C8, &qword_10072B0C0, (void (*)(void))sub_10033E410);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v35 = v79;
    if (!v79) {
      uint64_t v35 = _swiftEmptyArrayStorage;
    }
    *(uint64_t *)((char *)v77 + v74) = (uint64_t)v35;
    char v78 = 17;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    os_log_type_t v36 = v79;
    if (!v79) {
      os_log_type_t v36 = _swiftEmptyArrayStorage;
    }
    *(uint64_t *)((char *)v77 + v76[18]) = (uint64_t)v36;
    unint64_t v37 = self;
    id v38 = [v37 standardUserDefaults:v64[0]];
    v39._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
    v39._uint64_t object = (void *)0x8000000100649BA0;
    Swift::Bool v40 = NSUserDefaults.internalBool(forKey:)(v39);

    if (v40)
    {
      char v41 = 0;
      uint64_t v42 = 300;
    }
    else
    {
      LOBYTE(v79) = 12;
      uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      char v41 = v43 & 1;
    }
    uint64_t v44 = v71;
    *os_log_type_t v71 = v42;
    *((unsigned char *)v44 + 8) = v41;
    id v45 = [v37 standardUserDefaults];
    v46._uint64_t object = (void *)0x8000000100649BE0;
    v46._uint64_t countAndFlagsBits = 0xD000000000000021;
    Swift::Bool v47 = NSUserDefaults.internalBool(forKey:)(v46);

    if (v47)
    {
      uint64_t v48 = 0;
      char v49 = 0;
    }
    else
    {
      LOBYTE(v79) = 10;
      uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      char v49 = v50 & 1;
    }
    uint64_t v51 = v67;
    *Swift::String v67 = v48;
    *((unsigned char *)v51 + 8) = v49;
    id v52 = [v37 standardUserDefaults];
    v53._uint64_t countAndFlagsBits = 0xD000000000000029;
    v53._uint64_t object = (void *)0x8000000100649C10;
    Swift::Bool v54 = NSUserDefaults.internalBool(forKey:)(v53);

    if (v54)
    {
      char v55 = 0;
      uint64_t v56 = 1000000000;
    }
    else
    {
      LOBYTE(v79) = 11;
      uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      char v55 = v57 & 1;
    }
    uint64_t v58 = v66;
    *id v66 = v56;
    *((unsigned char *)v58 + 8) = v55;
    LOBYTE(v79) = 13;
    uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    os_log_type_t v60 = v73;
    *uint64_t v73 = v59;
    v60[1] = v61;
    LOBYTE(v79) = 14;
    char v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v70, v5);
    uint64_t v63 = (uint64_t)v77;
    *((unsigned char *)v77 + v65) = v62;
    sub_10035C2C4(v63, v68, type metadata accessor for IdentityProofingStaticWorkflow);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v72);
    return sub_10035C32C(v63, type metadata accessor for IdentityProofingStaticWorkflow);
  }
}

uint64_t sub_100313338@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10031277C(a1, a2);
}

unint64_t sub_100313350(char a1)
{
  unint64_t result = 0x4874736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x776F6C666B726F77;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x61746144766469;
      break;
    case 5:
      unint64_t result = 0x6465696669726576;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 0x6974726F70707573;
      break;
    case 8:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 9:
      unint64_t result = 0x65646F4E61746164;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    case 11:
      unint64_t result = 0x696C696261706163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10031350C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C8E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100402028();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = *((void *)v3 + 2);
  uint64_t v10 = *((void *)v3 + 3);
  long long v14 = *v3;
  *(void *)&long long v15 = v9;
  *((void *)&v15 + 1) = v10;
  char v17 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v11 = v3[3];
    long long v14 = v3[2];
    long long v15 = v11;
    long long v16 = v3[4];
    char v17 = 1;
    sub_1003FD160();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = (int *)type metadata accessor for IdentityProofingRequest(0);
    LOBYTE(v14) = 3;
    type metadata accessor for HardwareAttestationType();
    sub_10033E308(&qword_100722548, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[8]);
    char v17 = 4;
    sub_100007764(&qword_10072C888);
    sub_100402210();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[9]);
    char v17 = 5;
    sub_100007764(&qword_10072C7D0);
    sub_100401E34();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[10]);
    char v17 = 6;
    sub_100007764(&qword_10072C720);
    sub_100401ABC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[11]);
    char v17 = 7;
    sub_100007764(&qword_10072C848);
    sub_10033E3A4(&qword_10072C868, &qword_10072C848, (void (*)(void))sub_100401FD4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[12]);
    char v17 = 8;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[13]);
    char v17 = 9;
    sub_100007764(&qword_10072C8A0);
    sub_10033E3A4(&qword_10072C8F8, &qword_10072C8A0, (void (*)(void))sub_1004022A8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[14]);
    char v17 = 10;
    sub_100007764(&qword_10072C8B8);
    sub_10033E3A4(&qword_10072C908, &qword_10072C8B8, (void (*)(void))sub_1004022FC);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[15]);
    char v17 = 11;
    sub_100007764(&qword_10072C5E8);
    sub_10033E3A4(&qword_10072C5F0, &qword_10072C5E8, (void (*)(void))sub_1003FF6C8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100313AE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = type metadata accessor for HardwareAttestationType();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  __chkstk_darwin(v3);
  char v32 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_10072C878);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = (int *)type metadata accessor for IdentityProofingRequest(0);
  __chkstk_darwin(v12);
  long long v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(void *)long long v14 = 0;
  *((void *)v14 + 1) = 0xE000000000000000;
  *((void *)v14 + 2) = v15;
  *((void *)v14 + 3) = v17;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  uint64_t v44 = v12[9];
  *(void *)&v14[v44] = 0;
  uint64_t v41 = v12[10];
  *(void *)&v14[v41] = 0;
  uint64_t v42 = v12[12];
  *(void *)&v14[v42] = 0;
  uint64_t v40 = v12[13];
  *(void *)&v14[v40] = 0;
  uint64_t v39 = v12[14];
  *(void *)&v14[v39] = 0;
  uint64_t v18 = v12[15];
  if (qword_10071F518 != -1) {
    swift_once();
  }
  uint64_t v38 = v18;
  *(void *)&v14[v18] = qword_100760380;
  uint64_t v19 = a1[3];
  char v43 = a1;
  sub_10000C728(a1, v19);
  sub_100402028();
  swift_bridgeObjectRetain();
  uint64_t v20 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000AAC30(*((void *)v14 + 4), *((void *)v14 + 5));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v48 = 0;
    sub_1003FCE54();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v21 = v7;
    uint64_t v22 = v41;
    swift_bridgeObjectRelease();
    long long v23 = v46;
    *(_OWORD *)long long v14 = v45;
    *((_OWORD *)v14 + 1) = v23;
    char v48 = 1;
    sub_1003FCEA8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v24 = v46;
    *((_OWORD *)v14 + 2) = v45;
    *((_OWORD *)v14 + 3) = v24;
    *((_OWORD *)v14 + 4) = v47;
    LOBYTE(v45) = 2;
    *((void *)v14 + 10) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v14 + 11) = v26;
    LOBYTE(v45) = 3;
    sub_10033E308(&qword_1007224C0, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    uint64_t v27 = v32;
    uint64_t v28 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v14[v12[7]], v27, v28);
    sub_100007764(&qword_10072C888);
    char v48 = 4;
    sub_10040207C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v14[v12[8]] = v45;
    sub_100007764(&qword_10072C7D0);
    char v48 = 5;
    sub_100401D3C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)&v14[v44] = v45;
    sub_100007764(&qword_10072C720);
    char v48 = 6;
    sub_1004018E8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)&v14[v22] = v45;
    sub_100007764(&qword_10072C848);
    char v48 = 7;
    sub_10033E3A4(&qword_10072C850, &qword_10072C848, (void (*)(void))sub_100401F80);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v14[v12[11]] = v45;
    sub_100007764(&qword_1007268F0);
    char v48 = 8;
    sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)&v14[v42] = v45;
    sub_100007764(&qword_10072C8A0);
    char v48 = 9;
    sub_10033E3A4(&qword_10072C8A8, &qword_10072C8A0, (void (*)(void))sub_100402114);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)&v14[v40] = v45;
    sub_100007764(&qword_10072C8B8);
    char v48 = 10;
    sub_10033E3A4(&qword_10072C8C0, &qword_10072C8B8, (void (*)(void))sub_100402168);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)&v14[v39] = v45;
    sub_100007764(&qword_10072C5E8);
    char v48 = 11;
    sub_10033E3A4(&qword_10072C8D0, &qword_10072C5E8, (void (*)(void))sub_1004021BC);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v34);
    uint64_t v29 = v45;
    uint64_t v30 = v38;
    swift_bridgeObjectRelease();
    *(void *)&v14[v30] = v29;
    sub_10035C2C4((uint64_t)v14, v31, type metadata accessor for IdentityProofingRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v43);
    return sub_10035C32C((uint64_t)v14, type metadata accessor for IdentityProofingRequest);
  }
}

unint64_t sub_10031457C()
{
  return sub_100313350(*v0);
}

uint64_t sub_100314584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003431E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003145AC(uint64_t a1)
{
  unint64_t v2 = sub_100402028();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003145E8(uint64_t a1)
{
  unint64_t v2 = sub_100402028();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100314628@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100313AE4(a1, a2);
}

uint64_t sub_100314640(void *a1)
{
  return sub_10031350C(a1);
}

uint64_t sub_100314658@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v44 = type metadata accessor for DIPError.Code();
  uint64_t v43 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  long long v45 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for DIPCertUsage();
  uint64_t v48 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  char v50 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for DIPOIDVerifier();
  uint64_t v47 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  char v49 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_100726700);
  __chkstk_darwin(v6 - 8);
  Swift::String v53 = (void (**)(char *, uint64_t))((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100007764(&qword_10072CC48);
  uint64_t v54 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for IdentityProofingResponse(0);
  char v12 = (int *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v14 + 12) = 0;
  *((void *)v14 + 13) = 0;
  *((void *)v14 + 14) = 0;
  uint64_t v15 = (uint64_t)&v14[v12[9]];
  uint64_t v16 = type metadata accessor for VerifiedClaim(0);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v56 = v15;
  v17(v15, 1, 1, v16);
  uint64_t v58 = v12[10];
  *(void *)&v14[v58] = 0;
  uint64_t v18 = v12[11];
  *(void *)&v14[v18] = 0;
  uint64_t v19 = a1[3];
  char v55 = a1;
  sub_10000C728(a1, v19);
  sub_1004035AC();
  uint64_t v20 = v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v55);
    uint64_t v22 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v22, &qword_100726700);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    uint64_t v21 = v54;
    char v66 = 0;
    sub_1002390F0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v57 = v18;
    long long v25 = v60;
    long long v24 = v61;
    uint64_t v26 = v62;
    uint64_t v27 = v63;
    *(_OWORD *)long long v14 = v59;
    *((_OWORD *)v14 + 1) = v25;
    *((_OWORD *)v14 + 2) = v24;
    *((void *)v14 + 6) = v26;
    *((void *)v14 + 7) = v27;
    long long v28 = v65;
    *((_OWORD *)v14 + 4) = v64;
    *((_OWORD *)v14 + 5) = v28;
    LOBYTE(v59) = 1;
    *((void *)v14 + 12) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v14 + 13) = v29;
    sub_100007764(&qword_1007268F0);
    uint64_t v30 = v10;
    char v66 = 2;
    sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *((void *)v14 + 14) = v59;
    LOBYTE(v59) = 3;
    sub_10033E308(&qword_10072CC58, (void (*)(uint64_t))type metadata accessor for VerifiedClaim);
    uint64_t v31 = (uint64_t)v53;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1001D9214(v31, v56, &qword_100726700);
    sub_100007764(&qword_10072C720);
    char v66 = 4;
    sub_1004018E8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v32 = v8;
    uint64_t v33 = v58;
    uint64_t v34 = v59;
    swift_bridgeObjectRelease();
    *(void *)&v14[v33] = v34;
    uint64_t v35 = v32;
    uint64_t v36 = v10;
    type metadata accessor for LegacyWorkflowPackage(0);
    char v66 = 5;
    sub_10033E308(&qword_10072CC60, (void (*)(uint64_t))type metadata accessor for LegacyWorkflowPackage);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v37 = v59;
    uint64_t v38 = v57;
    swift_release();
    *(void *)&v14[v38] = v37;
    if (*((void *)v14 + 14))
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = v49;
      DIPOIDVerifier.init()();
      uint64_t v40 = v48 + 104;
      uint64_t v41 = v50;
      (*(void (**)(char *, void, uint64_t))(v48 + 104))(v50, enum case for DIPCertUsage.clientIdentity(_:), v52);
      uint64_t v42 = (void *)DIPOIDVerifier.verifyChain(fromBase64DER:forUsage:)();
      Swift::String v53 = (void (**)(char *, uint64_t))(v47 + 8);

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 - 96))(v41, v52);
      (*v53)(v39, v51);
      uint64_t v36 = v30;
      uint64_t v21 = v54;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v36, v35);
    sub_10035C2C4((uint64_t)v14, v46, type metadata accessor for IdentityProofingResponse);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v55);
    return sub_10035C32C((uint64_t)v14, type metadata accessor for IdentityProofingResponse);
  }
}

unint64_t sub_100315028(char a1)
{
  unint64_t result = 0x65736E6F70736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x45656D69746E7572;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x6465696669726576;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x6B726F577478656ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100315128(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CC68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004035AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = v3[1];
  long long v9 = v3[2];
  uint64_t v11 = *((void *)v3 + 6);
  uint64_t v12 = *((void *)v3 + 7);
  long long v18 = *v3;
  long long v19 = v10;
  long long v20 = v9;
  uint64_t v21 = v11;
  uint64_t v22 = v12;
  long long v13 = v3[5];
  long long v23 = v3[4];
  long long v24 = v13;
  char v17 = 0;
  sub_100402DB8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v18) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v18 = *((void *)v3 + 14);
    char v17 = 2;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v14 = type metadata accessor for IdentityProofingResponse(0);
    LOBYTE(v18) = 3;
    type metadata accessor for VerifiedClaim(0);
    sub_10033E308(&qword_10072CC70, (void (*)(uint64_t))type metadata accessor for VerifiedClaim);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)((char *)v3 + *(int *)(v14 + 32));
    char v17 = 4;
    sub_100007764(&qword_10072C720);
    sub_100401ABC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)((char *)v3 + *(int *)(v14 + 36));
    char v17 = 5;
    type metadata accessor for LegacyWorkflowPackage(0);
    sub_10033E308(&qword_10072CC20, (void (*)(uint64_t))type metadata accessor for LegacyWorkflowPackage);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100315480(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C568);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1003FF32C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[0] = *v3;
  char v11 = 0;
  sub_1003FF428();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    memcpy(v10, v3 + 8, sizeof(v10));
    char v11 = 1;
    sub_1003FF47C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100315624(char a1)
{
  uint64_t result = 0x3731345F666470;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x616E5F7473726966;
      break;
    case 2:
      uint64_t v3 = 0x656C6464696DLL;
      goto LABEL_14;
    case 3:
      uint64_t result = 0x6D616E5F7473616CLL;
      break;
    case 4:
    case 5:
      uint64_t result = 0x5F73736572646461;
      break;
    case 6:
      uint64_t result = 2037672291;
      break;
    case 7:
      uint64_t result = 0x6574617473;
      break;
    case 8:
      uint64_t result = 0x635F6C6174736F70;
      break;
    case 9:
      uint64_t result = 0x7972746E756F63;
      break;
    case 10:
      uint64_t result = 6451044;
      break;
    case 11:
      uint64_t result = 0x726575737369;
      break;
    case 12:
      uint64_t result = 0x61636F6C5F737067;
      break;
    case 13:
      uint64_t v3 = 0x656369766564;
LABEL_14:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6E5F000000000000;
      break;
    case 14:
      uint64_t result = 1684628851;
      break;
    case 15:
      uint64_t result = 0x6469636369;
      break;
    case 16:
      uint64_t result = 0x756E5F656E6F6870;
      break;
    case 17:
      uint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100315844(char a1)
{
  uint64_t result = 0x3731345F666470;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x616E5F7473726966;
      break;
    case 2:
      uint64_t v3 = 0x656C6464696DLL;
      goto LABEL_14;
    case 3:
      uint64_t result = 0x6D616E5F7473616CLL;
      break;
    case 4:
    case 5:
      uint64_t result = 0x5F73736572646461;
      break;
    case 6:
      uint64_t result = 2037672291;
      break;
    case 7:
      uint64_t result = 0x6574617473;
      break;
    case 8:
      uint64_t result = 0x635F6C6174736F70;
      break;
    case 9:
      uint64_t result = 0x7972746E756F63;
      break;
    case 10:
      uint64_t result = 6451044;
      break;
    case 11:
      uint64_t result = 0x726575737369;
      break;
    case 12:
      uint64_t result = 0x61636F6C5F737067;
      break;
    case 13:
      uint64_t v3 = 0x656369766564;
LABEL_14:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6E5F000000000000;
      break;
    case 14:
      uint64_t result = 1684628851;
      break;
    case 15:
      uint64_t result = 0x6469636369;
      break;
    case 16:
      uint64_t result = 0x756E5F656E6F6870;
      break;
    case 17:
      uint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100315A64()
{
  return sub_100315028(*v0);
}

uint64_t sub_100315A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100343748(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100315A94(uint64_t a1)
{
  unint64_t v2 = sub_1004035AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100315AD0(uint64_t a1)
{
  unint64_t v2 = sub_1004035AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100315B0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100314658(a1, a2);
}

uint64_t sub_100315B24(void *a1)
{
  return sub_100315128(a1);
}

uint64_t sub_100315B3C(unsigned __int8 *a1, char *a2)
{
  return sub_10047226C(*a1, *a2);
}

Swift::Int sub_100315B48()
{
  return sub_1004729E4();
}

uint64_t sub_100315B50()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100315C1C()
{
  return sub_100472F88();
}

unint64_t sub_100315C24@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006F2C08;
  unint64_t result = sub_10035E378(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100315C5C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 5919309;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 5391183;
      goto LABEL_3;
    case 2:
      *a1 = 0x454349564544;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0xD000000000000013;
      a1[1] = 0x800000010062A1E0;
      break;
    case 4:
      *a1 = 0x4E495F444559454BLL;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE300000000000000;
      break;
  }
}

uint64_t sub_100315D04()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100315D64()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100315DB4()
{
  if (*v0) {
    return 1635017060;
  }
  else {
    return 0x72756F5361746164;
  }
}

uint64_t sub_100315DEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100343A34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100315E14(uint64_t a1)
{
  unint64_t v2 = sub_1003FF32C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100315E50(uint64_t a1)
{
  unint64_t v2 = sub_1003FF32C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100315E8C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100343B24(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x120uLL);
  }
  return result;
}

uint64_t sub_100315EE0(void *a1)
{
  return sub_100315480(a1);
}

uint64_t sub_100315EFC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1003328A0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100315624);
}

Swift::Int sub_100315F14(uint64_t a1, uint64_t a2)
{
  return sub_100332950(a1, a2, (void (*)(uint64_t))sub_100315624);
}

uint64_t sub_100315F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003329D4(a1, a2, a3, (void (*)(void))sub_100315624);
}

Swift::Int sub_100315F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100332A44(a1, a2, a3, (void (*)(uint64_t))sub_100315624);
}

uint64_t sub_100315F5C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100343D28();
  *a1 = result;
  return result;
}

uint64_t sub_100315F9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100315624(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100315FC8()
{
  return sub_100315844(*v0);
}

uint64_t sub_100315FD0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100343D28();
  *a1 = result;
  return result;
}

uint64_t sub_100316008(uint64_t a1)
{
  unint64_t v2 = sub_100404AB8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100316044(uint64_t a1)
{
  unint64_t v2 = sub_100404AB8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100316080(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072D048);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100404AB8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14(v3 + 16, (uint64_t)v12, &qword_10072B2C0);
    sub_1000BEA14((uint64_t)v12, (uint64_t)v11, &qword_10072B2C0);
    v10[15] = 12;
    sub_100007764(&qword_10072B2A8);
    sub_1000AB18C(&qword_10072B2C8, &qword_10072B2A8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[0] = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

void *sub_1003164D0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100343D70(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x118uLL);
  }
  return result;
}

uint64_t sub_100316524(void *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return sub_100316080(a1);
}

uint64_t sub_100316578()
{
  _StringGuts.grow(_:)(227);
  v1._uint64_t countAndFlagsBits = 0x6144373134666470;
  v1._uint64_t object = (void *)0xEC000000203A6174;
  String.append(_:)(v1);
  uint64_t v2 = v0[1];
  if (v2) {
    uint64_t v3 = *v0;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2) {
    uint64_t v4 = (void *)v0[1];
  }
  else {
    uint64_t v4 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._uint64_t object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x6E5F74737269660ALL;
  v6._uint64_t object = (void *)0xED0000203A656D61;
  String.append(_:)(v6);
  uint64_t v7 = v0[12];
  if (v7) {
    uint64_t v8 = v0[11];
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7) {
    long long v9 = (void *)v0[12];
  }
  else {
    long long v9 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = v8;
  v10._uint64_t object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x5F656C6464696D0ALL;
  v11._uint64_t object = (void *)0xEE00203A656D616ELL;
  String.append(_:)(v11);
  uint64_t v12 = v0[14];
  if (v12) {
    uint64_t v13 = v0[13];
  }
  else {
    uint64_t v13 = 0;
  }
  if (v12) {
    uint64_t v14 = (void *)v0[14];
  }
  else {
    uint64_t v14 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v13;
  v15._uint64_t object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t object = (void *)0xEC000000203A656DLL;
  v16._uint64_t countAndFlagsBits = 0x616E5F7473616C0ALL;
  String.append(_:)(v16);
  uint64_t v17 = v0[16];
  if (v17) {
    uint64_t v18 = v0[15];
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17) {
    long long v19 = (void *)v0[16];
  }
  else {
    long long v19 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = v18;
  v20._uint64_t object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t object = (void *)0x8000000100649B60;
  v21._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v21);
  uint64_t v22 = v0[18];
  if (v22) {
    uint64_t v23 = v0[17];
  }
  else {
    uint64_t v23 = 0;
  }
  if (v22) {
    long long v24 = (void *)v0[18];
  }
  else {
    long long v24 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v25._uint64_t countAndFlagsBits = v23;
  v25._uint64_t object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t object = (void *)0x8000000100649B80;
  v26._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v26);
  uint64_t v27 = v0[20];
  if (v27) {
    uint64_t v28 = v0[19];
  }
  else {
    uint64_t v28 = 0;
  }
  if (v27) {
    uint64_t v29 = (void *)v0[20];
  }
  else {
    uint64_t v29 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = v28;
  v30._uint64_t object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0x203A797469630ALL;
  v31._uint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v31);
  uint64_t v32 = v0[22];
  if (v32) {
    uint64_t v33 = v0[21];
  }
  else {
    uint64_t v33 = 0;
  }
  if (v32) {
    uint64_t v34 = (void *)v0[22];
  }
  else {
    uint64_t v34 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v35._uint64_t countAndFlagsBits = v33;
  v35._uint64_t object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 0x203A65746174730ALL;
  v36._uint64_t object = (void *)0xE800000000000000;
  String.append(_:)(v36);
  uint64_t v37 = v0[24];
  if (v37) {
    uint64_t v38 = v0[23];
  }
  else {
    uint64_t v38 = 0;
  }
  if (v37) {
    uint64_t v39 = (void *)v0[24];
  }
  else {
    uint64_t v39 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v40._uint64_t countAndFlagsBits = v38;
  v40._uint64_t object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = 0x5F6C6174736F700ALL;
  v41._uint64_t object = (void *)0xEE00203A65646F63;
  String.append(_:)(v41);
  uint64_t v42 = v0[26];
  if (v42) {
    uint64_t v43 = v0[25];
  }
  else {
    uint64_t v43 = 0;
  }
  if (v42) {
    uint64_t v44 = (void *)v0[26];
  }
  else {
    uint64_t v44 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v45._uint64_t countAndFlagsBits = v43;
  v45._uint64_t object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._uint64_t countAndFlagsBits = 0x7972746E756F630ALL;
  v46._uint64_t object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v46);
  uint64_t v47 = v0[28];
  if (v47) {
    uint64_t v48 = v0[27];
  }
  else {
    uint64_t v48 = 0;
  }
  if (v47) {
    char v49 = (void *)v0[28];
  }
  else {
    char v49 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v50._uint64_t countAndFlagsBits = v48;
  v50._uint64_t object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._uint64_t countAndFlagsBits = 0x203A626F640ALL;
  v51._uint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v51);
  uint64_t v52 = v0[30];
  if (v52) {
    uint64_t v53 = v0[29];
  }
  else {
    uint64_t v53 = 0;
  }
  if (v52) {
    uint64_t v54 = (void *)v0[30];
  }
  else {
    uint64_t v54 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v55._uint64_t countAndFlagsBits = v53;
  v55._uint64_t object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._uint64_t countAndFlagsBits = 0x3A7265757373690ALL;
  v56._uint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v56);
  uint64_t v57 = v0[32];
  if (v57) {
    uint64_t v58 = v0[31];
  }
  else {
    uint64_t v58 = 0;
  }
  if (v57) {
    long long v59 = (void *)v0[32];
  }
  else {
    long long v59 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v60._uint64_t countAndFlagsBits = v58;
  v60._uint64_t object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._uint64_t countAndFlagsBits = 0x61636F4C7370670ALL;
  v61._uint64_t object = (void *)0xEE00203A6E6F6974;
  String.append(_:)(v61);
  swift_bridgeObjectRetain();
  v62._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v63._uint64_t countAndFlagsBits = 0x4E6563697665640ALL;
  v63._uint64_t object = (void *)0xED0000203A656D61;
  String.append(_:)(v63);
  uint64_t v64 = v0[4];
  if (v64) {
    uint64_t v65 = v0[3];
  }
  else {
    uint64_t v65 = 0;
  }
  if (v64) {
    char v66 = (void *)v0[4];
  }
  else {
    char v66 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v67._uint64_t countAndFlagsBits = v65;
  v67._uint64_t object = v66;
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 0x203A646965730ALL;
  v68._uint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v68);
  uint64_t v69 = v0[6];
  if (v69) {
    uint64_t v70 = v0[5];
  }
  else {
    uint64_t v70 = 0;
  }
  if (v69) {
    os_log_type_t v71 = (void *)v0[6];
  }
  else {
    os_log_type_t v71 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v72._uint64_t countAndFlagsBits = v70;
  v72._uint64_t object = v71;
  String.append(_:)(v72);
  swift_bridgeObjectRelease();
  v73._uint64_t countAndFlagsBits = 0x203A64696363690ALL;
  v73._uint64_t object = (void *)0xE800000000000000;
  String.append(_:)(v73);
  uint64_t v74 = v0[8];
  if (v74) {
    uint64_t v75 = v0[7];
  }
  else {
    uint64_t v75 = 0;
  }
  if (v74) {
    uint64_t v76 = (void *)v0[8];
  }
  else {
    uint64_t v76 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v77._uint64_t countAndFlagsBits = v75;
  v77._uint64_t object = v76;
  String.append(_:)(v77);
  swift_bridgeObjectRelease();
  v78._uint64_t countAndFlagsBits = 0x754E656E6F68700ALL;
  v78._uint64_t object = (void *)0xEE00203A7265626DLL;
  String.append(_:)(v78);
  uint64_t v79 = v0[10];
  if (v79) {
    uint64_t v80 = v0[9];
  }
  else {
    uint64_t v80 = 0;
  }
  if (v79) {
    uint64_t v81 = (void *)v0[10];
  }
  else {
    uint64_t v81 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v82._uint64_t countAndFlagsBits = v80;
  v82._uint64_t object = v81;
  String.append(_:)(v82);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100316B18(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C528);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1003FF230();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  sub_100007764(&qword_100728588);
  sub_1000B6120(&qword_10072C530, &qword_100728588);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + *(int *)(type metadata accessor for ProofingData(0) + 20));
    v10[15] = 1;
    sub_100007764(&qword_10072C510);
    sub_10033E3A4(&qword_10072C538, &qword_10072C510, (void (*)(void))sub_1003FF2D8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100316D20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = sub_100007764(&qword_100728598);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_10072C4F8);
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  __chkstk_darwin(v7);
  long long v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ProofingData(0);
  __chkstk_darwin(v10);
  char v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FF230();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v19 = v10;
  uint64_t v13 = (uint64_t)v12;
  uint64_t v14 = v21;
  sub_100007764(&qword_100728588);
  char v25 = 0;
  sub_1000B6120(&qword_10072C508, &qword_100728588);
  uint64_t v15 = v22;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000BEA14((uint64_t)v6, v13, &qword_100728598);
  sub_100007764(&qword_10072C510);
  char v24 = 1;
  sub_10033E3A4(&qword_10072C518, &qword_10072C510, (void (*)(void))sub_1003FF284);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
  uint64_t v16 = v20;
  *(void *)(v13 + *(int *)(v19 + 20)) = v23;
  sub_10035C2C4(v13, v16, type metadata accessor for ProofingData);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return sub_10035C32C(v13, type metadata accessor for ProofingData);
}

uint64_t sub_100317078(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CD20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100403794();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 48);
    long long v12 = *(_OWORD *)(v3 + 32);
    long long v13 = v9;
    uint64_t v14 = *(void *)(v3 + 64);
    v11[15] = 2;
    sub_10040383C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100317220(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072D948);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10040C2D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1003173A8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10072D8C0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040BEE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_100007764(&qword_10072D8A0);
  sub_10040C008();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1003174F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a3;
  uint64_t v8 = sub_100007764(&qword_10072CB98);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004031F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v14 = 0;
  sub_100007764(&qword_100724130);
  sub_1004032D8();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = v13;
    char v14 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v15 = a4;
    char v14 = 2;
    sub_100007764(&qword_10072CB88);
    sub_10033E3A4(&qword_10072CBB0, &qword_10072CB88, (void (*)(void))sub_1004032D8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10031771C(char a1)
{
  uint64_t result = 0x656E697272756C62;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x657275736F707865;
      break;
    case 2:
      uint64_t result = 0x7473694464726163;
      break;
    case 3:
    case 16:
    case 27:
    case 32:
    case 34:
      uint64_t result = 0xD000000000000010;
      break;
    case 4:
      uint64_t result = 0xD000000000000011;
      break;
    case 5:
      uint64_t result = 0x6374695064616568;
      break;
    case 6:
      uint64_t result = 0x6C6C6F5264616568;
      break;
    case 7:
      uint64_t result = 0x77615964616568;
      break;
    case 8:
      uint64_t result = 0xD000000000000012;
      break;
    case 9:
      uint64_t result = 0xD000000000000016;
      break;
    case 10:
      uint64_t result = 0xD000000000000014;
      break;
    case 11:
      uint64_t result = 0xD000000000000012;
      break;
    case 12:
      uint64_t result = 0xD000000000000012;
      break;
    case 13:
      uint64_t result = 0x5465727574706163;
      break;
    case 14:
      uint64_t result = 0xD000000000000012;
      break;
    case 15:
    case 17:
    case 31:
    case 35:
      uint64_t result = 0x746E656D75636F64;
      break;
    case 18:
      unsigned int v3 = 1952867692;
      goto LABEL_19;
    case 19:
      uint64_t result = 0x6972447468676972;
      break;
    case 20:
      uint64_t result = 0x74666972447075;
      break;
    case 21:
      unsigned int v3 = 1853321060;
LABEL_19:
      uint64_t result = v3 | 0x6669724400000000;
      break;
    case 22:
      uint64_t result = 0x666E6F4365636166;
      break;
    case 23:
      uint64_t result = 0xD000000000000013;
      break;
    case 24:
      uint64_t result = 0x73656361466D756ELL;
      break;
    case 25:
      uint64_t result = 0x6C6576654C78756CLL;
      break;
    case 26:
      uint64_t result = 0x6544373134666470;
      break;
    case 28:
      uint64_t result = 0x61436F7475417369;
      break;
    case 29:
      uint64_t result = 0x456873616C467369;
      break;
    case 30:
      uint64_t result = 0x754E726575737369;
      break;
    case 33:
      uint64_t result = 0x6556746567726174;
      break;
    case 36:
      uint64_t result = 0xD000000000000014;
      break;
    case 37:
      uint64_t result = 0xD000000000000017;
      break;
    case 38:
      uint64_t result = 0x6365446C65646F6DLL;
      break;
    case 39:
      uint64_t result = 0x7265566C65646F6DLL;
      break;
    case 40:
      uint64_t result = 0x7461726F6C707865;
      break;
    case 41:
      uint64_t result = 0x6F436E6163736572;
      break;
    case 42:
      uint64_t result = 0x7373656E6576696CLL;
      break;
    case 43:
      uint64_t result = 0x646F43726F727265;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100317C6C(void *a1)
{
  unsigned int v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CB20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000C728(a1, a1[3]);
  sub_100402E0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v9 = v3[4];
  v33[0] = 0;
  char v34 = v9;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    char v10 = v3[12];
    v33[0] = 1;
    char v34 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = v3[20];
    v33[0] = 2;
    char v34 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = v3[28];
    v33[0] = 3;
    char v34 = v12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v13 = v3[36];
    v33[0] = 4;
    char v34 = v13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = v3[44];
    v33[0] = 5;
    char v34 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v15 = v3[52];
    v33[0] = 6;
    char v34 = v15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v16 = v3[60];
    v33[0] = 7;
    char v34 = v16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v17 = v3[68];
    v33[0] = 8;
    char v34 = v17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v18 = v3[76];
    v33[0] = 9;
    char v34 = v18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v19 = v3[84];
    v33[0] = 10;
    char v34 = v19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v20 = v3[92];
    v33[0] = 11;
    char v34 = v20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v21 = v3[100];
    v33[0] = 12;
    char v34 = v21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v22 = v3[108];
    v33[0] = 13;
    char v34 = v22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v23 = v3[116];
    v33[0] = 14;
    char v34 = v23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v24 = v3[124];
    v33[0] = 15;
    char v34 = v24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v25 = v3[132];
    v33[0] = 16;
    char v34 = v25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v26 = v3[140];
    v33[0] = 17;
    char v34 = v26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v27 = v3[148];
    v33[0] = 18;
    char v34 = v27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v28 = v3[156];
    v33[0] = 19;
    char v34 = v28;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v29 = v3[164];
    v33[0] = 20;
    char v34 = v29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v30 = v3[172];
    v33[0] = 21;
    char v34 = v30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 176), (uint64_t)v42, &qword_10072CB28);
    sub_1000BEA14((uint64_t)v42, (uint64_t)v33, &qword_10072CB28);
    char v34 = 22;
    sub_100007764(&qword_100722218);
    sub_1000AB18C(&qword_100722230, &qword_100722218);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 184), (uint64_t)v41, &qword_10072CB28);
    sub_1000BEA14((uint64_t)v41, (uint64_t)v33, &qword_10072CB28);
    char v34 = 23;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v33[0] = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 28;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 256), (uint64_t)v40, &qword_10072CB30);
    sub_1000BEA14((uint64_t)v40, (uint64_t)v33, &qword_10072CB30);
    char v34 = 32;
    sub_100007764(&qword_10072CAF0);
    sub_1004030FC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 264), (uint64_t)v39, &qword_10072CB30);
    sub_1000BEA14((uint64_t)v39, (uint64_t)v33, &qword_10072CB30);
    char v34 = 33;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 272), (uint64_t)v38, &qword_10072CB30);
    sub_1000BEA14((uint64_t)v38, (uint64_t)v33, &qword_10072CB30);
    char v34 = 34;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 280), (uint64_t)v37, &qword_10072CB30);
    sub_1000BEA14((uint64_t)v37, (uint64_t)v33, &qword_10072CB30);
    char v34 = 35;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 288), (uint64_t)v36, &qword_10072CB48);
    sub_1000BEA14((uint64_t)v36, (uint64_t)v33, &qword_10072CB48);
    char v34 = 36;
    sub_1004031A0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 400), (uint64_t)&v35, &qword_10072CB58);
    sub_1000BEA14((uint64_t)&v35, (uint64_t)v33, &qword_10072CB58);
    char v34 = 37;
    sub_100007764(&qword_10072CB10);
    sub_1000AB18C(&qword_10072CB60, &qword_10072CB10);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v33[0] = 38;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 39;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 40;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 41;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 42;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v33[0] = 43;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100318800(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072D930);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10040C27C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100318A44(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CFD8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1004047F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v25) = 0;
  sub_100007764(&qword_100723988);
  sub_1000B6120(&qword_10072CD50, &qword_100723988);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v9 = (uint64_t *)(v3 + *(int *)(type metadata accessor for LivenessDataV2(0) + 20));
    char v10 = *((unsigned char *)v9 + 8);
    int v11 = *((_DWORD *)v9 + 8);
    char v12 = *((unsigned char *)v9 + 36);
    int v13 = *((_DWORD *)v9 + 10);
    char v14 = *((unsigned char *)v9 + 44);
    int v15 = *((_DWORD *)v9 + 12);
    char v16 = *((unsigned char *)v9 + 52);
    uint64_t v17 = v9[7];
    uint64_t v18 = *((unsigned __int8 *)v9 + 64);
    uint64_t v19 = v9[9];
    int v20 = *((_DWORD *)v9 + 20);
    char v21 = *((unsigned char *)v9 + 84);
    uint64_t v22 = v9[13];
    uint64_t v25 = *v9;
    char v26 = v10;
    long long v27 = *((_OWORD *)v9 + 1);
    int v28 = v11;
    char v29 = v12;
    int v30 = v13;
    char v31 = v14;
    int v32 = v15;
    char v33 = v16;
    uint64_t v34 = v17;
    char v35 = v18;
    uint64_t v36 = v19;
    int v37 = v20;
    char v38 = v21;
    long long v39 = *(_OWORD *)(v9 + 11);
    uint64_t v40 = v22;
    v24[15] = 1;
    sub_100404898();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100318C84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v34 = sub_100007764(&qword_100723988);
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100007764(&qword_10072CFC0);
  uint64_t v33 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LivenessDataV2(0);
  __chkstk_darwin(v8);
  char v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004047F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v32;
  LOBYTE(v36) = 0;
  sub_1000B6120(&qword_10072C638, &qword_100723988);
  uint64_t v13 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v5, v13);
  char v52 = 1;
  sub_100404844();
  uint64_t v14 = v35;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v14);
  char v15 = v37;
  int v16 = v39;
  char v17 = v40;
  int v18 = v41;
  char v19 = v42;
  int v20 = v43;
  char v21 = v44;
  uint64_t v22 = v45;
  char v23 = v46;
  uint64_t v24 = v47;
  int v25 = v48;
  char v26 = v49;
  uint64_t v27 = v51;
  uint64_t v28 = v11 + *(int *)(v8 + 20);
  *(void *)uint64_t v28 = v36;
  *(unsigned char *)(v28 + 8) = v15;
  *(_OWORD *)(v28 + 16) = v38;
  *(_DWORD *)(v28 + 32) = v16;
  *(unsigned char *)(v28 + 36) = v17;
  *(_DWORD *)(v28 + 40) = v18;
  *(unsigned char *)(v28 + 44) = v19;
  *(_DWORD *)(v28 + 48) = v20;
  *(unsigned char *)(v28 + 52) = v21;
  *(void *)(v28 + 56) = v22;
  *(unsigned char *)(v28 + 64) = v23;
  *(void *)(v28 + 72) = v24;
  *(_DWORD *)(v28 + 80) = v25;
  *(unsigned char *)(v28 + 84) = v26;
  *(_OWORD *)(v28 + 88) = v50;
  *(void *)(v28 + 104) = v27;
  sub_10035C2C4(v11, v31, type metadata accessor for LivenessDataV2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return sub_10035C32C(v11, type metadata accessor for LivenessDataV2);
}

uint64_t sub_100319054(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072B118);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000C728(a1, a1[3]);
  sub_1003494B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000BEA14(v3, (uint64_t)v13, &qword_10072B108);
  sub_1000BEA14((uint64_t)v13, (uint64_t)v11, &qword_10072B108);
  char v14 = 0;
  sub_100349848();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14(v3 + 176, (uint64_t)v12, &qword_10072B128);
    sub_1000BEA14((uint64_t)v12, (uint64_t)v11, &qword_10072B128);
    char v14 = 1;
    sub_10034989C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100319230(char a1)
{
  unint64_t result = 0x6E6F6973726576;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7365727574736567;
      break;
    case 2:
      unint64_t result = 0x746169636F737361;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
    case 19:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0x6C416F54656D6974;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0x6B6174655278616DLL;
      break;
    case 9:
      unint64_t result = 0x546E6F6973736573;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    case 11:
      unint64_t result = 0xD000000000000016;
      break;
    case 12:
      unint64_t result = 0xD000000000000012;
      break;
    case 13:
      unint64_t result = 0xD000000000000015;
      break;
    case 14:
      unint64_t result = 0xD000000000000013;
      break;
    case 15:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 16:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 17:
      unint64_t result = 0x7365726975716572;
      break;
    case 18:
      unint64_t result = 0xD000000000000011;
      break;
    case 20:
      unint64_t result = 0x65526569666C6573;
      break;
    case 21:
      unint64_t result = 0x7541656C62616E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100319518(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072B178);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10034B58C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + 16);
    v10[7] = 1;
    sub_100007764(&qword_10072B160);
    sub_10033E3A4(&qword_10072B180, &qword_10072B160, (void (*)(void))sub_10034B6C8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100319A00(char a1)
{
  unint64_t result = 0x6E6F6973726576;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x746169636F737361;
      break;
    case 2:
      unint64_t result = 0x6B6174655278616DLL;
      break;
    case 3:
      unint64_t result = 0x546E6F6973736573;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0x7365726975716572;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    case 8:
      unint64_t result = 0x6172466C61746F74;
      break;
    case 10:
      unint64_t result = 0x7541656C62616E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100319B9C(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072B148);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10034B538();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    _OWORD v8[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[5] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100319E70(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072C348);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FCA68();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_100319FD8(char a1)
{
  unint64_t result = 0x7373656E6576696CLL;
  switch(a1)
  {
    case 1:
    case 3:
    case 7:
      unint64_t result = 0x656D737365737361;
      break;
    case 2:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 4:
      unint64_t result = 0x6F4C63634E78616DLL;
      break;
    case 5:
      unint64_t result = 0x694863634E78616DLL;
      break;
    case 6:
      unint64_t result = 0x536465726F6E6769;
      break;
    case 8:
      unint64_t result = 0x656D737365737361;
      break;
    case 9:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 10:
      unint64_t result = 0xD000000000000017;
      break;
    case 11:
      unint64_t result = 0x65756C615678756CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10031A194(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072D9A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040C378();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14((uint64_t)(v3 + 16), (uint64_t)v23, &qword_10072CB58);
    sub_1000BEA14((uint64_t)v23, (uint64_t)v17, &qword_10072CB58);
    char v16 = 1;
    sub_100007764(&qword_10072CB10);
    sub_1000AB18C(&qword_10072CB60, &qword_10072CB10);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 24), (uint64_t)v22, &qword_10072D9A8);
    sub_1000BEA14((uint64_t)v22, (uint64_t)v17, &qword_10072D9A8);
    char v16 = 2;
    sub_100007764(&qword_10072D970);
    sub_10040C3CC(&qword_10072D9B0, &qword_10072D9B8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v9 = v3[36];
    v17[0] = 3;
    char v16 = v9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v10 = v3[44];
    v17[0] = 4;
    char v16 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = v3[52];
    v17[0] = 5;
    char v16 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v17[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 72), (uint64_t)v21, &qword_10072D9C0);
    sub_1000BEA14((uint64_t)v21, (uint64_t)v17, &qword_10072D9C0);
    char v16 = 7;
    sub_100007764(&qword_10072D988);
    sub_10033E3A4(&qword_10072D9C8, &qword_10072D988, (void (*)(void))sub_10040C4AC);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = v3[84];
    v17[0] = 8;
    char v16 = v12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 88), (uint64_t)v20, &qword_10072D9D8);
    sub_1000BEA14((uint64_t)v20, (uint64_t)v17, &qword_10072D9D8);
    char v16 = 9;
    uint64_t v13 = sub_100007764(&qword_1007240D8);
    sub_1000AB18C(&qword_10072D9B8, &qword_1007240D8);
    uint64_t v15 = v13;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 96), (uint64_t)v19, &qword_10072D9D8);
    sub_1000BEA14((uint64_t)v19, (uint64_t)v17, &qword_10072D9D8);
    char v16 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 104), (uint64_t)v18, &qword_10072CB58);
    sub_1000BEA14((uint64_t)v18, (uint64_t)v17, &qword_10072CB58);
    char v16 = 11;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10031A70C(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072D060);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100404C38();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10031A878()
{
  if (*v0) {
    return 0x646564616F6C7075;
  }
  else {
    return 0x61746144766469;
  }
}

uint64_t sub_10031A8BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100344E24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031A8E4(uint64_t a1)
{
  unint64_t v2 = sub_1003FF230();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031A920(uint64_t a1)
{
  unint64_t v2 = sub_1003FF230();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031A95C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100316D20(a1, a2);
}

uint64_t sub_10031A974(void *a1)
{
  return sub_100316B18(a1);
}

uint64_t sub_10031A98C()
{
  uint64_t v1 = 0x7475626972747461;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F666E4961746164;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x644979656BLL;
  }
}

uint64_t sub_10031A9EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100344F30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031AA14(uint64_t a1)
{
  unint64_t v2 = sub_100403794();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031AA50(uint64_t a1)
{
  unint64_t v2 = sub_100403794();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10031AA8C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100345098(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10031AAE0(void *a1)
{
  return sub_100317078(a1);
}

uint64_t sub_10031AAF8()
{
  uint64_t v1 = 1702521203;
  if (*v0 != 1) {
    uint64_t v1 = 0x48746E65746E6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x644964726F636572;
  }
}

uint64_t sub_10031AB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100345378(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031AB7C(uint64_t a1)
{
  unint64_t v2 = sub_10040C2D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031ABB8(uint64_t a1)
{
  unint64_t v2 = sub_10040C2D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10031ABF4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1003454D8(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10031AC3C(void *a1)
{
  return sub_100317220(a1);
}

uint64_t sub_10031AC54()
{
  return 0x4D7363697274656DLL;
}

uint64_t sub_10031AC70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x4D7363697274656DLL && a2 == 0xEA00000000007061)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10031AD14(uint64_t a1)
{
  unint64_t v2 = sub_10040BEE4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031AD50(uint64_t a1)
{
  unint64_t v2 = sub_10040BEE4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10031AD8C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100345714(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10031ADB8(void *a1)
{
  return sub_1003173A8(a1, *v1);
}

uint64_t sub_10031ADD4()
{
  uint64_t v1 = 0x4D65727574706163;
  if (*v0 != 1) {
    uint64_t v1 = 0x74654D6F65646976;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x654D656E696C6E69;
  }
}

uint64_t sub_10031AE50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034588C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031AE78(uint64_t a1)
{
  unint64_t v2 = sub_1004031F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031AEB4(uint64_t a1)
{
  unint64_t v2 = sub_1004031F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031AEF0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100345A44(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10031AF20(void *a1)
{
  return sub_1003174F8(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10031AF40()
{
  return sub_10031771C(*v0);
}

uint64_t sub_10031AF48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100345D38(a1, a2);
  *a3 = result;
  return result;
}

void sub_10031AF70(unsigned char *a1@<X8>)
{
  *a1 = 44;
}

uint64_t sub_10031AF7C(uint64_t a1)
{
  unint64_t v2 = sub_100402E0C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031AFB8(uint64_t a1)
{
  unint64_t v2 = sub_100402E0C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10031AFF4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100346FC0(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x1E9uLL);
  }
  return result;
}

uint64_t sub_10031B048(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_100317C6C(a1);
}

uint64_t sub_10031B09C()
{
  uint64_t result = 0x6D614E7473726966;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656D614E7473616CLL;
      break;
    case 2:
      uint64_t result = 0x6574617473;
      break;
    case 3:
      uint64_t result = 0x6D754E6573756F68;
      break;
    case 4:
      uint64_t result = 0x746565727473;
      break;
    case 5:
      uint64_t result = 6451044;
      break;
    case 6:
      uint64_t result = 0x6F436C6174736F70;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10031B180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003488F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031B1A8(uint64_t a1)
{
  unint64_t v2 = sub_10040C27C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031B1E4(uint64_t a1)
{
  unint64_t v2 = sub_10040C27C();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10031B220@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100348BE8(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 89) = *(_OWORD *)((char *)v8 + 9);
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10031B274(void *a1)
{
  return sub_100318800(a1);
}

uint64_t sub_10031B28C()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0x7373656E6576696CLL;
  }
}

uint64_t sub_10031B2D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100348EEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031B300(uint64_t a1)
{
  unint64_t v2 = sub_1004047F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031B33C(uint64_t a1)
{
  unint64_t v2 = sub_1004047F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031B378@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100318C84(a1, a2);
}

uint64_t sub_10031B390(void *a1)
{
  return sub_100318A44(a1);
}

unint64_t sub_10031B3A8()
{
  if (*v0) {
    return 0xD000000000000015;
  }
  else {
    return 0xD000000000000014;
  }
}

uint64_t sub_10031B3E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100349000(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031B410(uint64_t a1)
{
  unint64_t v2 = sub_1003494B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031B44C(uint64_t a1)
{
  unint64_t v2 = sub_1003494B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10031B488@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1003490EC(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x10AuLL);
  }
  return result;
}

uint64_t sub_10031B4DC(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_100319054(a1);
}

unint64_t sub_10031B530()
{
  return sub_100319230(*v0);
}

uint64_t sub_10031B538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003498F0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10031B560(unsigned char *a1@<X8>)
{
  *a1 = 22;
}

uint64_t sub_10031B56C(uint64_t a1)
{
  unint64_t v2 = sub_10034B58C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031B5A8(uint64_t a1)
{
  unint64_t v2 = sub_10034B58C();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10031B5E4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10034A244(a1, v9);
  if (!v2)
  {
    long long v5 = v10[0];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 158) = *(_OWORD *)((char *)v10 + 14);
    long long v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    long long v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    __n128 result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10031B648(void *a1)
{
  return sub_100319518(a1);
}

unint64_t sub_10031B660()
{
  return sub_100319A00(*v0);
}

uint64_t sub_10031B668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034AB68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031B690(uint64_t a1)
{
  unint64_t v2 = sub_10034B538();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031B6CC(uint64_t a1)
{
  unint64_t v2 = sub_10034B538();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10031B708@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10034B084(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    a2[2] = v7[2];
    a2[3] = v5;
    a2[4] = v8[0];
    *(_OWORD *)((char *)a2 + 74) = *(_OWORD *)((char *)v8 + 10);
    double result = *(double *)v7;
    long long v6 = v7[1];
    *a2 = v7[0];
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_10031B75C(void *a1)
{
  return sub_100319B9C(a1);
}

uint64_t sub_10031B774()
{
  if (*v0) {
    return 1701869940;
  }
  else {
    return 0x65727574736567;
  }
}

uint64_t sub_10031B7A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034B71C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031B7D0(uint64_t a1)
{
  unint64_t v2 = sub_1003FCA68();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031B80C(uint64_t a1)
{
  unint64_t v2 = sub_1003FCA68();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031B848@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10034B800(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10031B874(void *a1)
{
  return sub_100319E70(a1);
}

unint64_t sub_10031B890()
{
  return sub_100319FD8(*v0);
}

uint64_t sub_10031B898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034B9A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031B8C0(uint64_t a1)
{
  unint64_t v2 = sub_10040C378();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031B8FC(uint64_t a1)
{
  unint64_t v2 = sub_10040C378();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10031B938@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10034BF40(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10031B98C(void *a1)
{
  return sub_10031A194(a1);
}

uint64_t sub_10031B9D8()
{
  if (*v0) {
    return 0x6D617473656D6974;
  }
  else {
    return 0x326567617473;
  }
}

uint64_t sub_10031BA14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034C70C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031BA3C(uint64_t a1)
{
  unint64_t v2 = sub_100404C38();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031BA78(uint64_t a1)
{
  unint64_t v2 = sub_100404C38();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031BAB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10034C804(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = v5;
    *(void *)(a2 + 8) = result;
  }
  return result;
}

uint64_t sub_10031BAE4(void *a1)
{
  return sub_10031A70C(a1);
}

uint64_t sub_10031BB04()
{
  _StringGuts.grow(_:)(26);
  v0._uint64_t countAndFlagsBits = 0x3A3265676174730ALL;
  v0._uint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v0);
  Float.write<A>(to:)();
  v1._uint64_t countAndFlagsBits = 0x7473656D6974202CLL;
  v1._uint64_t object = (void *)0xED0000203A706D61;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10031BBEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a5;
  uint64_t v15 = a4;
  uint64_t v7 = sub_100007764(&qword_10072CBC8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100403368();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    uint64_t v11 = v14;
    uint64_t v17 = v15;
    char v16 = 1;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = v11;
    char v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10031BDE8()
{
  return sub_10031BB04();
}

uint64_t sub_10031BDF4()
{
  return 0x7A69726F68747561;
}

uint64_t sub_10031BE40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034C9AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031BE68(uint64_t a1)
{
  unint64_t v2 = sub_100403368();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031BEA4(uint64_t a1)
{
  unint64_t v2 = sub_100403368();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031BEE0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10034CB30(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10031BF10(void *a1)
{
  return sub_10031BBEC(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10031BF30()
{
  if (*v0) {
    return 0x7461747365747461;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t sub_10031BF78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034CE20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031BFA0(uint64_t a1)
{
  unint64_t v2 = sub_100403890();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031BFDC(uint64_t a1)
{
  unint64_t v2 = sub_100403890();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031C018@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072CD30, (uint64_t)sub_100403890, (uint64_t)&type metadata for CASDAttestationData.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035D940, a2);
}

uint64_t sub_10031C068(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072CD40, (void (*)(void))sub_100403890, (uint64_t)&type metadata for CASDAttestationData.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

unint64_t sub_10031C0C8(char a1)
{
  unint64_t result = 0x4874736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x776F6C666B726F77;
      break;
    case 3:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 4:
      unint64_t result = 0x6574707972636E65;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0x415064656E676973;
      break;
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 8:
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 10:
      unint64_t result = 0x7373656E6576696CLL;
      break;
    case 11:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 12:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10031C288(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C450);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FCE00();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = *((void *)v3 + 2);
  uint64_t v10 = *((void *)v3 + 3);
  long long v14 = *v3;
  *(void *)&long long v15 = v9;
  *((void *)&v15 + 1) = v10;
  char v17 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v11 = v3[3];
    long long v14 = v3[2];
    long long v15 = v11;
    long long v16 = v3[4];
    char v17 = 1;
    sub_1003FD160();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v14 = *((void *)v3 + 14);
    char v17 = 4;
    sub_100007764(&qword_10072C400);
    sub_1003FD1B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = (int *)type metadata accessor for IdentityProofingRequestV2(0);
    LOBYTE(v14) = 5;
    type metadata accessor for TiberiusWrappedAssessment(0);
    sub_10033E308(&qword_10072C470, (void (*)(uint64_t))type metadata accessor for TiberiusWrappedAssessment);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[10]);
    char v17 = 6;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[11]);
    char v17 = 7;
    sub_1003FD24C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[12]);
    char v17 = 8;
    sub_100007764(&qword_1007286B0);
    sub_10033E3A4(&qword_10072C480, &qword_1007286B0, (void (*)(void))sub_1003FD2A0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 10;
    type metadata accessor for LivenessDataV2(0);
    sub_10033E308(&qword_10072C490, (void (*)(uint64_t))type metadata accessor for LivenessDataV2);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + v12[15]);
    char v17 = 11;
    sub_100007764(&qword_10072C438);
    sub_1003FD2F4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10031C7B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v3 = sub_100007764(&qword_100728508);
  __chkstk_darwin(v3 - 8);
  uint64_t v57 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100728510);
  __chkstk_darwin(v5 - 8);
  uint64_t v58 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_10072C3E0);
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for IdentityProofingRequestV2(0);
  long long v15 = (int *)(v14 - 8);
  __chkstk_darwin(v14);
  char v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(void *)char v17 = 0;
  *((void *)v17 + 1) = 0xE000000000000000;
  *((void *)v17 + 2) = v18;
  *((void *)v17 + 3) = v20;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((void *)v17 + 12) = 0;
  *((void *)v17 + 13) = 0;
  uint64_t v21 = (uint64_t)&v17[v15[11]];
  uint64_t v22 = type metadata accessor for TiberiusWrappedAssessment(0);
  char v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  uint64_t v68 = v21;
  v23(v21, 1, 1, v22);
  uint64_t v69 = v15[12];
  *(void *)&v17[v69] = 0;
  uint64_t v67 = v15[13];
  *(void *)&v17[v67] = 0;
  uint64_t v70 = v15[14];
  *(void *)&v17[v70] = _swiftEmptyArrayStorage;
  uint64_t v24 = &v17[v15[15]];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  char v66 = v24;
  uint64_t v25 = (uint64_t)&v17[v15[16]];
  uint64_t v26 = type metadata accessor for LivenessDataV2(0);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
  uint64_t v65 = v25;
  v27(v25, 1, 1, v26);
  uint64_t v28 = v15[17];
  Swift::String v63 = a1;
  uint64_t v64 = v28;
  *(void *)&v17[v28] = 0;
  char v29 = &v17[v15[18]];
  *(void *)char v29 = 0;
  *((void *)v29 + 1) = 0;
  Swift::String v62 = v29;
  sub_10000C728(a1, a1[3]);
  sub_1003FCE00();
  uint64_t v30 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v30)
  {
    uint64_t v33 = v68;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v63);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000AAC30(*((void *)v17 + 4), *((void *)v17 + 5));
    swift_bridgeObjectRelease();
    sub_10000C6CC(v33, &qword_100728510);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C6CC(v65, &qword_100728508);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = (uint64_t)v58;
    char v74 = 0;
    sub_1003FCE54();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    long long v32 = v72;
    *(_OWORD *)char v17 = v71;
    *((_OWORD *)v17 + 1) = v32;
    char v74 = 1;
    sub_1003FCEA8();
    Swift::String v61 = v9;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v34 = v72;
    *((_OWORD *)v17 + 2) = v71;
    *((_OWORD *)v17 + 3) = v34;
    *((_OWORD *)v17 + 4) = v73;
    LOBYTE(v71) = 2;
    uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v36 = v69;
    *((void *)v17 + 10) = v35;
    *((void *)v17 + 11) = v37;
    LOBYTE(v71) = 3;
    *((void *)v17 + 12) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v17 + 13) = v38;
    sub_100007764(&qword_10072C400);
    char v74 = 4;
    sub_1003FCEFC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((void *)v17 + 14) = v71;
    LOBYTE(v71) = 5;
    sub_10033E308(&qword_10072C410, (void (*)(uint64_t))type metadata accessor for TiberiusWrappedAssessment);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1001D9214(v31, v68, &qword_100728510);
    sub_100007764(&qword_1007268F0);
    char v74 = 6;
    sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v39 = v67;
    uint64_t v40 = v71;
    swift_bridgeObjectRelease();
    *(void *)&v17[v36] = v40;
    char v74 = 7;
    sub_1003FCF94();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v41 = v71;
    swift_bridgeObjectRelease();
    *(void *)&v17[v39] = v41;
    sub_100007764(&qword_1007286B0);
    char v74 = 8;
    sub_10033E3A4(&qword_10072C420, &qword_1007286B0, (void (*)(void))sub_1003FCFE8);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v42 = v70;
    uint64_t v43 = v71;
    swift_bridgeObjectRelease();
    *(void *)&v17[v42] = v43;
    LOBYTE(v71) = 9;
    uint64_t v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v46 = v45;
    uint64_t v47 = (uint64_t *)v66;
    swift_bridgeObjectRelease();
    *uint64_t v47 = v44;
    v47[1] = v46;
    LOBYTE(v71) = 10;
    sub_10033E308(&qword_10072C430, (void (*)(uint64_t))type metadata accessor for LivenessDataV2);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1001D9214(v57, v65, &qword_100728508);
    sub_100007764(&qword_10072C438);
    char v74 = 11;
    sub_1003FD03C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v48 = v71;
    uint64_t v49 = v64;
    swift_bridgeObjectRelease();
    *(void *)&v17[v49] = v48;
    LOBYTE(v71) = 12;
    uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v52 = v51;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v60);
    uint64_t v53 = (uint64_t *)v62;
    swift_bridgeObjectRelease();
    *uint64_t v53 = v50;
    v53[1] = v52;
    sub_10035C2C4((uint64_t)v17, v56, type metadata accessor for IdentityProofingRequestV2);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v63);
    return sub_10035C32C((uint64_t)v17, type metadata accessor for IdentityProofingRequestV2);
  }
}

unint64_t sub_10031D1E0()
{
  return sub_10031C0C8(*v0);
}

uint64_t sub_10031D1E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034CF28(a1, a2);
  *a3 = result;
  return result;
}

void sub_10031D210(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_10031D21C(uint64_t a1)
{
  unint64_t v2 = sub_1003FCE00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031D258(uint64_t a1)
{
  unint64_t v2 = sub_1003FCE00();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031D294@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10031C7B8(a1, a2);
}

uint64_t sub_10031D2AC(void *a1)
{
  return sub_10031C288(a1);
}

uint64_t sub_10031D2C4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CCB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100403654();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[3];
  long long v16 = v3[2];
  long long v17 = v9;
  long long v10 = v3[5];
  long long v18 = v3[4];
  long long v19 = v10;
  long long v11 = v3[1];
  long long v14 = *v3;
  long long v15 = v11;
  v13[15] = 0;
  sub_100402DB8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10031D4A0(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072CE00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100403C20();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ActionRequest(0);
    v8[14] = 1;
    type metadata accessor for PendingActionContext(0);
    sub_10033E308(&qword_10072CE08, (void (*)(uint64_t))type metadata accessor for PendingActionContext);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10031D68C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100723978);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_10072CDE8);
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  long long v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ActionRequest(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000C728(a1, a1[3]);
  sub_100403C20();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v23 = v10;
  uint64_t v13 = v25;
  char v29 = 0;
  uint64_t v14 = (uint64_t)v12;
  *uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v15;
  type metadata accessor for PendingActionContext(0);
  char v28 = 1;
  sub_10033E308(&qword_10072CDF8, (void (*)(uint64_t))type metadata accessor for PendingActionContext);
  uint64_t v16 = (uint64_t)v6;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v17 = v23;
  sub_1000BEA14(v16, v14 + *(int *)(v23 + 20), (uint64_t *)&unk_100723978);
  char v27 = 2;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v26);
  uint64_t v21 = (uint64_t *)(v14 + *(int *)(v17 + 24));
  *uint64_t v21 = v18;
  v21[1] = v20;
  sub_10035C2C4(v14, v24, type metadata accessor for ActionRequest);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return sub_10035C32C(v14, type metadata accessor for ActionRequest);
}

unint64_t sub_10031DA14()
{
  unint64_t result = 0x65736E6F70736572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x45656D69746E7572;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10031DAC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034D494(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031DAEC(uint64_t a1)
{
  unint64_t v2 = sub_100403654();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031DB28(uint64_t a1)
{
  unint64_t v2 = sub_100403654();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10031DB64@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10034D684(a1, v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10031DBC0(void *a1)
{
  return sub_10031D2C4(a1);
}

uint64_t sub_10031DBD8()
{
  unint64_t v1 = 0x747865746E6F63;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F69746361;
  }
}

uint64_t sub_10031DC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034DBAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031DC5C(uint64_t a1)
{
  unint64_t v2 = sub_100403C20();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031DC98(uint64_t a1)
{
  unint64_t v2 = sub_100403C20();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031DCD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10031D68C(a1, a2);
}

uint64_t sub_10031DCEC(void *a1)
{
  return sub_10031D4A0(a1);
}

uint64_t sub_10031DD04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100470DBC(*a1, *a2);
}

Swift::Int sub_10031DD10()
{
  return Hasher._finalize()();
}

uint64_t sub_10031DDB4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10031DE44()
{
  return Hasher._finalize()();
}

unint64_t sub_10031DEE4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006F2E70;
  unint64_t result = sub_10035E3C0(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10031DF1C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xEE0059525445525FLL;
  unint64_t v5 = 0x45444F4348545541;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000010;
    unint64_t v4 = 0x8000000100629010;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x45444F4348545541;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10031DF8C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10031DFEC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10031E03C()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 == 1) {
    unint64_t v1 = 0x45444F4348545541;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x45444F4348545541;
  }
}

void sub_10031E098(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_10031E0A0(uint64_t a1)
{
  unint64_t v2 = sub_10040C324();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031E0DC(uint64_t a1)
{
  unint64_t v2 = sub_10040C324();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10031E118(char a1)
{
  unint64_t result = 0xD000000000000018;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 2:
      unint64_t result = 0x5372656E74726170;
      break;
    case 3:
      unint64_t result = 0x6C616548666C6573;
      break;
    case 4:
      unint64_t result = 0x676E69666F6F7270;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
      unint64_t result = 0x4D79616C70736964;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 11:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 13:
    case 14:
      unint64_t result = 0x776F6C666B726F77;
      break;
    case 15:
      unint64_t result = 0xD000000000000013;
      break;
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    case 17:
      unint64_t result = 0xD000000000000012;
      break;
    case 18:
      unint64_t result = 0x5570657453646964;
      break;
    case 20:
      unint64_t result = 0xD000000000000019;
      break;
    case 21:
      unint64_t result = 0xD000000000000017;
      break;
    case 22:
      unint64_t result = 0xD000000000000010;
      break;
    case 23:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 24:
      unint64_t result = 0x7373656E6576696CLL;
      break;
    case 25:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10031E3C4(uint64_t a1)
{
  uint64_t v3 = v1;
  unint64_t v4 = (void *)__chkstk_darwin(a1);
  uint64_t v5 = sub_100007764(&qword_10072CE80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(v4, v4[3]);
  sub_100403D1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v22) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v22) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v22) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v22) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v22) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v22) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v22) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v22 = *(void *)(v3 + 104);
    v21[0] = 7;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 128);
    long long v22 = *(_OWORD *)(v3 + 112);
    long long v23 = v9;
    long long v10 = *(_OWORD *)(v3 + 160);
    long long v24 = *(_OWORD *)(v3 + 144);
    long long v25 = v10;
    v21[0] = 8;
    sub_100404008();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + 192);
    long long v22 = *(_OWORD *)(v3 + 176);
    long long v23 = v11;
    v21[0] = 9;
    sub_10040405C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v22) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v22) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 256);
    long long v22 = *(_OWORD *)(v3 + 240);
    long long v23 = v12;
    v21[0] = 12;
    sub_1004040B0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v27 = (int *)type metadata accessor for PendingActionContext(0);
    LOBYTE(v22) = 13;
    type metadata accessor for WorkflowRecommendationResponse();
    sub_10033E308(&qword_10072CEA0, (void (*)(uint64_t))type metadata accessor for WorkflowRecommendationResponse);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v22) = *(unsigned char *)(v3 + v27[18]);
    v21[0] = 14;
    sub_100404104();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v22 = *(void *)(v3 + v27[19]);
    v21[0] = 15;
    sub_100404158();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v22) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v22) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v22) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v22) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v22) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v13 = (long long *)(v3 + v27[25]);
    long long v14 = v13[1];
    long long v22 = *v13;
    long long v23 = v14;
    long long v15 = v13[3];
    long long v24 = v13[2];
    long long v25 = v15;
    v21[0] = 21;
    sub_1004041AC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v16 = (long long *)(v3 + v27[26]);
    long long v17 = v16[1];
    long long v22 = *v16;
    long long v23 = v17;
    long long v18 = v16[3];
    long long v24 = v16[2];
    long long v25 = v18;
    v21[0] = 22;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v22) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v26 = 24;
    sub_100007764(&qword_100723988);
    sub_1000B6120(&qword_10072CD50, &qword_100723988);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v3 + v27[29], (uint64_t)&v22, &qword_1007222F8);
    sub_1000BEA14((uint64_t)&v22, (uint64_t)v21, &qword_1007222F8);
    v20[7] = 25;
    sub_100404200();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10031EC1C(uint64_t a1)
{
  uint64_t v2 = (void *)__chkstk_darwin(a1);
  uint64_t v82 = v3;
  uint64_t v4 = sub_100007764(&qword_10072B400);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100722C18);
  __chkstk_darwin(v7 - 8);
  long long v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_100007764(&qword_10072CE40);
  uint64_t v10 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  long long v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = (int *)type metadata accessor for PendingActionContext(0);
  __chkstk_darwin(v87);
  uint64_t v94 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v2[3];
  unsigned int v86 = v2;
  sub_10000C728(v2, v14);
  sub_100403D1C();
  uint64_t v83 = v12;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v88 = v1;
    LODWORD(v84) = 0;
    unsigned int v16 = 0;
  }
  else
  {
    uint64_t v81 = v6;
    LOBYTE(v90) = 0;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v26 = v94;
    *(void *)uint64_t v94 = v15;
    *((void *)v26 + 1) = v27;
    LOBYTE(v90) = 1;
    *((void *)v26 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v26 + 3) = v28;
    LOBYTE(v90) = 2;
    *((void *)v26 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v26 + 5) = v29;
    LOBYTE(v90) = 3;
    *((void *)v26 + 6) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v26 + 7) = v30;
    LOBYTE(v90) = 4;
    *((void *)v26 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v26 + 9) = v31;
    LOBYTE(v90) = 5;
    v26[80] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v90) = 6;
    *((void *)v26 + 11) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v26 + 12) = v32;
    sub_100007764(&qword_1007268F0);
    v89[0] = 7;
    sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v33 = v94;
    *((void *)v94 + 13) = v90;
    v89[0] = 8;
    sub_100403E10();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v34 = v91;
    v33[7] = v90;
    v33[8] = v34;
    long long v35 = v93;
    v33[9] = v92;
    v33[10] = v35;
    v89[0] = 9;
    sub_100403E64();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v88 = 0;
    long long v36 = v91;
    uint64_t v37 = v94;
    *((_OWORD *)v94 + 11) = v90;
    *((_OWORD *)v37 + 12) = v36;
    LOBYTE(v90) = 10;
    uint64_t v38 = v88;
    uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v88 = v38;
    if (v38)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v84);
      LODWORD(v84) = 0;
      unsigned int v16 = 991;
    }
    else
    {
      uint64_t v41 = v94;
      *((void *)v94 + 26) = v39;
      *((void *)v41 + 27) = v40;
      LOBYTE(v90) = 11;
      uint64_t v42 = v88;
      uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v88 = v42;
      if (v42)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v84);
        LODWORD(v84) = 0;
        unsigned int v16 = 2015;
      }
      else
      {
        uint64_t v45 = v94;
        *((void *)v94 + 28) = v43;
        *((void *)v45 + 29) = v44;
        v89[0] = 12;
        sub_100403EB8();
        uint64_t v46 = v88;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        uint64_t v88 = v46;
        if (v46)
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v84);
          LODWORD(v84) = 0;
          unsigned int v16 = 4063;
        }
        else
        {
          long long v47 = v91;
          uint64_t v48 = v94;
          *((_OWORD *)v94 + 15) = v90;
          *((_OWORD *)v48 + 16) = v47;
          type metadata accessor for WorkflowRecommendationResponse();
          LOBYTE(v90) = 13;
          sub_10033E308(&qword_100729C80, (void (*)(uint64_t))type metadata accessor for WorkflowRecommendationResponse);
          uint64_t v49 = v88;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          uint64_t v88 = v49;
          if (v49)
          {
            (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v84);
            LODWORD(v84) = 0;
            unsigned int v16 = 8159;
          }
          else
          {
            sub_1000BEA14((uint64_t)v9, (uint64_t)&v94[v87[17]], &qword_100722C18);
            v89[0] = 14;
            sub_100403F0C();
            uint64_t v50 = v88;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
            uint64_t v88 = v50;
            if (v50
              || (v94[v87[18]] = v90,
                  v89[0] = 15,
                  sub_100403F60(),
                  uint64_t v51 = v88,
                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(),
                  (uint64_t v88 = v51) != 0))
            {
              (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v84);
              LODWORD(v84) = 0;
              unsigned int v16 = 16351;
            }
            else
            {
              *(void *)&v94[v87[19]] = v90;
              LOBYTE(v90) = 16;
              uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
              uint64_t v88 = 0;
              uint64_t v53 = &v94[v87[20]];
              *(void *)uint64_t v53 = v52;
              v53[8] = v54 & 1;
              LOBYTE(v90) = 17;
              uint64_t v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
              uint64_t v88 = 0;
              uint64_t v56 = &v94[v87[21]];
              *(void *)uint64_t v56 = v55;
              _OWORD v56[8] = v57 & 1;
              LOBYTE(v90) = 18;
              char v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
              uint64_t v88 = 0;
              v94[v87[22]] = v58;
              LOBYTE(v90) = 19;
              uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
              uint64_t v88 = 0;
              uint64_t v60 = &v94[v87[23]];
              *(void *)uint64_t v60 = v59;
              v60[8] = v61 & 1;
              LOBYTE(v90) = 20;
              uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
              uint64_t v88 = 0;
              Swift::String v63 = &v94[v87[24]];
              *(void *)Swift::String v63 = v62;
              v63[8] = v64 & 1;
              v89[0] = 21;
              sub_100403FB4();
              uint64_t v65 = v88;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
              uint64_t v88 = v65;
              if (!v65)
              {
                char v66 = &v94[v87[25]];
                long long v67 = v91;
                *(_OWORD *)char v66 = v90;
                *((_OWORD *)v66 + 1) = v67;
                long long v68 = v93;
                *((_OWORD *)v66 + 2) = v92;
                *((_OWORD *)v66 + 3) = v68;
                v89[0] = 22;
                uint64_t v69 = v88;
                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                BOOL v85 = v69 == 0;
                uint64_t v88 = v69;
                if (v69)
                {
                  (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v84);
                  LODWORD(v82) = 0;
                  LODWORD(v83) = 0;
                }
                else
                {
                  uint64_t v70 = &v94[v87[26]];
                  long long v71 = v91;
                  *(_OWORD *)uint64_t v70 = v90;
                  *((_OWORD *)v70 + 1) = v71;
                  long long v72 = v93;
                  *((_OWORD *)v70 + 2) = v92;
                  *((_OWORD *)v70 + 3) = v72;
                  LOBYTE(v90) = 23;
                  uint64_t v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                  uint64_t v88 = 0;
                  uint64_t v75 = (uint64_t *)&v94[v87[27]];
                  uint64_t *v75 = v73;
                  v75[1] = v74;
                  sub_100007764(&qword_100723988);
                  LOBYTE(v90) = 24;
                  sub_1000B6120(&qword_10072C638, &qword_100723988);
                  uint64_t v76 = v88;
                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                  uint64_t v88 = v76;
                  if (v76)
                  {
                    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v84);
                    LODWORD(v83) = 0;
                    LODWORD(v82) = 1;
                  }
                  else
                  {
                    sub_1000BEA14((uint64_t)v81, (uint64_t)&v94[v87[28]], &qword_10072B400);
                    v89[5927] = 25;
                    sub_100239270();
                    uint64_t v77 = v88;
                    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                    Swift::String v78 = (void (**)(char *, uint64_t))(v10 + 8);
                    uint64_t v88 = v77;
                    if (!v77)
                    {
                      (*v78)(v83, v84);
                      sub_1000BEA14((uint64_t)&v90, (uint64_t)v89, &qword_1007222F8);
                      uint64_t v79 = (uint64_t)v94;
                      sub_1000BEA14((uint64_t)v89, (uint64_t)&v94[v87[29]], &qword_1007222F8);
                      sub_10035C2C4(v79, v82, type metadata accessor for PendingActionContext);
                      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v86);
                      return sub_10035C32C(v79, type metadata accessor for PendingActionContext);
                    }
                    (*v78)(v83, v84);
                    LODWORD(v82) = 1;
                    LODWORD(v83) = 1;
                  }
                }
                _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v86);
                long long v17 = (uint64_t *)v94;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                int v24 = 1;
                LODWORD(v84) = 1;
                int v23 = 1;
                int v22 = 1;
                int v21 = 1;
                int v20 = 1;
                LOBYTE(v19) = 1;
LABEL_13:
                uint64_t result = sub_100403DB8(v17[14], v17[15], v17[16], v17[17], v17[18], v17[19]);
                if (v19) {
                  goto LABEL_14;
                }
                goto LABEL_32;
              }
              (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v84);
              unsigned int v16 = 49119;
              LODWORD(v84) = 1;
            }
          }
        }
      }
    }
  }
  long long v17 = (uint64_t *)v94;
  uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v86);
  int v19 = (v16 >> 9) & 1;
  int v20 = (v16 >> 10) & 1;
  int v21 = (v16 >> 11) & 1;
  int v22 = (v16 >> 12) & 1;
  int v23 = (v16 >> 13) & 1;
  if (v16)
  {
    uint64_t result = swift_bridgeObjectRelease();
    if ((v16 & 2) == 0)
    {
LABEL_6:
      if ((v16 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((v16 & 4) == 0)
  {
LABEL_7:
    if ((v16 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v16 & 8) == 0)
  {
LABEL_8:
    if ((v16 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v16 & 0x10) == 0)
  {
LABEL_9:
    if ((v16 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v16 & 0x40) == 0)
  {
LABEL_10:
    if ((v16 & 0x80) == 0) {
      goto LABEL_11;
    }
LABEL_30:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v16 & 0x100) != 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_29:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v16 & 0x80) != 0) {
    goto LABEL_30;
  }
LABEL_11:
  if ((v16 & 0x100) != 0)
  {
LABEL_12:
    LODWORD(v83) = 0;
    LODWORD(v82) = 0;
    BOOL v85 = 0;
    int v24 = 0;
    goto LABEL_13;
  }
LABEL_31:
  int v24 = 0;
  BOOL v85 = 0;
  LODWORD(v82) = 0;
  LODWORD(v83) = 0;
  if ((v16 & 0x200) != 0)
  {
LABEL_14:
    uint64_t result = sub_100403D70(v17[22], v17[23]);
    if ((v20 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  if (!v20)
  {
LABEL_15:
    if (v21) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = swift_bridgeObjectRelease();
  if (v21)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  if (!v22)
  {
LABEL_17:
    long long v25 = v87;
    if (v23) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = sub_100403D70(v17[30], v17[31]);
  long long v25 = v87;
  if (v23)
  {
LABEL_18:
    uint64_t result = sub_10000C6CC((uint64_t)v17 + v25[17], &qword_100722C18);
    if ((v84 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }
LABEL_36:
  if (!v84)
  {
LABEL_19:
    if (v24) {
      goto LABEL_20;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = swift_bridgeObjectRelease();
  if (v24)
  {
LABEL_20:
    uint64_t result = sub_1001D8D24(*(uint64_t *)((char *)v17 + v25[25]), *(uint64_t *)((char *)v17 + v25[25] + 8));
    if (!v85) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }
LABEL_38:
  if (!v85)
  {
LABEL_21:
    if (v82) {
      goto LABEL_22;
    }
LABEL_40:
    if (!v83) {
      return result;
    }
    return sub_10000C6CC((uint64_t)v17 + v25[28], &qword_10072B400);
  }
LABEL_39:
  uint64_t result = sub_1001D8D24(*(uint64_t *)((char *)v17 + v25[26]), *(uint64_t *)((char *)v17 + v25[26] + 8));
  if ((v82 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_22:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v83 & 1) == 0) {
    return result;
  }
  return sub_10000C6CC((uint64_t)v17 + v25[28], &qword_10072B400);
}

uint64_t sub_10031FAA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, long long a13, uint64_t a14, uint64_t a15, long long a16, long long a17, long long a18, long long a19, long long a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  *(unsigned char *)(a9 + 80) = a12;
  *(void *)(a9 + 104) = a14;
  *(_OWORD *)(a9 + 88) = a13;
  sub_1000BEA14(a15, a9 + 112, &qword_10072B3F0);
  *(_OWORD *)(a9 + 176) = a16;
  *(_OWORD *)(a9 + 192) = a17;
  *(_OWORD *)(a9 + 208) = a18;
  *(_OWORD *)(a9 + 224) = a19;
  *(_OWORD *)(a9 + 240) = a20;
  *(void *)(a9 + 256) = a21;
  *(void *)(a9 + 264) = a22;
  uint64_t v41 = (int *)type metadata accessor for PendingActionContext(0);
  sub_1000BEA14(a23, a9 + v41[17], &qword_100722C18);
  *(unsigned char *)(a9 + v41[18]) = a24;
  *(void *)(a9 + v41[19]) = a25;
  uint64_t v42 = a9 + v41[20];
  *(void *)uint64_t v42 = a26;
  *(unsigned char *)(v42 + 8) = a27 & 1;
  uint64_t v43 = a9 + v41[21];
  *(void *)uint64_t v43 = a28;
  *(unsigned char *)(v43 + 8) = a29 & 1;
  *(unsigned char *)(a9 + v41[22]) = a30;
  uint64_t v44 = a9 + v41[23];
  *(void *)uint64_t v44 = a31;
  *(unsigned char *)(v44 + 8) = a32 & 1;
  uint64_t v45 = a9 + v41[24];
  *(void *)uint64_t v45 = a33;
  *(unsigned char *)(v45 + 8) = a34 & 1;
  sub_1000BEA14(a35, a9 + v41[25], &qword_10072B3F8);
  sub_1000BEA14(a36, a9 + v41[26], &qword_10072B3F8);
  uint64_t v46 = (void *)(a9 + v41[27]);
  *uint64_t v46 = a37;
  v46[1] = a38;
  sub_1000BEA14(a39, a9 + v41[28], &qword_10072B400);
  return sub_1000BEA14(a40, a9 + v41[29], &qword_1007222F8);
}

uint64_t sub_10031FCFC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CDB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100403A88();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000BEA14(v3, (uint64_t)v14, &qword_10072CDC0);
  sub_1000BEA14((uint64_t)v14, (uint64_t)v12, &qword_10072CDC0);
  char v11 = 0;
  sub_100403B78();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14(v3 + 32, (uint64_t)v13, &qword_10072CDC0);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v12, &qword_10072CDC0);
    char v11 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10031FECC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10034DCF8(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_10031FEF8()
{
  return sub_10031E118(*v0);
}

uint64_t sub_10031FF00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034E4F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10031FF28(uint64_t a1)
{
  unint64_t v2 = sub_100403D1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031FF64(uint64_t a1)
{
  unint64_t v2 = sub_100403D1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10031FFA0(uint64_t a1)
{
  return sub_10031EC1C(a1);
}

uint64_t sub_10031FFB8(uint64_t a1)
{
  return sub_10031E3C4(a1);
}

uint64_t sub_10031FFD0()
{
  uint64_t result = 0x6973726556636166;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65736F5065636166;
      break;
    case 2:
      uint64_t result = 0x566C6F6F74646170;
      break;
    case 3:
      uint64_t result = 0x6973726556647270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100320078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034EF64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003200A0(uint64_t a1)
{
  unint64_t v2 = sub_100403A34();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003200DC(uint64_t a1)
{
  unint64_t v2 = sub_100403A34();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100320118@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100332F28(a1, &qword_10072CD88, (void (*)(void))sub_100403A34, a2);
}

uint64_t sub_100320154(void *a1)
{
  return sub_100332BB0(a1, &qword_10072CD98, (void (*)(void))sub_100403A34);
}

uint64_t sub_100320190()
{
  if (*v0) {
    return 0x657079546469;
  }
  else {
    return 0x6574617473;
  }
}

uint64_t sub_1003201C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034F180(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003201EC(uint64_t a1)
{
  unint64_t v2 = sub_100403C74();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100320228(uint64_t a1)
{
  unint64_t v2 = sub_100403C74();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100320264@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100320578(a1, &qword_10072CE10, (void (*)(void))sub_100403C74, a2);
}

uint64_t sub_1003202A0(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072CE20, (void (*)(void))sub_100403C74, (uint64_t)&type metadata for DisplayNotificationContext.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t sub_100320300()
{
  if (*v0) {
    return 0x7261646E6F636573;
  }
  else {
    return 0x7972616D697270;
  }
}

uint64_t sub_100320340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034F264(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100320368(uint64_t a1)
{
  unint64_t v2 = sub_100403A88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003203A4(uint64_t a1)
{
  unint64_t v2 = sub_100403A88();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1003203E0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10034F364(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_100320424(void *a1)
{
  return sub_10031FCFC(a1);
}

uint64_t sub_100320460()
{
  if (*v0) {
    return 7107189;
  }
  else {
    return 0x69546E6F74747562;
  }
}

uint64_t sub_10032049C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034F620(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003204C4(uint64_t a1)
{
  unint64_t v2 = sub_100403BCC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100320500(uint64_t a1)
{
  unint64_t v2 = sub_100403BCC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032053C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100320578(a1, &qword_10072CDD0, (void (*)(void))sub_100403BCC, a2);
}

uint64_t sub_100320578@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_10034F808(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

uint64_t sub_1003205B4(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072CDE0, (void (*)(void))sub_100403BCC, (uint64_t)&type metadata for DisplayMessageActionButton.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t sub_100320614()
{
  if (*v0) {
    return 0x656D614E707061;
  }
  else {
    return 0x6574617473;
  }
}

uint64_t sub_10032064C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034F71C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100320674(uint64_t a1)
{
  unint64_t v2 = sub_100403CC8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003206B0(uint64_t a1)
{
  unint64_t v2 = sub_100403CC8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003206EC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100320578(a1, &qword_10072CE28, (void (*)(void))sub_100403CC8, a2);
}

uint64_t sub_100320728(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072CE38, (void (*)(void))sub_100403CC8, (uint64_t)&type metadata for DisplayMessageContext.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

unint64_t sub_100320788(char a1)
{
  unint64_t result = 0x4874736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6F436E6F69676572;
      break;
    case 3:
      unint64_t result = 0x776F6C666B726F77;
      break;
    case 4:
      unint64_t result = 0x736E6F69746361;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100320878(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C688);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100401498();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = *(_OWORD *)(v3 + 16);
  v11[0] = *(_OWORD *)v3;
  v11[1] = v9;
  char v12 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14(v3 + 32, (uint64_t)v13, &qword_100729C68);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v11, &qword_100729C68);
    char v12 = 1;
    sub_1003FD160();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&v11[0] = *(void *)(v3 + 112);
    char v12 = 4;
    sub_100007764(&qword_10072C670);
    sub_10033E3A4(&qword_10072C690, &qword_10072C670, (void (*)(void))sub_1004015F8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100320B24()
{
  return sub_100320788(*v0);
}

uint64_t sub_100320B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10034FA20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100320B54(uint64_t a1)
{
  unint64_t v2 = sub_100401498();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100320B90(uint64_t a1)
{
  unint64_t v2 = sub_100401498();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100320BCC@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10034FCC4(a1, (uint64_t)v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(void *)(a2 + 128) = v9;
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100320C38(void *a1)
{
  return sub_100320878(a1);
}

unint64_t sub_100320C8C(char a1)
{
  unint64_t result = 0x4874736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6F436E6F69676572;
      break;
    case 3:
      unint64_t result = 0x776F6C666B726F77;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100320D7C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C4B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FD3C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  v11[0] = *v3;
  v11[1] = v9;
  char v12 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14((uint64_t)(v3 + 2), (uint64_t)v13, &qword_100729C68);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v11, &qword_100729C68);
    char v12 = 1;
    sub_1003FD160();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100320FCC(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  v12[1] = a4;
  uint64_t v7 = sub_100007764(&qword_10072CD78);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100403938();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = a2;
  char v14 = 0;
  sub_1004039E0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_100321154()
{
  return sub_100320C8C(*v0);
}

uint64_t sub_10032115C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003504E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100321184(uint64_t a1)
{
  unint64_t v2 = sub_1003FD3C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003211C0(uint64_t a1)
{
  unint64_t v2 = sub_1003FD3C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1003211FC@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100350780(a1, v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100321258(void *a1)
{
  return sub_100320D7C(a1);
}

uint64_t sub_1003212AC()
{
  if (*v0) {
    return 0x656D614E707061;
  }
  else {
    return 0x657079546469;
  }
}

uint64_t sub_1003212E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100350F60(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032130C(uint64_t a1)
{
  unint64_t v2 = sub_100403938();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100321348(uint64_t a1)
{
  unint64_t v2 = sub_100403938();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100321384@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10035104C(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1003213B4(void *a1)
{
  return sub_100320FCC(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_1003213D4(char *a1, char *a2)
{
  return sub_100470270(*a1, *a2);
}

Swift::Int sub_1003213E0()
{
  return Hasher._finalize()();
}

uint64_t sub_100321470()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003214EC()
{
  return Hasher._finalize()();
}

uint64_t sub_100321578@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1006F2ED8;
  return sub_100075FD0(v2, a1, a2);
}

void sub_100321584(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x5F474E4956495244;
  if (*v1) {
    uint64_t v2 = 0x44495F4554415453;
  }
  unint64_t v3 = 0xEF45534E4543494CLL;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1003215D0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100321630()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100321680(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CF70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100404484();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = *(_OWORD *)(v3 + 48);
  v15[2] = *(_OWORD *)(v3 + 32);
  v15[3] = v9;
  long long v10 = *(_OWORD *)(v3 + 80);
  v15[4] = *(_OWORD *)(v3 + 64);
  v15[5] = v10;
  long long v11 = *(_OWORD *)(v3 + 16);
  v15[0] = *(_OWORD *)v3;
  v15[1] = v11;
  char v14 = 0;
  sub_100402DB8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v15[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v15[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&v15[0] = *(void *)(v3 + 128);
    char v14 = 3;
    sub_100007764(&qword_10072CF50);
    sub_1004046A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1000BEA14(v3 + 136, (uint64_t)v16, &qword_10072CF88);
    sub_1000BEA14((uint64_t)v16, (uint64_t)v15, &qword_10072CF88);
    char v14 = 4;
    sub_100404748();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1003218E0()
{
  unint64_t result = 0x65736E6F70736572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x45656D69746E7572;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 3:
      unint64_t result = 0x736E6F69746361;
      break;
    case 4:
      unint64_t result = 0x747865746E6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003219A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035120C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003219CC(uint64_t a1)
{
  unint64_t v2 = sub_100404484();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100321A08(uint64_t a1)
{
  unint64_t v2 = sub_100404484();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100321A44@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100351460(a1, v10);
  if (!v2)
  {
    long long v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    long long v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    long long v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    long long v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    double result = *(double *)v10;
    long long v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_100321AA0(void *a1)
{
  return sub_100321680(a1);
}

unint64_t sub_100321AF4(char a1)
{
  unint64_t result = 0x4874736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x72656469766F7270;
      break;
    case 3:
      unint64_t result = 0x6F436E6F69676572;
      break;
    case 4:
      unint64_t result = 0x6F69676552627573;
      break;
    case 5:
      unint64_t result = 0x7373656E6576696CLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100321C18(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C5B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FF5CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  v11[0] = *v3;
  v11[1] = v9;
  char v12 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14((uint64_t)(v3 + 2), (uint64_t)v13, &qword_100729C68);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v11, &qword_100729C68);
    char v12 = 1;
    sub_1003FD160();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11[0]) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100321E90()
{
  return sub_100321AF4(*v0);
}

uint64_t sub_100321E98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100351B0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100321EC0(uint64_t a1)
{
  unint64_t v2 = sub_1003FF5CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100321EFC(uint64_t a1)
{
  unint64_t v2 = sub_1003FF5CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100321F38@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100351E5C(a1, v10);
  if (!v2)
  {
    long long v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    long long v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    long long v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    long long v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    double result = *(double *)v10;
    long long v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_100321F94(void *a1)
{
  return sub_100321C18(a1);
}

uint64_t sub_100321FE8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CD48);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10040139C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = v3[1];
  long long v9 = v3[2];
  uint64_t v11 = *((void *)v3 + 6);
  uint64_t v12 = *((void *)v3 + 7);
  long long v16 = *v3;
  long long v17 = v10;
  long long v18 = v9;
  uint64_t v19 = v11;
  uint64_t v20 = v12;
  long long v13 = v3[5];
  long long v21 = v3[4];
  long long v22 = v13;
  v15[15] = 0;
  sub_100402DB8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v16) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
    LOBYTE(v16) = 2;
    sub_100007764(&qword_100723988);
    sub_1000B6120(&qword_10072CD50, &qword_100723988);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003221F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v4 = sub_100007764(&qword_100723988);
  uint64_t v32 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_10072C628);
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  __chkstk_darwin(v7);
  long long v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v12 + 12) = 0;
  *((void *)v12 + 13) = 0;
  uint64_t v13 = a1[3];
  long long v36 = a1;
  sub_10000C728(a1, v13);
  sub_10040139C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v36);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = v34;
    uint64_t v31 = v6;
    char v47 = 0;
    sub_1002390F0();
    uint64_t v15 = v35;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v17 = v39;
    uint64_t v16 = v40;
    uint64_t v19 = v41;
    uint64_t v18 = v42;
    uint64_t v21 = v43;
    uint64_t v20 = v44;
    uint64_t v22 = v46;
    *(void *)uint64_t v12 = v37;
    long long v28 = v38;
    *(_OWORD *)(v12 + 8) = v38;
    uint64_t v29 = v17;
    *((void *)v12 + 3) = v17;
    *((void *)v12 + 4) = v16;
    uint64_t v27 = v19;
    *((void *)v12 + 5) = v19;
    *((void *)v12 + 6) = v18;
    v25[1] = v21;
    *((void *)v12 + 7) = v21;
    *((void *)v12 + 8) = v20;
    long long v26 = v45;
    *(_OWORD *)(v12 + 72) = v45;
    uint64_t v30 = v22;
    *((void *)v12 + 11) = v22;
    LOBYTE(v37) = 1;
    *((void *)v12 + 12) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v12 + 13) = v23;
    LOBYTE(v37) = 2;
    sub_1000B6120(&qword_10072C638, &qword_100723988);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v12[*(int *)(v10 + 24)], v31, v4);
    sub_10035C2C4((uint64_t)v12, v33, type metadata accessor for IdentityProofingLivenessConfigResponseV2);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v36);
    return sub_10035C32C((uint64_t)v12, type metadata accessor for IdentityProofingLivenessConfigResponseV2);
  }
}

uint64_t sub_10032261C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CEE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100404254();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14(v3 + 32, (uint64_t)v12, &qword_10072CEF0);
    sub_1000BEA14((uint64_t)v12, (uint64_t)v11, &qword_10072CEF0);
    v10[15] = 2;
    sub_100404388();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003227DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a4;
  uint64_t v7 = sub_100007764(&qword_10072CF10);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004043DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v14 = 0;
  sub_100007764(&qword_1007268F0);
  sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10032299C(char a1)
{
  uint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x776F6C666B726F77;
      break;
    case 2:
      uint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      uint64_t v3 = 0x434150736469;
      goto LABEL_6;
    case 4:
      uint64_t v3 = 0x656369766564;
LABEL_6:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6144000000000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100322A54(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C9C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1004028C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for HardwareAttestationType();
  sub_10033E308(&qword_100722548, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for SharingRegistrationInfo(0);
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v10 = (long long *)(v3 + *(int *)(v9 + 28));
    long long v11 = v10[1];
    long long v14 = *v10;
    long long v15 = v11;
    v13[15] = 3;
    sub_100401ED8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 4;
    sub_100007764(&qword_1007265F8);
    sub_1000B6120(&qword_10072C830, &qword_1007265F8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100322CF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = sub_100007764(&qword_1007265F0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for HardwareAttestationType();
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v31 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100007764(&qword_10072C9D0);
  uint64_t v29 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for SharingRegistrationInfo(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004028C0();
  uint64_t v32 = v9;
  uint64_t v13 = (uint64_t)v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v27 = v5;
  uint64_t v34 = a1;
  uint64_t v14 = v29;
  uint64_t v15 = v30;
  LOBYTE(v35) = 0;
  sub_10033E308(&qword_1007224C0, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
  uint64_t v16 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v16, v6);
  LOBYTE(v35) = 1;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v18 = (uint64_t *)&v12[v10[5]];
  *uint64_t v18 = v17;
  v18[1] = v19;
  LOBYTE(v35) = 2;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v21 = (uint64_t *)&v12[v10[6]];
  *uint64_t v21 = v20;
  v21[1] = v22;
  char v37 = 3;
  sub_100401DE0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v31 = 0;
  uint64_t v23 = &v12[v10[7]];
  long long v24 = v36;
  *(_OWORD *)uint64_t v23 = v35;
  *((_OWORD *)v23 + 1) = v24;
  sub_100007764(&qword_1007265F8);
  LOBYTE(v35) = 4;
  sub_1000B6120(&qword_10072C800, &qword_1007265F8);
  uint64_t v25 = (uint64_t)v27;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v32, v33);
  sub_1000BEA14(v25, (uint64_t)&v12[v10[8]], &qword_1007265F0);
  sub_10035C2C4((uint64_t)v12, v28, type metadata accessor for SharingRegistrationInfo);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v34);
  return sub_10035C32C((uint64_t)v12, type metadata accessor for SharingRegistrationInfo);
}

uint64_t sub_10032325C()
{
  uint64_t v1 = 0x45656D69746E7572;
  if (*v0 != 1) {
    uint64_t v1 = 0x7373656E6576696CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65736E6F70736572;
  }
}

uint64_t sub_1003232D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003526E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100323300(uint64_t a1)
{
  unint64_t v2 = sub_10040139C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032333C(uint64_t a1)
{
  unint64_t v2 = sub_10040139C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100323378@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003221F0(a1, a2);
}

uint64_t sub_100323390(void *a1)
{
  return sub_100321FE8(a1);
}

uint64_t sub_1003233A8()
{
  uint64_t v1 = 0x737574617473;
  if (*v0 != 1) {
    uint64_t v1 = 0x747865746E6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F69746361;
  }
}

uint64_t sub_1003233FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100352898(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100323424(uint64_t a1)
{
  unint64_t v2 = sub_100404254();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100323460(uint64_t a1)
{
  unint64_t v2 = sub_100404254();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10032349C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1003529E0(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1003234EC(void *a1)
{
  return sub_10032261C(a1);
}

uint64_t sub_100323530()
{
  if (*v0) {
    return 0xD000000000000018;
  }
  else {
    return 0x644964726F636572;
  }
}

uint64_t sub_100323574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100352CC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032359C(uint64_t a1)
{
  unint64_t v2 = sub_1004043DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003235D8(uint64_t a1)
{
  unint64_t v2 = sub_1004043DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100323614@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100352DC4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100323644(void *a1)
{
  return sub_1003227DC(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100323664()
{
  return sub_10032299C(*v0);
}

uint64_t sub_10032366C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100353010(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100323694(uint64_t a1)
{
  unint64_t v2 = sub_1004028C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003236D0(uint64_t a1)
{
  unint64_t v2 = sub_1004028C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032370C(void *a1)
{
  return sub_100322A54(a1);
}

uint64_t sub_100323724@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100322CF8(a1, a2);
}

uint64_t sub_10032373C(char a1)
{
  uint64_t result = 0x4874736575716572;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000010;
      break;
    case 2:
      uint64_t result = 0xD000000000000017;
      break;
    case 3:
    case 6:
      uint64_t result = 0xD000000000000011;
      break;
    case 4:
      uint64_t result = 0xD00000000000001ELL;
      break;
    case 5:
      uint64_t result = 0x6465696669726576;
      break;
    case 7:
      uint64_t v3 = 0x434150736469;
      goto LABEL_10;
    case 8:
      uint64_t result = 0x6144434150736469;
      break;
    case 9:
      uint64_t v3 = 0x656369766564;
LABEL_10:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6144000000000000;
      break;
    case 10:
      uint64_t result = 0x6563697665447369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003238C0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C808);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100401CE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = *((void *)v3 + 2);
  uint64_t v10 = *((void *)v3 + 3);
  long long v18 = *v3;
  *(void *)&long long v19 = v9;
  *((void *)&v19 + 1) = v10;
  char v21 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  long long v11 = v3[3];
  long long v18 = v3[2];
  long long v19 = v11;
  long long v20 = v3[4];
  char v21 = 1;
  sub_1003FD160();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v12 = (int *)type metadata accessor for SharingRegistrationRequest(0);
  LOBYTE(v18) = 2;
  type metadata accessor for HardwareAttestationType();
  sub_10033E308(&qword_100722548, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v18) = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v18) = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  *(void *)&long long v18 = *(void *)((char *)v3 + v12[9]);
  char v21 = 5;
  sub_100007764(&qword_10072C7D0);
  sub_100401E34();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v18 = *(void *)((char *)v3 + v12[10]);
  char v21 = 6;
  sub_100007764(&qword_10072C720);
  sub_100401ABC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v13 = (long long *)((char *)v3 + v12[11]);
  long long v14 = v13[1];
  long long v18 = *v13;
  long long v19 = v14;
  char v21 = 7;
  sub_100401ED8();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  *(void *)&long long v18 = *(void *)((char *)v3 + v12[12]);
  char v21 = 8;
  sub_100007764(&qword_10072C7F0);
  sub_10033E3A4(&qword_10072C828, &qword_10072C7F0, (void (*)(void))sub_100401ED8);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v17 = v6;
  LOBYTE(v18) = 9;
  sub_100007764(&qword_1007265F8);
  sub_1000B6120(&qword_10072C830, &qword_1007265F8);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v18) = 10;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v8, v5);
}

uint64_t sub_100323D74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = sub_100007764(&qword_1007265F0);
  __chkstk_darwin(v3 - 8);
  uint64_t v43 = (uint64_t)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for HardwareAttestationType();
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_10072C7C0);
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = (int *)type metadata accessor for SharingRegistrationRequest(0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v17 = UUID.uuidString.getter();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0xE000000000000000;
  *((void *)v16 + 2) = v17;
  *((void *)v16 + 3) = v19;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  long long v20 = &v16[v14[7]];
  *(void *)long long v20 = 0;
  *((void *)v20 + 1) = 0;
  uint64_t v53 = v20;
  char v21 = &v16[v14[8]];
  *(void *)char v21 = 0;
  *((void *)v21 + 1) = 0;
  uint64_t v55 = v21;
  uint64_t v22 = (uint64_t *)&v16[v14[11]];
  *(_OWORD *)uint64_t v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  char v57 = v22;
  uint64_t v56 = v14[12];
  *(void *)&v16[v56] = 0;
  uint64_t v23 = (uint64_t)&v16[v14[13]];
  uint64_t v24 = sub_100007764(&qword_1007265F8);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  uint64_t v52 = v23;
  v25(v23, 1, 1, v24);
  char v54 = v14;
  uint64_t v26 = v14[14];
  v16[v26] = 2;
  uint64_t v27 = a1[3];
  uint64_t v51 = a1;
  sub_10000C728(a1, v27);
  sub_100401CE8();
  uint64_t v49 = v9;
  uint64_t v28 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000AAC30(*((void *)v16 + 4), *((void *)v16 + 5));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D5FEC(*v57, v57[1]);
    swift_bridgeObjectRelease();
    return sub_10000C6CC(v52, &qword_1007265F0);
  }
  else
  {
    uint64_t v50 = v26;
    char v61 = 0;
    sub_1003FCE54();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v29 = (uint64_t *)v55;
    swift_bridgeObjectRelease();
    long long v31 = v59;
    *(_OWORD *)uint64_t v16 = v58;
    *((_OWORD *)v16 + 1) = v31;
    char v61 = 1;
    sub_1003FCEA8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v32 = v54;
    long long v33 = v59;
    *((_OWORD *)v16 + 2) = v58;
    *((_OWORD *)v16 + 3) = v33;
    *((_OWORD *)v16 + 4) = v60;
    LOBYTE(v58) = 2;
    sub_10033E308(&qword_1007224C0, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
    uint64_t v34 = v44;
    uint64_t v35 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v36 = (uint64_t *)v53;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v16[v32[6]], v34, v35);
    LOBYTE(v58) = 3;
    *long long v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v36[1] = v37;
    LOBYTE(v58) = 4;
    *uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v29[1] = v38;
    sub_100007764(&qword_10072C7D0);
    char v61 = 5;
    sub_100401D3C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v16[v32[9]] = v58;
    sub_100007764(&qword_10072C720);
    char v61 = 6;
    sub_1004018E8();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v16[v32[10]] = v58;
    char v61 = 7;
    sub_100401DE0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v39 = v59;
    uint64_t v40 = v57;
    *(_OWORD *)char v57 = v58;
    *((_OWORD *)v40 + 1) = v39;
    sub_100007764(&qword_10072C7F0);
    char v61 = 8;
    sub_10033E3A4(&qword_10072C7F8, &qword_10072C7F0, (void (*)(void))sub_100401DE0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)&v16[v56] = v58;
    LOBYTE(v58) = 9;
    sub_1000B6120(&qword_10072C800, &qword_1007265F8);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1001D9214(v43, v52, &qword_1007265F0);
    LOBYTE(v58) = 10;
    char v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v49, v46);
    v16[v50] = v41;
    sub_10035C2C4((uint64_t)v16, v42, type metadata accessor for SharingRegistrationRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v51);
    return sub_10035C32C((uint64_t)v16, type metadata accessor for SharingRegistrationRequest);
  }
}

uint64_t sub_10032472C()
{
  return sub_10032373C(*v0);
}

uint64_t sub_100324734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100353234(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032475C(uint64_t a1)
{
  unint64_t v2 = sub_100401CE8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100324798(uint64_t a1)
{
  unint64_t v2 = sub_100401CE8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003247D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100323D74(a1, a2);
}

uint64_t sub_1003247EC(void *a1)
{
  return sub_1003238C0(a1);
}

uint64_t sub_100324804(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CC90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100403600();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = v3[1];
  long long v9 = v3[2];
  uint64_t v11 = *((void *)v3 + 6);
  uint64_t v12 = *((void *)v3 + 7);
  long long v16 = *v3;
  long long v17 = v10;
  long long v18 = v9;
  uint64_t v19 = v11;
  uint64_t v20 = v12;
  long long v13 = v3[5];
  long long v21 = v3[4];
  long long v22 = v13;
  v15[15] = 0;
  sub_100402DB8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v16) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for SharingRegistrationResponse(0);
    LOBYTE(v16) = 2;
    type metadata accessor for SharingCredentials(0);
    sub_10033E308(&qword_10072CC98, (void (*)(uint64_t))type metadata accessor for SharingCredentials);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100324A14@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100726568);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_10072CC78);
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  __chkstk_darwin(v7);
  long long v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SharingRegistrationResponse(0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  long long v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v13 + 12) = 0;
  *((void *)v13 + 13) = 0;
  uint64_t v14 = (uint64_t)&v13[*(int *)(v11 + 32)];
  uint64_t v15 = type metadata accessor for SharingCredentials(0);
  long long v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v30 = v14;
  v16(v14, 1, 1, v15);
  sub_10000C728(a1, a1[3]);
  sub_100403600();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v19 = v30;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return sub_10000C6CC(v19, (uint64_t *)&unk_100726568);
  }
  else
  {
    uint64_t v17 = v28;
    char v38 = 0;
    sub_1002390F0();
    uint64_t v18 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v21 = v32;
    long long v20 = v33;
    uint64_t v22 = v34;
    uint64_t v23 = v35;
    *(_OWORD *)long long v13 = v31;
    *((_OWORD *)v13 + 1) = v21;
    *((_OWORD *)v13 + 2) = v20;
    *((void *)v13 + 6) = v22;
    *((void *)v13 + 7) = v23;
    long long v24 = v37;
    *((_OWORD *)v13 + 4) = v36;
    *((_OWORD *)v13 + 5) = v24;
    LOBYTE(v31) = 1;
    *((void *)v13 + 12) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v13 + 13) = v25;
    LOBYTE(v31) = 2;
    sub_10033E308(&qword_10072CC88, (void (*)(uint64_t))type metadata accessor for SharingCredentials);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v18);
    sub_1001D9214((uint64_t)v6, v30, (uint64_t *)&unk_100726568);
    sub_10035C2C4((uint64_t)v13, v27, type metadata accessor for SharingRegistrationResponse);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    return sub_10035C32C((uint64_t)v13, type metadata accessor for SharingRegistrationResponse);
  }
}

uint64_t sub_100324E14()
{
  unint64_t v1 = 0x45656D69746E7572;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000012;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65736E6F70736572;
  }
}

uint64_t sub_100324E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100353708(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100324EB0(uint64_t a1)
{
  unint64_t v2 = sub_100403600();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100324EEC(uint64_t a1)
{
  unint64_t v2 = sub_100403600();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100324F28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100324A14(a1, a2);
}

uint64_t sub_100324F40(void *a1)
{
  return sub_100324804(a1);
}

uint64_t sub_100324F58(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C5C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FF620();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  v11[0] = *v3;
  v11[1] = v9;
  char v12 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14((uint64_t)v3 + 56, (uint64_t)v13, &qword_100729C68);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v11, &qword_100729C68);
    char v12 = 3;
    sub_1003FD160();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100325158()
{
  unint64_t result = 0x4874736575716572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x756F4365636E6F6ELL;
      break;
    case 2:
      unint64_t result = 0x72656469766F7270;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100325200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100353898(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100325228(uint64_t a1)
{
  unint64_t v2 = sub_1003FF620();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100325264(uint64_t a1)
{
  unint64_t v2 = sub_1003FF620();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1003252A0@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100353A8C(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(void *)(a2 + 96) = v8;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_100325300(void *a1)
{
  return sub_100324F58(a1);
}

uint64_t sub_10032534C()
{
  uint64_t v1 = 0x45656D69746E7572;
  if (*v0 != 1) {
    uint64_t v1 = 0x7365636E6F6ELL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65736E6F70736572;
  }
}

uint64_t sub_1003253B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100353FB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003253E0(uint64_t a1)
{
  unint64_t v2 = sub_1004013F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032541C(uint64_t a1)
{
  unint64_t v2 = sub_1004013F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100325458@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10033DCCC(a1, &qword_10072C640, (void (*)(void))sub_1004013F0, a2);
}

uint64_t sub_100325494(void *a1)
{
  return sub_10033D950(a1, &qword_10072CC40, (void (*)(void))sub_1004013F0);
}

unint64_t sub_10032550C(char a1)
{
  unint64_t result = 0x4874736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0x6465696669726576;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x61746144766469;
      break;
    case 5:
      unint64_t result = 0x746163696C707061;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100325608(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C750);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004017F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = *((void *)v3 + 2);
  uint64_t v10 = *((void *)v3 + 3);
  long long v13 = *v3;
  uint64_t v14 = v9;
  uint64_t v15 = v10;
  char v16 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = (int *)type metadata accessor for IdentitySharingRequest(0);
    LOBYTE(v13) = 1;
    sub_100007764(&qword_100726548);
    sub_1000B6120(&qword_10072C758, &qword_100726548);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v13 = *(void *)((char *)v3 + v11[6]);
    char v16 = 2;
    sub_100007764(&qword_10072C708);
    sub_100401A18();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v13 = *(void *)((char *)v3 + v11[7]);
    char v16 = 3;
    sub_100007764(&qword_10072C720);
    sub_100401ABC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v13 = *(void *)((char *)v3 + v11[8]);
    char v16 = 4;
    sub_100007764(&qword_10072C738);
    sub_100401B54();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100325904@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v34 = a2;
  uint64_t v2 = sub_100007764(&qword_100726548);
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v39 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_10072C6F0);
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = (int *)type metadata accessor for IdentitySharingRequest(0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v18 = v44;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0xE000000000000000;
  *((void *)v14 + 2) = v15;
  *((void *)v14 + 3) = v17;
  uint64_t v40 = v12[7];
  *(void *)&v14[v40] = 0;
  uint64_t v19 = v12[8];
  uint64_t v42 = v12;
  uint64_t v43 = v19;
  *(void *)&v14[v19] = 0;
  long long v20 = &v14[v12[9]];
  *(void *)long long v20 = 0;
  *((void *)v20 + 1) = 0;
  char v41 = (uint64_t *)v20;
  sub_10000C728(v18, v18[3]);
  sub_1004017F0();
  long long v37 = v7;
  uint64_t v21 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v49 = 0;
    sub_1003FCE54();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = v47;
    uint64_t v23 = v48;
    *(_OWORD *)uint64_t v14 = v46;
    *((void *)v14 + 2) = v22;
    *((void *)v14 + 3) = v23;
    LOBYTE(v46) = 1;
    sub_1000B6120(&qword_10072C700, &qword_100726548);
    long long v24 = v4;
    uint64_t v25 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v26 = v42;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v14[v42[5]], v24, v25);
    sub_100007764(&qword_10072C708);
    char v49 = 2;
    sub_100401844();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v27 = v43;
    *(void *)&v14[v26[6]] = v46;
    sub_100007764(&qword_10072C720);
    char v49 = 3;
    sub_1004018E8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)&v14[v40] = v46;
    sub_100007764(&qword_10072C738);
    char v49 = 4;
    sub_100401980();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)&v14[v27] = v46;
    LOBYTE(v46) = 5;
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v29 = v41;
    uint64_t v30 = v28;
    uint64_t v32 = v31;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v36);
    swift_bridgeObjectRelease();
    *uint64_t v29 = v30;
    v29[1] = v32;
    sub_10035C2C4((uint64_t)v14, v34, type metadata accessor for IdentitySharingRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v18);
    return sub_10035C32C((uint64_t)v14, type metadata accessor for IdentitySharingRequest);
  }
}

unint64_t sub_100325F44(char a1)
{
  unint64_t result = 0x776F6C666B726F77;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x5F64616F6C796170;
      break;
    case 3:
      unint64_t result = 0xD000000000000026;
      break;
    case 4:
      unint64_t result = 0xD000000000000033;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100326018(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072B1D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035C270();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    char v12 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for AssessmentAdditionalInfo(0);
    char v10 = 3;
    sub_100007764(&qword_100728600);
    sub_1000B6120(&qword_10072A838, &qword_100728600);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100326258@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = sub_100007764(&qword_10072A6E8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100007764(&qword_10072B1C0);
  uint64_t v7 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  char v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AssessmentAdditionalInfo(0);
  __chkstk_darwin(v10);
  char v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v26 = a1;
  sub_10000C728(a1, v13);
  sub_10035C270();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v26);
  }
  uint64_t v14 = v7;
  char v31 = 0;
  uint64_t v15 = (uint64_t)v12;
  *(void *)char v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 1) = v16;
  char v30 = 1;
  v12[16] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v29 = 2;
  *((void *)v12 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unsigned char v12[32] = v17 & 1;
  sub_100007764(&qword_100728600);
  char v28 = 3;
  sub_1000B6120(&qword_10072A8E8, &qword_100728600);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000BEA14((uint64_t)v6, (uint64_t)&v12[*(int *)(v10 + 28)], &qword_10072A6E8);
  char v27 = 4;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v20 = v19;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v25);
  uint64_t v21 = v15 + *(int *)(v10 + 32);
  *(void *)uint64_t v21 = v18;
  *(unsigned char *)(v21 + 8) = v20 & 1;
  sub_10035C2C4(v15, v24, type metadata accessor for AssessmentAdditionalInfo);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v26);
  return sub_10035C32C(v15, type metadata accessor for AssessmentAdditionalInfo);
}

unint64_t sub_100326654()
{
  return sub_10032550C(*v0);
}

uint64_t sub_10032665C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100354144(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100326684(uint64_t a1)
{
  unint64_t v2 = sub_1004017F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003266C0(uint64_t a1)
{
  unint64_t v2 = sub_1004017F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003266FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100325904(a1, a2);
}

uint64_t sub_100326714(void *a1)
{
  return sub_100325608(a1);
}

unint64_t sub_10032672C()
{
  return sub_100325F44(*v0);
}

uint64_t sub_100326734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100354424(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032675C(uint64_t a1)
{
  unint64_t v2 = sub_10035C270();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100326798(uint64_t a1)
{
  unint64_t v2 = sub_10035C270();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003267D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100326258(a1, a2);
}

uint64_t sub_1003267EC(void *a1)
{
  return sub_100326018(a1);
}

uint64_t sub_100326804(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CFB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040479C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    long long v9 = *(_OWORD *)(v3 + 32);
    long long v17 = *(_OWORD *)(v3 + 16);
    long long v18 = v9;
    long long v10 = *(_OWORD *)(v3 + 64);
    long long v19 = *(_OWORD *)(v3 + 48);
    long long v20 = v10;
    char v16 = 1;
    sub_100307264();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 128);
    char v12 = *(unsigned char *)(v3 + 136);
    long long v13 = *(_OWORD *)(v3 + 96);
    long long v17 = *(_OWORD *)(v3 + 80);
    long long v18 = v13;
    long long v19 = *(_OWORD *)(v3 + 112);
    *(void *)&long long v20 = v11;
    BYTE8(v20) = v12;
    char v16 = 2;
    sub_10035C4DC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for TiberiusWrappedAssessment(0);
    LOBYTE(v17) = 4;
    type metadata accessor for AssessmentAdditionalInfo(0);
    sub_10033E308(&qword_10072CFB8, (void (*)(uint64_t))type metadata accessor for AssessmentAdditionalInfo);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100326A84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = sub_100007764(&qword_1007266B8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_10072CF98);
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for TiberiusWrappedAssessment(0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  long long v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)long long v10 = 0u;
  *((void *)v10 + 15) = 0;
  *((void *)v10 + 16) = 0;
  *((void *)v10 + 14) = 1;
  v10[136] = 0;
  *((void *)v10 + 18) = 0;
  *((void *)v10 + 19) = 0;
  uint64_t v11 = (uint64_t)&v10[*(int *)(v8 + 40)];
  uint64_t v12 = type metadata accessor for AssessmentAdditionalInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = a1[3];
  char v31 = a1;
  sub_10000C728(a1, v13);
  sub_10040479C();
  uint64_t v14 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    uint64_t v26 = (uint64_t)v31;
  }
  else
  {
    uint64_t v32 = v11;
    uint64_t v15 = (uint64_t)v5;
    uint64_t v16 = v29;
    LOBYTE(v33) = 0;
    *(void *)long long v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v10 + 1) = v17;
    char v37 = 1;
    sub_10030864C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v18 = v34;
    *((_OWORD *)v10 + 1) = v33;
    *((_OWORD *)v10 + 2) = v18;
    long long v19 = v36;
    *((_OWORD *)v10 + 3) = v35;
    *((_OWORD *)v10 + 4) = v19;
    char v37 = 2;
    sub_10035C434();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v20 = v36;
    char v21 = BYTE8(v36);
    long long v22 = v34;
    *((_OWORD *)v10 + 5) = v33;
    *((_OWORD *)v10 + 6) = v22;
    *((_OWORD *)v10 + 7) = v35;
    *((void *)v10 + 16) = v20;
    v10[136] = v21;
    LOBYTE(v33) = 3;
    *((void *)v10 + 18) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v10 + 19) = v24;
    LOBYTE(v33) = 4;
    sub_10033E308(&qword_10072CFA8, (void (*)(uint64_t))type metadata accessor for AssessmentAdditionalInfo);
    uint64_t v25 = v30;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(void, uint64_t))(v16 + 8))(0, v25);
    uint64_t v26 = (uint64_t)v31;
    sub_1001D9214(v15, v32, &qword_1007266B8);
    sub_10035C2C4((uint64_t)v10, v28, type metadata accessor for TiberiusWrappedAssessment);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v26);
  return sub_10035C32C((uint64_t)v10, type metadata accessor for TiberiusWrappedAssessment);
}

uint64_t sub_100326EB0()
{
  uint64_t result = 0x656D737365737361;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7364656573;
      break;
    case 2:
      uint64_t result = 0x666E49726F727265;
      break;
    case 3:
      uint64_t result = 0x49656C69666F7270;
      break;
    case 4:
      uint64_t result = 0x6E6F697469646461;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100326F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100354668(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100326FA0(uint64_t a1)
{
  unint64_t v2 = sub_10040479C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100326FDC(uint64_t a1)
{
  unint64_t v2 = sub_10040479C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100327018@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100326A84(a1, a2);
}

uint64_t sub_100327030(void *a1)
{
  return sub_100326804(a1);
}

uint64_t sub_100327048(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  __chkstk_darwin(v4);
  uint64_t v45 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for EncodingError();
  uint64_t v40 = *(void *)(v44 - 8);
  uint64_t v6 = __chkstk_darwin(v44);
  uint64_t v39 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v41 = (char *)&v36 - v8;
  uint64_t v9 = sub_100007764(&qword_100728510);
  __chkstk_darwin(v9 - 8);
  uint64_t v38 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TiberiusWrappedAssessment(0);
  uint64_t v37 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100007764(&qword_10072C918);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100402350();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v50 = 0;
  sub_100007764(&qword_100726548);
  sub_1000B6120(&qword_10072C758, &qword_100726548);
  long long v18 = v17;
  uint64_t v19 = (uint64_t)v46;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v23 = v44;
    long long v22 = v45;
    uint64_t v25 = v42;
    uint64_t v24 = v43;
    uint64_t v26 = v41;
    uint64_t v47 = v19;
    swift_errorRetain();
    sub_100007764((uint64_t *)&unk_100723450);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      uint64_t v27 = v39;
      uint64_t v28 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v26, v23);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v29, v27, v23);
      (*(void (**)(char *, void, uint64_t))(v25 + 104))(v22, enum case for DIPError.Code.jsonEncodingFailed(_:), v24);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v23);
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, void, uint64_t))(v25 + 104))(v22, enum case for DIPError.Code.internalError(_:), v24);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    return swift_errorRelease();
  }
  else
  {
    uint64_t v20 = (uint64_t)v38;
    long long v46 = v13;
    uint64_t v21 = type metadata accessor for TiberiusIdentitySharingRequest(0);
    char v49 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v36 = v18;
    sub_100048D6C(v2 + *(int *)(v21 + 20), v20, &qword_100728510);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v20, 1, v11) == 1)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v36, v14);
      return sub_10000C6CC(v20, &qword_100728510);
    }
    else
    {
      uint64_t v31 = (uint64_t)v46;
      sub_1004023A4(v20, (uint64_t)v46);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_10033E308(&qword_10072C470, (void (*)(uint64_t))type metadata accessor for TiberiusWrappedAssessment);
      uint64_t v32 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v34 = v33;
      swift_release();
      Data.base64EncodedString(options:)(0);
      sub_10000C5F4(v32, v34);
      char v48 = 1;
      long long v35 = v36;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      sub_10035C32C(v31, type metadata accessor for TiberiusWrappedAssessment);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v35, v14);
    }
  }
}

uint64_t sub_1003278DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = sub_100007764(&qword_100728510);
  __chkstk_darwin(v3 - 8);
  uint64_t v29 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100726698);
  __chkstk_darwin(v5 - 8);
  uint64_t v30 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100007764(&qword_10072CA50);
  uint64_t v28 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TiberiusIdentitySharingRequest(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100007764(&qword_100726548);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v26 = v9;
  uint64_t v13 = (uint64_t)&v11[*(int *)(v9 + 20)];
  uint64_t v14 = type metadata accessor for TiberiusWrappedAssessment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_10000C728(a1, a1[3]);
  sub_100402350();
  uint64_t v31 = v8;
  uint64_t v15 = (uint64_t)v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    sub_10000C6CC((uint64_t)v11, &qword_100726698);
    return sub_10000C6CC(v13, &qword_100728510);
  }
  else
  {
    unint64_t v33 = a1;
    uint64_t v17 = v28;
    uint64_t v16 = (uint64_t)v29;
    char v36 = 0;
    sub_1000B6120(&qword_10072C700, &qword_100726548);
    uint64_t v18 = (uint64_t)v30;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1001D9214(v18, (uint64_t)v11, &qword_100726698);
    char v35 = 1;
    sub_10033E308(&qword_10072C410, (void (*)(uint64_t))type metadata accessor for TiberiusWrappedAssessment);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1001D9214(v16, v13, &qword_100728510);
    char v34 = 2;
    uint64_t v19 = v31;
    uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v32);
    uint64_t v23 = v27;
    uint64_t v24 = (uint64_t *)&v11[*(int *)(v26 + 24)];
    *uint64_t v24 = v20;
    v24[1] = v22;
    sub_10035C2C4((uint64_t)v11, v23, type metadata accessor for TiberiusIdentitySharingRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v33);
    return sub_10035C32C((uint64_t)v11, type metadata accessor for TiberiusIdentitySharingRequest);
  }
}

unint64_t sub_100327D50()
{
  unint64_t v1 = 0xD000000000000011;
  if (*v0 == 1) {
    unint64_t v1 = 0x656D737365737361;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000019;
  }
}

uint64_t sub_100327DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003548C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100327DDC(uint64_t a1)
{
  unint64_t v2 = sub_100402350();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100327E18(uint64_t a1)
{
  unint64_t v2 = sub_100402350();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100327E54@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003278DC(a1, a2);
}

uint64_t sub_100327E6C(void *a1)
{
  return sub_100327048(a1);
}

uint64_t sub_100327E84(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CAD0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100402CAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[3];
  long long v16 = v3[2];
  long long v17 = v9;
  long long v10 = v3[5];
  long long v18 = v3[4];
  long long v19 = v10;
  long long v11 = v3[1];
  long long v14 = *v3;
  long long v15 = v11;
  v13[15] = 0;
  sub_100402DB8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100328084()
{
  unint64_t result = 0x65736E6F70736572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x65636E6F6ELL;
      break;
    case 2:
      unint64_t result = 0x6954707570657473;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x746163696C707061;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10032814C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100354A24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100328174(uint64_t a1)
{
  unint64_t v2 = sub_100402CAC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003281B0(uint64_t a1)
{
  unint64_t v2 = sub_100402CAC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1003281EC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100354C88(a1, v10);
  if (!v2)
  {
    long long v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    long long v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    long long v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    long long v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    double result = *(double *)v10;
    long long v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_100328248(void *a1)
{
  return sub_100327E84(a1);
}

uint64_t sub_100328260()
{
  if (*v0) {
    return 0x6E656B6F74;
  }
  else {
    return 1684632949;
  }
}

uint64_t sub_100328290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035530C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003282B8(uint64_t a1)
{
  unint64_t v2 = sub_100402678();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003282F4(uint64_t a1)
{
  unint64_t v2 = sub_100402678();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100328330@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072C978, (uint64_t)sub_100402678, (uint64_t)&type metadata for OLDRequest.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035D940, a2);
}

uint64_t sub_100328380(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072C968, (void (*)(void))sub_100402678, (uint64_t)&type metadata for OLDRequest.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

unint64_t sub_1003283E0(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0x52746C7561666544;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10032847C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072B270);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035C5D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  char v12 = 0;
  sub_100007764(&qword_10072B250);
  sub_10035C750();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = v3[1];
    char v12 = 1;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14((uint64_t)(v3 + 4), (uint64_t)v13, &qword_10072B288);
    sub_1000BEA14((uint64_t)v13, (uint64_t)&v11, &qword_10072B288);
    char v12 = 3;
    sub_10035C820();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1003286D8()
{
  return sub_1003283E0(*v0);
}

uint64_t sub_1003286E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003553E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100328708(uint64_t a1)
{
  unint64_t v2 = sub_10035C5D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100328744(uint64_t a1)
{
  unint64_t v2 = sub_10035C5D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100328780@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1003555B4(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1003287C4(void *a1)
{
  return sub_10032847C(a1);
}

unint64_t sub_100328800(char a1)
{
  unint64_t result = 0xD000000000000020;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0x5255726576726573;
      break;
    case 5:
      unint64_t result = 0x3256726576726573;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
    case 10:
    case 14:
      unint64_t result = 0xD000000000000019;
      break;
    case 8:
      unint64_t result = 0xD000000000000013;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 11:
      unint64_t result = 0x656D737365737361;
      break;
    case 12:
      unint64_t result = 0xD000000000000024;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 15:
      unint64_t result = 0xD000000000000020;
      break;
    case 16:
      unint64_t result = 0xD000000000000013;
      break;
    case 17:
      unint64_t result = 0xD000000000000012;
      break;
    case 18:
      unint64_t result = 0xD000000000000010;
      break;
    case 19:
      unint64_t result = 0x55657361426E6463;
      break;
    case 20:
      unint64_t result = 0xD000000000000034;
      break;
    case 21:
      unint64_t result = 0x632D656C62616E65;
      break;
    case 22:
      unint64_t result = 0xD000000000000014;
      break;
    case 23:
      unint64_t result = 0xD000000000000017;
      break;
    case 24:
      unint64_t result = 0xD000000000000023;
      break;
    case 25:
      unint64_t result = 0x2D656C6261736964;
      break;
    case 26:
      unint64_t result = 0x6C2D786966657270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100328ACC(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072C3A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FCB10();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v9 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100329048(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100007764(&qword_10072C3A8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FCB64();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = a2;
  char v14 = 0;
  sub_1003FCC88();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    v12[1] = a3;
    char v13 = 1;
    sub_100007764(&qword_10072C390);
    sub_1003FCCDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1003291E8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1003328A0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100328800);
}

Swift::Int sub_100329200(uint64_t a1, uint64_t a2)
{
  return sub_100332950(a1, a2, (void (*)(uint64_t))sub_100328800);
}

uint64_t sub_100329218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003329D4(a1, a2, a3, (void (*)(void))sub_100328800);
}

Swift::Int sub_100329230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100332A44(a1, a2, a3, (void (*)(uint64_t))sub_100328800);
}

uint64_t sub_100329248@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100355938();
  *a1 = result;
  return result;
}

unint64_t sub_100329278@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100328800(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1003292A4()
{
  return sub_100328800(*v0);
}

uint64_t sub_1003292AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100355938();
  *a1 = result;
  return result;
}

void sub_1003292D4(unsigned char *a1@<X8>)
{
  *a1 = 27;
}

uint64_t sub_1003292E0(uint64_t a1)
{
  unint64_t v2 = sub_1003FCB10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032931C(uint64_t a1)
{
  unint64_t v2 = sub_1003FCB10();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100329358@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10035598C(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x169uLL);
  }
  return result;
}

uint64_t sub_1003293AC(void *a1)
{
  return sub_100328ACC(a1);
}

uint64_t sub_1003293C4(char *a1, char *a2)
{
  return sub_100470A38(*a1, *a2);
}

Swift::Int sub_1003293D0()
{
  return Hasher._finalize()();
}

uint64_t sub_10032946C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003294F4()
{
  return Hasher._finalize()();
}

uint64_t sub_10032958C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1006F31D0;
  return sub_100075FD0(v2, a1, a2);
}

void sub_100329598(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x43746C7561666544;
  if (*v1) {
    uint64_t v2 = 0x6F436E6F69676552;
  }
  unint64_t v3 = 0xEE00736769666E6FLL;
  if (*v1) {
    unint64_t v3 = 0xED0000736769666ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1003295F0()
{
  if (*v0) {
    return 0x6F436E6F69676552;
  }
  else {
    return 0x43746C7561666544;
  }
}

uint64_t sub_100329644@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1006F31D0;
  return sub_100329650(a1, v2, a2);
}

uint64_t sub_100329650@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  uint64_t object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._uint64_t object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t sub_1003296B0(uint64_t a1)
{
  unint64_t v2 = sub_1003FCB64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003296EC(uint64_t a1)
{
  unint64_t v2 = sub_1003FCB64();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100329728@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1003568B4(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result;
    *(void *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_100329758(void *a1)
{
  return sub_100329048(a1, *(unsigned char *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_100329778()
{
  return sub_100330AA0();
}

uint64_t sub_100329794()
{
  return String.hash(into:)();
}

Swift::Int sub_1003297B0()
{
  return sub_100330B20();
}

uint64_t sub_1003297CC@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1006F3220;
  return sub_100330B78(v2, a1, a2);
}

void sub_1003297D8(void *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x800000010062A630;
}

unint64_t sub_1003297F8()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_100329814@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  uint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._uint64_t object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3258, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_10032986C(uint64_t a1)
{
  unint64_t v2 = sub_10040BE3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003298A8(uint64_t a1)
{
  unint64_t v2 = sub_10040BE3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003298E4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072D868);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040BE3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  *a2 = v9;
  return result;
}

uint64_t sub_100329A40(void *a1)
{
  uint64_t v2 = sub_100007764(&qword_10072D878);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040BE3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100329B74@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_100329B7C(uint64_t a1)
{
  unint64_t v2 = sub_1004048EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100329BB8(uint64_t a1)
{
  unint64_t v2 = sub_1004048EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100329BF4(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x656372756F736572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100329C8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a3;
  uint64_t v17 = a5;
  uint64_t v9 = sub_100007764(&qword_10072D010);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100404994();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v19 = a2;
  char v18 = 0;
  sub_100007764(&qword_10072D020);
  sub_1004049E8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    uint64_t v13 = v17;
    uint64_t v19 = v16;
    char v18 = 1;
    sub_100007764(&qword_100726808);
    sub_1001D87AC(&qword_100726818);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v19 = a4;
    char v18 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v19 = v13;
    char v18 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_100329ED4(char a1)
{
  unint64_t result = 1954047348;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x72656B636970;
      break;
    case 2:
      unint64_t result = 1702125924;
      break;
    case 3:
      unint64_t result = 0x6172656D6163;
      break;
    case 4:
      unint64_t result = 0x6F746F6870;
      break;
    case 5:
      unint64_t result = 7369839;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100329F98()
{
  return sub_100329BF4(*v0);
}

uint64_t sub_100329FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100357228(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100329FC8(uint64_t a1)
{
  unint64_t v2 = sub_100404994();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032A004(uint64_t a1)
{
  unint64_t v2 = sub_100404994();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032A040@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100356A94(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10032A070(void *a1)
{
  return sub_100329C8C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10032A090(unsigned __int8 *a1, char *a2)
{
  return sub_100471664(*a1, *a2);
}

Swift::Int sub_10032A09C()
{
  return sub_1004731A4();
}

uint64_t sub_10032A0A8()
{
  return sub_10029C02C();
}

Swift::Int sub_10032A0B0()
{
  return sub_1004731A4();
}

unint64_t sub_10032A0B8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006F3290;
  unint64_t result = sub_1003FE9F4(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t sub_10032A0F0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100329ED4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10032A11C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10032A17C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10032A1CC(char a1)
{
  uint64_t result = 0x707954646C656966;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000014;
      break;
    case 2:
      uint64_t result = 0xD000000000000014;
      break;
    case 3:
      uint64_t result = 0x4679616C70736964;
      break;
    case 4:
      uint64_t result = 0xD000000000000010;
      break;
    case 5:
      uint64_t result = 0x697373696D627573;
      break;
    case 6:
      unsigned int v3 = 1282304365;
      goto LABEL_9;
    case 7:
      unsigned int v3 = 1282957677;
LABEL_9:
      uint64_t result = v3 | 0x74676E6500000000;
      break;
    case 8:
      uint64_t result = 0x6554657275636573;
      break;
    case 9:
    case 18:
      uint64_t result = 0xD000000000000011;
      break;
    case 10:
      uint64_t result = 0x636972656D756ELL;
      break;
    case 11:
      uint64_t result = 0x79614473776F6873;
      break;
    case 12:
      uint64_t result = 0x6E6F4D73776F6873;
      break;
    case 13:
      uint64_t result = 0x61655973776F6873;
      break;
    case 14:
      uint64_t result = 0x736D657469;
      break;
    case 15:
      uint64_t result = 0x7461766972507369;
      break;
    case 16:
      uint64_t result = 0xD000000000000012;
      break;
    case 17:
      uint64_t result = 0x656C6261636E7973;
      break;
    case 19:
      uint64_t result = 0x6974726F70707573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10032A458(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072D0D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100404D88();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10) = *(unsigned char *)v3;
  char v11 = 0;
  sub_100404E84();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v10) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v10) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v10 = *(void *)(v3 + 112);
    char v11 = 14;
    sub_100007764(&qword_10072D0B8);
    sub_10033E3A4(&qword_10072D0E0, &qword_10072D0B8, (void (*)(void))sub_100404ED8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 15;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 16;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 17;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 18;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10032A8FC(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0x6974617269707865;
      break;
    case 3:
      unint64_t result = 0x6976726553766469;
      break;
    case 4:
      unint64_t result = 0x6575716552647364;
      break;
    case 5:
    case 6:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 7:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10032AA14(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CA88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100402B0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  long long v13 = *v3;
  long long v14 = v9;
  char v12 = 0;
  sub_100401748();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v13 = *((void *)v3 + 4);
    char v12 = 1;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v13 = *((void *)v3 + 7);
    char v12 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10032ACE0(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  v12[1] = a4;
  char v6 = a2 & 1;
  uint64_t v7 = sub_100007764(&qword_10072CA68);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100402A64();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = v6;
  char v14 = 0;
  sub_100402AB8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10032AE68()
{
  return sub_10032A1CC(*v0);
}

uint64_t sub_10032AE70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100357F30(a1, a2);
  *a3 = result;
  return result;
}

void sub_10032AE98(unsigned char *a1@<X8>)
{
  *a1 = 20;
}

uint64_t sub_10032AEA4(uint64_t a1)
{
  unint64_t v2 = sub_100404D88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032AEE0(uint64_t a1)
{
  unint64_t v2 = sub_100404D88();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10032AF1C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1003573E8(a1, (uint64_t)v9);
  if (!v2)
  {
    long long v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(void *)(a2 + 144) = v10;
    long long v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_10032AF90(void *a1)
{
  return sub_10032A458(a1);
}

uint64_t sub_10032AFA8()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 0xD000000000000014;
  }
}

uint64_t sub_10032AFE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100358784(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032B00C(uint64_t a1)
{
  unint64_t v2 = sub_10040C554();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032B048(uint64_t a1)
{
  unint64_t v2 = sub_10040C554();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032B084@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072D9E8, (uint64_t)sub_10040C554, (uint64_t)&type metadata for AttributeSettingsPickerItem.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035D940, a2);
}

uint64_t sub_10032B0D4(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072D9F8, (void (*)(void))sub_10040C554, (uint64_t)&type metadata for AttributeSettingsPickerItem.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10032B134()
{
  if (*v0) {
    return 0x776F6C666B726F77;
  }
  else {
    return 0x72656469766F7270;
  }
}

uint64_t sub_10032B16C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035886C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032B194(uint64_t a1)
{
  unint64_t v2 = sub_10040C1D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032B1D0(uint64_t a1)
{
  unint64_t v2 = sub_10040C1D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032B20C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072D8F0, (uint64_t)sub_10040C1D4, (uint64_t)&type metadata for ProviderWorkflowInfo.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035D940, a2);
}

uint64_t sub_10032B25C(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072D900, (void (*)(void))sub_10040C1D4, (uint64_t)&type metadata for ProviderWorkflowInfo.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10032B2BC()
{
  if (*v0) {
    return 1953259891;
  }
  else {
    return 0x7475626972747461;
  }
}

uint64_t sub_10032B2F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100358978(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032B320(uint64_t a1)
{
  unint64_t v2 = sub_1004029BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032B35C(uint64_t a1)
{
  unint64_t v2 = sub_1004029BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032B398@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072CA20, (uint64_t)sub_1004029BC, (uint64_t)&type metadata for AppleIdAttributeProof.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035D940, a2);
}

uint64_t sub_10032B3E8(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072CA30, (void (*)(void))sub_1004029BC, (uint64_t)&type metadata for AppleIdAttributeProof.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

unint64_t sub_10032B448()
{
  return sub_10032A8FC(*v0);
}

uint64_t sub_10032B450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100358A74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032B478(uint64_t a1)
{
  unint64_t v2 = sub_100402B0C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032B4B4(uint64_t a1)
{
  unint64_t v2 = sub_100402B0C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10032B4F0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100358DE4(a1, v9);
  if (!v2)
  {
    long long v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    long long v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    long long v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    double result = *(double *)&v10;
    long long v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_10032B544(void *a1)
{
  return sub_10032AA14(a1);
}

uint64_t sub_10032B55C(char *a1, char *a2)
{
  return sub_100472778(*a1, *a2);
}

Swift::Int sub_10032B568()
{
  return sub_100472AC8();
}

uint64_t sub_10032B570()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10032B5DC()
{
  return sub_100472EB8();
}

uint64_t sub_10032B5E4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1006F3358;
  return sub_100075FD0(v2, a1, a2);
}

void sub_10032B5F0(void *a1@<X8>)
{
  unint64_t v2 = 0x800000010062A690;
  if (*v1) {
    unint64_t v2 = 0x800000010062A6B0;
  }
  *a1 = 0xD00000000000001ALL;
  a1[1] = v2;
}

uint64_t sub_10032B62C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10032B68C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10032B6DC()
{
  if (*v0) {
    return 0x6E656B6F74;
  }
  else {
    return 0x7463616669747261;
  }
}

uint64_t sub_10032B718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003595F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032B740(uint64_t a1)
{
  unint64_t v2 = sub_100402A64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032B77C(uint64_t a1)
{
  unint64_t v2 = sub_100402A64();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032B7B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1003596E8(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10032B7EC(void *a1)
{
  return sub_10032ACE0(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_10032B80C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C6D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040164C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 48);
    long long v13 = *(_OWORD *)(v3 + 32);
    long long v14 = v9;
    char v12 = 2;
    sub_100401748();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v13 = *(void *)(v3 + 64);
    char v12 = 3;
    sub_100007764(&qword_10072C6B8);
    sub_10033E3A4(&qword_10072C6E0, &qword_10072C6B8, (void (*)(void))sub_10040179C);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10032BA80()
{
  unint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6465696669726576;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x7463616669747261;
      break;
    case 4:
      unint64_t result = 0x64657461657263;
      break;
    case 5:
      unint64_t result = 0x6974617269707865;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10032BB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003598A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032BB7C(uint64_t a1)
{
  unint64_t v2 = sub_10040164C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032BBB8(uint64_t a1)
{
  unint64_t v2 = sub_10040164C();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10032BBF4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100359B48(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(void *)(a2 + 96) = v8;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10032BC54(void *a1)
{
  return sub_10032B80C(a1);
}

uint64_t sub_10032BC6C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072B3A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10035F888();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + 16);
    v10[15] = 1;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[14] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10032BE44(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072B3E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10035F9D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14(v3 + 16, (uint64_t)v12, (uint64_t *)&unk_100721320);
    sub_1000BEA14((uint64_t)v12, (uint64_t)v11, (uint64_t *)&unk_100721320);
    v10[15] = 1;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10032C03C()
{
  uint64_t v1 = 0x7365756C6176;
  if (*v0 != 1) {
    uint64_t v1 = 1953259891;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7475626972747461;
  }
}

uint64_t sub_10032C094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035A100(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032C0BC(uint64_t a1)
{
  unint64_t v2 = sub_10035F888();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032C0F8(uint64_t a1)
{
  unint64_t v2 = sub_10035F888();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10032C134@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10035A258(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10032C17C(void *a1)
{
  return sub_10032BC6C(a1);
}

uint64_t sub_10032C194(uint64_t a1, uint64_t a2)
{
  return sub_10033E1C0(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(void **)(a2 + 16));
}

uint64_t sub_10032C1B0()
{
  uint64_t v1 = 0x7365756C6176;
  if (*v0 != 1) {
    uint64_t v1 = 0x656372756F736572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7475626972747461;
  }
}

uint64_t sub_10032C214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035A53C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032C23C(uint64_t a1)
{
  unint64_t v2 = sub_10035F9D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032C278(uint64_t a1)
{
  unint64_t v2 = sub_10035F9D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10032C2B4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10035A6B0(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10032C2FC(void *a1)
{
  return sub_10032BE44(a1);
}

uint64_t sub_10032C338(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100007764(&qword_10072C860);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100401F2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = a2;
  char v13 = 0;
  sub_100007764(&qword_1007264A0);
  sub_1001D5E1C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v3)
  {
    uint64_t v14 = a3;
    char v13 = 1;
    sub_100007764(&qword_10072C848);
    sub_10033E3A4(&qword_10072C868, &qword_10072C848, (void (*)(void))sub_100401FD4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10032C51C()
{
  if (*v0) {
    return 0x4464656D69616C63;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_10032C564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035A994(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032C58C(uint64_t a1)
{
  unint64_t v2 = sub_100401F2C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032C5C8(uint64_t a1)
{
  unint64_t v2 = sub_100401F2C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032C604@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10035AA9C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10032C630(void *a1)
{
  return sub_10032C338(a1, *v1, v1[1]);
}

uint64_t sub_10032C64C()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x7475626972747461;
  }
}

uint64_t sub_10032C694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035ACFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032C6BC(uint64_t a1)
{
  unint64_t v2 = sub_100402A10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032C6F8(uint64_t a1)
{
  unint64_t v2 = sub_100402A10();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032C734@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072CA38, (uint64_t)sub_100402A10, (uint64_t)&type metadata for DataNodeProof.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035D940, a2);
}

uint64_t sub_10032C784(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072CA48, (void (*)(void))sub_100402A10, (uint64_t)&type metadata for DataNodeProof.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10032C7E4()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_10032C824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035AE04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032C84C(uint64_t a1)
{
  unint64_t v2 = sub_100402C58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032C888(uint64_t a1)
{
  unint64_t v2 = sub_100402C58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032C8C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072CAA8, (uint64_t)sub_100402C58, (uint64_t)&type metadata for DeviceAssessmentTrainingSignalId.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035B0FC, a2);
}

uint64_t sub_10032C914(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072CAB8, (void (*)(void))sub_100402C58, (uint64_t)&type metadata for DeviceAssessmentTrainingSignalId.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_10032C974()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_10032C9B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035AEF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032C9DC(uint64_t a1)
{
  unint64_t v2 = sub_10035C21C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032CA18(uint64_t a1)
{
  unint64_t v2 = sub_10035C21C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032CA54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072B1A8, (uint64_t)sub_10035C21C, (uint64_t)&type metadata for TrainingSignalId.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035B0FC, a2);
}

uint64_t sub_10032CAA4(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072B1B8, (void (*)(void))sub_10035C21C, (uint64_t)&type metadata for TrainingSignalId.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

unint64_t sub_10032CB04(char a1)
{
  unint64_t result = 0xD000000000000011;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD000000000000020;
    }
    else {
      return 0xD00000000000001ELL;
    }
  }
  return result;
}

uint64_t sub_10032CB64(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C7A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100401BEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = *v3;
  char v12 = 0;
  sub_100007764(&qword_1007264A0);
  sub_1001D5E1C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14((uint64_t)(v3 + 1), (uint64_t)v13, &qword_10072C7B0);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v11, &qword_10072C7B0);
    char v12 = 1;
    sub_100401C94();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10032CD48(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CAA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100402C04();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  v10[7] = 0;
  sub_100007764(&qword_1007268F0);
  sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for SharingCredentials(0);
    v10[6] = 1;
    sub_100007764(&qword_100726548);
    sub_1000B6120(&qword_10072C758, &qword_100726548);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10032CF48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v23 = sub_100007764(&qword_100726548);
  uint64_t v20 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100007764(&qword_10072CA90);
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SharingCredentials(0);
  __chkstk_darwin(v8);
  long long v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100402C04();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v18 = v10;
  uint64_t v19 = a1;
  uint64_t v12 = v22;
  uint64_t v11 = v23;
  sub_100007764(&qword_1007268F0);
  char v26 = 0;
  sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
  uint64_t v13 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v17[1] = v27;
  *(void *)char v18 = v27;
  char v25 = 1;
  sub_1000B6120(&qword_10072C700, &qword_100726548);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v13);
  uint64_t v14 = *(int *)(v8 + 20);
  uint64_t v15 = (uint64_t)v18;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v18[v14], v5, v11);
  sub_10035C2C4(v15, v21, type metadata accessor for SharingCredentials);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v19);
  return sub_10035C32C(v15, type metadata accessor for SharingCredentials);
}

unint64_t sub_10032D2CC(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x617461645F617564;
      break;
    case 2:
      unint64_t result = 0x7364656573;
      break;
    case 3:
      unint64_t result = 0x776F6C666B726F77;
      break;
    case 4:
      unint64_t result = 0x5F656C69666F7270;
      break;
    case 5:
      unint64_t result = 0x726F727265;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0xD000000000000026;
      break;
    case 8:
      unint64_t result = 0xD000000000000033;
      break;
    case 9:
      unint64_t result = 0x5F64616F6C796170;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10032D41C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072B238);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035C584();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v15) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 48);
    long long v15 = *(_OWORD *)(v3 + 32);
    long long v16 = v9;
    long long v10 = *(_OWORD *)(v3 + 80);
    long long v17 = *(_OWORD *)(v3 + 64);
    long long v18 = v10;
    char v19 = 2;
    sub_100307264();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v15) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v15) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 176);
    char v12 = *(unsigned char *)(v3 + 184);
    long long v13 = *(_OWORD *)(v3 + 144);
    long long v15 = *(_OWORD *)(v3 + 128);
    long long v16 = v13;
    long long v17 = *(_OWORD *)(v3 + 160);
    *(void *)&long long v18 = v11;
    BYTE8(v18) = v12;
    char v19 = 5;
    sub_10035C4DC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v15) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for ORDRequest(0);
    LOBYTE(v15) = 7;
    sub_100007764(&qword_100728600);
    sub_1000B6120(&qword_10072A838, &qword_100728600);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v15) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v15) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10032D780@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072A6E8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100007764(&qword_10072B228);
  uint64_t v8 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  long long v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v36 = (int *)type metadata accessor for ORDRequest(0);
  __chkstk_darwin(v36);
  char v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v37 = a1;
  sub_10000C728(a1, v13);
  sub_10035C584();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v37);
  }
  uint64_t v33 = a2;
  char v34 = v7;
  uint64_t v14 = v8;
  LOBYTE(v38) = 0;
  *(void *)char v12 = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v12 + 1) = v15;
  LOBYTE(v38) = 1;
  *((void *)v12 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 3) = v16;
  char v42 = 2;
  sub_10030864C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  long long v17 = v39;
  *((_OWORD *)v12 + 2) = v38;
  *((_OWORD *)v12 + 3) = v17;
  long long v18 = v41;
  *((_OWORD *)v12 + 4) = v40;
  *((_OWORD *)v12 + 5) = v18;
  LOBYTE(v38) = 3;
  *((void *)v12 + 12) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 13) = v19;
  LOBYTE(v38) = 4;
  *((void *)v12 + 14) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 15) = v20;
  char v42 = 5;
  sub_10035C434();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v21 = v41;
  char v22 = BYTE8(v41);
  long long v23 = v39;
  *((_OWORD *)v12 + 8) = v38;
  *((_OWORD *)v12 + 9) = v23;
  *((_OWORD *)v12 + 10) = v40;
  *((void *)v12 + 22) = v21;
  v12[184] = v22;
  LOBYTE(v38) = 6;
  v12[185] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  sub_100007764(&qword_100728600);
  LOBYTE(v38) = 7;
  sub_1000B6120(&qword_10072A8E8, &qword_100728600);
  uint64_t v24 = (uint64_t)v34;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000BEA14(v24, (uint64_t)&v12[v36[11]], &qword_10072A6E8);
  LOBYTE(v38) = 8;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v26 = &v12[v36[12]];
  *(void *)char v26 = v25;
  v26[8] = v27 & 1;
  LOBYTE(v38) = 9;
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v24) = v29;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v35);
  uint64_t v30 = &v12[v36[13]];
  *(void *)uint64_t v30 = v28;
  v30[8] = v24 & 1;
  sub_10035C2C4((uint64_t)v12, v33, type metadata accessor for ORDRequest);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v37);
  return sub_10035C32C((uint64_t)v12, type metadata accessor for ORDRequest);
}

uint64_t sub_10032DE20(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072B1A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10035C1C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10032DFFC()
{
  if (*v0) {
    return 0x656D737365737361;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_10032E044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035AFE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032E06C(uint64_t a1)
{
  unint64_t v2 = sub_10035C530();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032E0A8(uint64_t a1)
{
  unint64_t v2 = sub_10035C530();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032E0E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072B210, (uint64_t)sub_10035C530, (uint64_t)&type metadata for AssessmentGUIDContainer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035B0FC, a2);
}

uint64_t sub_10032E134(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072B220, (void (*)(void))sub_10035C530, (uint64_t)&type metadata for AssessmentGUIDContainer.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

unint64_t sub_10032E194()
{
  return sub_10032CB04(*v0);
}

uint64_t sub_10032E19C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035B2F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032E1C4(uint64_t a1)
{
  unint64_t v2 = sub_100401BEC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032E200(uint64_t a1)
{
  unint64_t v2 = sub_100401BEC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10032E23C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10035B434(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_10032E28C(void *a1)
{
  return sub_10032CB64(a1);
}

unint64_t sub_10032E2D0()
{
  if (*v0) {
    return 0xD000000000000019;
  }
  else {
    return 0xD00000000000001ALL;
  }
}

uint64_t sub_10032E30C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035B76C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032E334(uint64_t a1)
{
  unint64_t v2 = sub_100402C04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032E370(uint64_t a1)
{
  unint64_t v2 = sub_100402C04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032E3AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10032CF48(a1, a2);
}

uint64_t sub_10032E3C4(void *a1)
{
  return sub_10032CD48(a1);
}

unint64_t sub_10032E3DC()
{
  return sub_10032D2CC(*v0);
}

uint64_t sub_10032E3E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035B85C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032E40C(uint64_t a1)
{
  unint64_t v2 = sub_10035C584();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032E448(uint64_t a1)
{
  unint64_t v2 = sub_10035C584();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032E484@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10032D780(a1, a2);
}

uint64_t sub_10032E49C(void *a1)
{
  return sub_10032D41C(a1);
}

uint64_t sub_10032E4B4()
{
  uint64_t result = 0x6F7272655F766469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6F7272655F6E646FLL;
      break;
    case 2:
      uint64_t result = 0x776F6C666B726F77;
      break;
    case 3:
      uint64_t result = 0x6574617473;
      break;
    case 4:
      uint64_t result = 0x6D6F6365725F7369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10032E570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035BC84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032E598(uint64_t a1)
{
  unint64_t v2 = sub_10035C1C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032E5D4(uint64_t a1)
{
  unint64_t v2 = sub_10035C1C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10032E610@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10035BEF0(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_10032E65C(void *a1)
{
  return sub_10032DE20(a1);
}

uint64_t sub_10032E674()
{
  return 0x666F72705F617564;
}

uint64_t sub_10032E694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x666F72705F617564 && a2 == 0xEB00000000656C69)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10032E744(uint64_t a1)
{
  unint64_t v2 = sub_1003FCD58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032E780(uint64_t a1)
{
  unint64_t v2 = sub_1003FCD58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032E7BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10032E98C(a1, &qword_10072C3C0, (void (*)(void))sub_1003FCD58, a2);
}

uint64_t sub_10032E7F8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10032EB50(a1, a2, a3, &qword_10072CFF0, (void (*)(void))sub_1003FCD58);
}

uint64_t sub_10032E834()
{
  return 0x656D697473;
}

uint64_t sub_10032E848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656D697473 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10032E8D8(uint64_t a1)
{
  unint64_t v2 = sub_1003FCDAC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032E914(uint64_t a1)
{
  unint64_t v2 = sub_1003FCDAC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032E950@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10032E98C(a1, &qword_10072C3D0, (void (*)(void))sub_1003FCDAC, a2);
}

uint64_t sub_10032E98C@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  long long v18 = a4;
  uint64_t v7 = sub_100007764(a2);
  uint64_t v17 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
  uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  *uint64_t v11 = v12;
  v11[1] = v14;
  return result;
}

uint64_t sub_10032EB14(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10032EB50(a1, a2, a3, &qword_10072CFE8, (void (*)(void))sub_1003FCDAC);
}

uint64_t sub_10032EB50(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v13 = a5;
  uint64_t v7 = sub_100007764(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v5;
  sub_10000C728(a1, a1[3]);
  v13();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10032EC98(void *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  v18[0] = a5;
  uint64_t v7 = v5;
  uint64_t v9 = sub_100007764(a2);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v19[2] = 0;
  uint64_t v13 = v18[1];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v13)
  {
    uint64_t v14 = (void (*)(uint64_t, uint64_t, unsigned char *, uint64_t))v18[0];
    v19[1] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v15 = *(void *)(v7 + 32);
    uint64_t v16 = *(void *)(v7 + 40);
    v19[0] = 2;
    v14(v15, v16, v19, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10032EE34(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[1] = a4;
  uint64_t v6 = sub_100007764(&qword_10072C360);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FCABC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10032EFA8(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  HIDWORD(v12) = a4;
  uint64_t v6 = sub_100007764(&qword_10072C4E0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FF188();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v10 = BYTE4(v12);
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v15 = v10 & 1;
    char v14 = 2;
    sub_1003FF1DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v13 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10032F194()
{
  uint64_t v1 = 0x5F6E6F6973736573;
  if (*v0 != 1) {
    uint64_t v1 = 0x65636E6F6E5F7374;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1684632436;
  }
}

uint64_t sub_10032F1EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035C874(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032F214(uint64_t a1)
{
  unint64_t v2 = sub_1003FF134();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032F250(uint64_t a1)
{
  unint64_t v2 = sub_1003FF134();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10032F28C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10035C9C8(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10032F2D0(void *a1)
{
  return sub_10032EC98(a1, &qword_10072C4D0, (void (*)(void))sub_1003FF134, (uint64_t)&type metadata for TSID.CodingKeys, (uint64_t)&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t sub_10032F320(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_10032F350()
{
  if (*v0) {
    return 0x695F747365676964;
  }
  else {
    return 0x64616F6C796170;
  }
}

uint64_t sub_10032F394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035CC60(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032F3BC(uint64_t a1)
{
  unint64_t v2 = sub_1003FCABC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032F3F8(uint64_t a1)
{
  unint64_t v2 = sub_1003FCABC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10032F434@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10035CD6C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10032F464(void *a1)
{
  return sub_10032EE34(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10032F484()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10032F4E4()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_10032F534()
{
  unint64_t result = 0x617461645F617564;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6E6F697461727564;
      break;
    case 2:
      unint64_t result = 0x7079745F6B736174;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10032F5C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035CF58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032F5F0(uint64_t a1)
{
  unint64_t v2 = sub_1003FF188();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10032F62C(uint64_t a1)
{
  unint64_t v2 = sub_1003FF188();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10032F668(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v7 = sub_10035D11C(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = v6 & 1;
    *(unsigned char *)(a2 + 25) = HIBYTE(v6);
  }
}

uint64_t sub_10032F6A8(void *a1)
{
  return sub_10032EFA8(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 24) | (*(unsigned __int8 *)(v1 + 25) << 8));
}

unint64_t sub_10032F6D4(char a1)
{
  unint64_t result = 0x6E6F635F64697374;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7364656573;
      break;
    case 2:
      unint64_t result = 0x776F6C666B726F77;
      break;
    case 3:
      unint64_t result = 0x617461645F617564;
      break;
    case 4:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000023;
      break;
    case 7:
      unint64_t result = 0xD000000000000030;
      break;
    case 8:
      unint64_t result = 0x726F727265;
      break;
    case 9:
      unint64_t result = 0x6B63616264656566;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10032F858(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072B1F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035C38C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = *((void *)v3 + 2);
  long long v18 = *v3;
  *(void *)&long long v19 = v9;
  char v22 = 0;
  sub_10035C488();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v10 = *(long long *)((char *)v3 + 40);
    long long v18 = *(long long *)((char *)v3 + 24);
    long long v19 = v10;
    long long v11 = *(long long *)((char *)v3 + 72);
    long long v20 = *(long long *)((char *)v3 + 56);
    long long v21 = v11;
    char v22 = 1;
    sub_100307264();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v12 = type metadata accessor for OTDRequest(0);
    LOBYTE(v18) = 6;
    sub_100007764(&qword_10072A7F8);
    sub_1000B6120(&qword_10072A828, &qword_10072A7F8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v13 = (long long *)((char *)v3 + *(int *)(v12 + 48));
    uint64_t v14 = *((void *)v13 + 6);
    char v15 = *((unsigned char *)v13 + 56);
    long long v16 = v13[1];
    long long v18 = *v13;
    long long v19 = v16;
    long long v20 = v13[2];
    *(void *)&long long v21 = v14;
    BYTE8(v21) = v15;
    char v22 = 8;
    sub_10035C4DC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10032FC1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v4 = sub_100007764(&qword_10072A7D8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100007764(&qword_10072B1D8);
  uint64_t v7 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OTDRequest(0);
  uint64_t v11 = __chkstk_darwin(v10);
  char v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v13 + 15) = 2;
  uint64_t v14 = &v13[*(int *)(v11 + 52)];
  *(void *)uint64_t v14 = 0;
  v14[8] = 1;
  uint64_t v45 = a1;
  long long v46 = (int *)v11;
  char v15 = &v13[*(int *)(v11 + 56)];
  *(void *)char v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v44 = v15;
  sub_10000C728(a1, a1[3]);
  sub_10035C38C();
  char v42 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v45);
    return swift_bridgeObjectRelease();
  }
  else
  {
    long long v39 = (uint64_t *)v14;
    long long v40 = v6;
    uint64_t v16 = v7;
    char v51 = 0;
    sub_10035C3E0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v17 = v48;
    *(_OWORD *)char v13 = v47;
    *((void *)v13 + 2) = v17;
    char v51 = 1;
    sub_10030864C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v18 = v46;
    long long v19 = v48;
    *(_OWORD *)(v13 + 24) = v47;
    *(_OWORD *)(v13 + 40) = v19;
    long long v20 = v50;
    *(_OWORD *)(v13 + 56) = v49;
    *(_OWORD *)(v13 + 72) = v20;
    LOBYTE(v47) = 2;
    *((void *)v13 + 11) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v13 + 12) = v21;
    LOBYTE(v47) = 3;
    *((void *)v13 + 13) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v13 + 14) = v22;
    LOBYTE(v47) = 4;
    *((void *)v13 + 15) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v47) = 5;
    v13[128] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_100007764(&qword_10072A7F8);
    LOBYTE(v47) = 6;
    sub_1000B6120(&qword_10072A8F0, &qword_10072A7F8);
    uint64_t v23 = (uint64_t)v40;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000BEA14(v23, (uint64_t)&v13[v18[10]], &qword_10072A7D8);
    LOBYTE(v47) = 7;
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v25 = &v13[v18[11]];
    *(void *)uint64_t v25 = v24;
    v25[8] = v26 & 1;
    char v51 = 8;
    sub_10035C434();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v27 = v50;
    char v28 = BYTE8(v50);
    char v29 = &v13[v18[12]];
    long long v30 = v48;
    *(_OWORD *)char v29 = v47;
    *((_OWORD *)v29 + 1) = v30;
    *((_OWORD *)v29 + 2) = v49;
    *((void *)v29 + 6) = v27;
    v29[56] = v28;
    LOBYTE(v47) = 9;
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v32 = v39;
    *long long v39 = v31;
    *((unsigned char *)v32 + 8) = v33 & 1;
    LOBYTE(v47) = 10;
    uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v42, v43);
    uint64_t v37 = (uint64_t *)v44;
    swift_bridgeObjectRelease();
    *uint64_t v37 = v34;
    v37[1] = v36;
    sub_10035C2C4((uint64_t)v13, v41, type metadata accessor for OTDRequest);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v45);
    return sub_10035C32C((uint64_t)v13, type metadata accessor for OTDRequest);
  }
}

uint64_t sub_1003302C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (*a7)(void), uint64_t a8, void (*a9)(uint64_t, uint64_t, char *, uint64_t))
{
  uint64_t v21 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a2;
  uint64_t v11 = sub_100007764(a6);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  a7();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v24 = 0;
  uint64_t v15 = v22;
  a9(v20, v21, &v24, v11);
  if (!v15)
  {
    char v23 = 1;
    a9(v18, v19, &v23, v11);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

unint64_t sub_100330440()
{
  return sub_10032F6D4(*v0);
}

uint64_t sub_100330448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035D384(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100330470(uint64_t a1)
{
  unint64_t v2 = sub_10035C38C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003304AC(uint64_t a1)
{
  unint64_t v2 = sub_10035C38C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003304E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10032FC1C(a1, a2);
}

uint64_t sub_100330500(void *a1)
{
  return sub_10032F858(a1);
}

uint64_t sub_100330518()
{
  if (*v0) {
    return 0x727574616E676973;
  }
  else {
    return 0x64616F6C796170;
  }
}

uint64_t sub_100330558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035D840(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100330580(uint64_t a1)
{
  unint64_t v2 = sub_10035F8DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003305BC(uint64_t a1)
{
  unint64_t v2 = sub_10035F8DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003305F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100311C6C(a1, (uint64_t)&unk_10072B3A8, (uint64_t)sub_10035F8DC, (uint64_t)&type metadata for IDSPACData.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10035D940, a2);
}

uint64_t sub_100330648(void *a1)
{
  return sub_1003302C0(a1, *v1, v1[1], v1[2], v1[3], &qword_10072B3B8, (void (*)(void))sub_10035F8DC, (uint64_t)&type metadata for IDSPACData.CodingKeys, (void (*)(uint64_t, uint64_t, char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_1003306A8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072B2B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10035E098();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14(v3 + 32, (uint64_t)v12, &qword_10072B2C0);
    sub_1000BEA14((uint64_t)v12, (uint64_t)v11, &qword_10072B2C0);
    v10[15] = 2;
    sub_100007764(&qword_10072B2A8);
    sub_1000AB18C(&qword_10072B2C8, &qword_10072B2A8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003308C8()
{
  uint64_t result = 1701667182;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x756E5F656E6F6870;
      break;
    case 2:
      uint64_t result = 0x61636F6C5F737067;
      break;
    case 3:
      uint64_t result = 1684628851;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100330954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035DB58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033097C(uint64_t a1)
{
  unint64_t v2 = sub_10035E098();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003309B8(uint64_t a1)
{
  unint64_t v2 = sub_10035E098();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1003309F4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10035DD24(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100330A44(void *a1)
{
  return sub_1003306A8(a1);
}

Swift::Int sub_100330A88()
{
  return sub_100330AA0();
}

Swift::Int sub_100330AA0()
{
  return Hasher._finalize()();
}

uint64_t sub_100330AF0()
{
  return String.hash(into:)();
}

Swift::Int sub_100330B08()
{
  return sub_100330B20();
}

Swift::Int sub_100330B20()
{
  return Hasher._finalize()();
}

uint64_t sub_100330B6C@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1006F33A8;
  return sub_100330B78(v2, a1, a2);
}

uint64_t sub_100330B78@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

void sub_100330BC8(void *a1@<X8>)
{
  *a1 = 0x7375697265626974;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_100330BE4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100330C44()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100330C94(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072B2E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10035E0EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  sub_100007764(&qword_100726860);
  sub_1000B6120(&qword_10072B2F0, &qword_100726860);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AugmentedProfile(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100330ED4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = sub_100007764(&qword_100727600);
  __chkstk_darwin(v3 - 8);
  uint64_t v32 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100007764(&qword_10072B2D0);
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = (int *)type metadata accessor for AugmentedProfile(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007764(&qword_100726860);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = &v9[v7[6]];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v34 = v11;
  uint64_t v12 = &v9[v7[7]];
  strcpy(v12, "LegacyUnknown");
  *((_WORD *)v12 + 7) = -4864;
  uint64_t v35 = (uint64_t *)v12;
  uint64_t v36 = a1;
  uint64_t v13 = v7[8];
  *(void *)&v9[v13] = 0;
  sub_10000C728(a1, a1[3]);
  sub_10035E0EC();
  uint64_t v14 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v36);
    sub_10000C6CC((uint64_t)v9, &qword_100727600);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = v13;
    uint64_t v15 = v31;
    char v42 = 0;
    sub_1000B6120(&qword_10072B2E0, &qword_100726860);
    uint64_t v16 = (uint64_t)v32;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1001D9214(v16, (uint64_t)v9, &qword_100727600);
    char v41 = 1;
    uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v18 = (uint64_t *)&v9[v7[5]];
    *uint64_t v18 = v17;
    v18[1] = v19;
    char v40 = 2;
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v22 = v21;
    char v23 = (uint64_t *)v34;
    swift_bridgeObjectRelease();
    *char v23 = v20;
    v23[1] = v22;
    char v39 = 3;
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v26 = v25;
    uint64_t v27 = v35;
    swift_bridgeObjectRelease();
    *uint64_t v27 = v24;
    v27[1] = v26;
    char v38 = 4;
    uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v33);
    *(void *)&v9[v37] = v28;
    sub_10035C2C4((uint64_t)v9, v30, type metadata accessor for AugmentedProfile);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v36);
    return sub_10035C32C((uint64_t)v9, type metadata accessor for AugmentedProfile);
  }
}

unint64_t sub_100331398()
{
  unint64_t result = 0xD000000000000010;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656C69666F7270;
      break;
    case 2:
    case 3:
      unint64_t result = 0x49656C69666F7270;
      break;
    case 4:
      unint64_t result = 0x6E6F6973726576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100331444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035E140(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033146C(uint64_t a1)
{
  unint64_t v2 = sub_10035E0EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003314A8(uint64_t a1)
{
  unint64_t v2 = sub_10035E0EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003314E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100330ED4(a1, a2);
}

uint64_t sub_1003314FC(void *a1)
{
  return sub_100330C94(a1);
}

uint64_t sub_100331514(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10047143C(*a1, *a2);
}

Swift::Int sub_100331520()
{
  return Hasher._finalize()();
}

uint64_t sub_1003315C8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10033165C()
{
  return Hasher._finalize()();
}

unint64_t sub_100331700@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006F1D98;
  unint64_t result = sub_10035E3C0(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100331738(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xEC000000746E656DLL;
  uint64_t v5 = 0x7373657373416F6ELL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x64656C6261736964;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6C616D726F6ELL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10033179C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100332294(a1, &off_1006F1D98, a2);
}

uint64_t sub_1003317BC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10033180C(unsigned __int8 *a1, char *a2)
{
  return sub_1004719E0(*a1, *a2);
}

Swift::Int sub_100331818()
{
  return Hasher._finalize()();
}

uint64_t sub_10033190C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003319E8()
{
  return Hasher._finalize()();
}

unint64_t sub_100331AD8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006F33E0;
  unint64_t result = sub_10035E378(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100331B10(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x64756F6C4369;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x73656E755469;
      goto LABEL_3;
    case 2:
      *a1 = 0x64726143656DLL;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x6D754E656E6F6870;
      a1[1] = 0xEB00000000726562;
      break;
    case 4:
      *a1 = 0x726F707075736E75;
      a1[1] = 0xEB00000000646574;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE600000000000000;
      break;
  }
}

uint64_t sub_100331BC8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100331BF8(a1, 4, (uint64_t (*)(unsigned char *, uint64_t))sub_10033DDB8, a2);
}

uint64_t sub_100331BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t (*a3)(unsigned char *, uint64_t)@<X4>, unsigned char *a4@<X8>)
{
  sub_100030A10(a1, (uint64_t)v11);
  char v9 = a3(v11, a2);
  uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  if (!v4) {
    *a4 = v9;
  }
  return result;
}

uint64_t sub_100331C78()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100331CC8(unsigned __int8 *a1, char *a2)
{
  return sub_100471C18(*a1, *a2);
}

Swift::Int sub_100331CD4()
{
  return sub_100473068();
}

uint64_t sub_100331CE0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100331DFC()
{
  return sub_100473068();
}

unint64_t sub_100331E04@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006F3478;
  unint64_t result = sub_1003FE9F4(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100331E3C(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEF64756F6C43692ELL;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x73746E756F636341;
      *(void *)(a1 + 8) = 0xEF73656E7554692ELL;
      break;
    case 3:
      strcpy((char *)a1, "CoreTelephony");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 4:
      *(void *)a1 = 0x797469746E656449;
      *(void *)(a1 + 8) = 0xE800000000000000;
      break;
    case 5:
      *(void *)a1 = 0x64726143654DLL;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 6:
      *(void *)a1 = 0x726F707075736E75;
      *(void *)(a1 + 8) = 0xEB00000000646574;
      break;
    default:
LABEL_3:
      *(void *)a1 = 0x73746E756F636341;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_100331F3C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100331BF8(a1, 6, (uint64_t (*)(unsigned char *, uint64_t))sub_10033DEB0, a2);
}

uint64_t sub_100331F6C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100331FBC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100471E6C(*a1, *a2);
}

Swift::Int sub_100331FC8()
{
  return Hasher._finalize()();
}

uint64_t sub_10033207C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10033211C()
{
  return Hasher._finalize()();
}

unint64_t sub_1003321CC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006F3540;
  unint64_t result = sub_10035E3C0(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100332204(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0x800000010062A750;
  unint64_t v5 = 0xD000000000000018;
  if (v2 != 1)
  {
    unint64_t v5 = 0x6146737961776C61;
    unint64_t v4 = 0xEE006B6361626C6CLL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x746C7561666564;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100332274@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100332294(a1, &off_1006F3540, a2);
}

uint64_t sub_100332294@<X0>(uint64_t a1@<X0>, void *a2@<X3>, unsigned char *a3@<X8>)
{
  sub_100030A10(a1, (uint64_t)v10);
  v7._rawValue = a2;
  char v8 = sub_10033DFA8(v10, 0, v7);
  uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  if (!v3) {
    *a3 = v8;
  }
  return result;
}

uint64_t sub_100332308()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100332358(char *a1, char *a2)
{
  return sub_100471BA0(*a1, *a2);
}

Swift::Int sub_100332364()
{
  return Hasher._finalize()();
}

uint64_t sub_1003323D4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100332428()
{
  return Hasher._finalize()();
}

uint64_t sub_100332494@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1006F35A8;
  return sub_100075FD0(v2, a1, a2);
}

void sub_1003324A0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x64756F6C4369;
  if (*v1) {
    uint64_t v2 = 0x73656E755469;
  }
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1003324D0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  sub_100030A10(a1, (uint64_t)v8);
  char v5 = sub_10033E0B4(v8, 0);
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  }
  char v7 = v5 & 1;
  uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  *a2 = v7;
  return result;
}

unint64_t sub_100332548(char a1)
{
  unint64_t result = 0xD000000000000019;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x74616E6974736564;
      break;
    case 4:
      unint64_t result = 0x5468736572666572;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
      unint64_t result = 0x4F646E6553657375;
      break;
    case 8:
      unint64_t result = 0x4F646E6553657375;
      break;
    case 9:
      unint64_t result = 0x447972616D697270;
      break;
    case 10:
      unint64_t result = 0x79546769666E6F63;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1003326C0(char a1)
{
  unint64_t result = 0xD000000000000019;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x74616E6974736564;
      break;
    case 4:
      unint64_t result = 0x5468736572666572;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
      unint64_t result = 0x4F646E6553657375;
      break;
    case 8:
      unint64_t result = 0x4F646E6553657375;
      break;
    case 9:
      unint64_t result = 0x447972616D697270;
      break;
    case 10:
      unint64_t result = 0x79546769666E6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100332838()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100332888(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1003328A0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100332548);
}

uint64_t sub_1003328A0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int sub_100332938(uint64_t a1, uint64_t a2)
{
  return sub_100332950(a1, a2, (void (*)(uint64_t))sub_100332548);
}

Swift::Int sub_100332950(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1003329BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003329D4(a1, a2, a3, (void (*)(void))sub_100332548);
}

uint64_t sub_1003329D4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100332A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100332A44(a1, a2, a3, (void (*)(uint64_t))sub_100332548);
}

Swift::Int sub_100332A44(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100332AAC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10035E408(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100332ADC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100332548(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100332B08()
{
  return sub_1003326C0(*v0);
}

unint64_t sub_100332B10@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10035E408(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100332B38(uint64_t a1)
{
  unint64_t v2 = sub_10035EE68();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100332B74(uint64_t a1)
{
  unint64_t v2 = sub_10035EE68();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100332BB0(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = sub_100007764(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  uint64_t v9 = v11[1];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v9)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 sub_100332D6C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10035E454(a1, v7);
  if (!v2)
  {
    long long v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 93) = *(_OWORD *)((char *)v8 + 13);
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_100332DC0()
{
  return sub_10035F1A4();
}

unint64_t sub_100332DD8()
{
  unint64_t result = 6582895;
  switch(*v0)
  {
    case 1:
      unint64_t result = 6583407;
      break;
    case 2:
      unint64_t result = 6581359;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100332E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10035F358(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100332E74(uint64_t a1)
{
  unint64_t v2 = sub_10035F834();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100332EB0(uint64_t a1)
{
  unint64_t v2 = sub_10035F834();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100332EEC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100332F28(a1, &qword_10072B378, (void (*)(void))sub_10035F834, a2);
}

double sub_100332F28@<D0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, _OWORD *a4@<X8>)
{
  sub_10035F4D0(a1, a2, a3, (uint64_t *)v9);
  if (!v4)
  {
    long long v7 = v9[1];
    *a4 = v9[0];
    a4[1] = v7;
    double result = *(double *)&v10;
    long long v8 = v11;
    a4[2] = v10;
    a4[3] = v8;
  }
  return result;
}

uint64_t sub_100332F78(void *a1)
{
  return sub_100332BB0(a1, &qword_10072B388, (void (*)(void))sub_10035F834);
}

uint64_t sub_100332FB4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C5A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1003FF578();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  long long v12 = *v3;
  long long v13 = v9;
  v11[15] = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100333154()
{
  uint64_t v1 = 0x69746E6564497072;
  if (*v0 != 1) {
    uint64_t v1 = 0x72656469766F7270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4874736575716572;
  }
}

uint64_t sub_1003331C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003FD4D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003331F0(uint64_t a1)
{
  unint64_t v2 = sub_1003FF578();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033322C(uint64_t a1)
{
  unint64_t v2 = sub_1003FF578();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100333268@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1003FD674(a1, v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1003332AC(void *a1)
{
  return sub_100332FB4(a1);
}

uint64_t sub_1003332C4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072CCB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100401348();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[3];
  long long v17 = v3[2];
  long long v18 = v9;
  long long v10 = v3[5];
  long long v19 = v3[4];
  long long v20 = v10;
  long long v11 = v3[1];
  long long v15 = *v3;
  long long v16 = v11;
  char v14 = 0;
  sub_100402DB8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v15) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v15 = *((void *)v3 + 14);
    char v14 = 2;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003334C4()
{
  unint64_t v1 = 0x45656D69746E7572;
  if (*v0 != 1) {
    unint64_t v1 = 0xD00000000000001ALL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65736E6F70736572;
  }
}

uint64_t sub_100333538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003FDA34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100333560(uint64_t a1)
{
  unint64_t v2 = sub_100401348();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033359C(uint64_t a1)
{
  unint64_t v2 = sub_100401348();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1003335D8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1003FDBC4(a1, v8);
  if (!v2)
  {
    long long v5 = v12;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v13;
    *(void *)(a2 + 112) = v14;
    long long v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    double result = *(double *)&v9;
    long long v7 = v10;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

uint64_t sub_100333640(void *a1)
{
  return sub_1003332C4(a1);
}

unint64_t sub_100333658(char a1)
{
  unint64_t result = 0x4874736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6D746E6573657270;
      break;
    case 3:
      unint64_t result = 0x65636E6F6ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100333728(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C590);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FF524();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  v11[0] = *v3;
  v11[1] = v9;
  char v12 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14((uint64_t)(v3 + 2), (uint64_t)v13, &qword_100729C68);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v11, &qword_100729C68);
    char v12 = 1;
    sub_1003FD160();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100333950()
{
  return sub_100333658(*v0);
}

uint64_t sub_100333958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003FE0C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100333980(uint64_t a1)
{
  unint64_t v2 = sub_1003FF524();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003339BC(uint64_t a1)
{
  unint64_t v2 = sub_1003FF524();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1003339F8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1003FE314(a1, v9);
  if (!v2)
  {
    long long v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    long long v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    long long v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    double result = *(double *)&v10;
    long long v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_100333A4C(void *a1)
{
  return sub_100333728(a1);
}

uint64_t sub_100333A98(char *a1, char *a2)
{
  return sub_100472714(*a1, *a2);
}

Swift::Int sub_100333AA4()
{
  return sub_100472F34();
}

uint64_t sub_100333AB0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100333AE8()
{
  return sub_100472F34();
}

unint64_t sub_100333AF0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006F3720;
  unint64_t result = sub_1003FE9F4(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100333B28(void *a1@<X8>)
{
  *a1 = *v1 + 49;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_100333B3C()
{
  return *v0 + 49;
}

unint64_t sub_100333B4C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006F3720;
  unint64_t result = sub_1003FE9F4(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100333B7C(uint64_t a1)
{
  unint64_t v2 = sub_10035FAA0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100333BB8(uint64_t a1)
{
  unint64_t v2 = sub_10035FAA0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100333BF4(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_100333C44(a1);
  return v2;
}

uint64_t sub_100333C44(void *a1)
{
  uint64_t v4 = sub_100007764(&qword_10072B420);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035FAA0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    type metadata accessor for CWTPayload();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v15) = 0;
    *(void *)(v1 + 16) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(void *)(v1 + 24) = v8;
    LOBYTE(v15) = 1;
    *(void *)(v1 + 32) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(void *)(v1 + 40) = v9;
    LOBYTE(v15) = 2;
    *(void *)(v1 + 48) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(void *)(v1 + 56) = v10;
    LOBYTE(v15) = 3;
    *(void *)(v1 + 64) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(unsigned char *)(v1 + 72) = v11 & 1;
    LOBYTE(v15) = 4;
    *(void *)(v1 + 80) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(unsigned char *)(v1 + 88) = v12 & 1;
    LOBYTE(v15) = 5;
    *(void *)(v1 + 96) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(unsigned char *)(v1 + 104) = v13 & 1;
    char v16 = 6;
    sub_10005D424();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_OWORD *)(v1 + 112) = v15;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v1;
}

uint64_t sub_100333F74(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  uint64_t v28 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for EncodingError();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  char v23 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v25 = (char *)&v23 - v10;
  uint64_t v11 = sub_100007764(&qword_10072B430);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035FAA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v29) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v15 = v27;
    char v16 = v28;
    long long v18 = v25;
    uint64_t v17 = v26;
    *(void *)&long long v29 = v2;
    swift_errorRetain();
    sub_100007764((uint64_t *)&unk_100723450);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      long long v19 = v23;
      uint64_t v20 = v24;
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v23, v18, v7);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v21, v19, v7);
      (*(void (**)(char *, void, uint64_t))(v17 + 104))(v16, enum case for DIPError.Code.cborEncodingFailed(_:), v15);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v7);
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, void, uint64_t))(v17 + 104))(v16, enum case for DIPError.Code.internalError(_:), v15);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    return swift_errorRelease();
  }
  else
  {
    LOBYTE(v29) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v29) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v29) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v29) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v29 = *(_OWORD *)(v3 + 112);
    char v30 = 6;
    sub_10005D478();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1003345E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C5E0(*(void *)(v0 + 112), *(void *)(v0 + 120));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CWTPayload()
{
  return self;
}

uint64_t sub_100334654@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 136))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100334690()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t sub_1003346D4(unsigned __int8 *a1, char *a2)
{
  return sub_100470324(*a1, *a2);
}

Swift::Int sub_1003346E0()
{
  return sub_100472B48();
}

uint64_t sub_1003346E8()
{
  return sub_10029BAFC();
}

Swift::Int sub_1003346F0()
{
  return sub_1004735A0();
}

unint64_t sub_1003346F8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1003FEA3C(*a1);
  *a2 = result;
  return result;
}

void sub_100334728(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x800000010062A860;
  switch(*v1)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v2 = 0x65636E6F6ELL;
      goto LABEL_3;
    case 2:
      *a1 = 0x64696C61567369;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0xD000000000000016;
      a1[1] = 0x800000010062A890;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = v3;
      break;
  }
}

unint64_t sub_1003347C4()
{
  unint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x65636E6F6ELL;
      break;
    case 2:
      unint64_t result = 0x64696C61567369;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100334854@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1003FEA3C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10033487C(uint64_t a1)
{
  unint64_t v2 = sub_10035FA4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003348B8(uint64_t a1)
{
  unint64_t v2 = sub_10035FA4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003348F4(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_100334944(a1);
  return v2;
}

uint64_t sub_100334944(void *a1)
{
  uint64_t v4 = sub_100007764(&qword_10072B418);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035FA4C();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_release();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    type metadata accessor for CredentialValidityCWTPayload();
    swift_deallocPartialClassInstance();
  }
  else
  {
    char v11 = 0;
    sub_10005D424();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v1 + 128) = v10[0];
    char v11 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v1 + 144) = v10[0];
    LOBYTE(v10[0]) = 2;
    *(unsigned char *)(v1 + 160) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v10[0]) = 3;
    *(void *)(v1 + 168) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v1 + 176) = v9;
    swift_release();
    sub_100030A10((uint64_t)a1, (uint64_t)v10);
    sub_100333C44(v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  return v1;
}

uint64_t sub_100334C40(void *a1)
{
  uint64_t v24 = type metadata accessor for DIPError.Code();
  uint64_t v27 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for EncodingError();
  uint64_t v22 = *(void *)(v25 - 8);
  uint64_t v5 = __chkstk_darwin(v25);
  uint64_t v21 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v23 = (char *)&v20 - v7;
  uint64_t v8 = sub_100007764(&qword_10072B408);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035FA4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v28 = *(_OWORD *)(v1 + 128);
  char v29 = 0;
  sub_10005D478();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = v25;
    uint64_t v13 = v26;
    uint64_t v15 = v23;
    uint64_t v14 = v24;
    *(void *)&long long v28 = v2;
    swift_errorRetain();
    sub_100007764((uint64_t *)&unk_100723450);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      char v16 = v21;
      uint64_t v17 = v22;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v21, v15, v12);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v18, v16, v12);
      (*(void (**)(char *, void, uint64_t))(v27 + 104))(v13, enum case for DIPError.Code.cborEncodingFailed(_:), v14);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v16, v12);
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, void, uint64_t))(v27 + 104))(v13, enum case for DIPError.Code.internalError(_:), v14);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    return swift_errorRelease();
  }
  else
  {
    long long v28 = *(_OWORD *)(v1 + 144);
    char v29 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v28) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v28) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100333F74(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_100335290()
{
  sub_10000C5F4(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10000C5F4(*(void *)(v0 + 144), *(void *)(v0 + 152));

  return swift_bridgeObjectRelease();
}

uint64_t sub_1003352C8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C5E0(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10000C5F4(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10000C5F4(*(void *)(v0 + 144), *(void *)(v0 + 152));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100335318()
{
  sub_1003352C8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CredentialValidityCWTPayload()
{
  return self;
}

void *sub_100335370(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v11 = a3[9];
    __dst = (char *)a1 + v11;
    uint64_t v12 = (char *)a2 + v11;
    a1[8] = a2[8];
    uint64_t v13 = type metadata accessor for HardwareAttestationType();
    uint64_t v38 = *(void *)(v13 - 8);
    char v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39(v14, 1, v15))
    {
      uint64_t v16 = sub_100007764(&qword_100722310);
      memcpy(__dst, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v38 + 16))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v15);
    }
    uint64_t v18 = a3[11];
    *(void *)((char *)v4 + a3[10]) = *(void *)((char *)a2 + a3[10]);
    long long v19 = (void *)((char *)v4 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *long long v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    char v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    *(void *)char v23 = *(void *)v24;
    unsigned char v23[8] = v24[8];
    uint64_t v25 = a3[14];
    uint64_t v26 = a3[15];
    uint64_t v27 = (char *)v4 + v25;
    long long v28 = (char *)a2 + v25;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    char v29 = (char *)v4 + v26;
    char v30 = (char *)a2 + v26;
    *(void *)char v29 = *(void *)v30;
    char v29[8] = v30[8];
    uint64_t v31 = a3[16];
    uint64_t v32 = a3[17];
    uint64_t v33 = (void *)((char *)v4 + v31);
    uint64_t v34 = (void *)((char *)a2 + v31);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    *((unsigned char *)v4 + v32) = *((unsigned char *)a2 + v32);
    uint64_t v36 = a3[19];
    *(void *)((char *)v4 + a3[18]) = *(void *)((char *)a2 + a3[18]);
    *(void *)((char *)v4 + v36) = *(void *)((char *)a2 + v36);
    *(void *)((char *)v4 + a3[20]) = *(void *)((char *)a2 + a3[20]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100335638(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for HardwareAttestationType();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100335778(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v10 = a3[9];
  __dst = (char *)a1 + v10;
  uint64_t v11 = (char *)a2 + v10;
  a1[8] = a2[8];
  uint64_t v12 = type metadata accessor for HardwareAttestationType();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v37(v13, 1, v14))
  {
    uint64_t v15 = sub_100007764(&qword_100722310);
    memcpy(__dst, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v36 + 16))(__dst, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v14);
  }
  uint64_t v16 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  *(void *)uint64_t v21 = *(void *)v22;
  unsigned char v21[8] = v22[8];
  uint64_t v23 = a3[14];
  uint64_t v24 = a3[15];
  uint64_t v25 = (char *)a1 + v23;
  uint64_t v26 = (char *)a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  uint64_t v27 = (char *)a1 + v24;
  long long v28 = (char *)a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  uint64_t v29 = a3[16];
  uint64_t v30 = a3[17];
  uint64_t v31 = (void *)((char *)a1 + v29);
  uint64_t v32 = (void *)((char *)a2 + v29);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  *((unsigned char *)a1 + v30) = *((unsigned char *)a2 + v30);
  uint64_t v34 = a3[19];
  *(void *)((char *)a1 + a3[18]) = *(void *)((char *)a2 + a3[18]);
  *(void *)((char *)a1 + v34) = *(void *)((char *)a2 + v34);
  *(void *)((char *)a1 + a3[20]) = *(void *)((char *)a2 + a3[20]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1003359F0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[9];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HardwareAttestationType();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100007764(&qword_100722310);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[13];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = *(void *)v20;
  unsigned char v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = a3[14];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = *(void *)v24;
  unsigned char v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[15];
  uint64_t v27 = (char *)a1 + v26;
  long long v28 = (char *)a2 + v26;
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  uint64_t v30 = a3[16];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  *(void *)((char *)a1 + a3[18]) = *(void *)((char *)a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[20]) = *(void *)((char *)a2 + a3[20]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100335D4C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = a3[9];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for HardwareAttestationType();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100007764(&qword_100722310);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = a3[14];
  uint64_t v19 = a3[15];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  uint64_t v22 = a1 + v19;
  uint64_t v23 = a2 + v19;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  uint64_t v25 = a3[19];
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);
  *(void *)(a1 + a3[20]) = *(void *)(a2 + a3[20]);
  return a1;
}

void *sub_100335F20(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[9];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for HardwareAttestationType();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_100007764(&qword_100722310);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[11];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[13];
  uint64_t v25 = a3[14];
  uint64_t v26 = (char *)a1 + v24;
  uint64_t v27 = (char *)a2 + v24;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  long long v28 = (char *)a1 + v25;
  uint64_t v29 = (char *)a2 + v25;
  *(void *)long long v28 = *(void *)v29;
  v28[8] = v29[8];
  uint64_t v30 = a3[15];
  uint64_t v31 = a3[16];
  uint64_t v32 = (char *)a1 + v30;
  uint64_t v33 = (char *)a2 + v30;
  *(void *)uint64_t v32 = *(void *)v33;
  v32[8] = v33[8];
  uint64_t v34 = (void *)((char *)a1 + v31);
  uint64_t v35 = (void *)((char *)a2 + v31);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[18];
  *((unsigned char *)a1 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  *(void *)((char *)a1 + v38) = *(void *)((char *)a2 + v38);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[20]) = *(void *)((char *)a2 + a3[20]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003361E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003361F4);
}

uint64_t sub_1003361F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100007764(&qword_100722310);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1003362A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003362BC);
}

uint64_t sub_1003362BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_100722310);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for IdentityProofingStaticWorkflow(uint64_t a1)
{
  return sub_100048DF0(a1, qword_10072AD18);
}

void sub_100336388()
{
  sub_1003623C8(319, (unint64_t *)&qword_100721B00, (void (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for ResponseHeader()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ResponseHeader(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ResponseHeader(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ResponseHeader(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseHeader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResponseHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResponseHeader()
{
  return &type metadata for ResponseHeader;
}

uint64_t destroy for LivenessConfigV2(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = *(void *)(a1 + 200);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for LivenessConfigV2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    *(_OWORD *)(a1 + 158) = *(_OWORD *)(a2 + 158);
    long long v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    long long v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v14;
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    long long v16 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v16;
    uint64_t v9 = *(void *)(a2 + 200);
    if (v9) {
      goto LABEL_3;
    }
LABEL_5:
    long long v17 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v17;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 250) = *(_OWORD *)(a2 + 250);
    long long v18 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v18;
    return a1;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_DWORD *)(a1 + 169) = *(_DWORD *)(a2 + 169);
  *(unsigned char *)(a1 + 173) = *(unsigned char *)(a2 + 173);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = *(void *)(a2 + 200);
  if (!v9) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v10;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_WORD *)(a1 + 233) = *(_WORD *)(a2 + 233);
  *(unsigned char *)(a1 + 235) = *(unsigned char *)(a2 + 235);
  uint64_t v11 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v11;
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LivenessConfigV2(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (*(void *)(a1 + 16))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *(void *)(a1 + 104) = *((void *)a2 + 13);
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      *(void *)(a1 + 120) = *((void *)a2 + 15);
      uint64_t v5 = *((void *)a2 + 16);
      *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
      *(void *)(a1 + 128) = v5;
      uint64_t v6 = *((void *)a2 + 18);
      *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
      *(void *)(a1 + 144) = v6;
      uint64_t v7 = *((void *)a2 + 20);
      *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
      *(void *)(a1 + 160) = v7;
      *(unsigned char *)(a1 + 169) = *((unsigned char *)a2 + 169);
      *(unsigned char *)(a1 + 170) = *((unsigned char *)a2 + 170);
      *(unsigned char *)(a1 + 171) = *((unsigned char *)a2 + 171);
      *(unsigned char *)(a1 + 172) = *((unsigned char *)a2 + 172);
      *(unsigned char *)(a1 + 173) = *((unsigned char *)a2 + 173);
    }
    else
    {
      sub_100336E00(a1);
      long long v12 = a2[1];
      long long v11 = a2[2];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = v11;
      long long v13 = a2[6];
      long long v15 = a2[3];
      long long v14 = a2[4];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 48) = v15;
      *(_OWORD *)(a1 + 64) = v14;
      long long v17 = a2[8];
      long long v16 = a2[9];
      long long v18 = a2[7];
      *(_OWORD *)(a1 + 158) = *(long long *)((char *)a2 + 158);
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 144) = v16;
      *(_OWORD *)(a1 + 112) = v18;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(void *)(a1 + 120) = *((void *)a2 + 15);
    uint64_t v8 = *((void *)a2 + 16);
    *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
    *(void *)(a1 + 128) = v8;
    uint64_t v9 = *((void *)a2 + 18);
    *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
    *(void *)(a1 + 144) = v9;
    uint64_t v10 = *((void *)a2 + 20);
    *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
    *(void *)(a1 + 160) = v10;
    *(unsigned char *)(a1 + 169) = *((unsigned char *)a2 + 169);
    *(unsigned char *)(a1 + 170) = *((unsigned char *)a2 + 170);
    *(unsigned char *)(a1 + 171) = *((unsigned char *)a2 + 171);
    *(unsigned char *)(a1 + 172) = *((unsigned char *)a2 + 172);
    *(unsigned char *)(a1 + 173) = *((unsigned char *)a2 + 173);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v19 = *a2;
    long long v20 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v20;
    *(_OWORD *)a1 = v19;
    long long v21 = a2[3];
    long long v22 = a2[4];
    long long v23 = a2[6];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v23;
    *(_OWORD *)(a1 + 48) = v21;
    *(_OWORD *)(a1 + 64) = v22;
    long long v24 = a2[7];
    long long v25 = a2[8];
    long long v26 = a2[9];
    *(_OWORD *)(a1 + 158) = *(long long *)((char *)a2 + 158);
    *(_OWORD *)(a1 + 128) = v25;
    *(_OWORD *)(a1 + 144) = v26;
    *(_OWORD *)(a1 + 112) = v24;
  }
  uint64_t v27 = (_OWORD *)(a1 + 176);
  long long v28 = a2 + 11;
  uint64_t v29 = *((void *)a2 + 25);
  if (*(void *)(a1 + 200))
  {
    if (v29)
    {
      *(void *)(a1 + 176) = *((void *)a2 + 22);
      *(void *)(a1 + 184) = *((void *)a2 + 23);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *((void *)a2 + 24);
      *(void *)(a1 + 200) = *((void *)a2 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 208) = *((void *)a2 + 26);
      *(void *)(a1 + 216) = *((void *)a2 + 27);
      uint64_t v30 = *((void *)a2 + 28);
      *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
      *(void *)(a1 + 224) = v30;
      *(unsigned char *)(a1 + 233) = *((unsigned char *)a2 + 233);
      *(unsigned char *)(a1 + 234) = *((unsigned char *)a2 + 234);
      *(unsigned char *)(a1 + 235) = *((unsigned char *)a2 + 235);
      uint64_t v31 = *((void *)a2 + 30);
      *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
      *(void *)(a1 + 240) = v31;
      uint64_t v32 = *((void *)a2 + 32);
      *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
      *(void *)(a1 + 256) = v32;
      *(unsigned char *)(a1 + 265) = *((unsigned char *)a2 + 265);
    }
    else
    {
      sub_1003A9A30(a1 + 176);
      long long v36 = a2[12];
      *uint64_t v27 = *v28;
      *(_OWORD *)(a1 + 192) = v36;
      long long v38 = a2[14];
      long long v37 = a2[15];
      long long v39 = a2[13];
      *(_OWORD *)(a1 + 250) = *(long long *)((char *)a2 + 250);
      *(_OWORD *)(a1 + 224) = v38;
      *(_OWORD *)(a1 + 240) = v37;
      *(_OWORD *)(a1 + 208) = v39;
    }
  }
  else if (v29)
  {
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    *(void *)(a1 + 184) = *((void *)a2 + 23);
    *(void *)(a1 + 192) = *((void *)a2 + 24);
    *(void *)(a1 + 200) = *((void *)a2 + 25);
    *(void *)(a1 + 208) = *((void *)a2 + 26);
    *(void *)(a1 + 216) = *((void *)a2 + 27);
    uint64_t v33 = *((void *)a2 + 28);
    *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
    *(void *)(a1 + 224) = v33;
    *(unsigned char *)(a1 + 233) = *((unsigned char *)a2 + 233);
    *(unsigned char *)(a1 + 234) = *((unsigned char *)a2 + 234);
    *(unsigned char *)(a1 + 235) = *((unsigned char *)a2 + 235);
    uint64_t v34 = *((void *)a2 + 30);
    *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
    *(void *)(a1 + 240) = v34;
    uint64_t v35 = *((void *)a2 + 32);
    *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
    *(void *)(a1 + 256) = v35;
    *(unsigned char *)(a1 + 265) = *((unsigned char *)a2 + 265);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v40 = a2[12];
    *uint64_t v27 = *v28;
    *(_OWORD *)(a1 + 192) = v40;
    long long v41 = a2[13];
    long long v42 = a2[14];
    long long v43 = a2[15];
    *(_OWORD *)(a1 + 250) = *(long long *)((char *)a2 + 250);
    *(_OWORD *)(a1 + 224) = v42;
    *(_OWORD *)(a1 + 240) = v43;
    *(_OWORD *)(a1 + 208) = v41;
  }
  return a1;
}

uint64_t sub_100336E00(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for LivenessConfigV2(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x10AuLL);
}

uint64_t assignWithTake for LivenessConfigV2(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = v4;
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v6;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      uint64_t v7 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v7;
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      *(_DWORD *)(a1 + 169) = *(_DWORD *)(a2 + 169);
      *(unsigned char *)(a1 + 173) = *(unsigned char *)(a2 + 173);
      goto LABEL_6;
    }
    sub_100336E00(a1);
  }
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 158) = *(_OWORD *)(a2 + 158);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  long long v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  long long v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v12;
LABEL_6:
  if (!*(void *)(a1 + 200))
  {
LABEL_10:
    long long v15 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v15;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 250) = *(_OWORD *)(a2 + 250);
    long long v16 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v16;
    return a1;
  }
  uint64_t v13 = *(void *)(a2 + 200);
  if (!v13)
  {
    sub_1003A9A30(a1 + 176);
    goto LABEL_10;
  }
  uint64_t v14 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v13;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  return a1;
}

uint64_t getEnumTagSinglePayload for LivenessConfigV2(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 266)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LivenessConfigV2(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 264) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 266) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 266) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LivenessConfigV2()
{
  return &type metadata for LivenessConfigV2;
}

uint64_t initializeWithCopy for PassiveLivenessConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PassiveLivenessConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  uint64_t v5 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

__n128 initializeWithTake for PassiveLivenessConfig(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PassiveLivenessConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for PassiveLivenessConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 90)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PassiveLivenessConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 90) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 90) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PassiveLivenessConfig()
{
  return &type metadata for PassiveLivenessConfig;
}

uint64_t initializeWithCopy for ActiveLivenessConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v5;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_DWORD *)(a1 + 169) = *(_DWORD *)(a2 + 169);
  *(unsigned char *)(a1 + 173) = *(unsigned char *)(a2 + 173);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActiveLivenessConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v4 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v4;
  uint64_t v5 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v5;
  uint64_t v6 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v6;
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  *(unsigned char *)(a1 + 171) = *(unsigned char *)(a2 + 171);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(unsigned char *)(a1 + 173) = *(unsigned char *)(a2 + 173);
  return a1;
}

__n128 initializeWithTake for ActiveLivenessConfig(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(_OWORD *)(a1 + 158) = *(long long *)((char *)a2 + 158);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for ActiveLivenessConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v5;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_DWORD *)(a1 + 169) = *(_DWORD *)(a2 + 169);
  *(unsigned char *)(a1 + 173) = *(unsigned char *)(a2 + 173);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActiveLivenessConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 174)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActiveLivenessConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 172) = 0;
    *(_DWORD *)(result + 168) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 174) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 174) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActiveLivenessConfig()
{
  return &type metadata for ActiveLivenessConfig;
}

uint64_t destroy for ODNErrorInfo()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ODNErrorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ODNErrorInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for ODNErrorInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ODNErrorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ODNErrorInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ODNErrorInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ODNErrorInfo()
{
  return &type metadata for ODNErrorInfo;
}

ValueMetadata *type metadata accessor for TrainingSignalId()
{
  return &type metadata for TrainingSignalId;
}

uint64_t sub_1003379CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    uint64_t v8 = *(int *)(a3 + 28);
    long long v9 = (void *)(a1 + v8);
    long long v10 = (char *)a2 + v8;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_100007764(&qword_100728600);
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_100007764(&qword_10072A6E8);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = a1 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    *(void *)uint64_t v16 = *(void *)v17;
    *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  }
  return a1;
}

uint64_t sub_100337B7C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_100007764(&qword_100728600);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_100337C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  long long v9 = (const void *)(a2 + v7);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_100007764(&qword_100728600);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100007764(&qword_10072A6E8);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t sub_100337DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  long long v9 = (void *)(a2 + v7);
  uint64_t v10 = sub_100007764(&qword_100728600);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100007764(&qword_10072A6E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = a1 + v16;
  long long v18 = (uint64_t *)(a2 + v16);
  uint64_t v19 = *v18;
  *(unsigned char *)(v17 + 8) = *((unsigned char *)v18 + 8);
  *(void *)uint64_t v17 = v19;
  return a1;
}

uint64_t sub_100337F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100007764(&qword_100728600);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100007764(&qword_10072A6E8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  return a1;
}

uint64_t sub_1003380E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = sub_100007764(&qword_100728600);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100007764(&qword_10072A6E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t sub_1003382AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003382C0);
}

uint64_t sub_1003382C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100007764(&qword_10072A6E8);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 28);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_100338380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100338394);
}

uint64_t sub_100338394(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_10072A6E8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AssessmentAdditionalInfo(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072ADE8);
}

void sub_100338460()
{
  sub_1003F09D4(319, (unint64_t *)&unk_10072ADF8, &qword_100728600);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10033851C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    uint64_t v8 = a2[4];
    swift_bridgeObjectRetain();
    if (v8)
    {
      *(void *)(a1 + 24) = a2[3];
      *(void *)(a1 + 32) = v8;
      uint64_t v9 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v9;
      uint64_t v10 = a2[8];
      *(void *)(a1 + 56) = a2[7];
      *(void *)(a1 + 64) = v10;
      uint64_t v11 = a2[10];
      *(void *)(a1 + 72) = a2[9];
      *(void *)(a1 + 80) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 40) = v13;
      long long v14 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = v14;
    }
    uint64_t v15 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v15;
    uint64_t v16 = a2[13];
    uint64_t v17 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v17;
    *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
    uint64_t v18 = a3[10];
    uint64_t v19 = (void *)(a1 + v18);
    long long v20 = (char *)a2 + v18;
    *(void *)(a1 + 104) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_100007764(&qword_10072A7F8);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_100007764(&qword_10072A7D8);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v24 = a3[11];
    uint64_t v25 = a3[12];
    uint64_t v26 = a1 + v24;
    uint64_t v27 = (uint64_t)a2 + v24;
    *(void *)uint64_t v26 = *(void *)v27;
    *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
    uint64_t v28 = a1 + v25;
    uint64_t v29 = (uint64_t)a2 + v25;
    uint64_t v30 = *(void *)(v29 + 32);
    if (v30 == 1)
    {
      long long v31 = *(_OWORD *)(v29 + 16);
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
      *(_OWORD *)(v28 + 16) = v31;
      *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
      *(_OWORD *)(v28 + 41) = *(_OWORD *)(v29 + 41);
    }
    else
    {
      uint64_t v32 = *(void *)(v29 + 8);
      *(void *)uint64_t v28 = *(void *)v29;
      *(void *)(v28 + 8) = v32;
      *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
      *(void *)(v28 + 24) = *(void *)(v29 + 24);
      *(void *)(v28 + 32) = v30;
      uint64_t v33 = *(void *)(v29 + 48);
      *(void *)(v28 + 40) = *(void *)(v29 + 40);
      *(void *)(v28 + 48) = v33;
      *(unsigned char *)(v28 + 56) = *(unsigned char *)(v29 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v34 = a3[13];
    uint64_t v35 = a3[14];
    uint64_t v36 = a1 + v34;
    uint64_t v37 = (uint64_t)a2 + v34;
    *(void *)uint64_t v36 = *(void *)v37;
    *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
    long long v38 = (void *)(a1 + v35);
    long long v39 = (uint64_t *)((char *)a2 + v35);
    uint64_t v40 = v39[1];
    *long long v38 = *v39;
    v38[1] = v40;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1003387E0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = sub_100007764(&qword_10072A7F8);
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  if (*(void *)(a1 + *(int *)(a2 + 48) + 32) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10033890C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v8;
    uint64_t v9 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v9;
    uint64_t v10 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v11;
    long long v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
  }
  uint64_t v13 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v13;
  uint64_t v14 = *(void *)(a2 + 104);
  uint64_t v15 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v15;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v16 = a3[10];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  *(void *)(a1 + 104) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_100007764(&qword_10072A7F8);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_100007764(&qword_10072A7D8);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  uint64_t v26 = a1 + v23;
  uint64_t v27 = a2 + v23;
  uint64_t v28 = *(void *)(v27 + 32);
  if (v28 == 1)
  {
    long long v29 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v29;
    *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
    *(_OWORD *)(v26 + 41) = *(_OWORD *)(v27 + 41);
  }
  else
  {
    uint64_t v30 = *(void *)(v27 + 8);
    *(void *)uint64_t v26 = *(void *)v27;
    *(void *)(v26 + 8) = v30;
    *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
    *(void *)(v26 + 24) = *(void *)(v27 + 24);
    *(void *)(v26 + 32) = v28;
    uint64_t v31 = *(void *)(v27 + 48);
    *(void *)(v26 + 40) = *(void *)(v27 + 40);
    *(void *)(v26 + 48) = v31;
    *(unsigned char *)(v26 + 56) = *(unsigned char *)(v27 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v32 = a3[13];
  uint64_t v33 = a3[14];
  uint64_t v34 = a1 + v32;
  uint64_t v35 = a2 + v32;
  *(void *)uint64_t v34 = *(void *)v35;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  uint64_t v36 = (void *)(a1 + v33);
  uint64_t v37 = (void *)(a2 + v33);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100338B80(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = (_OWORD *)(a1 + 24);
  uint64_t v7 = (long long *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v8)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1002FD318(a1 + 24);
      long long v9 = *(_OWORD *)(a2 + 72);
      long long v11 = *v7;
      long long v10 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v9;
      *uint64_t v6 = v11;
      *(_OWORD *)(a1 + 40) = v10;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *v7;
    long long v13 = *(_OWORD *)(a2 + 40);
    long long v14 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v14;
    *uint64_t v6 = v12;
    *(_OWORD *)(a1 + 40) = v13;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v15 = a3[10];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = sub_100007764(&qword_10072A7F8);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_13:
    uint64_t v23 = sub_100007764(&qword_10072A7D8);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_14:
  uint64_t v24 = a3[11];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v27 = *v26;
  *(unsigned char *)(v25 + 8) = *((unsigned char *)v26 + 8);
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = a3[12];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (long long *)(a2 + v28);
  uint64_t v31 = *(void *)(a1 + v28 + 32);
  uint64_t v32 = *(void *)(a2 + v28 + 32);
  if (v31 == 1)
  {
    if (v32 == 1)
    {
      long long v33 = *v30;
      long long v34 = v30[1];
      long long v35 = v30[2];
      *(_OWORD *)(v29 + 41) = *(long long *)((char *)v30 + 41);
      *(_OWORD *)(v29 + 16) = v34;
      *(_OWORD *)(v29 + 32) = v35;
      *(_OWORD *)uint64_t v29 = v33;
    }
    else
    {
      *(void *)uint64_t v29 = *(void *)v30;
      uint64_t v39 = *((void *)v30 + 1);
      *(unsigned char *)(v29 + 16) = *((unsigned char *)v30 + 16);
      *(void *)(v29 + 8) = v39;
      *(void *)(v29 + 24) = *((void *)v30 + 3);
      *(void *)(v29 + 32) = *((void *)v30 + 4);
      *(void *)(v29 + 40) = *((void *)v30 + 5);
      *(void *)(v29 + 48) = *((void *)v30 + 6);
      *(unsigned char *)(v29 + 56) = *((unsigned char *)v30 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v32 == 1)
  {
    sub_1002FD2C4(v29);
    long long v37 = v30[1];
    long long v36 = v30[2];
    long long v38 = *v30;
    *(_OWORD *)(v29 + 41) = *(long long *)((char *)v30 + 41);
    *(_OWORD *)(v29 + 16) = v37;
    *(_OWORD *)(v29 + 32) = v36;
    *(_OWORD *)uint64_t v29 = v38;
  }
  else
  {
    *(void *)uint64_t v29 = *(void *)v30;
    uint64_t v40 = *((void *)v30 + 1);
    *(unsigned char *)(v29 + 16) = *((unsigned char *)v30 + 16);
    *(void *)(v29 + 8) = v40;
    *(void *)(v29 + 24) = *((void *)v30 + 3);
    *(void *)(v29 + 32) = *((void *)v30 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v29 + 40) = *((void *)v30 + 5);
    *(void *)(v29 + 48) = *((void *)v30 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v29 + 56) = *((unsigned char *)v30 + 56);
  }
  uint64_t v41 = a3[13];
  uint64_t v42 = a1 + v41;
  long long v43 = (uint64_t *)(a2 + v41);
  uint64_t v44 = *v43;
  *(unsigned char *)(v42 + 8) = *((unsigned char *)v43 + 8);
  *(void *)uint64_t v42 = v44;
  uint64_t v45 = a3[14];
  long long v46 = (void *)(a1 + v45);
  long long v47 = (void *)(a2 + v45);
  *long long v46 = *v47;
  v46[1] = v47[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100339020(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  long long v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 104) = v6;
  uint64_t v10 = sub_100007764(&qword_10072A7F8);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100007764(&qword_10072A7D8);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[11];
  uint64_t v14 = a3[12];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  uint64_t v17 = (_OWORD *)(a1 + v14);
  uint64_t v18 = (long long *)(a2 + v14);
  *(_OWORD *)((char *)v17 + 41) = *(long long *)((char *)v18 + 41);
  long long v19 = v18[2];
  long long v20 = *v18;
  v17[1] = v18[1];
  void v17[2] = v19;
  *uint64_t v17 = v20;
  uint64_t v21 = a3[13];
  uint64_t v22 = a3[14];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  return a1;
}

uint64_t sub_1003391F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (*(void *)(a1 + 32))
  {
    uint64_t v7 = *(void *)(a2 + 32);
    if (v7)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v9;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v10;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1002FD318(a1 + 24);
  }
  long long v11 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v11;
  long long v12 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v12;
LABEL_6:
  uint64_t v13 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v15 = a3[10];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = sub_100007764(&qword_10072A7F8);
  uint64_t v19 = *(void *)(v18 - 8);
  long long v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_11:
    uint64_t v23 = sub_100007764(&qword_10072A7D8);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_12:
  uint64_t v24 = a3[11];
  uint64_t v25 = a3[12];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  uint64_t v28 = a1 + v25;
  uint64_t v29 = a2 + v25;
  if (*(void *)(a1 + v25 + 32) != 1)
  {
    uint64_t v30 = *(void *)(v29 + 32);
    if (v30 != 1)
    {
      uint64_t v32 = *(void *)(v29 + 8);
      *(void *)uint64_t v28 = *(void *)v29;
      *(void *)(v28 + 8) = v32;
      *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
      *(void *)(v28 + 24) = *(void *)(v29 + 24);
      *(void *)(v28 + 32) = v30;
      swift_bridgeObjectRelease();
      uint64_t v33 = *(void *)(v29 + 48);
      *(void *)(v28 + 40) = *(void *)(v29 + 40);
      *(void *)(v28 + 48) = v33;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v28 + 56) = *(unsigned char *)(v29 + 56);
      goto LABEL_17;
    }
    sub_1002FD2C4(a1 + v25);
  }
  long long v31 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v31;
  *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
  *(_OWORD *)(v28 + 41) = *(_OWORD *)(v29 + 41);
LABEL_17:
  uint64_t v34 = a3[13];
  uint64_t v35 = a3[14];
  uint64_t v36 = a1 + v34;
  uint64_t v37 = a2 + v34;
  *(void *)uint64_t v36 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  long long v38 = (void *)(a1 + v35);
  uint64_t v39 = (uint64_t *)(a2 + v35);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *long long v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003394F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100339508);
}

uint64_t sub_100339508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100007764(&qword_10072A7D8);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1003395BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003395D0);
}

uint64_t sub_1003395D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_10072A7D8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for OTDRequest(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072AE90);
}

void sub_10033969C()
{
  sub_1003F09D4(319, (unint64_t *)&unk_10072AEA0, &qword_10072A7F8);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for AssessmentGUIDContainer()
{
  return &type metadata for AssessmentGUIDContainer;
}

uint64_t sub_1003397A0(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = v9;
      uint64_t v10 = a2[7];
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = v10;
      uint64_t v11 = a2[9];
      *(void *)(a1 + 64) = a2[8];
      *(void *)(a1 + 72) = v11;
      uint64_t v12 = a2[11];
      *(void *)(a1 + 80) = a2[10];
      *(void *)(a1 + 88) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v14 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v14;
      long long v15 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v15;
    }
    uint64_t v16 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v16;
    uint64_t v17 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v17;
    uint64_t v18 = a2[20];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18 == 1)
    {
      long long v19 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v19;
      *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
      *(_OWORD *)(a1 + 169) = *(_OWORD *)((char *)a2 + 169);
    }
    else
    {
      uint64_t v20 = a2[17];
      *(void *)(a1 + 128) = a2[16];
      *(void *)(a1 + 136) = v20;
      *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
      *(void *)(a1 + 152) = a2[19];
      *(void *)(a1 + 160) = v18;
      uint64_t v21 = a2[22];
      *(void *)(a1 + 168) = a2[21];
      *(void *)(a1 + 176) = v21;
      *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    *(unsigned char *)(a1 + 185) = *((unsigned char *)a2 + 185);
    uint64_t v22 = a3[11];
    uint64_t v23 = (void *)(a1 + v22);
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = sub_100007764(&qword_100728600);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = sub_100007764(&qword_10072A6E8);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v28 = a3[12];
    uint64_t v29 = a3[13];
    uint64_t v30 = a1 + v28;
    uint64_t v31 = (uint64_t)a2 + v28;
    *(void *)uint64_t v30 = *(void *)v31;
    *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
    uint64_t v32 = a1 + v29;
    uint64_t v33 = (uint64_t)a2 + v29;
    *(void *)uint64_t v32 = *(void *)v33;
    *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
  }
  return a1;
}

uint64_t sub_100339A50(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 160) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = sub_100007764(&qword_100728600);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_100339B8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    long long v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
  }
  uint64_t v14 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v14;
  uint64_t v15 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v15;
  uint64_t v16 = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16 == 1)
  {
    long long v17 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v17;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
  }
  else
  {
    uint64_t v18 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v18;
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v16;
    uint64_t v19 = *(void *)(a2 + 176);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v19;
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  uint64_t v23 = sub_100007764(&qword_100728600);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_100007764(&qword_10072A6E8);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  uint64_t v26 = a3[12];
  uint64_t v27 = a3[13];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(void *)uint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(void *)uint64_t v30 = *(void *)v31;
  *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
  return a1;
}

uint64_t sub_100339DEC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a1 + 32);
  uint64_t v7 = (long long *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v8)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1002FD318(a1 + 32);
      long long v9 = *(_OWORD *)(a2 + 80);
      long long v11 = *v7;
      long long v10 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *uint64_t v6 = v11;
      *(_OWORD *)(a1 + 48) = v10;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *v7;
    long long v13 = *(_OWORD *)(a2 + 48);
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    *uint64_t v6 = v12;
    *(_OWORD *)(a1 + 48) = v13;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = (_OWORD *)(a1 + 128);
  uint64_t v16 = (long long *)(a2 + 128);
  uint64_t v17 = *(void *)(a2 + 160);
  if (*(void *)(a1 + 160) == 1)
  {
    if (v17 == 1)
    {
      long long v18 = *v16;
      long long v19 = *(_OWORD *)(a2 + 144);
      long long v20 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
      *(_OWORD *)(a1 + 144) = v19;
      *(_OWORD *)(a1 + 160) = v20;
      *uint64_t v15 = v18;
    }
    else
    {
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      uint64_t v24 = *(void *)(a2 + 136);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 136) = v24;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v17 == 1)
  {
    sub_1002FD2C4(a1 + 128);
    long long v22 = *(_OWORD *)(a2 + 144);
    long long v21 = *(_OWORD *)(a2 + 160);
    long long v23 = *v16;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    *(_OWORD *)(a1 + 144) = v22;
    *(_OWORD *)(a1 + 160) = v21;
    *uint64_t v15 = v23;
  }
  else
  {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    uint64_t v25 = *(void *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 136) = v25;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  }
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  uint64_t v29 = sub_100007764(&qword_100728600);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  int v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 24))(v27, v28, v29);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v27, v29);
    goto LABEL_20;
  }
  if (v33)
  {
LABEL_20:
    uint64_t v34 = sub_100007764(&qword_10072A6E8);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v30 + 16))(v27, v28, v29);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
LABEL_21:
  uint64_t v35 = a3[12];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v38 = *v37;
  *(unsigned char *)(v36 + 8) = *((unsigned char *)v37 + 8);
  *(void *)uint64_t v36 = v38;
  uint64_t v39 = a3[13];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v42 = *v41;
  *(unsigned char *)(v40 + 8) = *((unsigned char *)v41 + 8);
  *(void *)uint64_t v40 = v42;
  return a1;
}

uint64_t sub_10033A26C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  long long v10 = *(_OWORD *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 144);
  long long v12 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  uint64_t v13 = a3[11];
  long long v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  *(_OWORD *)(a1 + 128) = v10;
  uint64_t v16 = sub_100007764(&qword_100728600);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100007764(&qword_10072A6E8);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  return a1;
}

uint64_t sub_10033A400(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40))
  {
    uint64_t v8 = *(void *)(a2 + 40);
    if (v8)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v9;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1002FD318(a1 + 32);
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v12;
  long long v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v13;
LABEL_6:
  uint64_t v14 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v15;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 160) == 1)
  {
LABEL_9:
    long long v17 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v17;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(a2 + 160);
  if (v16 == 1)
  {
    sub_1002FD2C4(a1 + 128);
    goto LABEL_9;
  }
  uint64_t v18 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v18;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v16;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
LABEL_11:
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = sub_100007764(&qword_100728600);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v21, v22, v23);
      goto LABEL_17;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_16;
  }
  if (v27)
  {
LABEL_16:
    uint64_t v28 = sub_100007764(&qword_10072A6E8);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_17:
  uint64_t v29 = a3[12];
  uint64_t v30 = a3[13];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  uint64_t v33 = a1 + v30;
  uint64_t v34 = a2 + v30;
  *(void *)uint64_t v33 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  return a1;
}

uint64_t sub_10033A6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033A6FC);
}

uint64_t sub_10033A6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100007764(&qword_10072A6E8);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10033A7B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033A7C4);
}

uint64_t sub_10033A7C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_10072A6E8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ORDRequest(uint64_t a1)
{
  return sub_100048DF0(a1, qword_10072AF50);
}

void sub_10033A890()
{
  sub_1003F09D4(319, (unint64_t *)&unk_10072ADF8, &qword_100728600);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for ActiveConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ActiveConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v11 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v11;
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v12;
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v13 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v13;
  uint64_t v14 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v14;
  uint64_t v15 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v15;
  uint64_t v16 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v16;
  uint64_t v17 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v17;
  uint64_t v18 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v18;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  uint64_t v19 = *(void *)(a2 + 336);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 336) = v19;
  uint64_t v20 = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 352) = v20;
  uint64_t v21 = *(void *)(a2 + 368);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(void *)(a1 + 368) = v21;
  *(unsigned char *)(a1 + 377) = *(unsigned char *)(a2 + 377);
  uint64_t v22 = *(void *)(a2 + 384);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(void *)(a1 + 384) = v22;
  uint64_t v23 = *(void *)(a2 + 408);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v23;
  uint64_t v24 = *(void *)(a2 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActiveConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v4;
  uint64_t v5 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v5;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v6;
  uint64_t v7 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = v7;
  uint64_t v8 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v8;
  uint64_t v9 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v9;
  uint64_t v10 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v10;
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v11;
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  uint64_t v12 = *(void *)(a2 + 336);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 336) = v12;
  uint64_t v13 = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 352) = v13;
  uint64_t v14 = *(void *)(a2 + 368);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(void *)(a1 + 368) = v14;
  *(unsigned char *)(a1 + 377) = *(unsigned char *)(a2 + 377);
  uint64_t v15 = *(void *)(a2 + 384);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(void *)(a1 + 384) = v15;
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for ActiveConfig(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1B0uLL);
}

uint64_t assignWithTake for ActiveConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  uint64_t v11 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v12 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v12;
  uint64_t v13 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v15;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(_WORD *)(a1 + 376) = *(_WORD *)(a2 + 376);
  uint64_t v16 = *(void *)(a2 + 384);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(void *)(a1 + 384) = v16;
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActiveConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 432)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActiveConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 424) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 432) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 432) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActiveConfig()
{
  return &type metadata for ActiveConfig;
}

uint64_t destroy for GlobalConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GlobalConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GlobalConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GlobalConfig(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GlobalConfig(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GlobalConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GlobalConfig()
{
  return &type metadata for GlobalConfig;
}

uint64_t destroy for AccountAssessmentDeviceData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AccountAssessmentDeviceData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AccountAssessmentDeviceData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for VerifiedClaimDataElement(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AccountAssessmentDeviceData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountAssessmentDeviceData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountAssessmentDeviceData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountAssessmentDeviceData()
{
  return &type metadata for AccountAssessmentDeviceData;
}

uint64_t *sub_10033B714(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_100726860);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100007764(&qword_100727600);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)a1 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (uint64_t *)((char *)a1 + v12);
    uint64_t v17 = (uint64_t *)((char *)a2 + v12);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = a3[8];
    uint64_t v21 = (uint64_t *)((char *)a1 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    *(uint64_t *)((char *)a1 + v20) = *(uint64_t *)((char *)a2 + v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10033B8D8(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100726860);
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_10033B9CC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_100007764(&qword_100726860);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007764(&qword_100727600);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = &a1[v10];
  uint64_t v15 = &a2[v10];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = v21;
  *(void *)&a1[v18] = *(void *)&a2[v18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_10033BB40(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_100007764(&qword_100726860);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100007764(&qword_100727600);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  return a1;
}

char *sub_10033BD54(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_100007764(&qword_100726860);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007764(&qword_100727600);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  return a1;
}

char *sub_10033BE9C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_100007764(&qword_100726860);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100007764(&qword_100727600);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[7];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  return a1;
}

uint64_t sub_10033C080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033C094);
}

uint64_t sub_10033C094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764(&qword_100727600);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10033C15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033C170);
}

uint64_t sub_10033C170(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100007764(&qword_100727600);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AugmentedProfile(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072B000);
}

void sub_10033C254()
{
  sub_1003F09D4(319, (unint64_t *)&unk_10072B010, &qword_100726860);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for AssessmentConfig(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssessmentConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
  }
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  *(unsigned char *)(a1 + 107) = *(unsigned char *)(a2 + 107);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AssessmentConfig(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10033C630(a1);
      long long v5 = a2[3];
      long long v7 = *a2;
      long long v6 = a2[1];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v5;
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    long long v10 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(unsigned char *)(a1 + 105) = *((unsigned char *)a2 + 105);
  *(unsigned char *)(a1 + 106) = *((unsigned char *)a2 + 106);
  *(unsigned char *)(a1 + 107) = *((unsigned char *)a2 + 107);
  *(unsigned char *)(a1 + 108) = *((unsigned char *)a2 + 108);
  return a1;
}

uint64_t sub_10033C630(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for AssessmentConfig(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 93) = *(long long *)((char *)a2 + 93);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for AssessmentConfig(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    sub_10033C630(a1);
LABEL_5:
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(unsigned char *)(a1 + 107) = *(unsigned char *)(a2 + 107);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssessmentConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 109)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssessmentConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 108) = 0;
    *(_DWORD *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 109) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 109) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssessmentConfig()
{
  return &type metadata for AssessmentConfig;
}

ValueMetadata *type metadata accessor for AssessmentServerDestinations()
{
  return &type metadata for AssessmentServerDestinations;
}

void *assignWithCopy for IdVDataElement(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for IdVDataElement()
{
  return &type metadata for IdVDataElement;
}

ValueMetadata *type metadata accessor for IDSPACData()
{
  return &type metadata for IDSPACData;
}

ValueMetadata *type metadata accessor for SharingFormat()
{
  return &type metadata for SharingFormat;
}

ValueMetadata *type metadata accessor for ArtifactId()
{
  return &type metadata for ArtifactId;
}

uint64_t _s8coreidvd16PersoDataElementVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s8coreidvd16PersoDataElementVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PersoDataElement(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s8coreidvd16PersoDataElementVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PersoDataElement()
{
  return &type metadata for PersoDataElement;
}

unint64_t sub_10033CAD0()
{
  unint64_t result = qword_10072B050;
  if (!qword_10072B050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B050);
  }
  return result;
}

unint64_t sub_10033CB28()
{
  unint64_t result = qword_10072B058;
  if (!qword_10072B058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B058);
  }
  return result;
}

uint64_t sub_10033CB7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_100007764(&qword_10072CF18);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FF0E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  char v17 = 0;
  sub_10005D478();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = v14;
    char v17 = 1;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10033CD50()
{
  if (*v0) {
    return 6501752;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_10033CD88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003FF7B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033CDB0(uint64_t a1)
{
  unint64_t v2 = sub_1003FF0E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033CDEC(uint64_t a1)
{
  unint64_t v2 = sub_1003FF0E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10033CE28@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003FEA88(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10033CE58(void *a1)
{
  return sub_10033CB7C(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10033CE78()
{
  if (*v0) {
    return 0x65636E6F6ELL;
  }
  else {
    return 0x64616F6C796170;
  }
}

uint64_t sub_10033CEB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003FF894(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033CED8(uint64_t a1)
{
  unint64_t v2 = sub_100403740();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033CF14(uint64_t a1)
{
  unint64_t v2 = sub_100403740();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10033CF50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[1] = a4;
  void v14[2] = a5;
  uint64_t v15 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v16 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_10072CD00);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100403740();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  Data.base64EncodedString(options:)(0);
  char v19 = 0;
  uint64_t v12 = v17;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v16, enum case for DIPError.Code.jsonEncodingFailed(_:), v15);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_10033D2C0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003FF980(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10033D2F0(void *a1)
{
  return sub_10033CF50(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10033D310(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  if ((sub_100510850(*a1, a1[1], *a2, a2[1]) & 1) == 0) {
    return 0;
  }
  if (v2 == v4 && v3 == v5) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t sub_10033D3A0(char a1)
{
  unint64_t result = 0x4874736575716572;
  switch(a1)
  {
    case 1:
    case 3:
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x6E6564496D616574;
      break;
    case 5:
      unint64_t result = 0x6F54737365636361;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 8:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10033D4D8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_10072C950);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040245C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  v11[0] = *v3;
  v11[1] = v9;
  char v12 = 0;
  sub_1003FD10C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_1000BEA14((uint64_t)(v3 + 2), (uint64_t)v14, &qword_100729C68);
    sub_1000BEA14((uint64_t)v14, (uint64_t)v11, &qword_100729C68);
    char v12 = 1;
    sub_1003FD160();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11[0]) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_1000BEA14((uint64_t)v3 + 152, (uint64_t)v13, &qword_10072C958);
    sub_1000BEA14((uint64_t)v13, (uint64_t)v11, &qword_10072C958);
    char v12 = 7;
    sub_100402624();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11[0]) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10033D7D8()
{
  return sub_10033D3A0(*v0);
}

uint64_t sub_10033D7E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003FFDC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033D808(uint64_t a1)
{
  unint64_t v2 = sub_10040245C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033D844(uint64_t a1)
{
  unint64_t v2 = sub_10040245C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10033D880@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100400194(a1, v10);
  if (!v2)
  {
    long long v5 = v18;
    a2[8] = v17;
    a2[9] = v5;
    a2[10] = v19[0];
    *(_OWORD *)((char *)a2 + 169) = *(_OWORD *)((char *)v19 + 9);
    long long v6 = v14;
    a2[4] = v13;
    a2[5] = v6;
    long long v7 = v16;
    a2[6] = v15;
    a2[7] = v7;
    long long v8 = v10[1];
    *a2 = v10[0];
    a2[1] = v8;
    double result = *(double *)&v11;
    long long v9 = v12;
    a2[2] = v11;
    a2[3] = v9;
  }
  return result;
}

uint64_t sub_10033D8EC(void *a1)
{
  return sub_10033D4D8(a1);
}

uint64_t sub_10033D950(void *a1, uint64_t *a2, void (*a3)(void))
{
  long long v5 = v3;
  uint64_t v7 = sub_100007764(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = v5[3];
  void v18[2] = v5[2];
  v18[3] = v11;
  long long v12 = v5[5];
  void v18[4] = v5[4];
  v18[5] = v12;
  long long v13 = v5[1];
  v18[0] = *v5;
  v18[1] = v13;
  char v17 = 0;
  sub_100402DB8();
  uint64_t v14 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v14)
  {
    LOBYTE(v18[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000BEA14((uint64_t)(v5 + 7), (uint64_t)v19, (uint64_t *)&unk_100721320);
    sub_1000BEA14((uint64_t)v19, (uint64_t)v18, (uint64_t *)&unk_100721320);
    char v17 = 2;
    sub_100007764(&qword_1007268F0);
    sub_1000AB18C((unint64_t *)&qword_100721330, &qword_1007268F0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10033DB7C()
{
  unint64_t v1 = 0x45656D69746E7572;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000026;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65736E6F70736572;
  }
}

uint64_t sub_10033DBF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100400C6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033DC18(uint64_t a1)
{
  unint64_t v2 = sub_1004012F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033DC54(uint64_t a1)
{
  unint64_t v2 = sub_1004012F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10033DC90@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10033DCCC(a1, &qword_10072C608, (void (*)(void))sub_1004012F4, a2);
}

double sub_10033DCCC@<D0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  sub_100400DFC(a1, a2, a3, (uint64_t *)v10);
  if (!v4)
  {
    long long v7 = v14;
    *(_OWORD *)(a4 + 64) = v13;
    *(_OWORD *)(a4 + 80) = v7;
    *(_OWORD *)(a4 + 96) = v15;
    *(void *)(a4 + 112) = v16;
    long long v8 = v10[1];
    *(_OWORD *)a4 = v10[0];
    *(_OWORD *)(a4 + 16) = v8;
    double result = *(double *)&v11;
    long long v9 = v12;
    *(_OWORD *)(a4 + 32) = v11;
    *(_OWORD *)(a4 + 48) = v9;
  }
  return result;
}

uint64_t sub_10033DD40(void *a1)
{
  return sub_10033D950(a1, &qword_10072CCC0, (void (*)(void))sub_1004012F4);
}

unint64_t sub_10033DDB8(void *a1, unsigned int a2)
{
  unint64_t v5 = (unint64_t)sub_10000C728(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000C728(v10, v10[3]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v7._rawValue = &off_1006F33E0;
    unsigned int v8 = sub_10035E378(v9, v7);
    if (v8 == 5) {
      unint64_t v5 = a2;
    }
    else {
      unint64_t v5 = v8;
    }
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v10);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  return v5;
}

unint64_t sub_10033DEB0(void *a1, unsigned int a2)
{
  unint64_t v5 = (unint64_t)sub_10000C728(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000C728(v10, v10[3]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v7._rawValue = &off_1006F3478;
    unsigned int v8 = sub_1003FE9F4(v9, v7);
    if (v8 == 7) {
      unint64_t v5 = a2;
    }
    else {
      unint64_t v5 = v8;
    }
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v10);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  return v5;
}

unint64_t sub_10033DFA8(void *a1, unsigned int a2, Swift::OpaquePointer a3)
{
  unint64_t v7 = (unint64_t)sub_10000C728(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v3)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000C728(v11, v11[3]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    unint64_t v9 = _findStringSwitchCase(cases:string:)(a3, v10);
    swift_bridgeObjectRelease();
    if (v9 >= 3) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = v9;
    }
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v11);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10033E0B4(void *a1, char a2)
{
  unint64_t v5 = (unint64_t)sub_10000C728(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000C728(v8, v8[3]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F35A8, v7);
    swift_bridgeObjectRelease();
    if (v5 >= 2) {
      unint64_t v5 = a2 & 1;
    }
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v8);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  return v5;
}

uint64_t sub_10033E1C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1 == a4 && a2 == a5 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
  {
    unint64_t v10 = a3[2];
    if (v10 <= 1 && v10 == a6[2])
    {
      if (!v10 || a3[4] == a6[4] && a3[5] == a6[5]) {
        return 1;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = 0;
      if (v12) {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_10033E260()
{
  unint64_t result = qword_10072B068;
  if (!qword_10072B068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B068);
  }
  return result;
}

unint64_t sub_10033E2B4()
{
  unint64_t result = qword_10072B0A0;
  if (!qword_10072B0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B0A0);
  }
  return result;
}

uint64_t sub_10033E308(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10033E350()
{
  unint64_t result = qword_10072B0B8;
  if (!qword_10072B0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B0B8);
  }
  return result;
}

uint64_t sub_10033E3A4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019364(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10033E410()
{
  unint64_t result = qword_10072B0D0;
  if (!qword_10072B0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B0D0);
  }
  return result;
}

uint64_t sub_10033E464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v122 = a7;
  uint64_t v123 = a8;
  uint64_t v120 = a5;
  uint64_t v121 = a6;
  uint64_t v118 = a2;
  uint64_t v119 = a4;
  uint64_t v117 = a1;
  uint64_t v17 = sub_100007764(&qword_100723998);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v116 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v115 = (char *)&v92 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v112 = (char *)&v92 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v109 = (uint64_t)&v92 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v104 = (uint64_t)&v92 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v101 = (uint64_t)&v92 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v100 = (char *)&v92 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v92 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v92 - v36;
  uint64_t v38 = __chkstk_darwin(v35);
  uint64_t v40 = (char *)&v92 - v39;
  __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v92 - v41;
  sub_100048D6C(a3, (uint64_t)&v92 - v41, &qword_100723998);
  uint64_t v43 = type metadata accessor for PDF417ParsedData();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  int v46 = v45(v42, 1, v43);
  uint64_t v124 = v44;
  if (v46 == 1)
  {
    sub_10000C6CC((uint64_t)v42, &qword_100723998);
    uint64_t v113 = 0;
    uint64_t v114 = 0;
  }
  else
  {
    uint64_t v47 = PDF417ParsedData.firstName.getter();
    uint64_t v113 = v48;
    uint64_t v114 = v47;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v43);
  }
  sub_100048D6C(a3, (uint64_t)v40, &qword_100723998);
  int v49 = v45(v40, 1, v43);
  uint64_t v50 = (uint64_t)v112;
  if (v49 == 1)
  {
    sub_10000C6CC((uint64_t)v40, &qword_100723998);
    uint64_t v110 = 0;
    uint64_t v111 = 0;
  }
  else
  {
    uint64_t v51 = PDF417ParsedData.middleName.getter();
    uint64_t v110 = v52;
    uint64_t v111 = v51;
    (*(void (**)(char *, uint64_t))(v124 + 8))(v40, v43);
  }
  sub_100048D6C(a3, (uint64_t)v37, &qword_100723998);
  if (v45(v37, 1, v43) == 1)
  {
    sub_10000C6CC((uint64_t)v37, &qword_100723998);
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v53 = v124;
  }
  else
  {
    uint64_t v54 = PDF417ParsedData.lastName.getter();
    uint64_t v107 = v55;
    uint64_t v108 = v54;
    uint64_t v53 = v124;
    (*(void (**)(char *, uint64_t))(v124 + 8))(v37, v43);
  }
  sub_100048D6C(a3, (uint64_t)v34, &qword_100723998);
  int v56 = v45(v34, 1, v43);
  uint64_t v57 = (uint64_t)v100;
  if (v56 == 1)
  {
    sub_10000C6CC((uint64_t)v34, &qword_100723998);
    uint64_t v105 = 0;
    uint64_t v106 = 0;
  }
  else
  {
    uint64_t v58 = PDF417ParsedData.street1.getter();
    uint64_t v105 = v59;
    uint64_t v106 = v58;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v43);
  }
  sub_100048D6C(a3, v57, &qword_100723998);
  int v60 = v45((char *)v57, 1, v43);
  uint64_t v61 = (uint64_t)v116;
  if (v60 == 1)
  {
    sub_10000C6CC(v57, &qword_100723998);
    uint64_t v103 = 0;
    uint64_t v102 = 0;
  }
  else
  {
    uint64_t v103 = PDF417ParsedData.street2.getter();
    uint64_t v102 = v62;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v57, v43);
  }
  uint64_t v63 = v101;
  sub_100048D6C(a3, v101, &qword_100723998);
  int v64 = v45((char *)v63, 1, v43);
  uint64_t v65 = (uint64_t)v115;
  if (v64 == 1)
  {
    sub_10000C6CC(v63, &qword_100723998);
    uint64_t v101 = 0;
    unint64_t v100 = 0;
  }
  else
  {
    uint64_t v101 = PDF417ParsedData.city.getter();
    unint64_t v100 = v66;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v63, v43);
  }
  uint64_t v67 = v104;
  sub_100048D6C(a3, v104, &qword_100723998);
  if (v45((char *)v67, 1, v43) == 1)
  {
    sub_10000C6CC(v67, &qword_100723998);
    uint64_t v104 = 0;
    uint64_t v99 = 0;
  }
  else
  {
    uint64_t v104 = PDF417ParsedData.state.getter();
    uint64_t v99 = v68;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v67, v43);
  }
  uint64_t v69 = v109;
  sub_100048D6C(a3, v109, &qword_100723998);
  if (v45((char *)v69, 1, v43) == 1)
  {
    sub_10000C6CC(v69, &qword_100723998);
    uint64_t v109 = 0;
    uint64_t v98 = 0;
  }
  else
  {
    uint64_t v109 = PDF417ParsedData.postalCode.getter();
    uint64_t v98 = v70;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v69, v43);
  }
  sub_100048D6C(a3, v50, &qword_100723998);
  if (v45((char *)v50, 1, v43) == 1)
  {
    sub_10000C6CC(v50, &qword_100723998);
    uint64_t v97 = 0;
    uint64_t v96 = 0;
  }
  else
  {
    uint64_t v97 = PDF417ParsedData.country.getter();
    uint64_t v96 = v71;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v50, v43);
  }
  sub_100048D6C(a3, v65, &qword_100723998);
  if (v45((char *)v65, 1, v43) == 1)
  {
    sub_10000C6CC(v65, &qword_100723998);
    uint64_t v112 = 0;
    uint64_t v95 = 0;
  }
  else
  {
    uint64_t v112 = (char *)PDF417ParsedData.dob.getter();
    uint64_t v95 = v72;
    (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v65, v43);
  }
  uint64_t v115 = a15;
  uint64_t v94 = a14;
  uint64_t v93 = a13;
  sub_100048D6C(a3, v61, &qword_100723998);
  if (v45((char *)v61, 1, v43) == 1)
  {
    sub_10000C6CC(a3, &qword_100723998);
    uint64_t result = sub_10000C6CC(v61, &qword_100723998);
    uint64_t v74 = 0;
    uint64_t v75 = 0;
  }
  else
  {
    uint64_t v74 = PDF417ParsedData.issuer.getter();
    uint64_t v76 = v61;
    uint64_t v75 = v77;
    sub_10000C6CC(a3, &qword_100723998);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v124 + 8))(v76, v43);
  }
  uint64_t v78 = v118;
  *a9 = v117;
  a9[1] = v78;
  uint64_t v79 = v120;
  a9[2] = v119;
  a9[3] = v79;
  uint64_t v80 = v122;
  a9[4] = v121;
  a9[5] = v80;
  a9[6] = v123;
  a9[7] = a10;
  a9[8] = a11;
  a9[9] = a12;
  uint64_t v81 = v114;
  a9[10] = v93;
  a9[11] = v81;
  uint64_t v82 = v111;
  a9[12] = v113;
  a9[13] = v82;
  uint64_t v83 = v108;
  a9[14] = v110;
  a9[15] = v83;
  uint64_t v84 = v106;
  a9[16] = v107;
  a9[17] = v84;
  uint64_t v85 = v103;
  a9[18] = v105;
  a9[19] = v85;
  uint64_t v86 = v101;
  a9[20] = v102;
  a9[21] = v86;
  uint64_t v87 = v104;
  a9[22] = v100;
  a9[23] = v87;
  uint64_t v88 = v109;
  a9[24] = v99;
  a9[25] = v88;
  uint64_t v89 = v97;
  a9[26] = v98;
  a9[27] = v89;
  long long v90 = v112;
  a9[28] = v96;
  a9[29] = v90;
  a9[30] = v95;
  a9[31] = v74;
  uint64_t v91 = v94;
  a9[32] = v75;
  a9[33] = v91;
  a9[34] = v115;
  return result;
}

uint64_t sub_10033ED80(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x61737265766E6F63 && a2 == 0xEE0064496E6F6974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4974736575716572 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10033EEA4(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072D880);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v11 = a1[4];
  sub_10000C728(a1, a1[3]);
  sub_10040BE90();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = 0;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v4;
    char v15 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v3);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  return v11;
}

uint64_t sub_10033F148(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x61737265766E6F63 && a2 == 0xEE0064496E6F6974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4974736575716572 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xEA00000000006449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7574617453627573 && a2 == 0xED000065646F4373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x654D737574617473 && a2 == 0xED00006567617373)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_10033F454@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072B0D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10033F8E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v41 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  char v40 = 1;
  swift_bridgeObjectRetain();
  uint64_t v33 = KeyedDecodingContainer.decode(_:forKey:)();
  char v39 = 2;
  uint64_t v35 = v12;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v34 = v14;
  uint64_t v30 = v13;
  char v38 = 3;
  swift_bridgeObjectRetain();
  uint64_t v31 = 0;
  uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
  char v37 = 4;
  uint64_t v32 = v15;
  swift_bridgeObjectRetain();
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v28 = v16;
  char v36 = 5;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v19 = v18;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v31 = v17;
  v20(v8, v5);
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v21 = v28;
  swift_bridgeObjectRelease();
  uint64_t v22 = v32;
  swift_bridgeObjectRelease();
  uint64_t v23 = v34;
  swift_bridgeObjectRelease();
  uint64_t v24 = v35;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v33;
  a2[3] = v24;
  a2[4] = v30;
  a2[5] = v23;
  a2[6] = v29;
  a2[7] = v22;
  a2[8] = v27;
  a2[9] = v21;
  a2[10] = v31;
  a2[11] = v19;
  return result;
}

unint64_t sub_10033F8E0()
{
  unint64_t result = qword_10072B0E0;
  if (!qword_10072B0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B0E0);
  }
  return result;
}

uint64_t sub_10033F934(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7A69726F68747561 && a2 == 0xED00006E6F697461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449656369766564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E49746E65696C63 && a2 == 0xEA00000000006F66)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10033FABC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072CC28);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100403558();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v24 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    uint64_t v21 = v9;
    char v23 = 1;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v20 = v12;
    char v22 = 2;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v16 = v8;
    uint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
    uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    *a2 = v21;
    a2[1] = v11;
    a2[2] = v20;
    a2[3] = v14;
    a2[4] = v15;
    a2[5] = v18;
  }
  return result;
}

uint64_t sub_10033FCFC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4874736575716572 && a2 == 0xED00007265646165;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A3A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72656469766F7270 && a2 == 0xEA00000000006449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1919248756 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000010064A4A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x756F4365636E6F6ELL && a2 == 0xEA0000000000746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F436E6F69676572 && a2 == 0xEA00000000006564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6563697665447369 && a2 == 0xEE0064656B636F4CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_100340168@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v4 = sub_100007764(&qword_10072CCD8);
  uint64_t v66 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (qword_10071F518 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100760380;
  uint64_t v12 = a1;
  uint64_t v13 = a1[3];
  uint64_t v67 = v12;
  sub_10000C728(v12, v13);
  sub_1003FF674();
  swift_bridgeObjectRetain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v69 = v2;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v109 = 0;
    int v14 = 0;
    int v15 = 0;
    uint64_t v68 = v11;
  }
  else
  {
    LOBYTE(v73) = 0;
    sub_1003FCE54();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v17 = v85;
    uint64_t v61 = v84;
    uint64_t v62 = v11;
    uint64_t v19 = v86;
    uint64_t v18 = v87;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v73) = 1;
    sub_1003FCEA8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v58 = v19;
    *((void *)&v58 + 1) = v18;
    uint64_t v59 = v17;
    uint64_t v20 = v84;
    uint64_t v21 = v85;
    uint64_t v23 = v86;
    uint64_t v22 = v87;
    uint64_t v24 = v89;
    LOBYTE(v84) = 2;
    uint64_t v109 = v20;
    uint64_t v60 = v88;
    sub_1000AAD28(v20, v85);
    uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v72 = v21;
    uint64_t v57 = v25;
    LOBYTE(v84) = 3;
    uint64_t v27 = v26;
    swift_bridgeObjectRetain();
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v63 = v27;
    uint64_t v55 = v28;
    uint64_t v56 = v22;
    uint64_t v30 = v29;
    sub_100007764(&qword_1007268F0);
    LOBYTE(v73) = 4;
    sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v71 = v30;
    uint64_t v31 = v84;
    LOBYTE(v84) = 5;
    swift_bridgeObjectRetain();
    uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v65 = v31;
    uint64_t v53 = v32;
    uint64_t v54 = v23;
    LOBYTE(v84) = 6;
    uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v34 = v33;
    sub_100007764(&qword_10072C5E8);
    LOBYTE(v73) = 7;
    sub_10033E3A4(&qword_10072C8D0, &qword_10072C5E8, (void (*)(void))sub_1004021BC);
    uint64_t v70 = v34;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v35 = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v84) = 8;
    char v36 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v68 = v35;
    uint64_t v69 = 0;
    char v37 = v36;
    sub_100007764(&qword_100726808);
    char v106 = 9;
    sub_1001D87AC(&qword_100726810);
    uint64_t v38 = v69;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v69 = v38;
    if (!v38)
    {
      LODWORD(v62) = v37 & 1;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v6, v4);
      uint64_t v66 = v107;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&long long v73 = v61;
      *((void *)&v73 + 1) = v59;
      long long v74 = v58;
      *(void *)&long long v75 = v109;
      *((void *)&v75 + 1) = v72;
      *(void *)&long long v76 = v23;
      *((void *)&v76 + 1) = v56;
      *(void *)&long long v77 = v60;
      *((void *)&v77 + 1) = v24;
      uint64_t v39 = v24;
      *(void *)&long long v78 = v57;
      *((void *)&v78 + 1) = v63;
      *(void *)&long long v79 = v55;
      *((void *)&v79 + 1) = v71;
      *(void *)&long long v80 = v65;
      *((void *)&v80 + 1) = v53;
      *(void *)&long long v81 = v52;
      *((void *)&v81 + 1) = v70;
      *(void *)&long long v82 = v68;
      BYTE8(v82) = v37 & 1;
      uint64_t v83 = v66;
      sub_1001D9024((uint64_t)&v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v40 = v109;
      uint64_t v41 = v72;
      uint64_t v42 = v56;
      uint64_t v43 = v60;
      sub_1000AAC30(v109, v72);
      uint64_t v44 = *((void *)&v58 + 1);
      swift_bridgeObjectRelease();
      uint64_t v45 = v59;
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v67);
      uint64_t v84 = v61;
      uint64_t v85 = v45;
      uint64_t v86 = v58;
      uint64_t v87 = v44;
      uint64_t v88 = v40;
      uint64_t v89 = v41;
      uint64_t v90 = v23;
      uint64_t v91 = v42;
      uint64_t v92 = v43;
      uint64_t v93 = v39;
      uint64_t v94 = v57;
      uint64_t v95 = v63;
      uint64_t v96 = v55;
      uint64_t v97 = v71;
      uint64_t v98 = v65;
      uint64_t v99 = v53;
      uint64_t v100 = v52;
      uint64_t v101 = v70;
      uint64_t v102 = v68;
      char v103 = v62;
      *(_DWORD *)uint64_t v104 = v108[0];
      *(_DWORD *)&v104[3] = *(_DWORD *)((char *)v108 + 3);
      uint64_t v105 = v66;
      uint64_t result = sub_1001D8DFC((uint64_t)&v84);
      long long v46 = v82;
      uint64_t v47 = v64;
      *(_OWORD *)(v64 + 128) = v81;
      *(_OWORD *)(v47 + 144) = v46;
      *(void *)(v47 + 160) = v83;
      long long v48 = v78;
      *(_OWORD *)(v47 + 64) = v77;
      *(_OWORD *)(v47 + 80) = v48;
      long long v49 = v80;
      *(_OWORD *)(v47 + 96) = v79;
      *(_OWORD *)(v47 + 112) = v49;
      long long v50 = v74;
      *(_OWORD *)uint64_t v47 = v73;
      *(_OWORD *)(v47 + 16) = v50;
      long long v51 = v76;
      *(_OWORD *)(v47 + 32) = v75;
      *(_OWORD *)(v47 + 48) = v51;
      return result;
    }
    (*(void (**)(char *, uint64_t))(v66 + 8))(v6, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000AAC30(v109, v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v14 = 1;
    int v15 = 1;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000AAC30(v109, v72);
  if (v14) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (v15) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100340DB4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072C650);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100401444();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v42 = 0;
    sub_1002390F0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v41[1];
    uint64_t v35 = v41[0];
    char v36 = a2;
    uint64_t v10 = v41[3];
    uint64_t v11 = v41[5];
    uint64_t v33 = v41[4];
    uint64_t v34 = v41[2];
    uint64_t v12 = v41[7];
    uint64_t v32 = v41[6];
    uint64_t v13 = v41[9];
    uint64_t v31 = v41[8];
    uint64_t v30 = v41[10];
    LOBYTE(v41[0]) = 1;
    uint64_t v39 = v41[11];
    swift_bridgeObjectRetain();
    uint64_t v38 = v9;
    swift_bridgeObjectRetain();
    uint64_t v37 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v40 = v13;
    swift_bridgeObjectRetain();
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v16 = v15;
    uint64_t v27 = v14;
    uint64_t v28 = v12;
    uint64_t v29 = v11;
    uint64_t v17 = v37;
    sub_100030A10((uint64_t)a1, (uint64_t)v41);
    type metadata accessor for LegacyWorkflowPackage(0);
    uint64_t v18 = swift_allocObject();
    swift_bridgeObjectRetain();
    sub_10030E4E4((uint64_t)v41);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = v40;
    swift_bridgeObjectRetain();
    uint64_t v20 = v39;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v38;
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v24 = v36;
    *char v36 = v35;
    v24[1] = v21;
    _OWORD v24[2] = v34;
    v24[3] = v17;
    v24[4] = v33;
    void v24[5] = v22;
    uint64_t v25 = v28;
    v24[6] = v32;
    v24[7] = v25;
    v24[8] = v31;
    v24[9] = v19;
    v24[10] = v30;
    v24[11] = v20;
    v24[12] = v27;
    v24[13] = v16;
    v24[14] = v18;
  }
  return result;
}

uint64_t sub_10034126C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00726564616548;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x45656D69746E7572 && a2 == 0xEC000000726F7272 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_10034140C(Swift::String string)
{
  uint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._uint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F2908, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_100341458(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7461447475706E69 && a2 == 0xE900000000000061;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010064A720 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064A740 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x654B63696C627570 && a2 == 0xED00006873614879)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100341638(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7461447475706E69 && a2 == 0xE900000000000061;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010064A720)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100341734(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646F43726F727265 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657A696C61636F6CLL && a2 == 0xEE00656C74695464 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000010064A640 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A660)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100341914@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072C928);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100402408();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v30 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v11 = v10;
  char v29 = 1;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v26 = v11;
  char v28 = 2;
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v24 = v13;
  char v27 = 3;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v18 = v17;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v22 = v16;
  v19(v8, v5);
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = v24;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v26 & 1;
  *(void *)(a2 + 16) = v25;
  *(void *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v23;
  *(void *)(a2 + 40) = v15;
  *(void *)(a2 + 48) = v22;
  *(void *)(a2 + 56) = v18;
  return result;
}

uint64_t sub_100341BF4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6568636163657270 && a2 == 0xEE006769666E6F43;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7373416567616D69 && a2 == 0xEB00000000737465)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100341D24(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072C980);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_1004026CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100007764(&qword_1007268F0);
    HIBYTE(v9) = 0;
    sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v7 = v10;
    sub_100007764(&qword_10072C990);
    HIBYTE(v9) = 1;
    sub_100402720();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_100341F78(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100636F50)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_100342000(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x800000010064A900
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365726975716572 && a2 == 0xEE00373134464450 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000010064A920 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010064A940 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x756F656D69547263 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6B6174655278616DLL && a2 == 0xEE00746E756F4365)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1003422C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072CBD0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004033BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  sub_100007764(&qword_10072CBE0);
  char v27 = 0;
  sub_100403410();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v9 = v28;
  char v26 = 1;
  swift_bridgeObjectRetain();
  char v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v25 = 2;
  int v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v24 = 3;
  int v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v23 = 4;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  HIDWORD(v18) = v12;
  uint64_t v19 = v11;
  char v22 = 5;
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v8;
  char v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 9) = v21;
  *(unsigned char *)(a2 + 10) = v20;
  *(void *)(a2 + 16) = v19;
  *(unsigned char *)(a2 + 24) = BYTE4(v18) & 1;
  *(void *)(a2 + 32) = v13;
  *(unsigned char *)(a2 + 40) = v16 & 1;
  return result;
}

uint64_t sub_1003425B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F69676552627573 && a2 == 0xE90000000000006ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010064A380 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974616E69676170 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x436E616353636F64 && a2 == 0xED00006769666E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6761506863746177 && a2 == 0xEF6E6F6974616E69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x616E696761506D64 && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1003428A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072C310);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FC96C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  LOBYTE(v39) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  LOBYTE(v39) = 1;
  swift_bridgeObjectRetain();
  uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v38 = v11;
  uint64_t v36 = v9;
  sub_100007764(&qword_100722410);
  char v46 = 2;
  uint64_t v12 = sub_10033E3A4(&qword_100722418, &qword_100722410, (void (*)(void))sub_1000B564C);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v35 = v12;
  uint64_t v13 = v39;
  char v46 = 3;
  sub_1003FC9C0();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v32 = v13;
  uint64_t v14 = v39;
  char v46 = 4;
  uint64_t v29 = v40;
  uint64_t v30 = v41;
  uint64_t v31 = v42;
  uint64_t v34 = v43;
  int v45 = v44;
  sub_1000AB250(v39);
  uint64_t v27 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v33 = v14;
  char v46 = 5;
  uint64_t v28 = v39;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v15 = v38;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v35 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = v33;
  sub_1000AB250(v33);
  swift_bridgeObjectRetain();
  uint64_t v17 = v16;
  LOBYTE(v16) = v45;
  sub_1000AB1EC(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = v33;
  uint64_t v20 = v29;
  uint64_t v19 = v30;
  char v21 = v16;
  sub_1000AB1EC(v33);
  uint64_t v22 = v35;
  swift_bridgeObjectRelease();
  uint64_t v23 = v28;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v36;
  *(void *)(a2 + 8) = v15;
  uint64_t v25 = v32;
  *(void *)(a2 + 16) = v37;
  *(void *)(a2 + 24) = v25;
  *(void *)(a2 + 32) = v18;
  *(void *)(a2 + 40) = v20;
  uint64_t v26 = v31;
  *(void *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v26;
  *(void *)(a2 + 64) = v34;
  *(unsigned char *)(a2 + 72) = v21;
  *(void *)(a2 + 80) = v23;
  *(void *)(a2 + 88) = v22;
  return result;
}

uint64_t sub_100342E6C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E656D75636F64 && a2 == 0xEC00000065707954;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974616E69676170 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100342F84(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072C328);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10000C728(a1, a1[3]);
  sub_1003FCA14();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100007764(&qword_100722410);
    v9[30] = 1;
    sub_10033E3A4(&qword_100722418, &qword_100722410, (void (*)(void))sub_1000B564C);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1003431E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4874736575716572 && a2 == 0xED00007265646165;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A3A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xEA00000000006449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100629300 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x61746144766469 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6465696669726576 && a2 == 0xEE00736D69616C43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064A550 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6974726F70707573 && a2 == 0xEE0061746144676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000010064A5E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x65646F4E61746164 && a2 == 0xEE0073666F6F7250 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000010064A600 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t sub_100343748(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00726564616548;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x45656D69746E7572 && a2 == 0xEC000000726F7272 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010064A960 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6465696669726576 && a2 == 0xED00006D69616C43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064A550 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6B726F577478656ELL && a2 == 0xEC000000776F6C66)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100343A34(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72756F5361746164 && a2 == 0xEA00000000006563;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_100343B24@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = sub_100007764(&qword_10072C548);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FF32C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)_s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v8 = v5;
  uint64_t v9 = v13;
  v15[0] = 0;
  sub_1003FF380();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v10 = v14[0];
  v15[303] = 1;
  sub_1003FF3D4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v4);
  memcpy(&v14[7], v15, 0x118uLL);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  *uint64_t v9 = v10;
  return memcpy(v9 + 1, v14, 0x11FuLL);
}

uint64_t sub_100343D28()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12) {
    return 18;
  }
  else {
    return v0;
  }
}

void *sub_100343D70@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072D038);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v87 = a1;
  sub_10000C728(a1, v9);
  sub_100404AB8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)_s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v87);
  }
  long long v77 = a2;
  LOBYTE(v89[0]) = 0;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v13 = v12;
  LOBYTE(v89[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v89[0]) = 2;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v86 = v15;
  uint64_t v75 = v16;
  LOBYTE(v89[0]) = 3;
  uint64_t v18 = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v85 = v18;
  uint64_t v74 = v19;
  LOBYTE(v89[0]) = 4;
  uint64_t v21 = v20;
  swift_bridgeObjectRetain();
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v84 = v21;
  uint64_t v73 = v22;
  LOBYTE(v89[0]) = 5;
  uint64_t v24 = v23;
  swift_bridgeObjectRetain();
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v83 = v24;
  uint64_t v72 = v25;
  LOBYTE(v89[0]) = 6;
  uint64_t v27 = v26;
  swift_bridgeObjectRetain();
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v82 = v27;
  uint64_t v71 = v28;
  LOBYTE(v89[0]) = 7;
  uint64_t v81 = v29;
  swift_bridgeObjectRetain();
  uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v89[0]) = 8;
  uint64_t v80 = v30;
  swift_bridgeObjectRetain();
  uint64_t v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v89[0]) = 9;
  uint64_t v79 = v31;
  swift_bridgeObjectRetain();
  uint64_t v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v68 = v32;
  LOBYTE(v89[0]) = 10;
  swift_bridgeObjectRetain();
  uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v66 = v33;
  LOBYTE(v89[0]) = 11;
  swift_bridgeObjectRetain();
  uint64_t v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v78 = v34;
  sub_100007764(&qword_10072B2A8);
  LOBYTE(v88[0]) = 12;
  sub_1000AB18C(&qword_10072B2B0, &qword_10072B2A8);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v35 = v89[0];
  LOBYTE(v89[0]) = 13;
  uint64_t v36 = v35;
  swift_bridgeObjectRetain();
  uint64_t v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v63 = v37;
  LOBYTE(v89[0]) = 14;
  swift_bridgeObjectRetain();
  uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v60 = v38;
  uint64_t v62 = 0;
  LOBYTE(v89[0]) = 15;
  swift_bridgeObjectRetain();
  uint64_t v39 = v62;
  uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v59 = v40;
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v87);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v62) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v89[0]) = 16;
    swift_bridgeObjectRetain();
    uint64_t v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v57 = v41;
    char v90 = 17;
    swift_bridgeObjectRetain();
    uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v54 = v43;
    uint64_t v44 = v42;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v51 = v36;
    uint64_t v52 = v11;
    v88[0] = v11;
    v88[1] = v13;
    uint64_t v88[2] = v36;
    v88[3] = v61;
    v88[4] = v63;
    v88[5] = v58;
    v88[6] = v60;
    v88[7] = v56;
    v88[8] = v59;
    v88[9] = v55;
    v88[10] = v57;
    v88[11] = v76;
    v88[12] = v86;
    v88[13] = v75;
    v88[14] = v85;
    v88[15] = v74;
    v88[16] = v84;
    v88[17] = v73;
    v88[18] = v83;
    v88[19] = v72;
    v88[20] = v82;
    v88[21] = v71;
    v88[22] = v81;
    v88[23] = v70;
    v88[24] = v80;
    v88[25] = v69;
    v88[26] = v79;
    v88[27] = v67;
    v88[28] = v68;
    v88[29] = v65;
    v88[30] = v66;
    v88[31] = v64;
    v88[32] = v78;
    uint64_t v53 = v44;
    v88[33] = v44;
    v88[34] = v54;
    sub_100404B0C((uint64_t)v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = v81;
    swift_bridgeObjectRelease();
    uint64_t v46 = v80;
    swift_bridgeObjectRelease();
    uint64_t v47 = v79;
    swift_bridgeObjectRelease();
    uint64_t v48 = v68;
    swift_bridgeObjectRelease();
    uint64_t v49 = v66;
    swift_bridgeObjectRelease();
    uint64_t v50 = v78;
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v87);
    v89[0] = v52;
    v89[1] = v13;
    v89[2] = v51;
    v89[3] = v61;
    v89[4] = v63;
    v89[5] = v58;
    v89[6] = v60;
    v89[7] = v56;
    v89[8] = v59;
    v89[9] = v55;
    v89[10] = v57;
    v89[11] = v76;
    v89[12] = v86;
    v89[13] = v75;
    v89[14] = v85;
    v89[15] = v74;
    v89[16] = v84;
    v89[17] = v73;
    v89[18] = v83;
    v89[19] = v72;
    v89[20] = v82;
    v89[21] = v71;
    v89[22] = v45;
    v89[23] = v70;
    v89[24] = v46;
    v89[25] = v69;
    v89[26] = v47;
    v89[27] = v67;
    v89[28] = v48;
    v89[29] = v65;
    v89[30] = v49;
    v89[31] = v64;
    v89[32] = v50;
    v89[33] = v53;
    v89[34] = v54;
    sub_100264928((uint64_t)v89);
    return memcpy(v77, v88, 0x118uLL);
  }
}

uint64_t sub_100344E24(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x61746144766469 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646564616F6C7075 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100344F30(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x644979656BLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEB00000000644965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F666E4961746164 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100345098@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072CD08);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100403794();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  LOBYTE(v25) = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v24 = v9;
  LOBYTE(v25) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v22 = v12;
  char v30 = 2;
  sub_1004037E8();
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = v25;
  uint64_t v15 = v26;
  uint64_t v17 = v27;
  uint64_t v18 = v28;
  uint64_t v19 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = v23;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v20;
  a2[4] = v16;
  a2[5] = v15;
  a2[6] = v17;
  a2[7] = v18;
  a2[8] = v19;
  return result;
}

uint64_t sub_100345378(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x644964726F636572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x48746E65746E6F63 && a2 == 0xEB00000000687361)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1003454D8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072D938);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040C2D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v22 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v21 = 1;
  swift_bridgeObjectRetain();
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  char v20 = 2;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v18 = v12;
  v15(v8, v5);
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  uint64_t v17 = v18;
  a2[2] = v19;
  a2[3] = v17;
  a2[4] = v14;
  return result;
}

void *sub_100345714(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072D890);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000C728(a1, a1[3]);
  sub_10040BEE4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100007764(&qword_10072D8A0);
    sub_10040BF38();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_10034588C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x654D656E696C6E69 && a2 == 0xED00007363697274;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4D65727574706163 && a2 == 0xEE00736369727465 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74654D6F65646976 && a2 == 0xEC00000073636972)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100345A44(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072CB68);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_1004031F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100007764(&qword_100724130);
    char v10 = 0;
    sub_100403248();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v7 = v11;
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100007764(&qword_10072CB88);
    char v10 = 2;
    sub_10033E3A4(&qword_10072CB90, &qword_10072CB88, (void (*)(void))sub_100403248);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_100345D38(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656E697272756C62 && a2 == 0xEA00000000007373;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657275736F707865 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7473694464726163 && a2 == 0xEE006E6F6974726FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100632F10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100632F30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6374695064616568 && a2 == 0xE900000000000068 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C6C6F5264616568 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x77615964616568 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100632F50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100632F70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100632F90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100632FB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100632FD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x5465727574706163 && a2 == 0xEB00000000656D69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010064A860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEC000000657A6953 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100632FF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEC00000077656B53 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x666972447466656CLL && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x6972447468676972 && a2 == 0xEA00000000007466 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x74666972447075 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x666972446E776F64 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x666E6F4365636166 && a2 == 0xEF7365636E656469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010064A880 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x73656361466D756ELL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x6C6576654C78756CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x6544373134666470 && a2 == 0xEE00646574636574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100633010 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0x61436F7475417369 && a2 == 0xEE00646572757470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0x456873616C467369 && a2 == 0xEE0064656C62616ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x754E726575737369 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEC00000065707954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100633030 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0x6556746567726174 && a2 == 0xEE00736563697472 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A8A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEF7372656E726F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 35;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000010064A8C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 36;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000010064A8E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 37;
  }
  else if (a1 == 0x6365446C65646F6DLL && a2 == 0xED00006E6F697369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 38;
  }
  else if (a1 == 0x7265566C65646F6DLL && a2 == 0xEC0000006E6F6973 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 39;
  }
  else if (a1 == 0x7461726F6C707865 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 40;
  }
  else if (a1 == 0x6F436E6163736572 && a2 == 0xEB00000000746E75 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 41;
  }
  else if (a1 == 0x7373656E6576696CLL && a2 == 0xED00006574756843 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 42;
  }
  else if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 43;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 43;
    }
    else {
      return 44;
    }
  }
}

void *sub_100346FC0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072CAE0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  unint64_t v314 = a1;
  sub_10000C728(a1, v9);
  sub_100402E0C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)_s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v314);
  }
  uint64_t v133 = v6;
  uint64_t v124 = a2;
  LOBYTE(v135) = 0;
  unint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v313 = BYTE4(v10) & 1;
  LOBYTE(v135) = 1;
  unint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v123 = HIDWORD(v10) & 1;
  char v310 = BYTE4(v11) & 1;
  LOBYTE(v135) = 2;
  unint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v122 = HIDWORD(v11) & 1;
  uint64_t v13 = HIDWORD(v12) & 1;
  char v307 = BYTE4(v12) & 1;
  LOBYTE(v135) = 3;
  unint64_t v14 = v12;
  unint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unint64_t v121 = v14;
  uint64_t v16 = HIDWORD(v15) & 1;
  char v304 = BYTE4(v15) & 1;
  LOBYTE(v135) = 4;
  unint64_t v120 = v15;
  unint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v117 = v16;
  uint64_t v118 = v13;
  uint64_t v18 = HIDWORD(v17) & 1;
  char v301 = BYTE4(v17) & 1;
  LOBYTE(v135) = 5;
  unint64_t v119 = v17;
  unint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v116 = v18;
  char v298 = BYTE4(v19) & 1;
  LOBYTE(v135) = 6;
  unint64_t v115 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v114 = HIDWORD(v115) & 1;
  char v295 = BYTE4(v115) & 1;
  LOBYTE(v135) = 7;
  unint64_t v113 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v112 = HIDWORD(v113) & 1;
  char v292 = BYTE4(v113) & 1;
  LOBYTE(v135) = 8;
  unint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v106 = HIDWORD(v19) & 1;
  unint64_t v107 = v20;
  unint64_t v108 = v19;
  unint64_t v109 = v11;
  unint64_t v110 = v10;
  uint64_t v105 = HIDWORD(v20) & 1;
  char v289 = BYTE4(v20) & 1;
  LOBYTE(v135) = 9;
  unint64_t v111 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v103 = HIDWORD(v111) & 1;
  char v286 = BYTE4(v111) & 1;
  LOBYTE(v135) = 10;
  unint64_t v104 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v101 = HIDWORD(v104) & 1;
  char v283 = BYTE4(v104) & 1;
  LOBYTE(v135) = 11;
  unint64_t v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v99 = HIDWORD(v102) & 1;
  char v280 = BYTE4(v102) & 1;
  LOBYTE(v135) = 12;
  unint64_t v100 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v97 = HIDWORD(v100) & 1;
  char v277 = BYTE4(v100) & 1;
  LOBYTE(v135) = 13;
  unint64_t v98 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v95 = HIDWORD(v98) & 1;
  char v274 = BYTE4(v98) & 1;
  LOBYTE(v135) = 14;
  unint64_t v96 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v93 = HIDWORD(v96) & 1;
  char v271 = BYTE4(v96) & 1;
  LOBYTE(v135) = 15;
  unint64_t v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v91 = HIDWORD(v94) & 1;
  char v268 = BYTE4(v94) & 1;
  LOBYTE(v135) = 16;
  unint64_t v92 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v89 = HIDWORD(v92) & 1;
  char v265 = BYTE4(v92) & 1;
  LOBYTE(v135) = 17;
  unint64_t v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v87 = HIDWORD(v90) & 1;
  char v262 = BYTE4(v90) & 1;
  LOBYTE(v135) = 18;
  unint64_t v88 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v85 = HIDWORD(v88) & 1;
  char v259 = BYTE4(v88) & 1;
  LOBYTE(v135) = 19;
  unint64_t v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v83 = HIDWORD(v86) & 1;
  char v256 = BYTE4(v86) & 1;
  LOBYTE(v135) = 20;
  unint64_t v84 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v81 = HIDWORD(v84) & 1;
  char v253 = BYTE4(v84) & 1;
  LOBYTE(v135) = 21;
  unint64_t v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v80 = HIDWORD(v82) & 1;
  char v250 = BYTE4(v82) & 1;
  sub_100007764(&qword_100722218);
  LOBYTE(v134[0]) = 22;
  sub_1000AB18C(&qword_100722220, &qword_100722218);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v21 = v135;
  LOBYTE(v134[0]) = 23;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v22 = v135;
  LOBYTE(v135) = 24;
  uint64_t v132 = v22;
  swift_bridgeObjectRetain();
  uint64_t v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v79 = v23;
  char v247 = v23 & 1;
  LOBYTE(v135) = 25;
  uint64_t v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v77 = v24;
  char v245 = v24 & 1;
  LOBYTE(v135) = 26;
  int v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v135) = 27;
  int v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v135) = 28;
  int v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v135) = 29;
  int v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v135) = 30;
  uint64_t v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v130 = v25;
  LOBYTE(v135) = 31;
  swift_bridgeObjectRetain();
  uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v129 = v26;
  sub_100007764(&qword_10072CAF0);
  LOBYTE(v134[0]) = 32;
  sub_100402E60();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  LOBYTE(v134[0]) = 33;
  uint64_t v131 = v135;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  LOBYTE(v134[0]) = 34;
  uint64_t v128 = v135;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  LOBYTE(v134[0]) = 35;
  uint64_t v127 = v135;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v27 = v135;
  LOBYTE(v134[0]) = 36;
  sub_100402F04();
  uint64_t v126 = v27;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v68 = v136;
  uint64_t v69 = v135;
  uint64_t v66 = v138;
  uint64_t v67 = v137;
  uint64_t v64 = v140;
  uint64_t v65 = v139;
  uint64_t v62 = v142;
  uint64_t v63 = v141;
  uint64_t v60 = v144;
  uint64_t v61 = v143;
  uint64_t v58 = v146;
  uint64_t v59 = v145;
  uint64_t v57 = v147;
  int v55 = BYTE1(v148);
  int v56 = v148;
  char v242 = BYTE1(v148);
  sub_100007764(&qword_10072CB10);
  LOBYTE(v134[0]) = 37;
  sub_1000AB18C(&qword_10072CB18, &qword_10072CB10);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v28 = v135;
  LOBYTE(v135) = 38;
  uint64_t v125 = v28;
  swift_bridgeObjectRetain();
  uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v30 = v29;
  LOBYTE(v135) = 39;
  swift_bridgeObjectRetain();
  uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v32 = v31;
  LOBYTE(v135) = 40;
  swift_bridgeObjectRetain();
  int v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v135) = 41;
  uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v51 = v33;
  char v239 = v33 & 1;
  LOBYTE(v135) = 42;
  uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v49 = v34;
  char v236 = 43;
  swift_bridgeObjectRetain();
  uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v27) = v35;
  uint64_t v46 = (char *)&v134[49] + 1;
  (*(void (**)(char *, uint64_t))(v133 + 8))(v8, v5);
  uint64_t v36 = v46;
  *uint64_t v46 = v55;
  v36[63] = v51 & 1;
  v36[95] = v27 & 1;
  char v237 = v27 & 1;
  BYTE4(v134[0]) = v123;
  BYTE4(v134[1]) = v122;
  BYTE4(v134[2]) = v118;
  BYTE4(v134[3]) = v117;
  BYTE4(v134[4]) = v116;
  BYTE4(v134[5]) = v106;
  BYTE4(v134[6]) = v114;
  BYTE4(v134[7]) = v112;
  BYTE4(v134[8]) = v105;
  BYTE4(v134[9]) = v103;
  BYTE4(v134[10]) = v101;
  BYTE4(v134[11]) = v99;
  BYTE4(v134[12]) = v97;
  BYTE4(v134[13]) = v95;
  BYTE4(v134[14]) = v93;
  BYTE4(v134[15]) = v91;
  BYTE4(v134[16]) = v89;
  BYTE4(v134[17]) = v87;
  BYTE4(v134[18]) = v85;
  BYTE4(v134[19]) = v83;
  BYTE4(v134[20]) = v81;
  BYTE4(v134[21]) = v80;
  LOBYTE(v134[25]) = v79 & 1;
  LOBYTE(v134[27]) = v77 & 1;
  LODWORD(v134[0]) = v110;
  LODWORD(v134[1]) = v109;
  LODWORD(v134[2]) = v121;
  LODWORD(v134[3]) = v120;
  LODWORD(v134[4]) = v119;
  LODWORD(v134[5]) = v108;
  LODWORD(v134[6]) = v115;
  LODWORD(v134[7]) = v113;
  LODWORD(v134[8]) = v107;
  LODWORD(v134[9]) = v111;
  LODWORD(v134[10]) = v104;
  LODWORD(v134[11]) = v102;
  LODWORD(v134[12]) = v100;
  LODWORD(v134[13]) = v98;
  LODWORD(v134[14]) = v96;
  LODWORD(v134[15]) = v94;
  LODWORD(v134[16]) = v92;
  LODWORD(v134[17]) = v90;
  LODWORD(v134[18]) = v88;
  LODWORD(v134[19]) = v86;
  LODWORD(v134[20]) = v84;
  LODWORD(v134[21]) = v82;
  v134[22] = v21;
  v134[23] = v132;
  v134[24] = v78;
  v134[26] = v76;
  BYTE1(v134[27]) = v75;
  BYTE2(v134[27]) = v74;
  BYTE3(v134[27]) = v73;
  BYTE4(v134[27]) = v72;
  v134[28] = v71;
  uint64_t v37 = v130;
  v134[29] = v130;
  v134[30] = v70;
  uint64_t v38 = v129;
  v134[31] = v129;
  v134[32] = v131;
  v134[33] = v128;
  v134[34] = v127;
  v134[35] = v126;
  v134[36] = v69;
  v134[37] = v68;
  v134[38] = v67;
  v134[39] = v66;
  v134[40] = v65;
  v134[41] = v64;
  v134[42] = v63;
  v134[43] = v62;
  v134[44] = v61;
  v134[45] = v60;
  v134[46] = v59;
  v134[47] = v58;
  v134[48] = v57;
  LOBYTE(v134[49]) = v56;
  v134[50] = v125;
  v134[51] = v54;
  uint64_t v39 = v30;
  v134[52] = v30;
  v134[53] = v53;
  uint64_t v45 = v32;
  v134[54] = v32;
  LOBYTE(v134[55]) = v52;
  uint64_t v40 = v49;
  v134[56] = v50;
  v134[58] = v48;
  v134[59] = v49;
  v134[60] = v47;
  sub_100402F58((uint64_t)v134);
  swift_bridgeObjectRelease();
  uint64_t v41 = v132;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v42 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v314);
  LODWORD(v135) = v110;
  LODWORD(v136) = v109;
  LODWORD(v137) = v121;
  LODWORD(v138) = v120;
  LODWORD(v139) = v119;
  LODWORD(v140) = v108;
  LODWORD(v141) = v115;
  LODWORD(v142) = v113;
  LODWORD(v143) = v107;
  LODWORD(v144) = v111;
  LODWORD(v145) = v104;
  LODWORD(v146) = v102;
  LODWORD(v147) = v100;
  int v148 = v98;
  int v152 = v96;
  int v156 = v94;
  int v160 = v92;
  int v164 = v90;
  int v168 = v88;
  int v172 = v86;
  int v176 = v84;
  int v180 = v82;
  uint64_t v184 = v21;
  uint64_t v185 = v41;
  uint64_t v186 = v78;
  uint64_t v189 = v76;
  char v191 = v75;
  char v192 = v74;
  char v193 = v73;
  char v194 = v72;
  uint64_t v197 = v71;
  uint64_t v198 = v37;
  uint64_t v199 = v70;
  uint64_t v200 = v38;
  BYTE4(v135) = v313;
  *(_WORD *)((char *)&v135 + 5) = v311;
  HIBYTE(v135) = v312;
  BYTE4(v136) = v310;
  *(_WORD *)((char *)&v136 + 5) = v308;
  HIBYTE(v136) = v309;
  BYTE4(v137) = v307;
  *(_WORD *)((char *)&v137 + 5) = v305;
  *(_WORD *)((char *)&v138 + 5) = v302;
  *(_WORD *)((char *)&v139 + 5) = v299;
  *(_WORD *)((char *)&v140 + 5) = v296;
  *(_WORD *)((char *)&v141 + 5) = v293;
  *(_WORD *)((char *)&v142 + 5) = v290;
  *(_WORD *)((char *)&v143 + 5) = v287;
  *(_WORD *)((char *)&v144 + 5) = v284;
  *(_WORD *)((char *)&v145 + 5) = v281;
  *(_WORD *)((char *)&v146 + 5) = v278;
  *(_WORD *)((char *)&v147 + 5) = v275;
  __int16 v150 = v272;
  __int16 v154 = v269;
  __int16 v158 = v266;
  __int16 v162 = v263;
  __int16 v166 = v260;
  __int16 v170 = v257;
  __int16 v174 = v254;
  __int16 v178 = v251;
  __int16 v182 = v248;
  *(_DWORD *)&v188[3] = *(_DWORD *)&v246[3];
  *(_DWORD *)uint64_t v188 = *(_DWORD *)v246;
  __int16 v195 = v243;
  HIBYTE(v137) = v306;
  BYTE4(v138) = v304;
  HIBYTE(v138) = v303;
  BYTE4(v139) = v301;
  HIBYTE(v139) = v300;
  BYTE4(v140) = v298;
  HIBYTE(v140) = v297;
  BYTE4(v141) = v295;
  HIBYTE(v141) = v294;
  BYTE4(v142) = v292;
  HIBYTE(v142) = v291;
  BYTE4(v143) = v289;
  HIBYTE(v143) = v288;
  BYTE4(v144) = v286;
  HIBYTE(v144) = v285;
  BYTE4(v145) = v283;
  HIBYTE(v145) = v282;
  BYTE4(v146) = v280;
  HIBYTE(v146) = v279;
  BYTE4(v147) = v277;
  HIBYTE(v147) = v276;
  char v149 = v274;
  char v151 = v273;
  char v153 = v271;
  char v155 = v270;
  char v157 = v268;
  char v159 = v267;
  char v161 = v265;
  char v163 = v264;
  char v165 = v262;
  char v167 = v261;
  char v169 = v259;
  char v171 = v258;
  char v173 = v256;
  char v175 = v255;
  char v177 = v253;
  char v179 = v252;
  char v181 = v250;
  char v183 = v249;
  char v187 = v247;
  char v190 = v245;
  char v196 = v244;
  uint64_t v201 = v131;
  uint64_t v202 = v128;
  uint64_t v203 = v127;
  uint64_t v204 = v126;
  uint64_t v205 = v69;
  uint64_t v206 = v68;
  uint64_t v207 = v67;
  uint64_t v208 = v66;
  uint64_t v209 = v65;
  uint64_t v210 = v64;
  uint64_t v211 = v63;
  uint64_t v212 = v62;
  uint64_t v213 = v61;
  uint64_t v214 = v60;
  uint64_t v215 = v59;
  uint64_t v216 = v58;
  uint64_t v217 = v57;
  char v218 = v56;
  char v219 = v242;
  int v220 = *(_DWORD *)&v240[7];
  __int16 v221 = v241;
  uint64_t v222 = v125;
  uint64_t v223 = v54;
  uint64_t v224 = v39;
  uint64_t v225 = v53;
  uint64_t v226 = v42;
  char v227 = v52;
  *(_DWORD *)uint64_t v228 = *(_DWORD *)v240;
  *(_DWORD *)&v228[3] = *(_DWORD *)&v240[3];
  uint64_t v229 = v50;
  char v230 = v239;
  *(_DWORD *)uint64_t v231 = *(_DWORD *)v238;
  *(_DWORD *)&_OWORD v231[3] = *(_DWORD *)&v238[3];
  uint64_t v232 = v48;
  uint64_t v233 = v40;
  uint64_t v234 = v47;
  char v235 = v237;
  sub_100403028((uint64_t)&v135);
  return memcpy(v124, v134, 0x1E9uLL);
}

uint64_t sub_1003488F0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D614E7473726966 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E7473616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D754E6573756F68 && a2 == 0xEB00000000726562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746565727473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 6451044 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F436C6174736F70 && a2 == 0xEA00000000006564)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_100348BE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072D920);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040C27C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v43 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v11 = v10;
  char v42 = 1;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v35 = v13;
  uint64_t v36 = v12;
  char v41 = 2;
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v33 = v15;
  uint64_t v34 = v14;
  char v40 = 3;
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v31 = v17;
  uint64_t v32 = v16;
  char v39 = 4;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v29 = v19;
  uint64_t v30 = v18;
  char v38 = 5;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  HIDWORD(v27) = v21;
  uint64_t v28 = v20;
  char v37 = 6;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v23 = v8;
  char v25 = v24;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v23, v5);
  uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v11 & 1;
  *(void *)(a2 + 16) = v36;
  *(unsigned char *)(a2 + 24) = v35 & 1;
  *(void *)(a2 + 32) = v34;
  *(unsigned char *)(a2 + 40) = v33 & 1;
  *(void *)(a2 + 48) = v32;
  *(unsigned char *)(a2 + 56) = v31 & 1;
  *(void *)(a2 + 64) = v30;
  *(unsigned char *)(a2 + 72) = v29 & 1;
  *(void *)(a2 + 80) = v28;
  *(unsigned char *)(a2 + 88) = BYTE4(v27) & 1;
  *(void *)(a2 + 96) = v22;
  *(unsigned char *)(a2 + 104) = v25 & 1;
  return result;
}

uint64_t sub_100348EEC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7373656E6576696CLL && a2 == 0xEE006769666E6F43;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010064AC70)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100349000(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100649D60
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100649D80)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_1003490EC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v22 = sub_100007764(&qword_10072B0F0);
  uint64_t v5 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003494B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)_s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  int v21 = a2;
  char v42 = 0;
  sub_100349508();
  uint64_t v8 = v22;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000BEA14((uint64_t)&v38, (uint64_t)v37, &qword_10072B108);
  sub_1000BEA14((uint64_t)v37, (uint64_t)v39, &qword_10072B108);
  char v41 = 1;
  sub_100349600((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, unint64_t))sub_10034955C);
  sub_1003495AC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v8);
  uint64_t v9 = v25;
  uint64_t v10 = v26;
  uint64_t v11 = v27;
  uint64_t v12 = v28;
  uint64_t v13 = v29;
  uint64_t v14 = v30;
  uint64_t v22 = v31;
  uint64_t v19 = v33;
  uint64_t v20 = v32;
  uint64_t v17 = v35;
  uint64_t v18 = v34;
  int v40 = v36;
  v39[22] = v25;
  v39[23] = v26;
  v39[24] = v27;
  v39[25] = v28;
  v39[26] = v29;
  v39[27] = v30;
  v39[28] = v31;
  v39[29] = v32;
  v39[30] = v33;
  v39[31] = v34;
  v39[32] = v35;
  LOWORD(v39[33]) = v36;
  sub_1000BEA14((uint64_t)v37, (uint64_t)v23, &qword_10072B108);
  v23[22] = v9;
  v23[23] = v10;
  v23[24] = v11;
  v23[25] = v12;
  v23[26] = v13;
  v23[27] = v14;
  v23[28] = v22;
  v23[29] = v20;
  v23[30] = v19;
  v23[31] = v18;
  v23[32] = v17;
  LOWORD(v23[33]) = v40;
  sub_10034970C((uint64_t)v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, unint64_t))sub_10034955C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))sub_1003496C8);
  sub_100349600((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, unint64_t))sub_100349678);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  memcpy(v24, v39, 0x10AuLL);
  sub_10034970C((uint64_t)v24, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, unint64_t))sub_100349678, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))sub_100349804);
  return memcpy(v21, v23, 0x10AuLL);
}

unint64_t sub_1003494B4()
{
  unint64_t result = qword_10072B0F8;
  if (!qword_10072B0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B0F8);
  }
  return result;
}

unint64_t sub_100349508()
{
  unint64_t result = qword_10072B100;
  if (!qword_10072B100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B100);
  }
  return result;
}

uint64_t sub_10034955C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1003495AC()
{
  unint64_t result = qword_10072B110;
  if (!qword_10072B110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B110);
  }
  return result;
}

uint64_t sub_100349600(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, unint64_t))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(unsigned int *)(a1 + 168) | ((unint64_t)*(unsigned __int16 *)(a1 + 172) << 32));
  return a1;
}

uint64_t sub_100349678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003496C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10034970C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, unint64_t), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))
{
  uint64_t v4 = *(void *)(a1 + 184);
  uint64_t v16 = *(void *)(a1 + 176);
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = *(void *)(a1 + 200);
  uint64_t v7 = *(void *)(a1 + 208);
  uint64_t v8 = *(void *)(a1 + 216);
  uint64_t v9 = *(void *)(a1 + 224);
  uint64_t v10 = *(void *)(a1 + 232);
  long long v15 = *(_OWORD *)(a1 + 240);
  uint64_t v11 = *(void *)(a1 + 256);
  __int16 v12 = *(_WORD *)(a1 + 264);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(unsigned int *)(a1 + 168) | ((unint64_t)*(unsigned __int16 *)(a1 + 172) << 32));
  LOWORD(v14) = v12;
  a3(v16, v4, v5, v6, v7, v8, v9, v10, v15, *((void *)&v15 + 1), v11, v14);
  return a1;
}

uint64_t sub_100349804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100349848()
{
  unint64_t result = qword_10072B120;
  if (!qword_10072B120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B120);
  }
  return result;
}

unint64_t sub_10034989C()
{
  unint64_t result = qword_10072B130;
  if (!qword_10072B130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B130);
  }
  return result;
}

uint64_t sub_1003498F0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365727574736567 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746169636F737361 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100649E20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100649E40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100649E60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C416F54656D6974 && a2 == 0xEB00000000747265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100649E80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6B6174655278616DLL && a2 == 0xEE00746E756F4365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x546E6F6973736573 && a2 == 0xEE0074756F656D69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100649DA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100649EA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100649EC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100649EE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100649F00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000100649F20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x8000000100649F40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x7365726975716572 && a2 == 0xEF78754C646F6F47 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100649DC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100649F60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x65526569666C6573 && a2 == 0xEE00646572697571 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x7541656C62616E65 && a2 == 0xEF6873616C466F74)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 21;
    }
    else {
      return 22;
    }
  }
}

uint64_t sub_10034A244@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072B150);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  unint64_t v86 = a1;
  sub_10000C728(a1, v9);
  sub_10034B58C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v86);
  }
  uint64_t v56 = v6;
  LOBYTE(v67[0]) = 0;
  uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v12 = v11;
  sub_100007764(&qword_10072B160);
  LOBYTE(v57) = 1;
  sub_10033E3A4(&qword_10072B168, &qword_10072B160, (void (*)(void))sub_10034B5E0);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v54 = v12;
  uint64_t v13 = v67[0];
  LOBYTE(v67[0]) = 2;
  swift_bridgeObjectRetain();
  uint64_t v52 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v53 = v13;
  LOBYTE(v67[0]) = 3;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v55 = v15;
  uint64_t v51 = v16;
  LOBYTE(v67[0]) = 4;
  uint64_t v50 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v67[0]) = 5;
  uint64_t v49 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v67[0]) = 6;
  uint64_t v48 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v67[0]) = 7;
  uint64_t v47 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v67[0]) = 8;
  uint64_t v46 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v67[0]) = 9;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v67[0]) = 10;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v67[0]) = 11;
  uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v67[0]) = 12;
  uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v67[0]) = 13;
  uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v67[0]) = 14;
  uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v42 = v19;
  char v85 = v19 & 1;
  LOBYTE(v67[0]) = 15;
  uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v40 = v20;
  char v83 = v20 & 1;
  LOBYTE(v67[0]) = 16;
  uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v38 = v21;
  char v81 = v21 & 1;
  LOBYTE(v67[0]) = 17;
  int v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v67[0]) = 18;
  int v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v67[0]) = 19;
  int v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v67[0]) = 20;
  int v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v80 = 21;
  int v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v8, v5);
  uint64_t v23 = v53;
  uint64_t v22 = v54;
  *(void *)&long long v57 = v10;
  *((void *)&v57 + 1) = v54;
  *(void *)&long long v58 = v53;
  *((void *)&v58 + 1) = v52;
  uint64_t v24 = v55;
  *(void *)&long long v59 = v55;
  *((void *)&v59 + 1) = v51;
  *(void *)&long long v60 = v50;
  *((void *)&v60 + 1) = v49;
  *(void *)&long long v61 = v48;
  *((void *)&v61 + 1) = v47;
  *(void *)&long long v62 = v46;
  *((void *)&v62 + 1) = v17;
  *(void *)&long long v63 = v18;
  *((void *)&v63 + 1) = v45;
  *(void *)&long long v64 = v44;
  *((void *)&v64 + 1) = v43;
  *(void *)&long long v65 = v41;
  BYTE8(v65) = v42 & 1;
  *(void *)&v66[0] = v39;
  BYTE8(v66[0]) = v40 & 1;
  *(void *)&v66[1] = v37;
  BYTE8(v66[1]) = v38 & 1;
  BYTE9(v66[1]) = v36;
  BYTE10(v66[1]) = v35;
  BYTE11(v66[1]) = v34;
  BYTE12(v66[1]) = v33;
  BYTE13(v66[1]) = v32;
  sub_10034B634((uint64_t)&v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v86);
  v67[0] = v10;
  v67[1] = v22;
  v67[2] = v23;
  v67[3] = v52;
  v67[4] = v24;
  v67[5] = v51;
  v67[6] = v50;
  v67[7] = v49;
  v67[8] = v48;
  v67[9] = v47;
  v67[10] = v46;
  v67[11] = v17;
  v67[12] = v18;
  v67[13] = v45;
  v67[14] = v44;
  v67[15] = v43;
  v67[16] = v41;
  char v68 = v85;
  *(_DWORD *)uint64_t v69 = *(_DWORD *)v84;
  *(_DWORD *)&v69[3] = *(_DWORD *)&v84[3];
  uint64_t v70 = v39;
  char v71 = v83;
  *(_DWORD *)int v72 = *(_DWORD *)v82;
  *(_DWORD *)&v72[3] = *(_DWORD *)&v82[3];
  uint64_t v73 = v37;
  char v74 = v81;
  char v75 = v36;
  char v76 = v35;
  char v77 = v34;
  char v78 = v33;
  char v79 = v32;
  uint64_t result = sub_10034B680((uint64_t)v67);
  long long v26 = v66[0];
  a2[8] = v65;
  a2[9] = v26;
  *(_OWORD *)((char *)a2 + 158) = *(_OWORD *)((char *)v66 + 14);
  long long v27 = v62;
  a2[4] = v61;
  a2[5] = v27;
  long long v28 = v64;
  a2[6] = v63;
  a2[7] = v28;
  long long v29 = v58;
  *a2 = v57;
  a2[1] = v29;
  long long v30 = v60;
  a2[2] = v59;
  a2[3] = v30;
  return result;
}

uint64_t sub_10034AB68(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746169636F737361 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6B6174655278616DLL && a2 == 0xEE00746E756F4365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x546E6F6973736573 && a2 == 0xEE0074756F656D69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100649DA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7365726975716572 && a2 == 0xEF78754C646F6F47 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100649DC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100649DE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6172466C61746F74 && a2 == 0xEF746E756F43656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100649E00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7541656C62616E65 && a2 == 0xEF6873616C466F74)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_10034B084@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072B138);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10034B538();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v49 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v38 = v9;
  char v48 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v36 = v12;
  uint64_t v37 = v11;
  char v47 = 2;
  swift_bridgeObjectRetain();
  uint64_t v15 = v14;
  uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
  char v46 = 3;
  uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)();
  char v45 = 4;
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v32 = v17;
  uint64_t v33 = v16;
  char v44 = 5;
  int v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v43 = 6;
  int v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v42 = 7;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v41 = 8;
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v28 = v19;
  char v40 = 9;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v26 = v20;
  char v39 = 10;
  LOBYTE(v14) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  uint64_t v21 = v15;
  swift_bridgeObjectRelease();
  uint64_t v22 = v37;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v38;
  *(void *)(a2 + 8) = v22;
  *(void *)(a2 + 16) = v36;
  *(void *)(a2 + 24) = v21;
  uint64_t v24 = v34;
  *(void *)(a2 + 32) = v35;
  *(void *)(a2 + 40) = v24;
  *(void *)(a2 + 48) = v33;
  *(unsigned char *)(a2 + 56) = v32 & 1;
  *(unsigned char *)(a2 + 57) = v31;
  *(unsigned char *)(a2 + 58) = v30;
  *(unsigned char *)(a2 + 59) = v18;
  *(void *)(a2 + 64) = v29;
  *(unsigned char *)(a2 + 72) = v28 & 1;
  *(void *)(a2 + 80) = v27;
  *(unsigned char *)(a2 + 88) = v26 & 1;
  *(unsigned char *)(a2 + 89) = v14;
  return result;
}

unint64_t sub_10034B538()
{
  unint64_t result = qword_10072B140;
  if (!qword_10072B140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B140);
  }
  return result;
}

unint64_t sub_10034B58C()
{
  unint64_t result = qword_10072B158;
  if (!qword_10072B158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B158);
  }
  return result;
}

unint64_t sub_10034B5E0()
{
  unint64_t result = qword_10072B170;
  if (!qword_10072B170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B170);
  }
  return result;
}

uint64_t sub_10034B634(uint64_t a1)
{
  return a1;
}

uint64_t sub_10034B680(uint64_t a1)
{
  return a1;
}

unint64_t sub_10034B6C8()
{
  unint64_t result = qword_10072B188;
  if (!qword_10072B188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B188);
  }
  return result;
}

uint64_t sub_10034B71C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65727574736567 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10034B800(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072C338);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_1003FCA68();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v7;
}

uint64_t sub_10034B9A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7373656E6576696CLL && a2 == 0xED00006C6562614CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D737365737361 && a2 == 0xEE0043414673746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xED00004341467370 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D737365737361 && a2 == 0xEC0000004154746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F4C63634E78616DLL && a2 == 0xE900000000000077 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x694863634E78616DLL && a2 == 0xEA00000000006867 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x536465726F6E6769 && a2 == 0xEF73656863746974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656D737365737361 && a2 == 0xEE0044525073746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656D737365737361 && a2 == 0xEC0000004449746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xEC00000044497370 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000010064AD50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x65756C615678756CLL && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t sub_10034BF40@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072D960);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040C378();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  LOBYTE(v46) = 0;
  uint64_t v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v43 = v9;
  uint64_t v10 = sub_100007764(&qword_10072CB10);
  char v45 = 1;
  uint64_t v11 = sub_1000AB18C(&qword_10072CB18, &qword_10072CB10);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v41 = v10;
  uint64_t v42 = v11;
  char v40 = a2;
  uint64_t v12 = v46;
  sub_100007764(&qword_10072D970);
  char v45 = 2;
  sub_10040C3CC(&qword_10072D978, &qword_10072D980);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v13 = v46;
  LOBYTE(v46) = 3;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v39 = v13;
  LOBYTE(v46) = 4;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 5;
  uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v46) = 6;
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v35 = v17;
  uint64_t v36 = v16;
  uint64_t v37 = v15;
  sub_100007764(&qword_10072D988);
  char v45 = 7;
  sub_10033E3A4(&qword_10072D990, &qword_10072D988, (void (*)(void))sub_10040C458);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v18 = v46;
  LOBYTE(v46) = 8;
  swift_bridgeObjectRetain();
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v31 = v14;
  uint64_t v32 = v19;
  uint64_t v34 = v18;
  sub_100007764(&qword_1007240D8);
  char v45 = 9;
  uint64_t v33 = sub_1000AB18C(&qword_10072D980, &qword_1007240D8);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v20 = v46;
  char v45 = 10;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v45 = 11;
  uint64_t v33 = v46;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v21 = v46;
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v22 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v34;
  swift_bridgeObjectRelease();
  uint64_t v24 = v39;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  int v26 = v40;
  *char v40 = v44;
  *((unsigned char *)v26 + 8) = v43 & 1;
  v26[2] = v12;
  v26[3] = v24;
  BYTE4(v14) = BYTE4(v31);
  *((_DWORD *)v26 + 8) = v31;
  *((unsigned char *)v26 + 36) = BYTE4(v14) & 1;
  char v27 = BYTE4(v37);
  *((_DWORD *)v26 + 10) = v37;
  *((unsigned char *)v26 + 44) = v27 & 1;
  char v28 = BYTE4(v38);
  *((_DWORD *)v26 + 12) = v38;
  *((unsigned char *)v26 + 52) = v28 & 1;
  v26[7] = v36;
  *((unsigned char *)v26 + 64) = v35 & 1;
  v26[9] = v23;
  char v29 = BYTE4(v32);
  *((_DWORD *)v26 + 20) = v32;
  *((unsigned char *)v26 + 84) = v29 & 1;
  v26[11] = v20;
  unsigned char v26[12] = v22;
  v26[13] = v21;
  return result;
}

uint64_t sub_10034C70C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x326567617473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10034C804(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072D050);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)sub_10000C728(a1, a1[3]);
  sub_100404C38();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    char v11 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v7;
}

uint64_t sub_10034C9AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7A69726F68747561 && a2 == 0xED00006E6F697461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7A69726F68747561 && a2 == 0xEE00747265436565 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7A69726F68747561 && a2 == 0xEE00747265437265)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10034CB30(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072CBB8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10000C728(a1, a1[3]);
  sub_100403368();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    LOBYTE(v12) = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100007764(&qword_1007268F0);
    char v11 = 1;
    uint64_t v9 = sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    swift_bridgeObjectRetain();
    uint64_t v10 = v9;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v11 = 2;
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_10034CE20(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000010064A9C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461747365747461 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10034CF28(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4874736575716572 && a2 == 0xED00007265646165;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A3A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xEA00000000006449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000010064A3C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6574707972636E65 && a2 == 0xED00006174614464 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010062A690 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x415064656E676973 && a2 == 0xE900000000000043 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010064A3E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064A400 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100643330 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7373656E6576696CLL && a2 == 0xEE00325661746144 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x800000010064A420 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000010064A440)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 12;
    }
    else {
      return 13;
    }
  }
}

uint64_t sub_10034D494(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00726564616548;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x45656D69746E7572 && a2 == 0xEC000000726F7272 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000010064A9A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100643330)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10034D684@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072CCA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v80 = 1;
  uint64_t v9 = a1[3];
  uint64_t v52 = a1;
  sub_10000C728(a1, v9);
  sub_100403654();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v52);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v50 = a2;
    uint64_t v51 = v6;
    LOBYTE(v53) = 0;
    sub_1002390F0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v63;
    uint64_t v11 = v65;
    uint64_t v45 = v62;
    *(void *)&long long v46 = v64;
    uint64_t v12 = v67;
    uint64_t v13 = v69;
    uint64_t v43 = v68;
    uint64_t v44 = v66;
    uint64_t v14 = v71;
    uint64_t v41 = v72;
    uint64_t v42 = v70;
    LOBYTE(v62) = 1;
    uint64_t v47 = v73;
    swift_bridgeObjectRetain();
    uint64_t v49 = v10;
    swift_bridgeObjectRetain();
    *((void *)&v46 + 1) = v11;
    swift_bridgeObjectRetain();
    uint64_t v48 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v17 = v16;
    uint64_t v39 = v15;
    uint64_t v40 = v13;
    LOBYTE(v62) = 2;
    swift_bridgeObjectRetain();
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LODWORD(v13) = v19 & 1;
    char v80 = v19 & 1;
    char v81 = 3;
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v22 = v21;
    uint64_t v23 = *(void (**)(char *, uint64_t))(v51 + 8);
    LODWORD(v51) = v13;
    uint64_t v24 = v20;
    uint64_t v38 = v20;
    v23(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v25 = v18;
    uint64_t v37 = v18;
    *(void *)&long long v53 = v45;
    *((void *)&v53 + 1) = v49;
    uint64_t v26 = *((void *)&v46 + 1);
    long long v54 = v46;
    *(void *)&long long v55 = v44;
    *((void *)&v55 + 1) = v48;
    uint64_t v27 = v40;
    *(void *)&long long v56 = v43;
    *((void *)&v56 + 1) = v40;
    *(void *)&long long v57 = v42;
    *((void *)&v57 + 1) = v14;
    *(void *)&long long v58 = v41;
    *((void *)&v58 + 1) = v47;
    *(void *)&long long v59 = v39;
    *((void *)&v59 + 1) = v17;
    *(void *)&long long v60 = v25;
    BYTE8(v60) = v51;
    *(void *)&long long v61 = v24;
    *((void *)&v61 + 1) = v22;
    sub_1004036A8((uint64_t)&v53);
    swift_bridgeObjectRelease();
    uint64_t v28 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v52);
    uint64_t v62 = v45;
    uint64_t v63 = v30;
    uint64_t v64 = v46;
    uint64_t v65 = v26;
    uint64_t v66 = v44;
    uint64_t v67 = v29;
    uint64_t v68 = v43;
    uint64_t v69 = v27;
    uint64_t v70 = v42;
    uint64_t v71 = v28;
    uint64_t v72 = v41;
    uint64_t v73 = v47;
    uint64_t v74 = v39;
    uint64_t v75 = v17;
    uint64_t v76 = v37;
    char v77 = v80;
    uint64_t v78 = v38;
    uint64_t v79 = v22;
    uint64_t result = sub_100262B24((uint64_t)&v62);
    long long v32 = v60;
    uint64_t v33 = v50;
    v50[6] = v59;
    v33[7] = v32;
    v33[8] = v61;
    long long v34 = v56;
    _OWORD v33[2] = v55;
    v33[3] = v34;
    long long v35 = v58;
    v33[4] = v57;
    v33[5] = v35;
    long long v36 = v54;
    *uint64_t v33 = v53;
    v33[1] = v36;
  }
  return result;
}

uint64_t sub_10034DBAC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F69746361 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A9E0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10034DCF8(void *a1)
{
  uint64_t v66 = type metadata accessor for DIPError.Code();
  uint64_t v56 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v3 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Logger();
  uint64_t v70 = *(void **)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_10072D950);
  uint64_t v69 = *(void (***)(char *, uint64_t))(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v52 - v10;
  uint64_t v12 = a1[3];
  uint64_t v62 = a1;
  sub_10000C728(a1, v12);
  unint64_t v13 = sub_10040C324();
  uint64_t v14 = v73;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    swift_bridgeObjectRelease();
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v62);
  }
  else
  {
    unint64_t v63 = v13;
    uint64_t v64 = v9;
    uint64_t v16 = v69;
    uint64_t v65 = v5;
    uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v54 = v17;
      long long v55 = (void (**)(char *, uint64_t))(v70 + 1);
      char v19 = (uint64_t *)(v17 + 40);
      uint64_t v69 = v16 + 1;
      uint64_t v70 = &_swiftEmptyDictionarySingleton;
      unint64_t v60 = 0x800000010064AC00;
      unint64_t v61 = 0x800000010064ABE0;
      uint64_t v58 = v6;
      long long v59 = v11;
      long long v53 = v3;
      while (1)
      {
        uint64_t v23 = *(v19 - 1);
        uint64_t v24 = *v19;
        uint64_t v68 = v19;
        uint64_t v73 = v23;
        unint64_t v71 = v23;
        unint64_t v72 = v24;
        swift_bridgeObjectRetain();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v67 = v18;
        unint64_t v71 = 0xD00000000000001FLL;
        unint64_t v72 = v61;
        uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
        unint64_t v71 = 0xD00000000000001ELL;
        unint64_t v72 = v60;
        KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v26 = v66;
        if (v25 <= 0)
        {
          defaultLogger()();
          uint64_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v27, v28))
          {
            uint64_t v29 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v29 = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "DEBUG turning issuerCurrentCredentialCapacity from 0 to 1", v29, 2u);
            uint64_t v26 = v66;
            swift_slowDealloc();
          }

          (*v55)(v65, v57);
          uint64_t v25 = 1;
        }
        uint64_t v30 = Data.init(base64urlEncoded:)();
        if (v31 >> 60 == 15)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v56 + 104))(v53, enum case for DIPError.Code.provisioningAttestationsUnavailable(_:), v26);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          uint64_t v51 = *v69;
          (*v69)(v64, v6);
          v51(v59, v6);
          return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v62);
        }
        uint64_t v32 = v30;
        unint64_t v33 = v31;
        sub_10002CEB0(v30, v31);
        long long v34 = v70;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v71 = (unint64_t)v34;
        unint64_t v37 = sub_100590548(v73, v24);
        uint64_t v38 = v34[2];
        BOOL v39 = (v36 & 1) == 0;
        uint64_t v40 = v38 + v39;
        if (__OFADD__(v38, v39)) {
          break;
        }
        char v41 = v36;
        if (v34[3] >= v40)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_10016CE44();
          }
        }
        else
        {
          sub_100168FC8(v40, isUniquelyReferenced_nonNull_native);
          unint64_t v42 = sub_100590548(v73, v24);
          if ((v41 & 1) != (v43 & 1)) {
            goto LABEL_28;
          }
          unint64_t v37 = v42;
        }
        uint64_t v44 = (void *)v71;
        uint64_t v70 = (void *)v71;
        if (v41)
        {
          uint64_t v20 = (uint64_t *)(*(void *)(v71 + 56) + 24 * v37);
          sub_10000C5F4(v20[1], v20[2]);
          *uint64_t v20 = v25;
          v20[1] = v32;
          v20[2] = v33;
        }
        else
        {
          *(void *)(v71 + 8 * (v37 >> 6) + 64) |= 1 << v37;
          uint64_t v45 = (void *)(v44[6] + 16 * v37);
          *uint64_t v45 = v73;
          v45[1] = v24;
          long long v46 = (uint64_t *)(v44[7] + 24 * v37);
          *long long v46 = v25;
          v46[1] = v32;
          _OWORD v46[2] = v33;
          uint64_t v47 = v44[2];
          BOOL v48 = __OFADD__(v47, 1);
          uint64_t v49 = v47 + 1;
          if (v48) {
            goto LABEL_27;
          }
          _OWORD v44[2] = v49;
          swift_bridgeObjectRetain();
        }
        char v19 = v68 + 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000C5E0(v32, v33);
        uint64_t v21 = *v69;
        uint64_t v6 = v58;
        (*v69)(v64, v58);
        uint64_t v18 = v67 - 1;
        uint64_t v22 = v59;
        if (v67 == 1)
        {
          swift_bridgeObjectRelease();
          v21(v22, v6);
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v50 = v16[1];
      uint64_t v70 = &_swiftEmptyDictionarySingleton;
      v50(v11, v6);
LABEL_25:
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v62);
      return (uint64_t)v70;
    }
  }
  return result;
}

uint64_t sub_10034E4F0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000018 && a2 == 0x800000010064AA00
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000010064AA20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5372656E74726170 && a2 == 0xEF6449656D656863 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C616548666C6573 && a2 == 0xEC00000065646F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676E69666F6F7270 && a2 == 0xED00006574617453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064AA40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010064AA60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4D79616C70736964 && a2 == 0xEF73656761737365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010064AA80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010064AAA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000010064AAC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010064AAE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010064AB00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xEC00000065707954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010064AB20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064AB40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100629FE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x5570657453646964 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000010064AB60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000010064AB80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000010064ABA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064ABC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000010064A440 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x7373656E6576696CLL && a2 == 0xEE006769666E6F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100629EB0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 25;
    }
    else {
      return 26;
    }
  }
}

uint64_t sub_10034EF64(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6973726556636166 && a2 == 0xEA00000000006E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65736F5065636166 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x566C6F6F74646170 && a2 == 0xEE006E6F69737265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6973726556647270 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10034F180(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574617473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657079546469 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10034F264(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7972616D697270 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E6F636573 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10034F364@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072CDA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100403A88();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v33 = 0;
  sub_100403ADC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v9 = v30;
  char v33 = 1;
  uint64_t v27 = v29;
  uint64_t v28 = v31;
  uint64_t v26 = v32;
  sub_100403B30(v29, v30);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = v29;
  uint64_t v10 = v30;
  uint64_t v24 = v30;
  uint64_t v25 = v29;
  uint64_t v22 = v32;
  uint64_t v23 = v31;
  uint64_t v12 = v27;
  uint64_t v13 = v26;
  sub_100403B30(v27, v9);
  uint64_t v14 = v11;
  uint64_t v15 = v10;
  uint64_t v17 = v22;
  uint64_t v16 = v23;
  sub_100403B30(v14, v15);
  sub_100403D70(v12, v9);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  sub_100403D70(v12, v9);
  uint64_t v19 = v24;
  uint64_t v18 = v25;
  uint64_t result = sub_100403D70(v25, v24);
  *a2 = v12;
  a2[1] = v9;
  a2[2] = v28;
  a2[3] = v13;
  a2[4] = v18;
  a2[5] = v19;
  a2[6] = v16;
  a2[7] = v17;
  return result;
}

uint64_t sub_10034F620(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x69546E6F74747562 && a2 == 0xEB00000000656C74;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10034F71C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574617473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10034F808(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = sub_100007764(a2);
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  sub_10000C728(a1, v9);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = v13;
    char v15 = 0;
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v14 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v6);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_10034FA20(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4874736575716572 && a2 == 0xED00007265646165;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A3A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F436E6F69676572 && a2 == 0xEA00000000006564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xEA00000000006449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736E6F69746361 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100643330)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_10034FCC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v69 = sub_100007764(&qword_10072C660);
  uint64_t v5 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v74 = v12;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = a1[3];
  uint64_t v70 = a1;
  sub_10000C728(a1, v13);
  sub_100401498();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v71 = v2;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1000AAC30(0, v72);
  }
  else
  {
    uint64_t v14 = v5;
    uint64_t v66 = a2;
    LOBYTE(v75) = 0;
    sub_1003FCE54();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v16 = v85;
    uint64_t v65 = v84;
    uint64_t v18 = v86;
    uint64_t v17 = v87;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v75) = 1;
    sub_1003FCEA8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v61 = v18;
    uint64_t v63 = v16;
    uint64_t v19 = v84;
    uint64_t v20 = v88;
    uint64_t v21 = v89;
    LOBYTE(v84) = 2;
    uint64_t v22 = v19;
    uint64_t v72 = v85;
    uint64_t v73 = v86;
    uint64_t v74 = v17;
    uint64_t v23 = v87;
    sub_1000AAD28(v19, v85);
    uint64_t v60 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v64 = v22;
    uint64_t v24 = v20;
    uint64_t v25 = v21;
    uint64_t v26 = v24;
    uint64_t v59 = v23;
    LOBYTE(v84) = 3;
    uint64_t v28 = v27;
    swift_bridgeObjectRetain();
    uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v68 = v28;
    uint64_t v57 = v29;
    uint64_t v58 = v25;
    uint64_t v62 = v26;
    uint64_t v31 = v30;
    sub_100007764(&qword_10072C670);
    LOBYTE(v75) = 4;
    sub_10033E3A4(&qword_10072C678, &qword_10072C670, (void (*)(void))sub_1004014EC);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v67 = v31;
    uint64_t v32 = v84;
    char v101 = 5;
    swift_bridgeObjectRetain();
    uint64_t v33 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v35 = v58;
    uint64_t v34 = v59;
    uint64_t v36 = v62;
    uint64_t v71 = 0;
    uint64_t v37 = v73;
    uint64_t v38 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v39 = v33;
    uint64_t v55 = v40;
    uint64_t v56 = v33;
    char v41 = v7;
    uint64_t v42 = v40;
    v38(v41, v69);
    *(void *)&long long v75 = v65;
    *((void *)&v75 + 1) = v63;
    *(void *)&long long v76 = v61;
    *((void *)&v76 + 1) = v74;
    *(void *)&long long v77 = v64;
    *((void *)&v77 + 1) = v72;
    *(void *)&long long v78 = v37;
    *((void *)&v78 + 1) = v34;
    *(void *)&long long v79 = v36;
    *((void *)&v79 + 1) = v35;
    *(void *)&long long v80 = v60;
    *((void *)&v80 + 1) = v68;
    *(void *)&long long v81 = v57;
    *((void *)&v81 + 1) = v67;
    *(void *)&long long v82 = v32;
    *((void *)&v82 + 1) = v39;
    uint64_t v83 = v42;
    sub_100401540((uint64_t)&v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = v64;
    uint64_t v44 = v72;
    uint64_t v45 = v34;
    uint64_t v46 = v62;
    sub_1000AAC30(v64, v72);
    uint64_t v47 = v74;
    swift_bridgeObjectRelease();
    uint64_t v48 = v63;
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v70);
    uint64_t v84 = v65;
    uint64_t v85 = v48;
    uint64_t v86 = v61;
    uint64_t v87 = v47;
    uint64_t v88 = v43;
    uint64_t v89 = v44;
    uint64_t v90 = v73;
    uint64_t v91 = v45;
    uint64_t v92 = v46;
    uint64_t v93 = v35;
    uint64_t v94 = v60;
    uint64_t v95 = v68;
    uint64_t v96 = v57;
    uint64_t v97 = v67;
    uint64_t v98 = v32;
    uint64_t v99 = v56;
    uint64_t v100 = v55;
    uint64_t result = sub_1002D40EC((uint64_t)&v84);
    long long v49 = v82;
    uint64_t v50 = v66;
    *(_OWORD *)(v66 + 96) = v81;
    *(_OWORD *)(v50 + 112) = v49;
    *(void *)(v50 + 128) = v83;
    long long v51 = v78;
    *(_OWORD *)(v50 + 32) = v77;
    *(_OWORD *)(v50 + 48) = v51;
    long long v52 = v80;
    *(_OWORD *)(v50 + 64) = v79;
    *(_OWORD *)(v50 + 80) = v52;
    long long v53 = v76;
    *(_OWORD *)uint64_t v50 = v75;
    *(_OWORD *)(v50 + 16) = v53;
  }
  return result;
}

uint64_t sub_1003504E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4874736575716572 && a2 == 0xED00007265646165;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A3A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F436E6F69676572 && a2 == 0xEA00000000006564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xEA00000000006449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100643330 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000010064A460)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100350780@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v66 = sub_100007764(&qword_10072C4A8);
  uint64_t v5 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v71 = v12;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = a1[3];
  uint64_t v67 = a1;
  sub_10000C728(a1, v13);
  sub_1003FD3C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v68 = v2;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000AAC30(0, v69);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v65 = v5;
    uint64_t v62 = a2;
    LOBYTE(v72) = 0;
    sub_1003FCE54();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v15 = v82;
    uint64_t v61 = v81;
    uint64_t v17 = v83;
    uint64_t v16 = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v72) = 1;
    sub_1003FCEA8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v58 = v17;
    uint64_t v59 = v15;
    uint64_t v18 = v81;
    uint64_t v19 = v85;
    uint64_t v20 = v86;
    LOBYTE(v81) = 2;
    uint64_t v21 = v18;
    uint64_t v69 = v82;
    uint64_t v70 = v83;
    uint64_t v71 = v16;
    uint64_t v22 = v84;
    sub_1000AAD28(v18, v82);
    uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v60 = v21;
    uint64_t v24 = v23;
    uint64_t v25 = v22;
    LOBYTE(v81) = 3;
    uint64_t v27 = v26;
    swift_bridgeObjectRetain();
    uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v64 = v27;
    uint64_t v29 = v28;
    LOBYTE(v81) = 4;
    uint64_t v31 = v30;
    swift_bridgeObjectRetain();
    uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v63 = v31;
    uint64_t v57 = v32;
    char v99 = 5;
    uint64_t v34 = v33;
    swift_bridgeObjectRetain();
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v68 = 0;
    uint64_t v36 = *(void (**)(char *, uint64_t))(v65 + 8);
    uint64_t v37 = v35;
    uint64_t v53 = v35;
    uint64_t v56 = v38;
    v36(v7, v66);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v72 = v61;
    *((void *)&v72 + 1) = v59;
    uint64_t v54 = v29;
    uint64_t v55 = v24;
    *(void *)&long long v73 = v58;
    *((void *)&v73 + 1) = v71;
    *(void *)&long long v74 = v60;
    *((void *)&v74 + 1) = v69;
    *(void *)&long long v75 = v70;
    *((void *)&v75 + 1) = v25;
    uint64_t v51 = v20;
    uint64_t v52 = v25;
    uint64_t v39 = v19;
    *(void *)&long long v76 = v19;
    *((void *)&v76 + 1) = v20;
    *(void *)&long long v77 = v24;
    *((void *)&v77 + 1) = v64;
    *(void *)&long long v78 = v29;
    *((void *)&v78 + 1) = v63;
    *(void *)&long long v79 = v57;
    *((void *)&v79 + 1) = v34;
    *(void *)&long long v80 = v37;
    *((void *)&v80 + 1) = v56;
    sub_1003FD418((uint64_t)&v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = v60;
    uint64_t v42 = v69;
    uint64_t v41 = v70;
    uint64_t v43 = v52;
    sub_1000AAC30(v60, v69);
    uint64_t v44 = v71;
    swift_bridgeObjectRelease();
    uint64_t v45 = v59;
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v67);
    uint64_t v81 = v61;
    uint64_t v82 = v45;
    uint64_t v83 = v58;
    uint64_t v84 = v44;
    uint64_t v85 = v40;
    uint64_t v86 = v42;
    uint64_t v87 = v41;
    uint64_t v88 = v43;
    uint64_t v89 = v39;
    uint64_t v90 = v51;
    uint64_t v91 = v55;
    uint64_t v92 = v64;
    uint64_t v93 = v54;
    uint64_t v94 = v63;
    uint64_t v95 = v57;
    uint64_t v96 = v34;
    uint64_t v97 = v53;
    uint64_t v98 = v56;
    uint64_t result = sub_1002D41A4((uint64_t)&v81);
    long long v46 = v79;
    uint64_t v47 = v62;
    v62[6] = v78;
    v47[7] = v46;
    v47[8] = v80;
    long long v48 = v75;
    _OWORD v47[2] = v74;
    v47[3] = v48;
    long long v49 = v77;
    v47[4] = v76;
    v47[5] = v49;
    long long v50 = v73;
    *uint64_t v47 = v72;
    v47[1] = v50;
  }
  return result;
}

uint64_t sub_100350F60(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657079546469 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10035104C(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072CD60);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_100403938();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[14] = 0;
    sub_10040398C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v7 = v9[15];
    v9[13] = 1;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v7;
}

uint64_t sub_10035120C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00726564616548;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x45656D69746E7572 && a2 == 0xEC000000726F7272 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010064AC50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736E6F69746361 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

void *sub_100351460@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072CF40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v95 = 1;
  uint64_t v9 = a1[3];
  uint64_t v61 = a1;
  sub_10000C728(a1, v9);
  sub_100404484();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v61);
    swift_bridgeObjectRelease();
    return (void *)sub_1002D5210(0, 0, 1);
  }
  else
  {
    uint64_t v60 = v6;
    uint64_t v58 = a2;
    LOBYTE(v62) = 0;
    sub_1002390F0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v73;
    uint64_t v11 = v75;
    uint64_t v53 = v72;
    *(void *)&long long v54 = v74;
    uint64_t v12 = v77;
    uint64_t v13 = v79;
    uint64_t v51 = v78;
    uint64_t v52 = v76;
    uint64_t v14 = v81;
    uint64_t v49 = v82;
    uint64_t v50 = v80;
    LOBYTE(v72) = 1;
    uint64_t v15 = v83;
    swift_bridgeObjectRetain();
    uint64_t v55 = v10;
    swift_bridgeObjectRetain();
    *((void *)&v54 + 1) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v59 = v14;
    swift_bridgeObjectRetain();
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v57 = v15;
    uint64_t v48 = v16;
    LOBYTE(v72) = 2;
    uint64_t v18 = v17;
    swift_bridgeObjectRetain();
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v56 = v18;
    uint64_t v20 = v19;
    char v95 = v21 & 1;
    LODWORD(v18) = v21;
    sub_100007764(&qword_10072CF50);
    LOBYTE(v62) = 3;
    sub_1004044D8();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v46 = v18;
    uint64_t v47 = v13;
    uint64_t v22 = v72;
    char v96 = 4;
    sub_10040457C();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v8, v5);
    uint64_t v60 = v93;
    uint64_t v23 = v94;
    uint64_t v24 = v92;
    sub_1004045D0(v92, v93, v94);
    sub_1002D5210(0, 0, 1);
    uint64_t v45 = v20;
    *(void *)&long long v62 = v53;
    *((void *)&v62 + 1) = v55;
    long long v63 = v54;
    *(void *)&long long v64 = v52;
    *((void *)&v64 + 1) = v12;
    uint64_t v42 = v12;
    uint64_t v25 = v47;
    *(void *)&long long v65 = v51;
    *((void *)&v65 + 1) = v47;
    uint64_t v26 = v59;
    *(void *)&long long v66 = v50;
    *((void *)&v66 + 1) = v59;
    *(void *)&long long v67 = v49;
    *((void *)&v67 + 1) = v57;
    *(void *)&long long v68 = v48;
    *((void *)&v68 + 1) = v56;
    *(void *)&long long v69 = v20;
    BYTE8(v69) = v46 & 1;
    *(void *)&long long v70 = v22;
    *((void *)&v70 + 1) = v24;
    uint64_t v27 = v24;
    uint64_t v43 = v24;
    uint64_t v44 = v23;
    uint64_t v28 = v60;
    *(void *)&long long v71 = v60;
    *((void *)&v71 + 1) = v23;
    sub_1004045E4(&v62);
    sub_1002D5210(v27, v28, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = v25;
    swift_bridgeObjectRelease();
    uint64_t v30 = v42;
    swift_bridgeObjectRelease();
    uint64_t v31 = *((void *)&v54 + 1);
    swift_bridgeObjectRelease();
    uint64_t v32 = v55;
    swift_bridgeObjectRelease();
    uint64_t v33 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v61);
    uint64_t v72 = v53;
    uint64_t v73 = v32;
    uint64_t v74 = v54;
    uint64_t v75 = v31;
    uint64_t v76 = v52;
    uint64_t v77 = v30;
    uint64_t v78 = v51;
    uint64_t v79 = v29;
    uint64_t v80 = v50;
    uint64_t v81 = v26;
    uint64_t v82 = v49;
    uint64_t v83 = v57;
    uint64_t v84 = v48;
    uint64_t v85 = v33;
    uint64_t v86 = v45;
    char v87 = v95;
    uint64_t v88 = v22;
    uint64_t v89 = v43;
    uint64_t v90 = v60;
    uint64_t v91 = v44;
    uint64_t result = sub_1002D514C(&v72);
    long long v35 = v69;
    uint64_t v36 = v58;
    v58[6] = v68;
    v36[7] = v35;
    long long v37 = v71;
    v36[8] = v70;
    v36[9] = v37;
    long long v38 = v65;
    v36[2] = v64;
    v36[3] = v38;
    long long v39 = v67;
    v36[4] = v66;
    v36[5] = v39;
    long long v40 = v63;
    *uint64_t v36 = v62;
    v36[1] = v40;
  }
  return result;
}

uint64_t sub_100351B0C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4874736575716572 && a2 == 0xED00007265646165;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A3A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72656469766F7270 && a2 == 0xEA00000000006449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F436E6F69676572 && a2 == 0xEA00000000006564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F69676552627573 && a2 == 0xED000065646F436ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7373656E6576696CLL && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100643330)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_100351E5C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v67 = sub_100007764(&qword_10072CCE0);
  uint64_t v5 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v73 = v12;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = a1[3];
  long long v68 = a1;
  sub_10000C728(a1, v13);
  sub_1003FF5CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v69 = v2;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000AAC30(0, v71);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = v5;
    long long v63 = a2;
    LOBYTE(v74) = 0;
    sub_1003FCE54();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v16 = v85;
    uint64_t v17 = v87;
    uint64_t v61 = v86;
    uint64_t v62 = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v74) = 1;
    sub_1003FCEA8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v73 = v17;
    uint64_t v18 = v84;
    uint64_t v19 = v88;
    uint64_t v20 = v89;
    LOBYTE(v84) = 2;
    uint64_t v21 = v18;
    uint64_t v71 = v85;
    uint64_t v72 = v86;
    uint64_t v70 = v87;
    sub_1000AAD28(v18, v85);
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v60 = v21;
    uint64_t v59 = v22;
    LOBYTE(v84) = 3;
    uint64_t v24 = v23;
    swift_bridgeObjectRetain();
    uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v66 = v24;
    uint64_t v26 = v25;
    LOBYTE(v84) = 4;
    uint64_t v28 = v27;
    swift_bridgeObjectRetain();
    uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v65 = v28;
    uint64_t v58 = v29;
    LOBYTE(v84) = 5;
    uint64_t v31 = v30;
    swift_bridgeObjectRetain();
    uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v64 = v31;
    uint64_t v57 = v32;
    char v104 = 6;
    uint64_t v34 = v33;
    swift_bridgeObjectRetain();
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v69 = 0;
    uint64_t v37 = v36;
    long long v38 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v56 = v35;
    v38(v7, v67);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v74 = v62;
    *((void *)&v74 + 1) = v16;
    uint64_t v54 = v16;
    uint64_t v55 = v26;
    *(void *)&long long v75 = v61;
    *((void *)&v75 + 1) = v73;
    *(void *)&long long v76 = v60;
    *((void *)&v76 + 1) = v71;
    *(void *)&long long v77 = v72;
    *((void *)&v77 + 1) = v70;
    uint64_t v52 = v20;
    uint64_t v53 = v19;
    *(void *)&long long v78 = v19;
    *((void *)&v78 + 1) = v20;
    *(void *)&long long v79 = v59;
    *((void *)&v79 + 1) = v66;
    *(void *)&long long v80 = v26;
    *((void *)&v80 + 1) = v65;
    *(void *)&long long v81 = v58;
    *((void *)&v81 + 1) = v64;
    *(void *)&long long v82 = v57;
    *((void *)&v82 + 1) = v34;
    *(void *)&long long v83 = v56;
    *((void *)&v83 + 1) = v37;
    sub_1002D5080((uint64_t)&v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v60;
    uint64_t v40 = v71;
    uint64_t v41 = v72;
    uint64_t v42 = v53;
    sub_1000AAC30(v60, v71);
    uint64_t v43 = v73;
    swift_bridgeObjectRelease();
    uint64_t v44 = v54;
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v68);
    uint64_t v84 = v62;
    uint64_t v85 = v44;
    uint64_t v86 = v61;
    uint64_t v87 = v43;
    uint64_t v88 = v39;
    uint64_t v89 = v40;
    uint64_t v90 = v41;
    uint64_t v91 = v70;
    uint64_t v92 = v42;
    uint64_t v93 = v52;
    uint64_t v94 = v59;
    uint64_t v95 = v66;
    uint64_t v96 = v55;
    uint64_t v97 = v65;
    uint64_t v98 = v58;
    uint64_t v99 = v64;
    uint64_t v100 = v57;
    uint64_t v101 = v34;
    uint64_t v102 = v56;
    uint64_t v103 = v37;
    uint64_t result = sub_1002D4020((uint64_t)&v84);
    long long v45 = v81;
    int v46 = v63;
    v63[6] = v80;
    v46[7] = v45;
    long long v47 = v83;
    v46[8] = v82;
    v46[9] = v47;
    long long v48 = v77;
    _OWORD v46[2] = v76;
    v46[3] = v48;
    long long v49 = v79;
    v46[4] = v78;
    v46[5] = v49;
    long long v50 = v75;
    *int v46 = v74;
    v46[1] = v50;
  }
  return result;
}

uint64_t sub_1003526E0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00726564616548;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x45656D69746E7572 && a2 == 0xEC000000726F7272 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7373656E6576696CLL && a2 == 0xEE006769666E6F43)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100352898(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F69746361 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1003529E0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072CED0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100404254();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  LOBYTE(v23) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v22 = v9;
  LOBYTE(v23) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v20 = v12;
  char v26 = 2;
  sub_1004042A8();
  swift_bridgeObjectRetain();
  uint64_t v21 = v14;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  uint64_t v17 = v25;
  swift_bridgeObjectRetain();
  uint64_t v18 = v21;
  swift_bridgeObjectRetain();
  sub_1004042FC(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_100404344(v15);
  *a2 = v22;
  a2[1] = v11;
  a2[2] = v20;
  a2[3] = v18;
  a2[4] = v15;
  a2[5] = v16;
  a2[6] = v17;
  return result;
}

uint64_t sub_100352CC8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x644964726F636572 && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000010064AA00)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100352DC4(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072CF00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_1004043DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100007764(&qword_1007268F0);
    v9[7] = 0;
    sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_100353010(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100629300
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xEA00000000006449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x800000010064A5A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6144434150736469 && a2 == 0xEA00000000006174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6144656369766564 && a2 == 0xEA00000000006174)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100353234(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4874736575716572 && a2 == 0xED00007265646165;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A3A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100629300 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064A5C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x800000010064A5A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6465696669726576 && a2 == 0xEE00736D69616C43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064A550 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6144434150736469 && a2 == 0xEA00000000006174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6144434150736469 && a2 == 0xEE007473694C6174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6144656369766564 && a2 == 0xEA00000000006174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6563697665447369 && a2 == 0xEE0064656B636F4CLL)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_100353708(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00726564616548;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x45656D69746E7572 && a2 == 0xEC000000726F7272 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010064A980)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100353898(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4874736575716572 && a2 == 0xED00007265646165;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756F4365636E6F6ELL && a2 == 0xEA0000000000746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72656469766F7270 && a2 == 0xEA00000000006449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A3A0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100353A8C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v44 = sub_100007764(&qword_10072CCD0);
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_10000C728(a1, a1[3]);
  sub_1003FF620();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1000AAC30(0, 0);
  }
  else
  {
    uint64_t v42 = a2;
    uint64_t v43 = v5;
    char v51 = 0;
    sub_1003FCE54();
    uint64_t v12 = v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v13 = v46;
    uint64_t v41 = v45;
    uint64_t v14 = v47;
    uint64_t v15 = v48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v45) = 1;
    uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v40 = v14;
    uint64_t v16 = v15;
    LOBYTE(v45) = 2;
    uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v18 = v17;
    char v51 = 3;
    sub_1003FCEA8();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v12);
    uint64_t v20 = v45;
    uint64_t v19 = v46;
    uint64_t v43 = v48;
    uint64_t v44 = v49;
    uint64_t v33 = v50;
    uint64_t v21 = v47;
    sub_1000AAD28(v45, v46);
    sub_1000AAC30(0, 0);
    swift_bridgeObjectRetain();
    uint64_t v37 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v35 = v20;
    uint64_t v36 = v19;
    uint64_t v34 = v21;
    uint64_t v22 = v33;
    sub_1000AAD28(v20, v19);
    uint64_t v23 = v19;
    uint64_t v24 = v22;
    sub_1000AAC30(v20, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = v35;
    uint64_t v25 = v36;
    uint64_t v27 = v34;
    uint64_t v28 = v44;
    uint64_t result = sub_1000AAC30(v35, v36);
    uint64_t v30 = v42;
    *uint64_t v42 = v41;
    v30[1] = v13;
    uint64_t v31 = v37;
    v30[2] = v40;
    v30[3] = v31;
    uint64_t v32 = v38;
    v30[4] = v39;
    v30[5] = v32;
    v30[6] = v18;
    v30[7] = v26;
    v30[8] = v25;
    v30[9] = v27;
    v30[10] = v43;
    v30[11] = v28;
    v30[12] = v24;
  }
  return result;
}

uint64_t sub_100353FB8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00726564616548;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x45656D69746E7572 && a2 == 0xEC000000726F7272 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7365636E6F6ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100354144(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4874736575716572 && a2 == 0xED00007265646165;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000010064A530 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465696669726576 && a2 == 0xEE00736D69616C43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064A550 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x61746144766469 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746163696C707061 && a2 == 0xEF617461446E6F69)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100354424(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x776F6C666B726F77 && a2 == 0xEB0000000064695FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100649FA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5F64616F6C796170 && a2 == 0xEE006572756E6574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x8000000100649FC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000033 && a2 == 0x8000000100649FF0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100354668(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D737365737361 && a2 == 0xEA0000000000746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7364656573 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x666E49726F727265 && a2 == 0xE90000000000006FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x49656C69666F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697469646461 && a2 == 0xEE006F666E496C61)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1003548C8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000019 && a2 == 0x800000010064A530
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D737365737361 && a2 == 0xEA0000000000746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064A620)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100354A24(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xEE00726564616548;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6954707570657473 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010064A840 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746163696C707061 && a2 == 0xEF617461446E6F69)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100354C88@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072CAC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v58 = a1;
  sub_10000C728(a1, v9);
  sub_100402CAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v57 = v6;
    uint64_t v54 = a2;
    LOBYTE(v59) = 0;
    sub_1002390F0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v70;
    uint64_t v11 = v72;
    uint64_t v50 = v69;
    *(void *)&long long v51 = v71;
    uint64_t v12 = v74;
    uint64_t v13 = v76;
    uint64_t v48 = v75;
    uint64_t v49 = v73;
    uint64_t v14 = v78;
    uint64_t v46 = v79;
    uint64_t v47 = v77;
    LOBYTE(v69) = 1;
    uint64_t v15 = v80;
    swift_bridgeObjectRetain();
    uint64_t v52 = v10;
    swift_bridgeObjectRetain();
    *((void *)&v51 + 1) = v11;
    swift_bridgeObjectRetain();
    uint64_t v56 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v55 = v14;
    swift_bridgeObjectRetain();
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v53 = v13;
    uint64_t v18 = v17;
    uint64_t v44 = v16;
    uint64_t v45 = v15;
    LOBYTE(v69) = 2;
    swift_bridgeObjectRetain();
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = v20;
    LOBYTE(v69) = 3;
    swift_bridgeObjectRetain();
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    char v89 = 4;
    unint64_t v43 = v23;
    swift_bridgeObjectRetain();
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v57 + 8);
    uint64_t v57 = v24;
    uint64_t v40 = v26;
    v25(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v59 = v50;
    *((void *)&v59 + 1) = v52;
    long long v60 = v51;
    uint64_t v42 = v22;
    *(void *)&long long v61 = v49;
    *((void *)&v61 + 1) = v56;
    *(void *)&long long v62 = v48;
    *((void *)&v62 + 1) = v53;
    *(void *)&long long v63 = v47;
    *((void *)&v63 + 1) = v55;
    *(void *)&long long v64 = v46;
    *((void *)&v64 + 1) = v45;
    *(void *)&long long v65 = v44;
    *((void *)&v65 + 1) = v18;
    *(void *)&long long v66 = v19;
    *((void *)&v66 + 1) = v21;
    uint64_t v41 = v19;
    unsigned long long v67 = __PAIR128__(v43, v22);
    uint64_t v27 = v40;
    *(void *)&long long v68 = v57;
    *((void *)&v68 + 1) = v40;
    sub_100402D00((uint64_t)&v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = v56;
    swift_bridgeObjectRelease();
    uint64_t v29 = *((void *)&v51 + 1);
    swift_bridgeObjectRelease();
    uint64_t v30 = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v31 = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v58);
    uint64_t v69 = v50;
    uint64_t v70 = v30;
    uint64_t v71 = v51;
    uint64_t v72 = v29;
    uint64_t v73 = v49;
    uint64_t v74 = v28;
    uint64_t v75 = v48;
    uint64_t v76 = v53;
    uint64_t v77 = v47;
    uint64_t v78 = v55;
    uint64_t v79 = v46;
    uint64_t v80 = v45;
    uint64_t v81 = v44;
    uint64_t v82 = v18;
    uint64_t v83 = v41;
    uint64_t v84 = v21;
    uint64_t v85 = v42;
    unint64_t v86 = v31;
    uint64_t v87 = v57;
    uint64_t v88 = v27;
    uint64_t result = sub_10017DD9C((uint64_t)&v69);
    long long v33 = v66;
    uint64_t v34 = v54;
    v54[6] = v65;
    v34[7] = v33;
    long long v35 = v68;
    v34[8] = v67;
    v34[9] = v35;
    long long v36 = v62;
    v34[2] = v61;
    v34[3] = v36;
    long long v37 = v64;
    v34[4] = v63;
    v34[5] = v37;
    long long v38 = v60;
    *uint64_t v34 = v59;
    v34[1] = v38;
  }
  return result;
}

uint64_t sub_10035530C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684632949 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1003553E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000010064A0E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000010064A100 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x52746C7561666544 && a2 == 0xED00006E6F696765 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100618AF0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1003555B4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072B240);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035C5D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  sub_100007764(&qword_10072B250);
  char v22 = 0;
  sub_10035C62C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v20;
  sub_100007764(&qword_1007268F0);
  char v22 = 1;
  sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v20;
  LOBYTE(v20) = 2;
  swift_bridgeObjectRetain();
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v18 = v11;
  char v22 = 3;
  sub_10035C6FC();
  uint64_t v19 = v13;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v20;
  uint64_t v14 = v21;
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v16 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v18;
  a2[3] = v16;
  a2[4] = v15;
  a2[5] = v14;
  return result;
}

uint64_t sub_100355938()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1B) {
    return 27;
  }
  else {
    return v0;
  }
}

void *sub_10035598C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072C368);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v96 = a1;
  sub_10000C728(a1, v9);
  sub_1003FCB10();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)_s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v96);
  }
  uint64_t v90 = a2;
  LOBYTE(v98[0]) = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  LOBYTE(v98[0]) = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  LOBYTE(v98[0]) = 2;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v98[0]) = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = v15;
  LOBYTE(v98[0]) = 4;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v98[0]) = 5;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v95 = v19;
  uint64_t v89 = v20;
  LOBYTE(v98[0]) = 6;
  uint64_t v22 = v21;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v94 = v22;
  uint64_t v88 = v23;
  LOBYTE(v98[0]) = 7;
  uint64_t v25 = v24;
  swift_bridgeObjectRetain();
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v93 = v25;
  uint64_t v87 = v26;
  LOBYTE(v98[0]) = 8;
  uint64_t v28 = v27;
  swift_bridgeObjectRetain();
  uint64_t v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v92 = v28;
  uint64_t v84 = v17;
  LOBYTE(v98[0]) = 9;
  uint64_t v91 = v29;
  swift_bridgeObjectRetain();
  uint64_t v83 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v85 = v30;
  char v170 = v30 & 1;
  LOBYTE(v98[0]) = 10;
  uint64_t v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v82 = v31;
  char v168 = v31 & 1;
  LOBYTE(v98[0]) = 11;
  uint64_t v79 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v80 = v32;
  LOBYTE(v98[0]) = 12;
  swift_bridgeObjectRetain();
  uint64_t v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v78 = v33;
  char v166 = v33 & 1;
  LOBYTE(v98[0]) = 13;
  uint64_t v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v76 = v34;
  char v164 = v34 & 1;
  LOBYTE(v98[0]) = 14;
  uint64_t v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v74 = v35;
  char v162 = v35 & 1;
  LOBYTE(v98[0]) = 15;
  uint64_t v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v72 = v36;
  char v160 = v36 & 1;
  LOBYTE(v98[0]) = 16;
  uint64_t v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v70 = v37;
  char v158 = v37 & 1;
  LOBYTE(v98[0]) = 17;
  uint64_t v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v68 = v38;
  LOBYTE(v98[0]) = 18;
  swift_bridgeObjectRetain();
  uint64_t v66 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v40 = v39;
  LOBYTE(v98[0]) = 19;
  swift_bridgeObjectRetain();
  uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v42 = v41;
  LOBYTE(v98[0]) = 20;
  swift_bridgeObjectRetain();
  uint64_t v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v64 = v43;
  char v156 = v43 & 1;
  LOBYTE(v98[0]) = 21;
  int v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v98[0]) = 22;
  uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v61 = v44;
  char v153 = v44 & 1;
  LOBYTE(v98[0]) = 23;
  uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v59 = v45;
  char v151 = v45 & 1;
  LOBYTE(v98[0]) = 24;
  uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v57 = v46;
  char v149 = v46 & 1;
  LOBYTE(v98[0]) = 25;
  int v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v145 = 26;
  uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  HIDWORD(v53) = v47;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v97[37]) = v64 & 1;
  LOBYTE(v97[39]) = v61 & 1;
  LOBYTE(v97[41]) = v59 & 1;
  LOBYTE(v97[43]) = v57 & 1;
  LOBYTE(v97[45]) = BYTE4(v53) & 1;
  char v146 = BYTE4(v53) & 1;
  LOBYTE(v97[15]) = v85 & 1;
  LOBYTE(v97[17]) = v82 & 1;
  LOBYTE(v97[21]) = v78 & 1;
  LOBYTE(v97[23]) = v76 & 1;
  LOBYTE(v97[25]) = v74 & 1;
  LOBYTE(v97[27]) = v72 & 1;
  LOBYTE(v97[29]) = v70 & 1;
  v97[0] = v11;
  v97[1] = v13;
  v97[2] = v14;
  v97[3] = v16;
  uint64_t v49 = v94;
  uint64_t v48 = v95;
  v97[4] = v84;
  v97[5] = v95;
  v97[6] = v89;
  v97[7] = v94;
  uint64_t v50 = v93;
  v97[8] = v88;
  v97[9] = v93;
  v97[10] = v87;
  v97[11] = v92;
  v97[12] = v86;
  v97[13] = v91;
  v97[14] = v83;
  v97[16] = v81;
  v97[18] = v79;
  v97[19] = v80;
  v97[20] = v77;
  v97[22] = v75;
  v97[24] = v73;
  v97[26] = v71;
  v97[28] = v69;
  v97[30] = v67;
  v97[31] = v68;
  v97[32] = v66;
  v97[33] = v40;
  v97[34] = v65;
  v97[35] = v42;
  v97[36] = v63;
  BYTE1(v97[37]) = v62;
  v97[38] = v60;
  v97[40] = v58;
  v97[42] = v56;
  BYTE1(v97[43]) = v55;
  v97[44] = v54;
  sub_100044CE4((uint64_t)v97);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v51 = v91;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v96);
  v98[2] = v14;
  v98[4] = v84;
  v98[5] = v48;
  v98[6] = v89;
  v98[7] = v49;
  v98[0] = v11;
  v98[1] = v13;
  void v98[3] = v16;
  v98[8] = v88;
  v98[9] = v50;
  v98[10] = v87;
  v98[11] = v92;
  v98[12] = v86;
  v98[13] = v51;
  v98[14] = v83;
  char v99 = v170;
  *(_DWORD *)&v100[3] = *(_DWORD *)&v169[3];
  *(_DWORD *)uint64_t v100 = *(_DWORD *)v169;
  uint64_t v101 = v81;
  char v102 = v168;
  *(_DWORD *)uint64_t v103 = *(_DWORD *)v167;
  *(_DWORD *)&v103[3] = *(_DWORD *)&v167[3];
  uint64_t v104 = v79;
  uint64_t v105 = v80;
  uint64_t v106 = v77;
  char v107 = v166;
  *(_DWORD *)&_DWORD v108[3] = *(_DWORD *)&v165[3];
  *(_DWORD *)unint64_t v108 = *(_DWORD *)v165;
  uint64_t v109 = v75;
  char v110 = v164;
  *(_DWORD *)&v111[3] = *(_DWORD *)&v163[3];
  *(_DWORD *)unint64_t v111 = *(_DWORD *)v163;
  uint64_t v112 = v73;
  char v113 = v162;
  *(_DWORD *)&v114[3] = *(_DWORD *)&v161[3];
  *(_DWORD *)uint64_t v114 = *(_DWORD *)v161;
  uint64_t v115 = v71;
  char v116 = v160;
  *(_DWORD *)&v117[3] = *(_DWORD *)&v159[3];
  *(_DWORD *)uint64_t v117 = *(_DWORD *)v159;
  uint64_t v118 = v69;
  char v119 = v158;
  *(_DWORD *)&v120[3] = *(_DWORD *)&v157[3];
  *(_DWORD *)unint64_t v120 = *(_DWORD *)v157;
  uint64_t v121 = v67;
  uint64_t v122 = v68;
  uint64_t v123 = v66;
  uint64_t v124 = v40;
  uint64_t v125 = v65;
  uint64_t v126 = v42;
  uint64_t v127 = v63;
  char v128 = v156;
  char v129 = v62;
  int v130 = v154;
  __int16 v131 = v155;
  uint64_t v132 = v60;
  char v133 = v153;
  *(_DWORD *)uint64_t v134 = *(_DWORD *)v152;
  *(_DWORD *)&v134[3] = *(_DWORD *)&v152[3];
  uint64_t v135 = v58;
  char v136 = v151;
  *(_DWORD *)uint64_t v137 = *(_DWORD *)v150;
  *(_DWORD *)&v137[3] = *(_DWORD *)&v150[3];
  uint64_t v138 = v56;
  char v139 = v149;
  char v140 = v55;
  int v141 = v147;
  __int16 v142 = v148;
  uint64_t v143 = v54;
  char v144 = v146;
  sub_100044F4C((uint64_t)v98);
  return memcpy(v90, v97, 0x169uLL);
}

uint64_t sub_1003568B4(void *a1)
{
  uint64_t v2 = sub_100007764(&qword_10072C378);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1003FCB64();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[30] = 0;
  sub_1003FCBB8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v8[31];
  sub_100007764(&qword_10072C390);
  v8[15] = 1;
  sub_1003FCC0C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v6;
}

uint64_t sub_100356A94(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072CFF8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1004048EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v40 = v4;
  uint64_t v41 = a1;
  uint64_t v71 = v3;
  uint64_t v8 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v39 = v8;
  if (!v9)
  {
    int v44 = &_swiftEmptyDictionarySingleton;
    int v45 = &_swiftEmptyDictionarySingleton;
    uint64_t v42 = &_swiftEmptyDictionarySingleton;
LABEL_6:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v71);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v41);
    return (uint64_t)v42;
  }
  uint64_t v10 = (uint64_t *)(v8 + 40);
  uint64_t v38 = " FairPlayProvisioningInfo";
  unint64_t v43 = 0x800000010064A360;
  int v44 = &_swiftEmptyDictionarySingleton;
  int v45 = &_swiftEmptyDictionarySingleton;
  uint64_t v42 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v20 = *(v10 - 1);
    uint64_t v19 = *v10;
    BOOL v21 = v20 == 0x736567617373656DLL && v19 == 0xE800000000000000;
    if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_100007764(&qword_100726808);
      *(void *)&long long v61 = v20;
      *((void *)&v61 + 1) = v19;
      sub_1001D87AC(&qword_100726810);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    if (v20 == 0xD000000000000013 && v19 == v43 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_100007764(&qword_100726808);
      *(void *)&long long v61 = v20;
      *((void *)&v61 + 1) = v19;
      sub_1001D87AC(&qword_100726810);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      swift_bridgeObjectRelease();
      int v45 = (void *)v49;
      goto LABEL_9;
    }
    if (v20 == 0x656372756F736572 && v19 == 0xEC000000736C7255
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_100007764(&qword_100726808);
      *(void *)&long long v61 = v20;
      *((void *)&v61 + 1) = v19;
      sub_1001D87AC(&qword_100726810);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      swift_bridgeObjectRelease();
      int v44 = (void *)v49;
      goto LABEL_9;
    }
    uint64_t v59 = v20;
    uint64_t v60 = v19;
    sub_100404940();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v55 = v67;
    long long v56 = v68;
    long long v57 = v69;
    uint64_t v58 = v70;
    long long v51 = v63;
    long long v52 = v64;
    long long v53 = v65;
    long long v54 = v66;
    long long v49 = v61;
    long long v50 = v62;
    uint64_t v22 = v42;
    LODWORD(v37) = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v48 = v22;
    unint64_t v24 = sub_100590548(v20, v19);
    uint64_t v25 = v22[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    if (v22[3] >= v27)
    {
      if (v37)
      {
        if ((v23 & 1) == 0) {
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t v37 = v24;
        LODWORD(v42) = v23;
        sub_10016D01C();
        unint64_t v24 = v37;
        if ((v42 & 1) == 0) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      LODWORD(v42) = v23;
      sub_100169304(v27, v37);
      unint64_t v28 = sub_100590548(v20, v19);
      if ((v42 & 1) != (v29 & 1)) {
        goto LABEL_37;
      }
      unint64_t v24 = v28;
      if ((v42 & 1) == 0)
      {
LABEL_31:
        int v30 = v48;
        v48[(v24 >> 6) + 8] |= 1 << v24;
        int v31 = (uint64_t *)(v30[6] + 16 * v24);
        *int v31 = v20;
        v31[1] = v19;
        uint64_t v32 = v30[7] + 152 * v24;
        *(_OWORD *)uint64_t v32 = v49;
        *(_OWORD *)(v32 + 16) = v50;
        *(_OWORD *)(v32 + 80) = v54;
        *(_OWORD *)(v32 + 64) = v53;
        *(_OWORD *)(v32 + 48) = v52;
        *(_OWORD *)(v32 + 32) = v51;
        *(void *)(v32 + 144) = v58;
        *(_OWORD *)(v32 + 128) = v57;
        *(_OWORD *)(v32 + 112) = v56;
        *(_OWORD *)(v32 + 96) = v55;
        uint64_t v33 = v30[2];
        BOOL v34 = __OFADD__(v33, 1);
        uint64_t v35 = v33 + 1;
        if (v34) {
          goto LABEL_36;
        }
        uint64_t v42 = v30;
        v30[2] = v35;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      }
    }
    uint64_t v42 = v48;
    uint64_t v11 = v48[7] + 152 * v24;
    long long v12 = *(_OWORD *)(v11 + 16);
    v46[0] = *(_OWORD *)v11;
    v46[1] = v12;
    long long v13 = *(_OWORD *)(v11 + 80);
    long long v15 = *(_OWORD *)(v11 + 32);
    long long v14 = *(_OWORD *)(v11 + 48);
    v46[4] = *(_OWORD *)(v11 + 64);
    v46[5] = v13;
    _OWORD v46[2] = v15;
    v46[3] = v14;
    long long v17 = *(_OWORD *)(v11 + 112);
    long long v16 = *(_OWORD *)(v11 + 128);
    long long v18 = *(_OWORD *)(v11 + 96);
    uint64_t v47 = *(void *)(v11 + 144);
    v46[7] = v17;
    v46[8] = v16;
    v46[6] = v18;
    sub_1000B6040((uint64_t)v46);
    *(_OWORD *)(v11 + 96) = v55;
    *(_OWORD *)(v11 + 112) = v56;
    *(_OWORD *)(v11 + 128) = v57;
    *(void *)(v11 + 144) = v58;
    *(_OWORD *)(v11 + 32) = v51;
    *(_OWORD *)(v11 + 48) = v52;
    *(_OWORD *)(v11 + 64) = v53;
    *(_OWORD *)(v11 + 80) = v54;
    *(_OWORD *)uint64_t v11 = v49;
    *(_OWORD *)(v11 + 16) = v50;
LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    v10 += 2;
    if (!--v9) {
      goto LABEL_6;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100357228(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000010064AC90
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064ACB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010064A360 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656372756F736572 && a2 == 0xEC000000736C7255)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1003573E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072D0A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  __int16 v131 = a1;
  sub_10000C728(a1, v9);
  sub_100404D88();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v131);
  }
  uint64_t v10 = v6;
  uint64_t v83 = a2;
  LOBYTE(v88) = 0;
  sub_100404DDC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v11 = v98;
  unsigned __int8 v98 = 1;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v82 = v11;
  if (v13) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v13) {
    unint64_t v16 = v13;
  }
  else {
    unint64_t v16 = 0xE000000000000000;
  }
  unsigned __int8 v98 = 2;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v80 = v15;
  unint64_t v81 = v16;
  if (v18) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v18) {
    unint64_t v20 = v18;
  }
  else {
    unint64_t v20 = 0xE000000000000000;
  }
  unsigned __int8 v98 = 3;
  swift_bridgeObjectRetain();
  uint64_t v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unint64_t v79 = v20;
  uint64_t v21 = v19;
  unsigned __int8 v98 = 4;
  uint64_t v23 = v22;
  swift_bridgeObjectRetain();
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v87 = v23;
  uint64_t v25 = v24;
  unsigned __int8 v98 = 5;
  uint64_t v27 = v26;
  swift_bridgeObjectRetain();
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v86 = v27;
  uint64_t v77 = v28;
  unsigned __int8 v98 = 19;
  uint64_t v30 = v29;
  swift_bridgeObjectRetain();
  uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v85 = v30;
  uint64_t v76 = v31;
  unsigned __int8 v98 = 6;
  uint64_t v33 = v32;
  swift_bridgeObjectRetain();
  uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v84 = v33;
  if (v35) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = v34;
  }
  unsigned __int8 v98 = 7;
  uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v38) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = v37;
  }
  uint64_t v75 = v39;
  unsigned __int8 v98 = 18;
  uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v41) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = v40;
  }
  uint64_t v74 = v42;
  unsigned __int8 v98 = 8;
  int v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unsigned __int8 v98 = 9;
  int v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unsigned __int8 v98 = 10;
  int v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unsigned __int8 v98 = 16;
  int v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unsigned __int8 v98 = 17;
  int v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unsigned __int8 v98 = 15;
  int v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v66 = v68 == 2;
  unsigned __int8 v98 = 11;
  LODWORD(v67) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  BOOL v64 = v67 == 2;
  unsigned __int8 v98 = 12;
  int v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  BOOL v63 = v65 == 2;
  unsigned __int8 v98 = 13;
  int v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  sub_100007764(&qword_10072D0B8);
  unsigned __int8 v98 = 14;
  sub_10033E3A4(&qword_10072D0C0, &qword_10072D0B8, (void (*)(void))sub_100404E30);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v60 = v72 & 1;
  int v61 = v73 & 1;
  int v73 = v70 & 1;
  v71 &= 1u;
  int v72 = v69 & 1;
  int v69 = (v64 | v67) & 1;
  int v70 = (v66 | v68) & 1;
  int v66 = (v63 | v65) & 1;
  int v68 = (v62 == 2) | v62 & 1;
  if (v127) {
    unint64_t v43 = v127;
  }
  else {
    unint64_t v43 = _swiftEmptyArrayStorage;
  }
  long long v67 = v43;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  LOBYTE(v88) = v82;
  unint64_t v44 = v81;
  *((void *)&v88 + 1) = v80;
  *(void *)&long long v89 = v81;
  uint64_t v58 = v25;
  uint64_t v59 = v21;
  *((void *)&v89 + 1) = v21;
  unint64_t v45 = v79;
  *(void *)&long long v90 = v79;
  *((void *)&v90 + 1) = v78;
  uint64_t v46 = v87;
  *(void *)&long long v91 = v87;
  *((void *)&v91 + 1) = v25;
  uint64_t v48 = v85;
  uint64_t v47 = v86;
  *(void *)&long long v92 = v86;
  *((void *)&v92 + 1) = v77;
  *(void *)&long long v93 = v85;
  *((void *)&v93 + 1) = v36;
  uint64_t v57 = v36;
  *(void *)&long long v94 = v75;
  BYTE8(v94) = v61;
  BYTE9(v94) = v60;
  BYTE10(v94) = v71;
  BYTE11(v94) = v69;
  char v49 = v66;
  BYTE12(v94) = v66;
  BYTE13(v94) = v68;
  *(void *)&long long v95 = v43;
  BYTE8(v95) = v70;
  BYTE9(v95) = v73;
  BYTE10(v95) = v72;
  *(void *)&long long v96 = v74;
  *((void *)&v96 + 1) = v76;
  uint64_t v50 = v84;
  uint64_t v97 = v84;
  sub_1000B5FB4((uint64_t)&v88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v131);
  unsigned __int8 v98 = v82;
  *(_DWORD *)char v99 = v130[0];
  *(_DWORD *)&v99[3] = *(_DWORD *)((char *)v130 + 3);
  uint64_t v100 = v80;
  unint64_t v101 = v44;
  uint64_t v102 = v59;
  unint64_t v103 = v45;
  uint64_t v104 = v78;
  uint64_t v105 = v46;
  uint64_t v106 = v58;
  uint64_t v107 = v47;
  uint64_t v108 = v77;
  uint64_t v109 = v48;
  uint64_t v110 = v57;
  uint64_t v111 = v75;
  char v112 = v61;
  char v113 = v60;
  char v114 = v71;
  char v115 = v69;
  char v116 = v49;
  char v117 = v68;
  uint64_t v118 = v67;
  char v119 = v70;
  char v120 = v73;
  char v121 = v72;
  int v122 = v128;
  char v123 = v129;
  uint64_t v124 = v74;
  uint64_t v125 = v76;
  uint64_t v126 = v50;
  uint64_t result = sub_1000B6040((uint64_t)&v98);
  long long v51 = v95;
  uint64_t v52 = v83;
  *(_OWORD *)(v83 + 96) = v94;
  *(_OWORD *)(v52 + 112) = v51;
  *(_OWORD *)(v52 + 128) = v96;
  *(void *)(v52 + 144) = v97;
  long long v53 = v91;
  *(_OWORD *)(v52 + 32) = v90;
  *(_OWORD *)(v52 + 48) = v53;
  long long v54 = v93;
  *(_OWORD *)(v52 + 64) = v92;
  *(_OWORD *)(v52 + 80) = v54;
  long long v55 = v89;
  *(_OWORD *)uint64_t v52 = v88;
  *(_OWORD *)(v52 + 16) = v55;
  return result;
}

uint64_t sub_100357F30(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x707954646C656966 && a2 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100633070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000010064ACD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4679616C70736964 && a2 == 0xED000074616D726FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064ACF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x697373696D627573 && a2 == 0xED000079654B6E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x74676E654C6E696DLL && a2 == 0xE900000000000068 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x74676E654C78616DLL && a2 == 0xE900000000000068 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6554657275636573 && a2 == 0xEA00000000007478 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064AD10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x636972656D756ELL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x79614473776F6873 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6E6F4D73776F6873 && a2 == 0xEA00000000006874 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x61655973776F6873 && a2 == 0xE900000000000072 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x7461766972507369 && a2 == 0xED00006174614465 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010063CE70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x656C6261636E7973 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064AD30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x6974726F70707573 && a2 == 0xEE0061746144676ELL)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 19;
    }
    else {
      return 20;
    }
  }
}

uint64_t sub_100358784(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100633070
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10035886C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656469766F7270 && a2 == 0xEA00000000006449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xEA00000000006449)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100358978(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7475626972747461 && a2 == 0xEB00000000644965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953259891 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100358A74(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000010064A510
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010064A780 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6976726553766469 && a2 == 0xEF734C5255736563 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6575716552647364 && a2 == 0xEF65636E6F4E7473 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x800000010064A7A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x800000010064A7C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010064A7E0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_100358DE4@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v60 = sub_100007764(&qword_10072CA78);
  uint64_t v5 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1;
  sub_10000C728(a1, a1[3]);
  sub_100402B0C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v58 = v5;
  long long v51 = a2;
  LOBYTE(v61) = 0;
  sub_1004016A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v70;
  uint64_t v10 = v72;
  uint64_t v48 = v69;
  uint64_t v49 = v71;
  sub_100007764(&qword_1007268F0);
  LOBYTE(v61) = 1;
  sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
  uint64_t v50 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = (uint64_t)v8;
  uint64_t v59 = v10;
  uint64_t v12 = v50;
  uint64_t v13 = v69;
  LOBYTE(v69) = 2;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v57 = v13;
  uint64_t v15 = v14;
  LOBYTE(v61) = 3;
  uint64_t v17 = v16;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v56 = v17;
  uint64_t v47 = v15;
  uint64_t v18 = v69;
  LOBYTE(v69) = 4;
  swift_bridgeObjectRetain();
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v54 = v20;
  uint64_t v55 = v18;
  uint64_t v21 = v19;
  LOBYTE(v69) = 5;
  swift_bridgeObjectRetain();
  uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v69) = 6;
  uint64_t v23 = v22;
  swift_bridgeObjectRetain();
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v53 = v23;
  uint64_t v45 = v24;
  char v85 = 7;
  uint64_t v52 = v25;
  swift_bridgeObjectRetain();
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v58 + 8);
  uint64_t v28 = v26;
  uint64_t v42 = v29;
  uint64_t v43 = v26;
  uint64_t v30 = v29;
  v27(v7, v60);
  *(void *)&long long v61 = v48;
  *((void *)&v61 + 1) = v12;
  uint64_t v44 = v21;
  *(void *)&long long v62 = v49;
  *((void *)&v62 + 1) = v59;
  *(void *)&long long v63 = v57;
  *((void *)&v63 + 1) = v47;
  *(void *)&long long v64 = v56;
  *((void *)&v64 + 1) = v55;
  *(void *)&long long v65 = v21;
  *((void *)&v65 + 1) = v54;
  *(void *)&long long v66 = v46;
  *((void *)&v66 + 1) = v53;
  *(void *)&long long v67 = v45;
  *((void *)&v67 + 1) = v52;
  *(void *)&long long v68 = v28;
  *((void *)&v68 + 1) = v30;
  sub_100402B60((uint64_t)&v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = v56;
  swift_bridgeObjectRelease();
  uint64_t v32 = v55;
  swift_bridgeObjectRelease();
  uint64_t v33 = v54;
  swift_bridgeObjectRelease();
  uint64_t v34 = v53;
  swift_bridgeObjectRelease();
  uint64_t v35 = v52;
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v11);
  uint64_t v69 = v48;
  uint64_t v70 = v12;
  uint64_t v71 = v49;
  uint64_t v72 = v59;
  uint64_t v73 = v57;
  uint64_t v74 = v47;
  uint64_t v75 = v31;
  uint64_t v76 = v32;
  uint64_t v77 = v44;
  uint64_t v78 = v33;
  uint64_t v79 = v46;
  uint64_t v80 = v34;
  uint64_t v81 = v45;
  uint64_t v82 = v35;
  uint64_t v83 = v43;
  uint64_t v84 = v42;
  uint64_t result = sub_1001D6228((uint64_t)&v69);
  long long v37 = v66;
  char v38 = v51;
  v51[4] = v65;
  v38[5] = v37;
  long long v39 = v68;
  v38[6] = v67;
  v38[7] = v39;
  long long v40 = v62;
  *char v38 = v61;
  v38[1] = v40;
  long long v41 = v64;
  v38[2] = v63;
  v38[3] = v41;
  return result;
}

uint64_t sub_1003595F0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7463616669747261 && a2 == 0xEA00000000006449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1003596E8(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072CA58);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_100402A64();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[14] = 0;
    sub_1000B56F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v9[15];
    v9[13] = 1;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return v7;
}

uint64_t sub_1003598A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465696669726576 && a2 == 0xEF64496D69616C43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010064A510 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7463616669747261 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x64657461657263 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100359B48@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072C6A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10040164C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  LOBYTE(v43) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  LOBYTE(v43) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v40 = v12;
  uint64_t v41 = v9;
  char v47 = 2;
  sub_1004016A0();
  swift_bridgeObjectRetain();
  uint64_t v42 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v44;
  uint64_t v16 = v46;
  uint64_t v35 = v45;
  uint64_t v36 = v43;
  uint64_t v38 = sub_100007764(&qword_10072C6B8);
  char v47 = 3;
  sub_10033E3A4(&qword_10072C6C0, &qword_10072C6B8, (void (*)(void))sub_1004016F4);
  uint64_t v39 = v15;
  swift_bridgeObjectRetain();
  uint64_t v37 = v16;
  swift_bridgeObjectRetain();
  uint64_t v38 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = v43;
  LOBYTE(v43) = 4;
  swift_bridgeObjectRetain();
  uint64_t v33 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v34 = v17;
  LOBYTE(v43) = 5;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v38 = v20;
  uint64_t v22 = v8;
  uint64_t v24 = v23;
  v21(v22, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v37;
  swift_bridgeObjectRetain();
  uint64_t v26 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  uint64_t v28 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = v42;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v41;
  a2[1] = v11;
  a2[2] = v40;
  a2[3] = v29;
  a2[4] = v36;
  a2[5] = v27;
  a2[6] = v35;
  a2[7] = v25;
  uint64_t v31 = v33;
  a2[8] = v26;
  a2[9] = v31;
  uint64_t v32 = v38;
  a2[10] = v19;
  a2[11] = v32;
  a2[12] = v28;
  return result;
}

uint64_t sub_10035A100(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7475626972747461 && a2 == 0xEB00000000644965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365756C6176 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1953259891 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10035A258@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072B390);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035F888();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v25 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v21 = a2;
  sub_100007764(&qword_1007268F0);
  char v24 = 1;
  sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v23 = 2;
  uint64_t v20 = v22;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v15 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v16 = v20;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v18 = v21;
  *uint64_t v21 = v9;
  v18[1] = v11;
  void v18[2] = v16;
  v18[3] = v15;
  void v18[4] = v14;
  return result;
}

uint64_t sub_10035A53C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7475626972747461 && a2 == 0xEB00000000644965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365756C6176 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656372756F736572 && a2 == 0xEA00000000006449)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10035A6B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072B3D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035F9D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v25 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v21 = a2;
  sub_100007764(&qword_1007268F0);
  char v24 = 1;
  sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v23 = 2;
  uint64_t v20 = v22;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v15 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v16 = v20;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v18 = v21;
  *uint64_t v21 = v9;
  v18[1] = v11;
  void v18[2] = v16;
  v18[3] = v15;
  void v18[4] = v14;
  return result;
}

uint64_t sub_10035A994(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000010064A550
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4464656D69616C63 && a2 == 0xEB00000000617461)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10035AA9C(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072C838);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_10000C728(a1, v7);
  sub_100401F2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100007764(&qword_1007264A0);
    HIBYTE(v9) = 0;
    sub_1001D5D7C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v7 = v10;
    sub_100007764(&qword_10072C848);
    HIBYTE(v9) = 1;
    sub_10033E3A4(&qword_10072C850, &qword_10072C848, (void (*)(void))sub_100401F80);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_10035ACFC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7475626972747461 && a2 == 0xEB00000000644965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010064A760)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10035AE04(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A820)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10035AEF4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100649F80)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10035AFE4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D737365737361 && a2 == 0xEF646975675F746ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10035B0FC(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = sub_100007764(a2);
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  sub_10000C728(a1, v9);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = v13;
    char v15 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v14 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v6);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  return v9;
}

uint64_t sub_10035B2F0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000010064A550
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x800000010064A570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x800000010064A5A0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10035B434@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072C790);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100401BEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  sub_100007764(&qword_1007264A0);
  char v31 = 0;
  sub_1001D5D7C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v27;
  char v31 = 1;
  sub_100401C40();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v10 = v27;
  LOBYTE(v27) = 2;
  uint64_t v25 = v28;
  uint64_t v26 = v10;
  uint64_t v23 = v30;
  uint64_t v24 = v29;
  sub_100276BF4(v10, v28);
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v13 = v12;
  char v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v22 = v11;
  v14(v8, v5);
  swift_bridgeObjectRetain();
  uint64_t v16 = v25;
  uint64_t v15 = v26;
  uint64_t v18 = v23;
  uint64_t v17 = v24;
  sub_100276BF4(v26, v25);
  swift_bridgeObjectRetain();
  sub_1001D5FEC(v15, v16);
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  sub_1001D5FEC(v15, v16);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v17;
  uint64_t v20 = v22;
  a2[4] = v18;
  a2[5] = v20;
  a2[6] = v13;
  return result;
}

uint64_t sub_10035B76C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001ALL && a2 == 0x800000010064A800
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000010064A530)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10035B85C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000010064A0C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617461645F617564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7364656573 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xEB0000000064695FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5F656C69666F7270 && a2 == 0xEA00000000006469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100649FA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x8000000100649FC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000033 && a2 == 0x8000000100649FF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x5F64616F6C796170 && a2 == 0xEE006572756E6574)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_10035BC84(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F7272655F766469 && a2 == 0xE900000000000072;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F7272655F6E646FLL && a2 == 0xE900000000000072 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xEB0000000064695FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D6F6365725F7369 && a2 == 0xED00006465747570)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10035BEF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072B190);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035C1C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v31 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v30 = 1;
  uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v12 = v11;
  uint64_t v26 = v10;
  char v29 = 2;
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v24 = v13;
  char v28 = 3;
  swift_bridgeObjectRetain();
  uint64_t v25 = v15;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v23 = v16;
  char v27 = 4;
  swift_bridgeObjectRetain();
  LOBYTE(v15) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  uint64_t v17 = v23;
  swift_bridgeObjectRelease();
  uint64_t v18 = v25;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v20 = v26;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v20;
  *(unsigned char *)(a2 + 16) = v12 & 1;
  *(void *)(a2 + 24) = v24;
  *(void *)(a2 + 32) = v18;
  *(void *)(a2 + 40) = v22;
  *(void *)(a2 + 48) = v17;
  *(unsigned char *)(a2 + 56) = v15;
  return result;
}

unint64_t sub_10035C1C8()
{
  unint64_t result = qword_10072B198;
  if (!qword_10072B198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B198);
  }
  return result;
}

unint64_t sub_10035C21C()
{
  unint64_t result = qword_10072B1B0;
  if (!qword_10072B1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B1B0);
  }
  return result;
}

unint64_t sub_10035C270()
{
  unint64_t result = qword_10072B1C8;
  if (!qword_10072B1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B1C8);
  }
  return result;
}

uint64_t sub_10035C2C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10035C32C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10035C38C()
{
  unint64_t result = qword_10072B1E0;
  if (!qword_10072B1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B1E0);
  }
  return result;
}

unint64_t sub_10035C3E0()
{
  unint64_t result = qword_10072B1E8;
  if (!qword_10072B1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B1E8);
  }
  return result;
}

unint64_t sub_10035C434()
{
  unint64_t result = qword_10072B1F0;
  if (!qword_10072B1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B1F0);
  }
  return result;
}

unint64_t sub_10035C488()
{
  unint64_t result = qword_10072B200;
  if (!qword_10072B200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B200);
  }
  return result;
}

unint64_t sub_10035C4DC()
{
  unint64_t result = qword_10072B208;
  if (!qword_10072B208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B208);
  }
  return result;
}

unint64_t sub_10035C530()
{
  unint64_t result = qword_10072B218;
  if (!qword_10072B218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B218);
  }
  return result;
}

unint64_t sub_10035C584()
{
  unint64_t result = qword_10072B230;
  if (!qword_10072B230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B230);
  }
  return result;
}

unint64_t sub_10035C5D8()
{
  unint64_t result = qword_10072B248;
  if (!qword_10072B248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B248);
  }
  return result;
}

unint64_t sub_10035C62C()
{
  unint64_t result = qword_10072B258;
  if (!qword_10072B258)
  {
    sub_100019364(&qword_10072B250);
    sub_10035C6A8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B258);
  }
  return result;
}

unint64_t sub_10035C6A8()
{
  unint64_t result = qword_10072B260;
  if (!qword_10072B260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B260);
  }
  return result;
}

unint64_t sub_10035C6FC()
{
  unint64_t result = qword_10072B268;
  if (!qword_10072B268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B268);
  }
  return result;
}

unint64_t sub_10035C750()
{
  unint64_t result = qword_10072B278;
  if (!qword_10072B278)
  {
    sub_100019364(&qword_10072B250);
    sub_10035C7CC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B278);
  }
  return result;
}

unint64_t sub_10035C7CC()
{
  unint64_t result = qword_10072B280;
  if (!qword_10072B280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B280);
  }
  return result;
}

unint64_t sub_10035C820()
{
  unint64_t result = qword_10072B290;
  if (!qword_10072B290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B290);
  }
  return result;
}

uint64_t sub_10035C874(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684632436 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5F6E6F6973736573 && a2 == 0xEA00000000006469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65636E6F6E5F7374 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10035C9C8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072CEC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1003FF134();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v24 = v9;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v22 = v12;
  char v25 = 2;
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v23;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  return result;
}

uint64_t sub_10035CC60(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64616F6C796170 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x695F747365676964 && a2 == 0xEC0000007865646ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10035CD6C(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_10072C350);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10000C728(a1, a1[3]);
  sub_1003FCABC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_10035CF58(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x617461645F617564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7079745F6B736174 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100649FA0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

double sub_10035D11C(void *a1)
{
  uint64_t v4 = sub_100007764(&qword_10072C580);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1003FF188();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    v10[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v10[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    double v2 = v9;
    v10[12] = 2;
    sub_1003FF4D0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10[11] = 3;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_10035D384(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F635F64697374 && a2 == 0xEE0072656E696174;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7364656573 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x776F6C666B726F77 && a2 == 0xEB0000000064695FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x617461645F617564 && a2 == 0xEC0000006775615FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100649FA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x800000010064A030 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000030 && a2 == 0x800000010064A060 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6B63616264656566 && a2 == 0xEF676E696D69745FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010064A0A0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_10035D840(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64616F6C796170 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10035D940(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = sub_100007764(a2);
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  sub_10000C728(a1, v9);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = v13;
    char v15 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v14 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v6);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_10035DB58(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756E5F656E6F6870 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x61636F6C5F737067 && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1684628851 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10035DD24@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_10072B298);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035E098();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v32 = 0;
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v11 = v10;
    uint64_t v27 = v9;
    char v31 = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v25 = v12;
    char v26 = a2;
    sub_100007764(&qword_10072B2A8);
    char v30 = 2;
    sub_1000AB18C(&qword_10072B2B0, &qword_10072B2A8);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v15 = v28;
    char v29 = 3;
    swift_bridgeObjectRetain();
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v18 = v17;
    uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v24 = v16;
    v19(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    *char v26 = v27;
    v21[1] = v11;
    v21[2] = v25;
    _OWORD v21[3] = v14;
    uint64_t v22 = v24;
    v21[4] = v15;
    v21[5] = v22;
    v21[6] = v18;
  }
  return result;
}

unint64_t sub_10035E098()
{
  unint64_t result = qword_10072B2A0;
  if (!qword_10072B2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B2A0);
  }
  return result;
}

unint64_t sub_10035E0EC()
{
  unint64_t result = qword_10072B2D8;
  if (!qword_10072B2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B2D8);
  }
  return result;
}

uint64_t sub_10035E140(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000010064A120
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C69666F7270 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x49656C69666F7270 && a2 == 0xEB000000006F666ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x49656C69666F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

unint64_t sub_10035E378(Swift::String string, Swift::OpaquePointer cases)
{
  uint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._uint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 5) {
    return 5;
  }
  else {
    return v5;
  }
}

unint64_t sub_10035E3C0(Swift::String string, Swift::OpaquePointer cases)
{
  uint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._uint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

unint64_t sub_10035E408(Swift::String string)
{
  uint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._uint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F35F8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return 11;
  }
  else {
    return v3;
  }
}

uint64_t sub_10035E454@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v6 = sub_100007764(&qword_10072B2F8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10035EE68();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  sub_100007764(&qword_10072B308);
  char v83 = 0;
  sub_10033E3A4(&qword_10072B310, &qword_10072B308, (void (*)(void))sub_10035EEBC);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = (uint64_t)v74;
  sub_100007764(&qword_10072B320);
  char v83 = 1;
  sub_10035EF10();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v70 = a2;
  uint64_t v12 = v6;
  uint64_t v13 = v74;
  sub_100007764(&qword_1007268F0);
  char v83 = 2;
  sub_1000AB18C((unint64_t *)&qword_1007222C8, &qword_1007268F0);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v71 = 0;
  uint64_t v68 = v7;
  uint64_t v69 = v12;
  uint64_t v14 = v74;
  if (v74)
  {
LABEL_34:
    char v83 = 3;
    sub_10035F054();
    uint64_t v31 = v69;
    char v32 = v71;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    unint64_t v3 = v32;
    if (v32)
    {
      (*(void (**)(char *, uint64_t))(v68 + 8))(v9, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    }
    else
    {
      uint64_t v33 = (uint64_t)v74;
      uint64_t v34 = v78;
      LOBYTE(v74) = 4;
      uint64_t v72 = v79;
      uint64_t v73 = v33;
      uint64_t v64 = v75;
      uint64_t v65 = v76;
      uint64_t v66 = v77;
      uint64_t v67 = v80;
      uint64_t v71 = v81;
      sub_1002090C4(v33, v75);
      uint64_t v61 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v62 = v34;
      LOBYTE(v74) = 5;
      uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      if (v36) {
        uint64_t v37 = 3;
      }
      else {
        uint64_t v37 = v35;
      }
      char v83 = 6;
      sub_10035F0A8();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v60 = v37;
      if (v74 == 3) {
        LODWORD(v18) = 0;
      }
      else {
        LODWORD(v18) = v74;
      }
      LOBYTE(v74) = 7;
      int v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      int v59 = v82 == 2;
      LOBYTE(v74) = 8;
      LOBYTE(result) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
LABEL_45:
      int v58 = v18;
      unsigned __int8 v39 = result;
      BOOL v57 = result == 2;
      char v83 = 9;
      sub_10035F0FC();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      if (!v3)
      {
        char v40 = (char)v74;
        char v83 = 10;
        sub_10035F150();
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        uint64_t v41 = (void (**)(char *, uint64_t))(v68 + 8);
        LODWORD(v68) = (v59 | v82) & 1;
        int v82 = (v57 | v39) & 1;
        int v59 = v40 & 1;
        (*v41)(v9, v69);
        int v42 = v74;
        if (v74 == 3) {
          int v42 = 0;
        }
        LODWORD(v69) = v42;
        uint64_t v43 = v73;
        uint64_t v45 = v64;
        uint64_t v44 = v65;
        uint64_t v46 = v67;
        sub_1002090C4(v73, v64);
        uint64_t v63 = v11;
        swift_bridgeObjectRetain();
        uint64_t v56 = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v47 = v62;
        sub_1001D8D24(v43, v45);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
        uint64_t v48 = v71;
        sub_1001D8D24(v73, v45);
        uint64_t v49 = v56;
        swift_bridgeObjectRelease();
        uint64_t v50 = v13;
        swift_bridgeObjectRelease();
        uint64_t v51 = v63;
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v52 = v70;
        *uint64_t v70 = v73;
        v52[1] = v45;
        uint64_t v53 = v66;
        v52[2] = v44;
        uint64_t v52[3] = v53;
        uint64_t v54 = v72;
        v52[4] = v47;
        v52[5] = v54;
        v52[6] = v46;
        v52[7] = v48;
        v52[8] = v51;
        v52[9] = v50;
        uint64_t v55 = v61;
        v52[10] = v49;
        v52[11] = v55;
        v52[12] = v60;
        *((unsigned char *)v52 + 104) = v58;
        *((unsigned char *)v52 + 105) = v68;
        *((unsigned char *)v52 + 106) = v82;
        *((unsigned char *)v52 + 107) = v59;
        *((unsigned char *)v52 + 108) = v69;
        return result;
      }
      (*(void (**)(char *, uint64_t))(v68 + 8))(v9, v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = v64;
      sub_1001D8D24(v73, v64);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
      sub_1001D8D24(v73, v38);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v63 = v11;
  uint64_t v15 = *((void *)v13 + 8);
  uint64_t v72 = v13 + 64;
  uint64_t v16 = 1 << v13[32];
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v73 = (unint64_t)(v16 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  uint64_t v11 = 0;
  uint64_t v14 = (char *)_swiftEmptyArrayStorage;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v19 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (unint64_t i = v19 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v11 << 6))
  {
    unint64_t v3 = v13;
    uint64_t v24 = (uint64_t *)(*((void *)v13 + 6) + 16 * i);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10010F3C4(0, *((void *)v14 + 2) + 1, 1, v14);
      uint64_t v14 = (char *)result;
    }
    unint64_t v28 = *((void *)v14 + 2);
    unint64_t v27 = *((void *)v14 + 3);
    char v29 = v14;
    if (v28 >= v27 >> 1)
    {
      uint64_t result = (uint64_t)sub_10010F3C4((char *)(v27 > 1), v28 + 1, 1, v14);
      char v29 = (char *)result;
    }
    *((void *)v29 + 2) = v28 + 1;
    uint64_t v14 = v29;
    char v30 = &v29[16 * v28];
    *((void *)v30 + 4) = v26;
    *((void *)v30 + 5) = v25;
    uint64_t v13 = v3;
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v21 >= v73) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)&v72[8 * v21];
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v73) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)&v72[8 * v11];
      if (!v22)
      {
        uint64_t v11 = v21 + 2;
        if (v21 + 2 >= v73) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)&v72[8 * v11];
        if (!v22)
        {
          uint64_t v11 = v21 + 3;
          if (v21 + 3 >= v73) {
            goto LABEL_33;
          }
          unint64_t v22 = *(void *)&v72[8 * v11];
          if (!v22)
          {
            uint64_t v11 = v21 + 4;
            if (v21 + 4 >= v73) {
              goto LABEL_33;
            }
            unint64_t v22 = *(void *)&v72[8 * v11];
            if (!v22) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v18 = (v22 - 1) & v22;
  }
  uint64_t v23 = v21 + 5;
  if (v23 >= v73)
  {
LABEL_33:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v11 = v63;
    goto LABEL_34;
  }
  unint64_t v22 = *(void *)&v72[8 * v23];
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_26;
  }
  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v73) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)&v72[8 * v11];
    ++v23;
    if (v22) {
      goto LABEL_26;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_10035EE68()
{
  unint64_t result = qword_10072B300;
  if (!qword_10072B300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B300);
  }
  return result;
}

unint64_t sub_10035EEBC()
{
  unint64_t result = qword_10072B318;
  if (!qword_10072B318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B318);
  }
  return result;
}

unint64_t sub_10035EF10()
{
  unint64_t result = qword_10072B328;
  if (!qword_10072B328)
  {
    sub_100019364(&qword_10072B320);
    sub_10033E3A4(&qword_10072B330, &qword_10072B338, (void (*)(void))sub_10035EFC4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B328);
  }
  return result;
}

uint64_t sub_10035EFC4()
{
  return sub_10033E3A4(&qword_10072B340, &qword_10072B348, (void (*)(void))sub_10035F000);
}

unint64_t sub_10035F000()
{
  unint64_t result = qword_10072B350;
  if (!qword_10072B350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B350);
  }
  return result;
}

unint64_t sub_10035F054()
{
  unint64_t result = qword_10072B358;
  if (!qword_10072B358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B358);
  }
  return result;
}

unint64_t sub_10035F0A8()
{
  unint64_t result = qword_10072B360;
  if (!qword_10072B360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B360);
  }
  return result;
}

unint64_t sub_10035F0FC()
{
  unint64_t result = qword_10072B368;
  if (!qword_10072B368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B368);
  }
  return result;
}

unint64_t sub_10035F150()
{
  unint64_t result = qword_10072B370;
  if (!qword_10072B370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B370);
  }
  return result;
}

uint64_t sub_10035F1A4()
{
  uint64_t v0 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v0);
  (*(void (**)(char *, void))(v2 + 104))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for DIPError.Code.unimplemented(_:));
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10033E308((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  return swift_willThrow();
}

uint64_t sub_10035F358(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 6582895 && a2 == 0xE300000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6583407 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6581359 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010064A140)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10035F4D0@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v32 = sub_100007764(a2);
  uint64_t v7 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = (uint64_t)a1;
  uint64_t v11 = v7;
  char v36 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  char v35 = 1;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v30 = v16;
  uint64_t v29 = v15;
  char v34 = 2;
  swift_bridgeObjectRetain();
  uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v28 = v17;
  char v33 = 3;
  swift_bridgeObjectRetain();
  uint64_t v18 = v32;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v21 = v20;
  uint64_t v22 = v19;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v18);
  swift_bridgeObjectRetain();
  uint64_t v23 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v10);
  swift_bridgeObjectRelease();
  uint64_t v24 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v26 = v31;
  *uint64_t v31 = v12;
  v26[1] = v14;
  v26[2] = v29;
  v26[3] = v23;
  v26[4] = v27;
  v26[5] = v24;
  v26[6] = v22;
  v26[7] = v21;
  return result;
}

unint64_t sub_10035F834()
{
  unint64_t result = qword_10072B380;
  if (!qword_10072B380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B380);
  }
  return result;
}

unint64_t sub_10035F888()
{
  unint64_t result = qword_10072B398;
  if (!qword_10072B398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B398);
  }
  return result;
}

unint64_t sub_10035F8DC()
{
  unint64_t result = qword_10072B3B0;
  if (!qword_10072B3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B3B0);
  }
  return result;
}

unint64_t sub_10035F930()
{
  unint64_t result = qword_10072B3C0;
  if (!qword_10072B3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B3C0);
  }
  return result;
}

unint64_t sub_10035F984()
{
  unint64_t result = qword_10072B3C8;
  if (!qword_10072B3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B3C8);
  }
  return result;
}

unint64_t sub_10035F9D8()
{
  unint64_t result = qword_10072B3D8;
  if (!qword_10072B3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B3D8);
  }
  return result;
}

uint64_t type metadata accessor for PendingActionContext(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072BD10);
}

unint64_t sub_10035FA4C()
{
  unint64_t result = qword_10072B410;
  if (!qword_10072B410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B410);
  }
  return result;
}

unint64_t sub_10035FAA0()
{
  unint64_t result = qword_10072B428;
  if (!qword_10072B428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B428);
  }
  return result;
}

ValueMetadata *type metadata accessor for OLDRequest()
{
  return &type metadata for OLDRequest;
}

uint64_t destroy for IdentityProofingStaticAsset()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *assignWithCopy for IdentityProofingStaticAsset(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityProofingStaticAsset(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityProofingStaticAsset(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingStaticAsset()
{
  return &type metadata for IdentityProofingStaticAsset;
}

uint64_t *sub_10035FC64(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for HardwareAttestationType();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v16 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v19)
    {
      *uint64_t v17 = *v18;
      v17[1] = v19;
      uint64_t v20 = v18[3];
      void v17[2] = v18[2];
      v17[3] = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v22 = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v22;
    }
    uint64_t v23 = a3[8];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = sub_100007764(&qword_1007265F8);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = sub_100007764(&qword_1007265F0);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t sub_10035FE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HardwareAttestationType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + *(int *)(a2 + 28) + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = sub_100007764(&qword_1007265F8);
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t sub_10035FFF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HardwareAttestationType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = *(void *)(a2 + v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18)
  {
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v17[3];
    v16[2] = v17[2];
    v16[3] = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *((_OWORD *)v17 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v20;
  }
  uint64_t v21 = a3[8];
  long long v22 = (void *)(a1 + v21);
  uint64_t v23 = (const void *)(a2 + v21);
  uint64_t v24 = sub_100007764(&qword_1007265F8);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = sub_100007764(&qword_1007265F0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t sub_1003601D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HardwareAttestationType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = *(void *)(a1 + v13 + 8);
  uint64_t v17 = *(void *)(a2 + v13 + 8);
  if (v16)
  {
    if (v17)
    {
      *uint64_t v14 = *v15;
      v14[1] = v15[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      void v14[2] = v15[2];
      void v14[3] = v15[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1003A9A30((uint64_t)v14);
      long long v18 = *((_OWORD *)v15 + 1);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v18;
    }
  }
  else if (v17)
  {
    *uint64_t v14 = *v15;
    v14[1] = v15[1];
    void v14[2] = v15[2];
    void v14[3] = v15[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v19 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v19;
  }
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  long long v22 = (void *)(a2 + v20);
  uint64_t v23 = sub_100007764(&qword_1007265F8);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_13;
  }
  if (v27)
  {
LABEL_13:
    uint64_t v28 = sub_100007764(&qword_1007265F0);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_1003604A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HardwareAttestationType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = (_OWORD *)(a1 + v8);
  uint64_t v11 = (_OWORD *)(a2 + v8);
  long long v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  uint64_t v14 = (const void *)(a2 + v9);
  uint64_t v15 = sub_100007764(&qword_1007265F8);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100007764(&qword_1007265F0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t sub_10036061C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HardwareAttestationType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  long long v18 = (void *)(a1 + v17);
  long long v19 = (void *)(a2 + v17);
  if (*(void *)(a1 + v17 + 8))
  {
    uint64_t v20 = v19[1];
    if (v20)
    {
      *long long v18 = *v19;
      v18[1] = v20;
      swift_bridgeObjectRelease();
      uint64_t v21 = v19[3];
      void v18[2] = v19[2];
      v18[3] = v21;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1003A9A30((uint64_t)v18);
  }
  long long v22 = *((_OWORD *)v19 + 1);
  *(_OWORD *)long long v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v22;
LABEL_6:
  uint64_t v23 = a3[8];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = sub_100007764(&qword_1007265F8);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v24, v25, v26);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_11;
  }
  if (v30)
  {
LABEL_11:
    uint64_t v31 = sub_100007764(&qword_1007265F0);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t sub_10036086C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100360880);
}

uint64_t sub_100360880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HardwareAttestationType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = sub_100007764(&qword_1007265F0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 32);
    return v13(v15, a2, v14);
  }
}

uint64_t sub_1003609C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003609D4);
}

uint64_t sub_1003609D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for HardwareAttestationType();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  else
  {
    uint64_t v11 = sub_100007764(&qword_1007265F0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for SharingRegistrationInfo(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072B490);
}

void sub_100360B28()
{
  type metadata accessor for HardwareAttestationType();
  if (v0 <= 0x3F)
  {
    sub_1003F09D4(319, (unint64_t *)&unk_10072B4A0, &qword_1007265F8);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_100360C14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_100007764(&qword_1007267E0);
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      uint64_t v11 = sub_100007764(&qword_10072B4E0);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return a1;
}

uint64_t sub_100360D78(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_100007764(&qword_1007267E0);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void *sub_100360E4C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100007764(&qword_1007267E0);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_100007764(&qword_10072B4E0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *sub_100360F68(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100007764(&qword_1007267E0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100007764(&qword_10072B4E0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

void *sub_1003610FC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_100007764(&qword_1007267E0);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_100007764(&qword_10072B4E0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *sub_100361214(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100007764(&qword_1007267E0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100007764(&qword_10072B4E0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_1003613A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003613B4);
}

uint64_t sub_1003613B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100007764(&qword_10072B4E0);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    int v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_100361474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100361488);
}

void *sub_100361488(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_10072B4E0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for InputValidationRequestV3(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072B540);
}

void sub_100361554()
{
  sub_1003F09D4(319, (unint64_t *)&unk_10072B550, &qword_1007267E0);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for InputValidationResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InputValidationResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InputValidationResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for InputValidationResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InputValidationResponse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InputValidationResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InputValidationResponse()
{
  return &type metadata for InputValidationResponse;
}

uint64_t *sub_100361880(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100007764(&qword_10072B580);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v15 = *(int *)(a3 + 28);
    uint64_t v16 = (uint64_t *)((char *)v7 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_100361A38(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *sub_100361B14(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 24);
  __dst = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100007764(&qword_10072B580);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100361C80(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100007764(&qword_10072B580);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100361E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100007764(&qword_10072B580);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

void *sub_100361F9C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for EncryptionParamsAlgorithmIdentifier();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100007764(&qword_10072B580);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100362158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10036216C);
}

uint64_t sub_10036216C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100007764(&qword_10072B580);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    int v12 = (char *)a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_10036222C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100362240);
}

void *sub_100362240(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_10072B580);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for InputValidationRequestV1(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072B5E0);
}

void sub_10036230C()
{
  sub_1003623C8(319, (unint64_t *)&unk_10072B5F0, (void (*)(uint64_t))&type metadata accessor for EncryptionParamsAlgorithmIdentifier);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1003623C8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for AppleIdAttributeProof()
{
  return &type metadata for AppleIdAttributeProof;
}

ValueMetadata *type metadata accessor for DataNodeProof()
{
  return &type metadata for DataNodeProof;
}

void *_s8coreidvd27IdentityProofingStaticAssetVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IdVData(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s8coreidvd27IdentityProofingStaticAssetVwta_0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for IdVData()
{
  return &type metadata for IdVData;
}

uint64_t *sub_10036252C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = sub_100007764(&qword_100726548);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100007764(&qword_100726698);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(v6 + 20);
    int v12 = (uint64_t *)((char *)a1 + v11);
    int v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = type metadata accessor for TiberiusWrappedAssessment(0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = sub_100007764(&qword_100728510);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v54 = v6;
      uint64_t v55 = v15;
      uint64_t v17 = v13[1];
      *int v12 = *v13;
      v12[1] = v17;
      uint64_t v18 = v13[3];
      swift_bridgeObjectRetain();
      if (v18)
      {
        void v12[2] = v13[2];
        v12[3] = v18;
        uint64_t v19 = v13[5];
        v12[4] = v13[4];
        v12[5] = v19;
        uint64_t v20 = v13[7];
        v12[6] = v13[6];
        v12[7] = v20;
        uint64_t v21 = v13[9];
        unsigned char v12[8] = v13[8];
        v12[9] = v21;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v22 = *((_OWORD *)v13 + 2);
        *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
        *((_OWORD *)v12 + 2) = v22;
        long long v23 = *((_OWORD *)v13 + 4);
        *((_OWORD *)v12 + 3) = *((_OWORD *)v13 + 3);
        *((_OWORD *)v12 + 4) = v23;
      }
      uint64_t v24 = v13[14];
      if (v24 == 1)
      {
        long long v25 = *((_OWORD *)v13 + 6);
        *((_OWORD *)v12 + 5) = *((_OWORD *)v13 + 5);
        *((_OWORD *)v12 + 6) = v25;
        *((_OWORD *)v12 + 7) = *((_OWORD *)v13 + 7);
        *(_OWORD *)((char *)v12 + 121) = *(_OWORD *)((char *)v13 + 121);
      }
      else
      {
        uint64_t v26 = v13[11];
        v12[10] = v13[10];
        v12[11] = v26;
        *((unsigned char *)v12 + 96) = *((unsigned char *)v13 + 96);
        v12[13] = v13[13];
        v12[14] = v24;
        uint64_t v27 = v13[16];
        v12[15] = v13[15];
        v12[16] = v27;
        *((unsigned char *)v12 + 136) = *((unsigned char *)v13 + 136);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v28 = v13[19];
      v12[18] = v13[18];
      v12[19] = v28;
      uint64_t v56 = v14;
      uint64_t v29 = *(int *)(v14 + 32);
      int v30 = (void *)((char *)v12 + v29);
      uint64_t v31 = (void *)((char *)v13 + v29);
      uint64_t v32 = type metadata accessor for AssessmentAdditionalInfo(0);
      uint64_t v33 = *(void *)(v32 - 8);
      char v34 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48);
      char v35 = v31;
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        uint64_t v36 = sub_100007764(&qword_1007266B8);
        memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64));
        uint64_t v6 = v54;
        uint64_t v37 = v55;
      }
      else
      {
        uint64_t v38 = v31[1];
        *int v30 = *v31;
        v30[1] = v38;
        *((unsigned char *)v30 + 16) = *((unsigned char *)v31 + 16);
        v30[3] = v31[3];
        *((unsigned char *)v30 + 32) = *((unsigned char *)v31 + 32);
        uint64_t v39 = *(int *)(v32 + 28);
        char v40 = (char *)v30 + v39;
        uint64_t v53 = v35;
        uint64_t v41 = (char *)v35 + v39;
        swift_bridgeObjectRetain();
        uint64_t v42 = sub_100007764(&qword_100728600);
        uint64_t v43 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
        {
          uint64_t v44 = sub_100007764(&qword_10072A6E8);
          memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
        }
        uint64_t v6 = v54;
        uint64_t v37 = v55;
        uint64_t v45 = *(int *)(v32 + 32);
        uint64_t v46 = (char *)v30 + v45;
        uint64_t v47 = (uint64_t)v53 + v45;
        *(void *)uint64_t v46 = *(void *)v47;
        v46[8] = *(unsigned char *)(v47 + 8);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v12, 0, 1, v56);
    }
    uint64_t v48 = *(int *)(v6 + 24);
    uint64_t v49 = (uint64_t *)((char *)a1 + v48);
    uint64_t v50 = (uint64_t *)((char *)a2 + v48);
    uint64_t v51 = v50[1];
    *uint64_t v49 = *v50;
    v49[1] = v51;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t type metadata accessor for TiberiusWrappedAssessment(uint64_t a1)
{
  return sub_100048DF0(a1, qword_10072BE10);
}

uint64_t sub_100362A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100726548);
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for TiberiusWrappedAssessment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    if (*(void *)(v6 + 24))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v6 + 112) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = v6 + *(int *)(v7 + 32);
    uint64_t v9 = type metadata accessor for AssessmentAdditionalInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = v8 + *(int *)(v9 + 28);
      uint64_t v11 = sub_100007764(&qword_100728600);
      uint64_t v12 = *(void *)(v11 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      }
    }
  }

  return swift_bridgeObjectRelease();
}

char *sub_100362CD4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764(&qword_100726548);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007764(&qword_100726698);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for TiberiusWrappedAssessment(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_100007764(&qword_100728510);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v50 = v13;
    uint64_t v15 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v15;
    uint64_t v16 = *((void *)v11 + 3);
    swift_bridgeObjectRetain();
    if (v16)
    {
      *((void *)v10 + 2) = *((void *)v11 + 2);
      *((void *)v10 + 3) = v16;
      uint64_t v17 = *((void *)v11 + 5);
      *((void *)v10 + 4) = *((void *)v11 + 4);
      *((void *)v10 + 5) = v17;
      uint64_t v18 = *((void *)v11 + 7);
      *((void *)v10 + 6) = *((void *)v11 + 6);
      *((void *)v10 + 7) = v18;
      uint64_t v19 = *((void *)v11 + 9);
      *((void *)v10 + 8) = *((void *)v11 + 8);
      *((void *)v10 + 9) = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v20 = *((_OWORD *)v11 + 2);
      *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
      *((_OWORD *)v10 + 2) = v20;
      long long v21 = *((_OWORD *)v11 + 4);
      *((_OWORD *)v10 + 3) = *((_OWORD *)v11 + 3);
      *((_OWORD *)v10 + 4) = v21;
    }
    uint64_t v22 = *((void *)v11 + 14);
    uint64_t v51 = a3;
    if (v22 == 1)
    {
      long long v23 = *((_OWORD *)v11 + 6);
      *((_OWORD *)v10 + 5) = *((_OWORD *)v11 + 5);
      *((_OWORD *)v10 + 6) = v23;
      *((_OWORD *)v10 + 7) = *((_OWORD *)v11 + 7);
      *(_OWORD *)(v10 + 121) = *(_OWORD *)(v11 + 121);
    }
    else
    {
      uint64_t v24 = *((void *)v11 + 11);
      *((void *)v10 + 10) = *((void *)v11 + 10);
      *((void *)v10 + 11) = v24;
      v10[96] = v11[96];
      *((void *)v10 + 13) = *((void *)v11 + 13);
      *((void *)v10 + 14) = v22;
      uint64_t v25 = *((void *)v11 + 16);
      *((void *)v10 + 15) = *((void *)v11 + 15);
      *((void *)v10 + 16) = v25;
      v10[136] = v11[136];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v26 = *((void *)v11 + 19);
    *((void *)v10 + 18) = *((void *)v11 + 18);
    *((void *)v10 + 19) = v26;
    uint64_t v49 = v12;
    uint64_t v27 = *(int *)(v12 + 32);
    uint64_t v28 = &v10[v27];
    uint64_t v29 = &v11[v27];
    uint64_t v30 = type metadata accessor for AssessmentAdditionalInfo(0);
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      uint64_t v33 = sub_100007764(&qword_1007266B8);
      memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      uint64_t v34 = *((void *)v29 + 1);
      *(void *)uint64_t v28 = *(void *)v29;
      *((void *)v28 + 1) = v34;
      v28[16] = v29[16];
      *((void *)v28 + 3) = *((void *)v29 + 3);
      v28[32] = v29[32];
      uint64_t v35 = *(int *)(v30 + 28);
      __dst = &v28[v35];
      uint64_t v36 = &v29[v35];
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_100007764(&qword_100728600);
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        uint64_t v39 = sub_100007764(&qword_10072A6E8);
        memcpy(__dst, v36, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
      }
      a3 = v51;
      uint64_t v40 = *(int *)(v30 + 32);
      uint64_t v41 = &v28[v40];
      uint64_t v42 = &v29[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v10, 0, 1, v49);
  }
  uint64_t v43 = *(int *)(a3 + 24);
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_1003631CC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764(&qword_100726548);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100007764(&qword_100726698);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (uint64_t)&a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for TiberiusWrappedAssessment(0);
  uint64_t v16 = *(void **)(v15 - 8);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16[6];
  int v18 = v17(v13, 1, v15);
  int v19 = v17((uint64_t)v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = *((void *)v14 + 1);
      uint64_t v20 = *((void *)v14 + 3);
      swift_bridgeObjectRetain();
      uint64_t v110 = a3;
      if (v20)
      {
        *(void *)(v13 + 16) = *((void *)v14 + 2);
        *(void *)(v13 + 24) = *((void *)v14 + 3);
        *(void *)(v13 + 32) = *((void *)v14 + 4);
        *(void *)(v13 + 40) = *((void *)v14 + 5);
        *(void *)(v13 + 48) = *((void *)v14 + 6);
        *(void *)(v13 + 56) = *((void *)v14 + 7);
        *(void *)(v13 + 64) = *((void *)v14 + 8);
        *(void *)(v13 + 72) = *((void *)v14 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v27 = *((_OWORD *)v14 + 1);
        long long v28 = *((_OWORD *)v14 + 2);
        long long v29 = *((_OWORD *)v14 + 4);
        *(_OWORD *)(v13 + 48) = *((_OWORD *)v14 + 3);
        *(_OWORD *)(v13 + 64) = v29;
        *(_OWORD *)(v13 + 16) = v27;
        *(_OWORD *)(v13 + 32) = v28;
      }
      __src = (void (**)(uint64_t, void, uint64_t, uint64_t))v16;
      uint64_t v108 = a2;
      if (*((void *)v14 + 14) == 1)
      {
        long long v30 = *((_OWORD *)v14 + 5);
        long long v31 = *((_OWORD *)v14 + 6);
        long long v32 = *((_OWORD *)v14 + 7);
        *(_OWORD *)(v13 + 121) = *(_OWORD *)(v14 + 121);
        *(_OWORD *)(v13 + 96) = v31;
        *(_OWORD *)(v13 + 112) = v32;
        *(_OWORD *)(v13 + 80) = v30;
      }
      else
      {
        *(void *)(v13 + 80) = *((void *)v14 + 10);
        uint64_t v33 = *((void *)v14 + 11);
        *(unsigned char *)(v13 + 96) = v14[96];
        *(void *)(v13 + 88) = v33;
        *(void *)(v13 + 104) = *((void *)v14 + 13);
        *(void *)(v13 + 112) = *((void *)v14 + 14);
        *(void *)(v13 + 120) = *((void *)v14 + 15);
        *(void *)(v13 + 128) = *((void *)v14 + 16);
        *(unsigned char *)(v13 + 136) = v14[136];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      *(void *)(v13 + 144) = *((void *)v14 + 18);
      *(void *)(v13 + 152) = *((void *)v14 + 19);
      uint64_t v34 = *(int *)(v15 + 32);
      uint64_t v35 = (void *)(v13 + v34);
      uint64_t v36 = &v14[v34];
      uint64_t v37 = type metadata accessor for AssessmentAdditionalInfo(0);
      uint64_t v38 = *(void *)(v37 - 8);
      uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
      swift_bridgeObjectRetain();
      if (v39(v36, 1, v37))
      {
        uint64_t v40 = sub_100007764(&qword_1007266B8);
        memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64));
        a2 = v108;
      }
      else
      {
        *uint64_t v35 = *(void *)v36;
        v35[1] = *((void *)v36 + 1);
        *((unsigned char *)v35 + 16) = v36[16];
        uint64_t v41 = *((void *)v36 + 3);
        *((unsigned char *)v35 + 32) = v36[32];
        v35[3] = v41;
        uint64_t v42 = *(int *)(v37 + 28);
        __dst = (char *)v35 + v42;
        uint64_t v43 = &v36[v42];
        swift_bridgeObjectRetain();
        uint64_t v44 = sub_100007764(&qword_100728600);
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          uint64_t v46 = sub_100007764(&qword_10072A6E8);
          memcpy(__dst, v43, *(void *)(*(void *)(v46 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v45 + 16))(__dst, v43, v44);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(__dst, 0, 1, v44);
        }
        a2 = v108;
        a3 = v110;
        uint64_t v50 = *(int *)(v37 + 32);
        uint64_t v51 = (char *)v35 + v50;
        uint64_t v52 = &v36[v50];
        uint64_t v53 = *(void *)v52;
        v51[8] = v52[8];
        *(void *)uint64_t v51 = v53;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
      __src[7](v13, 0, 1, v15);
      goto LABEL_33;
    }
    goto LABEL_13;
  }
  if (v19)
  {
    sub_10035C32C(v13, type metadata accessor for TiberiusWrappedAssessment);
LABEL_13:
    size_t v21 = *(void *)(*(void *)(sub_100007764(&qword_100728510) - 8) + 64);
    uint64_t v22 = (void *)v13;
    long long v23 = v14;
LABEL_14:
    memcpy(v22, v23, v21);
    goto LABEL_33;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = (_OWORD *)(v13 + 16);
  uint64_t v25 = (long long *)(v14 + 16);
  uint64_t v26 = *((void *)v14 + 3);
  if (*(void *)(v13 + 24))
  {
    if (v26)
    {
      *(void *)(v13 + 16) = *((void *)v14 + 2);
      *(void *)(v13 + 24) = *((void *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 32) = *((void *)v14 + 4);
      *(void *)(v13 + 40) = *((void *)v14 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 48) = *((void *)v14 + 6);
      *(void *)(v13 + 56) = *((void *)v14 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 64) = *((void *)v14 + 8);
      *(void *)(v13 + 72) = *((void *)v14 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1002FD318(v13 + 16);
      long long v47 = *((_OWORD *)v14 + 4);
      long long v49 = *v25;
      long long v48 = *((_OWORD *)v14 + 2);
      *(_OWORD *)(v13 + 48) = *((_OWORD *)v14 + 3);
      *(_OWORD *)(v13 + 64) = v47;
      *uint64_t v24 = v49;
      *(_OWORD *)(v13 + 32) = v48;
    }
  }
  else if (v26)
  {
    *(void *)(v13 + 16) = *((void *)v14 + 2);
    *(void *)(v13 + 24) = *((void *)v14 + 3);
    *(void *)(v13 + 32) = *((void *)v14 + 4);
    *(void *)(v13 + 40) = *((void *)v14 + 5);
    *(void *)(v13 + 48) = *((void *)v14 + 6);
    *(void *)(v13 + 56) = *((void *)v14 + 7);
    *(void *)(v13 + 64) = *((void *)v14 + 8);
    *(void *)(v13 + 72) = *((void *)v14 + 9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v58 = *v25;
    long long v59 = *((_OWORD *)v14 + 2);
    long long v60 = *((_OWORD *)v14 + 4);
    *(_OWORD *)(v13 + 48) = *((_OWORD *)v14 + 3);
    *(_OWORD *)(v13 + 64) = v60;
    *uint64_t v24 = v58;
    *(_OWORD *)(v13 + 32) = v59;
  }
  uint64_t v61 = (_OWORD *)(v13 + 80);
  uint64_t v62 = (long long *)(v14 + 80);
  uint64_t v63 = *((void *)v14 + 14);
  if (*(void *)(v13 + 112) == 1)
  {
    if (v63 == 1)
    {
      long long v64 = *v62;
      long long v65 = *((_OWORD *)v14 + 6);
      long long v66 = *((_OWORD *)v14 + 7);
      *(_OWORD *)(v13 + 121) = *(_OWORD *)(v14 + 121);
      *(_OWORD *)(v13 + 96) = v65;
      *(_OWORD *)(v13 + 112) = v66;
      *uint64_t v61 = v64;
    }
    else
    {
      *(void *)(v13 + 80) = *((void *)v14 + 10);
      uint64_t v70 = *((void *)v14 + 11);
      *(unsigned char *)(v13 + 96) = v14[96];
      *(void *)(v13 + 88) = v70;
      *(void *)(v13 + 104) = *((void *)v14 + 13);
      *(void *)(v13 + 112) = *((void *)v14 + 14);
      *(void *)(v13 + 120) = *((void *)v14 + 15);
      *(void *)(v13 + 128) = *((void *)v14 + 16);
      *(unsigned char *)(v13 + 136) = v14[136];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v63 == 1)
  {
    sub_1002FD2C4(v13 + 80);
    long long v68 = *((_OWORD *)v14 + 6);
    long long v67 = *((_OWORD *)v14 + 7);
    long long v69 = *v62;
    *(_OWORD *)(v13 + 121) = *(_OWORD *)(v14 + 121);
    *(_OWORD *)(v13 + 96) = v68;
    *(_OWORD *)(v13 + 112) = v67;
    *uint64_t v61 = v69;
  }
  else
  {
    *(void *)(v13 + 80) = *((void *)v14 + 10);
    uint64_t v71 = *((void *)v14 + 11);
    *(unsigned char *)(v13 + 96) = v14[96];
    *(void *)(v13 + 88) = v71;
    *(void *)(v13 + 104) = *((void *)v14 + 13);
    *(void *)(v13 + 112) = *((void *)v14 + 14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v13 + 120) = *((void *)v14 + 15);
    *(void *)(v13 + 128) = *((void *)v14 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v13 + 136) = v14[136];
  }
  *(void *)(v13 + 144) = *((void *)v14 + 18);
  *(void *)(v13 + 152) = *((void *)v14 + 19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v72 = *(int *)(v15 + 32);
  uint64_t v73 = v13 + v72;
  uint64_t v74 = &v14[v72];
  uint64_t v75 = type metadata accessor for AssessmentAdditionalInfo(0);
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  int v78 = v77(v73, 1, v75);
  int v79 = v77((uint64_t)v74, 1, v75);
  if (!v78)
  {
    if (v79)
    {
      sub_10035C32C(v73, type metadata accessor for AssessmentAdditionalInfo);
      goto LABEL_48;
    }
    uint64_t v109 = a2;
    uint64_t v112 = a3;
    *(void *)uint64_t v73 = *(void *)v74;
    *(void *)(v73 + 8) = *((void *)v74 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v73 + 16) = v74[16];
    uint64_t v87 = *((void *)v74 + 3);
    *(unsigned char *)(v73 + 32) = v74[32];
    *(void *)(v73 + 24) = v87;
    uint64_t v88 = *(int *)(v75 + 28);
    long long v89 = (void *)(v73 + v88);
    long long v90 = &v74[v88];
    uint64_t v91 = sub_100007764(&qword_100728600);
    uint64_t v92 = *(void *)(v91 - 8);
    long long v93 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v92 + 48);
    __dsta = v89;
    LODWORD(v89) = v93(v89, 1, v91);
    int v94 = v93(v90, 1, v91);
    if (v89)
    {
      if (!v94)
      {
        (*(void (**)(void *, char *, uint64_t))(v92 + 16))(__dsta, v90, v91);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(__dsta, 0, 1, v91);
        goto LABEL_59;
      }
      size_t v95 = *(void *)(*(void *)(sub_100007764(&qword_10072A6E8) - 8) + 64);
      long long v96 = __dsta;
    }
    else
    {
      if (!v94)
      {
        (*(void (**)(void *, char *, uint64_t))(v92 + 24))(__dsta, v90, v91);
        goto LABEL_59;
      }
      (*(void (**)(void *, uint64_t))(v92 + 8))(__dsta, v91);
      size_t v95 = *(void *)(*(void *)(sub_100007764(&qword_10072A6E8) - 8) + 64);
      long long v96 = __dsta;
    }
    memcpy(v96, v90, v95);
LABEL_59:
    a2 = v109;
    a3 = v112;
    uint64_t v101 = *(int *)(v75 + 32);
    uint64_t v102 = v73 + v101;
    unint64_t v103 = &v74[v101];
    uint64_t v104 = *(void *)v103;
    *(unsigned char *)(v102 + 8) = v103[8];
    *(void *)uint64_t v102 = v104;
    goto LABEL_33;
  }
  if (v79)
  {
LABEL_48:
    size_t v21 = *(void *)(*(void *)(sub_100007764(&qword_1007266B8) - 8) + 64);
    uint64_t v22 = (void *)v73;
    long long v23 = v74;
    goto LABEL_14;
  }
  uint64_t v111 = a3;
  *(void *)uint64_t v73 = *(void *)v74;
  *(void *)(v73 + 8) = *((void *)v74 + 1);
  *(unsigned char *)(v73 + 16) = v74[16];
  uint64_t v80 = *((void *)v74 + 3);
  *(unsigned char *)(v73 + 32) = v74[32];
  *(void *)(v73 + 24) = v80;
  uint64_t v81 = *(int *)(v75 + 28);
  int v82 = (void *)(v73 + v81);
  char v83 = &v74[v81];
  swift_bridgeObjectRetain();
  uint64_t v84 = sub_100007764(&qword_100728600);
  uint64_t v85 = *(void *)(v84 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
  {
    uint64_t v86 = sub_100007764(&qword_10072A6E8);
    memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v85 + 16))(v82, v83, v84);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
  }
  a3 = v111;
  uint64_t v97 = *(int *)(v75 + 32);
  uint64_t v98 = v73 + v97;
  char v99 = &v74[v97];
  uint64_t v100 = *(void *)v99;
  *(unsigned char *)(v98 + 8) = v99[8];
  *(void *)uint64_t v98 = v100;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
LABEL_33:
  uint64_t v54 = *(int *)(a3 + 24);
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100363E30(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764(&qword_100726548);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100007764(&qword_100726698);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for TiberiusWrappedAssessment(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_100007764(&qword_100728510);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    long long v15 = *((_OWORD *)v11 + 1);
    *(_OWORD *)int v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v15;
    long long v16 = *((_OWORD *)v11 + 3);
    *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
    *((_OWORD *)v10 + 3) = v16;
    long long v17 = *((_OWORD *)v11 + 5);
    *((_OWORD *)v10 + 4) = *((_OWORD *)v11 + 4);
    *((_OWORD *)v10 + 5) = v17;
    long long v18 = *((_OWORD *)v11 + 7);
    *((_OWORD *)v10 + 6) = *((_OWORD *)v11 + 6);
    *((_OWORD *)v10 + 7) = v18;
    *(_OWORD *)(v10 + 121) = *(_OWORD *)(v11 + 121);
    *((_OWORD *)v10 + 9) = *((_OWORD *)v11 + 9);
    uint64_t v19 = *(int *)(v12 + 32);
    uint64_t v20 = &v10[v19];
    size_t v21 = &v11[v19];
    uint64_t v22 = type metadata accessor for AssessmentAdditionalInfo(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_100007764(&qword_1007266B8);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      uint64_t v36 = v23;
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      v20[16] = v21[16];
      *((void *)v20 + 3) = *((void *)v21 + 3);
      v20[32] = v21[32];
      uint64_t v25 = *(int *)(v22 + 28);
      uint64_t v38 = &v20[v25];
      uint64_t v26 = &v21[v25];
      uint64_t v27 = sub_100007764(&qword_100728600);
      uint64_t v35 = *(void *)(v27 - 8);
      uint64_t v37 = v26;
      long long v28 = v26;
      uint64_t v29 = v27;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v28, 1, v27))
      {
        uint64_t v30 = sub_100007764(&qword_10072A6E8);
        memcpy(v38, v37, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v35 + 32))(v38, v37, v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v38, 0, 1, v29);
      }
      uint64_t v31 = *(int *)(v22 + 32);
      long long v32 = &v20[v31];
      uint64_t v33 = &v21[v31];
      *(void *)long long v32 = *(void *)v33;
      v32[8] = v33[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v20, 0, 1, v22);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *sub_100364250(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764(&qword_100726548);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100007764(&qword_100726698);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (uint64_t)&a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for TiberiusWrappedAssessment(0);
  uint64_t v16 = *(void *)(v15 - 8);
  long long v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17((uint64_t)v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      sub_10035C32C(v13, type metadata accessor for TiberiusWrappedAssessment);
      goto LABEL_13;
    }
    uint64_t v33 = *((void *)v14 + 1);
    *(void *)uint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v33;
    swift_bridgeObjectRelease();
    if (*(void *)(v13 + 24))
    {
      uint64_t v34 = *((void *)v14 + 3);
      if (v34)
      {
        *(void *)(v13 + 16) = *((void *)v14 + 2);
        *(void *)(v13 + 24) = v34;
        swift_bridgeObjectRelease();
        uint64_t v35 = *((void *)v14 + 5);
        *(void *)(v13 + 32) = *((void *)v14 + 4);
        *(void *)(v13 + 40) = v35;
        swift_bridgeObjectRelease();
        uint64_t v36 = *((void *)v14 + 7);
        *(void *)(v13 + 48) = *((void *)v14 + 6);
        *(void *)(v13 + 56) = v36;
        swift_bridgeObjectRelease();
        uint64_t v37 = *((void *)v14 + 9);
        *(void *)(v13 + 64) = *((void *)v14 + 8);
        *(void *)(v13 + 72) = v37;
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
      sub_1002FD318(v13 + 16);
    }
    long long v44 = *((_OWORD *)v14 + 2);
    *(_OWORD *)(v13 + 16) = *((_OWORD *)v14 + 1);
    *(_OWORD *)(v13 + 32) = v44;
    long long v45 = *((_OWORD *)v14 + 4);
    *(_OWORD *)(v13 + 48) = *((_OWORD *)v14 + 3);
    *(_OWORD *)(v13 + 64) = v45;
LABEL_23:
    if (*(void *)(v13 + 112) != 1)
    {
      uint64_t v46 = *((void *)v14 + 14);
      if (v46 != 1)
      {
        uint64_t v48 = *((void *)v14 + 11);
        *(void *)(v13 + 80) = *((void *)v14 + 10);
        *(void *)(v13 + 88) = v48;
        *(unsigned char *)(v13 + 96) = v14[96];
        *(void *)(v13 + 104) = *((void *)v14 + 13);
        *(void *)(v13 + 112) = v46;
        swift_bridgeObjectRelease();
        uint64_t v49 = *((void *)v14 + 16);
        *(void *)(v13 + 120) = *((void *)v14 + 15);
        *(void *)(v13 + 128) = v49;
        swift_bridgeObjectRelease();
        *(unsigned char *)(v13 + 136) = v14[136];
LABEL_28:
        uint64_t v50 = *((void *)v14 + 19);
        *(void *)(v13 + 144) = *((void *)v14 + 18);
        *(void *)(v13 + 152) = v50;
        swift_bridgeObjectRelease();
        uint64_t v51 = *(int *)(v15 + 32);
        uint64_t v52 = v13 + v51;
        uint64_t v53 = &v14[v51];
        uint64_t v54 = type metadata accessor for AssessmentAdditionalInfo(0);
        uint64_t v55 = *(void *)(v54 - 8);
        uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
        int v57 = v56(v52, 1, v54);
        int v58 = v56((uint64_t)v53, 1, v54);
        if (v57)
        {
          if (!v58)
          {
            uint64_t v95 = a3;
            *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
            *(unsigned char *)(v52 + 16) = v53[16];
            *(void *)(v52 + 24) = *((void *)v53 + 3);
            *(unsigned char *)(v52 + 32) = v53[32];
            uint64_t v59 = *(int *)(v54 + 28);
            long long v60 = (void *)(v52 + v59);
            uint64_t v61 = &v53[v59];
            uint64_t v62 = sub_100007764(&qword_100728600);
            uint64_t v63 = *(void *)(v62 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
            {
              uint64_t v64 = sub_100007764(&qword_10072A6E8);
              memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
            }
            a3 = v95;
            uint64_t v83 = *(int *)(v54 + 32);
            uint64_t v84 = v52 + v83;
            uint64_t v85 = &v53[v83];
            *(void *)uint64_t v84 = *(void *)v85;
            *(unsigned char *)(v84 + 8) = v85[8];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
            goto LABEL_38;
          }
          goto LABEL_34;
        }
        if (v58)
        {
          sub_10035C32C(v52, type metadata accessor for AssessmentAdditionalInfo);
LABEL_34:
          size_t v30 = *(void *)(*(void *)(sub_100007764(&qword_1007266B8) - 8) + 64);
          uint64_t v31 = (void *)v52;
          long long v32 = v53;
          goto LABEL_14;
        }
        uint64_t v96 = a3;
        uint64_t v74 = *((void *)v53 + 1);
        *(void *)uint64_t v52 = *(void *)v53;
        *(void *)(v52 + 8) = v74;
        swift_bridgeObjectRelease();
        *(unsigned char *)(v52 + 16) = v53[16];
        *(void *)(v52 + 24) = *((void *)v53 + 3);
        *(unsigned char *)(v52 + 32) = v53[32];
        uint64_t v75 = *(int *)(v54 + 28);
        uint64_t v76 = (void *)(v52 + v75);
        uint64_t v77 = &v53[v75];
        uint64_t v78 = sub_100007764(&qword_100728600);
        uint64_t v90 = *(void *)(v78 - 8);
        int v79 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v90 + 48);
        long long v93 = v76;
        LODWORD(v76) = v79(v76, 1, v78);
        int v80 = v79(v77, 1, v78);
        if (v76)
        {
          if (!v80)
          {
            (*(void (**)(void *, char *, uint64_t))(v90 + 32))(v93, v77, v78);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v90 + 56))(v93, 0, 1, v78);
            goto LABEL_49;
          }
          size_t v81 = *(void *)(*(void *)(sub_100007764(&qword_10072A6E8) - 8) + 64);
          int v82 = v93;
        }
        else
        {
          if (!v80)
          {
            (*(void (**)(void *, char *, uint64_t))(v90 + 40))(v93, v77, v78);
            goto LABEL_49;
          }
          (*(void (**)(void *, uint64_t))(v90 + 8))(v93, v78);
          size_t v81 = *(void *)(*(void *)(sub_100007764(&qword_10072A6E8) - 8) + 64);
          int v82 = v93;
        }
        memcpy(v82, v77, v81);
LABEL_49:
        a3 = v96;
        uint64_t v86 = *(int *)(v54 + 32);
        uint64_t v87 = v52 + v86;
        uint64_t v88 = &v53[v86];
        *(void *)uint64_t v87 = *(void *)v88;
        *(unsigned char *)(v87 + 8) = v88[8];
        goto LABEL_38;
      }
      sub_1002FD2C4(v13 + 80);
    }
    long long v47 = *((_OWORD *)v14 + 6);
    *(_OWORD *)(v13 + 80) = *((_OWORD *)v14 + 5);
    *(_OWORD *)(v13 + 96) = v47;
    *(_OWORD *)(v13 + 112) = *((_OWORD *)v14 + 7);
    *(_OWORD *)(v13 + 121) = *(_OWORD *)(v14 + 121);
    goto LABEL_28;
  }
  if (v19)
  {
LABEL_13:
    size_t v30 = *(void *)(*(void *)(sub_100007764(&qword_100728510) - 8) + 64);
    uint64_t v31 = (void *)v13;
    long long v32 = v14;
LABEL_14:
    memcpy(v31, v32, v30);
    goto LABEL_38;
  }
  uint64_t v94 = a3;
  long long v20 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v20;
  long long v21 = *((_OWORD *)v14 + 3);
  *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
  *(_OWORD *)(v13 + 48) = v21;
  long long v22 = *((_OWORD *)v14 + 5);
  *(_OWORD *)(v13 + 64) = *((_OWORD *)v14 + 4);
  *(_OWORD *)(v13 + 80) = v22;
  long long v23 = *((_OWORD *)v14 + 7);
  *(_OWORD *)(v13 + 96) = *((_OWORD *)v14 + 6);
  *(_OWORD *)(v13 + 112) = v23;
  *(_OWORD *)(v13 + 121) = *(_OWORD *)(v14 + 121);
  *(_OWORD *)(v13 + 144) = *((_OWORD *)v14 + 9);
  uint64_t v24 = *(int *)(v15 + 32);
  uint64_t v25 = (_OWORD *)(v13 + v24);
  uint64_t v26 = &v14[v24];
  uint64_t v27 = type metadata accessor for AssessmentAdditionalInfo(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_100007764(&qword_1007266B8);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    *uint64_t v25 = *(_OWORD *)v26;
    *((unsigned char *)v25 + 16) = v26[16];
    *((void *)v25 + 3) = *((void *)v26 + 3);
    *((unsigned char *)v25 + 32) = v26[32];
    uint64_t v38 = *(int *)(v27 + 28);
    uint64_t v92 = (char *)v25 + v38;
    uint64_t v39 = &v26[v38];
    uint64_t v40 = sub_100007764(&qword_100728600);
    uint64_t v89 = *(void *)(v40 - 8);
    __src = v39;
    uint64_t v41 = v39;
    uint64_t v42 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v41, 1, v40))
    {
      uint64_t v43 = sub_100007764(&qword_10072A6E8);
      memcpy(v92, __src, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v89 + 32))(v92, __src, v42);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v92, 0, 1, v42);
    }
    uint64_t v65 = *(int *)(v27 + 32);
    long long v66 = (char *)v25 + v65;
    long long v67 = &v26[v65];
    *(void *)long long v66 = *(void *)v67;
    v66[8] = v67[8];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  a3 = v94;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_38:
  uint64_t v68 = *(int *)(a3 + 24);
  long long v69 = &a1[v68];
  uint64_t v70 = &a2[v68];
  uint64_t v72 = *(void *)v70;
  uint64_t v71 = *((void *)v70 + 1);
  *(void *)long long v69 = v72;
  *((void *)v69 + 1) = v71;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100364BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100364C04);
}

uint64_t sub_100364C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764(&qword_100726698);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100007764(&qword_100728510);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_100364D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100364D38);
}

uint64_t sub_100364D38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100007764(&qword_100726698);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_100007764(&qword_100728510);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for TiberiusIdentitySharingRequest(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072B680);
}

void sub_100364E74()
{
  sub_1003F09D4(319, &qword_10072B690, &qword_100726548);
  if (v0 <= 0x3F)
  {
    sub_1003623C8(319, (unint64_t *)&unk_10072B698, (void (*)(uint64_t))type metadata accessor for TiberiusWrappedAssessment);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for DataSharingArtifact()
{
  return &type metadata for DataSharingArtifact;
}

uint64_t *sub_100364F88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_100007764(&qword_100726548);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_100365054(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_100007764(&qword_100726548);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1003650D0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100007764(&qword_100726548);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_100365154(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100007764(&qword_100726548);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_1003651EC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_100007764(&qword_100726548);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_10036526C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100007764(&qword_100726548);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1003652FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100365310);
}

uint64_t sub_100365310(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100007764(&qword_100726548);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1003653C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003653D8);
}

void *sub_1003653D8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_100726548);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SharingCredentials(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072B728);
}

void sub_1003654A4()
{
  sub_10036F3B0(319, &qword_10072B738, (void (*)(void))sub_100365578, (void (*)(void))sub_1003655CC);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_100365578()
{
  unint64_t result = qword_10072B740;
  if (!qword_10072B740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B740);
  }
  return result;
}

unint64_t sub_1003655CC()
{
  unint64_t result = qword_10072B748;
  if (!qword_10072B748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10072B748);
  }
  return result;
}

uint64_t destroy for SharingIdVData(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SharingIdVData(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = a2[2];
  swift_bridgeObjectRetain();
  if (v5)
  {
    a1[1] = a2[1];
    a1[2] = v5;
    uint64_t v6 = a2[4];
    a1[3] = a2[3];
    a1[4] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *uint64_t v4 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 3) = v7;
  }
  uint64_t v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SharingIdVData(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + 1;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[2];
  if (a1[2])
  {
    if (v6)
    {
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1003A9A30((uint64_t)(a1 + 1));
      long long v7 = *(_OWORD *)(a2 + 3);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 3) = v7;
    }
  }
  else if (v6)
  {
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 3);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 3) = v8;
  }
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SharingIdVData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
    sub_1003A9A30(a1 + 8);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v6;
    goto LABEL_6;
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingIdVData(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingIdVData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingIdVData()
{
  return &type metadata for SharingIdVData;
}

ValueMetadata *type metadata accessor for DeviceAssessmentTrainingSignalId()
{
  return &type metadata for DeviceAssessmentTrainingSignalId;
}

uint64_t destroy for DataSharingAuthorization()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DataSharingAuthorization(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DataSharingAuthorization(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for DataSharingAuthorization(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for DataSharingAuthorization(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DataSharingAuthorization()
{
  return &type metadata for DataSharingAuthorization;
}

uint64_t *sub_100365C48(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_100007764(&qword_100726548);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100365D88(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_100007764(&qword_100726548);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100365E48(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_100007764(&qword_100726548);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100365F38(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100007764(&qword_100726548);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[9];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100366080(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100007764(&qword_100726548);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

void *sub_100366138(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_100007764(&qword_100726548);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[9];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100366238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10036624C);
}

uint64_t sub_10036624C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003B41D8(a1, a2, a3, &qword_100726548);
}

uint64_t sub_100366258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10036626C);
}

uint64_t sub_10036626C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1003B42A8(a1, a2, a3, a4, &qword_100726548);
}

uint64_t type metadata accessor for IdentitySharingRequest(uint64_t a1)
{
  return sub_100048DF0(a1, qword_10072B7D0);
}

void sub_100366298()
{
  sub_10036F3B0(319, &qword_10072B738, (void (*)(void))sub_100365578, (void (*)(void))sub_1003655CC);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for IdentityStatusAttestation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for IdentityStatusAttestation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IdentityStatusAttestation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for IdentityStatusAttestation(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for IdentityStatusAttestation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for IdentityStatusAttestation()
{
  return &type metadata for IdentityStatusAttestation;
}

uint64_t destroy for IdentitySharingResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for IdentitySharingResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  uint64_t v11 = a2[17];
  a1[16] = a2[16];
  a1[17] = v11;
  uint64_t v12 = a2[19];
  a1[18] = a2[18];
  a1[19] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IdentitySharingResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for IdentitySharingResponse(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = a2[19];
  a1[18] = a2[18];
  a1[19] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for IdentitySharingResponse()
{
  return &type metadata for IdentitySharingResponse;
}

uint64_t destroy for IQMetrics()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IQMetrics(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  int v3 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  int v4 = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v4;
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 140) = *(unsigned char *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  int v5 = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v5;
  int v6 = *(_DWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 156) = *(unsigned char *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = v6;
  int v7 = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v7;
  int v8 = *(_DWORD *)(a2 + 168);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = v8;
  uint64_t v9 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v9;
  uint64_t v10 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v10;
  uint64_t v11 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = v11;
  *(_DWORD *)(a1 + 217) = *(_DWORD *)(a2 + 217);
  uint64_t v12 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v12;
  uint64_t v13 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v13;
  uint64_t v14 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v14;
  uint64_t v15 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v15;
  long long v16 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v16;
  long long v17 = *(_OWORD *)(a2 + 320);
  long long v18 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 378) = *(_OWORD *)(a2 + 378);
  long long v19 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v19;
  *(_OWORD *)(a1 + 320) = v17;
  *(_OWORD *)(a1 + 336) = v18;
  uint64_t v20 = *(void *)(a2 + 408);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v20;
  uint64_t v21 = *(void *)(a2 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = v21;
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
  uint64_t v22 = *(void *)(a2 + 448);
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  *(void *)(a1 + 448) = v22;
  uint64_t v23 = *(void *)(a2 + 472);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = v23;
  uint64_t v24 = *(void *)(a2 + 480);
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  *(void *)(a1 + 480) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IQMetrics(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  int v5 = a2[2];
  *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  int v6 = a2[4];
  *(unsigned char *)(a1 + 20) = *((unsigned char *)a2 + 20);
  *(_DWORD *)(a1 + 16) = v6;
  int v7 = a2[6];
  *(unsigned char *)(a1 + 28) = *((unsigned char *)a2 + 28);
  *(_DWORD *)(a1 + 24) = v7;
  int v8 = a2[8];
  *(unsigned char *)(a1 + 36) = *((unsigned char *)a2 + 36);
  *(_DWORD *)(a1 + 32) = v8;
  int v9 = a2[10];
  *(unsigned char *)(a1 + 44) = *((unsigned char *)a2 + 44);
  *(_DWORD *)(a1 + 40) = v9;
  int v10 = a2[12];
  *(unsigned char *)(a1 + 52) = *((unsigned char *)a2 + 52);
  *(_DWORD *)(a1 + 48) = v10;
  int v11 = a2[14];
  *(unsigned char *)(a1 + 60) = *((unsigned char *)a2 + 60);
  *(_DWORD *)(a1 + 56) = v11;
  int v12 = a2[16];
  *(unsigned char *)(a1 + 68) = *((unsigned char *)a2 + 68);
  *(_DWORD *)(a1 + 64) = v12;
  int v13 = a2[18];
  *(unsigned char *)(a1 + 76) = *((unsigned char *)a2 + 76);
  *(_DWORD *)(a1 + 72) = v13;
  int v14 = a2[20];
  *(unsigned char *)(a1 + 84) = *((unsigned char *)a2 + 84);
  *(_DWORD *)(a1 + 80) = v14;
  int v15 = a2[22];
  *(unsigned char *)(a1 + 92) = *((unsigned char *)a2 + 92);
  *(_DWORD *)(a1 + 88) = v15;
  int v16 = a2[24];
  *(unsigned char *)(a1 + 100) = *((unsigned char *)a2 + 100);
  *(_DWORD *)(a1 + 96) = v16;
  int v17 = a2[26];
  *(unsigned char *)(a1 + 108) = *((unsigned char *)a2 + 108);
  *(_DWORD *)(a1 + 104) = v17;
  int v18 = a2[28];
  *(unsigned char *)(a1 + 116) = *((unsigned char *)a2 + 116);
  *(_DWORD *)(a1 + 112) = v18;
  int v19 = a2[30];
  *(unsigned char *)(a1 + 124) = *((unsigned char *)a2 + 124);
  *(_DWORD *)(a1 + 120) = v19;
  int v20 = a2[32];
  *(unsigned char *)(a1 + 132) = *((unsigned char *)a2 + 132);
  *(_DWORD *)(a1 + 128) = v20;
  int v21 = a2[34];
  *(unsigned char *)(a1 + 140) = *((unsigned char *)a2 + 140);
  *(_DWORD *)(a1 + 136) = v21;
  int v22 = a2[36];
  *(unsigned char *)(a1 + 148) = *((unsigned char *)a2 + 148);
  *(_DWORD *)(a1 + 144) = v22;
  int v23 = a2[38];
  *(unsigned char *)(a1 + 156) = *((unsigned char *)a2 + 156);
  *(_DWORD *)(a1 + 152) = v23;
  int v24 = a2[40];
  *(unsigned char *)(a1 + 164) = *((unsigned char *)a2 + 164);
  *(_DWORD *)(a1 + 160) = v24;
  int v25 = a2[42];
  *(unsigned char *)(a1 + 172) = *((unsigned char *)a2 + 172);
  *(_DWORD *)(a1 + 168) = v25;
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = *((void *)a2 + 24);
  *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
  *(void *)(a1 + 192) = v26;
  uint64_t v27 = *((void *)a2 + 26);
  *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
  *(void *)(a1 + 208) = v27;
  *(unsigned char *)(a1 + 217) = *((unsigned char *)a2 + 217);
  *(unsigned char *)(a1 + 218) = *((unsigned char *)a2 + 218);
  *(unsigned char *)(a1 + 219) = *((unsigned char *)a2 + 219);
  *(unsigned char *)(a1 + 220) = *((unsigned char *)a2 + 220);
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *((void *)a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *((void *)a2 + 33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *((void *)a2 + 34);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *((void *)a2 + 35);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v28 = *((_OWORD *)a2 + 18);
  long long v29 = *((_OWORD *)a2 + 20);
  *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
  *(_OWORD *)(a1 + 320) = v29;
  *(_OWORD *)(a1 + 288) = v28;
  long long v30 = *((_OWORD *)a2 + 21);
  long long v31 = *((_OWORD *)a2 + 22);
  long long v32 = *((_OWORD *)a2 + 23);
  *(_OWORD *)(a1 + 378) = *(_OWORD *)((char *)a2 + 378);
  *(_OWORD *)(a1 + 352) = v31;
  *(_OWORD *)(a1 + 368) = v32;
  *(_OWORD *)(a1 + 336) = v30;
  *(void *)(a1 + 400) = *((void *)a2 + 50);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 408) = *((void *)a2 + 51);
  *(void *)(a1 + 416) = *((void *)a2 + 52);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 424) = *((void *)a2 + 53);
  *(void *)(a1 + 432) = *((void *)a2 + 54);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 440) = *((unsigned char *)a2 + 440);
  uint64_t v33 = *((void *)a2 + 56);
  *(unsigned char *)(a1 + 456) = *((unsigned char *)a2 + 456);
  *(void *)(a1 + 448) = v33;
  *(void *)(a1 + 464) = *((void *)a2 + 58);
  *(void *)(a1 + 472) = *((void *)a2 + 59);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = *((void *)a2 + 60);
  *(unsigned char *)(a1 + 488) = *((unsigned char *)a2 + 488);
  *(void *)(a1 + 480) = v34;
  return a1;
}

void *initializeWithTake for IQMetrics(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1E9uLL);
}

uint64_t assignWithTake for IQMetrics(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  int v4 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  int v5 = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v5;
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 140) = *(unsigned char *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  int v6 = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v6;
  int v7 = *(_DWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 156) = *(unsigned char *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = v7;
  int v8 = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v8;
  int v9 = *(_DWORD *)(a2 + 168);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = v9;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(_DWORD *)(a1 + 217) = *(_DWORD *)(a2 + 217);
  uint64_t v10 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  long long v12 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v12;
  *(_OWORD *)(a1 + 378) = *(_OWORD *)(a2 + 378);
  long long v13 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v13;
  long long v14 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v14;
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v16;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  uint64_t v17 = *(void *)(a2 + 472);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = v17;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  return a1;
}

uint64_t getEnumTagSinglePayload for IQMetrics(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 489)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 176);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IQMetrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 488) = 0;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 489) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 489) = 0;
    }
    if (a2) {
      *(void *)(result + 176) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IQMetrics()
{
  return &type metadata for IQMetrics;
}

void *assignWithCopy for MetricsData(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MetricsData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MetricsData()
{
  return &type metadata for MetricsData;
}

uint64_t destroy for KeyAuthorization()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for KeyAuthorization(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KeyAuthorization(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KeyAuthorization(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for KeyAuthorization()
{
  return &type metadata for KeyAuthorization;
}

uint64_t initializeWithCopy for DocScanConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocScanConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  return a1;
}

__n128 initializeWithTake for DocScanConfig(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DocScanConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocScanConfig(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 41)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DocScanConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DocScanConfig()
{
  return &type metadata for DocScanConfig;
}

uint64_t destroy for LegacyWorkflowRecommendationResponse(uint64_t a1, uint64_t a2)
{
  return sub_100369E20(a1, a2, (uint64_t (*)(uint64_t))&_swift_release);
}

void *initializeWithCopy for LegacyWorkflowRecommendationResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for LegacyWorkflowRecommendationResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for DigitalPresentmentSessionManager.Proposal(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for LegacyWorkflowRecommendationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10036A080(a1, a2, a3, (void (*)(uint64_t))&_swift_release);
}

ValueMetadata *type metadata accessor for LegacyWorkflowRecommendationResponse()
{
  return &type metadata for LegacyWorkflowRecommendationResponse;
}

ValueMetadata *type metadata accessor for AppleCredentials()
{
  return &type metadata for AppleCredentials;
}

uint64_t destroy for NonceResponse(uint64_t a1, uint64_t a2)
{
  return sub_100369E20(a1, a2, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t assignWithTake for NonceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10036A080(a1, a2, a3, (void (*)(uint64_t))&_swift_bridgeObjectRelease);
}

ValueMetadata *type metadata accessor for NonceResponse()
{
  return &type metadata for NonceResponse;
}

uint64_t *sub_100367CAC(uint64_t *a1, uint64_t *a2, int *a3)
{
  long long v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    long long v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    uint64_t v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    uint64_t v11 = a2[11];
    a1[10] = a2[10];
    a1[11] = v11;
    uint64_t v12 = a2[13];
    a1[12] = a2[12];
    a1[13] = v12;
    uint64_t v13 = a3[7];
    __dst = (char *)a1 + v13;
    int v22 = (char *)a2 + v13;
    a1[14] = a2[14];
    uint64_t v14 = type metadata accessor for VerifiedClaim(0);
    uint64_t v21 = *(void *)(v14 - 8);
    int v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23(v22, 1, v14))
    {
      uint64_t v15 = sub_100007764(&qword_100726700);
      memcpy(__dst, v22, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v17 = sub_100007764(&qword_100723718);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(__dst, v22, v17);
      *(void *)&__dst[*(int *)(v14 + 20)] = *(void *)&v22[*(int *)(v14 + 20)];
      int v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56);
      swift_retain();
      v18(__dst, 0, 1, v14);
    }
    uint64_t v19 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100367F14(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for VerifiedClaim(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v6 = sub_100007764(&qword_100723718);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    swift_release();
  }
  swift_bridgeObjectRelease();

  return swift_release();
}

void *sub_100368038(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  uint64_t v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  uint64_t v10 = a2[11];
  a1[10] = a2[10];
  a1[11] = v10;
  uint64_t v11 = a2[13];
  a1[12] = a2[12];
  a1[13] = v11;
  uint64_t v12 = a3[7];
  __dst = (char *)a1 + v12;
  int v20 = (char *)a2 + v12;
  a1[14] = a2[14];
  uint64_t v13 = type metadata accessor for VerifiedClaim(0);
  uint64_t v19 = *(void *)(v13 - 8);
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v21(v20, 1, v13))
  {
    uint64_t v14 = sub_100007764(&qword_100726700);
    memcpy(__dst, v20, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = sub_100007764(&qword_100723718);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(__dst, v20, v15);
    *(void *)&__dst[*(int *)(v13 + 20)] = *(void *)&v20[*(int *)(v13 + 20)];
    uint64_t v16 = *(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
    swift_retain();
    v16(__dst, 0, 1, v13);
  }
  uint64_t v17 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_100368254(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for VerifiedClaim(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v18 = sub_100007764(&qword_100723718);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v7, v8, v18);
      *(void *)&v7[*(int *)(v9 + 20)] = *(void *)&v8[*(int *)(v9 + 20)];
      swift_retain();
      swift_release();
      goto LABEL_7;
    }
    sub_10035C32C((uint64_t)v7, type metadata accessor for VerifiedClaim);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v16 = sub_100007764(&qword_100726700);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = sub_100007764(&qword_100723718);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
  *(void *)&v7[*(int *)(v9 + 20)] = *(void *)&v8[*(int *)(v9 + 20)];
  uint64_t v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
  swift_retain();
  v15(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100368578(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  long long v9 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)(a1 + v10);
  int v12 = (char *)(a2 + v10);
  *(_OWORD *)(a1 + 96) = v9;
  uint64_t v13 = type metadata accessor for VerifiedClaim(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_100007764(&qword_100726700);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = sub_100007764(&qword_100723718);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
    *(void *)&v11[*(int *)(v13 + 20)] = *(void *)&v12[*(int *)(v13 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  return a1;
}

void *sub_1003686FC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[13];
  a1[12] = a2[12];
  a1[13] = v12;
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for VerifiedClaim(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      uint64_t v24 = sub_100007764(&qword_100723718);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 40))(v14, v15, v24);
      *(void *)&v14[*(int *)(v16 + 20)] = *(void *)&v15[*(int *)(v16 + 20)];
      swift_release();
      goto LABEL_7;
    }
    sub_10035C32C((uint64_t)v14, type metadata accessor for VerifiedClaim);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v22 = sub_100007764(&qword_100726700);
    memcpy(v14, v15, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v21 = sub_100007764(&qword_100723718);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v14, v15, v21);
  *(void *)&v14[*(int *)(v16 + 20)] = *(void *)&v15[*(int *)(v16 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_release();
  return a1;
}

uint64_t sub_10036898C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003689A0);
}

uint64_t sub_1003689A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100007764(&qword_100726700);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100368A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100368A68);
}

uint64_t sub_100368A68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100007764(&qword_100726700);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for IdentityProofingResponse(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_10072B870);
}

void sub_100368B34()
{
  sub_1003623C8(319, (unint64_t *)&unk_10072B880, (void (*)(uint64_t))type metadata accessor for VerifiedClaim);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_100368C00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *long long v3 = *a2;
    long long v3 = (uint64_t *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    uint64_t v10 = a2[11];
    a1[10] = a2[10];
    a1[11] = v10;
    uint64_t v11 = a2[13];
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (uint64_t *)((char *)a2 + v12);
    __dst = (uint64_t *)((char *)a1 + v12);
    a1[12] = a2[12];
    a1[13] = v11;
    uint64_t v14 = type metadata accessor for SharingCredentials(0);
    uint64_t v22 = *(void *)(v14 - 8);
    int v23 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23(v13, 1, v14))
    {
      uint64_t v15 = sub_100007764((uint64_t *)&unk_100726568);
      memcpy(__dst, v13, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      void *__dst = *v13;
      uint64_t v17 = *(int *)(v14 + 20);
      uint64_t v18 = (char *)__dst + v17;
      int v19 = (char *)v13 + v17;
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_100007764(&qword_100726548);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v14);
    }
  }
  return v3;
}