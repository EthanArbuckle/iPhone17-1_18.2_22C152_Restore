uint64_t sub_1004F0010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 320) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v2 = sub_1004F0368;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = sub_1004F0134;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004F0134()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  defaultLogger()();
  v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Action notification successful, will delete the saved uploaded assets data", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[40];
  v5 = (void (*)(uint64_t, uint64_t))v0[35];
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[30];

  v5(v6, v7);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  if (!v4)
  {
    uint64_t v9 = v8;
    uint64_t v11 = v0[19];
    uint64_t v10 = v0[20];
    v12 = (void *)swift_allocObject();
    v12[2] = v9;
    v12[3] = v11;
    v12[4] = v10;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_1004F08E8, (uint64_t)v12);
    swift_release();
    swift_release();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1004F0368()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004F0430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  v8[10] = v9;
  v8[11] = *(void *)(v9 - 8);
  v8[12] = swift_task_alloc();
  return _swift_task_switch(sub_1004F04FC, 0, 0);
}

uint64_t sub_1004F04FC()
{
  sub_10000C728((void *)(v0[9] + 16), *(void *)(v0[9] + 40));
  v1 = (void *)swift_task_alloc();
  v0[13] = v1;
  void *v1 = v0;
  v1[1] = sub_1004F05B0;
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[2];
  return sub_1001FC910(v8, v6, v7, v4, v5, v2, v3);
}

uint64_t sub_1004F05B0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004F06EC, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1004F06EC()
{
  (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for DIPError.Code.internalError(_:), v0[10]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1004F0834()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingActionNotificationProvider()
{
  return self;
}

uint64_t sub_1004F08A8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1004F08E8()
{
  sub_100537550(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1004F0908(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_1007284E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004F0968()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v0[5] = v2;
  v0[6] = *(void *)(v2 - 8);
  v0[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v0[8] = v3;
  v0[9] = *(void *)(v3 - 8);
  v0[10] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1004F0B0C;
  return sub_1004F12AC();
}

uint64_t sub_1004F0B0C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004F0C60, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1004F0C60()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v6 = v0[2];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for DIPError.Code.internalError(_:), v0[5]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v1, v3);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1004F0E70()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_1004F0F30, v0, 0);
}

uint64_t sub_1004F0F30()
{
  sub_10000C728((void *)(*(void *)(v0 + 16) + 112), *(void *)(*(void *)(v0 + 16) + 136));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  void *v1 = v0;
  v1[1] = sub_1004F0FD0;
  return sub_1003087A8();
}

uint64_t sub_1004F0FD0(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    return _swift_task_switch(sub_1004F1128, v6, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7(a1 & 1);
  }
}

uint64_t sub_1004F1128()
{
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1(0);
}

uint64_t sub_1004F12AC()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ISO18013KnownDocTypes();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[10] = v4;
  v1[11] = *(void *)(v4 - 8);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_1004F14AC, v0, 0);
}

uint64_t sub_1004F14AC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Running CV activity in background", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[23];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[24] = v7;
  v0[25] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[26] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1004F15E8;
  return sub_1004F0E70();
}

uint64_t sub_1004F15E8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 216) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 24);
  if (v1)
  {
    uint64_t v6 = sub_1004F2B80;
  }
  else
  {
    *(unsigned char *)(v4 + 312) = a1 & 1;
    uint64_t v6 = sub_1004F1728;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1004F1728()
{
  if (*(unsigned char *)(v0 + 312) == 1)
  {
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "CV background activity looking for credential on device", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    uint64_t v5 = *(void *)(v0 + 176);
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 24);

    v4(v5, v6);
    *(void *)(v0 + 224) = *(void *)(v10 + 152);
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v7, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v8);
    return _swift_task_switch(sub_1004F1A74, 0, 0);
  }
  else
  {
    defaultLogger()();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "CV is not enabled; exiting", v13, 2u);
      swift_slowDealloc();
    }
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    uint64_t v15 = *(void *)(v0 + 120);
    uint64_t v16 = *(void *)(v0 + 80);

    v14(v15, v16);
    defaultLogger()();
    v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Done running CV activity in background", v19, 2u);
      swift_slowDealloc();
    }
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    uint64_t v21 = *(void *)(v0 + 112);
    uint64_t v22 = *(void *)(v0 + 80);

    v20(v21, v22);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

uint64_t sub_1004F1A74()
{
  uint64_t v1 = ISO18013KnownDocTypes.rawValue.getter();
  uint64_t v3 = v2;
  *(void *)(v0 + 232) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1004F1B28;
  return sub_10005F6E4(v1, v3);
}

uint64_t sub_1004F1B28(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[31] = a1;
  v3[32] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1004F20EC;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v7 = v3[8];
    uint64_t v6 = v3[9];
    uint64_t v8 = v3[7];
    uint64_t v9 = v3[3];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v4 = sub_1004F1C78;
    uint64_t v5 = v9;
  }
  return _swift_task_switch(v4, v5, 0);
}

unint64_t sub_1004F1C78()
{
  v30 = v0;
  uint64_t v1 = v0[31];
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    unint64_t result = sub_1004F7F10(v2);
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(void *)(v1 + 16))
    {
      uint64_t v4 = v0[31] + 16 * result;
      uint64_t v5 = *(void *)(v4 + 32);
      v0[33] = v5;
      unint64_t v6 = *(void *)(v4 + 40);
      v0[34] = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      BOOL v9 = os_log_type_enabled(v7, v8);
      uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[24];
      uint64_t v11 = v0[20];
      uint64_t v12 = v0[10];
      if (v9)
      {
        v28 = (void (*)(uint64_t, uint64_t))v0[24];
        v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)v13 = 136315138;
        swift_bridgeObjectRetain();
        v0[2] = sub_100110D58(v5, v6, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "CV background activity proceeding with credential %s", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v28(v11, v12);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        v10(v11, v12);
      }
      sub_10000C728((void *)(v0[3] + 112), *(void *)(v0[3] + 136));
      v27 = (void *)swift_task_alloc();
      v0[35] = v27;
      void *v27 = v0;
      v27[1] = sub_1004F2440;
      return sub_100308EE8();
    }
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  defaultLogger()();
  v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Skipping CV background activity because no suitable credentials exist", v16, 2u);
    swift_slowDealloc();
  }
  v17 = (void (*)(uint64_t, uint64_t))v0[24];
  uint64_t v18 = v0[17];
  uint64_t v19 = v0[10];

  v17(v18, v19);
  defaultLogger()();
  v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Done running CV activity in background", v22, 2u);
    swift_slowDealloc();
  }
  v23 = (void (*)(uint64_t, uint64_t))v0[24];
  uint64_t v24 = v0[16];
  uint64_t v25 = v0[10];

  v23(v24, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_1004F20EC()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[3];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1004F2180, v4, 0);
}

uint64_t sub_1004F2180()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done running CV activity in background", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[24];
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[10];

  v4(v5, v6);
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1004F2440(double a1)
{
  uint64_t v4 = (void *)*v2;
  v4[36] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[3];
    return _swift_task_switch(sub_1004F2714, v5, 0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v4[37] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1004F25CC;
    uint64_t v7 = v4[34];
    uint64_t v8 = v4[33];
    return sub_1004F3ED4(v8, v7, 1, a1);
  }
}

uint64_t sub_1004F25CC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_1004F2E40;
  }
  else {
    uint64_t v4 = sub_1004F29DC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1004F2714()
{
  swift_bridgeObjectRelease();
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done running CV activity in background", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[24];
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[10];

  v4(v5, v6);
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1004F29DC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done running CV activity in background", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[24];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[10];

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1004F2B80()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done running CV activity in background", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[24];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[10];

  v4(v5, v6);
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1004F2E40()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done running CV activity in background", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[24];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[10];

  v4(v5, v6);
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1004F3100(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_1004F3260, v2, 0);
}

uint64_t sub_1004F3260()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Running CV activity on demand", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[9];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[16] = v7;
  v0[17] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[18] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1004F339C;
  return sub_1004F0E70();
}

uint64_t sub_1004F339C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 152) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 32);
  if (v1)
  {
    uint64_t v6 = sub_1004F39F4;
  }
  else
  {
    *(unsigned char *)(v4 + 176) = a1 & 1;
    uint64_t v6 = sub_1004F34DC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1004F34DC()
{
  if (*(unsigned char *)(v0 + 176) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v1;
    void *v1 = v0;
    v1[1] = sub_1004F3764;
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 16);
    return sub_1004F3ED4(v3, v2, 0, 1.0);
  }
  else
  {
    defaultLogger()();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "CV is not enabled; exiting", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 64);

    v8(v9, v10);
    defaultLogger()();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 96);
    if (v13)
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Done running CV activity on demand", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    uint64_t v17 = *(void *)(v0 + 64);

    v16(v14, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_1004F3764()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = sub_1004F3C64;
  }
  else {
    uint64_t v4 = sub_1004F3890;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1004F3890()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = v0[14];
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done running CV activity on demand", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v7 = v0[8];

  v6(v4, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1004F39F4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = v0[11];
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done running CV activity on demand", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[8];
  uint64_t v10 = v0[5];
  uint64_t v9 = v0[6];

  v6(v4, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v7, enum case for DIPError.Code.internalError(_:), v10);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1004F3C64()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = v0[10];
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Done running CV activity on demand", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[8];
  uint64_t v10 = v0[5];
  uint64_t v9 = v0[6];

  v6(v4, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v7, enum case for DIPError.Code.internalError(_:), v10);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1004F3ED4(uint64_t a1, uint64_t a2, char a3, double a4)
{
  *(void *)(v5 + 248) = v4;
  *(double *)(v5 + 240) = a4;
  *(unsigned char *)(v5 + 400) = a3;
  *(void *)(v5 + 224) = a1;
  *(void *)(v5 + 232) = a2;
  *(void *)(v5 + 256) = *v4;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  *(void *)(v5 + 264) = v6;
  *(void *)(v5 + 272) = *(void *)(v6 - 8);
  *(void *)(v5 + 280) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v5 + 288) = v7;
  *(void *)(v5 + 296) = *(void *)(v7 - 8);
  *(void *)(v5 + 304) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v5 + 312) = v8;
  *(void *)(v5 + 320) = *(void *)(v8 - 8);
  *(void *)(v5 + 328) = swift_task_alloc();
  return _swift_task_switch(sub_1004F4080, v4, 0);
}

uint64_t sub_1004F4080()
{
  sub_10000C728((void *)(*(void *)(v0 + 248) + 112), *(void *)(*(void *)(v0 + 248) + 136));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v1;
  void *v1 = v0;
  v1[1] = sub_1004F4120;
  return sub_1003093D0();
}

uint64_t sub_1004F4120(double a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(double *)(v4 + 344) = a1;
  *(void *)(v4 + 352) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 248);
  if (v1) {
    uint64_t v6 = sub_1004F4640;
  }
  else {
    uint64_t v6 = sub_1004F4250;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1004F4250()
{
  uint64_t v33 = v0;
  Swift::String v1 = *(Swift::String *)(v0 + 224);
  os_log_type_t v2 = (void *)(v0 + 16);
  v32[0] = 779510628;
  v32[1] = 0xE400000000000000;
  String.append(_:)(v1);
  *(void *)(v0 + 360) = 0xE400000000000000;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v28 = *(void *)(v0 + 320);
    uint64_t v29 = *(void *)(v0 + 312);
    uint64_t v30 = *(void *)(v0 + 328);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 216) = sub_100110D58(779510628, 0xE400000000000000, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting activity runner for activity %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    os_log_type_t v2 = (void *)(v0 + 16);
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 320);
    uint64_t v7 = *(void *)(v0 + 328);
    uint64_t v8 = *(void *)(v0 + 312);
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  }
  uint64_t v9 = *(void *)(v0 + 344);
  int v10 = *(unsigned __int8 *)(v0 + 400);
  *(void *)(v0 + 40) = &type metadata for RandomizedBackgroundActivityRunner;
  *(void *)(v0 + 48) = &off_1006F8E80;
  *(void *)(v0 + 16) = 779510628;
  *(void *)(v0 + 24) = 0xE400000000000000;
  *(void *)(v0 + 32) = v9;
  uint64_t v11 = sub_10000C728(v2, (uint64_t)&type metadata for RandomizedBackgroundActivityRunner);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  if (v10 == 1)
  {
    uint64_t v15 = v0 + 136;
    uint64_t v16 = (long long *)(v0 + 176);
    *(void *)(v0 + 160) = &type metadata for RandomizedBackgroundActivityRunner;
    *(void *)(v0 + 168) = &off_1006F8E80;
    *(void *)(v0 + 136) = v12;
    *(void *)(v0 + 144) = v13;
    *(void *)(v0 + 152) = v14;
    sub_100030A10(v0 + 136, v0 + 176);
    uint64_t v17 = (int *)&unk_100730F10;
  }
  else
  {
    uint64_t v15 = v0 + 56;
    uint64_t v16 = (long long *)(v0 + 96);
    *(void *)(v0 + 80) = &type metadata for RandomizedBackgroundActivityRunner;
    *(void *)(v0 + 88) = &off_1006F8E80;
    *(void *)(v0 + 56) = v12;
    *(void *)(v0 + 64) = v13;
    *(void *)(v0 + 72) = v14;
    sub_100030A10(v0 + 56, v0 + 96);
    uint64_t v17 = (int *)&unk_100730EF0;
  }
  uint64_t v18 = swift_allocObject();
  sub_10000C6B4(v16, v18 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v15);
  *(void *)(v0 + 368) = v18;
  uint64_t v20 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 240);
  uint64_t v23 = *(void *)(v0 + 224);
  uint64_t v22 = *(void *)(v0 + 232);
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v24;
  v24[2] = 779510628;
  v24[3] = 0xE400000000000000;
  v24[4] = v21;
  v24[5] = v20;
  v24[6] = v23;
  v24[7] = v22;
  v24[8] = v19;
  uint64_t v31 = (int *)((char *)v17 + *v17);
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_1004F47D8;
  uint64_t v26 = *(void *)(v0 + 304);
  return ((uint64_t (*)(uint64_t, void *, void *))v31)(v26, &unk_100730F00, v24);
}

uint64_t sub_1004F4640()
{
  (*(void (**)(void, void, void))(v0[34] + 104))(v0[35], enum case for DIPError.Code.internalError(_:), v0[33]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1004F47D8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 392) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 248);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v4 = sub_1004F4B74;
  }
  else {
    os_log_type_t v4 = sub_1004F493C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1004F493C()
{
  uint64_t v1 = v0[49];
  sub_1004F741C(v0[38]);
  if (v1)
  {
    uint64_t v3 = v0[37];
    uint64_t v2 = v0[38];
    uint64_t v4 = v0[36];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
    (*(void (**)(void, void, void))(v0[34] + 104))(v0[35], enum case for DIPError.Code.internalError(_:), v0[33]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v7 = v0[37];
    uint64_t v6 = v0[38];
    uint64_t v8 = v0[36];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1004F4B74()
{
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  (*(void (**)(void, void, void))(v0[34] + 104))(v0[35], enum case for DIPError.Code.internalError(_:), v0[33]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1004F4D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_1004F4D44, 0, 0);
}

uint64_t sub_1004F4D44()
{
  uint64_t v1 = sub_10000C728(*(void **)(v0 + 40), *(void *)(*(void *)(v0 + 40) + 24));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  double v4 = *((double *)v1 + 2);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1004F4E04;
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = *(void *)(v0 + 16);
  return sub_100136388(v8, v6, v7, v3, v2, v4);
}

uint64_t sub_1004F4E04()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1004F4EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_1004F4F1C, 0, 0);
}

uint64_t sub_1004F4F1C()
{
  uint64_t v1 = sub_10000C728(*(void **)(v0 + 40), *(void *)(*(void *)(v0 + 40) + 24));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  double v4 = *((double *)v1 + 2);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1004F844C;
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = *(void *)(v0 + 16);
  return sub_100139FA4(v8, v6, v7, v3, v2, v4);
}

uint64_t sub_1004F4FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)(v6 + 96) = a4;
  *(void *)(v6 + 104) = a5;
  *(void *)(v6 + 88) = a3;
  *(double *)(v6 + 80) = a6;
  *(void *)(v6 + 64) = a1;
  *(void *)(v6 + 72) = a2;
  uint64_t v7 = type metadata accessor for DIPError();
  *(void *)(v6 + 112) = v7;
  *(void *)(v6 + 120) = *(void *)(v7 - 8);
  *(void *)(v6 + 128) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 136) = v8;
  *(void *)(v6 + 144) = *(void *)(v8 - 8);
  *(void *)(v6 + 152) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v6 + 160) = v9;
  *(void *)(v6 + 168) = *(void *)(v9 - 8);
  *(void *)(v6 + 176) = swift_task_alloc();
  *(void *)(v6 + 184) = swift_task_alloc();
  *(void *)(v6 + 192) = swift_task_alloc();
  *(void *)(v6 + 200) = swift_task_alloc();
  *(void *)(v6 + 208) = swift_task_alloc();
  *(void *)(v6 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_1004F51A0, 0, 0);
}

uint64_t sub_1004F51A0()
{
  uint64_t v38 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v33 = *(void *)(v0 + 168);
    uint64_t v34 = *(void *)(v0 + 160);
    uint64_t v36 = *(void *)(v0 + 216);
    unint64_t v3 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 56) = sub_100110D58(v4, v3, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Firing activity block for activity %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v6(v36, v34);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v9 = *(void *)(v0 + 168);
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  *(void *)(v0 + 224) = v6;
  if (sub_1004F8048(*(double *)(v0 + 80)))
  {
    uint64_t v10 = *(void *)(v0 + 88);
    *(unsigned char *)(v0 + 324) = 0;
    uint64_t v11 = sub_10000C728((void *)(v10 + 240), *(void *)(v10 + 264));
    *(void *)(v0 + 232) = v11;
    uint64_t v12 = randomData(numBytes:)();
    uint64_t v14 = v13;
    *(void *)(v0 + 240) = v12;
    *(void *)(v0 + 248) = v13;
    uint64_t v15 = randomData(numBytes:)();
    unint64_t v17 = v16;
    Swift::String v18 = Data.base64EncodedString(options:)(0);
    *(void *)(v0 + 256) = v18._object;
    sub_10000C5F4(v15, v17);
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v19;
    void *v19 = v0;
    v19[1] = sub_1004F5668;
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 104);
    return sub_100426994(v21, v20, v12, v14, v18._countAndFlagsBits, (uint64_t)v18._object, (uint64_t)v11);
  }
  else
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 176);
    uint64_t v27 = *(void *)(v0 + 160);
    unint64_t v28 = *(void *)(v0 + 72);
    if (v25)
    {
      uint64_t v29 = *(void *)(v0 + 64);
      uint64_t v35 = *(void *)(v0 + 176);
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = sub_100110D58(v29, v28, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Exiting activity %s due to coin flip", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v31 = v35;
    }
    else
    {
      swift_bridgeObjectRelease_n();

      uint64_t v31 = v26;
    }
    v6(v31, v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32(0);
  }
}

uint64_t sub_1004F5668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)*v4;
  uint64_t v9 = (void *)*v4;
  v8[34] = a1;
  v8[35] = a2;
  v8[36] = v3;
  swift_task_dealloc();
  if (v3)
  {
    return _swift_task_switch(sub_1004F594C, 0, 0);
  }
  else
  {
    v8[37] = a3;
    swift_bridgeObjectRelease();
    uint64_t v10 = (void *)swift_task_alloc();
    v8[38] = v10;
    *uint64_t v10 = v9;
    v10[1] = sub_1004F5820;
    uint64_t v11 = v8[30];
    uint64_t v12 = v8[31];
    uint64_t v13 = v8[12];
    uint64_t v14 = v8[13];
    return sub_1004273A4(a1, a2, a3, v13, v14, v11, v12);
  }
}

uint64_t sub_1004F5820(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 312) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1004F64B0;
  }
  else
  {
    *(unsigned char *)(v4 + 325) = a1 & 1;
    uint64_t v5 = sub_1004F6024;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1004F594C()
{
  uint64_t v47 = v0;
  uint64_t v37 = *(void *)(v0 + 240);
  unint64_t v38 = *(void *)(v0 + 248);
  uint64_t v42 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v43 = *(void *)(v0 + 160);
  v44 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v39 = *(void *)(v0 + 128);
  uint64_t v41 = *(void *)(v0 + 120);
  swift_bridgeObjectRelease();
  uint64_t v5 = enum case for DIPError.Code.internalError(_:);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  v6(v1, enum case for DIPError.Code.internalError(_:), v2);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  sub_10000C5F4(v37, v38);
  v6(v1, v5, v2);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v7, v39, v4);
  defaultLogger()();
  DIPLogError(_:message:log:)();
  swift_errorRelease();
  v44(v42, v43);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v4);
  swift_errorRelease();
  *(unsigned char *)(v0 + 324) = 0;
  uint64_t v8 = self;
  id v9 = [v8 standardUserDefaults];
  v10._object = (void *)0x8000000100652050;
  v10._countAndFlagsBits = 0xD00000000000001DLL;
  Swift::Bool v11 = NSUserDefaults.internalBool(forKey:)(v10);

  if (v11)
  {
    uint64_t v12 = (uint64_t *)(v0 + 200);
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v13, v14))
    {
      char v16 = 1;
      goto LABEL_10;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Forcing cv result to success due to internal defaults setting", v15, 2u);
    char v16 = 1;
  }
  else
  {
    id v17 = [v8 standardUserDefaults];
    v18._object = (void *)0x8000000100652070;
    v18._countAndFlagsBits = 0xD00000000000001DLL;
    Swift::Bool v19 = NSUserDefaults.internalBool(forKey:)(v18);

    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v12 = (uint64_t *)(v0 + 192);
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v13, v20))
    {
      char v16 = 0;
      goto LABEL_10;
    }
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v20, "Forcing cv result to failure due to internal defaults setting", v21, 2u);
    char v16 = 0;
  }
  swift_slowDealloc();
LABEL_10:
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v23 = *v12;
  uint64_t v24 = *(void *)(v0 + 160);

  v22(v23, v24);
  *(unsigned char *)(v0 + 324) = v16;
LABEL_11:
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  BOOL v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  unint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v29 = *(void *)(v0 + 184);
  uint64_t v30 = *(void *)(v0 + 160);
  unint64_t v31 = *(void *)(v0 + 72);
  if (v27)
  {
    v45 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    uint64_t v32 = *(void *)(v0 + 64);
    Swift::Bool v40 = v11;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = sub_100110D58(v32, v31, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 12) = 1024;
    *(_DWORD *)(v0 + 320) = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Activity runner for activity %s returning %{BOOL}d", (uint8_t *)v33, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v45(v29, v30);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v28(v29, v30);
  }
  swift_beginAccess();
  uint64_t v34 = *(unsigned __int8 *)(v0 + 324);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v35(v34);
}

uint64_t sub_1004F6024()
{
  uint64_t v37 = v0;
  uint64_t v1 = (unsigned __int8 *)(v0 + 324);
  char v2 = *(unsigned char *)(v0 + 325);
  uint64_t v4 = *(void *)(v0 + 240);
  unint64_t v3 = *(void *)(v0 + 248);
  sub_10000C5E0(*(void *)(v0 + 272), *(void *)(v0 + 280));
  swift_bridgeObjectRelease();
  sub_10000C5F4(v4, v3);
  char v5 = *(unsigned char *)(v0 + 325);
  *(unsigned char *)(v0 + 324) = v2;
  uint64_t v6 = self;
  id v7 = [v6 standardUserDefaults];
  v8._object = (void *)0x8000000100652050;
  v8._countAndFlagsBits = 0xD00000000000001DLL;
  Swift::Bool v9 = NSUserDefaults.internalBool(forKey:)(v8);

  if (v9)
  {
    Swift::String v10 = (uint64_t *)(v0 + 200);
    defaultLogger()();
    Swift::Bool v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v12))
    {
      char v14 = 1;
      char v5 = 1;
      goto LABEL_10;
    }
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Forcing cv result to success due to internal defaults setting", v13, 2u);
    char v14 = 1;
  }
  else
  {
    id v15 = [v6 standardUserDefaults];
    v16._object = (void *)0x8000000100652070;
    v16._countAndFlagsBits = 0xD00000000000001DLL;
    Swift::Bool v17 = NSUserDefaults.internalBool(forKey:)(v16);

    if (!v17) {
      goto LABEL_11;
    }
    Swift::String v10 = (uint64_t *)(v0 + 192);
    defaultLogger()();
    Swift::Bool v11 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v18))
    {
      char v14 = 0;
      char v5 = 0;
      goto LABEL_10;
    }
    Swift::Bool v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::Bool v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v18, "Forcing cv result to failure due to internal defaults setting", v19, 2u);
    char v14 = 0;
  }
  swift_slowDealloc();
  char v5 = v9;
LABEL_10:
  os_log_type_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v21 = *v10;
  uint64_t v22 = *(void *)(v0 + 160);

  v20(v21, v22);
  *(unsigned char *)(v0 + 324) = v14;
LABEL_11:
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  os_log_type_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v27 = *(void *)(v0 + 184);
  uint64_t v28 = *(void *)(v0 + 160);
  unint64_t v29 = *(void *)(v0 + 72);
  if (v25)
  {
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    uint64_t v30 = *(void *)(v0 + 64);
    uint64_t v31 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = sub_100110D58(v30, v29, &v36);
    uint64_t v1 = (unsigned __int8 *)(v0 + 324);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 12) = 1024;
    *(_DWORD *)(v0 + 320) = v5 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Activity runner for activity %s returning %{BOOL}d", (uint8_t *)v31, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v35(v27, v28);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v26(v27, v28);
  }
  swift_beginAccess();
  uint64_t v32 = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v33(v32);
}

uint64_t sub_1004F64B0()
{
  uint64_t v47 = v0;
  sub_10000C5E0(*(void *)(v0 + 272), *(void *)(v0 + 280));
  uint64_t v37 = *(void *)(v0 + 240);
  unint64_t v38 = *(void *)(v0 + 248);
  uint64_t v42 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v43 = *(void *)(v0 + 160);
  v44 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v39 = *(void *)(v0 + 128);
  uint64_t v41 = *(void *)(v0 + 120);
  swift_bridgeObjectRelease();
  uint64_t v5 = enum case for DIPError.Code.internalError(_:);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  v6(v1, enum case for DIPError.Code.internalError(_:), v2);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  sub_10000C5F4(v37, v38);
  v6(v1, v5, v2);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v7, v39, v4);
  defaultLogger()();
  DIPLogError(_:message:log:)();
  swift_errorRelease();
  v44(v42, v43);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v4);
  swift_errorRelease();
  *(unsigned char *)(v0 + 324) = 0;
  Swift::String v8 = self;
  id v9 = [v8 standardUserDefaults];
  v10._object = (void *)0x8000000100652050;
  v10._countAndFlagsBits = 0xD00000000000001DLL;
  Swift::Bool v11 = NSUserDefaults.internalBool(forKey:)(v10);

  if (v11)
  {
    os_log_type_t v12 = (uint64_t *)(v0 + 200);
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v13, v14))
    {
      char v16 = 1;
      goto LABEL_10;
    }
    id v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Forcing cv result to success due to internal defaults setting", v15, 2u);
    char v16 = 1;
  }
  else
  {
    id v17 = [v8 standardUserDefaults];
    v18._object = (void *)0x8000000100652070;
    v18._countAndFlagsBits = 0xD00000000000001DLL;
    Swift::Bool v19 = NSUserDefaults.internalBool(forKey:)(v18);

    if (!v19) {
      goto LABEL_11;
    }
    os_log_type_t v12 = (uint64_t *)(v0 + 192);
    defaultLogger()();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v13, v20))
    {
      char v16 = 0;
      goto LABEL_10;
    }
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v20, "Forcing cv result to failure due to internal defaults setting", v21, 2u);
    char v16 = 0;
  }
  swift_slowDealloc();
LABEL_10:
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v23 = *v12;
  uint64_t v24 = *(void *)(v0 + 160);

  v22(v23, v24);
  *(unsigned char *)(v0 + 324) = v16;
LABEL_11:
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  BOOL v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v29 = *(void *)(v0 + 184);
  uint64_t v30 = *(void *)(v0 + 160);
  unint64_t v31 = *(void *)(v0 + 72);
  if (v27)
  {
    v45 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    uint64_t v32 = *(void *)(v0 + 64);
    Swift::Bool v40 = v11;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = sub_100110D58(v32, v31, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 12) = 1024;
    *(_DWORD *)(v0 + 320) = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Activity runner for activity %s returning %{BOOL}d", (uint8_t *)v33, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v45(v29, v30);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v28(v29, v30);
  }
  swift_beginAccess();
  uint64_t v34 = *(unsigned __int8 *)(v0 + 324);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v35(v34);
}

uint64_t sub_1004F6B94(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1004F6C58, v2, 0);
}

uint64_t sub_1004F6C58()
{
  uint64_t v1 = *(void *)(v0 + 72);
  String.append(_:)(*(Swift::String *)(v0 + 56));
  *(void *)(v0 + 104) = 779510628;
  *(void *)(v0 + 112) = 0xE400000000000000;
  sub_10000C728((void *)(v1 + 112), *(void *)(v1 + 136));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1004F6D24;
  return sub_1003093D0();
}

uint64_t sub_1004F6D24(double a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 72);
  if (v1)
  {
    uint64_t v6 = sub_1004F70A0;
  }
  else
  {
    *(double *)(v4 + 136) = a1;
    uint64_t v6 = sub_1004F6E60;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1004F6E60()
{
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  sub_10000C728((void *)(v0[9] + 112), *(void *)(v0[9] + 136));
  double v4 = sub_100309AB0();
  v0[5] = &type metadata for RandomizedBackgroundActivityRunner;
  v0[6] = &off_1006F8E80;
  v0[2] = v3;
  v0[3] = v2;
  v0[4] = v1;
  uint64_t v5 = sub_10000C728(v0 + 2, (uint64_t)&type metadata for RandomizedBackgroundActivityRunner);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  double v8 = *((double *)v5 + 2);
  id v9 = (void *)swift_task_alloc();
  v0[18] = v9;
  *id v9 = v0;
  v9[1] = sub_1004F6F60;
  return sub_10013B4C0(v7, v6, v4, v8);
}

uint64_t sub_1004F6F60(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 152) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 72);
  if (v1)
  {
    uint64_t v6 = sub_1004F7298;
  }
  else
  {
    *(unsigned char *)(v4 + 160) = a1 & 1;
    uint64_t v6 = sub_1004F7224;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1004F70A0()
{
  swift_bridgeObjectRelease();
  (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for DIPError.Code.internalError(_:), v0[10]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1(0);
}

uint64_t sub_1004F7224()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 160);
  return v1(v2);
}

uint64_t sub_1004F7298()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for DIPError.Code.internalError(_:), v0[10]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1(0);
}

uint64_t sub_1004F741C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3);
  uint64_t v35 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100723318);
  __chkstk_darwin(v5 - 8);
  uint64_t v42 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPBackgroundActivitySettings();
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  __chkstk_darwin(v7);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v36 = *(void *)(v14 - 8);
  uint64_t v37 = v14;
  __chkstk_darwin(v14);
  char v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.timeIntervalSinceNow.getter();
  uint64_t v38 = v1;
  sub_10000C728((void *)(v38 + 112), *(void *)(v38 + 136));
  double v17 = sub_1003098D4();
  defaultLogger()();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  Swift::String v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v44 = v31;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v30 = v20 + 4;
    sub_1000E3D04((unint64_t *)&qword_100723330, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v43 = sub_100110D58(v21, v22, &v44);
    uint64_t v32 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(_WORD *)(v20 + 12) = 2048;
    uint64_t v43 = *(void *)&v17;
    id v9 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Scheduling cv dynamic background activity for %s with grace period %f seconds", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v37);
  uint64_t v24 = v40;
  uint64_t v23 = v41;
  uint64_t v25 = v38;
  uint64_t v26 = v39;
  DIPBackgroundActivitySettings.init()();
  DIPBackgroundActivitySettings.allowBattery.setter();
  DIPBackgroundActivitySettings.requireNetworkActivity.setter();
  sub_10000C728((void *)(v25 + 160), *(void *)(v25 + 184));
  BOOL v27 = v9;
  uint64_t v28 = (uint64_t)v42;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v42, v27, v24);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v24);
  dispatch thunk of DIPBackgroundActivityManagerProtocol.scheduleActivity(identifier:after:gracePeriod:settings:)();
  sub_1004F7B24(v28);
  if (!v23) {
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v27, v24);
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v24);
  (*(void (**)(char *, void, uint64_t))(v33 + 104))(v35, enum case for DIPError.Code.internalError(_:), v34);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1000E3D04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return swift_errorRelease();
}

uint64_t sub_1004F7AA8()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 112);
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 160);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 200);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 240);
  swift_defaultActor_destroy();

  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for CVBackgroundActivity()
{
  return self;
}

uint64_t sub_1004F7B24(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100723318);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004F7B84()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1004F7BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[4] = a3;
  v8[5] = v3 + 16;
  v8[2] = a1;
  v8[3] = a2;
  v8[1] = sub_100025D64;
  return _swift_task_switch(sub_1004F4F1C, 0, 0);
}

uint64_t sub_1004F7C80()
{
  uint64_t v2 = *((void *)v0 + 2);
  uint64_t v3 = *((void *)v0 + 3);
  double v4 = v0[4];
  uint64_t v5 = *((void *)v0 + 5);
  uint64_t v6 = *((void *)v0 + 6);
  uint64_t v7 = *((void *)v0 + 7);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_1004F7D50;
  return sub_1004F4FDC(v2, v3, v5, v6, v7, v4);
}

uint64_t sub_1004F7D50(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1004F7E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[4] = a3;
  v8[5] = v3 + 16;
  v8[2] = a1;
  v8[3] = a2;
  v8[1] = sub_10000C494;
  return _swift_task_switch(sub_1004F4D44, 0, 0);
}

unint64_t sub_1004F7F10(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    unint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004F7F9C(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  unint64_t result = swift_stdlib_random();
  if (v5 * ((double)0 * 1.11022302e-16) + a2 == a3) {
    return sub_1004F7F9C(v6, a2, a3);
  }
  return result;
}

uint64_t sub_1004F8048(double a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  id v9 = (char *)&v30 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v30 - v14;
  if (a1 >= 1.0)
  {
    defaultLogger()();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v21, v25))
    {
      uint64_t v24 = 1;
      goto LABEL_17;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v25, "Check chance is >= 1.0, returning true", v26, 2u);
    uint64_t v24 = 1;
  }
  else
  {
    if (a1 <= 0.0)
    {
      defaultLogger()();
      char v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        Swift::String v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Check chance is <= 0.0, returning false", v18, 2u);
        swift_slowDealloc();
      }

      uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    }
    sub_1004F7F9C(v13, 0.0, 1.0);
    double v20 = v19;
    if (v19 >= a1)
    {
      defaultLogger()();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v21, v27))
      {
        uint64_t v24 = 0;
        uint64_t v15 = v6;
        goto LABEL_17;
      }
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 134218240;
      double v31 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2048;
      double v31 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v27, "Comparing random %f to check chance %f, returning false", (uint8_t *)v28, 0x16u);
      uint64_t v24 = 0;
      uint64_t v15 = v6;
    }
    else
    {
      defaultLogger()();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v21, v22))
      {
        uint64_t v24 = 1;
        uint64_t v15 = v9;
        goto LABEL_17;
      }
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134218240;
      double v31 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2048;
      double v31 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Comparing random %f to check chance %f, returning true", (uint8_t *)v23, 0x16u);
      uint64_t v24 = 1;
      uint64_t v15 = v9;
    }
  }
  swift_slowDealloc();
LABEL_17:

  (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v2);
  return v24;
}

uint64_t sub_1004F8454()
{
  uint64_t v0 = sub_100007764(&qword_100723600);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v16 - v8;
  DIPError.Code.init(rawValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_1001746FC((uint64_t)v2);
    return -8000;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v11 == enum case for DIPError.Code.cloudkitCancelRequestedByClient(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return -8007;
  }
  else
  {
    int v12 = v11;
    if (v11 == enum case for DIPError.Code.untrustedCertificate(_:)
      || v11 == enum case for DIPError.Code.secTrustGetCertificateFailure(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      return -8002;
    }
    else if (v11 == enum case for DIPError.Code.docUploadNoAssetsProvided(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      return -8005;
    }
    else if (v11 == enum case for DIPError.Code.docUploadUnrecognizedRecipient(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      return -8004;
    }
    else if (v11 == enum case for DIPError.Code.docUploadUnrecognizedAssetType(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      return -8006;
    }
    else
    {
      int v14 = enum case for DIPError.Code.docUploadUnrecognizedEncryptionAlgorithm(_:);
      uint64_t v15 = *(void (**)(char *, uint64_t))(v4 + 8);
      v15(v9, v3);
      if (v12 != v14)
      {
        v15(v7, v3);
        return -8000;
      }
      return -8008;
    }
  }
}

uint64_t sub_1004F8810()
{
  uint64_t v0 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  sub_10004440C(v3, qword_1007607F0);
  uint64_t v4 = sub_1000443D4(v3, (uint64_t)qword_1007607F0);
  URL.init(string:)();
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

uint64_t sub_1004F8940()
{
  uint64_t v0 = type metadata accessor for URL();
  sub_10004440C(v0, qword_100760808);
  sub_1000443D4(v0, (uint64_t)qword_100760808);
  if (qword_10071F588 != -1) {
    swift_once();
  }
  sub_1000443D4(v0, (uint64_t)qword_1007607F0);
  return URL.appendingPathComponent(_:)();
}

uint64_t sub_1004F89F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v1 - 8);
  uint64_t v39 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v34 - v5;
  uint64_t v7 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  int v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v34 - v15;
  id v17 = [self standardUserDefaults];
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v17 stringForKey:v18];

  if (!v19)
  {
LABEL_9:
    if (qword_10071F590 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_1000443D4(v10, (uint64_t)qword_100760808);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v40, v32, v10);
  }
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  sub_10043E3CC(v20, v22, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100106158((uint64_t)v9);
    defaultLogger()();
    swift_bridgeObjectRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v25 = 136446210;
      uint64_t v37 = v25 + 4;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_100110D58(v20, v22, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Not using bootstrap base url %{public}s from user defaults because it is not valid", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v39);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = *(uint8_t **)(v11 + 32);
  ((void (*)(char *, char *, uint64_t))v26)(v16, v9, v10);
  defaultLogger()();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  os_log_type_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v42 = v36;
    uint64_t v37 = v26;
    *(_DWORD *)uint64_t v29 = 136446210;
    v34[1] = v29 + 4;
    uint64_t v35 = v29;
    uint64_t v30 = URL.absoluteString.getter();
    uint64_t v41 = sub_100110D58(v30, v31, &v42);
    uint64_t v26 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Using bootstrap base url from defaults: %{public}s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v39);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v40, v16, v10);
}

void sub_1004F8FD0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v42 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v13 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v42 - v21;
  if (a2)
  {
    sub_10043E3CC(a1, a2, v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    {
      sub_100106158((uint64_t)v15);
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v47 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v25 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v46 = sub_100110D58(a1, a2, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Not setting bootstrap to %{public}s because it is not a valid HTTPS url", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v45);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
      defaultLogger()();
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
      unint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v47 = v43;
        *(_DWORD *)uint64_t v33 = 136446210;
        uint64_t v42 = v33 + 4;
        uint64_t v34 = URL.absoluteString.getter();
        uint64_t v46 = sub_100110D58(v34, v35, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v36 = v20;
        uint64_t v37 = *(void (**)(char *, uint64_t))(v17 + 8);
        v37(v36, v16);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Setting bootstrap base URL to %{public}s", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v38 = v20;
        uint64_t v37 = *(void (**)(char *, uint64_t))(v17 + 8);
        v37(v38, v16);
      }

      (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
      id v39 = [self standardUserDefaults];
      URL.absoluteString.getter();
      NSString v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v41 = String._bridgeToObjectiveC()();
      [v39 setObject:v40 forKey:v41];

      v37(v22, v16);
    }
  }
  else
  {
    defaultLogger()();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Clearing bootstrap base URL", v28, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v45);
    id v29 = [self standardUserDefaults];
    NSString v30 = String._bridgeToObjectiveC()();
    [v29 removeObjectForKey:v30];
  }
}

void sub_1004F9670(uint64_t a1, unint64_t a2)
{
}

ValueMetadata *type metadata accessor for BootstrapURLManager()
{
  return &type metadata for BootstrapURLManager;
}

void sub_1004F9698()
{
  off_100730F20 = &_swiftEmptyArrayStorage;
}

uint64_t sub_1004F96AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  type metadata accessor for IdentityProofingDatabaseProvider();
  *(void *)(v9 + 40) = swift_allocObject();
  *(void *)(v9 + 72) = 2;
  *(void *)(v9 + 88) = 0;
  *(void *)(v9 + 112) = dispatch_group_create();
  *(void *)(v9 + 120) = dispatch_semaphore_create(0);
  *(void *)(v9 + 128) = 0x4024000000000000;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(void *)(v9 + 168) = 0;
  uint64_t v17 = v9 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_staticWorkflow;
  uint64_t v18 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(void *)(v9 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_supplementalDataFetcher) = 0;
  uint64_t v19 = (_OWORD *)(v9 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_identityKeyPair);
  _OWORD *v19 = 0u;
  v19[1] = 0u;
  v19[2] = 0u;
  *(void *)(v9 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_cloudKitUploadsMaxRetryCount) = 3;
  uint64_t v20 = (void *)(v9 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_termsAndConditions);
  void *v20 = 0;
  v20[1] = 0;
  *(void *)(v9 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_biomeFedStatsFieldsToCollect) = 0;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = a5;
  *(void *)(v9 + 48) = a3;
  *(void *)(v9 + 56) = a4;
  *(void *)(v9 + 80) = a6;
  *(void *)(v9 + 96) = a7;
  *(void *)(v9 + 104) = a8;
  *(void *)(v9 + 64) = a9;
  return v9;
}

uint64_t sub_1004F981C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100048D6C(a1, (uint64_t)v16, &qword_1007284E8);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  sub_1000BEA14((uint64_t)v16, v11 + 24, &qword_1007284E8);
  aBlock[4] = sub_100503444;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_1007078B0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_1005033B4((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_10013FE88();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_1004F9AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = a2;
    uint64_t v11 = (uint8_t *)v10;
    v16[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v15 = sub_100110D58(0xD000000000000020, 0x8000000100652850, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s updating with new workflow", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v14;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess();
  sub_100503450(a2, a1 + 136);
  return swift_endAccess();
}

uint64_t sub_1004F9CF0(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[11] = 0;
  swift_errorRelease();
  dispatch_group_enter((dispatch_group_t)v3[10]);
  v19[0] = v3[12];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v3;
  *(void *)(v15 + 24) = a1;
  *(unsigned char *)(v15 + 32) = a2;
  *(void *)(v15 + 40) = v6;
  aBlock[4] = sub_100503284;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100593800;
  aBlock[3] = &unk_100707838;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  id v17 = a1;
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_1005033B4((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_10013FE88();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_1004F9FDC(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10071F558 != -1) {
    swift_once();
  }
  sub_100446248();
  if (qword_10071F600 != -1) {
    swift_once();
  }
  sub_1005EA994();
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  *(unsigned char *)(v12 + 48) = a3 & 1;
  *(void *)(v12 + 56) = a4;
  swift_retain();
  id v13 = a2;
  sub_10014043C((uint64_t)v10, (uint64_t)&unk_100731340, v12);
  return swift_release();
}

uint64_t sub_1004FA178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 496) = a6;
  *(void *)(v6 + 264) = a4;
  *(void *)(v6 + 272) = a5;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  *(void *)(v6 + 280) = v7;
  *(void *)(v6 + 288) = *(void *)(v7 - 8);
  *(void *)(v6 + 296) = swift_task_alloc();
  *(void *)(v6 + 304) = swift_task_alloc();
  *(void *)(v6 + 312) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPError();
  *(void *)(v6 + 320) = v8;
  *(void *)(v6 + 328) = *(void *)(v8 - 8);
  *(void *)(v6 + 336) = swift_task_alloc();
  *(void *)(v6 + 344) = swift_task_alloc();
  *(void *)(v6 + 352) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v6 + 360) = v9;
  *(void *)(v6 + 368) = *(void *)(v9 - 8);
  *(void *)(v6 + 376) = swift_task_alloc();
  *(void *)(v6 + 384) = swift_task_alloc();
  *(void *)(v6 + 392) = swift_task_alloc();
  *(void *)(v6 + 400) = swift_task_alloc();
  return _swift_task_switch(sub_1004FA354, 0, 0);
}

uint64_t sub_1004FA354()
{
  v0[51] = *(void *)(v0[33] + 24);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[52] = v1;
  void *v1 = v0;
  v1[1] = sub_1004FA414;
  uint64_t v2 = v0[34];
  return sub_1005E068C((uint64_t)(v0 + 18), v2);
}

uint64_t sub_1004FA414()
{
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004FB4D4;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1004FA530;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004FA530()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[34];
  sub_100030A10((uint64_t)(v0 + 18), (uint64_t)(v0 + 13));
  sub_1000BEA14((uint64_t)(v0 + 13), (uint64_t)(v0 + 8), &qword_1007284E8);
  swift_beginAccess();
  sub_1001D9214((uint64_t)(v0 + 8), v1 + 136, &qword_1007284E8);
  swift_endAccess();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[54] = v3;
  void *v3 = v0;
  v3[1] = sub_1004FA654;
  return sub_1004FD028((uint64_t)(v0 + 2), (uint64_t)(v0 + 18), v2);
}

uint64_t sub_1004FA654()
{
  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004FBB68;
  }
  else {
    uint64_t v2 = sub_1004FA768;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004FA768()
{
  uint64_t v1 = *(void *)(v0 + 440);
  sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v2 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()();
  *(void *)(v0 + 448) = v2;
  *(void *)(v0 + 456) = v3;
  if (v1)
  {
    sub_1001FEFEC(v0 + 16);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 144);
    *(void *)(v0 + 240) = v1;
    swift_errorRetain();
    sub_100007764((uint64_t *)&unk_100723450);
    if (swift_dynamicCast())
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 328) + 32))(*(void *)(v0 + 344), *(void *)(v0 + 352), *(void *)(v0 + 320));
      if (qword_10071F598 != -1) {
        goto LABEL_28;
      }
      while (1)
      {
        uint64_t v4 = (char *)off_100730F20;
        swift_bridgeObjectRetain();
        DIPError.code.getter();
        uint64_t v59 = *((void *)v4 + 2);
        if (!v59)
        {
          uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 288) + 8);
LABEL_19:
          uint64_t v30 = *(void *)(v0 + 344);
          uint64_t v32 = *(void *)(v0 + 320);
          uint64_t v31 = *(void *)(v0 + 328);
          v11(*(void *)(v0 + 312), *(void *)(v0 + 280));
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
          goto LABEL_20;
        }
        uint64_t v5 = *(void *)(v0 + 304);
        uint64_t v7 = *(void *)(v0 + 280);
        uint64_t v6 = *(void *)(v0 + 288);
        unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        v57 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 16);
        v57(v5, &v4[v8], v7);
        sub_1005033B4(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
        swift_bridgeObjectRetain();
        char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v10 = v7;
        uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
        v11(v5, v10);
        if (v9) {
          break;
        }
        if (v59 == 1)
        {
LABEL_18:
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
        uint64_t v54 = *(void *)(*(void *)(v0 + 288) + 72);
        unint64_t v22 = &v4[v54 + v8];
        uint64_t v23 = 1;
        while (1)
        {
          v57(*(void *)(v0 + 304), v22, *(void *)(v0 + 280));
          uint64_t v24 = v23 + 1;
          if (__OFADD__(v23, 1)) {
            break;
          }
          os_log_type_t v25 = v11;
          uint64_t v26 = *(void *)(v0 + 304);
          uint64_t v27 = *(void *)(v0 + 280);
          char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v29 = v26;
          uint64_t v11 = v25;
          v25(v29, v27);
          if (v28) {
            goto LABEL_26;
          }
          ++v23;
          v22 += v54;
          if (v24 == v59) {
            goto LABEL_18;
          }
        }
        __break(1u);
LABEL_28:
        swift_once();
      }
LABEL_26:
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void *)(v0 + 344);
      uint64_t v51 = *(void *)(v0 + 320);
      uint64_t v52 = *(void *)(v0 + 328);
      v11(*(void *)(v0 + 312), *(void *)(v0 + 280));
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
      swift_errorRelease();
    }
    else
    {
LABEL_20:
      uint64_t v58 = *(void *)(v0 + 368);
      uint64_t v60 = *(void *)(v0 + 360);
      uint64_t v33 = *(void *)(v0 + 328);
      uint64_t v53 = *(void *)(v0 + 336);
      uint64_t v55 = *(void *)(v0 + 376);
      uint64_t v34 = *(void *)(v0 + 320);
      uint64_t v35 = *(void *)(v0 + 288);
      uint64_t v36 = *(void *)(v0 + 296);
      uint64_t v37 = *(void *)(v0 + 280);
      uint64_t v56 = *(void *)(v0 + 264);
      swift_errorRelease();
      swift_getErrorValue();
      Error.localizedDescription.getter();
      sub_100502310();
      (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))(v36, enum case for DIPError.Code.internalError(_:), v37);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v38, v53, v34);
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v55, v60);
      swift_errorRelease();
      uint64_t v39 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v40, v53, v34);
      swift_errorRelease();
      *(void *)(v56 + 88) = v39;
    }
    swift_errorRelease();
    uint64_t v41 = *(void *)(v0 + 264);
    dispatch_group_leave(*(dispatch_group_t *)(v41 + 80));
    id v42 = *(id *)(v41 + 120);
    OS_dispatch_semaphore.signal()();

    defaultLogger()();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Signaling Dynamic WF Lock", v45, 2u);
      swift_slowDealloc();
    }
    uint64_t v46 = *(void *)(v0 + 384);
    uint64_t v47 = *(void *)(v0 + 360);
    uint64_t v48 = *(void *)(v0 + 368);

    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v49 = *(uint64_t (**)(void))(v0 + 8);
    return v49();
  }
  else
  {
    uint64_t v12 = v2;
    unint64_t v13 = v3;
    uint64_t v14 = *(void *)(v0 + 264);
    id v15 = (id)PKPassKitCoreBundle();
    type metadata accessor for SupplementalDeviceDataFetcher();
    swift_allocObject();
    sub_10002CEB0(v12, v13);
    uint64_t v16 = sub_10013E188(63, v12, v13, v15);
    uint64_t v17 = OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_supplementalDataFetcher;
    *(void *)(v14 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_supplementalDataFetcher) = v16;
    swift_release();
    uint64_t v18 = *(void *)(v14 + v17);
    if (v18)
    {
      swift_retain();
      sub_10013E3B8();
      swift_release();
      uint64_t v18 = *(void *)(v14 + v17);
    }
    *(void *)(v0 + 464) = v18;
    *(void *)(v0 + 472) = *(void *)(*(void *)(v0 + 264) + 32);
    swift_retain();
    swift_retain();
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v19;
    void *v19 = v0;
    v19[1] = sub_1004FAF64;
    char v20 = *(unsigned char *)(v0 + 496);
    return sub_100294B40(v0 + 144, v0 + 16, v20, v18);
  }
}

uint64_t sub_1004FAF64()
{
  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1004FC1FC;
  }
  else {
    uint64_t v2 = sub_1004FB0B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004FB0B4()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  sub_10000C728(v0 + 18, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
  if (v4)
  {
    defaultLogger()();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v15 = 134217984;
      v0[31] = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "using default cloudKitMaxRetryCount: %ld as workflow cloudKitMaxRetryCount is nil.", v15, 0xCu);
      swift_slowDealloc();
    }
    uint64_t v16 = v0[50];
    uint64_t v17 = v0[45];
    uint64_t v18 = v0[46];

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  }
  else
  {
    uint64_t v5 = v3;
    defaultLogger()();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 134217984;
      v0[32] = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "using workflow received defaultCloudKitRetryCount: %ld", v8, 0xCu);
      swift_slowDealloc();
    }
    uint64_t v9 = v0[49];
    uint64_t v10 = v0[45];
    uint64_t v11 = v0[46];
    uint64_t v12 = v0[33];

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    *(void *)(v12 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_cloudKitUploadsMaxRetryCount) = v5;
  }
  uint64_t v19 = v0[21];
  uint64_t v20 = v0[22];
  sub_10000C728(v0 + 18, v19);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 72))(v19, v20);
  if ((v22 & 1) == 0) {
    *(void *)(v0[33] + 72) = v21;
  }
  if (qword_10071F4C0 != -1) {
    swift_once();
  }
  uint64_t v24 = v0[56];
  unint64_t v23 = v0[57];
  sub_1001F5B2C(*(void *)(v0[33]
                          + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_cloudKitUploadsMaxRetryCount));
  sub_10000C5F4(v24, v23);
  sub_1001FEFEC((uint64_t)(v0 + 2));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 18));
  uint64_t v25 = v0[33];
  dispatch_group_leave(*(dispatch_group_t *)(v25 + 80));
  id v26 = *(id *)(v25 + 120);
  OS_dispatch_semaphore.signal()();

  defaultLogger()();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Signaling Dynamic WF Lock", v29, 2u);
    swift_slowDealloc();
  }
  uint64_t v30 = v0[48];
  uint64_t v31 = v0[45];
  uint64_t v32 = v0[46];

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t sub_1004FB4D4()
{
  swift_release();
  v0[30] = v0[53];
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void, void))(v0[41] + 32))(v0[43], v0[44], v0[40]);
    if (qword_10071F598 != -1) {
      goto LABEL_22;
    }
    while (1)
    {
      uint64_t v1 = swift_bridgeObjectRetain();
      DIPError.code.getter();
      uint64_t v47 = *(void *)(v1 + 16);
      if (!v47)
      {
        unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[36] + 8);
LABEL_13:
        uint64_t v17 = v0[43];
        uint64_t v19 = v0[40];
        uint64_t v18 = v0[41];
        v8(v0[39], v0[35]);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
        goto LABEL_14;
      }
      uint64_t v2 = v0[38];
      uint64_t v4 = v0[35];
      uint64_t v3 = v0[36];
      unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      os_log_type_t v44 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
      v44(v2, v1 + v5, v4);
      sub_1005033B4(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
      swift_bridgeObjectRetain();
      char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v7 = v4;
      unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v8(v2, v7);
      if (v6) {
        break;
      }
      if (v47 == 1)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      uint64_t v41 = *(void *)(v0[36] + 72);
      unint64_t v9 = v1 + v41 + v5;
      uint64_t v10 = 1;
      while (1)
      {
        v44(v0[38], v9, v0[35]);
        uint64_t v11 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          break;
        }
        uint64_t v12 = v8;
        uint64_t v13 = v0[38];
        uint64_t v14 = v0[35];
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v16 = v13;
        unint64_t v8 = v12;
        v12(v16, v14);
        if (v15) {
          goto LABEL_20;
        }
        ++v10;
        v9 += v41;
        if (v11 == v47) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_22:
      swift_once();
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v38 = v0[43];
    uint64_t v39 = v0[40];
    uint64_t v40 = v0[41];
    v8(v0[39], v0[35]);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    swift_errorRelease();
  }
  else
  {
LABEL_14:
    uint64_t v48 = v0[45];
    uint64_t v20 = v0[41];
    uint64_t v42 = v0[42];
    uint64_t v43 = v0[47];
    uint64_t v21 = v0[40];
    uint64_t v22 = v0[36];
    uint64_t v23 = v0[37];
    uint64_t v24 = v0[35];
    uint64_t v45 = v0[33];
    uint64_t v46 = v0[46];
    swift_errorRelease();
    swift_getErrorValue();
    Error.localizedDescription.getter();
    sub_100502310();
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v23, enum case for DIPError.Code.internalError(_:), v24);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v25, v42, v21);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v43, v48);
    swift_errorRelease();
    uint64_t v26 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v27, v42, v21);
    swift_errorRelease();
    *(void *)(v45 + 88) = v26;
  }
  swift_errorRelease();
  uint64_t v28 = v0[33];
  dispatch_group_leave(*(dispatch_group_t *)(v28 + 80));
  id v29 = *(id *)(v28 + 120);
  OS_dispatch_semaphore.signal()();

  defaultLogger()();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Signaling Dynamic WF Lock", v32, 2u);
    swift_slowDealloc();
  }
  uint64_t v33 = v0[48];
  uint64_t v34 = v0[45];
  uint64_t v35 = v0[46];

  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_1004FBB68()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 18));
  v0[30] = v0[55];
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void, void))(v0[41] + 32))(v0[43], v0[44], v0[40]);
    if (qword_10071F598 != -1) {
      goto LABEL_22;
    }
    while (1)
    {
      uint64_t v1 = swift_bridgeObjectRetain();
      DIPError.code.getter();
      uint64_t v47 = *(void *)(v1 + 16);
      if (!v47)
      {
        unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[36] + 8);
LABEL_13:
        uint64_t v17 = v0[43];
        uint64_t v19 = v0[40];
        uint64_t v18 = v0[41];
        v8(v0[39], v0[35]);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
        goto LABEL_14;
      }
      uint64_t v2 = v0[38];
      uint64_t v4 = v0[35];
      uint64_t v3 = v0[36];
      unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      os_log_type_t v44 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
      v44(v2, v1 + v5, v4);
      sub_1005033B4(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
      swift_bridgeObjectRetain();
      char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v7 = v4;
      unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v8(v2, v7);
      if (v6) {
        break;
      }
      if (v47 == 1)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      uint64_t v41 = *(void *)(v0[36] + 72);
      unint64_t v9 = v1 + v41 + v5;
      uint64_t v10 = 1;
      while (1)
      {
        v44(v0[38], v9, v0[35]);
        uint64_t v11 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          break;
        }
        uint64_t v12 = v8;
        uint64_t v13 = v0[38];
        uint64_t v14 = v0[35];
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v16 = v13;
        unint64_t v8 = v12;
        v12(v16, v14);
        if (v15) {
          goto LABEL_20;
        }
        ++v10;
        v9 += v41;
        if (v11 == v47) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_22:
      swift_once();
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v38 = v0[43];
    uint64_t v39 = v0[40];
    uint64_t v40 = v0[41];
    v8(v0[39], v0[35]);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    swift_errorRelease();
  }
  else
  {
LABEL_14:
    uint64_t v48 = v0[45];
    uint64_t v20 = v0[41];
    uint64_t v42 = v0[42];
    uint64_t v43 = v0[47];
    uint64_t v21 = v0[40];
    uint64_t v22 = v0[36];
    uint64_t v23 = v0[37];
    uint64_t v24 = v0[35];
    uint64_t v45 = v0[33];
    uint64_t v46 = v0[46];
    swift_errorRelease();
    swift_getErrorValue();
    Error.localizedDescription.getter();
    sub_100502310();
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v23, enum case for DIPError.Code.internalError(_:), v24);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v25, v42, v21);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v43, v48);
    swift_errorRelease();
    uint64_t v26 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v27, v42, v21);
    swift_errorRelease();
    *(void *)(v45 + 88) = v26;
  }
  swift_errorRelease();
  uint64_t v28 = v0[33];
  dispatch_group_leave(*(dispatch_group_t *)(v28 + 80));
  id v29 = *(id *)(v28 + 120);
  OS_dispatch_semaphore.signal()();

  defaultLogger()();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Signaling Dynamic WF Lock", v32, 2u);
    swift_slowDealloc();
  }
  uint64_t v33 = v0[48];
  uint64_t v34 = v0[45];
  uint64_t v35 = v0[46];

  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_1004FC1FC()
{
  sub_10000C5F4(v0[56], v0[57]);
  sub_1001FEFEC((uint64_t)(v0 + 2));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 18));
  v0[30] = v0[61];
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void, void))(v0[41] + 32))(v0[43], v0[44], v0[40]);
    if (qword_10071F598 != -1) {
      goto LABEL_22;
    }
    while (1)
    {
      uint64_t v1 = swift_bridgeObjectRetain();
      DIPError.code.getter();
      uint64_t v47 = *(void *)(v1 + 16);
      if (!v47)
      {
        unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[36] + 8);
LABEL_13:
        uint64_t v17 = v0[43];
        uint64_t v19 = v0[40];
        uint64_t v18 = v0[41];
        v8(v0[39], v0[35]);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
        goto LABEL_14;
      }
      uint64_t v2 = v0[38];
      uint64_t v4 = v0[35];
      uint64_t v3 = v0[36];
      unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      os_log_type_t v44 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
      v44(v2, v1 + v5, v4);
      sub_1005033B4(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
      swift_bridgeObjectRetain();
      char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v7 = v4;
      unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v8(v2, v7);
      if (v6) {
        break;
      }
      if (v47 == 1)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      uint64_t v41 = *(void *)(v0[36] + 72);
      unint64_t v9 = v1 + v41 + v5;
      uint64_t v10 = 1;
      while (1)
      {
        v44(v0[38], v9, v0[35]);
        uint64_t v11 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          break;
        }
        uint64_t v12 = v8;
        uint64_t v13 = v0[38];
        uint64_t v14 = v0[35];
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v16 = v13;
        unint64_t v8 = v12;
        v12(v16, v14);
        if (v15) {
          goto LABEL_20;
        }
        ++v10;
        v9 += v41;
        if (v11 == v47) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_22:
      swift_once();
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v38 = v0[43];
    uint64_t v39 = v0[40];
    uint64_t v40 = v0[41];
    v8(v0[39], v0[35]);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    swift_errorRelease();
  }
  else
  {
LABEL_14:
    uint64_t v48 = v0[45];
    uint64_t v20 = v0[41];
    uint64_t v42 = v0[42];
    uint64_t v43 = v0[47];
    uint64_t v21 = v0[40];
    uint64_t v22 = v0[36];
    uint64_t v23 = v0[37];
    uint64_t v24 = v0[35];
    uint64_t v45 = v0[33];
    uint64_t v46 = v0[46];
    swift_errorRelease();
    swift_getErrorValue();
    Error.localizedDescription.getter();
    sub_100502310();
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v23, enum case for DIPError.Code.internalError(_:), v24);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v25, v42, v21);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v43, v48);
    swift_errorRelease();
    uint64_t v26 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v27, v42, v21);
    swift_errorRelease();
    *(void *)(v45 + 88) = v26;
  }
  swift_errorRelease();
  uint64_t v28 = v0[33];
  dispatch_group_leave(*(dispatch_group_t *)(v28 + 80));
  id v29 = *(id *)(v28 + 120);
  OS_dispatch_semaphore.signal()();

  defaultLogger()();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Signaling Dynamic WF Lock", v32, 2u);
    swift_slowDealloc();
  }
  uint64_t v33 = v0[48];
  uint64_t v34 = v0[45];
  uint64_t v35 = v0[46];

  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_1004FC8A8(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  sub_100007764(&qword_10072F9B8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_1004FCA10, 0, 0);
}

uint64_t sub_1004FCA10()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[9];
  uint64_t v5 = OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_staticWorkflow;
  v0[19] = OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_staticWorkflow;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  sub_100048D6C(v6, v1, &qword_10072F9B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v7 = v0[9];
    sub_10000C6CC(v0[18], &qword_10072F9B8);
    v0[20] = *(void *)(v7 + 24);
    swift_retain();
    sub_10052E944();
    swift_release();
    v0[21] = sub_10052E944();
    unint64_t v8 = (void *)swift_task_alloc();
    v0[22] = v8;
    *unint64_t v8 = v0;
    v8[1] = sub_1004FCC04;
    uint64_t v9 = v0[15];
    return sub_10052DED8(v9, 0xD000000000000024, 0x800000010062AD00, 0xD000000000000027, 0x800000010062AD30);
  }
  else
  {
    sub_100502B04(v0[18], v0[8]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1004FCC04()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004FCE64;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1004FCD20;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004FCD20()
{
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = v0[13];
  uint64_t v7 = v0[9];
  swift_release();
  sub_100275DC4(v4, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v6);
  sub_1000BEA14(v2, v3, &qword_10072F9B8);
  swift_beginAccess();
  sub_1001D9214(v3, v7 + v1, &qword_10072F9B8);
  swift_endAccess();
  sub_100502B04(v0[15], v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1004FCE64()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004FD028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[32] = a3;
  v4[33] = v3;
  v4[30] = a1;
  v4[31] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[34] = v5;
  v4[35] = *(void *)(v5 - 8);
  v4[36] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for KeystoreKeyType();
  v4[37] = v6;
  v4[38] = *(void *)(v6 - 8);
  v4[39] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[40] = v7;
  v4[41] = *(void *)(v7 - 8);
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  return _swift_task_switch(sub_1004FD1B4, 0, 0);
}

uint64_t sub_1004FD1B4()
{
  uint64_t v1 = v0[32];
  type metadata accessor for DIPKeystoreManager();
  uint64_t inited = swift_initStackObject();
  v0[44] = inited;
  *(void *)(inited + 16) = sub_10015CDA0((uint64_t)_swiftEmptyArrayStorage);
  *(unsigned char *)(inited + 24) = 2;
  if (v1)
  {
    uint64_t v3 = IdentityProofingConfiguration.state.getter();
    if (v4)
    {
      uint64_t v5 = v3;
      uint64_t v6 = v4;
      type metadata accessor for IdentityProofingDataContext();
      swift_allocObject();
      swift_retain();
      sub_1000FF820();
      uint64_t v8 = v7;
      uint64_t v9 = (void *)swift_allocObject();
      v9[2] = 0;
      v9[3] = 0;
      v9[4] = 0;
      uint64_t v10 = (void *)swift_allocObject();
      v10[2] = v8;
      v10[3] = v5;
      v10[4] = v6;
      v10[5] = 1;
      v10[6] = 0;
      v10[7] = 0;
      v10[8] = v9;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1000FFE3C((uint64_t)sub_100276DF8, (uint64_t)v10);
      swift_release();
      swift_release();
      swift_beginAccess();
      if (v9[3])
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        defaultLogger()();
        uint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "No existing proofing session; deleting existing keys and certificates for a fresh start",
            v13,
            2u);
          swift_slowDealloc();
        }
        uint64_t v14 = v0[43];
        uint64_t v15 = v0[40];
        uint64_t v16 = v0[41];

        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
        sub_100127D94(0x61746E6567616DLL, 0xE700000000000000);
      }
    }
  }
  uint64_t v18 = v0[38];
  uint64_t v17 = v0[39];
  uint64_t v19 = v0[37];
  uint64_t v20 = (void *)v0[31];
  uint64_t v21 = v20[3];
  uint64_t v22 = v20[4];
  sub_10000C728(v20, v21);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v21, v22);
  v0[45] = v23;
  (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, enum case for KeystoreKeyType.extended(_:), v19);
  uint64_t v24 = (void *)swift_task_alloc();
  v0[46] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_1004FD718;
  uint64_t v25 = v0[39];
  return sub_10012571C((uint64_t)(v0 + 2), 0x61746E6567616DLL, 0xE700000000000000, v23, v25);
}

uint64_t sub_1004FD718()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[38] + 8))(v2[39], v2[37]);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v3 = sub_1004FD9D4;
  }
  else {
    uint64_t v3 = sub_1004FD89C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004FD89C()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(_OWORD **)(v0 + 240);
  swift_release();
  sub_100262850(v0 + 16, v0 + 64);
  sub_1000BEA14(v0 + 64, v0 + 112, &qword_100727FC8);
  uint64_t v3 = v1 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_identityKeyPair;
  swift_beginAccess();
  sub_1001D9214(v0 + 112, v3, &qword_100727FC8);
  swift_endAccess();
  long long v4 = *(_OWORD *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 48);
  v2[1] = *(_OWORD *)(v0 + 32);
  v2[2] = v5;
  *uint64_t v2 = v4;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1004FD9D4()
{
  swift_release();
  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = v0[34];
  swift_errorRetain();
  sub_100502310();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  type metadata accessor for DIPError();
  sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004FDB80(uint64_t a1)
{
  uint64_t v82 = v1;
  uint64_t v83 = v2;
  uint64_t v80 = __chkstk_darwin(a1);
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v78 = *(void *)(v3 - 8);
  uint64_t v79 = v3;
  __chkstk_darwin(v3);
  v81 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_10072F9B8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  uint64_t v77 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v84 = *(void *)(v11 - 8);
  uint64_t v85 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v72 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v72 - v18;
  type metadata accessor for IdentityProofingImageQualitySettingsProvider();
  uint64_t v20 = (int64x2_t *)swift_allocObject();
  v20[1] = vdupq_n_s64(5uLL);
  v20[2].i64[0] = 5;
  v20[2].i32[2] = 1036831949;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v21 = JSONEncoder.init()();
  v86 = v20;
  v20[3].i64[0] = v21;
  id v22 = [self standardUserDefaults];
  v23._countAndFlagsBits = 0xD000000000000025;
  v23._object = (void *)0x80000001006526E0;
  LOBYTE(v20) = NSUserDefaults.internalBool(forKey:)(v23);

  if ((v20 & 1) == 0)
  {
    uint64_t v75 = v8;
    v76 = v14;
    v73 = v10;
    v74 = v7;
    defaultLogger()();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Waiting for Dynamic WF Lock", v30, 2u);
      swift_slowDealloc();
    }

    uint64_t v31 = v85;
    uint64_t v32 = *(void (**)(char *, uint64_t))(v84 + 8);
    v32(v17, v85);
    uint64_t v33 = v82;
    id v34 = *(id *)(v82 + 120);
    OS_dispatch_semaphore.wait(interval:)();

    char v35 = static DispatchTimeoutResult.== infix(_:_:)();
    uint64_t v36 = (uint64_t)v76;
    if (v35)
    {
      defaultLogger()();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Wait for dynamic workflow timed out", v39, 2u);
        uint64_t v33 = v82;
        swift_slowDealloc();
      }

      v32((char *)v36, v31);
    }
    static DispatchTimeoutResult.== infix(_:_:)();
    swift_beginAccess();
    sub_100048D6C(v33 + 136, (uint64_t)v89, &qword_1007284E8);
    uint64_t v40 = v90;
    if (v90)
    {
      uint64_t v41 = v91;
      uint64_t v42 = sub_10000C728(v89, v90);
      uint64_t v43 = *(void *)(v40 - 8);
      __chkstk_darwin(v42);
      uint64_t v45 = (char *)&v72 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v43 + 16))(v45);
      sub_10000C6CC((uint64_t)v89, &qword_1007284E8);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v41 + 120))(v92, v40, v41);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v40);
      sub_1000BEA14((uint64_t)v92, (uint64_t)v96, &qword_1007222F8);
      if (sub_1000FEA40((uint64_t)v96) != 1) {
        sub_10023932C((uint64_t)v92);
      }
    }
    else
    {
      sub_10000C6CC((uint64_t)v89, &qword_1007284E8);
    }
    uint64_t v46 = v81;
    uint64_t v47 = v79;
    type metadata accessor for DaemonAnalytics();
    static DaemonAnalytics.sendImageQualitySettingsNeededEvent(providerID:wasFetchedInTime:didError:)();
    sub_100048D6C(v33 + 136, (uint64_t)&v87, &qword_1007284E8);
    if (!v88)
    {
      sub_10000C6CC((uint64_t)&v87, &qword_1007284E8);
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v46, enum case for DIPError.Code.missingIdentityWorkFlow(_:), v47);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v27 = type metadata accessor for DIPError();
      sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      goto LABEL_20;
    }
    sub_10000C6B4(&v87, (uint64_t)v89);
    uint64_t v48 = v90;
    uint64_t v49 = v91;
    sub_10000C728(v89, v90);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v49 + 120))(v93, v48, v49);
    sub_1000BEA14((uint64_t)v93, (uint64_t)v94, &qword_1007222F8);
    if (sub_1000FEA40((uint64_t)v94) == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v46, enum case for DIPError.Code.missingImageQualityModel(_:), v47);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v27 = type metadata accessor for DIPError();
      sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v89);
LABEL_20:
      id v50 = *(id *)(v33 + 120);
      OS_dispatch_semaphore.signal()();
      swift_release();

      return v27;
    }
    memcpy(v95, v94, 0x1721uLL);
    uint64_t v51 = v33 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_staticWorkflow;
    swift_beginAccess();
    uint64_t v52 = v51;
    uint64_t v53 = (uint64_t)v74;
    sub_100048D6C(v52, (uint64_t)v74, &qword_10072F9B8);
    uint64_t v54 = v75;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v53, 1, v75) == 1)
    {
      sub_10000C6CC(v53, &qword_10072F9B8);
LABEL_34:
      uint64_t v68 = v90;
      uint64_t v69 = v91;
      sub_10000C728(v89, v90);
      (*(void (**)(uint64_t, uint64_t))(v69 + 112))(v68, v69);
      uint64_t v27 = sub_1004B52F8((uint64_t)v95);
      sub_10023932C((uint64_t)v93);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v89);
      id v70 = *(id *)(v33 + 120);
      OS_dispatch_semaphore.signal()();
      swift_release();

      return v27;
    }
    uint64_t v55 = (uint64_t)v73;
    sub_100502B04(v53, (uint64_t)v73);
    uint64_t v56 = IdentityProofingConfiguration.state.getter();
    if (v57)
    {
      uint64_t v58 = v57;
      uint64_t v59 = *(void *)(v55 + *(int *)(v54 + 40));
      if (!v59)
      {
        sub_100009C98(v55);
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      uint64_t v60 = *(void *)(v59 + 16);
      if (v60)
      {
        uint64_t v61 = v56;
        uint64_t v62 = v59 + 64;
        while (1)
        {
          uint64_t v63 = *(void *)(v62 - 32);
          uint64_t v64 = *(void *)(v62 - 24);
          uint64_t v65 = *(void *)v62;
          uint64_t v66 = *(void *)(v62 + 16);
          uint64_t v77 = *(void *)(v62 - 16);
          uint64_t v78 = v66;
          uint64_t v79 = *(void *)(v62 + 24);
          v81 = *(char **)(v62 + 32);
          LODWORD(v80) = *(unsigned __int8 *)(v62 + 40);
          uint64_t v67 = *(void *)(v62 + 48);
          uint64_t v84 = *(void *)(v62 + 56);
          uint64_t v85 = v67;
          if (v63 == v61 && v58 == v64) {
            break;
          }
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            break;
          }
          v62 += 96;
          if (!--v60)
          {
            swift_bridgeObjectRelease();
            goto LABEL_37;
          }
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v76 = (char *)v65;
        sub_1000AB250(v65);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v96[743] = v77;
        dispatch thunk of CustomStringConvertible.description.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000AB1EC((uint64_t)v76);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_37:
        uint64_t v33 = v82;
        uint64_t v55 = (uint64_t)v73;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    sub_100009C98(v55);
    goto LABEL_34;
  }
  defaultLogger()();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Overriding workflow image quality settings, using internal settings.", v26, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v84 + 8))(v19, v85);
  uint64_t v27 = sub_1004BEB60();
  swift_release();
  return v27;
}

uint64_t sub_1004FE804()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v37 - v8 + 16;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v37 - v11 + 16;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v37 - v13 + 16;
  id v15 = [self standardUserDefaults];
  v16._object = (void *)0x8000000100639010;
  v16._countAndFlagsBits = 0xD00000000000003CLL;
  Swift::Bool v17 = NSUserDefaults.internalBool(forKey:)(v16);

  if (v17)
  {
    defaultLogger()();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Internal Setting -> enableStateSpecificBiomeFedStatsUI enabled. Will use debug strings.", v20, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
    swift_retain();
    uint64_t v21 = sub_10029DF54();
    swift_release();
    uint64_t v22 = *(void *)(v1 + 64);
    swift_beginAccess();
    *(void *)(v1 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_biomeFedStatsFieldsToCollect) = *(void *)(v22 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else if (sub_100502F8C())
  {
    defaultLogger()();
    Swift::String v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "IdentityProofingFetchedAssetManager has existing proofing requests, returning nil FedStatsUI", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return 0;
  }
  else
  {
    defaultLogger()();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "IdentityProofingFetchedAssetManager Waiting for Dynamic WF Lock", v28, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v29 = *(void (**)(char *, uint64_t))(v3 + 8);
    v29(v12, v2);
    id v30 = *(id *)(v1 + 120);
    OS_dispatch_semaphore.wait(interval:)();

    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      defaultLogger()();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "IdentityProofingFetchedAssetManager Wait for dynamic workflow timed out. Will fall back on the static workflow's unorderedUI", v33, 2u);
        swift_slowDealloc();
      }

      v29(v9, v2);
      uint64_t v38 = 0;
      memset(v37, 0, sizeof(v37));
      uint64_t v21 = sub_1004FF424();
    }
    else
    {
      swift_beginAccess();
      sub_100048D6C(v1 + 136, (uint64_t)v37, &qword_1007284E8);
      uint64_t v21 = sub_1004FF424();
    }
    sub_10000C6CC((uint64_t)v37, &qword_1007284E8);
    id v34 = *(id *)(v1 + 120);
    OS_dispatch_semaphore.signal()();
  }
  return v21;
}

uint64_t sub_1004FECC8()
{
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[21] = v2;
  v1[22] = *(void *)(v2 - 8);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = type metadata accessor for IdentityProofingStaticWorkflow(0);
  v1[26] = swift_task_alloc();
  return _swift_task_switch(sub_1004FEDC8, 0, 0);
}

uint64_t sub_1004FEDC8()
{
  uint64_t v1 = *(void *)(v0 + 160) + 136;
  swift_beginAccess();
  sub_100048D6C(v1, v0 + 56, &qword_1007284E8);
  if (!*(void *)(v0 + 80))
  {
    sub_10000C6CC(v0 + 56, &qword_1007284E8);
    goto LABEL_5;
  }
  sub_10000C6B4((long long *)(v0 + 56), v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  sub_10000C728((void *)(v0 + 16), v2);
  char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  if (v4 == 2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
LABEL_5:
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1004FEF6C;
    uint64_t v6 = *(void *)(v0 + 208);
    return sub_1004FC8A8(v6);
  }
  char v8 = v4;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9(v8 & 1);
}

uint64_t sub_1004FEF6C()
{
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1004FF1CC;
  }
  else {
    uint64_t v2 = sub_1004FF080;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004FF080()
{
  uint64_t v1 = v0[26];
  int v2 = *(unsigned __int8 *)(v1 + *(int *)(v0[25] + 68));
  if (v2 == 2)
  {
    defaultLogger()();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "This is an unexpected state. Static workflow should always have isBiomeFedStatsEnabled flag. Disabling isBiomeFedStatsEnabled.", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v1 = v0[26];
    uint64_t v6 = v0[24];
    uint64_t v7 = v0[21];
    uint64_t v8 = v0[22];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = v2 & 1;
  }
  sub_100009C98(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
  return v10(v9);
}

uint64_t sub_1004FF1CC()
{
  id v15 = v0;
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = v0[22];
    uint64_t v12 = v0[21];
    uint64_t v13 = v0[23];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[19] = sub_100110D58(v4, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to fetch static workflow. This is an unexpected state. Biome Fed Stats feature will remain disabled. %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  }
  else
  {
    uint64_t v7 = v0[22];
    uint64_t v6 = v0[23];
    uint64_t v8 = v0[21];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9(0);
}

uint64_t sub_1004FF424()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100007764(&qword_100727FB8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for IdentityProofingUnorderedUIElement();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v42 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v43 = (char *)&v42 - v9;
  uint64_t v10 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v47 = *(void *)(v13 - 8);
  uint64_t v48 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v44 = (char *)&v42 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v42 - v17;
  swift_beginAccess();
  sub_100048D6C(v0 + 136, (uint64_t)&v49, &qword_1007284E8);
  uint64_t v45 = v6;
  uint64_t v46 = v5;
  if (!v50)
  {
    sub_10000C6CC((uint64_t)&v49, &qword_1007284E8);
    goto LABEL_5;
  }
  sub_10000C6B4(&v49, (uint64_t)v51);
  uint64_t v20 = v52;
  uint64_t v19 = v53;
  sub_10000C728(v51, v52);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 56))(v20, v19);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v51);
  if (!v21)
  {
LABEL_5:
    defaultLogger()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Defaulting to unorderedUI from the static workflow as the dynamic workflow doesn't have the unorderedUI for biome fedstats", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v48);
    swift_retain();
    runAsyncAndBlock<A>(timeout:file:function:line:_:)();
    swift_release();
    uint64_t v21 = *(void *)&v12[*(int *)(v10 + 48)];
    swift_bridgeObjectRetain();
    sub_100009C98((uint64_t)v12);
    if (!v21) {
      goto LABEL_15;
    }
  }
  if (*(void *)(v21 + 16))
  {
    unint64_t v25 = sub_100590548(0xD000000000000016, 0x80000001006526C0);
    uint64_t v27 = v45;
    uint64_t v26 = v46;
    if (v28)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v4, *(void *)(v21 + 56) + *(void *)(v45 + 72) * v25, v46);
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = 1;
    }
  }
  else
  {
    uint64_t v29 = 1;
    uint64_t v27 = v45;
    uint64_t v26 = v46;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v4, v29, 1, v26);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v4, 1, v26) != 1)
  {
    char v35 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v36 = v43;
    v35(v43, v4, v26);
    uint64_t v37 = v42;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v42, v36, v26);
    unint64_t v38 = (*(unsigned __int8 *)(v27 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v1;
    v35((char *)(v39 + v38), v37, v26);
    swift_retain();
    sub_100007764(&qword_100731330);
    runAsyncAndBlock<A>(file:function:line:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v26);
    uint64_t v34 = v51[0];
    uint64_t v40 = *(void *)(v1 + 64);
    swift_beginAccess();
    *(void *)(v1 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_biomeFedStatsFieldsToCollect) = *(void *)(v40 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v34;
  }
  sub_10000C6CC((uint64_t)v4, &qword_100727FB8);
LABEL_15:
  id v30 = v44;
  defaultLogger()();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "UnorderedUI doesn't exist. Cannot build Biome FedStats UI", v33, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v48);
  return 0;
}

uint64_t sub_1004FFB7C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100025D64;
  return sub_1004FC8A8(a1);
}

uint64_t sub_1004FFC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  return _swift_task_switch(sub_1004FFC3C, 0, 0);
}

uint64_t sub_1004FFC3C()
{
  uint64_t v1 = v0[11];
  v0[13] = *(void *)(v1 + 64);
  uint64_t v2 = v1 + 136;
  swift_beginAccess();
  sub_100048D6C(v2, (uint64_t)(v0 + 2), &qword_1007284E8);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  void *v3 = v0;
  v3[1] = sub_1004FFD1C;
  return sub_1004FECC8();
}

uint64_t sub_1004FFD1C(char a1)
{
  uint64_t v2 = *(void *)v1 + 16;
  *(unsigned char *)(*(void *)v1 + 120) = a1;
  swift_task_dealloc();
  sub_10000C6CC(v2, &qword_1007284E8);
  return _swift_task_switch(sub_1004FFE30, 0, 0);
}

uint64_t sub_1004FFE30()
{
  uint64_t v1 = *(uint64_t **)(v0 + 80);
  uint64_t v2 = sub_10029EC3C();
  swift_release();
  uint64_t *v1 = v2;
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1004FFEB0()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  sub_100007764(&qword_100727FB8);
  v0[5] = swift_task_alloc();
  v0[6] = swift_task_alloc();
  v0[7] = type metadata accessor for IdentityProofingStaticWorkflow(0);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  void *v3 = v0;
  v3[1] = sub_100500014;
  return sub_1004FC8A8(v2);
}

uint64_t sub_100500014()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1005005D4;
  }
  else {
    uint64_t v2 = sub_100500128;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100500128()
{
  uint64_t v1 = *(void *)(v0[8] + *(int *)(v0[7] + 48));
  if (v1 && *(void *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v2 = sub_100590548(0x6F54676E69646461, 0xEE0074656C6C6157);
    uint64_t v3 = v0[6];
    if (v4)
    {
      unint64_t v5 = v2;
      uint64_t v6 = *(void *)(v1 + 56);
      uint64_t v7 = type metadata accessor for IdentityProofingUnorderedUIElement();
      uint64_t v8 = *(void *)(v7 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v3, v6 + *(void *)(v8 + 72) * v5, v7);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v3, 0, 1, v7);
    }
    else
    {
      uint64_t v7 = type metadata accessor for IdentityProofingUnorderedUIElement();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = v0[6];
    uint64_t v7 = type metadata accessor for IdentityProofingUnorderedUIElement();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v9, 1, 1, v7);
  }
  uint64_t v10 = v0[5];
  sub_100048D6C(v0[6], v10, &qword_100727FB8);
  type metadata accessor for IdentityProofingUnorderedUIElement();
  uint64_t v11 = *(void *)(v7 - 8);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1, v7);
  uint64_t v13 = v0[5];
  if (v12 == 1)
  {
    sub_10000C6CC(v0[5], &qword_100727FB8);
LABEL_16:
    uint64_t v21 = v0[8];
    uint64_t v22 = v0[6];
    (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for DIPError.Code.imageAssetsUnavailable(_:), v0[2]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C6CC(v22, &qword_100727FB8);
    sub_100009C98(v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  uint64_t v14 = (void *)IdentityProofingUnorderedUIElement.imageAssets.getter();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v7);
  if (!v14) {
    goto LABEL_16;
  }
  if (!v14[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v15 = v0[8];
  uint64_t v16 = v0[6];
  uint64_t v17 = v14[4];
  uint64_t v18 = v14[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v16, &qword_100727FB8);
  sub_100009C98(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v19(v17, v18);
}

uint64_t sub_1005005D4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100500660()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  sub_100007764(&qword_100727FB8);
  v0[5] = swift_task_alloc();
  v0[6] = swift_task_alloc();
  v0[7] = type metadata accessor for IdentityProofingStaticWorkflow(0);
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  void *v3 = v0;
  v3[1] = sub_1005007C4;
  return sub_1004FC8A8(v2);
}

uint64_t sub_1005007C4()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1005034B8;
  }
  else {
    uint64_t v2 = sub_1005008D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005008D8()
{
  uint64_t v1 = *(void *)(v0[8] + *(int *)(v0[7] + 48));
  if (v1 && *(void *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v2 = sub_100590548(0xD000000000000016, 0x80000001006525F0);
    uint64_t v3 = v0[6];
    if (v4)
    {
      unint64_t v5 = v2;
      uint64_t v6 = *(void *)(v1 + 56);
      uint64_t v7 = type metadata accessor for IdentityProofingUnorderedUIElement();
      uint64_t v8 = *(void *)(v7 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v3, v6 + *(void *)(v8 + 72) * v5, v7);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v3, 0, 1, v7);
    }
    else
    {
      uint64_t v7 = type metadata accessor for IdentityProofingUnorderedUIElement();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = v0[6];
    uint64_t v7 = type metadata accessor for IdentityProofingUnorderedUIElement();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v9, 1, 1, v7);
  }
  uint64_t v10 = v0[5];
  sub_100048D6C(v0[6], v10, &qword_100727FB8);
  type metadata accessor for IdentityProofingUnorderedUIElement();
  uint64_t v11 = *(void *)(v7 - 8);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1, v7);
  uint64_t v13 = v0[5];
  if (v12 == 1)
  {
    sub_10000C6CC(v0[5], &qword_100727FB8);
LABEL_16:
    uint64_t v21 = v0[8];
    uint64_t v22 = v0[6];
    (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for DIPError.Code.imageAssetsUnavailable(_:), v0[2]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C6CC(v22, &qword_100727FB8);
    sub_100009C98(v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  uint64_t v14 = (void *)IdentityProofingUnorderedUIElement.imageAssets.getter();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v7);
  if (!v14) {
    goto LABEL_16;
  }
  if (!v14[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v15 = v0[8];
  uint64_t v16 = v0[6];
  uint64_t v17 = v14[4];
  uint64_t v18 = v14[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10000C6CC(v16, &qword_100727FB8);
  sub_100009C98(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v19(v17, v18);
}

uint64_t sub_100500D8C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v35 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  __chkstk_darwin(v9);
  os_log_type_t v32 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v30 = v7;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v31 = v6;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v28 = v11;
    aBlock[0] = v19;
    uint64_t v29 = v3;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v36 = (void *)sub_100110D58(a1, a2, aBlock);
    uint64_t v3 = v29;
    uint64_t v7 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "will attempt to download the terms and conditions for %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v31;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v28);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  dispatch_group_enter(*(dispatch_group_t *)(v3 + 112));
  uint64_t v20 = *(void **)(v3 + 104);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v3;
  v21[3] = a1;
  v21[4] = a2;
  aBlock[4] = (uint64_t)sub_10050287C;
  aBlock[5] = (uint64_t)v21;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100593800;
  aBlock[3] = (uint64_t)&unk_100707720;
  uint64_t v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v23 = v20;
  swift_retain();
  uint64_t v24 = v32;
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = _swiftEmptyArrayStorage;
  sub_1005033B4((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_10013FE88();
  unint64_t v25 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v25, v6);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v34);
  return swift_release();
}

void sub_100501238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v41 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v35 - v7;
  uint64_t v9 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v38 + 64);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v35 - v13;
  swift_retain();
  uint64_t v44 = a1;
  unint64_t v39 = 0x80000001006524D0;
  unint64_t v40 = 0xD000000000000032;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  uint64_t v43 = v4;
  v35[1] = "AssetManager.swift";
  v35[2] = "fetchTermsAndConditions()";
  v35[0] = v8;
  uint64_t v15 = v44;
  swift_release();
  sub_100275DC4((uint64_t)v14, (uint64_t)v12);
  unint64_t v16 = (*(unsigned __int8 *)(v38 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  sub_100502B04((uint64_t)v12, v17 + v16);
  swift_retain();
  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
  swift_release();
  memcpy(v47, v48, sizeof(v47));
  uint64_t v18 = v47[51];
  if (v47[51] && *(void *)(v47[51] + 16))
  {
    uint64_t v19 = v37;
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_100590548(v36, v19);
    if (v21)
    {
      uint64_t v22 = (uint64_t *)(*(void *)(v18 + 56) + 16 * v20);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      swift_bridgeObjectRetain();
      sub_1000C68DC((uint64_t)v47);
      swift_bridgeObjectRelease();
      unint64_t v25 = (void *)swift_allocObject();
      v25[2] = v44;
      v25[3] = v24;
      v25[4] = v23;
      swift_retain();
      runAsyncAndBlock<A>(timeout:file:function:line:_:)();
      swift_release();
      uint64_t v26 = v46;
      uint64_t v27 = (void *)(v44 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_termsAndConditions);
      void *v27 = v45;
      v27[1] = v26;
      swift_bridgeObjectRelease();
      uint64_t v28 = v35[0];
      defaultLogger()();
      uint64_t v29 = Logger.logObject.getter();
      uint64_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, (os_log_type_t)v30))
      {
        os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "terms and conditions successfully downloaded.", v32, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v28, v43);
      v33._countAndFlagsBits = 0xD000000000000022;
      v33._object = (void *)0x8000000100652540;
      v34._countAndFlagsBits = 0x3131613165643237;
      v34._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v34, v33);
    }
    else
    {
      sub_1000C68DC((uint64_t)v47);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1000C68DC((uint64_t)v47);
  }
  sub_100009C98((uint64_t)v14);
  dispatch_group_leave(*(dispatch_group_t *)(v44 + 112));
}

uint64_t sub_1005018A4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10000C494;
  return sub_1004FC8A8(a1);
}

uint64_t sub_100501940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[57] = a2;
  v3[58] = a3;
  v3[56] = a1;
  return _swift_task_switch(sub_100501964, 0, 0);
}

uint64_t sub_100501964()
{
  uint64_t v1 = v0[58];
  v0[59] = *(void *)(v0[57] + 56);
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100724CC0 + dword_100724CC0);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[60] = v3;
  void *v3 = v0;
  v3[1] = sub_100501A34;
  return v5((uint64_t)(v0 + 2), v2);
}

uint64_t sub_100501A34()
{
  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100501BBC;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100501B50;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100501B50()
{
  memcpy(*(void **)(v0 + 448), (const void *)(v0 + 16), 0x1B0uLL);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100501BBC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100501C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_100501C44, 0, 0);
}

uint64_t sub_100501C44()
{
  v0[6] = *(void *)(v0[3] + 48);
  swift_retain();
  v0[7] = sub_100277854();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100728BB0 + dword_100728BB0);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  void *v1 = v0;
  v1[1] = sub_100501D04;
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  return v5(v3, v2);
}

uint64_t sub_100501D04(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 72) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100501EB8;
  }
  else
  {
    swift_release();
    *(void *)(v6 + 80) = a2;
    *(void *)(v6 + 88) = a1;
    uint64_t v7 = sub_100501E40;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100501E40()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = (void *)v0[2];
  swift_release();
  void *v3 = v2;
  v3[1] = v1;
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100501EB8()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

NSObject *sub_100501F24()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v23 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - v10;
  defaultLogger()();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = v9;
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "fetching the terms and conditions", v14, 2u);
    uint64_t v9 = v22;
    swift_slowDealloc();
  }

  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v11, v5);
  id v16 = *(id *)(v1 + 112);
  OS_dispatch_group.wait()();

  uint64_t v17 = v1 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_termsAndConditions;
  if (*(void *)(v1 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_termsAndConditions + 8))
  {
    uint64_t v12 = *(NSObject **)v17;
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
    defaultLogger()();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "terms and conditions available to be shown to the user", v20, 2u);
      swift_slowDealloc();
    }

    v15(v9, v5);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v23 + 104))(v4, enum case for DIPError.Code.termsAndConditionsUnavailable(_:), v2);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1005033B4((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  return v12;
}

uint64_t sub_100502310()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = sub_10015C504((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v7 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  v7(v5, enum case for DIPError.PropertyKey.inoProviderID(_:), v2);
  uint64_t v22 = &type metadata for String;
  *(void *)&long long v21 = 0x61746E6567616DLL;
  *((void *)&v21 + 1) = 0xE700000000000000;
  sub_1000078A8(&v21, &v19);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v18[0] = v6;
  sub_1005622A8(&v19, (uint64_t)v5, isUniquelyReferenced_nonNull_native);
  uint64_t v9 = *(void *)&v18[0];
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  swift_beginAccess();
  sub_100048D6C(v1 + 136, (uint64_t)&v19, &qword_1007284E8);
  if (v20)
  {
    sub_10000C6B4(&v19, (uint64_t)&v21);
    v7(v5, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v2);
    uint64_t v12 = v22;
    uint64_t v11 = v23;
    sub_10000C728(&v21, (uint64_t)v22);
    uint64_t v13 = (*(uint64_t (**)(void *))(*(void *)(v11 + 8) + 8))(v12);
    unint64_t v20 = &type metadata for String;
    *(void *)&long long v19 = v13;
    *((void *)&v19 + 1) = v14;
    sub_1000078A8(&v19, v18);
    char v15 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = v9;
    sub_1005622A8(v18, (uint64_t)v5, v15);
    uint64_t v9 = v17;
    swift_bridgeObjectRelease();
    v10(v5, v2);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v21);
  }
  else
  {
    sub_10000C6CC((uint64_t)&v19, &qword_1007284E8);
  }
  return v9;
}

id *sub_100502580()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_errorRelease();
  sub_10000C6CC((uint64_t)(v0 + 17), &qword_1007284E8);
  sub_10000C6CC((uint64_t)v0 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_staticWorkflow, &qword_10072F9B8);
  swift_release();
  sub_10000C6CC((uint64_t)v0 + OBJC_IVAR____TtC8coreidvd35IdentityProofingFetchedAssetManager_identityKeyPair, &qword_100727FC8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100502674()
{
  sub_100502580();

  return swift_deallocClassInstance();
}

uint64_t sub_1005026CC()
{
  return type metadata accessor for IdentityProofingFetchedAssetManager();
}

uint64_t type metadata accessor for IdentityProofingFetchedAssetManager()
{
  uint64_t result = qword_100730F50;
  if (!qword_100730F50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100502720()
{
  sub_100502820();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100502820()
{
  if (!qword_10072F5E8)
  {
    type metadata accessor for IdentityProofingStaticWorkflow(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10072F5E8);
    }
  }
}

void sub_10050287C()
{
  sub_100501238(v0[2], v0[3], v0[4]);
}

uint64_t sub_100502888(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100502898()
{
  return swift_release();
}

uint64_t sub_1005028A0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10000C494;
  return sub_1005018A4(a1);
}

uint64_t sub_10050293C()
{
  uint64_t v1 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 36);
  uint64_t v6 = type metadata accessor for HardwareAttestationType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100502B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100502B68(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for IdentityProofingStaticWorkflow(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100025D64;
  v7[57] = v5;
  v7[58] = v6;
  v7[56] = a1;
  return _swift_task_switch(sub_100501964, 0, 0);
}

uint64_t sub_100502C64(uint64_t a1)
{
  long long v7 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  *(void *)(v5 + 8) = sub_100025D64;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_100501C44, 0, 0);
}

uint64_t sub_100502D2C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100025D64;
  return sub_1004FFB7C(a1);
}

uint64_t sub_100502DC8()
{
  uint64_t v1 = type metadata accessor for IdentityProofingUnorderedUIElement();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100502E94(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for IdentityProofingUnorderedUIElement() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *long long v7 = v2;
  v7[1] = sub_10000C494;
  v7[11] = v5;
  v7[12] = v6;
  v7[10] = a1;
  return _swift_task_switch(sub_1004FFC3C, 0, 0);
}

BOOL sub_100502F8C()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  return sub_10053DF14();
}

uint64_t sub_1005031BC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1005031F4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100503244()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100503284()
{
  return sub_1004F9FDC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100503294()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1005032DC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100025D64;
  return sub_1004FA178(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1005033B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005033FC()
{
  swift_release();
  if (*(void *)(v0 + 48)) {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 24);
  }

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100503444()
{
  return sub_1004F9AE0(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_100503450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007284E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005034CC(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = type metadata accessor for IdentityProofingStaticWorkflow(0);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_1005035DC, 0, 0);
}

uint64_t sub_1005035DC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v1;
  void *v1 = v0;
  v1[1] = sub_10050367C;
  uint64_t v2 = *(void *)(v0 + 120);
  return sub_1004FC8A8(v2);
}

uint64_t sub_10050367C()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100503BE8;
  }
  else {
    uint64_t v2 = sub_100503790;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100503790()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  defaultLogger()();
  sub_100275DC4(v2, v1);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[14];
  if (v5)
  {
    uint64_t v7 = v0[13];
    char v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)char v8 = 136315138;
    uint64_t v9 = (uint64_t *)(v6 + *(int *)(v7 + 64));
    if (v9[1])
    {
      uint64_t v10 = *v9;
      unint64_t v11 = v9[1];
    }
    else
    {
      unint64_t v11 = 0xE300000000000000;
      uint64_t v10 = 7104878;
    }
    uint64_t v15 = v0[14];
    uint64_t v16 = v0[10];
    uint64_t v24 = v0[9];
    uint64_t v25 = v0[12];
    swift_bridgeObjectRetain();
    v0[6] = sub_100110D58(v10, v11, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100009C98(v15);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "proofingMinWatchOSVersion version parsed from static workflow: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v25, v24);
  }
  else
  {
    uint64_t v12 = v0[12];
    uint64_t v13 = v0[9];
    uint64_t v14 = v0[10];
    sub_100009C98(v0[14]);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  uint64_t v17 = v0[15];
  uint64_t v18 = v0[13];
  v0[18] = *(void *)(v0[8] + 136);
  long long v19 = (uint64_t *)(v17 + *(int *)(v18 + 64));
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  v0[19] = v21;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v22 = (void *)swift_task_alloc();
  v0[20] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_100503A18;
  return sub_10027FD78(v20, v21);
}

uint64_t sub_100503A18(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(v2 + 24) = a1;
  *(void *)(v2 + 16) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_task_switch(sub_100503B54, 0, 0);
}

uint64_t sub_100503B54()
{
  sub_100009C98(*(void *)(v0 + 120));
  uint64_t v1 = *(unsigned __int8 *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100503BE8()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[21] = *(void *)(v4 + 136);
  swift_retain();
  BOOL v5 = (void *)swift_task_alloc();
  v0[22] = v5;
  *BOOL v5 = v0;
  v5[1] = sub_100503CE0;
  return sub_10027FD78(0, 0);
}

uint64_t sub_100503CE0(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(v2 + 40) = a1;
  *(void *)(v2 + 32) = v1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100503E00, 0, 0);
}

uint64_t sub_100503E00()
{
  swift_errorRelease();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 40);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100503E94()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_100503F54, 0, 0);
}

uint64_t sub_100503F54()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void **)(v1 + 56);
  if (v2
    && (id v3 = v2,
        uint64_t v4 = IdentityProofingConfiguration.country.getter(),
        uint64_t v6 = v5,
        v3,
        (v0[6] = v6) != 0))
  {
    uint64_t v7 = *(void **)(v1 + 56);
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = IdentityProofingConfiguration.state.getter();
      uint64_t v11 = v10;

      v0[7] = v11;
      if (v11)
      {
        uint64_t v12 = (void *)swift_task_alloc();
        v0[8] = v12;
        void *v12 = v0;
        v12[1] = sub_10050426C;
        return sub_10046643C(0x61746E6567616DLL, 0xE700000000000000, v4, v6, v9, v11, 0, 0);
      }
    }
    uint64_t v15 = v0[4];
    uint64_t v14 = v0[5];
    uint64_t v16 = v0[3];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.idStateUnavailable(_:), v16);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.unexpectedDaemonState(_:), v0[3]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
  }
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_10050426C(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v1) {
    uint64_t v5 = a1;
  }
  return v6(v5);
}

NSObject *sub_1005043D8()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100501F24();
  if (v0)
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    swift_errorRetain();
    sub_100505B68((uint64_t)v7);
    sub_10000C6CC((uint64_t)v7, &qword_1007284E8);
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.internalError(_:), v1);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
  }
  return v5;
}

uint64_t sub_1005045B0()
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v0 + 56);
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = sub_1004FDB80((uint64_t)v7);
    if (!v1)
    {
      uint64_t v9 = v8;

      return v9;
    }

    uint64_t v9 = v1;
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.proofingConfigurationUnavailable(_:), v2);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    uint64_t v9 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_errorRetain();
  sub_100505B68((uint64_t)v11);
  sub_10000C6CC((uint64_t)v11, &qword_1007284E8);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.internalError(_:), v2);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  return v9;
}

uint64_t sub_100504880(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 72) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = *(void *)(v4 - 8);
  *(void *)(v3 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_100504944, 0, 0);
}

uint64_t sub_100504944()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  void *v1 = v0;
  v1[1] = sub_1005049E4;
  char v2 = *(unsigned char *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 16);
  return sub_100298810(v3, v2);
}

uint64_t sub_1005049E4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100504B20, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100504B20()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100504C68(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2) {
    return a3(a1, 0);
  }
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_10000C588();
  uint64_t v14 = swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v15, v13, v10);
  a3(a1, v14);
  swift_errorRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_100504EC4(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v83 = a1;
  uint64_t v82 = a5;
  uint64_t v81 = type metadata accessor for IdentityProofingIDType();
  uint64_t v79 = *(void *)(v81 - 8);
  uint64_t v8 = __chkstk_darwin(v81);
  uint64_t v78 = (char *)v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v71 - v10;
  uint64_t v12 = sub_100007764(&qword_1007285D0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v71 - v16;
  uint64_t v18 = type metadata accessor for DIPError.Code();
  uint64_t v80 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a2;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = (uint64_t)a3;
  uint64_t v25 = a4;
  uint64_t v26 = v84;
  uint64_t v27 = (void *)sub_100143F80(v22, v24);
  if (!v26)
  {
    uint64_t v28 = v27;
    v73 = v15;
    v74 = v17;
    v76._countAndFlagsBits = v21;
    v76._object = v23;
    uint64_t v75 = v11;
    uint64_t v77 = v25;
    uint64_t v29 = v81;
    uint64_t v30 = v82;
    uint64_t v83 = v20;
    uint64_t v84 = v18;
    if (v27)
    {
      v71[1] = 0;
      [v27 proofingActionStatus];
      uint64_t v31 = IdentityProofingActionStatus.init(rawValue:)();
      if (v32)
      {
        (*(void (**)(char *, void, uint64_t))(v80 + 104))(v83, enum case for DIPError.Code.invalidProofingActionStatus(_:), v84);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
      else
      {
        uint64_t v33 = v31;
        id v72 = v28;
        uint64_t v34 = IdentityProofingActionStatus.rawValue.getter();
        uint64_t v35 = IdentityProofingActionStatus.rawValue.getter();
        uint64_t v36 = v84;
        uint64_t v37 = v80;
        if (v34 == v35)
        {
          id v38 = v72;
          id v39 = [v72 proofingSessionID];
          if (v39)
          {
            unint64_t v40 = v39;
            uint64_t v84 = v33;
            uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v83 = v42;

            id v43 = [v38 idType];
            if (v43)
            {
              uint64_t v44 = v43;
              static String._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v45 = (uint64_t)v74;
              IdentityProofingIDType.init(rawValue:)();
              uint64_t v46 = v29;
              uint64_t v47 = v79;
            }
            else
            {
              uint64_t v47 = v79;
              uint64_t v45 = (uint64_t)v74;
              uint64_t v46 = v29;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56))(v74, 1, 1, v29);
            }
            uint64_t v56 = v78;
            uint64_t v57 = (uint64_t)v73;
            sub_100048D6C(v45, (uint64_t)v73, &qword_1007285D0);
            char v58 = 1;
            int v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v57, 1, v46);
            uint64_t v60 = v75;
            if (v59 == 1)
            {
              uint64_t v61 = 0;
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v75, v57, v46);
              (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v56, v60, v46);
              uint64_t v61 = IdentityType.init(from:)();
              char v58 = v62 & 1;
              (*(void (**)(char *, uint64_t))(v47 + 8))(v60, v46);
            }
            uint64_t v63 = v83;
            uint64_t v64 = v84;
            sub_10000C6CC(v45, &qword_1007285D0);
            *(void *)uint64_t v30 = v64;
            *(void *)(v30 + 8) = v41;
            *(void *)(v30 + 16) = v63;
            id v65 = v72;
            id v66 = [v72 learnMoreURLString];
            if (v66)
            {
              uint64_t v67 = v66;
              uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v70 = v69;
            }
            else
            {

              uint64_t v68 = 0;
              uint64_t v70 = 0;
            }
            *(void *)(v30 + 24) = v68;
            *(void *)(v30 + 32) = v70;
            *(void *)(v30 + 40) = v61;
            *(unsigned char *)(v30 + 48) = v58;
          }
          else
          {
            uint64_t v85 = 0;
            unint64_t v86 = 0xE000000000000000;
            _StringGuts.grow(_:)(57);
            v53._countAndFlagsBits = 0xD000000000000029;
            v53._object = (void *)0x80000001006529E0;
            String.append(_:)(v53);
            String.append(_:)(v76);
            v54._countAndFlagsBits = 0x72617420646E6120;
            v54._object = (void *)0xEC00000020746567;
            String.append(_:)(v54);
            v55._countAndFlagsBits = IdentityTarget.debugDescription.getter();
            String.append(_:)(v55);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void, uint64_t))(v37 + 104))(v83, enum case for DIPError.Code.internalError(_:), v36);
            sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_10000C588();
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
          }
        }
        else
        {
          uint64_t v85 = 0;
          unint64_t v86 = 0xE000000000000000;
          _StringGuts.grow(_:)(82);
          v51._countAndFlagsBits = 0xD000000000000044;
          v51._object = (void *)0x8000000100652A40;
          String.append(_:)(v51);
          uint64_t v87 = v33;
          _print_unlocked<A, B>(_:_:)();
          v52._countAndFlagsBits = 0x6E6974697845202ELL;
          v52._object = (void *)0xEC0000002E2E2E67;
          String.append(_:)(v52);
          (*(void (**)(char *, void, uint64_t))(v37 + 104))(v83, enum case for DIPError.Code.invalidProofingActionStatus(_:), v36);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_10000C588();
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
        }
      }
    }
    else
    {
      uint64_t v85 = 0;
      unint64_t v86 = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v48._countAndFlagsBits = 0xD000000000000029;
      v48._object = (void *)0x80000001006529E0;
      String.append(_:)(v48);
      String.append(_:)(v76);
      v49._countAndFlagsBits = 0x72617420646E6120;
      v49._object = (void *)0xEC00000020746567;
      String.append(_:)(v49);
      v50._countAndFlagsBits = IdentityTarget.debugDescription.getter();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v80 + 104))(v83, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v84);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

uint64_t sub_1005057E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_1005058A4, 0, 0);
}

uint64_t sub_1005058A4()
{
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v2 = v1;
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[5];
  if (v0[7] == 2) {
    uint64_t v5 = 2;
  }
  else {
    uint64_t v5 = 1;
  }
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = 0;
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = v2;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v5;
  v7[6] = 0;
  v7[7] = 0;
  v7[8] = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_100276DF8, (uint64_t)v7);
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v9 = v6[3];
  if (v9)
  {
    uint64_t v10 = v6[2];
    swift_bridgeObjectRetain();
    swift_release();
    sub_100431D14(v10, v9, 0, 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100505B68(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_10015C504((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  v9(v7, enum case for DIPError.PropertyKey.inoProviderID(_:), v4);
  uint64_t v31 = &type metadata for String;
  *(void *)&long long v30 = 0x61746E6567616DLL;
  *((void *)&v30 + 1) = 0xE700000000000000;
  sub_1000078A8(&v30, &v28);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v26[0] = v8;
  sub_1005622A8(&v28, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  uint64_t v11 = *(void *)&v26[0];
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  sub_100048D6C(a1, (uint64_t)&v28, &qword_1007284E8);
  if (v29)
  {
    sub_10000C6B4(&v28, (uint64_t)&v30);
    v9(v7, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v4);
    uint64_t v14 = v31;
    uint64_t v13 = v32;
    sub_10000C728(&v30, (uint64_t)v31);
    uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)(v13 + 8) + 8))(v14);
    uint64_t v29 = &type metadata for String;
    *(void *)&long long v28 = v15;
    *((void *)&v28 + 1) = v16;
    sub_1000078A8(&v28, v26);
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = v11;
    sub_1005622A8(v26, (uint64_t)v7, v17);
    uint64_t v11 = v27;
  }
  else
  {
    sub_10000C6CC((uint64_t)&v28, &qword_1007284E8);
    uint64_t v18 = *(void *)(v2 + 168) + 136;
    swift_beginAccess();
    sub_100048D6C(v18, (uint64_t)&v28, &qword_1007284E8);
    if (!v29)
    {
      sub_10000C6CC((uint64_t)&v28, &qword_1007284E8);
      return v11;
    }
    sub_10000C6B4(&v28, (uint64_t)&v30);
    v9(v7, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v4);
    uint64_t v20 = v31;
    uint64_t v19 = v32;
    sub_10000C728(&v30, (uint64_t)v31);
    uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)(v19 + 8) + 8))(v20);
    uint64_t v29 = &type metadata for String;
    *(void *)&long long v28 = v21;
    *((void *)&v28 + 1) = v22;
    sub_1000078A8(&v28, v26);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v11;
    sub_1005622A8(v26, (uint64_t)v7, v23);
    uint64_t v11 = v25;
  }
  swift_bridgeObjectRelease();
  v12(v7, v4);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v30);
  return v11;
}

uint64_t sub_100505EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[30] = a3;
  v4[31] = v3;
  v4[28] = a1;
  v4[29] = a2;
  return _swift_task_switch(sub_100505ED8, 0, 0);
}

uint64_t sub_100505ED8()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 52;
  os_unfair_lock_lock(v1 + 52);
  sub_1000262B4(v2, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v3);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 224);
  *(void *)(v0 + 256) = *(void *)(v0 + 80);
  swift_retain();
  sub_1000262D0(v0 + 16);
  uint64_t v7 = (void *)swift_allocObject();
  *(void *)(v0 + 264) = v7;
  _OWORD v7[2] = v6;
  v7[3] = v5;
  v7[4] = v4;
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 272) = v8;
  *(void *)(v8 + 16) = sub_100508620;
  *(void *)(v8 + 24) = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1005060C0;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v0 + 208, sub_100508640, v8, &type metadata for String);
}

uint64_t sub_1005060C0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1005062B4;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v4 = v2[27];
    v2[37] = v2[26];
    v2[38] = v4;
    uint64_t v3 = sub_100506200;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100506200()
{
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[38];
  swift_retain();
  sub_1004E31CC(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1005062B4()
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10050632C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v45 = a4;
  uint64_t v44 = type metadata accessor for DIPError();
  uint64_t v41 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  unint64_t v40 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v46 - 8);
  uint64_t v8 = __chkstk_darwin(v46);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v35 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v35 - v14;
  uint64_t v16 = type metadata accessor for DIPError.Code();
  uint64_t v43 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v47;
  uint64_t v20 = (void *)sub_100143F80(a2, (uint64_t)a3);
  if (!v19)
  {
    v36._uint64_t countAndFlagsBits = a2;
    v36._object = a3;
    uint64_t v37 = v10;
    uint64_t v38 = a1;
    uint64_t v39 = v16;
    void v35[3] = v13;
    uint64_t v22 = v45;
    uint64_t v21 = v46;
    uint64_t v47 = v18;
    if (v20)
    {
      char v23 = v20;
      id v24 = [v20 proofingSessionID];
      if (v24)
      {
        uint64_t v25 = v24;
        v36._object = v23;
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v36._uint64_t countAndFlagsBits = v27;

        defaultLogger()();
        long long v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v28, v29))
        {
          long long v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Will set the proofing status to status pending and will show verification in progress UI", v30, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v21);
        v50.value = IdentityProofingActionStatus.rawValue.getter();
        v50.is_nil = 0;
        object = v36._object;
        StoredProofingSession.update(proofingActionStatus:)(v50);
        sub_100143ED8();

        uint64_t countAndFlagsBits = v36._countAndFlagsBits;
        *uint64_t v22 = v26;
        v22[1] = countAndFlagsBits;
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v43 + 104))(v47, enum case for DIPError.Code.proofingSessionIDUnavailable(_:), v39);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
    }
    else
    {
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(73);
      v32._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      v32._object = (void *)0x8000000100652A90;
      String.append(_:)(v32);
      String.append(_:)(v36);
      v33._object = (void *)0x8000000100652AB0;
      v33._uint64_t countAndFlagsBits = 0xD000000000000029;
      String.append(_:)(v33);
      (*(void (**)(char *, void, uint64_t))(v43 + 104))(v47, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v39);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

id *sub_100506B70()
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100506C38()
{
  sub_100506B70();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingFlow()
{
  return self;
}

double sub_100506C90@<D0>(void *a1@<X0>, void (*a2)(long long *__return_ptr, void)@<X1>, uint64_t a3@<X8>)
{
  a2(&v10, *a1);
  if (!v3)
  {
    uint64_t v6 = v11;
    uint64_t v7 = v13;
    char v8 = v14;
    double result = *(double *)&v10;
    long long v9 = v12;
    *(_OWORD *)a3 = v10;
    *(void *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 24) = v9;
    *(void *)(a3 + 40) = v7;
    *(unsigned char *)(a3 + 48) = v8;
  }
  return result;
}

uint64_t sub_100506CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.internalError(_:), v6);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_10000C588();
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v14, v13, v10);
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, uint64_t, void *))(a3 + 16))(a3, a1, v15);

    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, void))(a3 + 16);
    return v17(a3, a1, 0);
  }
}

uint64_t sub_100506F98(uint64_t a1)
{
  v2[36] = a1;
  v2[37] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[38] = v3;
  v2[39] = *(void *)(v3 - 8);
  v2[40] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[41] = v4;
  v2[42] = *(void *)(v4 - 8);
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  return _swift_task_switch(sub_1005070C4, 0, 0);
}

uint64_t sub_1005070C4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Will attempt to fetch the extended review proofing data", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 336);

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 360) = v7;
  *(void *)(v0 + 368) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  uint64_t v8 = IdentityProofingConfiguration.state.getter();
  *(void *)(v0 + 376) = v8;
  *(void *)(v0 + 384) = v9;
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    uint64_t v12 = IdentityProofingConfiguration.targetDevice.getter();
    *(void *)(v0 + 392) = v12;
    if ((v13 & 1) == 0)
    {
      uint64_t v14 = v12;
      if (qword_10071F4B0 != -1) {
        swift_once();
      }
      uint64_t v15 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
      uint64_t v16 = (uint64_t)&v15[4];
      uint64_t v17 = v15 + 52;
      os_unfair_lock_lock(v15 + 52);
      sub_1000262B4(v16, (_OWORD *)(v0 + 16));
      os_unfair_lock_unlock(v17);
      *(void *)(v0 + 400) = *(void *)(v0 + 80);
      swift_retain();
      sub_1000262D0(v0 + 16);
      char v23 = (void *)swift_allocObject();
      *(void *)(v0 + 408) = v23;
      v23[2] = v10;
      v23[3] = v11;
      v23[4] = v14;
      uint64_t v24 = swift_allocObject();
      *(void *)(v0 + 416) = v24;
      *(void *)(v24 + 16) = sub_1005085AC;
      *(void *)(v24 + 24) = v23;
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v25 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v25;
      uint64_t v26 = sub_100007764(&qword_100731640);
      *uint64_t v25 = v0;
      v25[1] = sub_100507578;
      return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 208, sub_100508604, v24, v26);
    }
    uint64_t v19 = *(void *)(v0 + 312);
    uint64_t v18 = *(void *)(v0 + 320);
    uint64_t v20 = *(void *)(v0 + 304);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, enum case for DIPError.Code.targetUnavailable(_:), v20);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 312) + 104))(*(void *)(v0 + 320), enum case for DIPError.Code.idStateUnavailable(_:), *(void *)(v0 + 304));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
  }
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_100507578()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 432) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100507928;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    *(_OWORD *)(v2 + 440) = *(_OWORD *)(v2 + 208);
    *(void *)(v2 + 456) = *(void *)(v2 + 224);
    *(_OWORD *)(v2 + 464) = *(_OWORD *)(v2 + 232);
    *(void *)(v2 + 480) = *(void *)(v2 + 248);
    *(unsigned char *)(v2 + 257) = *(unsigned char *)(v2 + 256);
    uint64_t v3 = sub_1005076DC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1005076DC()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[61] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1005077B4;
  uint64_t v3 = v0[58];
  uint64_t v4 = v0[59];
  uint64_t v5 = v0[56];
  uint64_t v6 = v0[57];
  uint64_t v7 = v0[55];
  uint64_t v8 = v0[49];
  uint64_t v9 = v0[47];
  return sub_100275540(v7, v9, v1, v5, v6, v8, v3, v4);
}

uint64_t sub_1005077B4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[33] = v2;
  v3[34] = a1;
  v3[35] = v1;
  v3[62] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_100507BD0;
  }
  else {
    uint64_t v4 = sub_100507AAC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100507928()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(void, void, void))(v0[39] + 104))(v0[40], enum case for DIPError.Code.internalError(_:), v0[38]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100507AAC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully retrieved extended review display info", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[34];
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[45];
  uint64_t v6 = v0[43];
  uint64_t v7 = v0[41];

  v5(v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v4);
}

uint64_t sub_100507BD0()
{
  (*(void (**)(void, void, void))(v0[39] + 104))(v0[40], enum case for DIPError.Code.internalError(_:), v0[38]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100507D2C(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 80) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 24) = v3;
  *(void *)(v2 + 32) = *(void *)(v3 - 8);
  *(void *)(v2 + 40) = swift_task_alloc();
  *(void *)(v2 + 48) = swift_task_alloc();
  uint64_t v6 = (uint64_t (__cdecl *)())((char *)&dword_10072E538 + dword_10072E538);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100507E40;
  return v6();
}

uint64_t sub_100507E40()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1005081A8;
  }
  else {
    uint64_t v2 = sub_100507F54;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100507F54()
{
  uint64_t v1 = *(void *)(v0 + 64);
  id v2 = [self standardUserDefaults];
  v3._uint64_t countAndFlagsBits = static SharedInternalDefaultsKeys.injectFedStatsData.getter();
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);
  swift_bridgeObjectRelease();

  if (v4)
  {
    if (*(unsigned char *)(v0 + 80))
    {
      sub_10058F1E0(1);
LABEL_10:
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_11;
    }
LABEL_7:
    defaultLogger()();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "The user has not given consent to share the biome data", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = *(void *)(v0 + 32);
    uint64_t v12 = *(void *)(v0 + 40);
    uint64_t v14 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    goto LABEL_10;
  }
  if (!*(unsigned char *)(v0 + 80)) {
    goto LABEL_7;
  }
  sub_1004392F0();
  if (v1)
  {
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = *(void *)(v0 + 24);
    uint64_t v7 = *(void *)(v0 + 32);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
    return v8();
  }
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_100508444;
  return sub_10024F018();
}

uint64_t sub_1005081A8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  id v4 = [self standardUserDefaults];
  v5._uint64_t countAndFlagsBits = static SharedInternalDefaultsKeys.injectFedStatsData.getter();
  LOBYTE(v2) = NSUserDefaults.internalBool(forKey:)(v5);
  swift_bridgeObjectRelease();

  if (v2)
  {
    if (*(unsigned char *)(v0 + 80))
    {
      sub_10058F1E0(1);
LABEL_9:
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
      return v12();
    }
LABEL_6:
    defaultLogger()();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "The user has not given consent to share the biome data", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v11 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    goto LABEL_9;
  }
  if (!*(unsigned char *)(v0 + 80)) {
    goto LABEL_6;
  }
  sub_1004392F0();
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v14;
  void *v14 = v0;
  v14[1] = sub_100508444;
  return sub_10024F018();
}

uint64_t sub_100508444()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100508574()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1005085AC(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100504EC4(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_1005085CC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

double sub_100508604@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100506C90(a1, *(void (**)(long long *__return_ptr, void))(v2 + 16), a2);
}

void sub_100508620(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10050632C(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

void *sub_100508640@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  double result = (*(void *(**)(void *__return_ptr, void))(v2 + 16))(v7, *a1);
  if (!v3)
  {
    uint64_t v6 = v7[1];
    *a2 = v7[0];
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_100508688()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

unint64_t sub_1005086E4()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for String.Encoding();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v0[6]) {
    return 0;
  }
  v128 = v6;
  uint64_t v123 = v4;
  static String.Encoding.utf8.getter();
  uint64_t v11 = String.data(using:allowLossyConversion:)();
  unint64_t v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  if (v13 >> 60 != 15)
  {
    v122 = v2;
    static String.Encoding.utf8.getter();
    uint64_t v29 = String.data(using:allowLossyConversion:)();
    long long v30 = v14;
    unint64_t v32 = v31;
    v119 = v30;
    v30(v10, v7);
    if (v32 >> 60 == 15)
    {
      (*(void (**)(char *, void, uint64_t))(v123 + 104))(v128, enum case for DIPError.Code.internalError(_:), v3);
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v33 = v13;
      uint64_t v34 = v11;
      uint64_t v35 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v36 = (*(unsigned __int8 *)(*(void *)v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v35 + 80);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_100610730;
      unint64_t v38 = v37 + v36;
      uint64_t v39 = (uint64_t *)(v38 + v35[14]);
      uint64_t v40 = enum case for DIPError.PropertyKey.attributeID(_:);
      uint64_t v41 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 104))(v38, v40, v41);
      uint64_t v43 = *v122;
      uint64_t v42 = v122[1];
      v39[3] = (uint64_t)&type metadata for String;
      *uint64_t v39 = v43;
      v39[1] = v42;
      swift_bridgeObjectRetain();
      unint64_t v28 = sub_10015C504(v37);
      type metadata accessor for DIPError();
      sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      uint64_t v44 = v34;
      unint64_t v45 = v33;
    }
    else
    {
      uint64_t v118 = v11;
      uint64_t v120 = v29;
      unint64_t v121 = v32;
      uint64_t v114 = v1;
      uint64_t v115 = v3;
      swift_bridgeObjectRetain();
      uint64_t v46 = Data.init(base16Encoded:)();
      if (v47 >> 60 == 15) {
        uint64_t v48 = 0;
      }
      else {
        uint64_t v48 = v46;
      }
      if (v47 >> 60 == 15) {
        unint64_t v49 = 0xC000000000000000;
      }
      else {
        unint64_t v49 = v47;
      }
      uint64_t v124 = v48;
      unint64_t v125 = v49;
      sub_10002CEB0(v48, v49);
      uint64_t v51 = v120;
      unint64_t v50 = v121;
      sub_1000338D4(v120, v121);
      sub_10051049C(v51, v50);
      sub_10000C5E0(v51, v50);
      sub_10000C5F4(v48, v49);
      uint64_t v52 = v124;
      unint64_t v53 = v125;
      uint64_t v126 = v124;
      unint64_t v127 = v125;
      sub_10002CEB0(v124, v125);
      uint64_t v54 = v118;
      sub_1000338D4(v118, v13);
      sub_10051049C(v54, v13);
      sub_10000C5E0(v54, v13);
      sub_10000C5F4(v52, v53);
      uint64_t v56 = v126;
      unint64_t v55 = v127;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v58 = (id)DigestSha256();

      unint64_t v117 = v13;
      if (v58)
      {
        uint64_t v112 = v56;
        unint64_t v113 = v55;
        uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v61 = v60;

        uint64_t v124 = v59;
        unint64_t v125 = v61;
        uint64_t v63 = v120;
        unint64_t v62 = v121;
        sub_1000338D4(v120, v121);
        uint64_t v110 = v59;
        unint64_t v111 = v61;
        sub_10002CEB0(v59, v61);
        sub_10051049C(v63, v62);
        sub_10000C5E0(v63, v62);
        uint64_t v64 = v124;
        unint64_t v116 = v125;
        static String.Encoding.utf8.getter();
        uint64_t v65 = String.data(using:allowLossyConversion:)();
        unint64_t v67 = v66;
        swift_bridgeObjectRelease();
        v119(v10, v7);
        if (v67 >> 60 == 15) {
          uint64_t v68 = 0;
        }
        else {
          uint64_t v68 = v65;
        }
        if (v67 >> 60 == 15) {
          unint64_t v67 = 0xC000000000000000;
        }
        uint64_t v126 = v64;
        unint64_t v127 = v116;
        sub_10002CEB0(v64, v116);
        sub_10002CEB0(v68, v67);
        sub_10051049C(v68, v67);
        sub_10000C5F4(v68, v67);
        sub_10000C5F4(v68, v67);
        sub_10000C5F4(v64, v116);
        uint64_t v69 = v126;
        unint64_t v70 = v127;
        uint64_t v124 = v126;
        unint64_t v125 = v127;
        sub_1000338D4(v63, v62);
        sub_10002CEB0(v69, v70);
        sub_10051049C(v63, v62);
        sub_10000C5E0(v63, v62);
        sub_10000C5F4(v69, v70);
        uint64_t v71 = v124;
        unint64_t v72 = v125;
        uint64_t v73 = *v122;
        v74 = (void *)v122[1];
        static String.Encoding.utf8.getter();
        uint64_t v75 = String.data(using:allowLossyConversion:)();
        unint64_t v77 = v76;
        v119(v10, v7);
        if (v77 >> 60 == 15) {
          uint64_t v78 = 0;
        }
        else {
          uint64_t v78 = v75;
        }
        if (v77 >> 60 == 15) {
          unint64_t v77 = 0xC000000000000000;
        }
        uint64_t v126 = v71;
        unint64_t v127 = v72;
        sub_10002CEB0(v71, v72);
        sub_10002CEB0(v78, v77);
        sub_10051049C(v78, v77);
        sub_10000C5F4(v78, v77);
        sub_10000C5F4(v78, v77);
        sub_10000C5F4(v71, v72);
        uint64_t v79 = v126;
        unint64_t v80 = v127;
        Class v81 = Data._bridgeToObjectiveC()().super.isa;
        id v82 = (id)DigestSha256();

        if (v82)
        {
          unint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          sub_10000C5F4(v79, v80);
          sub_10000C5F4(v110, v111);
          sub_10000C5F4(v112, v113);
          sub_10000C5E0(v120, v121);
          sub_10000C5E0(v118, v117);

          return v28;
        }
        uint64_t v126 = 0;
        unint64_t v127 = 0xE000000000000000;
        _StringGuts.grow(_:)(68);
        v99._uint64_t countAndFlagsBits = 0xD000000000000022;
        v99._object = (void *)0x8000000100652E70;
        String.append(_:)(v99);
        swift_bridgeObjectRetain();
        v100._uint64_t countAndFlagsBits = v73;
        v100._object = v74;
        String.append(_:)(v100);
        swift_bridgeObjectRelease();
        v101._uint64_t countAndFlagsBits = 0xD000000000000020;
        v101._object = (void *)0x8000000100652DE0;
        String.append(_:)(v101);
        v122 = (uint64_t *)v126;
        v119 = (void (*)(char *, uint64_t))v127;
        (*(void (**)(char *, void, uint64_t))(v123 + 104))(v128, enum case for DIPError.Code.internalError(_:), v115);
        sub_100007764((uint64_t *)&unk_1007225C0);
        v102 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v103 = (*(unsigned __int8 *)(*(void *)v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v102 + 80);
        uint64_t v104 = swift_allocObject();
        *(_OWORD *)(v104 + 16) = xmmword_100610730;
        unint64_t v105 = v104 + v103;
        v106 = (uint64_t *)(v105 + v102[14]);
        uint64_t v107 = enum case for DIPError.PropertyKey.attributeID(_:);
        uint64_t v108 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 104))(v105, v107, v108);
        v106[3] = (uint64_t)&type metadata for String;
        uint64_t *v106 = v73;
        v106[1] = (uint64_t)v74;
        swift_bridgeObjectRetain();
        unint64_t v28 = sub_10015C504(v104);
        type metadata accessor for DIPError();
        sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        sub_10000C5F4(v79, v80);
        sub_10000C5F4(v110, v111);
        uint64_t v97 = v112;
        unint64_t v98 = v113;
      }
      else
      {
        uint64_t v126 = 0;
        unint64_t v127 = 0xE000000000000000;
        _StringGuts.grow(_:)(67);
        v83._uint64_t countAndFlagsBits = 0xD000000000000021;
        v83._object = (void *)0x8000000100652E40;
        String.append(_:)(v83);
        uint64_t v85 = *v122;
        uint64_t v84 = (void *)v122[1];
        swift_bridgeObjectRetain();
        v86._uint64_t countAndFlagsBits = v85;
        v86._object = v84;
        String.append(_:)(v86);
        swift_bridgeObjectRelease();
        v87._uint64_t countAndFlagsBits = 0xD000000000000020;
        v87._object = (void *)0x8000000100652DE0;
        String.append(_:)(v87);
        v122 = (uint64_t *)v126;
        v119 = (void (*)(char *, uint64_t))v127;
        (*(void (**)(char *, void, uint64_t))(v123 + 104))(v128, enum case for DIPError.Code.internalError(_:), v115);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v88 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v89 = v55;
        unint64_t v90 = (*(unsigned __int8 *)(*(void *)v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v88 + 80);
        uint64_t v91 = swift_allocObject();
        *(_OWORD *)(v91 + 16) = xmmword_100610730;
        unint64_t v92 = v91 + v90;
        uint64_t v93 = v56;
        v94 = (uint64_t *)(v92 + v88[14]);
        uint64_t v95 = enum case for DIPError.PropertyKey.attributeID(_:);
        uint64_t v96 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 104))(v92, v95, v96);
        v94[3] = (uint64_t)&type metadata for String;
        uint64_t *v94 = v85;
        v94[1] = (uint64_t)v84;
        swift_bridgeObjectRetain();
        unint64_t v28 = sub_10015C504(v91);
        type metadata accessor for DIPError();
        sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        uint64_t v97 = v93;
        unint64_t v98 = v89;
      }
      sub_10000C5F4(v97, v98);
      sub_10000C5E0(v120, v121);
      unint64_t v45 = v117;
      uint64_t v44 = v118;
    }
    sub_10000C5E0(v44, v45);
    return v28;
  }
  uint64_t v126 = 0;
  unint64_t v127 = 0xE000000000000000;
  _StringGuts.grow(_:)(61);
  v15._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v15._object = (void *)0x8000000100652DC0;
  String.append(_:)(v15);
  uint64_t v16 = v2;
  uint64_t v17 = *v2;
  uint64_t v18 = (void *)v16[1];
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0xD000000000000020;
  v20._object = (void *)0x8000000100652DE0;
  String.append(_:)(v20);
  (*(void (**)(char *, void, uint64_t))(v123 + 104))(v128, enum case for DIPError.Code.internalError(_:), v3);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v21 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(*(void *)v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v21 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100610730;
  unint64_t v24 = v23 + v22;
  uint64_t v25 = (uint64_t *)(v24 + v21[14]);
  uint64_t v26 = enum case for DIPError.PropertyKey.attributeID(_:);
  uint64_t v27 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v24, v26, v27);
  v25[3] = (uint64_t)&type metadata for String;
  *uint64_t v25 = v17;
  v25[1] = (uint64_t)v18;
  swift_bridgeObjectRetain();
  unint64_t v28 = sub_10015C504(v23);
  type metadata accessor for DIPError();
  sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return v28;
}

unint64_t sub_100509684(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v33 = a2;
  unint64_t v34 = a3;
  uint64_t v6 = a1[13];
  if (!v6 && !a1[14])
  {
    uint64_t v20 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v20 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v21 = a1[5];
    if (v20)
    {
      if (v21)
      {
        uint64_t v22 = a1[4];
        String.append(_:)(*(Swift::String *)(&v21 - 1));
        uint64_t v23 = 46;
        unint64_t v24 = (void *)0xE100000000000000;
      }
      else
      {
        uint64_t v23 = 0;
        unint64_t v24 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      v30._uint64_t countAndFlagsBits = v23;
      v30._object = v24;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      uint64_t v28 = v33;
      unint64_t v29 = v34;
    }
    else
    {
      if (v21)
      {
        uint64_t v28 = a1[4];
        unint64_t v29 = a1[5];
      }
      else
      {
        unint64_t v29 = 0xE900000000000064;
        uint64_t v28 = 0x6570756F72676E75;
      }
      swift_bridgeObjectRetain();
    }
    sub_100007764(&qword_100720AC8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100610730;
    uint64_t v32 = a1[3];
    *(void *)(inited + 32) = a1[2];
    *(void *)(inited + 40) = v32;
    *(void *)(inited + 48) = v28;
    *(void *)(inited + 56) = v29;
    swift_bridgeObjectRetain();
    return sub_10015CF20(inited);
  }
  uint64_t v7 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v8 = a1[5];
  if (v7)
  {
    if (v8)
    {
      uint64_t v9 = a1[4];
      String.append(_:)(*(Swift::String *)(&v8 - 1));
      uint64_t v10 = 46;
      uint64_t v11 = (void *)0xE100000000000000;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (void *)0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    v14._uint64_t countAndFlagsBits = v10;
    v14._object = v11;
    String.append(_:)(v14);
    unint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_12;
    }
LABEL_24:
    if (!a1[14]) {
      goto LABEL_40;
    }
    uint64_t v19 = 0;
    uint64_t v17 = v33;
    unint64_t v16 = v34;
LABEL_26:
    uint64_t v25 = swift_retain();
    uint64_t v6 = sub_100509684(v25, v17, v16);
    uint64_t v26 = swift_bridgeObjectRelease();
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v19)
      {
        __chkstk_darwin(v26);
        uint64_t v27 = swift_bridgeObjectRetain();
        sub_100510B30(v27, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100511F50);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    return v6;
  }
  if (v8)
  {
    uint64_t v12 = a1[4];
    unint64_t v13 = a1[5];
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
  }
  uint64_t v33 = v12;
  unint64_t v34 = v13;
  unint64_t result = swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_24;
  }
LABEL_12:
  uint64_t v17 = v33;
  unint64_t v16 = v34;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_100509684(v6, v33, v34);
  if (v4)
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    return v6;
  }
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  unint64_t result = swift_release();
  if (a1[14]) {
    goto LABEL_26;
  }
  if (v19)
  {
    swift_bridgeObjectRelease();
    return v19;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1005099CC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 40);
    if (!v2) {
      goto LABEL_10;
    }
    if (*(void *)(result + 32) == 0x6966697265766E75 && v2 == 0xEA00000000006465) {
      return *(void *)(v1 + 104) != 0;
    }
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    unint64_t result = 0;
    if ((v4 & 1) == 0) {
      return result;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      return *(void *)(v1 + 104) != 0;
    }
    else
    {
LABEL_10:
      uint64_t v5 = *(void *)(v1 + 104);
      swift_retain();
      swift_retain();
      char v6 = sub_1005099CC(v5);
      swift_release();
      if (v6)
      {
        swift_release();
        return 1;
      }
      else
      {
        uint64_t v7 = swift_retain();
        char v8 = sub_1005099CC(v7);
        swift_release();
        swift_release();
        return v8 & 1;
      }
    }
  }
  return result;
}

uint64_t sub_100509AFC(unsigned __int8 *a1, char *a2)
{
  return sub_100470FE4(*a1, *a2);
}

Swift::Int sub_100509B08()
{
  return sub_100472D20();
}

uint64_t sub_100509B10()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100509BE4()
{
  return sub_1004732AC();
}

unint64_t sub_100509BEC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100510D44(*a1);
  *a2 = result;
  return result;
}

void sub_100509C1C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1752392040;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x70756F7267;
      goto LABEL_3;
    case 2:
      *a1 = 1635017060;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 1952867692;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 0x7468676972;
      a1[1] = 0xE500000000000000;
      break;
    case 5:
      *a1 = 0x6465686361746564;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_100509CD0()
{
  uint64_t result = 1752392040;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x70756F7267;
      break;
    case 2:
      uint64_t result = 1635017060;
      break;
    case 3:
      uint64_t result = 1952867692;
      break;
    case 4:
      uint64_t result = 0x7468676972;
      break;
    case 5:
      uint64_t result = 0x6465686361746564;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100509D70@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100510D44(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100509D98(uint64_t a1)
{
  unint64_t v2 = sub_100510364();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100509DD4(uint64_t a1)
{
  unint64_t v2 = sub_100510364();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100509E10(void *a1)
{
  uint64_t v100 = *v1;
  uint64_t v3 = type metadata accessor for String.Encoding();
  unint64_t v88 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v89 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007764(&qword_100731848);
  uint64_t v90 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = a1[3];
  uint64_t v91 = (uint64_t)a1;
  uint64_t v12 = a1;
  unint64_t v13 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(v12, v11);
  sub_100510364();
  uint64_t v14 = v92;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v14)
  {
    Swift::String v15 = v5;
    uint64_t v86 = v3;
    Swift::String v87 = v8;
    uint64_t v92 = v6;
    LOBYTE(v96) = 0;
    uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t v21 = v20;
    uint64_t v22 = v93;
    *(void *)(v93 + 16) = v16;
    *(void *)(v22 + 24) = v20;
    LOBYTE(v96) = 1;
    uint64_t v23 = v16;
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unint64_t v26 = v25;
    uint64_t v84 = v23;
    uint64_t v85 = (void *)v21;
    *(void *)(v22 + 32) = v24;
    *(void *)(v22 + 40) = v25;
    LOBYTE(v94) = 2;
    sub_10050FB78();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    unint64_t v82 = v26;
    uint64_t v81 = v24;
    *(void *)(v22 + 48) = v96;
    long long v83 = v97;
    *(_OWORD *)(v22 + 56) = v97;
    *(_OWORD *)(v22 + 72) = v98;
    *(_OWORD *)(v22 + 88) = v99;
    LOBYTE(v94) = 3;
    sub_100510AE8(&qword_100731858, v27, (void (*)(uint64_t))type metadata accessor for MerkleTreeDetached);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v28 = v96;
    *(void *)(v22 + 104) = v96;
    LOBYTE(v94) = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v29 = v96;
    *(void *)(v22 + 112) = v96;
    LOBYTE(v96) = 5;
    char v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v79 = v29;
    uint64_t v100 = v28;
    unint64_t v80 = v13;
    if (v30 == 2)
    {
      *(unsigned char *)(v22 + 120) = 0;
      uint64_t v31 = v89;
      uint64_t v32 = v92;
      uint64_t v33 = v85;
    }
    else
    {
      *(unsigned char *)(v22 + 120) = v30 & 1;
      uint64_t v31 = v89;
      uint64_t v34 = v90;
      uint64_t v32 = v92;
      uint64_t v33 = v85;
      if ((v30 & 1) != 0 && (void)v83)
      {
        (*(void (**)(char *, void, uint64_t))(v89 + 104))(v87, enum case for DIPError.Code.invalidClaim(_:), v92);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v80, v9);
LABEL_20:
        swift_release();
        uint64_t v17 = v91;
        goto LABEL_4;
      }
    }
    if (v100)
    {
      if (v79)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        uint64_t v35 = Data.init(base16Encoded:)();
        if (v36 >> 60 == 15)
        {
LABEL_16:
          uint64_t v96 = 0;
          *(void *)&long long v97 = 0xE000000000000000;
          _StringGuts.grow(_:)(48);
          swift_bridgeObjectRelease();
          uint64_t v96 = 0x5B65646F6ELL;
          *(void *)&long long v97 = 0xE500000000000000;
          uint64_t v39 = *(void *)(v22 + 16);
          uint64_t v40 = *(void **)(v22 + 24);
          swift_bridgeObjectRetain();
          v41._uint64_t countAndFlagsBits = v39;
          v41._object = v40;
          String.append(_:)(v41);
          swift_bridgeObjectRelease();
          v42._uint64_t countAndFlagsBits = 0xD000000000000029;
          v42._object = (void *)0x8000000100652D30;
          String.append(_:)(v42);
          (*(void (**)(char *, void, uint64_t))(v31 + 104))(v87, enum case for DIPError.Code.invalidClaim(_:), v92);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          swift_release();
          swift_release();
LABEL_19:
          (*(void (**)(char *, uint64_t))(v90 + 8))(v80, v9);
          goto LABEL_20;
        }
        uint64_t v84 = v35;
        uint64_t v85 = (void *)v36;
        swift_bridgeObjectRetain();
        uint64_t v37 = Data.init(base16Encoded:)();
        if (v38 >> 60 == 15)
        {
          sub_10000C5E0(v84, (unint64_t)v85);
          goto LABEL_16;
        }
        uint64_t v46 = v37;
        unint64_t v47 = v38;
        *(void *)&long long v83 = v9;
        uint64_t v96 = v84;
        *(void *)&long long v97 = v85;
        sub_10002CEB0(v84, (unint64_t)v85);
        uint64_t v77 = v46;
        unint64_t v78 = v47;
        sub_10051049C(v46, v47);
        if (v82)
        {
          static String.Encoding.utf8.getter();
          uint64_t v48 = String.data(using:allowLossyConversion:)();
          unint64_t v50 = v49;
          (*(void (**)(char *, uint64_t))(v88 + 8))(v15, v86);
          if (v50 >> 60 != 15)
          {
            sub_10002CEB0(v48, v50);
            sub_10051049C(v48, v50);
            sub_10000C5E0(v48, v50);
            sub_10000C5E0(v48, v50);
          }
        }
        uint64_t v51 = v96;
        unint64_t v52 = v97;
        sub_10002CEB0(v96, v97);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000C5F4(v51, v52);
        id v54 = (id)DigestSha256();

        if (v54)
        {
          uint64_t v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v57 = v56;

          uint64_t v86 = v55;
          unint64_t v88 = v57;
          Class v58 = Data._bridgeToObjectiveC()().super.isa;
          id v59 = (id)DigestSha256();

          if (v59)
          {
            uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v62 = v61;

            swift_bridgeObjectRetain();
            uint64_t v81 = v60;
            unint64_t v82 = v62;
            sub_10002CEB0(v60, v62);
            uint64_t v63 = Data.init(base16Encoded:)();
            unint64_t v65 = v64;
            if (v64 >> 60 == 15)
            {
              sub_10000C5E0(v81, v82);
              sub_10000C5E0(v63, v65);
            }
            else
            {
              uint64_t v70 = v81;
              unint64_t v71 = v82;
              sub_10002CEB0(v81, v82);
              char v72 = sub_100510850(v70, v71, v63, v65);
              sub_10000C5E0(v63, v65);
              sub_10000C5F4(v70, v71);
              sub_10000C5F4(v70, v71);
              if (v72)
              {
                sub_10000C5E0(v84, (unint64_t)v85);
                sub_10000C5F4(v86, v88);
                sub_10000C5E0(v77, v78);
                swift_release();
                swift_release();
                sub_10000C5F4(v81, v82);
                sub_10000C5F4(v51, v52);
                (*(void (**)(char *, void))(v90 + 8))(v80, v83);
                uint64_t v22 = v93;
                uint64_t v18 = v91;
                goto LABEL_5;
              }
            }
            uint64_t v94 = 0;
            unint64_t v95 = 0xE000000000000000;
            _StringGuts.grow(_:)(40);
            swift_bridgeObjectRelease();
            uint64_t v94 = 0x5B65646F6ELL;
            unint64_t v95 = 0xE500000000000000;
            uint64_t v22 = v93;
            uint64_t v73 = *(void *)(v93 + 16);
            v74 = *(void **)(v93 + 24);
            swift_bridgeObjectRetain();
            v75._uint64_t countAndFlagsBits = v73;
            v75._object = v74;
            String.append(_:)(v75);
            swift_bridgeObjectRelease();
            v76._uint64_t countAndFlagsBits = 0xD000000000000021;
            v76._object = (void *)0x8000000100652D60;
            String.append(_:)(v76);
            (*(void (**)(char *, void, uint64_t))(v89 + 104))(v87, enum case for DIPError.Code.invalidClaim(_:), v92);
            sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for DIPError();
            sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            swift_willThrow();
            sub_10000C5E0(v84, (unint64_t)v85);
            sub_10000C5F4(v86, v88);
            sub_10000C5E0(v77, v78);
            swift_release();
            swift_release();
            sub_10000C5F4(v81, v82);
            goto LABEL_34;
          }
          sub_10000C5F4(v86, v88);
        }
        uint64_t v94 = 0;
        unint64_t v95 = 0xE000000000000000;
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease();
        uint64_t v94 = 0x5B65646F6ELL;
        unint64_t v95 = 0xE500000000000000;
        uint64_t v22 = v93;
        uint64_t v66 = *(void *)(v93 + 16);
        unint64_t v67 = *(void **)(v93 + 24);
        swift_bridgeObjectRetain();
        v68._uint64_t countAndFlagsBits = v66;
        v68._object = v67;
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
        v69._object = (void *)0x800000010063EAB0;
        String.append(_:)(v69);
        (*(void (**)(char *, void, uint64_t))(v89 + 104))(v87, enum case for DIPError.Code.invalidClaim(_:), v92);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        sub_10000C5E0(v84, (unint64_t)v85);
        sub_10000C5E0(v77, v78);
        swift_release();
        swift_release();
LABEL_34:
        sub_10000C5F4(v96, v97);
        (*(void (**)(char *, void))(v90 + 8))(v80, v83);
        goto LABEL_20;
      }
    }
    else if (!v79)
    {
      (*(void (**)(char *, uint64_t))(v90 + 8))(v80, v9);
      uint64_t v18 = v91;
      goto LABEL_5;
    }
    uint64_t v96 = 0;
    *(void *)&long long v97 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v43._uint64_t countAndFlagsBits = 0x5B65646F6ELL;
    v43._object = (void *)0xE500000000000000;
    String.append(_:)(v43);
    swift_bridgeObjectRetain();
    v44._uint64_t countAndFlagsBits = v84;
    v44._object = v33;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v45._object = (void *)0x8000000100652D00;
    String.append(_:)(v45);
    (*(void (**)(char *, void, uint64_t))(v31 + 104))(v87, enum case for DIPError.Code.invalidClaim(_:), v32);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_19;
  }
  uint64_t v17 = v91;
  uint64_t v22 = v93;
  swift_deallocPartialClassInstance();
LABEL_4:
  uint64_t v18 = v17;
LABEL_5:
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v18);
  return v22;
}

uint64_t sub_10050AF50()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1005103B8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MerkleTreeDetached()
{
  return self;
}

uint64_t *sub_10050AFD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1005129BC(a1, a2, a3, &qword_100723718);
}

uint64_t sub_10050AFE4(uint64_t a1, uint64_t a2)
{
  return sub_100512A94(a1, a2, &qword_100723718);
}

uint64_t sub_10050AFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100512B14(a1, a2, a3, &qword_100723718);
}

uint64_t sub_10050AFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100512BA0(a1, a2, a3, &qword_100723718);
}

uint64_t sub_10050B008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100512C38(a1, a2, a3, &qword_100723718);
}

uint64_t sub_10050B014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100512CC0(a1, a2, a3, &qword_100723718);
}

uint64_t sub_10050B020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10050B034);
}

uint64_t sub_10050B034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100512D64(a1, a2, a3, &qword_100723718);
}

uint64_t sub_10050B040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10050B054);
}

uint64_t sub_10050B054(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100512E44(a1, a2, a3, a4, &qword_100723718);
}

uint64_t type metadata accessor for VerifiedClaim(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100731778);
}

void sub_10050B080()
{
  sub_100512934(319, (unint64_t *)&unk_100731788, (void (*)(void))sub_1004D204C, (void (*)(void))sub_1004D20A0);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for VerifiedClaimHeader()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for VerifiedClaimHeader(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for VerifiedClaimHeader(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VerifiedClaimHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for VerifiedClaimHeader()
{
  return &type metadata for VerifiedClaimHeader;
}

uint64_t destroy for VerifiedClaimDataElement()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VerifiedClaimDataElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VerifiedClaimDataElement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VerifiedClaimDataElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for VerifiedClaimDataElement()
{
  return &type metadata for VerifiedClaimDataElement;
}

uint64_t sub_10050B650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10050B658()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10050B704(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || v7 + ((v6 + 32) & (unint64_t)~v6) + 1 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    uint64_t v12 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v13 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    void *v12 = *v13;
    v12[1] = v13[1];
    uint64_t v14 = ((unint64_t)v12 + v6 + 16) & ~v6;
    uint64_t v15 = ((unint64_t)v13 + v6 + 16) & ~v6;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v14, v15, v4);
    *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 + v7);
  }
  return a1;
}

uint64_t sub_10050B84C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_10050B8D0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 16) & ~v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v11, v12, v7);
  *(unsigned char *)(*(void *)(v9 + 48) + v11) = *(unsigned char *)(*(void *)(v9 + 48) + v12);
  return a1;
}

void *sub_10050B99C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(unsigned char *)(*(void *)(v9 + 40) + v11) = *(unsigned char *)(*(void *)(v9 + 40) + v12);
  return a1;
}

_OWORD *sub_10050BA80(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  *(unsigned char *)(*(void *)(v7 + 32) + v9) = *(unsigned char *)(*(void *)(v7 + 32) + v10);
  return a1;
}

void *sub_10050BB24(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 16) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 16) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  *(unsigned char *)(*(void *)(v10 + 24) + v12) = *(unsigned char *)(*(void *)(v10 + 24) + v13);
  return a1;
}

uint64_t sub_10050BBF0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 32) & ~v6) + 1;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 16) & ~v6);
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_10050BD9C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x10050C008);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for MerkleTreeLeafNode()
{
  return sub_100511F6C();
}

uint64_t sub_10050C048(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100731860);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned int v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100510364();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v9 = *(void *)(v3 + 96);
    long long v10 = *(_OWORD *)(v3 + 64);
    v13[0] = *(_OWORD *)(v3 + 48);
    v13[1] = v10;
    v13[2] = *(_OWORD *)(v3 + 80);
    uint64_t v14 = v9;
    char v15 = 2;
    sub_10050FBCC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&v13[0] = *(void *)(v3 + 104);
    char v15 = 3;
    sub_100510AE8(&qword_100731868, v11, (void (*)(uint64_t))type metadata accessor for MerkleTreeDetached);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&v13[0] = *(void *)(v3 + 112);
    char v15 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10050C2F8(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3C18, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_10050C348(char a1)
{
  uint64_t result = 1752392040;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x70756F7267;
      break;
    case 2:
      uint64_t result = 1635017060;
      break;
    case 3:
      uint64_t result = 0x6465686361746564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10050C3C4(char a1)
{
  uint64_t result = 1752392040;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x70756F7267;
      break;
    case 2:
      uint64_t result = 1635017060;
      break;
    case 3:
      uint64_t result = 0x6465686361746564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10050C440@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_100509E10(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10050C498(void *a1)
{
  return sub_10050C048(a1);
}

uint64_t sub_10050C4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10050C530(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10050C59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10050C60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

unint64_t sub_10050C67C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = (void *)a1[1];
  v5._uint64_t countAndFlagsBits = *a1;
  v5._object = v3;
  unint64_t result = sub_10050C2F8(v5);
  *a2 = result;
  return result;
}

uint64_t sub_10050C6B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10050C348(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10050C6E4()
{
  return sub_10050C3C4(*v0);
}

uint64_t sub_10050C6F0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10050C344(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10050C720@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100510D90();
  *a1 = result;
  return result;
}

uint64_t sub_10050C74C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10050C7A0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_10050C7F4@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v50 = a4;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v47 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v48 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = *((void *)a2 - 1);
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MerkleTreeLeafNode.CodingKeys();
  swift_getWitnessTable();
  uint64_t v55 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v52 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  unsigned int v12 = (char *)&v40 - v11;
  uint64_t v54 = a3;
  uint64_t v13 = type metadata accessor for MerkleTreeLeafNode();
  uint64_t v49 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  char v15 = (uint64_t *)((char *)&v40 - v14);
  sub_10000C728(a1, a1[3]);
  unsigned int v16 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v44 = v13;
  Swift::String v45 = v15;
  uint64_t v18 = v53;
  Class v58 = a1;
  LOBYTE(v56) = 0;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v20 = v12;
  unint64_t v21 = v45;
  *Swift::String v45 = v19;
  v21[1] = (uint64_t)v22;
  uint64_t v43 = v19;
  LOBYTE(v56) = 1;
  uint64_t v23 = v22;
  swift_bridgeObjectRetain();
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  Swift::String v42 = v23;
  v21[2] = v24;
  v21[3] = v25;
  LOBYTE(v56) = 2;
  unint64_t v26 = v51;
  uint64_t v54 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = (char *)v21 + *(int *)(v44 + 40);
  uint64_t v28 = *(void (**)(char *, char *, char *))(v18 + 32);
  uint64_t v51 = a2;
  v28(v27, v26, a2);
  LOBYTE(v56) = 3;
  char v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v30 = v21;
  Swift::String v41 = v20;
  if (v29 == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = v44;
    *((unsigned char *)v21 + *(int *)(v44 + 44)) = 0;
    uint64_t v34 = (uint64_t)v58;
    uint64_t v35 = v52;
LABEL_11:
    (*(void (**)(char *, uint64_t))(v35 + 8))(v41, v55);
    uint64_t v36 = v49;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v49 + 16))(v50, v30, v33);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v34);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v36 + 8))(v30, v33);
  }
  uint64_t v33 = v44;
  *((unsigned char *)v21 + *(int *)(v44 + 44)) = v29 & 1;
  uint64_t v34 = (uint64_t)v58;
  uint64_t v35 = v52;
  if ((v29 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v56 = 0;
  unint64_t v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  uint64_t v56 = 0x5B65646F6ELL;
  unint64_t v57 = 0xE500000000000000;
  v37._uint64_t countAndFlagsBits = v43;
  v37._object = v42;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._object = (void *)0x8000000100652C70;
  v38._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v38);
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v48, enum case for DIPError.Code.invalidClaim(_:), v47);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v39 = v45;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v41, v55);
  uint64_t v31 = v54;
  uint64_t v32 = v51;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v34);
  swift_bridgeObjectRelease();
  if (!v31) {
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(char *, char *))(v18 + 8))((char *)v39 + *(int *)(v44 + 40), v32);
}

uint64_t sub_10050CF00(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  v11[0] = *(void *)(a2 + 24);
  v11[1] = v4;
  type metadata accessor for MerkleTreeLeafNode.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - v7;
  sub_10000C728(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  uint64_t v9 = v11[3];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v9)
  {
    char v14 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v13 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v12 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10050D100@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10050C7F4(a1, *(char **)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_10050D120(void *a1, uint64_t a2)
{
  return sub_10050CF00(a1, a2);
}

uint64_t sub_10050D138(char *a1, char *a2)
{
  return sub_1004721B4(*a1, *a2);
}

Swift::Int sub_10050D144()
{
  return Hasher._finalize()();
}

uint64_t sub_10050D1D8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10050D258()
{
  return Hasher._finalize()();
}

uint64_t sub_10050D2E8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3C98, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10050D348(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6165486D69616C63;
  if (*v1) {
    uint64_t v2 = 0x7961506D69616C63;
  }
  unint64_t v3 = 0xEB00000000726564;
  if (*v1) {
    unint64_t v3 = 0xEC00000064616F6CLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10050D398()
{
  if (*v0) {
    return 0x7961506D69616C63;
  }
  else {
    return 0x6165486D69616C63;
  }
}

uint64_t sub_10050D3E4@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3C98, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_10050D448(uint64_t a1)
{
  unint64_t v2 = sub_100511884();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10050D484(uint64_t a1)
{
  unint64_t v2 = sub_100511884();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10050D4C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v28 = sub_100007764(&qword_100723718);
  uint64_t v25 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  unint64_t v26 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100007764(&qword_1007318A8);
  uint64_t v27 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  Swift::Int v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v6 - 8);
  uint64_t v31 = type metadata accessor for DIPSignpost();
  uint64_t v7 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for VerifiedClaim(0);
  __chkstk_darwin(v10);
  char v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DaemonSignposts.decodeVerifiedClaim.getter();
  DIPSignpost.init(_:)();
  uint64_t v13 = a1[3];
  char v30 = a1;
  sub_10000C728(a1, v13);
  sub_100511884();
  char v14 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    uint64_t v18 = (uint64_t)v30;
    uint64_t v19 = v31;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v18);
  }
  else
  {
    uint64_t v32 = v12;
    uint64_t v15 = v25;
    char v35 = 0;
    sub_1000B6120(&qword_100726518, &qword_100723718);
    unsigned int v16 = v26;
    uint64_t v17 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v32, v16, v17);
    type metadata accessor for MerkleTreeDetached();
    char v34 = 1;
    sub_100510AE8(&qword_100731858, v20, (void (*)(uint64_t))type metadata accessor for MerkleTreeDetached);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v29);
    uint64_t v21 = *(int *)(v10 + 20);
    uint64_t v22 = (uint64_t)v32;
    *(void *)&v32[v21] = v33;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v31);
    sub_100513990(v22, v24, type metadata accessor for VerifiedClaim);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v30);
    return sub_1005139F8(v22, type metadata accessor for VerifiedClaim);
  }
}

uint64_t sub_10050D9B8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_1007318B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100511884();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  sub_100007764(&qword_100723718);
  sub_1000B6120(&qword_100726520, &qword_100723718);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v12 = *(void *)(v3 + *(int *)(type metadata accessor for VerifiedClaim(0) + 20));
    v11[15] = 1;
    type metadata accessor for MerkleTreeDetached();
    sub_100510AE8(&qword_100731868, v9, (void (*)(uint64_t))type metadata accessor for MerkleTreeDetached);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10050DBB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10050D4C0(a1, a2);
}

uint64_t sub_10050DBC8(void *a1)
{
  return sub_10050D9B8(a1);
}

Swift::Int sub_10050DBE0()
{
  return Hasher._finalize()();
}

uint64_t sub_10050DC3C()
{
  return String.hash(into:)();
}

Swift::Int sub_10050DC5C()
{
  return Hasher._finalize()();
}

uint64_t sub_10050DCB4@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3CE8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_10050DD08(void *a1@<X8>)
{
  *a1 = 0x762D656C6B72654DLL;
  a1[1] = 0xEB00000000302E31;
}

uint64_t sub_10050DD2C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10050DD8C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10050DDDC(char a1)
{
  uint64_t result = 0x6E6F6973726576;
  switch(a1)
  {
    case 1:
      uint64_t result = 25705;
      break;
    case 2:
      uint64_t result = 0x6C4368636E75616CLL;
      break;
    case 3:
      uint64_t result = 0x726575737369;
      break;
    case 4:
      uint64_t result = 0x646575737369;
      break;
    case 5:
      uint64_t result = 0x6974617269707865;
      break;
    case 6:
      uint64_t result = 0x776F6C666B726F77;
      break;
    case 7:
      uint64_t result = 1919248756;
      break;
    case 8:
      uint64_t result = 0x6D69616C63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10050DEF8(char a1)
{
  uint64_t result = 0x6E6F6973726576;
  switch(a1)
  {
    case 1:
      uint64_t result = 25705;
      break;
    case 2:
      uint64_t result = 0x6C4368636E75616CLL;
      break;
    case 3:
      uint64_t result = 0x726575737369;
      break;
    case 4:
      uint64_t result = 0x646575737369;
      break;
    case 5:
      uint64_t result = 0x6974617269707865;
      break;
    case 6:
      uint64_t result = 0x776F6C666B726F77;
      break;
    case 7:
      uint64_t result = 1919248756;
      break;
    case 8:
      uint64_t result = 0x6D69616C63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10050E014(unsigned __int8 *a1, char *a2)
{
  return sub_100470AF8(*a1, *a2);
}

Swift::Int sub_10050E020()
{
  return Hasher._finalize()();
}

uint64_t sub_10050E068()
{
  return sub_10029BDA0();
}

Swift::Int sub_10050E070()
{
  return Hasher._finalize()();
}

unint64_t sub_10050E0B4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100510D98(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10050E0E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10050DDDC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10050E110()
{
  return sub_10050DEF8(*v0);
}

unint64_t sub_10050E118@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100510D98(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10050E140(uint64_t a1)
{
  unint64_t v2 = sub_10051156C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10050E17C(uint64_t a1)
{
  unint64_t v2 = sub_10051156C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10050E1B8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100731890);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10051156C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11[0]) = 0;
  sub_100511710();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100511764(v3 + 16, (uint64_t)v13);
    sub_100511764((uint64_t)v13, (uint64_t)v11);
    char v12 = 2;
    sub_100007764(&qword_1007268F0);
    sub_1005117CC((unint64_t *)&qword_100721330);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 120);
    v11[0] = *(_OWORD *)(v3 + 104);
    v11[1] = v9;
    char v12 = 8;
    sub_100511830();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10050E4B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = sub_100007764(&qword_100731B10);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1005138E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

__n128 sub_10050E624@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100510DE4(a1, (uint64_t)v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(void *)(a2 + 128) = v9;
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10050E690(void *a1)
{
  return sub_10050E1B8(a1);
}

uint64_t sub_10050E6E4()
{
  if (*v0) {
    return 0x68736148746F6F72;
  }
  else {
    return 0xD000000000000013;
  }
}

uint64_t sub_10050E724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1005118D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10050E74C(uint64_t a1)
{
  unint64_t v2 = sub_1005138E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10050E788(uint64_t a1)
{
  unint64_t v2 = sub_1005138E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10050E7C4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1005119C8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10050E7F4(void *a1)
{
  return sub_10050E4B0(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10050E814(unsigned __int8 *a1, char *a2)
{
  return sub_10047050C(*a1, *a2);
}

Swift::Int sub_10050E820()
{
  return Hasher._finalize()();
}

uint64_t sub_10050E8F8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10050E9B8()
{
  return Hasher._finalize()();
}

unint64_t sub_10050EA8C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100511BD0(*a1);
  *a2 = result;
  return result;
}

void sub_10050EABC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEB00000000644965;
  uint64_t v3 = 0x7475626972747461;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x64657669726564;
      goto LABEL_3;
    case 2:
      *a1 = 1953259891;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x65756C6176;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10050EB54()
{
  uint64_t result = 0x7475626972747461;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x64657669726564;
      break;
    case 2:
      uint64_t result = 1953259891;
      break;
    case 3:
      uint64_t result = 0x65756C6176;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10050EBE0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100511BD0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10050EC08(uint64_t a1)
{
  unint64_t v2 = sub_100511EFC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10050EC44(uint64_t a1)
{
  unint64_t v2 = sub_100511EFC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10050EC80(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_1007318D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100511EFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10050EE30(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100731B60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_100513A58();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  sub_100007764((uint64_t *)&unk_100726500);
  sub_1000B6120(&qword_100731B40, (uint64_t *)&unk_100726500);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v12 = *(void *)(v3 + *(int *)(type metadata accessor for VerifiedClaimPresentment(0) + 20));
    v11[15] = 1;
    type metadata accessor for MerkleTreeDetached();
    sub_100510AE8(&qword_100731868, v9, (void (*)(uint64_t))type metadata accessor for MerkleTreeDetached);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10050F028@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v25 = sub_100007764((uint64_t *)&unk_100726500);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100007764(&qword_100731B50);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for VerifiedClaimPresentment(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100513A58();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v11 = v10;
  uint64_t v12 = v23;
  char v29 = 0;
  sub_1000B6120(&qword_100731B28, (uint64_t *)&unk_100726500);
  uint64_t v13 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v21 = (uint64_t)v11;
  v14(v11, v5, v13);
  type metadata accessor for MerkleTreeDetached();
  char v28 = 1;
  sub_100510AE8(&qword_100731858, v15, (void (*)(uint64_t))type metadata accessor for MerkleTreeDetached);
  uint64_t v16 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v16);
  uint64_t v18 = v21;
  uint64_t v17 = v22;
  *(void *)(v21 + *(int *)(v8 + 20)) = v27;
  sub_100513990(v18, v17, type metadata accessor for VerifiedClaimPresentment);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  return sub_1005139F8(v18, type metadata accessor for VerifiedClaimPresentment);
}

uint64_t sub_10050F3A8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100007764(&qword_100731B38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_10051393C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  sub_100007764((uint64_t *)&unk_100726500);
  sub_1000B6120(&qword_100731B40, (uint64_t *)&unk_100726500);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v12 = *(void *)(v3 + *(int *)(type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization(0) + 20));
    v11[15] = 1;
    type metadata accessor for MerkleTreeDetached();
    sub_100510AE8(&qword_100731868, v9, (void (*)(uint64_t))type metadata accessor for MerkleTreeDetached);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[14] = 2;
    sub_100007764((uint64_t *)&unk_100726550);
    sub_1000B6120(&qword_100731B48, (uint64_t *)&unk_100726550);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10050F614@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = sub_100007764((uint64_t *)&unk_100726550);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764((uint64_t *)&unk_100726500);
  uint64_t v27 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v28 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100007764(&qword_100731B18);
  uint64_t v26 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  char v30 = a1;
  sub_10000C728(a1, v13);
  sub_10051393C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v30);
  }
  uint64_t v22 = v5;
  uint64_t v15 = v26;
  uint64_t v14 = v27;
  char v34 = 0;
  sub_1000B6120(&qword_100731B28, (uint64_t *)&unk_100726500);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v17 = v28;
  char v28 = (char *)v6;
  v16(v12, v17, v6);
  type metadata accessor for MerkleTreeDetached();
  char v33 = 1;
  sub_100510AE8(&qword_100731858, v18, (void (*)(uint64_t))type metadata accessor for MerkleTreeDetached);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v10;
  *(void *)&v12[*(int *)(v10 + 20)] = v31;
  char v32 = 2;
  sub_1000B6120(&qword_100731B30, (uint64_t *)&unk_100726550);
  uint64_t v20 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v29);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v12[*(int *)(v19 + 24)], v22, v20);
  sub_100513990((uint64_t)v12, v24, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v30);
  return sub_1005139F8((uint64_t)v12, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization);
}

double sub_10050FAE0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100511C1C(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_10050FB30(void *a1)
{
  return sub_10050EC80(a1);
}

unint64_t sub_10050FB48(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10050FB78();
  unint64_t result = sub_10050FBCC();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10050FB78()
{
  unint64_t result = qword_100731838;
  if (!qword_100731838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731838);
  }
  return result;
}

unint64_t sub_10050FBCC()
{
  unint64_t result = qword_100731840;
  if (!qword_100731840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731840);
  }
  return result;
}

uint64_t type metadata accessor for MerkleTreeLeafNode.CodingKeys()
{
  return sub_100511F6C();
}

uint64_t sub_10050FC38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100513FDC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10050FC60(uint64_t a1)
{
  unint64_t v2 = sub_100513A58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10050FC9C(uint64_t a1)
{
  unint64_t v2 = sub_100513A58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10050FCD8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10050F028(a1, a2);
}

uint64_t sub_10050FCF0(void *a1)
{
  return sub_10050EE30(a1);
}

uint64_t sub_10050FD08()
{
  unint64_t v1 = 0x7961506D69616C63;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000027;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6165486D69616C63;
  }
}

uint64_t sub_10050FD78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100514100(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10050FDA0(uint64_t a1)
{
  unint64_t v2 = sub_10051393C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10050FDDC(uint64_t a1)
{
  unint64_t v2 = sub_10051393C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10050FE18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10050F614(a1, a2);
}

uint64_t sub_10050FE30(void *a1)
{
  return sub_10050F3A8(a1);
}

uint64_t sub_10050FE48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v20 = a3;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(*a5 + 16)
    && (swift_bridgeObjectRetain(),
        sub_100590548(a1, (uint64_t)a2),
        char v14 = v13,
        swift_bridgeObjectRelease(),
        (v14 & 1) != 0))
  {
    unint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    unint64_t v18 = 0xD00000000000001DLL;
    unint64_t v19 = 0x8000000100652EA0;
    v15._uint64_t countAndFlagsBits = a1;
    v15._object = a2;
    String.append(_:)(v15);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.invalidClaim(_:), v9);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100510AE8((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v18 = *a5;
    *a5 = 0x8000000000000000;
    sub_100562120(v20, a4, a1, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
    *a5 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1005100F0@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  long long v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_10002CEB0(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x100510354);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10000C5F4(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

unint64_t sub_100510364()
{
  unint64_t result = qword_100731850;
  if (!qword_100731850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731850);
  }
  return result;
}

uint64_t sub_1005103B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100510408(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10051049C(uint64_t a1, unint64_t a2)
{
  v10[3] = &type metadata for Data;
  v10[4] = &protocol witness table for Data;
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = sub_10000C728(v10, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_10002CEB0(a1, a2);
      sub_10002CEB0(v5, v6);
      sub_100510408((int)v5, v5 >> 32);
      sub_10000C5F4(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_10002CEB0(a1, a2);
      swift_retain();
      swift_retain();
      sub_100510408(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_10002CEB0(a1, a2);
      Data._Representation.append(contentsOf:)();
      break;
  }
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v10);
}

uint64_t sub_1005106C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1005100F0((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100510798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_1005100F0(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_100510850(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x100510AB8);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_10002CEB0(a3, a4);
                  sub_10002CEB0(a1, a2);
                  char v17 = sub_100510798((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10000C5F4(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_10002CEB0(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_100510798(v21, v22, v20, a3, a4);
                  sub_10000C5F4(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_10002CEB0(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_10002CEB0(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_1005106C0(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10000C5F4(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100510AE8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100510B30(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = 16 * i;
    char v17 = (uint64_t *)(*(void *)(a1 + 48) + v16);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(a1 + 56) + v16);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v18, v19, v22, v21);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v25) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v24 + 8 * v10);
    if (!v14)
    {
      int64_t v15 = v10 + 1;
      if (v10 + 1 >= v25) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v24 + 8 * v15);
      if (v14) {
        goto LABEL_14;
      }
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v25) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v24 + 8 * v15);
      if (v14) {
        goto LABEL_14;
      }
      int64_t v15 = v10 + 3;
      if (v10 + 3 >= v25) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v24 + 8 * v15);
      if (v14)
      {
LABEL_14:
        int64_t v10 = v15;
        goto LABEL_15;
      }
      int64_t v23 = v10 + 4;
      if (v10 + 4 >= v25) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v24 + 8 * v23);
      v10 += 4;
      if (!v14) {
        break;
      }
    }
LABEL_15:
    unint64_t v8 = (v14 - 1) & v14;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v25) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v24 + 8 * v10);
    ++v23;
    if (v14) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_100510D44(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3B68, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t sub_100510D90()
{
  return 4;
}

unint64_t sub_100510D98(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3D20, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t sub_100510DE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = sub_100007764(&qword_100731870);
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_10051156C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v43 = v5;
    LOBYTE(v54[0]) = 0;
    sub_1005115C0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    LOBYTE(v54[0]) = 1;
    uint64_t v8 = (uint64_t)a1;
    uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    sub_100007764(&qword_1007268F0);
    LOBYTE(v45) = 2;
    sub_1005117CC((unint64_t *)&qword_1007222C8);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v42 = v10;
    uint64_t v11 = v54[0];
    LOBYTE(v54[0]) = 3;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v54[0]) = 4;
    uint64_t v14 = v13;
    swift_bridgeObjectRetain();
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v41 = v14;
    uint64_t v36 = v15;
    LOBYTE(v54[0]) = 5;
    uint64_t v40 = v16;
    swift_bridgeObjectRetain();
    uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v54[0]) = 6;
    uint64_t v39 = v17;
    swift_bridgeObjectRetain();
    uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v54[0]) = 7;
    uint64_t v38 = v18;
    swift_bridgeObjectRetain();
    uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v21 = v20;
    uint64_t v33 = v19;
    char v58 = 8;
    sub_100511614();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v44);
    uint64_t v43 = v55;
    uint64_t v44 = v12;
    uint64_t v31 = *((void *)&v56 + 1);
    uint64_t v32 = v56;
    uint64_t v30 = v57;
    *(void *)&long long v45 = v37;
    *((void *)&v45 + 1) = v42;
    *(void *)&long long v46 = v11;
    *((void *)&v46 + 1) = v12;
    *(void *)&long long v47 = v41;
    *((void *)&v47 + 1) = v36;
    *(void *)&long long v48 = v40;
    *((void *)&v48 + 1) = v35;
    uint64_t v22 = v39;
    *(void *)&long long v49 = v39;
    *((void *)&v49 + 1) = v34;
    *(void *)&long long v50 = v38;
    *((void *)&v50 + 1) = v33;
    *(void *)&long long v51 = v21;
    *((void *)&v51 + 1) = v55;
    long long v52 = v56;
    uint64_t v53 = v57;
    sub_100511668((uint64_t)&v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v8);
    v54[0] = v37;
    v54[1] = v42;
    v54[2] = v11;
    v54[3] = v44;
    v54[4] = v23;
    v54[5] = v36;
    v54[6] = v40;
    v54[7] = v35;
    v54[8] = v22;
    v54[9] = v34;
    v54[10] = v24;
    v54[11] = v33;
    v54[12] = v21;
    v54[13] = v43;
    v54[14] = v32;
    v54[15] = v31;
    v54[16] = v30;
    uint64_t result = sub_1001D6030((uint64_t)v54);
    long long v26 = v52;
    *(_OWORD *)(a2 + 96) = v51;
    *(_OWORD *)(a2 + 112) = v26;
    *(void *)(a2 + 128) = v53;
    long long v27 = v48;
    *(_OWORD *)(a2 + 32) = v47;
    *(_OWORD *)(a2 + 48) = v27;
    long long v28 = v50;
    *(_OWORD *)(a2 + 64) = v49;
    *(_OWORD *)(a2 + 80) = v28;
    long long v29 = v46;
    *(_OWORD *)a2 = v45;
    *(_OWORD *)(a2 + 16) = v29;
  }
  return result;
}

unint64_t sub_10051156C()
{
  unint64_t result = qword_100731878;
  if (!qword_100731878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731878);
  }
  return result;
}

unint64_t sub_1005115C0()
{
  unint64_t result = qword_100731880;
  if (!qword_100731880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731880);
  }
  return result;
}

unint64_t sub_100511614()
{
  unint64_t result = qword_100731888;
  if (!qword_100731888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731888);
  }
  return result;
}

uint64_t sub_100511668(uint64_t a1)
{
  return a1;
}

unint64_t sub_100511710()
{
  unint64_t result = qword_100731898;
  if (!qword_100731898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731898);
  }
  return result;
}

uint64_t sub_100511764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100721320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005117CC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100019364(&qword_1007268F0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100511830()
{
  unint64_t result = qword_1007318A0;
  if (!qword_1007318A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007318A0);
  }
  return result;
}

unint64_t sub_100511884()
{
  unint64_t result = qword_1007318B0;
  if (!qword_1007318B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007318B0);
  }
  return result;
}

uint64_t sub_1005118D8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100652EE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x68736148746F6F72 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1005119C8(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100731B00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10000C728(a1, a1[3]);
  sub_1005138E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100511BD0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3E18, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_100511C1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100007764(&qword_1007318C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_100511EFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v28 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    char v27 = 1;
    swift_bridgeObjectRetain();
    int v24 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v23 = v9;
    char v26 = 2;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v22 = v12;
    char v25 = 3;
    swift_bridgeObjectRetain();
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v17 = v16;
    v24 &= 1u;
    uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v21 = v15;
    v18(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v23;
    *(void *)(a2 + 8) = v11;
    *(unsigned char *)(a2 + 16) = v24;
    *(void *)(a2 + 24) = v22;
    *(void *)(a2 + 32) = v14;
    *(void *)(a2 + 40) = v21;
    *(void *)(a2 + 48) = v17;
  }
  return result;
}

unint64_t sub_100511EFC()
{
  unint64_t result = qword_1007318C8;
  if (!qword_1007318C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007318C8);
  }
  return result;
}

uint64_t sub_100511F50(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_10050FE48(a1, a2, a3, a4, *(unint64_t **)(v4 + 16));
}

uint64_t sub_100511F6C()
{
  return swift_getGenericMetadata();
}

uint64_t *sub_100511F9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_100007764((uint64_t *)&unk_100726500);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    swift_retain();
    uint64_t v11 = sub_100007764((uint64_t *)&unk_100726550);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_1005120B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100726500);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = sub_100007764((uint64_t *)&unk_100726550);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_100512174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764((uint64_t *)&unk_100726500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  swift_retain();
  uint64_t v10 = sub_100007764((uint64_t *)&unk_100726550);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_100512240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764((uint64_t *)&unk_100726500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_100007764((uint64_t *)&unk_100726550);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10051231C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764((uint64_t *)&unk_100726500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_100007764((uint64_t *)&unk_100726550);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_1005123E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764((uint64_t *)&unk_100726500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_100007764((uint64_t *)&unk_100726550);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1005124B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005124CC);
}

uint64_t sub_1005124CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764((uint64_t *)&unk_100726500);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_100007764((uint64_t *)&unk_100726550);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100512600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100512614);
}

uint64_t sub_100512614(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100007764((uint64_t *)&unk_100726500);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_100007764((uint64_t *)&unk_100726550);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization(uint64_t a1)
{
  return sub_100048DF0(a1, (uint64_t *)&unk_100731930);
}

void sub_100512768()
{
  sub_100512874();
  if (v0 <= 0x3F)
  {
    sub_100512934(319, (unint64_t *)&unk_100731948, (void (*)(void))sub_1001D60D8, (void (*)(void))sub_1001D612C);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100512874()
{
  if (!qword_100731940)
  {
    sub_100019364(&qword_100723718);
    sub_1000B6120(&qword_100726518, &qword_100723718);
    sub_1000B6120(&qword_100726520, &qword_100723718);
    unint64_t v0 = type metadata accessor for JWSSignedJSON();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100731940);
    }
  }
}

void sub_100512934(uint64_t a1, unint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  if (!*a2)
  {
    a3();
    a4();
    unint64_t v6 = type metadata accessor for JWSSignedJSON();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t *sub_1005129B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1005129BC(a1, a2, a3, (uint64_t *)&unk_100726500);
}

uint64_t *sub_1005129BC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    uint64_t v8 = sub_100007764(a4);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_100512A88(uint64_t a1, uint64_t a2)
{
  return sub_100512A94(a1, a2, (uint64_t *)&unk_100726500);
}

uint64_t sub_100512A94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_100007764(a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  return swift_release();
}

uint64_t sub_100512B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100512B14(a1, a2, a3, (uint64_t *)&unk_100726500);
}

uint64_t sub_100512B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_100007764(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_100512B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100512BA0(a1, a2, a3, (uint64_t *)&unk_100726500);
}

uint64_t sub_100512BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_100007764(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a1, a2, v7);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100512C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100512C38(a1, a2, a3, (uint64_t *)&unk_100726500);
}

uint64_t sub_100512C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_100007764(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100512CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100512CC0(a1, a2, a3, (uint64_t *)&unk_100726500);
}

uint64_t sub_100512CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_100007764(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a1, a2, v7);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_100512D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100512D58);
}

uint64_t sub_100512D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100512D64(a1, a2, a3, (uint64_t *)&unk_100726500);
}

uint64_t sub_100512D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_100007764(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v9(a1, a2, v7);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100512E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100512E38);
}

uint64_t sub_100512E38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100512E44(a1, a2, a3, a4, (uint64_t *)&unk_100726500);
}

uint64_t sub_100512E44(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = sub_100007764(a5);
  uint64_t v10 = *(void *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v11(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for VerifiedClaimPresentment(uint64_t a1)
{
  return sub_100048DF0(a1, qword_1007319D8);
}

void sub_100512F20()
{
  sub_100512874();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for VerifiedClaimDataElement.CodingKeys()
{
  return &type metadata for VerifiedClaimDataElement.CodingKeys;
}

ValueMetadata *type metadata accessor for VerifiedClaim.CodingKeys()
{
  return &type metadata for VerifiedClaim.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for VerifiedClaimHeader.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005130ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifiedClaimHeader.CodingKeys()
{
  return &type metadata for VerifiedClaimHeader.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for MerkleTreeDetached.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005131B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MerkleTreeDetached.CodingKeys()
{
  return &type metadata for MerkleTreeDetached.CodingKeys;
}

uint64_t sub_1005131E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

unsigned char *_s8coreidvd24VerifiedClaimDataElementV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005132BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Claim()
{
  return &type metadata for Claim;
}

unsigned char *storeEnumTagSinglePayload for VerifiedClaimHeader.VerifiedClaimVersion(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100513390);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifiedClaimHeader.VerifiedClaimVersion()
{
  return &type metadata for VerifiedClaimHeader.VerifiedClaimVersion;
}

unint64_t sub_1005133CC()
{
  unint64_t result = qword_100731A90;
  if (!qword_100731A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731A90);
  }
  return result;
}

uint64_t sub_100513420()
{
  return swift_getWitnessTable();
}

unint64_t sub_100513440()
{
  unint64_t result = qword_100731A98;
  if (!qword_100731A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731A98);
  }
  return result;
}

unint64_t sub_100513498()
{
  unint64_t result = qword_100731AA0;
  if (!qword_100731AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AA0);
  }
  return result;
}

unint64_t sub_1005134F0()
{
  unint64_t result = qword_100731AA8;
  if (!qword_100731AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AA8);
  }
  return result;
}

unint64_t sub_100513548()
{
  unint64_t result = qword_100731AB0;
  if (!qword_100731AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AB0);
  }
  return result;
}

unint64_t sub_1005135A0()
{
  unint64_t result = qword_100731AB8;
  if (!qword_100731AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AB8);
  }
  return result;
}

unint64_t sub_1005135F8()
{
  unint64_t result = qword_100731AC0;
  if (!qword_100731AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AC0);
  }
  return result;
}

unint64_t sub_100513650()
{
  unint64_t result = qword_100731AC8;
  if (!qword_100731AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AC8);
  }
  return result;
}

unint64_t sub_1005136A8()
{
  unint64_t result = qword_100731AD0;
  if (!qword_100731AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AD0);
  }
  return result;
}

unint64_t sub_100513700()
{
  unint64_t result = qword_100731AD8;
  if (!qword_100731AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AD8);
  }
  return result;
}

unint64_t sub_100513758()
{
  unint64_t result = qword_100731AE0;
  if (!qword_100731AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AE0);
  }
  return result;
}

unint64_t sub_1005137B0()
{
  unint64_t result = qword_100731AE8;
  if (!qword_100731AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AE8);
  }
  return result;
}

unint64_t sub_100513808()
{
  unint64_t result = qword_100731AF0;
  if (!qword_100731AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AF0);
  }
  return result;
}

uint64_t sub_10051385C()
{
  return swift_getWitnessTable();
}

uint64_t sub_100513878()
{
  return swift_getWitnessTable();
}

unint64_t sub_100513894()
{
  unint64_t result = qword_100731AF8;
  if (!qword_100731AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731AF8);
  }
  return result;
}

unint64_t sub_1005138E8()
{
  unint64_t result = qword_100731B08;
  if (!qword_100731B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731B08);
  }
  return result;
}

unint64_t sub_10051393C()
{
  unint64_t result = qword_100731B20;
  if (!qword_100731B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731B20);
  }
  return result;
}

uint64_t sub_100513990(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005139F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100513A58()
{
  unint64_t result = qword_100731B58;
  if (!qword_100731B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731B58);
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifiedClaimPresentment.CodingKeys()
{
  return &type metadata for VerifiedClaimPresentment.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for VerifiedClaimPresentmentWithDSDAuthorization.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100513B88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization.CodingKeys()
{
  return &type metadata for VerifiedClaimPresentmentWithDSDAuthorization.CodingKeys;
}

unsigned char *_s8coreidvd13VerifiedClaimV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100513C8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Claim.CodingKeys()
{
  return &type metadata for Claim.CodingKeys;
}

unint64_t sub_100513CC8()
{
  unint64_t result = qword_100731B68;
  if (!qword_100731B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731B68);
  }
  return result;
}

unint64_t sub_100513D20()
{
  unint64_t result = qword_100731B70;
  if (!qword_100731B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731B70);
  }
  return result;
}

unint64_t sub_100513D78()
{
  unint64_t result = qword_100731B78;
  if (!qword_100731B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731B78);
  }
  return result;
}

unint64_t sub_100513DD0()
{
  unint64_t result = qword_100731B80;
  if (!qword_100731B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731B80);
  }
  return result;
}

unint64_t sub_100513E28()
{
  unint64_t result = qword_100731B88;
  if (!qword_100731B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731B88);
  }
  return result;
}

unint64_t sub_100513E80()
{
  unint64_t result = qword_100731B90;
  if (!qword_100731B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731B90);
  }
  return result;
}

unint64_t sub_100513ED8()
{
  unint64_t result = qword_100731B98;
  if (!qword_100731B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731B98);
  }
  return result;
}

unint64_t sub_100513F30()
{
  unint64_t result = qword_100731BA0;
  if (!qword_100731BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731BA0);
  }
  return result;
}

unint64_t sub_100513F88()
{
  unint64_t result = qword_100731BA8;
  if (!qword_100731BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731BA8);
  }
  return result;
}

uint64_t sub_100513FDC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6165486D69616C63 && a2 == 0xEB00000000726564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7961506D69616C63 && a2 == 0xEC00000064616F6CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100514100(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6165486D69616C63 && a2 == 0xEB00000000726564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7961506D69616C63 && a2 == 0xEC00000064616F6CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000027 && a2 == 0x8000000100652F00)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100514284@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000C728(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  sub_10000C728(v9, v9[3]);
  uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v6;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v9);
  uint64_t result = _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  *a2 = v5;
  a2[1] = v7;
  return result;
}

uint64_t sub_100514350(void *a1)
{
  sub_10000C728(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_1000279F4((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v2);
}

unint64_t sub_1005143E8()
{
  return 0xD00000000000002BLL;
}

void *sub_100514404@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

Swift::Int sub_100514410()
{
  return Hasher._finalize()();
}

uint64_t sub_10051446C()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1005144C4()
{
  return Hasher._finalize()();
}

uint64_t sub_10051451C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100514528(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007764(&qword_100731C98);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1005172FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  sub_1005173A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100514678(uint64_t a1)
{
  unint64_t v2 = sub_1005172FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005146B4(uint64_t a1)
{
  unint64_t v2 = sub_1005172FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1005146F0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10051718C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10051471C(void *a1)
{
  return sub_100514528(a1, *v1, v1[1]);
}

uint64_t sub_100514738()
{
  v1[294] = v0;
  v1[295] = sub_100007764(&qword_100722D90);
  v1[296] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v1[297] = swift_task_alloc();
  v1[298] = swift_task_alloc();
  v1[299] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[300] = v2;
  v1[301] = *(void *)(v2 - 8);
  v1[302] = swift_task_alloc();
  uint64_t v3 = sub_100007764(&qword_100731C58);
  v1[303] = v3;
  v1[304] = *(void *)(v3 - 8);
  v1[305] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  v1[306] = v4;
  v1[307] = *(void *)(v4 - 8);
  v1[308] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v1[309] = v5;
  v1[310] = *(void *)(v5 - 8);
  v1[311] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v1[312] = v6;
  v1[313] = *(void *)(v6 - 8);
  v1[314] = swift_task_alloc();
  return _swift_task_switch(sub_1005149EC, 0, 0);
}

uint64_t sub_1005149EC()
{
  id v1 = [self standardUserDefaults];
  v2._object = (void *)0x8000000100652F90;
  v2._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(unint64_t, unint64_t))v0[1];
    return v4(0xD00000000000007BLL, 0x80000001006531E0);
  }
  else
  {
    v0[315] = *(void *)(v0[294] + 16);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[316] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100514BC8;
    return sub_1002B1A50((uint64_t)(v0 + 2), 0);
  }
}

uint64_t sub_100514BC8()
{
  Swift::String v2 = (void *)*v1;
  Swift::Bool v3 = (void *)*v1;
  unint64_t v67 = (void *)*v1;
  v3[317] = v0;
  uint64_t v35 = v2[2];
  uint64_t v34 = v2[3];
  uint64_t v33 = v2[4];
  uint64_t v32 = v2[5];
  uint64_t v4 = v3[6];
  uint64_t v5 = v3[7];
  uint64_t v31 = v2[8];
  uint64_t v6 = v3[9];
  uint64_t v30 = v2[10];
  uint64_t v29 = v2[11];
  uint64_t v28 = v2[12];
  uint64_t v27 = v2[13];
  uint64_t v26 = v2[14];
  uint64_t v25 = v2[15];
  uint64_t v24 = v2[16];
  uint64_t v23 = v2[17];
  uint64_t v22 = v2[18];
  uint64_t v21 = v2[19];
  uint64_t v20 = v2[20];
  char v19 = *((unsigned char *)v3 + 168);
  uint64_t v18 = v2[22];
  char v17 = *((unsigned char *)v3 + 184);
  uint64_t v7 = v2[24];
  uint64_t v8 = v2[25];
  uint64_t v9 = v2[26];
  char v10 = *((unsigned char *)v3 + 216);
  uint64_t v11 = v2[28];
  char v12 = *((unsigned char *)v3 + 232);
  uint64_t v13 = v2[30];
  char v66 = *((unsigned char *)v3 + 248);
  uint64_t v64 = v2[32];
  char v65 = *((unsigned char *)v3 + 264);
  uint64_t v63 = v2[34];
  char v62 = *((unsigned char *)v3 + 280);
  uint64_t v61 = v2[36];
  uint64_t v60 = v2[37];
  uint64_t v59 = v2[38];
  uint64_t v58 = v2[39];
  uint64_t v57 = v2[40];
  uint64_t v56 = v2[41];
  uint64_t v55 = v2[42];
  char v53 = *((unsigned char *)v3 + 345);
  char v54 = *((unsigned char *)v3 + 344);
  uint64_t v52 = v2[44];
  char v51 = *((unsigned char *)v3 + 360);
  uint64_t v50 = v2[46];
  char v49 = *((unsigned char *)v3 + 376);
  uint64_t v48 = v2[48];
  char v46 = *((unsigned char *)v3 + 393);
  char v47 = *((unsigned char *)v3 + 392);
  uint64_t v45 = v2[50];
  char v44 = *((unsigned char *)v3 + 408);
  uint64_t v43 = v2[52];
  uint64_t v42 = v2[53];
  uint64_t v41 = v2[54];
  uint64_t v40 = v2[55];
  long long v39 = *((_OWORD *)v3 + 28);
  uint64_t v38 = v2[58];
  uint64_t v37 = v2[59];
  uint64_t v36 = v2[60];
  uint64_t v14 = v2[61];
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100516B14, 0, 0);
  }
  else
  {
    v3[62] = v35;
    v3[63] = v34;
    v3[64] = v33;
    v3[65] = v32;
    v3[68] = v31;
    v3[70] = v30;
    v3[71] = v29;
    v3[72] = v28;
    v3[73] = v27;
    v3[74] = v26;
    v3[75] = v25;
    v3[76] = v24;
    v3[77] = v23;
    v3[78] = v22;
    v3[79] = v21;
    v3[80] = v20;
    *((unsigned char *)v3 + 648) = v19;
    v3[82] = v18;
    *((unsigned char *)v3 + 664) = v17;
    v3[84] = v7;
    v3[85] = v8;
    v3[86] = v9;
    *((unsigned char *)v3 + 696) = v10;
    v3[88] = v11;
    *((unsigned char *)v3 + 712) = v12;
    v3[90] = v13;
    *((unsigned char *)v3 + 728) = v66;
    v3[92] = v64;
    v3[66] = v4;
    v3[67] = v5;
    v3[69] = v6;
    *((unsigned char *)v3 + 744) = v65;
    v3[94] = v63;
    *((unsigned char *)v3 + 760) = v62;
    v3[96] = v61;
    v3[97] = v60;
    v3[98] = v59;
    v3[99] = v58;
    v3[100] = v57;
    v3[101] = v56;
    v3[102] = v55;
    *((unsigned char *)v3 + 824) = v54;
    *((unsigned char *)v3 + 825) = v53;
    v3[104] = v52;
    *((unsigned char *)v3 + 840) = v51;
    v3[106] = v50;
    *((unsigned char *)v3 + 856) = v49;
    v3[108] = v48;
    *((unsigned char *)v3 + 872) = v47;
    *((unsigned char *)v3 + 873) = v46;
    v3[110] = v45;
    *((unsigned char *)v3 + 888) = v44;
    v3[112] = v43;
    v3[113] = v42;
    v3[114] = v41;
    v3[115] = v40;
    *((_OWORD *)v3 + 58) = v39;
    v3[118] = v38;
    v3[119] = v37;
    v3[120] = v36;
    v3[121] = v14;
    sub_1002B6B6C((uint64_t)(v3 + 62));
    uint64_t v15 = (void *)swift_task_alloc();
    v3[318] = v15;
    *uint64_t v15 = v67;
    v15[1] = sub_1005153C8;
    return sub_1002AA1B8((uint64_t)(v3 + 230), 0xD000000000000024, 0x80000001006530A0, (uint64_t)_swiftEmptyArrayStorage, 1);
  }
}

uint64_t sub_1005153C8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1005154C4, 0, 0);
}

uint64_t sub_1005154C4()
{
  sub_1000BEA14((uint64_t)(v0 + 230), (uint64_t)(v0 + 176), &qword_100722350);
  if (sub_100044CCC((uint64_t)(v0 + 176)) == 1)
  {
    (*(void (**)(uint64_t, void, uint64_t))(v0[301] + 104))(v0[302], enum case for DIPError.Code.internalError(_:), v0[300]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_12:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_13:
    uint64_t v24 = v0[301];
    uint64_t v25 = v0[300];
    uint64_t v26 = v0[299];
    uint64_t v27 = v0[298];
    uint64_t v28 = v0[296];
    uint64_t v29 = v0[295];
    swift_getErrorValue();
    Error.dipErrorCode.getter();
    uint64_t v48 = *(void (**)(uint64_t, void, uint64_t))(v24 + 104);
    v48(v27, enum case for DIPError.Code.networkTimeOut(_:), v25);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v27, 0, 1, v25);
    uint64_t v30 = v28 + *(int *)(v29 + 48);
    sub_100174A64(v26, v28);
    sub_100174A64(v27, v30);
    uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    int v32 = v31(v28, 1, v25);
    uint64_t v33 = v0[300];
    if (v32 == 1)
    {
      uint64_t v34 = v0[299];
      sub_10000C6CC(v0[298], &qword_100723600);
      sub_10000C6CC(v34, &qword_100723600);
      if (v31(v30, 1, v33) == 1)
      {
        sub_10000C6CC(v0[296], &qword_100723600);
LABEL_20:
        v48(v0[302], enum case for DIPError.Code.documentReaderTermsAndConditionsFetchFailed(_:), v0[300]);
        swift_errorRetain();
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        char v46 = (uint64_t (*)(void))v0[1];
        return v46();
      }
    }
    else
    {
      sub_100174A64(v0[296], v0[297]);
      if (v31(v30, 1, v33) != 1)
      {
        uint64_t v39 = v0[302];
        uint64_t v40 = v0[301];
        uint64_t v41 = v0[300];
        uint64_t v42 = v0[299];
        uint64_t v43 = v0[298];
        uint64_t v44 = v0[297];
        uint64_t v47 = v0[296];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v39, v30, v41);
        sub_1002A6EC0(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
        dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v45(v39, v41);
        sub_10000C6CC(v43, &qword_100723600);
        sub_10000C6CC(v42, &qword_100723600);
        v45(v44, v41);
        sub_10000C6CC(v47, &qword_100723600);
        goto LABEL_20;
      }
      uint64_t v35 = v0[301];
      uint64_t v36 = v0[300];
      uint64_t v37 = v0[299];
      uint64_t v38 = v0[297];
      sub_10000C6CC(v0[298], &qword_100723600);
      sub_10000C6CC(v37, &qword_100723600);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v38, v36);
    }
    sub_10000C6CC(v0[296], &qword_100722D90);
    goto LABEL_20;
  }
  uint64_t v1 = v0[314];
  uint64_t v2 = v0[313];
  uint64_t v3 = v0[312];
  memcpy(v0 + 122, v0 + 176, 0x1B0uLL);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_10015A59C(1);
  v0[319] = v4;
  swift_bridgeObjectRelease();
  if (!v4)
  {
    uint64_t v21 = v0[302];
    uint64_t v22 = v0[301];
    uint64_t v23 = v0[300];
    sub_100044D90(v0 + 230);
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for DIPError.Code.internalError(_:), v23);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_12;
  }
  sub_1000BEA14((uint64_t)(v0 + 173), (uint64_t)(v0 + 292), &qword_100722398);
  sub_1000BEA14((uint64_t)(v0 + 292), (uint64_t)(v0 + 293), &qword_100722398);
  uint64_t v5 = v0[293];
  if (!v5 || !*(void *)(v5 + 16) || (unint64_t v6 = sub_100590548(0xD000000000000023, 0x8000000100653180), (v7 & 1) == 0))
  {
    uint64_t v18 = v0[302];
    uint64_t v19 = v0[301];
    uint64_t v20 = v0[300];
    sub_100044D90(v0 + 230);
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, enum case for DIPError.Code.internalError(_:), v20);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    goto LABEL_13;
  }
  uint64_t v8 = v0[308];
  uint64_t v9 = v0[307];
  uint64_t v10 = v0[306];
  uint64_t v11 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v6);
  uint64_t v12 = *v11;
  uint64_t v13 = (void *)v11[1];
  swift_bridgeObjectRetain();
  sub_100044D90(v0 + 230);
  v14._uint64_t countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v0[320] = 0x80000001006531B0;
  v0[289] = 0xD000000000000025;
  v0[290] = 0x80000001006531B0;
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v10);
  sub_1000B5358();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  uint64_t v15 = (void *)swift_task_alloc();
  v0[321] = (uint64_t)v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100515E90;
  uint64_t v16 = v0[311];
  return sub_100159C98(v16);
}

uint64_t sub_100515E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[322] = a1;
  v4[323] = a2;
  v4[324] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_10051662C;
  }
  else {
    uint64_t v5 = sub_100515FAC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100515FAC()
{
  uint64_t v1 = v0[324];
  (*(void (**)(void, void))(v0[310] + 8))(v0[311], v0[309]);
  swift_bridgeObjectRelease();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100516FE4();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    sub_10000C5F4(v0[322], v0[323]);
    swift_release();
    swift_release();
    uint64_t v2 = v0[301];
    uint64_t v3 = v0[300];
    uint64_t v4 = v0[299];
    uint64_t v5 = v0[298];
    uint64_t v6 = v0[296];
    uint64_t v32 = v0[295];
    swift_getErrorValue();
    Error.dipErrorCode.getter();
    uint64_t v34 = *(void (**)(uint64_t, void, uint64_t))(v2 + 104);
    v34(v5, enum case for DIPError.Code.networkTimeOut(_:), v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v5, 0, 1, v3);
    uint64_t v7 = v6 + *(int *)(v32 + 48);
    sub_100174A64(v4, v6);
    sub_100174A64(v5, v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    int v9 = v8(v6, 1, v3);
    uint64_t v10 = v0[300];
    if (v9 == 1)
    {
      uint64_t v11 = v0[299];
      sub_10000C6CC(v0[298], &qword_100723600);
      sub_10000C6CC(v11, &qword_100723600);
      if (v8(v7, 1, v10) == 1)
      {
        sub_10000C6CC(v0[296], &qword_100723600);
LABEL_12:
        v34(v0[302], enum case for DIPError.Code.documentReaderTermsAndConditionsFetchFailed(_:), v0[300]);
        swift_errorRetain();
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        swift_errorRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v31 = (uint64_t (*)(void))v0[1];
        return v31();
      }
    }
    else
    {
      sub_100174A64(v0[296], v0[297]);
      if (v8(v7, 1, v10) != 1)
      {
        uint64_t v24 = v0[302];
        uint64_t v25 = v0[301];
        uint64_t v26 = v0[300];
        uint64_t v33 = v0[299];
        uint64_t v27 = v0[298];
        uint64_t v28 = v0[297];
        uint64_t v29 = v0[296];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v24, v7, v26);
        sub_1002A6EC0(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
        dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        v30(v24, v26);
        sub_10000C6CC(v27, &qword_100723600);
        sub_10000C6CC(v33, &qword_100723600);
        v30(v28, v26);
        sub_10000C6CC(v29, &qword_100723600);
        goto LABEL_12;
      }
      uint64_t v20 = v0[301];
      uint64_t v21 = v0[300];
      uint64_t v22 = v0[299];
      uint64_t v23 = v0[297];
      sub_10000C6CC(v0[298], &qword_100723600);
      sub_10000C6CC(v22, &qword_100723600);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v21);
    }
    sub_10000C6CC(v0[296], &qword_100722D90);
    goto LABEL_12;
  }
  unint64_t v12 = v0[323];
  uint64_t v13 = v0[322];
  uint64_t v14 = v0[305];
  uint64_t v15 = v0[304];
  uint64_t v16 = v0[303];
  swift_release();
  JWSSignedJSON.payload.getter();
  sub_10000C5F4(v13, v12);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  uint64_t v35 = v0[287];
  uint64_t v17 = v0[288];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v18(v35, v17);
}

uint64_t sub_10051662C()
{
  (*(void (**)(void, void))(v0[310] + 8))(v0[311], v0[309]);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0[301];
  uint64_t v2 = v0[300];
  uint64_t v3 = v0[299];
  uint64_t v4 = v0[298];
  uint64_t v5 = v0[296];
  uint64_t v6 = v0[295];
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  uint64_t v26 = *(void (**)(uint64_t, void, uint64_t))(v1 + 104);
  v26(v4, enum case for DIPError.Code.networkTimeOut(_:), v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v4, 0, 1, v2);
  uint64_t v7 = v5 + *(int *)(v6 + 48);
  sub_100174A64(v3, v5);
  sub_100174A64(v4, v7);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  int v9 = v8(v5, 1, v2);
  uint64_t v10 = v0[300];
  if (v9 == 1)
  {
    uint64_t v11 = v0[299];
    sub_10000C6CC(v0[298], &qword_100723600);
    sub_10000C6CC(v11, &qword_100723600);
    if (v8(v7, 1, v10) == 1)
    {
      sub_10000C6CC(v0[296], &qword_100723600);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_100174A64(v0[296], v0[297]);
  if (v8(v7, 1, v10) == 1)
  {
    uint64_t v12 = v0[301];
    uint64_t v13 = v0[300];
    uint64_t v14 = v0[299];
    uint64_t v15 = v0[297];
    sub_10000C6CC(v0[298], &qword_100723600);
    sub_10000C6CC(v14, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v13);
LABEL_6:
    sub_10000C6CC(v0[296], &qword_100722D90);
    goto LABEL_8;
  }
  uint64_t v16 = v0[302];
  uint64_t v17 = v0[301];
  uint64_t v18 = v0[300];
  uint64_t v19 = v0[299];
  uint64_t v20 = v0[298];
  uint64_t v21 = v0[297];
  uint64_t v25 = v0[296];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v16, v7, v18);
  sub_1002A6EC0(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
  dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v22(v16, v18);
  sub_10000C6CC(v20, &qword_100723600);
  sub_10000C6CC(v19, &qword_100723600);
  v22(v21, v18);
  sub_10000C6CC(v25, &qword_100723600);
LABEL_8:
  v26(v0[302], enum case for DIPError.Code.documentReaderTermsAndConditionsFetchFailed(_:), v0[300]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_100516B14()
{
  uint64_t v1 = v0[301];
  uint64_t v2 = v0[300];
  uint64_t v3 = v0[299];
  uint64_t v4 = v0[298];
  uint64_t v5 = v0[296];
  uint64_t v6 = v0[295];
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  uint64_t v26 = *(void (**)(uint64_t, void, uint64_t))(v1 + 104);
  v26(v4, enum case for DIPError.Code.networkTimeOut(_:), v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v4, 0, 1, v2);
  uint64_t v7 = v5 + *(int *)(v6 + 48);
  sub_100174A64(v3, v5);
  sub_100174A64(v4, v7);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  int v9 = v8(v5, 1, v2);
  uint64_t v10 = v0[300];
  if (v9 == 1)
  {
    uint64_t v11 = v0[299];
    sub_10000C6CC(v0[298], &qword_100723600);
    sub_10000C6CC(v11, &qword_100723600);
    if (v8(v7, 1, v10) == 1)
    {
      sub_10000C6CC(v0[296], &qword_100723600);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_100174A64(v0[296], v0[297]);
  if (v8(v7, 1, v10) == 1)
  {
    uint64_t v12 = v0[301];
    uint64_t v13 = v0[300];
    uint64_t v14 = v0[299];
    uint64_t v15 = v0[297];
    sub_10000C6CC(v0[298], &qword_100723600);
    sub_10000C6CC(v14, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v13);
LABEL_6:
    sub_10000C6CC(v0[296], &qword_100722D90);
    goto LABEL_8;
  }
  uint64_t v16 = v0[302];
  uint64_t v17 = v0[301];
  uint64_t v18 = v0[300];
  uint64_t v19 = v0[299];
  uint64_t v20 = v0[298];
  uint64_t v21 = v0[297];
  uint64_t v25 = v0[296];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v16, v7, v18);
  sub_1002A6EC0(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
  dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v22(v16, v18);
  sub_10000C6CC(v20, &qword_100723600);
  sub_10000C6CC(v19, &qword_100723600);
  v22(v21, v18);
  sub_10000C6CC(v25, &qword_100723600);
LABEL_8:
  v26(v0[302], enum case for DIPError.Code.documentReaderTermsAndConditionsFetchFailed(_:), v0[300]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t type metadata accessor for MobileDocumentReaderTermsAndConditionsFetcher()
{
  return self;
}

unint64_t sub_100516FE4()
{
  unint64_t result = qword_100731C60;
  if (!qword_100731C60)
  {
    sub_100019364(&qword_100731C58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731C60);
  }
  return result;
}

ValueMetadata *type metadata accessor for MobileDocumentReaderTermsAndConditionsFetcher.Response()
{
  return &type metadata for MobileDocumentReaderTermsAndConditionsFetcher.Response;
}

ValueMetadata *type metadata accessor for MobileDocumentReaderTermsAndConditions()
{
  return &type metadata for MobileDocumentReaderTermsAndConditions;
}

void *sub_100517060()
{
  return &protocol witness table for String;
}

unint64_t sub_100517070()
{
  unint64_t result = qword_100731C68;
  if (!qword_100731C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731C68);
  }
  return result;
}

void *sub_1005170C4()
{
  return &protocol witness table for String;
}

unint64_t sub_1005170D4()
{
  unint64_t result = qword_100731C70;
  if (!qword_100731C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731C70);
  }
  return result;
}

unint64_t sub_10051712C()
{
  unint64_t result = qword_100731C78;
  if (!qword_100731C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731C78);
  }
  return result;
}

void *sub_100517180()
{
  return &protocol witness table for String;
}

void *sub_10051718C(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100731C80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000C728(a1, a1[3]);
  sub_1005172FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100517350();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1005172FC()
{
  unint64_t result = qword_100731C88;
  if (!qword_100731C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731C88);
  }
  return result;
}

unint64_t sub_100517350()
{
  unint64_t result = qword_100731C90;
  if (!qword_100731C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731C90);
  }
  return result;
}

unint64_t sub_1005173A4()
{
  unint64_t result = qword_100731CA0;
  if (!qword_100731CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731CA0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MobileDocumentReaderTermsAndConditionsFetcher.Response.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100517494);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MobileDocumentReaderTermsAndConditionsFetcher.Response.CodingKeys()
{
  return &type metadata for MobileDocumentReaderTermsAndConditionsFetcher.Response.CodingKeys;
}

unint64_t sub_1005174D0()
{
  unint64_t result = qword_100731CA8;
  if (!qword_100731CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731CA8);
  }
  return result;
}

unint64_t sub_100517528()
{
  unint64_t result = qword_100731CB0;
  if (!qword_100731CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731CB0);
  }
  return result;
}

unint64_t sub_100517580()
{
  unint64_t result = qword_100731CB8;
  if (!qword_100731CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100731CB8);
  }
  return result;
}

uint64_t sub_1005175D8(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  return sub_10051760C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10051760C(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, NSString a5, uint64_t a6, NSString a7, uint64_t a8, uint64_t a9)
{
  Class isa = a3;
  if (a2)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    if (!isa) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  NSString v14 = 0;
  if (a3) {
LABEL_3:
  }
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
LABEL_4:
  if (a5) {
    a5 = String._bridgeToObjectiveC()();
  }
  if (a7) {
    a7 = String._bridgeToObjectiveC()();
  }
  v17[4] = a8;
  v17[5] = a9;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_100025250;
  v17[3] = &unk_100708360;
  uint64_t v15 = _Block_copy(v17);
  swift_retain();
  [v9 updateNotificationForProductIdentifier:v14 configuration:isa localizedNotificationTitle:a5 localizedNotificationMessage:a7 completion:v15];
  _Block_release(v15);

  return swift_release();
}

uint64_t type metadata accessor for IdentityProofingUserNotificationProviderFactory()
{
  return self;
}

uint64_t sub_10051778C(uint64_t a1)
{
  v2[230] = v1;
  v2[229] = a1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[231] = v3;
  v2[232] = *(void *)(v3 - 8);
  v2[233] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  v2[234] = v4;
  v2[235] = *(void *)(v4 - 8);
  v2[236] = swift_task_alloc();
  sub_100007764(&qword_10072F9B8);
  v2[237] = swift_task_alloc();
  v2[238] = swift_task_alloc();
  v2[239] = swift_task_alloc();
  v2[240] = swift_task_alloc();
  return _swift_task_switch(sub_100517904, 0, 0);
}

uint64_t sub_100517904()
{
  uint64_t v1 = v0[240];
  uint64_t v2 = v0[235];
  uint64_t v3 = v0[234];
  uint64_t v4 = v0[230];
  uint64_t v5 = OBJC_IVAR____TtC8coreidvd40IdentityProofingUserNotificationProvider_staticWorkflow;
  v0[241] = OBJC_IVAR____TtC8coreidvd40IdentityProofingUserNotificationProvider_staticWorkflow;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  sub_100048D6C(v6, v1, &qword_10072F9B8);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[242] = v7;
  v0[243] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  LODWORD(v3) = v7(v1, 1, v3);
  sub_10000C6CC(v1, &qword_10072F9B8);
  if (v3 == 1)
  {
    v0[244] = *(void *)(v0[230] + 112);
    swift_retain();
    sub_10052E944();
    swift_release();
    v0[245] = sub_10052E944();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[246] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100517BCC;
    uint64_t v9 = v0[239];
    return sub_10052DED8(v9, 0xD000000000000024, 0x800000010062AD00, 0xD000000000000027, 0x800000010062AD30);
  }
  else
  {
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[242];
    uint64_t v12 = v0[237];
    uint64_t v13 = v0[234];
    uint64_t v14 = v0[230];
    uint64_t v15 = v14 + v0[241];
    v0[248] = *(void *)(v14 + 96);
    sub_100048D6C(v15, v12, &qword_10072F9B8);
    int v16 = v11(v12, 1, v13);
    uint64_t v17 = v0[237];
    if (v16)
    {
      swift_retain();
      sub_10000C6CC(v17, &qword_10072F9B8);
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v19 = v0[236];
      sub_100275DC4(v0[237], v19);
      swift_retain();
      sub_10000C6CC(v17, &qword_10072F9B8);
      uint64_t v18 = *(void *)(v19 + 64);
      swift_bridgeObjectRetain();
      sub_100009C98(v19);
    }
    v0[249] = v18;
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100724CC0 + dword_100724CC0);
    uint64_t v20 = (void *)swift_task_alloc();
    v0[250] = v20;
    void *v20 = v0;
    v20[1] = sub_100517EE0;
    return v21((uint64_t)(v0 + 2), v18);
  }
}

uint64_t sub_100517BCC()
{
  *(void *)(*(void *)v1 + 1976) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10051810C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100517CE8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100517CE8()
{
  uint64_t v1 = v0[241];
  uint64_t v2 = v0[239];
  uint64_t v3 = v0[238];
  uint64_t v4 = v0[235];
  uint64_t v5 = v0[234];
  uint64_t v6 = v0[230];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v5);
  sub_1000BEA14(v2, v3, &qword_10072F9B8);
  swift_beginAccess();
  sub_10051D874(v3, v6 + v1);
  swift_endAccess();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[242];
  uint64_t v8 = v0[237];
  uint64_t v9 = v0[234];
  uint64_t v10 = v0[230];
  uint64_t v11 = v10 + v0[241];
  v0[248] = *(void *)(v10 + 96);
  sub_100048D6C(v11, v8, &qword_10072F9B8);
  int v12 = v7(v8, 1, v9);
  uint64_t v13 = v0[237];
  if (v12)
  {
    swift_retain();
    sub_10000C6CC(v13, &qword_10072F9B8);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = v0[236];
    sub_100275DC4(v0[237], v15);
    swift_retain();
    sub_10000C6CC(v13, &qword_10072F9B8);
    uint64_t v14 = *(void *)(v15 + 64);
    swift_bridgeObjectRetain();
    sub_100009C98(v15);
  }
  v0[249] = v14;
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100724CC0 + dword_100724CC0);
  int v16 = (void *)swift_task_alloc();
  v0[250] = v16;
  *int v16 = v0;
  v16[1] = sub_100517EE0;
  return v18((uint64_t)(v0 + 2), v14);
}

uint64_t sub_100517EE0()
{
  uint64_t v9 = v1;
  uint64_t v2 = *v1;
  uint64_t v9 = (void *)v2;
  uint64_t v3 = v2 + 880;
  uint64_t v4 = *v1;
  uint64_t v9 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_100120AF0((_OWORD *)(v2 + 1312));
    uint64_t v5 = v2 + 1312;
  }
  else
  {
    memcpy(__dst, (const void *)(v2 + 16), sizeof(__dst));
    swift_release();
    swift_bridgeObjectRelease();
    memcpy((void *)(v2 + 448), __dst, 0x1B0uLL);
    nullsub_7(v2 + 448);
    uint64_t v5 = v2 + 448;
  }
  sub_1000BEA14(v5, v3, &qword_100722350);
  sub_1000BEA14(v3, *(void *)(v2 + 1832), &qword_100722350);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v4 + 8);
  return v6();
}

uint64_t sub_10051810C()
{
  uint64_t v25 = v0;
  swift_release();
  swift_release();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v20 = v0[232];
    uint64_t v21 = v0[231];
    uint64_t v22 = v0[233];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[228] = sub_100110D58(v4, v5, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ignore the static workflow fetch error %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }
  else
  {
    uint64_t v6 = v0[233];
    uint64_t v7 = v0[232];
    uint64_t v8 = v0[231];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[242];
  uint64_t v10 = v0[237];
  uint64_t v11 = v0[234];
  uint64_t v12 = v0[230];
  uint64_t v13 = v12 + v0[241];
  v0[248] = *(void *)(v12 + 96);
  sub_100048D6C(v13, v10, &qword_10072F9B8);
  int v14 = v9(v10, 1, v11);
  uint64_t v15 = v0[237];
  if (v14)
  {
    swift_retain();
    sub_10000C6CC(v15, &qword_10072F9B8);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v17 = v0[236];
    sub_100275DC4(v0[237], v17);
    swift_retain();
    sub_10000C6CC(v15, &qword_10072F9B8);
    uint64_t v16 = *(void *)(v17 + 64);
    swift_bridgeObjectRetain();
    sub_100009C98(v17);
  }
  v0[249] = v16;
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100724CC0 + dword_100724CC0);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[250] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100517EE0;
  return v23((uint64_t)(v0 + 2), v16);
}

uint64_t sub_100518464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[174] = v6;
  v7[173] = a6;
  v7[172] = a5;
  v7[171] = a4;
  v7[170] = a3;
  v7[169] = a2;
  v7[168] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[175] = v8;
  v7[176] = *(void *)(v8 - 8);
  v7[177] = swift_task_alloc();
  v7[178] = swift_task_alloc();
  v7[179] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v7[180] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_10051859C;
  return sub_10051778C((uint64_t)(v7 + 2));
}

uint64_t sub_10051859C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100518698, 0, 0);
}

uint64_t sub_100518698()
{
  sub_1000BEA14((uint64_t)(v0 + 2), (uint64_t)(v0 + 56), &qword_100722350);
  if (sub_100044CCC((uint64_t)(v0 + 56)) == 1)
  {
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "ActiveConfig doesn't exist. Will not show a notification to the user", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = v0[177];
  }
  else
  {
    memcpy(v0 + 110, v0 + 56, 0x1B0uLL);
    sub_1000BEA14((uint64_t)(v0 + 161), (uint64_t)(v0 + 167), &qword_100722398);
    sub_1000BEA14((uint64_t)(v0 + 167), (uint64_t)(v0 + 164), &qword_100722398);
    if (v0[164])
    {
      sub_1000BEA14((uint64_t)(v0 + 162), (uint64_t)(v0 + 165), &qword_100722398);
      sub_1000BEA14((uint64_t)(v0 + 165), (uint64_t)(v0 + 166), &qword_100722398);
      if (v0[166])
      {
        sub_100135DC4((uint64_t)(v0 + 167));
        sub_100135DC4((uint64_t)(v0 + 165));
        sub_100044D90(v0 + 2);
        swift_retain();
        uint64_t v5 = dispatch thunk of IdentityProofingTextReplacementProvider.makeTextReplacementHelper(attributeMessages:messageReplacements:state:country:idType:)();
        swift_release();
        sub_10009F534((uint64_t)(v0 + 165));
        sub_10009F534((uint64_t)(v0 + 167));
        goto LABEL_15;
      }
      sub_100044D90(v0 + 2);
      defaultLogger()();
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v1, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, v8, "messageReplacements doesn't exist. Will not show a notification to the user", v9, 2u);
        swift_slowDealloc();
      }
      uint64_t v4 = v0[179];
    }
    else
    {
      sub_100044D90(v0 + 2);
      defaultLogger()();
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v1, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, v6, "attributeMessages doesn't exist. Will not show a notification to the user", v7, 2u);
        swift_slowDealloc();
      }
      uint64_t v4 = v0[178];
    }
  }
  uint64_t v10 = v0[176];
  uint64_t v11 = v0[175];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v11);
  uint64_t v5 = 0;
LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t))v0[1];
  return v12(v5);
}

uint64_t sub_100518A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 1552) = v8;
  *(unsigned char *)(v9 + 1704) = a8;
  *(void *)(v9 + 1544) = a7;
  *(void *)(v9 + 1536) = a6;
  *(void *)(v9 + 1528) = a5;
  *(void *)(v9 + 1520) = a4;
  *(void *)(v9 + 1512) = a3;
  *(void *)(v9 + 1504) = a2;
  *(void *)(v9 + 1496) = a1;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  *(void *)(v9 + 1560) = v10;
  *(void *)(v9 + 1568) = *(void *)(v10 - 8);
  *(void *)(v9 + 1576) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v9 + 1584) = v11;
  *(void *)(v9 + 1592) = *(void *)(v11 - 8);
  *(void *)(v9 + 1600) = swift_task_alloc();
  *(void *)(v9 + 1608) = swift_task_alloc();
  *(void *)(v9 + 1616) = swift_task_alloc();
  *(void *)(v9 + 1624) = swift_task_alloc();
  *(void *)(v9 + 1632) = swift_task_alloc();
  *(void *)(v9 + 1640) = swift_task_alloc();
  *(void *)(v9 + 1648) = swift_task_alloc();
  return _swift_task_switch(sub_100518BA4, 0, 0);
}

uint64_t sub_100518BA4()
{
  if (v0[190])
  {
    if (v0[188])
    {
      uint64_t v1 = (void *)swift_task_alloc();
      v0[207] = v1;
      void *v1 = v0;
      v1[1] = sub_100518E7C;
      return sub_10051778C((uint64_t)(v0 + 56));
    }
    (*(void (**)(void, void, void))(v0[196] + 104))(v0[197], enum case for DIPError.Code.idStateUnavailable(_:), v0[195]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[196] + 104))(v0[197], enum case for DIPError.Code.idCountryUnavailable(_:), v0[195]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
  }
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100518E7C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100518F78, 0, 0);
}

uint64_t sub_100518F78()
{
  uint64_t v86 = v0;
  sub_1000BEA14(v0 + 448, v0 + 16, &qword_100722350);
  if (sub_100044CCC(v0 + 16) == 1) {
    goto LABEL_14;
  }
  memcpy((void *)(v0 + 880), (const void *)(v0 + 16), 0x1B0uLL);
  sub_1000BEA14(v0 + 1296, v0 + 1456, &qword_100722398);
  sub_100135DC4(v0 + 1456);
  sub_100044D90((uint64_t *)(v0 + 448));
  sub_1000BEA14(v0 + 1456, v0 + 1440, &qword_100722398);
  uint64_t v1 = *(void *)(v0 + 1440);
  if (!v1) {
    goto LABEL_14;
  }
  os_log_type_t v2 = *(void **)(v0 + 1520);
  uint64_t v3 = *(void *)(v0 + 1512);
  uint64_t v4 = *(void **)(v0 + 1504);
  uint64_t v5 = *(void *)(v0 + 1496);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v85, "issuer.name.");
  BYTE5(v85[1]) = 0;
  HIWORD(v85[1]) = -5120;
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v2;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v4;
  String.append(_:)(v8);
  if (!*(void *)(v1 + 16) || (unint64_t v9 = sub_100590548(v85[0], v85[1]), (v10 & 1) == 0))
  {
    sub_10009F534(v0 + 1456);
    swift_bridgeObjectRelease();
LABEL_14:
    (*(void (**)(void, void, void))(*(void *)(v0 + 1568) + 104))(*(void *)(v0 + 1576), enum case for DIPError.Code.invalidAttribute(_:), *(void *)(v0 + 1560));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(v0 + 1536);
  uint64_t v12 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v9);
  uint64_t v14 = *v12;
  unint64_t v13 = v12[1];
  *(void *)(v0 + 1664) = v13;
  swift_bridgeObjectRetain();
  sub_10009F534(v0 + 1456);
  swift_bridgeObjectRelease();
  if (v11)
  {
    if (*(unsigned char *)(v0 + 1704))
    {
      uint64_t v45 = *(void *)(v0 + 1576);
      uint64_t v46 = *(void *)(v0 + 1568);
      uint64_t v47 = *(void *)(v0 + 1560);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t))(v46 + 104))(v45, enum case for DIPError.Code.invalidProofingActionStatus(_:), v47);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
    }
    else
    {
      unint64_t v15 = *(void *)(v0 + 1536);
      uint64_t v16 = *(void *)(v0 + 1544);
      uint64_t v17 = *(void *)(v0 + 1528);
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_10051D27C(v17, v15);
      uint64_t v19 = sub_10051CFB8(v16);
      if (v20)
      {
        uint64_t v48 = *(void *)(v0 + 1576);
        uint64_t v49 = *(void *)(v0 + 1568);
        uint64_t v50 = *(void *)(v0 + 1560);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t))(v49 + 104))(v48, enum case for DIPError.Code.invalidProofingActionStatus(_:), v50);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
      }
      else
      {
        uint64_t v21 = v19;
        uint64_t v22 = *(void *)(v0 + 1552) + 56;
        swift_beginAccess();
        sub_100048D6C(v22, v0 + 1312, &qword_100731F58);
        if (*(void *)(v0 + 1336))
        {
          uint64_t v81 = v21;
          uint64_t v82 = v18;
          uint64_t v84 = v14;
          sub_10000C6B4((long long *)(v0 + 1312), v0 + 1352);
          defaultLogger()();
          uint64_t v23 = Logger.logObject.getter();
          os_log_type_t v24 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v23, v24))
          {
            uint64_t v25 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v25 = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, v24, "----- BEGIN SENDING THE DATA TO WATCH FOR NOTIFICATION ------", v25, 2u);
            swift_slowDealloc();
          }
          uint64_t v26 = *(void *)(v0 + 1648);
          uint64_t v27 = *(void *)(v0 + 1592);
          uint64_t v28 = *(void *)(v0 + 1584);

          uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
          *(void *)(v0 + 1672) = v29;
          *(void *)(v0 + 1680) = (v27 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          v29(v26, v28);
          defaultLogger()();
          uint64_t v30 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.debug.getter();
          BOOL v32 = os_log_type_enabled(v30, v31);
          uint64_t v33 = *(void *)(v0 + 1640);
          uint64_t v34 = *(void *)(v0 + 1584);
          if (v32)
          {
            uint64_t v78 = *(void *)(v0 + 1584);
            uint64_t v35 = (uint8_t *)swift_slowAlloc();
            v85[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v35 = 136315138;
            uint64_t v36 = IdentityProofingActionStatus.debugDescription.getter();
            *(void *)(v0 + 1488) = sub_100110D58(v36, v37, v85);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "actionStatus -> %s", v35, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v38 = v33;
            uint64_t v39 = v78;
          }
          else
          {

            uint64_t v38 = v33;
            uint64_t v39 = v34;
          }
          v29(v38, v39);
          char v54 = v29;
          defaultLogger()();
          swift_bridgeObjectRetain();
          uint64_t v55 = Logger.logObject.getter();
          os_log_type_t v56 = static os_log_type_t.debug.getter();
          BOOL v57 = os_log_type_enabled(v55, v56);
          uint64_t v58 = *(void *)(v0 + 1632);
          uint64_t v59 = *(void *)(v0 + 1584);
          if (v57)
          {
            uint64_t v76 = *(void *)(v0 + 1584);
            uint64_t v77 = *(void *)(v0 + 1632);
            uint64_t v60 = *(void *)(v0 + 1528);
            uint64_t v79 = v54;
            uint64_t v61 = (uint8_t *)swift_slowAlloc();
            v85[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v61 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)(v0 + 1480) = sub_100110D58(v60, v15, v85);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v55, v56, "IDType -> %s", v61, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            char v54 = v79;
            swift_slowDealloc();

            uint64_t v63 = v76;
            uint64_t v62 = v77;
          }
          else
          {
            swift_bridgeObjectRelease_n();

            uint64_t v62 = v58;
            uint64_t v63 = v59;
          }
          v54(v62, v63);
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v64 = Logger.logObject.getter();
          os_log_type_t v65 = static os_log_type_t.debug.getter();
          BOOL v66 = os_log_type_enabled(v64, v65);
          uint64_t v67 = *(void *)(v0 + 1624);
          uint64_t v68 = *(void *)(v0 + 1584);
          if (v66)
          {
            uint64_t v83 = *(void *)(v0 + 1624);
            uint64_t v80 = *(void *)(v0 + 1584);
            Swift::String v69 = (uint8_t *)swift_slowAlloc();
            v85[0] = swift_slowAlloc();
            *(_DWORD *)Swift::String v69 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)(v0 + 1472) = sub_100110D58(v84, v13, v85);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v64, v65, "issuerName -> %s", v69, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v54(v83, v80);
          }
          else
          {
            swift_bridgeObjectRelease_n();

            v54(v67, v68);
          }
          defaultLogger()();
          uint64_t v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v70, v71))
          {
            char v72 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)char v72 = 0;
            _os_log_impl((void *)&_mh_execute_header, v70, v71, "----- END SENDING THE DATA TO WATCH FOR NOTIFICATION------", v72, 2u);
            swift_slowDealloc();
          }
          uint64_t v73 = *(void *)(v0 + 1616);
          uint64_t v74 = *(void *)(v0 + 1584);

          v54(v73, v74);
          sub_10000C728((void *)(v0 + 1352), *(void *)(v0 + 1376));
          Swift::String v75 = (void *)swift_task_alloc();
          *(void *)(v0 + 1688) = v75;
          *Swift::String v75 = v0;
          v75[1] = sub_100519BDC;
          return sub_100458850(v81, v82, v84, v13);
        }
        uint64_t v51 = *(void *)(v0 + 1576);
        uint64_t v52 = *(void *)(v0 + 1568);
        uint64_t v53 = *(void *)(v0 + 1560);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000C6CC(v0 + 1312, &qword_100731F58);
        (*(void (**)(uint64_t, void, uint64_t))(v52 + 104))(v51, enum case for DIPError.Code.watchConnectionFailure(_:), v53);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
      }
    }
  }
  else
  {
    uint64_t v42 = *(void *)(v0 + 1576);
    uint64_t v43 = *(void *)(v0 + 1568);
    uint64_t v44 = *(void *)(v0 + 1560);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v43 + 104))(v42, enum case for DIPError.Code.idTypeUnavailable(_:), v44);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
  }
LABEL_15:
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40();
}

uint64_t sub_100519BDC()
{
  *(void *)(*(void *)v1 + 1696) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    os_log_type_t v2 = sub_100519E90;
  }
  else {
    os_log_type_t v2 = sub_100519D10;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100519D10()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Did show notification to the user on the watch", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[209];
  uint64_t v5 = v0[201];
  uint64_t v6 = v0[198];

  v4(v5, v6);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 169));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100519E90()
{
  unint64_t v15 = v0;
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v13 = (void (*)(uint64_t, uint64_t))v0[209];
    uint64_t v12 = v0[200];
    uint64_t v11 = v0[198];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[183] = sub_100110D58(v4, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error occurred while showing notification to the user on the watch %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v13(v12, v11);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[209];
    uint64_t v7 = v0[200];
    uint64_t v8 = v0[198];
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  swift_willThrow();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 169));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_10051A128(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void *a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = v13;
  uint64_t v109 = a5;
  uint64_t v110 = a7;
  uint64_t v106 = a4;
  uint64_t v105 = a3;
  unint64_t v108 = a2;
  unint64_t v107 = a1;
  uint64_t v17 = type metadata accessor for DIPError.Code();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  char v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __chkstk_darwin(v21);
  os_log_type_t v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v92 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v39 = (char *)&v92 - v38;
  unint64_t v111 = a8;
  if (!a8)
  {
    (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for DIPError.Code.idCountryUnavailable(_:), v17);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
LABEL_16:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  if (!a6)
  {
    (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for DIPError.Code.idStateUnavailable(_:), v17);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    goto LABEL_16;
  }
  uint64_t v104 = v20;
  if (!a10)
  {
    (*(void (**)(char *, void, uint64_t))(v18 + 104))(v104, enum case for DIPError.Code.idTypeUnavailable(_:), v17);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    goto LABEL_16;
  }
  uint64_t v99 = v34;
  uint64_t v94 = v33;
  unint64_t v95 = v29;
  uint64_t v96 = v37;
  uint64_t v97 = v36;
  uint64_t v102 = v35;
  uint64_t v101 = v32;
  uint64_t v100 = v14;
  uint64_t v40 = (void *)swift_allocObject();
  uint64_t v41 = v109;
  v40[2] = v12;
  v40[3] = v41;
  uint64_t v42 = v110;
  v40[4] = a6;
  v40[5] = v42;
  v40[6] = v111;
  v40[7] = a9;
  uint64_t v93 = a9;
  v40[8] = a10;
  swift_bridgeObjectRetain_n();
  unint64_t v103 = a6;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v98 = v12;
  swift_retain();
  sub_100007764(&qword_100731F50);
  runAsyncAndBlock<A>(file:function:line:_:)();
  swift_release();
  uint64_t v43 = v112[0];
  if (v112[0])
  {
    if (v108 && (uint64_t v44 = dispatch thunk of IdentityProofingTextReplacementHelper.replaceText(_:)(), v45))
    {
      unint64_t v46 = v45;
      if (v106)
      {
        uint64_t v47 = v44;
        uint64_t v48 = dispatch thunk of IdentityProofingTextReplacementHelper.replaceText(_:)();
        unint64_t v107 = v49;
        if (v49)
        {
          uint64_t v105 = v48;
          uint64_t v106 = v47;
          uint64_t v92 = v43;
          defaultLogger()();
          uint64_t v50 = Logger.logObject.getter();
          os_log_type_t v51 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v50, v51))
          {
            uint64_t v52 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v52 = 0;
            _os_log_impl((void *)&_mh_execute_header, v50, v51, "----- BEGIN LOGGING USER NOTIFICATION DATA------", v52, 2u);
            swift_slowDealloc();
          }

          uint64_t v53 = v102 + 8;
          char v54 = v39;
          uint64_t v55 = *(char **)(v102 + 8);
          ((void (*)(char *, uint64_t))v55)(v54, v101);
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          unint64_t v56 = v103;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          BOOL v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.debug.getter();
          BOOL v59 = os_log_type_enabled(v57, v58);
          unint64_t v108 = v46;
          uint64_t v102 = v53;
          uint64_t v104 = v55;
          if (v59)
          {
            uint64_t v60 = swift_slowAlloc();
            v112[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v60 = 136315650;
            swift_bridgeObjectRetain();
            uint64_t v115 = sub_100110D58(v109, v56, v112);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v60 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v115 = sub_100110D58((uint64_t)v110, v111, v112);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v60 + 22) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v115 = sub_100110D58(v93, a10, v112);
            uint64_t v55 = v104;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v57, v58, "State -> %s country -> %s IDType -> %s", (uint8_t *)v60, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          ((void (*)(uint64_t, uint64_t))v55)(v99, v101);
          unint64_t v64 = v107;
          uint64_t v65 = v94;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          BOOL v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v68 = (uint8_t *)swift_slowAlloc();
            v112[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v68 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v115 = sub_100110D58(v106, v108, v112);
            uint64_t v55 = v104;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "title -> %s", v68, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          ((void (*)(uint64_t, uint64_t))v55)(v65, v101);
          Swift::String v69 = v95;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v70 = Logger.logObject.getter();
          os_log_type_t v71 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v70, v71))
          {
            char v72 = (uint8_t *)swift_slowAlloc();
            v112[0] = swift_slowAlloc();
            *(_DWORD *)char v72 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v115 = sub_100110D58(v105, v64, v112);
            uint64_t v55 = v104;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v70, v71, "message -> %s", v72, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          ((void (*)(char *, uint64_t))v55)(v69, v101);
          uint64_t v73 = v96;
          uint64_t v99 = a12;
          uint64_t v96 = a11;
          defaultLogger()();
          uint64_t v74 = Logger.logObject.getter();
          os_log_type_t v75 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v74, v75))
          {
            uint64_t v76 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v76 = 0;
            _os_log_impl((void *)&_mh_execute_header, v74, v75, "----- END LOGGING USER NOTIFICATION DATA------", v76, 2u);
            swift_slowDealloc();
          }

          uint64_t v77 = v101;
          ((void (*)(uint64_t, uint64_t))v55)(v73, v101);
          uint64_t v78 = swift_allocObject();
          *(void *)(v78 + 16) = 0;
          unint64_t v95 = (char *)(v78 + 16);
          sub_100007764(&qword_100720AC8);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100611020;
          *(void *)(inited + 32) = 0xD000000000000012;
          *(void *)(inited + 40) = 0x8000000100653600;
          unint64_t v80 = v103;
          *(void *)(inited + 48) = v109;
          *(void *)(inited + 56) = v80;
          *(void *)(inited + 64) = 0x7972746E756F63;
          *(void *)(inited + 72) = 0xE700000000000000;
          unint64_t v81 = v111;
          *(void *)(inited + 80) = v110;
          *(void *)(inited + 88) = v81;
          unint64_t v111 = sub_10015CF20(inited);
          uint64_t v82 = v97;
          defaultLogger()();
          uint64_t v83 = Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v83, v84))
          {
            uint64_t v85 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v85 = 0;
            _os_log_impl((void *)&_mh_execute_header, v83, v84, "Will call update notification on PKPaymentService for the phone", v85, 2u);
            swift_slowDealloc();
          }

          ((void (*)(uint64_t, uint64_t))v55)(v82, v77);
          dispatch_semaphore_t v86 = dispatch_semaphore_create(0);
          sub_100030A10(v98 + 16, (uint64_t)v112);
          uint64_t v88 = v113;
          uint64_t v87 = v114;
          uint64_t v110 = sub_10000C728(v112, v113);
          uint64_t v89 = swift_allocObject();
          *(void *)(v89 + 16) = v86;
          *(void *)(v89 + 24) = v78;
          uint64_t v90 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, Swift::Int (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v87 + 8);
          uint64_t v91 = v86;
          swift_retain();
          v90(v96, v99, v111, v106, v108, v105, v107, sub_10051D86C, v89, v88, v87);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v112);
          OS_dispatch_semaphore.wait()();
          swift_beginAccess();
          if (*(void *)(v78 + 16))
          {
            swift_errorRetain();
            swift_willThrow();
          }
          swift_release();
          swift_release();

          return;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v18 + 104))(v104, enum case for DIPError.Code.invalidAttribute(_:), v17);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v18 + 104))(v104, enum case for DIPError.Code.invalidAttribute(_:), v17);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
    return;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  defaultLogger()();
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Unable to create textReplacementHelper. Will not show a notification to the user", v63, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v102 + 8))(v24, v101);
}

uint64_t sub_10051B268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 16) = a1;
  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v15;
  *unint64_t v15 = v8;
  v15[1] = sub_10051B348;
  return sub_100518464(a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10051B348(uint64_t a1)
{
  *(void *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10051B448, 0, 0);
}

uint64_t sub_10051B448()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int sub_10051B468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  char v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - v11;
  if (a1)
  {
    uint64_t v13 = (void *)(a3 + 16);
    swift_errorRetain();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v28 = v6;
      v31[0] = v17;
      uint64_t v29 = a2;
      *(_DWORD *)uint64_t v16 = 136315138;
      v27[1] = v16 + 4;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      uint64_t v30 = sub_100110D58(v18, v19, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error occured while showing notification to the user %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v28);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    swift_beginAccess();
    void *v13 = a1;
    swift_errorRelease();
  }
  else
  {
    defaultLogger()();
    char v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Did show notification to the user", v22, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    uint64_t v23 = type metadata accessor for IdentityManagementSessionDelegate();
    id v24 = [self defaultCenter];
    NSString v25 = String._bridgeToObjectiveC()();
    v31[0] = v23;
    sub_100007764((uint64_t *)&unk_10072E590);
    [v24 postNotificationName:v25 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_10051B830(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - v7;
  if (a1)
  {
    swift_errorRetain();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v22 = v2;
      uint64_t v12 = (uint8_t *)v11;
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      uint64_t v23 = sub_100110D58(v13, v14, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error occured while clearing notification to the user %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v22);
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    unint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    char v20 = v6;
  }
  else
  {
    defaultLogger()();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Did clear the notification after provisioning completion", v18, 2u);
      swift_slowDealloc();
    }

    unint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    char v20 = v8;
  }
  return v19(v20, v2);
}

uint64_t sub_10051BB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8 = v7;
  uint64_t v13 = type metadata accessor for Logger();
  __chkstk_darwin(v13);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = a3;
  uint64_t v18 = v16;
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = a5;
  *(void *)(v16 + 32) = a6;
  *(void *)(v16 + 40) = v8;
  *(unsigned char *)(v16 + 48) = a7 & 1;
  *(void *)(v16 + 56) = a1;
  *(void *)(v16 + 64) = a2;
  *(void *)(v16 + 72) = v17;
  *(void *)(v16 + 80) = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000FFE3C((uint64_t)sub_10051CE8C, v18);
  swift_release();

  return swift_release();
}

void sub_10051BD2C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v139 = a7;
  uint64_t v140 = a8;
  unint64_t v138 = a6;
  int v136 = a5;
  uint64_t v141 = a4;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v143 = v12;
  uint64_t v144 = v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v135 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  v137 = (char *)&v126 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v142 = (__objc2_prop *)((char *)&v126 - v19);
  uint64_t v20 = __chkstk_darwin(v18);
  v134 = (char *)&v126 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v126 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v126 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)&v126 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v126 - v32;
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v126 - v34;
  uint64_t v36 = a2;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v39 = (uint64_t)a3;
  uint64_t v40 = a1;
  uint64_t v41 = v145;
  sub_1001002FC(v37, v39);
  if (v41) {
    return;
  }
  uint64_t v43 = v142;
  v130 = v33;
  uint64_t v131 = v36;
  v133 = v35;
  v129 = v30;
  v145 = v38;
  v128 = v27;
  unint64_t v127 = v24;
  uint64_t v45 = v143;
  uint64_t v44 = v144;
  if (v42)
  {
    unint64_t v46 = v42;
    uint64_t v126 = v40;
    uint64_t v132 = 0;
    uint64_t v47 = v42 >> 62;
    if (v42 >> 62) {
      goto LABEL_77;
    }
    uint64_t v48 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v48 >= 1)
    {
      while (v48 == 2)
      {
        if (v47)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v51 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        if (!v51) {
          goto LABEL_27;
        }
        uint64_t v44 = 4;
        uint64_t v43 = &stru_10071A000;
        while (1)
        {
          uint64_t v45 = v44 - 4;
          id v53 = (v46 & 0xC000000000000001) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
              : *(id *)(v46 + 8 * v44);
          id v52 = v53;
          uint64_t v47 = v44 - 3;
          if (__OFADD__(v45, 1)) {
            break;
          }
          id v54 = [v53 target];
          if (v54 == (id)IdentityTarget.rawValue.getter())
          {
            swift_bridgeObjectRelease_n();
            char v49 = 0;
            uint64_t v45 = v143;
            uint64_t v44 = v144;
            goto LABEL_33;
          }

          ++v44;
          if (v47 == v51) {
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_77:
        swift_bridgeObjectRetain();
        uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v48 < 1) {
          goto LABEL_78;
        }
      }
      if (v48 == 1)
      {
        char v49 = sub_10051D48C(v46);
        if (v47)
        {
          swift_bridgeObjectRetain();
          uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v50 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        if (v50)
        {
          if ((v46 & 0xC000000000000001) != 0)
          {
            id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v45 = v143;
            uint64_t v44 = v144;
          }
          else
          {
            uint64_t v45 = v143;
            uint64_t v44 = v144;
            if (!*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              return;
            }
            id v52 = *(id *)(v46 + 32);
          }
          swift_bridgeObjectRelease_n();
          if (!v52) {
            goto LABEL_29;
          }
LABEL_33:
          os_log_type_t v62 = (__objc2_prop *)v52;
          id v63 = [(__objc2_prop *)v62 state];
          if (v63)
          {
            unint64_t v64 = v63;
            uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v67 = v66;

            id v68 = [(__objc2_prop *)v62 country];
            if (!v68)
            {
              swift_bridgeObjectRelease();
              uint64_t v97 = v129;
              defaultLogger()();
              uint64_t v98 = Logger.logObject.getter();
              os_log_type_t v99 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v98, v99))
              {
                uint64_t v100 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v100 = 0;
                _os_log_impl((void *)&_mh_execute_header, v98, v99, "proofing session country doesn't exist. Will not show a notification to the user", v100, 2u);
                uint64_t v97 = v129;
                swift_slowDealloc();
              }

              uint64_t v60 = *(void (**)(char *, uint64_t))(v44 + 8);
              uint64_t v61 = v97;
              goto LABEL_53;
            }
            Swift::String v69 = v68;
            uint64_t v70 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v72 = v71;

            id v73 = [(__objc2_prop *)v62 idType];
            if (v73)
            {
              uint64_t v74 = v73;
              v145 = v70;
              uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v77 = v76;

              if (v49)
              {
                [(__objc2_prop *)v62 proofingActionStatus];
                uint64_t v78 = IdentityProofingActionStatus.init(rawValue:)();
                if (v79)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v106 = v127;
                  defaultLogger()();
                  unint64_t v107 = Logger.logObject.getter();
                  os_log_type_t v108 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v107, v108))
                  {
                    uint64_t v109 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)uint64_t v109 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v107, v108, "invalid action status. Will not show the notification on the watch", v109, 2u);
                    swift_slowDealloc();
                  }

                  (*(void (**)(char *, uint64_t))(v144 + 8))(v106, v45);
                }
                else
                {
                  v142 = v62;
                  if (v136) {
                    uint64_t v80 = 11;
                  }
                  else {
                    uint64_t v80 = v78;
                  }
                  unint64_t v81 = (void *)swift_allocObject();
                  v81[2] = v141;
                  v81[3] = v65;
                  uint64_t v82 = v145;
                  v81[4] = v67;
                  v81[5] = v82;
                  v81[6] = v72;
                  v81[7] = v75;
                  v81[8] = v77;
                  v81[9] = v80;
                  swift_retain();
                  uint64_t v83 = v132;
                  runAsyncAndBlock<A>(timeout:file:function:line:_:)();
                  if (v83)
                  {
                    swift_release();
                    v145 = 0;
                    os_log_type_t v84 = v142;
                    uint64_t v85 = v137;
                    defaultLogger()();
                    swift_errorRetain();
                    swift_errorRetain();
                    dispatch_semaphore_t v86 = Logger.logObject.getter();
                    os_log_type_t v87 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v86, v87))
                    {
                      uint64_t v88 = (uint8_t *)swift_slowAlloc();
                      uint64_t v147 = swift_slowAlloc();
                      *(_DWORD *)uint64_t v88 = 136315138;
                      swift_getErrorValue();
                      uint64_t v89 = Error.localizedDescription.getter();
                      uint64_t v146 = sub_100110D58(v89, v90, &v147);
                      os_log_type_t v84 = v142;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      swift_errorRelease();
                      swift_errorRelease();
                      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Received an error while showing a notification on the watch %s", v88, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();

                      uint64_t v91 = *(void (**)(char *, uint64_t))(v144 + 8);
                      v91(v137, v45);
                    }
                    else
                    {
                      swift_errorRelease();
                      swift_errorRelease();

                      uint64_t v91 = *(void (**)(char *, uint64_t))(v144 + 8);
                      v91(v85, v45);
                    }
                    StoredProofingSession.update(shouldShowNotificationOnWatch:)(1);
                    uint64_t v113 = v145;
                    sub_1000FFAB4();
                    if (v113)
                    {

                      swift_errorRelease();
                    }
                    else
                    {
                      defaultLogger()();
                      uint64_t v118 = Logger.logObject.getter();
                      os_log_type_t v119 = static os_log_type_t.debug.getter();
                      if (os_log_type_enabled(v118, v119))
                      {
                        uint64_t v120 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)uint64_t v120 = 0;
                        _os_log_impl((void *)&_mh_execute_header, v118, v119, "setting shouldShowNotificationOnWatch to true to show the notification to the user when the watch becomes active.", v120, 2u);
                        swift_slowDealloc();
                        unint64_t v121 = v118;
                        uint64_t v118 = v84;
                      }
                      else
                      {
                        unint64_t v121 = v84;
                      }

                      swift_errorRelease();
                      v91(v135, v45);
                    }
                  }
                  else
                  {
                    swift_release();
                    uint64_t v112 = v142;
                    if ([(__objc2_prop *)v142 shouldShowNotificationOnWatch])
                    {
                      StoredProofingSession.update(shouldShowNotificationOnWatch:)(0);
                      sub_1000FFAB4();
                    }
                  }
                }
              }
              else
              {
                v142 = v62;
                id v101 = [(__objc2_prop *)v62 productIdentifier];
                if (v101)
                {
                  uint64_t v102 = v101;
                  uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v105 = v104;
                }
                else
                {
                  uint64_t v103 = 0;
                  uint64_t v105 = 0;
                }
                uint64_t v110 = v132;
                sub_10051A128(v138, v139, v140, a9, v65, v67, v145, v72, v75, v77, v103, v105);
                unint64_t v111 = v142;
                if (v110)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  StoredProofingSession.update(didShowWifiReminderAlert:)(1);
                  sub_1000FFAB4();
                  uint64_t v114 = v134;
                  defaultLogger()();
                  uint64_t v115 = Logger.logObject.getter();
                  os_log_type_t v116 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v115, v116))
                  {
                    unint64_t v117 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)unint64_t v117 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v115, v116, "The connect to wifi reminder has been shown, setting didShowWifiReminderAlert to true.", v117, 2u);
                    swift_slowDealloc();
                  }

                  (*(void (**)(char *, uint64_t))(v144 + 8))(v114, v143);
                }
              }
              return;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v92 = v128;
            defaultLogger()();
            uint64_t v93 = Logger.logObject.getter();
            os_log_type_t v94 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v93, v94))
            {
              unint64_t v95 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v95 = 0;
              uint64_t v96 = "proofing session IDType doesn't exist. Will not show a notification to the user";
              goto LABEL_51;
            }
          }
          else
          {
            uint64_t v92 = v130;
            defaultLogger()();
            uint64_t v93 = Logger.logObject.getter();
            os_log_type_t v94 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v93, v94))
            {
              unint64_t v95 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v95 = 0;
              uint64_t v96 = "proofing session state doesn't exist. Will not show a notification to the user";
LABEL_51:
              _os_log_impl((void *)&_mh_execute_header, v93, v94, v96, v95, 2u);
              swift_slowDealloc();
            }
          }

          uint64_t v60 = *(void (**)(char *, uint64_t))(v44 + 8);
          uint64_t v61 = v92;
LABEL_53:
          v60(v61, v45);
          return;
        }
LABEL_27:
        swift_bridgeObjectRelease();
        uint64_t v45 = v143;
        uint64_t v44 = v144;
      }
      swift_bridgeObjectRelease();
LABEL_29:
      uint64_t v55 = v133;
      defaultLogger()();
      unint64_t v56 = v145;
      swift_bridgeObjectRetain_n();
      BOOL v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        BOOL v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v147 = swift_slowAlloc();
        *(_DWORD *)BOOL v59 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v146 = sub_100110D58(v131, (unint64_t)v56, &v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "proofing session for ID %s doesn't exist. Will not show a notification to the user.", v59, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v44 + 8))(v133, v45);
        return;
      }

      swift_bridgeObjectRelease_n();
      uint64_t v60 = *(void (**)(char *, uint64_t))(v44 + 8);
      uint64_t v61 = v55;
      goto LABEL_53;
    }
LABEL_78:
    swift_bridgeObjectRelease();
  }
  v122 = v43;
  defaultLogger()();
  uint64_t v123 = Logger.logObject.getter();
  os_log_type_t v124 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v123, v124))
  {
    unint64_t v125 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v125 = 0;
    _os_log_impl((void *)&_mh_execute_header, v123, v124, "proofing session doesn't exist. Will not show a notification to the user", v125, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(__objc2_prop *, uint64_t))(v44 + 8))(v122, v45);
}

uint64_t sub_10051CBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v15;
  *uint64_t v15 = v8;
  v15[1] = sub_10000C494;
  return sub_100518A1C(a3, a4, a5, a6, a7, a8, v18, 0);
}

uint64_t sub_10051CC8C()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  sub_10000C6CC(v0 + 56, &qword_100731F58);
  swift_release();
  swift_release();
  swift_release();
  sub_10000C6CC(v0 + OBJC_IVAR____TtC8coreidvd40IdentityProofingUserNotificationProvider_staticWorkflow, &qword_10072F9B8);

  return swift_deallocClassInstance();
}

uint64_t sub_10051CD28()
{
  return type metadata accessor for IdentityProofingUserNotificationProvider();
}

uint64_t type metadata accessor for IdentityProofingUserNotificationProvider()
{
  uint64_t result = qword_100731D90;
  if (!qword_100731D90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10051CD7C()
{
  sub_100502820();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10051CE34()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_10051CE8C()
{
  sub_10051BD2C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_10051CEC4()
{
  return sub_10051D6BC(80);
}

uint64_t sub_10051CECC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10000C494;
  return sub_10051CBA0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10051CFB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a1)
  {
    case 0:
      return a1;
    case 1:
      a1 = 6;
      break;
    case 4:
      a1 = 1;
      break;
    case 6:
    case 7:
      a1 = 2;
      break;
    case 8:
    case 11:
      a1 = 3;
      break;
    case 9:
      a1 = 4;
      break;
    case 10:
      a1 = 5;
      break;
    case 12:
      a1 = 7;
      break;
    default:
      defaultLogger()();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136315138;
        uint64_t v9 = IdentityProofingActionStatus.debugDescription.getter();
        uint64_t v12 = sub_100110D58(v9, v10, &v13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "No corresponding option on the watch to show the notification with the action status %s ", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      a1 = 0;
      break;
  }
  return a1;
}

uint64_t sub_10051D27C(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for IdentityProofingIDType();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  os_log_type_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v26 - v8;
  unint64_t v10 = *(void (**)(char *, void, uint64_t))(v4 + 104);
  v10((char *)&v26 - v8, enum case for IdentityProofingIDType.stateID(_:), v3);
  uint64_t v11 = IdentityProofingIDType.rawValue.getter();
  uint64_t v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v15 = v9;
  uint64_t v16 = a1;
  uint64_t v17 = v27;
  v14(v15, v3);
  if (v11 == v16 && v13 == v17)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v19)
    {
      return 2;
    }
    else
    {
      v10(v7, enum case for IdentityProofingIDType.dl(_:), v3);
      uint64_t v21 = IdentityProofingIDType.rawValue.getter();
      uint64_t v23 = v22;
      v14(v7, v3);
      if (v21 == v16 && v23 == v17)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        return v25 & 1;
      }
    }
  }
}

uint64_t sub_10051D48C(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
    {
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_4;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v14 != 1) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v7 = *(id *)(a1 + 32);
  }
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  [v8 target];

  IdentityTarget.init(rawValue:)();
  if (v9) {
    return 0;
  }
  uint64_t v10 = IdentityTarget.rawValue.getter();
  if (v10 != IdentityTarget.rawValue.getter()) {
    return 0;
  }
  defaultLogger()();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Proofing is in gift watch scenario", v13, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 1;
}

uint64_t sub_10051D6B4()
{
  return sub_10051D6BC(72);
}

uint64_t sub_10051D6BC(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10051D718(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10000C494;
  return sub_10051B268(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10051D7F4()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10051D82C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_10051D86C(uint64_t a1)
{
  return sub_10051B468(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10051D874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_10072F9B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10051D8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10051D8EC()
{
  return swift_release();
}

uint64_t sub_10051D8F4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100007764(&qword_100725908);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v26 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_26;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v27) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v13);
    ++v8;
    if (!v14)
    {
      int64_t v8 = v13 + 1;
      if (v13 + 1 >= v27) {
        goto LABEL_35;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v8);
      if (!v14)
      {
        int64_t v8 = v13 + 2;
        if (v13 + 2 >= v27) {
          goto LABEL_35;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v8);
        if (!v14) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_26:
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_10003BC28(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v39);
    *(void *)&long long v38 = v18;
    *((void *)&v38 + 1) = v17;
    v36[2] = v38;
    v37[0] = v39[0];
    v37[1] = v39[1];
    *(void *)&v36[0] = v18;
    *((void *)&v36[0] + 1) = v17;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000078A8(v37, v31);
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000078A8(v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000078A8(v35, v36);
    sub_1000078A8(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000078A8(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v27)
  {
LABEL_35:
    swift_release();
    swift_release();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v26 + 8 * v15);
  if (v14)
  {
    int64_t v8 = v15;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v8 >= v27) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_25;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_10051DC78(uint64_t a1)
{
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100007764(&qword_100731F90);
  uint64_t v4 = __chkstk_darwin(v50);
  uint64_t v6 = (uint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  int64_t v8 = (char *)&v41 - v7;
  if (*(void *)(a1 + 16))
  {
    sub_100007764(&qword_1007257A0);
    unint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v9 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v44 = a1 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
  if (-v11 < 64) {
    uint64_t v12 = ~(-1 << -(char)v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v10;
  uint64_t v41 = -1 << *(unsigned char *)(a1 + 32);
  int64_t v43 = (unint64_t)(63 - v11) >> 6;
  uint64_t v49 = v2 + 16;
  uint64_t v48 = &v56;
  uint64_t v47 = v2 + 32;
  unint64_t v46 = &v58;
  unint64_t v42 = v9 + 8;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v45 = (char *)&type metadata for Any + 8;
  if (v13) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v43) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v44 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v43) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v44 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v43) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v44 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v43) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v44 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v43)
          {
            unint64_t v21 = *(void *)(v44 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v43) {
                break;
              }
              unint64_t v21 = *(void *)(v44 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_100130AE4();
          return (unint64_t)v9;
        }
      }
    }
  }
LABEL_26:
  unint64_t v13 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = v18 | (i << 6))
  {
    BOOL v24 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v19);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    uint64_t v27 = v50;
    uint64_t v28 = v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(&v8[*(int *)(v50 + 48)], *(void *)(a1 + 56) + *(void *)(v2 + 72) * v19, v52);
    *(void *)int64_t v8 = v26;
    *((void *)v8 + 1) = v25;
    sub_1000BEA14((uint64_t)v8, (uint64_t)v6, &qword_100731F90);
    long long v29 = (char *)v6 + *(int *)(v27 + 48);
    uint64_t v30 = v6[1];
    uint64_t v54 = *v6;
    uint64_t v55 = v30;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v51, v29, v28);
    swift_bridgeObjectRetain();
    uint64_t v31 = v48;
    swift_dynamicCast();
    uint64_t v32 = v54;
    uint64_t v33 = v55;
    uint64_t v34 = v46;
    sub_1000078A8(v31, v46);
    sub_1000078A8(v34, v59);
    sub_1000078A8(v59, &v57);
    unint64_t result = sub_100590548(v32, v33);
    unint64_t v35 = result;
    if (v36)
    {
      uint64_t v15 = a1;
      uint64_t v16 = (uint64_t *)(v9[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v16 = v32;
      v16[1] = v33;
      a1 = v15;
      uint64_t v17 = (_OWORD *)(v9[7] + 32 * v35);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v17);
      unint64_t result = (unint64_t)sub_1000078A8(&v57, v17);
      if (!v13) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v9[2] >= v9[3]) {
      break;
    }
    *(void *)((char *)v42 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v37 = (uint64_t *)(v9[6] + 16 * result);
    *uint64_t v37 = v32;
    v37[1] = v33;
    unint64_t result = (unint64_t)sub_1000078A8(&v57, (_OWORD *)(v9[7] + 32 * result));
    uint64_t v38 = v9[2];
    BOOL v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (v39) {
      goto LABEL_34;
    }
    v9[2] = v40;
    if (!v13) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v18 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10051E184(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100007764(&qword_100731FA8);
    uint64_t v2 = (unsigned char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v28 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v28 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v28 + 1;
    if (!v12)
    {
      int64_t v13 = v28 + 2;
      if (v28 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v28 + 3;
        if (v28 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v28 + 4;
          if (v28 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v28 = v13;
LABEL_28:
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v31[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    *(void *)&v30[0] = v15;
    id v16 = *(id *)&v31[0];
    swift_dynamicCast();
    uint64_t v17 = *(void *)&v31[0];
    sub_1000078A8((_OWORD *)((char *)v31 + 8), v29);
    sub_1000078A8(v29, v31);
    sub_1000078A8(v31, v30);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v19 = -1 << v2[32];
    unint64_t v20 = v18 & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v8 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(void *)(*((void *)v2 + 6) + 8 * v8) = v17;
    uint64_t result = (uint64_t)sub_1000078A8(v30, (_OWORD *)(*((void *)v2 + 7) + 32 * v8));
    ++*((void *)v2 + 2);
  }
  int64_t v14 = v28 + 5;
  if (v28 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_100130AE4();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v28 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10051E51C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100007764(&qword_100725908);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000078A8(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000078A8(v35, v36);
    sub_1000078A8(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~v6[v20 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~v6[v20 >> 6])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = v6[v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000078A8(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_100130AE4();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_10051E8DC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100007764(&qword_1007257A0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = (char *)&type metadata for Any + 8;
  unint64_t v11 = &type metadata for String;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_100130AE4();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    BOOL v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000078A8(v6, v7);
    sub_1000078A8(v7, v40);
    sub_1000078A8(v40, &v38);
    unint64_t result = sub_100590548(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      unint64_t v12 = v7;
      int64_t v13 = v6;
      uint64_t v14 = v1;
      int64_t v15 = v11;
      int64_t v16 = v10;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      unint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v18);
      unint64_t result = (unint64_t)sub_1000078A8(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_1000078A8(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_10051EC48()
{
  uint64_t v0 = (objc_class *)type metadata accessor for DIPURLCache();
  id v1 = objc_allocWithZone(v0);
  uint64_t v2 = self;
  id v3 = [v2 sharedURLCache];
  id v4 = [v3 memoryCapacity];

  id v5 = [v2 sharedURLCache];
  id v6 = [v5 diskCapacity];

  NSString v7 = String._bridgeToObjectiveC()();
  v9.receiver = v1;
  v9.super_class = v0;
  id v8 = [super initWithMemoryCapacity:v4 diskCapacity:v6 diskPath:v7];

  qword_100760850 = (uint64_t)v8;
}

id sub_10051F0A8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DIPURLCache();
  return [super dealloc];
}

uint64_t type metadata accessor for DIPURLCache()
{
  return self;
}

uint64_t sub_10051F104(void *a1)
{
  uint64_t v2 = sub_100007764(&qword_1007266F0);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int64_t v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [a1 userInfo];
  if (!v16)
  {
    long long v34 = 0u;
    long long v35 = 0u;
LABEL_12:
    sub_10000C6CC((uint64_t)&v34, (uint64_t *)&unk_100727200);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_13;
  }
  uint64_t v17 = v16;
  v32[0] = v6;
  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v32[1] = 0x74416465726F7473;
  uint64_t v32[2] = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v18 + 16) && (unint64_t v19 = sub_100590504((uint64_t)v33), (v20 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v18 + 56) + 32 * v19, (uint64_t)&v34);
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1001D90FC((uint64_t)v33);
  if (!*((void *)&v35 + 1)) {
    goto LABEL_12;
  }
  int v21 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, v21 ^ 1u, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_13:
    sub_10000C6CC((uint64_t)v11, &qword_1007239B0);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  id v22 = [objc_allocWithZone((Class)NSDateFormatter) init];
  Locale.init(identifier:)();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v32[0] + 8))(v8, v5);
  [v22 setLocale:isa];

  TimeZone.init(secondsFromGMT:)();
  uint64_t v24 = type metadata accessor for TimeZone();
  uint64_t v25 = *(void *)(v24 - 8);
  Class v26 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v4, 1, v24) != 1)
  {
    Class v26 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v24);
  }
  [v22 setTimeZone:v26];

  NSString v27 = String._bridgeToObjectiveC()();
  [v22 setDateFormat:v27];

  Class v28 = Date._bridgeToObjectiveC()().super.isa;
  id v29 = [v22 stringFromDate:v28];

  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v30;
}

unint64_t sub_10051F638(void *a1)
{
  id v2 = [a1 allHeaderFields];
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v3 + 16) && (unint64_t v4 = sub_100590504((uint64_t)v15), (v5 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v16);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1001D90FC((uint64_t)v15);
  if (*((void *)&v17 + 1))
  {
    if (swift_dynamicCast()) {
      return 0xD000000000000019;
    }
  }
  else
  {
    sub_10000C6CC((uint64_t)&v16, (uint64_t *)&unk_100727200);
  }
  id v6 = [a1 allHeaderFields];
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_100590504((uint64_t)v15), (v9 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v16);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1001D90FC((uint64_t)v15);
  if (*((void *)&v17 + 1))
  {
    if (swift_dynamicCast()) {
      return 0xD000000000000019;
    }
  }
  else
  {
    sub_10000C6CC((uint64_t)&v16, (uint64_t *)&unk_100727200);
  }
  id v10 = [a1 allHeaderFields];
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_100590504((uint64_t)v15), (v13 & 1) != 0))
  {
    sub_10003BC28(*(void *)(v11 + 56) + 32 * v12, (uint64_t)&v16);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1001D90FC((uint64_t)v15);
  if (*((void *)&v17 + 1))
  {
    if (swift_dynamicCast()) {
      return 0xD000000000000019;
    }
  }
  else
  {
    sub_10000C6CC((uint64_t)&v16, (uint64_t *)&unk_100727200);
  }
  return 0;
}

uint64_t sub_10051F938(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = type metadata accessor for CharacterSet();
  uint64_t v4 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v26 = a1;
  *((void *)&v26 + 1) = a2;
  unint64_t v7 = sub_1000B5358();
  uint64_t v8 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    int v21 = (void (**)(char *, uint64_t))(v4 + 8);
    unint64_t v22 = v7;
    uint64_t v20 = v8;
    id v10 = (uint64_t *)(v8 + 56);
    while (1)
    {
      uint64_t v11 = *(v10 - 1);
      uint64_t v12 = *v10;
      long long v26 = *(_OWORD *)(v10 - 3);
      uint64_t v27 = v11;
      uint64_t v28 = v12;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      sub_1000B6164();
      uint64_t v13 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v15 = v14;
      (*v21)(v6, v23);
      swift_bridgeObjectRelease();
      *(void *)&long long v26 = v13;
      *((void *)&v26 + 1) = v15;
      uint64_t v16 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      swift_bridgeObjectRelease();
      if (*(void *)(v16 + 16) == 2)
      {
        uint64_t v17 = *(void *)(v16 + 48);
        uint64_t v18 = *(void *)(v16 + 56);
        long long v26 = *(_OWORD *)(v16 + 32);
        uint64_t v27 = v17;
        uint64_t v28 = v18;
        uint64_t v24 = 0x6567612D78616DLL;
        unint64_t v25 = 0xE700000000000000;
        if (!StringProtocol.caseInsensitiveCompare<A>(_:)()) {
          break;
        }
      }
      swift_bridgeObjectRelease();
      v10 += 4;
      if (!--v9) {
        goto LABEL_8;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(v16 + 16) < 2uLL)
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return Double.init(_:)();
    }
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

unint64_t sub_10051FBB8(void *a1, char a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v43 - v15;
  self;
  uint64_t v17 = swift_dynamicCastObjCClass();
  if (!v17) {
    return 0;
  }
  uint64_t v18 = (void *)v17;
  uint64_t v43 = v4;
  id v44 = a1;
  unint64_t v19 = sub_10051F638(v18);
  if (v20)
  {
    sub_10051F938(v19, v20);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      Date.init()();
      Date.addingTimeInterval(_:)();
      sub_100007764(&qword_100731F88);
      uint64_t v23 = (int *)(sub_100007764(&qword_1007257F8) - 8);
      uint64_t v24 = *(void *)(*(void *)v23 + 72);
      unint64_t v25 = (*(unsigned __int8 *)(*(void *)v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v23 + 80);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_100611020;
      uint64_t v27 = (void *)(v26 + v25);
      uint64_t v28 = (char *)v27 + v23[14];
      void *v27 = 0x74416465726F7473;
      v27[1] = 0xE800000000000000;
      id v29 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
      v29(v28, v16, v10);
      uint64_t v30 = (void *)((char *)v27 + v24);
      int64_t v31 = (char *)v27 + v24 + v23[14];
      void *v30 = 0x4173657269707865;
      v30[1] = 0xE900000000000074;
      v29(v31, v14, v10);
      unint64_t v32 = sub_10015C3A4(v26);
      unint64_t v33 = sub_10051DC78(v32);

      swift_bridgeObjectRelease();
      long long v34 = *(void (**)(char *, uint64_t))(v11 + 8);
      v34(v14, v10);
      v34(v16, v10);
      return v33;
    }
  }
  if ((a2 & 1) == 0)
  {
    defaultLogger()();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "no max age was specified in the cache-control header, so don't cache this", v41, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v43);
    return 0;
  }
  defaultLogger()();
  long long v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "DIPURLCache force cache flag received, returning user info with an immediate expiration date for caching.", v37, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v43);
  sub_100007764(&qword_100724858);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100611020;
  *(void *)(inited + 32) = 0x74416465726F7473;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 72) = v10;
  sub_10002C2D8((uint64_t *)(inited + 48));
  static Date.now.getter();
  *(void *)(inited + 80) = 0x4173657269707865;
  *(void *)(inited + 88) = 0xE900000000000074;
  *(void *)(inited + 120) = v10;
  sub_10002C2D8((uint64_t *)(inited + 96));
  static Date.now.getter();
  unint64_t v33 = sub_10015C3CC(inited);

  return v33;
}

id sub_1005200D8(void *a1, char a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v55 - v9;
  uint64_t v11 = sub_100007764(&qword_100720A68);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v55 - v15;
  id v17 = [self standardUserDefaults];
  v18._object = (void *)0x8000000100653790;
  v18._uint64_t countAndFlagsBits = 0xD000000000000016;
  Swift::Bool v19 = NSUserDefaults.internalBool(forKey:)(v18);

  if (v19)
  {
    id v20 = a1;
    return a1;
  }
  id v22 = [a1 response];
  unint64_t v23 = sub_10051FBB8(v22, a2 & 1);

  if (v23)
  {
    uint64_t v56 = v10;
    uint64_t v58 = v5;
    uint64_t v59 = v4;
    id v57 = [a1 response];
    id v24 = [a1 data];
    uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    unint64_t v55 = v23;
    sub_10051D8F4(v23);
    id v28 = [a1 storagePolicy];
    id v29 = objc_allocWithZone((Class)NSCachedURLResponse);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v31 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v32 = v29;
    unint64_t v33 = v57;
    id v21 = [v32 initWithResponse:v57 data:isa userInfo:v31 storagePolicy:v28];
    sub_10000C5F4(v25, v27);

    id v34 = [a1 response];
    id v35 = [v34 URL];

    if (v35)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v36 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v14, 0, 1, v36);
    }
    else
    {
      uint64_t v36 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v14, 1, 1, v36);
    }
    uint64_t v40 = v59;
    unint64_t v42 = v55;
    uint64_t v41 = v56;
    sub_1000BEA14((uint64_t)v14, (uint64_t)v16, &qword_100720A68);
    type metadata accessor for URL();
    uint64_t v43 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v16, 1, v36) == 1)
    {
      uint64_t v44 = 7104878;
      sub_10000C6CC((uint64_t)v16, &qword_100720A68);
      unint64_t v45 = 0xE300000000000000;
      if (!*(void *)(v42 + 16)) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v44 = URL.absoluteString.getter();
      unint64_t v45 = v46;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v36);
      if (!*(void *)(v42 + 16)) {
        goto LABEL_16;
      }
    }
    unint64_t v47 = sub_100590548(0x4173657269707865, 0xE900000000000074);
    if (v48)
    {
      sub_10003BC28(*(void *)(v42 + 56) + 32 * v47, (uint64_t)&v62);
LABEL_17:
      swift_bridgeObjectRelease();
      if (*((void *)&v63 + 1))
      {
        sub_1000078A8(&v62, &v64);
      }
      else
      {
        uint64_t v65 = &type metadata for String;
        *(void *)&long long v64 = 7104878;
        *((void *)&v64 + 1) = 0xE300000000000000;
        sub_10000C6CC((uint64_t)&v62, (uint64_t *)&unk_100727200);
      }
      defaultLogger()();
      sub_10003BC28((uint64_t)&v64, (uint64_t)&v62);
      swift_bridgeObjectRetain();
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = 136446466;
        swift_bridgeObjectRetain();
        v60[0] = sub_100110D58(v44, v45, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v51 + 12) = 2082;
        sub_10003BC28((uint64_t)&v62, (uint64_t)v60);
        uint64_t v52 = String.init<A>(describing:)();
        v60[0] = sub_100110D58(v52, v53, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v62);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Caching response from %{public}s until %{public}s", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v58 + 8))(v41, v59);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v62);

        (*(void (**)(char *, uint64_t))(v58 + 8))(v41, v40);
      }
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v64);
      return v21;
    }
LABEL_16:
    long long v62 = 0u;
    long long v63 = 0u;
    goto LABEL_17;
  }
  defaultLogger()();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "No user info present in the header", v39, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return 0;
}

uint64_t sub_100520830(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 272) = a6;
  *(void *)(v7 + 280) = a7;
  *(void *)(v7 + 256) = a4;
  *(void *)(v7 + 264) = a5;
  *(unsigned char *)(v7 + 576) = a2;
  *(void *)(v7 + 240) = a1;
  *(void *)(v7 + 248) = a3;
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v7 + 288) = v8;
  *(void *)(v7 + 296) = *(void *)(v8 - 8);
  *(void *)(v7 + 304) = swift_task_alloc();
  *(void *)(v7 + 312) = swift_task_alloc();
  *(void *)(v7 + 320) = swift_task_alloc();
  *(void *)(v7 + 328) = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  *(void *)(v7 + 336) = swift_task_alloc();
  *(void *)(v7 + 344) = swift_task_alloc();
  *(void *)(v7 + 352) = swift_task_alloc();
  *(void *)(v7 + 360) = swift_task_alloc();
  *(void *)(v7 + 368) = swift_task_alloc();
  *(void *)(v7 + 376) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URLRequest();
  *(void *)(v7 + 384) = v9;
  *(void *)(v7 + 392) = *(void *)(v9 - 8);
  *(void *)(v7 + 400) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  *(void *)(v7 + 408) = v10;
  *(void *)(v7 + 416) = *(void *)(v10 - 8);
  *(void *)(v7 + 424) = swift_task_alloc();
  *(void *)(v7 + 432) = swift_task_alloc();
  *(void *)(v7 + 440) = swift_task_alloc();
  *(void *)(v7 + 448) = swift_task_alloc();
  *(void *)(v7 + 456) = swift_task_alloc();
  *(void *)(v7 + 464) = swift_task_alloc();
  *(void *)(v7 + 472) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v7 + 480) = v11;
  *(void *)(v7 + 488) = *(void *)(v11 - 8);
  *(void *)(v7 + 496) = swift_task_alloc();
  *(void *)(v7 + 504) = swift_task_alloc();
  *(void *)(v7 + 512) = swift_task_alloc();
  *(void *)(v7 + 520) = swift_task_alloc();
  *(void *)(v7 + 528) = swift_task_alloc();
  *(void *)(v7 + 536) = swift_task_alloc();
  return _swift_task_switch(sub_100520B34, 0, 0);
}

uint64_t sub_100520B34()
{
  uint64_t v187 = v0;
  id v1 = self;
  id v2 = [v1 standardUserDefaults];
  v3._uint64_t countAndFlagsBits = 0xD000000000000019;
  v3._object = (void *)0x8000000100653810;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 472);
    uint64_t v7 = *(void *)(v0 + 408);
    uint64_t v8 = *(void *)(v0 + 416);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v184 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v9, v184);
    uint64_t v11 = *(void *)(v0 + 536);
    uint64_t v13 = *(void *)(v0 + 480);
    uint64_t v12 = *(void *)(v0 + 488);
    uint64_t v14 = *(void *)(v0 + 472);
    uint64_t v16 = *(void *)(v0 + 408);
    uint64_t v15 = *(void *)(v0 + 416);
    if (v10)
    {
      uint64_t v180 = *(void *)(v0 + 536);
      logb = v9;
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v186 = swift_slowAlloc();
      *(_DWORD *)id v17 = 136446210;
      sub_100524238();
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 232) = sub_100110D58(v18, v19, &v186);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, logb, v184, "Refreshing cache for %{public}s due to user defaults setting", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v180, v13);
    }
    else
    {
      (*(void (**)(void, void))(v15 + 8))(*(void *)(v0 + 472), *(void *)(v0 + 408));

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v39;
    *uint64_t v39 = v0;
    uint64_t v40 = sub_100521F64;
    goto LABEL_9;
  }
  id v20 = [v1 standardUserDefaults];
  v21._object = (void *)0x8000000100653830;
  v21._uint64_t countAndFlagsBits = 0xD000000000000015;
  Swift::Bool v22 = NSUserDefaults.internalBool(forKey:)(v21);

  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 464);
    uint64_t v24 = *(void *)(v0 + 408);
    uint64_t v25 = *(void *)(v0 + 416);
    uint64_t v26 = *(void *)(v0 + 240);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v26, v24);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void *)(v0 + 528);
    uint64_t v32 = *(void *)(v0 + 480);
    uint64_t v31 = *(void *)(v0 + 488);
    uint64_t v33 = *(void *)(v0 + 464);
    uint64_t v35 = *(void *)(v0 + 408);
    uint64_t v34 = *(void *)(v0 + 416);
    if (v29)
    {
      uint64_t v181 = *(void *)(v0 + 480);
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v186 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446210;
      sub_100524238();
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 224) = sub_100110D58(v37, v38, &v186);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not refreshing cache for %{public}s because caching is disabled in user defaults", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v181);
    }
    else
    {
      (*(void (**)(void, void))(v34 + 8))(*(void *)(v0 + 464), *(void *)(v0 + 408));

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    goto LABEL_63;
  }
  uint64_t v45 = *(void *)(v0 + 392);
  uint64_t v44 = *(void *)(v0 + 400);
  uint64_t v46 = *(void *)(v0 + 384);
  unint64_t v47 = *(void **)(v0 + 264);
  char v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 416) + 16);
  v48(*(void *)(v0 + 456), *(void *)(v0 + 240), *(void *)(v0 + 408));
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  id v50 = [v47 cachedResponseForRequest:isa];
  *(void *)(v0 + 552) = v50;

  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  if (v50)
  {
    uint64_t v51 = (_OWORD *)(v0 + 96);
    id v185 = v50;
    id v52 = [v185 userInfo];
    if (v52)
    {
      unint64_t v53 = v52;
      uint64_t v54 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 160) = 0x74416465726F7473;
      *(void *)(v0 + 168) = 0xE800000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v54 + 16) && (unint64_t v55 = sub_100590504(v0 + 56), (v56 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v54 + 56) + 32 * v55, v0 + 96);
      }
      else
      {
        *uint64_t v51 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1001D90FC(v0 + 56);
      if (*(void *)(v0 + 120))
      {
        uint64_t v72 = *(void *)(v0 + 376);
        uint64_t v73 = *(void *)(v0 + 288);
        uint64_t v74 = *(void *)(v0 + 296);
        int v75 = swift_dynamicCast();
        unint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56);
        v76(v72, v75 ^ 1u, 1, v73);
        goto LABEL_26;
      }
    }
    else
    {
      *uint64_t v51 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    uint64_t v77 = *(void *)(v0 + 376);
    uint64_t v78 = *(void *)(v0 + 288);
    uint64_t v79 = *(void *)(v0 + 296);
    sub_10000C6CC(v0 + 96, (uint64_t *)&unk_100727200);
    unint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56);
    v76(v77, 1, 1, v78);
LABEL_26:
    uint64_t v80 = (_OWORD *)(v0 + 128);
    id v81 = [v185 userInfo];
    if (v81)
    {
      uint64_t v82 = v81;
      uint64_t v83 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 176) = 0x4173657269707865;
      *(void *)(v0 + 184) = 0xE900000000000074;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v83 + 16) && (unint64_t v84 = sub_100590504(v0 + 16), (v85 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v83 + 56) + 32 * v84, v0 + 128);
      }
      else
      {
        *uint64_t v80 = 0u;
        *(_OWORD *)(v0 + 144) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1001D90FC(v0 + 16);
      if (*(void *)(v0 + 152))
      {
        uint64_t v86 = *(void *)(v0 + 368);
        uint64_t v87 = *(void *)(v0 + 288);
        uint64_t v88 = swift_dynamicCast() ^ 1;
        uint64_t v89 = v86;
        goto LABEL_35;
      }
    }
    else
    {
      *uint64_t v80 = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }
    uint64_t v90 = *(void *)(v0 + 368);
    uint64_t v87 = *(void *)(v0 + 288);
    sub_10000C6CC(v0 + 128, (uint64_t *)&unk_100727200);
    uint64_t v89 = v90;
    uint64_t v88 = 1;
LABEL_35:
    v76(v89, v88, 1, v87);
    uint64_t v91 = *(void *)(v0 + 360);
    uint64_t v92 = *(void *)(v0 + 288);
    uint64_t v93 = *(void *)(v0 + 296);
    sub_100033298(*(void *)(v0 + 376), v91);
    os_log_type_t v94 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
    if (v94(v91, 1, v92) == 1)
    {
      uint64_t v95 = *(void *)(v0 + 360);
    }
    else
    {
      uint64_t v96 = *(void *)(v0 + 352);
      uint64_t v97 = *(void *)(v0 + 288);
      uint64_t v98 = *(void *)(v0 + 248);
      os_log_type_t v99 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 296) + 32);
      v99(*(void *)(v0 + 328), *(void *)(v0 + 360), v97);
      sub_100033298(v98, v96);
      int v100 = v94(v96, 1, v97);
      uint64_t v101 = *(void *)(v0 + 352);
      if (v100 != 1)
      {
        v99(*(void *)(v0 + 320), *(void *)(v0 + 352), *(void *)(v0 + 288));
        if (static Date.> infix(_:_:)())
        {
          uint64_t v124 = *(void *)(v0 + 448);
          uint64_t v125 = *(void *)(v0 + 408);
          uint64_t v126 = *(void *)(v0 + 240);
          defaultLogger()();
          v48(v124, v126, v125);
          unint64_t v127 = Logger.logObject.getter();
          os_log_type_t v128 = static os_log_type_t.debug.getter();
          v173 = v127;
          BOOL v129 = os_log_type_enabled(v127, v128);
          uint64_t v130 = *(void *)(v0 + 520);
          uint64_t v131 = *(void *)(v0 + 488);
          os_log_t log = *(os_log_t *)(v0 + 480);
          uint64_t v132 = *(void *)(v0 + 448);
          uint64_t v134 = *(void *)(v0 + 408);
          uint64_t v133 = *(void *)(v0 + 416);
          uint64_t v135 = *(void *)(v0 + 328);
          uint64_t v179 = *(void *)(v0 + 320);
          uint64_t v137 = *(void *)(v0 + 288);
          uint64_t v136 = *(void *)(v0 + 296);
          if (v129)
          {
            uint64_t v172 = *(void *)(v0 + 288);
            os_log_type_t type = v128;
            unint64_t v138 = (uint8_t *)swift_slowAlloc();
            uint64_t v186 = swift_slowAlloc();
            *(_DWORD *)unint64_t v138 = 136446210;
            sub_100524238();
            uint64_t v139 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 200) = sub_100110D58(v139, v140, &v186);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v132, v134);
            _os_log_impl((void *)&_mh_execute_header, v173, type, "Not refreshing cache for %{public}s because cached response was stored recently", v138, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, os_log_t))(v131 + 8))(v130, log);
            uint64_t v141 = *(void (**)(uint64_t, uint64_t))(v136 + 8);
            v141(v179, v172);
            v141(v135, v172);
          }
          else
          {

            (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v132, v134);
            (*(void (**)(uint64_t, os_log_t))(v131 + 8))(v130, log);
            v166 = *(void (**)(uint64_t, uint64_t))(v136 + 8);
            v166(v179, v137);
            v166(v135, v137);
          }
LABEL_62:
          uint64_t v168 = *(void *)(v0 + 376);
          sub_10000C6CC(*(void *)(v0 + 368), &qword_1007239B0);
          sub_10000C6CC(v168, &qword_1007239B0);
          goto LABEL_63;
        }
        uint64_t v160 = *(void *)(v0 + 328);
        uint64_t v161 = *(void *)(v0 + 288);
        v162 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 296) + 8);
        v162(*(void *)(v0 + 320), v161);
        v162(v160, v161);
LABEL_40:
        uint64_t v102 = *(void *)(v0 + 344);
        uint64_t v103 = *(void *)(v0 + 288);
        sub_100033298(*(void *)(v0 + 368), v102);
        if (v94(v102, 1, v103) == 1)
        {
          uint64_t v104 = *(void *)(v0 + 344);
LABEL_44:
          sub_10000C6CC(v104, &qword_1007239B0);
LABEL_45:
          uint64_t v39 = (void *)swift_task_alloc();
          *(void *)(v0 + 560) = v39;
          *uint64_t v39 = v0;
          uint64_t v40 = sub_100522350;
LABEL_9:
          v39[1] = v40;
          uint64_t v42 = *(void *)(v0 + 272);
          uint64_t v41 = *(void *)(v0 + 280);
          return sub_100042E40(v42, v41);
        }
        uint64_t v105 = *(void *)(v0 + 336);
        uint64_t v106 = *(void *)(v0 + 288);
        uint64_t v107 = *(void *)(v0 + 256);
        os_log_type_t v108 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 296) + 32);
        v108(*(void *)(v0 + 312), *(void *)(v0 + 344), v106);
        sub_100033298(v107, v105);
        int v109 = v94(v105, 1, v106);
        uint64_t v110 = *(void *)(v0 + 336);
        if (v109 == 1)
        {
          (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 312), *(void *)(v0 + 288));
          uint64_t v104 = v110;
          goto LABEL_44;
        }
        v108(*(void *)(v0 + 304), *(void *)(v0 + 336), *(void *)(v0 + 288));
        if ((static Date.> infix(_:_:)() & 1) == 0)
        {
          uint64_t v163 = *(void *)(v0 + 312);
          uint64_t v164 = *(void *)(v0 + 288);
          v165 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 296) + 8);
          v165(*(void *)(v0 + 304), v164);
          v165(v163, v164);
          goto LABEL_45;
        }
        uint64_t v142 = *(void *)(v0 + 440);
        uint64_t v143 = *(void *)(v0 + 408);
        uint64_t v144 = *(void *)(v0 + 240);
        defaultLogger()();
        v48(v142, v144, v143);
        v145 = Logger.logObject.getter();
        os_log_type_t v146 = static os_log_type_t.debug.getter();
        v174 = v145;
        BOOL v147 = os_log_type_enabled(v145, v146);
        uint64_t v148 = *(void *)(v0 + 512);
        uint64_t v149 = *(void *)(v0 + 488);
        os_log_t loga = *(os_log_t *)(v0 + 480);
        uint64_t v150 = *(void *)(v0 + 440);
        uint64_t v152 = *(void *)(v0 + 408);
        uint64_t v151 = *(void *)(v0 + 416);
        uint64_t v153 = *(void *)(v0 + 312);
        uint64_t v183 = *(void *)(v0 + 304);
        uint64_t v154 = *(void *)(v0 + 288);
        uint64_t v155 = *(void *)(v0 + 296);
        if (v147)
        {
          uint64_t v171 = *(void *)(v0 + 288);
          v156 = (uint8_t *)swift_slowAlloc();
          uint64_t v186 = swift_slowAlloc();
          *(_DWORD *)v156 = 136446210;
          sub_100524238();
          uint64_t v157 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 208) = sub_100110D58(v157, v158, &v186);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v150, v152);
          _os_log_impl((void *)&_mh_execute_header, v174, v146, "Not refreshing cache for %{public}s because current response won't expire soon", v156, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, os_log_t))(v149 + 8))(v148, loga);
          v159 = *(void (**)(uint64_t, uint64_t))(v155 + 8);
          v159(v183, v171);
          v159(v153, v171);
        }
        else
        {

          (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v150, v152);
          (*(void (**)(uint64_t, os_log_t))(v149 + 8))(v148, loga);
          v167 = *(void (**)(uint64_t, uint64_t))(v155 + 8);
          v167(v183, v154);
          v167(v153, v154);
        }
        goto LABEL_62;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 328), *(void *)(v0 + 288));
      uint64_t v95 = v101;
    }
    sub_10000C6CC(v95, &qword_1007239B0);
    goto LABEL_40;
  }
  uint64_t v57 = *(void *)(v0 + 408);
  uint64_t v58 = *(void *)(v0 + 240);
  if ((*(unsigned char *)(v0 + 576) & 1) == 0)
  {
    uint64_t v111 = *(void *)(v0 + 424);
    defaultLogger()();
    v48(v111, v58, v57);
    uint64_t v112 = Logger.logObject.getter();
    os_log_type_t v113 = static os_log_type_t.debug.getter();
    BOOL v114 = os_log_type_enabled(v112, v113);
    uint64_t v116 = *(void *)(v0 + 488);
    uint64_t v115 = *(void *)(v0 + 496);
    uint64_t v117 = *(void *)(v0 + 480);
    uint64_t v119 = *(void *)(v0 + 416);
    uint64_t v118 = *(void *)(v0 + 424);
    uint64_t v120 = *(void *)(v0 + 408);
    if (v114)
    {
      uint64_t v178 = *(void *)(v0 + 496);
      unint64_t v121 = (uint8_t *)swift_slowAlloc();
      uint64_t v186 = swift_slowAlloc();
      *(_DWORD *)unint64_t v121 = 136446210;
      sub_100524238();
      uint64_t v122 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 192) = sub_100110D58(v122, v123, &v186);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v118, v120);
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "Refreshing cache for %{public}s because no response exists in cache", v121, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v178, v117);
    }
    else
    {
      (*(void (**)(void, void))(v119 + 8))(*(void *)(v0 + 424), *(void *)(v0 + 408));

      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v115, v117);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 568) = v39;
    *uint64_t v39 = v0;
    uint64_t v40 = sub_100522620;
    goto LABEL_9;
  }
  uint64_t v59 = *(void *)(v0 + 432);
  defaultLogger()();
  v48(v59, v58, v57);
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  BOOL v62 = os_log_type_enabled(v60, v61);
  uint64_t v63 = *(void *)(v0 + 504);
  uint64_t v65 = *(void *)(v0 + 480);
  uint64_t v64 = *(void *)(v0 + 488);
  uint64_t v66 = *(void *)(v0 + 432);
  uint64_t v68 = *(void *)(v0 + 408);
  uint64_t v67 = *(void *)(v0 + 416);
  if (v62)
  {
    uint64_t v182 = *(void *)(v0 + 480);
    Swift::String v69 = (uint8_t *)swift_slowAlloc();
    uint64_t v186 = swift_slowAlloc();
    *(_DWORD *)Swift::String v69 = 136446210;
    sub_100524238();
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 216) = sub_100110D58(v70, v71, &v186);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Not refreshing cache for %{public}s because nothing is currently in the cache", v69, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v182);
  }
  else
  {
    (*(void (**)(void, void))(v67 + 8))(*(void *)(v0 + 432), *(void *)(v0 + 408));

    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
  }
LABEL_63:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v169 = *(uint64_t (**)(void))(v0 + 8);
  return v169();
}

uint64_t sub_100521F64()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100522350()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10052244C, 0, 0);
}

uint64_t sub_10052244C()
{
  uint64_t v1 = (void *)v0[69];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[47];

  sub_10000C6CC(v2, &qword_1007239B0);
  sub_10000C6CC(v3, &qword_1007239B0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100522620()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100522A0C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 264) = a5;
  *(void *)(v6 + 272) = a6;
  *(void *)(v6 + 248) = a3;
  *(void *)(v6 + 256) = a4;
  *(unsigned char *)(v6 + 568) = a2;
  *(void *)(v6 + 240) = a1;
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v6 + 280) = v7;
  *(void *)(v6 + 288) = *(void *)(v7 - 8);
  *(void *)(v6 + 296) = swift_task_alloc();
  *(void *)(v6 + 304) = swift_task_alloc();
  *(void *)(v6 + 312) = swift_task_alloc();
  *(void *)(v6 + 320) = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  *(void *)(v6 + 328) = swift_task_alloc();
  *(void *)(v6 + 336) = swift_task_alloc();
  *(void *)(v6 + 344) = swift_task_alloc();
  *(void *)(v6 + 352) = swift_task_alloc();
  *(void *)(v6 + 360) = swift_task_alloc();
  *(void *)(v6 + 368) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URLRequest();
  *(void *)(v6 + 376) = v8;
  *(void *)(v6 + 384) = *(void *)(v8 - 8);
  *(void *)(v6 + 392) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  *(void *)(v6 + 400) = v9;
  *(void *)(v6 + 408) = *(void *)(v9 - 8);
  *(void *)(v6 + 416) = swift_task_alloc();
  *(void *)(v6 + 424) = swift_task_alloc();
  *(void *)(v6 + 432) = swift_task_alloc();
  *(void *)(v6 + 440) = swift_task_alloc();
  *(void *)(v6 + 448) = swift_task_alloc();
  *(void *)(v6 + 456) = swift_task_alloc();
  *(void *)(v6 + 464) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v6 + 472) = v10;
  *(void *)(v6 + 480) = *(void *)(v10 - 8);
  *(void *)(v6 + 488) = swift_task_alloc();
  *(void *)(v6 + 496) = swift_task_alloc();
  *(void *)(v6 + 504) = swift_task_alloc();
  *(void *)(v6 + 512) = swift_task_alloc();
  *(void *)(v6 + 520) = swift_task_alloc();
  *(void *)(v6 + 528) = swift_task_alloc();
  return _swift_task_switch(sub_100522D10, 0, 0);
}

uint64_t sub_100522D10()
{
  uint64_t v186 = v0;
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  v3._uint64_t countAndFlagsBits = 0xD000000000000019;
  v3._object = (void *)0x8000000100653810;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 464);
    uint64_t v7 = *(void *)(v0 + 400);
    uint64_t v8 = *(void *)(v0 + 408);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v183 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v9, v183);
    uint64_t v11 = *(void *)(v0 + 528);
    uint64_t v13 = *(void *)(v0 + 472);
    uint64_t v12 = *(void *)(v0 + 480);
    uint64_t v14 = *(void *)(v0 + 464);
    uint64_t v16 = *(void *)(v0 + 400);
    uint64_t v15 = *(void *)(v0 + 408);
    if (v10)
    {
      uint64_t v179 = *(void *)(v0 + 528);
      logb = v9;
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v185 = swift_slowAlloc();
      *(_DWORD *)id v17 = 136446210;
      sub_100524238();
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 232) = sub_100110D58(v18, v19, &v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, logb, v183, "Refreshing cache for %{public}s due to user defaults setting", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v179, v13);
    }
    else
    {
      (*(void (**)(void, void))(v15 + 8))(*(void *)(v0 + 464), *(void *)(v0 + 400));

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v39;
    *uint64_t v39 = v0;
    uint64_t v40 = sub_100529EB4;
    goto LABEL_9;
  }
  id v20 = [v1 standardUserDefaults];
  v21._object = (void *)0x8000000100653830;
  v21._uint64_t countAndFlagsBits = 0xD000000000000015;
  Swift::Bool v22 = NSUserDefaults.internalBool(forKey:)(v21);

  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 456);
    uint64_t v24 = *(void *)(v0 + 400);
    uint64_t v25 = *(void *)(v0 + 408);
    uint64_t v26 = *(void *)(v0 + 240);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v26, v24);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void *)(v0 + 520);
    uint64_t v32 = *(void *)(v0 + 472);
    uint64_t v31 = *(void *)(v0 + 480);
    uint64_t v33 = *(void *)(v0 + 456);
    uint64_t v35 = *(void *)(v0 + 400);
    uint64_t v34 = *(void *)(v0 + 408);
    if (v29)
    {
      uint64_t v180 = *(void *)(v0 + 472);
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v185 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446210;
      sub_100524238();
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 224) = sub_100110D58(v37, v38, &v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not refreshing cache for %{public}s because caching is disabled in user defaults", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v180);
    }
    else
    {
      (*(void (**)(void, void))(v34 + 8))(*(void *)(v0 + 456), *(void *)(v0 + 400));

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    goto LABEL_63;
  }
  uint64_t v44 = *(void *)(v0 + 384);
  uint64_t v43 = *(void *)(v0 + 392);
  uint64_t v45 = *(void *)(v0 + 376);
  uint64_t v46 = *(void **)(v0 + 264);
  unint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 408) + 16);
  v47(*(void *)(v0 + 448), *(void *)(v0 + 240), *(void *)(v0 + 400));
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  id v49 = [v46 cachedResponseForRequest:isa];
  *(void *)(v0 + 544) = v49;

  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
  if (v49)
  {
    id v50 = (_OWORD *)(v0 + 96);
    id v184 = v49;
    id v51 = [v184 userInfo];
    if (v51)
    {
      id v52 = v51;
      uint64_t v53 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 160) = 0x74416465726F7473;
      *(void *)(v0 + 168) = 0xE800000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v53 + 16) && (unint64_t v54 = sub_100590504(v0 + 56), (v55 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v53 + 56) + 32 * v54, v0 + 96);
      }
      else
      {
        *id v50 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1001D90FC(v0 + 56);
      if (*(void *)(v0 + 120))
      {
        uint64_t v71 = *(void *)(v0 + 368);
        uint64_t v72 = *(void *)(v0 + 280);
        uint64_t v73 = *(void *)(v0 + 288);
        int v74 = swift_dynamicCast();
        int v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
        v75(v71, v74 ^ 1u, 1, v72);
        goto LABEL_26;
      }
    }
    else
    {
      *id v50 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    uint64_t v76 = *(void *)(v0 + 368);
    uint64_t v77 = *(void *)(v0 + 280);
    uint64_t v78 = *(void *)(v0 + 288);
    sub_10000C6CC(v0 + 96, (uint64_t *)&unk_100727200);
    int v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56);
    v75(v76, 1, 1, v77);
LABEL_26:
    uint64_t v79 = (_OWORD *)(v0 + 128);
    id v80 = [v184 userInfo];
    if (v80)
    {
      id v81 = v80;
      uint64_t v82 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 176) = 0x4173657269707865;
      *(void *)(v0 + 184) = 0xE900000000000074;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v82 + 16) && (unint64_t v83 = sub_100590504(v0 + 16), (v84 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v82 + 56) + 32 * v83, v0 + 128);
      }
      else
      {
        *uint64_t v79 = 0u;
        *(_OWORD *)(v0 + 144) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1001D90FC(v0 + 16);
      if (*(void *)(v0 + 152))
      {
        uint64_t v85 = *(void *)(v0 + 360);
        uint64_t v86 = *(void *)(v0 + 280);
        uint64_t v87 = swift_dynamicCast() ^ 1;
        uint64_t v88 = v85;
        goto LABEL_35;
      }
    }
    else
    {
      *uint64_t v79 = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }
    uint64_t v89 = *(void *)(v0 + 360);
    uint64_t v86 = *(void *)(v0 + 280);
    sub_10000C6CC(v0 + 128, (uint64_t *)&unk_100727200);
    uint64_t v88 = v89;
    uint64_t v87 = 1;
LABEL_35:
    v75(v88, v87, 1, v86);
    uint64_t v90 = *(void *)(v0 + 352);
    uint64_t v91 = *(void *)(v0 + 280);
    uint64_t v92 = *(void *)(v0 + 288);
    sub_100033298(*(void *)(v0 + 368), v90);
    uint64_t v93 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
    if (v93(v90, 1, v91) == 1)
    {
      uint64_t v94 = *(void *)(v0 + 352);
    }
    else
    {
      uint64_t v95 = *(void *)(v0 + 344);
      uint64_t v96 = *(void *)(v0 + 280);
      uint64_t v97 = *(void *)(v0 + 248);
      uint64_t v98 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 288) + 32);
      v98(*(void *)(v0 + 320), *(void *)(v0 + 352), v96);
      sub_100033298(v97, v95);
      int v99 = v93(v95, 1, v96);
      uint64_t v100 = *(void *)(v0 + 344);
      if (v99 != 1)
      {
        v98(*(void *)(v0 + 312), *(void *)(v0 + 344), *(void *)(v0 + 280));
        if (static Date.> infix(_:_:)())
        {
          uint64_t v123 = *(void *)(v0 + 440);
          uint64_t v124 = *(void *)(v0 + 400);
          uint64_t v125 = *(void *)(v0 + 240);
          defaultLogger()();
          v47(v123, v125, v124);
          uint64_t v126 = Logger.logObject.getter();
          os_log_type_t v127 = static os_log_type_t.debug.getter();
          uint64_t v172 = v126;
          BOOL v128 = os_log_type_enabled(v126, v127);
          uint64_t v129 = *(void *)(v0 + 512);
          uint64_t v130 = *(void *)(v0 + 480);
          os_log_t log = *(os_log_t *)(v0 + 472);
          uint64_t v131 = *(void *)(v0 + 440);
          uint64_t v133 = *(void *)(v0 + 400);
          uint64_t v132 = *(void *)(v0 + 408);
          uint64_t v134 = *(void *)(v0 + 320);
          uint64_t v178 = *(void *)(v0 + 312);
          uint64_t v136 = *(void *)(v0 + 280);
          uint64_t v135 = *(void *)(v0 + 288);
          if (v128)
          {
            uint64_t v171 = *(void *)(v0 + 280);
            os_log_type_t type = v127;
            uint64_t v137 = (uint8_t *)swift_slowAlloc();
            uint64_t v185 = swift_slowAlloc();
            *(_DWORD *)uint64_t v137 = 136446210;
            sub_100524238();
            uint64_t v138 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 200) = sub_100110D58(v138, v139, &v185);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v131, v133);
            _os_log_impl((void *)&_mh_execute_header, v172, type, "Not refreshing cache for %{public}s because cached response was stored recently", v137, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, os_log_t))(v130 + 8))(v129, log);
            unint64_t v140 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
            v140(v178, v171);
            v140(v134, v171);
          }
          else
          {

            (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v131, v133);
            (*(void (**)(uint64_t, os_log_t))(v130 + 8))(v129, log);
            v165 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
            v165(v178, v136);
            v165(v134, v136);
          }
LABEL_62:
          uint64_t v167 = *(void *)(v0 + 368);
          sub_10000C6CC(*(void *)(v0 + 360), &qword_1007239B0);
          sub_10000C6CC(v167, &qword_1007239B0);
          goto LABEL_63;
        }
        uint64_t v159 = *(void *)(v0 + 320);
        uint64_t v160 = *(void *)(v0 + 280);
        uint64_t v161 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 288) + 8);
        v161(*(void *)(v0 + 312), v160);
        v161(v159, v160);
LABEL_40:
        uint64_t v101 = *(void *)(v0 + 336);
        uint64_t v102 = *(void *)(v0 + 280);
        sub_100033298(*(void *)(v0 + 360), v101);
        if (v93(v101, 1, v102) == 1)
        {
          uint64_t v103 = *(void *)(v0 + 336);
LABEL_44:
          sub_10000C6CC(v103, &qword_1007239B0);
LABEL_45:
          uint64_t v39 = (void *)swift_task_alloc();
          *(void *)(v0 + 552) = v39;
          *uint64_t v39 = v0;
          uint64_t v40 = sub_10052413C;
LABEL_9:
          v39[1] = v40;
          uint64_t v41 = *(void *)(v0 + 272);
          return sub_100043BD0(v41);
        }
        uint64_t v104 = *(void *)(v0 + 328);
        uint64_t v105 = *(void *)(v0 + 280);
        uint64_t v106 = *(void *)(v0 + 256);
        uint64_t v107 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 288) + 32);
        v107(*(void *)(v0 + 304), *(void *)(v0 + 336), v105);
        sub_100033298(v106, v104);
        int v108 = v93(v104, 1, v105);
        uint64_t v109 = *(void *)(v0 + 328);
        if (v108 == 1)
        {
          (*(void (**)(void, void))(*(void *)(v0 + 288) + 8))(*(void *)(v0 + 304), *(void *)(v0 + 280));
          uint64_t v103 = v109;
          goto LABEL_44;
        }
        v107(*(void *)(v0 + 296), *(void *)(v0 + 328), *(void *)(v0 + 280));
        if ((static Date.> infix(_:_:)() & 1) == 0)
        {
          uint64_t v162 = *(void *)(v0 + 304);
          uint64_t v163 = *(void *)(v0 + 280);
          uint64_t v164 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 288) + 8);
          v164(*(void *)(v0 + 296), v163);
          v164(v162, v163);
          goto LABEL_45;
        }
        uint64_t v141 = *(void *)(v0 + 432);
        uint64_t v142 = *(void *)(v0 + 400);
        uint64_t v143 = *(void *)(v0 + 240);
        defaultLogger()();
        v47(v141, v143, v142);
        uint64_t v144 = Logger.logObject.getter();
        os_log_type_t v145 = static os_log_type_t.debug.getter();
        v173 = v144;
        BOOL v146 = os_log_type_enabled(v144, v145);
        uint64_t v147 = *(void *)(v0 + 504);
        uint64_t v148 = *(void *)(v0 + 480);
        os_log_t loga = *(os_log_t *)(v0 + 472);
        uint64_t v149 = *(void *)(v0 + 432);
        uint64_t v151 = *(void *)(v0 + 400);
        uint64_t v150 = *(void *)(v0 + 408);
        uint64_t v152 = *(void *)(v0 + 304);
        uint64_t v182 = *(void *)(v0 + 296);
        uint64_t v153 = *(void *)(v0 + 280);
        uint64_t v154 = *(void *)(v0 + 288);
        if (v146)
        {
          uint64_t v170 = *(void *)(v0 + 280);
          uint64_t v155 = (uint8_t *)swift_slowAlloc();
          uint64_t v185 = swift_slowAlloc();
          *(_DWORD *)uint64_t v155 = 136446210;
          sub_100524238();
          uint64_t v156 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 208) = sub_100110D58(v156, v157, &v185);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v149, v151);
          _os_log_impl((void *)&_mh_execute_header, v173, v145, "Not refreshing cache for %{public}s because current response won't expire soon", v155, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, os_log_t))(v148 + 8))(v147, loga);
          unint64_t v158 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
          v158(v182, v170);
          v158(v152, v170);
        }
        else
        {

          (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v149, v151);
          (*(void (**)(uint64_t, os_log_t))(v148 + 8))(v147, loga);
          v166 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
          v166(v182, v153);
          v166(v152, v153);
        }
        goto LABEL_62;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 288) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 280));
      uint64_t v94 = v100;
    }
    sub_10000C6CC(v94, &qword_1007239B0);
    goto LABEL_40;
  }
  uint64_t v56 = *(void *)(v0 + 400);
  uint64_t v57 = *(void *)(v0 + 240);
  if ((*(unsigned char *)(v0 + 568) & 1) == 0)
  {
    uint64_t v110 = *(void *)(v0 + 416);
    defaultLogger()();
    v47(v110, v57, v56);
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.debug.getter();
    BOOL v113 = os_log_type_enabled(v111, v112);
    uint64_t v115 = *(void *)(v0 + 480);
    uint64_t v114 = *(void *)(v0 + 488);
    uint64_t v116 = *(void *)(v0 + 472);
    uint64_t v118 = *(void *)(v0 + 408);
    uint64_t v117 = *(void *)(v0 + 416);
    uint64_t v119 = *(void *)(v0 + 400);
    if (v113)
    {
      uint64_t v177 = *(void *)(v0 + 488);
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      uint64_t v185 = swift_slowAlloc();
      *(_DWORD *)uint64_t v120 = 136446210;
      sub_100524238();
      uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 192) = sub_100110D58(v121, v122, &v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v117, v119);
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Refreshing cache for %{public}s because no response exists in cache", v120, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v177, v116);
    }
    else
    {
      (*(void (**)(void, void))(v118 + 8))(*(void *)(v0 + 416), *(void *)(v0 + 400));

      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v116);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 560) = v39;
    *uint64_t v39 = v0;
    uint64_t v40 = sub_100529EB8;
    goto LABEL_9;
  }
  uint64_t v58 = *(void *)(v0 + 424);
  defaultLogger()();
  v47(v58, v57, v56);
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  BOOL v61 = os_log_type_enabled(v59, v60);
  uint64_t v62 = *(void *)(v0 + 496);
  uint64_t v64 = *(void *)(v0 + 472);
  uint64_t v63 = *(void *)(v0 + 480);
  uint64_t v65 = *(void *)(v0 + 424);
  uint64_t v67 = *(void *)(v0 + 400);
  uint64_t v66 = *(void *)(v0 + 408);
  if (v61)
  {
    uint64_t v181 = *(void *)(v0 + 472);
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    uint64_t v185 = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 136446210;
    sub_100524238();
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 216) = sub_100110D58(v69, v70, &v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Not refreshing cache for %{public}s because nothing is currently in the cache", v68, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v181);
  }
  else
  {
    (*(void (**)(void, void))(v66 + 8))(*(void *)(v0 + 424), *(void *)(v0 + 400));

    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
  }
LABEL_63:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v168 = *(uint64_t (**)(void))(v0 + 8);
  return v168();
}

uint64_t sub_10052413C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100529EC0, 0, 0);
}

unint64_t sub_100524238()
{
  unint64_t result = qword_100723C08;
  if (!qword_100723C08)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100723C08);
  }
  return result;
}

uint64_t sub_100524290(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 296) = v15;
  *(void *)(v8 + 304) = v16;
  *(void *)(v8 + 280) = a7;
  *(void *)(v8 + 288) = a8;
  *(void *)(v8 + 264) = a5;
  *(void *)(v8 + 272) = a6;
  *(void *)(v8 + 248) = a3;
  *(void *)(v8 + 256) = a4;
  *(unsigned char *)(v8 + 600) = a2;
  *(void *)(v8 + 240) = a1;
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v8 + 312) = v9;
  *(void *)(v8 + 320) = *(void *)(v9 - 8);
  *(void *)(v8 + 328) = swift_task_alloc();
  *(void *)(v8 + 336) = swift_task_alloc();
  *(void *)(v8 + 344) = swift_task_alloc();
  *(void *)(v8 + 352) = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  *(void *)(v8 + 360) = swift_task_alloc();
  *(void *)(v8 + 368) = swift_task_alloc();
  *(void *)(v8 + 376) = swift_task_alloc();
  *(void *)(v8 + 384) = swift_task_alloc();
  *(void *)(v8 + 392) = swift_task_alloc();
  *(void *)(v8 + 400) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URLRequest();
  *(void *)(v8 + 408) = v10;
  *(void *)(v8 + 416) = *(void *)(v10 - 8);
  *(void *)(v8 + 424) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URL();
  *(void *)(v8 + 432) = v11;
  *(void *)(v8 + 440) = *(void *)(v11 - 8);
  *(void *)(v8 + 448) = swift_task_alloc();
  *(void *)(v8 + 456) = swift_task_alloc();
  *(void *)(v8 + 464) = swift_task_alloc();
  *(void *)(v8 + 472) = swift_task_alloc();
  *(void *)(v8 + 480) = swift_task_alloc();
  *(void *)(v8 + 488) = swift_task_alloc();
  *(void *)(v8 + 496) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  *(void *)(v8 + 504) = v12;
  *(void *)(v8 + 512) = *(void *)(v12 - 8);
  *(void *)(v8 + 520) = swift_task_alloc();
  *(void *)(v8 + 528) = swift_task_alloc();
  *(void *)(v8 + 536) = swift_task_alloc();
  *(void *)(v8 + 544) = swift_task_alloc();
  *(void *)(v8 + 552) = swift_task_alloc();
  *(void *)(v8 + 560) = swift_task_alloc();
  return _swift_task_switch(sub_1005245A4, 0, 0);
}

uint64_t sub_1005245A4()
{
  uint64_t v190 = v0;
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  v3._uint64_t countAndFlagsBits = 0xD000000000000019;
  v3._object = (void *)0x8000000100653810;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 496);
    uint64_t v7 = *(void *)(v0 + 432);
    uint64_t v8 = *(void *)(v0 + 440);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v187 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v9, v187);
    uint64_t v11 = *(void *)(v0 + 560);
    uint64_t v13 = *(void *)(v0 + 504);
    uint64_t v12 = *(void *)(v0 + 512);
    uint64_t v14 = *(void *)(v0 + 496);
    uint64_t v16 = *(void *)(v0 + 432);
    uint64_t v15 = *(void *)(v0 + 440);
    if (v10)
    {
      uint64_t v183 = *(void *)(v0 + 560);
      logb = v9;
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v189 = swift_slowAlloc();
      *(_DWORD *)id v17 = 136446210;
      sub_100524238();
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 232) = sub_100110D58(v18, v19, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, logb, v187, "Refreshing cache for %{public}s due to user defaults setting", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v183, v13);
    }
    else
    {
      (*(void (**)(void, void))(v15 + 8))(*(void *)(v0 + 496), *(void *)(v0 + 432));

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 568) = v39;
    *uint64_t v39 = v0;
    uint64_t v40 = sub_100529EAC;
    goto LABEL_9;
  }
  id v20 = [v1 standardUserDefaults];
  v21._object = (void *)0x8000000100653830;
  v21._uint64_t countAndFlagsBits = 0xD000000000000015;
  Swift::Bool v22 = NSUserDefaults.internalBool(forKey:)(v21);

  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 488);
    uint64_t v24 = *(void *)(v0 + 432);
    uint64_t v25 = *(void *)(v0 + 440);
    uint64_t v26 = *(void *)(v0 + 240);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v26, v24);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void *)(v0 + 552);
    uint64_t v32 = *(void *)(v0 + 504);
    uint64_t v31 = *(void *)(v0 + 512);
    uint64_t v33 = *(void *)(v0 + 488);
    uint64_t v35 = *(void *)(v0 + 432);
    uint64_t v34 = *(void *)(v0 + 440);
    if (v29)
    {
      uint64_t v184 = *(void *)(v0 + 504);
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v189 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446210;
      sub_100524238();
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 224) = sub_100110D58(v37, v38, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not refreshing cache for %{public}s because caching is disabled in user defaults", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v184);
    }
    else
    {
      (*(void (**)(void, void))(v34 + 8))(*(void *)(v0 + 488), *(void *)(v0 + 432));

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    goto LABEL_63;
  }
  uint64_t v48 = *(void *)(v0 + 416);
  uint64_t v47 = *(void *)(v0 + 424);
  uint64_t v49 = *(void *)(v0 + 408);
  id v50 = *(void **)(v0 + 264);
  id v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 440) + 16);
  v51(*(void *)(v0 + 480), *(void *)(v0 + 240), *(void *)(v0 + 432));
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  id v53 = [v50 cachedResponseForRequest:isa];
  *(void *)(v0 + 576) = v53;

  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  if (v53)
  {
    unint64_t v54 = (_OWORD *)(v0 + 96);
    id v188 = v53;
    id v55 = [v188 userInfo];
    if (v55)
    {
      uint64_t v56 = v55;
      uint64_t v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 160) = 0x74416465726F7473;
      *(void *)(v0 + 168) = 0xE800000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v57 + 16) && (unint64_t v58 = sub_100590504(v0 + 56), (v59 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v57 + 56) + 32 * v58, v0 + 96);
      }
      else
      {
        *unint64_t v54 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1001D90FC(v0 + 56);
      if (*(void *)(v0 + 120))
      {
        uint64_t v75 = *(void *)(v0 + 400);
        uint64_t v76 = *(void *)(v0 + 312);
        uint64_t v77 = *(void *)(v0 + 320);
        int v78 = swift_dynamicCast();
        uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
        v79(v75, v78 ^ 1u, 1, v76);
        goto LABEL_26;
      }
    }
    else
    {
      *unint64_t v54 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    uint64_t v80 = *(void *)(v0 + 400);
    uint64_t v81 = *(void *)(v0 + 312);
    uint64_t v82 = *(void *)(v0 + 320);
    sub_10000C6CC(v0 + 96, (uint64_t *)&unk_100727200);
    uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
    v79(v80, 1, 1, v81);
LABEL_26:
    unint64_t v83 = (_OWORD *)(v0 + 128);
    id v84 = [v188 userInfo];
    if (v84)
    {
      uint64_t v85 = v84;
      uint64_t v86 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 176) = 0x4173657269707865;
      *(void *)(v0 + 184) = 0xE900000000000074;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v86 + 16) && (unint64_t v87 = sub_100590504(v0 + 16), (v88 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v86 + 56) + 32 * v87, v0 + 128);
      }
      else
      {
        *unint64_t v83 = 0u;
        *(_OWORD *)(v0 + 144) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1001D90FC(v0 + 16);
      if (*(void *)(v0 + 152))
      {
        uint64_t v89 = *(void *)(v0 + 392);
        uint64_t v90 = *(void *)(v0 + 312);
        uint64_t v91 = swift_dynamicCast() ^ 1;
        uint64_t v92 = v89;
        goto LABEL_35;
      }
    }
    else
    {
      *unint64_t v83 = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }
    uint64_t v93 = *(void *)(v0 + 392);
    uint64_t v90 = *(void *)(v0 + 312);
    sub_10000C6CC(v0 + 128, (uint64_t *)&unk_100727200);
    uint64_t v92 = v93;
    uint64_t v91 = 1;
LABEL_35:
    v79(v92, v91, 1, v90);
    uint64_t v94 = *(void *)(v0 + 384);
    uint64_t v95 = *(void *)(v0 + 312);
    uint64_t v96 = *(void *)(v0 + 320);
    sub_100033298(*(void *)(v0 + 400), v94);
    uint64_t v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
    if (v97(v94, 1, v95) == 1)
    {
      uint64_t v98 = *(void *)(v0 + 384);
    }
    else
    {
      uint64_t v99 = *(void *)(v0 + 376);
      uint64_t v100 = *(void *)(v0 + 312);
      uint64_t v101 = *(void *)(v0 + 248);
      uint64_t v102 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 320) + 32);
      v102(*(void *)(v0 + 352), *(void *)(v0 + 384), v100);
      sub_100033298(v101, v99);
      int v103 = v97(v99, 1, v100);
      uint64_t v104 = *(void *)(v0 + 376);
      if (v103 != 1)
      {
        v102(*(void *)(v0 + 344), *(void *)(v0 + 376), *(void *)(v0 + 312));
        if (static Date.> infix(_:_:)())
        {
          uint64_t v127 = *(void *)(v0 + 472);
          uint64_t v128 = *(void *)(v0 + 432);
          uint64_t v129 = *(void *)(v0 + 240);
          defaultLogger()();
          v51(v127, v129, v128);
          uint64_t v130 = Logger.logObject.getter();
          os_log_type_t v131 = static os_log_type_t.debug.getter();
          v176 = v130;
          BOOL v132 = os_log_type_enabled(v130, v131);
          uint64_t v133 = *(void *)(v0 + 544);
          uint64_t v134 = *(void *)(v0 + 512);
          os_log_t log = *(os_log_t *)(v0 + 504);
          uint64_t v135 = *(void *)(v0 + 472);
          uint64_t v137 = *(void *)(v0 + 432);
          uint64_t v136 = *(void *)(v0 + 440);
          uint64_t v138 = *(void *)(v0 + 352);
          uint64_t v182 = *(void *)(v0 + 344);
          uint64_t v140 = *(void *)(v0 + 312);
          uint64_t v139 = *(void *)(v0 + 320);
          if (v132)
          {
            uint64_t v175 = *(void *)(v0 + 312);
            os_log_type_t type = v131;
            uint64_t v141 = (uint8_t *)swift_slowAlloc();
            uint64_t v189 = swift_slowAlloc();
            *(_DWORD *)uint64_t v141 = 136446210;
            sub_100524238();
            uint64_t v142 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 200) = sub_100110D58(v142, v143, &v189);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v135, v137);
            _os_log_impl((void *)&_mh_execute_header, v176, type, "Not refreshing cache for %{public}s because cached response was stored recently", v141, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, os_log_t))(v134 + 8))(v133, log);
            uint64_t v144 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
            v144(v182, v175);
            v144(v138, v175);
          }
          else
          {

            (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v135, v137);
            (*(void (**)(uint64_t, os_log_t))(v134 + 8))(v133, log);
            v169 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
            v169(v182, v140);
            v169(v138, v140);
          }
LABEL_62:
          uint64_t v171 = *(void *)(v0 + 400);
          sub_10000C6CC(*(void *)(v0 + 392), &qword_1007239B0);
          sub_10000C6CC(v171, &qword_1007239B0);
          goto LABEL_63;
        }
        uint64_t v163 = *(void *)(v0 + 352);
        uint64_t v164 = *(void *)(v0 + 312);
        v165 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 320) + 8);
        v165(*(void *)(v0 + 344), v164);
        v165(v163, v164);
LABEL_40:
        uint64_t v105 = *(void *)(v0 + 368);
        uint64_t v106 = *(void *)(v0 + 312);
        sub_100033298(*(void *)(v0 + 392), v105);
        if (v97(v105, 1, v106) == 1)
        {
          uint64_t v107 = *(void *)(v0 + 368);
LABEL_44:
          sub_10000C6CC(v107, &qword_1007239B0);
LABEL_45:
          uint64_t v39 = (void *)swift_task_alloc();
          *(void *)(v0 + 584) = v39;
          *uint64_t v39 = v0;
          uint64_t v40 = sub_1005259E0;
LABEL_9:
          v39[1] = v40;
          uint64_t v41 = *(void *)(v0 + 296);
          uint64_t v42 = *(void *)(v0 + 304);
          uint64_t v43 = *(void *)(v0 + 280);
          uint64_t v44 = *(void *)(v0 + 288);
          uint64_t v45 = *(void *)(v0 + 272);
          return sub_100152978(v45, v43, v44, v41, v42);
        }
        uint64_t v108 = *(void *)(v0 + 360);
        uint64_t v109 = *(void *)(v0 + 312);
        uint64_t v110 = *(void *)(v0 + 256);
        uint64_t v111 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 320) + 32);
        v111(*(void *)(v0 + 336), *(void *)(v0 + 368), v109);
        sub_100033298(v110, v108);
        int v112 = v97(v108, 1, v109);
        uint64_t v113 = *(void *)(v0 + 360);
        if (v112 == 1)
        {
          (*(void (**)(void, void))(*(void *)(v0 + 320) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 312));
          uint64_t v107 = v113;
          goto LABEL_44;
        }
        v111(*(void *)(v0 + 328), *(void *)(v0 + 360), *(void *)(v0 + 312));
        if ((static Date.> infix(_:_:)() & 1) == 0)
        {
          uint64_t v166 = *(void *)(v0 + 336);
          uint64_t v167 = *(void *)(v0 + 312);
          uint64_t v168 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 320) + 8);
          v168(*(void *)(v0 + 328), v167);
          v168(v166, v167);
          goto LABEL_45;
        }
        uint64_t v145 = *(void *)(v0 + 464);
        uint64_t v146 = *(void *)(v0 + 432);
        uint64_t v147 = *(void *)(v0 + 240);
        defaultLogger()();
        v51(v145, v147, v146);
        uint64_t v148 = Logger.logObject.getter();
        os_log_type_t v149 = static os_log_type_t.debug.getter();
        uint64_t v177 = v148;
        BOOL v150 = os_log_type_enabled(v148, v149);
        uint64_t v151 = *(void *)(v0 + 536);
        uint64_t v152 = *(void *)(v0 + 512);
        os_log_t loga = *(os_log_t *)(v0 + 504);
        uint64_t v153 = *(void *)(v0 + 464);
        uint64_t v155 = *(void *)(v0 + 432);
        uint64_t v154 = *(void *)(v0 + 440);
        uint64_t v156 = *(void *)(v0 + 336);
        uint64_t v186 = *(void *)(v0 + 328);
        uint64_t v157 = *(void *)(v0 + 312);
        uint64_t v158 = *(void *)(v0 + 320);
        if (v150)
        {
          uint64_t v174 = *(void *)(v0 + 312);
          uint64_t v159 = (uint8_t *)swift_slowAlloc();
          uint64_t v189 = swift_slowAlloc();
          *(_DWORD *)uint64_t v159 = 136446210;
          sub_100524238();
          uint64_t v160 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 208) = sub_100110D58(v160, v161, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v153, v155);
          _os_log_impl((void *)&_mh_execute_header, v177, v149, "Not refreshing cache for %{public}s because current response won't expire soon", v159, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, os_log_t))(v152 + 8))(v151, loga);
          uint64_t v162 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
          v162(v186, v174);
          v162(v156, v174);
        }
        else
        {

          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v153, v155);
          (*(void (**)(uint64_t, os_log_t))(v152 + 8))(v151, loga);
          uint64_t v170 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
          v170(v186, v157);
          v170(v156, v157);
        }
        goto LABEL_62;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 320) + 8))(*(void *)(v0 + 352), *(void *)(v0 + 312));
      uint64_t v98 = v104;
    }
    sub_10000C6CC(v98, &qword_1007239B0);
    goto LABEL_40;
  }
  uint64_t v60 = *(void *)(v0 + 432);
  uint64_t v61 = *(void *)(v0 + 240);
  if ((*(unsigned char *)(v0 + 600) & 1) == 0)
  {
    uint64_t v114 = *(void *)(v0 + 448);
    defaultLogger()();
    v51(v114, v61, v60);
    uint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.debug.getter();
    BOOL v117 = os_log_type_enabled(v115, v116);
    uint64_t v118 = *(void *)(v0 + 520);
    uint64_t v120 = *(void *)(v0 + 504);
    uint64_t v119 = *(void *)(v0 + 512);
    uint64_t v122 = *(void *)(v0 + 440);
    uint64_t v121 = *(void *)(v0 + 448);
    uint64_t v123 = *(void *)(v0 + 432);
    if (v117)
    {
      uint64_t v181 = *(void *)(v0 + 520);
      uint64_t v124 = (uint8_t *)swift_slowAlloc();
      uint64_t v189 = swift_slowAlloc();
      *(_DWORD *)uint64_t v124 = 136446210;
      sub_100524238();
      uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 192) = sub_100110D58(v125, v126, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v123);
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "Refreshing cache for %{public}s because no response exists in cache", v124, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v181, v120);
    }
    else
    {
      (*(void (**)(void, void))(v122 + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));

      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v118, v120);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v39;
    *uint64_t v39 = v0;
    uint64_t v40 = sub_100529EB0;
    goto LABEL_9;
  }
  uint64_t v62 = *(void *)(v0 + 456);
  defaultLogger()();
  v51(v62, v61, v60);
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.debug.getter();
  BOOL v65 = os_log_type_enabled(v63, v64);
  uint64_t v66 = *(void *)(v0 + 528);
  uint64_t v68 = *(void *)(v0 + 504);
  uint64_t v67 = *(void *)(v0 + 512);
  uint64_t v69 = *(void *)(v0 + 456);
  uint64_t v71 = *(void *)(v0 + 432);
  uint64_t v70 = *(void *)(v0 + 440);
  if (v65)
  {
    uint64_t v185 = *(void *)(v0 + 504);
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    uint64_t v189 = swift_slowAlloc();
    *(_DWORD *)uint64_t v72 = 136446210;
    sub_100524238();
    uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 216) = sub_100110D58(v73, v74, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Not refreshing cache for %{public}s because nothing is currently in the cache", v72, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v185);
  }
  else
  {
    (*(void (**)(void, void))(v70 + 8))(*(void *)(v0 + 456), *(void *)(v0 + 432));

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
  }
LABEL_63:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v172 = *(uint64_t (**)(void))(v0 + 8);
  return v172();
}

uint64_t sub_1005259E0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100529EBC, 0, 0);
}

uint64_t sub_100525ADC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 296) = v15;
  *(void *)(v8 + 304) = v16;
  *(void *)(v8 + 280) = a7;
  *(void *)(v8 + 288) = a8;
  *(void *)(v8 + 264) = a5;
  *(void *)(v8 + 272) = a6;
  *(void *)(v8 + 248) = a3;
  *(void *)(v8 + 256) = a4;
  *(unsigned char *)(v8 + 600) = a2;
  *(void *)(v8 + 240) = a1;
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v8 + 312) = v9;
  *(void *)(v8 + 320) = *(void *)(v9 - 8);
  *(void *)(v8 + 328) = swift_task_alloc();
  *(void *)(v8 + 336) = swift_task_alloc();
  *(void *)(v8 + 344) = swift_task_alloc();
  *(void *)(v8 + 352) = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  *(void *)(v8 + 360) = swift_task_alloc();
  *(void *)(v8 + 368) = swift_task_alloc();
  *(void *)(v8 + 376) = swift_task_alloc();
  *(void *)(v8 + 384) = swift_task_alloc();
  *(void *)(v8 + 392) = swift_task_alloc();
  *(void *)(v8 + 400) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URLRequest();
  *(void *)(v8 + 408) = v10;
  *(void *)(v8 + 416) = *(void *)(v10 - 8);
  *(void *)(v8 + 424) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URL();
  *(void *)(v8 + 432) = v11;
  *(void *)(v8 + 440) = *(void *)(v11 - 8);
  *(void *)(v8 + 448) = swift_task_alloc();
  *(void *)(v8 + 456) = swift_task_alloc();
  *(void *)(v8 + 464) = swift_task_alloc();
  *(void *)(v8 + 472) = swift_task_alloc();
  *(void *)(v8 + 480) = swift_task_alloc();
  *(void *)(v8 + 488) = swift_task_alloc();
  *(void *)(v8 + 496) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  *(void *)(v8 + 504) = v12;
  *(void *)(v8 + 512) = *(void *)(v12 - 8);
  *(void *)(v8 + 520) = swift_task_alloc();
  *(void *)(v8 + 528) = swift_task_alloc();
  *(void *)(v8 + 536) = swift_task_alloc();
  *(void *)(v8 + 544) = swift_task_alloc();
  *(void *)(v8 + 552) = swift_task_alloc();
  *(void *)(v8 + 560) = swift_task_alloc();
  return _swift_task_switch(sub_100525DF0, 0, 0);
}

uint64_t sub_100525DF0()
{
  uint64_t v190 = v0;
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  v3._uint64_t countAndFlagsBits = 0xD000000000000019;
  v3._object = (void *)0x8000000100653810;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 496);
    uint64_t v7 = *(void *)(v0 + 432);
    uint64_t v8 = *(void *)(v0 + 440);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v187 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v9, v187);
    uint64_t v11 = *(void *)(v0 + 560);
    uint64_t v13 = *(void *)(v0 + 504);
    uint64_t v12 = *(void *)(v0 + 512);
    uint64_t v14 = *(void *)(v0 + 496);
    uint64_t v16 = *(void *)(v0 + 432);
    uint64_t v15 = *(void *)(v0 + 440);
    if (v10)
    {
      uint64_t v183 = *(void *)(v0 + 560);
      logb = v9;
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v189 = swift_slowAlloc();
      *(_DWORD *)id v17 = 136446210;
      sub_100524238();
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 232) = sub_100110D58(v18, v19, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, logb, v187, "Refreshing cache for %{public}s due to user defaults setting", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v183, v13);
    }
    else
    {
      (*(void (**)(void, void))(v15 + 8))(*(void *)(v0 + 496), *(void *)(v0 + 432));

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 568) = v39;
    *uint64_t v39 = v0;
    uint64_t v40 = sub_10052722C;
    goto LABEL_9;
  }
  id v20 = [v1 standardUserDefaults];
  v21._object = (void *)0x8000000100653830;
  v21._uint64_t countAndFlagsBits = 0xD000000000000015;
  Swift::Bool v22 = NSUserDefaults.internalBool(forKey:)(v21);

  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 488);
    uint64_t v24 = *(void *)(v0 + 432);
    uint64_t v25 = *(void *)(v0 + 440);
    uint64_t v26 = *(void *)(v0 + 240);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v26, v24);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void *)(v0 + 552);
    uint64_t v32 = *(void *)(v0 + 504);
    uint64_t v31 = *(void *)(v0 + 512);
    uint64_t v33 = *(void *)(v0 + 488);
    uint64_t v35 = *(void *)(v0 + 432);
    uint64_t v34 = *(void *)(v0 + 440);
    if (v29)
    {
      uint64_t v184 = *(void *)(v0 + 504);
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v189 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446210;
      sub_100524238();
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 224) = sub_100110D58(v37, v38, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not refreshing cache for %{public}s because caching is disabled in user defaults", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v184);
    }
    else
    {
      (*(void (**)(void, void))(v34 + 8))(*(void *)(v0 + 488), *(void *)(v0 + 432));

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    goto LABEL_63;
  }
  uint64_t v48 = *(void *)(v0 + 416);
  uint64_t v47 = *(void *)(v0 + 424);
  uint64_t v49 = *(void *)(v0 + 408);
  id v50 = *(void **)(v0 + 264);
  id v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 440) + 16);
  v51(*(void *)(v0 + 480), *(void *)(v0 + 240), *(void *)(v0 + 432));
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  id v53 = [v50 cachedResponseForRequest:isa];
  *(void *)(v0 + 576) = v53;

  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  if (v53)
  {
    unint64_t v54 = (_OWORD *)(v0 + 96);
    id v188 = v53;
    id v55 = [v188 userInfo];
    if (v55)
    {
      uint64_t v56 = v55;
      uint64_t v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 160) = 0x74416465726F7473;
      *(void *)(v0 + 168) = 0xE800000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v57 + 16) && (unint64_t v58 = sub_100590504(v0 + 56), (v59 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v57 + 56) + 32 * v58, v0 + 96);
      }
      else
      {
        *unint64_t v54 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1001D90FC(v0 + 56);
      if (*(void *)(v0 + 120))
      {
        uint64_t v75 = *(void *)(v0 + 400);
        uint64_t v76 = *(void *)(v0 + 312);
        uint64_t v77 = *(void *)(v0 + 320);
        int v78 = swift_dynamicCast();
        uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
        v79(v75, v78 ^ 1u, 1, v76);
        goto LABEL_26;
      }
    }
    else
    {
      *unint64_t v54 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    uint64_t v80 = *(void *)(v0 + 400);
    uint64_t v81 = *(void *)(v0 + 312);
    uint64_t v82 = *(void *)(v0 + 320);
    sub_10000C6CC(v0 + 96, (uint64_t *)&unk_100727200);
    uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
    v79(v80, 1, 1, v81);
LABEL_26:
    unint64_t v83 = (_OWORD *)(v0 + 128);
    id v84 = [v188 userInfo];
    if (v84)
    {
      uint64_t v85 = v84;
      uint64_t v86 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 176) = 0x4173657269707865;
      *(void *)(v0 + 184) = 0xE900000000000074;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v86 + 16) && (unint64_t v87 = sub_100590504(v0 + 16), (v88 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v86 + 56) + 32 * v87, v0 + 128);
      }
      else
      {
        *unint64_t v83 = 0u;
        *(_OWORD *)(v0 + 144) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1001D90FC(v0 + 16);
      if (*(void *)(v0 + 152))
      {
        uint64_t v89 = *(void *)(v0 + 392);
        uint64_t v90 = *(void *)(v0 + 312);
        uint64_t v91 = swift_dynamicCast() ^ 1;
        uint64_t v92 = v89;
        goto LABEL_35;
      }
    }
    else
    {
      *unint64_t v83 = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }
    uint64_t v93 = *(void *)(v0 + 392);
    uint64_t v90 = *(void *)(v0 + 312);
    sub_10000C6CC(v0 + 128, (uint64_t *)&unk_100727200);
    uint64_t v92 = v93;
    uint64_t v91 = 1;
LABEL_35:
    v79(v92, v91, 1, v90);
    uint64_t v94 = *(void *)(v0 + 384);
    uint64_t v95 = *(void *)(v0 + 312);
    uint64_t v96 = *(void *)(v0 + 320);
    sub_100033298(*(void *)(v0 + 400), v94);
    uint64_t v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
    if (v97(v94, 1, v95) == 1)
    {
      uint64_t v98 = *(void *)(v0 + 384);
    }
    else
    {
      uint64_t v99 = *(void *)(v0 + 376);
      uint64_t v100 = *(void *)(v0 + 312);
      uint64_t v101 = *(void *)(v0 + 248);
      uint64_t v102 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 320) + 32);
      v102(*(void *)(v0 + 352), *(void *)(v0 + 384), v100);
      sub_100033298(v101, v99);
      int v103 = v97(v99, 1, v100);
      uint64_t v104 = *(void *)(v0 + 376);
      if (v103 != 1)
      {
        v102(*(void *)(v0 + 344), *(void *)(v0 + 376), *(void *)(v0 + 312));
        if (static Date.> infix(_:_:)())
        {
          uint64_t v127 = *(void *)(v0 + 472);
          uint64_t v128 = *(void *)(v0 + 432);
          uint64_t v129 = *(void *)(v0 + 240);
          defaultLogger()();
          v51(v127, v129, v128);
          uint64_t v130 = Logger.logObject.getter();
          os_log_type_t v131 = static os_log_type_t.debug.getter();
          v176 = v130;
          BOOL v132 = os_log_type_enabled(v130, v131);
          uint64_t v133 = *(void *)(v0 + 544);
          uint64_t v134 = *(void *)(v0 + 512);
          os_log_t log = *(os_log_t *)(v0 + 504);
          uint64_t v135 = *(void *)(v0 + 472);
          uint64_t v137 = *(void *)(v0 + 432);
          uint64_t v136 = *(void *)(v0 + 440);
          uint64_t v138 = *(void *)(v0 + 352);
          uint64_t v182 = *(void *)(v0 + 344);
          uint64_t v140 = *(void *)(v0 + 312);
          uint64_t v139 = *(void *)(v0 + 320);
          if (v132)
          {
            uint64_t v175 = *(void *)(v0 + 312);
            os_log_type_t type = v131;
            uint64_t v141 = (uint8_t *)swift_slowAlloc();
            uint64_t v189 = swift_slowAlloc();
            *(_DWORD *)uint64_t v141 = 136446210;
            sub_100524238();
            uint64_t v142 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 200) = sub_100110D58(v142, v143, &v189);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v135, v137);
            _os_log_impl((void *)&_mh_execute_header, v176, type, "Not refreshing cache for %{public}s because cached response was stored recently", v141, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, os_log_t))(v134 + 8))(v133, log);
            uint64_t v144 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
            v144(v182, v175);
            v144(v138, v175);
          }
          else
          {

            (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v135, v137);
            (*(void (**)(uint64_t, os_log_t))(v134 + 8))(v133, log);
            v169 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
            v169(v182, v140);
            v169(v138, v140);
          }
LABEL_62:
          uint64_t v171 = *(void *)(v0 + 400);
          sub_10000C6CC(*(void *)(v0 + 392), &qword_1007239B0);
          sub_10000C6CC(v171, &qword_1007239B0);
          goto LABEL_63;
        }
        uint64_t v163 = *(void *)(v0 + 352);
        uint64_t v164 = *(void *)(v0 + 312);
        v165 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 320) + 8);
        v165(*(void *)(v0 + 344), v164);
        v165(v163, v164);
LABEL_40:
        uint64_t v105 = *(void *)(v0 + 368);
        uint64_t v106 = *(void *)(v0 + 312);
        sub_100033298(*(void *)(v0 + 392), v105);
        if (v97(v105, 1, v106) == 1)
        {
          uint64_t v107 = *(void *)(v0 + 368);
LABEL_44:
          sub_10000C6CC(v107, &qword_1007239B0);
LABEL_45:
          uint64_t v39 = (void *)swift_task_alloc();
          *(void *)(v0 + 584) = v39;
          *uint64_t v39 = v0;
          uint64_t v40 = sub_100527618;
LABEL_9:
          v39[1] = v40;
          uint64_t v41 = *(void *)(v0 + 296);
          uint64_t v42 = *(void *)(v0 + 304);
          uint64_t v43 = *(void *)(v0 + 280);
          uint64_t v44 = *(void *)(v0 + 288);
          uint64_t v45 = *(void *)(v0 + 272);
          return sub_100155504(v45, v43, v44, v41, v42);
        }
        uint64_t v108 = *(void *)(v0 + 360);
        uint64_t v109 = *(void *)(v0 + 312);
        uint64_t v110 = *(void *)(v0 + 256);
        uint64_t v111 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 320) + 32);
        v111(*(void *)(v0 + 336), *(void *)(v0 + 368), v109);
        sub_100033298(v110, v108);
        int v112 = v97(v108, 1, v109);
        uint64_t v113 = *(void *)(v0 + 360);
        if (v112 == 1)
        {
          (*(void (**)(void, void))(*(void *)(v0 + 320) + 8))(*(void *)(v0 + 336), *(void *)(v0 + 312));
          uint64_t v107 = v113;
          goto LABEL_44;
        }
        v111(*(void *)(v0 + 328), *(void *)(v0 + 360), *(void *)(v0 + 312));
        if ((static Date.> infix(_:_:)() & 1) == 0)
        {
          uint64_t v166 = *(void *)(v0 + 336);
          uint64_t v167 = *(void *)(v0 + 312);
          uint64_t v168 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 320) + 8);
          v168(*(void *)(v0 + 328), v167);
          v168(v166, v167);
          goto LABEL_45;
        }
        uint64_t v145 = *(void *)(v0 + 464);
        uint64_t v146 = *(void *)(v0 + 432);
        uint64_t v147 = *(void *)(v0 + 240);
        defaultLogger()();
        v51(v145, v147, v146);
        uint64_t v148 = Logger.logObject.getter();
        os_log_type_t v149 = static os_log_type_t.debug.getter();
        uint64_t v177 = v148;
        BOOL v150 = os_log_type_enabled(v148, v149);
        uint64_t v151 = *(void *)(v0 + 536);
        uint64_t v152 = *(void *)(v0 + 512);
        os_log_t loga = *(os_log_t *)(v0 + 504);
        uint64_t v153 = *(void *)(v0 + 464);
        uint64_t v155 = *(void *)(v0 + 432);
        uint64_t v154 = *(void *)(v0 + 440);
        uint64_t v156 = *(void *)(v0 + 336);
        uint64_t v186 = *(void *)(v0 + 328);
        uint64_t v157 = *(void *)(v0 + 312);
        uint64_t v158 = *(void *)(v0 + 320);
        if (v150)
        {
          uint64_t v174 = *(void *)(v0 + 312);
          uint64_t v159 = (uint8_t *)swift_slowAlloc();
          uint64_t v189 = swift_slowAlloc();
          *(_DWORD *)uint64_t v159 = 136446210;
          sub_100524238();
          uint64_t v160 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 208) = sub_100110D58(v160, v161, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v153, v155);
          _os_log_impl((void *)&_mh_execute_header, v177, v149, "Not refreshing cache for %{public}s because current response won't expire soon", v159, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, os_log_t))(v152 + 8))(v151, loga);
          uint64_t v162 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
          v162(v186, v174);
          v162(v156, v174);
        }
        else
        {

          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v153, v155);
          (*(void (**)(uint64_t, os_log_t))(v152 + 8))(v151, loga);
          uint64_t v170 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
          v170(v186, v157);
          v170(v156, v157);
        }
        goto LABEL_62;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 320) + 8))(*(void *)(v0 + 352), *(void *)(v0 + 312));
      uint64_t v98 = v104;
    }
    sub_10000C6CC(v98, &qword_1007239B0);
    goto LABEL_40;
  }
  uint64_t v60 = *(void *)(v0 + 432);
  uint64_t v61 = *(void *)(v0 + 240);
  if ((*(unsigned char *)(v0 + 600) & 1) == 0)
  {
    uint64_t v114 = *(void *)(v0 + 448);
    defaultLogger()();
    v51(v114, v61, v60);
    uint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.debug.getter();
    BOOL v117 = os_log_type_enabled(v115, v116);
    uint64_t v118 = *(void *)(v0 + 520);
    uint64_t v120 = *(void *)(v0 + 504);
    uint64_t v119 = *(void *)(v0 + 512);
    uint64_t v122 = *(void *)(v0 + 440);
    uint64_t v121 = *(void *)(v0 + 448);
    uint64_t v123 = *(void *)(v0 + 432);
    if (v117)
    {
      uint64_t v181 = *(void *)(v0 + 520);
      uint64_t v124 = (uint8_t *)swift_slowAlloc();
      uint64_t v189 = swift_slowAlloc();
      *(_DWORD *)uint64_t v124 = 136446210;
      sub_100524238();
      uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 192) = sub_100110D58(v125, v126, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v123);
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "Refreshing cache for %{public}s because no response exists in cache", v124, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v181, v120);
    }
    else
    {
      (*(void (**)(void, void))(v122 + 8))(*(void *)(v0 + 448), *(void *)(v0 + 432));

      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v118, v120);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v39;
    *uint64_t v39 = v0;
    uint64_t v40 = sub_1005278EC;
    goto LABEL_9;
  }
  uint64_t v62 = *(void *)(v0 + 456);
  defaultLogger()();
  v51(v62, v61, v60);
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.debug.getter();
  BOOL v65 = os_log_type_enabled(v63, v64);
  uint64_t v66 = *(void *)(v0 + 528);
  uint64_t v68 = *(void *)(v0 + 504);
  uint64_t v67 = *(void *)(v0 + 512);
  uint64_t v69 = *(void *)(v0 + 456);
  uint64_t v71 = *(void *)(v0 + 432);
  uint64_t v70 = *(void *)(v0 + 440);
  if (v65)
  {
    uint64_t v185 = *(void *)(v0 + 504);
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    uint64_t v189 = swift_slowAlloc();
    *(_DWORD *)uint64_t v72 = 136446210;
    sub_100524238();
    uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 216) = sub_100110D58(v73, v74, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Not refreshing cache for %{public}s because nothing is currently in the cache", v72, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v185);
  }
  else
  {
    (*(void (**)(void, void))(v70 + 8))(*(void *)(v0 + 456), *(void *)(v0 + 432));

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
  }
LABEL_63:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v172 = *(uint64_t (**)(void))(v0 + 8);
  return v172();
}

uint64_t sub_10052722C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100527618()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100527714, 0, 0);
}

uint64_t sub_100527714()
{
  uint64_t v1 = (void *)v0[72];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[50];

  sub_10000C6CC(v2, &qword_1007239B0);
  sub_10000C6CC(v3, &qword_1007239B0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1005278EC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100527CD8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 264) = a5;
  *(void *)(v6 + 272) = a6;
  *(void *)(v6 + 248) = a3;
  *(void *)(v6 + 256) = a4;
  *(unsigned char *)(v6 + 568) = a2;
  *(void *)(v6 + 240) = a1;
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v6 + 280) = v7;
  *(void *)(v6 + 288) = *(void *)(v7 - 8);
  *(void *)(v6 + 296) = swift_task_alloc();
  *(void *)(v6 + 304) = swift_task_alloc();
  *(void *)(v6 + 312) = swift_task_alloc();
  *(void *)(v6 + 320) = swift_task_alloc();
  sub_100007764(&qword_1007239B0);
  *(void *)(v6 + 328) = swift_task_alloc();
  *(void *)(v6 + 336) = swift_task_alloc();
  *(void *)(v6 + 344) = swift_task_alloc();
  *(void *)(v6 + 352) = swift_task_alloc();
  *(void *)(v6 + 360) = swift_task_alloc();
  *(void *)(v6 + 368) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URLRequest();
  *(void *)(v6 + 376) = v8;
  *(void *)(v6 + 384) = *(void *)(v8 - 8);
  *(void *)(v6 + 392) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  *(void *)(v6 + 400) = v9;
  *(void *)(v6 + 408) = *(void *)(v9 - 8);
  *(void *)(v6 + 416) = swift_task_alloc();
  *(void *)(v6 + 424) = swift_task_alloc();
  *(void *)(v6 + 432) = swift_task_alloc();
  *(void *)(v6 + 440) = swift_task_alloc();
  *(void *)(v6 + 448) = swift_task_alloc();
  *(void *)(v6 + 456) = swift_task_alloc();
  *(void *)(v6 + 464) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v6 + 472) = v10;
  *(void *)(v6 + 480) = *(void *)(v10 - 8);
  *(void *)(v6 + 488) = swift_task_alloc();
  *(void *)(v6 + 496) = swift_task_alloc();
  *(void *)(v6 + 504) = swift_task_alloc();
  *(void *)(v6 + 512) = swift_task_alloc();
  *(void *)(v6 + 520) = swift_task_alloc();
  *(void *)(v6 + 528) = swift_task_alloc();
  return _swift_task_switch(sub_100527FDC, 0, 0);
}

uint64_t sub_100527FDC()
{
  uint64_t v186 = v0;
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  v3._uint64_t countAndFlagsBits = 0xD000000000000019;
  v3._object = (void *)0x8000000100653810;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 464);
    uint64_t v7 = *(void *)(v0 + 400);
    uint64_t v8 = *(void *)(v0 + 408);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v183 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v9, v183);
    uint64_t v11 = *(void *)(v0 + 528);
    uint64_t v13 = *(void *)(v0 + 472);
    uint64_t v12 = *(void *)(v0 + 480);
    uint64_t v14 = *(void *)(v0 + 464);
    uint64_t v16 = *(void *)(v0 + 400);
    uint64_t v15 = *(void *)(v0 + 408);
    if (v10)
    {
      uint64_t v179 = *(void *)(v0 + 528);
      logb = v9;
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v185 = swift_slowAlloc();
      *(_DWORD *)id v17 = 136446210;
      sub_100524238();
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 232) = sub_100110D58(v18, v19, &v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, logb, v183, "Refreshing cache for %{public}s due to user defaults setting", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v179, v13);
    }
    else
    {
      (*(void (**)(void, void))(v15 + 8))(*(void *)(v0 + 464), *(void *)(v0 + 400));

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v39;
    *uint64_t v39 = v0;
    uint64_t v40 = sub_100529408;
    goto LABEL_9;
  }
  id v20 = [v1 standardUserDefaults];
  v21._object = (void *)0x8000000100653830;
  v21._uint64_t countAndFlagsBits = 0xD000000000000015;
  Swift::Bool v22 = NSUserDefaults.internalBool(forKey:)(v21);

  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 456);
    uint64_t v24 = *(void *)(v0 + 400);
    uint64_t v25 = *(void *)(v0 + 408);
    uint64_t v26 = *(void *)(v0 + 240);
    defaultLogger()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v26, v24);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void *)(v0 + 520);
    uint64_t v32 = *(void *)(v0 + 472);
    uint64_t v31 = *(void *)(v0 + 480);
    uint64_t v33 = *(void *)(v0 + 456);
    uint64_t v35 = *(void *)(v0 + 400);
    uint64_t v34 = *(void *)(v0 + 408);
    if (v29)
    {
      uint64_t v180 = *(void *)(v0 + 472);
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v185 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446210;
      sub_100524238();
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 224) = sub_100110D58(v37, v38, &v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not refreshing cache for %{public}s because caching is disabled in user defaults", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v180);
    }
    else
    {
      (*(void (**)(void, void))(v34 + 8))(*(void *)(v0 + 456), *(void *)(v0 + 400));

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    goto LABEL_63;
  }
  uint64_t v44 = *(void *)(v0 + 384);
  uint64_t v43 = *(void *)(v0 + 392);
  uint64_t v45 = *(void *)(v0 + 376);
  uint64_t v46 = *(void **)(v0 + 264);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 408) + 16);
  v47(*(void *)(v0 + 448), *(void *)(v0 + 240), *(void *)(v0 + 400));
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  id v49 = [v46 cachedResponseForRequest:isa];
  *(void *)(v0 + 544) = v49;

  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
  if (v49)
  {
    id v50 = (_OWORD *)(v0 + 96);
    id v184 = v49;
    id v51 = [v184 userInfo];
    if (v51)
    {
      id v52 = v51;
      uint64_t v53 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 160) = 0x74416465726F7473;
      *(void *)(v0 + 168) = 0xE800000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v53 + 16) && (unint64_t v54 = sub_100590504(v0 + 56), (v55 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v53 + 56) + 32 * v54, v0 + 96);
      }
      else
      {
        *id v50 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1001D90FC(v0 + 56);
      if (*(void *)(v0 + 120))
      {
        uint64_t v71 = *(void *)(v0 + 368);
        uint64_t v72 = *(void *)(v0 + 280);
        uint64_t v73 = *(void *)(v0 + 288);
        int v74 = swift_dynamicCast();
        uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
        v75(v71, v74 ^ 1u, 1, v72);
        goto LABEL_26;
      }
    }
    else
    {
      *id v50 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    uint64_t v76 = *(void *)(v0 + 368);
    uint64_t v77 = *(void *)(v0 + 280);
    uint64_t v78 = *(void *)(v0 + 288);
    sub_10000C6CC(v0 + 96, (uint64_t *)&unk_100727200);
    uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56);
    v75(v76, 1, 1, v77);
LABEL_26:
    uint64_t v79 = (_OWORD *)(v0 + 128);
    id v80 = [v184 userInfo];
    if (v80)
    {
      uint64_t v81 = v80;
      uint64_t v82 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 176) = 0x4173657269707865;
      *(void *)(v0 + 184) = 0xE900000000000074;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v82 + 16) && (unint64_t v83 = sub_100590504(v0 + 16), (v84 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v82 + 56) + 32 * v83, v0 + 128);
      }
      else
      {
        *uint64_t v79 = 0u;
        *(_OWORD *)(v0 + 144) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1001D90FC(v0 + 16);
      if (*(void *)(v0 + 152))
      {
        uint64_t v85 = *(void *)(v0 + 360);
        uint64_t v86 = *(void *)(v0 + 280);
        uint64_t v87 = swift_dynamicCast() ^ 1;
        uint64_t v88 = v85;
        goto LABEL_35;
      }
    }
    else
    {
      *uint64_t v79 = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }
    uint64_t v89 = *(void *)(v0 + 360);
    uint64_t v86 = *(void *)(v0 + 280);
    sub_10000C6CC(v0 + 128, (uint64_t *)&unk_100727200);
    uint64_t v88 = v89;
    uint64_t v87 = 1;
LABEL_35:
    v75(v88, v87, 1, v86);
    uint64_t v90 = *(void *)(v0 + 352);
    uint64_t v91 = *(void *)(v0 + 280);
    uint64_t v92 = *(void *)(v0 + 288);
    sub_100033298(*(void *)(v0 + 368), v90);
    uint64_t v93 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
    if (v93(v90, 1, v91) == 1)
    {
      uint64_t v94 = *(void *)(v0 + 352);
    }
    else
    {
      uint64_t v95 = *(void *)(v0 + 344);
      uint64_t v96 = *(void *)(v0 + 280);
      uint64_t v97 = *(void *)(v0 + 248);
      uint64_t v98 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 288) + 32);
      v98(*(void *)(v0 + 320), *(void *)(v0 + 352), v96);
      sub_100033298(v97, v95);
      int v99 = v93(v95, 1, v96);
      uint64_t v100 = *(void *)(v0 + 344);
      if (v99 != 1)
      {
        v98(*(void *)(v0 + 312), *(void *)(v0 + 344), *(void *)(v0 + 280));
        if (static Date.> infix(_:_:)())
        {
          uint64_t v123 = *(void *)(v0 + 440);
          uint64_t v124 = *(void *)(v0 + 400);
          uint64_t v125 = *(void *)(v0 + 240);
          defaultLogger()();
          v47(v123, v125, v124);
          unint64_t v126 = Logger.logObject.getter();
          os_log_type_t v127 = static os_log_type_t.debug.getter();
          uint64_t v172 = v126;
          BOOL v128 = os_log_type_enabled(v126, v127);
          uint64_t v129 = *(void *)(v0 + 512);
          uint64_t v130 = *(void *)(v0 + 480);
          os_log_t log = *(os_log_t *)(v0 + 472);
          uint64_t v131 = *(void *)(v0 + 440);
          uint64_t v133 = *(void *)(v0 + 400);
          uint64_t v132 = *(void *)(v0 + 408);
          uint64_t v134 = *(void *)(v0 + 320);
          uint64_t v178 = *(void *)(v0 + 312);
          uint64_t v136 = *(void *)(v0 + 280);
          uint64_t v135 = *(void *)(v0 + 288);
          if (v128)
          {
            uint64_t v171 = *(void *)(v0 + 280);
            os_log_type_t type = v127;
            uint64_t v137 = (uint8_t *)swift_slowAlloc();
            uint64_t v185 = swift_slowAlloc();
            *(_DWORD *)uint64_t v137 = 136446210;
            sub_100524238();
            uint64_t v138 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 200) = sub_100110D58(v138, v139, &v185);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v131, v133);
            _os_log_impl((void *)&_mh_execute_header, v172, type, "Not refreshing cache for %{public}s because cached response was stored recently", v137, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, os_log_t))(v130 + 8))(v129, log);
            uint64_t v140 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
            v140(v178, v171);
            v140(v134, v171);
          }
          else
          {

            (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v131, v133);
            (*(void (**)(uint64_t, os_log_t))(v130 + 8))(v129, log);
            v165 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
            v165(v178, v136);
            v165(v134, v136);
          }
LABEL_62:
          uint64_t v167 = *(void *)(v0 + 368);
          sub_10000C6CC(*(void *)(v0 + 360), &qword_1007239B0);
          sub_10000C6CC(v167, &qword_1007239B0);
          goto LABEL_63;
        }
        uint64_t v159 = *(void *)(v0 + 320);
        uint64_t v160 = *(void *)(v0 + 280);
        unint64_t v161 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 288) + 8);
        v161(*(void *)(v0 + 312), v160);
        v161(v159, v160);
LABEL_40:
        uint64_t v101 = *(void *)(v0 + 336);
        uint64_t v102 = *(void *)(v0 + 280);
        sub_100033298(*(void *)(v0 + 360), v101);
        if (v93(v101, 1, v102) == 1)
        {
          uint64_t v103 = *(void *)(v0 + 336);
LABEL_44:
          sub_10000C6CC(v103, &qword_1007239B0);
LABEL_45:
          uint64_t v39 = (void *)swift_task_alloc();
          *(void *)(v0 + 552) = v39;
          *uint64_t v39 = v0;
          uint64_t v40 = sub_1005297F4;
LABEL_9:
          v39[1] = v40;
          uint64_t v41 = *(void *)(v0 + 272);
          return sub_1002B5658(v41);
        }
        uint64_t v104 = *(void *)(v0 + 328);
        uint64_t v105 = *(void *)(v0 + 280);
        uint64_t v106 = *(void *)(v0 + 256);
        uint64_t v107 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 288) + 32);
        v107(*(void *)(v0 + 304), *(void *)(v0 + 336), v105);
        sub_100033298(v106, v104);
        int v108 = v93(v104, 1, v105);
        uint64_t v109 = *(void *)(v0 + 328);
        if (v108 == 1)
        {
          (*(void (**)(void, void))(*(void *)(v0 + 288) + 8))(*(void *)(v0 + 304), *(void *)(v0 + 280));
          uint64_t v103 = v109;
          goto LABEL_44;
        }
        v107(*(void *)(v0 + 296), *(void *)(v0 + 328), *(void *)(v0 + 280));
        if ((static Date.> infix(_:_:)() & 1) == 0)
        {
          uint64_t v162 = *(void *)(v0 + 304);
          uint64_t v163 = *(void *)(v0 + 280);
          uint64_t v164 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 288) + 8);
          v164(*(void *)(v0 + 296), v163);
          v164(v162, v163);
          goto LABEL_45;
        }
        uint64_t v141 = *(void *)(v0 + 432);
        uint64_t v142 = *(void *)(v0 + 400);
        uint64_t v143 = *(void *)(v0 + 240);
        defaultLogger()();
        v47(v141, v143, v142);
        uint64_t v144 = Logger.logObject.getter();
        os_log_type_t v145 = static os_log_type_t.debug.getter();
        v173 = v144;
        BOOL v146 = os_log_type_enabled(v144, v145);
        uint64_t v147 = *(void *)(v0 + 504);
        uint64_t v148 = *(void *)(v0 + 480);
        os_log_t loga = *(os_log_t *)(v0 + 472);
        uint64_t v149 = *(void *)(v0 + 432);
        uint64_t v151 = *(void *)(v0 + 400);
        uint64_t v150 = *(void *)(v0 + 408);
        uint64_t v152 = *(void *)(v0 + 304);
        uint64_t v182 = *(void *)(v0 + 296);
        uint64_t v153 = *(void *)(v0 + 280);
        uint64_t v154 = *(void *)(v0 + 288);
        if (v146)
        {
          uint64_t v170 = *(void *)(v0 + 280);
          uint64_t v155 = (uint8_t *)swift_slowAlloc();
          uint64_t v185 = swift_slowAlloc();
          *(_DWORD *)uint64_t v155 = 136446210;
          sub_100524238();
          uint64_t v156 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 208) = sub_100110D58(v156, v157, &v185);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v149, v151);
          _os_log_impl((void *)&_mh_execute_header, v173, v145, "Not refreshing cache for %{public}s because current response won't expire soon", v155, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, os_log_t))(v148 + 8))(v147, loga);
          uint64_t v158 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
          v158(v182, v170);
          v158(v152, v170);
        }
        else
        {

          (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v149, v151);
          (*(void (**)(uint64_t, os_log_t))(v148 + 8))(v147, loga);
          uint64_t v166 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
          v166(v182, v153);
          v166(v152, v153);
        }
        goto LABEL_62;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 288) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 280));
      uint64_t v94 = v100;
    }
    sub_10000C6CC(v94, &qword_1007239B0);
    goto LABEL_40;
  }
  uint64_t v56 = *(void *)(v0 + 400);
  uint64_t v57 = *(void *)(v0 + 240);
  if ((*(unsigned char *)(v0 + 568) & 1) == 0)
  {
    uint64_t v110 = *(void *)(v0 + 416);
    defaultLogger()();
    v47(v110, v57, v56);
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.debug.getter();
    BOOL v113 = os_log_type_enabled(v111, v112);
    uint64_t v115 = *(void *)(v0 + 480);
    uint64_t v114 = *(void *)(v0 + 488);
    uint64_t v116 = *(void *)(v0 + 472);
    uint64_t v118 = *(void *)(v0 + 408);
    uint64_t v117 = *(void *)(v0 + 416);
    uint64_t v119 = *(void *)(v0 + 400);
    if (v113)
    {
      uint64_t v177 = *(void *)(v0 + 488);
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      uint64_t v185 = swift_slowAlloc();
      *(_DWORD *)uint64_t v120 = 136446210;
      sub_100524238();
      uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 192) = sub_100110D58(v121, v122, &v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v117, v119);
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Refreshing cache for %{public}s because no response exists in cache", v120, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v177, v116);
    }
    else
    {
      (*(void (**)(void, void))(v118 + 8))(*(void *)(v0 + 416), *(void *)(v0 + 400));

      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v116);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 560) = v39;
    *uint64_t v39 = v0;
    uint64_t v40 = sub_100529AC0;
    goto LABEL_9;
  }
  uint64_t v58 = *(void *)(v0 + 424);
  defaultLogger()();
  v47(v58, v57, v56);
  char v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  BOOL v61 = os_log_type_enabled(v59, v60);
  uint64_t v62 = *(void *)(v0 + 496);
  uint64_t v64 = *(void *)(v0 + 472);
  uint64_t v63 = *(void *)(v0 + 480);
  uint64_t v65 = *(void *)(v0 + 424);
  uint64_t v67 = *(void *)(v0 + 400);
  uint64_t v66 = *(void *)(v0 + 408);
  if (v61)
  {
    uint64_t v181 = *(void *)(v0 + 472);
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    uint64_t v185 = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 136446210;
    sub_100524238();
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 216) = sub_100110D58(v69, v70, &v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Not refreshing cache for %{public}s because nothing is currently in the cache", v68, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v181);
  }
  else
  {
    (*(void (**)(void, void))(v66 + 8))(*(void *)(v0 + 424), *(void *)(v0 + 400));

    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
  }
LABEL_63:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v168 = *(uint64_t (**)(void))(v0 + 8);
  return v168();
}

uint64_t sub_100529408()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1005297F4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1005298F0, 0, 0);
}

uint64_t sub_1005298F0()
{
  uint64_t v1 = (void *)v0[68];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[46];

  sub_10000C6CC(v2, &qword_1007239B0);
  sub_10000C6CC(v3, &qword_1007239B0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100529AC0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100529EC4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100529F5C(uint64_t a1, void *a2, void *a3)
{
  return sub_10052C688(a1, a2, a3, &qword_100732118);
}

id sub_100529F68()
{
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IdentityBiometricStoreHelper();
  uint64_t v4 = swift_allocObject();
  sub_1000309D0();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchQoS.QoSClass.userInitiated(_:), v0);
  uint64_t v5 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  *(void *)(v4 + 24) = v5;
  id result = [objc_allocWithZone((Class)DCBiometricStore) init];
  *(void *)(v4 + 16) = result;
  qword_100760858 = v4;
  return result;
}

uint64_t sub_10052A0A4()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_10052A0C4, 0, 0);
}

uint64_t sub_10052A0C4()
{
  uint64_t v1 = *(void **)(v0[16] + 16);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10052A1C4;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100529F5C;
  v0[13] = &unk_100708420;
  v0[14] = v2;
  [v1 globalAuthACLWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10052A1C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_1004DB45C;
  }
  else {
    uint64_t v2 = sub_10052A2D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10052A2D4()
{
  uint64_t v1 = *(void **)(v0 + 120);
  if (v1)
  {
    id v2 = [*(id *)(v0 + 120) aclData];

    uint64_t v1 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0xF000000000000000;
  }
  uint64_t v5 = *(uint64_t (**)(void *, unint64_t))(v0 + 8);
  return v5(v1, v4);
}

uint64_t sub_10052A388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  return _swift_task_switch(sub_10052A44C, 0, 0);
}

uint64_t sub_10052A44C()
{
  unint64_t v1 = v0[17];
  if (v1 > 2)
  {
    (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for DIPError.Code.internalError(_:), v0[19]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    id v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    unint64_t v2 = v1 + 1;
    uint64_t v3 = *(void **)(v0[18] + 16);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v0[22] = isa;
    v0[2] = v0;
    v0[3] = sub_10052A688;
    uint64_t v5 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100529EC4;
    v0[13] = &unk_100708408;
    v0[14] = v5;
    [v3 setGlobalAuthACL:isa ofType:v2 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_10052A688()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 184) = v1;
  if (v1) {
    unint64_t v2 = sub_10052A804;
  }
  else {
    unint64_t v2 = sub_10052A798;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10052A798()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10052A804()
{
  uint64_t v1 = *(void **)(v0 + 176);
  swift_willThrow();

  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10052A87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return _swift_task_switch(sub_10052A8A4, 0, 0);
}

uint64_t sub_10052A8A4()
{
  uint64_t v1 = *(void **)(v0[20] + 16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[21] = isa;
  Class v3 = Data._bridgeToObjectiveC()().super.isa;
  v0[22] = v3;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10052A9E8;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10052ABE0;
  v0[13] = &unk_1007083F0;
  v0[14] = v4;
  [v1 setModifiedGlobalAuthACL:isa externalizedLAContext:v3 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10052A9E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 184) = v1;
  if (v1) {
    unint64_t v2 = sub_10052AB68;
  }
  else {
    unint64_t v2 = sub_10052AAF8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10052AAF8()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 120);

  Class v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_10052AB68()
{
  uint64_t v1 = (void *)v0[22];
  uint64_t v2 = (void *)v0[21];
  swift_willThrow();

  Class v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10052ABE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    type metadata accessor for UUID();
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10052ACAC()
{
  v1[27] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[28] = v2;
  v1[29] = *(void *)(v2 - 8);
  v1[30] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[31] = v3;
  v1[32] = *(void *)(v3 - 8);
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  return _swift_task_switch(sub_10052ADF0, 0, 0);
}

uint64_t sub_10052ADF0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetching template UUIDs for binding details", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[36];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[27];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[37] = v8;
  v0[38] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  uint64_t v9 = *(void **)(v7 + 16);
  v0[2] = v0;
  v0[7] = v0 + 21;
  v0[3] = sub_10052AFA4;
  uint64_t v10 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1005EDE8C;
  v0[13] = &unk_1007083D8;
  v0[14] = v10;
  [v9 globalAuthACLTemplateUUIDsAndCredentialCountWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10052AFA4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 312) = v1;
  if (v1) {
    os_log_type_t v2 = sub_10052B454;
  }
  else {
    os_log_type_t v2 = sub_10052B0B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10052B0B4()
{
  uint64_t v1 = (void *)v0[21];
  if ((uint64_t)v0[22] <= 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = _swiftEmptyArrayStorage;
  }
  v0[40] = v1;
  defaultLogger()();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching Identity credentials for binding details", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v6 = v0[35];
  uint64_t v7 = v0[31];

  v5(v6, v7);
  if (qword_10071F498 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)swift_task_alloc();
  v0[41] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10052B234;
  return sub_10010AE7C();
}

uint64_t sub_10052B234(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 336) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10052B778;
  }
  else
  {
    *(void *)(v4 + 344) = a1;
    uint64_t v5 = sub_10052B364;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10052B364()
{
  sub_10052CAEC(*(void *)(v0 + 344));
  swift_bridgeObjectRelease();
  id v1 = objc_allocWithZone((Class)type metadata accessor for IdentityBindingDetails());
  uint64_t v2 = IdentityBindingDetails.init(templateUUIDs:passDescriptions:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_10052B454()
{
  uint64_t v15 = v0;
  swift_willThrow();
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v11 = v0[31];
    uint64_t v12 = v0[34];
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[23] = sub_100110D58(v4, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error retrieving bound template UUIDs for binding details, %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v13(v12, v11);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v7 = v0[34];
    uint64_t v8 = v0[31];
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  (*(void (**)(void, void, void))(v0[29] + 104))(v0[30], enum case for DIPError.Code.internalError(_:), v0[28]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10052B778()
{
  uint64_t v15 = v0;
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v11 = v0[31];
    uint64_t v12 = v0[33];
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[26] = sub_100110D58(v4, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error retrieving identity credentials for binding details, %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v13(v12, v11);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v7 = v0[33];
    uint64_t v8 = v0[31];
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  (*(void (**)(void, void, void))(v0[29] + 104))(v0[30], enum case for DIPError.Code.internalError(_:), v0[28]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10052BA98()
{
  v1[17] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[21] = v3;
  v1[22] = *(void *)(v3 - 8);
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_10052BBB4, 0, 0);
}

uint64_t sub_10052BBB4()
{
  defaultLogger()();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "fetchCASDCertificate called", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[17];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = *(void **)(v7 + 16);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10052BD5C;
  uint64_t v9 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10059400C;
  v0[13] = &unk_1007083C0;
  v0[14] = v9;
  [v8 getCASDCertificate:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10052BD5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    os_log_type_t v2 = sub_10052BEF0;
  }
  else {
    os_log_type_t v2 = sub_10052BE6C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10052BE6C()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v1, v2);
}

uint64_t sub_10052BEF0()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  swift_willThrow();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10052C064()
{
  v1[16] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[20] = v3;
  v1[21] = *(void *)(v3 - 8);
  v1[22] = swift_task_alloc();
  return _swift_task_switch(sub_10052C180, 0, 0);
}

uint64_t sub_10052C180()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "fetchProgenitorKeyAttestation called", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[16];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = *(void **)(v7 + 16);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10052C328;
  uint64_t v9 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10052C67C;
  v0[13] = &unk_1007083A8;
  v0[14] = v9;
  [v8 getGlobalProgenitorKeyAttestation:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10052C328()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 184) = v1;
  if (v1) {
    os_log_type_t v2 = sub_10052C500;
  }
  else {
    os_log_type_t v2 = sub_10052C438;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10052C438()
{
  uint64_t v1 = *(void **)(v0 + 120);
  if (v1)
  {
    id v2 = [*(id *)(v0 + 120) attestationData];

    uint64_t v1 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0xF000000000000000;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void *, unint64_t))(v0 + 8);
  return v5(v1, v4);
}

uint64_t sub_10052C500()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  swift_willThrow();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10052C67C(uint64_t a1, void *a2, void *a3)
{
  return sub_10052C688(a1, a2, a3, &qword_10072ED90);
}

uint64_t sub_10052C688(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v6 = swift_allocError();
    *uint64_t v7 = a3;
    id v8 = a3;
    return _swift_continuation_throwingResumeWithError(v4, v6);
  }
  else
  {
    uint64_t v13 = a2;
    uint64_t v10 = *(void *)(*(void *)(v4 + 64) + 40);
    id v11 = a2;
    sub_1000BEA14((uint64_t)&v13, v10, a4);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10052C754()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityBiometricStoreHelper()
{
  return self;
}

uint64_t sub_10052C7B8()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return _swift_task_switch(sub_10052C874, 0, 0);
}

uint64_t sub_10052C874()
{
  (*(void (**)(void, void, void))(v0[3] + 104))(v0[4], enum case for DIPError.Code.featureNotSupported(_:), v0[2]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10052C9CC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1002B7618;
  return sub_10052BA98();
}

uint64_t sub_10052CA5C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1004DBA18;
  return sub_10052C064();
}

char *sub_10052CAEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v2 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v3 = (char *)_swiftEmptyArrayStorage;
  do
  {
    uint64_t v4 = *(v2 - 1);
    unint64_t v5 = *v2;
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1001FF348(v4, v5);
    if (v6)
    {
      uint64_t v8 = v6[5];
      uint64_t v7 = v6[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_release();
      if (v7)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_10010F3C4(0, *((void *)v3 + 2) + 1, 1, v3);
        }
        unint64_t v10 = *((void *)v3 + 2);
        unint64_t v9 = *((void *)v3 + 3);
        if (v10 >= v9 >> 1) {
          uint64_t v3 = sub_10010F3C4((char *)(v9 > 1), v10 + 1, 1, v3);
        }
        *((void *)v3 + 2) = v10 + 1;
        id v11 = &v3[16 * v10];
        *((void *)v11 + 4) = v8;
        *((void *)v11 + 5) = v7;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_10052CC28()
{
  uint64_t v0 = sub_100007764(&qword_100722300);
  __chkstk_darwin(v0 - 8);
  uint64_t v40 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100007764(&qword_100722310);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v39 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v32 - v5;
  uint64_t v7 = type metadata accessor for HardwareAttestationType();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v37(v6, 1, 1, v7);
  uint64_t v35 = sub_100007764(&qword_100722590);
  uint64_t v10 = *(void *)(v8 + 72);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v33 = v11 | 7;
  uint64_t v34 = v12 + v10;
  uint64_t v13 = swift_allocObject();
  long long v32 = xmmword_100610730;
  *(_OWORD *)(v13 + 16) = xmmword_100610730;
  uint64_t v14 = enum case for HardwareAttestationType.SEP(_:);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
  v15(v13 + v12, enum case for HardwareAttestationType.SEP(_:), v7);
  type metadata accessor for LegacyWorkflow(0);
  swift_allocObject();
  *(void *)&long long v30 = 0xE200000000000000;
  *((void *)&v30 + 1) = &off_1006F1E60;
  *(void *)&long long v28 = &_swiftEmptyArrayStorage;
  *((void *)&v28 + 1) = 10794;
  *(void *)&long long v26 = 0x3172656974;
  *((void *)&v26 + 1) = 0xE500000000000000;
  *(void *)&long long v24 = 0x206E6F7275626954;
  *((void *)&v24 + 1) = 0xEB000000004F4E49;
  uint64_t v16 = sub_1000767C4(0xD000000000000033, 0x8000000100653C70, 0x31302E305F76, 0xE600000000000000, 0x206E6F7275626954, 0xEB000000004F4E49, 0x696E6F7275626974, 0xEA00000000006F6ELL, v24, 0x797469746E656449, 0xE800000000000000, 0, 0, v26, v28, v30, 0x53552D6E65, 0xE500000000000000, 0,
          (uint64_t)v6,
          v13,
          (uint64_t)&_swiftEmptyArrayStorage,
          0,
          0,
          2);
  uint64_t v38 = v16;
  type metadata accessor for LegacyINOWorkflow(0);
  swift_allocObject();
  uint64_t v36 = sub_1000AF0B0(v16, (uint64_t)&off_1006F1E90, 0, (uint64_t)&_swiftEmptyArrayStorage, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
          1,
          2,
          2);
  uint64_t v17 = (uint64_t)v39;
  v37(v39, 1, 1, v7);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = v32;
  v15(v18 + v12, v14, v7);
  swift_allocObject();
  *((void *)&v31 + 1) = &off_1006F1ED0;
  *(void *)&long long v31 = 0xE200000000000000;
  *(void *)&long long v29 = &_swiftEmptyArrayStorage;
  *((void *)&v29 + 1) = 10794;
  *(void *)&long long v27 = 0x3172656974;
  *((void *)&v27 + 1) = 0xE500000000000000;
  *((void *)&v25 + 1) = 0xE700000000000000;
  *(void *)&long long v25 = 0x6E6F7275626954;
  uint64_t v19 = sub_1000767C4(0xD000000000000024, 0x8000000100653CB0, 0x31302E305F76, 0xE600000000000000, 0x6E6F7275626954, 0xE700000000000000, 0x6E6F7275626974, 0xE700000000000000, v25, 0x797469746E656449, 0xE800000000000000, 1, 0, v27, v29, v31, 0x53552D6E65, 0xE500000000000000, 0,
          v17,
          v18,
          (uint64_t)&_swiftEmptyArrayStorage,
          0,
          0,
          2);
  uint64_t v20 = type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v21 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v40, 1, 1, v20);
  memset(v41, 0, sizeof(v41));
  char v42 = 1;
  type metadata accessor for LegacySPWorkflow(0);
  swift_allocObject();
  sub_1000AF218(v19, 0, 0, 2, (uint64_t)&_swiftEmptyArrayStorage, (uint64_t)&_swiftEmptyArrayStorage, (uint64_t)&_swiftEmptyArrayStorage, (uint64_t)&_swiftEmptyArrayStorage, (uint64_t)&off_1006F1F00, v21, 0, 0, 0, 0, 2, 2, 2, (uint64_t)v41, 0,
    0,
    0,
    0,
    1,
    0,
    0);
  type metadata accessor for LegacySynthesizedWorkflows();
  swift_allocObject();
  uint64_t v22 = sub_100084790(v36);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v22;
}

uint64_t sub_10052D250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[46] = a2;
  v3[47] = a3;
  v3[45] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[48] = v4;
  v3[49] = *(void *)(v4 - 8);
  v3[50] = swift_task_alloc();
  sub_100007764(&qword_1007254C8);
  v3[51] = swift_task_alloc();
  v3[52] = type metadata accessor for Workflow();
  v3[53] = swift_task_alloc();
  v3[54] = swift_task_alloc();
  v3[55] = swift_task_alloc();
  v3[56] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPSignpost.Config();
  v3[57] = v5;
  v3[58] = *(void *)(v5 - 8);
  v3[59] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPSignpost();
  v3[60] = v6;
  v3[61] = *(void *)(v6 - 8);
  v3[62] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v3[63] = v7;
  v3[64] = *(void *)(v7 - 8);
  v3[65] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v3[66] = v8;
  v3[67] = *(void *)(v8 - 8);
  v3[68] = swift_task_alloc();
  v3[69] = swift_task_alloc();
  return _swift_task_switch(sub_10052D51C, 0, 0);
}

uint64_t sub_10052D51C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Getting identity proofing workflow", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 552);
  uint64_t v5 = *(void *)(v0 + 536);
  uint64_t v6 = *(void *)(v0 + 528);
  uint64_t v7 = *(void *)(v0 + 376);

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v0 + 560) = v8;
  *(void *)(v0 + 568) = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v6);
  uint64_t v9 = *(void *)(v0 + 376);
  if (*(void *)(v7 + 16)
    && (v10 = sub_100590548(0xD000000000000010, 0x8000000100653BC0), uint64_t v9 = *(void *)(v0 + 376), (v11 & 1) != 0))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
    uint64_t v37 = *v12;
    unint64_t v35 = v12[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v35 = 0xE000000000000000;
  }
  uint64_t v13 = *(void *)(v0 + 520);
  uint64_t v15 = *(void *)(v0 + 504);
  uint64_t v14 = *(void *)(v0 + 512);
  uint64_t v16 = *(void *)(v0 + 464);
  uint64_t v36 = *(void *)(v0 + 456);
  uint64_t v34 = *(void *)(v0 + 408);
  uint64_t v17 = *(void *)(v0 + 368);
  UUID.init()();
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  uint64_t v22 = *(void *)(v17 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  uint64_t v21 = *(void *)(v17 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static DaemonSignposts.fetchIdentityDynamicWorkflowTotal.getter();
  DIPSignpost.init(_:)();
  *(void *)(v0 + 184) = v22;
  *(void *)(v0 + 192) = v21;
  *(void *)(v0 + 200) = v18;
  *(void *)(v0 + 208) = v20;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *(void *)(v0 + 264) = 0x61746E6567616DLL;
  *(void *)(v0 + 272) = 0xE700000000000000;
  *(void *)(v0 + 280) = 0x496C617469676964;
  *(void *)(v0 + 288) = 0xE900000000000064;
  *(void *)(v0 + 296) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 304) = 0;
  *(void *)(v0 + 312) = v37;
  *(void *)(v0 + 320) = v35;
  *(void *)(v0 + 328) = 0;
  *(unsigned char *)(v0 + 336) = 0;
  *(void *)(v0 + 344) = v9;
  *(void *)(v0 + 176) = v9;
  long long v23 = *(_OWORD *)(v0 + 216);
  long long v25 = *(_OWORD *)(v0 + 264);
  long long v24 = *(_OWORD *)(v0 + 280);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 96) = v25;
  long long v26 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 48) = v23;
  *(_OWORD *)(v0 + 64) = v26;
  long long v27 = *(_OWORD *)(v0 + 328);
  long long v28 = *(_OWORD *)(v0 + 296);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 312);
  *(_OWORD *)(v0 + 160) = v27;
  long long v29 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 112) = v24;
  *(_OWORD *)(v0 + 128) = v28;
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 32) = v29;
  static DaemonSignposts.fetchIdentityDynamicWorkflowRequest.getter();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v34, 0, 1, v36);
  long long v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 576) = v30;
  void *v30 = v0;
  v30[1] = sub_10052D85C;
  uint64_t v31 = *(void *)(v0 + 448);
  uint64_t v32 = *(void *)(v0 + 408);
  return sub_1002BBC1C(v31, v0 + 16, 1, v32, 1);
}

uint64_t sub_10052D85C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 184;
  *(void *)(*v1 + 584) = v0;
  swift_task_dealloc();
  sub_1002783F4(*(void *)(v2 + 408));
  sub_1001D8DFC(v3);
  if (v0) {
    uint64_t v4 = sub_10052DCCC;
  }
  else {
    uint64_t v4 = sub_10052D99C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10052D99C()
{
  long long v29 = v0;
  uint64_t v1 = v0[55];
  uint64_t v2 = v0[54];
  sub_1000C6B10(v0[56], v1);
  defaultLogger()();
  sub_1000C6B10(v1, v2);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    long long v27 = (void (*)(uint64_t, uint64_t))v0[70];
    uint64_t v26 = v0[68];
    uint64_t v25 = v0[66];
    uint64_t v6 = v0[53];
    uint64_t v5 = v0[54];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_1000C6B10(v5, v6);
    uint64_t v8 = String.init<A>(describing:)();
    v0[44] = sub_100110D58(v8, v9, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10052EA2C(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Workflow request success: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v27(v26, v25);
  }
  else
  {
    unint64_t v10 = (void (*)(uint64_t, uint64_t))v0[70];
    uint64_t v11 = v0[68];
    uint64_t v12 = v0[66];
    sub_10052EA2C(v0[54]);

    v10(v11, v12);
  }
  uint64_t v14 = v0[61];
  uint64_t v13 = v0[62];
  uint64_t v15 = v0[60];
  uint64_t v16 = v0[55];
  uint64_t v17 = v0[56];
  uint64_t v18 = v0[52];
  uint64_t v19 = (uint64_t *)v0[45];
  v20._object = (void *)0x8000000100653C40;
  v21._uint64_t countAndFlagsBits = 0x6261316163613630;
  v21._object = (void *)0xE800000000000000;
  v20._uint64_t countAndFlagsBits = 0xD000000000000021;
  logMilestone(tag:description:)(v21, v20);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v19[3] = v18;
  v19[4] = (uint64_t)&off_100709BE0;
  uint64_t v22 = sub_10002C2D8(v19);
  sub_10052EA88(v16, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Workflow);
  sub_10052EA2C(v17);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_10052DCCC()
{
  uint64_t v1 = v0[61];
  uint64_t v2 = v0[62];
  uint64_t v3 = v0[60];
  (*(void (**)(void, void, void))(v0[49] + 104))(v0[50], enum case for DIPError.Code.internalError(_:), v0[48]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10052DED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  sub_100007764(&qword_1007254C8);
  v5[10] = swift_task_alloc();
  type metadata accessor for IdentityProofingStaticWorkflow(0);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPSignpost.Config();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DIPSignpost();
  v5[15] = v8;
  v5[16] = *(void *)(v8 - 8);
  v5[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v5[18] = v9;
  v5[19] = *(void *)(v9 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v5[21] = v10;
  v5[22] = *(void *)(v10 - 8);
  v5[23] = swift_task_alloc();
  return _swift_task_switch(sub_10052E16C, 0, 0);
}

uint64_t sub_10052E16C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Getting the Identity Proofing Static workflow", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v7 = v0[20];
  uint64_t v6 = v0[21];
  uint64_t v8 = v0[18];
  uint64_t v9 = v0[19];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  uint64_t v10 = sub_10015A59C(0);
  v0[24] = v10;
  swift_bridgeObjectRelease();
  if (v10)
  {
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[12];
    uint64_t v13 = v0[10];
    static DaemonSignposts.fetchIdentityStaticWorkflowTotal.getter();
    DIPSignpost.init(_:)();
    static DaemonSignposts.fetchIdentityStaticWorkflowRequest.getter();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v12);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[25] = v14;
    void *v14 = v0;
    v14[1] = sub_10052E4B4;
    uint64_t v16 = v0[10];
    uint64_t v15 = v0[11];
    uint64_t v17 = v0[5];
    uint64_t v18 = v0[6];
    uint64_t v19 = v0[3];
    uint64_t v20 = v0[4];
    return sub_100150A94(v15, v19, v20, v17, v18, 2, v16);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.staticWebServiceUnavailable(_:), v0[7]);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_10052E4B4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  sub_1002783F4(v2);
  if (v0) {
    uint64_t v3 = sub_10052E738;
  }
  else {
    uint64_t v3 = sub_10052E5E4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10052E5E4()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[2];
  v6._object = (void *)0x8000000100653BA0;
  v7._uint64_t countAndFlagsBits = 0x3937356263373734;
  v7._object = (void *)0xE800000000000000;
  v6._uint64_t countAndFlagsBits = 0xD000000000000018;
  logMilestone(tag:description:)(v7, v6);
  sub_10052EA88(v4, v5, type metadata accessor for IdentityProofingStaticWorkflow);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10052E738()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[15];
  uint64_t v5 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[7];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain();
  sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t type metadata accessor for WorkflowFetcher()
{
  return self;
}

uint64_t sub_10052E944()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v0 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v1 = (uint64_t)&v0[4];
  uint64_t v2 = v0 + 52;
  os_unfair_lock_lock(v0 + 52);
  sub_1000262B4(v1, v7);
  os_unfair_lock_unlock(v2);
  uint64_t v3 = v8;
  sub_10003BDD0((uint64_t)v8);
  uint64_t v4 = sub_1000262D0((uint64_t)v7);
  if (v3)
  {
    uint64_t v5 = v3(v4);
    sub_10003BEDC((uint64_t)v3);
  }
  else
  {
    type metadata accessor for WorkflowFetcher();
    return swift_allocObject();
  }
  return v5;
}

uint64_t sub_10052EA2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Workflow();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10052EA88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10052EAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[12] = v7;
  v4[13] = *(void *)(v7 - 8);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_10052EC6C, 0, 0);
}

uint64_t sub_10052EC6C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Refreshing the Identity Proofing Static workflow", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v7 = v0[11];
  uint64_t v6 = v0[12];
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[10];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  uint64_t v10 = sub_10015A59C(0);
  v0[15] = v10;
  swift_bridgeObjectRelease();
  if (v10)
  {
    uint64_t v11 = (void *)swift_task_alloc();
    v0[16] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1004D3FB0;
    uint64_t v12 = v0[4];
    uint64_t v13 = v0[5];
    uint64_t v15 = v0[2];
    uint64_t v14 = v0[3];
    return sub_100151ED8(v15, v14, v12, v13);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.staticWebServiceUnavailable(_:), v0[6]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

void *sub_10052EF38(unint64_t a1)
{
  return sub_10052F07C(a1, (void (*)(void))&type metadata accessor for StoredProofingBiomeData);
}

void *sub_10052EF50(uint64_t a1)
{
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    sub_10003BC28(i, (uint64_t)v5);
    type metadata accessor for StoredUploadAsset();
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

void *sub_10052F04C(unint64_t a1)
{
  return sub_10052F07C(a1, (void (*)(void))&type metadata accessor for StoredProofingSession);
}

void *sub_10052F064(unint64_t a1)
{
  return sub_10052F07C(a1, (void (*)(void))&type metadata accessor for StoredBiomeMetadata);
}

void *sub_10052F07C(unint64_t a1, void (*a2)(void))
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v6 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        a2(0);
        if (!swift_dynamicCastClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v6 == v4) {
          return &_swiftEmptyArrayStorage;
        }
      }
      __break(1u);
    }
    else
    {
      for (uint64_t j = 0; ; ++j)
      {
        uint64_t v8 = j + 1;
        if (__OFADD__(j, 1)) {
          break;
        }
        a2(0);
        uint64_t v9 = swift_dynamicCastClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v3 = v9;
        swift_unknownObjectRetain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v8 == v4) {
          return &_swiftEmptyArrayStorage;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10052F26C()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_10052F354, 0, 0);
}

uint64_t sub_10052F354()
{
  uint64_t v32 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Identity: asked to delete current claim due to self-heal", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v0[10] = v8;
  v0[11] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v5, v6);
  sub_1005310AC();
  unint64_t v9 = *(void *)(v4 + OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID + 8);
  if (!v9)
  {
    defaultLogger()();
    uint64_t v19 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, (os_log_type_t)v20))
    {
      Swift::String v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v20, "Self-healing: skipping proofing session deletion because no proofing session ID is available", v21, 2u);
      swift_slowDealloc();
    }
    uint64_t v22 = v0[7];
    uint64_t v23 = v0[4];

    v8(v22, v23);
    defaultLogger()();
    long long v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Identity: Done deleting current claim due to self-heal; terminating process",
        v26,
        2u);
      swift_slowDealloc();
    }
    long long v27 = (void (*)(uint64_t, uint64_t))v0[10];
    uint64_t v28 = v0[6];
    uint64_t v29 = v0[4];

    v27(v28, v29);
    exit(0);
  }
  uint64_t v10 = *(void *)(v4 + OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID);
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[8];
  uint64_t v15 = v0[4];
  if (v13)
  {
    uint64_t v30 = v0[8];
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_100110D58(v10, v9, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Self-healing: deleting proofing sessions with ID %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v8(v30, v15);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v8(v14, v15);
  }
  uint64_t v17 = (void *)swift_task_alloc();
  v0[12] = v17;
  void *v17 = v0;
  v17[1] = sub_10052F76C;
  return sub_10052F92C(v10, v9);
}

uint64_t sub_10052F76C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10052F868, 0, 0);
}

void sub_10052F868()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Identity: Done deleting current claim due to self-heal; terminating process",
      v3,
      2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[10];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[4];

  v4(v5, v6);
  exit(0);
}

uint64_t sub_10052F92C(uint64_t a1, uint64_t a2)
{
  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[29] = v4;
  v3[30] = *(void *)(v4 - 8);
  v3[31] = swift_task_alloc();
  return _swift_task_switch(sub_10052F9F0, 0, 0);
}

uint64_t sub_10052F9F0()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 52;
  os_unfair_lock_lock(v1 + 52);
  sub_1000262B4(v2, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v3);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void **)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 208);
  *(void *)(v0 + 256) = *(void *)(v0 + 80);
  swift_retain();
  sub_1000262D0(v0 + 16);
  uint64_t v7 = (void *)swift_allocObject();
  *(void *)(v0 + 264) = v7;
  void v7[2] = v6;
  v7[3] = v4;
  v7[4] = v5;
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 272) = v8;
  *(void *)(v8 + 16) = sub_100531744;
  *(void *)(v8 + 24) = v7;
  swift_bridgeObjectRetain();
  id v9 = v5;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10052FBD4;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_10052FBD4()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10052FD64;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v2 = sub_10052FD04;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10052FD04()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10052FD64()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  swift_release();
  swift_release();
  swift_release();
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10052FE44()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_10052FF14, 0, 0);
}

uint64_t sub_10052FF14()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Identity: asked to delete all claims for current provider due to self-heal", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[7] = v7;
  v0[8] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005310AC();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10053005C;
  return sub_10052F92C(0, 0);
}

uint64_t sub_10053005C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100530158, 0, 0);
}

void sub_100530158()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Identity: Done deleting deleting all claims for current provider due to self-heal; terminating process",
      v3,
      2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[7];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];

  v4(v5, v6);
  exit(0);
}

void sub_10053021C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v67 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  unint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  BOOL v13 = (char *)&v58 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v58 - v14;
  unint64_t v75 = (unint64_t)_swiftEmptyArrayStorage;
  sub_100100188();
  if (v3) {
    return;
  }
  unint64_t v17 = v16;
  uint64_t v66 = v10;
  id v71 = v15;
  BOOL v61 = v13;
  uint64_t v62 = a2;
  sub_100100188();
  unint64_t v19 = 0;
  unint64_t v21 = v20;
  uint64_t v65 = a1;
  if (v17) {
    sub_1001633BC(v17);
  }
  unint64_t v22 = v7;
  uint64_t v23 = v66;
  if (v21) {
    sub_1001633BC(v21);
  }
  unint64_t v24 = v75;
  uint64_t v25 = v6;
  uint64_t v63 = v6;
  if (!(v75 >> 62))
  {
    uint64_t v70 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v70)
    {
LABEL_8:
      unint64_t v58 = v24;
      unint64_t v59 = v19;
      unint64_t v19 = 0;
      uint64_t v68 = (char *)(v24 + 32);
      uint64_t v69 = v24 & 0xFFFFFFFFFFFFFF8;
      uint64_t v64 = (void (**)(char *, uint64_t))(v22 + 8);
      unint64_t v24 = (unint64_t)&type metadata for Any + 8;
      *(void *)&long long v18 = 136315138;
      long long v60 = v18;
      uint64_t v26 = v65;
      unint64_t v22 = v67;
      while (1)
      {
        if (v19 >= *(void *)(v69 + 16))
        {
          __break(1u);
          goto LABEL_46;
        }
        id v27 = *(id *)&v68[8 * v19];
        id v71 = v27;
        if (!v22) {
          break;
        }
        id v28 = v27;
        swift_bridgeObjectRetain();
        id v29 = [v28 proofingSessionID:v58];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v33 = v32;

          if (v31 == v62 && v33 == v22)
          {
            swift_bridgeObjectRelease();
            uint64_t v36 = v61;
LABEL_25:
            defaultLogger()();
            swift_bridgeObjectRetain();
            uint64_t v40 = Logger.logObject.getter();
            os_log_type_t v41 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v40, v41))
            {
              uint64_t v42 = swift_slowAlloc();
              v73[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v42 = v60;
              swift_bridgeObjectRetain();
              *(void *)(v42 + 4) = sub_100110D58(v62, v22, v73);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v40, v41, "Self-healing: Deleting session %s", (uint8_t *)v42, 0xCu);
              swift_arrayDestroy();
              uint64_t v23 = v66;
              swift_slowDealloc();
              swift_slowDealloc();

              (*v64)(v61, v25);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              (*v64)(v36, v25);
            }
LABEL_28:
            id v28 = v71;
            [*(id *)(v26 + 16) deleteObject:v71];
            goto LABEL_29;
          }
          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v36 = v61;
          if (v35) {
            goto LABEL_25;
          }
          swift_bridgeObjectRelease();
          id v28 = v71;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
LABEL_29:
        id v43 = [v28 uploadAssets:v58];
        if (v43)
        {
          id v44 = v43;
          sub_100530DA4(v44);
          uint64_t v46 = v45;

          int v74 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v47 = *(void *)(v46 + 16);
          if (v47)
          {
            uint64_t v48 = v46 + 32;
            while (1)
            {
              sub_10003BC28(v48, (uint64_t)v73);
              type metadata accessor for StoredUploadAsset();
              if (!swift_dynamicCast()) {
                break;
              }
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              v48 += 32;
              if (!--v47) {
                goto LABEL_34;
              }
            }
            uint64_t v72 = 0;
            swift_release();
            id v51 = v72;

            swift_release();
            uint64_t v25 = v63;
            uint64_t v26 = v65;
            unint64_t v22 = v67;
          }
          else
          {
LABEL_34:
            unint64_t v49 = (unint64_t)v74;
            swift_release();
            if ((v49 & 0x8000000000000000) != 0 || (v49 & 0x4000000000000000) != 0)
            {
              swift_retain();
              uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
            }
            else
            {
              uint64_t v50 = *(void *)(v49 + 16);
            }
            uint64_t v26 = v65;
            uint64_t v25 = v63;
            unint64_t v22 = v67;
            if (v50)
            {
              sub_1005317C8(v49, v65);

              swift_release();
            }
            else
            {

              swift_release();
            }
          }
          uint64_t v23 = v66;
        }
        else
        {
        }
        if (++v19 == v70)
        {
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
      }
      defaultLogger()();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Self-healing: Deleting session", v39, 2u);
        swift_slowDealloc();
      }

      (*v64)(v23, v25);
      goto LABEL_28;
    }
    goto LABEL_49;
  }
LABEL_46:
  swift_bridgeObjectRetain();
  uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_49:
    swift_bridgeObjectRelease();
    id v54 = v71;
    defaultLogger()();
    char v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Self-healing: no sessions to delete", v57, 2u);
      uint64_t v25 = v63;
      swift_slowDealloc();
    }

    (*(void (**)(id, uint64_t))(v22 + 8))(v54, v25);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v70 = v53;
  if (v53) {
    goto LABEL_8;
  }
  unint64_t v59 = v19;
  swift_bridgeObjectRelease();
LABEL_44:
  sub_100143ED8();
}

uint64_t type metadata accessor for IdentitySelfHealer()
{
  return self;
}

uint64_t sub_1005309C8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100025D64;
  return sub_10052F26C();
}

uint64_t sub_100530A54()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100025D64;
  return sub_10052FE44();
}

uint64_t sub_100530AE0()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_100732238 + dword_100732238);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10000C494;
  return v3();
}

uint64_t (*sub_100530B80(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100530C9C(v6, a2, a3);
  return sub_100530BE8;
}

uint64_t (*sub_100530BEC(void (**a1)(id *), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100530D24(v6, a2, a3);
  return sub_100530BE8;
}

void sub_100530C54(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_100530C9C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100530D1C;
  }
  __break(1u);
  return result;
}

void sub_100530D1C(id *a1)
{
}

void (*sub_100530D24(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100532410;
  }
  __break(1u);
  return result;
}

void sub_100530DA4(void *a1)
{
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t)[a1 count];
  if (v6 <= 0)
  {
    unint64_t v7 = _swiftEmptyArrayStorage;
    unint64_t v10 = _swiftEmptyArrayStorage[3];
  }
  else
  {
    sub_100007764(&qword_1007241C8);
    unint64_t v7 = (void *)swift_allocObject();
    int64_t v8 = j__malloc_size(v7);
    uint64_t v9 = v8 - 32;
    if (v8 < 32) {
      uint64_t v9 = v8 - 1;
    }
    unint64_t v10 = 2 * (v9 >> 5);
    void v7[2] = v6;
    v7[3] = v10;
  }
  id v11 = a1;
  NSSet.makeIterator()();

  if (v6 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v12 = v10 >> 1;
  BOOL v13 = v7 + 4;
  if (v6)
  {
    v12 -= v6;
    sub_1005323B8();
    do
    {
      dispatch thunk of IteratorProtocol.next()();
      if (!v33) {
        goto LABEL_38;
      }
      sub_1000078A8(&v32, v13);
      v13 += 2;
    }
    while (--v6);
  }
  uint64_t v29 = v3;
  sub_1005323B8();
  dispatch thunk of IteratorProtocol.next()();
  if (v31)
  {
    while (1)
    {
      sub_1000078A8(&v30, &v32);
      if (!v12)
      {
        unint64_t v14 = v7[3];
        if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_35;
        }
        int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v15 <= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v15;
        }
        sub_100007764(&qword_1007241C8);
        unint64_t v17 = (void *)swift_allocObject();
        int64_t v18 = j__malloc_size(v17);
        uint64_t v19 = v18 - 32;
        if (v18 < 32) {
          uint64_t v19 = v18 - 1;
        }
        uint64_t v20 = v19 >> 5;
        v17[2] = v16;
        v17[3] = 2 * (v19 >> 5);
        unint64_t v21 = (unint64_t)(v17 + 4);
        uint64_t v22 = v7[3] >> 1;
        if (v7[2])
        {
          if (v17 != v7 || v21 >= (unint64_t)&v7[4 * v22 + 4]) {
            memmove(v17 + 4, v7 + 4, 32 * v22);
          }
          void v7[2] = 0;
        }
        BOOL v13 = (_OWORD *)(v21 + 32 * v22);
        unint64_t v12 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
        swift_release();
        unint64_t v7 = v17;
      }
      BOOL v24 = __OFSUB__(v12--, 1);
      if (v24) {
        break;
      }
      sub_1000078A8(&v32, v13);
      v13 += 2;
      dispatch thunk of IteratorProtocol.next()();
      if (!v31) {
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_30:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v2);
  sub_10000C6CC((uint64_t)&v30, (uint64_t *)&unk_100727200);
  unint64_t v25 = v7[3];
  if (v25 >= 2)
  {
    unint64_t v26 = v25 >> 1;
    BOOL v24 = __OFSUB__(v26, v12);
    unint64_t v27 = v26 - v12;
    if (v24)
    {
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      return;
    }
    void v7[2] = v27;
  }
}

uint64_t sub_1005310AC()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v10 - v3;
  defaultLogger()();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Self-healing: Deleting identity key", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  type metadata accessor for DIPKeystoreManager();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = sub_10015CDA0((uint64_t)_swiftEmptyArrayStorage);
  *(unsigned char *)(inited + 24) = 2;
  sub_100127D94(0x61746E6567616DLL, 0xE700000000000000);
  return swift_release();
}

uint64_t sub_1005312B4()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  v0[5] = swift_task_alloc();
  return _swift_task_switch(sub_100531380, 0, 0);
}

uint64_t sub_100531380()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Identity: Asked to delete everything due to self-heal", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];

  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[6] = v7;
  v0[7] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  if (qword_10071F5D0 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100760868;
  v0[8] = qword_100760868;
  id v11 = (char *)&dword_100732E60 + dword_100732E60;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[9] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100531528;
  return ((uint64_t (*)(_UNKNOWN **, uint64_t))v11)(&off_1006F1AD8, v8);
}

uint64_t sub_100531528()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100531640, 0, 0);
}

void sub_100531640()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Identity: Done deleting everything due to self-heal; terminating process",
      v3,
      2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[6];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[2];

  v4(v5, v6);
  exit(0);
}

uint64_t sub_100531704()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100531744(uint64_t a1)
{
  sub_10053021C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100531764()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10053179C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1005317C8(unint64_t a1, uint64_t a2)
{
  uint64_t v102 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v102 - 8);
  uint64_t v5 = __chkstk_darwin(v102);
  unint64_t v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v79 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v79 - v11;
  uint64_t v13 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v13 - 8);
  uint64_t v85 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v93 - 8);
  uint64_t v16 = __chkstk_darwin(v93);
  int64_t v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  unint64_t v21 = (char *)&v79 - v20;
  __chkstk_darwin(v19);
  uint64_t v94 = (char *)&v79 - v22;
  unint64_t v80 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    if (v23) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v23)
    {
LABEL_3:
      if (v23 >= 1)
      {
        char v84 = v18;
        uint64_t v86 = v12;
        uint64_t v89 = v7;
        uint64_t v79 = a2;
        uint64_t v25 = 0;
        uint64_t v83 = 0;
        unint64_t v99 = a1 & 0xC000000000000001;
        uint64_t v97 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
        uint64_t v88 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
        uint64_t v87 = (void (**)(char *, char *, uint64_t))(v15 + 16);
        uint64_t v91 = (void (**)(char *, uint64_t))(v15 + 8);
        uint64_t v100 = (void (**)(char *, uint64_t))(v4 + 8);
        *(void *)&long long v24 = 136315138;
        long long v92 = v24;
        uint64_t v90 = (char *)&type metadata for Any + 8;
        *(void *)&long long v24 = 136315394;
        long long v81 = v24;
        unint64_t v98 = a1;
        uint64_t v96 = v10;
        uint64_t v26 = (uint64_t)v85;
        uint64_t v27 = v93;
        uint64_t v95 = v21;
        uint64_t v101 = v23;
        while (1)
        {
          if (v99) {
            id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v28 = *(id *)(a1 + 8 * v25 + 32);
          }
          uint64_t v29 = v28;
          id v30 = [v28 assetFileURL:v79];
          if (!v30) {
            goto LABEL_13;
          }
          uint64_t v31 = v30;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          URL.init(string:)();
          swift_bridgeObjectRelease();
          if ((*v97)(v26, 1, v27) == 1)
          {
            sub_10000C6CC(v26, &qword_100720A68);
LABEL_13:
            defaultLogger()();
            id v32 = v29;
            uint64_t v33 = Logger.logObject.getter();
            os_log_type_t v34 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v33, v34))
            {
              uint64_t v35 = swift_slowAlloc();
              id v103 = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v35 = v92;
              id v36 = [v32 recordUUID];
              if (v36)
              {
                uint64_t v37 = v36;
                uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v40 = v39;
              }
              else
              {
                uint64_t v38 = 0;
                unint64_t v40 = 0xE000000000000000;
              }
              *(void *)(v35 + 4) = sub_100110D58(v38, v40, (uint64_t *)&v103);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v33, v34, "Self-healing: Asset url is nil for recordUUID: %s", (uint8_t *)v35, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v10 = v96;
              (*v100)(v96, v102);
              a1 = v98;
              uint64_t v27 = v93;
              unint64_t v21 = v95;
            }
            else
            {

              (*v100)(v10, v102);
            }
            goto LABEL_6;
          }
          os_log_type_t v41 = v94;
          (*v88)(v94, v26, v27);
          id v42 = [self defaultManager];
          URL._bridgeToObjectiveC()(v43);
          uint64_t v45 = v44;
          id v103 = 0;
          unsigned int v46 = [v42 removeItemAtURL:v44 error:&v103];

          if (v46) {
            break;
          }
          id v58 = v103;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          uint64_t v83 = 0;
          defaultLogger()();
          unint64_t v59 = v84;
          (*v87)(v84, v41, v27);
          swift_errorRetain();
          swift_errorRetain();
          long long v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v60, v61))
          {

            swift_errorRelease();
            swift_errorRelease();
            uint64_t v70 = *v91;
            (*v91)(v59, v27);
            swift_errorRelease();

            (*v100)(v89, v102);
            v70(v41, v27);
            unint64_t v21 = v95;
            uint64_t v10 = v96;
LABEL_25:
            a1 = v98;
            goto LABEL_6;
          }
          uint64_t v62 = swift_slowAlloc();
          id v103 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = v81;
          uint64_t v63 = URL.absoluteString.getter();
          *(void *)(v62 + 4) = sub_100110D58(v63, v64, (uint64_t *)&v103);
          swift_bridgeObjectRelease();
          uint64_t v82 = *v91;
          uint64_t v65 = v59;
          uint64_t v66 = v93;
          v82(v65, v93);
          *(_WORD *)(v62 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v67 = Error.localizedDescription.getter();
          *(void *)(v62 + 14) = sub_100110D58(v67, v68, (uint64_t *)&v103);
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "Self-healing: Error deleting stale asset file at: %s: %s", (uint8_t *)v62, 0x16u);
          swift_arrayDestroy();
          a1 = v98;
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          (*v100)(v89, v102);
          uint64_t v27 = v66;
          v82(v94, v66);
          unint64_t v21 = v95;
          uint64_t v10 = v96;
LABEL_6:
          if (v101 == ++v25)
          {
            swift_bridgeObjectRelease();
            a2 = v79;
            goto LABEL_29;
          }
        }
        id v47 = v103;
        uint64_t v48 = v86;
        defaultLogger()();
        (*v87)(v21, v41, v27);
        unint64_t v49 = Logger.logObject.getter();
        uint64_t v50 = v21;
        uint64_t v51 = v27;
        os_log_type_t v52 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v49, v52))
        {
          uint64_t v53 = v50;
          uint64_t v54 = swift_slowAlloc();
          id v103 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = v92;
          uint64_t v55 = URL.absoluteString.getter();
          *(void *)(v54 + 4) = sub_100110D58(v55, v56, (uint64_t *)&v103);
          swift_bridgeObjectRelease();
          uint64_t v57 = *v91;
          (*v91)(v53, v51);
          _os_log_impl((void *)&_mh_execute_header, v49, v52, "Self-healing: Deleted stale asset file at: %s", (uint8_t *)v54, 0xCu);
          swift_arrayDestroy();
          uint64_t v10 = v96;
          swift_slowDealloc();
          swift_slowDealloc();

          (*v100)(v86, v102);
          v57(v94, v51);
          uint64_t v26 = (uint64_t)v85;
          uint64_t v27 = v51;
          unint64_t v21 = v53;
        }
        else
        {

          uint64_t v69 = *v91;
          (*v91)(v50, v51);

          (*v100)(v48, v102);
          v69(v41, v51);
          uint64_t v26 = (uint64_t)v85;
          uint64_t v27 = v51;
          unint64_t v21 = v50;
        }
        goto LABEL_25;
      }
      __break(1u);
LABEL_43:
      __break(1u);
    }
  }
  swift_bridgeObjectRelease();
LABEL_29:
  if (v80)
  {
    sub_100532378();
    swift_bridgeObjectRetain();
    uint64_t v71 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    a1 = v71;
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_100532378();
    uint64_t v71 = a1;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
    if (!v72) {
      return swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v72 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v72) {
      return swift_bridgeObjectRelease_n();
    }
  }
  if (v72 < 1) {
    goto LABEL_43;
  }
  uint64_t v73 = 0;
  int v74 = *(void **)(a2 + 16);
  unint64_t v75 = v71 & 0xC000000000000001;
  do
  {
    if (v75) {
      id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v76 = *(id *)(a1 + 8 * v73 + 32);
    }
    uint64_t v77 = v76;
    ++v73;
    [v74 deleteObject:v76];
  }
  while (v72 != v73);
  return swift_bridgeObjectRelease_n();
}

unint64_t sub_100532378()
{
  unint64_t result = qword_1007325A0;
  if (!qword_1007325A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1007325A0);
  }
  return result;
}

unint64_t sub_1005323B8()
{
  unint64_t result = qword_100732250;
  if (!qword_100732250)
  {
    type metadata accessor for NSFastEnumerationIterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100732250);
  }
  return result;
}

double sub_100532414()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v36 = *(void *)(v0 - 8);
  uint64_t v37 = v0;
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v36 - v4;
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [self standardUserDefaults];
  v11._object = (void *)0x8000000100653D90;
  v11._uint64_t countAndFlagsBits = 0xD00000000000004CLL;
  Swift::String_optional v12 = NSUserDefaults.internalString(forKey:)(v11);

  if (!v12.value._object) {
    goto LABEL_27;
  }
  v41[0] = v12;
  static CharacterSet.whitespaces.getter();
  sub_1000B5358();
  uint64_t v13 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v16 = swift_bridgeObjectRelease();
  uint64_t v17 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v17 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v39[0] = 0;
  uint64_t v18 = __chkstk_darwin(v16);
  *(&v36 - 2) = (uint64_t)v39;
  if ((v15 & 0x1000000000000000) != 0 || !(v15 & 0x2000000000000000 | v13 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
  }
  else
  {
    __chkstk_darwin(v18);
    *(&v36 - 2) = (uint64_t)sub_100130918;
    *(&v36 - 1) = v20;
    if ((v15 & 0x2000000000000000) != 0)
    {
      v41[0].value._uint64_t countAndFlagsBits = v13;
      v41[0].value._object = (void *)(v15 & 0xFFFFFFFFFFFFFFLL);
      if v13 <= 0x20u && ((0x100003E01uLL >> v13))
      {
        BOOL v24 = 0;
        uint64_t v22 = v37;
      }
      else
      {
        uint64_t v23 = (unsigned char *)_swift_stdlib_strtod_clocale();
        uint64_t v22 = v37;
        if (v23) {
          BOOL v24 = *v23 == 0;
        }
        else {
          BOOL v24 = 0;
        }
      }
      LOBYTE(v38[0]) = v24;
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    if ((v13 & 0x1000000000000000) != 0) {
      uint64_t v21 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v21 = _StringObject.sharedUTF8.getter();
    }
    LOBYTE(v38[0]) = sub_100017C00(v21, v19, (void (*)(uint64_t *__return_ptr))sub_100130934) & 1;
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = v37;
LABEL_20:
  if (v38[0])
  {
    uint64_t v25 = v39[0];
    defaultLogger()();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v28 = 134217984;
      v41[0].value._uint64_t countAndFlagsBits = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "MobileDocumentReaderAuthenticationSessionRefreshThresholdProvider found override value for tokenlessCertificateMinimumRefreshThreshold: %f", v28, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v22);
    return *(double *)&v25;
  }
  defaultLogger()();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "MobileDocumentReaderAuthenticationSessionRefreshThresholdProvider unable to parse tokenlessCertificateMinimumRefreshThreshold override in settings; using configured value from server",
      v31,
      2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v36 + 8))(v3, v22);
LABEL_27:
  if (qword_10071F4E0 != -1) {
    swift_once();
  }
  id v32 = *(os_unfair_lock_s **)(qword_100760360 + 56);
  uint64_t v33 = (uint64_t)&v32[4];
  os_log_type_t v34 = v32 + 112;
  os_unfair_lock_lock(v32 + 112);
  sub_1002AC168(v33, (uint64_t)v41);
  os_unfair_lock_unlock(v34);
  sub_100044C64((uint64_t)v41, (uint64_t)v38);
  sub_100044C64((uint64_t)v38, (uint64_t)v39);
  if sub_100044CCC((uint64_t)v39) == 1 || (sub_100044D90(v38), (v40)) {
    uint64_t v25 = 0x40F5180000000000;
  }
  else {
    uint64_t v25 = v39[40];
  }
  return *(double *)&v25;
}

ValueMetadata *type metadata accessor for MobileDocumentReaderAuthenticationSessionRefreshThresholdProvider()
{
  return &type metadata for MobileDocumentReaderAuthenticationSessionRefreshThresholdProvider;
}

id sub_1005329E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100533050(a1, a2);
  id v5 = (id)v4;
  if (!v3 && !v4)
  {
    type metadata accessor for StoredMobileDocumentReaderApplicationInstallation();
    id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:*(void *)(v2 + 16)];
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setApplicationIdentifier:v6];

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v5 setInstallationIdentifier:isa];
  }
  return v5;
}

id sub_100532AAC()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = *(void **)(v0 + 16);
  v18[0] = 0;
  if ([v5 save:v18]) {
    return v18[0];
  }
  id v7 = v18[0];
  uint64_t v8 = _convertNSErrorToError(_:)();

  swift_willThrow();
  v18[0] = 0;
  v18[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v9._object = (void *)0x8000000100653E50;
  v9._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
  String.append(_:)(v9);
  v17[4] = v8;
  sub_100007764((uint64_t *)&unk_100723450);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
  sub_100007764((uint64_t *)&unk_1007225C0);
  id v10 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100610730;
  uint64_t v13 = (uint64_t *)(v12 + v11 + v10[14]);
  uint64_t v14 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  uint64_t v15 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v12 + v11, v14, v15);
  swift_getErrorValue();
  swift_errorRetain();
  uint64_t v16 = dispatch thunk of Error._code.getter();
  _OWORD v13[3] = (uint64_t)&type metadata for Int;
  uint64_t *v13 = v16;
  sub_10015C504(v12);
  type metadata accessor for DIPError();
  sub_1005348C0((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return (id)swift_errorRelease();
}

unint64_t sub_100532E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate();
  id v7 = (void *)static StoredMobileDocumentReaderAuthenticationCertificate.fetchRequest()();
  sub_100025C28(0, (unint64_t *)&qword_100723430);
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100611020;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v9 = sub_1000E4DF8();
  *(void *)(v8 + 32) = 0xD000000000000011;
  *(void *)(v8 + 40) = 0x800000010064A620;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v9;
  *(void *)(v8 + 64) = v9;
  *(void *)(v8 + 72) = a1;
  *(void *)(v8 + 80) = a2;
  swift_bridgeObjectRetain();
  id v10 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v10];

  [v7 setFetchLimit:1];
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {

    return v4;
  }
  unint64_t v12 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_9:
      swift_bridgeObjectRelease();

      return v4;
    }
  }
  if ((v12 & 0xC000000000000001) != 0)
  {
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v13 = *(id *)(v12 + 32);
LABEL_8:
    uint64_t v4 = (uint64_t)v13;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

unint64_t sub_100533050(uint64_t a1, uint64_t a2)
{
  type metadata accessor for StoredMobileDocumentReaderApplicationInstallation();
  uint64_t v3 = (void *)static StoredMobileDocumentReaderApplicationInstallation.fetchRequest()();
  sub_100025C28(0, (unint64_t *)&qword_100723430);
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100611000;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v5 = sub_1000E4DF8();
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 32) = 0xD000000000000016;
  *(void *)(v4 + 40) = 0x8000000100653F20;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  *(void *)(v4 + 96) = sub_100025C28(0, &qword_100732438);
  uint64_t v7 = sub_100534C0C((unint64_t *)&unk_100732440, &qword_100732438);
  *(void *)(v4 + 72) = isa;
  *(void *)(v4 + 136) = &type metadata for String;
  *(void *)(v4 + 144) = v5;
  *(void *)(v4 + 104) = v7;
  *(void *)(v4 + 112) = 0xD000000000000015;
  *(void *)(v4 + 120) = 0x800000010064A680;
  *(void *)(v4 + 176) = &type metadata for String;
  *(void *)(v4 + 184) = v5;
  *(void *)(v4 + 152) = a1;
  *(void *)(v4 + 160) = a2;
  swift_bridgeObjectRetain();
  uint64_t v8 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v8];

  [v3 setFetchLimit:1];
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v13)
  {

    return v5;
  }
  unint64_t v10 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v5 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
    {
LABEL_9:
      swift_bridgeObjectRelease();

      return v5;
    }
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v10 + 32);
LABEL_8:
    unint64_t v5 = (unint64_t)v11;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

unint64_t sub_1005332BC()
{
  uint64_t v2 = v0;
  type metadata accessor for StoredMobileDocumentReaderSigningKey();
  uint64_t v3 = (void *)static StoredMobileDocumentReaderSigningKey.fetchRequest()();
  sub_100025C28(0, (unint64_t *)&qword_100723430);
  sub_100007764((uint64_t *)&unk_100726430);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100611020;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000E4DF8();
  *(void *)(v4 + 32) = 0x626F6C4279656BLL;
  *(void *)(v4 + 40) = 0xE700000000000000;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v4 + 96) = sub_100025C28(0, (unint64_t *)&unk_10072F328);
  *(void *)(v4 + 104) = sub_100534C0C(&qword_100732430, (unint64_t *)&unk_10072F328);
  *(void *)(v4 + 72) = isa;
  NSString v6 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v6];

  [v3 setFetchLimit:1];
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return v2;
  }
  unint64_t v8 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
    {
LABEL_9:
      swift_bridgeObjectRelease();

      return v2;
    }
  }
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v9 = *(id *)(v8 + 32);
LABEL_8:
    uint64_t v2 = (uint64_t)v9;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1005334E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  NSString v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)AsyncCoreDataStore.container.getter();
  if (v1)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain();
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1005348C0((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    id v9 = v7;
    id v10 = [v7 newBackgroundContext];

    type metadata accessor for MobileDocumentReaderDataContext();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v10;
    *a1 = result;
  }
  return result;
}

uint64_t sub_1005336F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_100533718, 0, 0);
}

uint64_t sub_100533718()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = (void *)swift_allocObject();
  v0[7] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100533818;
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[2];
  return AsyncCoreDataContainer.write<A>(_:)(v7, &unk_100732420, v4, v6);
}

uint64_t sub_100533818()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100534CB0, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100533954(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = *a2;
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100025D64;
  return v8(a1, v5);
}

uint64_t sub_100533A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_100533A64, 0, 0);
}

uint64_t sub_100533A64()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = (void *)swift_allocObject();
  v0[7] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100533818;
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[2];
  return AsyncCoreDataContainer.read<A>(_:)(v7, &unk_100732408, v4, v6);
}

uint64_t sub_100533B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_100533B8C, 0, 0);
}

uint64_t sub_100533B8C()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = (void *)swift_allocObject();
  v0[7] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100533818;
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[2];
  return AsyncCoreDataContainer.performWrite<A>(_:)(v7, sub_100534C80, v4, v6);
}

uint64_t sub_100533C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_100533CB4, 0, 0);
}

uint64_t sub_100533CB4()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = (void *)swift_allocObject();
  v0[7] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100533DB4;
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[2];
  return AsyncCoreDataContainer.performRead<A>(_:)(v7, sub_100534970, v4, v6);
}

uint64_t sub_100533DB4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100533EF0, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100533EF0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for MobileDocumentReaderDataContainer()
{
  return self;
}

uint64_t sub_100533F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v10 = (void *)swift_allocObject();
  *(void *)(v5 + 16) = v10;
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v11 = *v4;
  swift_retain();
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v12;
  void *v12 = v5;
  v12[1] = sub_100534C5C;
  void v12[2] = a1;
  v12[5] = a4;
  v12[6] = v11;
  v12[3] = &unk_100732410;
  v12[4] = v10;
  return _swift_task_switch(sub_100533718, 0, 0);
}

uint64_t sub_100534088(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)(v3 + 16) = a2;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_100118AC0;
  return v7(a1, v3 + 16);
}

uint64_t sub_100534174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v10 = (void *)swift_allocObject();
  *(void *)(v5 + 16) = v10;
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v11 = *v4;
  swift_retain();
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v12;
  void *v12 = v5;
  v12[1] = sub_100534C5C;
  void v12[2] = a1;
  v12[5] = a4;
  v12[6] = v11;
  v12[3] = &unk_1007323F0;
  v12[4] = v10;
  return _swift_task_switch(sub_100533A64, 0, 0);
}

uint64_t sub_100534284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v10 = (void *)swift_allocObject();
  *(void *)(v5 + 16) = v10;
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v11 = *v4;
  swift_retain();
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v12;
  void *v12 = v5;
  v12[1] = sub_100534C5C;
  void v12[2] = a1;
  v12[5] = a4;
  v12[6] = v11;
  v12[3] = sub_100534C98;
  v12[4] = v10;
  return _swift_task_switch(sub_100533B8C, 0, 0);
}

uint64_t sub_100534394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v10 = (void *)swift_allocObject();
  *(void *)(v5 + 16) = v10;
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v11 = *v4;
  swift_retain();
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v12;
  void *v12 = v5;
  v12[1] = sub_1005344A4;
  void v12[2] = a1;
  v12[5] = a4;
  v12[6] = v11;
  v12[3] = sub_100534940;
  v12[4] = v10;
  return _swift_task_switch(sub_100533CB4, 0, 0);
}

uint64_t sub_1005344A4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1005345B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_10053467C, 0, 0);
}

uint64_t sub_10053467C()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = (void *)swift_allocObject();
  v0[10] = v5;
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  sub_100143A24(v1);
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[11] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100143CB0;
  uint64_t v7 = v0[9];
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[2];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v9, v7, sub_1001446DC, v5, v8);
}

uint64_t type metadata accessor for MobileDocumentReaderDataContext()
{
  return self;
}

uint64_t sub_1005347B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10000C494;
  return sub_1005345B4(a1, a2, a3, a4);
}

uint64_t sub_100534878(uint64_t a1, uint64_t a2)
{
  return sub_1005348C0(qword_1007323B0, a2, (void (*)(uint64_t))type metadata accessor for MobileDocumentReaderDataContext);
}

uint64_t sub_1005348C0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100534908()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100534940(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 24);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_100534970(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 24))(*a1);
}

uint64_t sub_10053499C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(v2 + 24);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100025D64;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1007323E8 + dword_1007323E8);
  return v8(a1, a2, v6);
}

uint64_t sub_100534A6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 24);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100025D64;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_100732400 + dword_100732400);
  return v8(a1, a2, v6);
}

uint64_t sub_100534B3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 24);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000C494;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_100732400 + dword_100732400);
  return v8(a1, a2, v6);
}

uint64_t sub_100534C0C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100025C28(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100534C80(void *a1)
{
  return sub_100534970(a1);
}

uint64_t sub_100534C98(uint64_t a1)
{
  return sub_100534940(a1);
}

uint64_t sub_100534CB4(void (*a1)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(&v10, v5);
  if (!v1) {
    return v10;
  }
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return swift_errorRelease();
}

void sub_100534E68(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v42 = a7;
  uint64_t v43 = a6;
  uint64_t v11 = type metadata accessor for DIPError.Code();
  uint64_t v44 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v47 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2 || (a4 & 1) != 0)
  {
LABEL_9:
    sub_100100188();
    if (v7) {
      return;
    }
    unint64_t v27 = v26;
    if (v26)
    {
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v36) {
          goto LABEL_13;
        }
      }
      else if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_13:
        if ((v27 & 0xC000000000000001) != 0)
        {
          id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          id v28 = *(id *)(v27 + 32);
        }
        uint64_t v29 = v28;
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, void, uint64_t))(v44 + 104))(v47, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v11);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  uint64_t v17 = v14;
  swift_bridgeObjectRetain();
  sub_10010096C(a1, a2);
  if (v7)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (!v18)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  os_log_type_t v41 = v18;
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  int v40 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    os_log_t v38 = v19;
    uint64_t v22 = v21;
    uint64_t v39 = swift_slowAlloc();
    v46[0] = v39;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v37 = v22 + 4;
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_100110D58(a1, a2, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v37 = v22 + 14;
    uint64_t v23 = IdentityTarget.debugDescription.getter();
    uint64_t v45 = sub_100110D58(v23, v24, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v25 = v38;
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v40, "fetchProofingActionsStatus called for proofingSessionID: %s and target: %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v16, v13);
  uint64_t v29 = v41;
LABEL_19:
  os_log_type_t v30 = (unsigned char *)(v43 + 16);
  swift_beginAccess();
  unsigned char *v30 = 1;
  id v31 = v29;
  [v31 proofingActionStatus];
  uint64_t v32 = IdentityProofingActionStatus.init(rawValue:)();
  if (v33)
  {
    (*(void (**)(char *, void, uint64_t))(v44 + 104))(v47, enum case for DIPError.Code.storedProofingActionStatusDoesntExist(_:), v11);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    uint64_t v34 = v32;
    uint64_t v35 = (uint64_t *)(v42 + 16);

    swift_beginAccess();
    *uint64_t v35 = v34;
  }
}

void sub_10053546C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a6;
  uint64_t v39 = a5;
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v40 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v43;
  sub_100100478(a2, a3);
  if (!v16)
  {
    v32[1] = 0;
    uint64_t v33 = a2;
    uint64_t v34 = a4;
    uint64_t v35 = v13;
    uint64_t v36 = v12;
    uint64_t v37 = v9;
    uint64_t v43 = v11;
    if (v17)
    {
      unint64_t v18 = a3;
      v32[0] = v17;
      uint64_t v19 = (unsigned char *)(v39 + 16);
      os_log_type_t v20 = v15;
      defaultLogger()();
      unint64_t v21 = v18;
      swift_bridgeObjectRetain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        v42[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v41 = sub_100110D58(v33, v21, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v24 + 12) = 2080;
        uint64_t v25 = IdentityTarget.debugDescription.getter();
        uint64_t v41 = sub_100110D58(v25, v26, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "fetchProofingActionsStatus called for state: %s and target: %s", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v36);
      swift_beginAccess();
      unsigned char *v19 = 1;
      id v27 = v32[0];
      [v27 proofingActionStatus];
      uint64_t v28 = IdentityProofingActionStatus.init(rawValue:)();
      if (v30)
      {
        (*(void (**)(char *, void, uint64_t))(v40 + 104))(v43, enum case for DIPError.Code.storedProofingActionStatusDoesntExist(_:), v37);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
      else
      {
        uint64_t v31 = v28;
        uint64_t v29 = v38;

        swift_beginAccess();
        *(void *)(v29 + 16) = v31;
      }
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v40 + 104))(v43, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v37);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

void sub_1005359B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v71 = a6;
  uint64_t v68 = a5;
  uint64_t v69 = a7;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v70 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v66 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v18 = (char *)&v66 - v17;
  __chkstk_darwin(v16);
  os_log_type_t v20 = (char *)&v66 - v19;
  uint64_t v21 = v72;
  sub_100100478((uint64_t)a2, a3);
  uint64_t v72 = v21;
  if (!v21)
  {
    os_log_type_t v23 = v22;
    unint64_t v24 = v71;
    uint64_t v66 = v12;
    id v67 = a2;
    if (v22)
    {
      id v25 = [v22 proofingSessionID];
      unint64_t v26 = v23;
      uint64_t v27 = v9;
      unint64_t v28 = a3;
      if (v25)
      {
        uint64_t v29 = v25;
        uint64_t v30 = v9;
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = v32;

        [v26 target];
        uint64_t v34 = IdentityTarget.init(rawValue:)();
        id v35 = v26;
        if (v36)
        {
          swift_bridgeObjectRelease();
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          unint64_t v56 = Logger.logObject.getter();
          os_log_type_t v57 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v56, v57))
          {
            id v58 = (uint8_t *)swift_slowAlloc();
            uint64_t v59 = swift_slowAlloc();
            uint64_t v71 = v27;
            v73[0] = v59;
            *(_DWORD *)id v58 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v74 = sub_100110D58((uint64_t)v67, v28, v73);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v56, v57, "Target for state %{public}s doesn't exist", v58, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v71);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v27);
          }
        }
        else
        {
          uint64_t v37 = v34;
          unint64_t v38 = v24;
          uint64_t v39 = v69;
          if (!v38)
          {
LABEL_25:

            swift_beginAccess();
            _OWORD v39[2] = v31;
            v39[3] = v33;
            v39[4] = v37;
            swift_bridgeObjectRelease();
            return;
          }
          uint64_t v40 = v31;
          uint64_t v41 = v35;
          unint64_t v42 = v38;
          swift_bridgeObjectRetain();
          id v67 = v41;
          id v43 = [v41 pairingID];
          if (!v43)
          {
LABEL_24:
            swift_bridgeObjectRelease();
            id v35 = v67;
            uint64_t v31 = v40;
            goto LABEL_25;
          }
          uint64_t v44 = v43;
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v47 = v46;

          if (v45 == v68 && v47 == v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            goto LABEL_24;
          }
          swift_bridgeObjectRelease();
          long long v60 = v66;
          defaultLogger()();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          os_log_type_t v61 = Logger.logObject.getter();
          os_log_type_t v62 = static os_log_type_t.info.getter();
          int v63 = v62;
          if (os_log_type_enabled(v61, v62))
          {
            uint64_t v64 = swift_slowAlloc();
            LODWORD(v69) = v63;
            uint64_t v65 = v64;
            v73[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v65 = 136446466;
            swift_bridgeObjectRetain();
            uint64_t v74 = sub_100110D58(v45, v47, v73);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v65 + 12) = 2082;
            swift_bridgeObjectRetain();
            uint64_t v74 = sub_100110D58(v68, v42, v73);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v69, "PairingID mismatch, storedPairingID: %{public}s, passedPairingID: %{public}s", (uint8_t *)v65, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v70 + 8))(v66, v30);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();

            (*(void (**)(char *, uint64_t))(v70 + 8))(v60, v30);
          }
        }
      }
      else
      {
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        os_log_type_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = (uint8_t *)swift_slowAlloc();
          uint64_t v55 = swift_slowAlloc();
          uint64_t v71 = v27;
          v73[0] = v55;
          *(_DWORD *)uint64_t v54 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v74 = sub_100110D58((uint64_t)v67, v28, v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "ProofingSessionID for state %{public}s doesn't exist", v54, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v70 + 8))(v18, v71);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v70 + 8))(v18, v27);
        }
      }
    }
    else
    {
      defaultLogger()();
      unint64_t v48 = a3;
      swift_bridgeObjectRetain_n();
      unint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        v73[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v74 = sub_100110D58((uint64_t)v67, v48, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Proofing Session for state %{public}s doesn't exist", v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v70 + 8))(v20, v9);
    }
  }
}

void sub_100536220(void *a1@<X8>)
{
  id v3 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithEntityName:v4];

  sub_100007764(&qword_1007232F0);
  unint64_t v6 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {
  }
  else
  {
    uint64_t v7 = sub_10052F04C(v6);

    swift_bridgeObjectRelease();
    if (v7) {
      *a1 = v7;
    }
    else {
      *a1 = _swiftEmptyArrayStorage;
    }
  }
}

void sub_100536310(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v48 - v13;
  sub_100100188();
  if (v4) {
    return;
  }
  unint64_t v16 = v15;
  if (!v15) {
    goto LABEL_23;
  }
  id v58 = a4;
  unint64_t v59 = a3;
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v44) {
      goto LABEL_22;
    }
  }
  else if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if ((v16 & 0xC000000000000001) != 0)
  {
    id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v17 = *(id *)(v16 + 32);
  }
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  id v19 = [v18 state];
  if (!v19)
  {

    goto LABEL_23;
  }
  os_log_type_t v20 = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v57 = v22;

  id v23 = [v18 proofingSessionID];
  if (!v23)
  {

    goto LABEL_22;
  }
  unint64_t v24 = v23;
  id v56 = v18;
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  if (v21 == a2 && v57 == v59) {
    goto LABEL_14;
  }
  unint64_t v27 = v26;
  unint64_t v28 = v59;
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    unint64_t v59 = v57;
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_23:
    defaultLogger()();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      unint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "No phone proofing sessions exist in the database", v47, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return;
  }
  uint64_t v54 = v21;
  uint64_t v29 = v58 + 2;
  defaultLogger()();
  unint64_t v30 = v27;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  int v53 = v32;
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    os_log_type_t v52 = v29;
    uint64_t v34 = v33;
    uint64_t v51 = swift_slowAlloc();
    v60[0] = v51;
    *(_DWORD *)uint64_t v34 = 136315650;
    unint64_t v50 = v34 + 4;
    swift_bridgeObjectRetain();
    uint64_t v61 = sub_100110D58(v55, v30, v60);
    os_log_t v49 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 12) = 2082;
    v48[1] = v34 + 14;
    unint64_t v50 = v30;
    unint64_t v35 = v57;
    swift_bridgeObjectRetain();
    uint64_t v61 = sub_100110D58(v54, v35, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v61 = sub_100110D58(a2, v28, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v36 = v54;
    swift_bridgeObjectRelease_n();
    os_log_t v37 = v49;
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v53, "Pending proofing session exist in the database with proofingSessionID: %s, storedState: %{public}s, currentState: %{public}s", (uint8_t *)v34, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v38 = v8;
    uint64_t v39 = v55;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v38);
    unint64_t v40 = v57;
    unint64_t v30 = v50;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    unint64_t v40 = v57;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    uint64_t v36 = v54;
    uint64_t v39 = v55;
  }
  swift_beginAccess();
  uint64_t v41 = v58;
  uint64_t v42 = v58[2];
  uint64_t v43 = v58[3];
  v58[2] = v39;
  v41[3] = v30;
  v41[4] = v36;
  v41[5] = v40;
  sub_1001D5FEC(v42, v43);
}

void *sub_1005368A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)sub_100100D10(a2, (uint64_t)a3);
  if (!v4)
  {
    uint64_t v13 = result;
    if (result)
    {
      id v14 = [result proofingSessionID];
      if (v14)
      {
        unint64_t v15 = v14;
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;
      }
      else
      {

        uint64_t v16 = 0;
        uint64_t v18 = 0;
      }
      swift_beginAccess();
      *(void *)(a4 + 16) = v16;
      *(void *)(a4 + 24) = v18;
      return (void *)swift_bridgeObjectRelease();
    }
    else
    {
      v21[1] = 0;
      v21[2] = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v19._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
      v19._object = (void *)0x80000001006541B0;
      String.append(_:)(v19);
      v20._uint64_t countAndFlagsBits = a2;
      v20._object = a3;
      String.append(_:)(v20);
      (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.internalError(_:), v8);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (void *)swift_willThrow();
    }
  }
  return result;
}

void sub_100536B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DIPError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001002FC(a2, a3);
  if (v4) {
    return;
  }
  unint64_t v13 = v12;
  if (!v12)
  {
LABEL_14:
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v8);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return;
  }
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_5:
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v14 = *(id *)(v13 + 32);
  }
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  id v16 = [v15 learnMoreURLString];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
  }
  else
  {

    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  swift_beginAccess();
  *(void *)(a4 + 16) = v18;
  *(void *)(a4 + 24) = v20;
  swift_bridgeObjectRelease();
}

uint64_t sub_100536DC8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v65 = a4;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)v53 - v13;
  __chkstk_darwin(v12);
  uint64_t v17 = (char *)v53 - v16;
  if (!a2)
  {
    defaultLogger()();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "ProofingSessionID doesn't exist. Cannot look for proofing session.", v22, 2u);
      swift_slowDealloc();
    }

    id v23 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    unint64_t v24 = v17;
    return v23(v24, v9);
  }
  uint64_t v60 = v15;
  swift_bridgeObjectRetain();
  sub_1001002FC(a1, a2);
  if (v4) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v25 = v18;
  if (v18)
  {
    swift_bridgeObjectRelease();
    if (v25 >> 62) {
      goto LABEL_31;
    }
    uint64_t v58 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v58)
    {
      do
      {
        unint64_t v64 = v25 & 0xC000000000000001;
        id v56 = (void (**)(uint64_t, uint64_t))(v10 + 8);
        uint64_t v57 = v9;
        unint64_t v59 = v68;
        uint64_t v9 = 4;
        *(void *)&long long v26 = 136446466;
        long long v54 = v26;
        v53[1] = (char *)&type metadata for Any + 8;
        unint64_t v62 = 0x8000000100630020;
        uint64_t v61 = a3;
        uint64_t v10 = v58;
        unint64_t v63 = v25;
        while (1)
        {
          id v27 = v64 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v25 + 8 * v9);
          unint64_t v28 = v27;
          if (__OFADD__(v9 - 4, 1)) {
            break;
          }
          uint64_t v66 = (uint8_t *)(v9 - 3);
          [v27 target];
          IdentityTarget.init(rawValue:)();
          if ((v29 & 1) == 0)
          {
            uint64_t v30 = v60;
            defaultLogger()();
            uint64_t v31 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v31, v32))
            {
              uint64_t v33 = swift_slowAlloc();
              aBlock[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v33 = v54;
              uint64_t v34 = IdentityProofingActionStatus.debugDescription.getter();
              uint64_t v55 = v5;
              *(void *)(v33 + 4) = sub_100110D58(v34, v35, aBlock);
              swift_bridgeObjectRelease();
              *(_WORD *)(v33 + 12) = 2080;
              uint64_t v36 = IdentityTarget.debugDescription.getter();
              *(void *)(v33 + 14) = sub_100110D58(v36, v37, aBlock);
              uint64_t v5 = v55;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v31, v32, "Storing the current proofing action status to: %{public}s on target: %s", (uint8_t *)v33, 0x16u);
              swift_arrayDestroy();
              a3 = v61;
              swift_slowDealloc();
              swift_slowDealloc();
            }

            (*v56)(v30, v57);
            uint64_t v10 = v58;
          }
          uint64_t v38 = IdentityProofingActionStatus.rawValue.getter();
          id v39 = [v28 managedObjectContext];
          if (v39)
          {
            unint64_t v40 = v39;
            uint64_t v41 = swift_allocObject();
            *(void *)(v41 + 16) = v28;
            *(void *)(v41 + 24) = v38;
            *(unsigned char *)(v41 + 32) = 0;
            unint64_t v25 = swift_allocObject();
            *(void *)(v25 + 16) = sub_100486348;
            *(void *)(v25 + 24) = v41;
            v68[2] = sub_1000E4EA0;
            v68[3] = v25;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            v68[0] = sub_100032314;
            v68[1] = &unk_100708708;
            uint64_t v42 = _Block_copy(aBlock);
            id v43 = v28;
            swift_retain();
            swift_release();
            [v40 performBlockAndWait:v42];

            uint64_t v44 = v42;
            a3 = v61;
            _Block_release(v44);
            LOBYTE(v40) = swift_isEscapingClosureAtFileLocation();
            swift_release();
            swift_release();
            if (v40) {
              goto LABEL_30;
            }
          }
          sub_1000FFAB4();
          if (v5)
          {

            return swift_bridgeObjectRelease();
          }
          uint64_t v45 = type metadata accessor for IdentityManagementSessionDelegate();
          id v46 = [self defaultCenter];
          NSString v47 = String._bridgeToObjectiveC()();
          aBlock[0] = v45;
          sub_100007764((uint64_t *)&unk_10072E590);
          [v46 postNotificationName:v47 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

          swift_unknownObjectRelease();
          ++v9;
          unint64_t v25 = v63;
          if (v66 == (uint8_t *)v10) {
            return swift_bridgeObjectRelease();
          }
        }
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        swift_bridgeObjectRetain();
        uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v58 = v52;
      }
      while (v52);
    }
    return swift_bridgeObjectRelease();
  }
  defaultLogger()();
  swift_bridgeObjectRetain();
  unint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v48, v49))
  {

    swift_bridgeObjectRelease_n();
    id v23 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    unint64_t v24 = v14;
    return v23(v24, v9);
  }
  unint64_t v50 = (uint8_t *)swift_slowAlloc();
  uint64_t v51 = swift_slowAlloc();
  uint64_t v57 = v9;
  uint64_t v55 = 0;
  *(_DWORD *)unint64_t v50 = 136315138;
  uint64_t v66 = v50 + 4;
  aBlock[0] = v51;
  swift_bridgeObjectRetain();
  v68[4] = sub_100110D58(a1, a2, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v48, v49, "Proofing session with %s doesn't exist", v50, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v57);
}

void sub_100537550(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = (void *)type metadata accessor for Logger();
  uint64_t v8 = *(v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001002FC(a2, a3);
  if (!v3)
  {
    unint64_t v12 = v11;
    uint64_t v32 = 0;
    if (v11)
    {
      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v24)
        {
LABEL_5:
          if ((v12 & 0xC000000000000001) != 0)
          {
            uint64_t v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_32;
            }
            uint64_t v13 = *(id *)(v12 + 32);
          }
          uint64_t v7 = v13;
          swift_bridgeObjectRelease();
          id v14 = [v7 uploadAssets];
          if (!v14)
          {

            return;
          }
          uint64_t v10 = (char *)v14;
          sub_100530DA4(v10);
          uint64_t v16 = v15;

          unint64_t v17 = (unint64_t)sub_10052EF50(v16);
          swift_release();
          if (!v17)
          {

            return;
          }
          if (!(v17 >> 62))
          {
            if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              swift_bridgeObjectRetain();
              dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
              sub_100532378();
              unint64_t v18 = v17;
              goto LABEL_13;
            }
            goto LABEL_34;
          }
LABEL_32:
          swift_bridgeObjectRetain();
          uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v28 >= 1)
          {
            sub_100532378();
            swift_bridgeObjectRetain();
            unint64_t v18 = _bridgeCocoaArray<A>(_:)();
            swift_bridgeObjectRelease();
LABEL_13:
            swift_bridgeObjectRelease();
            id v31 = v7;
            if (v18 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
              if (v19) {
                goto LABEL_15;
              }
            }
            else
            {
              uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v19)
              {
LABEL_15:
                if (v19 < 1)
                {
                  __break(1u);
                  return;
                }
                uint64_t v20 = 0;
                os_log_type_t v21 = *(void **)(a1 + 16);
                do
                {
                  if ((v18 & 0xC000000000000001) != 0) {
                    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v22 = *(id *)(v18 + 8 * v20 + 32);
                  }
                  id v23 = v22;
                  ++v20;
                  [v21 deleteObject:v22];
                }
                while (v19 != v20);
              }
            }
            swift_bridgeObjectRelease_n();
            uint64_t v29 = v32;
            sub_1000FFAB4();
            if (v29)
            {
            }
            else
            {
            }
            return;
          }
LABEL_34:

          swift_bridgeObjectRelease();
          return;
        }
      }
      else if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_5;
      }
      swift_bridgeObjectRelease();
    }
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = (uint8_t *)swift_slowAlloc();
      id v31 = (id)swift_slowAlloc();
      id v34 = v31;
      *(_DWORD *)id v27 = 136315138;
      uint64_t v30 = v27 + 4;
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_100110D58(a2, a3, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to delete the uploaded assets for proofingSession with proofingSessionID %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, void *))(v8 + 8))(v10, v7);
  }
}

void sub_100537A00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)sub_100100D10(a2, (uint64_t)a3);
  if (!v5)
  {
    id v14 = v13;
    if (!v13)
    {
      v26[1] = 0;
      _OWORD v26[2] = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v22._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
      v22._object = (void *)0x80000001006541B0;
      String.append(_:)(v22);
      v23._uint64_t countAndFlagsBits = a2;
      v23._object = a3;
      String.append(_:)(v23);
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.internalError(_:), v9);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return;
    }
    [v13 target];
    IdentityTarget.init(rawValue:)();
    if (v15)
    {
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.targetUnavailable(_:), v9);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
    }
    else
    {
      id v16 = [v14 proofingSessionID];
      if (v16)
      {
        unint64_t v17 = v16;
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;

        uint64_t v21 = IdentityTarget.rawValue.getter();
        if (v21 == IdentityTarget.rawValue.getter())
        {
          char v24 = sub_10053E074(v18, v20);
          unint64_t v25 = (BOOL *)(a5 + 16);
          swift_bridgeObjectRelease();

          swift_beginAccess();
          *unint64_t v25 = (v24 & 1) == 0;
          return;
        }
        swift_bridgeObjectRelease();
LABEL_11:

        return;
      }
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.proofingSessionIDUnavailable(_:), v9);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
    }
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_11;
  }
}

void sub_100537E60(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v52 = a1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v51 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v12 = (char *)&v46 - v11;
  __chkstk_darwin(v10);
  id v14 = (char *)&v46 - v13;
  uint64_t v15 = type metadata accessor for DIPError.Code();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v55;
  sub_1001002FC(a2, (uint64_t)a3);
  if (!v19)
  {
    uint64_t v46 = v16;
    uint64_t v47 = v15;
    unint64_t v48 = v18;
    uint64_t v55 = v12;
    uint64_t v52 = v9;
    if (!v20)
    {
      uint64_t v53 = 0;
      unint64_t v54 = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v34._uint64_t countAndFlagsBits = 0xD000000000000039;
      v34._object = (void *)0x80000001006542A0;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = a2;
      v35._object = a3;
      String.append(_:)(v35);
      (*(void (**)(char *, void, uint64_t))(v46 + 104))(v48, enum case for DIPError.Code.internalError(_:), v47);
      sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return;
    }
    unint64_t v21 = v20;
    unint64_t v48 = 0;
    defaultLogger()();
    Swift::String v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      char v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Checking if the number of proofing sessions stored is > 1", v24, 2u);
      swift_slowDealloc();
    }

    uint64_t v25 = v51;
    uint64_t v50 = *(void *)(v50 + 8);
    ((void (*)(char *, uint64_t))v50)(v14, v51);
    unint64_t v26 = v21;
    unint64_t v27 = v21 >> 62;
    uint64_t v28 = v55;
    if (v27)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v30 = (unsigned char *)(v49 + 16);
    if (v29 >= 2)
    {
      defaultLogger()();
      swift_bridgeObjectRetain();
      id v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 134217984;
        uint64_t v28 = v55;
        uint64_t v53 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "The number of proofing sessions stored is %ld", v33, 0xCu);
        uint64_t v25 = v51;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ((void (*)(char *, uint64_t))v50)(v28, v25);
      if (v27)
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
        if (!v40)
        {
LABEL_29:
          swift_bridgeObjectRelease_n();
          return;
        }
      }
      else
      {
        uint64_t v40 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v40) {
          goto LABEL_29;
        }
      }
      if (v40 < 1)
      {
        __break(1u);
        return;
      }
      swift_beginAccess();
      for (uint64_t i = 0; i != v40; ++i)
      {
        if ((v26 & 0xC000000000000001) != 0) {
          id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v42 = *(id *)(v26 + 8 * i + 32);
        }
        id v43 = v42;
        [v42 target:v46];
        IdentityTarget.init(rawValue:)();
        if ((v44 & 1) == 0)
        {
          uint64_t v45 = IdentityTarget.rawValue.getter();
          if (v45 == IdentityTarget.rawValue.getter()) {
            unsigned char *v30 = 1;
          }
        }
      }
      goto LABEL_29;
    }
    uint64_t v36 = v52;
    defaultLogger()();
    swift_bridgeObjectRetain();
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v39 = 134217984;
      swift_bridgeObjectRelease();
      uint64_t v53 = v29;
      uint64_t v36 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "The The number of proofing sessions stored is %ld. Not combo proofing", v39, 0xCu);
      uint64_t v25 = v51;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    ((void (*)(char *, uint64_t))v50)(v36, v25);
    swift_beginAccess();
    unsigned char *v30 = 0;
  }
}

void sub_1005384F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v108 = a5;
  uint64_t v130 = a4;
  uint64_t v111 = a3;
  uint64_t v105 = type metadata accessor for DIPError.Code();
  uint64_t v104 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v106 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v141 - 8);
  uint64_t v10 = __chkstk_darwin(v141);
  uint64_t v107 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v103 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v129 = (char *)&v103 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v103 - v17;
  uint64_t v19 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v19 - 8);
  unint64_t v21 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v121 = (char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v103 - v26;
  uint64_t v124 = a5 + 16;
  uint64_t v28 = *(void *)(a1 + 64);
  uint64_t v133 = a1 + 64;
  uint64_t v29 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v149 = (unint64_t)_swiftEmptyArrayStorage;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  else {
    uint64_t v30 = -1;
  }
  unint64_t v31 = v30 & v28;
  int64_t v134 = (unint64_t)(v29 + 63) >> 6;
  uint64_t v137 = (unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  BOOL v128 = (void (**)(char *, char *, uint64_t))(v25 + 32);
  uint64_t v118 = (void (**)(char *, char *, uint64_t))(v25 + 16);
  uint64_t v135 = (void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v140 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v110 = v147;
  uint64_t v138 = a1;
  swift_bridgeObjectRetain();
  os_log_type_t v32 = 0;
  *(void *)&long long v33 = 136315138;
  long long v123 = v33;
  uint64_t v120 = (char *)&type metadata for Any + 8;
  *(void *)&long long v33 = 136315394;
  long long v117 = v33;
  uint64_t v125 = a2;
  uint64_t v132 = v14;
  unint64_t v122 = v18;
  uint64_t v131 = v21;
  uint64_t v139 = v22;
  uint64_t v136 = v27;
  while (1)
  {
    if (v31)
    {
      uint64_t v142 = (v31 - 1) & v31;
      uint64_t v143 = v32;
      unint64_t v34 = __clz(__rbit64(v31)) | ((void)v32 << 6);
      goto LABEL_23;
    }
    int64_t v35 = (int64_t)(v32 + 1);
    if (__OFADD__(v32, 1))
    {
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      JUMPOUT(0x100539964);
    }
    if (v35 >= v134) {
      goto LABEL_64;
    }
    unint64_t v36 = *(void *)(v133 + 8 * v35);
    unint64_t v37 = v32 + 1;
    if (!v36)
    {
      unint64_t v37 = v32 + 2;
      if ((uint64_t)(v32 + 2) >= v134) {
        goto LABEL_64;
      }
      unint64_t v36 = *(void *)(v133 + 8 * (void)v37);
      if (!v36)
      {
        unint64_t v37 = v32 + 3;
        if ((uint64_t)(v32 + 3) >= v134) {
          goto LABEL_64;
        }
        unint64_t v36 = *(void *)(v133 + 8 * (void)v37);
        if (!v36) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v142 = (v36 - 1) & v36;
    uint64_t v143 = v37;
    unint64_t v34 = __clz(__rbit64(v36)) + ((void)v37 << 6);
LABEL_23:
    uint64_t v39 = *(void *)(*(void *)(v138 + 56) + 8 * v34);
    uint64_t v40 = self;
    swift_bridgeObjectRetain();
    swift_retain();
    NSString v41 = String._bridgeToObjectiveC()();
    id v42 = [v40 insertNewObjectForEntityForName:v41 inManagedObjectContext:*(void *)(a2 + 16)];

    type metadata accessor for StoredUploadAsset();
    id v43 = (void *)swift_dynamicCastClass();
    if (!v43) {

    }
    uint64_t v44 = v39 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL;
    swift_beginAccess();
    sub_10005D4CC(v44, (uint64_t)v21);
    if ((*v137)(v21, 1, v22) == 1)
    {
      sub_10000C6CC((uint64_t)v21, &qword_100720A68);
      goto LABEL_29;
    }
    (*v128)(v27, v21, v22);
    uint64_t v45 = v27;
    uint64_t v46 = *(unsigned __int8 *)(v39 + 48);
    if (v46 == 5)
    {
      (*v135)(v45, v22);
      unint64_t v27 = v45;
LABEL_29:
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = v123;
        unint64_t v50 = 0xEF746E6F7246746ELL;
        uint64_t v51 = 0x656D75636F446469;
        switch(*(unsigned char *)(v39 + 48))
        {
          case 1:
            unint64_t v50 = 0xEE006B636142746ELL;
            break;
          case 2:
            unint64_t v50 = 0xE600000000000000;
            uint64_t v51 = 0x6569666C6573;
            break;
          case 3:
            uint64_t v51 = 0x7373656E6576696CLL;
            unint64_t v50 = 0xED00006F65646956;
            break;
          case 4:
            uint64_t v51 = 0x7261696C69787561;
            unint64_t v50 = 0xEE006F6564695679;
            break;
          case 5:
            uint64_t v51 = 0;
            unint64_t v50 = 0xE000000000000000;
            break;
          default:
            break;
        }
        *(void *)(v49 + 4) = sub_100110D58(v51, v50, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Error occurred in retrieving asset path for assetType: %s", (uint8_t *)v49, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
        swift_bridgeObjectRelease();

        id v14 = v132;
        (*v140)(v132, v141);
        unint64_t v21 = v131;
        uint64_t v22 = v139;
        unint64_t v27 = v136;
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();

        (*v140)(v14, v141);
        uint64_t v22 = v139;
      }
      goto LABEL_6;
    }
    uint64_t v52 = v122;
    defaultLogger()();
    uint64_t v53 = v121;
    (*v118)(v121, v45, v22);
    unint64_t v54 = v52;
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      unint64_t v126 = (void (*)(char *, uint64_t))swift_slowAlloc();
      aBlock[0] = (uint64_t)v126;
      *(_DWORD *)uint64_t v57 = v117;
      unint64_t v58 = 0xEF746E6F7246746ELL;
      uint64_t v59 = 0x656D75636F446469;
      switch((int)v46)
      {
        case 1:
          uint64_t v60 = 0x6B636142746ELL;
          goto LABEL_44;
        case 2:
          unint64_t v58 = 0xE600000000000000;
          uint64_t v59 = 0x6569666C6573;
          break;
        case 3:
          uint64_t v59 = 0x7373656E6576696CLL;
          unint64_t v58 = 0xED00006F65646956;
          break;
        case 4:
          uint64_t v59 = 0x7261696C69787561;
          uint64_t v60 = 0x6F6564695679;
LABEL_44:
          unint64_t v58 = v60 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          break;
        default:
          break;
      }
      *(void *)(v57 + 4) = sub_100110D58(v59, v58, aBlock);
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2080;
      unint64_t v63 = v121;
      uint64_t v64 = URL.absoluteString.getter();
      *(void *)(v57 + 14) = sub_100110D58(v64, v65, aBlock);
      swift_bridgeObjectRelease();
      os_log_type_t v127 = *v135;
      v127(v63, v139);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Persisted assetType: %s with path: %s to database", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v61 = *v140;
      unint64_t v62 = v122;
    }
    else
    {
      os_log_type_t v127 = *v135;
      v127(v53, v22);

      uint64_t v61 = *v140;
      unint64_t v62 = v54;
    }
    unint64_t v126 = v61;
    v61(v62, v141);
    a2 = v125;
    uint64_t v66 = v129;
    if (v43)
    {
      id v67 = v43;
      uint64_t v116 = URL.absoluteString.getter();
      uint64_t v119 = v68;
      unint64_t v69 = 0xEF746E6F7246746ELL;
      uint64_t v70 = 0x656D75636F446469;
      switch(v46)
      {
        case 0:
          goto LABEL_53;
        case 1:
          uint64_t v71 = 0x6B636142746ELL;
          goto LABEL_52;
        case 2:
          unint64_t v69 = 0xE600000000000000;
          uint64_t v70 = 0x6569666C6573;
          goto LABEL_53;
        case 3:
          uint64_t v70 = 0x7373656E6576696CLL;
          unint64_t v69 = 0xED00006F65646956;
          goto LABEL_53;
        case 4:
          uint64_t v70 = 0x7261696C69787561;
          uint64_t v71 = 0x6F6564695679;
LABEL_52:
          unint64_t v69 = v71 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
LABEL_53:
          uint64_t v72 = *(void *)(v39 + 24);
          id v115 = *(id *)(v39 + 16);
          swift_bridgeObjectRetain();
          uint64_t v73 = v67;
          id v74 = [v67 managedObjectContext];
          if (v74)
          {
            unint64_t v75 = v74;
            id v76 = (void *)swift_allocObject();
            uint64_t v77 = v116;
            v76[2] = v73;
            v76[3] = v77;
            v76[4] = v119;
            v76[5] = v70;
            unint64_t v113 = v69;
            id v78 = v115;
            v76[6] = v69;
            v76[7] = v78;
            v76[8] = v72;
            uint64_t v114 = v72;
            uint64_t v79 = swift_allocObject();
            unint64_t v80 = v73;
            *(void *)(v79 + 16) = sub_10053F340;
            *(void *)(v79 + 24) = v76;
            v147[2] = sub_10020AE08;
            uint64_t v148 = v79;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            v147[0] = sub_100032314;
            v147[1] = &unk_100708938;
            long long v81 = _Block_copy(aBlock);
            uint64_t v116 = (uint64_t)v43;
            uint64_t v82 = v81;
            uint64_t v112 = v148;
            id v115 = v73;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_release();
            [v75 performBlockAndWait:v82];

            uint64_t v83 = v82;
            id v43 = (void *)v116;
            _Block_release(v83);
            LOBYTE(v75) = swift_isEscapingClosureAtFileLocation();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a2 = v125;
            swift_release();
            swift_release();
            if (v75) {
              goto LABEL_77;
            }
          }
          else
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v80 = v67;
            a2 = v125;
          }
          id v84 = v80;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v149 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v149 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v66 = v129;
          break;
        default:
          JUMPOUT(0);
      }
    }
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v85, v86))
    {
      uint64_t v87 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v87 = v117;
      uint64_t v88 = *(void *)(v39 + 16);
      unint64_t v89 = *(void *)(v39 + 24);
      swift_bridgeObjectRetain();
      *(void *)(v87 + 4) = sub_100110D58(v88, v89, aBlock);
      swift_release_n();
      swift_bridgeObjectRelease_n();
      unint64_t v90 = v130;
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v87 + 14) = sub_100110D58(v111, v90, aBlock);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "Creating an StoredUploadAsset with recordUUID %s and proofingSessionID: %s", (uint8_t *)v87, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      swift_bridgeObjectRelease();

      uint64_t v91 = v129;
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      uint64_t v91 = v66;
    }
    v126(v91, v141);
    unint64_t v27 = v136;
    uint64_t v22 = v139;
    v127(v136, v139);
    id v14 = v132;
    unint64_t v21 = v131;
LABEL_6:
    unint64_t v31 = v142;
    os_log_type_t v32 = v143;
  }
  os_log_type_t v38 = v32 + 4;
  if ((uint64_t)(v32 + 4) < v134)
  {
    unint64_t v36 = *(void *)(v133 + 8 * (void)v38);
    if (!v36)
    {
      while (1)
      {
        unint64_t v37 = v38 + 1;
        if (__OFADD__(v38, 1)) {
          goto LABEL_76;
        }
        if ((uint64_t)v37 >= v134) {
          goto LABEL_64;
        }
        unint64_t v36 = *(void *)(v133 + 8 * (void)v37);
        ++v38;
        if (v36) {
          goto LABEL_22;
        }
      }
    }
    unint64_t v37 = v32 + 4;
    goto LABEL_22;
  }
LABEL_64:
  swift_release();
  swift_beginAccess();
  uint64_t v92 = v109;
  sub_10010096C(v111, v130);
  if (v92)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v94 = v93;
    if (v93)
    {
      id v95 = [v93 managedObjectContext];
      if (v95)
      {
        uint64_t v96 = v95;
        __chkstk_darwin(v95);
        sub_100007764((uint64_t *)&unk_1007325B0);
        NSManagedObjectContext.performAndWait<A>(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v97 = v107;
      defaultLogger()();
      swift_retain_n();
      unint64_t v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = (uint8_t *)swift_slowAlloc();
        uint64_t v145 = swift_slowAlloc();
        uint64_t v143 = v100;
        *(_DWORD *)uint64_t v100 = v123;
        uint64_t v142 = (uint64_t)(v100 + 4);
        swift_beginAccess();
        uint64_t v101 = IdentityTarget.debugDescription.getter();
        uint64_t v144 = sub_100110D58(v101, v102, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "Saved upload assets to %s proofingSession", v143, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      (*v140)(v97, v141);
      sub_1000FFAB4();
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v104 + 104))(v106, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v105);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

void sub_1005399A4(uint64_t a1)
{
  sub_100100188();
  if (!v1)
  {
    unint64_t v4 = v3;
    if (v3)
    {
      if (v3 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9 > 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
          if (v10)
          {
            uint64_t v5 = v10;
            if (v10 >= 1)
            {
LABEL_7:
              uint64_t v6 = 0;
              do
              {
                if ((v4 & 0xC000000000000001) != 0) {
                  id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v7 = *(id *)(v4 + 8 * v6 + 32);
                }
                uint64_t v8 = v7;
                ++v6;
                id v11 = v7;
                sub_100539AE4(&v11, a1);
              }
              while (v5 != v6);
              goto LABEL_16;
            }
            __break(1u);
          }
LABEL_16:
          swift_bridgeObjectRelease_n();
          sub_1000FFAB4();
          return;
        }
      }
      else
      {
        uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v5)
        {
          swift_bridgeObjectRetain();
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRelease();
    }
  }
}

id sub_100539AE4(id *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = *a1;
  [*a1 target];
  IdentityTarget.init(rawValue:)();
  if (v9)
  {
    uint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    uint64_t v31 = 0xD000000000000016;
    unint64_t v32 = 0x80000001006540D0;
    id v33 = [v8 target];
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    uint64_t v10 = v31;
    unint64_t v12 = v32;
  }
  else
  {
    uint64_t v10 = IdentityTarget.debugDescription.getter();
    unint64_t v12 = v11;
  }
  defaultLogger()();
  id v15 = v8;
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v27 = v5;
    uint64_t v28 = a2;
    uint64_t v29 = v2;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v31 = v26;
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain();
    id v33 = (id)sub_100110D58(v10, v12, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2080;
    id v19 = [v15 pairingID];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;
    }
    else
    {
      unint64_t v23 = 0xE300000000000000;
      uint64_t v21 = 7104878;
    }
    id v33 = (id)sub_100110D58(v21, v23, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Trying to delete proofing session for target : %s with pairingID : %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v27);
    a2 = v28;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  }
  return [*(id *)(a2 + 16) deleteObject:v15];
}

void sub_100539E74(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v161 = (char *)a3;
  uint64_t v160 = a1;
  uint64_t v155 = a4;
  uint64_t v159 = type metadata accessor for Logger();
  uint64_t v153 = *(void (**)(char *, uint64_t))(v159 - 8);
  uint64_t v5 = __chkstk_darwin(v159);
  uint64_t v154 = (char *)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v158 = (char *)&v146 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v157 = (char *)&v146 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v156 = (char *)&v146 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)&v146 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v146 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v146 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v146 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v146 - v25;
  uint64_t v27 = type metadata accessor for DIPError.Code();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v146 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v162;
  unint64_t v32 = (void *)sub_100144704(a2, (uint64_t)v161);
  if (!v31)
  {
    uint64_t v150 = v26;
    uint64_t v151 = 0;
    uint64_t v160 = v24;
    unint64_t v161 = v21;
    uint64_t v162 = v18;
    uint64_t v152 = v15;
    if (v32)
    {
      id v33 = v32;
      [v32 proofingActionStatus];
      uint64_t v34 = IdentityProofingActionStatus.init(rawValue:)();
      if (v35)
      {
        (*(void (**)(char *, void, uint64_t))(v28 + 104))(v30, enum case for DIPError.Code.storedProofingActionStatusDoesntExist(_:), v27);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10000C588();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
      else
      {
        uint64_t v36 = v34;
        id v37 = [v33 state];
        if (v37)
        {
          os_log_type_t v38 = v37;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v40 = v39;
        }
        else
        {
          uint64_t v40 = 0;
        }
        id v41 = [v33 country];
        uint64_t v149 = v40;
        if (v41)
        {
          id v42 = v41;
          uint64_t v43 = v36;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v148 = v44;
        }
        else
        {
          uint64_t v43 = v36;
          uint64_t v148 = 0;
        }
        id v45 = [v33 productIdentifier];
        if (v45)
        {
          uint64_t v46 = v45;
          uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v146 = v48;
          uint64_t v147 = v47;
        }
        else
        {
          uint64_t v146 = 0;
          uint64_t v147 = 0;
        }
        id v49 = [v33 extendedReviewURLString:v146, v147, v148, v149];
        if (v49)
        {
          unint64_t v50 = v49;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        id v51 = [v33 learnMoreURLString];
        if (v51)
        {
          uint64_t v52 = v51;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        uint64_t v53 = (char *)v43;
        id v54 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingConfiguration());
        uint64_t v149 = IdentityProofingConfiguration.init(state:country:targetDevice:actionStatus:credentialIdentifier:productIdentifier:axSettings:accountKeyIdentifier:extendedReviewURLString:learnMoreURLString:supplementalProvisioningData:)();
        uint64_t v55 = v150;
        defaultLogger()();
        id v56 = v33;
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.debug.getter();
        uint64_t v59 = v56;
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v60 = (uint8_t *)swift_slowAlloc();
          uint64_t v148 = swift_slowAlloc();
          uint64_t v164 = v148;
          *(_DWORD *)uint64_t v60 = 136315138;
          id v61 = [v56 proofingSessionID];
          if (v61)
          {
            unint64_t v62 = v61;
            uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v65 = v64;
          }
          else
          {
            unint64_t v65 = 0xE300000000000000;
            uint64_t v63 = 4999502;
          }
          uint64_t v163 = sub_100110D58(v63, v65, &v164);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "Retrieved the configuration for the proofing session with ID -> %s", v60, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v66 = v153;
        id v67 = (void (*)(char *, uint64_t))*((void *)v153 + 1);
        uint64_t v68 = v159;
        v67(v55, v159);
        uint64_t v150 = v53;
        unint64_t v69 = v160;
        defaultLogger()();
        uint64_t v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.debug.getter();
        BOOL v72 = os_log_type_enabled(v70, v71);
        uint64_t v73 = (uint64_t)v161;
        if (v72)
        {
          id v74 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v74 = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "--- start logging proofing status ---", v74, 2u);
          swift_slowDealloc();
        }

        v67(v69, v68);
        defaultLogger()();
        id v75 = v59;
        id v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.debug.getter();
        BOOL v78 = os_log_type_enabled(v76, v77);
        uint64_t v153 = v67;
        uint64_t v160 = (char *)v66 + 8;
        if (v78)
        {
          uint64_t v79 = (uint8_t *)swift_slowAlloc();
          uint64_t v164 = swift_slowAlloc();
          *(_DWORD *)uint64_t v79 = 136315138;
          id v80 = [v75 state];
          if (v80)
          {
            long long v81 = v80;
            uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v84 = v83;
          }
          else
          {
            unint64_t v84 = 0xE300000000000000;
            uint64_t v82 = 4999502;
          }
          uint64_t v163 = sub_100110D58(v82, v84, &v164);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "state: %s", v79, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v68 = v159;
          id v67 = v153;
          v153(v161, v159);
        }
        else
        {

          v67((char *)v73, v68);
        }
        uint64_t v85 = v162;
        defaultLogger()();
        id v86 = v75;
        uint64_t v87 = Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v87, v88))
        {
          unint64_t v89 = (uint8_t *)swift_slowAlloc();
          uint64_t v164 = swift_slowAlloc();
          *(_DWORD *)unint64_t v89 = 136315138;
          id v90 = [v86 country];
          if (v90)
          {
            uint64_t v91 = v90;
            uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v94 = v93;
          }
          else
          {
            unint64_t v94 = 0xE300000000000000;
            uint64_t v92 = 4999502;
          }
          uint64_t v163 = sub_100110D58(v92, v94, &v164);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "country: %s", v89, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          id v95 = v162;
          uint64_t v96 = v68;
          id v67 = v153;
        }
        else
        {

          id v95 = v85;
          uint64_t v96 = v68;
        }
        v67(v95, v96);
        uint64_t v97 = v152;
        defaultLogger()();
        unint64_t v98 = Logger.logObject.getter();
        os_log_type_t v99 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v98, v99))
        {
          uint64_t v100 = (uint8_t *)swift_slowAlloc();
          uint64_t v164 = swift_slowAlloc();
          *(_DWORD *)uint64_t v100 = 136315138;
          uint64_t v101 = IdentityProofingActionStatus.debugDescription.getter();
          uint64_t v163 = sub_100110D58(v101, v102, &v164);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v67 = v153;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v98, v99, "status: %s", v100, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v103 = v152;
        }
        else
        {

          uint64_t v103 = v97;
        }
        v67(v103, v68);
        uint64_t v104 = v156;
        defaultLogger()();
        id v105 = v86;
        uint64_t v106 = Logger.logObject.getter();
        os_log_type_t v107 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v106, v107))
        {
          uint64_t v108 = (uint8_t *)swift_slowAlloc();
          uint64_t v164 = swift_slowAlloc();
          *(_DWORD *)uint64_t v108 = 136315138;
          id v109 = [v105 productIdentifier];
          if (v109)
          {
            uint64_t v110 = v109;
            uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v113 = v112;
          }
          else
          {
            unint64_t v113 = 0xE300000000000000;
            uint64_t v111 = 4999502;
          }
          uint64_t v163 = sub_100110D58(v111, v113, &v164);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v106, v107, "product Identifier: %s", v108, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v114 = v156;
          uint64_t v115 = v68;
          id v67 = v153;
        }
        else
        {

          uint64_t v114 = v104;
          uint64_t v115 = v68;
        }
        v67(v114, v115);
        uint64_t v116 = v157;
        defaultLogger()();
        id v117 = v105;
        uint64_t v118 = Logger.logObject.getter();
        os_log_type_t v119 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v118, v119))
        {
          uint64_t v120 = (uint8_t *)swift_slowAlloc();
          uint64_t v164 = swift_slowAlloc();
          *(_DWORD *)uint64_t v120 = 136315138;
          id v121 = [v117 extendedReviewURLString];
          if (v121)
          {
            unint64_t v122 = v121;
            uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v125 = v124;
          }
          else
          {
            unint64_t v125 = 0xE300000000000000;
            uint64_t v123 = 4999502;
          }
          uint64_t v163 = sub_100110D58(v123, v125, &v164);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v118, v119, "extended review URL: %s", v120, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          unint64_t v126 = v157;
          uint64_t v127 = v68;
          id v67 = v153;
        }
        else
        {

          unint64_t v126 = v116;
          uint64_t v127 = v68;
        }
        v67(v126, v127);
        BOOL v128 = v158;
        defaultLogger()();
        uint64_t v129 = v117;
        uint64_t v130 = Logger.logObject.getter();
        os_log_type_t v131 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v130, v131))
        {
          uint64_t v132 = (uint8_t *)swift_slowAlloc();
          uint64_t v164 = swift_slowAlloc();
          *(_DWORD *)uint64_t v132 = 136315138;
          id v133 = [v129 learnMoreURLString];
          if (v133)
          {
            int64_t v134 = v133;
            uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v137 = v136;
          }
          else
          {
            unint64_t v137 = 0xE300000000000000;
            uint64_t v135 = 4999502;
          }
          uint64_t v163 = sub_100110D58(v135, v137, &v164);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v130, v131, "learnMoreURL: %s", v132, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v138 = v158;
          uint64_t v139 = v68;
          id v67 = v153;
        }
        else
        {

          uint64_t v138 = v128;
          uint64_t v139 = v68;
        }
        v67(v138, v139);
        uint64_t v140 = v154;
        defaultLogger()();
        uint64_t v141 = Logger.logObject.getter();
        os_log_type_t v142 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v141, v142))
        {
          uint64_t v143 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v143 = 0;
          _os_log_impl((void *)&_mh_execute_header, v141, v142, "--- end logging proofing status", v143, 2u);
          swift_slowDealloc();
          uint64_t v144 = v129;
        }
        else
        {
          uint64_t v144 = v141;
          uint64_t v141 = v129;
        }
        uint64_t v145 = v155;

        v67(v140, v68);
        uint64_t *v145 = v149;
      }
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v28 + 104))(v30, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v27);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
}

uint64_t sub_10053B020()
{
  v1[27] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[28] = v2;
  v1[29] = *(void *)(v2 - 8);
  v1[30] = swift_task_alloc();
  return _swift_task_switch(sub_10053B0E0, 0, 0);
}

uint64_t sub_10053B0E0()
{
  id v1 = [self standardUserDefaults];
  v2._uint64_t countAndFlagsBits = 0xD000000000000022;
  v2._object = (void *)0x8000000100654060;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    sub_10053D10C(1);
    sub_10053D10C(2);
    id v11 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingStatus());
    uint64_t v12 = IdentityProofingStatus.init(activeConfigurations:availability:)();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v13(v12);
  }
  else
  {
    if (qword_10071F4B0 != -1) {
      swift_once();
    }
    uint64_t v4 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
    uint64_t v5 = (uint64_t)&v4[4];
    uint64_t v6 = v4 + 52;
    os_unfair_lock_lock(v4 + 52);
    sub_1000262B4(v5, (_OWORD *)(v0 + 16));
    os_unfair_lock_unlock(v6);
    uint64_t v7 = *(void *)(v0 + 216);
    *(void *)(v0 + 248) = *(void *)(v0 + 80);
    swift_retain();
    sub_1000262D0(v0 + 16);
    uint64_t v8 = swift_allocObject();
    *(void *)(v0 + 256) = v8;
    *(void *)(v8 + 16) = sub_10053EA4C;
    *(void *)(v8 + 24) = v7;
    swift_retain_n();
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v9;
    uint64_t v10 = type metadata accessor for IdentityProofingStatus();
    *uint64_t v9 = v0;
    v9[1] = sub_10053B484;
    return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 208, sub_10053E974, v8, v10);
  }
}

uint64_t sub_10053B484()
{
  Swift::String v2 = (void *)*v1;
  v2[34] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10053B5F4, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v3 = v2[26];
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_10053B5F4()
{
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(void, void, void))(v0[29] + 104))(v0[30], enum case for DIPError.Code.internalError(_:), v0[28]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  id v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10053B758(uint64_t *a1@<X8>)
{
  uint64_t v52 = a1;
  uint64_t v62 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v62 - 8);
  uint64_t v3 = __chkstk_darwin(v62);
  uint64_t v57 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v50 = (char *)v49 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  id v51 = (char *)v49 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v49 - v9;
  defaultLogger()();
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "fetching all the proofing sessions to derive the proofing status", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v15 = v2 + 8;
  uint64_t v14 = v16;
  v16(v10, v62);
  uint64_t v17 = (objc_class *)type metadata accessor for IdentityProofingStatus();
  id v18 = objc_allocWithZone(v17);
  uint64_t v19 = (void *)IdentityProofingStatus.init(activeConfigurations:availability:)();
  type metadata accessor for StoredProofingSession();
  uint64_t v20 = (void *)static StoredProofingSession.fetchRequest()();
  uint64_t v21 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return;
  }
  unint64_t v22 = v21;
  id v61 = v17;
  v49[1] = 0;
  id v56 = v14;

  unint64_t v58 = v22;
  uint64_t v59 = v19;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v37 > 0)
    {
      unint64_t v64 = (unint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v27 = v61;
      uint64_t v60 = v38;
      if (v38)
      {
        if (v60 >= 1)
        {
          unint64_t v22 = v58;
LABEL_8:
          uint64_t v24 = 0;
          uint64_t v57 = (char *)(v22 & 0xC000000000000001);
          *(void *)&long long v23 = 136315138;
          long long v54 = v23;
          uint64_t v53 = (char *)&type metadata for Any + 8;
          uint64_t v25 = v56;
          uint64_t v26 = v50;
          uint64_t v55 = v15;
          do
          {
            if (v57) {
              id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v28 = *(id *)(v22 + 8 * v24 + 32);
            }
            uint64_t v29 = v28;
            id v30 = sub_10053EABC(v28);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            defaultLogger()();
            id v31 = v30;
            unint64_t v32 = Logger.logObject.getter();
            os_log_type_t v33 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v32, v33))
            {
              uint64_t v34 = swift_slowAlloc();
              uint64_t v63 = swift_slowAlloc();
              *(_DWORD *)uint64_t v34 = v54;
              uint64_t v35 = IdentityProofingConfiguration.description.getter();
              *(void *)(v34 + 4) = sub_100110D58(v35, v36, &v63);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "Appending proofing configuration - %s", (uint8_t *)v34, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v25 = v56;
              swift_slowDealloc();
            }
            else
            {
            }
            v25(v26, v62);
            ++v24;
            uint64_t v19 = v59;
            uint64_t v27 = v61;
            unint64_t v22 = v58;
          }
          while (v60 != v24);
          goto LABEL_22;
        }
        __break(1u);
      }
LABEL_22:
      swift_bridgeObjectRelease();
      uint64_t v39 = v51;
      defaultLogger()();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        id v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "proofing data exists, send .activeSession as availability with the fetched proofing data", v42, 2u);
        swift_slowDealloc();
      }

      v56(v39, v62);
      id v43 = objc_allocWithZone(v27);
      uint64_t v44 = IdentityProofingStatus.init(activeConfigurations:availability:)();

      *uint64_t v52 = v44;
      return;
    }
  }
  else
  {
    uint64_t v60 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v60)
    {
      unint64_t v64 = (unint64_t)_swiftEmptyArrayStorage;
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  id v45 = v57;
  defaultLogger()();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "proofing data unavailable, mark proofingAvailability as available ", v48, 2u);
    swift_slowDealloc();
  }

  v56(v45, v62);
  *uint64_t v52 = (uint64_t)v19;
}

uint64_t type metadata accessor for IdentityProofingDatabaseProvider()
{
  return self;
}

char *sub_10053BDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  type metadata accessor for IdentityProofingDataContext();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  swift_allocObject();
  sub_1000FF820();
  if (!v2)
  {
    uint64_t v11 = v10;
    uint64_t v15 = v6;
    os_log_type_t v12 = (void *)swift_allocObject();
    void v12[2] = v11;
    v12[3] = a1;
    v12[4] = a2;
    v12[5] = v9;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_10053F1C4, (uint64_t)v12);
    swift_release();
    swift_beginAccess();
    if (*(void *)(v9 + 24))
    {
      uint64_t v8 = *(char **)(v9 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      return v8;
    }
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v8, enum case for DIPError.Code.proofingSessionIDUnavailable(_:), v5);
    sub_1000073C4((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_release();
  }
  swift_release();
  return v8;
}

uint64_t sub_10053C080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v15 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v15);
  uint64_t v16 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPError();
  uint64_t v18 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v7 = __chkstk_darwin(v17);
  __chkstk_darwin(v7);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v9 = v8;
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = a3;
  uint64_t v12 = (uint64_t)v10;
  v10[2] = v14;
  v10[3] = a2;
  v10[4] = v9;
  void v10[5] = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_10053E9CC, v12);
  swift_release();

  return swift_release();
}

uint64_t sub_10053C4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = a3;
  uint64_t v43 = a2;
  uint64_t v41 = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for DIPError();
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v44 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007764(&qword_100723600);
  __chkstk_darwin(v7 - 8);
  uint64_t v50 = type metadata accessor for Logger();
  uint64_t v49 = *(void *)(v50 - 8);
  uint64_t v8 = __chkstk_darwin(v50);
  uint64_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  v39[3] = (char *)v39 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  id v51 = (char *)v39 - v14;
  __chkstk_darwin(v13);
  uint64_t v40 = (char *)v39 - v15;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 3;
  uint64_t v52 = (uint64_t *)(v16 + 16);
  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = 0;
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v48 = v16;
  uint64_t v47 = v17;
  uint64_t v19 = v18;
  v39[1] = v10;
  _OWORD v39[2] = v5;
  uint64_t v20 = (void *)swift_allocObject();
  uint64_t v21 = v41;
  v20[2] = v19;
  v20[3] = v21;
  uint64_t v22 = v42;
  v20[4] = v43;
  v20[5] = v22;
  v20[6] = v17;
  v20[7] = v16;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_10053F258, (uint64_t)v20);
  swift_release();
  swift_release();
  uint64_t v24 = v50;
  uint64_t v25 = v49;
  long long v23 = v52;
  swift_beginAccess();
  if (*(unsigned char *)(v17 + 16) == 1
    && (swift_beginAccess(),
        uint64_t v26 = IdentityProofingActionStatus.rawValue.getter(),
        v26 == IdentityProofingActionStatus.rawValue.getter()))
  {
    uint64_t v27 = v40;
    defaultLogger()();
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "The action status is statusPending as the user is looking for an update too early", v30, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    uint64_t v31 = 1;
  }
  else
  {
    unint64_t v32 = v51;
    defaultLogger()();
    swift_retain_n();
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      v54[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      swift_beginAccess();
      uint64_t v36 = IdentityProofingActionStatus.debugDescription.getter();
      uint64_t v53 = sub_100110D58(v36, v37, v54);
      long long v23 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "The action status is %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v25 + 8))(v51, v24);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v32, v24);
    }
    swift_beginAccess();
    uint64_t v31 = *v23;
  }
  swift_release();
  swift_release();
  return v31;
}

uint64_t sub_10053CE68(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DIPError.Code();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  if (v4)
  {
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.internalError(_:), v9);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v14 = v13;
    uint64_t v15 = swift_allocObject();
    uint64_t v21 = a2;
    uint64_t v16 = v15;
    uint64_t v17 = 1;
    if ((a1 & 3) == 2) {
      uint64_t v17 = 2;
    }
    *(void *)(v15 + 16) = v17;
    uint64_t v18 = (void *)swift_allocObject();
    id v18[2] = a4;
    v18[3] = v14;
    v18[4] = v21;
    v18[5] = a3;
    v18[6] = v16;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_10053F2CC, (uint64_t)v18);
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_10053D10C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  if (v1)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10000C588();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v8 = v7;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = a1;
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_10053EAA0, v9);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_10053D33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  __chkstk_darwin(v4);
  uint64_t v5 = swift_allocObject();
  type metadata accessor for IdentityProofingDataContext();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  swift_allocObject();
  sub_1000FF820();
  uint64_t v7 = v6;
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v7;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_10053F1E8, (uint64_t)v8);
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v9 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v9;
}

uint64_t sub_10053D58C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v41 = a4;
  uint64_t v40 = a3;
  uint64_t v42 = a2;
  uint64_t v39 = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DIPError();
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v43 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007764(&qword_100723600);
  __chkstk_darwin(v8 - 8);
  uint64_t v49 = type metadata accessor for Logger();
  uint64_t v48 = *(void *)(v49 - 8);
  uint64_t v9 = __chkstk_darwin(v49);
  uint64_t v10 = __chkstk_darwin(v9);
  _OWORD v37[2] = (char *)v37 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v50 = (char *)v37 - v13;
  __chkstk_darwin(v12);
  uint64_t v38 = (char *)v37 - v14;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 3;
  id v51 = (uint64_t *)(v15 + 16);
  uint64_t v16 = swift_allocObject();
  *(unsigned char *)(v16 + 16) = 0;
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v47 = v15;
  uint64_t v46 = v16;
  uint64_t v18 = v17;
  v37[1] = v6;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v39;
  uint64_t v20 = v40;
  *(void *)(v19 + 24) = v42;
  *(void *)(v19 + 32) = v20;
  *(unsigned char *)(v19 + 40) = v41 & 1;
  *(void *)(v19 + 48) = v18;
  *(void *)(v19 + 56) = v16;
  *(void *)(v19 + 64) = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_10053F0EC, v19);
  swift_release();
  swift_release();
  uint64_t v22 = v49;
  uint64_t v23 = v48;
  uint64_t v21 = v51;
  swift_beginAccess();
  if (*(unsigned char *)(v16 + 16) == 1
    && (swift_beginAccess(),
        uint64_t v24 = IdentityProofingActionStatus.rawValue.getter(),
        v24 == IdentityProofingActionStatus.rawValue.getter()))
  {
    uint64_t v25 = v38;
    defaultLogger()();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "The action status is statusPending as the user is looking for an update too early", v28, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    uint64_t v29 = 1;
  }
  else
  {
    id v30 = v50;
    defaultLogger()();
    swift_retain_n();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v33 = 136315138;
      swift_beginAccess();
      uint64_t v34 = IdentityProofingActionStatus.debugDescription.getter();
      uint64_t v52 = sub_100110D58(v34, v35, v53);
      uint64_t v21 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "The action status is %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v23 + 8))(v50, v22);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
    }
    swift_beginAccess();
    uint64_t v29 = *v21;
  }
  swift_release();
  swift_release();
  return v29;
}

BOOL sub_10053DF14()
{
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  if (!v0)
  {
    __chkstk_darwin(v1);
    swift_retain();
    sub_100007764((uint64_t *)&unk_100732590);
    NSManagedObjectContext.performAndWait<A>(_:)();
    swift_release();
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v4 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      swift_release();
    }
    return v4 != 0;
  }
  return v2;
}

uint64_t sub_10053E074(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IdentityProofingDataContext();
  char v9 = swift_allocObject();
  sub_1000FF820();
  if (!v2)
  {
    uint64_t v11 = v10;
    uint64_t v19 = v5;
    uint64_t v21 = v6;
    uint64_t v12 = swift_allocObject();
    *(unsigned char *)(v12 + 16) = 0;
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = v11;
    _OWORD v13[3] = a1;
    v13[4] = a2;
    v13[5] = v12;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000FFE3C((uint64_t)sub_10053F168, (uint64_t)v13);
    swift_release();
    defaultLogger()();
    swift_retain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 67109120;
      swift_beginAccess();
      int v20 = *(unsigned __int8 *)(v12 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "isComboProvisioning returning successfully isComboProvisioning -> %{BOOL}d", v17, 8u);
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v19);
    swift_beginAccess();
    char v9 = *(unsigned char *)(v12 + 16);
    swift_release();
  }
  return v9 & 1;
}

uint64_t sub_10053E348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[29] = a3;
  v4[30] = a4;
  v4[27] = a1;
  v4[28] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[31] = v5;
  v4[32] = *(void *)(v5 - 8);
  v4[33] = swift_task_alloc();
  return _swift_task_switch(sub_10053E40C, 0, 0);
}

uint64_t sub_10053E40C()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 52;
  os_unfair_lock_lock(v1 + 52);
  sub_1000262B4(v2, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v3);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 224);
  *(void *)(v0 + 272) = *(void *)(v0 + 80);
  swift_retain();
  sub_1000262D0(v0 + 16);
  uint64_t v8 = (void *)swift_allocObject();
  *(void *)(v0 + 280) = v8;
  v8[2] = v7;
  v8[3] = v6;
  v8[4] = v5;
  v8[5] = v4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 288) = v9;
  *(void *)(v9 + 16) = sub_10053E91C;
  *(void *)(v9 + 24) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v10;
  uint64_t v11 = type metadata accessor for IdentityProofingConfiguration();
  *uint64_t v10 = v0;
  v10[1] = sub_10053E600;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 208, sub_10053E974, v9, v11);
}

uint64_t sub_10053E600()
{
  uint64_t v2 = (void *)*v1;
  v2[38] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10053E770, 0, 0);
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v3 = v2[26];
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v2[1];
    return v4(v3);
  }
}

uint64_t sub_10053E770()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[32];
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for DIPError.Code.internalError(_:), v2);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10053E8DC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10053E91C(char *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100539E74(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_10053E93C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_10053E974@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100217DAC(a1, a2);
}

uint64_t sub_10053E98C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10053E9CC()
{
  return sub_100536DC8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10053E9EC()
{
  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10053EA24()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10053EA34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10053EA44()
{
  return swift_release();
}

void sub_10053EA4C(uint64_t *a1@<X8>)
{
}

uint64_t sub_10053EA68()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10053EAA0()
{
  sub_1005399A4(*(void *)(v0 + 16));
}

id sub_10053EABC(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v48 = v2;
  __chkstk_darwin(v2);
  uint64_t v55 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [a1 proofingSessionID];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  [a1 target:v47];
  uint64_t v9 = IdentityTarget.init(rawValue:)();
  uint64_t v54 = sub_10053D58C(v6, v8, v9, v10 & 1);
  swift_bridgeObjectRelease();
  id v11 = [a1 state];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v52 = v14;
    uint64_t v53 = v13;
  }
  else
  {
    uint64_t v52 = 0;
    uint64_t v53 = 0;
  }
  id v15 = [a1 country];
  if (v15)
  {
    os_log_type_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v18;
    uint64_t v51 = v17;
  }
  else
  {
    uint64_t v50 = 0;
    uint64_t v51 = 0;
  }
  [a1 target];
  uint64_t v49 = IdentityTarget.init(rawValue:)();
  id v19 = [a1 productIdentifier];
  if (v19)
  {
    int v20 = v19;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v21 = [a1 extendedReviewURLString];
  if (v21)
  {
    uint64_t v22 = v21;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v23 = [a1 learnMoreURLString];
  if (v23)
  {
    uint64_t v24 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v25 = [a1 supplementalProvisioningData];
  if (v25)
  {
    uint64_t v26 = v25;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v27 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingConfiguration());
  id v28 = (void *)IdentityProofingConfiguration.init(state:country:targetDevice:actionStatus:credentialIdentifier:productIdentifier:axSettings:accountKeyIdentifier:extendedReviewURLString:learnMoreURLString:supplementalProvisioningData:)();
  uint64_t v29 = v55;
  defaultLogger()();
  id v30 = v28;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315906;
    uint64_t v56 = IdentityProofingConfiguration.targetDevice.getter();
    char v57 = v34 & 1;
    sub_100007764(&qword_1007302D8);
    uint64_t v35 = Optional.debugDescription.getter();
    uint64_t v56 = sub_100110D58(v35, v36, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    uint64_t v56 = IdentityProofingConfiguration.actionStatus.getter();
    char v57 = v37 & 1;
    sub_100007764((uint64_t *)&unk_100732580);
    uint64_t v38 = Optional.debugDescription.getter();
    uint64_t v56 = sub_100110D58(v38, v39, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2080;
    uint64_t v40 = IdentityProofingConfiguration.state.getter();
    if (v41)
    {
      unint64_t v42 = v41;
    }
    else
    {
      uint64_t v40 = 7104878;
      unint64_t v42 = 0xE300000000000000;
    }
    uint64_t v56 = sub_100110D58(v40, v42, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 32) = 2080;
    uint64_t v43 = IdentityProofingConfiguration.country.getter();
    if (v44)
    {
      unint64_t v45 = v44;
    }
    else
    {
      uint64_t v43 = 7104878;
      unint64_t v45 = 0xE300000000000000;
    }
    uint64_t v56 = sub_100110D58(v43, v45, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Adding %s target config with status %s for the state %s and country %s to the list", (uint8_t *)v33, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v47 + 8))(v55, v48);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v48);
  }
  return v30;
}

uint64_t sub_10053F07C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10053F08C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10053F09C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_10053F0EC()
{
  sub_100534E68(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

void sub_10053F118(void *a1@<X8>)
{
}

uint64_t sub_10053F134@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100534CB4(*(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 16));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

void sub_10053F168()
{
  sub_100537E60(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10053F188()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_10053F1C4()
{
  return sub_1005368A8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

void sub_10053F1E8()
{
  sub_100536B14(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10053F208()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10053F258()
{
  sub_10053546C(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_10053F27C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10053F2CC()
{
  sub_1005384F8(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_10053F2F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_10053F340()
{
  sub_100035940(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_10053F354()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for ExtensionPointManager()
{
  return self;
}

unint64_t sub_10053F394@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10053FAA0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10053F3C0()
{
  sub_10053F46C();
  uint64_t v0 = sub_10053F498();
  AnyHashable.init<A>(_:)();
  char v1 = sub_1005D1C9C((uint64_t)v3, v0);
  swift_bridgeObjectRelease();
  sub_1001D90FC((uint64_t)v3);
  return v1 & 1;
}

uint64_t sub_10053F46C()
{
  uint64_t result = *(unsigned __int8 *)(v0 + 64);
  if (result == 4)
  {
    uint64_t result = sub_10053F558(*(void *)(v0 + 56));
    *(unsigned char *)(v0 + 64) = result;
  }
  return result;
}

uint64_t sub_10053F498()
{
  if (v0[9])
  {
    uint64_t v1 = v0[9];
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = v0[5];
    uint64_t v4 = v0[6];
    sub_10000C728(v0 + 2, v3);
    uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(1004, v3, v4);
    v2[9] = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10053F558(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  __chkstk_darwin(v3);
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  sub_10000C728(v1 + 2, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, 3, v4, v5);
  if (*(void *)(v6 + 16))
  {
    uint64_t v12 = 7;
    AnyHashable.init<A>(_:)();
    char v7 = sub_1005D1C9C((uint64_t)v11, v6);
    sub_1001D90FC((uint64_t)v11);
    if (v7)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    else
    {
      uint64_t v12 = 1;
      AnyHashable.init<A>(_:)();
      char v9 = sub_1005D1C9C((uint64_t)v11, v6);
      sub_1001D90FC((uint64_t)v11);
      if (v9)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      else
      {
        uint64_t v12 = 2;
        AnyHashable.init<A>(_:)();
        char v10 = sub_1005D1C9C((uint64_t)v11, v6);
        swift_bridgeObjectRelease();
        sub_1001D90FC((uint64_t)v11);
        if (v10) {
          return 2;
        }
        else {
          return 3;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 3;
  }
}

uint64_t sub_10053F8D8()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DigitalPresentmentLocalAuthenticationManager()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for DigitalPresentmentLocalAuthenticationManager.AuthMechanism(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10053FA10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentLocalAuthenticationManager.AuthMechanism()
{
  return &type metadata for DigitalPresentmentLocalAuthenticationManager.AuthMechanism;
}

unint64_t sub_10053FA4C()
{
  unint64_t result = qword_100732760;
  if (!qword_100732760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100732760);
  }
  return result;
}

unint64_t sub_10053FAA0(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t sub_10053FAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[87] = v8;
  v9[86] = v19;
  v9[85] = a8;
  v9[84] = a7;
  v9[83] = a6;
  v9[82] = a5;
  v9[81] = a4;
  v9[80] = a3;
  v9[79] = a2;
  v9[78] = a1;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  v9[88] = v10;
  v9[89] = *(void *)(v10 - 8);
  v9[90] = swift_task_alloc();
  uint64_t v11 = sub_100007764(&qword_100729C38);
  v9[91] = v11;
  v9[92] = *(void *)(v11 - 8);
  v9[93] = swift_task_alloc();
  uint64_t v12 = sub_100007764(&qword_100729B80);
  v9[94] = v12;
  v9[95] = *(void *)(v12 - 8);
  v9[96] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for DeviceInformationProvider();
  v9[97] = v13;
  v9[98] = *(void *)(v13 - 8);
  v9[99] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for KeystoreKeyType();
  v9[100] = v14;
  v9[101] = *(void *)(v14 - 8);
  v9[102] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Logger();
  v9[103] = v15;
  v9[104] = *(void *)(v15 - 8);
  v9[105] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for UUID();
  v9[106] = v16;
  v9[107] = *(void *)(v16 - 8);
  v9[108] = swift_task_alloc();
  return _swift_task_switch(sub_10053FDCC, 0, 0);
}

uint64_t sub_10053FDCC()
{
  uint64_t v40 = v0;
  uint64_t v1 = *(void *)(v0 + 864);
  uint64_t v2 = *(void *)(v0 + 856);
  uint64_t v3 = *(void *)(v0 + 848);
  uint64_t v4 = *(void *)(v0 + 696);
  uint64_t v5 = *(void *)(v0 + 688);
  uint64_t v6 = *(void *)(v0 + 672);
  uint64_t v7 = *(void *)(v0 + 664);
  uint64_t v8 = (objc_class *)type metadata accessor for IdentitySelfHealer();
  char v9 = (char *)objc_allocWithZone(v8);
  uint64_t v10 = &v9[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
  *(void *)uint64_t v10 = v7;
  *((void *)v10 + 1) = v6;
  *(void *)(v0 + 600) = v9;
  *(void *)(v0 + 608) = v8;
  swift_bridgeObjectRetain();
  id v11 = [super init];
  uint64_t v12 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = v11;

  uint64_t v13 = *(void **)(v4 + 16);
  if (v13) {
    uint64_t v14 = &off_100708438;
  }
  else {
    uint64_t v14 = 0;
  }
  id v15 = v13;
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 872) = v16;
  *(void *)(v0 + 880) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v1, v3);
  *(void *)(v0 + 888) = sub_1002D3994((uint64_t)v13, (uint64_t)v14, 0, 0);
  swift_bridgeObjectRelease();

  if (v5)
  {
    unint64_t v17 = *(void *)(v0 + 688);
    swift_bridgeObjectRetain();
    defaultLogger()();
    swift_bridgeObjectRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v38 = *(void *)(v0 + 840);
      uint64_t v20 = *(void *)(v0 + 832);
      uint64_t v37 = *(void *)(v0 + 824);
      uint64_t v21 = *(void *)(v0 + 680);
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 616) = sub_100110D58(v21, v17, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "lastExecutedActionIdentifier exists %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v38, v37);
    }
    else
    {
      uint64_t v23 = *(void *)(v0 + 840);
      uint64_t v24 = *(void *)(v0 + 832);
      uint64_t v25 = *(void *)(v0 + 824);
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    }
  }
  uint64_t v26 = *(void *)(v0 + 816);
  uint64_t v27 = *(void *)(v0 + 808);
  uint64_t v28 = *(void *)(v0 + 800);
  type metadata accessor for DIPKeystoreManager();
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 896) = inited;
  *(void *)(inited + 16) = sub_10015CDA0((uint64_t)_swiftEmptyArrayStorage);
  *(unsigned char *)(inited + 24) = 2;
  sub_100007764(&qword_100722590);
  uint64_t v30 = type metadata accessor for HardwareAttestationType();
  uint64_t v31 = *(void *)(v30 - 8);
  unint64_t v32 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = swift_allocObject();
  *(void *)(v0 + 904) = v33;
  *(_OWORD *)(v33 + 16) = xmmword_100610730;
  (*(void (**)(unint64_t, void, uint64_t))(v31 + 104))(v33 + v32, enum case for HardwareAttestationType.SEP(_:), v30);
  (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))(v26, enum case for KeystoreKeyType.temporary(_:), v28);
  char v34 = (void *)swift_task_alloc();
  *(void *)(v0 + 912) = v34;
  *char v34 = v0;
  v34[1] = sub_10054022C;
  uint64_t v35 = *(void *)(v0 + 816);
  return sub_10012571C(v0 + 480, 0x61746E6567616DLL, 0xE700000000000000, v33, v35);
}

uint64_t sub_10054022C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 920) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[101] + 8))(v2[102], v2[100]);
  swift_bridgeObjectRelease();
  swift_release();
  if (v0) {
    uint64_t v3 = sub_100540C18;
  }
  else {
    uint64_t v3 = sub_1005403D4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1005403D4()
{
  uint64_t v34 = *(void *)(v0 + 888);
  uint64_t v38 = v0 + 480;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
  uint64_t v2 = *(void *)(v0 + 864);
  uint64_t v3 = *(void *)(v0 + 848);
  uint64_t v4 = *(void *)(v0 + 792);
  uint64_t v5 = *(void *)(v0 + 784);
  uint64_t v33 = *(void *)(v0 + 776);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v6 = UUID.uuidString.getter();
  uint64_t v36 = v7;
  uint64_t v37 = v6;
  v1(v2, v3);
  uint64_t v8 = *(void *)(v34 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  uint64_t v35 = *(void *)(v34 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  type metadata accessor for DIPAccountManager();
  swift_bridgeObjectRetain();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728((void *)(v0 + 528), *(void *)(v0 + 552));
  uint64_t v9 = dispatch thunk of DIPAccountManagerProtocol.appleAuthHeader(_:)();
  uint64_t v31 = v10;
  uint64_t v32 = v9;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 528);
  DeviceInformationProvider.init()();
  uint64_t v11 = DeviceInformationProvider.uniqueDeviceID.getter();
  uint64_t v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v33);
  if (qword_10071F5F8 != -1) {
    swift_once();
  }
  uint64_t v14 = *(void *)(v0 + 688);
  uint64_t v15 = *(void *)(v0 + 680);
  long long v29 = *(_OWORD *)(v0 + 648);
  long long v30 = *(_OWORD *)(v0 + 664);
  long long v28 = *(_OWORD *)(v0 + 632);
  uint64_t v16 = qword_1007608B8;
  uint64_t v17 = unk_1007608C0;
  swift_bridgeObjectRetain();
  sub_1000AAC30(0, 0);
  *(void *)(v0 + 336) = v35;
  *(void *)(v0 + 344) = v8;
  *(void *)(v0 + 352) = v37;
  *(void *)(v0 + 360) = v36;
  *(void *)(v0 + 368) = v32;
  *(void *)(v0 + 376) = v31;
  *(void *)(v0 + 384) = v11;
  *(void *)(v0 + 392) = v13;
  *(void *)(v0 + 400) = v16;
  *(void *)(v0 + 408) = v17;
  *(_OWORD *)(v0 + 416) = v28;
  *(_OWORD *)(v0 + 432) = v29;
  *(_OWORD *)(v0 + 448) = v30;
  *(void *)(v0 + 464) = v15;
  *(void *)(v0 + 472) = v14;
  sub_1003FAA54();
  sub_1003FAAA8();
  JWSSignedJSON.init(payload:)();
  uint64_t v18 = swift_bridgeObjectRetain();
  JWSSignedJSON.setCertificateChain(_:)((Swift::OpaquePointer)v18);
  if (v19)
  {
    uint64_t v20 = *(void **)(v0 + 888);
    uint64_t v21 = *(void *)(v0 + 768);
    uint64_t v22 = *(void *)(v0 + 760);
    uint64_t v23 = *(void *)(v0 + 752);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    sub_1001FEFEC(v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  else
  {
    swift_bridgeObjectRelease();
    JWSSignedJSON.setKid(_:)();
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 928) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_1005407FC;
    uint64_t v27 = *(void *)(v0 + 752);
    return JWSSignedJSON.sign(_:)(v38, v27);
  }
}

uint64_t sub_1005407FC()
{
  uint64_t v2 = (void *)*v1;
  v2[117] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100540CE4, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[118] = v3;
    void *v3 = v2;
    v3[1] = sub_100540974;
    uint64_t v4 = v2[96];
    uint64_t v5 = v2[93];
    return sub_1002C2A28(v5, v4);
  }
}

uint64_t sub_100540974()
{
  *(void *)(*(void *)v1 + 952) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100540DE0;
  }
  else {
    uint64_t v2 = sub_100540A88;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100540A88()
{
  uint64_t v1 = *(void **)(v0 + 888);
  uint64_t v2 = *(void *)(v0 + 768);
  uint64_t v3 = *(void *)(v0 + 760);
  uint64_t v4 = *(void *)(v0 + 752);
  uint64_t v5 = *(void *)(v0 + 744);
  uint64_t v6 = *(void *)(v0 + 736);
  uint64_t v7 = *(void *)(v0 + 728);
  uint64_t v8 = *(_OWORD **)(v0 + 624);
  JWSSignedJSON.payload.getter();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1001FEFEC(v0 + 480);
  long long v9 = *(_OWORD *)(v0 + 112);
  long long v10 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 272) = v9;
  *(_OWORD *)(v0 + 288) = v10;
  long long v11 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 320) = v11;
  long long v12 = *(_OWORD *)(v0 + 48);
  long long v13 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 208) = v12;
  *(_OWORD *)(v0 + 224) = v13;
  long long v14 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 256) = v14;
  long long v15 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 192) = v15;
  long long v16 = *(_OWORD *)(v0 + 192);
  *uint64_t v8 = *(_OWORD *)(v0 + 176);
  v8[1] = v16;
  long long v17 = *(_OWORD *)(v0 + 224);
  long long v18 = *(_OWORD *)(v0 + 256);
  v8[4] = *(_OWORD *)(v0 + 240);
  v8[5] = v18;
  v8[2] = v12;
  v8[3] = v17;
  long long v19 = *(_OWORD *)(v0 + 288);
  long long v20 = *(_OWORD *)(v0 + 320);
  _OWORD v8[8] = *(_OWORD *)(v0 + 304);
  v8[9] = v20;
  v8[6] = v9;
  v8[7] = v19;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_100540C18()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100540CE4()
{
  uint64_t v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 760);
  uint64_t v3 = *(void *)(v0 + 752);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1001FEFEC(v0 + 480);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100540DE0()
{
  uint64_t v1 = (void *)v0[111];
  uint64_t v2 = v0[96];
  uint64_t v3 = v0[95];
  uint64_t v4 = v0[94];
  (*(void (**)(void, void, void))(v0[89] + 104))(v0[90], enum case for DIPError.Code.internalError(_:), v0[88]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();

  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1001FEFEC((uint64_t)(v0 + 60));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t type metadata accessor for IdentityProofingPendingActionsWebService()
{
  return self;
}

uint64_t sub_100540FF0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v94 = a2;
  uint64_t v96 = a1;
  uint64_t v79 = a3;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v85 = *(void *)(v3 - 8);
  uint64_t v86 = v3;
  __chkstk_darwin(v3);
  uint64_t v87 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for ISO18013Response();
  unint64_t v95 = *(void *)(v82 - 8);
  uint64_t v5 = __chkstk_darwin(v82);
  id v76 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  long long v81 = (char *)&v74 - v7;
  uint64_t v8 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements();
  uint64_t v77 = *(void *)(v8 - 8);
  uint64_t v78 = v8;
  __chkstk_darwin(v8);
  unint64_t v84 = (unint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MobileDocumentType();
  uint64_t v93 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  id v75 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  id v80 = (char *)&v74 - v14;
  __chkstk_darwin(v13);
  long long v16 = (void (*)(char *, uint64_t))((char *)&v74 - v15);
  uint64_t v17 = type metadata accessor for MobileDocumentReaderRequest.Document.RequestType();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v74 - v22;
  uint64_t v24 = type metadata accessor for MobileDocumentReaderRequest.Document();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v88 = v24;
  uint64_t v89 = v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DIPSignpost.Config();
  __chkstk_darwin(v28 - 8);
  uint64_t v29 = type metadata accessor for DIPSignpost();
  uint64_t v91 = *(void *)(v29 - 8);
  uint64_t v92 = v29;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DaemonSignposts.MobileDocumentReader.parseResponse.getter();
  id v90 = v31;
  DIPSignpost.init(_:)();
  MobileDocumentReaderRequest.document.getter();
  MobileDocumentReaderRequest.Document.requestType.getter();
  MobileDocumentReaderRequest.Document.type.getter();
  uint64_t v32 = MobileDocumentReaderRequest.Document.retainedElements.getter();
  uint64_t v33 = MobileDocumentReaderRequest.Document.nonRetainedElements.getter();
  unint64_t v97 = v32;
  uint64_t v34 = v17;
  sub_100162B40(v33);
  unint64_t v35 = v97;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  unint64_t v94 = v23;
  uint64_t v37 = v23;
  uint64_t v38 = v18;
  v36(v21, v37, v17);
  int v39 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v21, v17);
  if (v39 != enum case for MobileDocumentReaderRequest.Document.RequestType.displayOnly(_:))
  {
    unint64_t v44 = v95;
    uint64_t v45 = v96;
    long long v81 = (char *)v16;
    unint64_t v84 = v10;
    if (v39 == enum case for MobileDocumentReaderRequest.Document.RequestType.dataTransfer(_:))
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 96))(v21, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v46 = v85;
      uint64_t v47 = *(void (**)(char *, void, uint64_t))(v85 + 104);
      uint64_t v48 = v38;
      uint64_t v49 = v87;
      uint64_t v96 = v34;
      uint64_t v50 = v86;
      v47(v87, enum case for DIPError.Code.unexpectedDaemonState(_:), v86);
      unint64_t v95 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, unint64_t))(v93 + 8))(v81, v84);
      uint64_t v51 = v46;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v94, v96);
      uint64_t v52 = v49;
      (*(void (**)(char *, uint64_t))(v89 + 8))(v27, v88);
    }
    else
    {
      if (v39 == enum case for MobileDocumentReaderRequest.Document.RequestType.validatedDataTransfer(_:))
      {
        (*(void (**)(char *, uint64_t))(v38 + 96))(v21, v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v80 = &v21[*(int *)(sub_100007764(&qword_100725790) + 64)];
        uint64_t v53 = (uint64_t)v76;
        (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v76, v45, v82);
        uint64_t v54 = v93;
        uint64_t v55 = (uint64_t)v75;
        uint64_t v56 = v81;
        unint64_t v57 = v84;
        (*(void (**)(char *, char *, unint64_t))(v93 + 16))(v75, v81, v84);
        uint64_t v58 = v83;
        sub_1002DD8A4(v53, v55, v35, v79);
        if (v58)
        {
          (*(void (**)(char *, unint64_t))(v54 + 8))(v56, v57);
          (*(void (**)(char *, uint64_t))(v38 + 8))(v94, v34);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v27, v88);
          uint64_t v59 = type metadata accessor for MobileDocumentReaderRequest.Document.ValidationOptions();
          (*(void (**)(char *, uint64_t))(*(void *)(v59 - 8) + 8))(v80, v59);
          goto LABEL_10;
        }
        (*(void (**)(char *, unint64_t))(v54 + 8))(v56, v57);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v94, v34);
        (*(void (**)(char *, uint64_t))(v89 + 8))(v27, v88);
        uint64_t v70 = type metadata accessor for MobileDocumentReaderRequest.Document.ValidationOptions();
        (*(void (**)(char *, uint64_t))(*(void *)(v70 - 8) + 8))(v80, v70);
LABEL_16:
        uint64_t v72 = v91;
        uint64_t v71 = v92;
        uint64_t v73 = v90;
        DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
        return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v73, v71);
      }
      swift_bridgeObjectRelease();
      uint64_t v63 = v85;
      unint64_t v64 = *(void (**)(char *, void, uint64_t))(v85 + 104);
      uint64_t v65 = v38;
      uint64_t v66 = v87;
      uint64_t v96 = v34;
      uint64_t v50 = v86;
      v64(v87, enum case for DIPError.Code.unexpectedDaemonState(_:), v86);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      (*(void (**)(char *, unint64_t))(v93 + 8))(v81, v84);
      id v67 = *(void (**)(char *, uint64_t))(v65 + 8);
      uint64_t v51 = v63;
      uint64_t v68 = v96;
      v67(v94, v96);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v27, v88);
      v67(v21, v68);
      uint64_t v52 = v66;
    }
    uint64_t v61 = v91;
    uint64_t v60 = v92;
    uint64_t v62 = v90;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v18 + 96))(v21, v17);
  swift_bridgeObjectRelease();
  uint64_t v40 = (uint64_t)v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v81, v96, v82);
  uint64_t v41 = v93;
  uint64_t v42 = (uint64_t)v80;
  (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v93 + 16))(v80, v16, v10);
  swift_bridgeObjectRetain();
  uint64_t v43 = v83;
  sub_1002DD8A4(v40, v42, v35, v84);
  if (!v43)
  {
    sub_10054212C(v84, v35, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v41 + 8))(v16, v10);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v94, v34);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v27, v88);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v77 + 32))(v79, v84, v78);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(void, uint64_t))(v41 + 8))(v16, v10);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v94, v34);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v27, v88);
LABEL_10:
  uint64_t v50 = v86;
  uint64_t v52 = v87;
  uint64_t v51 = v85;
  uint64_t v61 = v91;
  uint64_t v60 = v92;
  uint64_t v62 = v90;
LABEL_13:
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
  (*(void (**)(char *, void, uint64_t))(v51 + 104))(v52, enum case for DIPError.Code.internalError(_:), v50);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  return swift_errorRelease();
}

char *sub_100541DAC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MobileDocumentElement.Element();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for MobileDocumentElement();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v11 = v7 + 16;
  uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
  uint64_t v30 = *(void *)(v11 + 56);
  uint64_t v31 = v12;
  uint64_t v14 = (uint64_t (**)(uint64_t *, uint64_t))(v3 + 88);
  int v29 = enum case for MobileDocumentElement.Element.ageAtLeast(_:);
  uint64_t v15 = a1;
  long long v16 = (void (**)(char *, uint64_t))(v11 - 8);
  uint64_t v24 = (void (**)(uint64_t *, uint64_t))(v3 + 96);
  uint64_t v25 = (void (**)(uint64_t *, uint64_t))(v3 + 8);
  v23[1] = v15;
  swift_bridgeObjectRetain();
  uint64_t v17 = (char *)_swiftEmptyArrayStorage;
  uint64_t v27 = v6;
  uint64_t v28 = v2;
  uint64_t v26 = v11;
  do
  {
    v31(v9, v13, v6);
    MobileDocumentElement.storage.getter();
    int v18 = (*v14)(v5, v2);
    if (v18 == v29)
    {
      (*v24)(v5, v2);
      uint64_t v19 = *v5;
      (*v16)(v9, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v17 = sub_10010F8B4(0, *((void *)v17 + 2) + 1, 1, v17);
      }
      unint64_t v21 = *((void *)v17 + 2);
      unint64_t v20 = *((void *)v17 + 3);
      if (v21 >= v20 >> 1) {
        uint64_t v17 = sub_10010F8B4((char *)(v20 > 1), v21 + 1, 1, v17);
      }
      *((void *)v17 + 2) = v21 + 1;
      *(void *)&v17[8 * v21 + 32] = v19;
      uint64_t v6 = v27;
      uint64_t v2 = v28;
    }
    else
    {
      (*v25)(v5, v2);
      (*v16)(v9, v6);
    }
    v13 += v30;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_10054209C()
{
  _StringGuts.grow(_:)(97);
  v0._object = (void *)0x8000000100654B10;
  v0._uint64_t countAndFlagsBits = 0xD00000000000005FLL;
  String.append(_:)(v0);
  type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements();
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t sub_10054212C(unint64_t a1, unint64_t a2, void (*a3)(char *, uint64_t))
{
  uint64_t v178 = a3;
  unint64_t v173 = a2;
  unint64_t v175 = a1;
  uint64_t v3 = type metadata accessor for Locale.Region();
  uint64_t v163 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  v169 = (char *)&v150 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v162 = (uint64_t)&v150 - v6;
  uint64_t v171 = type metadata accessor for DIPError.Code();
  uint64_t v168 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  v176 = (char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = type metadata accessor for PersonNameComponents();
  uint64_t v159 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v158 = (char *)&v150 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MobileDocumentElement();
  uint64_t v172 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v177 = (char *)&v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v174 = (char *)&v150 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v161 = (char *)&v150 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v164 = (char *)&v150 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v166 = (char *)&v150 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v157 = (char *)&v150 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v165 = (char *)&v150 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v167 = (char *)&v150 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v150 - v27;
  __chkstk_darwin(v26);
  uint64_t v170 = (char *)&v150 - v29;
  uint64_t v30 = type metadata accessor for MobileDocumentType.Identifier();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v150 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v154 = (char *)&v150 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  int v39 = (char *)&v150 - v38;
  defaultLogger()();
  unint64_t v179 = v175;
  Logger.sensitive(_:)();
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
  uint64_t v156 = v34;
  uint64_t v41 = v34;
  uint64_t v42 = (uint64_t)v33;
  uint64_t v155 = v35 + 8;
  uint64_t v153 = v40;
  v40(v39, v41);
  MobileDocumentType.storage.getter();
  int v43 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v33, v30);
  if (v43 == enum case for MobileDocumentType.Identifier.nationalIDCard(_:))
  {
    (*(void (**)(char *, uint64_t))(v31 + 96))(v33, v30);
    uint64_t v44 = v163;
    uint64_t v45 = (char *)v162;
    (*(void (**)(uint64_t, char *, uint64_t))(v163 + 16))(v162, v33, v3);
    uint64_t v46 = v169;
    Locale.Region.init(stringLiteral:)();
    sub_10054430C((unint64_t *)&unk_100723520, (void (*)(uint64_t))&type metadata accessor for Locale.Region);
    char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v48 = *(void (**)(char *, uint64_t))(v44 + 8);
    v48(v46, v3);
    v48(v45, v3);
    uint64_t v49 = v3;
    uint64_t v167 = (char *)(v44 + 8);
    if ((v47 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v169, v42, v3);
      unint64_t v180 = 0;
      unint64_t v181 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      unint64_t v180 = 0xD000000000000025;
      unint64_t v181 = 0x8000000100634E00;
      v63._uint64_t countAndFlagsBits = Locale.Region.identifier.getter();
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      uint64_t v174 = (char *)v180;
      unint64_t v175 = v181;
      uint64_t v177 = *(char **)(v168 + 104);
      uint64_t v178 = (void (*)(char *, uint64_t))((v168 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
      uint64_t v64 = v171;
      ((void (*)(char *, void, uint64_t))v177)(v176, enum case for DIPError.Code.documentReaderUnsupportedNationalIDCardRegion(_:), v171);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      v48(v169, v49);
      goto LABEL_111;
    }
    uint64_t v162 = v3;
    unint64_t v50 = (unint64_t)v157;
    static MobileDocumentElement.givenName.getter();
    uint64_t v51 = v173;
    uint64_t v170 = *(char **)(v173 + 16);
    uint64_t v152 = v42;
    uint64_t v151 = (void (*)(uint64_t, uint64_t))v48;
    if (!v170)
    {
      unint64_t v67 = v50;
      uint64_t v68 = *(void (**)(unint64_t, uint64_t))(v172 + 8);
      uint64_t v69 = (v172 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v70 = v177;
      v68(v67, v9);
      goto LABEL_24;
    }
    uint64_t v52 = v172;
    unint64_t v53 = (*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
    uint64_t v54 = v166;
    v169 = *(char **)(v172 + 16);
    ((void (*)(char *, unint64_t, uint64_t))v169)(v166, v173 + v53, v9);
    uint64_t v55 = sub_10054430C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
    swift_bridgeObjectRetain();
    v165 = (char *)v55;
    char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v178 = *(void (**)(char *, uint64_t))(v52 + 8);
    v178(v54, v9);
    if (v56)
    {
      swift_bridgeObjectRelease();
LABEL_42:
      v178((char *)v50, v9);
      unint64_t v50 = 0xD000000000000032;
      uint64_t v52 = v175;
      uint64_t v51 = v173;
LABEL_43:
      uint64_t v92 = v158;
      MobileDocumentReaderResponse.MobileIdentityDocumentElements.nameComponents.getter();
      Swift::String v93 = PersonNameComponents.formatted()();
      (*(void (**)(char *, uint64_t))(v159 + 8))(v92, v160);
      swift_bridgeObjectRelease();
      unint64_t v94 = ((unint64_t)v93._object >> 56) & 0xF;
      if (((uint64_t)v93._object & 0x2000000000000000) == 0) {
        unint64_t v94 = v93._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v70 = v177;
      uint64_t v42 = v152;
      if (!v94)
      {
        uint64_t v177 = *(char **)(v168 + 104);
        uint64_t v178 = (void (*)(char *, uint64_t))((v168 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
        uint64_t v64 = v171;
        ((void (*)(char *, void, uint64_t))v177)(v176, enum case for DIPError.Code.documentReaderInvalidResponse(_:), v171);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        v151(v42, v162);
        goto LABEL_111;
      }
    }
    else
    {
      uint64_t v150 = (v52 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      if (v170 == (char *)1)
      {
        uint64_t v52 = v50;
        uint64_t v51 = v173;
        swift_bridgeObjectRelease();
        uint64_t v70 = v177;
        goto LABEL_23;
      }
      uint64_t v163 = *(void *)(v172 + 72);
      uint64_t v42 = v173 + v163 + v53;
      uint64_t v72 = 1;
      do
      {
        uint64_t v73 = v166;
        ((void (*)(char *, uint64_t, uint64_t))v169)(v166, v42, v9);
        uint64_t v74 = (char *)(v72 + 1);
        if (__OFADD__(v72, 1)) {
          goto LABEL_115;
        }
        uint64_t v52 = v50;
        id v75 = v73;
        char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
        v178(v75, v9);
        if (v76)
        {
          swift_bridgeObjectRelease();
          unint64_t v50 = v52;
          goto LABEL_42;
        }
        ++v72;
        v42 += v163;
        uint64_t v70 = v177;
        unint64_t v50 = v52;
      }
      while (v74 != v170);
      uint64_t v51 = v173;
      swift_bridgeObjectRelease();
LABEL_23:
      uint64_t v68 = (void (*)(unint64_t, uint64_t))v178;
      uint64_t v42 = v152;
      uint64_t v69 = v150;
      v178((char *)v52, v9);
LABEL_24:
      uint64_t v77 = v164;
      static MobileDocumentElement.familyName.getter();
      uint64_t v78 = v69;
      uint64_t v178 = (void (*)(char *, uint64_t))v68;
      if (v170)
      {
        unint64_t v50 = v172 + 16;
        unint64_t v79 = (*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
        id v80 = v161;
        v169 = *(char **)(v172 + 16);
        ((void (*)(char *, unint64_t, uint64_t))v169)(v161, v51 + v79, v9);
        long long v81 = (void (*)(char *, uint64_t))v68;
        uint64_t v82 = sub_10054430C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
        swift_bridgeObjectRetain();
        uint64_t v166 = (char *)v82;
        char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
        v81(v80, v9);
        if (v83)
        {
LABEL_26:
          uint64_t v51 = v173;
          swift_bridgeObjectRelease();
          v178(v164, v9);
          unint64_t v50 = 0xD000000000000032;
          uint64_t v52 = v175;
          goto LABEL_43;
        }
        if (v170 != (char *)1)
        {
          uint64_t v84 = *(void *)(v172 + 72);
          uint64_t v42 = v173 + v84 + v79;
          uint64_t v52 = 1;
          while (1)
          {
            uint64_t v85 = v161;
            ((void (*)(char *, uint64_t, uint64_t))v169)(v161, v42, v9);
            uint64_t v86 = (char *)(v52 + 1);
            if (__OFADD__(v52, 1)) {
              break;
            }
            uint64_t v87 = v78;
            uint64_t v88 = v85;
            char v89 = dispatch thunk of static Equatable.== infix(_:_:)();
            id v90 = v88;
            uint64_t v78 = v87;
            v178(v90, v9);
            if (v89) {
              goto LABEL_26;
            }
            ++v52;
            v42 += v84;
            if (v86 == v170) {
              goto LABEL_32;
            }
          }
LABEL_118:
          __break(1u);
LABEL_119:
          swift_once();
LABEL_103:
          uint64_t v140 = qword_100760798;
          swift_bridgeObjectRetain();
          sub_1004C553C(v52, v42, v140);
          char v142 = v141;
          swift_bridgeObjectRelease();
          if (v142) {
            return sub_10000C5E0(v52, v42);
          }
          id v143 = [self standardUserDefaults];
          v144._uint64_t countAndFlagsBits = v50 + 18;
          v144._object = (void *)0x8000000100654940;
          Swift::Bool v145 = NSUserDefaults.internalBool(forKey:)(v144);

          if (v145)
          {
            uint64_t v146 = v154;
            defaultLogger()();
            uint64_t v147 = Logger.logObject.getter();
            os_log_type_t v148 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v147, v148))
            {
              uint64_t v149 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v149 = 0;
              _os_log_impl((void *)&_mh_execute_header, v147, v148, "Response portrait data cannot be decoded to a valid JPEG or JPEG2000 image", v149, 2u);
              swift_slowDealloc();
            }
            sub_10000C5E0(v52, v42);

            return v153(v146, v156);
          }
          uint64_t v177 = *(char **)(v168 + 104);
          uint64_t v178 = (void (*)(char *, uint64_t))((v168 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
          uint64_t v64 = v171;
          ((void (*)(char *, void, uint64_t))v177)(v176, enum case for DIPError.Code.documentReaderUnsupportedPortraitDataFormat(_:), v171);
          unint64_t v175 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_10000C5E0(v52, v42);
LABEL_111:
          ((void (*)(char *, void, uint64_t))v177)(v176, enum case for DIPError.Code.internalError(_:), v64);
          swift_errorRetain();
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for DIPError();
          sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          return swift_errorRelease();
        }
LABEL_32:
        uint64_t v51 = v173;
        swift_bridgeObjectRelease();
        uint64_t v70 = v177;
        uint64_t v68 = (void (*)(unint64_t, uint64_t))v178;
        uint64_t v42 = v152;
        uint64_t v77 = v164;
      }
      v68((unint64_t)v77, v9);
      unint64_t v50 = 0xD000000000000032;
      uint64_t v52 = v175;
    }
    v151(v42, v162);
    goto LABEL_61;
  }
  if (v43 != enum case for MobileDocumentType.Identifier.driversLicense(_:))
  {
    unint64_t v180 = 0;
    unint64_t v181 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v65._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v65._object = (void *)0x80000001006310F0;
    String.append(_:)(v65);
    type metadata accessor for MobileDocumentType();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v174 = (char *)v180;
    unint64_t v175 = v181;
    uint64_t v177 = *(char **)(v168 + 104);
    uint64_t v178 = (void (*)(char *, uint64_t))((v168 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
    uint64_t v66 = v171;
    ((void (*)(char *, void, uint64_t))v177)(v176, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v171);
    unint64_t v173 = sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    uint64_t v64 = v66;
    goto LABEL_111;
  }
  unint64_t v57 = v170;
  static MobileDocumentElement.givenName.getter();
  uint64_t v51 = v173;
  v169 = *(char **)(v173 + 16);
  if (!v169)
  {
    uint64_t v71 = *(void (**)(char *, uint64_t))(v172 + 8);
    uint64_t v62 = (v172 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v52 = v175;
    uint64_t v70 = v177;
    goto LABEL_40;
  }
  uint64_t v42 = v172;
  unint64_t v58 = (*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
  uint64_t v164 = *(char **)(v172 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v164)(v28, v173 + v58, v9);
  uint64_t v59 = sub_10054430C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  uint64_t v163 = v59;
  char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v61 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v166 = (char *)((v42 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
  uint64_t v178 = v61;
  v61(v28, v9);
  if (v60)
  {
    swift_bridgeObjectRelease();
    uint64_t v62 = (uint64_t)v166;
    v178(v57, v9);
    goto LABEL_49;
  }
  if (v169 == (char *)1)
  {
    uint64_t v51 = v173;
    swift_bridgeObjectRelease();
    uint64_t v52 = v175;
    uint64_t v70 = v177;
    uint64_t v71 = v178;
    goto LABEL_39;
  }
  uint64_t v162 = *(void *)(v172 + 72);
  unint64_t v50 = v173 + v162 + v58;
  uint64_t v42 = 1;
  uint64_t v71 = v178;
  do
  {
    ((void (*)(char *, unint64_t, uint64_t))v164)(v28, v50, v9);
    uint64_t v52 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      goto LABEL_116;
    }
    char v91 = dispatch thunk of static Equatable.== infix(_:_:)();
    v71(v28, v9);
    if (v91)
    {
      swift_bridgeObjectRelease();
      uint64_t v62 = (uint64_t)v166;
      v71(v170, v9);
LABEL_49:
      uint64_t v42 = (uint64_t)v158;
      uint64_t v52 = v175;
      MobileDocumentReaderResponse.MobileIdentityDocumentElements.nameComponents.getter();
      PersonNameComponents.givenName.getter();
      uint64_t v96 = v95;
      (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v42, v160);
      swift_bridgeObjectRelease();
      unint64_t v50 = 0xD000000000000032;
      uint64_t v51 = v173;
      uint64_t v70 = v177;
      if (v96) {
        goto LABEL_50;
      }
LABEL_53:
      uint64_t v177 = *(char **)(v168 + 104);
      uint64_t v178 = (void (*)(char *, uint64_t))((v168 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
      uint64_t v64 = v171;
      ((void (*)(char *, void, uint64_t))v177)(v176, enum case for DIPError.Code.documentReaderInvalidResponse(_:), v171);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_110:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      goto LABEL_111;
    }
    ++v42;
    v50 += v162;
    uint64_t v70 = v177;
  }
  while ((char *)v52 != v169);
  uint64_t v51 = v173;
  swift_bridgeObjectRelease();
  uint64_t v52 = v175;
LABEL_39:
  uint64_t v62 = (uint64_t)v166;
LABEL_40:
  uint64_t v178 = v71;
  v71(v170, v9);
  unint64_t v50 = 0xD000000000000032;
LABEL_50:
  unint64_t v97 = v167;
  static MobileDocumentElement.familyName.getter();
  if (!v169)
  {
LABEL_60:
    v178(v97, v9);
    goto LABEL_61;
  }
  unint64_t v50 = v172 + 16;
  uint64_t v42 = (*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
  unint64_t v98 = v165;
  uint64_t v170 = *(char **)(v172 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v170)(v165, v51 + v42, v9);
  sub_10054430C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v166 = (char *)v62;
  v178(v98, v9);
  if ((v99 & 1) == 0)
  {
    if (v169 != (char *)1)
    {
      uint64_t v102 = *(void *)(v172 + 72);
      v42 += v173 + v102;
      uint64_t v103 = 1;
      uint64_t v52 = (uint64_t)v165;
      do
      {
        ((void (*)(uint64_t, uint64_t, uint64_t))v170)(v52, v42, v9);
        uint64_t v104 = (char *)(v103 + 1);
        if (__OFADD__(v103, 1)) {
          goto LABEL_117;
        }
        char v105 = dispatch thunk of static Equatable.== infix(_:_:)();
        v178((char *)v52, v9);
        if (v105) {
          goto LABEL_52;
        }
        ++v103;
        v42 += v102;
      }
      while (v104 != v169);
    }
    uint64_t v51 = v173;
    swift_bridgeObjectRelease();
    unint64_t v50 = 0xD000000000000032;
    uint64_t v52 = v175;
    uint64_t v70 = v177;
    unint64_t v97 = v167;
    goto LABEL_60;
  }
LABEL_52:
  uint64_t v51 = v173;
  swift_bridgeObjectRelease();
  v178(v167, v9);
  uint64_t v42 = (uint64_t)v158;
  uint64_t v52 = v175;
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.nameComponents.getter();
  PersonNameComponents.familyName.getter();
  uint64_t v101 = v100;
  (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v42, v160);
  swift_bridgeObjectRelease();
  unint64_t v50 = 0xD000000000000032;
  uint64_t v70 = v177;
  if (!v101) {
    goto LABEL_53;
  }
LABEL_61:
  uint64_t v106 = v174;
  static MobileDocumentElement.age.getter();
  uint64_t v170 = *(char **)(v51 + 16);
  if (!v170) {
    goto LABEL_69;
  }
  uint64_t v52 = v172 + 16;
  uint64_t v42 = (*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
  v169 = *(char **)(v172 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v169)(v70, v51 + v42, v9);
  uint64_t v107 = sub_10054430C(&qword_100729DA0, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement);
  swift_bridgeObjectRetain();
  uint64_t v108 = v70;
  uint64_t v167 = (char *)v107;
  char v109 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v110 = v178;
  v178(v108, v9);
  if (v109)
  {
LABEL_71:
    swift_bridgeObjectRelease();
    unint64_t v50 = 0xD000000000000032;
    uint64_t v52 = v175;
    v110(v174, v9);
    MobileDocumentReaderResponse.MobileIdentityDocumentElements.age.getter();
    uint64_t v116 = v171;
    uint64_t v51 = v173;
    if ((v117 & 1) == 0) {
      goto LABEL_72;
    }
    goto LABEL_53;
  }
  if (v170 != (char *)1)
  {
    uint64_t v111 = *(void *)(v172 + 72);
    v42 += v173 + v111;
    uint64_t v112 = 1;
    while (1)
    {
      unint64_t v113 = v177;
      ((void (*)(char *, uint64_t, uint64_t))v169)(v177, v42, v9);
      unint64_t v50 = v112 + 1;
      if (__OFADD__(v112, 1)) {
        break;
      }
      char v114 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v115 = v113;
      uint64_t v110 = v178;
      v178(v115, v9);
      if (v114) {
        goto LABEL_71;
      }
      ++v112;
      v42 += v111;
      if ((char *)v50 == v170) {
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
LABEL_68:
  uint64_t v51 = v173;
  swift_bridgeObjectRelease();
  unint64_t v50 = 0xD000000000000032;
  uint64_t v106 = v174;
  uint64_t v52 = v175;
LABEL_69:
  v178(v106, v9);
  uint64_t v116 = v171;
LABEL_72:
  uint64_t v118 = sub_100541DAC(v51);
  if (!*((void *)v118 + 2))
  {
    swift_bridgeObjectRelease();
    uint64_t v64 = v116;
LABEL_100:
    uint64_t v138 = MobileDocumentReaderResponse.MobileIdentityDocumentElements.portraitData.getter();
    if (v139 >> 60 != 15)
    {
      uint64_t v52 = v138;
      uint64_t v42 = v139;
      if (qword_10071F578 != -1) {
        goto LABEL_119;
      }
      goto LABEL_103;
    }
    uint64_t v177 = *(char **)(v168 + 104);
    uint64_t v178 = (void (*)(char *, uint64_t))((v168 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
    ((void (*)(char *, void, uint64_t))v177)(v176, enum case for DIPError.Code.documentReaderInvalidResponse(_:), v64);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_110;
  }
  uint64_t v119 = *((void *)v118 + 4);
  swift_bridgeObjectRelease();
  uint64_t v120 = *(void *)(MobileDocumentReaderResponse.MobileIdentityDocumentElements.ageAtLeastElements.getter() + 16);
  swift_bridgeObjectRelease();
  if (v120 != 1)
  {
    unint64_t v180 = 0;
    unint64_t v181 = 0xE000000000000000;
    _StringGuts.grow(_:)(71);
    v133._uint64_t countAndFlagsBits = 0xD000000000000021;
    v133._object = (void *)0x80000001006548C0;
    String.append(_:)(v133);
    uint64_t v134 = *(void *)(MobileDocumentReaderResponse.MobileIdentityDocumentElements.ageAtLeastElements.getter() + 16);
    swift_bridgeObjectRelease();
    uint64_t v182 = v134;
    v135._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v135);
    swift_bridgeObjectRelease();
    v136._uint64_t countAndFlagsBits = 0xD000000000000024;
    v136._object = (void *)0x80000001006548F0;
    String.append(_:)(v136);
    unint64_t v175 = v181;
    uint64_t v177 = *(char **)(v168 + 104);
    uint64_t v178 = (void (*)(char *, uint64_t))((v168 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
    uint64_t v137 = v171;
    ((void (*)(char *, void, uint64_t))v177)(v176, enum case for DIPError.Code.documentReaderInvalidResponse(_:), v171);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v64 = v137;
    goto LABEL_110;
  }
  uint64_t result = MobileDocumentReaderResponse.MobileIdentityDocumentElements.ageAtLeastElements.getter();
  int64_t v122 = 0;
  uint64_t v123 = result + 64;
  uint64_t v124 = 1 << *(unsigned char *)(result + 32);
  uint64_t v125 = -1;
  if (v124 < 64) {
    uint64_t v125 = ~(-1 << v124);
  }
  unint64_t v126 = v125 & *(void *)(result + 64);
  int64_t v127 = (unint64_t)(v124 + 63) >> 6;
  while (2)
  {
    if (v126)
    {
      unint64_t v128 = __clz(__rbit64(v126));
      v126 &= v126 - 1;
      unint64_t v129 = v128 | (v122 << 6);
      goto LABEL_78;
    }
    int64_t v130 = v122 + 1;
    if (__OFADD__(v122, 1)) {
      goto LABEL_114;
    }
    if (v130 >= v127)
    {
LABEL_109:
      swift_release();
      uint64_t v177 = *(char **)(v168 + 104);
      uint64_t v178 = (void (*)(char *, uint64_t))((v168 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
      uint64_t v64 = v171;
      ((void (*)(char *, void, uint64_t))v177)(v176, enum case for DIPError.Code.documentReaderInvalidResponse(_:), v171);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10054430C((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    unint64_t v131 = *(void *)(v123 + 8 * v130);
    ++v122;
    if (v131) {
      goto LABEL_95;
    }
    int64_t v122 = v130 + 1;
    if (v130 + 1 >= v127) {
      goto LABEL_109;
    }
    unint64_t v131 = *(void *)(v123 + 8 * v122);
    if (v131) {
      goto LABEL_95;
    }
    int64_t v122 = v130 + 2;
    if (v130 + 2 >= v127) {
      goto LABEL_109;
    }
    unint64_t v131 = *(void *)(v123 + 8 * v122);
    if (v131) {
      goto LABEL_95;
    }
    int64_t v122 = v130 + 3;
    if (v130 + 3 >= v127) {
      goto LABEL_109;
    }
    unint64_t v131 = *(void *)(v123 + 8 * v122);
    if (v131)
    {
LABEL_95:
      unint64_t v126 = (v131 - 1) & v131;
      unint64_t v129 = __clz(__rbit64(v131)) + (v122 << 6);
LABEL_78:
      if (*(void *)(*(void *)(result + 48) + 8 * v129) == v119)
      {
        swift_release();
        uint64_t v64 = v171;
        goto LABEL_100;
      }
      continue;
    }
    break;
  }
  int64_t v132 = v130 + 4;
  if (v132 >= v127) {
    goto LABEL_109;
  }
  unint64_t v131 = *(void *)(v123 + 8 * v132);
  if (v131)
  {
    int64_t v122 = v132;
    goto LABEL_95;
  }
  while (1)
  {
    int64_t v122 = v132 + 1;
    if (__OFADD__(v132, 1)) {
      break;
    }
    if (v122 >= v127) {
      goto LABEL_109;
    }
    unint64_t v131 = *(void *)(v123 + 8 * v122);
    ++v132;
    if (v131) {
      goto LABEL_95;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100544304()
{
  return sub_10054209C();
}

uint64_t sub_10054430C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MobileDocumentReaderResponseProcessor()
{
  return &type metadata for MobileDocumentReaderResponseProcessor;
}

uint64_t sub_100544364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v46 = a3;
  uint64_t v4 = type metadata accessor for DIPCertUsage();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TrustValidator();
  __chkstk_darwin(v6 - 8);
  uint64_t v41 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for DIPError.Code();
  uint64_t v8 = *(void *)(v38 - 8);
  uint64_t v9 = __chkstk_darwin(v38);
  int v39 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v37 = (char *)v35 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v35 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v35 - v16;
  uint64_t v18 = sub_100007764(&qword_10071FC60);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v21 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)v35 - v22;
  uint64_t v24 = type metadata accessor for COSESignatureValidator();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = a1;
  sub_100048D6C(a1, (uint64_t)v23, &qword_10071FC60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    uint64_t v28 = *(void (**)(char *, void, uint64_t))(v8 + 104);
    v35[1] = v17;
    uint64_t v36 = v21;
    uint64_t v29 = v38;
    v28(v17, enum case for DIPError.Code.vicalUnknownAlgorithm(_:), v38);
    v28(v15, enum case for DIPError.Code.vicalInvalidPublicKey(_:), v29);
    v28(v37, enum case for DIPError.Code.vicalMisformattedSignature(_:), v29);
    uint64_t v30 = v29;
    uint64_t v21 = v36;
    v28(v39, enum case for DIPError.Code.vicalInvalidSignature(_:), v30);
    COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)();
    sub_10000C6CC((uint64_t)v23, &qword_10071FC60);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v23, v24);
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v21, v27, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
  uint64_t v31 = v44;
  sub_100030A10(v44, (uint64_t)v47);
  uint64_t v32 = (uint64_t)v40;
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v40, enum case for DIPCertUsage.iso18013VICALApple(_:), v43);
  uint64_t v33 = v41;
  sub_10000AD3C((uint64_t)v21, v47, v32, v41);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v31);
  sub_10000C6CC(v45, &qword_10071FC60);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  return sub_1001745D8((uint64_t)v33, v46);
}

uint64_t *sub_100544830(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for TrustValidator();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for COSESignatureValidator();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(v6 + 20);
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    uint64_t v10 = *(int *)(v6 + 24);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for DIPCertUsage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_100544994(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for TrustValidator();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1 + *(int *)(v3 + 20));
  uint64_t v4 = a1 + *(int *)(v3 + 24);
  uint64_t v5 = type metadata accessor for DIPCertUsage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100544A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for TrustValidator();
  uint64_t v6 = *(int *)(v5 + 20);
  long long v7 = *(_OWORD *)(a2 + v6 + 24);
  *(_OWORD *)(a1 + v6 + 24) = v7;
  (**(void (***)(void))(v7 - 8))();
  uint64_t v8 = *(int *)(v5 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for DIPCertUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_100544B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for TrustValidator();
  sub_10000A128((uint64_t *)(a1 + *(int *)(v5 + 20)), (uint64_t *)(a2 + *(int *)(v5 + 20)));
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DIPCertUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_100544C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for TrustValidator();
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  long long v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v9;
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  uint64_t v10 = *(int *)(v5 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DIPCertUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t sub_100544D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for COSESignatureValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for TrustValidator();
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1 + v6);
  long long v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v9;
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  uint64_t v10 = *(int *)(v5 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DIPCertUsage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_100544DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100544E0C);
}

uint64_t sub_100544E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrustValidator();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100544E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100544E8C);
}

uint64_t sub_100544E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrustValidator();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for VICALTrustValidator()
{
  uint64_t result = qword_100732888;
  if (!qword_100732888) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100544F48()
{
  uint64_t result = type metadata accessor for TrustValidator();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100544FD4(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v2[4] = v4;
  v2[5] = *(void *)(v4 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v2[7] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1005450C8;
  return sub_1005456AC(a1);
}

uint64_t sub_1005450C8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10054552C;
  }
  else {
    uint64_t v4 = sub_1005451DC;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_1005451DC()
{
  unint64_t v1 = v0[8];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      id v3 = *(id *)(v0[8] + 32);
    }
    uint64_t v4 = v0[9];
    swift_bridgeObjectRelease();
    sub_100546EBC();

    if (!v4)
    {
      swift_task_dealloc();
      long long v9 = (void (*)(void))v0[1];
      goto LABEL_12;
    }
    uint64_t v5 = enum case for DIPError.Code.vicalInvalidDocument(_:);
  }
  else
  {
    uint64_t v7 = v0[5];
    uint64_t v6 = v0[6];
    uint64_t v8 = v0[4];
    swift_bridgeObjectRelease();
    uint64_t v5 = enum case for DIPError.Code.vicalInvalidDocument(_:);
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.vicalInvalidDocument(_:), v8);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  (*(void (**)(void, uint64_t, void))(v0[5] + 104))(v0[6], v5, v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  long long v9 = (void (*)(void))v0[1];
LABEL_12:
  v9();
}

uint64_t sub_10054552C()
{
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.vicalInvalidDocument(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1005456AC(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = sub_100007764(&qword_100722D90);
  v2[16] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Milestone();
  v2[22] = v4;
  v2[23] = *(void *)(v4 - 8);
  unsigned char v2[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v2[25] = v5;
  v2[26] = *(void *)(v5 - 8);
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_1005458BC, 0, 0);
}

uint64_t sub_1005458BC()
{
  char v60 = v0;
  uint64_t v1 = self;
  v0[28] = v1;
  id v2 = [v1 standardUserDefaults];
  v3._uint64_t countAndFlagsBits = 0xD000000000000020;
  v3._object = (void *)0x8000000100654D20;
  Swift::Bool v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    int v52 = enum case for DIPError.Code.revokedCertificate(_:);
    (*(void (**)(void))(v0[26] + 104))(v0[27]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v51 = 59;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v5 = v0[25];
    uint64_t v58 = v0[26];
    uint64_t v6 = v0[20];
    uint64_t v7 = v0[16];
    uint64_t v54 = v0[21];
    uint64_t v56 = v0[15];
    swift_getErrorValue();
    uint64_t v9 = v0[2];
    uint64_t v8 = v0[3];
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v9, v8);
    swift_errorRetain();
    Error.dipErrorCode.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v8);
    unint64_t v53 = *(void (**)(uint64_t, void, uint64_t))(v58 + 104);
    v53(v6, enum case for DIPError.Code.coseInvalidResponse(_:), v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v6, 0, 1, v5);
    uint64_t v12 = v7 + *(int *)(v56 + 48);
    sub_100048D6C(v54, v7, &qword_100723600);
    sub_100048D6C(v6, v12, &qword_100723600);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
    int v14 = v13(v7, 1, v5);
    uint64_t v15 = v0[25];
    if (v14 == 1)
    {
      uint64_t v16 = v0[21];
      sub_10000C6CC(v0[20], &qword_100723600);
      sub_10000C6CC(v16, &qword_100723600);
      if (v13(v12, 1, v15) == 1)
      {
        sub_10000C6CC(v0[16], &qword_100723600);
        swift_task_dealloc();
LABEL_12:
        v53(v0[27], enum case for DIPError.Code.vicalInvalidDocument(_:), v0[25]);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        swift_allocError();
        uint64_t v51 = 67;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_errorRelease();
LABEL_13:
        uint64_t v31 = v0[25];
        uint64_t v32 = v0[18];
        static DIPOIDVerifier.getSpecificCertificateError(_:)();
        swift_getErrorValue();
        Error.dipErrorCode.getter();
        if (v13(v32, 1, v31) != 1)
        {
          uint64_t v34 = v0[25];
          uint64_t v33 = v0[26];
          uint64_t v35 = v0[17];
          sub_100048D6C(v0[18], v35, &qword_100723600);
          int v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v35, v34);
          if (v36 == v52)
          {
            static VICALMilestone.documentSignerCertificateRevoked.getter();
            goto LABEL_20;
          }
          if (v36 == enum case for DIPError.Code.expiredCertificate(_:))
          {
            static VICALMilestone.documentSignerCertificateExpired.getter();
            goto LABEL_20;
          }
          (*(void (**)(void, void))(v0[26] + 8))(v0[17], v0[25]);
        }
        static VICALMilestone.documentSignerCertificateUntrusted.getter();
LABEL_20:
        uint64_t v37 = (void *)v0[28];
        uint64_t v38 = v0[23];
        uint64_t v39 = v0[24];
        uint64_t v40 = v0[22];
        uint64_t v41 = v0[18];
        Milestone.log()();
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
        sub_10000C6CC(v41, &qword_100723600);
        id v42 = [v37 standardUserDefaults];
        v43._uint64_t countAndFlagsBits = 0xD000000000000024;
        v43._object = (void *)0x8000000100654D50;
        LOBYTE(v37) = NSUserDefaults.internalBool(forKey:)(v43);

        if (v37)
        {
          uint64_t v44 = v0[13];
          uint64_t v45 = v0[14];
          uint64_t v46 = v0[12];
          defaultLogger()();
          DIPLogError(_:message:log:)();
          (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
          uint64_t v47 = COSE_Sign1.x509Chain.getter();
          if (v47 && (v59[1] = v47, sub_100547668(v59), swift_bridgeObjectRelease(), (uint64_t v48 = (void *)v59[0]) != 0))
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
            uint64_t v48 = _swiftEmptyArrayStorage;
          }
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          unint64_t v50 = (uint64_t (*)(void *))v0[1];
          return v50(v48);
        }
        else
        {
          v53(v0[27], enum case for DIPError.Code.internalError(_:), v0[25]);
          swift_errorRetain();
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v49 = (uint64_t (*)(void))v0[1];
          return v49();
        }
      }
    }
    else
    {
      sub_100048D6C(v0[16], v0[19], &qword_100723600);
      if (v13(v12, 1, v15) != 1)
      {
        uint64_t v24 = v0[26];
        uint64_t v25 = v0[27];
        uint64_t v26 = v0[25];
        uint64_t v27 = v0[20];
        uint64_t v28 = v0[19];
        uint64_t v55 = v0[21];
        uint64_t v57 = v0[16];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v25, v12, v26);
        sub_1002A6EC0(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
        char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
        v30(v25, v26);
        sub_10000C6CC(v27, &qword_100723600);
        sub_10000C6CC(v55, &qword_100723600);
        v30(v28, v26);
        sub_10000C6CC(v57, &qword_100723600);
        swift_task_dealloc();
        if ((v29 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
      uint64_t v20 = v0[25];
      uint64_t v21 = v0[26];
      uint64_t v22 = v0[21];
      uint64_t v23 = v0[19];
      sub_10000C6CC(v0[20], &qword_100723600);
      sub_10000C6CC(v22, &qword_100723600);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
    }
    sub_10000C6CC(v0[16], &qword_100722D90);
    swift_task_dealloc();
    goto LABEL_13;
  }
  uint64_t v17 = (void *)swift_task_alloc();
  v0[29] = v17;
  void *v17 = v0;
  v17[1] = sub_100546340;
  uint64_t v18 = v0[10];
  return sub_10000B730(v18);
}

uint64_t sub_100546340(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 240) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100546574;
  }
  else
  {
    *(void *)(v4 + 248) = a1;
    uint64_t v5 = sub_100546468;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100546468()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[22];
  static VICALMilestone.documentSignerCertificateTrusted.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[31];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

uint64_t sub_100546574()
{
  int v52 = v0;
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[20];
  uint64_t v46 = v0[21];
  uint64_t v48 = v0[25];
  uint64_t v3 = v0[16];
  uint64_t v50 = v0[15];
  swift_getErrorValue();
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v4, v5);
  swift_errorRetain();
  Error.dipErrorCode.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v5);
  uint64_t v45 = *(void (**)(uint64_t, void, uint64_t))(v1 + 104);
  v45(v2, enum case for DIPError.Code.coseInvalidResponse(_:), v48);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v2, 0, 1, v48);
  uint64_t v8 = v3 + *(int *)(v50 + 48);
  sub_100048D6C(v46, v3, &qword_100723600);
  sub_100048D6C(v2, v8, &qword_100723600);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  int v10 = v9(v3, 1, v48);
  uint64_t v11 = v0[25];
  if (v10 != 1)
  {
    sub_100048D6C(v0[16], v0[19], &qword_100723600);
    if (v9(v8, 1, v11) != 1)
    {
      uint64_t v18 = v0[26];
      uint64_t v17 = v0[27];
      uint64_t v19 = v0[25];
      uint64_t v21 = v0[19];
      uint64_t v20 = v0[20];
      uint64_t v47 = v0[21];
      uint64_t v49 = v0[16];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v17, v8, v19);
      sub_1002A6EC0(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v23(v17, v19);
      sub_10000C6CC(v20, &qword_100723600);
      sub_10000C6CC(v47, &qword_100723600);
      v23(v21, v19);
      sub_10000C6CC(v49, &qword_100723600);
      swift_task_dealloc();
      if ((v22 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v13 = v0[25];
    uint64_t v14 = v0[26];
    uint64_t v15 = v0[21];
    uint64_t v16 = v0[19];
    sub_10000C6CC(v0[20], &qword_100723600);
    sub_10000C6CC(v15, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v13);
LABEL_6:
    sub_10000C6CC(v0[16], &qword_100722D90);
    swift_task_dealloc();
    goto LABEL_9;
  }
  uint64_t v12 = v0[21];
  sub_10000C6CC(v0[20], &qword_100723600);
  sub_10000C6CC(v12, &qword_100723600);
  if (v9(v8, 1, v11) != 1) {
    goto LABEL_6;
  }
  sub_10000C6CC(v0[16], &qword_100723600);
  swift_task_dealloc();
LABEL_8:
  v45(v0[27], enum case for DIPError.Code.vicalInvalidDocument(_:), v0[25]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_errorRelease();
LABEL_9:
  uint64_t v24 = v0[25];
  uint64_t v25 = v0[18];
  static DIPOIDVerifier.getSpecificCertificateError(_:)();
  swift_getErrorValue();
  Error.dipErrorCode.getter();
  if (v9(v25, 1, v24) != 1)
  {
    uint64_t v26 = v0[25];
    uint64_t v27 = v0[26];
    uint64_t v28 = v0[17];
    sub_100048D6C(v0[18], v28, &qword_100723600);
    int v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 88))(v28, v26);
    if (v29 == enum case for DIPError.Code.revokedCertificate(_:))
    {
      static VICALMilestone.documentSignerCertificateRevoked.getter();
      goto LABEL_16;
    }
    if (v29 == enum case for DIPError.Code.expiredCertificate(_:))
    {
      static VICALMilestone.documentSignerCertificateExpired.getter();
      goto LABEL_16;
    }
    (*(void (**)(void, void))(v0[26] + 8))(v0[17], v0[25]);
  }
  static VICALMilestone.documentSignerCertificateUntrusted.getter();
LABEL_16:
  uint64_t v30 = (void *)v0[28];
  uint64_t v32 = v0[23];
  uint64_t v31 = v0[24];
  uint64_t v33 = v0[22];
  uint64_t v34 = v0[18];
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  sub_10000C6CC(v34, &qword_100723600);
  id v35 = [v30 standardUserDefaults];
  v36._uint64_t countAndFlagsBits = 0xD000000000000024;
  v36._object = (void *)0x8000000100654D50;
  LOBYTE(v30) = NSUserDefaults.internalBool(forKey:)(v36);

  if (v30)
  {
    uint64_t v38 = v0[13];
    uint64_t v37 = v0[14];
    uint64_t v39 = v0[12];
    defaultLogger()();
    DIPLogError(_:message:log:)();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    uint64_t v40 = COSE_Sign1.x509Chain.getter();
    if (v40 && (v51[1] = v40, sub_100547668(v51), swift_bridgeObjectRelease(), (uint64_t v41 = (void *)v51[0]) != 0))
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v41 = _swiftEmptyArrayStorage;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = (uint64_t (*)(void *))v0[1];
    return v44(v41);
  }
  else
  {
    v45(v0[27], enum case for DIPError.Code.internalError(_:), v0[25]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v42 = (uint64_t (*)(void))v0[1];
    return v42();
  }
}

uint64_t sub_100546EBC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v32 = *(void *)(v1 - 8);
  uint64_t v33 = v1;
  __chkstk_darwin(v1);
  uint64_t v31 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v35 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v34 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100723600);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v30 = (uint64_t)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = type metadata accessor for Milestone();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BD44();
  if (!v0)
  {
    static VICALMilestone.documentSignatureValid.getter();
    Milestone.log()();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t ErrorValue = swift_getErrorValue();
  uint64_t v29 = (uint64_t)&v29;
  uint64_t v15 = v36;
  uint64_t v16 = *(void *)(v36 - 8);
  __chkstk_darwin(ErrorValue);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v18);
  swift_errorRetain();
  Error.dipErrorCode.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v19 = v35;
  uint64_t v20 = v3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v9, 1, v3) != 1)
  {
    uint64_t v21 = v30;
    sub_100048D6C((uint64_t)v9, v30, &qword_100723600);
    int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v21, v3);
    if (v22 == enum case for DIPError.Code.coseInvalidPublicKey(_:))
    {
      uint64_t v23 = v19;
      (*(void (**)(char *, void, uint64_t))(v19 + 104))(v34, enum case for DIPError.Code.vicalInvalidPublicKey(_:), v20);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_8:
      uint64_t v19 = v23;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_errorRelease();
      goto LABEL_10;
    }
    if (v22 == enum case for DIPError.Code.coseInvalidResponse(_:))
    {
      uint64_t v23 = v19;
      (*(void (**)(char *, void, uint64_t))(v19 + 104))(v34, enum case for DIPError.Code.vicalInvalidDocument(_:), v20);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_8;
    }
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v3);
  }
LABEL_10:
  sub_10000C6CC((uint64_t)v9, &qword_100723600);
  id v25 = [self standardUserDefaults:v29];
  v26._uint64_t countAndFlagsBits = 0xD000000000000028;
  v26._object = (void *)0x8000000100654C00;
  Swift::Bool v27 = NSUserDefaults.internalBool(forKey:)(v26);

  if (v27)
  {
    uint64_t v28 = v31;
    defaultLogger()();
    DIPLogError(_:message:log:)();
    swift_errorRelease();
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v28, v33);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v34, enum case for DIPError.Code.vicalInvalidSignature(_:), v20);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return swift_errorRelease();
  }
}

void *sub_100547668@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)decodeCertificateChain(fromDER:)();
  if (v1)
  {
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v16 = a1;
      uint64_t v10 = swift_slowAlloc();
      uint64_t v15 = v4;
      uint64_t v11 = (uint8_t *)v10;
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v17 = v12;
      a1 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v14 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "VICALTrustValidator failed to decode certificate chain: %@", v11, 0xCu);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = v15;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_errorRelease();
    uint64_t result = _swiftEmptyArrayStorage;
  }
  *a1 = result;
  return result;
}

uint64_t sub_1005478B8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10000C494;
  return sub_100544FD4(a1);
}

uint64_t type metadata accessor for IdentityProofingDeviceMigrationManagerFactory()
{
  return self;
}

uint64_t sub_100547970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  v5[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPSignpost();
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  return _swift_task_switch(sub_100547AC0, 0, 0);
}

uint64_t sub_100547AC0()
{
  uint64_t v7 = v0[5];
  static DaemonSignposts.MobileDocumentReader.startReadDocument.getter();
  DIPSignpost.init(_:)();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 32) + **(int **)(v7 + 32));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  void *v1 = v0;
  v1[1] = sub_100547BD4;
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  return v6(v4, v3, v2);
}

uint64_t sub_100547BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[15] = a1;
  v4[16] = a2;
  v4[17] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1005481A4;
  }
  else {
    uint64_t v5 = sub_100547CEC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100547CEC()
{
  uint64_t v1 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = [v1 decodeFromData:isa];

  if (!v3) {
    goto LABEL_6;
  }
  id v4 = [v3 data];
  if (!v4)
  {

LABEL_6:
    uint64_t v13 = v0[15];
    unint64_t v10 = v0[16];
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.documentReaderCannotDecodeSessionTranscript(_:), v0[7]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100549330((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v12 = v13;
    goto LABEL_7;
  }
  uint64_t v5 = v4;
  uint64_t v6 = v0[17];
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  type metadata accessor for CBORDecoder();
  swift_allocObject();
  CBORDecoder.init()();
  type metadata accessor for ISO18013SessionTranscript();
  sub_100549330(&qword_100732988, (void (*)(uint64_t))&type metadata accessor for ISO18013SessionTranscript);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v11 = v0[15];
  unint64_t v10 = v0[16];
  if (v6)
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.documentReaderCannotDecodeSessionTranscript(_:), v0[7]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100549330((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    sub_10000C5F4(v7, v9);

    uint64_t v12 = v11;
LABEL_7:
    sub_10000C5F4(v12, v10);
    uint64_t v15 = v0[12];
    uint64_t v14 = v0[13];
    uint64_t v16 = v0[11];
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    goto LABEL_8;
  }
  uint64_t v20 = v0[12];
  uint64_t v19 = v0[13];
  uint64_t v21 = v0[11];
  sub_10000C5F4(v7, v9);

  sub_10000C5F4(v11, v10);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
LABEL_8:
  return v17();
}

uint64_t sub_1005481A4()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100548260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ISO18013ReaderRequest();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[15] = v7;
  v4[16] = *(void *)(v7 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  return _swift_task_switch(sub_100548408, 0, 0);
}

uint64_t sub_100548408()
{
  uint64_t v46 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[12];
  defaultLogger()();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v5(v2, v1, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v40 = v0[16];
    uint64_t v8 = v0[14];
    uint64_t v42 = v0[15];
    uint64_t v44 = v0[19];
    os_log_type_t type = v7;
    uint64_t v9 = v0[12];
    uint64_t v10 = v0[13];
    uint64_t v11 = v0[11];
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    v5(v10, v8, v11);
    uint64_t v13 = String.init<A>(describing:)();
    v0[3] = sub_100110D58(v13, v14, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "SecureTransactionServiceManaging sending iso18013 request %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v15(v44, v42);
  }
  else
  {
    uint64_t v16 = v0[19];
    uint64_t v18 = v0[15];
    uint64_t v17 = v0[16];
    (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v15(v16, v18);
  }
  v0[20] = v15;
  type metadata accessor for CBOREncoder();
  swift_allocObject();
  CBOREncoder.init()();
  sub_100549330(&qword_10072FA60, (void (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest);
  uint64_t v19 = dispatch thunk of CBOREncoder.encode<A>(_:)();
  v0[21] = v19;
  v0[22] = v20;
  uint64_t v21 = v19;
  unint64_t v22 = v20;
  swift_release();
  defaultLogger()();
  swift_unknownObjectRetain();
  sub_10002CEB0(v21, v22);
  swift_unknownObjectRetain();
  sub_10002CEB0(v21, v22);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v26 = v0[18];
  uint64_t v27 = v0[15];
  if (v25)
  {
    uint64_t v41 = v0[18];
    uint64_t v38 = v23;
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315138;
    uint64_t v29 = (uint64_t)sub_100549064();
    if (v30)
    {
      unint64_t v31 = v30;
    }
    else
    {
      uint64_t v29 = 0x3E6C696E3CLL;
      unint64_t v31 = 0xE500000000000000;
    }
    v0[2] = sub_100110D58(v29, v31, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_10000C5F4(v21, v22);
    swift_unknownObjectRelease();
    sub_10000C5F4(v21, v22);
    _os_log_impl((void *)&_mh_execute_header, v38, v24, "SecureTransactionServiceManaging sending request %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v32 = v27;
    uint64_t v33 = v41;
  }
  else
  {
    swift_unknownObjectRelease();
    sub_10000C5F4(v21, v22);
    swift_unknownObjectRelease();
    sub_10000C5F4(v21, v22);

    uint64_t v33 = v26;
    uint64_t v32 = v27;
  }
  v15(v33, v32);
  Swift::String v43 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v0[6] + 40)
                                                                            + **(int **)(v0[6] + 40));
  uint64_t v34 = (void *)swift_task_alloc();
  v0[23] = v34;
  *uint64_t v34 = v0;
  v34[1] = sub_100548B28;
  uint64_t v35 = v0[6];
  uint64_t v36 = v0[5];
  return v43(v21, v22, v36, v35);
}

uint64_t sub_100548B28(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 192) = v2;
  swift_task_dealloc();
  if (v2)
  {
    os_log_type_t v7 = sub_100548DB8;
  }
  else
  {
    *(void *)(v6 + 200) = a2;
    *(void *)(v6 + 208) = a1;
    os_log_type_t v7 = sub_100548C5C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100548C5C()
{
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 168);
  unint64_t v3 = *(void *)(v0 + 176);
  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 56);
  long long v13 = *(_OWORD *)(v0 + 40);
  defaultLogger()();
  uint64_t v8 = swift_task_alloc();
  *(_OWORD *)(v8 + 16) = v13;
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v1;
  *(void *)(v8 + 48) = v2;
  Logger.sensitive(_:)();
  sub_10000C5F4(v4, v3);
  swift_task_dealloc();
  v14(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v10 = *(void *)(v0 + 208);
  return v9(v10, v11);
}

uint64_t sub_100548DB8()
{
  sub_10000C5F4(v0[21], v0[22]);
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.documentReaderCannotBuildRequest(_:), v0[8]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100549330((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100548F8C()
{
  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x8000000100654F40;
  v0._uint64_t countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v0);
  uint64_t v1 = (uint64_t)sub_100549064();
  if (v2)
  {
    unint64_t v3 = v2;
  }
  else
  {
    uint64_t v1 = 0x3E6C696E3CLL;
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100549054()
{
  return sub_100548F8C();
}

id sub_100549064()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  uint64_t v1 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = [v1 decodeFromData:isa];

  if (v3)
  {
    id v4 = v3;
    id v3 = (id)CBOR.readableString.getter();
  }
  return v3;
}

uint64_t sub_100549330(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MobileDocumentReaderLogoFetcher()
{
  return self;
}

uint64_t sub_10054939C(uint64_t a1)
{
  v1[36] = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[37] = v2;
  v1[38] = *(void *)(v2 - 8);
  v1[39] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[40] = v3;
  v1[41] = *(void *)(v3 - 8);
  v1[42] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[43] = v4;
  v1[44] = *(void *)(v4 - 8);
  v1[45] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v1[46] = v5;
  v1[47] = *(void *)(v5 - 8);
  v1[48] = swift_task_alloc();
  return _swift_task_switch(sub_100549570, 0, 0);
}

uint64_t sub_100549570()
{
  if (qword_10071F4B0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(os_unfair_lock_s **)(qword_1007602E0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 52;
  os_unfair_lock_lock(v1 + 52);
  sub_1000262B4(v2, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v3);
  sub_100030A10(v0 + 16, v0 + 208);
  sub_1000262D0(v0 + 16);
  sub_10000C728((void *)(v0 + 208), *(void *)(v0 + 232));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1005496B8;
  return sub_100141324();
}

uint64_t sub_1005496B8()
{
  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100549C20;
  }
  else {
    uint64_t v2 = sub_1005497CC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005497CC()
{
  uint64_t v2 = v0[47];
  uint64_t v1 = v0[48];
  uint64_t v3 = v0[46];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 26));
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_10015A59C(1);
  v0[51] = v4;
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[52] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100549B04;
    uint64_t v6 = v0[36];
    return sub_100159C98(v6);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[38] + 104))(v0[39], enum case for DIPError.Code.unexpectedDaemonState(_:), v0[37]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(void, void, void))(v0[38] + 104))(v0[39], enum case for DIPError.Code.internalError(_:), v0[37]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100549B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[31] = v3;
  v4[32] = a1;
  v4[33] = a2;
  v4[34] = v2;
  v4[53] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_10054A098;
  }
  else {
    uint64_t v5 = sub_100549DDC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100549C20()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 26));
  (*(void (**)(void, void, void))(v0[38] + 104))(v0[39], enum case for DIPError.Code.internalError(_:), v0[37]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100549DDC()
{
  os_log_type_t v24 = v0;
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[36];
  defaultLogger()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v20 = v0[44];
    uint64_t v7 = v0[42];
    uint64_t v21 = v0[43];
    uint64_t v22 = v0[45];
    uint64_t v8 = v0[40];
    uint64_t v9 = v0[41];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    sub_10015AEB0((unint64_t *)&qword_100723C08, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[35] = sub_100110D58(v11, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "MobileDocumentReaderLogoFetcher received logo from URL %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }
  else
  {
    uint64_t v14 = v0[44];
    uint64_t v13 = v0[45];
    uint64_t v15 = v0[43];
    (*(void (**)(void, void))(v0[41] + 8))(v0[42], v0[40]);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  uint64_t v17 = v0[32];
  uint64_t v16 = v0[33];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v18(v17, v16);
}

uint64_t sub_10054A098()
{
  swift_release();
  (*(void (**)(void, void, void))(v0[38] + 104))(v0[39], enum case for DIPError.Code.internalError(_:), v0[37]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10015AEB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10054A254@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_100550E44;
  *(void *)(v5 + 24) = v4;
  *a2 = sub_1005515A4;
  a2[1] = v5;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_100550E44;
  *(void *)(v6 + 24) = v4;
  *(void *)a1 = sub_1005515A4;
  *(void *)(a1 + 8) = v6;
  return swift_retain();
}

uint64_t sub_10054A324(uint64_t (**a1)(uint64_t a1), uint64_t a2, uint64_t a3)
{
  swift_release();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  *a1 = sub_100550C20;
  a1[1] = (uint64_t (*)(uint64_t))v6;
  return swift_retain();
}

uint64_t sub_10054A398(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_10054A4B4, v1, 0);
}

uint64_t sub_10054A4B4()
{
  uint64_t v1 = v0[5];
  if (*(void *)(v1 + 120))
  {
    (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "SecureTransactionServiceManager start called", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = v0[10];
    uint64_t v7 = v0[11];
    uint64_t v9 = v0[9];
    uint64_t v11 = v0[4];
    uint64_t v10 = v0[5];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    id v12 = [objc_allocWithZone((Class)STSReader) initWithType:0 queue:0];
    v0[12] = v12;
    uint64_t v13 = *(void **)(v1 + 120);
    *(void *)(v1 + 120) = v12;
    id v14 = v12;

    *(unsigned char *)(v10 + 112) = 0;
    uint64_t v15 = (void *)swift_task_alloc();
    v0[13] = v15;
    v15[2] = v14;
    v15[3] = v11;
    v15[4] = v10;
    uint64_t v17 = sub_100550C28(&qword_100732B88, v16, (void (*)(uint64_t))type metadata accessor for SecureTransactionServiceManager);
    uint64_t v18 = (void *)swift_task_alloc();
    v0[14] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10054A850;
    uint64_t v19 = v0[5];
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v0 + 2, &unk_100732BD0, v15, sub_1005510A8, v19, v10, v17, &type metadata for Data);
  }
}

uint64_t sub_10054A850()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_10054AA04;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_task_dealloc();
    uint64_t v4 = sub_10054A978;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10054A978()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_10054AA04()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10054AA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v6 = type metadata accessor for DIPError();
  v4[7] = v6;
  v4[8] = *(void *)(v6 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v4[10] = v7;
  v4[11] = *(void *)(v7 - 8);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for STSReader.StateChanges();
  v4[14] = v8;
  v4[15] = *(void *)(v8 - 8);
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_10054AC14, a4, 0);
}

uint64_t sub_10054AC14()
{
  uint64_t v1 = sub_10054BBC8();
  v0[17] = v1;
  uint64_t v2 = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[18] = v3;
  void *v3 = v0;
  v3[1] = sub_10054AF20;
  uint64_t v4 = v0[16];
  return STSReader.start(configuration:)(v4, v2);
}

uint64_t sub_10054AF20()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = sub_10054B6C8;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 48);

    uint64_t v4 = sub_10054B048;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10054B048(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[16];
  uint64_t v5 = v2[5];
  uint64_t v4 = v2[6];
  sub_100550C28(&qword_100732B88, a2, (void (*)(uint64_t))type metadata accessor for SecureTransactionServiceManager);
  uint64_t v6 = (void *)swift_task_alloc();
  v2[20] = v6;
  _OWORD v6[2] = v4;
  v6[3] = v3;
  v6[4] = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  v2[21] = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10054B17C;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10054B17C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  swift_task_dealloc();
  if (v0) {
    uint64_t v4 = sub_10054B940;
  }
  else {
    uint64_t v4 = sub_10054B2C4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10054B2C4()
{
  uint64_t v24 = v0;
  id v1 = [*(id *)(v0 + 32) sessionTranscriptBytes];
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 112);
  if (v1)
  {
    uint64_t v5 = v1;
    uint64_t v23 = *(void *)(v0 + 72);
    uint64_t v6 = *(uint64_t **)(v0 + 24);
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    *uint64_t v6 = v7;
    v6[1] = v9;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 128);
    (*(void (**)(void, void, void))(*(void *)(v0 + 88) + 104))(*(void *)(v0 + 104), enum case for DIPError.Code.documentReaderSessionTranscriptBytesNil(_:), *(void *)(v0 + 80));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v13 = swift_allocError();
    uint64_t v22 = 92;
    BYTE5(v21[1]) = 0;
    HIWORD(v21[1]) = -5120;
    strcpy((char *)v21, "start(with:)");
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v12, v11);
    uint64_t v14 = *(void *)(v0 + 48);
    [*(id *)(v0 + 32) invalidate:v21[0] v21[1] 92];
    uint64_t v15 = *(void **)(v14 + 120);
    *(void *)(v14 + 120) = 0;

    *(unsigned char *)(v14 + 112) = 0;
    *(void *)(v0 + 16) = v13;
    swift_errorRetain();
    sub_100007764((uint64_t *)&unk_100723450);
    if (swift_dynamicCast())
    {
      (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
      swift_willThrow();
    }
    else
    {
      uint64_t v16 = *(void *)(v0 + 96);
      uint64_t v17 = *(void *)(v0 + 104);
      uint64_t v18 = *(void *)(v0 + 80);
      uint64_t v19 = *(void *)(v0 + 88);
      type metadata accessor for SecureTransactionServiceManager();
      sub_1005E6934(v17);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v16, v17, v18);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      swift_allocError();
      uint64_t v22 = 104;
      BYTE5(v21[1]) = 0;
      HIWORD(v21[1]) = -5120;
      strcpy((char *)v21, "start(with:)");
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v10();
}

uint64_t sub_10054B6C8()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 48);
  [*(id *)(v0 + 32) invalidate];
  uint64_t v3 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = 0;

  *(unsigned char *)(v2 + 112) = 0;
  *(void *)(v0 + 16) = v1;
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
    swift_willThrow();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 88);
    type metadata accessor for SecureTransactionServiceManager();
    sub_1005E6934(v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v5, v6);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10054B940()
{
  (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 48);
  [*(id *)(v0 + 32) invalidate];
  uint64_t v3 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = 0;

  *(unsigned char *)(v2 + 112) = 0;
  *(void *)(v0 + 16) = v1;
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
    swift_willThrow();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 88);
    type metadata accessor for SecureTransactionServiceManager();
    sub_1005E6934(v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v5, v6);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

void *sub_10054BBC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)type metadata accessor for MobileDocumentReaderDeviceEngagementType();
  uint64_t v7 = *(v6 - 1);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, void *))(v7 + 16))(v9, v1, v6);
  int v10 = (*(uint64_t (**)(uint64_t *, void *))(v7 + 88))(v9, v6);
  if (v10 == enum case for MobileDocumentReaderDeviceEngagementType.qr(_:))
  {
    (*(void (**)(uint64_t *, void *))(v7 + 96))(v9, v6);
    uint64_t v12 = *v9;
    unint64_t v11 = v9[1];
    sub_10002CEB0(v12, v11);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C5F4(v12, v11);
    uint64_t v6 = [self configurationWithDeviceEngagementType:1 dataRetrievalType:6 engagementData:isa];

    sub_10000C5F4(v12, v11);
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    if (v10 != enum case for MobileDocumentReaderDeviceEngagementType.nfc(_:))
    {
      (*(void (**)(uint64_t *, void *))(v7 + 8))(v9, v6);
LABEL_8:
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.documentReaderUnsupportedConfiguration(_:), v2);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return v6;
    }
    uint64_t v6 = [self configurationWithDeviceEngagementType:0 dataRetrievalType:6 engagementData:0];
    if (!v6) {
      goto LABEL_8;
    }
  }
  return v6;
}

uint64_t sub_10054BF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[2] = a2;
  v5[3] = a3;
  uint64_t v7 = type metadata accessor for MobileDocumentReaderDeviceEngagementType();
  v5[6] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[7] = v8;
  v5[8] = *(void *)(v8 + 64);
  v5[9] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for STSReader.StateChanges();
  v5[10] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[11] = v10;
  v5[12] = *(void *)(v10 + 64);
  v5[13] = swift_task_alloc();
  sub_100007764(&qword_10071FEE0);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_10054C09C, a3, 0);
}

uint64_t sub_10054C09C()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[11];
  uint64_t v5 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v6 = v0[7];
  uint64_t v24 = v0[12];
  uint64_t v7 = v0[6];
  uint64_t v22 = v2;
  uint64_t v23 = v7;
  uint64_t v21 = v0[5];
  uint64_t v8 = v0[4];
  uint64_t v25 = v0[3];
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v26(v1, 1, 1, v9);
  uint64_t v10 = v2;
  uint64_t v11 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v8, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v21, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v13 = (v24 + *(unsigned __int8 *)(v6 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = 0;
  *((void *)v14 + 3) = 0;
  *((void *)v14 + 4) = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(&v14[v12], v22, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(&v14[v13], v5, v23);
  swift_retain();
  sub_10054C688(v1, (uint64_t)&unk_100732C00, (uint64_t)v14);
  sub_100142F3C(v1);
  v26(v1, 1, 1, v9);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v25;
  swift_retain();
  sub_10054C688(v1, (uint64_t)&unk_100732C10, (uint64_t)v15);
  sub_100142F3C(v1);
  uint64_t v17 = sub_100550C28(&qword_100732B88, v16, (void (*)(uint64_t))type metadata accessor for SecureTransactionServiceManager);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[15] = v18;
  uint64_t v19 = sub_100007764(&qword_100732C18);
  *uint64_t v18 = v0;
  v18[1] = sub_10054C390;
  return ThrowingTaskGroup.next(isolation:)(v0 + 17, v25, v17, v19);
}

uint64_t sub_10054C390()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v4 = sub_10054C574;
  }
  else {
    uint64_t v4 = sub_10054C4BC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10054C4BC()
{
  sub_100007764((uint64_t *)&unk_100723450);
  ThrowingTaskGroup.cancelAll()();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10054C574()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10054C5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10000C494;
  return sub_10054E67C(a5);
}

uint64_t sub_10054C688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002C95C(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100142F3C((uint64_t)v9);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    void v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  id v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_10054C858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[6] = v6;
  v4[7] = *(void *)(v6 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v4[9] = v7;
  v4[10] = *(void *)(v7 - 8);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_10054C9D0, 0, 0);
}

uint64_t sub_10054C9D0()
{
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100725748 + dword_100725748);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10054CAB0;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_10054CAB0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    uint64_t v6 = sub_10054CED0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 16);
    uint64_t v6 = sub_10054CC30;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_10054CC30()
{
  *(unsigned char *)(v0 + 112) = *(unsigned char *)(*(void *)(v0 + 16) + 112);
  return _swift_task_switch(sub_10054CC58, 0, 0);
}

uint64_t sub_10054CC58()
{
  if (*(unsigned char *)(v0 + 112) == 1)
  {
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Device engagement timeout exceeded. Ignoring since we're now connecting.", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void *)(v0 + 56);
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 32) + 104))(*(void *)(v0 + 40), enum case for DIPError.Code.documentReaderReadTimedOut(_:), *(void *)(v0 + 24));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v7();
}

uint64_t sub_10054CED0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10054CF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1005515A8, a4, 0);
}

uint64_t sub_10054CF74(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MobileDocumentReaderSession.State();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_10054D094, v2, 0);
}

uint64_t sub_10054D094()
{
  uint64_t v22 = v0;
  uint64_t v1 = v0[6];
  uint64_t v2 = *(void **)(v1 + 120);
  v0[13] = v2;
  if (v2)
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v1 + 128);
    uint64_t v4 = (uint64_t)&v3[4];
    uint64_t v5 = v3 + 8;
    id v6 = v2;
    os_unfair_lock_lock(v5);
    sub_10054A254(v4, &v21);
    os_unfair_lock_unlock(v5);
    uint64_t v10 = v0[11];
    uint64_t v9 = v0[12];
    uint64_t v11 = v0[10];
    uint64_t v12 = v0[5];
    uint64_t v20 = v0[6];
    uint64_t v13 = v0[4];
    uint64_t v14 = v21;
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for MobileDocumentReaderSession.State.awaitingApproval(_:), v11);
    v14(v9);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    uint64_t v15 = (void *)swift_task_alloc();
    v0[14] = v15;
    v15[2] = v6;
    v15[3] = v13;
    v15[4] = v12;
    uint64_t v17 = sub_100550C28(&qword_100732B88, v16, (void (*)(uint64_t))type metadata accessor for SecureTransactionServiceManager);
    uint64_t v18 = (void *)swift_task_alloc();
    v0[15] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10054D414;
    uint64_t v19 = v0[6];
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v0 + 2, &unk_100732BB0, v15, sub_100550F00, v19, v20, v17, &type metadata for Data);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.internalError(_:), v0[7]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10054D414()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = sub_10054D5F4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 48);
    swift_task_dealloc();
    uint64_t v4 = sub_10054D53C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10054D53C()
{
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  [v1 invalidate];
  uint64_t v5 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = 0;

  *(unsigned char *)(v2 + 112) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v6(v3, v4);
}

uint64_t sub_10054D5F4()
{
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = v0[6];
  swift_task_dealloc();
  [v1 invalidate];
  uint64_t v3 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = 0;

  *(unsigned char *)(v2 + 112) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10054D694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[21] = a3;
  v4[22] = a4;
  v4[19] = a1;
  v4[20] = a2;
  uint64_t v5 = type metadata accessor for DIPError();
  v4[23] = v5;
  v4[24] = *(void *)(v5 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[26] = v6;
  v4[27] = *(void *)(v6 - 8);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v4[30] = v7;
  v4[31] = *(void *)(v7 - 8);
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  return _swift_task_switch(sub_10054D830, 0, 0);
}

uint64_t sub_10054D830()
{
  uint64_t v1 = (void *)v0[20];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[34] = isa;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10054D95C;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10054E240;
  v0[13] = &unk_100708BB0;
  v0[14] = v3;
  [v1 sendDocumentRequest:isa timeoutInterval:0 sessionTermination:v0 + 10 responseHandler:300.0];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10054D95C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 280) = v1;
  if (v1) {
    uint64_t v2 = sub_10054DFEC;
  }
  else {
    uint64_t v2 = sub_10054DA6C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10054DA6C()
{
  uint64_t v28 = v0;
  uint64_t v1 = *(void *)(v0 + 120);
  unint64_t v2 = *(void *)(v0 + 128);

  if (v2 >> 60 == 15)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 248) + 104))(*(void *)(v0 + 264), enum case for DIPError.Code.documentReaderSTSConnectionError(_:), *(void *)(v0 + 240));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v3 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    *(void *)(v0 + 136) = v3;
    swift_errorRetain();
    sub_100007764((uint64_t *)&unk_100723450);
    if (swift_dynamicCast())
    {
      (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
      swift_willThrow();
    }
    else
    {
      uint64_t v15 = *(void *)(v0 + 256);
      uint64_t v16 = *(void *)(v0 + 264);
      uint64_t v17 = *(void *)(v0 + 240);
      uint64_t v18 = *(void *)(v0 + 248);
      type metadata accessor for SecureTransactionServiceManager();
      sub_1005E6934(v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v15, v16, v17);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    defaultLogger()();
    sub_1000338D4(v1, v2);
    sub_10002CEB0(v1, v2);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v9 = *(void *)(v0 + 216);
    if (v6)
    {
      uint64_t v26 = *(void *)(v0 + 208);
      uint64_t v25 = *(void *)(v0 + 232);
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      sub_10002CEB0(v1, v2);
      uint64_t v11 = Data.description.getter();
      unint64_t v13 = v12;
      sub_10000C5E0(v1, v2);
      *(void *)(v0 + 144) = sub_100110D58(v11, v13, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000C5E0(v1, v2);
      sub_10000C5E0(v1, v2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "SecureTransactionServiceManager readDocument received response %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v14(v25, v26);
    }
    else
    {
      sub_10000C5E0(v1, v2);
      sub_10000C5E0(v1, v2);

      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v14(v7, v8);
    }
    uint64_t v20 = *(void *)(v0 + 224);
    uint64_t v21 = *(void *)(v0 + 208);
    uint64_t v22 = *(uint64_t **)(v0 + 152);
    defaultLogger()();
    uint64_t v23 = swift_task_alloc();
    *(void *)(v23 + 16) = v1;
    *(void *)(v23 + 24) = v2;
    Logger.sensitive(_:)();
    swift_task_dealloc();
    v14(v20, v21);
    *uint64_t v22 = v1;
    v22[1] = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v19();
}

uint64_t sub_10054DFEC()
{
  uint64_t v1 = (void *)v0[34];
  swift_willThrow();

  v0[17] = v0[35];
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    swift_willThrow();
  }
  else
  {
    uint64_t v2 = v0[32];
    uint64_t v3 = v0[33];
    uint64_t v4 = v0[30];
    uint64_t v5 = v0[31];
    type metadata accessor for SecureTransactionServiceManager();
    sub_1005E6934(v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10054E240(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v5 = swift_allocError();
    *BOOL v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      id v8 = a2;
      uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v11 = 0xF000000000000000;
    }
    v13[0] = v9;
    v13[1] = v11;
    sub_100410894((uint64_t)v13, *(void *)(*(void *)(v3 + 64) + 40));
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10054E32C()
{
  _StringGuts.grow(_:)(65);
  v0._object = (void *)0x8000000100655510;
  v0._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
  String.append(_:)(v0);
  Swift::String v1 = Data.base16EncodedString()();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10054E3C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100007764(&qword_10071FEE0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, a2, v16, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v9, 1, 1, v17);
  uint64_t v18 = (void *)swift_allocObject();
  id v18[2] = 0;
  v18[3] = 0;
  void v18[4] = a1;
  swift_retain();
  sub_10014043C((uint64_t)v9, a4, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_10054E5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_10054E600, a4, 0);
}

uint64_t sub_10054E600()
{
  uint64_t v1 = *(void *)(v0 + 16);
  [*(id *)(v1 + 120) invalidate];
  uint64_t v2 = *(void **)(v1 + 120);
  *(void *)(v1 + 120) = 0;

  *(unsigned char *)(v1 + 112) = 0;
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10054E67C(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for STSReader.StateEvent();
  v2[12] = v4;
  v2[13] = *(void *)(v4 - 8);
  v2[14] = swift_task_alloc();
  sub_100007764(&qword_100732B98);
  v2[15] = swift_task_alloc();
  uint64_t v5 = sub_100007764(&qword_100732BA0);
  v2[16] = v5;
  v2[17] = *(void *)(v5 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MobileDocumentReaderSession.State();
  v2[19] = v6;
  v2[20] = *(void *)(v6 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v2[22] = v7;
  v2[23] = *(void *)(v7 - 8);
  unsigned char v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  return _swift_task_switch(sub_10054E948, v1, 0);
}

uint64_t sub_10054E948()
{
  uint64_t v27 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SecureTransactionServiceManager stream started", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 64);

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 232) = v8;
  *(void *)(v0 + 240) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  uint64_t v9 = *(os_unfair_lock_s **)(v7 + 128);
  *(void *)(v0 + 248) = v9;
  uint64_t v10 = (uint64_t)&v9[4];
  uint64_t v11 = v9 + 8;
  os_unfair_lock_lock(v9 + 8);
  sub_10054A254(v10, &v26);
  os_unfair_lock_unlock(v11);
  uint64_t v13 = *(void *)(v0 + 160);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v14 = *(void *)(v0 + 152);
  os_log_type_t v15 = v26;
  uint64_t v16 = enum case for MobileDocumentReaderSession.State.ready(_:);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 104);
  *(void *)(v0 + 256) = v17;
  *(void *)(v0 + 264) = (v13 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v17(v12, v16, v14);
  v15(v12);
  swift_release();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(void *)(v0 + 272) = v18;
  *(void *)(v0 + 280) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v18(v12, v14);
  STSReader.StateChanges.makeAsyncIterator()();
  uint64_t v20 = sub_100550C28(&qword_100732B88, v19, (void (*)(uint64_t))type metadata accessor for SecureTransactionServiceManager);
  *(_DWORD *)(v0 + 312) = enum case for STSReader.StateEvent.tnepFailed(_:);
  *(_DWORD *)(v0 + 316) = enum case for STSReader.StateEvent.invalidated(_:);
  *(_DWORD *)(v0 + 320) = enum case for STSReader.StateEvent.alternativeCarrierConnected(_:);
  *(_DWORD *)(v0 + 324) = enum case for STSReader.StateEvent.tnepCompleted(_:);
  *(_DWORD *)(v0 + 328) = enum case for MobileDocumentReaderSession.State.connecting(_:);
  *(void *)(v0 + 288) = v20;
  *(void *)(v0 + 296) = 0;
  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_10054EC5C;
  uint64_t v23 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 128);
  return AsyncStream.Iterator.next(isolation:)(v23, v21, v20, v24);
}

uint64_t sub_10054EC5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_10054ED98, v1, 0);
}

void sub_10054ED98()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 80);
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
    char v5 = static Task<>.isCancelled.getter();
    uint64_t v6 = *(void (**)(void, void, uint64_t))(v4 + 104);
    uint64_t v7 = *(void *)(v0 + 72);
    if (v5) {
      v6(*(void *)(v0 + 88), enum case for DIPError.Code.documentReadCancelled(_:), v7);
    }
    else {
      v6(*(void *)(v0 + 88), enum case for DIPError.Code.documentReaderSTSSessionUnexpectedError(_:), v7);
    }
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_32;
  }
  int v8 = *(_DWORD *)(v0 + 312);
  uint64_t v9 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9, v1, v2);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v9, v2);
  if (v10 == v8)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 96))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      swift_errorRetain();
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v14 = v15;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "SecureTransactionServiceManager stream received tnepFailed with error %@", v13, 0xCu);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v23 = *(void *)(v0 + 136);
    uint64_t v24 = *(void *)(v0 + 144);
    uint64_t v25 = *(void *)(v0 + 128);
    (*(void (**)(void, void))(v0 + 232))(*(void *)(v0 + 208), *(void *)(v0 + 176));
LABEL_31:
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
    goto LABEL_32;
  }
  if (v10 == *(_DWORD *)(v0 + 316))
  {
    uint64_t v16 = *(uint64_t **)(v0 + 112);
    (*(void (**)(uint64_t *, void))(*(void *)(v0 + 104) + 96))(v16, *(void *)(v0 + 96));
    uint64_t v17 = *v16;
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      if (v17)
      {
        swift_errorRetain();
        uint64_t v22 = v17;
        uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 40) = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        *(void *)(v0 + 32) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v22 = 0;
      }
      *uint64_t v21 = v17;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "SecureTransactionServiceManager stream received invalidated with error %@", v20, 0xCu);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v17 = v22;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(void, void))(v0 + 232))(*(void *)(v0 + 200), *(void *)(v0 + 176));
    if (!v17)
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 104))(*(void *)(v0 + 88), enum case for DIPError.Code.documentReaderSTSSessionUnexpectedError(_:), *(void *)(v0 + 72));
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    }
    uint64_t v23 = *(void *)(v0 + 136);
    uint64_t v24 = *(void *)(v0 + 144);
    uint64_t v25 = *(void *)(v0 + 128);
    goto LABEL_31;
  }
  if (v10 == *(_DWORD *)(v0 + 320))
  {
    defaultLogger()();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "SecureTransactionServiceManager stream received alternativeCarrierConnected, sending document request…", v28, 2u);
      swift_slowDealloc();
    }
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
    uint64_t v30 = *(void *)(v0 + 216);
    uint64_t v31 = *(void *)(v0 + 176);
    uint64_t v32 = *(void *)(v0 + 136);
    uint64_t v33 = *(void *)(v0 + 144);
    uint64_t v34 = *(void *)(v0 + 128);

    v29(v30, v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(void (**)(void))(v0 + 8);
    goto LABEL_33;
  }
  if (v10 != *(_DWORD *)(v0 + 324))
  {
    uint64_t v46 = *(void *)(v0 + 136);
    uint64_t v45 = *(void *)(v0 + 144);
    uint64_t v47 = *(void *)(v0 + 128);
    uint64_t v49 = *(void *)(v0 + 104);
    uint64_t v48 = *(void *)(v0 + 112);
    uint64_t v50 = *(void *)(v0 + 96);
    (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 104))(*(void *)(v0 + 88), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 72));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
LABEL_32:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(void (**)(void))(v0 + 8);
LABEL_33:
    v35();
    return;
  }
  defaultLogger()();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "SecureTransactionServiceManager stream received tnepCompleted", v38, 2u);
    swift_slowDealloc();
  }
  uint64_t v39 = *(void *)(v0 + 296);
  uint64_t v40 = *(os_unfair_lock_s **)(v0 + 248);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  uint64_t v42 = *(void *)(v0 + 192);
  uint64_t v43 = *(void *)(v0 + 176);
  uint64_t v44 = *(void *)(v0 + 64);

  v41(v42, v43);
  *(unsigned char *)(v44 + 112) = 1;
  os_unfair_lock_lock(v40 + 8);
  sub_10054A254((uint64_t)&v40[4], (void *)(v0 + 16));
  os_unfair_lock_unlock(v40 + 8);
  if (!v39)
  {
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
    uint64_t v52 = *(void *)(v0 + 168);
    uint64_t v53 = *(void *)(v0 + 152);
    uint64_t v54 = *(void (**)(uint64_t))(v0 + 16);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 256))(v52, *(unsigned int *)(v0 + 328), v53);
    v54(v52);
    swift_release();
    v51(v52, v53);
    *(void *)(v0 + 296) = 0;
    uint64_t v55 = *(void *)(v0 + 288);
    uint64_t v56 = *(void *)(v0 + 64);
    uint64_t v57 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v57;
    *uint64_t v57 = v0;
    v57[1] = sub_10054EC5C;
    uint64_t v58 = *(void *)(v0 + 120);
    uint64_t v59 = *(void *)(v0 + 128);
    AsyncStream.Iterator.next(isolation:)(v58, v56, v55, v59);
  }
}

uint64_t sub_10054FA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_10054FB34, v4, 0);
}

uint64_t sub_10054FB34()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SecureTransactionServiceManager signDigest called", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v9 = *(void **)(v7 + 120);
  *(void *)(v0 + 120) = v9;
  if (v9)
  {
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 48);
    long long v19 = *(_OWORD *)(v0 + 32);
    uint64_t v13 = sub_100550C28(&qword_100732B88, v8, (void (*)(uint64_t))type metadata accessor for SecureTransactionServiceManager);
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 128) = v14;
    *(void *)(v14 + 16) = v9;
    *(_OWORD *)(v14 + 24) = v19;
    *(void *)(v14 + 40) = v12;
    *(void *)(v14 + 48) = v11;
    *(void *)(v14 + 56) = v10;
    id v15 = v9;
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_10054FE9C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, v10, v13, 0xD000000000000016, 0x8000000100655230, sub_100550C70, v14, &type metadata for Data);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 104))(*(void *)(v0 + 88), enum case for DIPError.Code.unexpectedDaemonState(_:), *(void *)(v0 + 72));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

uint64_t sub_10054FE9C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = sub_100550050;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 64);
    swift_task_dealloc();
    uint64_t v4 = sub_10054FFC4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10054FFC4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_100550050()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1005500D0(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v18 = a7;
  id v19 = a2;
  uint64_t v12 = sub_100007764(&qword_100732B90);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a3;
  *((void *)v16 + 3) = a4;
  *((void *)v16 + 4) = a5;
  *((void *)v16 + 5) = a6;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v16[v15], (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  *(void *)&v16[(v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8] = v18;
  aBlock[4] = sub_100550D74;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_10015B294;
  aBlock[3] = &unk_100708AE8;
  uint64_t v17 = _Block_copy(aBlock);
  sub_10002CEB0(a3, a4);
  sub_10002CEB0(a5, a6);
  swift_retain();
  swift_release();
  [v19 executeOnSEProxyWithBlock:v17];
  _Block_release(v17);
}

void sub_1005502D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v46 = a8;
  uint64_t v47 = a7;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v41 = a3;
  uint64_t v45 = a1;
  uint64_t v44 = type metadata accessor for SESKeystore.SignatureOutputFormat();
  uint64_t v9 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)type metadata accessor for DIPError.Code();
  uint64_t v39 = *(v12 - 1);
  id v40 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = a2;
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "SecureTransactionServiceManager within executeOnSEProxy block", v21, 2u);
    a2 = v38;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (a2)
  {
    swift_errorRetain();
LABEL_5:
    swift_willThrow();
    uint64_t v22 = v46;
    [*(id *)(v46 + 120) invalidate];
    uint64_t v23 = *(void **)(v22 + 120);
    *(void *)(v22 + 120) = 0;

    *(unsigned char *)(v22 + 112) = 0;
    uint64_t v48 = a2;
    sub_100007764(&qword_100732B90);
    CheckedContinuation.resume(throwing:)();
    return;
  }
  uint64_t v24 = v45;
  if (!v45)
  {
    (*(void (**)(char *, void, id))(v39 + 104))(v14, enum case for DIPError.Code.documentReaderDidNotReceiveSTSEndpoint(_:), v40);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100550C28((unint64_t *)&qword_10071F6E0, 255, (void (*)(uint64_t))&type metadata accessor for DIPError);
    a2 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    goto LABEL_5;
  }
  type metadata accessor for SESKeystore();
  swift_allocObject();
  id v25 = v24;
  uint64_t v26 = SESKeystore.init()();
  id v40 = [objc_allocWithZone((Class)LAContext) init];
  id v27 = [v40 externalizedContext];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;

    uint64_t v32 = v44;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for SESKeystore.SignatureOutputFormat.raw(_:), v44);
    id v33 = v25;
    uint64_t v45 = (void *)v26;
    uint64_t v34 = dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)();
    unint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v32);

    sub_10000C5F4(v29, v31);
    uint64_t v48 = v34;
    unint64_t v49 = v36;
    sub_10002CEB0(v34, v36);
    sub_100007764(&qword_100732B90);
    CheckedContinuation.resume(returning:)();

    sub_10000C5F4(v34, v36);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10055084C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v12 = sub_100110D58(0x74696E696564, 0xE600000000000000, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SecureTransactionServiceManager %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v9 = *(void **)(v1 + 120);
  if (v9)
  {
    [v9 invalidate];
    uint64_t v10 = *(void **)(v1 + 120);
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)(v1 + 120) = 0;

  swift_release();
  swift_defaultActor_destroy();
  return v1;
}

uint64_t sub_100550A60()
{
  sub_10055084C();

  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for SecureTransactionServiceManager()
{
  return self;
}

uint64_t sub_100550AB0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1004DBA18;
  return sub_10054A398(a1);
}

uint64_t sub_100550B44(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1002B7618;
  return sub_10054CF74(a1, a2);
}

uint64_t sub_100550BE8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100550C20(uint64_t a1)
{
  return sub_10015EBF8(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100550C28(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100550C70(uint64_t a1)
{
  sub_1005500D0(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_100550C80()
{
  uint64_t v1 = sub_100007764(&qword_100732B90);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  sub_10000C5F4(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10000C5F4(*(void *)(v0 + 32), *(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100550D74(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_100007764(&qword_100732B90) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v10 = v2[5];
  uint64_t v11 = *(void *)((char *)v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1005502D0(a1, a2, v7, v8, v9, v10, (uint64_t)v2 + v6, v11);
}

uint64_t sub_100550E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100550E3C()
{
  return swift_release();
}

uint64_t sub_100550E44(uint64_t a1)
{
  return sub_10015EBD0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100550E4C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000C494;
  return sub_10054D694(a1, v4, v5, v6);
}

uint64_t sub_100550F00()
{
  return sub_10054E3C0(v0, "SecureTransactionServiceManager readDocument Task cancellation handler called", (uint64_t)&unk_100708B98, (uint64_t)&unk_100732BC0);
}

uint64_t sub_100550F44()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10000C494;
  v3[2] = v2;
  return _swift_task_switch(sub_10054E600, v2, 0);
}

uint64_t sub_100550FEC()
{
  return sub_10054E32C();
}

uint64_t sub_100550FF4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100025D64;
  return sub_10054AA84(a1, v4, v5, v6);
}

uint64_t sub_1005510A8()
{
  return sub_10054E3C0(v0, "SecureTransactionServiceManager start Task cancellation handler called", (uint64_t)&unk_100708BD8, (uint64_t)&unk_100732BE0);
}

uint64_t sub_1005510EC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100025D64;
  v3[2] = v2;
  return _swift_task_switch(sub_1005515A8, v2, 0);
}

uint64_t sub_100551194(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100025D64;
  return sub_10054BF38(a1, a2, v6, v7, v8);
}

uint64_t sub_100551258()
{
  uint64_t v1 = type metadata accessor for STSReader.StateChanges();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for MobileDocumentReaderDeviceEngagementType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1005513B8()
{
  uint64_t v2 = *(void *)(type metadata accessor for STSReader.StateChanges() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  type metadata accessor for MobileDocumentReaderDeviceEngagementType();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  uint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_10000C494;
  return sub_10054E67C(v4);
}

uint64_t sub_1005514E4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100025D64;
  return sub_10054C858(a1, v4, v5, v6);
}

uint64_t sub_1005515AC()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_1005516D8, 0, 0);
}

uint64_t sub_1005516D8()
{
  sub_10000C728((void *)(*(void *)(v0 + 16) + 16), *(void *)(*(void *)(v0 + 16) + 40));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  void *v1 = v0;
  v1[1] = sub_100551778;
  return sub_1004C6040();
}

uint64_t sub_100551778(char a1)
{
  *(unsigned char *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100551878, 0, 0);
}

uint64_t sub_100551878()
{
  if (*(unsigned char *)(v0 + 96))
  {
LABEL_6:
    sub_10000C728((void *)(*(void *)(v0 + 16) + 56), *(void *)(*(void *)(v0 + 16) + 80));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100551C5C;
    return sub_1005E19A4();
  }
  id v1 = [self standardUserDefaults];
  v2._uint64_t countAndFlagsBits = 0xD000000000000031;
  v2._object = (void *)0x8000000100655A20;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Bluetooth is not enabled. Bypassing this check due to internal setting.", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 24);
    uint64_t v9 = *(void *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v15 = *(void *)(v0 + 56);
  uint64_t v13 = *(void (**)(uint64_t, void))(*(void *)(v0 + 64) + 104);
  v13(v12, enum case for DIPError.Code.documentReaderRequiresBluetooth(_:));
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, void, uint64_t))v13)(v12, enum case for DIPError.Code.internalError(_:), v15);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100551C5C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 97) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100551D5C, 0, 0);
}

uint64_t sub_100551D5C()
{
  if (*(unsigned char *)(v0 + 97))
  {
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_8;
  }
  id v1 = [self standardUserDefaults];
  v2._uint64_t countAndFlagsBits = 0xD000000000000031;
  v2._object = (void *)0x8000000100655A20;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "NFC is not enabled. Bypassing this check due to internal setting.", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void *)(v0 + 32);
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 56);
  uint64_t v12 = *(void (**)(uint64_t, void))(*(void *)(v0 + 64) + 104);
  v12(v11, enum case for DIPError.Code.documentReaderRequiresNFC(_:));
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, void, uint64_t))v12)(v11, enum case for DIPError.Code.internalError(_:), v14);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
LABEL_8:
  return v10();
}

uint64_t sub_1005520EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  v4[16] = sub_100007764(&qword_100722D90);
  v4[17] = swift_task_alloc();
  sub_100007764(&qword_100723600);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[21] = v5;
  v4[22] = *(void *)(v5 - 8);
  v4[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[24] = v6;
  v4[25] = *(void *)(v6 - 8);
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus();
  v4[28] = v7;
  v4[29] = *(void *)(v7 - 8);
  v4[30] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Milestone();
  v4[31] = v8;
  v4[32] = *(void *)(v8 - 8);
  v4[33] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ISO18013ReaderRequest();
  v4[34] = v9;
  v4[35] = *(void *)(v9 - 8);
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ISO18013SessionTranscript();
  v4[38] = v10;
  v4[39] = *(void *)(v10 - 8);
  v4[40] = swift_task_alloc();
  sub_100007764(&qword_100722D70);
  v4[41] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  v4[42] = v11;
  v4[43] = *(void *)(v11 - 8);
  v4[44] = swift_task_alloc();
  return _swift_task_switch(sub_1005524A8, 0, 0);
}

uint64_t sub_1005524A8()
{
  sub_10000C728((void *)(v0[15] + 240), *(void *)(v0[15] + 264));
  uint64_t v1 = MobileDocumentReaderRequest.sessionIdentifier.getter();
  uint64_t v3 = v2;
  v0[45] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[46] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100552578;
  uint64_t v5 = v0[41];
  return sub_1000CE59C(v5, v1, v3);
}

uint64_t sub_100552578()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100552F38;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100552694;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100552694()
{
  uint64_t v1 = v0[41];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[43] + 48))(v1, 1, v0[42]) == 1)
  {
    uint64_t v3 = v0[29];
    uint64_t v2 = v0[30];
    uint64_t v4 = v0[28];
    uint64_t v6 = v0[22];
    uint64_t v5 = v0[23];
    uint64_t v7 = v0[21];
    sub_10000C6CC(v1, &qword_100722D70);
    type metadata accessor for DaemonAnalytics();
    uint64_t v8 = enum case for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.sessionMissing(_:);
    uint64_t v9 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v2, v8, v9);
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.invalid(_:), v4);
    static DaemonAnalytics.sendReadDocumentSessionStatus(status:)();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.documentReaderMissingSession(_:), v7);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v10 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v0[64] = v10;
    uint64_t v11 = v0[21];
    uint64_t v12 = v0[22];
    uint64_t v14 = v0[19];
    uint64_t v13 = v0[20];
    uint64_t v15 = v0[17];
    uint64_t v54 = v0[16];
    swift_getErrorValue();
    swift_errorRetain();
    Error.dipErrorCode.getter();
    uint64_t v16 = enum case for DIPError.Code.sesKeySignError(_:);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104);
    v0[65] = v17;
    v0[66] = (v12 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v17(v14, v16, v11);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
    uint64_t v18 = v15 + *(int *)(v54 + 48);
    sub_100048D6C(v13, v15, &qword_100723600);
    sub_100048D6C(v14, v18, &qword_100723600);
    id v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    int v20 = v19(v15, 1, v11);
    uint64_t v21 = v0[21];
    if (v20 == 1)
    {
      uint64_t v22 = v17;
      uint64_t v23 = v0[20];
      sub_10000C6CC(v0[19], &qword_100723600);
      sub_10000C6CC(v23, &qword_100723600);
      if (v19(v18, 1, v21) == 1)
      {
        sub_10000C6CC(v0[17], &qword_100723600);
        swift_errorRelease();
LABEL_15:
        defaultLogger()();
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v45 = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "MobileDocumentReaderManager encountered error while signing with underlying SE key. Session is no longer valid, deleting from local storage and throwing a session expired error.", v45, 2u);
          swift_slowDealloc();
        }
        uint64_t v47 = v0[25];
        uint64_t v46 = v0[26];
        uint64_t v48 = v0[24];
        uint64_t v49 = v0[15];

        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
        sub_10000C728((void *)(v49 + 240), *(void *)(v49 + 264));
        uint64_t v50 = MobileDocumentReaderRequest.sessionIdentifier.getter();
        uint64_t v52 = v51;
        v0[67] = v51;
        uint64_t v53 = (void *)swift_task_alloc();
        v0[68] = v53;
        *uint64_t v53 = v0;
        v53[1] = sub_100554DCC;
        return sub_1000D5508(v50, v52);
      }
    }
    else
    {
      sub_100048D6C(v0[17], v0[18], &qword_100723600);
      uint64_t v22 = v17;
      if (v19(v18, 1, v21) != 1)
      {
        uint64_t v37 = v0[22];
        uint64_t v36 = v0[23];
        uint64_t v38 = v0[21];
        uint64_t v55 = v0[20];
        uint64_t v40 = v0[18];
        uint64_t v39 = v0[19];
        uint64_t v56 = v0[17];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v36, v18, v38);
        sub_100559418(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
        v42(v36, v38);
        sub_10000C6CC(v39, &qword_100723600);
        sub_10000C6CC(v55, &qword_100723600);
        v42(v40, v38);
        sub_10000C6CC(v56, &qword_100723600);
        swift_errorRelease();
        if (v41) {
          goto LABEL_15;
        }
        goto LABEL_11;
      }
      uint64_t v32 = v0[21];
      uint64_t v31 = v0[22];
      uint64_t v33 = v0[20];
      uint64_t v34 = v0[18];
      sub_10000C6CC(v0[19], &qword_100723600);
      sub_10000C6CC(v33, &qword_100723600);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v32);
    }
    sub_10000C6CC(v0[17], &qword_100722D90);
    swift_errorRelease();
LABEL_11:
    v22(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v35 = (uint64_t (*)(void))v0[1];
    return v35();
  }
  uint64_t v24 = (void *)v0[15];
  sub_1000D5BA0(v1, v0[44]);
  v0[48] = v24[12];
  v0[49] = v24[13];
  uint64_t v25 = v24[14];
  v0[50] = v25;
  uint64_t ObjectType = swift_getObjectType();
  v0[51] = ObjectType;
  id v27 = (void *)swift_task_alloc();
  v0[52] = v27;
  void *v27 = v0;
  v27[1] = sub_10055359C;
  uint64_t v28 = v0[40];
  uint64_t v29 = v0[14];
  return sub_100547970(v28, v29, ObjectType, v25);
}

uint64_t sub_100552F38()
{
  swift_bridgeObjectRelease();
  v0[64] = v0[47];
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[17];
  uint64_t v39 = v0[16];
  swift_getErrorValue();
  swift_errorRetain();
  Error.dipErrorCode.getter();
  uint64_t v6 = enum case for DIPError.Code.sesKeySignError(_:);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  v0[65] = v7;
  v0[66] = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v7(v3, v6, v1);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v3, 0, 1, v1);
  uint64_t v8 = v5 + *(int *)(v39 + 48);
  sub_100048D6C(v4, v5, &qword_100723600);
  sub_100048D6C(v3, v8, &qword_100723600);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  int v10 = v9(v5, 1, v1);
  uint64_t v11 = v0[21];
  if (v10 == 1)
  {
    uint64_t v12 = v7;
    uint64_t v13 = v0[20];
    sub_10000C6CC(v0[19], &qword_100723600);
    sub_10000C6CC(v13, &qword_100723600);
    if (v9(v8, 1, v11) == 1)
    {
      sub_10000C6CC(v0[17], &qword_100723600);
      swift_errorRelease();
LABEL_11:
      defaultLogger()();
      id v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "MobileDocumentReaderManager encountered error while signing with underlying SE key. Session is no longer valid, deleting from local storage and throwing a session expired error.", v29, 2u);
        swift_slowDealloc();
      }
      uint64_t v31 = v0[25];
      uint64_t v30 = v0[26];
      uint64_t v32 = v0[24];
      uint64_t v33 = v0[15];

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      sub_10000C728((void *)(v33 + 240), *(void *)(v33 + 264));
      uint64_t v34 = MobileDocumentReaderRequest.sessionIdentifier.getter();
      uint64_t v36 = v35;
      v0[67] = v35;
      uint64_t v37 = (void *)swift_task_alloc();
      v0[68] = v37;
      *uint64_t v37 = v0;
      v37[1] = sub_100554DCC;
      return sub_1000D5508(v34, v36);
    }
    goto LABEL_6;
  }
  sub_100048D6C(v0[17], v0[18], &qword_100723600);
  uint64_t v12 = v7;
  if (v9(v8, 1, v11) == 1)
  {
    uint64_t v15 = v0[21];
    uint64_t v14 = v0[22];
    uint64_t v16 = v0[20];
    uint64_t v17 = v0[18];
    sub_10000C6CC(v0[19], &qword_100723600);
    sub_10000C6CC(v16, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v15);
LABEL_6:
    sub_10000C6CC(v0[17], &qword_100722D90);
    swift_errorRelease();
    goto LABEL_7;
  }
  uint64_t v21 = v0[22];
  uint64_t v20 = v0[23];
  uint64_t v22 = v0[21];
  uint64_t v38 = v0[20];
  uint64_t v23 = v0[18];
  uint64_t v24 = v0[19];
  uint64_t v40 = v0[17];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v20, v8, v22);
  sub_100559418(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v26(v20, v22);
  sub_10000C6CC(v24, &qword_100723600);
  sub_10000C6CC(v38, &qword_100723600);
  v26(v23, v22);
  sub_10000C6CC(v40, &qword_100723600);
  swift_errorRelease();
  if (v25) {
    goto LABEL_11;
  }
LABEL_7:
  v12(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_10055359C()
{
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1005551C0;
  }
  else {
    uint64_t v2 = sub_1005536B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005536B0()
{
  uint64_t v1 = v0[53];
  uint64_t v2 = v0[44];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[13];
  sub_10000C728((void *)(v5 + 120), *(void *)(v5 + 144));
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(v3 + 40));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000338D4(*v7, v9);
  sub_10017F760(v6, v8, v9, v4);
  if (v1)
  {
    uint64_t v10 = v0[44];
    uint64_t v12 = v0[39];
    uint64_t v11 = v0[40];
    uint64_t v13 = v0[38];
    sub_10000C5E0(v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    sub_10055934C(v10);
    v0[64] = v1;
    uint64_t v14 = v0[21];
    uint64_t v15 = v0[22];
    uint64_t v16 = v0[19];
    uint64_t v17 = v0[20];
    uint64_t v18 = v0[17];
    uint64_t v60 = v0[16];
    swift_getErrorValue();
    swift_errorRetain();
    Error.dipErrorCode.getter();
    uint64_t v19 = enum case for DIPError.Code.sesKeySignError(_:);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 104);
    v0[65] = v20;
    v0[66] = (v15 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v20(v16, v19, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v16, 0, 1, v14);
    uint64_t v21 = v18 + *(int *)(v60 + 48);
    sub_100048D6C(v17, v18, &qword_100723600);
    sub_100048D6C(v16, v21, &qword_100723600);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    int v23 = v22(v18, 1, v14);
    uint64_t v24 = v0[21];
    if (v23 == 1)
    {
      char v25 = v20;
      uint64_t v26 = v0[20];
      sub_10000C6CC(v0[19], &qword_100723600);
      sub_10000C6CC(v26, &qword_100723600);
      if (v22(v21, 1, v24) == 1)
      {
        sub_10000C6CC(v0[17], &qword_100723600);
        swift_errorRelease();
LABEL_15:
        defaultLogger()();
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v50 = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "MobileDocumentReaderManager encountered error while signing with underlying SE key. Session is no longer valid, deleting from local storage and throwing a session expired error.", v50, 2u);
          swift_slowDealloc();
        }
        uint64_t v52 = v0[25];
        uint64_t v51 = v0[26];
        uint64_t v53 = v0[24];
        uint64_t v54 = v0[15];

        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
        sub_10000C728((void *)(v54 + 240), *(void *)(v54 + 264));
        uint64_t v55 = MobileDocumentReaderRequest.sessionIdentifier.getter();
        uint64_t v57 = v56;
        v0[67] = v56;
        uint64_t v58 = (void *)swift_task_alloc();
        v0[68] = v58;
        *uint64_t v58 = v0;
        v58[1] = sub_100554DCC;
        return sub_1000D5508(v55, v57);
      }
    }
    else
    {
      sub_100048D6C(v0[17], v0[18], &qword_100723600);
      char v25 = v20;
      if (v22(v21, 1, v24) != 1)
      {
        uint64_t v42 = v0[22];
        uint64_t v41 = v0[23];
        uint64_t v43 = v0[21];
        uint64_t v59 = v0[20];
        uint64_t v44 = v0[18];
        uint64_t v45 = v0[19];
        uint64_t v61 = v0[17];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v41, v21, v43);
        sub_100559418(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
        char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        v47(v41, v43);
        sub_10000C6CC(v45, &qword_100723600);
        sub_10000C6CC(v59, &qword_100723600);
        v47(v44, v43);
        sub_10000C6CC(v61, &qword_100723600);
        swift_errorRelease();
        if (v46) {
          goto LABEL_15;
        }
        goto LABEL_11;
      }
      uint64_t v36 = v0[21];
      uint64_t v37 = v0[22];
      uint64_t v38 = v0[20];
      uint64_t v39 = v0[18];
      sub_10000C6CC(v0[19], &qword_100723600);
      sub_10000C6CC(v38, &qword_100723600);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v36);
    }
    sub_10000C6CC(v0[17], &qword_100722D90);
    swift_errorRelease();
LABEL_11:
    v25(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = (uint64_t (*)(void))v0[1];
    return v40();
  }
  uint64_t v27 = v0[51];
  uint64_t v28 = v0[48];
  uint64_t v29 = v0[49];
  sub_10000C5E0(v8, v9);
  sub_10000C728((void *)(v5 + 120), *(void *)(v5 + 144));
  v0[5] = v27;
  v0[6] = v29;
  v0[2] = v28;
  swift_unknownObjectRetain();
  uint64_t v30 = (void *)swift_task_alloc();
  v0[54] = v30;
  void *v30 = v0;
  v30[1] = sub_100553E58;
  uint64_t v31 = v0[44];
  uint64_t v32 = v0[40];
  uint64_t v33 = v0[36];
  uint64_t v34 = v0[37];
  return sub_100180980(v33, v34, v32, v31, (uint64_t)(v0 + 2));
}

uint64_t sub_100553E58()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1005541C8;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v2 + 16);
    uint64_t v3 = sub_100553F74;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100553F74()
{
  uint64_t v2 = v0[32];
  uint64_t v1 = v0[33];
  uint64_t v4 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v5 = v0[28];
  uint64_t v6 = v0[29];
  static MobileDocumentReaderMilestone.readRequestBuilt.getter();
  Milestone.log()();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[56] = v7;
  v0[57] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v1, v3);
  type metadata accessor for DaemonAnalytics();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v4, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.valid(_:), v5);
  static DaemonAnalytics.sendReadDocumentSessionStatus(status:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[58] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1005540B0;
  uint64_t v10 = v0[50];
  uint64_t v9 = v0[51];
  uint64_t v11 = v0[36];
  return sub_100548260(v11, v9, v10);
}

uint64_t sub_1005540B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[59] = a1;
  v4[60] = a2;
  v4[61] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100555824;
  }
  else {
    uint64_t v5 = sub_100554870;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005541C8()
{
  uint64_t v1 = v0[44];
  uint64_t v3 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v4 = v0[38];
  (*(void (**)(void, void))(v0[35] + 8))(v0[37], v0[34]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10055934C(v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  v0[64] = v0[55];
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[22];
  uint64_t v7 = v0[19];
  uint64_t v8 = v0[20];
  uint64_t v9 = v0[17];
  uint64_t v43 = v0[16];
  swift_getErrorValue();
  swift_errorRetain();
  Error.dipErrorCode.getter();
  uint64_t v10 = enum case for DIPError.Code.sesKeySignError(_:);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
  v0[65] = v11;
  v0[66] = (v6 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v11(v7, v10, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
  uint64_t v12 = v9 + *(int *)(v43 + 48);
  sub_100048D6C(v8, v9, &qword_100723600);
  sub_100048D6C(v7, v12, &qword_100723600);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  int v14 = v13(v9, 1, v5);
  uint64_t v15 = v0[21];
  if (v14 == 1)
  {
    uint64_t v16 = v11;
    uint64_t v17 = v0[20];
    sub_10000C6CC(v0[19], &qword_100723600);
    sub_10000C6CC(v17, &qword_100723600);
    if (v13(v12, 1, v15) == 1)
    {
      sub_10000C6CC(v0[17], &qword_100723600);
      swift_errorRelease();
LABEL_11:
      defaultLogger()();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "MobileDocumentReaderManager encountered error while signing with underlying SE key. Session is no longer valid, deleting from local storage and throwing a session expired error.", v33, 2u);
        swift_slowDealloc();
      }
      uint64_t v35 = v0[25];
      uint64_t v34 = v0[26];
      uint64_t v36 = v0[24];
      uint64_t v37 = v0[15];

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
      sub_10000C728((void *)(v37 + 240), *(void *)(v37 + 264));
      uint64_t v38 = MobileDocumentReaderRequest.sessionIdentifier.getter();
      uint64_t v40 = v39;
      v0[67] = v39;
      uint64_t v41 = (void *)swift_task_alloc();
      v0[68] = v41;
      *uint64_t v41 = v0;
      v41[1] = sub_100554DCC;
      return sub_1000D5508(v38, v40);
    }
    goto LABEL_6;
  }
  sub_100048D6C(v0[17], v0[18], &qword_100723600);
  uint64_t v16 = v11;
  if (v13(v12, 1, v15) == 1)
  {
    uint64_t v19 = v0[21];
    uint64_t v18 = v0[22];
    uint64_t v20 = v0[20];
    uint64_t v21 = v0[18];
    sub_10000C6CC(v0[19], &qword_100723600);
    sub_10000C6CC(v20, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v19);
LABEL_6:
    sub_10000C6CC(v0[17], &qword_100722D90);
    swift_errorRelease();
    goto LABEL_7;
  }
  uint64_t v25 = v0[22];
  uint64_t v24 = v0[23];
  uint64_t v26 = v0[21];
  uint64_t v42 = v0[20];
  uint64_t v27 = v0[18];
  uint64_t v28 = v0[19];
  uint64_t v44 = v0[17];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v24, v12, v26);
  sub_100559418(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v30(v24, v26);
  sub_10000C6CC(v28, &qword_100723600);
  sub_10000C6CC(v42, &qword_100723600);
  v30(v27, v26);
  sub_10000C6CC(v44, &qword_100723600);
  swift_errorRelease();
  if (v29) {
    goto LABEL_11;
  }
LABEL_7:
  v16(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_100554870()
{
  uint64_t v30 = v0;
  uint64_t v1 = v0[59];
  unint64_t v2 = v0[60];
  defaultLogger()();
  sub_10002CEB0(v1, v2);
  sub_10002CEB0(v1, v2);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v6 = v0[59];
    unint64_t v5 = v0[60];
    uint64_t v26 = v0[25];
    uint64_t v27 = v0[24];
    uint64_t v28 = v0[27];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_10002CEB0(v6, v5);
    uint64_t v8 = Data.description.getter();
    unint64_t v10 = v9;
    sub_10000C5F4(v6, v5);
    v0[11] = sub_100110D58(v8, v10, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000C5F4(v6, v5);
    sub_10000C5F4(v6, v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderManager: Mobile document response received: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    uint64_t v12 = v0[59];
    unint64_t v11 = v0[60];
    uint64_t v13 = v0[27];
    uint64_t v14 = v0[24];
    uint64_t v15 = v0[25];
    sub_10000C5F4(v12, v11);
    sub_10000C5F4(v12, v11);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[56];
  uint64_t v17 = v0[33];
  uint64_t v18 = v0[31];
  static MobileDocumentReaderMilestone.readDocumentResponseReceived.getter();
  Milestone.log()();
  v16(v17, v18);
  uint64_t v19 = (void *)swift_task_alloc();
  v0[62] = v19;
  void *v19 = v0;
  v19[1] = sub_100554B2C;
  uint64_t v20 = v0[59];
  uint64_t v21 = v0[60];
  uint64_t v22 = v0[40];
  uint64_t v23 = v0[12];
  uint64_t v24 = v0[13];
  return sub_1005565A0(v23, v20, v21, v24, v22);
}

uint64_t sub_100554B2C()
{
  *(void *)(*(void *)v1 + 504) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_100555EE0;
  }
  else {
    unint64_t v2 = sub_100554C40;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100554C40()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[38];
  uint64_t v4 = v0[39];
  uint64_t v6 = v0[36];
  uint64_t v5 = v0[37];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[35];
  sub_10000C5F4(v0[59], v0[60]);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_10055934C(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100554DCC()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100554EE4, 0, 0);
}

uint64_t sub_100554EE4()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t))v0[65];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v4 = v0[28];
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[21];
  type metadata accessor for DaemonAnalytics();
  uint64_t v7 = enum case for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.seKeyMissing(_:);
  uint64_t v8 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v2, v7, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.invalid(_:), v4);
  static DaemonAnalytics.sendReadDocumentSessionStatus(status:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v1(v5, enum case for DIPError.Code.documentReaderSessionExpired(_:), v6);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1005551C0()
{
  sub_10055934C(v0[44]);
  v0[64] = v0[53];
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[17];
  uint64_t v39 = v0[16];
  swift_getErrorValue();
  swift_errorRetain();
  Error.dipErrorCode.getter();
  uint64_t v6 = enum case for DIPError.Code.sesKeySignError(_:);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  v0[65] = v7;
  v0[66] = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v7(v3, v6, v1);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v3, 0, 1, v1);
  uint64_t v8 = v5 + *(int *)(v39 + 48);
  sub_100048D6C(v4, v5, &qword_100723600);
  sub_100048D6C(v3, v8, &qword_100723600);
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  int v10 = v9(v5, 1, v1);
  uint64_t v11 = v0[21];
  if (v10 == 1)
  {
    uint64_t v12 = v7;
    uint64_t v13 = v0[20];
    sub_10000C6CC(v0[19], &qword_100723600);
    sub_10000C6CC(v13, &qword_100723600);
    if (v9(v8, 1, v11) == 1)
    {
      sub_10000C6CC(v0[17], &qword_100723600);
      swift_errorRelease();
LABEL_11:
      defaultLogger()();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "MobileDocumentReaderManager encountered error while signing with underlying SE key. Session is no longer valid, deleting from local storage and throwing a session expired error.", v29, 2u);
        swift_slowDealloc();
      }
      uint64_t v31 = v0[25];
      uint64_t v30 = v0[26];
      uint64_t v32 = v0[24];
      uint64_t v33 = v0[15];

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      sub_10000C728((void *)(v33 + 240), *(void *)(v33 + 264));
      uint64_t v34 = MobileDocumentReaderRequest.sessionIdentifier.getter();
      uint64_t v36 = v35;
      v0[67] = v35;
      uint64_t v37 = (void *)swift_task_alloc();
      v0[68] = v37;
      *uint64_t v37 = v0;
      v37[1] = sub_100554DCC;
      return sub_1000D5508(v34, v36);
    }
    goto LABEL_6;
  }
  sub_100048D6C(v0[17], v0[18], &qword_100723600);
  uint64_t v12 = v7;
  if (v9(v8, 1, v11) == 1)
  {
    uint64_t v15 = v0[21];
    uint64_t v14 = v0[22];
    uint64_t v16 = v0[20];
    uint64_t v17 = v0[18];
    sub_10000C6CC(v0[19], &qword_100723600);
    sub_10000C6CC(v16, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v15);
LABEL_6:
    sub_10000C6CC(v0[17], &qword_100722D90);
    swift_errorRelease();
    goto LABEL_7;
  }
  uint64_t v21 = v0[22];
  uint64_t v20 = v0[23];
  uint64_t v22 = v0[21];
  uint64_t v38 = v0[20];
  uint64_t v23 = v0[18];
  uint64_t v24 = v0[19];
  uint64_t v40 = v0[17];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v20, v8, v22);
  sub_100559418(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v26(v20, v22);
  sub_10000C6CC(v24, &qword_100723600);
  sub_10000C6CC(v38, &qword_100723600);
  v26(v23, v22);
  sub_10000C6CC(v40, &qword_100723600);
  swift_errorRelease();
  if (v25) {
    goto LABEL_11;
  }
LABEL_7:
  v12(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100555824()
{
  uint64_t v1 = v0[44];
  uint64_t v3 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v5 = v0[37];
  uint64_t v4 = v0[38];
  uint64_t v6 = v0[34];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0[35] + 8);
  v7(v0[36], v6);
  v7(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10055934C(v1);
  v0[64] = v0[61];
  uint64_t v8 = v0[21];
  uint64_t v9 = v0[22];
  uint64_t v10 = v0[19];
  uint64_t v11 = v0[20];
  uint64_t v12 = v0[17];
  uint64_t v46 = v0[16];
  swift_getErrorValue();
  swift_errorRetain();
  Error.dipErrorCode.getter();
  uint64_t v13 = enum case for DIPError.Code.sesKeySignError(_:);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
  v0[65] = v14;
  v0[66] = (v9 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v14(v10, v13, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v10, 0, 1, v8);
  uint64_t v15 = v12 + *(int *)(v46 + 48);
  sub_100048D6C(v11, v12, &qword_100723600);
  sub_100048D6C(v10, v15, &qword_100723600);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  int v17 = v16(v12, 1, v8);
  uint64_t v18 = v0[21];
  if (v17 == 1)
  {
    uint64_t v19 = v14;
    uint64_t v20 = v0[20];
    sub_10000C6CC(v0[19], &qword_100723600);
    sub_10000C6CC(v20, &qword_100723600);
    if (v16(v15, 1, v18) == 1)
    {
      sub_10000C6CC(v0[17], &qword_100723600);
      swift_errorRelease();
LABEL_11:
      defaultLogger()();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "MobileDocumentReaderManager encountered error while signing with underlying SE key. Session is no longer valid, deleting from local storage and throwing a session expired error.", v36, 2u);
        swift_slowDealloc();
      }
      uint64_t v38 = v0[25];
      uint64_t v37 = v0[26];
      uint64_t v39 = v0[24];
      uint64_t v40 = v0[15];

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      sub_10000C728((void *)(v40 + 240), *(void *)(v40 + 264));
      uint64_t v41 = MobileDocumentReaderRequest.sessionIdentifier.getter();
      uint64_t v43 = v42;
      v0[67] = v42;
      uint64_t v44 = (void *)swift_task_alloc();
      v0[68] = v44;
      *uint64_t v44 = v0;
      v44[1] = sub_100554DCC;
      return sub_1000D5508(v41, v43);
    }
    goto LABEL_6;
  }
  sub_100048D6C(v0[17], v0[18], &qword_100723600);
  uint64_t v19 = v14;
  if (v16(v15, 1, v18) == 1)
  {
    uint64_t v22 = v0[21];
    uint64_t v21 = v0[22];
    uint64_t v23 = v0[20];
    uint64_t v24 = v0[18];
    sub_10000C6CC(v0[19], &qword_100723600);
    sub_10000C6CC(v23, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v24, v22);
LABEL_6:
    sub_10000C6CC(v0[17], &qword_100722D90);
    swift_errorRelease();
    goto LABEL_7;
  }
  uint64_t v28 = v0[22];
  uint64_t v27 = v0[23];
  uint64_t v29 = v0[21];
  uint64_t v45 = v0[20];
  uint64_t v30 = v0[18];
  uint64_t v31 = v0[19];
  uint64_t v47 = v0[17];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v27, v15, v29);
  sub_100559418(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v33(v27, v29);
  sub_10000C6CC(v31, &qword_100723600);
  sub_10000C6CC(v45, &qword_100723600);
  v33(v30, v29);
  sub_10000C6CC(v47, &qword_100723600);
  swift_errorRelease();
  if (v32) {
    goto LABEL_11;
  }
LABEL_7:
  v19(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_100555EE0()
{
  uint64_t v1 = v0[44];
  uint64_t v3 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v5 = v0[37];
  uint64_t v4 = v0[38];
  uint64_t v6 = v0[35];
  uint64_t v7 = v0[36];
  uint64_t v8 = v0[34];
  sub_10000C5F4(v0[59], v0[60]);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v7, v8);
  v9(v5, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10055934C(v1);
  v0[64] = v0[63];
  uint64_t v10 = v0[21];
  uint64_t v11 = v0[22];
  uint64_t v12 = v0[19];
  uint64_t v13 = v0[20];
  uint64_t v14 = v0[17];
  uint64_t v47 = v0[16];
  swift_getErrorValue();
  swift_errorRetain();
  Error.dipErrorCode.getter();
  uint64_t v15 = enum case for DIPError.Code.sesKeySignError(_:);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104);
  v0[65] = v16;
  v0[66] = (v11 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v16(v12, v15, v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v12, 0, 1, v10);
  uint64_t v17 = v14 + *(int *)(v47 + 48);
  sub_100048D6C(v13, v14, &qword_100723600);
  sub_100048D6C(v12, v17, &qword_100723600);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v19 = v18(v14, 1, v10);
  uint64_t v20 = v0[21];
  if (v19 == 1)
  {
    uint64_t v21 = v16;
    uint64_t v22 = v0[20];
    sub_10000C6CC(v0[19], &qword_100723600);
    sub_10000C6CC(v22, &qword_100723600);
    if (v18(v17, 1, v20) == 1)
    {
      sub_10000C6CC(v0[17], &qword_100723600);
      swift_errorRelease();
LABEL_11:
      defaultLogger()();
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "MobileDocumentReaderManager encountered error while signing with underlying SE key. Session is no longer valid, deleting from local storage and throwing a session expired error.", v38, 2u);
        swift_slowDealloc();
      }
      uint64_t v40 = v0[25];
      uint64_t v39 = v0[26];
      uint64_t v41 = v0[24];
      uint64_t v42 = v0[15];

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
      sub_10000C728((void *)(v42 + 240), *(void *)(v42 + 264));
      uint64_t v43 = MobileDocumentReaderRequest.sessionIdentifier.getter();
      uint64_t v45 = v44;
      v0[67] = v44;
      uint64_t v46 = (void *)swift_task_alloc();
      v0[68] = v46;
      *uint64_t v46 = v0;
      v46[1] = sub_100554DCC;
      return sub_1000D5508(v43, v45);
    }
    goto LABEL_6;
  }
  sub_100048D6C(v0[17], v0[18], &qword_100723600);
  uint64_t v21 = v16;
  if (v18(v17, 1, v20) == 1)
  {
    uint64_t v24 = v0[21];
    uint64_t v23 = v0[22];
    uint64_t v25 = v0[20];
    uint64_t v26 = v0[18];
    sub_10000C6CC(v0[19], &qword_100723600);
    sub_10000C6CC(v25, &qword_100723600);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v24);
LABEL_6:
    sub_10000C6CC(v0[17], &qword_100722D90);
    swift_errorRelease();
    goto LABEL_7;
  }
  uint64_t v30 = v0[22];
  uint64_t v29 = v0[23];
  uint64_t v31 = v0[21];
  uint64_t v32 = v0[18];
  uint64_t v33 = v0[19];
  uint64_t v48 = v0[20];
  uint64_t v49 = v0[17];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v29, v17, v31);
  sub_100559418(&qword_100722DA0, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  os_log_type_t v35 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v35(v29, v31);
  sub_10000C6CC(v33, &qword_100723600);
  sub_10000C6CC(v48, &qword_100723600);
  v35(v32, v31);
  sub_10000C6CC(v49, &qword_100723600);
  swift_errorRelease();
  if (v34) {
    goto LABEL_11;
  }
LABEL_7:
  v21(v0[23], enum case for DIPError.Code.internalError(_:), v0[21]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

uint64_t sub_1005565A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = type metadata accessor for DIPError.Code();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for VICALDocument();
  v6[16] = v9;
  v6[17] = *(void *)(v9 - 8);
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  sub_100007764(&qword_100725760);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  sub_100007764(&qword_100725768);
  v6[23] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for MobileDocumentReaderRequest.Document.RequestType();
  v6[24] = v10;
  v6[25] = *(void *)(v10 - 8);
  v6[26] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for MobileDocumentReaderRequest.Document();
  v6[27] = v11;
  v6[28] = *(void *)(v11 - 8);
  v6[29] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ISO18013Response.Status();
  v6[30] = v12;
  v6[31] = *(void *)(v12 - 8);
  v6[32] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Logger();
  v6[33] = v13;
  v6[34] = *(void *)(v13 - 8);
  v6[35] = swift_task_alloc();
  v6[36] = swift_task_alloc();
  v6[37] = swift_task_alloc();
  v6[38] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for ISO18013Response();
  v6[39] = v14;
  v6[40] = *(void *)(v14 - 8);
  v6[41] = swift_task_alloc();
  v6[42] = swift_task_alloc();
  return _swift_task_switch(sub_1005569B0, 0, 0);
}

uint64_t sub_1005569B0()
{
  sub_1005585A4();
  uint64_t v3 = v0[41];
  uint64_t v2 = v0[42];
  uint64_t v4 = v0[39];
  uint64_t v5 = v0[40];
  defaultLogger()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[40];
  uint64_t v10 = v0[41];
  if (v8)
  {
    uint64_t v11 = v0[31];
    uint64_t v12 = v0[32];
    uint64_t v43 = v0[30];
    os_log_type_t v47 = v7;
    uint64_t v45 = v0[39];
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134217984;
    ISO18013Response.status.getter();
    uint64_t v14 = ISO18013Response.Status.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v43);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v15(v10, v45);
    v0[3] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v47, "MobileDocumentReaderManager: Valid ISO18013 response received with status: %lu", v13, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v15(v0[41], v0[39]);
  }

  uint64_t v48 = v15;
  v0[43] = v15;
  uint64_t v16 = v0[38];
  uint64_t v17 = v0[33];
  uint64_t v18 = v0[34];
  uint64_t v20 = v0[28];
  uint64_t v19 = v0[29];
  uint64_t v22 = v0[26];
  uint64_t v21 = v0[27];
  uint64_t v23 = v0[24];
  uint64_t v24 = v0[25];
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v0[44] = v25;
  v0[45] = (v18 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v46 = v25;
  v25(v16, v17);
  MobileDocumentReaderRequest.document.getter();
  MobileDocumentReaderRequest.Document.requestType.getter();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v24 + 88))(v22, v23) == enum case for MobileDocumentReaderRequest.Document.RequestType.dataTransfer(_:))
  {
    (*(void (**)(void, void))(v0[25] + 96))(v0[26], v0[24]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    defaultLogger()();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "MobileDocumentReaderManager data transfer request, returning data blob.", v28, 2u);
      swift_slowDealloc();
    }
    uint64_t v29 = v0[37];
    uint64_t v30 = v0[33];

    v46(v29, v30);
    type metadata accessor for CBOREncoder();
    swift_allocObject();
    CBOREncoder.init()();
    type metadata accessor for ISO18013SessionTranscript();
    sub_100559418(&qword_100732D18, (void (*)(uint64_t))&type metadata accessor for ISO18013SessionTranscript);
    dispatch thunk of CBOREncoder.encode<A>(_:)();
    uint64_t v31 = v0[42];
    uint64_t v32 = v0[39];
    uint64_t v36 = v0[23];
    uint64_t v37 = v0[13];
    uint64_t v38 = v0[14];
    uint64_t v39 = v0[5];
    unint64_t v40 = v0[6];
    uint64_t v44 = v0[22];
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v36, 1, 1, v37);
    uint64_t v41 = type metadata accessor for MobileDocumentIssuer();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v44, 1, 1, v41);
    sub_10002CEB0(v39, v40);
    MobileDocumentReaderResponse.init(responseData:sessionTranscript:mobileIdentityDocumentElements:issuer:)();
    v48(v31, v32);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v42 = (uint64_t (*)(void))v0[1];
    return v42();
  }
  else
  {
    uint64_t v33 = v0[9];
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
    sub_10000C728((void *)(v33 + 280), *(void *)(v33 + 304));
    char v34 = (void *)swift_task_alloc();
    v0[46] = v34;
    *char v34 = v0;
    v34[1] = sub_100557200;
    uint64_t v35 = v0[7];
    return sub_10014A12C(v35);
  }
}

uint64_t sub_100557200(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 376) = a1;
  *(void *)(v3 + 384) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1005574B4;
  }
  else {
    uint64_t v4 = sub_100557314;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_100557314()
{
  uint64_t v1 = v0[47];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = (unint64_t *)(v1 + 40);
    while (1)
    {
      uint64_t v4 = *(v3 - 1);
      unint64_t v5 = *v3;
      sub_10002CEB0(v4, *v3);
      CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
      SecCertificateRef v7 = SecCertificateCreateWithData(kCFAllocatorDefault, isa);

      if (!v7) {
        break;
      }
      v3 += 2;
      sub_10000C5F4(v4, v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!--v2) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    v0[49] = _swiftEmptyArrayStorage;
    sub_10000C728((void *)(v0[9] + 280), *(void *)(v0[9] + 304));
    BOOL v8 = (void *)swift_task_alloc();
    v0[50] = v8;
    *BOOL v8 = v0;
    v8[1] = sub_100557754;
    uint64_t v9 = v0[19];
    sub_100148E08(v9);
  }
}

uint64_t sub_1005574B4()
{
  (*(void (**)(void, void))(v0 + 344))(*(void *)(v0 + 336), *(void *)(v0 + 312));
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100557754()
{
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100557974;
  }
  else {
    uint64_t v2 = sub_100557868;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100557868()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v5 = sub_10014DB24(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v0[52] = v5;
  sub_10000C728((void *)(v0[9] + 160), *(void *)(v0[9] + 184));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[53] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100557A34;
  uint64_t v7 = v0[49];
  uint64_t v8 = v0[42];
  uint64_t v9 = v0[8];
  return sub_1000F27E4(v8, v9, v7, v5);
}

uint64_t sub_100557974()
{
  swift_errorRelease();
  v0[52] = 0;
  sub_10000C728((void *)(v0[9] + 160), *(void *)(v0[9] + 184));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[53] = v1;
  void *v1 = v0;
  v1[1] = sub_100557A34;
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[8];
  return sub_1000F27E4(v3, v4, v2, 0);
}

uint64_t sub_100557A34(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 432) = a1;
  *(void *)(v3 + 440) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_100558304;
  }
  else {
    uint64_t v4 = sub_100557B8C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100557B8C()
{
  uint64_t v1 = v0[55];
  uint64_t v2 = v0[42];
  uint64_t v3 = v0[15];
  uint64_t v4 = (char *)v0[7];
  sub_10000C728((void *)(v0[9] + 200), *(void *)(v0[9] + 224));
  sub_100540FF0(v2, v4, v3);
  uint64_t v5 = v0[54];
  if (!v1)
  {
    uint64_t v10 = *(void *)(v5 + 16);
    if (v10 == 1)
    {
      unint64_t v11 = *(void *)(v5 + 32);
      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t result = _CocoaArrayWrapper.endIndex.getter();
        if (result)
        {
LABEL_6:
          if ((v11 & 0xC000000000000001) != 0)
          {
            id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              return result;
            }
            id v14 = *(id *)(v11 + 32);
          }
          uint64_t v15 = v14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v16 = SecCertificateRef.stateOrProvinceName.getter();
          if (v17)
          {
            uint64_t v18 = v16;
            uint64_t v19 = v17;
          }
          else
          {
            uint64_t v18 = SecCertificateRef.countryName.getter();
            uint64_t v19 = v20;
            if (!v20)
            {
              uint64_t v21 = 1;
              goto LABEL_13;
            }
          }
          swift_bridgeObjectRetain();
          MobileDocumentIssuer.init(jurisdictionCode:)();
          uint64_t v21 = 0;
LABEL_13:
          uint64_t v22 = (void (*)(uint64_t, uint64_t))v0[44];
          uint64_t v23 = v0[36];
          uint64_t v24 = v0[33];
          uint64_t v26 = v0[20];
          uint64_t v25 = v0[21];
          uint64_t v27 = type metadata accessor for MobileDocumentIssuer();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, v21, 1, v27);
          sub_1005593A8(v26, v25);
          defaultLogger()();
          uint64_t v28 = swift_task_alloc();
          *(void *)(v28 + 16) = v18;
          *(void *)(v28 + 24) = v19;
          Logger.sensitive(_:)();

          swift_task_dealloc();
          v22(v23, v24);
          swift_bridgeObjectRelease();
LABEL_21:
          uint64_t v42 = (void (*)(uint64_t, uint64_t))v0[43];
          uint64_t v40 = v0[39];
          uint64_t v41 = v0[42];
          uint64_t v35 = v0[22];
          uint64_t v34 = v0[23];
          uint64_t v36 = v0[21];
          uint64_t v37 = v0[14];
          uint64_t v38 = v0[15];
          uint64_t v39 = v0[13];
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v34, v38, v39);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v39);
          sub_100048D6C(v36, v35, &qword_100725760);
          MobileDocumentReaderResponse.init(responseData:sessionTranscript:mobileIdentityDocumentElements:issuer:)();
          sub_10000C6CC(v36, &qword_100725760);
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
          v42(v41, v40);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v9 = (uint64_t (*)(void))v0[1];
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRetain();
        if (v12) {
          goto LABEL_6;
        }
      }
      swift_bridgeObjectRelease();
    }
    defaultLogger()();
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 134217984;
      swift_bridgeObjectRelease();
      v0[2] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Issuer certificate chains count != 1, was %ld, not returning issuer", v31, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v32 = v0[21];
    ((void (*)(void, void))v0[44])(v0[35], v0[33]);
    uint64_t v33 = type metadata accessor for MobileDocumentIssuer();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
    goto LABEL_21;
  }
  ((void (*)(void, void))v0[43])(v0[42], v0[39]);
  swift_bridgeObjectRelease();
  uint64_t v7 = v0[11];
  uint64_t v6 = v0[12];
  uint64_t v8 = v0[10];
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.internalError(_:), v8);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
LABEL_22:
  return v9();
}

uint64_t sub_100558304()
{
  (*(void (**)(void, void))(v0 + 344))(*(void *)(v0 + 336), *(void *)(v0 + 312));
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1005585A4()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v49 = *(void *)(v1 - 8);
  uint64_t v50 = v1;
  __chkstk_darwin(v1);
  uint64_t v53 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for ISO18013SessionData.Status();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v38 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100007764(&qword_100732D20);
  __chkstk_darwin(v41);
  uint64_t v46 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100007764(&qword_100732D28);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v40 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v43 = (uint64_t)&v37 - v9;
  __chkstk_darwin(v8);
  uint64_t v44 = (uint64_t)&v37 - v10;
  uint64_t v11 = type metadata accessor for ISO18013SessionData();
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  os_log_type_t v47 = (char *)&v37 - v15;
  type metadata accessor for CBORDecoder();
  swift_allocObject();
  CBORDecoder.init()();
  type metadata accessor for ISO18013Response();
  sub_100559418(&qword_100732D30, (void (*)(uint64_t))&type metadata accessor for ISO18013Response);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)();
  if (!v0) {
    return swift_release();
  }
  swift_release();
  swift_allocObject();
  swift_errorRetain();
  CBORDecoder.init()();
  sub_100559418(&qword_100732D38, (void (*)(uint64_t))&type metadata accessor for ISO18013SessionData);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)();
  uint64_t v39 = v11;
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v14, v39);
  uint64_t v17 = v44;
  ISO18013SessionData.status.getter();
  uint64_t v18 = v45;
  uint64_t v19 = v42;
  uint64_t v20 = v43;
  (*(void (**)(uint64_t, void, uint64_t))(v45 + 104))(v43, enum case for ISO18013SessionData.Status.sessionTerminationError(_:), v42);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v19);
  uint64_t v21 = v46;
  uint64_t v22 = v46 + *(int *)(v41 + 48);
  sub_100048D6C(v17, v46, &qword_100732D28);
  uint64_t v23 = v21;
  sub_100048D6C(v20, v22, &qword_100732D28);
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v24(v21, 1, v19) != 1)
  {
    uint64_t v30 = v40;
    sub_100048D6C(v21, v40, &qword_100732D28);
    if (v24(v22, 1, v19) != 1)
    {
      uint64_t v33 = v45;
      uint64_t v34 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v38, v22, v19);
      sub_100559418(&qword_100732D40, (void (*)(uint64_t))&type metadata accessor for ISO18013SessionData.Status);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v36 = *(void (**)(char *, uint64_t))(v33 + 8);
      v36(v34, v19);
      sub_10000C6CC(v43, &qword_100732D28);
      sub_10000C6CC(v44, &qword_100732D28);
      v36((char *)v30, v19);
      sub_10000C6CC(v23, &qword_100732D28);
      uint64_t v27 = v53;
      uint64_t v28 = v49;
      uint64_t v26 = v50;
      uint64_t v29 = v47;
      if (v35) {
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v31._uint64_t countAndFlagsBits = 0xD000000000000036;
      v31._object = (void *)0x80000001006559A0;
      String.append(_:)(v31);
      uint64_t v32 = v39;
      _print_unlocked<A, B>(_:_:)();
      (*(void (**)(char *, void, uint64_t))(v28 + 104))(v27, enum case for DIPError.Code.documentReaderInvalidResponse(_:), v26);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v29, v32);
    }
    sub_10000C6CC(v43, &qword_100732D28);
    sub_10000C6CC(v44, &qword_100732D28);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v30, v19);
    uint64_t v26 = v50;
LABEL_9:
    sub_10000C6CC(v23, &qword_100732D20);
    uint64_t v27 = v53;
    uint64_t v28 = v49;
    uint64_t v29 = v47;
    goto LABEL_10;
  }
  sub_10000C6CC(v20, &qword_100732D28);
  uint64_t v23 = v46;
  sub_10000C6CC(v17, &qword_100732D28);
  unsigned int v25 = v24(v22, 1, v19);
  uint64_t v26 = v50;
  if (v25 != 1) {
    goto LABEL_9;
  }
  sub_10000C6CC(v23, &qword_100732D28);
  uint64_t v27 = v53;
  uint64_t v28 = v49;
  uint64_t v29 = v47;
LABEL_12:
  (*(void (**)(char *, void, uint64_t))(v28 + 104))(v27, enum case for DIPError.Code.documentReaderHolderCancelled(_:), v26);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_100559418((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_errorRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v29, v39);
}

uint64_t sub_100559054(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(61);
  v4._object = (void *)0x80000001006558F0;
  v4._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
  String.append(_:)(v4);
  if (a2)
  {
    uint64_t v5 = a2;
  }
  else
  {
    a1 = 7104878;
    uint64_t v5 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = a1;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t sub_100559110()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 56);
  swift_unknownObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 120);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 160);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 200);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 240);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 280);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MobileDocumentReaderManager()
{
  return self;
}

uint64_t sub_1005591A4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 96) + 128);
  uint64_t v2 = (uint64_t (**)(uint64_t))&v1[4];
  uint64_t v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  sub_100559460(v2);
  os_unfair_lock_unlock(v3);
  return swift_release();
}

uint64_t sub_100559210()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10000C494;
  return sub_1005515AC();
}

uint64_t sub_10055929C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *Swift::String v7 = v3;
  v7[1] = sub_100025D64;
  return sub_1005520EC(a1, a2, a3);
}

uint64_t sub_10055934C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MobileDocumentReaderAuthenticationSession();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1005593A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100725760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100559410()
{
  return sub_100559054(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100559418(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100559460(uint64_t (**a1)(uint64_t a1))
{
  return sub_10054A324(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Class sub_10055947C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_10029FD94();
    v4.super.CFDataRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.CFDataRef isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_100559508(uint64_t a1)
{
  *(void *)(v2 + 224) = a1;
  *(void *)(v2 + 232) = v1;
  return _swift_task_switch(sub_100559528, v1, 0);
}

uint64_t sub_100559528()
{
  uint64_t v1 = *(void *)(v0 + 232) + 112;
  swift_beginAccess();
  sub_10055E9B4(v1, v0 + 16);
  if (*(void *)(v0 + 40))
  {
    sub_10000C6B4((long long *)(v0 + 16), *(void *)(v0 + 224));
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    sub_10000C6CC(v0 + 16, &qword_1007290A0);
    NSDictionary v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v4;
    *NSDictionary v4 = v0;
    v4[1] = sub_100559648;
    return sub_10055DB60(v0 + 56);
  }
}

uint64_t sub_100559648()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 248) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 232);
  if (v0) {
    NSDictionary v4 = sub_10055984C;
  }
  else {
    NSDictionary v4 = sub_100559774;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100559774()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232) + 112;
  sub_100030A10(v0 + 56, v0 + 96);
  sub_1000BEA14(v0 + 96, v0 + 136, &qword_1007290A0);
  swift_beginAccess();
  sub_10055EA1C(v0 + 136, v2);
  swift_endAccess();
  sub_10000C6B4((long long *)(v0 + 56), v1);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10055984C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100559864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[146] = v8;
  v9[145] = v17;
  v9[144] = a8;
  v9[143] = a7;
  v9[142] = a6;
  v9[141] = a5;
  v9[140] = a4;
  v9[139] = a3;
  v9[138] = a2;
  v9[137] = a1;
  uint64_t v10 = type metadata accessor for DIPError();
  v9[147] = v10;
  v9[148] = *(void *)(v10 - 8);
  v9[149] = swift_task_alloc();
  v9[150] = swift_task_alloc();
  v9[151] = swift_task_alloc();
  v9[152] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DIPError.Code();
  v9[153] = v11;
  v9[154] = *(void *)(v11 - 8);
  v9[155] = swift_task_alloc();
  v9[156] = swift_task_alloc();
  v9[157] = type metadata accessor for KRLFetchResult(0);
  v9[158] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  v9[159] = v12;
  v9[160] = *(void *)(v12 - 8);
  v9[161] = swift_task_alloc();
  v9[162] = swift_task_alloc();
  v9[163] = swift_task_alloc();
  v9[164] = swift_task_alloc();
  v9[165] = swift_task_alloc();
  v9[166] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SHA256();
  v9[167] = v13;
  v9[168] = *(void *)(v13 - 8);
  v9[169] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for SHA256Digest();
  v9[170] = v14;
  v9[171] = *(void *)(v14 - 8);
  v9[172] = swift_task_alloc();
  sub_100007764(&qword_100726640);
  v9[173] = swift_task_alloc();
  return _swift_task_switch(sub_100559BCC, v8, 0);
}

uint64_t sub_100559BCC()
{
  sub_10000C728((void *)(*(void *)(v0 + 1168) + 152), *(void *)(*(void *)(v0 + 1168) + 176));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1392) = v1;
  void *v1 = v0;
  v1[1] = sub_100559C98;
  return sub_100446714();
}

uint64_t sub_100559C98(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1168);
  *(unsigned char *)(*(void *)v1 + 405) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100559DDC, v2, 0);
}

uint64_t sub_100559DDC()
{
  uint64_t v60 = v0;
  if (*(unsigned char *)(v0 + 405) != 1)
  {
    defaultLogger()();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "KRL Feature is not enabled, aborting validation", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v17 = *(void *)(v0 + 1304);
    uint64_t v18 = *(void *)(v0 + 1280);
    uint64_t v19 = *(void *)(v0 + 1272);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    uint64_t v20 = *(_OWORD **)(v0 + 1096);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v20[1] = 0u;
    v20[2] = 0u;
    _OWORD *v20 = 0u;
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_9;
  }
  id v1 = [self standardUserDefaults];
  v2._uint64_t countAndFlagsBits = 0xD000000000000021;
  v2._object = (void *)0x8000000100655C20;
  Swift::Bool v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    defaultLogger()();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Forcing failure on KRL check from debug settings.", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void *)(v0 + 1312);
    uint64_t v8 = *(void *)(v0 + 1280);
    uint64_t v9 = *(void *)(v0 + 1272);
    uint64_t v10 = *(void *)(v0 + 1248);
    uint64_t v11 = *(void *)(v0 + 1232);
    uint64_t v12 = *(void *)(v0 + 1224);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.krlMatchedRevokedKey(_:), v12);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10055E8F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
LABEL_9:
    return v13();
  }
  uint64_t v22 = v0 + 408;
  uint64_t v23 = *(void *)(v0 + 1384);
  uint64_t v24 = *(void *)(v0 + 1184);
  uint64_t v25 = *(void *)(v0 + 1176);
  unint64_t v26 = *(void *)(v0 + 1112);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  *(void *)(v0 + 1400) = v27;
  *(void *)(v0 + 1408) = (v24 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v27(v23, 1, 1, v25);
  sub_10055E8F8(&qword_100722DF8, (void (*)(uint64_t))&type metadata accessor for SHA256);
  swift_bridgeObjectRetain();
  dispatch thunk of HashFunction.init()();
  switch(v26 >> 62)
  {
    case 1uLL:
      uint64_t v32 = *(void *)(v0 + 1104);
      uint64_t v33 = (int)v32;
      uint64_t v34 = v32 >> 32;
      if (v32 >> 32 < (int)v32) {
        __break(1u);
      }
      sub_10002CEB0(v32, *(void *)(v0 + 1112));
      sub_10018451C(v33, v34);
      goto LABEL_16;
    case 2uLL:
      uint64_t v35 = *(void *)(v0 + 1104);
      uint64_t v36 = *(void *)(v35 + 16);
      uint64_t v37 = *(void *)(v35 + 24);
      sub_10002CEB0(v35, *(void *)(v0 + 1112));
      swift_retain();
      swift_retain();
      sub_10018451C(v36, v37);
      swift_release();
      swift_release();
LABEL_16:
      unint64_t v31 = *(void *)(v0 + 1112);
      uint64_t v30 = *(void *)(v0 + 1104);
      break;
    case 3uLL:
      unint64_t v38 = *(void *)(v0 + 1112);
      uint64_t v39 = *(void *)(v0 + 1104);
      *(void *)(v0 + 377) = 0;
      *(void *)(v0 + 383) = 0;
      dispatch thunk of HashFunction.update(bufferPointer:)();
      uint64_t v30 = v39;
      unint64_t v31 = v38;
      break;
    default:
      unint64_t v28 = *(void *)(v0 + 1112);
      uint64_t v29 = *(void *)(v0 + 1104);
      *(void *)(v0 + 391) = v29;
      *(_WORD *)(v0 + 399) = v28;
      *(unsigned char *)(v0 + 401) = BYTE2(v28);
      *(unsigned char *)(v0 + 402) = BYTE3(v28);
      *(unsigned char *)(v0 + 403) = BYTE4(v28);
      *(unsigned char *)(v0 + 404) = BYTE5(v28);
      dispatch thunk of HashFunction.update(bufferPointer:)();
      uint64_t v30 = v29;
      unint64_t v31 = v28;
      break;
  }
  sub_10000C5F4(v30, v31);
  uint64_t v40 = *(void *)(v0 + 1376);
  uint64_t v41 = *(void *)(v0 + 1368);
  uint64_t v42 = *(void *)(v0 + 1360);
  uint64_t v43 = *(void *)(v0 + 1352);
  uint64_t v44 = *(void *)(v0 + 1344);
  uint64_t v45 = *(void *)(v0 + 1336);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
  sub_10055E8F8(&qword_100722E00, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  uint64_t v46 = Digest.data.getter();
  unint64_t v48 = v47;
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  Data.base16EncodedString()();
  sub_10000C5F4(v46, v48);
  Swift::String v49 = String.lowercased()();
  swift_bridgeObjectRelease();
  *(Swift::String *)(v0 + 1416) = v49;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.debug.getter();
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v58 = *(void *)(v0 + 1328);
  uint64_t v53 = *(void *)(v0 + 1280);
  uint64_t v54 = *(void *)(v0 + 1272);
  if (v52)
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 1072) = sub_100110D58(v49._countAndFlagsBits, (unint64_t)v49._object, &v59);
    uint64_t v22 = v0 + 408;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Validating %s against KRL", v55, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v56(v58, v54);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v56(v58, v54);
  }
  *(void *)(v0 + 1432) = v56;
  sub_10000C728((void *)(*(void *)(v0 + 1168) + 152), *(void *)(*(void *)(v0 + 1168) + 176));
  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 1440) = v57;
  *uint64_t v57 = v0;
  v57[1] = sub_10055A86C;
  return sub_100446D98(v22);
}

uint64_t sub_10055A86C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10055A994, 0, 0);
}

uint64_t sub_10055A994()
{
  sub_1000BEA14(v0 + 408, v0 + 16, &qword_100729958);
  if (sub_100447190(v0 + 16) == 1
    || (v1 = *(void *)(v0 + 368), char v2 = *(unsigned char *)(v0 + 376), sub_1002B66AC((uint64_t *)(v0 + 408)), (v2 & 1) != 0))
  {
    uint64_t v1 = 4;
  }
  *(void *)(v0 + 1448) = v1;
  uint64_t v3 = *(void *)(v0 + 1168);
  return _swift_task_switch(sub_10055AA70, v3, 0);
}

uint64_t sub_10055AA70()
{
  uint64_t v1 = v0[181];
  uint64_t v2 = String.count.getter();
  if (v1 >= v2) {
    uint64_t v1 = v2;
  }
  swift_bridgeObjectRetain();
  sub_10055E808(v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = static String._fromSubstring(_:)();
  uint64_t v5 = v4;
  v0[128] = v3;
  v0[129] = v4;
  swift_bridgeObjectRelease();
  v0[182] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[183] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10055ABDC;
  uint64_t v7 = v0[146];
  v6[28] = v0 + 123;
  v6[29] = v7;
  return _swift_task_switch(sub_100559528, v7, 0);
}

uint64_t sub_10055ABDC()
{
  uint64_t v2 = (void *)*v1;
  v2[184] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[146];
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10055CF14;
  }
  else
  {
    v2[185] = v2[128];
    uint64_t v4 = sub_10055AD50;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10055AD50()
{
  uint64_t v1 = v0[185];
  uint64_t v2 = v0[182];
  uint64_t v3 = v0[145];
  unint64_t v4 = v0[143];
  uint64_t v5 = v0[142];
  uint64_t v6 = v0[141];
  uint64_t v7 = v0[140];
  if (v3) {
    unint64_t v8 = v0[145];
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  if (v3) {
    uint64_t v9 = v0[144];
  }
  else {
    uint64_t v9 = 0x58582D5355;
  }
  sub_10000C728(v0 + 123, v0[126]);
  uint64_t v10 = 21333;
  if (v4) {
    uint64_t v10 = v5;
  }
  unint64_t v11 = 0xE200000000000000;
  if (v4) {
    unint64_t v11 = v4;
  }
  v0[97] = v10;
  v0[98] = v11;
  v0[99] = v9;
  v0[100] = v8;
  v0[101] = v7;
  v0[102] = v6;
  v0[103] = v1;
  v0[104] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[186] = v12;
  void *v12 = v0;
  v12[1] = sub_10055AED0;
  uint64_t v13 = v0[158];
  return sub_100102E70(v13, (uint64_t)(v0 + 97));
}

uint64_t sub_10055AED0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 1168);
    unint64_t v4 = sub_10055C288;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 1168);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_10055B080;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10055B080()
{
  int64_t v127 = v0;
  uint64_t v1 = 0x58582D5355;
  uint64_t v2 = v0[178];
  uint64_t v3 = v0[177];
  uint64_t v4 = v0[158];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 123));
  uint64_t v5 = *(void **)(v4 + *(int *)(type metadata accessor for KeyRevocationList() + 20));
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_10017E2A8();
  v126[0] = (uint64_t)v5;
  sub_100163268((uint64_t)v6);
  LOBYTE(v2) = sub_10020F0CC(v3, v2, v5);
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v7 = v0[158];
    uint64_t v8 = enum case for DIPError.Code.krlMatchedRevokedKey(_:);
    (*(void (**)(void, void, void))(v0[154] + 104))(v0[156], enum case for DIPError.Code.krlMatchedRevokedKey(_:), v0[153]);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10055E8F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    uint64_t v9 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10055E940(v7, type metadata accessor for KRLFetchResult);
    v0[132] = v9;
    swift_errorRetain();
    sub_100007764((uint64_t *)&unk_100723450);
    if (swift_dynamicCast())
    {
      uint64_t v10 = v0[156];
      uint64_t v11 = v0[155];
      uint64_t v12 = v0[154];
      uint64_t v13 = v0[153];
      (*(void (**)(void, void, void))(v0[148] + 32))(v0[151], v0[152], v0[147]);
      DIPError.code.getter();
      aBlock = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104);
      aBlock(v11, v8, v13);
      sub_10055E8F8(&qword_100724410, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v14 = v0[135];
      uint64_t v15 = v0[136];
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v16(v11, v13);
      v16(v10, v13);
      if (v14 == v15)
      {
        swift_errorRelease();
        defaultLogger()();
        swift_bridgeObjectRetain();
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        BOOL v19 = os_log_type_enabled(v17, v18);
        uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[179];
        unint64_t v21 = v0[178];
        uint64_t v112 = v16;
        if (v19)
        {
          uint64_t v121 = v0[162];
          uint64_t v118 = v0[177];
          uint64_t v120 = v0[159];
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          v126[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v22 = 136315138;
          swift_bridgeObjectRetain();
          v0[131] = sub_100110D58(v118, v21, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Matched %s with revoked key in KRL.", v22, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v24 = v120;
          uint64_t v23 = v121;
        }
        else
        {
          uint64_t v92 = v0[162];
          uint64_t v93 = v0[159];
          swift_bridgeObjectRelease_n();

          uint64_t v23 = v92;
          uint64_t v24 = v93;
        }
        v20(v23, v24);
        if (qword_10071F638 != -1) {
          swift_once();
        }
        unint64_t v94 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[175];
        uint64_t v95 = v0[173];
        uint64_t v96 = v0[151];
        uint64_t v97 = v0[148];
        uint64_t v98 = v0[147];
        uint64_t v99 = type metadata accessor for Milestone();
        sub_1000443D4(v99, (uint64_t)qword_100760960);
        Milestone.log()();
        sub_10000C6CC(v95, &qword_100726640);
        uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16);
        v100(v95, v96, v98);
        v94(v95, 0, 1, v98);
        swift_allocError();
        v100(v101, v96, v98);
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v96, v98);
        swift_errorRelease();
        int v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v95, 1, v98);
        uint64_t v103 = 0;
        if (!v102)
        {
          uint64_t v104 = v0[156];
          uint64_t v105 = v0[153];
          DIPError.code.getter();
          uint64_t v103 = DIPError.Code.rawValue.getter();
          v112(v104, v105);
        }
        BOOL v106 = v102 != 0;
        uint64_t v85 = v0[173];
        uint64_t v107 = v0[145];
        if (v107) {
          unint64_t v108 = v0[145];
        }
        else {
          unint64_t v108 = 0xE500000000000000;
        }
        if (v107) {
          uint64_t v109 = v0[144];
        }
        else {
          uint64_t v109 = 0x58582D5355;
        }
        NSString v89 = String._bridgeToObjectiveC()();
        uint64_t v110 = swift_allocObject();
        *(unsigned char *)(v110 + 16) = 1;
        *(void *)(v110 + 24) = v109;
        *(void *)(v110 + 32) = v108;
        *(void *)(v110 + 40) = v103;
        *(unsigned char *)(v110 + 48) = v106;
        v0[109] = sub_10055E8DC;
        v0[110] = v110;
        v0[105] = _NSConcreteStackBlock;
        v0[106] = 1107296256;
        v0[107] = sub_10055947C;
        v0[108] = &unk_100708D00;
        char v91 = _Block_copy(v0 + 105);
LABEL_46:
        swift_bridgeObjectRetain();
        swift_release();
        AnalyticsSendEventLazy();
        _Block_release(v91);

        swift_bridgeObjectRelease();
        sub_10000C6CC(v85, &qword_100726640);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v59 = (uint64_t (*)(void))v0[1];
        goto LABEL_47;
      }
      (*(void (**)(void, void))(v0[148] + 8))(v0[151], v0[147]);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      uint64_t v34 = aBlock;
    }
    else
    {
      uint64_t v33 = v0[154];
      swift_bridgeObjectRelease();
      swift_errorRelease();
      uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 104);
    }
    uint64_t v60 = v0[150];
    uint64_t v61 = v0[149];
    uint64_t v62 = v0[148];
    uint64_t v63 = v0[147];
    v34(v0[156], enum case for DIPError.Code.krlCouldNotFetch(_:), v0[153]);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    defaultLogger()();
    uint64_t v119 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16);
    v119(v61, v60, v63);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    BOOL v66 = os_log_type_enabled(v64, v65);
    uint64_t v67 = v0[149];
    uint64_t v68 = v0[148];
    uint64_t v69 = v0[147];
    if (v66)
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      unint64_t v113 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 138412290;
      swift_allocError();
      v119(v71, v67, v69);
      uint64_t v72 = _swift_stdlib_bridgeErrorToNSError();
      v0[130] = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v113 = v72;
      char v117 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      v117(v67, v69);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed validate credential: %@", v70, 0xCu);
      sub_100007764(&qword_1007208D0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      char v117 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      v117(v67, v69);
    }
    uint64_t v73 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[175];
    uint64_t v74 = v0[173];
    uint64_t v75 = v0[150];
    uint64_t v76 = v0[148];
    uint64_t v77 = v0[147];
    ((void (*)(void, void))v0[179])(v0[161], v0[159]);
    sub_10000C6CC(v74, &qword_100726640);
    v119(v74, v75, v77);
    v73(v74, 0, 1, v77);
    swift_allocError();
    v119(v78, v75, v77);
    swift_willThrow();
    swift_errorRelease();
    v117(v75, v77);
    int v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v74, 1, v77);
    uint64_t v80 = 0;
    if (!v79)
    {
      uint64_t v81 = v0[156];
      uint64_t v82 = v0[154];
      uint64_t v83 = v0[153];
      DIPError.code.getter();
      uint64_t v80 = DIPError.Code.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v83);
    }
    BOOL v84 = v79 != 0;
    uint64_t v85 = v0[173];
    uint64_t v86 = v0[145];
    if (v86) {
      unint64_t v87 = v0[145];
    }
    else {
      unint64_t v87 = 0xE500000000000000;
    }
    if (v86) {
      uint64_t v88 = v0[144];
    }
    else {
      uint64_t v88 = 0x58582D5355;
    }
    NSString v89 = String._bridgeToObjectiveC()();
    uint64_t v90 = swift_allocObject();
    *(unsigned char *)(v90 + 16) = 2;
    *(void *)(v90 + 24) = v88;
    *(void *)(v90 + 32) = v87;
    *(void *)(v90 + 40) = v80;
    *(unsigned char *)(v90 + 48) = v84;
    v0[121] = sub_10055E8DC;
    v0[122] = v90;
    v0[117] = _NSConcreteStackBlock;
    v0[118] = 1107296256;
    v0[119] = sub_10055947C;
    v0[120] = &unk_100708CB0;
    char v91 = _Block_copy(v0 + 117);
    goto LABEL_46;
  }
  if (qword_10071F640 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Milestone();
  sub_1000443D4(v25, (uint64_t)qword_100760978);
  Milestone.log()();
  defaultLogger()();
  swift_bridgeObjectRetain();
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[179];
  unint64_t v30 = v0[178];
  if (v28)
  {
    uint64_t v31 = v0[177];
    uint64_t v124 = v0[165];
    uint64_t v122 = v0[159];
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    v126[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315138;
    swift_bridgeObjectRetain();
    v0[133] = sub_100110D58(v31, v30, v126);
    uint64_t v1 = 0x58582D5355;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfually validated %s against KRL.", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v29(v124, v122);
  }
  else
  {
    uint64_t v35 = v0[165];
    uint64_t v36 = v0[159];
    swift_bridgeObjectRelease_n();

    v29(v35, v36);
  }
  uint64_t v37 = v0[173];
  uint64_t v38 = v0[158];
  uint64_t v39 = v0[148];
  uint64_t v40 = v0[147];
  uint64_t v41 = v38 + *(int *)(v0[157] + 20);
  uint64_t v42 = *(void *)v41;
  uint64_t v43 = *(unsigned __int8 *)(v41 + 8);
  uint64_t v44 = *(void *)(v41 + 16);
  uint64_t v45 = *(void *)(v41 + 40);
  aBlocka = *(void **)(v41 + 32);
  uint64_t v116 = *(void *)(v41 + 24);
  swift_bridgeObjectRetain();
  sub_10055E940(v38, type metadata accessor for KRLFetchResult);
  int v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v40);
  uint64_t v125 = v43;
  uint64_t v123 = v42;
  if (v46)
  {
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v48 = v0[156];
    uint64_t v49 = v0[154];
    uint64_t v50 = v0[153];
    DIPError.code.getter();
    uint64_t v47 = DIPError.Code.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
  }
  BOOL v51 = v46 != 0;
  uint64_t v52 = v0[173];
  uint64_t v53 = v0[145];
  if (v53) {
    unint64_t v54 = v0[145];
  }
  else {
    unint64_t v54 = 0xE500000000000000;
  }
  if (v53) {
    uint64_t v1 = v0[144];
  }
  NSString v55 = String._bridgeToObjectiveC()();
  uint64_t v56 = swift_allocObject();
  *(unsigned char *)(v56 + 16) = 0;
  *(void *)(v56 + 24) = v1;
  *(void *)(v56 + 32) = v54;
  *(void *)(v56 + 40) = v47;
  *(unsigned char *)(v56 + 48) = v51;
  v0[115] = sub_10055E8DC;
  v0[116] = v56;
  v0[111] = _NSConcreteStackBlock;
  v0[112] = 1107296256;
  v0[113] = sub_10055947C;
  v0[114] = &unk_100708D50;
  uint64_t v57 = _Block_copy(v0 + 111);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v57);

  swift_bridgeObjectRelease();
  sub_10000C6CC(v52, &qword_100726640);
  uint64_t v58 = (void *)v0[137];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *uint64_t v58 = v123;
  v58[1] = v125;
  v58[2] = v44;
  v58[3] = v116;
  v58[4] = aBlocka;
  v58[5] = v45;
  uint64_t v59 = (uint64_t (*)(void))v0[1];
LABEL_47:
  return v59();
}

uint64_t sub_10055C288()
{
  uint64_t v78 = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 123));
  v0[132] = v0[187];
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0[156];
    uint64_t v2 = v0[155];
    uint64_t v3 = v0[154];
    uint64_t v4 = v0[153];
    (*(void (**)(void, void, void))(v0[148] + 32))(v0[151], v0[152], v0[147]);
    DIPError.code.getter();
    uint64_t v73 = *(void (**)(uint64_t, void, uint64_t))(v3 + 104);
    v73(v2, enum case for DIPError.Code.krlMatchedRevokedKey(_:), v4);
    sub_10055E8F8(&qword_100724410, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v5 = v0[135];
    uint64_t v6 = v0[136];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(v2, v4);
    v7(v1, v4);
    if (v5 == v6)
    {
      swift_errorRelease();
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      BOOL v10 = os_log_type_enabled(v8, v9);
      uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[179];
      unint64_t v12 = v0[178];
      uint64_t v70 = v7;
      if (v10)
      {
        uint64_t v69 = v0[177];
        uint64_t v74 = v0[159];
        uint64_t v76 = v0[162];
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_bridgeObjectRetain();
        v0[131] = sub_100110D58(v69, v12, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Matched %s with revoked key in KRL.", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v11(v76, v74);
      }
      else
      {
        uint64_t v48 = v0[162];
        uint64_t v49 = v0[159];
        swift_bridgeObjectRelease_n();

        v11(v48, v49);
      }
      if (qword_10071F638 != -1) {
        swift_once();
      }
      uint64_t v50 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[175];
      uint64_t v51 = v0[173];
      uint64_t v52 = v0[151];
      uint64_t v53 = v0[148];
      uint64_t v54 = v0[147];
      uint64_t v55 = type metadata accessor for Milestone();
      sub_1000443D4(v55, (uint64_t)qword_100760960);
      Milestone.log()();
      sub_10000C6CC(v51, &qword_100726640);
      uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
      v56(v51, v52, v54);
      v50(v51, 0, 1, v54);
      sub_10055E8F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      v56(v57, v52, v54);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      swift_errorRelease();
      int v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v51, 1, v54);
      uint64_t v59 = 0;
      if (!v58)
      {
        uint64_t v60 = v0[156];
        uint64_t v61 = v0[153];
        DIPError.code.getter();
        uint64_t v59 = DIPError.Code.rawValue.getter();
        v70(v60, v61);
      }
      BOOL v62 = v58 != 0;
      uint64_t v41 = v0[173];
      uint64_t v63 = v0[145];
      if (v63) {
        unint64_t v64 = v0[145];
      }
      else {
        unint64_t v64 = 0xE500000000000000;
      }
      if (v63) {
        uint64_t v65 = v0[144];
      }
      else {
        uint64_t v65 = 0x58582D5355;
      }
      NSString v45 = String._bridgeToObjectiveC()();
      uint64_t v66 = swift_allocObject();
      *(unsigned char *)(v66 + 16) = 1;
      *(void *)(v66 + 24) = v65;
      *(void *)(v66 + 32) = v64;
      *(void *)(v66 + 40) = v59;
      *(unsigned char *)(v66 + 48) = v62;
      v0[109] = sub_10055E8DC;
      v0[110] = v66;
      v0[105] = _NSConcreteStackBlock;
      v0[106] = 1107296256;
      v0[107] = sub_10055947C;
      v0[108] = &unk_100708D00;
      uint64_t v47 = _Block_copy(v0 + 105);
      goto LABEL_31;
    }
    (*(void (**)(void, void))(v0[148] + 8))(v0[151], v0[147]);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v15 = v73;
  }
  else
  {
    uint64_t v14 = v0[154];
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v15 = *(void (**)(void, void, void))(v14 + 104);
  }
  uint64_t v16 = v0[150];
  uint64_t v17 = v0[149];
  uint64_t v18 = v0[148];
  uint64_t v19 = v0[147];
  v15(v0[156], enum case for DIPError.Code.krlCouldNotFetch(_:), v0[153]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  defaultLogger()();
  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v75(v17, v16, v19);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = v0[149];
  uint64_t v24 = v0[148];
  uint64_t v25 = v0[147];
  if (v22)
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v26 = 138412290;
    sub_10055E8F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    v75(v27, v23, v25);
    uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
    v0[130] = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v71 = v28;
    uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v72(v23, v25);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed validate credential: %@", v26, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v72(v23, v25);
  }
  uint64_t v29 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[175];
  uint64_t v30 = v0[173];
  uint64_t v31 = v0[150];
  uint64_t v32 = v0[148];
  uint64_t v33 = v0[147];
  ((void (*)(void, void))v0[179])(v0[161], v0[159]);
  sub_10000C6CC(v30, &qword_100726640);
  v75(v30, v31, v33);
  v29(v30, 0, 1, v33);
  sub_10055E8F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  v75(v34, v31, v33);
  swift_willThrow();
  swift_errorRelease();
  v72(v31, v33);
  int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v33);
  uint64_t v36 = 0;
  if (!v35)
  {
    uint64_t v37 = v0[156];
    uint64_t v38 = v0[154];
    uint64_t v39 = v0[153];
    DIPError.code.getter();
    uint64_t v36 = DIPError.Code.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
  }
  BOOL v40 = v35 != 0;
  uint64_t v41 = v0[173];
  uint64_t v42 = v0[145];
  if (v42) {
    unint64_t v43 = v0[145];
  }
  else {
    unint64_t v43 = 0xE500000000000000;
  }
  if (v42) {
    uint64_t v44 = v0[144];
  }
  else {
    uint64_t v44 = 0x58582D5355;
  }
  NSString v45 = String._bridgeToObjectiveC()();
  uint64_t v46 = swift_allocObject();
  *(unsigned char *)(v46 + 16) = 2;
  *(void *)(v46 + 24) = v44;
  *(void *)(v46 + 32) = v43;
  *(void *)(v46 + 40) = v36;
  *(unsigned char *)(v46 + 48) = v40;
  v0[121] = sub_10055E8DC;
  v0[122] = v46;
  v0[117] = _NSConcreteStackBlock;
  v0[118] = 1107296256;
  v0[119] = sub_10055947C;
  v0[120] = &unk_100708CB0;
  uint64_t v47 = _Block_copy(v0 + 117);
LABEL_31:
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v47);

  swift_bridgeObjectRelease();
  sub_10000C6CC(v41, &qword_100726640);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v67 = (uint64_t (*)(void))v0[1];
  return v67();
}

uint64_t sub_10055CF14()
{
  uint64_t v78 = v0;
  v0[132] = v0[184];
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0[156];
    uint64_t v2 = v0[155];
    uint64_t v3 = v0[154];
    uint64_t v4 = v0[153];
    (*(void (**)(void, void, void))(v0[148] + 32))(v0[151], v0[152], v0[147]);
    DIPError.code.getter();
    uint64_t v73 = *(void (**)(uint64_t, void, uint64_t))(v3 + 104);
    v73(v2, enum case for DIPError.Code.krlMatchedRevokedKey(_:), v4);
    sub_10055E8F8(&qword_100724410, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v5 = v0[135];
    uint64_t v6 = v0[136];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(v2, v4);
    v7(v1, v4);
    if (v5 == v6)
    {
      swift_errorRelease();
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      BOOL v10 = os_log_type_enabled(v8, v9);
      uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[179];
      unint64_t v12 = v0[178];
      uint64_t v70 = v7;
      if (v10)
      {
        uint64_t v69 = v0[177];
        uint64_t v74 = v0[159];
        uint64_t v76 = v0[162];
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_bridgeObjectRetain();
        v0[131] = sub_100110D58(v69, v12, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Matched %s with revoked key in KRL.", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v11(v76, v74);
      }
      else
      {
        uint64_t v48 = v0[162];
        uint64_t v49 = v0[159];
        swift_bridgeObjectRelease_n();

        v11(v48, v49);
      }
      if (qword_10071F638 != -1) {
        swift_once();
      }
      uint64_t v50 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[175];
      uint64_t v51 = v0[173];
      uint64_t v52 = v0[151];
      uint64_t v53 = v0[148];
      uint64_t v54 = v0[147];
      uint64_t v55 = type metadata accessor for Milestone();
      sub_1000443D4(v55, (uint64_t)qword_100760960);
      Milestone.log()();
      sub_10000C6CC(v51, &qword_100726640);
      uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
      v56(v51, v52, v54);
      v50(v51, 0, 1, v54);
      sub_10055E8F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      v56(v57, v52, v54);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      swift_errorRelease();
      int v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v51, 1, v54);
      uint64_t v59 = 0;
      if (!v58)
      {
        uint64_t v60 = v0[156];
        uint64_t v61 = v0[153];
        DIPError.code.getter();
        uint64_t v59 = DIPError.Code.rawValue.getter();
        v70(v60, v61);
      }
      BOOL v62 = v58 != 0;
      uint64_t v41 = v0[173];
      uint64_t v63 = v0[145];
      if (v63) {
        unint64_t v64 = v0[145];
      }
      else {
        unint64_t v64 = 0xE500000000000000;
      }
      if (v63) {
        uint64_t v65 = v0[144];
      }
      else {
        uint64_t v65 = 0x58582D5355;
      }
      NSString v45 = String._bridgeToObjectiveC()();
      uint64_t v66 = swift_allocObject();
      *(unsigned char *)(v66 + 16) = 1;
      *(void *)(v66 + 24) = v65;
      *(void *)(v66 + 32) = v64;
      *(void *)(v66 + 40) = v59;
      *(unsigned char *)(v66 + 48) = v62;
      v0[109] = sub_10055E8DC;
      v0[110] = v66;
      v0[105] = _NSConcreteStackBlock;
      v0[106] = 1107296256;
      v0[107] = sub_10055947C;
      v0[108] = &unk_100708D00;
      uint64_t v47 = _Block_copy(v0 + 105);
      goto LABEL_31;
    }
    (*(void (**)(void, void))(v0[148] + 8))(v0[151], v0[147]);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v15 = v73;
  }
  else
  {
    uint64_t v14 = v0[154];
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v15 = *(void (**)(void, void, void))(v14 + 104);
  }
  uint64_t v16 = v0[150];
  uint64_t v17 = v0[149];
  uint64_t v18 = v0[148];
  uint64_t v19 = v0[147];
  v15(v0[156], enum case for DIPError.Code.krlCouldNotFetch(_:), v0[153]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  defaultLogger()();
  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v75(v17, v16, v19);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = v0[149];
  uint64_t v24 = v0[148];
  uint64_t v25 = v0[147];
  if (v22)
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v26 = 138412290;
    sub_10055E8F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    v75(v27, v23, v25);
    uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
    v0[130] = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v71 = v28;
    uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v72(v23, v25);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed validate credential: %@", v26, 0xCu);
    sub_100007764(&qword_1007208D0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v72(v23, v25);
  }
  uint64_t v29 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[175];
  uint64_t v30 = v0[173];
  uint64_t v31 = v0[150];
  uint64_t v32 = v0[148];
  uint64_t v33 = v0[147];
  ((void (*)(void, void))v0[179])(v0[161], v0[159]);
  sub_10000C6CC(v30, &qword_100726640);
  v75(v30, v31, v33);
  v29(v30, 0, 1, v33);
  sub_10055E8F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  v75(v34, v31, v33);
  swift_willThrow();
  swift_errorRelease();
  v72(v31, v33);
  int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v33);
  uint64_t v36 = 0;
  if (!v35)
  {
    uint64_t v37 = v0[156];
    uint64_t v38 = v0[154];
    uint64_t v39 = v0[153];
    DIPError.code.getter();
    uint64_t v36 = DIPError.Code.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
  }
  BOOL v40 = v35 != 0;
  uint64_t v41 = v0[173];
  uint64_t v42 = v0[145];
  if (v42) {
    unint64_t v43 = v0[145];
  }
  else {
    unint64_t v43 = 0xE500000000000000;
  }
  if (v42) {
    uint64_t v44 = v0[144];
  }
  else {
    uint64_t v44 = 0x58582D5355;
  }
  NSString v45 = String._bridgeToObjectiveC()();
  uint64_t v46 = swift_allocObject();
  *(unsigned char *)(v46 + 16) = 2;
  *(void *)(v46 + 24) = v44;
  *(void *)(v46 + 32) = v43;
  *(void *)(v46 + 40) = v36;
  *(unsigned char *)(v46 + 48) = v40;
  v0[121] = sub_10055E8DC;
  v0[122] = v46;
  v0[117] = _NSConcreteStackBlock;
  v0[118] = 1107296256;
  v0[119] = sub_10055947C;
  v0[120] = &unk_100708CB0;
  uint64_t v47 = _Block_copy(v0 + 117);
LABEL_31:
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v47);

  swift_bridgeObjectRelease();
  sub_10000C6CC(v41, &qword_100726640);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v67 = (uint64_t (*)(void))v0[1];
  return v67();
}

uint64_t sub_10055DB60(uint64_t a1)
{
  v2[145] = v1;
  v2[144] = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[146] = v3;
  v2[147] = *(void *)(v3 - 8);
  v2[148] = swift_task_alloc();
  sub_100007764(&qword_100720A68);
  v2[149] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[150] = v4;
  v2[151] = *(void *)(v4 - 8);
  v2[152] = swift_task_alloc();
  v2[153] = swift_task_alloc();
  return _swift_task_switch(sub_10055DCC0, v1, 0);
}

uint64_t sub_10055DCC0()
{
  sub_10000C728((void *)(*(void *)(v0 + 1160) + 152), *(void *)(*(void *)(v0 + 1160) + 176));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1232) = v1;
  void *v1 = v0;
  v1[1] = sub_10055DD70;
  return sub_100446D98(v0 + 752);
}

uint64_t sub_10055DD70()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10055DE6C, 0, 0);
}

uint64_t sub_10055DE6C()
{
  sub_1000BEA14((uint64_t)(v0 + 94), (uint64_t)(v0 + 48), &qword_100729958);
  if (sub_100447190((uint64_t)(v0 + 48)) == 1)
  {
    uint64_t v1 = v0[145];
    uint64_t v2 = sub_10055E2DC;
  }
  else
  {
    uint64_t v3 = v0[145];
    memcpy(v0 + 2, v0 + 48, 0x169uLL);
    sub_1000BEA14((uint64_t)(v0 + 36), (uint64_t)(v0 + 142), (uint64_t *)&unk_100722630);
    sub_1001061B8((uint64_t)(v0 + 142));
    sub_1002B66AC(v0 + 94);
    uint64_t v2 = sub_10055DF54;
    uint64_t v1 = v3;
  }
  return _swift_task_switch(v2, v1, 0);
}

uint64_t sub_10055DF54()
{
  sub_1000BEA14((uint64_t)(v0 + 142), (uint64_t)(v0 + 140), (uint64_t *)&unk_100722630);
  if (!v0[141])
  {
    (*(void (**)(void, void, void))(v0[147] + 104))(v0[148], enum case for DIPError.Code.krlInvalidConfiguration(_:), v0[146]);
    goto LABEL_5;
  }
  uint64_t v1 = v0[151];
  uint64_t v2 = v0[150];
  uint64_t v3 = v0[149];
  URL.init(string:)();
  sub_1001145E0((uint64_t)(v0 + 142));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v4 = v0[148];
    uint64_t v5 = v0[147];
    uint64_t v6 = v0[146];
    sub_10000C6CC(v0[149], &qword_100720A68);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.krlInvalidConfiguration(_:), v6);
LABEL_5:
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10055E8F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    goto LABEL_7;
  }
  uint64_t v8 = v0[153];
  uint64_t v9 = v0[152];
  uint64_t v10 = v0[151];
  uint64_t v11 = v0[150];
  unint64_t v12 = (void *)v0[144];
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 32))(v8, v0[149], v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v11);
  uint64_t v13 = type metadata accessor for Date();
  type metadata accessor for KRLTrustValidator();
  swift_allocObject();
  uint64_t v14 = sub_100172A10();
  uint64_t v15 = (objc_class *)type metadata accessor for KRLWebService(0);
  id v16 = sub_10055E4E8(v9, v13, (uint64_t)&protocol witness table for Date, v14, (char *)objc_allocWithZone(v15));
  v12[3] = v15;
  v12[4] = &off_1006F8790;
  void *v12 = v16;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
LABEL_7:
  return v7();
}

uint64_t sub_10055E2DC()
{
  (*(void (**)(void, void, void))(v0[147] + 104))(v0[148], enum case for DIPError.Code.krlInvalidConfiguration(_:), v0[146]);
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10055E8F8((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10055E47C()
{
  sub_10000C6CC(v0 + 112, &qword_1007290A0);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 152);
  swift_defaultActor_destroy();

  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for PresentmentKeyRevocationValidator()
{
  return self;
}

id sub_10055E4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v34 = a3;
  uint64_t v35 = type metadata accessor for DIPHTTPSession.Configuration(0);
  uint64_t v9 = __chkstk_darwin(v35);
  uint64_t v36 = (double *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39[3] = type metadata accessor for KRLTrustValidator();
  void v39[4] = &off_1006F9640;
  v39[0] = a4;
  uint64_t v17 = &a5[OBJC_IVAR____TtC8coreidvd13KRLWebService_baseURL];
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v37 = a1;
  v20(v17, a1, v18);
  os_log_type_t v21 = &a5[OBJC_IVAR____TtC8coreidvd13KRLWebService_dateProvider];
  uint64_t v22 = v34;
  *(void *)os_log_type_t v21 = a2;
  *((void *)v21 + 1) = v22;
  sub_100030A10((uint64_t)v39, (uint64_t)&a5[OBJC_IVAR____TtC8coreidvd13KRLWebService_validator]);
  UUID.init()();
  uint64_t v23 = UUID.uuidString.getter();
  uint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (qword_10071F490 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_1000443D4(v35, (uint64_t)qword_100723B88);
  sub_10015AE4C(v26, (uint64_t)v12);
  uint64_t v27 = (uint64_t *)&a5[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  uint64_t *v27 = v23;
  v27[1] = v25;
  uint64_t v28 = v36;
  sub_10015AE4C((uint64_t)v12, (uint64_t)v36);
  type metadata accessor for DIPHTTPSession(0);
  swift_allocObject();
  uint64_t v29 = a5;
  *(void *)&v29[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession] = sub_1005D20EC(v28);

  uint64_t v30 = (objc_class *)type metadata accessor for DIPWebService();
  v38.receiver = v29;
  v38.super_class = v30;
  id v31 = [super init];
  sub_10055E940((uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v39);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v37, v18);
  return v31;
}

uint64_t sub_10055E808(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t sub_10055E8A4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_10055E8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10055E8F0()
{
  return swift_release();
}

uint64_t sub_10055E8F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10055E940(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10055E9A0()
{
  return sub_10029FA3C(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

uint64_t sub_10055E9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007290A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10055EA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_1007290A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10055EA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100007764(&qword_10072E0F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_10000C6CC(a1, &qword_10072E0F0);
    sub_10055F824(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_10000C6CC((uint64_t)v10, &qword_10072E0F0);
  }
  else
  {
    sub_10016E15C(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_10056342C((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_10016A134, (void (*)(void))sub_100163F28, (uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo, (uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10055ECA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10000C6B4((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100561FC8(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000C6CC(a1, (uint64_t *)&unk_100726440);
    sub_10055F9DC(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_10000C6CC((uint64_t)v9, (uint64_t *)&unk_100726440);
  }
}

uint64_t sub_10055ED78(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000078A8((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1005622A8(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for DIPError.PropertyKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_10000C6CC(a1, (uint64_t *)&unk_100727200);
    sub_10055FBD0(a2, v9);
    uint64_t v7 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return sub_10000C6CC((uint64_t)v9, (uint64_t *)&unk_100727200);
  }
}

uint64_t sub_10055EE98(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100007764(&qword_100720FA0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100007764(&qword_100720FC8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10000C6CC(a1, &qword_100720FA0);
    sub_10055FCFC(a2, (uint64_t)v8);
    return sub_10000C6CC((uint64_t)v8, &qword_100720FA0);
  }
  else
  {
    sub_1000BEA14(a1, (uint64_t)v11, &qword_100720FC8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100562480((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v16;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10055F040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100007764(&qword_100722300);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for RecipientEncryptionCertificate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, v11) == 1)
  {
    sub_10000C6CC(a1, &qword_100722300);
    sub_10056009C(a2, a3, (uint64_t (*)(void))&type metadata accessor for RecipientEncryptionCertificate, (uint64_t (*)(void))&type metadata accessor for RecipientEncryptionCertificate, (void (*)(void))sub_10016B168, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_10000C6CC((uint64_t)v10, &qword_100722300);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_1005628D8((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_10016B168, (void (*)(void))sub_100165DBC, (uint64_t (*)(void))&type metadata accessor for RecipientEncryptionCertificate, (uint64_t (*)(void))&type metadata accessor for RecipientEncryptionCertificate);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10055F2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000078A8((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100562C48(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000C6CC(a1, (uint64_t *)&unk_100727200);
    sub_10055FF58(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_10000C6CC((uint64_t)v9, (uint64_t *)&unk_100727200);
  }
}

void sub_10055F380()
{
  qword_100732E50 = (uint64_t)&off_1006F1A70;
}

uint64_t sub_10055F394()
{
  sub_100007764(&qword_100730CD0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100610730;
  uint64_t result = static SharedInternalDefaultsKeys.doNotRequireHSA2.getter();
  *(void *)(v0 + 32) = result;
  *(void *)(v0 + 40) = v2;
  qword_100732E58 = v0;
  return result;
}

unint64_t sub_10055F3E8(char a1)
{
  unint64_t result = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD00000000000001CLL;
    }
    else {
      return 0xD000000000000014;
    }
  }
  return result;
}

uint64_t sub_10055F448(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100470938(*a1, *a2);
}

unint64_t sub_10055F454@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100565FBC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10055F484@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10055F3E8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_10055F4B0()
{
  return sub_100472E0C();
}

uint64_t sub_10055F4B8()
{
  return sub_10029BD0C();
}

Swift::Int sub_10055F4C0()
{
  return sub_100473394();
}

uint64_t sub_10055F4C8()
{
  return _swift_task_switch(sub_10055F4E4, 0, 0);
}

uint64_t sub_10055F4E4()
{
  if (qword_10071F4D0 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100760320;
  v0[2] = qword_100760320;
  swift_retain();
  uint64_t v2 = swift_task_alloc();
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = 1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  void *v3 = v0;
  v3[1] = sub_10055F620;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0x6361436E61656C63, 0xEE00293A5F286568, sub_1001D967C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10055F620()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10055F7A0;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10055F73C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10055F73C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10055F7A0()
{
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10055F80C(uint64_t a1, uint64_t a2)
{
  return sub_1005603C4(a1, a2, (void (*)(void))sub_10016A128);
}

uint64_t sub_10055F824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100590548(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10016A134();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo();
    uint64_t v20 = *(void *)(v13 - 8);
    sub_10016E15C(v12 + *(void *)(v20 + 72) * v8, a3, (uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo);
    sub_1005614E4(v8, v11, (uint64_t (*)(void))type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

double sub_10055F9DC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100590548(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10016A178();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_10000C6B4((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    sub_10056055C(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10055FAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100590548(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10016A364();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_100560748(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_10055FBD0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1005905C0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10016A520();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_1000078A8((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_100560920(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10055FCFC@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100590958(a1);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    uint64_t v20 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10016A7C8();
      uint64_t v10 = v20;
    }
    uint64_t v11 = *(void *)(v10 + 56);
    uint64_t v12 = sub_100007764(&qword_100720FC8);
    uint64_t v19 = *(void *)(v12 - 8);
    sub_1000BEA14(v11 + *(void *)(v19 + 72) * v6, a2, &qword_100720FC8);
    sub_100560BDC(v6, v10);
    uint64_t *v3 = v10;
    swift_bridgeObjectRelease();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    uint64_t v14 = a2;
    uint64_t v15 = 0;
    uint64_t v16 = v12;
  }
  else
  {
    uint64_t v17 = sub_100007764(&qword_100720FC8);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    uint64_t v16 = v17;
    uint64_t v14 = a2;
    uint64_t v15 = 1;
  }

  return v13(v14, v15, 1, v16);
}

uint64_t sub_10055FE8C(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100590958(a1);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v2;
  uint64_t v11 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10016ABC4();
    uint64_t v8 = v11;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 16 * v4);
  sub_100560EAC(v4, v8);
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease();
  return v9;
}

double sub_10055FF58@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100590548(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10016B194();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1000078A8((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_10056130C(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10056005C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10056009C(a1, a2, (uint64_t (*)(void))&type metadata accessor for AnyCodable, (uint64_t (*)(void))&type metadata accessor for AnyCodable, (void (*)(void))sub_10016B37C, a3);
}

uint64_t sub_10056009C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = v6;
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_100590548(a1, a2);
  LOBYTE(a2) = v15;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v10;
    uint64_t v27 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a5();
      uint64_t v17 = v27;
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(v17 + 56);
    uint64_t v19 = a3(0);
    uint64_t v26 = *(void *)(v19 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 32))(a6, v18 + *(void *)(v26 + 72) * v14, v19);
    sub_1005614E4(v14, v17, a4);
    *uint64_t v10 = v17;
    swift_bridgeObjectRelease();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v21 = a6;
    uint64_t v22 = 0;
    uint64_t v23 = v19;
  }
  else
  {
    uint64_t v24 = a3(0);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    uint64_t v23 = v24;
    uint64_t v21 = a6;
    uint64_t v22 = 1;
  }

  return v20(v21, v22, 1, v23);
}

double sub_100560268@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100590548(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v19 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10016BB88();
      uint64_t v11 = v19;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56) + 96 * v8;
    uint64_t v13 = *(void *)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 32);
    uint64_t v15 = *(void *)(v12 + 40);
    char v16 = *(unsigned char *)(v12 + 48);
    char v17 = *(unsigned char *)(v12 + 88);
    *(void *)a3 = *(void *)v12;
    *(void *)(a3 + 8) = v13;
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(v12 + 16);
    *(void *)(a3 + 32) = v14;
    *(void *)(a3 + 40) = v15;
    *(unsigned char *)(a3 + 48) = v16;
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v12 + 56);
    *(_OWORD *)(a3 + 72) = *(_OWORD *)(v12 + 72);
    *(unsigned char *)(a3 + 88) = v17;
    sub_100561708(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a3 + 73) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t sub_1005603AC(uint64_t a1, uint64_t a2)
{
  return sub_1005603C4(a1, a2, (void (*)(void))sub_10016BF84);
}

uint64_t sub_1005603C4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  char v5 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100590548(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v5;
  uint64_t v14 = *v5;
  *char v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v11 = v14;
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  sub_100561134(v8, v11);
  *char v5 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1005604A4(char a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10059076C(a1);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v2;
  uint64_t v11 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10016C138();
    uint64_t v8 = v11;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 8 * v4);
  sub_100561AAC(v4, v8);
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease();
  return v9;
}

unint64_t sub_10056055C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            _OWORD *v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          uint64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  uint64_t *v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100560748(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100560920(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v38 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v38;
    if ((*(void *)(v38 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v36 = (result + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v35 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v37 = v13;
      uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v35(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        sub_100565DA0();
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            unint64_t v23 = v22 + v17 + v15;
            if (v15 * a1 < v17 || result >= v23)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v25 = *(void *)(a2 + 56);
            uint64_t v26 = (_OWORD *)(v25 + 32 * a1);
            uint64_t v27 = (_OWORD *)(v25 + 32 * v10);
            uint64_t v12 = v38;
            if (a1 != v10 || (a1 = v10, v26 >= v27 + 2))
            {
              long long v28 = v27[1];
              *uint64_t v26 = *v27;
              v26[1] = v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v38;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100560BDC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t result = Hasher._finalize()();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v9 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v10 = *(void *)(a2 + 48);
        uint64_t v11 = (unsigned char *)(v10 + v3);
        uint64_t v12 = (unsigned char *)(v10 + v6);
        if (v3 != v6 || v11 >= v12 + 1) {
          *uint64_t v11 = *v12;
        }
        uint64_t v13 = *(void *)(a2 + 56);
        uint64_t v14 = *(void *)(*(void *)(sub_100007764(&qword_100720FC8) - 8) + 72);
        int64_t v15 = v14 * v3;
        unint64_t result = v13 + v14 * v3;
        int64_t v16 = v14 * v6;
        unint64_t v17 = v13 + v14 * v6 + v14;
        if (v15 < v16 || result >= v17)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v15 == v16) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v9 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v9) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    unint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  uint64_t *v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
    JUMPOUT(0x100560E98);
  }
  *(void *)(a2 + 16) = v24;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_100560EAC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t result = Hasher._finalize()();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          uint64_t v11 = (unsigned char *)(v10 + v3);
          uint64_t v12 = (unsigned char *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *uint64_t v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          int64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            _OWORD *v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *int64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
    JUMPOUT(0x100561120);
  }
  *(void *)(a2 + 16) = v21;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_100561134(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          int64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *int64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10056130C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          int64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *int64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1005614E4(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v9;
        if (v4 >= (uint64_t)v10) {
          break;
        }
        if (v12 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v13 = *(void *)(a2 + 48);
        uint64_t v14 = (_OWORD *)(v13 + 16 * v4);
        uint64_t v15 = (_OWORD *)(v13 + 16 * v7);
        if (v4 != v7 || v14 >= v15 + 1) {
          _OWORD *v14 = *v15;
        }
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v17 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v18 = v17 * v4;
        unint64_t result = v16 + v17 * v4;
        int64_t v19 = v17 * v7;
        unint64_t v20 = v16 + v17 * v7 + v17;
        if (v18 < v19 || result >= v20)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v18 == v19) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v12 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      if (v4 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    BOOL v22 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v4) - 1;
  }
  else
  {
    BOOL v22 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *BOOL v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100561708(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t result = v14 + 96 * v3;
          uint64_t v15 = (const void *)(v14 + 96 * v6);
          if (96 * v3 < (uint64_t)(96 * v6) || result >= (unint64_t)v15 + 96 || (v16 = v3 == v6, int64_t v3 = v6, !v16))
          {
            unint64_t result = (unint64_t)memmove((void *)result, v15, 0x60uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1005618F8(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              void *v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            BOOL v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              void *v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_100561AAC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t result = Hasher._finalize()();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          id v11 = (unsigned char *)(v10 + v3);
          Swift::Int v12 = (unsigned char *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *id v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            void *v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
    JUMPOUT(0x100561DC8);
  }
  *(void *)(a2 + 16) = v21;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

id sub_100561DF0(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100590694((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  id result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= (uint64_t)result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    id result = sub_100169F84();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      *(void *)(v15[7] + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100163C4C((uint64_t)result, a3 & 1);
  id result = (id)sub_100590694((uint64_t)a2);
  if ((v13 & 1) != (v16 & 1))
  {
LABEL_17:
    type metadata accessor for IdentityGesture();
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = (unint64_t)result;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v17 = 8 * v9;
  *(void *)(v15[6] + v17) = a2;
  *(void *)(v15[7] + v17) = a1;
  uint64_t v18 = v15[2];
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v20;

  return a2;
}

uint64_t sub_100561F48(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100563E4C(a1, a2, a3, a4, (void (*)(void))sub_10016A128, (void (*)(void))sub_100163F1C);
}

uint64_t sub_100561F74(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1005628D8(a1, a2, a3, a4, (void (*)(void))sub_10016A158, (void (*)(void))sub_100163F4C, (uint64_t (*)(void))&type metadata accessor for AEADKey, (uint64_t (*)(void))&type metadata accessor for AEADKey);
}

uint64_t sub_100561FC8(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100590548(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10016A178();
      goto LABEL_7;
    }
    sub_100163F6C(v15, a4 & 1);
    unint64_t v21 = sub_100590548(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v19);
    return sub_10000C6B4(a1, v19);
  }
LABEL_13:
  sub_100563FD8(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100562120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100590548(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10016A364();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_100164294(v17, a5 & 1);
  unint64_t v23 = sub_100590548(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  BOOL v26 = (void *)(v20[7] + 16 * v14);
  *BOOL v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_1005622A8(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1005905C0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10016A520();
      goto LABEL_7;
    }
    sub_1001645BC(v17, a3 & 1);
    unint64_t v23 = sub_1005905C0(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100564048(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v21 = (_OWORD *)(v20[7] + 32 * v14);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v21);

  return sub_1000078A8(a1, v21);
}

uint64_t sub_100562480(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100590958(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t v18 = sub_100007764(&qword_100720FC8);
      return sub_1001D9214(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, &qword_100720FC8);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10016A7C8();
    goto LABEL_7;
  }
  sub_1001649EC(v13, a3 & 1);
  unint64_t v20 = sub_100590958(a2);
  if ((v14 & 1) != (v21 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v20;
  BOOL v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100564108(v10, a2, a1, v16);
}

uint64_t sub_1005625CC(uint64_t a1, unsigned __int8 a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100590958(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10016AA34();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_100164E60(result, a3 & 1);
  uint64_t result = sub_100590958(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1005626F8(uint64_t a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100590958(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10016ABC4();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      BOOL v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      void *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(unsigned char *)(v18[6] + v12) = a3;
    char v21 = (void *)(v18[7] + 16 * v12);
    *char v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      id v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_10016520C(result, a4 & 1);
  uint64_t result = sub_100590958(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    uint64_t v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100562838(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100562ABC(a1, a2, a3, a4, (void (*)(void))sub_10016AF1C, (void (*)(void))sub_1001658D4);
}

uint64_t sub_100562864(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100562ABC(a1, a2, a3, a4, (void (*)(void))sub_10016B150, (void (*)(void))sub_100165DA4);
}

uint64_t sub_100562890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  return sub_100563784(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))sub_10016B15C, (void (*)(void))sub_100165DB0);
}

uint64_t sub_1005628D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  char v11 = (void **)v8;
  char v16 = (void *)*v8;
  unint64_t v18 = sub_100590548(a2, a3);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v22 = v17;
  uint64_t v23 = v16[3];
  if (v23 < v21 || (a4 & 1) == 0)
  {
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    unint64_t v32 = sub_100590548(a2, a3);
    if ((v22 & 1) == (v33 & 1))
    {
      unint64_t v18 = v32;
      uint64_t v24 = *v11;
      if (v22) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v24 = *v11;
  if (v22)
  {
LABEL_8:
    uint64_t v25 = v24[7];
    uint64_t v26 = a7(0);
    uint64_t v27 = *(void *)(v26 - 8);
    BOOL v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
    uint64_t v29 = v26;
    uint64_t v30 = v25 + *(void *)(v27 + 72) * v18;
    return v28(v30, a1, v29);
  }
LABEL_13:
  sub_100564268(v18, a2, a3, a1, v24, a8);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100562A90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100562ABC(a1, a2, a3, a4, (void (*)(void))sub_10016B188, (void (*)(void))sub_100165DDC);
}

uint64_t sub_100562ABC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  char v9 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_100590548(a2, a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    char v22 = (void *)*v9;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v23 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v25 = sub_100590548(a2, a3);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  char v22 = (void *)*v9;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  uint64_t v27 = (uint64_t *)(v22[6] + 16 * v16);
  uint64_t *v27 = a2;
  v27[1] = a3;
  *(void *)(v22[7] + 8 * v16) = a1;
  uint64_t v28 = v22[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v22[2] = v30;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_100562C48(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100590548(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10016B194();
      goto LABEL_7;
    }
    sub_100165DE8(v15, a4 & 1);
    unint64_t v21 = sub_100590548(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      BOOL v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v19);
    return sub_1000078A8(a1, v19);
  }
LABEL_13:
  sub_1005641FC(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_100562D9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1005628D8(a1, a2, a3, a4, (void (*)(void))sub_10016B37C, (void (*)(void))sub_1001660E8, (uint64_t (*)(void))&type metadata accessor for AnyCodable, (uint64_t (*)(void))&type metadata accessor for AnyCodable);
}

uint64_t sub_100562DF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100563E4C(a1, a2, a3, a4, (void (*)(void))sub_10016BB58, (void (*)(void))sub_100166DCC);
}

uint64_t sub_100562E1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100563E4C(a1, a2, a3, a4, (void (*)(void))sub_10016BB7C, (void (*)(void))sub_100166DF0);
}

uint64_t sub_100562E48(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100590548(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10016BB88();
LABEL_7:
    BOOL v18 = (void *)*v5;
    if (v16) {
      return sub_1001D9214((uint64_t)a1, v18[7] + 96 * v12, &qword_1007264B8);
    }
    goto LABEL_11;
  }
  sub_100166DFC(v15, a4 & 1);
  unint64_t v20 = sub_100590548(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v20;
  BOOL v18 = (void *)*v5;
  if (v16) {
    return sub_1001D9214((uint64_t)a1, v18[7] + 96 * v12, &qword_1007264B8);
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  char v22 = (uint64_t *)(v18[6] + 16 * v12);
  *char v22 = a2;
  v22[1] = a3;
  uint64_t v23 = (_OWORD *)(v18[7] + 96 * v12);
  long long v24 = a1[1];
  *uint64_t v23 = *a1;
  v23[1] = v24;
  long long v25 = a1[2];
  long long v26 = a1[3];
  long long v27 = a1[4];
  *(_OWORD *)((char *)v23 + 73) = *(_OWORD *)((char *)a1 + 73);
  v23[3] = v26;
  v23[4] = v27;
  void v23[2] = v25;
  uint64_t v28 = v18[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v18[2] = v30;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100562FE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100590548(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10016BDD4();
LABEL_7:
    BOOL v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001671DC(result, a4 & 1);
  uint64_t result = sub_100590548(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  BOOL v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v18[2] = v23;

  return swift_bridgeObjectRetain();
}

void sub_100563148(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_100563174(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10059076C(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10016C138();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1001677C8(result, a3 & 1);
  uint64_t result = sub_10059076C(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1005632AC(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100590DF4(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10016C2DC();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_100167C4C(result, a3 & 1);
  uint64_t result = sub_100590DF4(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for DIUploadContainer(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1005633E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10056342C(a1, a2, a3, a4, (void (*)(void))sub_10016C480, (void (*)(void))sub_100167F28, type metadata accessor for UploadsCloudContainer.AnalyticsMetadata, type metadata accessor for UploadsCloudContainer.AnalyticsMetadata);
}

uint64_t sub_10056342C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  BOOL v12 = (void **)v8;
  char v16 = (void *)*v8;
  unint64_t v18 = sub_100590548(a2, a3);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v22 = v17;
  uint64_t v23 = v16[3];
  if (v23 >= v21 && (a4 & 1) != 0)
  {
LABEL_7:
    long long v24 = *v12;
    if (v22)
    {
LABEL_8:
      uint64_t v25 = v24[7];
      uint64_t v26 = a7(0);
      return sub_100565DF8(a1, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v18, a8);
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }
  a6();
  unint64_t v28 = sub_100590548(a2, a3);
  if ((v22 & 1) != (v29 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v28;
  long long v24 = *v12;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10056431C(v18, a2, a3, a1, v24, a8, a8);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1005635C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  char v14 = (void *)*v6;
  unint64_t v16 = sub_100590548(a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a6 & 1) != 0)
  {
LABEL_7:
    char v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = (uint64_t *)(v22[7] + 24 * v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v23 = a1;
      v23[1] = a2;
      void v23[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_10016C718();
    goto LABEL_7;
  }
  sub_100168300(v19, a6 & 1);
  unint64_t v25 = sub_100590548(a4, a5);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  char v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1005643C8(v16, a4, a5, a1, a2, a3, v22);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10056373C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  return sub_100563784(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))sub_10016C904, (void (*)(void))sub_10016866C);
}

uint64_t sub_100563784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void (*a8)(void), void (*a9)(void))
{
  uint64_t v11 = v9;
  uint64_t v16 = *v9;
  unint64_t v18 = sub_100590548(a5, a6);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 >= v21 && (a7 & 1) != 0) {
    goto LABEL_7;
  }
  if (v23 >= v21 && (a7 & 1) == 0)
  {
    a8();
LABEL_7:
    long long v24 = (void *)*v11;
    if (v22)
    {
LABEL_8:
      unint64_t v25 = (void *)(v24[7] + 32 * v18);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v25 = a1;
      v25[1] = a2;
      v25[2] = a3;
      v25[3] = a4;
      return result;
    }
    goto LABEL_11;
  }
  a9();
  unint64_t v27 = sub_100590548(a5, a6);
  if ((v22 & 1) != (v28 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v27;
  long long v24 = (void *)*v11;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  v24[(v18 >> 6) + 8] |= 1 << v18;
  char v29 = (uint64_t *)(v24[6] + 16 * v18);
  *char v29 = a5;
  v29[1] = a6;
  uint64_t v30 = (void *)(v24[7] + 32 * v18);
  void *v30 = a1;
  v30[1] = a2;
  _OWORD v30[2] = a3;
  v30[3] = a4;
  uint64_t v31 = v24[2];
  BOOL v32 = __OFADD__(v31, 1);
  uint64_t v33 = v31 + 1;
  if (v32)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v24[2] = v33;

  return swift_bridgeObjectRetain();
}

void sub_100563954(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_100563980(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  char v9 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_100590548(a2, a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    char v22 = (void *)*v9;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];

      *(void *)(v23 + 8 * v16) = a1;
      return;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v24 = sub_100590548(a2, a3);
  if ((v20 & 1) != (v25 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v24;
  char v22 = (void *)*v9;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  char v26 = (uint64_t *)(v22[6] + 16 * v16);
  *char v26 = a2;
  v26[1] = a3;
  *(void *)(v22[7] + 8 * v16) = a1;
  uint64_t v27 = v22[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v22[2] = v29;

  swift_bridgeObjectRetain();
}

uint64_t sub_100563B0C(uint64_t a1, uint64_t a2, char a3, double a4, double a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100590548(a1, a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10016CC98();
LABEL_7:
    char v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (double *)(v20[7] + 16 * v14);
      *uint64_t v21 = a4;
      v21[1] = a5;
      return result;
    }
    goto LABEL_11;
  }
  sub_100168CB8(result, a3 & 1);
  uint64_t result = sub_100590548(a1, a2);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v23 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v23 = a1;
  v23[1] = a2;
  unint64_t v24 = (double *)(v20[7] + 16 * v14);
  *unint64_t v24 = a4;
  v24[1] = a5;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v27;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100563C84(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for IQCType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100590E60(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10016D244();
    goto LABEL_7;
  }
  sub_100169840(result, a3 & 1);
  uint64_t result = sub_100590E60(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10056441C(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100563E20(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100563E4C(a1, a2, a3, a4, (void (*)(void))sub_10016D4D8, (void (*)(void))sub_100169C64);
}

uint64_t sub_100563E4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  uint64_t v9 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_100590548(a2, a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    uint64_t v22 = (void *)*v9;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_release();
      *(void *)(v23 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v25 = sub_100590548(a2, a3);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = (void *)*v9;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  uint64_t v27 = (uint64_t *)(v22[6] + 16 * v16);
  uint64_t *v27 = a2;
  v27[1] = a3;
  *(void *)(v22[7] + 8 * v16) = a1;
  uint64_t v28 = v22[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v22[2] = v30;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100563FD8(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10000C6B4(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_100564048(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for DIPError.PropertyKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_1000078A8(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100564108(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = sub_100007764(&qword_100720FC8);
  uint64_t result = sub_1000BEA14(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, &qword_100720FC8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

unint64_t sub_1005641B4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *sub_1005641FC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000078A8(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_100564268(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v9 = (void *)(a5[6] + 16 * a1);
  *BOOL v9 = a2;
  v9[1] = a3;
  uint64_t v10 = a5[7];
  uint64_t v11 = a6(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a4, v11);
  uint64_t v13 = a5[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a5[2] = v15;
  }
  return result;
}

uint64_t sub_10056431C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = (void *)(a5[6] + 16 * a1);
  *uint64_t v11 = a2;
  v11[1] = a3;
  uint64_t v12 = a5[7];
  uint64_t v13 = a6(0);
  uint64_t result = sub_10016E15C(a4, v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a7);
  uint64_t v15 = a5[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a5[2] = v17;
  }
  return result;
}

unint64_t sub_1005643C8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  BOOL v7 = (void *)(a7[6] + 16 * result);
  *BOOL v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (void *)(a7[7] + 24 * result);
  *uint64_t v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

uint64_t sub_10056441C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for IQCType();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1005644D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10015C3CC((uint64_t)_swiftEmptyArrayStorage);
  if (!a1) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_20;
  }
  uint64_t v70 = a2;
  uint64_t v6 = self;
  swift_bridgeObjectRetain();
  BOOL v7 = (uint64_t *)(a1 + 40);
  do
  {
    uint64_t v9 = *(v7 - 1);
    uint64_t v8 = *v7;
    swift_bridgeObjectRetain();
    id v10 = [v6 standardUserDefaults];
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v10 valueForKey:v11];

    if (!v12)
    {
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000078A8(&v72, &v74);
    sub_10003BC28((uint64_t)&v74, (uint64_t)&v72);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v15 = sub_100590548(v9, v8);
    uint64_t v16 = *(void *)(v4 + 16);
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      goto LABEL_72;
    }
    char v19 = v14;
    if (*(void *)(v4 + 24) >= v18)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v14 & 1) == 0) {
          goto LABEL_11;
        }
      }
      else
      {
        sub_10016B194();
        if ((v19 & 1) == 0) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      sub_100165DE8(v18, isUniquelyReferenced_nonNull_native);
      unint64_t v20 = sub_100590548(v9, v8);
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_77;
      }
      unint64_t v15 = v20;
      if ((v19 & 1) == 0)
      {
LABEL_11:
        *(void *)(v4 + 8 * (v15 >> 6) + 64) |= 1 << v15;
        uint64_t v22 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v15);
        *uint64_t v22 = v9;
        v22[1] = v8;
        sub_1000078A8(&v72, (_OWORD *)(*(void *)(v4 + 56) + 32 * v15));
        uint64_t v23 = *(void *)(v4 + 16);
        BOOL v24 = __OFADD__(v23, 1);
        uint64_t v25 = v23 + 1;
        if (v24) {
          goto LABEL_74;
        }
        *(void *)(v4 + 16) = v25;
        swift_bridgeObjectRetain();
        goto LABEL_16;
      }
    }
    char v26 = (_OWORD *)(*(void *)(v4 + 56) + 32 * v15);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v26);
    sub_1000078A8(&v72, v26);
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v74);
LABEL_5:
    v7 += 2;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  a2 = v70;
LABEL_20:
  if (byte_1007600A0 == 1 && a2 != 0)
  {
    uint64_t v28 = *(void *)(a2 + 16);
    if (v28)
    {
      BOOL v29 = self;
      swift_bridgeObjectRetain();
      uint64_t v30 = (uint64_t *)(a2 + 40);
      while (1)
      {
        uint64_t v32 = *(v30 - 1);
        uint64_t v31 = *v30;
        swift_bridgeObjectRetain();
        id v33 = [v29 standardUserDefaults];
        NSString v34 = String._bridgeToObjectiveC()();
        id v35 = [v33 valueForKey:v34];

        if (v35) {
          break;
        }
        swift_bridgeObjectRelease();
LABEL_27:
        v30 += 2;
        if (!--v28)
        {
          swift_bridgeObjectRelease();
          goto LABEL_42;
        }
      }
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000078A8(&v72, &v74);
      sub_10003BC28((uint64_t)&v74, (uint64_t)&v72);
      char v36 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v38 = sub_100590548(v32, v31);
      uint64_t v39 = *(void *)(v4 + 16);
      BOOL v40 = (v37 & 1) == 0;
      uint64_t v41 = v39 + v40;
      if (__OFADD__(v39, v40)) {
        goto LABEL_73;
      }
      char v42 = v37;
      if (*(void *)(v4 + 24) >= v41)
      {
        if (v36)
        {
          if ((v37 & 1) == 0) {
            goto LABEL_33;
          }
        }
        else
        {
          sub_10016B194();
          if ((v42 & 1) == 0) {
            goto LABEL_33;
          }
        }
      }
      else
      {
        sub_100165DE8(v41, v36);
        unint64_t v43 = sub_100590548(v32, v31);
        if ((v42 & 1) != (v44 & 1)) {
          goto LABEL_77;
        }
        unint64_t v38 = v43;
        if ((v42 & 1) == 0)
        {
LABEL_33:
          *(void *)(v4 + 8 * (v38 >> 6) + 64) |= 1 << v38;
          NSString v45 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v38);
          *NSString v45 = v32;
          v45[1] = v31;
          sub_1000078A8(&v72, (_OWORD *)(*(void *)(v4 + 56) + 32 * v38));
          uint64_t v46 = *(void *)(v4 + 16);
          BOOL v24 = __OFADD__(v46, 1);
          uint64_t v47 = v46 + 1;
          if (v24) {
            goto LABEL_75;
          }
          *(void *)(v4 + 16) = v47;
          swift_bridgeObjectRetain();
          goto LABEL_38;
        }
      }
      uint64_t v48 = (_OWORD *)(*(void *)(v4 + 56) + 32 * v38);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v48);
      sub_1000078A8(&v72, v48);
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v74);
      goto LABEL_27;
    }
  }
LABEL_42:
  id v49 = [self mainBundle];
  id v50 = [v49 bundleIdentifier];

  if (v50)
  {
    id v51 = [self standardUserDefaults];
    [v51 removePersistentDomainForName:v50];
  }
  int64_t v52 = 0;
  uint64_t v53 = *(void *)(v4 + 64);
  unint64_t v69 = v4 + 64;
  uint64_t v54 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v55 = -1;
  if (v54 < 64) {
    uint64_t v55 = ~(-1 << v54);
  }
  unint64_t v56 = v55 & v53;
  int64_t v71 = (unint64_t)(v54 + 63) >> 6;
  if ((v55 & v53) == 0) {
    goto LABEL_51;
  }
LABEL_49:
  unint64_t v60 = __clz(__rbit64(v56));
  v56 &= v56 - 1;
  unint64_t v61 = v60 | (v52 << 6);
LABEL_50:
  uint64_t v62 = *(void *)(v4 + 56);
  uint64_t v63 = (void *)(*(void *)(v4 + 48) + 16 * v61);
  uint64_t v64 = v63[1];
  *(void *)&long long v72 = *v63;
  *((void *)&v72 + 1) = v64;
  sub_10003BC28(v62 + 32 * v61, (uint64_t)v73);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000BEA14((uint64_t)&v72, (uint64_t)&v74, &qword_100726CA8);
    if (!*((void *)&v74 + 1)) {
      return swift_release();
    }
    sub_1000078A8(&v75, &v72);
    id v57 = [self standardUserDefaults];
    sub_10000C728(&v72, *((uint64_t *)&v73[0] + 1));
    uint64_t v58 = _bridgeAnythingToObjectiveC<A>(_:)();
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v57 setObject:v58 forKey:v59];

    swift_unknownObjectRelease();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v72);
    if (v56) {
      goto LABEL_49;
    }
LABEL_51:
    int64_t v65 = v52 + 1;
    if (__OFADD__(v52, 1)) {
      break;
    }
    if (v65 < v71)
    {
      unint64_t v66 = *(void *)(v69 + 8 * v65);
      if (v66) {
        goto LABEL_54;
      }
      int64_t v67 = v52 + 2;
      ++v52;
      if (v65 + 1 < v71)
      {
        unint64_t v66 = *(void *)(v69 + 8 * v67);
        if (v66) {
          goto LABEL_57;
        }
        int64_t v52 = v65 + 1;
        if (v65 + 2 < v71)
        {
          unint64_t v66 = *(void *)(v69 + 8 * (v65 + 2));
          if (v66)
          {
            v65 += 2;
            goto LABEL_54;
          }
          int64_t v67 = v65 + 3;
          int64_t v52 = v65 + 2;
          if (v65 + 3 < v71)
          {
            unint64_t v66 = *(void *)(v69 + 8 * v67);
            if (!v66)
            {
              while (1)
              {
                int64_t v65 = v67 + 1;
                if (__OFADD__(v67, 1)) {
                  goto LABEL_76;
                }
                if (v65 >= v71)
                {
                  int64_t v52 = v71 - 1;
                  goto LABEL_68;
                }
                unint64_t v66 = *(void *)(v69 + 8 * v65);
                ++v67;
                if (v66) {
                  goto LABEL_54;
                }
              }
            }
LABEL_57:
            int64_t v65 = v67;
LABEL_54:
            unint64_t v56 = (v66 - 1) & v66;
            unint64_t v61 = __clz(__rbit64(v66)) + (v65 << 6);
            int64_t v52 = v65;
            goto LABEL_50;
          }
        }
      }
    }
LABEL_68:
    unint64_t v56 = 0;
    memset(v73, 0, sizeof(v73));
    long long v72 = 0u;
  }
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100564C3C(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  uint64_t v3 = type metadata accessor for TimeoutError();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  return _swift_task_switch(sub_100564DA4, 0, 0);
}

uint64_t sub_100564DA4()
{
  unint64_t v43 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v38 = v0[16];
    uint64_t v39 = v0[15];
    uint64_t v41 = v0[23];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    v0[9] = sub_100110D58(v4, v6, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DeleteUtility deleteData called with entityTypes %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    BOOL v7 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v7(v41, v39);
  }
  else
  {
    uint64_t v8 = v0[23];
    uint64_t v9 = v0[15];
    uint64_t v10 = v0[16];
    swift_bridgeObjectRelease_n();

    BOOL v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[24] = v7;
  if (v0[11])
  {
    swift_retain();
    defaultLogger()();
    NSString v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "DeleteUtility deleteData attempting to delete legacy SQL store", v13, 2u);
      swift_slowDealloc();
    }
    uint64_t v14 = v0[22];
    uint64_t v15 = v0[15];

    v7(v14, v15);
    OS_dispatch_queue.sync<A>(execute:)();
    defaultLogger()();
    char v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      BOOL v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "DeleteUtility deleteData successfully deleted legacy SQL store", v24, 2u);
      swift_slowDealloc();
    }
    uint64_t v25 = v0[21];
    uint64_t v26 = v0[15];
    swift_release();

    v7(v25, v26);
  }
  else
  {
    defaultLogger()();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "DeleteUtility deleteData sqliteLocalStore is nil, skipping deletion.", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v19 = v0[20];
    uint64_t v20 = v0[15];

    v7(v19, v20);
  }
  uint64_t v27 = v0[10];
  uint64_t v28 = *(void *)(v27 + 16);
  v0[25] = v28;
  if (v28)
  {
    v0[28] = 0;
    uint64_t v29 = *(char *)(v27 + 32);
    swift_bridgeObjectRetain();
    uint64_t v30 = v29;
    uint64_t v31 = off_100708E08[v29];
    uint64_t v32 = off_100708E20[v30];
    BOOL v40 = (uint64_t (*)(ValueMetadata *, void *))(v32[1] + *(int *)v32[1]);
    id v33 = (void *)swift_task_alloc();
    v0[29] = v33;
    *id v33 = v0;
    v33[1] = sub_1005656D0;
    return v40(v31, v32);
  }
  else
  {
    type metadata accessor for DIPKeystoreKeychain();
    static DIPKeystoreKeychain.deleteAll()();
    if (qword_10071F5A0 != -1) {
      swift_once();
    }
    [(id)qword_100760850 removeAllCachedResponses];
    if (qword_10071F5B0 != -1) {
      swift_once();
    }
    uint64_t v35 = qword_100732E50;
    if (qword_10071F5B8 != -1) {
      swift_once();
    }
    sub_1005644D4(v35, qword_100732E58);
    char v36 = (void *)swift_task_alloc();
    v0[26] = v36;
    *char v36 = v0;
    v36[1] = sub_1005655BC;
    v37.n128_u64[0] = 8.0;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v36, &unk_100732E68, 0, (char *)&type metadata for () + 8, v37);
  }
}

uint64_t sub_1005655BC()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100565B20;
  }
  else {
    os_log_type_t v2 = sub_100565A60;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005656D0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1005657CC, 0, 0);
}

uint64_t sub_1005657CC()
{
  uint64_t v1 = v0[28] + 1;
  if (v1 == v0[25])
  {
    swift_bridgeObjectRelease();
    type metadata accessor for DIPKeystoreKeychain();
    static DIPKeystoreKeychain.deleteAll()();
    if (qword_10071F5A0 != -1) {
      swift_once();
    }
    [(id)qword_100760850 removeAllCachedResponses];
    if (qword_10071F5B0 != -1) {
      swift_once();
    }
    uint64_t v2 = qword_100732E50;
    if (qword_10071F5B8 != -1) {
      swift_once();
    }
    sub_1005644D4(v2, qword_100732E58);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[26] = v3;
    void *v3 = v0;
    v3[1] = sub_1005655BC;
    v4.n128_u64[0] = 8.0;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v3, &unk_100732E68, 0, (char *)&type metadata for () + 8, v4);
  }
  else
  {
    v0[28] = v1;
    uint64_t v5 = *(char *)(v0[10] + v1 + 32);
    unint64_t v6 = off_100708E08[v5];
    BOOL v7 = off_100708E20[v5];
    uint64_t v10 = (uint64_t (*)(ValueMetadata *, void *))(v7[1] + *(int *)v7[1]);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[29] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1005656D0;
    return v10(v6, v7);
  }
}

uint64_t sub_100565A60()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100565B20()
{
  v0[5] = v0[27];
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    defaultLogger()();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 134349056;
      v0[6] = 0x4020000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "all ODN cleanup timed out after %{public}f seconds", v3, 0xCu);
      swift_slowDealloc();
    }
    __n128 v4 = (void (*)(uint64_t, uint64_t))v0[24];
    uint64_t v5 = v0[18];
    uint64_t v6 = v0[15];
    uint64_t v8 = v0[13];
    uint64_t v7 = v0[14];
    uint64_t v9 = v0[12];

    v4(v5, v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_errorRelease();
  }
  else
  {
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[24];
    uint64_t v11 = v0[17];
    uint64_t v12 = v0[15];
    swift_errorRelease();
    defaultLogger()();
    DIPLogError(_:message:log:)();
    swift_errorRelease();
    v10(v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

id sub_100565D84()
{
  return sub_10056ACB4(v0);
}

unint64_t sub_100565DA0()
{
  unint64_t result = qword_10071F7B8;
  if (!qword_10071F7B8)
  {
    type metadata accessor for DIPError.PropertyKey();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10071F7B8);
  }
  return result;
}

uint64_t sub_100565DF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for DaemonDeletionUtility.EntityType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100565F2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonDeletionUtility.EntityType()
{
  return &type metadata for DaemonDeletionUtility.EntityType;
}

unint64_t sub_100565F68()
{
  unint64_t result = qword_100732E70;
  if (!qword_100732E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100732E70);
  }
  return result;
}

unint64_t sub_100565FBC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006F3E98, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

id sub_100566008(id a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v6 = (void *)_convertErrorToNSError(_:)();
  id v7 = [v6 domain];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_9;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_9:
    swift_errorRetain();
    return a1;
  }
  uint64_t v39 = v3;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  *(void *)&long long v42 = a1;
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  uint64_t v17 = String.init<A>(describing:)();
  unint64_t v43 = &type metadata for String;
  *(void *)&long long v42 = v17;
  *((void *)&v42 + 1) = v18;
  sub_1000078A8(&v42, v41);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  BOOL v40 = &_swiftEmptyDictionarySingleton;
  sub_100562C48(v41, v14, v16, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)_convertErrorToNSError(_:)();
  uint64_t v21 = sub_100566458((uint64_t)[v20 code]);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v22 = objc_allocWithZone((Class)NSError);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v25 = [v22 initWithDomain:v23 code:v21 userInfo:isa];

  defaultLogger()();
  a1 = v25;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(void *)&long long v42 = v38;
    *(_DWORD *)uint64_t v28 = 134349314;
    *(void *)&v41[0] = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 12) = 2082;
    id v29 = [a1 localizedDescription:v28 + 14];
    v36[1] = (char *)&type metadata for Any + 8;
    id v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v37 = v20;
    uint64_t v32 = v31;
    unint64_t v34 = v33;

    *(void *)&v41[0] = sub_100110D58(v32, v34, (uint64_t *)&v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Returning DIVerificationError (%{public}ld) with description: %{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v2);
  return a1;
}

uint64_t sub_100566458(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100723600);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DIPError.Code();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - v10;
  if ((unint64_t)a1 >= 0xFFFFFFFFFFFFFFECLL) {
    return a1;
  }
  if (a1 <= 40200)
  {
    if ((unint64_t)(a1 - 40101) < 2 || a1 == -22) {
      return a1;
    }
  }
  else if ((unint64_t)(a1 - 40401) < 2 || a1 == 40201 || a1 == 50001)
  {
    return a1;
  }
  DIPError.Code.init(rawValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1001746FC((uint64_t)v4);
    return -1;
  }
  char v13 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v13(v11, v4, v5);
  v13(v9, v11, v5);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  if (v14 == enum case for DIPError.Code.topekaInvalidRequestMandatoryAttributeMissing(_:)
    || v14 == enum case for DIPError.Code.topekaInvalidRequestInvalidAttributeLength(_:)
    || v14 == enum case for DIPError.Code.topekaInvalidRequestInvalidAttributeType(_:))
  {
    return -6;
  }
  if (v14 == enum case for DIPError.Code.topekaUnderageUser(_:)) {
    return -22;
  }
  if (v14 == enum case for DIPError.Code.topekaInvalidOTP(_:)) {
    return -6;
  }
  a1 = -11;
  if (v14 != enum case for DIPError.Code.timeoutNetworkBAA(_:)
    && v14 != enum case for DIPError.Code.timeoutNetworkConfig(_:)
    && v14 != enum case for DIPError.Code.timeoutNetworkSendOTD(_:))
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    return -1;
  }
  return a1;
}

uint64_t sub_100566734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a1;
  v4[8] = a4;
  sub_100007764(&qword_10071FEE0);
  v4[9] = swift_task_alloc();
  return _swift_task_switch(sub_1005667C8, 0, 0);
}

uint64_t sub_1005667C8()
{
  uint64_t v1 = v0[8] + OBJC_IVAR____TtC8coreidvd33DigitalPresentmentResponseBuilder_context;
  uint64_t v2 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  sub_10056853C(v1 + *(int *)(v2 + 36), (uint64_t)(v0 + 2));
  uint64_t v3 = v0[5];
  if (v3)
  {
    uint64_t v4 = sub_10000C728(v0 + 2, v3);
    v0[10] = v4;
    uint64_t v5 = *v4;
    return _swift_task_switch(sub_1005668B4, v5, 0);
  }
  else
  {
    uint64_t v6 = (unsigned char *)v0[7];
    sub_1005685A4((uint64_t)(v0 + 2));
    *uint64_t v6 = 1;
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_1005668B4()
{
  uint64_t v1 = *(uint64_t **)(v0 + 80);
  uint64_t v2 = *v1;
  if (*(void *)(*v1 + 272))
  {
    swift_retain();
    sub_100007764((uint64_t *)&unk_100723450);
    Task.cancel()();
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = sub_100568604(&qword_100729078, (void (*)(uint64_t))type metadata accessor for DigitalPresentmentCredentialValidator);
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = v2;
  v6[3] = v5;
  v6[4] = v2;
  swift_retain_n();
  *(void *)(v2 + 272) = sub_10016F728(v3, (uint64_t)&unk_100729080, (uint64_t)v6);
  swift_release();
  return _swift_task_switch(sub_100566A3C, 0, 0);
}

uint64_t sub_100566A3C()
{
  **(unsigned char **)(v0 + 56) = 0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100566AAC()
{
  v1[19] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[20] = v2;
  v1[21] = *(void *)(v2 - 8);
  v1[22] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[23] = v3;
  v1[24] = *(void *)(v3 - 8);
  v1[25] = swift_task_alloc();
  return _swift_task_switch(sub_100566BC8, 0, 0);
}

uint64_t sub_100566BC8()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DigitalPresentmentResponseBuilder buildResponse invoked.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[24];
  uint64_t v4 = v0[25];
  uint64_t v6 = v0[23];
  uint64_t v7 = v0[19];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = OBJC_IVAR____TtC8coreidvd33DigitalPresentmentResponseBuilder_context;
  v0[26] = OBJC_IVAR____TtC8coreidvd33DigitalPresentmentResponseBuilder_context;
  uint64_t v9 = v7 + v8;
  uint64_t v10 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  v0[27] = v10;
  sub_10000C728((void *)(v9 + *(int *)(v10 + 32)), *(void *)(v9 + *(int *)(v10 + 32) + 24));
  uint64_t v11 = (void *)swift_task_alloc();
  v0[28] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100566D30;
  return sub_10020C860();
}

uint64_t sub_100566D30(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_100566E78, 0, 0);
  }
}

uint64_t sub_100566E78()
{
  unint64_t v1 = *(void *)(v0 + 232);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_30:
    swift_bridgeObjectRelease();
LABEL_31:
    uint64_t v42 = *(void *)(v0 + 168);
    uint64_t v41 = *(void *)(v0 + 176);
    uint64_t v43 = *(void *)(v0 + 160);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v42 + 104))(v41, enum case for DIPError.Code.digitalPresentmentInvalidMerchantCertificate(_:), v43);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100568604((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_30;
  }
LABEL_3:
  unint64_t v4 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v5 = *(id *)(*(void *)(v0 + 232) + 32);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = SecCertificateRef.publicKeySHA256()();
  unint64_t v8 = v7;

  *(void *)(v0 + 248) = v6;
  *(void *)(v0 + 256) = v8;
  if (v8 >> 60 == 15) {
    goto LABEL_31;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = *(id *)(*(void *)(v0 + 232) + 32);
  }
  Swift::String_optional v10 = SecCertificateRef.organizationalUnit()();

  if (!v10.value._object)
  {
    uint64_t v15 = *(void *)(v0 + 168);
    uint64_t v14 = *(void *)(v0 + 176);
    uint64_t v16 = *(void *)(v0 + 160);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.digitalPresentmentInvalidMerchantCertificate(_:), v16);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100568604((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
LABEL_14:
    sub_10000C5E0(v6, v8);
    goto LABEL_32;
  }
  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v12 = sub_100492F20(v10.value._countAndFlagsBits, (void (*)(unsigned char *, uint64_t))v10.value._object, v6, v8);
  *(void *)(v0 + 264) = v12;
  *(void *)(v0 + 272) = v13;
  if (v11)
  {
    swift_bridgeObjectRelease();
    sub_10000C5E0(v6, v8);
    swift_bridgeObjectRelease();
LABEL_32:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
    return v44();
  }
  uint64_t v17 = v12;
  unint64_t v18 = v13;
  uint64_t v19 = *(void *)(v0 + 208);
  uint64_t v20 = *(void *)(v0 + 152);
  swift_bridgeObjectRelease();
  char v21 = *(unsigned char *)(v20 + v19);
  *(unsigned char *)(v0 + 364) = v21;
  if (v21)
  {
    uint64_t v23 = *(void *)(v0 + 264);
    unint64_t v22 = *(void *)(v0 + 272);
    uint64_t v24 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 216);
    uint64_t v26 = *(void *)(v0 + 152) + *(void *)(v0 + 208);
    uint64_t v27 = *(int *)(v25 + 28);
    *(_DWORD *)(v0 + 360) = v27;
    uint64_t v28 = (uint64_t *)(v26 + v27);
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    *(void *)(v0 + 296) = v29;
    uint64_t v31 = (uint64_t *)(v26 + *(int *)(v25 + 60));
    uint64_t v32 = *v31;
    *(void *)(v0 + 304) = *v31;
    unint64_t v33 = v31[1];
    *(void *)(v0 + 312) = v33;
    if (v33 >> 60 == 15) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = v32;
    }
    unint64_t v35 = 0xC000000000000000;
    if (v33 >> 60 != 15) {
      unint64_t v35 = v33;
    }
    *(void *)(v0 + 16) = v30;
    *(void *)(v0 + 24) = v29;
    *(void *)(v0 + 32) = v34;
    *(void *)(v0 + 40) = v35;
    *(void *)(v0 + 48) = v23;
    *(void *)(v0 + 56) = v22;
    *(void *)(v0 + 64) = v24;
    swift_bridgeObjectRetain();
    sub_1000338D4(v32, v33);
    sub_10002CEB0(v23, v22);
    char v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v36;
    *char v36 = v0;
    v36[1] = sub_100567A90;
    return sub_10040FE98(v0 + 16);
  }
  sub_10056853C(*(void *)(v0 + 152) + *(void *)(v0 + 208) + *(int *)(*(void *)(v0 + 216) + 36), v0 + 112);
  if (!*(void *)(v0 + 136))
  {
    uint64_t v39 = *(void *)(v0 + 168);
    uint64_t v38 = *(void *)(v0 + 176);
    uint64_t v40 = *(void *)(v0 + 160);
    swift_bridgeObjectRelease();
    sub_1005685A4(v0 + 112);
    (*(void (**)(uint64_t, void, uint64_t))(v39 + 104))(v38, enum case for DIPError.Code.unexpectedDaemonState(_:), v40);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100568604((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v17, v18);
    goto LABEL_14;
  }
  sub_10000C6B4((long long *)(v0 + 112), v0 + 72);
  sub_10000C728((void *)(v0 + 72), *(void *)(v0 + 96));
  id v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v37;
  *id v37 = v0;
  v37[1] = sub_1005675CC;
  return sub_1002A38C8();
}

uint64_t sub_1005675CC(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 288) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    id v5 = sub_1005679F4;
  }
  else
  {
    *(unsigned char *)(v4 + 365) = a1 & 1;
    id v5 = sub_100567700;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100567700()
{
  if (*(unsigned char *)(v0 + 365) == 1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 72);
    uint64_t v1 = *(void *)(v0 + 264);
    unint64_t v2 = *(void *)(v0 + 272);
    uint64_t v3 = *(void *)(v0 + 232);
    uint64_t v4 = *(void *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 152) + *(void *)(v0 + 208);
    uint64_t v6 = *(int *)(v4 + 28);
    *(_DWORD *)(v0 + 360) = v6;
    uint64_t v7 = (uint64_t *)(v5 + v6);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    *(void *)(v0 + 296) = v8;
    Swift::String_optional v10 = (uint64_t *)(v5 + *(int *)(v4 + 60));
    uint64_t v11 = *v10;
    *(void *)(v0 + 304) = *v10;
    unint64_t v12 = v10[1];
    *(void *)(v0 + 312) = v12;
    if (v12 >> 60 == 15) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v11;
    }
    unint64_t v14 = 0xC000000000000000;
    if (v12 >> 60 != 15) {
      unint64_t v14 = v12;
    }
    *(void *)(v0 + 16) = v9;
    *(void *)(v0 + 24) = v8;
    *(void *)(v0 + 32) = v13;
    *(void *)(v0 + 40) = v14;
    *(void *)(v0 + 48) = v1;
    *(void *)(v0 + 56) = v2;
    *(void *)(v0 + 64) = v3;
    swift_bridgeObjectRetain();
    sub_1000338D4(v11, v12);
    sub_10002CEB0(v1, v2);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100567A90;
    return sub_10040FE98(v0 + 16);
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 264);
    unint64_t v17 = *(void *)(v0 + 272);
    uint64_t v20 = *(void *)(v0 + 248);
    unint64_t v19 = *(void *)(v0 + 256);
    uint64_t v22 = *(void *)(v0 + 168);
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v23 = *(void *)(v0 + 160);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for DIPError.Code.digitalPresentmentInvalidCredential(_:), v23);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100568604((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    sub_10000C5F4(v18, v17);
    sub_10000C5E0(v20, v19);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 72);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
}

uint64_t sub_1005679F4()
{
  uint64_t v2 = v0[31];
  unint64_t v1 = v0[32];
  sub_10000C5F4(v0[33], v0[34]);
  sub_10000C5E0(v2, v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 9));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100567A90(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 328) = a1;
  *(void *)(v3 + 336) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100568310;
  }
  else {
    uint64_t v4 = sub_100567BA4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100567BA4()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 152) + *(void *)(v0 + 208);
  v3._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  v3._object = (void *)0x8000000100655EA0;
  v4._uint64_t countAndFlagsBits = 0x3666613738363937;
  v4._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v4, v3);
  uint64_t v5 = *sub_10000C728((void *)(v2 + *(int *)(v1 + 56)), *(void *)(v2 + *(int *)(v1 + 56) + 24))
     + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData;
  if (*(void *)(v5 + 8))
  {
    uint64_t v6 = *(void *)(v5 + 24);
    char v7 = *(unsigned char *)(v5 + 32) & 1;
    if (*(unsigned char *)(v0 + 364))
    {
LABEL_3:
      uint64_t v8 = *(void **)(v0 + 328);
      unint64_t v9 = *(void *)(v0 + 312);
      uint64_t v11 = *(void *)(v0 + 264);
      unint64_t v10 = *(void *)(v0 + 272);
      unint64_t v39 = *(void *)(v0 + 256);
      uint64_t v37 = *(void *)(v0 + 248);
      if (v9 >> 60 == 15) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = *(void *)(v0 + 304);
      }
      if (v9 >> 60 == 15) {
        unint64_t v13 = 0xC000000000000000;
      }
      else {
        unint64_t v13 = *(void *)(v0 + 312);
      }
      type metadata accessor for DigitalPresentmentResponse();
      id v14 = [v8 responseData];
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v15 = dispatch thunk of DigitalPresentmentResponse.__allocating_init(encryptedData:)();
      swift_bridgeObjectRelease();
      sub_10000C5F4(v12, v13);
      sub_10000C5F4(v11, v10);
      swift_bridgeObjectRelease();
      sub_10000C5F4(v11, v10);
      sub_10000C5E0(v37, v39);
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v16 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v16(v15);
    }
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
    if (*(unsigned char *)(v0 + 364)) {
      goto LABEL_3;
    }
  }
  uint64_t v18 = *(void *)(v0 + 152) + *(void *)(v0 + 208);
  uint64_t v19 = *(void *)(v18 + 8);
  *(void *)(v0 + 344) = v19;
  if (v19)
  {
    uint64_t v20 = *(int **)(v0 + 216);
    uint64_t v41 = *(void *)(v18 + *(int *)(v0 + 360) + 80);
    uint64_t v21 = v18 + v20[6];
    uint64_t v22 = type metadata accessor for ValidatedDigitalPresentmentRequest();
    uint64_t v23 = (uint64_t *)(v21 + *(int *)(v22 + 32));
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v26 = v21 + *(int *)(v22 + 40);
    uint64_t v27 = v20[13];
    uint64_t v28 = v18 + v20[12];
    uint64_t v29 = v18 + v27;
    swift_retain();
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v30;
    void *v30 = v0;
    v30[1] = sub_100568078;
    return sub_100174DF4(v41, v24, v25, v26, v28, v6, v7, v29);
  }
  else
  {
    unint64_t v31 = *(void *)(v0 + 312);
    uint64_t v33 = *(void *)(v0 + 264);
    unint64_t v32 = *(void *)(v0 + 272);
    unint64_t v42 = *(void *)(v0 + 256);
    uint64_t v40 = *(void *)(v0 + 248);
    uint64_t v38 = *(void **)(v0 + 328);
    if (v31 >> 60 == 15) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = *(void *)(v0 + 304);
    }
    if (v31 >> 60 == 15) {
      unint64_t v35 = 0xC000000000000000;
    }
    else {
      unint64_t v35 = *(void *)(v0 + 312);
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 104))(*(void *)(v0 + 176), enum case for DIPError.Code.unexpectedDaemonState(_:), *(void *)(v0 + 160));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_100568604((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    swift_bridgeObjectRelease();
    sub_10000C5F4(v34, v35);
    sub_10000C5F4(v33, v32);
    swift_bridgeObjectRelease();
    sub_10000C5F4(v33, v32);
    sub_10000C5E0(v40, v42);
    swift_task_dealloc();
    swift_task_dealloc();
    char v36 = *(uint64_t (**)(void))(v0 + 8);
    return v36();
  }
}

uint64_t sub_100568078()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100568174, 0, 0);
}

uint64_t sub_100568174()
{
  v1._object = (void *)0x8000000100655F10;
  v2._uint64_t countAndFlagsBits = 0x3763306238613031;
  v2._object = (void *)0xE800000000000000;
  v1._uint64_t countAndFlagsBits = 0xD000000000000026;
  logMilestone(tag:description:)(v2, v1);
  swift_release();
  Swift::String v3 = (void *)v0[41];
  unint64_t v4 = v0[39];
  uint64_t v6 = v0[33];
  unint64_t v5 = v0[34];
  unint64_t v14 = v0[32];
  uint64_t v13 = v0[31];
  if (v4 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v0[38];
  }
  if (v4 >> 60 == 15) {
    unint64_t v8 = 0xC000000000000000;
  }
  else {
    unint64_t v8 = v0[39];
  }
  type metadata accessor for DigitalPresentmentResponse();
  id v9 = [v3 responseData];
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = dispatch thunk of DigitalPresentmentResponse.__allocating_init(encryptedData:)();
  swift_bridgeObjectRelease();
  sub_10000C5F4(v7, v8);
  sub_10000C5F4(v6, v5);
  swift_bridgeObjectRelease();
  sub_10000C5F4(v6, v5);
  sub_10000C5E0(v13, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(v10);
}

uint64_t sub_100568310()
{
  uint64_t v2 = v0[38];
  unint64_t v1 = v0[39];
  uint64_t v3 = v0[33];
  unint64_t v4 = v0[34];
  uint64_t v6 = v0[31];
  unint64_t v5 = v0[32];
  swift_bridgeObjectRelease();
  if (v1 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v2;
  }
  if (v1 >> 60 == 15) {
    unint64_t v8 = 0xC000000000000000;
  }
  else {
    unint64_t v8 = v1;
  }
  sub_10000C5F4(v7, v8);
  sub_10000C5F4(v3, v4);
  swift_bridgeObjectRelease();
  sub_10000C5F4(v3, v4);
  sub_10000C5E0(v6, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1005683F4()
{
  sub_1000664E0(v0 + OBJC_IVAR____TtC8coreidvd33DigitalPresentmentResponseBuilder_context);

  return swift_deallocClassInstance();
}

uint64_t sub_100568458()
{
  return type metadata accessor for DigitalPresentmentResponseBuilder();
}

uint64_t type metadata accessor for DigitalPresentmentResponseBuilder()
{
  uint64_t result = qword_100732EA8;
  if (!qword_100732EA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1005684AC()
{
  uint64_t result = type metadata accessor for DigitalPresentmentFlow.Context(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10056853C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100729070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005685A4(uint64_t a1)
{
  uint64_t v2 = sub_100007764(&qword_100729070);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100568604(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10056864C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10056868C()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004440C(v0, qword_100732F50);
  uint64_t v7 = sub_1000443D4(v0, (uint64_t)qword_100732F50);
  type metadata accessor for AsyncCoreDataStore();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v9 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v10 = String._bridgeToObjectiveC()();
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v9 URLForResource:v10 withExtension:v11];

  if (v12)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v13(v6, v3, v0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v6, 0, 1, v0);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0);
    if (result != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v13)(v7, v6, v0);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1, 1, v0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100568900(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  __chkstk_darwin(v1);
  uint64_t v30 = type metadata accessor for AsyncCoreDataStore.StoreType();
  uint64_t v28 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v29 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  NSString v10 = (char *)&v26 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v26 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  sub_100568D54((uint64_t)&v26 - v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
  static URL.libraryDirectory.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, v3);
  URL.appendingPathComponent(_:)();
  uint64_t v27 = v16;
  v16(v10, v3);
  if (qword_10071F5C0 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_1000443D4(v3, (uint64_t)qword_100732F50);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v18(v10, v17, v3);
  v18(v7, (uint64_t)v13, v3);
  uint64_t v19 = v28;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v26 = v13;
  uint64_t v21 = v30;
  uint64_t v22 = v31;
  v20(v29, v31, v30);
  type metadata accessor for AsyncCoreDataStore();
  swift_allocObject();
  uint64_t v23 = NSURLFileProtectionCompleteUntilFirstUserAuthentication;
  uint64_t v24 = AsyncCoreDataStore.init(persistentStoreName:modelURL:databaseURL:storeType:urlFileProtection:)();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v21);
  v27(v26, v3);
  uint64_t result = v32;
  *(void *)(v32 + 16) = v24;
  return result;
}

uint64_t type metadata accessor for DaemonCoreDataStore()
{
  return self;
}

uint64_t sub_100568D54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v67 = *(void *)(v2 - 8);
  uint64_t v68 = v2;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  long long v72 = *(void **)(v5 - 8);
  uint64_t v73 = v5;
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v66 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v59 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v59 - v15;
  id v17 = [self defaultManager];
  static URL.libraryDirectory.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v19 = v11 + 8;
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  uint64_t v74 = v10;
  int64_t v71 = v18;
  v18(v14, v10);
  unsigned __int8 v76 = 0;
  URL.path.getter();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(v10) = [v17 fileExistsAtPath:v20 isDirectory:&v76];

  if (v10)
  {
    if (v76 == 1)
    {

      uint64_t v21 = v74;
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v16, v21);
    }
    URL._bridgeToObjectiveC()((NSURL *)v76);
    uint64_t v23 = v22;
    id v77 = 0;
    unsigned int v24 = [v17 removeItemAtURL:v22 error:&v77];

    if (!v24)
    {
      id v58 = v77;
      _convertNSErrorToError(_:)();

      uint64_t v56 = v74;
      goto LABEL_16;
    }
    id v25 = v77;
  }
  uint64_t v62 = v11;
  unint64_t v69 = v4;
  uint64_t v64 = v16;
  uint64_t v26 = URL.path.getter();
  uint64_t v28 = v27;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  id v65 = v17;
  uint64_t v63 = v19;
  if (v31)
  {
    uint64_t v59 = a1;
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    id v77 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v75 = sub_100110D58(v26, (unint64_t)v28, (uint64_t *)&v77);
    a1 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Creating directory %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v17 = v65;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v33 = (void (*)(char *, uint64_t))v72[1];
  uint64_t v34 = v9;
  uint64_t v35 = v73;
  v33(v34, v73);
  S_IRUSR.getter();
  S_IWUSR.getter();
  S_IXUSR.getter();
  String.utf8CString.getter();
  int v36 = rootless_mkdir_datavault();
  swift_release();
  if (!v36)
  {

    swift_bridgeObjectRelease();
    uint64_t v16 = v64;
    uint64_t v21 = v74;
    uint64_t v11 = v62;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v16, v21);
  }
  LODWORD(v73) = errno.getter();
  uint64_t v37 = v66;
  defaultLogger()();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = v28;
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 67109120;
    LODWORD(v77) = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "error creating directory : %d", v41, 8u);
    uint64_t v28 = v40;
    swift_slowDealloc();
  }
  uint64_t v60 = (uint64_t)v28;
  uint64_t v61 = v26;

  v33(v37, v35);
  id v77 = 0;
  unint64_t v78 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  id v77 = (id)0xD000000000000019;
  unint64_t v78 = 0x8000000100656100;
  v42._uint64_t countAndFlagsBits = v26;
  v42._object = v28;
  String.append(_:)(v42);
  v43._uint64_t countAndFlagsBits = 0x206F742065756420;
  v43._object = (void *)0xEE00206F6E727265;
  String.append(_:)(v43);
  LODWORD(v75) = v73;
  v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  long long v72 = v77;
  unint64_t v70 = v78;
  (*(void (**)(char *, void, uint64_t))(v67 + 104))(v69, enum case for DIPError.Code.filesystemError(_:), v68);
  sub_100007764((uint64_t *)&unk_1007225C0);
  uint64_t v45 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
  uint64_t v46 = *(void *)(*(void *)v45 + 72);
  unint64_t v47 = (*(unsigned __int8 *)(*(void *)v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v45 + 80);
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_100611020;
  unint64_t v49 = v48 + v47;
  unint64_t v50 = v48 + v47 + v45[14];
  uint64_t v51 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  uint64_t v52 = type metadata accessor for DIPError.PropertyKey();
  uint64_t v53 = *(void (**)(void))(*(void *)(v52 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v53)(v49, v51, v52);
  *(void *)(v50 + 24) = &type metadata for Int32;
  *(_DWORD *)unint64_t v50 = v73;
  uint64_t v54 = (uint64_t *)(v49 + v46 + v45[14]);
  v53();
  uint64_t v54[3] = (uint64_t)&type metadata for String;
  uint64_t v55 = v60;
  *uint64_t v54 = v61;
  v54[1] = v55;
  sub_10015C504(v48);
  type metadata accessor for DIPError();
  sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  uint64_t v56 = v74;
  uint64_t v16 = v64;
  id v17 = v65;
LABEL_16:
  swift_willThrow();

  return v71(v16, v56);
}

void sub_100569670()
{
  qword_100760860 = -1;
}

void *sub_100569680()
{
  type metadata accessor for DIPSqliteLocalStore();
  swift_allocObject();
  uint64_t result = sub_1005696BC();
  qword_100760868 = (uint64_t)result;
  return result;
}

void *sub_1005696BC()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  v9[0] = sub_1000309D0();
  static DispatchQoS.unspecified.getter();
  v9[1] = _swiftEmptyArrayStorage;
  sub_10058EE04((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007764((uint64_t *)&unk_100726420);
  sub_1000B6120((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  v0[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v0[3] = 0xD000000000000011;
  v0[4] = 0x80000001006560E0;
  v0[5] = 0;
  id v7 = [self defaultManager];
  v0[7] = 0;
  v0[8] = 0;
  v0[6] = v7;
  sub_100569B60();
  return v0;
}

uint64_t sub_10056995C()
{
  uint64_t v1 = *(NSObject **)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_10058EB6C;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_10020AE08;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100032314;
  v5[3] = &unk_100708F90;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v0;
  }
  return result;
}

sqlite3 *sub_100569AB8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 40);
  swift_beginAccess();
  uint64_t result = *(sqlite3 **)(a1 + 40);
  if (result)
  {
    uint64_t result = (sqlite3 *)sqlite3_close_v2(result);
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t sub_100569B08()
{
  sub_10056995C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DIPSqliteLocalStore()
{
  return self;
}

uint64_t sub_100569B60()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v45 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  Swift::String v43 = (char *)v32 - v5;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v38 = v6;
  __chkstk_darwin(v6);
  os_log_type_t v39 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError();
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  __chkstk_darwin(v8);
  uint64_t v40 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v44 - 8);
  uint64_t v11 = __chkstk_darwin(v44);
  uint64_t v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v32 - v14;
  sub_100568D54((uint64_t)v32 - v14);
  URL.appendingPathComponent(_:)();
  *(void *)(v0 + 56) = URL.path.getter();
  *(void *)(v0 + 64) = v16;
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v17);
  uint64_t v19 = v18;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v47 = 0;
  unsigned int v21 = [v19 setResourceValue:v20 forKey:NSURLFileProtectionKey error:&v47];

  if (v21)
  {
    id v22 = v47;
  }
  else
  {
    uint64_t v36 = v2;
    id v23 = v47;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    defaultLogger()();
    swift_errorRetain();
    swift_errorRetain();
    unsigned int v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      id v47 = v34;
      uint64_t v35 = v1;
      uint64_t v33 = v26;
      *(_DWORD *)uint64_t v26 = 136315138;
      v32[1] = v26 + 4;
      swift_getErrorValue();
      uint64_t v27 = Error.localizedDescription.getter();
      uint64_t v46 = sub_100110D58(v27, v28, (uint64_t *)&v47);
      uint64_t v1 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Ignoring error when changing file protection: %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v45, v1);
  }
  sub_10056A248((uint64_t)v13);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v30 = v44;
  v29(v13, v44);
  return ((uint64_t (*)(char *, uint64_t))v29)(v15, v30);
}

const char *sub_10056A248(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v75 = *(void *)(v2 - 8);
  uint64_t v76 = v2;
  __chkstk_darwin(v2);
  id v77 = (char *)v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  int64_t v71 = (char *)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v78 = (char *)v67 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  long long v72 = (char *)v67 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v70 = (char *)v67 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v73 = (char *)v67 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v74 = (char *)v67 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v81 = (char *)v67 - v23;
  __chkstk_darwin(v22);
  os_log_type_t v25 = (char *)v67 - v24;
  defaultLogger()();
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v83 = a1;
  uint64_t v80 = v4;
  v26(v7, a1, v4);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v69 = v8;
    uint64_t v30 = (uint8_t *)v29;
    v84[0] = swift_slowAlloc();
    uint64_t v68 = v9;
    *(_DWORD *)uint64_t v30 = 136315138;
    v67[1] = v30 + 4;
    uint64_t v31 = URL.path.getter();
    v84[5] = sub_100110D58(v31, v32, v84);
    uint64_t v9 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v80);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "coreidvd: database at %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v69;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v80);
  }

  uint64_t v33 = *(void (**)(char *, uint64_t))(v9 + 8);
  v33(v25, v8);
  URL.path.getter();
  uint64_t v34 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v35 = v82;
  swift_beginAccess();
  int v36 = sqlite3_open_v2((const char *)(v34 + 32), (sqlite3 **)(v35 + 40), 3145730, 0);
  swift_endAccess();
  swift_release();
  uint64_t v37 = v81;
  if (v36)
  {
    if (v36 == 23)
    {
      (*(void (**)(char *, void, uint64_t))(v75 + 104))(v77, enum case for DIPError.Code.deviceLocked(_:), v76);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
    else
    {
      defaultLogger()();
      Swift::String v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 67109120;
        LODWORD(v84[0]) = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "coreidvd: error opening file, removing and recreating database: sqlite error code %d", v45, 8u);
        swift_slowDealloc();
      }

      v33(v37, v8);
      uint64_t v46 = v79;
      uint64_t result = sub_10056B0D4(v83);
      if (!v46)
      {
        id v47 = v74;
        defaultLogger()();
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v48, v49))
        {
          unint64_t v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v50 = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "coreidvd: finished creating tables", v50, 2u);
          swift_slowDealloc();
        }

        return (const char *)((uint64_t (*)(char *, uint64_t))v33)(v47, v8);
      }
    }
  }
  else
  {
    uint64_t v39 = v79;
    sub_10056CD84();
    if (v39)
    {
      defaultLogger()();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "coreidvd: error during schema migration, re-creating database", v42, 2u);
        swift_slowDealloc();
      }

      v33(v78, v8);
      sub_10056B0D4(v83);
      uint64_t v62 = v71;
      defaultLogger()();
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v63, v64))
      {
        unint64_t v66 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v66 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "coreidvd: finished reloading tables", v66, 2u);
        swift_slowDealloc();
      }
      swift_errorRelease();

      return (const char *)((uint64_t (*)(char *, uint64_t))v33)(v62, v8);
    }
    else
    {
      if ((sub_10056E834() & 1) == 0)
      {
        defaultLogger()();
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "coreidvd: invalid tables, re-creating", v53, 2u);
          swift_slowDealloc();
        }

        v33(v73, v8);
        sub_10056B0D4(v83);
        uint64_t v54 = v70;
        defaultLogger()();
        uint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v55, v56))
        {
          id v57 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v57 = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "coreidvd: finished reloading tables", v57, 2u);
          swift_slowDealloc();
        }

        v33(v54, v8);
      }
      id v58 = v72;
      defaultLogger()();
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "coreidvd: successfully retrieved database", v61, 2u);
        swift_slowDealloc();
      }

      return (const char *)((uint64_t (*)(char *, uint64_t))v33)(v58, v8);
    }
  }
  return result;
}

id sub_10056ACB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v6);
  if (*(void *)(a1 + 64))
  {
    uint64_t v9 = *(void *)(a1 + 56);
    swift_beginAccess();
    uint64_t v10 = *(sqlite3 **)(a1 + 40);
    swift_bridgeObjectRetain();
    if (v10)
    {
      sqlite3_close_v2(v10);
      *(void *)(a1 + 40) = 0;
    }
    defaultLogger()();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = v9;
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "coreidvd: deleting database", v13, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    id v14 = *(id *)(a1 + 48);
    NSString v15 = String._bridgeToObjectiveC()();
    unsigned int v16 = [v14 fileExistsAtPath:v15];

    if (!v16) {
      return (id)swift_bridgeObjectRelease();
    }
    id v17 = *(id *)(a1 + 48);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = 0;
    unsigned int v19 = [v17 removeItemAtPath:v18 error:&v23];

    if (v19) {
      return v23;
    }
    id v21 = v23;
    _convertNSErrorToError(_:)();
  }
  else
  {
    (*(void (**)(char *, void))(v8 + 104))((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for DIPError.Code.unexpectedDaemonState(_:));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  }
  return (id)swift_willThrow();
}

const char *sub_10056B0D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v99 = type metadata accessor for URLResourceValues();
  uint64_t v4 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v107 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for DIPError.Code();
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  unint64_t v108 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for Logger();
  uint64_t v101 = *(void *)(v102 - 8);
  uint64_t v7 = __chkstk_darwin(v102);
  uint64_t v95 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v96 = (char *)&v95 - v10;
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)&v95 - v11;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unsigned int v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = *(void (**)(uint64_t *, char *, uint64_t))(v14 + 16);
  uint64_t v111 = v18;
  uint64_t v106 = v14 + 16;
  uint64_t v105 = v17;
  ((void (*)(char *, uint64_t))v17)(v16, a1);
  swift_beginAccess();
  unsigned int v19 = *(sqlite3 **)(v2 + 40);
  if (v19)
  {
    sqlite3_close_v2(v19);
    *(void *)(v2 + 40) = 0;
  }
  uint64_t v98 = (sqlite3 **)(v2 + 40);
  id v20 = *(id *)(v2 + 48);
  URL.path.getter();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v112 = 0;
  unsigned int v22 = [v20 removeItemAtPath:v21 error:&v112];

  uint64_t v109 = v14;
  uint64_t v100 = v4;
  if (v22)
  {
    id v23 = v112;
  }
  else
  {
    id v24 = v112;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    id v110 = 0;
  }
  id v25 = *(id *)(v2 + 48);
  URL.path.getter();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100007764(&qword_1007331F8);
  uint64_t inited = swift_initStackObject();
  long long v97 = xmmword_100611020;
  *(_OWORD *)(inited + 16) = xmmword_100611020;
  *(void *)(inited + 32) = NSFileProtectionKey;
  type metadata accessor for FileProtectionType(0);
  *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  *(void *)(inited + 64) = v28;
  *(void *)(inited + 72) = NSFilePosixPermissions;
  uint64_t v29 = NSFileProtectionKey;
  uint64_t v30 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  uint64_t v31 = NSFilePosixPermissions;
  __int16 v32 = S_IRUSR.getter();
  __int16 v33 = S_IWUSR.getter();
  *(void *)(inited + 104) = &type metadata for UInt16;
  *(_WORD *)(inited + 80) = v33 | v32;
  sub_10015D3B0(inited);
  type metadata accessor for FileAttributeKey(0);
  sub_10058EE04(&qword_10071FA00, type metadata accessor for FileAttributeKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(inited) = [v25 createFileAtPath:v26 contents:0 attributes:isa];

  if ((inited & 1) == 0)
  {
    defaultLogger()();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "coreidvd: error creating new database", v40, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v101 + 8))(v12, v102);
    (*(void (**)(char *, void, uint64_t))(v103 + 104))(v108, enum case for DIPError.Code.sqliteError(_:), v104);
    sub_100007764((uint64_t *)&unk_1007225C0);
    os_log_type_t v41 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v42 = (*(unsigned __int8 *)(*(void *)v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v41 + 80);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_100610730;
    unint64_t v44 = v43 + v42;
    uint64_t v45 = (uint64_t *)(v44 + v41[14]);
    uint64_t v46 = enum case for DIPError.PropertyKey.filesystemPath(_:);
    uint64_t v47 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104))(v44, v46, v47);
    uint64_t v37 = v111;
    v45[3] = v111;
    uint64_t v48 = sub_10002C2D8(v45);
    v105(v48, v16, v37);
    sub_10015C504(v43);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (const char *)(*(uint64_t (**)(char *, uint64_t))(v109 + 8))(v16, v37);
  }
  uint64_t v35 = v107;
  URLResourceValues.init()();
  URLResourceValues.isExcludedFromBackup.setter();
  id v36 = v110;
  URL.setResourceValues(_:)();
  if (!v36)
  {
    URL.path.getter();
    uint64_t v49 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    unint64_t v50 = v98;
    swift_beginAccess();
    int v51 = sqlite3_open_v2((const char *)(v49 + 32), v50, 3145730, 0);
    swift_endAccess();
    swift_release();
    if (v51)
    {
      uint64_t result = sqlite3_errmsg(*v50);
      if (result)
      {
        uint64_t v53 = String.init(cString:)();
        uint64_t v55 = v54;
        os_log_type_t v56 = v96;
        defaultLogger()();
        id v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v59 = 0;
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "coreidvd: error creating database", v59, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v101 + 8))(v56, v102);
        id v112 = 0;
        unint64_t v113 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease();
        id v112 = (id)0xD00000000000001CLL;
        unint64_t v113 = 0x8000000100656FC0;
        v60._uint64_t countAndFlagsBits = v53;
        v60._object = v55;
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
        id v110 = v112;
        uint64_t v102 = v113;
        (*(void (**)(char *, void, uint64_t))(v103 + 104))(v108, enum case for DIPError.Code.sqliteError(_:), v104);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v61 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        uint64_t v62 = *(void *)v61;
        uint64_t v104 = *(void *)(*(void *)v61 + 72);
        unint64_t v63 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
        uint64_t v64 = swift_allocObject();
        *(_OWORD *)(v64 + 16) = v97;
        unint64_t v65 = v64 + v63;
        unint64_t v66 = v65 + v61[14];
        uint64_t v67 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v68 = type metadata accessor for DIPError.PropertyKey();
        uint64_t v69 = *(void (**)(void))(*(void *)(v68 - 8) + 104);
        ((void (*)(unint64_t, uint64_t, uint64_t))v69)(v65, v67, v68);
        int v70 = sqlite3_errcode(*v98);
        *(void *)(v66 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v66 = v70;
        int64_t v71 = (uint64_t *)(v65 + v104 + v61[14]);
        v69();
        uint64_t v37 = v111;
        v71[3] = v111;
        long long v72 = sub_10002C2D8(v71);
        v105(v72, v16, v37);
        sub_10015C504(v64);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
LABEL_17:
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v100 + 8))(v107, v99);
        return (const char *)(*(uint64_t (**)(char *, uint64_t))(v109 + 8))(v16, v37);
      }
      __break(1u);
    }
    else
    {
      sub_10056CD84();
      int v73 = sqlite3_exec(*v50, "PRAGMA cache_size=512;", 0, 0, 0);
      uint64_t v74 = v111;
      if (!v73)
      {
        (*(void (**)(char *, uint64_t))(v100 + 8))(v35, v99);
        return (const char *)(*(uint64_t (**)(char *, uint64_t))(v109 + 8))(v16, v74);
      }
      uint64_t result = sqlite3_errmsg(*v50);
      if (result)
      {
        uint64_t v75 = String.init(cString:)();
        id v77 = v76;
        unint64_t v78 = v95;
        defaultLogger()();
        uint64_t v79 = Logger.logObject.getter();
        os_log_type_t v80 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v79, v80))
        {
          uint64_t v81 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v81 = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "coreidvd: error setting cache size", v81, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v101 + 8))(v78, v102);
        id v112 = 0;
        unint64_t v113 = 0xE000000000000000;
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        id v112 = (id)0xD00000000000001ALL;
        unint64_t v113 = 0x8000000100657000;
        v82._uint64_t countAndFlagsBits = v75;
        v82._object = v77;
        String.append(_:)(v82);
        swift_bridgeObjectRelease();
        id v110 = v112;
        uint64_t v102 = v113;
        (*(void (**)(char *, void, uint64_t))(v103 + 104))(v108, enum case for DIPError.Code.sqliteError(_:), v104);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v83 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        uint64_t v84 = *(void *)v83;
        uint64_t v104 = *(void *)(*(void *)v83 + 72);
        unint64_t v85 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
        uint64_t v86 = swift_allocObject();
        *(_OWORD *)(v86 + 16) = v97;
        unint64_t v87 = v86 + v85;
        unint64_t v88 = v87 + v83[14];
        uint64_t v89 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v90 = type metadata accessor for DIPError.PropertyKey();
        char v91 = *(void (**)(void))(*(void *)(v90 - 8) + 104);
        ((void (*)(unint64_t, uint64_t, uint64_t))v91)(v87, v89, v90);
        int v92 = sqlite3_errcode(*v98);
        *(void *)(v88 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v88 = v92;
        uint64_t v93 = (uint64_t *)(v87 + v104 + v83[14]);
        v91();
        uint64_t v37 = v111;
        v93[3] = v111;
        unint64_t v94 = sub_10002C2D8(v93);
        v105(v94, v16, v37);
        sub_10015C504(v86);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_17;
      }
    }
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t))(v100 + 8))(v35, v99);
  uint64_t v37 = v111;
  return (const char *)(*(uint64_t (**)(char *, uint64_t))(v109 + 8))(v16, v37);
}

uint64_t sub_10056C160(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v36 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v30 = v7;
  uint64_t v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a1)
  {
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
      uint64_t v10 = (sqlite3 **)(v1 + 40);
      swift_beginAccess();
      uint64_t v11 = *(sqlite3 **)(v1 + 40);
      uint64_t v12 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      LODWORD(v11) = sqlite3_exec(v11, (const char *)(v12 + 32), 0, 0, 0);
      uint64_t result = swift_release();
      if (v11)
      {
        if (!sqlite3_errmsg(*v10))
        {
          __break(1u);
          JUMPOUT(0x10056C7A0);
        }
        uint64_t v14 = String.init(cString:)();
        unsigned int v16 = v15;
        defaultLogger()();
        id v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v18))
        {
          unsigned int v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unsigned int v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "coreidvd: error updating user version", v19, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        unint64_t v32 = 0;
        unint64_t v33 = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        unint64_t v32 = 0xD00000000000001DLL;
        unint64_t v33 = 0x8000000100656F00;
        v20._uint64_t countAndFlagsBits = v14;
        v20._object = v16;
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v36 + 104))(v31, enum case for DIPError.Code.sqliteError(_:), v30);
        sub_100007764((uint64_t *)&unk_1007225C0);
        NSString v21 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v22 = (*(unsigned __int8 *)(*(void *)v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v21 + 80);
        uint64_t v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_100610730;
        unint64_t v24 = v23 + v22;
        unint64_t v25 = v24 + v21[14];
        uint64_t v26 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v27 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v24, v26, v27);
        int v28 = sqlite3_errcode(*v10);
        *(void *)(v25 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v25 = v28;
        sub_10015C504(v23);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_8;
      }
      break;
    default:
      unint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v34 = 0xD00000000000001ALL;
      unint64_t v35 = 0x8000000100656EA0;
      unint64_t v32 = a1;
      v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, void, uint64_t))(v36 + 104))(0x8000000100656F60, enum case for DIPError.Code.badLogic(_:), v7);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_8:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      uint64_t result = swift_willThrow();
      break;
  }
  return result;
}

const char *sub_10056C7B0()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  if (!sqlite3_prepare_v3(*(sqlite3 **)(v0 + 40), "PRAGMA user_version", -1, 0, &ppStmt, 0))
  {
    id v17 = ppStmt;
    if (sqlite3_step(ppStmt) != 100)
    {
      uint64_t v19 = 0;
      goto LABEL_13;
    }
    double v18 = sqlite3_column_double(v17, 0);
    if ((~*(void *)&v18 & 0x7FF0000000000000) != 0)
    {
      if (v18 > -9.22337204e18)
      {
        if (v18 < 9.22337204e18)
        {
          uint64_t v19 = (uint64_t)v18;
LABEL_13:
          sqlite3_finalize(v17);
          return (const char *)v19;
        }
LABEL_17:
        __break(1u);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v33 = v6;
  uint64_t v34 = v5;
  uint64_t result = sqlite3_errmsg(*(sqlite3 **)(v0 + 40));
  if (result)
  {
    uint64_t v31 = v2;
    unint64_t v32 = (sqlite3 **)(v0 + 40);
    uint64_t v10 = String.init(cString:)();
    uint64_t v12 = v11;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v30 = v1;
      unsigned int v16 = (uint8_t *)v15;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v29 = v4;
      *(_DWORD *)unsigned int v16 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v35 = sub_100110D58(v10, (unint64_t)v12, &v36);
      uint64_t v4 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "coreidvd: failed to getting user version select statement: %{public}s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v1 = v30;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v34);
    uint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    uint64_t v36 = 0xD00000000000002ALL;
    unint64_t v37 = 0x8000000100656E50;
    v20._uint64_t countAndFlagsBits = v10;
    v20._object = v12;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v19 = v36;
    (*(void (**)(char *, void, uint64_t))(v31 + 104))(v4, enum case for DIPError.Code.sqliteError(_:), v1);
    sub_100007764((uint64_t *)&unk_1007225C0);
    NSString v21 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v22 = (*(unsigned __int8 *)(*(void *)v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v21 + 80);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_100610730;
    unint64_t v24 = v23 + v22;
    unint64_t v25 = v24 + v21[14];
    uint64_t v26 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v27 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v24, v26, v27);
    int v28 = sqlite3_errcode(*v32);
    *(void *)(v25 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v25 = v28;
    sub_10015C504(v23);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (const char *)v19;
  }
  __break(1u);
  return result;
}

uint64_t sub_10056CD84()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v201 = v1;
  uint64_t v202 = v2;
  __chkstk_darwin(v1);
  v203 = (char *)&v186 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v204 = v4;
  uint64_t v205 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  v195 = (char *)&v186 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  v197 = (char *)&v186 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v199 = (char *)&v186 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v194 = (char *)&v186 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v200 = (char *)&v186 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v198 = (char *)&v186 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v196 = (char *)&v186 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v186 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  unint64_t v25 = (char *)&v186 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  int v28 = (char *)&v186 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v31 = (char *)&v186 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v34 = (char *)&v186 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  unint64_t v37 = (char *)&v186 - v36;
  uint64_t v38 = __chkstk_darwin(v35);
  uint64_t v40 = (char *)&v186 - v39;
  __chkstk_darwin(v38);
  unint64_t v42 = (char *)&v186 - v41;
  uint64_t v43 = v206;
  uint64_t result = (uint64_t)sub_10056C7B0();
  if (!v43)
  {
    uint64_t v189 = v40;
    uint64_t v190 = v37;
    uint64_t v187 = v34;
    uint64_t v186 = v31;
    uint64_t v191 = v28;
    v192 = v25;
    id v188 = v22;
    uint64_t v206 = v0;
    uint64_t v193 = 0;
    uint64_t v45 = v204;
    uint64_t v214 = result;
    defaultLogger()();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 134349056;
      swift_beginAccess();
      uint64_t v213 = v214;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Current schema version is %{public}ld", v48, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v49 = *(void (**)(char *, uint64_t))(v205 + 8);
    uint64_t v50 = v45;
    v49(v42, v45);
    uint64_t result = swift_beginAccess();
    uint64_t v51 = v206;
    switch(v214)
    {
      case 0:
        os_log_type_t v52 = v189;
        defaultLogger()();
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Migrating schema to version 1", v55, 2u);
          swift_slowDealloc();
        }

        v49(v52, v45);
        os_log_type_t v56 = (sqlite3 **)(v51 + 40);
        swift_beginAccess();
        int v57 = sqlite3_exec(*(sqlite3 **)(v51 + 40), "CREATE TABLE IF NOT EXISTS dip_signalmap (\nid INTEGER PRIMARY KEY AUTOINCREMENT,\ndsid TEXT,\nsignal_uuid TEXT,\nassessment_guid TEXT,\nasd_version TEXT,\nlibrary_version TEXT,\nservice_name TEXT,\nwfid TEXT,\ncreation_date INTEGER,\nupdate_date INTEGER,\nstate TEXT,\nsession_uuid TEXT,\nlaunch_tier TEXT,\ntarget_tier TEXT,\notd_request TEXT,\notd_url TEXT)", 0,
                0,
                0);
        os_log_type_t v58 = *(sqlite3 **)(v51 + 40);
        uint64_t v59 = v191;
        Swift::String v60 = v190;
        uint64_t v205 = v51 + 40;
        if (v57)
        {
          if (sqlite3_errmsg(v58))
          {
            uint64_t v61 = String.init(cString:)();
            unint64_t v63 = v62;
            defaultLogger()();
            uint64_t v64 = Logger.logObject.getter();
            os_log_type_t v65 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v64, v65))
            {
              unint64_t v66 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v66 = 0;
              _os_log_impl((void *)&_mh_execute_header, v64, v65, "coreidvd: error creating table signalmap", v66, 2u);
              swift_slowDealloc();
            }

            v49(v60, v50);
            unint64_t v211 = 0;
            unint64_t v212 = 0xE000000000000000;
            _StringGuts.grow(_:)(32);
            swift_bridgeObjectRelease();
            unint64_t v211 = 0xD00000000000001ELL;
            unint64_t v212 = 0x8000000100656B30;
            v67._uint64_t countAndFlagsBits = v61;
            v67._object = v63;
            String.append(_:)(v67);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void, uint64_t))(v202 + 104))(v203, enum case for DIPError.Code.sqliteError(_:), v201);
            sub_100007764((uint64_t *)&unk_1007225C0);
            uint64_t v68 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            unint64_t v69 = (*(unsigned __int8 *)(*(void *)v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v68 + 80);
            uint64_t v70 = swift_allocObject();
            *(_OWORD *)(v70 + 16) = xmmword_100610730;
            unint64_t v71 = v70 + v69;
            unint64_t v72 = v71 + v68[14];
            uint64_t v73 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
            uint64_t v74 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 104))(v71, v73, v74);
            int v75 = sqlite3_errcode(*(sqlite3 **)v205);
            *(void *)(v72 + 24) = &type metadata for Int32;
            *(_DWORD *)unint64_t v72 = v75;
            sub_10015C504(v70);
            type metadata accessor for DIPError();
            sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
LABEL_51:
            DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
            return swift_willThrow();
          }
          goto LABEL_59;
        }
        int v119 = sqlite3_exec(v58, "CREATE TABLE IF NOT EXISTS dip_verifiedclaim (\nid INTEGER PRIMARY KEY AUTOINCREMENT,\nproviderid TEXT,\ntier TEXT,\nworkflowid TEXT,\nclaimid TEXT,\nclaim TEXT,\nclaimdata TEXT,\nunverified_claimdata TEXT,\nencrypted_claimdata TEXT,\nlibrary_version TEXT,\ncreation_date INTEGER,\nupdate_date INTEGER,\ndelete_after INTEGER,\nservice_name TEXT,\nacl TEXT,\nUNIQUE(providerid,tier))", 0,
                 0,
                 0);
        uint64_t v120 = *v56;
        if (v119)
        {
          if (sqlite3_errmsg(v120))
          {
            uint64_t v121 = String.init(cString:)();
            uint64_t v123 = v122;
            uint64_t v124 = v187;
            defaultLogger()();
            uint64_t v125 = Logger.logObject.getter();
            os_log_type_t v126 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v125, v126))
            {
              int64_t v127 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)int64_t v127 = 0;
              _os_log_impl((void *)&_mh_execute_header, v125, v126, "coreidvd: error creating table verifiedclaim", v127, 2u);
              uint64_t v124 = v187;
              swift_slowDealloc();
            }

            v49(v124, v50);
            unint64_t v211 = 0;
            unint64_t v212 = 0xE000000000000000;
            _StringGuts.grow(_:)(38);
            swift_bridgeObjectRelease();
            unint64_t v211 = 0xD000000000000024;
            unint64_t v212 = 0x8000000100656CC0;
            v128._uint64_t countAndFlagsBits = v121;
            v128._object = v123;
            String.append(_:)(v128);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void, uint64_t))(v202 + 104))(v203, enum case for DIPError.Code.sqliteError(_:), v201);
            sub_100007764((uint64_t *)&unk_1007225C0);
            unint64_t v129 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            unint64_t v130 = (*(unsigned __int8 *)(*(void *)v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v129 + 80);
            uint64_t v131 = swift_allocObject();
            *(_OWORD *)(v131 + 16) = xmmword_100610730;
            unint64_t v132 = v131 + v130;
            unint64_t v133 = v132 + v129[14];
            uint64_t v134 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
            uint64_t v135 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 104))(v132, v134, v135);
            int v136 = sqlite3_errcode(*(sqlite3 **)v205);
            *(void *)(v133 + 24) = &type metadata for Int32;
            *(_DWORD *)unint64_t v133 = v136;
            sub_10015C504(v131);
            type metadata accessor for DIPError();
            sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            goto LABEL_51;
          }
          goto LABEL_62;
        }
        if (sqlite3_exec(v120, "CREATE TABLE IF NOT EXISTS dip_trainingsignallabel (\nid INTEGER PRIMARY KEY AUTOINCREMENT,\nrecord_uuid TEXT,\nassessment_guid TEXT,\nlabel_token TEXT,\ncreated_at INTEGER,\nfailed_at INTEGER,\ncompleted_at INTEGER,\nsystem_data BLOB,\nlocal_respond_after INTEGER)", 0, 0, 0))
        {
          if (sqlite3_errmsg(*v56))
          {
            uint64_t v140 = String.init(cString:)();
            char v142 = v141;
            id v143 = v186;
            defaultLogger()();
            Swift::String v144 = Logger.logObject.getter();
            os_log_type_t v145 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v144, v145))
            {
              uint64_t v146 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v146 = 0;
              _os_log_impl((void *)&_mh_execute_header, v144, v145, "coreidvd: error creating table training signal labels", v146, 2u);
              id v143 = v186;
              swift_slowDealloc();
            }

            v49(v143, v50);
            unint64_t v211 = 0;
            unint64_t v212 = 0xE000000000000000;
            _StringGuts.grow(_:)(47);
            swift_bridgeObjectRelease();
            unint64_t v211 = 0xD00000000000002DLL;
            unint64_t v212 = 0x8000000100656E00;
            v147._uint64_t countAndFlagsBits = v140;
            v147._object = v142;
            String.append(_:)(v147);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void, uint64_t))(v202 + 104))(v203, enum case for DIPError.Code.sqliteError(_:), v201);
            sub_100007764((uint64_t *)&unk_1007225C0);
            os_log_type_t v148 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            unint64_t v149 = (*(unsigned __int8 *)(*(void *)v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v148 + 80);
            uint64_t v150 = swift_allocObject();
            *(_OWORD *)(v150 + 16) = xmmword_100610730;
            unint64_t v151 = v150 + v149;
            unint64_t v152 = v151 + v148[14];
            uint64_t v153 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
            uint64_t v154 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v154 - 8) + 104))(v151, v153, v154);
            int v155 = sqlite3_errcode(*(sqlite3 **)v205);
            *(void *)(v152 + 24) = &type metadata for Int32;
            *(_DWORD *)unint64_t v152 = v155;
            sub_10015C504(v150);
            type metadata accessor for DIPError();
            sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            goto LABEL_51;
          }
LABEL_63:
          __break(1u);
          JUMPOUT(0x10056E824);
        }
        uint64_t v156 = v193;
        uint64_t result = sub_10056C160(1uLL);
        if (v156) {
          return result;
        }
        uint64_t v193 = 0;
        defaultLogger()();
        unint64_t v157 = Logger.logObject.getter();
        os_log_type_t v158 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v157, v158))
        {
          uint64_t v159 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v159 = 0;
          _os_log_impl((void *)&_mh_execute_header, v157, v158, "Done migrating schema to version 1", v159, 2u);
          swift_slowDealloc();
        }

        v49(v59, v50);
        uint64_t v214 = 1;
LABEL_44:
        uint64_t v160 = v192;
        defaultLogger()();
        unint64_t v161 = Logger.logObject.getter();
        os_log_type_t v162 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v161, v162))
        {
          uint64_t v163 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v163 = 0;
          _os_log_impl((void *)&_mh_execute_header, v161, v162, "Migrating schema to version 4", v163, 2u);
          swift_slowDealloc();
        }

        v49(v160, v50);
        uint64_t v164 = (sqlite3 **)(v51 + 40);
        swift_beginAccess();
        if (sqlite3_exec(*(sqlite3 **)(v51 + 40), "CREATE TABLE IF NOT EXISTS dip_pregeneratedassessments (\nid INTEGER PRIMARY KEY AUTOINCREMENT,\nworkflow_id TEXT,\ncreated_at DOUBLE,\nassessment TEXT,\ntraining_data TEXT,\nassessment_guid TEXT,\nassessment_guid_seeds TEXT,\ntraining_guid TEXT,\ntraining_guid_seeds TEXT,\ntraining_signal_id TEXT,\ndigest_index INTEGER,\nbindings TEXT,\nencrypted_tsid TEXT,\nencrypted_aguid TEXT\n)", 0, 0,
               0))
        {
          if (sqlite3_errmsg(*v164))
          {
            uint64_t v165 = String.init(cString:)();
            uint64_t v167 = v166;
            uint64_t v168 = v188;
            defaultLogger()();
            v169 = Logger.logObject.getter();
            os_log_type_t v170 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v169, v170))
            {
              uint64_t v171 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v171 = 0;
              _os_log_impl((void *)&_mh_execute_header, v169, v170, "coreidvd: error creating table pregenerated assessments", v171, 2u);
              uint64_t v168 = v188;
              swift_slowDealloc();
            }

            v49(v168, v50);
            unint64_t v209 = 0;
            unint64_t v210 = 0xE000000000000000;
            _StringGuts.grow(_:)(48);
            swift_bridgeObjectRelease();
            unint64_t v209 = 0xD00000000000002ELL;
            unint64_t v210 = 0x80000001006569A0;
            v172._uint64_t countAndFlagsBits = v165;
            v172._object = v167;
            String.append(_:)(v172);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void, uint64_t))(v202 + 104))(v203, enum case for DIPError.Code.sqliteError(_:), v201);
            sub_100007764((uint64_t *)&unk_1007225C0);
            unint64_t v173 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            unint64_t v174 = (*(unsigned __int8 *)(*(void *)v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v173 + 80);
            uint64_t v175 = swift_allocObject();
            *(_OWORD *)(v175 + 16) = xmmword_100610730;
            unint64_t v176 = v175 + v174;
            unint64_t v177 = v176 + v173[14];
            uint64_t v178 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
            uint64_t v179 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v179 - 8) + 104))(v176, v178, v179);
            int v180 = sqlite3_errcode(*v164);
            *(void *)(v177 + 24) = &type metadata for Int32;
            *(_DWORD *)unint64_t v177 = v180;
            sub_10015C504(v175);
            type metadata accessor for DIPError();
            sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            goto LABEL_51;
          }
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        uint64_t v181 = v193;
        uint64_t result = sub_10056C160(4uLL);
        if (!v181)
        {
          uint64_t v138 = &v217;
LABEL_55:
          uint64_t v182 = *(v138 - 32);
          defaultLogger()();
          os_log_type_t v183 = Logger.logObject.getter();
          os_log_type_t v184 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v183, v184))
          {
            uint64_t v185 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v185 = 0;
            _os_log_impl((void *)&_mh_execute_header, v183, v184, "Done migrating schema to version 4", v185, 2u);
            swift_slowDealloc();
          }

          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v49)(v182, v50);
        }
        break;
      case 1:
        goto LABEL_44;
      case 2:
        uint64_t v76 = v198;
        defaultLogger()();
        id v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v79 = 0;
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "Migrating schema to version 4", v79, 2u);
          swift_slowDealloc();
        }

        v49(v76, v45);
        os_log_type_t v80 = (sqlite3 **)(v51 + 40);
        swift_beginAccess();
        int v81 = sqlite3_exec(*(sqlite3 **)(v51 + 40), "BEGIN TRANSACTION;\n"
                "ALTER TABLE dip_pregeneratedassessments ADD COLUMN bindings TEXT;\n"
                "ALTER TABLE dip_pregeneratedassessments ADD COLUMN encrypted_tsid TEXT;\n"
                "ALTER TABLE dip_pregeneratedassessments ADD COLUMN encrypted_aguid TEXT;\n"
                "END TRANSACTION;",
                0,
                0,
                0);
        Swift::String v82 = v200;
        if (v81)
        {
          if (sqlite3_errmsg(*v80))
          {
            uint64_t v83 = String.init(cString:)();
            unint64_t v85 = v84;
            defaultLogger()();
            uint64_t v86 = Logger.logObject.getter();
            os_log_type_t v87 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v86, v87))
            {
              unint64_t v88 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v88 = 0;
              _os_log_impl((void *)&_mh_execute_header, v86, v87, "coreidvd: error altering table pregenerated assessments", v88, 2u);
              Swift::String v82 = v200;
              swift_slowDealloc();
            }

            v49(v82, v50);
            unint64_t v207 = 0;
            unint64_t v208 = 0xE000000000000000;
            _StringGuts.grow(_:)(49);
            swift_bridgeObjectRelease();
            unint64_t v207 = 0xD00000000000002FLL;
            unint64_t v208 = 0x80000001006566D0;
            v89._uint64_t countAndFlagsBits = v83;
            v89._object = v85;
            String.append(_:)(v89);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void, uint64_t))(v202 + 104))(v203, enum case for DIPError.Code.sqliteError(_:), v201);
            sub_100007764((uint64_t *)&unk_1007225C0);
            uint64_t v90 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            unint64_t v91 = (*(unsigned __int8 *)(*(void *)v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v90 + 80);
            uint64_t v92 = swift_allocObject();
            *(_OWORD *)(v92 + 16) = xmmword_100610730;
            unint64_t v93 = v92 + v91;
            unint64_t v94 = v93 + v90[14];
            uint64_t v95 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
            uint64_t v96 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 104))(v93, v95, v96);
            int v97 = sqlite3_errcode(*v80);
            *(void *)(v94 + 24) = &type metadata for Int32;
            *(_DWORD *)unint64_t v94 = v97;
            sub_10015C504(v92);
            type metadata accessor for DIPError();
            sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            goto LABEL_51;
          }
          goto LABEL_60;
        }
        uint64_t v137 = v193;
        uint64_t result = sub_10056C160(4uLL);
        if (v137) {
          return result;
        }
        uint64_t v138 = &v215;
        goto LABEL_55;
      case 3:
        uint64_t v98 = v199;
        defaultLogger()();
        uint64_t v99 = Logger.logObject.getter();
        os_log_type_t v100 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v99, v100))
        {
          uint64_t v101 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v101 = 0;
          _os_log_impl((void *)&_mh_execute_header, v99, v100, "Migrating schema to version 4", v101, 2u);
          swift_slowDealloc();
        }

        v49(v98, v45);
        uint64_t v102 = (sqlite3 **)(v51 + 40);
        swift_beginAccess();
        if (sqlite3_exec(*(sqlite3 **)(v51 + 40), "BEGIN TRANSACTION;\n"
               "ALTER TABLE dip_pregeneratedassessments ADD COLUMN encrypted_tsid TEXT;\n"
               "ALTER TABLE dip_pregeneratedassessments ADD COLUMN encrypted_aguid TEXT;\n"
               "END TRANSACTION;",
               0,
               0,
               0))
        {
          if (sqlite3_errmsg(*v102))
          {
            uint64_t v103 = String.init(cString:)();
            uint64_t v105 = v104;
            uint64_t v106 = v197;
            defaultLogger()();
            uint64_t v107 = Logger.logObject.getter();
            os_log_type_t v108 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v107, v108))
            {
              uint64_t v109 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v109 = 0;
              _os_log_impl((void *)&_mh_execute_header, v107, v108, "coreidvd: error altering table pregenerated assessments", v109, 2u);
              uint64_t v106 = v197;
              swift_slowDealloc();
            }

            v49(v106, v45);
            unint64_t v207 = 0;
            unint64_t v208 = 0xE000000000000000;
            _StringGuts.grow(_:)(49);
            swift_bridgeObjectRelease();
            unint64_t v207 = 0xD00000000000002FLL;
            unint64_t v208 = 0x80000001006566D0;
            v110._uint64_t countAndFlagsBits = v103;
            v110._object = v105;
            String.append(_:)(v110);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void, uint64_t))(v202 + 104))(v203, enum case for DIPError.Code.sqliteError(_:), v201);
            sub_100007764((uint64_t *)&unk_1007225C0);
            uint64_t v111 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            unint64_t v112 = (*(unsigned __int8 *)(*(void *)v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v111 + 80);
            uint64_t v113 = swift_allocObject();
            *(_OWORD *)(v113 + 16) = xmmword_100610730;
            unint64_t v114 = v113 + v112;
            unint64_t v115 = v114 + v111[14];
            uint64_t v116 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
            uint64_t v117 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 104))(v114, v116, v117);
            int v118 = sqlite3_errcode(*v102);
            *(void *)(v115 + 24) = &type metadata for Int32;
            *(_DWORD *)unint64_t v115 = v118;
            sub_10015C504(v113);
            type metadata accessor for DIPError();
            sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            goto LABEL_51;
          }
          goto LABEL_61;
        }
        uint64_t v139 = v193;
        uint64_t result = sub_10056C160(4uLL);
        if (v139) {
          return result;
        }
        uint64_t v138 = &v216;
        goto LABEL_55;
      default:
        return result;
    }
  }
  return result;
}

const char *sub_10056E834()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v48 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v48 - v12;
  uint64_t v14 = (sqlite3 **)(v0 + 40);
  swift_beginAccess();
  int v15 = sqlite3_exec(*(sqlite3 **)(v0 + 40), "SELECT id, dsid, signal_uuid, assessment_guid, asd_version, library_version, service_name, wfid, creation_date, update_date, state, session_uuid, launch_tier, target_tier, otd_request, otd_url FROM dip_signalmap", 0, 0, 0);
  uint64_t v16 = *(sqlite3 **)(v0 + 40);
  if (!v15)
  {
    int v24 = sqlite3_exec(v16, "SELECT id, providerid, tier, workflowid, claimid, claim, claimdata, unverified_claimdata, encrypted_claimdata, library_version, creation_date, update_date, delete_after, service_name, acl FROM dip_verifiedclaim", 0, 0, 0);
    unint64_t v25 = *v14;
    if (v24)
    {
      uint64_t result = sqlite3_errmsg(v25);
      if (!result)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      uint64_t v26 = String.init(cString:)();
      unint64_t v28 = v27;
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        uint64_t v48 = v1;
        *(_DWORD *)uint64_t v31 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v49 = sub_100110D58(v26, v28, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "coreidvd: invalid table verifiedclaim: %{public}s", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v48);
        return 0;
      }

      swift_bridgeObjectRelease_n();
      uint64_t v32 = *(void (**)(char *, uint64_t))(v2 + 8);
      uint64_t v33 = v11;
    }
    else
    {
      int v34 = sqlite3_exec(v25, "SELECT record_uuid, assessment_guid, label_token, created_at, completed_at, failed_at, system_data, local_respond_after FROM dip_trainingsignallabel", 0, 0, 0);
      uint64_t v35 = *v14;
      if (v34)
      {
        uint64_t result = sqlite3_errmsg(v35);
        if (!result)
        {
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }
        uint64_t v36 = String.init(cString:)();
        unint64_t v38 = v37;
        defaultLogger()();
        swift_bridgeObjectRetain();
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          uint64_t v50 = swift_slowAlloc();
          uint64_t v48 = v1;
          *(_DWORD *)uint64_t v41 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v49 = sub_100110D58(v36, v38, &v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "coreidvd: invalid table trainingsignallabels: %{public}s", v41, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v48);
          return 0;
        }

        swift_bridgeObjectRelease_n();
        uint64_t v32 = *(void (**)(char *, uint64_t))(v2 + 8);
        uint64_t v33 = v8;
      }
      else
      {
        if (!sqlite3_exec(v35, "SELECT workflow_id, created_at, assessment, training_data, assessment_guid, assessment_guid_seeds, training_guid, training_guid_seeds, training_signal_id, digest_index, bindings, encrypted_tsid, encrypted_aguid FROM dip_pregeneratedassessments", 0, 0, 0))return (const char *)1; {
        uint64_t result = sqlite3_errmsg(*v14);
        }
        if (!result) {
          goto LABEL_28;
        }
        uint64_t v42 = String.init(cString:)();
        unint64_t v44 = v43;
        defaultLogger()();
        swift_bridgeObjectRetain();
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v45, v46))
        {
          os_log_type_t v47 = (uint8_t *)swift_slowAlloc();
          uint64_t v50 = swift_slowAlloc();
          uint64_t v48 = v1;
          *(_DWORD *)os_log_type_t v47 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v49 = sub_100110D58(v42, v44, &v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "coreidvd: invalid table pregeneratedassessments: %{public}s", v47, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v48);
          return 0;
        }

        swift_bridgeObjectRelease_n();
        uint64_t v32 = *(void (**)(char *, uint64_t))(v2 + 8);
        uint64_t v33 = v5;
      }
    }
LABEL_22:
    v32(v33, v1);
    return 0;
  }
  uint64_t result = sqlite3_errmsg(v16);
  if (!result)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v18 = String.init(cString:)();
  unint64_t v20 = v19;
  defaultLogger()();
  swift_bridgeObjectRetain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v21, v22))
  {

    swift_bridgeObjectRelease_n();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v33 = v13;
    goto LABEL_22;
  }
  uint64_t v23 = (uint8_t *)swift_slowAlloc();
  uint64_t v50 = swift_slowAlloc();
  uint64_t v48 = v1;
  *(_DWORD *)uint64_t v23 = 136446210;
  swift_bridgeObjectRetain();
  uint64_t v49 = sub_100110D58(v18, v20, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v21, v22, "coreidvd: invalid table signalmap: %{public}s", v23, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v2 + 8))(v13, v48);
  return 0;
}

uint64_t sub_10056EF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[11] = 0;
  v7[0] = _swiftEmptyArrayStorage;
  v7[5] = a1;
  _OWORD v7[6] = a2;
  v7[7] = a3;
  v7[8] = a4;
  v7[9] = v7;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v5 = v7[0];
  if (v4) {
    swift_bridgeObjectRelease();
  }
  return v5;
}

void *sub_10056F034(uint64_t a1, sqlite3_stmt **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  uint64_t v98 = a5;
  uint64_t v99 = a6;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v101 = v10;
  uint64_t v102 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v95 - v16;
  __chkstk_darwin(v15);
  int v97 = (char *)&v95 - v18;
  uint64_t v19 = type metadata accessor for DIPError.Code();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v104 = v19;
  uint64_t v105 = v20;
  __chkstk_darwin(v19);
  os_log_type_t v22 = (char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v23 = *(sqlite3 **)(a1 + 40);
  if (!v23)
  {
    sub_100569B60();
    uint64_t v23 = *(sqlite3 **)(a1 + 40);
    if (!v23)
    {
      (*(void (**)(char *, void, uint64_t))(v105 + 104))(v22, enum case for DIPError.Code.databaseInaccessible(_:), v104);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_16:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (void *)swift_willThrow();
    }
  }
  int v24 = v23;
  int v25 = sqlite3_prepare_v3(v23, "SELECT session_uuid FROM dip_signalmap WHERE service_name = ? AND target_tier = ?", -1, 0, a2, 0);
  os_log_type_t v100 = v22;
  uint64_t v103 = v24;
  if (v25)
  {
    uint64_t result = (void *)sqlite3_errmsg(v24);
    if (result)
    {
      uint64_t v27 = String.init(cString:)();
      uint64_t v29 = v28;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      os_log_type_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v106 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v108 = sub_100110D58(v27, (unint64_t)v29, &v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "coreidvd: failed to prepare select statement: %{public}s", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v102 + 8))(v14, v101);
      uint64_t v43 = v105;
      uint64_t v106 = 0;
      unint64_t v107 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      uint64_t v106 = 0xD00000000000001FLL;
      unint64_t v107 = 0x8000000100656250;
      v44._uint64_t countAndFlagsBits = v27;
      v44._object = v29;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v43 + 104))(v100, enum case for DIPError.Code.sqliteError(_:), v104);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v45 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v46 = (*(unsigned __int8 *)(*(void *)v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v45 + 80);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_100610730;
      unint64_t v48 = v47 + v46;
      unint64_t v49 = v48 + v45[14];
      uint64_t v50 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v51 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 104))(v48, v50, v51);
      int v52 = sqlite3_errcode(v103);
      *(void *)(v49 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v49 = v52;
      sub_10015C504(v47);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
    goto LABEL_36;
  }
  uint64_t v96 = a2;
  uint64_t v33 = *a2;
  if (qword_10071F5C8 != -1) {
    swift_once();
  }
  int v34 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v35 = String.utf8CString.getter();
  int v36 = sqlite3_bind_text(v33, 1, (const char *)(v35 + 32), -1, v34);
  swift_release();
  if (v36)
  {
    uint64_t result = (void *)sqlite3_errmsg(v103);
    if (!result)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v37 = String.init(cString:)();
    uint64_t v39 = v38;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    os_log_type_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v106 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v108 = sub_100110D58(v37, (unint64_t)v39, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "coreidvd: failure binding serviceName: %{public}s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v102 + 8))(v17, v101);
    uint64_t v64 = v104;
    uint64_t v65 = v105;
    uint64_t v106 = 0;
    unint64_t v107 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    uint64_t v106 = 0xD00000000000001BLL;
    unint64_t v107 = 0x8000000100656270;
    v66._uint64_t countAndFlagsBits = v37;
    v66._object = v39;
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v65 + 104))(v100, enum case for DIPError.Code.sqliteError(_:), v64);
    sub_100007764((uint64_t *)&unk_1007225C0);
    Swift::String v67 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v68 = (*(unsigned __int8 *)(*(void *)v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v67 + 80);
    uint64_t v69 = swift_allocObject();
    *(_OWORD *)(v69 + 16) = xmmword_100610730;
    unint64_t v70 = v69 + v68;
    unint64_t v71 = v70 + v67[14];
    uint64_t v72 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v73 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 104))(v70, v72, v73);
    int v74 = sqlite3_errcode(v103);
    *(void *)(v71 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v71 = v74;
    sub_10015C504(v69);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_33;
  }
  uint64_t v53 = v96;
  os_log_type_t v54 = *v96;
  uint64_t v55 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v56 = String.utf8CString.getter();
  LODWORD(v54) = sqlite3_bind_text(v54, 2, (const char *)(v56 + 32), -1, v55);
  swift_release();
  if (!v54)
  {
    if (sqlite3_step(*v53) == 100)
    {
      while (1)
      {
        uint64_t result = (void *)sqlite3_column_text(*v53, 0);
        if (!result) {
          break;
        }
        uint64_t v75 = String.init(cString:)();
        uint64_t v77 = v76;
        os_log_type_t v78 = *a7;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a7 = v78;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          os_log_type_t v78 = sub_10010F3C4(0, *((void *)v78 + 2) + 1, 1, v78);
          *a7 = v78;
        }
        unint64_t v81 = *((void *)v78 + 2);
        unint64_t v80 = *((void *)v78 + 3);
        if (v81 >= v80 >> 1)
        {
          os_log_type_t v78 = sub_10010F3C4((char *)(v80 > 1), v81 + 1, 1, v78);
          *a7 = v78;
        }
        *((void *)v78 + 2) = v81 + 1;
        Swift::String v82 = &v78[16 * v81];
        *((void *)v82 + 4) = v75;
        *((void *)v82 + 5) = v77;
        if (sqlite3_step(*v53) != 100) {
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
LABEL_30:
    uint64_t v83 = *v53;
    return (void *)sqlite3_finalize(v83);
  }
  uint64_t result = (void *)sqlite3_errmsg(v103);
  if (result)
  {
    uint64_t v57 = String.init(cString:)();
    uint64_t v59 = v58;
    Swift::String v60 = v97;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      unint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v106 = swift_slowAlloc();
      *(_DWORD *)unint64_t v63 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v108 = sub_100110D58(v57, (unint64_t)v59, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "coreidvd: failure binding targetTier: %{public}s", v63, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v102 + 8))(v60, v101);
    uint64_t v84 = v104;
    uint64_t v85 = v105;
    uint64_t v106 = 0;
    unint64_t v107 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    uint64_t v106 = 0xD00000000000001ALL;
    unint64_t v107 = 0x8000000100656290;
    v86._uint64_t countAndFlagsBits = v57;
    v86._object = v59;
    String.append(_:)(v86);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v85 + 104))(v100, enum case for DIPError.Code.sqliteError(_:), v84);
    sub_100007764((uint64_t *)&unk_1007225C0);
    os_log_type_t v87 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v88 = (*(unsigned __int8 *)(*(void *)v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v87 + 80);
    uint64_t v89 = swift_allocObject();
    *(_OWORD *)(v89 + 16) = xmmword_100610730;
    unint64_t v90 = v89 + v88;
    unint64_t v91 = v90 + v87[14];
    uint64_t v92 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v93 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 104))(v90, v92, v93);
    int v94 = sqlite3_errcode(v103);
    *(void *)(v91 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v91 = v94;
    sub_10015C504(v89);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_33:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    uint64_t v83 = *v96;
    return (void *)sqlite3_finalize(v83);
  }
LABEL_38:
  __break(1u);
  return result;
}

const char *sub_10056FF20(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v4 - 8);
  v405 = (char *)&v399 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007764(&qword_10072A888);
  __chkstk_darwin(v6 - 8);
  uint64_t v414 = (uint64_t)&v399 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v413 = type metadata accessor for OTDRequest(0);
  uint64_t v410 = *(void *)(v413 - 8);
  __chkstk_darwin(v413);
  uint64_t v411 = (uint64_t)&v399 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v421 = *(void *)(v9 - 8);
  uint64_t v422 = v9;
  __chkstk_darwin(v9);
  v420 = (char *)&v399 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v428 = v11;
  uint64_t v429 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v406 = (char *)&v399 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  v404 = (char *)&v399 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v403 = (char *)&v399 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v408 = (char *)&v399 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v409 = (char *)&v399 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v407 = (char *)&v399 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v415 = (char *)&v399 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v416 = (char *)&v399 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v417 = (char *)&v399 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v418 = (char *)&v399 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v419 = (char *)&v399 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v423 = (char *)&v399 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v424 = (char *)&v399 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v425 = (char *)&v399 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v426 = (uint64_t)&v399 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v399 - v44;
  uint64_t v46 = __chkstk_darwin(v43);
  unint64_t v48 = (sqlite3_stmt *)((char *)&v399 - v47);
  uint64_t v49 = __chkstk_darwin(v46);
  uint64_t v51 = (char *)&v399 - v50;
  __chkstk_darwin(v49);
  uint64_t v53 = (char *)&v399 - v52;
  uint64_t v430 = type metadata accessor for DIPError.Code();
  uint64_t v54 = *(void *)(v430 - 8);
  __chkstk_darwin(v430);
  uint64_t v56 = (char *)&v399 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v57 = *(sqlite3 **)(a1 + 40);
  if (!v57)
  {
    sub_100569B60();
    uint64_t v57 = *(sqlite3 **)(a1 + 40);
    if (!v57)
    {
      (*(void (**)(char *, void, uint64_t))(v54 + 104))(v56, enum case for DIPError.Code.databaseInaccessible(_:), v430);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
  }
  unint64_t v58 = a2[1];
  if (v58 >> 60 == 15)
  {
    (*(void (**)(char *, void, uint64_t))(v54 + 104))(v56, enum case for DIPError.Code.invalidAssessmentGUID(_:), v430);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_16:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    return (const char *)swift_willThrow();
  }
  uint64_t v401 = v54;
  uint64_t v59 = *a2;
  int v60 = sqlite3_prepare_v3(v57, "INSERT INTO dip_signalmap (dsid, signal_uuid, assessment_guid, asd_version, library_version, service_name, wfid, creation_date, state, session_uuid, launch_tier, target_tier, otd_request, otd_url) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", -1, 0, &ppStmt, 0);
  v402 = v56;
  v427 = v57;
  if (v60)
  {
    uint64_t v61 = (uint64_t)sqlite3_errmsg(v57);
    if (v61)
    {
      uint64_t v63 = String.init(cString:)();
      uint64_t v65 = v64;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      Swift::String v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v66, v67))
      {
        unint64_t v68 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)unint64_t v68 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v63, (unint64_t)v65, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "coreidvd: failed to prepare insert statement %{public}s", v68, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v53, v428);
      uint64_t v75 = v401;
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002ALL;
      *((void *)&v432 + 1) = 0x8000000100657750;
      v76._uint64_t countAndFlagsBits = v63;
      v76._object = v65;
      String.append(_:)(v76);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v75 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v77 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v78 = (*(unsigned __int8 *)(*(void *)v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v77 + 80);
      uint64_t v79 = swift_allocObject();
      *(_OWORD *)(v79 + 16) = xmmword_100610730;
      unint64_t v80 = v79 + v78;
      unint64_t v81 = v80 + v77[14];
      uint64_t v82 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v83 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 104))(v80, v82, v83);
      int v84 = sqlite3_errcode(v427);
      *(void *)(v81 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v81 = v84;
      sub_10015C504(v79);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_115;
  }
  uint64_t v69 = ppStmt;
  uint64_t v70 = a2[9];
  v400 = a2;
  if (qword_10071F5C8 != -1)
  {
    v238 = ppStmt;
    swift_once();
    uint64_t v69 = v238;
  }
  unint64_t v71 = (void (__cdecl *)(void *))qword_100760860;
  if (v70)
  {
    uint64_t v72 = v69;
    uint64_t v73 = String.utf8CString.getter();
    uint64_t v69 = v72;
    int v74 = (const char *)(v73 + 32);
  }
  else
  {
    int v74 = 0;
    uint64_t v73 = 0;
  }
  Swift::String v86 = v427;
  os_log_type_t v87 = v69;
  unint64_t v88 = sqlite3_bind_text(v69, 1, v74, -1, v71);
  swift_unknownObjectRelease();
  if (v88)
  {
    if (sqlite3_errmsg(v86))
    {
      uint64_t v89 = String.init(cString:)();
      unint64_t v91 = v90;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v92, v93))
      {
        int v94 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)int v94 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v89, (unint64_t)v91, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "coreidvd: failure binding dsid: %{public}s", v94, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v51, v428);
      uint64_t v104 = v430;
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD000000000000025;
      *((void *)&v432 + 1) = 0x8000000100657780;
      v105._uint64_t countAndFlagsBits = v89;
      v105._object = v91;
      String.append(_:)(v105);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v104);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v106 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v107 = (*(unsigned __int8 *)(*(void *)v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v106 + 80);
      uint64_t v108 = swift_allocObject();
      *(_OWORD *)(v108 + 16) = xmmword_100610730;
      unint64_t v109 = v108 + v107;
      unint64_t v110 = v109 + v106[14];
      uint64_t v111 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v112 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 104))(v109, v111, v112);
      int v113 = sqlite3_errcode(v427);
      *(void *)(v110 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v110 = v113;
      sub_10015C504(v108);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    __break(1u);
    goto LABEL_120;
  }
  uint64_t v95 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v96 = String.utf8CString.getter();
  unint64_t v97 = sqlite3_bind_text(v87, 2, (const char *)(v96 + 32), -1, v95);
  swift_release();
  if (v97)
  {
    if (sqlite3_errmsg(v86))
    {
      uint64_t v98 = String.init(cString:)();
      os_log_type_t v100 = v99;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)uint64_t v103 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v98, (unint64_t)v100, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "coreidvd: failure binding signalsUUID: %{public}s", v103, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(sqlite3_stmt *, uint64_t))(v429 + 8))(v48, v428);
      uint64_t v123 = v430;
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002CLL;
      *((void *)&v432 + 1) = 0x80000001006577B0;
      v124._uint64_t countAndFlagsBits = v98;
      v124._object = v100;
      String.append(_:)(v124);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v123);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v125 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v126 = (*(unsigned __int8 *)(*(void *)v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v125 + 80);
      uint64_t v127 = swift_allocObject();
      *(_OWORD *)(v127 + 16) = xmmword_100610730;
      unint64_t v128 = v127 + v126;
      unint64_t v129 = v128 + v125[14];
      uint64_t v130 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v131 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 104))(v128, v130, v131);
      int v132 = sqlite3_errcode(v427);
      *(void *)(v129 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v129 = v132;
      sub_10015C504(v127);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    __break(1u);
    goto LABEL_149;
  }
  Data.base64EncodedString(options:)(0);
  unint64_t v114 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v115 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v116 = sqlite3_bind_text(v87, 3, (const char *)(v115 + 32), -1, v114);
  swift_release();
  if (v116)
  {
    uint64_t result = sqlite3_errmsg(v86);
    if (result)
    {
      uint64_t v117 = String.init(cString:)();
      int v119 = v118;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v120 = Logger.logObject.getter();
      os_log_type_t v121 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v120, v121))
      {
        uint64_t v122 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)uint64_t v122 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v117, (unint64_t)v119, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "coreidvd: failure binding assessmentGUID: %{public}s", v122, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v45, v428);
      uint64_t v135 = v430;
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(49);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002FLL;
      *((void *)&v432 + 1) = 0x80000001006577E0;
      v136._uint64_t countAndFlagsBits = v117;
      v136._object = v119;
      String.append(_:)(v136);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v135);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v137 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v138 = (*(unsigned __int8 *)(*(void *)v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v137 + 80);
      uint64_t v139 = swift_allocObject();
      *(_OWORD *)(v139 + 16) = xmmword_100610730;
      unint64_t v140 = v139 + v138;
      unint64_t v141 = v140 + v137[14];
      uint64_t v142 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v143 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 104))(v140, v142, v143);
      int v144 = sqlite3_errcode(v427);
      *(void *)(v141 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v141 = v144;
      sub_10015C504(v139);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    __break(1u);
    goto LABEL_152;
  }
  unint64_t v133 = (void (__cdecl *)(void *))qword_100760860;
  if (v400[11]) {
    uint64_t v134 = (const char *)(String.utf8CString.getter() + 32);
  }
  else {
    uint64_t v134 = 0;
  }
  int v145 = sqlite3_bind_text(v87, 4, v134, -1, v133);
  swift_unknownObjectRelease();
  if (v145)
  {
    uint64_t result = sqlite3_errmsg(v86);
    if (result)
    {
      uint64_t v146 = String.init(cString:)();
      os_log_type_t v148 = v147;
      uint64_t v149 = v426;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v150 = Logger.logObject.getter();
      os_log_type_t v151 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v150, v151))
      {
        unint64_t v152 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)unint64_t v152 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v146, (unint64_t)v148, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v150, v151, "coreidvd: failure binding asdVersion: %{public}s", v152, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(uint64_t, uint64_t))(v429 + 8))(v149, v428);
      uint64_t v158 = v401;
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002BLL;
      *((void *)&v432 + 1) = 0x8000000100657810;
      v159._uint64_t countAndFlagsBits = v146;
      v159._object = v148;
      String.append(_:)(v159);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v158 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v160 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v161 = (*(unsigned __int8 *)(*(void *)v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v160 + 80);
      uint64_t v162 = swift_allocObject();
      *(_OWORD *)(v162 + 16) = xmmword_100610730;
      unint64_t v163 = v162 + v161;
      unint64_t v164 = v163 + v160[14];
      uint64_t v165 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v166 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 104))(v163, v165, v166);
      int v167 = sqlite3_errcode(v427);
      *(void *)(v164 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v164 = v167;
      sub_10015C504(v162);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
    goto LABEL_161;
  }
  id v153 = [self mainBundle];
  id v154 = [v153 infoDictionary];

  if (v154)
  {
    uint64_t v155 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v155 + 16) && (unint64_t v156 = sub_100590548(0x656C646E75424643, 0xEF6E6F6973726556), (v157 & 1) != 0))
    {
      sub_10003BC28(*(void *)(v155 + 56) + 32 * v156, (uint64_t)&v432);
    }
    else
    {
      long long v432 = 0u;
      long long v433 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v433 + 1))
    {
      swift_dynamicCast();
      goto LABEL_54;
    }
  }
  else
  {
    long long v432 = 0u;
    long long v433 = 0u;
  }
  sub_10000C6CC((uint64_t)&v432, (uint64_t *)&unk_100727200);
LABEL_54:
  uint64_t v168 = ppStmt;
  v169 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v170 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v171 = sqlite3_bind_text(v168, 5, (const char *)(v170 + 32), -1, v169);
  swift_release();
  if (v171)
  {
    uint64_t result = sqlite3_errmsg(v86);
    if (result)
    {
      uint64_t v172 = String.init(cString:)();
      unint64_t v174 = v173;
      uint64_t v175 = v425;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      unint64_t v176 = Logger.logObject.getter();
      os_log_type_t v177 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v176, v177))
      {
        uint64_t v178 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)uint64_t v178 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v172, (unint64_t)v174, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v176, v177, "coreidvd: failure binding idvVersion: %{public}s", v178, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v175, v428);
      uint64_t v188 = v430;
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002BLL;
      *((void *)&v432 + 1) = 0x8000000100657840;
      v189._uint64_t countAndFlagsBits = v172;
      v189._object = v174;
      String.append(_:)(v189);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v188);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v190 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v191 = (*(unsigned __int8 *)(*(void *)v190 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v190 + 80);
      uint64_t v192 = swift_allocObject();
      *(_OWORD *)(v192 + 16) = xmmword_100610730;
      unint64_t v193 = v192 + v191;
      unint64_t v194 = v193 + v190[14];
      uint64_t v195 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v196 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v196 - 8) + 104))(v193, v195, v196);
      int v197 = sqlite3_errcode(v427);
      *(void *)(v194 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v194 = v197;
      sub_10015C504(v192);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    goto LABEL_153;
  }
  uint64_t v179 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v180 = String.utf8CString.getter();
  LODWORD(v179) = sqlite3_bind_text(v168, 6, (const char *)(v180 + 32), -1, v179);
  swift_release();
  if (v179)
  {
    uint64_t result = sqlite3_errmsg(v86);
    if (result)
    {
      uint64_t v181 = String.init(cString:)();
      os_log_type_t v183 = v182;
      os_log_type_t v184 = v424;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v185 = Logger.logObject.getter();
      os_log_type_t v186 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v185, v186))
      {
        uint64_t v187 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)uint64_t v187 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v181, (unint64_t)v183, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v185, v186, "coreidvd: failure binding serviceName: %{public}s", v187, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v184, v428);
      uint64_t v208 = v430;
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002CLL;
      *((void *)&v432 + 1) = 0x8000000100657870;
      v209._uint64_t countAndFlagsBits = v181;
      v209._object = v183;
      String.append(_:)(v209);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v208);
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v210 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v211 = (*(unsigned __int8 *)(*(void *)v210 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v210 + 80);
      uint64_t v212 = swift_allocObject();
      *(_OWORD *)(v212 + 16) = xmmword_100610730;
      unint64_t v213 = v212 + v211;
      unint64_t v214 = v213 + v210[14];
      uint64_t v215 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v216 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v216 - 8) + 104))(v213, v215, v216);
      int v217 = sqlite3_errcode(v427);
      *(void *)(v214 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v214 = v217;
      sub_10015C504(v212);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    goto LABEL_154;
  }
  v198 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v199 = String.utf8CString.getter();
  int v200 = sqlite3_bind_text(v168, 7, (const char *)(v199 + 32), -1, v198);
  swift_release();
  if (v200)
  {
    uint64_t result = sqlite3_errmsg(v86);
    if (result)
    {
      uint64_t v201 = String.init(cString:)();
      v203 = v202;
      uint64_t v204 = v423;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v205 = Logger.logObject.getter();
      os_log_type_t v206 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v205, v206))
      {
        unint64_t v207 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)unint64_t v207 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v201, (unint64_t)v203, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v205, v206, "coreidvd: failure binding workflowid: %{public}s", v207, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v204, v428);
      uint64_t v228 = v430;
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002BLL;
      *((void *)&v432 + 1) = 0x80000001006578A0;
      v229._uint64_t countAndFlagsBits = v201;
      v229._object = v203;
      String.append(_:)(v229);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v228);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v230 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v231 = (*(unsigned __int8 *)(*(void *)v230 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v230 + 80);
      uint64_t v232 = swift_allocObject();
      *(_OWORD *)(v232 + 16) = xmmword_100610730;
      unint64_t v233 = v232 + v231;
      unint64_t v234 = v233 + v230[14];
      uint64_t v235 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v236 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v236 - 8) + 104))(v233, v235, v236);
      int v237 = sqlite3_errcode(v427);
      *(void *)(v234 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v234 = v237;
      sub_10015C504(v232);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    goto LABEL_155;
  }
  v218 = v420;
  Date.init()();
  Date.timeIntervalSinceReferenceDate.getter();
  double v220 = v219;
  (*(void (**)(char *, uint64_t))(v421 + 8))(v218, v422);
  unint64_t v48 = ppStmt;
  if (sqlite3_bind_double(ppStmt, 8, v220))
  {
    uint64_t result = sqlite3_errmsg(v86);
    if (result)
    {
      uint64_t v221 = String.init(cString:)();
      v223 = v222;
      v224 = v419;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v225 = Logger.logObject.getter();
      os_log_type_t v226 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v225, v226))
      {
        v227 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)v227 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v221, (unint64_t)v223, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v225, v226, "coreidvd: failure binding date: %{public}s", v227, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v224, v428);
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002ELL;
      *((void *)&v432 + 1) = 0x80000001006578D0;
      v246._uint64_t countAndFlagsBits = v221;
      v246._object = v223;
      String.append(_:)(v246);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v247 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v248 = (*(unsigned __int8 *)(*(void *)v247 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v247 + 80);
      uint64_t v249 = swift_allocObject();
      *(_OWORD *)(v249 + 16) = xmmword_100610730;
      unint64_t v250 = v249 + v248;
      unint64_t v251 = v250 + v247[14];
      uint64_t v252 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v253 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v253 - 8) + 104))(v250, v252, v253);
      int v254 = sqlite3_errcode(v427);
      *(void *)(v251 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v251 = v254;
      sub_10015C504(v249);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    goto LABEL_156;
  }
  v239 = (void (__cdecl *)(void *))qword_100760860;
  if (sqlite3_bind_text(v48, 9, "NEW", -1, (void (__cdecl *)(void *))qword_100760860))
  {
    uint64_t result = sqlite3_errmsg(v427);
    if (result)
    {
      uint64_t v240 = String.init(cString:)();
      v242 = v241;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v243 = Logger.logObject.getter();
      os_log_type_t v244 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v243, v244))
      {
        v245 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)v245 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v240, (unint64_t)v242, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v243, v244, "coreidvd: failure binding status: %{public}s", v245, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v418, v428);
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD000000000000027;
      *((void *)&v432 + 1) = 0x8000000100657900;
      v263._uint64_t countAndFlagsBits = v240;
      v263._object = v242;
      String.append(_:)(v263);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v264 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v265 = (*(unsigned __int8 *)(*(void *)v264 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v264 + 80);
      uint64_t v266 = swift_allocObject();
      *(_OWORD *)(v266 + 16) = xmmword_100610730;
      unint64_t v267 = v266 + v265;
      unint64_t v268 = v267 + v264[14];
      uint64_t v269 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v270 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v270 - 8) + 104))(v267, v269, v270);
      int v271 = sqlite3_errcode(v427);
      *(void *)(v268 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v268 = v271;
      sub_10015C504(v266);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    goto LABEL_157;
  }
  uint64_t v255 = String.utf8CString.getter();
  int v256 = sqlite3_bind_text(v48, 10, (const char *)(v255 + 32), -1, v239);
  swift_release();
  if (v256)
  {
    uint64_t result = sqlite3_errmsg(v427);
    if (result)
    {
      uint64_t v257 = String.init(cString:)();
      v259 = v258;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v260 = Logger.logObject.getter();
      os_log_type_t v261 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v260, v261))
      {
        v262 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)v262 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v257, (unint64_t)v259, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v260, v261, "coreidvd: failure binding sessionUuid: %{public}s", v262, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v417, v428);
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002CLL;
      *((void *)&v432 + 1) = 0x8000000100657930;
      v274._uint64_t countAndFlagsBits = v257;
      v274._object = v259;
      String.append(_:)(v274);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v275 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v276 = (*(unsigned __int8 *)(*(void *)v275 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v275 + 80);
      uint64_t v277 = swift_allocObject();
      *(_OWORD *)(v277 + 16) = xmmword_100610730;
      unint64_t v278 = v277 + v276;
      unint64_t v279 = v278 + v275[14];
      uint64_t v280 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v281 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v281 - 8) + 104))(v278, v280, v281);
      int v282 = sqlite3_errcode(v427);
      *(void *)(v279 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v279 = v282;
      sub_10015C504(v277);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    goto LABEL_158;
  }
  v272 = (void (__cdecl *)(void *))qword_100760860;
  if (v400[18]) {
    v273 = (const char *)(String.utf8CString.getter() + 32);
  }
  else {
    v273 = 0;
  }
  int v283 = sqlite3_bind_text(v48, 11, v273, -1, v272);
  swift_unknownObjectRelease();
  if (v283)
  {
    uint64_t result = sqlite3_errmsg(v427);
    if (result)
    {
      uint64_t v284 = String.init(cString:)();
      v286 = v285;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v287 = Logger.logObject.getter();
      os_log_type_t v288 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v287, v288))
      {
        v289 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)v289 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v284, (unint64_t)v286, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v287, v288, "coreidvd: failure binding launchTier: %{public}s", v289, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v416, v428);
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002BLL;
      *((void *)&v432 + 1) = 0x8000000100657960;
      v298._uint64_t countAndFlagsBits = v284;
      v298._object = v286;
      String.append(_:)(v298);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v299 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v300 = (*(unsigned __int8 *)(*(void *)v299 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v299 + 80);
      uint64_t v301 = swift_allocObject();
      *(_OWORD *)(v301 + 16) = xmmword_100610730;
      unint64_t v302 = v301 + v300;
      unint64_t v303 = v302 + v299[14];
      uint64_t v304 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v305 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v305 - 8) + 104))(v302, v304, v305);
      int v306 = sqlite3_errcode(v427);
      *(void *)(v303 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v303 = v306;
      sub_10015C504(v301);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    goto LABEL_159;
  }
  v290 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v291 = String.utf8CString.getter();
  LODWORD(v290) = sqlite3_bind_text(v48, 12, (const char *)(v291 + 32), -1, v290);
  swift_release();
  if (v290)
  {
    uint64_t result = sqlite3_errmsg(v427);
    if (result)
    {
      uint64_t v292 = String.init(cString:)();
      v294 = v293;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v295 = Logger.logObject.getter();
      os_log_type_t v296 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v295, v296))
      {
        v297 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)v297 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v292, (unint64_t)v294, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v295, v296, "coreidvd: failure binding targetTier: %s", v297, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v415, v428);
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002BLL;
      *((void *)&v432 + 1) = 0x8000000100657990;
      v314._uint64_t countAndFlagsBits = v292;
      v314._object = v294;
      String.append(_:)(v314);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v315 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v316 = (*(unsigned __int8 *)(*(void *)v315 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v315 + 80);
      uint64_t v317 = swift_allocObject();
      *(_OWORD *)(v317 + 16) = xmmword_100610730;
      unint64_t v318 = v317 + v316;
      unint64_t v319 = v318 + v315[14];
      uint64_t v320 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v321 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v321 - 8) + 104))(v318, v320, v321);
      int v322 = sqlite3_errcode(v427);
      *(void *)(v319 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v319 = v322;
      sub_10015C504(v317);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
    goto LABEL_160;
  }
  uint64_t v59 = type metadata accessor for DIPODINPair(0);
  uint64_t v307 = v414;
  sub_100048D6C((uint64_t)v400 + *(int *)(v59 + 52), v414, &qword_10072A888);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v410 + 48))(v307, 1, v413) == 1)
  {
    sub_10000C6CC(v414, &qword_10072A888);
    if (!sqlite3_bind_null(ppStmt, 13)) {
      goto LABEL_126;
    }
    uint64_t result = sqlite3_errmsg(v427);
    if (result)
    {
      uint64_t v308 = String.init(cString:)();
      v310 = v309;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v311 = Logger.logObject.getter();
      os_log_type_t v312 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v311, v312))
      {
        v313 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)v313 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v308, (unint64_t)v310, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v311, v312, "coreidvd: failure binding null otd_request: %{public}s", v313, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v409, v428);
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002CLL;
      *((void *)&v432 + 1) = 0x8000000100657410;
      v327._uint64_t countAndFlagsBits = v308;
      v327._object = v310;
      String.append(_:)(v327);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v328 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v329 = (*(unsigned __int8 *)(*(void *)v328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v328 + 80);
      uint64_t v330 = swift_allocObject();
      *(_OWORD *)(v330 + 16) = xmmword_100610730;
      unint64_t v331 = v330 + v329;
      unint64_t v332 = v331 + v328[14];
      uint64_t v333 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v334 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v334 - 8) + 104))(v331, v333, v334);
      int v335 = sqlite3_errcode(v427);
      *(void *)(v332 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v332 = v335;
      sub_10015C504(v330);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }
  sub_10058EE4C(v414, v411, type metadata accessor for OTDRequest);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10058EE04(&qword_100720AB0, (void (*)(uint64_t))type metadata accessor for OTDRequest);
  uint64_t v323 = v412;
  uint64_t v61 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v412 = v323;
  if (v323)
  {
    sub_10058EBD8(v411, type metadata accessor for OTDRequest);
    swift_release();
    return (const char *)sqlite3_finalize(ppStmt);
  }
LABEL_115:
  uint64_t v73 = v61;
  unint64_t v88 = v62;
  swift_release();
  *(void *)&long long v432 = v73;
  *((void *)&v432 + 1) = v88;
  static String.Encoding.utf8.getter();
  sub_100307514();
  String.init<A>(bytes:encoding:)();
  unint64_t v58 = qword_100760860;
  if (!v324)
  {
LABEL_120:
    v326 = 0;
    goto LABEL_121;
  }
  uint64_t v325 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v326 = (const char *)(v325 + 32);
LABEL_121:
  int v336 = sqlite3_bind_text(v48, 13, v326, -1, (void (__cdecl *)(void *))v58);
  swift_unknownObjectRelease();
  if (v336)
  {
    uint64_t result = sqlite3_errmsg(v427);
    if (result)
    {
      uint64_t v426 = String.init(cString:)();
      v338 = v337;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v339 = Logger.logObject.getter();
      os_log_type_t v340 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v339, v340))
      {
        v341 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)v341 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v426, (unint64_t)v338, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v339, v340, "coreidvd: failure binding otd_request: %{public}s", v341, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v407, v428);
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD00000000000002CLL;
      *((void *)&v432 + 1) = 0x8000000100657410;
      v360._uint64_t countAndFlagsBits = v426;
      v360._object = v338;
      String.append(_:)(v360);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v361 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v362 = (*(unsigned __int8 *)(*(void *)v361 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v361 + 80);
      uint64_t v363 = swift_allocObject();
      *(_OWORD *)(v363 + 16) = xmmword_100610730;
      unint64_t v364 = v363 + v362;
      unint64_t v365 = v364 + v361[14];
      uint64_t v366 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v367 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v367 - 8) + 104))(v364, v366, v367);
      int v368 = sqlite3_errcode(v427);
      *(void *)(v365 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v365 = v368;
      sub_10015C504(v363);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      sub_10000C5F4(v73, v88);
      sub_10058EBD8(v411, type metadata accessor for OTDRequest);
      return (const char *)sqlite3_finalize(ppStmt);
    }
    goto LABEL_162;
  }
  sub_10058EBD8(v411, type metadata accessor for OTDRequest);
  sub_10000C5F4(v73, v88);
LABEL_126:
  if (*(uint64_t *)((char *)v400 + *(int *)(v59 + 56) + 8))
  {
    v342 = ppStmt;
    v343 = (void (__cdecl *)(void *))qword_100760860;
    uint64_t v344 = String.utf8CString.getter();
    LODWORD(v343) = sqlite3_bind_text(v342, 14, (const char *)(v344 + 32), -1, v343);
    swift_release();
    if (v343)
    {
      uint64_t result = sqlite3_errmsg(v427);
      if (!result)
      {
LABEL_163:
        __break(1u);
        goto LABEL_164;
      }
      uint64_t v345 = String.init(cString:)();
      v347 = v346;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v348 = Logger.logObject.getter();
      os_log_type_t v349 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v348, v349))
      {
        v350 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)v350 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v345, (unint64_t)v347, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v348, v349, "coreidvd: failure binding otd_url: %{public}s", v350, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v408, v428);
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD000000000000028;
      *((void *)&v432 + 1) = 0x80000001006579C0;
      v369._uint64_t countAndFlagsBits = v345;
      v369._object = v347;
      String.append(_:)(v369);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v370 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v371 = (*(unsigned __int8 *)(*(void *)v370 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v370 + 80);
      uint64_t v372 = swift_allocObject();
      *(_OWORD *)(v372 + 16) = xmmword_100610730;
      unint64_t v373 = v372 + v371;
      unint64_t v374 = v373 + v370[14];
      uint64_t v375 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v376 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v376 - 8) + 104))(v373, v375, v376);
      int v377 = sqlite3_errcode(v427);
      *(void *)(v374 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v374 = v377;
      sub_10015C504(v372);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
  }
  else
  {
    v342 = ppStmt;
    if (sqlite3_bind_null(ppStmt, 14))
    {
      uint64_t result = sqlite3_errmsg(v427);
      if (!result)
      {
LABEL_164:
        __break(1u);
        goto LABEL_165;
      }
      uint64_t v351 = String.init(cString:)();
      v353 = v352;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v354 = Logger.logObject.getter();
      os_log_type_t v355 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v354, v355))
      {
        v356 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)v356 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v351, (unint64_t)v353, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v354, v355, "coreidvd: failure binding null otd_url: %{public}s", v356, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v429 + 8))(v403, v428);
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD000000000000028;
      *((void *)&v432 + 1) = 0x80000001006579C0;
      v381._uint64_t countAndFlagsBits = v351;
      v381._object = v353;
      String.append(_:)(v381);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v382 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v383 = (*(unsigned __int8 *)(*(void *)v382 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v382 + 80);
      uint64_t v384 = swift_allocObject();
      *(_OWORD *)(v384 + 16) = xmmword_100610730;
      unint64_t v385 = v384 + v383;
      unint64_t v386 = v385 + v382[14];
      uint64_t v387 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v388 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v388 - 8) + 104))(v385, v387, v388);
      int v389 = sqlite3_errcode(v427);
      *(void *)(v386 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v386 = v389;
      sub_10015C504(v384);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_110;
    }
  }
  if (sqlite3_step(v342) == 101)
  {
    defaultLogger()();
    v357 = Logger.logObject.getter();
    os_log_type_t v358 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v357, v358))
    {
      v359 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v359 = 0;
      _os_log_impl((void *)&_mh_execute_header, v357, v358, "coredivd: Stored new value mapping", v359, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v429 + 8))(v406, v428);
    return (const char *)sqlite3_finalize(ppStmt);
  }
  uint64_t result = sqlite3_errmsg(v427);
  if (result)
  {
    uint64_t v96 = String.init(cString:)();
    unint64_t v97 = v378;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v379 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v58, v379))
    {
      v380 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v432 = swift_slowAlloc();
      *(_DWORD *)v380 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v431 = sub_100110D58(v96, v97, (uint64_t *)&v432);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v58, v379, "coreidvd: failure inserting mapping: %{public}s", v380, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_150:
      (*(void (**)(char *, uint64_t))(v429 + 8))(v404, v428);
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD000000000000019;
      *((void *)&v432 + 1) = 0x80000001006579F0;
      v390._uint64_t countAndFlagsBits = v96;
      v390._object = (void *)v97;
      String.append(_:)(v390);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v402, enum case for DIPError.Code.sqliteError(_:), v430);
      sub_100007764((uint64_t *)&unk_1007225C0);
      v391 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v392 = (*(unsigned __int8 *)(*(void *)v391 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v391 + 80);
      uint64_t v393 = swift_allocObject();
      *(_OWORD *)(v393 + 16) = xmmword_100610730;
      unint64_t v394 = v393 + v392;
      unint64_t v395 = v394 + v391[14];
      uint64_t v396 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v397 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v397 - 8) + 104))(v394, v396, v397);
      int v398 = sqlite3_errcode(v427);
      *(void *)(v395 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v395 = v398;
      sub_10015C504(v393);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_110:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return (const char *)sqlite3_finalize(ppStmt);
    }
LABEL_149:

    swift_bridgeObjectRelease_n();
    goto LABEL_150;
  }
LABEL_165:
  __break(1u);
  return result;
}

const char *sub_100574C40(uint64_t a1, char **a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v45 - v8;
  uint64_t v10 = type metadata accessor for DIPError.Code();
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v48 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v13 = *(sqlite3 **)(a1 + 40);
  if (!v13)
  {
    sub_100569B60();
    uint64_t v13 = *(sqlite3 **)(a1 + 40);
    if (!v13)
    {
      (*(void (**)(char *, void, uint64_t))(v47 + 104))(v12, enum case for DIPError.Code.databaseInaccessible(_:), v48);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_21:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
  }
  int v14 = sqlite3_prepare_v3(v13, "SELECT claimid FROM dip_verifiedclaim", -1, 0, &ppStmt, 0);
  uint64_t v49 = v4;
  if (v14)
  {
    uint64_t result = sqlite3_errmsg(v13);
    if (result)
    {
      uint64_t v16 = String.init(cString:)();
      uint64_t v18 = v17;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        uint64_t v46 = v12;
        uint64_t v22 = (uint8_t *)v21;
        uint64_t v52 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136446210;
        uint64_t v45 = v22 + 4;
        swift_bridgeObjectRetain();
        uint64_t v51 = sub_100110D58(v16, (unint64_t)v18, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "coreidvd: failed to prepare select statement: %{public}s", v22, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v12 = v46;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v50 + 8))(v7, v49);
      uint64_t v35 = v47;
      uint64_t v52 = 0;
      unint64_t v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      uint64_t v52 = 0xD00000000000001FLL;
      unint64_t v53 = 0x8000000100656250;
      v36._uint64_t countAndFlagsBits = v16;
      v36._object = v18;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v35 + 104))(v12, enum case for DIPError.Code.sqliteError(_:), v48);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v37 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v38 = (*(unsigned __int8 *)(*(void *)v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v37 + 80);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = xmmword_100610730;
      unint64_t v40 = v39 + v38;
      unint64_t v41 = v40 + v37[14];
      uint64_t v42 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v43 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104))(v40, v42, v43);
      int v44 = sqlite3_errcode(v13);
      *(void *)(v41 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v41 = v44;
      sub_10015C504(v39);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_21;
    }
    __break(1u);
  }
  else
  {
    uint64_t v23 = ppStmt;
    while (sqlite3_step(v23) == 100)
    {
      if (!sqlite3_column_text(v23, 0)) {
        __break(1u);
      }
      uint64_t v24 = String.init(cString:)();
      uint64_t v26 = v25;
      uint64_t v27 = *a2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v27 = sub_10010F3C4(0, *((void *)v27 + 2) + 1, 1, v27);
        *a2 = v27;
      }
      unint64_t v30 = *((void *)v27 + 2);
      unint64_t v29 = *((void *)v27 + 3);
      if (v30 >= v29 >> 1)
      {
        uint64_t v27 = sub_10010F3C4((char *)(v29 > 1), v30 + 1, 1, v27);
        *a2 = v27;
      }
      *((void *)v27 + 2) = v30 + 1;
      uint64_t v31 = &v27[16 * v30];
      *((void *)v31 + 4) = v24;
      *((void *)v31 + 5) = v26;
    }
    defaultLogger()();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "retrieved all claim id", v34, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v49);
    return (const char *)sqlite3_finalize(ppStmt);
  }
  return result;
}

void *sub_10057540C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v150 = a4;
  uint64_t v153 = a2;
  uint64_t v154 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v157 = v6;
  uint64_t v158 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v129 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v129 - v12;
  __chkstk_darwin(v11);
  uint64_t v149 = (char *)&v129 - v14;
  uint64_t v151 = type metadata accessor for VerifiedClaim(0);
  uint64_t v15 = __chkstk_darwin(v151);
  uint64_t v17 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v156 = (sqlite3 *)((char *)&v129 - v18);
  uint64_t v152 = type metadata accessor for String.Encoding();
  uint64_t v19 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v21 = (char *)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DIPError.Code();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v159 = v22;
  uint64_t v160 = v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v26 = *(sqlite3 **)(a1 + 40);
  if (!v26)
  {
    sub_100569B60();
    uint64_t v26 = *(sqlite3 **)(a1 + 40);
    if (!v26)
    {
      (*(void (**)(char *, void, uint64_t))(v160 + 104))(v25, enum case for DIPError.Code.databaseInaccessible(_:), v159);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_16:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (void *)swift_willThrow();
    }
  }
  int v27 = sqlite3_prepare_v3(v26, "SELECT tier, workflowid, claim, claimdata, unverified_claimdata, encrypted_claimdata, service_name, acl FROM dip_verifiedclaim where providerid = ?", -1, 0, &ppStmt, 0);
  uint64_t v155 = v25;
  if (v27)
  {
    uint64_t result = (void *)sqlite3_errmsg(v26);
    if (result)
    {
      uint64_t v29 = String.init(cString:)();
      uint64_t v31 = v30;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v163 = swift_slowAlloc();
        unint64_t v156 = v26;
        *(_DWORD *)uint64_t v34 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v161 = sub_100110D58(v29, (unint64_t)v31, &v163);
        uint64_t v26 = v156;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "coreidvd: failed to prepare select statement: %{public}s", v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v158 + 8))(v10, v157);
      uint64_t v46 = v159;
      uint64_t v45 = v160;
      uint64_t v163 = 0;
      unint64_t v164 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      uint64_t v163 = 0xD00000000000001FLL;
      unint64_t v164 = 0x8000000100656250;
      v47._uint64_t countAndFlagsBits = v29;
      v47._object = v31;
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v45 + 104))(v155, enum case for DIPError.Code.sqliteError(_:), v46);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v48 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v49 = (*(unsigned __int8 *)(*(void *)v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v48 + 80);
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_100610730;
      unint64_t v51 = v50 + v49;
      unint64_t v52 = v51 + v48[14];
      uint64_t v53 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v54 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 104))(v51, v53, v54);
      int v55 = sqlite3_errcode(v26);
      *(void *)(v52 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v52 = v55;
      sub_10015C504(v50);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v35 = ppStmt;
  if (qword_10071F5C8 != -1) {
    swift_once();
  }
  Swift::String v36 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v37 = String.utf8CString.getter();
  LODWORD(v36) = sqlite3_bind_text(v35, 1, (const char *)(v37 + 32), -1, v36);
  swift_release();
  if (v36)
  {
    uint64_t result = (void *)sqlite3_errmsg(v26);
    if (!result)
    {
LABEL_57:
      __break(1u);
      return result;
    }
    uint64_t v38 = String.init(cString:)();
    unint64_t v40 = v39;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      unint64_t v156 = (sqlite3 *)v38;
      uint64_t v163 = v44;
      *(_DWORD *)uint64_t v43 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v161 = sub_100110D58((uint64_t)v156, (unint64_t)v40, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "coreidvd: failure binding providerId: %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      uint64_t v38 = (uint64_t)v156;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v158 + 8))(v13, v157);
    uint64_t v93 = v159;
    uint64_t v92 = v160;
    uint64_t v163 = 0;
    unint64_t v164 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    uint64_t v163 = 0xD00000000000002ALL;
    unint64_t v164 = 0x8000000100657D30;
    v94._uint64_t countAndFlagsBits = v38;
    v94._object = v40;
    String.append(_:)(v94);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v92 + 104))(v155, enum case for DIPError.Code.sqliteError(_:), v93);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v95 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v96 = (*(unsigned __int8 *)(*(void *)v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v95 + 80);
    uint64_t v97 = swift_allocObject();
    *(_OWORD *)(v97 + 16) = xmmword_100610730;
    unint64_t v98 = v97 + v96;
    unint64_t v99 = v98 + v95[14];
    uint64_t v100 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v101 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 104))(v98, v100, v101);
    int v102 = sqlite3_errcode(v26);
    *(void *)(v99 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v99 = v102;
    sub_10015C504(v97);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_37:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
  else
  {
    if (sqlite3_step(v35) == 100)
    {
      uint64_t v131 = v17;
      uint64_t v56 = (void (**)(char *, uint64_t))(v19 + 8);
      uint64_t v130 = (void (**)(char *, uint64_t))(v19 + 8);
      while (1)
      {
        uint64_t result = (void *)sqlite3_column_text(v35, 0);
        if (!result) {
          goto LABEL_49;
        }
        uint64_t v71 = String.init(cString:)();
        uint64_t v73 = v72;
        uint64_t result = (void *)sqlite3_column_text(v35, 1);
        uint64_t v74 = v152;
        if (!result) {
          goto LABEL_50;
        }
        uint64_t v139 = v71;
        uint64_t v142 = v73;
        uint64_t v138 = String.init(cString:)();
        uint64_t v141 = v75;
        uint64_t result = (void *)sqlite3_column_text(v35, 2);
        if (!result) {
          goto LABEL_51;
        }
        String.init(cString:)();
        static String.Encoding.utf8.getter();
        uint64_t v76 = String.data(using:allowLossyConversion:)();
        unint64_t v78 = v77;
        swift_bridgeObjectRelease();
        uint64_t v79 = *v56;
        (*v56)(v21, v74);
        if (v78 >> 60 == 15)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v160 + 104))(v155, enum case for DIPError.Code.jsonDecodingFailed(_:), v159);
          sub_100007764((uint64_t *)&unk_1007225C0);
          unint64_t v107 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v108 = (*(unsigned __int8 *)(*(void *)v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v107 + 80);
          uint64_t v109 = swift_allocObject();
          *(_OWORD *)(v109 + 16) = xmmword_100610730;
          unint64_t v110 = v109 + v108;
          uint64_t v111 = (void *)(v110 + v107[14]);
          uint64_t v112 = enum case for DIPError.PropertyKey.databaseColumn(_:);
          uint64_t v113 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 104))(v110, v112, v113);
          v111[3] = &type metadata for String;
          *uint64_t v111 = 0x6D69616C63;
          v111[1] = 0xE500000000000000;
          sub_10015C504(v109);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_37;
        }
        uint64_t result = (void *)sqlite3_column_text(ppStmt, 3);
        if (!result) {
          goto LABEL_52;
        }
        String.init(cString:)();
        static String.Encoding.utf8.getter();
        uint64_t v147 = String.data(using:allowLossyConversion:)();
        unint64_t v81 = v80;
        swift_bridgeObjectRelease();
        v79(v21, v74);
        unint64_t v148 = v81;
        if (v81 >> 60 == 15) {
          break;
        }
        uint64_t result = (void *)sqlite3_column_text(ppStmt, 4);
        if (!result) {
          goto LABEL_53;
        }
        String.init(cString:)();
        static String.Encoding.utf8.getter();
        uint64_t v145 = String.data(using:allowLossyConversion:)();
        unint64_t v83 = v82;
        swift_bridgeObjectRelease();
        v79(v21, v74);
        unint64_t v146 = v83;
        if (v83 >> 60 == 15)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v160 + 104))(v155, enum case for DIPError.Code.jsonDecodingFailed(_:), v159);
          sub_100007764((uint64_t *)&unk_1007225C0);
          os_log_type_t v121 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v122 = (*(unsigned __int8 *)(*(void *)v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v121 + 80);
          uint64_t v123 = swift_allocObject();
          *(_OWORD *)(v123 + 16) = xmmword_100610730;
          unint64_t v124 = v123 + v122;
          uint64_t v125 = (void *)(v124 + v121[14]);
          uint64_t v126 = enum case for DIPError.PropertyKey.databaseColumn(_:);
          uint64_t v127 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 104))(v124, v126, v127);
          v125[3] = &type metadata for String;
          *uint64_t v125 = 0xD000000000000013;
          v125[1] = 0x8000000100657DD0;
          sub_10015C504(v123);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_10000C5E0(v147, v148);
          goto LABEL_44;
        }
        uint64_t result = (void *)sqlite3_column_text(ppStmt, 5);
        if (!result) {
          goto LABEL_54;
        }
        String.init(cString:)();
        static String.Encoding.utf8.getter();
        uint64_t v143 = String.data(using:allowLossyConversion:)();
        unint64_t v144 = v84;
        swift_bridgeObjectRelease();
        v79(v21, v74);
        uint64_t v85 = ppStmt;
        uint64_t result = (void *)sqlite3_column_text(ppStmt, 6);
        if (!result) {
          goto LABEL_55;
        }
        uint64_t v135 = String.init(cString:)();
        uint64_t v87 = v86;
        uint64_t result = (void *)sqlite3_column_text(v85, 7);
        if (!result) {
          goto LABEL_56;
        }
        uint64_t v163 = String.init(cString:)();
        unint64_t v164 = v88;
        uint64_t v161 = 124;
        unint64_t v162 = 0xE100000000000000;
        sub_1000B5358();
        uint64_t v140 = StringProtocol.components<A>(separatedBy:)();
        swift_bridgeObjectRelease();
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        sub_10058EE04(&qword_10072CC58, (void (*)(uint64_t))type metadata accessor for VerifiedClaim);
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        if (v4)
        {
          sub_10000C5E0(v76, v78);
          sub_10000C5E0(v147, v148);
          sub_10000C5E0(v143, v144);
          sub_10000C5E0(v145, v146);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v128 = v85;
          return (void *)sqlite3_finalize(v128);
        }
        uint64_t v136 = v76;
        unint64_t v137 = v78;
        swift_release();
        swift_allocObject();
        JSONDecoder.init()();
        sub_100007764(&qword_1007264A0);
        sub_1001D5D7C();
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        uint64_t v134 = v87;
        swift_release();
        uint64_t v89 = v163;
        swift_allocObject();
        JSONDecoder.init()();
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        unint64_t v90 = v144;
        swift_release();
        uint64_t v133 = v163;
        uint64_t v132 = v89;
        if (v90 >> 60 == 15)
        {
          uint64_t v57 = 0;
          uint64_t v59 = v153;
          uint64_t v58 = v154;
        }
        else
        {
          swift_allocObject();
          uint64_t v91 = v143;
          sub_10002CEB0(v143, v90);
          JSONDecoder.init()();
          sub_100007764(&qword_100733208);
          sub_10058EC38();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)();
          uint64_t v59 = v153;
          uint64_t v58 = v154;
          sub_10000C5E0(v91, v90);
          swift_release();
          uint64_t v57 = v163;
        }
        uint64_t v60 = (uint64_t)v131;
        sub_1004D1F28((uint64_t)v156, (uint64_t)v131);
        type metadata accessor for DIPStoredVerifiedClaim(0);
        uint64_t v61 = (void *)swift_allocObject();
        uint64_t v62 = OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData;
        *(void *)((char *)v61 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData) = 0;
        v61[2] = v59;
        v61[3] = v58;
        uint64_t v63 = v139;
        uint64_t v64 = v142;
        v61[4] = v139;
        v61[5] = v64;
        uint64_t v65 = v141;
        v61[6] = v138;
        v61[7] = v65;
        sub_10058EE4C(v60, (uint64_t)v61 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim, type metadata accessor for VerifiedClaim);
        *(void *)((char *)v61 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claimData) = v132;
        *(void *)((char *)v61 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_unverifiedClaimData) = v133;
        *(void *)((char *)v61 + v62) = v57;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        Swift::String v66 = (void *)((char *)v61 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_serviceName);
        uint64_t v67 = v134;
        *Swift::String v66 = v135;
        v66[1] = v67;
        *(void *)((char *)v61 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_acl) = v140;
        unint64_t v68 = v150;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v163 = *v68;
        *unint64_t v68 = 0x8000000000000000;
        sub_100563E20((uint64_t)v61, v63, v64, isUniquelyReferenced_nonNull_native);
        *unint64_t v68 = v163;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000C5E0(v136, v137);
        sub_10000C5E0(v147, v148);
        sub_10000C5E0(v145, v146);
        sub_10000C5E0(v143, v144);
        sub_10058EBD8((uint64_t)v156, type metadata accessor for VerifiedClaim);
        uint64_t v35 = ppStmt;
        int v70 = sqlite3_step(ppStmt);
        uint64_t v56 = v130;
        if (v70 != 100) {
          goto LABEL_38;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v160 + 104))(v155, enum case for DIPError.Code.jsonDecodingFailed(_:), v159);
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v114 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v115 = (*(unsigned __int8 *)(*(void *)v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v114 + 80);
      uint64_t v116 = swift_allocObject();
      *(_OWORD *)(v116 + 16) = xmmword_100610730;
      unint64_t v117 = v116 + v115;
      int v118 = (void *)(v117 + v114[14]);
      uint64_t v119 = enum case for DIPError.PropertyKey.databaseColumn(_:);
      uint64_t v120 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 104))(v117, v119, v120);
      v118[3] = &type metadata for String;
      *int v118 = 0x7461646D69616C63;
      v118[1] = 0xE900000000000061;
      sub_10015C504(v116);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
LABEL_44:
      sub_10000C5E0(v76, v78);
      goto LABEL_46;
    }
LABEL_38:
    uint64_t v103 = v149;
    defaultLogger()();
    uint64_t v104 = Logger.logObject.getter();
    os_log_type_t v105 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v104, v105))
    {
      uint64_t v106 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v106 = 0;
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "retrieved claim", v106, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v158 + 8))(v103, v157);
  }
LABEL_46:
  unint64_t v128 = ppStmt;
  return (void *)sqlite3_finalize(v128);
}

uint64_t sub_100577000(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(NSObject **)(v2 + 16);
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = &v13;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10058EB10;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = sub_1000E4EA0;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_100032314;
  aBlock[3] = &unk_100708F40;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = v13;
    swift_release();
    return (uint64_t)v11;
  }
  return result;
}

const char *sub_100577188(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v47 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v47 - v14;
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v16 = *(sqlite3 **)(a1 + 40);
  if (!v16)
  {
    sub_100569B60();
    uint64_t v16 = *(sqlite3 **)(a1 + 40);
    if (!v16)
    {
      defaultLogger()();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "coreidvd: unable to obtain sqlite database pointer", v45, 2u);
        swift_slowDealloc();
      }

      unint64_t v41 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
      os_log_type_t v42 = v15;
      return (const char *)v41(v42, v6);
    }
  }
  if (sqlite3_prepare_v3(v16, "SELECT providerid FROM dip_verifiedclaim where service_name = ?", -1, 0, &ppStmt, 0))
  {
    uint64_t result = sqlite3_errmsg(v16);
    if (result)
    {
      uint64_t v18 = String.init(cString:)();
      unint64_t v20 = v19;
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v47 = v6;
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v48 = sub_100110D58(v18, v20, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "coreidvd: failed to prepare select statement: %{public}s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return (const char *)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v47);
      }

      swift_bridgeObjectRelease_n();
      unint64_t v41 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
      os_log_type_t v42 = v10;
      return (const char *)v41(v42, v6);
    }
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v24 = ppStmt;
  if (qword_10071F5C8 != -1) {
    swift_once();
  }
  uint64_t v25 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v26 = String.utf8CString.getter();
  LODWORD(v25) = sqlite3_bind_text(v24, 1, (const char *)(v26 + 32), -1, v25);
  swift_release();
  if (!v25)
  {
    while (sqlite3_step(v24) == 100)
    {
      if (!sqlite3_column_text(v24, 0)) {
        __break(1u);
      }
      uint64_t v34 = String.init(cString:)();
      uint64_t v36 = v35;
      uint64_t v37 = *a4;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v37;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v37 = sub_10010F3C4(0, *((void *)v37 + 2) + 1, 1, v37);
        *a4 = v37;
      }
      unint64_t v40 = *((void *)v37 + 2);
      unint64_t v39 = *((void *)v37 + 3);
      if (v40 >= v39 >> 1)
      {
        uint64_t v37 = sub_10010F3C4((char *)(v39 > 1), v40 + 1, 1, v37);
        *a4 = v37;
      }
      *((void *)v37 + 2) = v40 + 1;
      os_log_type_t v33 = &v37[16 * v40];
      *((void *)v33 + 4) = v34;
      *((void *)v33 + 5) = v36;
    }
    uint64_t v46 = v24;
    return (const char *)sqlite3_finalize(v46);
  }
  uint64_t result = sqlite3_errmsg(v16);
  if (result)
  {
    uint64_t v27 = String.init(cString:)();
    unint64_t v29 = v28;
    defaultLogger()();
    swift_bridgeObjectRetain();
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v47 = v6;
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_100110D58(v27, v29, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "coreidvd: failure binding service_name: %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v47);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    }
    uint64_t v46 = ppStmt;
    return (const char *)sqlite3_finalize(v46);
  }
LABEL_31:
  __break(1u);
  return result;
}

const char *sub_100577794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v407 = a3;
  uint64_t v426 = (uint8_t *)a2;
  uint64_t v4 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v409 = (uint64_t)v390 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v412 = *(void *)(v6 - 8);
  uint64_t v413 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  v408 = (char *)v390 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v410 = (char *)v390 - v9;
  uint64_t v10 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v10 - 8);
  v418 = (char *)v390 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v419 = type metadata accessor for VerifiedClaim(0);
  __chkstk_darwin(v419);
  uint64_t v420 = (uint64_t)v390 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100723718);
  unint64_t v423 = *(void *)(v13 - 8);
  v424 = (uint8_t *)v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v390 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v427 = v16;
  uint64_t v428 = v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v401 = (char *)v390 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  v403 = (char *)v390 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v402 = (char *)v390 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v406 = (char *)v390 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v404 = (char *)v390 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v405 = (char *)v390 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v411 = (char *)v390 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v414 = (char *)v390 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (sqlite3_stmt *)((char *)v390 - v35);
  uint64_t v37 = __chkstk_darwin(v34);
  v415 = (char *)v390 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v416 = (char *)v390 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v417 = (char *)v390 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v422 = (char *)v390 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = (char *)v390 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)v390 - v49;
  uint64_t v51 = __chkstk_darwin(v48);
  uint64_t v53 = (char *)v390 - v52;
  __chkstk_darwin(v51);
  int v55 = (char *)v390 - v54;
  uint64_t v56 = type metadata accessor for DIPError.Code();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v429 = v56;
  uint64_t v430 = v57;
  __chkstk_darwin(v56);
  uint64_t v59 = (char *)v390 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v60 = *(sqlite3 **)(a1 + 40);
  if (!v60)
  {
    sub_100569B60();
    uint64_t v60 = *(sqlite3 **)(a1 + 40);
    if (!v60)
    {
      (*(void (**)(char *, void, uint64_t))(v430 + 104))(v59, enum case for DIPError.Code.databaseInaccessible(_:), v429);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_16:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
  }
  uint64_t v61 = v60;
  if (sqlite3_prepare_v3(v60, "INSERT INTO dip_verifiedclaim (providerid, tier, workflowid, claimid, claim, claimdata, unverified_claimdata, encrypted_claimdata, library_version, creation_date, delete_after, service_name, acl) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", -1, 0, &ppStmt, 0))
  {
    if (sqlite3_errmsg(v61))
    {
      uint64_t v62 = String.init(cString:)();
      unint64_t v64 = v63;
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc();
        uint64_t v426 = (uint8_t *)v62;
        unint64_t v68 = (uint8_t *)v67;
        uint64_t v69 = swift_slowAlloc();
        v425 = v59;
        *(void *)&v441[0] = v69;
        *(_DWORD *)unint64_t v68 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v432 = sub_100110D58((uint64_t)v426, v64, (uint64_t *)v441);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "coreidvd: failed to prepare insert statement %{public}s", v68, 0xCu);
        swift_arrayDestroy();
        uint64_t v59 = v425;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v428 + 8))(v55, v427);
      (*(void (**)(char *, void, uint64_t))(v430 + 104))(v59, enum case for DIPError.Code.internalError(_:), v429);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
    __break(1u);
LABEL_99:
    uint64_t v298 = v409;
    sub_100048D6C(v407, v409, &qword_1007239B0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v412 + 48))(v298, 1, v413) == 1)
    {
      sub_10000C6CC(v409, &qword_1007239B0);
      if (sqlite3_bind_null(ppStmt, 11))
      {
        uint64_t result = sqlite3_errmsg(v400);
        if (result)
        {
          uint64_t v299 = String.init(cString:)();
          uint64_t v301 = v300;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          unint64_t v302 = Logger.logObject.getter();
          os_log_type_t v303 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v302, v303))
          {
            uint64_t v304 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v432 = swift_slowAlloc();
            *(_DWORD *)uint64_t v304 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v431 = sub_100110D58(v299, (unint64_t)v301, (uint64_t *)&v432);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v302, v303, "coreidvd: failure binding null deleteAfter: %{public}s", v304, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v428 + 8))(v404, v427);
          *(void *)&long long v432 = 0;
          *((void *)&v432 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          swift_bridgeObjectRelease();
          *(void *)&long long v432 = 0xD00000000000002CLL;
          *((void *)&v432 + 1) = 0x8000000100658080;
          v328._uint64_t countAndFlagsBits = v299;
          v328._object = v301;
          String.append(_:)(v328);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
          sub_100007764((uint64_t *)&unk_1007225C0);
          unint64_t v329 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v330 = (*(unsigned __int8 *)(*(void *)v329 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v329 + 80);
          uint64_t v331 = swift_allocObject();
          *(_OWORD *)(v331 + 16) = xmmword_100610730;
          unint64_t v332 = v331 + v330;
          unint64_t v333 = v332 + v329[14];
          uint64_t v334 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v335 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v335 - 8) + 104))(v332, v334, v335);
          int v336 = sqlite3_errcode(v400);
          *(void *)(v333 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v333 = v336;
          sub_10015C504(v331);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
LABEL_106:
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_10000C5F4(v391, v392);
          sub_10000C5F4(v393, v394);
          sub_10000C5F4(v395, v396);
          sub_10000C5F4((uint64_t)v399, v419);
          return (const char *)sqlite3_finalize(ppStmt);
        }
        goto LABEL_147;
      }
      goto LABEL_114;
    }
    goto LABEL_108;
  }
  int v398 = v36;
  uint64_t v399 = v47;
  v400 = v61;
  v425 = v59;
  int v70 = ppStmt;
  uint64_t v71 = qword_10071F5C8;
  swift_bridgeObjectRetain();
  if (v71 != -1) {
    swift_once();
  }
  uint64_t v36 = (sqlite3_stmt *)&unk_100760000;
  uint64_t v72 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v73 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v74 = sqlite3_bind_text(v70, 1, (const char *)(v73 + 32), -1, v72);
  swift_release();
  if (v74)
  {
    if (!sqlite3_errmsg(v400))
    {
      __break(1u);
LABEL_108:
      (*(void (**)(char *, uint64_t, uint64_t))(v412 + 32))(v408, v409, v413);
      Date.timeIntervalSinceReferenceDate.getter();
      if (sqlite3_bind_double(v36, 11, v314))
      {
        uint64_t result = sqlite3_errmsg(v400);
        if (result)
        {
          uint64_t v426 = (uint8_t *)String.init(cString:)();
          unint64_t v316 = v315;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v317 = Logger.logObject.getter();
          os_log_type_t v318 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v317, v318))
          {
            unint64_t v319 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v432 = swift_slowAlloc();
            *(_DWORD *)unint64_t v319 = 136446210;
            v424 = v319 + 4;
            swift_bridgeObjectRetain();
            uint64_t v431 = sub_100110D58((uint64_t)v426, (unint64_t)v316, (uint64_t *)&v432);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v317, v318, "coreidvd: failure binding deleteAfter: %{public}s", v319, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v428 + 8))(v405, v427);
          *(void *)&long long v432 = 0;
          *((void *)&v432 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(41);
          swift_bridgeObjectRelease();
          *(void *)&long long v432 = 0xD000000000000027;
          *((void *)&v432 + 1) = 0x8000000100658100;
          v337._uint64_t countAndFlagsBits = (uint64_t)v426;
          v337._object = v316;
          String.append(_:)(v337);
          swift_bridgeObjectRelease();
          uint64_t v428 = v432;
          (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
          sub_100007764((uint64_t *)&unk_1007225C0);
          v338 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v339 = (*(unsigned __int8 *)(*(void *)v338 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v338 + 80);
          uint64_t v340 = swift_allocObject();
          *(_OWORD *)(v340 + 16) = xmmword_100610730;
          unint64_t v341 = v340 + v339;
          unint64_t v342 = v341 + v338[14];
          uint64_t v343 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v344 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v344 - 8) + 104))(v341, v343, v344);
          int v345 = sqlite3_errcode(v400);
          *(void *)(v342 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v342 = v345;
          sub_10015C504(v340);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_10000C5F4(v391, v392);
          sub_10000C5F4(v393, v394);
          sub_10000C5F4(v395, v396);
          sub_10000C5F4((uint64_t)v399, v419);
          ((void (*)(char *, uint64_t))v50)(v408, v413);
          return (const char *)sqlite3_finalize(ppStmt);
        }
        goto LABEL_148;
      }
      goto LABEL_113;
    }
    uint64_t v75 = String.init(cString:)();
    unint64_t v77 = v76;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      uint64_t v426 = (uint8_t *)v75;
      unint64_t v81 = (uint8_t *)v80;
      *(void *)&v441[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v81 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)&long long v432 = sub_100110D58((uint64_t)v426, (unint64_t)v77, (uint64_t *)v441);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "coreidvd: failure binding providerid: %{public}s", v81, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v75 = (uint64_t)v426;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v428 + 8))(v53, v427);
    uint64_t v92 = v425;
    uint64_t v93 = v430;
    *(void *)&v441[0] = 0;
    *((void *)&v441[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(void *)&v441[0] = 0xD00000000000002BLL;
    *((void *)&v441[0] + 1) = 0x8000000100658250;
    v94._uint64_t countAndFlagsBits = v75;
    v94._object = v77;
    String.append(_:)(v94);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v93 + 104))(v92, enum case for DIPError.Code.sqliteError(_:), v429);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v95 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v96 = (*(unsigned __int8 *)(*(void *)v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v95 + 80);
    uint64_t v97 = swift_allocObject();
    *(_OWORD *)(v97 + 16) = xmmword_100610730;
    unint64_t v98 = v97 + v96;
    unint64_t v99 = v98 + v95[14];
    uint64_t v100 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v101 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 104))(v98, v100, v101);
    int v102 = sqlite3_errcode(v400);
    *(void *)(v99 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v99 = v102;
    sub_10015C504(v97);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_39;
  }
  uint64_t v83 = (uint64_t)v426;
  unint64_t v84 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v85 = String.utf8CString.getter();
  LODWORD(v84) = sqlite3_bind_text(v70, 2, (const char *)(v85 + 32), -1, v84);
  swift_release();
  if (v84)
  {
    if (!sqlite3_errmsg(v400))
    {
      __break(1u);
LABEL_113:
      ((void (*)(char *, uint64_t))v50)(v408, v413);
LABEL_114:
      uint64_t v36 = ppStmt;
      uint64_t v320 = (void (__cdecl *)(void *))qword_100760860;
      uint64_t v321 = String.utf8CString.getter();
      LODWORD(v320) = sqlite3_bind_text(v36, 12, (const char *)(v321 + 32), -1, v320);
      swift_release();
      if (v320)
      {
        uint64_t result = sqlite3_errmsg(v400);
        if (result)
        {
          uint64_t v322 = String.init(cString:)();
          uint64_t v324 = v323;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v325 = Logger.logObject.getter();
          os_log_type_t v326 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v325, v326))
          {
            Swift::String v327 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v432 = swift_slowAlloc();
            *(_DWORD *)Swift::String v327 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v431 = sub_100110D58(v322, (unint64_t)v324, (uint64_t *)&v432);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v325, v326, "coreidvd: failure binding serviceName: %{public}s", v327, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v428 + 8))(v406, v427);
          *(void *)&long long v432 = 0;
          *((void *)&v432 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          swift_bridgeObjectRelease();
          *(void *)&long long v432 = 0xD00000000000002CLL;
          *((void *)&v432 + 1) = 0x8000000100657870;
          v354._uint64_t countAndFlagsBits = v322;
          v354._object = v324;
          String.append(_:)(v354);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
          sub_100007764((uint64_t *)&unk_1007225C0);
          os_log_type_t v355 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v356 = (*(unsigned __int8 *)(*(void *)v355 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v355 + 80);
          uint64_t v357 = swift_allocObject();
          *(_OWORD *)(v357 + 16) = xmmword_100610730;
          unint64_t v358 = v357 + v356;
          unint64_t v359 = v358 + v355[14];
          uint64_t v360 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v361 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v361 - 8) + 104))(v358, v360, v361);
          int v362 = sqlite3_errcode(v400);
          *(void *)(v359 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v359 = v362;
          sub_10015C504(v357);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_106;
        }
        goto LABEL_149;
      }
      *(void *)&long long v432 = *(void *)&v426[OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_acl];
      swift_bridgeObjectRetain();
      sub_100007764(&qword_1007268F0);
      sub_1000B6120((unint64_t *)&qword_100730CB0, &qword_1007268F0);
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      v346 = (void (__cdecl *)(void *))qword_100760860;
      uint64_t v347 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      LODWORD(v346) = sqlite3_bind_text(v36, 13, (const char *)(v347 + 32), -1, v346);
      swift_release();
      if (v346)
      {
        uint64_t result = sqlite3_errmsg(v400);
        if (result)
        {
          uint64_t v348 = String.init(cString:)();
          v350 = v349;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v351 = Logger.logObject.getter();
          os_log_type_t v352 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v351, v352))
          {
            v353 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v432 = swift_slowAlloc();
            *(_DWORD *)v353 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v431 = sub_100110D58(v348, (unint64_t)v350, (uint64_t *)&v432);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v351, v352, "coreidvd: failure binding acl: %{public}s", v353, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v428 + 8))(v402, v427);
          *(void *)&long long v432 = 0;
          *((void *)&v432 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          *(void *)&long long v432 = 0xD000000000000024;
          *((void *)&v432 + 1) = 0x80000001006580B0;
          v366._uint64_t countAndFlagsBits = v348;
          v366._object = v350;
          String.append(_:)(v366);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
          sub_100007764((uint64_t *)&unk_1007225C0);
          uint64_t v367 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v368 = (*(unsigned __int8 *)(*(void *)v367 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v367 + 80);
          uint64_t v369 = swift_allocObject();
          *(_OWORD *)(v369 + 16) = xmmword_100610730;
          unint64_t v370 = v369 + v368;
          unint64_t v371 = v370 + v367[14];
          uint64_t v372 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v373 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v373 - 8) + 104))(v370, v372, v373);
          int v374 = sqlite3_errcode(v400);
          *(void *)(v371 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v371 = v374;
          sub_10015C504(v369);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_106;
        }
        goto LABEL_150;
      }
      goto LABEL_129;
    }
    uint64_t v86 = String.init(cString:)();
    unint64_t v88 = v87;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = (uint8_t *)swift_slowAlloc();
      *(void *)&v441[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v91 = 136446210;
      uint64_t v426 = v91 + 4;
      swift_bridgeObjectRetain();
      *(void *)&long long v432 = sub_100110D58(v86, (unint64_t)v88, (uint64_t *)v441);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "coreidvd: failure binding tier: %{public}s", v91, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v428 + 8))(v50, v427);
    uint64_t v112 = v425;
    uint64_t v114 = v429;
    uint64_t v113 = v430;
    *(void *)&v441[0] = 0;
    *((void *)&v441[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&v441[0] = 0xD000000000000025;
    *((void *)&v441[0] + 1) = 0x8000000100658280;
    v115._uint64_t countAndFlagsBits = v86;
    v115._object = v88;
    String.append(_:)(v115);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v113 + 104))(v112, enum case for DIPError.Code.sqliteError(_:), v114);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v116 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v117 = (*(unsigned __int8 *)(*(void *)v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v116 + 80);
    uint64_t v118 = swift_allocObject();
    *(_OWORD *)(v118 + 16) = xmmword_100610730;
    unint64_t v119 = v118 + v117;
    unint64_t v120 = v119 + v116[14];
    uint64_t v121 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v122 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v122 - 8) + 104))(v119, v121, v122);
    int v123 = sqlite3_errcode(v400);
    *(void *)(v120 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v120 = v123;
    sub_10015C504(v118);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_39;
  }
  uint64_t v103 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v104 = String.utf8CString.getter();
  LODWORD(v103) = sqlite3_bind_text(v70, 3, (const char *)(v104 + 32), -1, v103);
  swift_release();
  if (!v103)
  {
    unint64_t v124 = v70;
    uint64_t v125 = v83 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim;
    unint64_t v127 = v423;
    uint64_t v126 = v424;
    (*(void (**)(char *, uint64_t, uint8_t *))(v423 + 16))(v15, v83 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim, v424);
    JWSSignedJSON.payload.getter();
    (*(void (**)(char *, uint8_t *))(v127 + 8))(v15, v126);
    v441[6] = v438;
    v441[7] = v439;
    uint64_t v442 = v440;
    v441[0] = v432;
    v441[1] = v433;
    v441[2] = v434;
    v441[3] = v435;
    v441[4] = v436;
    v441[5] = v437;
    swift_bridgeObjectRetain();
    sub_1001D6030((uint64_t)v441);
    unint64_t v128 = (void (__cdecl *)(void *))qword_100760860;
    uint64_t v129 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    LODWORD(v126) = sqlite3_bind_text(v124, 4, (const char *)(v129 + 32), -1, v128);
    swift_release();
    if (v126)
    {
      if (!sqlite3_errmsg(v400))
      {
        __break(1u);
        goto LABEL_136;
      }
      uint64_t v130 = String.init(cString:)();
      uint64_t v132 = v131;
      uint64_t v133 = v422;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v134 = Logger.logObject.getter();
      os_log_type_t v135 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v134, v135))
      {
        uint64_t v136 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v432 = swift_slowAlloc();
        *(_DWORD *)uint64_t v136 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v431 = sub_100110D58(v130, (unint64_t)v132, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v134, v135, "coreidvd: failure binding claimid: %{public}s", v136, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v428 + 8))(v422, v427);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v428 + 8))(v133, v427);
      }
      uint64_t v153 = v425;
      uint64_t v154 = v429;
      *(void *)&long long v432 = 0;
      *((void *)&v432 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      *(void *)&long long v432 = 0xD000000000000028;
      *((void *)&v432 + 1) = 0x8000000100657F40;
      v155._uint64_t countAndFlagsBits = v130;
      v155._object = v132;
      String.append(_:)(v155);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v430 + 104))(v153, enum case for DIPError.Code.sqliteError(_:), v154);
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v156 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v157 = (*(unsigned __int8 *)(*(void *)v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v156 + 80);
      uint64_t v158 = swift_allocObject();
      *(_OWORD *)(v158 + 16) = xmmword_100610730;
      unint64_t v159 = v158 + v157;
      unint64_t v160 = v159 + v156[14];
      uint64_t v161 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v162 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 104))(v159, v161, v162);
      int v163 = sqlite3_errcode(v400);
      *(void *)(v160 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v160 = v163;
      sub_10015C504(v158);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_39;
    }
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v149 = v420;
    sub_1004D1F28(v125, v420);
    sub_10058EE04(&qword_10072CC70, (void (*)(uint64_t))type metadata accessor for VerifiedClaim);
    uint64_t v150 = v421;
    uint64_t v151 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    if (v150)
    {
      sub_10058EBD8(v149, type metadata accessor for VerifiedClaim);
      swift_release();
      return (const char *)sqlite3_finalize(ppStmt);
    }
    uint64_t v164 = v151;
    unint64_t v165 = v152;
    sub_10058EBD8(v149, type metadata accessor for VerifiedClaim);
    swift_release();
    *(void *)&long long v432 = v164;
    *((void *)&v432 + 1) = v165;
    static String.Encoding.utf8.getter();
    unint64_t v423 = sub_100307514();
    uint64_t v422 = (char *)String.init<A>(bytes:encoding:)();
    v424 = v166;
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)&long long v432 = *(void *)(v83 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claimData);
    swift_bridgeObjectRetain();
    sub_100007764(&qword_1007264A0);
    sub_1001D5E1C();
    uint64_t v167 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v399 = (char *)v164;
    unint64_t v419 = v165;
    uint64_t v168 = v167;
    unint64_t v170 = v169;
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)&long long v432 = v168;
    *((void *)&v432 + 1) = v170;
    static String.Encoding.utf8.getter();
    uint64_t v397 = String.init<A>(bytes:encoding:)();
    uint64_t v420 = v171;
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)&long long v432 = *(void *)&v426[OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_unverifiedClaimData];
    swift_bridgeObjectRetain();
    uint64_t v172 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v421 = 0;
    uint64_t v173 = v172;
    uint64_t v395 = v168;
    unint64_t v396 = v170;
    unint64_t v175 = v174;
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)&long long v432 = v173;
    *((void *)&v432 + 1) = v175;
    static String.Encoding.utf8.getter();
    uint64_t v176 = String.init<A>(bytes:encoding:)();
    uint64_t v178 = v177;
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)&long long v432 = *(void *)&v426[OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData];
    swift_bridgeObjectRetain();
    sub_100007764(&qword_100733220);
    sub_10058ECE4();
    uint64_t v179 = v421;
    uint64_t v180 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v421 = v179;
    if (v179)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_10000C5F4(v173, v175);
      sub_10000C5F4(v395, v396);
      sub_10000C5F4((uint64_t)v399, v419);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (const char *)sqlite3_finalize(ppStmt);
    }
    unint64_t v182 = v181;
    v390[1] = v176;
    uint64_t v393 = v173;
    uint64_t v183 = v180;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v391 = v183;
    unint64_t v392 = v182;
    *(void *)&long long v432 = v183;
    *((void *)&v432 + 1) = v182;
    static String.Encoding.utf8.getter();
    unint64_t v423 = String.init<A>(bytes:encoding:)();
    uint64_t v185 = v184;
    os_log_type_t v186 = ppStmt;
    uint64_t v187 = (void (__cdecl *)(void *))qword_100760860;
    if (v424)
    {
      uint64_t v188 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      Swift::String v189 = (const char *)(v188 + 32);
    }
    else
    {
      Swift::String v189 = 0;
    }
    int v190 = sqlite3_bind_text(v186, 5, v189, -1, v187);
    swift_unknownObjectRelease();
    unint64_t v394 = v175;
    if (v190)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = sqlite3_errmsg(v400);
      if (result)
      {
        uint64_t v426 = (uint8_t *)String.init(cString:)();
        uint64_t v192 = v191;
        unint64_t v193 = v417;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        unint64_t v194 = Logger.logObject.getter();
        os_log_type_t v195 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v194, v195))
        {
          uint64_t v196 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v432 = swift_slowAlloc();
          *(_DWORD *)uint64_t v196 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v431 = sub_100110D58((uint64_t)v426, (unint64_t)v192, (uint64_t *)&v432);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v194, v195, "coreidvd: failure binding claim: %{public}s", v196, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v428 + 8))(v193, v427);
        *(void *)&long long v432 = 0;
        *((void *)&v432 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(40);
        swift_bridgeObjectRelease();
        *(void *)&long long v432 = 0xD000000000000026;
        *((void *)&v432 + 1) = 0x8000000100657F70;
        v200._uint64_t countAndFlagsBits = (uint64_t)v426;
        v200._object = v192;
        String.append(_:)(v200);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v201 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v202 = (*(unsigned __int8 *)(*(void *)v201 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v201 + 80);
        uint64_t v203 = swift_allocObject();
        *(_OWORD *)(v203 + 16) = xmmword_100610730;
        unint64_t v204 = v203 + v202;
        unint64_t v205 = v204 + v201[14];
        uint64_t v206 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v207 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v207 - 8) + 104))(v204, v206, v207);
        int v208 = sqlite3_errcode(v400);
        *(void *)(v205 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v205 = v208;
        sub_10015C504(v203);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_106;
      }
      __break(1u);
      goto LABEL_142;
    }
    int v197 = (void (__cdecl *)(void *))qword_100760860;
    if (v420)
    {
      uint64_t v198 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v199 = (const char *)(v198 + 32);
    }
    else
    {
      uint64_t v199 = 0;
    }
    int v209 = sqlite3_bind_text(v186, 6, v199, -1, v197);
    swift_unknownObjectRelease();
    if (v209)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = sqlite3_errmsg(v400);
      if (result)
      {
        uint64_t v210 = String.init(cString:)();
        uint64_t v212 = v211;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        unint64_t v213 = Logger.logObject.getter();
        os_log_type_t v214 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v213, v214))
        {
          uint64_t v215 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v432 = swift_slowAlloc();
          *(_DWORD *)uint64_t v215 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v431 = sub_100110D58(v210, (unint64_t)v212, (uint64_t *)&v432);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v213, v214, "coreidvd: failure binding claimdata: %{public}s", v215, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v428 + 8))(v416, v427);
        *(void *)&long long v432 = 0;
        *((void *)&v432 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(44);
        swift_bridgeObjectRelease();
        *(void *)&long long v432 = 0xD00000000000002ALL;
        *((void *)&v432 + 1) = 0x8000000100657FA0;
        v219._uint64_t countAndFlagsBits = v210;
        v219._object = v212;
        String.append(_:)(v219);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
        sub_100007764((uint64_t *)&unk_1007225C0);
        double v220 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v221 = (*(unsigned __int8 *)(*(void *)v220 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v220 + 80);
        uint64_t v222 = swift_allocObject();
        *(_OWORD *)(v222 + 16) = xmmword_100610730;
        unint64_t v223 = v222 + v221;
        unint64_t v224 = v223 + v220[14];
        uint64_t v225 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v226 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v226 - 8) + 104))(v223, v225, v226);
        int v227 = sqlite3_errcode(v400);
        *(void *)(v224 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v224 = v227;
        sub_10015C504(v222);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_106;
      }
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    uint64_t v216 = (void (__cdecl *)(void *))qword_100760860;
    if (v178)
    {
      uint64_t v217 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      v218 = (const char *)(v217 + 32);
    }
    else
    {
      v218 = 0;
    }
    int v228 = sqlite3_bind_text(v186, 7, v218, -1, v216);
    swift_unknownObjectRelease();
    if (v228)
    {
      swift_bridgeObjectRelease();
      uint64_t result = sqlite3_errmsg(v400);
      if (result)
      {
        uint64_t v229 = String.init(cString:)();
        unint64_t v231 = v230;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v232 = Logger.logObject.getter();
        os_log_type_t v233 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v232, v233))
        {
          unint64_t v234 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v432 = swift_slowAlloc();
          *(_DWORD *)unint64_t v234 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v431 = sub_100110D58(v229, (unint64_t)v231, (uint64_t *)&v432);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v232, v233, "coreidvd: failure binding unverifiedClaimdata: %{public}s", v234, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v428 + 8))(v415, v427);
        *(void *)&long long v432 = 0;
        *((void *)&v432 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v238._uint64_t countAndFlagsBits = 0xD000000000000034;
        v238._object = (void *)0x80000001006582E0;
        String.append(_:)(v238);
        v239._uint64_t countAndFlagsBits = v229;
        v239._object = v231;
        String.append(_:)(v239);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v240 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v241 = (*(unsigned __int8 *)(*(void *)v240 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v240 + 80);
        uint64_t v242 = swift_allocObject();
        *(_OWORD *)(v242 + 16) = xmmword_100610730;
        unint64_t v243 = v242 + v241;
        unint64_t v244 = v243 + v240[14];
        uint64_t v245 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v246 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v246 - 8) + 104))(v243, v245, v246);
        int v247 = sqlite3_errcode(v400);
        *(void *)(v244 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v244 = v247;
        sub_10015C504(v242);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_106;
      }
      goto LABEL_143;
    }
    uint64_t v235 = (void (__cdecl *)(void *))qword_100760860;
    if (v185)
    {
      uint64_t v236 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      int v237 = (const char *)(v236 + 32);
    }
    else
    {
      int v237 = 0;
    }
    int v248 = sqlite3_bind_text(v186, 8, v237, -1, v235);
    swift_unknownObjectRelease();
    if (v248)
    {
      uint64_t result = sqlite3_errmsg(v400);
      if (result)
      {
        uint64_t v249 = String.init(cString:)();
        unint64_t v251 = v250;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v252 = Logger.logObject.getter();
        os_log_type_t v253 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v252, v253))
        {
          int v254 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v432 = swift_slowAlloc();
          *(_DWORD *)int v254 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v431 = sub_100110D58(v249, (unint64_t)v251, (uint64_t *)&v432);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v252, v253, "coreidvd: failure binding encryptedClaimdata: %{public}s", v254, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(sqlite3_stmt *, uint64_t))(v428 + 8))(v398, v427);
        *(void *)&long long v432 = 0;
        *((void *)&v432 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(53);
        v260._uint64_t countAndFlagsBits = 0xD000000000000033;
        v260._object = (void *)0x8000000100658320;
        String.append(_:)(v260);
        v261._uint64_t countAndFlagsBits = v249;
        v261._object = v251;
        String.append(_:)(v261);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
        sub_100007764((uint64_t *)&unk_1007225C0);
        v262 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v263 = (*(unsigned __int8 *)(*(void *)v262 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v262 + 80);
        uint64_t v264 = swift_allocObject();
        *(_OWORD *)(v264 + 16) = xmmword_100610730;
        unint64_t v265 = v264 + v263;
        unint64_t v266 = v265 + v262[14];
        uint64_t v267 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v268 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v268 - 8) + 104))(v265, v267, v268);
        int v269 = sqlite3_errcode(v400);
        *(void *)(v266 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v266 = v269;
        sub_10015C504(v264);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_106;
      }
      goto LABEL_144;
    }
    id v255 = [self mainBundle];
    id v256 = [v255 infoDictionary];

    if (v256)
    {
      uint64_t v257 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v257 + 16) && (unint64_t v258 = sub_100590548(0x656C646E75424643, 0xEF6E6F6973726556), (v259 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v257 + 56) + 32 * v258, (uint64_t)&v432);
      }
      else
      {
        long long v432 = 0u;
        long long v433 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v433 + 1))
      {
        swift_dynamicCast();
LABEL_88:
        uint64_t v270 = ppStmt;
        int v271 = (void (__cdecl *)(void *))qword_100760860;
        uint64_t v272 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        int v273 = sqlite3_bind_text(v270, 9, (const char *)(v272 + 32), -1, v271);
        swift_release();
        if (!v273)
        {
          uint64_t v280 = v410;
          Date.init()();
          Date.timeIntervalSinceReferenceDate.getter();
          double v282 = v281;
          uint64_t v50 = *(char **)(v412 + 8);
          ((void (*)(char *, uint64_t))v50)(v280, v413);
          uint64_t v36 = ppStmt;
          if (!sqlite3_bind_double(ppStmt, 10, v282)) {
            goto LABEL_99;
          }
          uint64_t result = sqlite3_errmsg(v400);
          if (result)
          {
            uint64_t v283 = String.init(cString:)();
            v285 = v284;
            defaultLogger()();
            swift_bridgeObjectRetain_n();
            v286 = Logger.logObject.getter();
            os_log_type_t v287 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v286, v287))
            {
              os_log_type_t v288 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long v432 = swift_slowAlloc();
              *(_DWORD *)os_log_type_t v288 = 136446210;
              swift_bridgeObjectRetain();
              uint64_t v431 = sub_100110D58(v283, (unint64_t)v285, (uint64_t *)&v432);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v286, v287, "coreidvd: failure binding date: %{public}s", v288, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            (*(void (**)(char *, uint64_t))(v428 + 8))(v411, v427);
            *(void *)&long long v432 = 0;
            *((void *)&v432 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(39);
            swift_bridgeObjectRelease();
            *(void *)&long long v432 = 0xD000000000000025;
            *((void *)&v432 + 1) = 0x8000000100658360;
            v305._uint64_t countAndFlagsBits = v283;
            v305._object = v285;
            String.append(_:)(v305);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
            sub_100007764((uint64_t *)&unk_1007225C0);
            int v306 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            unint64_t v307 = (*(unsigned __int8 *)(*(void *)v306 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v306 + 80);
            uint64_t v308 = swift_allocObject();
            *(_OWORD *)(v308 + 16) = xmmword_100610730;
            unint64_t v309 = v308 + v307;
            unint64_t v310 = v309 + v306[14];
            uint64_t v311 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
            uint64_t v312 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v312 - 8) + 104))(v309, v311, v312);
            int v313 = sqlite3_errcode(v400);
            *(void *)(v310 + 24) = &type metadata for Int32;
            *(_DWORD *)unint64_t v310 = v313;
            sub_10015C504(v308);
            type metadata accessor for DIPError();
            sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            goto LABEL_106;
          }
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        uint64_t result = sqlite3_errmsg(v400);
        if (result)
        {
          uint64_t v274 = String.init(cString:)();
          unint64_t v276 = v275;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v277 = Logger.logObject.getter();
          os_log_type_t v278 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v277, v278))
          {
            unint64_t v279 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v432 = swift_slowAlloc();
            *(_DWORD *)unint64_t v279 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v431 = sub_100110D58(v274, (unint64_t)v276, (uint64_t *)&v432);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v277, v278, "coreidvd: failure binding idvVersion: %{public}s", v279, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v428 + 8))(v414, v427);
          *(void *)&long long v432 = 0;
          *((void *)&v432 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          swift_bridgeObjectRelease();
          *(void *)&long long v432 = 0xD00000000000002BLL;
          *((void *)&v432 + 1) = 0x8000000100657840;
          v289._uint64_t countAndFlagsBits = v274;
          v289._object = v276;
          String.append(_:)(v289);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
          sub_100007764((uint64_t *)&unk_1007225C0);
          v290 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v291 = (*(unsigned __int8 *)(*(void *)v290 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v290 + 80);
          uint64_t v292 = swift_allocObject();
          *(_OWORD *)(v292 + 16) = xmmword_100610730;
          unint64_t v293 = v292 + v291;
          unint64_t v294 = v293 + v290[14];
          uint64_t v295 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v296 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v296 - 8) + 104))(v293, v295, v296);
          int v297 = sqlite3_errcode(v400);
          *(void *)(v294 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v294 = v297;
          sub_10015C504(v292);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_106;
        }
LABEL_145:
        __break(1u);
        goto LABEL_146;
      }
    }
    else
    {
      long long v432 = 0u;
      long long v433 = 0u;
    }
    sub_10000C6CC((uint64_t)&v432, (uint64_t *)&unk_100727200);
    goto LABEL_88;
  }
  if (sqlite3_errmsg(v400))
  {
    uint64_t v105 = String.init(cString:)();
    unint64_t v107 = v106;
    uint64_t v108 = (uint64_t)v399;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      *(void *)&v441[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v111 = 136446210;
      uint64_t v426 = v111 + 4;
      swift_bridgeObjectRetain();
      *(void *)&long long v432 = sub_100110D58(v105, (unint64_t)v107, (uint64_t *)v441);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "coreidvd: failure binding workflowid: %{public}s", v111, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v428 + 8))(v108, v427);
    unint64_t v137 = v425;
    uint64_t v139 = v429;
    uint64_t v138 = v430;
    *(void *)&v441[0] = 0;
    *((void *)&v441[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(void *)&v441[0] = 0xD00000000000002BLL;
    *((void *)&v441[0] + 1) = 0x80000001006582B0;
    v140._uint64_t countAndFlagsBits = v105;
    v140._object = v107;
    String.append(_:)(v140);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v138 + 104))(v137, enum case for DIPError.Code.sqliteError(_:), v139);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v141 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v142 = (*(unsigned __int8 *)(*(void *)v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v141 + 80);
    uint64_t v143 = swift_allocObject();
    *(_OWORD *)(v143 + 16) = xmmword_100610730;
    unint64_t v144 = v143 + v142;
    unint64_t v145 = v144 + v141[14];
    uint64_t v146 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v147 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v147 - 8) + 104))(v144, v146, v147);
    int v148 = sqlite3_errcode(v400);
    *(void *)(v145 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v145 = v148;
    sub_10015C504(v143);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_39:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (const char *)sqlite3_finalize(ppStmt);
  }
  __break(1u);
LABEL_129:
  if (sqlite3_step(v36) == 101)
  {
    defaultLogger()();
    uint64_t v363 = Logger.logObject.getter();
    os_log_type_t v364 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v363, v364))
    {
      unint64_t v365 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v365 = 0;
      _os_log_impl((void *)&_mh_execute_header, v363, v364, "coredivd: Stored new claim", v365, 2u);
      swift_slowDealloc();
    }
    sub_10000C5F4(v391, v392);
    sub_10000C5F4(v393, v394);
    sub_10000C5F4(v395, v396);
    sub_10000C5F4((uint64_t)v399, v419);

    (*(void (**)(char *, uint64_t))(v428 + 8))(v401, v427);
    return (const char *)sqlite3_finalize(ppStmt);
  }
LABEL_136:
  uint64_t result = sqlite3_errmsg(v400);
  if (result)
  {
    uint64_t v375 = String.init(cString:)();
    int v377 = v376;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v378 = Logger.logObject.getter();
    os_log_type_t v379 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v378, v379))
    {
      v380 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v432 = swift_slowAlloc();
      *(_DWORD *)v380 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v431 = sub_100110D58(v375, (unint64_t)v377, (uint64_t *)&v432);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v378, v379, "coreidvd: failure inserting claim to sqlite: %{public}s", v380, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v428 + 8))(v403, v427);
    *(void *)&long long v432 = 0;
    *((void *)&v432 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v432 = 0xD000000000000021;
    *((void *)&v432 + 1) = 0x8000000100658390;
    v381._uint64_t countAndFlagsBits = v375;
    v381._object = v377;
    String.append(_:)(v381);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v430 + 104))(v425, enum case for DIPError.Code.sqliteError(_:), v429);
    sub_100007764((uint64_t *)&unk_1007225C0);
    v382 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v383 = (*(unsigned __int8 *)(*(void *)v382 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v382 + 80);
    uint64_t v384 = swift_allocObject();
    *(_OWORD *)(v384 + 16) = xmmword_100610730;
    unint64_t v385 = v384 + v383;
    unint64_t v386 = v385 + v382[14];
    uint64_t v387 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v388 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v388 - 8) + 104))(v385, v387, v388);
    int v389 = sqlite3_errcode(v400);
    *(void *)(v386 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v386 = v389;
    sub_10015C504(v384);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_106;
  }
LABEL_151:
  __break(1u);
  return result;
}

const char *sub_10057BF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v396 = a3;
  uint64_t v414 = (uint8_t *)a2;
  uint64_t v4 = sub_100007764(&qword_1007239B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v398 = (uint64_t)&v377 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v401 = *(void *)(v6 - 8);
  uint64_t v402 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v397 = (char *)&v377 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v399 = (char *)&v377 - v9;
  uint64_t v10 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v10 - 8);
  v408 = (char *)&v377 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v409 = type metadata accessor for VerifiedClaim(0);
  __chkstk_darwin(v409);
  uint64_t v410 = (uint64_t)&v377 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100007764(&qword_100723718);
  uint64_t v412 = *(uint8_t **)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v377 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v415 = v16;
  uint64_t v416 = v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v388 = (char *)&v377 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  Swift::String v390 = (char *)&v377 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  int v389 = (char *)&v377 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v391 = (char *)&v377 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  unint64_t v392 = (char *)&v377 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v393 = (char *)&v377 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v394 = (char *)&v377 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v395 = (char *)&v377 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v400 = (char *)&v377 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v403 = (char *)&v377 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v404 = (char *)&v377 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v405 = (char *)&v377 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v406 = (char *)&v377 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v407 = (char *)&v377 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v377 - v47;
  uint64_t v49 = __chkstk_darwin(v46);
  uint64_t v51 = (char *)&v377 - v50;
  __chkstk_darwin(v49);
  uint64_t v53 = (char *)&v377 - v52;
  uint64_t v54 = type metadata accessor for DIPError.Code();
  uint64_t v417 = *(void *)(v54 - 8);
  uint64_t v418 = v54;
  __chkstk_darwin(v54);
  uint64_t v56 = (char *)&v377 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v57 = *(sqlite3 **)(a1 + 40);
  if (!v57)
  {
    sub_100569B60();
    uint64_t v57 = *(sqlite3 **)(a1 + 40);
    if (!v57)
    {
      (*(void (**)(char *, void, uint64_t))(v417 + 104))(v56, enum case for DIPError.Code.databaseInaccessible(_:), v418);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_16:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
  }
  if (sqlite3_prepare_v3(v57, "UPDATE dip_verifiedclaim SET workflowid = ? , claimid = ? , claim = ? , claimdata = ? , unverified_claimdata = ? , encrypted_claimdata = ? , library_version = ? , update_date = ? , delete_after = ? , service_name = ? , acl = ? where providerid = ? AND tier = ?", -1, 0, &ppStmt, 0))
  {
    if (sqlite3_errmsg(v57))
    {
      uint64_t v58 = String.init(cString:)();
      unint64_t v60 = v59;
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v413 = v56;
        uint64_t v63 = swift_slowAlloc();
        uint64_t v414 = (uint8_t *)v58;
        unint64_t v64 = (uint8_t *)v63;
        *(void *)&v429[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v64 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v420 = sub_100110D58((uint64_t)v414, v60, (uint64_t *)v429);
        uint64_t v56 = v413;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "coreidvd: failed to prepare update statement %{public}s", v64, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v416 + 8))(v53, v415);
      (*(void (**)(char *, void, uint64_t))(v417 + 104))(v56, enum case for DIPError.Code.internalError(_:), v418);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_97;
  }
  uint64_t v387 = v57;
  uint64_t v413 = v56;
  uint64_t v65 = ppStmt;
  uint64_t v66 = qword_10071F5C8;
  swift_bridgeObjectRetain();
  if (v66 != -1) {
    swift_once();
  }
  uint64_t v67 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v68 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v69 = sqlite3_bind_text(v65, 1, (const char *)(v68 + 32), -1, v67);
  swift_release();
  if (!v69)
  {
    uint64_t v77 = (uint64_t)v414;
    uint64_t v78 = (uint64_t)&v414[OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim];
    os_log_type_t v79 = v412;
    (*((void (**)(char *, uint8_t *, uint64_t))v412 + 2))(v15, &v414[OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim], v13);
    JWSSignedJSON.payload.getter();
    (*((void (**)(char *, uint64_t))v79 + 1))(v15, v13);
    v429[6] = v426;
    v429[7] = v427;
    uint64_t v430 = v428;
    v429[0] = v420;
    v429[1] = v421;
    v429[2] = v422;
    v429[3] = v423;
    v429[4] = v424;
    v429[5] = v425;
    swift_bridgeObjectRetain();
    sub_1001D6030((uint64_t)v429);
    uint64_t v80 = (void (__cdecl *)(void *))qword_100760860;
    uint64_t v81 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = sqlite3_bind_text(v65, 2, (const char *)(v81 + 32), -1, v80);
    swift_release();
    if (v13)
    {
      if (!sqlite3_errmsg(v387))
      {
        __break(1u);
        goto LABEL_120;
      }
      uint64_t v82 = String.init(cString:)();
      unint64_t v84 = v83;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = swift_slowAlloc();
        uint64_t v414 = (uint8_t *)v82;
        unint64_t v88 = (uint8_t *)v87;
        *(void *)&long long v420 = swift_slowAlloc();
        *(_DWORD *)unint64_t v88 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v419 = sub_100110D58((uint64_t)v414, (unint64_t)v84, (uint64_t *)&v420);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "coreidvd: failure binding claimid: %{public}s", v88, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v82 = (uint64_t)v414;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v416 + 8))(v48, v415);
      uint64_t v104 = v418;
      *(void *)&long long v420 = 0;
      *((void *)&v420 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      *(void *)&long long v420 = 0xD000000000000028;
      *((void *)&v420 + 1) = 0x8000000100657F40;
      v105._uint64_t countAndFlagsBits = v82;
      v105._object = v84;
      String.append(_:)(v105);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v104);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v106 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v107 = (*(unsigned __int8 *)(*(void *)v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v106 + 80);
      uint64_t v108 = swift_allocObject();
      *(_OWORD *)(v108 + 16) = xmmword_100610730;
      unint64_t v109 = v108 + v107;
      unint64_t v110 = v109 + v106[14];
      uint64_t v111 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v112 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 104))(v109, v111, v112);
      int v113 = sqlite3_errcode(v387);
      *(void *)(v110 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v110 = v113;
      sub_10015C504(v108);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_27;
    }
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v100 = v410;
    sub_1004D1F28(v78, v410);
    sub_10058EE04(&qword_10072CC70, (void (*)(uint64_t))type metadata accessor for VerifiedClaim);
    unint64_t v101 = v411;
    uint64_t v102 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    if (v101)
    {
      sub_10058EBD8(v100, type metadata accessor for VerifiedClaim);
      swift_release();
      return (const char *)sqlite3_finalize(ppStmt);
    }
    uint64_t v114 = v102;
    unint64_t v115 = v103;
    sub_10058EBD8(v100, type metadata accessor for VerifiedClaim);
    swift_release();
    *(void *)&long long v420 = v114;
    *((void *)&v420 + 1) = v115;
    static String.Encoding.utf8.getter();
    unint64_t v411 = sub_100307514();
    uint64_t v410 = String.init<A>(bytes:encoding:)();
    uint64_t v412 = v116;
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)&long long v420 = *(void *)(v77 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claimData);
    swift_bridgeObjectRetain();
    sub_100007764(&qword_1007264A0);
    sub_1001D5E1C();
    uint64_t v117 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v385 = v114;
    unint64_t v386 = v115;
    uint64_t v118 = v117;
    unint64_t v120 = v119;
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)&long long v420 = v118;
    *((void *)&v420 + 1) = v120;
    static String.Encoding.utf8.getter();
    uint64_t v384 = String.init<A>(bytes:encoding:)();
    uint64_t v409 = v121;
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)&long long v420 = *(void *)&v414[OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_unverifiedClaimData];
    swift_bridgeObjectRetain();
    uint64_t v122 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v382 = v118;
    unint64_t v383 = v120;
    unint64_t v124 = v123;
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)&long long v420 = v122;
    *((void *)&v420 + 1) = v124;
    static String.Encoding.utf8.getter();
    String.init<A>(bytes:encoding:)();
    uint64_t v126 = v125;
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)&long long v420 = *(void *)&v414[OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData];
    swift_bridgeObjectRetain();
    sub_100007764(&qword_100733220);
    sub_10058ECE4();
    uint64_t v127 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v381 = 0;
    unint64_t v129 = v128;
    uint64_t v379 = v122;
    unint64_t v380 = v124;
    uint64_t v130 = v127;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v377 = v130;
    unint64_t v378 = v129;
    *(void *)&long long v420 = v130;
    *((void *)&v420 + 1) = v129;
    static String.Encoding.utf8.getter();
    unint64_t v411 = String.init<A>(bytes:encoding:)();
    uint64_t v132 = v131;
    uint64_t v133 = ppStmt;
    uint64_t v134 = (void (__cdecl *)(void *))qword_100760860;
    if (v412)
    {
      uint64_t v135 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v136 = (const char *)(v135 + 32);
    }
    else
    {
      uint64_t v136 = 0;
    }
    uint64_t v137 = v409;
    int v138 = sqlite3_bind_text(v133, 3, v136, -1, v134);
    swift_unknownObjectRelease();
    if (v138)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = sqlite3_errmsg(v387);
      if (result)
      {
        uint64_t v139 = String.init(cString:)();
        uint64_t v141 = v140;
        unint64_t v142 = v407;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v143 = Logger.logObject.getter();
        os_log_type_t v144 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v143, v144))
        {
          unint64_t v145 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v420 = swift_slowAlloc();
          *(_DWORD *)unint64_t v145 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v419 = sub_100110D58(v139, (unint64_t)v141, (uint64_t *)&v420);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v143, v144, "coreidvd: failure binding claim: %{public}s", v145, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v416 + 8))(v407, v415);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v416 + 8))(v142, v415);
        }
        uint64_t v149 = v417;
        uint64_t v150 = v418;
        *(void *)&long long v420 = 0;
        *((void *)&v420 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(40);
        swift_bridgeObjectRelease();
        *(void *)&long long v420 = 0xD000000000000026;
        *((void *)&v420 + 1) = 0x8000000100657F70;
        v151._uint64_t countAndFlagsBits = v139;
        v151._object = v141;
        String.append(_:)(v151);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v149 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v150);
        sub_100007764((uint64_t *)&unk_1007225C0);
        unint64_t v152 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v153 = (*(unsigned __int8 *)(*(void *)v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v152 + 80);
        uint64_t v154 = swift_allocObject();
        *(_OWORD *)(v154 + 16) = xmmword_100610730;
        unint64_t v155 = v154 + v153;
        unint64_t v156 = v155 + v152[14];
        uint64_t v157 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v158 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 104))(v155, v157, v158);
        int v159 = sqlite3_errcode(v387);
        *(void *)(v156 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v156 = v159;
        sub_10015C504(v154);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_91;
      }
      __break(1u);
      goto LABEL_138;
    }
    uint64_t v146 = (void (__cdecl *)(void *))qword_100760860;
    if (v137)
    {
      uint64_t v147 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      int v148 = (const char *)(v147 + 32);
    }
    else
    {
      int v148 = 0;
    }
    int v160 = sqlite3_bind_text(v133, 4, v148, -1, v146);
    swift_unknownObjectRelease();
    if (v160)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = sqlite3_errmsg(v387);
      if (result)
      {
        uint64_t v161 = String.init(cString:)();
        int v163 = v162;
        uint64_t v164 = v406;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        unint64_t v165 = Logger.logObject.getter();
        os_log_type_t v166 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v165, v166))
        {
          uint64_t v167 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v420 = swift_slowAlloc();
          *(_DWORD *)uint64_t v167 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v419 = sub_100110D58(v161, (unint64_t)v163, (uint64_t *)&v420);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v165, v166, "coreidvd: failure binding claimdata: %{public}s", v167, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v416 + 8))(v406, v415);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v416 + 8))(v164, v415);
        }
        *(void *)&long long v420 = 0;
        *((void *)&v420 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(44);
        swift_bridgeObjectRelease();
        *(void *)&long long v420 = 0xD00000000000002ALL;
        *((void *)&v420 + 1) = 0x8000000100657FA0;
        v171._uint64_t countAndFlagsBits = v161;
        v171._object = v163;
        String.append(_:)(v171);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v172 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v173 = (*(unsigned __int8 *)(*(void *)v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v172 + 80);
        uint64_t v174 = swift_allocObject();
        *(_OWORD *)(v174 + 16) = xmmword_100610730;
        unint64_t v175 = v174 + v173;
        unint64_t v176 = v175 + v172[14];
        uint64_t v177 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v178 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v178 - 8) + 104))(v175, v177, v178);
        int v179 = sqlite3_errcode(v387);
        *(void *)(v176 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v176 = v179;
        sub_10015C504(v174);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_91;
      }
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }
    uint64_t v168 = (void (__cdecl *)(void *))qword_100760860;
    if (v126)
    {
      uint64_t v169 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      unint64_t v170 = (const char *)(v169 + 32);
    }
    else
    {
      unint64_t v170 = 0;
    }
    int v180 = sqlite3_bind_text(v133, 5, v170, -1, v168);
    swift_unknownObjectRelease();
    if (v180)
    {
      swift_bridgeObjectRelease();
      uint64_t result = sqlite3_errmsg(v387);
      if (result)
      {
        uint64_t v414 = (uint8_t *)String.init(cString:)();
        unint64_t v182 = v181;
        uint64_t v183 = v405;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v184 = Logger.logObject.getter();
        os_log_type_t v185 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v184, v185))
        {
          os_log_type_t v186 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v420 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v186 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v419 = sub_100110D58((uint64_t)v414, (unint64_t)v182, (uint64_t *)&v420);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v184, v185, "coreidvd: failure binding unverifiedClaimdata: %{public}s", v186, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v416 + 8))(v183, v415);
        *(void *)&long long v420 = 0;
        *((void *)&v420 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(56);
        v190._uint64_t countAndFlagsBits = 0xD000000000000036;
        v190._object = (void *)0x8000000100657FD0;
        String.append(_:)(v190);
        v191._uint64_t countAndFlagsBits = (uint64_t)v414;
        v191._object = v182;
        String.append(_:)(v191);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v192 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v193 = (*(unsigned __int8 *)(*(void *)v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v192 + 80);
        uint64_t v194 = swift_allocObject();
        *(_OWORD *)(v194 + 16) = xmmword_100610730;
        unint64_t v195 = v194 + v193;
        unint64_t v196 = v195 + v192[14];
        uint64_t v197 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v198 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v198 - 8) + 104))(v195, v197, v198);
        int v199 = sqlite3_errcode(v387);
        *(void *)(v196 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v196 = v199;
        sub_10015C504(v194);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_91;
      }
      goto LABEL_139;
    }
    uint64_t v187 = (void (__cdecl *)(void *))qword_100760860;
    if (v132)
    {
      uint64_t v188 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      Swift::String v189 = (const char *)(v188 + 32);
    }
    else
    {
      Swift::String v189 = 0;
    }
    int v200 = sqlite3_bind_text(v133, 6, v189, -1, v187);
    swift_unknownObjectRelease();
    if (v200)
    {
      uint64_t result = sqlite3_errmsg(v387);
      if (result)
      {
        uint64_t v201 = String.init(cString:)();
        uint64_t v203 = v202;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        unint64_t v204 = Logger.logObject.getter();
        os_log_type_t v205 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v204, v205))
        {
          uint64_t v206 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v420 = swift_slowAlloc();
          *(_DWORD *)uint64_t v206 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v419 = sub_100110D58(v201, (unint64_t)v203, (uint64_t *)&v420);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v204, v205, "coreidvd: failure binding encryptedClaimdata: %{public}s", v206, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v416 + 8))(v404, v415);
        *(void *)&long long v420 = 0;
        *((void *)&v420 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(55);
        v212._uint64_t countAndFlagsBits = 0xD000000000000035;
        v212._object = (void *)0x8000000100658010;
        String.append(_:)(v212);
        v213._uint64_t countAndFlagsBits = v201;
        v213._object = v203;
        String.append(_:)(v213);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
        sub_100007764((uint64_t *)&unk_1007225C0);
        os_log_type_t v214 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v215 = (*(unsigned __int8 *)(*(void *)v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v214 + 80);
        uint64_t v216 = swift_allocObject();
        *(_OWORD *)(v216 + 16) = xmmword_100610730;
        unint64_t v217 = v216 + v215;
        unint64_t v218 = v217 + v214[14];
        uint64_t v219 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v220 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v220 - 8) + 104))(v217, v219, v220);
        int v221 = sqlite3_errcode(v387);
        *(void *)(v218 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v218 = v221;
        sub_10015C504(v216);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_91;
      }
      goto LABEL_140;
    }
    id v207 = [self mainBundle];
    id v208 = [v207 infoDictionary];

    if (v208)
    {
      uint64_t v209 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v209 + 16) && (unint64_t v210 = sub_100590548(0x656C646E75424643, 0xEF6E6F6973726556), (v211 & 1) != 0))
      {
        sub_10003BC28(*(void *)(v209 + 56) + 32 * v210, (uint64_t)&v420);
      }
      else
      {
        long long v420 = 0u;
        long long v421 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v421 + 1))
      {
        swift_dynamicCast();
LABEL_74:
        uint64_t v222 = ppStmt;
        unint64_t v223 = (void (__cdecl *)(void *))qword_100760860;
        uint64_t v224 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        int v225 = sqlite3_bind_text(v222, 7, (const char *)(v224 + 32), -1, v223);
        swift_release();
        if (!v225)
        {
          uint64_t v232 = v399;
          Date.init()();
          Date.timeIntervalSinceReferenceDate.getter();
          double v234 = v233;
          uint64_t v56 = *(char **)(v401 + 8);
          ((void (*)(char *, uint64_t))v56)(v232, v402);
          uint64_t v235 = ppStmt;
          if (!sqlite3_bind_double(ppStmt, 8, v234))
          {
            uint64_t v251 = v398;
            sub_100048D6C(v396, v398, &qword_1007239B0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v401 + 48))(v251, 1, v402) != 1)
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v401 + 32))(v397, v398, v402);
              Date.timeIntervalSinceReferenceDate.getter();
              if (!sqlite3_bind_double(v235, 9, v267))
              {
LABEL_97:
                ((void (*)(char *, uint64_t))v56)(v397, v402);
                goto LABEL_98;
              }
              uint64_t result = sqlite3_errmsg(v387);
              if (result)
              {
                uint64_t v414 = (uint8_t *)String.init(cString:)();
                int v269 = v268;
                defaultLogger()();
                swift_bridgeObjectRetain_n();
                uint64_t v270 = Logger.logObject.getter();
                os_log_type_t v271 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v270, v271))
                {
                  uint64_t v272 = (uint8_t *)swift_slowAlloc();
                  *(void *)&long long v420 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v272 = 136446210;
                  uint64_t v412 = v272 + 4;
                  swift_bridgeObjectRetain();
                  uint64_t v419 = sub_100110D58((uint64_t)v414, (unint64_t)v269, (uint64_t *)&v420);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  _os_log_impl((void *)&_mh_execute_header, v270, v271, "coreidvd: failure binding deleteAfter: %{public}s", v272, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                }
                (*(void (**)(char *, uint64_t))(v416 + 8))(v395, v415);
                *(void *)&long long v420 = 0;
                *((void *)&v420 + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(41);
                swift_bridgeObjectRelease();
                *(void *)&long long v420 = 0xD000000000000027;
                *((void *)&v420 + 1) = 0x8000000100658100;
                v290._uint64_t countAndFlagsBits = (uint64_t)v414;
                v290._object = v269;
                String.append(_:)(v290);
                swift_bridgeObjectRelease();
                uint64_t v416 = v420;
                (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
                sub_100007764((uint64_t *)&unk_1007225C0);
                unint64_t v291 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
                unint64_t v292 = (*(unsigned __int8 *)(*(void *)v291 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v291 + 80);
                uint64_t v293 = swift_allocObject();
                *(_OWORD *)(v293 + 16) = xmmword_100610730;
                unint64_t v294 = v293 + v292;
                unint64_t v295 = v294 + v291[14];
                uint64_t v296 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
                uint64_t v297 = type metadata accessor for DIPError.PropertyKey();
                (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v297 - 8) + 104))(v294, v296, v297);
                int v298 = sqlite3_errcode(v387);
                *(void *)(v295 + 24) = &type metadata for Int32;
                *(_DWORD *)unint64_t v295 = v298;
                sub_10015C504(v293);
                type metadata accessor for DIPError();
                sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                swift_allocError();
                DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
                swift_willThrow();
                sub_10000C5F4(v377, v378);
                sub_10000C5F4(v379, v380);
                sub_10000C5F4(v382, v383);
                sub_10000C5F4(v385, v386);
                ((void (*)(char *, uint64_t))v56)(v397, v402);
                return (const char *)sqlite3_finalize(ppStmt);
              }
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
              goto LABEL_149;
            }
            sub_10000C6CC(v398, &qword_1007239B0);
            if (!sqlite3_bind_null(ppStmt, 9))
            {
LABEL_98:
              uint64_t v13 = (uint64_t)ppStmt;
              int v273 = (void (__cdecl *)(void *))qword_100760860;
              uint64_t v274 = String.utf8CString.getter();
              LODWORD(v273) = sqlite3_bind_text((sqlite3_stmt *)v13, 10, (const char *)(v274 + 32), -1, v273);
              swift_release();
              if (v273)
              {
                uint64_t result = sqlite3_errmsg(v387);
                if (result)
                {
                  uint64_t v275 = String.init(cString:)();
                  uint64_t v277 = v276;
                  defaultLogger()();
                  swift_bridgeObjectRetain_n();
                  os_log_type_t v278 = Logger.logObject.getter();
                  os_log_type_t v279 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v278, v279))
                  {
                    uint64_t v280 = (uint8_t *)swift_slowAlloc();
                    *(void *)&long long v420 = swift_slowAlloc();
                    *(_DWORD *)uint64_t v280 = 136446210;
                    swift_bridgeObjectRetain();
                    uint64_t v419 = sub_100110D58(v275, (unint64_t)v277, (uint64_t *)&v420);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    _os_log_impl((void *)&_mh_execute_header, v278, v279, "coreidvd: failure binding serviceName: %{public}s", v280, 0xCu);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                  }
                  (*(void (**)(char *, uint64_t))(v416 + 8))(v393, v415);
                  *(void *)&long long v420 = 0;
                  *((void *)&v420 + 1) = 0xE000000000000000;
                  _StringGuts.grow(_:)(46);
                  swift_bridgeObjectRelease();
                  *(void *)&long long v420 = 0xD00000000000002CLL;
                  *((void *)&v420 + 1) = 0x8000000100657870;
                  v307._uint64_t countAndFlagsBits = v275;
                  v307._object = v277;
                  String.append(_:)(v307);
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
                  sub_100007764((uint64_t *)&unk_1007225C0);
                  uint64_t v308 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
                  unint64_t v309 = (*(unsigned __int8 *)(*(void *)v308 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v308 + 80);
                  uint64_t v310 = swift_allocObject();
                  *(_OWORD *)(v310 + 16) = xmmword_100610730;
                  unint64_t v311 = v310 + v309;
                  unint64_t v312 = v311 + v308[14];
                  uint64_t v313 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
                  uint64_t v314 = type metadata accessor for DIPError.PropertyKey();
                  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v314 - 8) + 104))(v311, v313, v314);
                  int v315 = sqlite3_errcode(v387);
                  *(void *)(v312 + 24) = &type metadata for Int32;
                  *(_DWORD *)unint64_t v312 = v315;
                  sub_10015C504(v310);
                  type metadata accessor for DIPError();
                  sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                  swift_allocError();
LABEL_91:
                  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
                  swift_willThrow();
                  sub_10000C5F4(v377, v378);
                  sub_10000C5F4(v379, v380);
                  sub_10000C5F4(v382, v383);
                  sub_10000C5F4(v385, v386);
                  return (const char *)sqlite3_finalize(ppStmt);
                }
                goto LABEL_145;
              }
              *(void *)&long long v420 = *(void *)&v414[OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_acl];
              swift_bridgeObjectRetain();
              sub_100007764(&qword_1007268F0);
              sub_1000B6120((unint64_t *)&qword_100730CB0, &qword_1007268F0);
              BidirectionalCollection<>.joined(separator:)();
              swift_bridgeObjectRelease();
              uint64_t v299 = (void (__cdecl *)(void *))qword_100760860;
              uint64_t v300 = String.utf8CString.getter();
              swift_bridgeObjectRelease();
              LODWORD(v299) = sqlite3_bind_text((sqlite3_stmt *)v13, 11, (const char *)(v300 + 32), -1, v299);
              swift_release();
              if (v299)
              {
                uint64_t result = sqlite3_errmsg(v387);
                if (result)
                {
                  uint64_t v301 = String.init(cString:)();
                  os_log_type_t v303 = v302;
                  defaultLogger()();
                  swift_bridgeObjectRetain_n();
                  uint64_t v304 = Logger.logObject.getter();
                  os_log_type_t v305 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v304, v305))
                  {
                    int v306 = (uint8_t *)swift_slowAlloc();
                    *(void *)&long long v420 = swift_slowAlloc();
                    *(_DWORD *)int v306 = 136446210;
                    swift_bridgeObjectRetain();
                    uint64_t v419 = sub_100110D58(v301, (unint64_t)v303, (uint64_t *)&v420);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    _os_log_impl((void *)&_mh_execute_header, v304, v305, "coreidvd: failure binding acl: %{public}s", v306, 0xCu);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                  }
                  (*(void (**)(char *, uint64_t))(v416 + 8))(v392, v415);
                  *(void *)&long long v420 = 0;
                  *((void *)&v420 + 1) = 0xE000000000000000;
                  _StringGuts.grow(_:)(38);
                  swift_bridgeObjectRelease();
                  *(void *)&long long v420 = 0xD000000000000024;
                  *((void *)&v420 + 1) = 0x80000001006580B0;
                  v324._uint64_t countAndFlagsBits = v301;
                  v324._object = v303;
                  String.append(_:)(v324);
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
                  sub_100007764((uint64_t *)&unk_1007225C0);
                  uint64_t v325 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
                  unint64_t v326 = (*(unsigned __int8 *)(*(void *)v325 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v325 + 80);
                  uint64_t v327 = swift_allocObject();
                  *(_OWORD *)(v327 + 16) = xmmword_100610730;
                  unint64_t v328 = v327 + v326;
                  unint64_t v329 = v328 + v325[14];
                  uint64_t v330 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
                  uint64_t v331 = type metadata accessor for DIPError.PropertyKey();
                  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v331 - 8) + 104))(v328, v330, v331);
                  int v332 = sqlite3_errcode(v387);
                  *(void *)(v329 + 24) = &type metadata for Int32;
                  *(_DWORD *)unint64_t v329 = v332;
                  sub_10015C504(v327);
                  type metadata accessor for DIPError();
                  sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
                  swift_allocError();
                  goto LABEL_91;
                }
                goto LABEL_146;
              }
              goto LABEL_113;
            }
            uint64_t result = sqlite3_errmsg(v387);
            if (result)
            {
              uint64_t v252 = String.init(cString:)();
              int v254 = v253;
              defaultLogger()();
              swift_bridgeObjectRetain_n();
              id v255 = Logger.logObject.getter();
              os_log_type_t v256 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v255, v256))
              {
                uint64_t v257 = (uint8_t *)swift_slowAlloc();
                *(void *)&long long v420 = swift_slowAlloc();
                *(_DWORD *)uint64_t v257 = 136446210;
                swift_bridgeObjectRetain();
                uint64_t v419 = sub_100110D58(v252, (unint64_t)v254, (uint64_t *)&v420);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v255, v256, "coreidvd: failure binding null deleteAfter: %{public}s", v257, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              (*(void (**)(char *, uint64_t))(v416 + 8))(v394, v415);
              *(void *)&long long v420 = 0;
              *((void *)&v420 + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(46);
              swift_bridgeObjectRelease();
              *(void *)&long long v420 = 0xD00000000000002CLL;
              *((void *)&v420 + 1) = 0x8000000100658080;
              v281._uint64_t countAndFlagsBits = v252;
              v281._object = v254;
              String.append(_:)(v281);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
              sub_100007764((uint64_t *)&unk_1007225C0);
              double v282 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
              unint64_t v283 = (*(unsigned __int8 *)(*(void *)v282 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v282 + 80);
              uint64_t v284 = swift_allocObject();
              *(_OWORD *)(v284 + 16) = xmmword_100610730;
              unint64_t v285 = v284 + v283;
              unint64_t v286 = v285 + v282[14];
              uint64_t v287 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
              uint64_t v288 = type metadata accessor for DIPError.PropertyKey();
              (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v288 - 8) + 104))(v285, v287, v288);
              int v289 = sqlite3_errcode(v387);
              *(void *)(v286 + 24) = &type metadata for Int32;
              *(_DWORD *)unint64_t v286 = v289;
              sub_10015C504(v284);
              type metadata accessor for DIPError();
              sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
              swift_allocError();
              goto LABEL_91;
            }
LABEL_143:
            __break(1u);
            goto LABEL_144;
          }
          uint64_t result = sqlite3_errmsg(v387);
          if (result)
          {
            uint64_t v236 = String.init(cString:)();
            Swift::String v238 = v237;
            defaultLogger()();
            swift_bridgeObjectRetain_n();
            Swift::String v239 = Logger.logObject.getter();
            os_log_type_t v240 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v239, v240))
            {
              unint64_t v241 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long v420 = swift_slowAlloc();
              *(_DWORD *)unint64_t v241 = 136446210;
              swift_bridgeObjectRetain();
              uint64_t v419 = sub_100110D58(v236, (unint64_t)v238, (uint64_t *)&v420);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v239, v240, "coreidvd: failure binding update_date: %{public}s", v241, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            (*(void (**)(char *, uint64_t))(v416 + 8))(v400, v415);
            *(void *)&long long v420 = 0;
            *((void *)&v420 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(46);
            swift_bridgeObjectRelease();
            *(void *)&long long v420 = 0xD00000000000002CLL;
            *((void *)&v420 + 1) = 0x8000000100658050;
            v258._uint64_t countAndFlagsBits = v236;
            v258._object = v238;
            String.append(_:)(v258);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
            sub_100007764((uint64_t *)&unk_1007225C0);
            char v259 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            unint64_t v260 = (*(unsigned __int8 *)(*(void *)v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v259 + 80);
            uint64_t v261 = swift_allocObject();
            *(_OWORD *)(v261 + 16) = xmmword_100610730;
            unint64_t v262 = v261 + v260;
            unint64_t v263 = v262 + v259[14];
            uint64_t v264 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
            uint64_t v265 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v265 - 8) + 104))(v262, v264, v265);
            int v266 = sqlite3_errcode(v387);
            *(void *)(v263 + 24) = &type metadata for Int32;
            *(_DWORD *)unint64_t v263 = v266;
            sub_10015C504(v261);
            type metadata accessor for DIPError();
            sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            goto LABEL_91;
          }
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        uint64_t result = sqlite3_errmsg(v387);
        if (result)
        {
          uint64_t v226 = String.init(cString:)();
          int v228 = v227;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v229 = Logger.logObject.getter();
          os_log_type_t v230 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v229, v230))
          {
            unint64_t v231 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v420 = swift_slowAlloc();
            *(_DWORD *)unint64_t v231 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v419 = sub_100110D58(v226, (unint64_t)v228, (uint64_t *)&v420);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v229, v230, "coreidvd: failure binding idvVersion: %{public}s", v231, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v416 + 8))(v403, v415);
          *(void *)&long long v420 = 0;
          *((void *)&v420 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          swift_bridgeObjectRelease();
          *(void *)&long long v420 = 0xD00000000000002BLL;
          *((void *)&v420 + 1) = 0x8000000100657840;
          v242._uint64_t countAndFlagsBits = v226;
          v242._object = v228;
          String.append(_:)(v242);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
          sub_100007764((uint64_t *)&unk_1007225C0);
          unint64_t v243 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v244 = (*(unsigned __int8 *)(*(void *)v243 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v243 + 80);
          uint64_t v245 = swift_allocObject();
          *(_OWORD *)(v245 + 16) = xmmword_100610730;
          unint64_t v246 = v245 + v244;
          unint64_t v247 = v246 + v243[14];
          uint64_t v248 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v249 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v249 - 8) + 104))(v246, v248, v249);
          int v250 = sqlite3_errcode(v387);
          *(void *)(v247 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v247 = v250;
          sub_10015C504(v245);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_91;
        }
LABEL_141:
        __break(1u);
        goto LABEL_142;
      }
    }
    else
    {
      long long v420 = 0u;
      long long v421 = 0u;
    }
    sub_10000C6CC((uint64_t)&v420, (uint64_t *)&unk_100727200);
    goto LABEL_74;
  }
  if (sqlite3_errmsg(v387))
  {
    uint64_t v70 = String.init(cString:)();
    uint64_t v72 = v71;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      *(void *)&v429[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v75 = 136446210;
      uint64_t v414 = v75 + 4;
      swift_bridgeObjectRetain();
      *(void *)&long long v420 = sub_100110D58(v70, (unint64_t)v72, (uint64_t *)v429);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "coreidvd: failure binding workflowid: %{public}s", v75, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v416 + 8))(v51, v415);
    uint64_t v89 = v417;
    uint64_t v90 = v418;
    *(void *)&v429[0] = 0;
    *((void *)&v429[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(void *)&v429[0] = 0xD00000000000002BLL;
    *((void *)&v429[0] + 1) = 0x80000001006578A0;
    v91._uint64_t countAndFlagsBits = v70;
    v91._object = v72;
    String.append(_:)(v91);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v89 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v90);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v92 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v93 = (*(unsigned __int8 *)(*(void *)v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v92 + 80);
    uint64_t v94 = swift_allocObject();
    *(_OWORD *)(v94 + 16) = xmmword_100610730;
    unint64_t v95 = v94 + v93;
    unint64_t v96 = v95 + v92[14];
    uint64_t v97 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v98 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 104))(v95, v97, v98);
    int v99 = sqlite3_errcode(v387);
    *(void *)(v96 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v96 = v99;
    sub_10015C504(v94);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_27:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (const char *)sqlite3_finalize(ppStmt);
  }
  __break(1u);
LABEL_113:
  unint64_t v316 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v317 = String.utf8CString.getter();
  LODWORD(v316) = sqlite3_bind_text((sqlite3_stmt *)v13, 12, (const char *)(v317 + 32), -1, v316);
  swift_release();
  if (v316)
  {
    uint64_t result = sqlite3_errmsg(v387);
    if (result)
    {
      uint64_t v318 = String.init(cString:)();
      uint64_t v320 = v319;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v321 = Logger.logObject.getter();
      os_log_type_t v322 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v321, v322))
      {
        uint64_t v323 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v420 = swift_slowAlloc();
        *(_DWORD *)uint64_t v323 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v419 = sub_100110D58(v318, (unint64_t)v320, (uint64_t *)&v420);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v321, v322, "coreidvd: failure binding providerid: %{public}s", v323, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v416 + 8))(v391, v415);
      *(void *)&long long v420 = 0;
      *((void *)&v420 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(void *)&long long v420 = 0xD00000000000002BLL;
      *((void *)&v420 + 1) = 0x8000000100657A80;
      v341._uint64_t countAndFlagsBits = v318;
      v341._object = v320;
      String.append(_:)(v341);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v342 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v343 = (*(unsigned __int8 *)(*(void *)v342 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v342 + 80);
      uint64_t v344 = swift_allocObject();
      *(_OWORD *)(v344 + 16) = xmmword_100610730;
      unint64_t v345 = v344 + v343;
      unint64_t v346 = v345 + v342[14];
      uint64_t v347 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v348 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v348 - 8) + 104))(v345, v347, v348);
      int v349 = sqlite3_errcode(v387);
      *(void *)(v346 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v346 = v349;
      sub_10015C504(v344);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_91;
    }
    goto LABEL_147;
  }
LABEL_120:
  unint64_t v333 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v334 = String.utf8CString.getter();
  LODWORD(v333) = sqlite3_bind_text((sqlite3_stmt *)v13, 13, (const char *)(v334 + 32), -1, v333);
  swift_release();
  if (v333)
  {
    uint64_t result = sqlite3_errmsg(v387);
    if (result)
    {
      uint64_t v335 = String.init(cString:)();
      Swift::String v337 = v336;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      v338 = Logger.logObject.getter();
      os_log_type_t v339 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v338, v339))
      {
        uint64_t v340 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v420 = swift_slowAlloc();
        *(_DWORD *)uint64_t v340 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v419 = sub_100110D58(v335, (unint64_t)v337, (uint64_t *)&v420);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v338, v339, "coreidvd: failure binding tier: %{public}s", v340, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v416 + 8))(v389, v415);
      *(void *)&long long v420 = 0;
      *((void *)&v420 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      *(void *)&long long v420 = 0xD000000000000026;
      *((void *)&v420 + 1) = 0x8000000100657AB0;
      v353._uint64_t countAndFlagsBits = v335;
      v353._object = v337;
      String.append(_:)(v353);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
      sub_100007764((uint64_t *)&unk_1007225C0);
      Swift::String v354 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v355 = (*(unsigned __int8 *)(*(void *)v354 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v354 + 80);
      uint64_t v356 = swift_allocObject();
      *(_OWORD *)(v356 + 16) = xmmword_100610730;
      unint64_t v357 = v356 + v355;
      unint64_t v358 = v357 + v354[14];
      uint64_t v359 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v360 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v360 - 8) + 104))(v357, v359, v360);
      int v361 = sqlite3_errcode(v387);
      *(void *)(v358 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v358 = v361;
      sub_10015C504(v356);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_91;
    }
    goto LABEL_148;
  }
  if (sqlite3_step((sqlite3_stmt *)v13) == 101)
  {
    defaultLogger()();
    v350 = Logger.logObject.getter();
    os_log_type_t v351 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v350, v351))
    {
      os_log_type_t v352 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v352 = 0;
      _os_log_impl((void *)&_mh_execute_header, v350, v351, "coreidvd: updated claim", v352, 2u);
      swift_slowDealloc();
    }
    sub_10000C5F4(v377, v378);
    sub_10000C5F4(v379, v380);
    sub_10000C5F4(v382, v383);
    sub_10000C5F4(v385, v386);

    (*(void (**)(char *, uint64_t))(v416 + 8))(v388, v415);
    return (const char *)sqlite3_finalize(ppStmt);
  }
  uint64_t result = sqlite3_errmsg(v387);
  if (result)
  {
    uint64_t v362 = String.init(cString:)();
    os_log_type_t v364 = v363;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v365 = Logger.logObject.getter();
    os_log_type_t v366 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v365, v366))
    {
      uint64_t v367 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v420 = swift_slowAlloc();
      *(_DWORD *)uint64_t v367 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v419 = sub_100110D58(v362, (unint64_t)v364, (uint64_t *)&v420);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v365, v366, "coreidvd: failure updating claim: %{public}s", v367, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v416 + 8))(v390, v415);
    *(void *)&long long v420 = 0;
    *((void *)&v420 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    *(void *)&long long v420 = 0xD000000000000016;
    *((void *)&v420 + 1) = 0x80000001006580E0;
    v368._uint64_t countAndFlagsBits = v362;
    v368._object = v364;
    String.append(_:)(v368);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v417 + 104))(v413, enum case for DIPError.Code.sqliteError(_:), v418);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v369 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v370 = (*(unsigned __int8 *)(*(void *)v369 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v369 + 80);
    uint64_t v371 = swift_allocObject();
    *(_OWORD *)(v371 + 16) = xmmword_100610730;
    unint64_t v372 = v371 + v370;
    unint64_t v373 = v372 + v369[14];
    uint64_t v374 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v375 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v375 - 8) + 104))(v372, v374, v375);
    int v376 = sqlite3_errcode(v387);
    *(void *)(v373 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v373 = v376;
    sub_10015C504(v371);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_91;
  }
LABEL_149:
  __break(1u);
  return result;
}

const char *sub_100580730(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v111 = v2;
  uint64_t v112 = v3;
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  unint64_t v107 = (char *)&v107 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v108 = (char *)&v107 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v107 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v107 - v14;
  uint64_t v16 = type metadata accessor for DIPError.Code();
  uint64_t v113 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v19 = *(sqlite3 **)(a1 + 40);
  if (!v19)
  {
    sub_100569B60();
    uint64_t v19 = *(sqlite3 **)(a1 + 40);
    if (!v19)
    {
      (*(void (**)(char *, void, uint64_t))(v113 + 104))(v18, enum case for DIPError.Code.databaseInaccessible(_:), v16);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_16:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
  }
  uint64_t v110 = v16;
  uint64_t v20 = String.utf8CString.getter();
  int v21 = sqlite3_prepare_v3(v19, (const char *)(v20 + 32), -1, 0, &ppStmt, 0);
  swift_release();
  uint64_t v114 = v19;
  if (v21)
  {
    uint64_t result = sqlite3_errmsg(v19);
    if (result)
    {
      uint64_t v23 = String.init(cString:)();
      uint64_t v25 = v24;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v116 = swift_slowAlloc();
        unint64_t v109 = v18;
        *(_DWORD *)uint64_t v28 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v115 = sub_100110D58(v23, (unint64_t)v25, &v116);
        uint64_t v18 = v109;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "coreidvd: failed to prepare delete claim statement %{public}s", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v112 + 8))(v15, v111);
      uint64_t v40 = v110;
      uint64_t v41 = v113;
      uint64_t v116 = 0;
      unint64_t v117 = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      uint64_t v116 = 0xD000000000000028;
      unint64_t v117 = 0x8000000100657A50;
      v42._uint64_t countAndFlagsBits = v23;
      v42._object = v25;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v41 + 104))(v18, enum case for DIPError.Code.sqliteError(_:), v40);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v43 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v44 = (*(unsigned __int8 *)(*(void *)v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v43 + 80);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_100610730;
      unint64_t v46 = v45 + v44;
      unint64_t v47 = v46 + v43[14];
      uint64_t v48 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v49 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 104))(v46, v48, v49);
      int v50 = sqlite3_errcode(v114);
      *(void *)(v47 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v47 = v50;
      sub_10015C504(v45);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v109 = v18;
  uint64_t v29 = ppStmt;
  uint64_t v30 = qword_10071F5C8;
  swift_bridgeObjectRetain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v32 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v33 = sqlite3_bind_text(v29, 1, (const char *)(v32 + 32), -1, v31);
  swift_release();
  if (v33)
  {
    uint64_t result = sqlite3_errmsg(v114);
    if (!result)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v34 = String.init(cString:)();
    uint64_t v36 = v35;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v115 = sub_100110D58(v34, (unint64_t)v36, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "coreidvd: failure binding providerid: %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v112 + 8))(v13, v111);
    os_log_type_t v62 = v109;
    uint64_t v61 = v110;
    uint64_t v63 = v113;
    uint64_t v116 = 0;
    unint64_t v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    uint64_t v116 = 0xD00000000000002BLL;
    unint64_t v117 = 0x8000000100657A80;
    v64._uint64_t countAndFlagsBits = v34;
    v64._object = v36;
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v63 + 104))(v62, enum case for DIPError.Code.sqliteError(_:), v61);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v65 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v66 = (*(unsigned __int8 *)(*(void *)v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v65 + 80);
    uint64_t v67 = swift_allocObject();
    *(_OWORD *)(v67 + 16) = xmmword_100610730;
    unint64_t v68 = v67 + v66;
    unint64_t v69 = v68 + v65[14];
    uint64_t v70 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v71 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 104))(v68, v70, v71);
    int v72 = sqlite3_errcode(v114);
    *(void *)(v69 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v69 = v72;
    sub_10015C504(v67);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_34;
  }
  uint64_t v51 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v52 = String.utf8CString.getter();
  LODWORD(v51) = sqlite3_bind_text(v29, 2, (const char *)(v52 + 32), -1, v51);
  swift_release();
  uint64_t v53 = v114;
  if (v51)
  {
    uint64_t result = sqlite3_errmsg(v114);
    if (!result)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v54 = String.init(cString:)();
    uint64_t v56 = v55;
    uint64_t v57 = v108;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      unint64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      *(_DWORD *)unint64_t v60 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v115 = sub_100110D58(v54, (unint64_t)v56, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "coreidvd: failure binding tier: %{public}s", v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v112 + 8))(v108, v111);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v112 + 8))(v57, v111);
    }
    uint64_t v77 = v109;
    uint64_t v76 = v110;
    uint64_t v78 = v113;
    uint64_t v116 = 0;
    unint64_t v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    uint64_t v116 = 0xD000000000000026;
    unint64_t v117 = 0x8000000100657AB0;
    v79._uint64_t countAndFlagsBits = v54;
    v79._object = v56;
    String.append(_:)(v79);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v78 + 104))(v77, enum case for DIPError.Code.sqliteError(_:), v76);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v80 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v81 = (*(unsigned __int8 *)(*(void *)v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v80 + 80);
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_100610730;
    unint64_t v83 = v82 + v81;
    unint64_t v84 = v83 + v80[14];
    uint64_t v85 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v86 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 104))(v83, v85, v86);
    int v87 = sqlite3_errcode(v114);
    *(void *)(v84 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v84 = v87;
    sub_10015C504(v82);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_34;
  }
  if (sqlite3_step(v29) == 101)
  {
    defaultLogger()();
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "coreidvd: deleted out of date claims", v75, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v112 + 8))(v6, v111);
    return (const char *)sqlite3_finalize(ppStmt);
  }
  uint64_t result = sqlite3_errmsg(v53);
  if (result)
  {
    uint64_t v88 = String.init(cString:)();
    uint64_t v90 = v89;
    Swift::String v91 = v107;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      *(_DWORD *)uint64_t v94 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v115 = sub_100110D58(v88, (unint64_t)v90, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "coreidvd: failure deleting claim: %{public}s", v94, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v112 + 8))(v91, v111);
    unint64_t v96 = v109;
    uint64_t v95 = v110;
    uint64_t v97 = v113;
    uint64_t v116 = 0;
    unint64_t v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    uint64_t v116 = 0xD000000000000022;
    unint64_t v117 = 0x80000001006571F0;
    v98._uint64_t countAndFlagsBits = v88;
    v98._object = v90;
    String.append(_:)(v98);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v97 + 104))(v96, enum case for DIPError.Code.sqliteError(_:), v95);
    sub_100007764((uint64_t *)&unk_1007225C0);
    int v99 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v100 = (*(unsigned __int8 *)(*(void *)v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v99 + 80);
    uint64_t v101 = swift_allocObject();
    *(_OWORD *)(v101 + 16) = xmmword_100610730;
    unint64_t v102 = v101 + v100;
    unint64_t v103 = v102 + v99[14];
    uint64_t v104 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v105 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 104))(v102, v104, v105);
    int v106 = sqlite3_errcode(v114);
    *(void *)(v103 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v103 = v106;
    sub_10015C504(v101);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_34:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (const char *)sqlite3_finalize(ppStmt);
  }
LABEL_39:
  __break(1u);
  return result;
}

const char *sub_100581A28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v86 = v6;
  uint64_t v87 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v85 = (char *)&v84 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v84 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v84 - v16;
  uint64_t v18 = type metadata accessor for DIPError.Code();
  uint64_t v89 = *(void *)(v18 - 8);
  uint64_t v90 = v18;
  __chkstk_darwin(v18);
  Swift::String v91 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v20 = *(sqlite3 **)(a1 + 40);
  if (!v20)
  {
    sub_100569B60();
    uint64_t v20 = *(sqlite3 **)(a1 + 40);
    if (!v20)
    {
      (*(void (**)(char *, void, uint64_t))(v89 + 104))(v91, enum case for DIPError.Code.databaseInaccessible(_:), v90);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_14:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
  }
  uint64_t v21 = String.utf8CString.getter();
  int v22 = sqlite3_prepare_v3(v20, (const char *)(v21 + 32), -1, 0, &ppStmt, 0);
  swift_release();
  uint64_t v88 = v20;
  if (v22)
  {
    uint64_t result = sqlite3_errmsg(v20);
    if (result)
    {
      uint64_t v24 = String.init(cString:)();
      uint64_t v26 = v25;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      os_log_type_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v93 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v92 = sub_100110D58(v24, (unint64_t)v26, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "coreidvd: failed to prepare delete statement %{public}s", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v87 + 8))(v17, v86);
      uint64_t v39 = v90;
      uint64_t v40 = v91;
      uint64_t v41 = v89;
      uint64_t v93 = 0;
      unint64_t v94 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      uint64_t v93 = 0xD000000000000029;
      unint64_t v94 = 0x80000001006588A0;
      v42._uint64_t countAndFlagsBits = v24;
      v42._object = v26;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v41 + 104))(v40, enum case for DIPError.Code.sqliteError(_:), v39);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v43 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v44 = (*(unsigned __int8 *)(*(void *)v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v43 + 80);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_100610730;
      unint64_t v46 = v45 + v44;
      unint64_t v47 = v46 + v43[14];
      uint64_t v48 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v49 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 104))(v46, v48, v49);
      int v50 = sqlite3_errcode(v88);
      *(void *)(v47 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v47 = v50;
      sub_10015C504(v45);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_28;
  }
  Date.init()();
  Date.timeIntervalSinceReferenceDate.getter();
  double v31 = v30;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v32 = ppStmt;
  if (sqlite3_bind_double(ppStmt, 1, v31))
  {
    uint64_t result = sqlite3_errmsg(v88);
    if (!result)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    uint64_t v33 = String.init(cString:)();
    uint64_t v35 = v34;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v38 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v92 = sub_100110D58(v33, (unint64_t)v35, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "coreidvd: failure binding date: %{public}s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v87 + 8))(v15, v86);
    uint64_t v55 = v89;
    uint64_t v54 = v90;
    uint64_t v93 = 0;
    unint64_t v94 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    uint64_t v93 = 0xD000000000000025;
    unint64_t v94 = 0x8000000100658360;
    v56._uint64_t countAndFlagsBits = v33;
    v56._object = v35;
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v55 + 104))(v91, enum case for DIPError.Code.sqliteError(_:), v54);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v57 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v58 = (*(unsigned __int8 *)(*(void *)v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v57 + 80);
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = xmmword_100610730;
    unint64_t v60 = v59 + v58;
    unint64_t v61 = v60 + v57[14];
    uint64_t v62 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v63 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 104))(v60, v62, v63);
    int v64 = sqlite3_errcode(v88);
    *(void *)(v61 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v61 = v64;
    sub_10015C504(v59);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_26:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (const char *)sqlite3_finalize(ppStmt);
  }
  if (sqlite3_step(v32) != 101)
  {
    uint64_t result = sqlite3_errmsg(v88);
    if (!result)
    {
LABEL_29:
      __break(1u);
      return result;
    }
    uint64_t v65 = String.init(cString:)();
    uint64_t v67 = v66;
    unint64_t v68 = v85;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v92 = sub_100110D58(v65, (unint64_t)v67, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "coreidvd: failure deleting claim: %{public}s", v71, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v87 + 8))(v85, v86);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v68, v86);
    }
    uint64_t v72 = v90;
    uint64_t v73 = v91;
    uint64_t v74 = v89;
    uint64_t v93 = 0;
    unint64_t v94 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    uint64_t v93 = 0xD000000000000022;
    unint64_t v94 = 0x80000001006571F0;
    v75._uint64_t countAndFlagsBits = v65;
    v75._object = v67;
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v74 + 104))(v73, enum case for DIPError.Code.sqliteError(_:), v72);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v76 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v77 = (*(unsigned __int8 *)(*(void *)v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v76 + 80);
    uint64_t v78 = swift_allocObject();
    *(_OWORD *)(v78 + 16) = xmmword_100610730;
    unint64_t v79 = v78 + v77;
    unint64_t v80 = v79 + v76[14];
    uint64_t v81 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v82 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 104))(v79, v81, v82);
    int v83 = sqlite3_errcode(v88);
    *(void *)(v80 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v80 = v83;
    sub_10015C504(v78);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_26;
  }
  defaultLogger()();
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "coreidvd: deleted out of date claims", v53, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v87 + 8))(v10, v86);
  return (const char *)sqlite3_finalize(ppStmt);
}

const char *sub_10058298C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v113._uint64_t countAndFlagsBits = a4;
  v113._object = a5;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v116 = v6;
  uint64_t v117 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v111 = (char *)&v111 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v112 = (char *)&v111 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v111 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v111 - v18;
  uint64_t v20 = type metadata accessor for DIPError.Code();
  uint64_t v118 = *(void *)(v20 - 8);
  uint64_t v119 = v20;
  __chkstk_darwin(v20);
  int v22 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v23 = *(sqlite3 **)(a1 + 40);
  if (!v23)
  {
    sub_100569B60();
    uint64_t v23 = *(sqlite3 **)(a1 + 40);
    if (!v23)
    {
      (*(void (**)(char *, void, uint64_t))(v118 + 104))(v22, enum case for DIPError.Code.databaseInaccessible(_:), v119);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_16:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
  }
  uint64_t v115 = v22;
  uint64_t v24 = String.utf8CString.getter();
  int v25 = sqlite3_prepare_v3(v23, (const char *)(v24 + 32), -1, 0, &ppStmt, 0);
  swift_release();
  if (v25)
  {
    uint64_t result = sqlite3_errmsg(v23);
    if (result)
    {
      uint64_t v27 = String.init(cString:)();
      uint64_t v29 = v28;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      double v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v114 = v23;
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v121 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v120 = sub_100110D58(v27, (unint64_t)v29, &v121);
        uint64_t v23 = v114;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "coreidvd: failed to prepare delete sp claims statement %{public}s", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v117 + 8))(v19, v116);
      uint64_t v43 = v115;
      uint64_t v121 = 0;
      unint64_t v122 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      uint64_t v121 = 0xD00000000000002CLL;
      unint64_t v122 = 0x8000000100657BA0;
      v44._uint64_t countAndFlagsBits = v27;
      v44._object = v29;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v118 + 104))(v43, enum case for DIPError.Code.sqliteError(_:), v119);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v45 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v46 = (*(unsigned __int8 *)(*(void *)v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v45 + 80);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_100610730;
      unint64_t v48 = v47 + v46;
      unint64_t v49 = v48 + v45[14];
      uint64_t v50 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v51 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 104))(v48, v50, v51);
      int v52 = sqlite3_errcode(v23);
      *(void *)(v49 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v49 = v52;
      sub_10015C504(v47);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v114 = v23;
  uint64_t v33 = ppStmt;
  if (qword_10071F5C8 != -1) {
    swift_once();
  }
  uint64_t v34 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v35 = String.utf8CString.getter();
  LODWORD(v34) = sqlite3_bind_text(v33, 1, (const char *)(v35 + 32), -1, v34);
  swift_release();
  if (v34)
  {
    uint64_t v36 = v114;
    uint64_t result = sqlite3_errmsg(v114);
    if (!result)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v37 = String.init(cString:)();
    uint64_t v39 = v38;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      Swift::String v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v121 = swift_slowAlloc();
      *(_DWORD *)Swift::String v42 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v120 = sub_100110D58(v37, (unint64_t)v39, &v121);
      uint64_t v36 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "coreidvd: failure binding serviceName: %{public}s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v117 + 8))(v17, v116);
    uint64_t v65 = v115;
    uint64_t v121 = 0;
    unint64_t v122 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    uint64_t v121 = 0xD00000000000002CLL;
    unint64_t v122 = 0x8000000100657870;
    v66._uint64_t countAndFlagsBits = v37;
    v66._object = v39;
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v118 + 104))(v65, enum case for DIPError.Code.sqliteError(_:), v119);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v67 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v68 = (*(unsigned __int8 *)(*(void *)v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v67 + 80);
    uint64_t v69 = swift_allocObject();
    *(_OWORD *)(v69 + 16) = xmmword_100610730;
    unint64_t v70 = v69 + v68;
    unint64_t v71 = v70 + v67[14];
    uint64_t v72 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v73 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 104))(v70, v72, v73);
    int v74 = sqlite3_errcode(v36);
    *(void *)(v71 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v71 = v74;
    sub_10015C504(v69);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_34;
  }
  uint64_t v121 = 37;
  unint64_t v122 = 0xE100000000000000;
  String.append(_:)(v113);
  swift_bridgeObjectRetain();
  v53._uint64_t countAndFlagsBits = 37;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  uint64_t v54 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v55 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v56 = sqlite3_bind_text(v33, 2, (const char *)(v55 + 32), -1, v54);
  swift_release();
  if (v56)
  {
    uint64_t v57 = v114;
    uint64_t result = sqlite3_errmsg(v114);
    if (!result)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v58 = String.init(cString:)();
    unint64_t v60 = v59;
    unint64_t v61 = v112;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      int v64 = (uint8_t *)swift_slowAlloc();
      uint64_t v121 = swift_slowAlloc();
      *(_DWORD *)int v64 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v120 = sub_100110D58(v58, (unint64_t)v60, &v121);
      uint64_t v57 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "coreidvd: failure binding applicationIdentifier: %{public}s", v64, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v117 + 8))(v61, v116);
    uint64_t v78 = v115;
    uint64_t v80 = v118;
    uint64_t v79 = v119;
    uint64_t v121 = 0;
    unint64_t v122 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v81._uint64_t countAndFlagsBits = 0xD000000000000036;
    v81._object = (void *)0x8000000100657BD0;
    String.append(_:)(v81);
    v82._uint64_t countAndFlagsBits = v58;
    v82._object = v60;
    String.append(_:)(v82);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v80 + 104))(v78, enum case for DIPError.Code.sqliteError(_:), v79);
    sub_100007764((uint64_t *)&unk_1007225C0);
    int v83 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v84 = (*(unsigned __int8 *)(*(void *)v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v83 + 80);
    uint64_t v85 = swift_allocObject();
    *(_OWORD *)(v85 + 16) = xmmword_100610730;
    unint64_t v86 = v85 + v84;
    unint64_t v87 = v86 + v83[14];
    uint64_t v88 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v89 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 104))(v86, v88, v89);
    int v90 = sqlite3_errcode(v57);
    *(void *)(v87 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v87 = v90;
    sub_10015C504(v85);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_34;
  }
  if (sqlite3_step(v33) == 101)
  {
    defaultLogger()();
    Swift::String v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v75, v76))
    {
      unint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "coreidvd: deleted claims", v77, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v117 + 8))(v10, v116);
    return (const char *)sqlite3_finalize(ppStmt);
  }
  Swift::String v91 = v114;
  uint64_t result = sqlite3_errmsg(v114);
  if (result)
  {
    uint64_t v92 = String.init(cString:)();
    unint64_t v94 = v93;
    uint64_t v95 = v111;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v96, v97))
    {
      Swift::String v98 = (uint8_t *)swift_slowAlloc();
      uint64_t v121 = swift_slowAlloc();
      *(_DWORD *)Swift::String v98 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v120 = sub_100110D58(v92, (unint64_t)v94, &v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "coreidvd: failure deleting sp claims: %{public}s", v98, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v117 + 8))(v111, v116);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v117 + 8))(v95, v116);
    }
    int v99 = v115;
    uint64_t v101 = v118;
    uint64_t v100 = v119;
    uint64_t v121 = 0;
    unint64_t v122 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    uint64_t v121 = 0xD000000000000022;
    unint64_t v122 = 0x80000001006571F0;
    v102._uint64_t countAndFlagsBits = v92;
    v102._object = v94;
    String.append(_:)(v102);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v101 + 104))(v99, enum case for DIPError.Code.sqliteError(_:), v100);
    sub_100007764((uint64_t *)&unk_1007225C0);
    unint64_t v103 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v104 = (*(unsigned __int8 *)(*(void *)v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v103 + 80);
    uint64_t v105 = swift_allocObject();
    *(_OWORD *)(v105 + 16) = xmmword_100610730;
    unint64_t v106 = v105 + v104;
    unint64_t v107 = v106 + v103[14];
    uint64_t v108 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v109 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 104))(v106, v108, v109);
    int v110 = sqlite3_errcode(v91);
    *(void *)(v107 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v107 = v110;
    sub_10015C504(v105);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_34:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (const char *)sqlite3_finalize(ppStmt);
  }
LABEL_39:
  __break(1u);
  return result;
}

const char *sub_100583C90(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v82 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v84 = v5;
  uint64_t v85 = v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  Swift::String v81 = (char *)&v81 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v81 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v81 - v15;
  uint64_t v17 = type metadata accessor for DIPError.Code();
  uint64_t v87 = *(void *)(v17 - 8);
  uint64_t v88 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v20 = *(sqlite3 **)(a1 + 40);
  if (!v20)
  {
    sub_100569B60();
    uint64_t v20 = *(sqlite3 **)(a1 + 40);
    if (!v20)
    {
      (*(void (**)(char *, void, uint64_t))(v87 + 104))(v19, enum case for DIPError.Code.databaseInaccessible(_:), v88);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_16:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
  }
  int v83 = v19;
  uint64_t v21 = String.utf8CString.getter();
  int v22 = sqlite3_prepare_v3(v20, (const char *)(v21 + 32), -1, 0, &ppStmt, 0);
  swift_release();
  unint64_t v86 = v20;
  if (v22)
  {
    uint64_t result = sqlite3_errmsg(v20);
    if (result)
    {
      uint64_t v24 = String.init(cString:)();
      uint64_t v26 = v25;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v90 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v89 = sub_100110D58(v24, (unint64_t)v26, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "coreidvd: failed to prepare delete sp claims statement %{public}s", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v85 + 8))(v16, v84);
      uint64_t v39 = v88;
      uint64_t v90 = 0;
      unint64_t v91 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      uint64_t v90 = 0xD00000000000002CLL;
      unint64_t v91 = 0x8000000100657BA0;
      v40._uint64_t countAndFlagsBits = v24;
      v40._object = v26;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v87 + 104))(v83, enum case for DIPError.Code.sqliteError(_:), v39);
      sub_100007764((uint64_t *)&unk_1007225C0);
      os_log_type_t v41 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v42 = (*(unsigned __int8 *)(*(void *)v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v41 + 80);
      uint64_t v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = xmmword_100610730;
      unint64_t v44 = v43 + v42;
      unint64_t v45 = v44 + v41[14];
      uint64_t v46 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v47 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104))(v44, v46, v47);
      int v48 = sqlite3_errcode(v86);
      *(void *)(v45 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v45 = v48;
      sub_10015C504(v43);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_32;
  }
  double v30 = ppStmt;
  if (qword_10071F5C8 != -1) {
    swift_once();
  }
  os_log_type_t v31 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v32 = String.utf8CString.getter();
  LODWORD(v31) = sqlite3_bind_text(v30, 1, (const char *)(v32 + 32), -1, v31);
  swift_release();
  if (v31)
  {
    uint64_t result = sqlite3_errmsg(v86);
    if (!result)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v33 = String.init(cString:)();
    uint64_t v35 = v34;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v90 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v38 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v89 = sub_100110D58(v33, (unint64_t)v35, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "coreidvd: failure binding serviceName: %{public}s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v85 + 8))(v14, v84);
    uint64_t v53 = v87;
    uint64_t v52 = v88;
    uint64_t v90 = 0;
    unint64_t v91 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    uint64_t v90 = 0xD00000000000002CLL;
    unint64_t v91 = 0x8000000100657870;
    v54._uint64_t countAndFlagsBits = v33;
    v54._object = v35;
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v53 + 104))(v83, enum case for DIPError.Code.sqliteError(_:), v52);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v55 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v56 = (*(unsigned __int8 *)(*(void *)v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v55 + 80);
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_100610730;
    unint64_t v58 = v57 + v56;
    unint64_t v59 = v58 + v55[14];
    uint64_t v60 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v61 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104))(v58, v60, v61);
    int v62 = sqlite3_errcode(v86);
    *(void *)(v59 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v59 = v62;
    sub_10015C504(v57);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_29;
  }
  if (sqlite3_step(v30) == 101)
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v90 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v89 = sub_100110D58(v82, a3, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "coreidvd: deleted claims for service provider %s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v85 + 8))(v9, v84);
    return (const char *)sqlite3_finalize(ppStmt);
  }
  uint64_t result = sqlite3_errmsg(v86);
  if (result)
  {
    uint64_t v63 = String.init(cString:)();
    uint64_t v65 = v64;
    Swift::String v66 = v81;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      uint64_t v90 = swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v89 = sub_100110D58(v63, (unint64_t)v65, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "coreidvd: failure deleting sp claims: %{public}s", v69, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v85 + 8))(v66, v84);
    uint64_t v71 = v87;
    uint64_t v70 = v88;
    uint64_t v90 = 0;
    unint64_t v91 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    uint64_t v90 = 0xD000000000000022;
    unint64_t v91 = 0x80000001006571F0;
    v72._uint64_t countAndFlagsBits = v63;
    v72._object = v65;
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v71 + 104))(v83, enum case for DIPError.Code.sqliteError(_:), v70);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v73 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v74 = (*(unsigned __int8 *)(*(void *)v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v73 + 80);
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_100610730;
    unint64_t v76 = v75 + v74;
    unint64_t v77 = v76 + v73[14];
    uint64_t v78 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v79 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 104))(v76, v78, v79);
    int v80 = sqlite3_errcode(v86);
    *(void *)(v77 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v77 = v80;
    sub_10015C504(v75);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_29:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (const char *)sqlite3_finalize(ppStmt);
  }
LABEL_33:
  __break(1u);
  return result;
}

void sub_100584C2C(uint64_t a1)
{
  uint64_t v169 = type metadata accessor for DIPError();
  uint64_t v164 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  int v163 = (char *)&v157 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v171 = (char *)&v157 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v157 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v157 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v157 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v157 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v157 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  os_log_type_t v31 = (char *)&v157 - v30;
  if (!*(void *)(a1 + 64)) {
    return;
  }
  uint64_t v162 = v26;
  int v159 = v12;
  uint64_t v161 = v29;
  int v160 = v28;
  uint64_t v165 = v4;
  uint64_t v166 = v25;
  uint64_t v167 = v3;
  uint64_t v168 = v27;
  id v32 = *(id *)(a1 + 48);
  swift_bridgeObjectRetain();
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v177[0] = 0;
  id v34 = [v32 attributesOfItemAtPath:v33 error:v177];

  if (!v34)
  {
    id v49 = v177[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, void, uint64_t))(v165 + 104))(v171, enum case for DIPError.Code.sqliteError(_:), v167);
    goto LABEL_55;
  }
  id v35 = v177[0];
  if ((unint64_t)[v34 fileSize] >= 0x1900001)
  {
    id v158 = v34;
    defaultLogger()();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Db getting too large. Attempting cleanup of old data", v38, 2u);
      swift_slowDealloc();
    }

    uint64_t v39 = *(void (**)(char *, uint64_t))(v168 + 8);
    v168 += 8;
    v39(v31, v166);
    ppStmt = 0;
    swift_beginAccess();
    Swift::String v40 = *(sqlite3 **)(a1 + 40);
    uint64_t v41 = v167;
    if (v40 || (sub_100569B60(), (Swift::String v40 = *(sqlite3 **)(a1 + 40)) != 0))
    {
      int v42 = sqlite3_prepare_v3(v40, "delete from dip_signalmap where id <(( select seq from sqlite_sequence where name = 'dip_signalmap') - 1000)", -1, 0, &ppStmt, 0);
      uint64_t v157 = v40;
      if (v42)
      {
        if (sqlite3_errmsg(v40))
        {
          uint64_t v43 = String.init(cString:)();
          unint64_t v45 = v44;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v46 = Logger.logObject.getter();
          os_log_type_t v47 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v46, v47))
          {
            unint64_t v170 = v39;
            int v48 = (uint8_t *)swift_slowAlloc();
            uint64_t v175 = swift_slowAlloc();
            *(_DWORD *)int v48 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v172 = sub_100110D58(v43, (unint64_t)v45, &v175);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "failed to prepare delete old signalmap statement %{public}s", v48, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v41 = v167;
            swift_slowDealloc();

            v170(v24, v166);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            v39(v24, v166);
          }
          uint64_t v175 = 0;
          unint64_t v176 = 0xE000000000000000;
          _StringGuts.grow(_:)(50);
          swift_bridgeObjectRelease();
          uint64_t v175 = 0xD000000000000030;
          unint64_t v176 = 0x80000001006586A0;
          v62._uint64_t countAndFlagsBits = v43;
          v62._object = v45;
          String.append(_:)(v62);
          swift_bridgeObjectRelease();
          uint64_t v63 = *(void (**)(char *, void, uint64_t))(v165 + 104);
          unint64_t v170 = (void (*)(char *, uint64_t))((v165 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
          int v64 = v63;
          v63(v171, enum case for DIPError.Code.sqliteError(_:), v41);
          sub_100007764((uint64_t *)&unk_1007225C0);
          uint64_t v65 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v66 = (*(unsigned __int8 *)(*(void *)v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v65 + 80);
          uint64_t v67 = swift_allocObject();
          *(_OWORD *)(v67 + 16) = xmmword_100610730;
          unint64_t v68 = v67 + v66;
          unint64_t v69 = v68 + v65[14];
          uint64_t v70 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v71 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 104))(v68, v70, v71);
          int v72 = sqlite3_errcode(v157);
          *(void *)(v69 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v69 = v72;
          sub_10015C504(v67);
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_52;
        }
        __break(1u);
        goto LABEL_57;
      }
      uint64_t v53 = ppStmt;
      if (sqlite3_step(ppStmt) != 101)
      {
        if (sqlite3_errmsg(v40))
        {
          uint64_t v73 = String.init(cString:)();
          uint64_t v75 = v74;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          unint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v78 = (uint8_t *)swift_slowAlloc();
            uint64_t v175 = swift_slowAlloc();
            unint64_t v170 = v39;
            *(_DWORD *)uint64_t v78 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v172 = sub_100110D58(v73, (unint64_t)v75, &v175);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v76, v77, "failure deleting old signalmap: %{public}s", v78, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v41 = v167;
            swift_slowDealloc();

            v170(v21, v166);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            v39(v21, v166);
          }
          uint64_t v175 = 0;
          unint64_t v176 = 0xE000000000000000;
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          uint64_t v175 = 0xD000000000000022;
          unint64_t v176 = 0x80000001006571F0;
          v80._uint64_t countAndFlagsBits = v73;
          v80._object = v75;
          String.append(_:)(v80);
          swift_bridgeObjectRelease();
          Swift::String v81 = *(void (**)(char *, void, uint64_t))(v165 + 104);
          unint64_t v170 = (void (*)(char *, uint64_t))((v165 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
          int v64 = v81;
          v81(v171, enum case for DIPError.Code.sqliteError(_:), v41);
          sub_100007764((uint64_t *)&unk_1007225C0);
          uint64_t v82 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v83 = (*(unsigned __int8 *)(*(void *)v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v82 + 80);
          uint64_t v84 = swift_allocObject();
          *(_OWORD *)(v84 + 16) = xmmword_100610730;
          unint64_t v85 = v84 + v83;
          unint64_t v86 = v85 + v82[14];
          uint64_t v87 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v88 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 104))(v85, v87, v88);
          int v89 = sqlite3_errcode(v157);
          *(void *)(v86 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v86 = v89;
          sub_10015C504(v84);
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_52;
        }
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      sqlite3_finalize(v53);
      ppStmt = 0;
      int v54 = sqlite3_prepare_v3(v40, "delete from dip_trainingsignallabel where id <(( select seq from sqlite_sequence where name = 'dip_trainingsignallabel') - 1000)", -1, 0, &ppStmt, 0);
      uint64_t v55 = v169;
      if (v54)
      {
        if (sqlite3_errmsg(v40))
        {
          uint64_t v56 = String.init(cString:)();
          unint64_t v58 = v57;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          unint64_t v59 = Logger.logObject.getter();
          os_log_type_t v60 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v59, v60))
          {
            uint64_t v61 = (uint8_t *)swift_slowAlloc();
            uint64_t v175 = swift_slowAlloc();
            unint64_t v170 = v39;
            *(_DWORD *)uint64_t v61 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v172 = sub_100110D58(v56, (unint64_t)v58, &v175);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v59, v60, "failed to prepare delete old signallabel statement %{public}s", v61, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v170(v18, v166);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            v39(v18, v166);
          }
          uint64_t v175 = 0;
          unint64_t v176 = 0xE000000000000000;
          _StringGuts.grow(_:)(52);
          v98._uint64_t countAndFlagsBits = 0xD000000000000032;
          v98._object = (void *)0x8000000100658770;
          String.append(_:)(v98);
          v99._uint64_t countAndFlagsBits = v56;
          v99._object = v58;
          String.append(_:)(v99);
          swift_bridgeObjectRelease();
          uint64_t v100 = *(void (**)(char *, void, uint64_t))(v165 + 104);
          unint64_t v170 = (void (*)(char *, uint64_t))((v165 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
          int v64 = v100;
          v100(v171, enum case for DIPError.Code.sqliteError(_:), v167);
          sub_100007764((uint64_t *)&unk_1007225C0);
          uint64_t v101 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v102 = (*(unsigned __int8 *)(*(void *)v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v101 + 80);
          uint64_t v103 = swift_allocObject();
          *(_OWORD *)(v103 + 16) = xmmword_100610730;
          unint64_t v104 = v103 + v102;
          unint64_t v105 = v104 + v101[14];
          uint64_t v106 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v107 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 104))(v104, v106, v107);
          int v108 = sqlite3_errcode(v157);
          *(void *)(v105 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v105 = v108;
          sub_10015C504(v103);
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_52;
        }
        goto LABEL_58;
      }
      uint64_t v90 = ppStmt;
      if (sqlite3_step(ppStmt) == 101)
      {
        sqlite3_finalize(v90);
        ppStmt = 0;
        if (sqlite3_prepare_v3(v40, "vacuum", -1, 0, &ppStmt, 0))
        {
          if (sqlite3_errmsg(v40))
          {
            uint64_t v91 = String.init(cString:)();
            uint64_t v93 = v92;
            unint64_t v94 = v161;
            defaultLogger()();
            swift_bridgeObjectRetain_n();
            uint64_t v95 = Logger.logObject.getter();
            os_log_type_t v96 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v95, v96))
            {
              unint64_t v170 = v39;
              os_log_type_t v97 = (uint8_t *)swift_slowAlloc();
              uint64_t v175 = swift_slowAlloc();
              *(_DWORD *)os_log_type_t v97 = 136446210;
              swift_bridgeObjectRetain();
              uint64_t v172 = sub_100110D58(v91, (unint64_t)v93, &v175);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v95, v96, "failed to prepare delete old signallabel statement %{public}s", v97, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              v170(v94, v166);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              v39(v94, v166);
            }
            uint64_t v121 = v167;
            uint64_t v175 = 0;
            unint64_t v176 = 0xE000000000000000;
            _StringGuts.grow(_:)(52);
            v122._uint64_t countAndFlagsBits = 0xD000000000000032;
            v122._object = (void *)0x8000000100658770;
            String.append(_:)(v122);
            v123._uint64_t countAndFlagsBits = v91;
            v123._object = v93;
            String.append(_:)(v123);
            swift_bridgeObjectRelease();
            unint64_t v124 = *(void (**)(char *, void, uint64_t))(v165 + 104);
            unint64_t v170 = (void (*)(char *, uint64_t))((v165 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
            int v64 = v124;
            v124(v171, enum case for DIPError.Code.sqliteError(_:), v121);
            sub_100007764((uint64_t *)&unk_1007225C0);
            uint64_t v125 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
            unint64_t v126 = (*(unsigned __int8 *)(*(void *)v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v125 + 80);
            uint64_t v127 = swift_allocObject();
            *(_OWORD *)(v127 + 16) = xmmword_100610730;
            unint64_t v128 = v127 + v126;
            unint64_t v129 = v128 + v125[14];
            uint64_t v130 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
            uint64_t v131 = type metadata accessor for DIPError.PropertyKey();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 104))(v128, v130, v131);
            int v132 = sqlite3_errcode(v157);
            *(void *)(v129 + 24) = &type metadata for Int32;
            *(_DWORD *)unint64_t v129 = v132;
            sub_10015C504(v127);
            sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
            swift_allocError();
            goto LABEL_52;
          }
          goto LABEL_60;
        }
        uint64_t v116 = ppStmt;
        if (sqlite3_step(ppStmt) == 101)
        {
          sqlite3_finalize(v116);
          ppStmt = 0;
          (*(void (**)(char *, void, uint64_t))(v165 + 104))(v171, enum case for DIPError.Code.dbLimitReachedAndCleared(_:), v167);
          sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v117 = v163;
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          uint64_t v118 = v164;
          (*(void (**)(uint64_t, char *, uint64_t))(v164 + 16))(v119, v117, v55);
          uint64_t v120 = v159;
          defaultLogger()();
          DIPRecordError(_:message:log:)();
          v39(v120, v166);
          (*(void (**)(char *, uint64_t))(v118 + 8))(v117, v55);
          swift_errorRelease();
          if (ppStmt) {
            sqlite3_finalize(ppStmt);
          }

          return;
        }
        if (!sqlite3_errmsg(v40))
        {
LABEL_61:
          __break(1u);
          return;
        }
        uint64_t v109 = String.init(cString:)();
        uint64_t v111 = v133;
        uint64_t v112 = v160;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        Swift::String v113 = Logger.logObject.getter();
        os_log_type_t v134 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v113, v134))
        {
          unint64_t v170 = v39;
          uint64_t v135 = (uint8_t *)swift_slowAlloc();
          uint64_t v175 = swift_slowAlloc();
          *(_DWORD *)uint64_t v135 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v172 = sub_100110D58(v109, (unint64_t)v111, &v175);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v113, v134, "failure deleting old signallabel: %{public}s", v135, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v170(v112, v166);
          goto LABEL_51;
        }
      }
      else
      {
        if (!sqlite3_errmsg(v40))
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        uint64_t v109 = String.init(cString:)();
        uint64_t v111 = v110;
        uint64_t v112 = v162;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        Swift::String v113 = Logger.logObject.getter();
        os_log_type_t v114 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v113, v114))
        {
          unint64_t v170 = v39;
          uint64_t v115 = (uint8_t *)swift_slowAlloc();
          uint64_t v175 = swift_slowAlloc();
          *(_DWORD *)uint64_t v115 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v172 = sub_100110D58(v109, (unint64_t)v111, &v175);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v113, v114, "failure deleting old signallabel: %{public}s", v115, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v170(v112, v166);
LABEL_51:
          uint64_t v136 = v167;
          uint64_t v175 = 0;
          unint64_t v176 = 0xE000000000000000;
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          uint64_t v175 = 0xD000000000000022;
          unint64_t v176 = 0x80000001006571F0;
          v137._uint64_t countAndFlagsBits = v109;
          v137._object = v111;
          String.append(_:)(v137);
          swift_bridgeObjectRelease();
          int v138 = *(void (**)(char *, void, uint64_t))(v165 + 104);
          unint64_t v170 = (void (*)(char *, uint64_t))((v165 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000);
          int v64 = v138;
          v138(v171, enum case for DIPError.Code.sqliteError(_:), v136);
          sub_100007764((uint64_t *)&unk_1007225C0);
          uint64_t v139 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v140 = (*(unsigned __int8 *)(*(void *)v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v139 + 80);
          uint64_t v141 = swift_allocObject();
          *(_OWORD *)(v141 + 16) = xmmword_100610730;
          unint64_t v142 = v141 + v140;
          unint64_t v143 = v142 + v139[14];
          uint64_t v144 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v145 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v145 - 8) + 104))(v142, v144, v145);
          int v146 = sqlite3_errcode(v157);
          *(void *)(v143 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v143 = v146;
          sub_10015C504(v141);
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
LABEL_52:
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          if (ppStmt) {
            sqlite3_finalize(ppStmt);
          }

          v64(v171, enum case for DIPError.Code.sqliteError(_:), v167);
          goto LABEL_55;
        }
      }

      swift_bridgeObjectRelease_n();
      v39(v112, v166);
      goto LABEL_51;
    }
    uint64_t v79 = *(void (**)(char *, void, uint64_t))(v165 + 104);
    v79(v171, enum case for DIPError.Code.databaseInaccessible(_:), v41);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();

    v79(v171, enum case for DIPError.Code.sqliteError(_:), v41);
LABEL_55:
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v147 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v148 = (*(unsigned __int8 *)(*(void *)v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v147 + 80);
    uint64_t v149 = swift_allocObject();
    *(_OWORD *)(v149 + 16) = xmmword_100610730;
    unint64_t v150 = v149 + v148;
    Swift::String v151 = (uint64_t *)(v150 + v147[14]);
    uint64_t v152 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v153 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 104))(v150, v152, v153);
    swift_getErrorValue();
    uint64_t v154 = v173;
    uint64_t v155 = v174;
    v151[3] = v174;
    unint64_t v156 = sub_10002C2D8(v151);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v155 - 8) + 16))(v156, v154, v155);
    sub_10015C504(v149);
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    swift_errorRelease();
    return;
  }
  defaultLogger()();
  os_log_type_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "File is still less than max", v52, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v168 + 8))(v9, v166);
}

uint64_t sub_100586C78(NSObject *a1, uint64_t a2)
{
  uint64_t v432 = a2;
  uint64_t v3 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v3 - 8);
  long long v423 = (char *)&v414 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v433 = v5;
  uint64_t v434 = v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v417 = (char *)&v414 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v418 = (char *)&v414 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v419 = (char *)&v414 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  long long v420 = (char *)&v414 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  long long v421 = (char *)&v414 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  long long v422 = (char *)&v414 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  long long v425 = (char *)&v414 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  long long v424 = (char *)&v414 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  long long v427 = (char *)&v414 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v428 = (char *)&v414 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v414 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v429 = (char *)&v414 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v430 = (char *)&v414 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v431 = (char *)&v414 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  os_log_type_t v38 = (char *)&v414 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v41 = (char *)&v414 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  unint64_t v44 = (char *)&v414 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  os_log_type_t v47 = (char *)&v414 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  os_log_type_t v50 = (char *)&v414 - v49;
  __chkstk_darwin(v48);
  uint64_t v52 = (char *)&v414 - v51;
  uint64_t v53 = type metadata accessor for DIPError.Code();
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v436 = v53;
  uint64_t v437 = v54;
  __chkstk_darwin(v53);
  long long v435 = (char *)&v414 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  Class isa = a1[5].isa;
  if (!isa)
  {
    sub_100569B60();
    Class isa = a1[5].isa;
    if (!isa)
    {
      (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.databaseInaccessible(_:), v436);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_16:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return swift_willThrow();
    }
  }
  int v57 = sqlite3_prepare_v3(isa, "INSERT INTO dip_pregeneratedassessments (workflow_id, created_at, assessment, training_data, assessment_guid, assessment_guid_seeds, training_guid, training_guid_seeds, training_signal_id, digest_index, bindings, encrypted_tsid, encrypted_aguid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", -1, 0, &ppStmt, 0);
  long long v438 = isa;
  if (v57)
  {
    if (sqlite3_errmsg(isa))
    {
      uint64_t v58 = String.init(cString:)();
      os_log_type_t v60 = v59;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v440 = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v439 = sub_100110D58(v58, (unint64_t)v60, &v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "coreidvd: failed to prepare insert statement %{public}s", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v434 + 8))(v52, v433);
      uint64_t v75 = v435;
      uint64_t v74 = v436;
      uint64_t v76 = v437;
      uint64_t v440 = 0;
      unint64_t v441 = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v77._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
      v77._object = (void *)0x8000000100657370;
      String.append(_:)(v77);
      v78._uint64_t countAndFlagsBits = v58;
      v78._object = v60;
      String.append(_:)(v78);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v76 + 104))(v75, enum case for DIPError.Code.sqliteError(_:), v74);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v79 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v80 = (*(unsigned __int8 *)(*(void *)v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v79 + 80);
      uint64_t v81 = swift_allocObject();
      *(_OWORD *)(v81 + 16) = xmmword_100610730;
      unint64_t v82 = v81 + v80;
      unint64_t v83 = v82 + v79[14];
      uint64_t v84 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v85 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 104))(v82, v84, v85);
      int v86 = sqlite3_errcode(v438);
      *(void *)(v83 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v83 = v86;
      sub_10015C504(v81);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_129;
  }
  uint64_t v416 = v29;
  int v64 = ppStmt;
  if (qword_10071F5C8 != -1) {
    swift_once();
  }
  uint64_t v65 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v66 = String.utf8CString.getter();
  int v67 = sqlite3_bind_text(v64, 1, (const char *)(v66 + 32), -1, v65);
  swift_release();
  if (v67)
  {
    if (sqlite3_errmsg(v438))
    {
      uint64_t v68 = String.init(cString:)();
      uint64_t v70 = v69;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        uint64_t v440 = swift_slowAlloc();
        *(_DWORD *)uint64_t v73 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v439 = sub_100110D58(v68, (unint64_t)v70, &v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "coreidvd: failure binding workflowID: %s", v73, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v434 + 8))(v50, v433);
      Swift::String v98 = v435;
      uint64_t v97 = v436;
      uint64_t v99 = v437;
      uint64_t v440 = 0;
      unint64_t v441 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      uint64_t v440 = 0xD00000000000002BLL;
      unint64_t v441 = 0x8000000100657190;
      v100._uint64_t countAndFlagsBits = v68;
      v100._object = v70;
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v99 + 104))(v98, enum case for DIPError.Code.sqliteError(_:), v97);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v101 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v102 = (*(unsigned __int8 *)(*(void *)v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v101 + 80);
      uint64_t v103 = swift_allocObject();
      *(_OWORD *)(v103 + 16) = xmmword_100610730;
      unint64_t v104 = v103 + v102;
      unint64_t v105 = v104 + v101[14];
      uint64_t v106 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v107 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 104))(v104, v106, v107);
      int v108 = sqlite3_errcode(v438);
      *(void *)(v105 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v105 = v108;
      sub_10015C504(v103);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_36;
    }
    __break(1u);
    goto LABEL_137;
  }
  uint64_t v88 = type metadata accessor for DIPPregeneratedAssessment(0);
  uint64_t v89 = v432;
  Date.timeIntervalSinceReferenceDate.getter();
  if (sqlite3_bind_double(v64, 2, v90))
  {
    uint64_t result = (uint64_t)sqlite3_errmsg(v438);
    if (result)
    {
      uint64_t v91 = String.init(cString:)();
      uint64_t v93 = v92;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      unint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v94, v95))
      {
        os_log_type_t v96 = (uint8_t *)swift_slowAlloc();
        uint64_t v440 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v96 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v439 = sub_100110D58(v91, (unint64_t)v93, &v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "coreidvd: failure binding createdAt: %{public}s", v96, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v434 + 8))(v47, v433);
      uint64_t v118 = v435;
      uint64_t v117 = v436;
      uint64_t v119 = v437;
      uint64_t v440 = 0;
      unint64_t v441 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      uint64_t v440 = 0xD00000000000002ALL;
      unint64_t v441 = 0x80000001006573B0;
      v120._uint64_t countAndFlagsBits = v91;
      v120._object = v93;
      String.append(_:)(v120);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v119 + 104))(v118, enum case for DIPError.Code.sqliteError(_:), v117);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v121 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v122 = (*(unsigned __int8 *)(*(void *)v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v121 + 80);
      uint64_t v123 = swift_allocObject();
      *(_OWORD *)(v123 + 16) = xmmword_100610730;
      unint64_t v124 = v123 + v122;
      unint64_t v125 = v124 + v121[14];
      uint64_t v126 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v127 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 104))(v124, v126, v127);
      int v128 = sqlite3_errcode(v438);
      *(void *)(v125 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v125 = v128;
      sub_10015C504(v123);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_36;
    }
    __break(1u);
    goto LABEL_142;
  }
  uint64_t v109 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v110 = String.utf8CString.getter();
  LODWORD(v109) = sqlite3_bind_text(v64, 3, (const char *)(v110 + 32), -1, v109);
  swift_release();
  if (v109)
  {
    uint64_t result = (uint64_t)sqlite3_errmsg(v438);
    if (result)
    {
      uint64_t v111 = String.init(cString:)();
      Swift::String v113 = v112;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      os_log_type_t v114 = Logger.logObject.getter();
      os_log_type_t v115 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v114, v115))
      {
        uint64_t v116 = (uint8_t *)swift_slowAlloc();
        uint64_t v440 = swift_slowAlloc();
        *(_DWORD *)uint64_t v116 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v439 = sub_100110D58(v111, (unint64_t)v113, &v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v114, v115, "coreidvd: failure binding assessment: %{public}s", v116, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v434 + 8))(v44, v433);
      unint64_t v140 = v435;
      uint64_t v139 = v436;
      uint64_t v141 = v437;
      uint64_t v440 = 0;
      unint64_t v441 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      uint64_t v440 = 0xD00000000000002BLL;
      unint64_t v441 = 0x80000001006573E0;
      v142._uint64_t countAndFlagsBits = v111;
      v142._object = v113;
      String.append(_:)(v142);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v141 + 104))(v140, enum case for DIPError.Code.sqliteError(_:), v139);
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v143 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v144 = (*(unsigned __int8 *)(*(void *)v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v143 + 80);
      uint64_t v145 = swift_allocObject();
      *(_OWORD *)(v145 + 16) = xmmword_100610730;
      unint64_t v146 = v145 + v144;
      unint64_t v147 = v146 + v143[14];
      uint64_t v148 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v149 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 104))(v146, v148, v149);
      int v150 = sqlite3_errcode(v438);
      *(void *)(v147 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v147 = v150;
      sub_10015C504(v145);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_36;
    }
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  uint64_t v415 = (int *)v88;
  if (*(void *)(v89 + *(int *)(v88 + 28) + 8))
  {
    unint64_t v129 = (void (__cdecl *)(void *))qword_100760860;
    uint64_t v130 = String.utf8CString.getter();
    uint64_t v131 = v64;
    LODWORD(v129) = sqlite3_bind_text(v64, 4, (const char *)(v130 + 32), -1, v129);
    swift_release();
    int v132 = v416;
    if (v129)
    {
      uint64_t result = (uint64_t)sqlite3_errmsg(v438);
      if (result)
      {
        uint64_t v133 = String.init(cString:)();
        uint64_t v135 = v134;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v136 = Logger.logObject.getter();
        os_log_type_t v137 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v136, v137))
        {
          int v138 = (uint8_t *)swift_slowAlloc();
          uint64_t v440 = swift_slowAlloc();
          *(_DWORD *)int v138 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v439 = sub_100110D58(v133, (unint64_t)v135, &v440);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v136, v137, "coreidvd: failure binding training data: %{public}s", v138, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v434 + 8))(v41, v433);
        uint64_t v169 = v436;
        uint64_t v168 = v437;
        uint64_t v440 = 0;
        unint64_t v441 = 0xE000000000000000;
        _StringGuts.grow(_:)(48);
        swift_bridgeObjectRelease();
        uint64_t v440 = 0xD00000000000002ELL;
        unint64_t v441 = 0x8000000100657600;
        v170._uint64_t countAndFlagsBits = v133;
        v170._object = v135;
        String.append(_:)(v170);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v168 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v169);
        sub_100007764((uint64_t *)&unk_1007225C0);
        Swift::String v171 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v172 = (*(unsigned __int8 *)(*(void *)v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v171 + 80);
        uint64_t v173 = swift_allocObject();
        *(_OWORD *)(v173 + 16) = xmmword_100610730;
        unint64_t v174 = v173 + v172;
        unint64_t v175 = v174 + v171[14];
        uint64_t v176 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v177 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v177 - 8) + 104))(v174, v176, v177);
        int v178 = sqlite3_errcode(v438);
        *(void *)(v175 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v175 = v178;
        sub_10015C504(v173);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_36;
      }
      goto LABEL_145;
    }
  }
  else
  {
    uint64_t v131 = v64;
    int v151 = sqlite3_bind_null(v64, 4);
    int v132 = v416;
    if (v151)
    {
      uint64_t result = (uint64_t)sqlite3_errmsg(v438);
      if (result)
      {
        uint64_t v152 = String.init(cString:)();
        uint64_t v154 = v153;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v155 = Logger.logObject.getter();
        os_log_type_t v156 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v155, v156))
        {
          uint64_t v157 = (uint8_t *)swift_slowAlloc();
          uint64_t v440 = swift_slowAlloc();
          *(_DWORD *)uint64_t v157 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v439 = sub_100110D58(v152, (unint64_t)v154, &v440);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v155, v156, "coreidvd: failure binding null otd_request: %{public}s", v157, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v434 + 8))(v38, v433);
        Swift::String v189 = v435;
        uint64_t v188 = v436;
        uint64_t v190 = v437;
        uint64_t v440 = 0;
        unint64_t v441 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease();
        uint64_t v440 = 0xD00000000000002CLL;
        unint64_t v441 = 0x8000000100657410;
        v191._uint64_t countAndFlagsBits = v152;
        v191._object = v154;
        String.append(_:)(v191);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v190 + 104))(v189, enum case for DIPError.Code.sqliteError(_:), v188);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v192 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v193 = (*(unsigned __int8 *)(*(void *)v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v192 + 80);
        uint64_t v194 = swift_allocObject();
        *(_OWORD *)(v194 + 16) = xmmword_100610730;
        unint64_t v195 = v194 + v193;
        unint64_t v196 = v195 + v192[14];
        uint64_t v197 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v198 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v198 - 8) + 104))(v195, v197, v198);
        int v199 = sqlite3_errcode(v438);
        *(void *)(v196 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v196 = v199;
        sub_10015C504(v194);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_36;
      }
      goto LABEL_146;
    }
  }
  id v158 = v415;
  int v159 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v160 = String.utf8CString.getter();
  LODWORD(v159) = sqlite3_bind_text(v131, 5, (const char *)(v160 + 32), -1, v159);
  swift_release();
  if (v159)
  {
    uint64_t result = (uint64_t)sqlite3_errmsg(v438);
    if (result)
    {
      uint64_t v161 = String.init(cString:)();
      int v163 = v162;
      uint64_t v164 = v431;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v165 = Logger.logObject.getter();
      os_log_type_t v166 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v165, v166))
      {
        uint64_t v167 = (uint8_t *)swift_slowAlloc();
        uint64_t v440 = swift_slowAlloc();
        *(_DWORD *)uint64_t v167 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v439 = sub_100110D58(v161, (unint64_t)v163, &v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v165, v166, "coreidvd: failure binding assessment guid: %{public}s", v167, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v434 + 8))(v164, v433);
      int v200 = v435;
      uint64_t v440 = 0;
      unint64_t v441 = 0xE000000000000000;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      uint64_t v440 = 0xD000000000000030;
      unint64_t v441 = 0x8000000100657440;
      v201._uint64_t countAndFlagsBits = v161;
      v201._object = v163;
      String.append(_:)(v201);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v437 + 104))(v200, enum case for DIPError.Code.sqliteError(_:), v436);
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v202 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v203 = (*(unsigned __int8 *)(*(void *)v202 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v202 + 80);
      uint64_t v204 = swift_allocObject();
      *(_OWORD *)(v204 + 16) = xmmword_100610730;
      unint64_t v205 = v204 + v203;
      unint64_t v206 = v205 + v202[14];
      uint64_t v207 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v208 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v208 - 8) + 104))(v205, v207, v208);
      int v209 = sqlite3_errcode(v438);
      *(void *)(v206 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v206 = v209;
      sub_10015C504(v204);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_36;
    }
    goto LABEL_147;
  }
  int v179 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v180 = String.utf8CString.getter();
  LODWORD(v179) = sqlite3_bind_text(v131, 6, (const char *)(v180 + 32), -1, v179);
  swift_release();
  if (v179)
  {
    uint64_t result = (uint64_t)sqlite3_errmsg(v438);
    if (result)
    {
      uint64_t v181 = String.init(cString:)();
      uint64_t v183 = v182;
      uint64_t v184 = v430;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      os_log_type_t v185 = Logger.logObject.getter();
      os_log_type_t v186 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v185, v186))
      {
        uint64_t v187 = (uint8_t *)swift_slowAlloc();
        uint64_t v440 = swift_slowAlloc();
        *(_DWORD *)uint64_t v187 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v439 = sub_100110D58(v181, (unint64_t)v183, &v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v185, v186, "coreidvd: failure binding assessment guid seeds: %{public}s", v187, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v434 + 8))(v184, v433);
      uint64_t v220 = v435;
      uint64_t v219 = v436;
      uint64_t v221 = v437;
      uint64_t v440 = 0;
      unint64_t v441 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v222._uint64_t countAndFlagsBits = 0xD000000000000036;
      v222._object = (void *)0x8000000100657480;
      String.append(_:)(v222);
      v223._uint64_t countAndFlagsBits = v181;
      v223._object = v183;
      String.append(_:)(v223);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v221 + 104))(v220, enum case for DIPError.Code.sqliteError(_:), v219);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v224 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v225 = (*(unsigned __int8 *)(*(void *)v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v224 + 80);
      uint64_t v226 = swift_allocObject();
      *(_OWORD *)(v226 + 16) = xmmword_100610730;
      unint64_t v227 = v226 + v225;
      unint64_t v228 = v227 + v224[14];
      uint64_t v229 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v230 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v230 - 8) + 104))(v227, v229, v230);
      int v231 = sqlite3_errcode(v438);
      *(void *)(v228 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v228 = v231;
      sub_10015C504(v226);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_36;
    }
    goto LABEL_148;
  }
  unint64_t v210 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v211 = String.utf8CString.getter();
  LODWORD(v210) = sqlite3_bind_text(v131, 7, (const char *)(v211 + 32), -1, v210);
  swift_release();
  if (v210)
  {
    uint64_t result = (uint64_t)sqlite3_errmsg(v438);
    if (result)
    {
      uint64_t v212 = String.init(cString:)();
      os_log_type_t v214 = v213;
      unint64_t v215 = v429;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v216 = Logger.logObject.getter();
      os_log_type_t v217 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v216, v217))
      {
        unint64_t v218 = (uint8_t *)swift_slowAlloc();
        uint64_t v440 = swift_slowAlloc();
        *(_DWORD *)unint64_t v218 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v439 = sub_100110D58(v212, (unint64_t)v214, &v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v216, v217, "coreidvd: failure binding training guid: %{public}s", v218, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v434 + 8))(v215, v433);
      unint64_t v241 = v435;
      uint64_t v240 = v436;
      uint64_t v242 = v437;
      uint64_t v440 = 0;
      unint64_t v441 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      uint64_t v440 = 0xD00000000000002BLL;
      unint64_t v441 = 0x80000001006573E0;
      v243._uint64_t countAndFlagsBits = v212;
      v243._object = v214;
      String.append(_:)(v243);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v242 + 104))(v241, enum case for DIPError.Code.sqliteError(_:), v240);
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v244 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v245 = (*(unsigned __int8 *)(*(void *)v244 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v244 + 80);
      uint64_t v246 = swift_allocObject();
      *(_OWORD *)(v246 + 16) = xmmword_100610730;
      unint64_t v247 = v246 + v245;
      unint64_t v248 = v247 + v244[14];
      uint64_t v249 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v250 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v250 - 8) + 104))(v247, v249, v250);
      int v251 = sqlite3_errcode(v438);
      *(void *)(v248 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v248 = v251;
      sub_10015C504(v246);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_36;
    }
    goto LABEL_149;
  }
  uint64_t v232 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v233 = String.utf8CString.getter();
  LODWORD(v232) = sqlite3_bind_text(v131, 8, (const char *)(v233 + 32), -1, v232);
  swift_release();
  if (v232)
  {
    uint64_t result = (uint64_t)sqlite3_errmsg(v438);
    if (result)
    {
      uint64_t v234 = String.init(cString:)();
      uint64_t v236 = v235;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      int v237 = Logger.logObject.getter();
      os_log_type_t v238 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v237, v238))
      {
        Swift::String v239 = (uint8_t *)swift_slowAlloc();
        uint64_t v440 = swift_slowAlloc();
        *(_DWORD *)Swift::String v239 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v439 = sub_100110D58(v234, (unint64_t)v236, &v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v237, v238, "coreidvd: failure binding training guid seeds: %{public}s", v239, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v434 + 8))(v132, v433);
      uint64_t v440 = 0;
      unint64_t v441 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      uint64_t v440 = 0xD00000000000002BLL;
      unint64_t v441 = 0x80000001006573E0;
      v261._uint64_t countAndFlagsBits = v234;
      v261._object = v236;
      String.append(_:)(v261);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v436);
      sub_100007764((uint64_t *)&unk_1007225C0);
      unint64_t v262 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v263 = (*(unsigned __int8 *)(*(void *)v262 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v262 + 80);
      uint64_t v264 = swift_allocObject();
      *(_OWORD *)(v264 + 16) = xmmword_100610730;
      unint64_t v265 = v264 + v263;
      unint64_t v266 = v265 + v262[14];
      uint64_t v267 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v268 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v268 - 8) + 104))(v265, v267, v268);
      int v269 = sqlite3_errcode(v438);
      *(void *)(v266 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v266 = v269;
      sub_10015C504(v264);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_36;
    }
    goto LABEL_150;
  }
  uint64_t v252 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v253 = String.utf8CString.getter();
  LODWORD(v252) = sqlite3_bind_text(v131, 9, (const char *)(v253 + 32), -1, v252);
  uint64_t result = swift_release();
  if (v252)
  {
    uint64_t result = (uint64_t)sqlite3_errmsg(v438);
    if (result)
    {
      uint64_t v254 = String.init(cString:)();
      os_log_type_t v256 = v255;
      uint64_t v257 = v428;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      Swift::String v258 = Logger.logObject.getter();
      os_log_type_t v259 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v258, v259))
      {
        unint64_t v260 = (uint8_t *)swift_slowAlloc();
        uint64_t v440 = swift_slowAlloc();
        *(_DWORD *)unint64_t v260 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v439 = sub_100110D58(v254, (unint64_t)v256, &v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v258, v259, "coreidvd: failure binding training signal id: %{public}s", v260, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v434 + 8))(v257, v433);
      uint64_t v440 = 0;
      unint64_t v441 = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v277._uint64_t countAndFlagsBits = 0xD000000000000033;
      v277._object = (void *)0x80000001006574C0;
      String.append(_:)(v277);
      v278._uint64_t countAndFlagsBits = v254;
      v278._object = v256;
      String.append(_:)(v278);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v436);
      sub_100007764((uint64_t *)&unk_1007225C0);
      os_log_type_t v279 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v280 = (*(unsigned __int8 *)(*(void *)v279 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v279 + 80);
      uint64_t v281 = swift_allocObject();
      *(_OWORD *)(v281 + 16) = xmmword_100610730;
      unint64_t v282 = v281 + v280;
      unint64_t v283 = v282 + v279[14];
      uint64_t v284 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v285 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v285 - 8) + 104))(v282, v284, v285);
      int v286 = sqlite3_errcode(v438);
      *(void *)(v283 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v283 = v286;
      sub_10015C504(v281);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_36;
    }
    goto LABEL_151;
  }
  uint64_t v270 = *(void *)(v89 + v158[13]);
  if (v270 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_143;
  }
  if (v270 <= 0x7FFFFFFF)
  {
    if (sqlite3_bind_int(v131, 10, v270))
    {
      uint64_t result = (uint64_t)sqlite3_errmsg(v438);
      if (result)
      {
        uint64_t v271 = String.init(cString:)();
        int v273 = v272;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v274 = Logger.logObject.getter();
        os_log_type_t v275 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v274, v275))
        {
          unint64_t v276 = (uint8_t *)swift_slowAlloc();
          uint64_t v440 = swift_slowAlloc();
          *(_DWORD *)unint64_t v276 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v439 = sub_100110D58(v271, (unint64_t)v273, &v440);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v274, v275, "coreidvd: failure binding digestIndex: %{public}s", v276, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v434 + 8))(v427, v433);
        uint64_t v440 = 0;
        unint64_t v441 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease();
        uint64_t v440 = 0xD00000000000002CLL;
        unint64_t v441 = 0x8000000100657500;
        v292._uint64_t countAndFlagsBits = v271;
        v292._object = v273;
        String.append(_:)(v292);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v436);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v293 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v294 = (*(unsigned __int8 *)(*(void *)v293 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v293 + 80);
        uint64_t v295 = swift_allocObject();
        *(_OWORD *)(v295 + 16) = xmmword_100610730;
        unint64_t v296 = v295 + v294;
        unint64_t v297 = v296 + v293[14];
        uint64_t v298 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v299 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v299 - 8) + 104))(v296, v298, v299);
        int v300 = sqlite3_errcode(v438);
        *(void *)(v297 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v297 = v300;
        sub_10015C504(v295);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_36;
      }
      goto LABEL_152;
    }
    uint64_t v287 = *(void *)(v432 + v415[14]);
    if (v287)
    {
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      uint64_t v440 = v287;
      sub_10058EB84();
      uint64_t v288 = v426;
      uint64_t v289 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      uint64_t v426 = v288;
      if (v288)
      {
        swift_release();
        unint64_t v291 = v131;
        return sqlite3_finalize(v291);
      }
      uint64_t v307 = v289;
      unint64_t v308 = v290;
      swift_release();
      uint64_t v440 = v307;
      unint64_t v441 = v308;
      static String.Encoding.utf8.getter();
      sub_100307514();
      String.init<A>(bytes:encoding:)();
      unint64_t v309 = (void (__cdecl *)(void *))qword_100760860;
      if (v310)
      {
        uint64_t v311 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        unint64_t v312 = (const char *)(v311 + 32);
      }
      else
      {
        unint64_t v312 = 0;
      }
      int v322 = sqlite3_bind_text(v131, 11, v312, -1, v309);
      swift_unknownObjectRelease();
      if (v322)
      {
        uint64_t result = (uint64_t)sqlite3_errmsg(v438);
        if (result)
        {
          uint64_t v432 = String.init(cString:)();
          Swift::String v324 = v323;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v325 = Logger.logObject.getter();
          os_log_type_t v326 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v325, v326))
          {
            uint64_t v327 = (uint8_t *)swift_slowAlloc();
            uint64_t v440 = swift_slowAlloc();
            *(_DWORD *)uint64_t v327 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v439 = sub_100110D58(v432, (unint64_t)v324, &v440);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v325, v326, "coreidvd: failure binding bindings: %{public}s", v327, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v434 + 8))(v424, v433);
          uint64_t v440 = 0;
          unint64_t v441 = 0xE000000000000000;
          _StringGuts.grow(_:)(43);
          swift_bridgeObjectRelease();
          uint64_t v440 = 0xD000000000000029;
          unint64_t v441 = 0x8000000100657530;
          v347._uint64_t countAndFlagsBits = v432;
          v347._object = v324;
          String.append(_:)(v347);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v436);
          sub_100007764((uint64_t *)&unk_1007225C0);
          uint64_t v348 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v349 = (*(unsigned __int8 *)(*(void *)v348 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v348 + 80);
          uint64_t v350 = swift_allocObject();
          *(_OWORD *)(v350 + 16) = xmmword_100610730;
          unint64_t v351 = v350 + v349;
          unint64_t v352 = v351 + v348[14];
          uint64_t v353 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v354 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v354 - 8) + 104))(v351, v353, v354);
          int v355 = sqlite3_errcode(v438);
          *(void *)(v352 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v352 = v355;
          sub_10015C504(v350);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          sub_10000C5F4(v307, v308);
          return sqlite3_finalize(ppStmt);
        }
        goto LABEL_154;
      }
      sub_10000C5F4(v307, v308);
    }
    else if (sqlite3_bind_null(v131, 11))
    {
      uint64_t result = (uint64_t)sqlite3_errmsg(v438);
      if (result)
      {
        uint64_t v301 = String.init(cString:)();
        os_log_type_t v303 = v302;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v304 = Logger.logObject.getter();
        os_log_type_t v305 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v304, v305))
        {
          int v306 = (uint8_t *)swift_slowAlloc();
          uint64_t v440 = swift_slowAlloc();
          *(_DWORD *)int v306 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v439 = sub_100110D58(v301, (unint64_t)v303, &v440);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v304, v305, "coreidvd: failure binding null bindings: %{public}s", v306, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v434 + 8))(v425, v433);
        uint64_t v440 = 0;
        unint64_t v441 = 0xE000000000000000;
        _StringGuts.grow(_:)(43);
        swift_bridgeObjectRelease();
        uint64_t v440 = 0xD000000000000029;
        unint64_t v441 = 0x8000000100657530;
        v313._uint64_t countAndFlagsBits = v301;
        v313._object = v303;
        String.append(_:)(v313);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v436);
        sub_100007764((uint64_t *)&unk_1007225C0);
        uint64_t v314 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v315 = (*(unsigned __int8 *)(*(void *)v314 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v314 + 80);
        uint64_t v316 = swift_allocObject();
        *(_OWORD *)(v316 + 16) = xmmword_100610730;
        unint64_t v317 = v316 + v315;
        unint64_t v318 = v317 + v314[14];
        uint64_t v319 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v320 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v320 - 8) + 104))(v317, v319, v320);
        int v321 = sqlite3_errcode(v438);
        *(void *)(v318 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v318 = v321;
        sub_10015C504(v316);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_36;
      }
      goto LABEL_153;
    }
    if (*(void *)(v432 + v415[15] + 8))
    {
      unint64_t v328 = (void (__cdecl *)(void *))qword_100760860;
      uint64_t v329 = String.utf8CString.getter();
      LODWORD(v328) = sqlite3_bind_text(v131, 12, (const char *)(v329 + 32), -1, v328);
      swift_release();
      if (v328)
      {
        uint64_t result = (uint64_t)sqlite3_errmsg(v438);
        if (result)
        {
          uint64_t v330 = String.init(cString:)();
          int v332 = v331;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          unint64_t v333 = Logger.logObject.getter();
          os_log_type_t v334 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v333, v334))
          {
            uint64_t v335 = (uint8_t *)swift_slowAlloc();
            uint64_t v440 = swift_slowAlloc();
            *(_DWORD *)uint64_t v335 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v439 = sub_100110D58(v330, (unint64_t)v332, &v440);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v333, v334, "coreidvd: failure binding encryptedTSID: %{public}s", v335, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v434 + 8))(v422, v433);
          uint64_t v440 = 0;
          unint64_t v441 = 0xE000000000000000;
          _StringGuts.grow(_:)(48);
          swift_bridgeObjectRelease();
          uint64_t v440 = 0xD00000000000002ELL;
          unint64_t v441 = 0x8000000100657560;
          v356._uint64_t countAndFlagsBits = v330;
          v356._object = v332;
          String.append(_:)(v356);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v436);
          sub_100007764((uint64_t *)&unk_1007225C0);
          unint64_t v357 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v358 = (*(unsigned __int8 *)(*(void *)v357 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v357 + 80);
          uint64_t v359 = swift_allocObject();
          *(_OWORD *)(v359 + 16) = xmmword_100610730;
          unint64_t v360 = v359 + v358;
          unint64_t v361 = v360 + v357[14];
          uint64_t v362 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v363 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v363 - 8) + 104))(v360, v362, v363);
          int v364 = sqlite3_errcode(v438);
          *(void *)(v361 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v361 = v364;
          sub_10015C504(v359);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_36;
        }
        goto LABEL_155;
      }
    }
    else if (sqlite3_bind_null(v131, 12))
    {
      uint64_t result = (uint64_t)sqlite3_errmsg(v438);
      if (result)
      {
        os_log_type_t v50 = (char *)String.init(cString:)();
        os_log_type_t v47 = v336;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        a1 = Logger.logObject.getter();
        os_log_type_t v337 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(a1, v337))
        {
          v338 = (uint8_t *)swift_slowAlloc();
          uint64_t v440 = swift_slowAlloc();
          *(_DWORD *)v338 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v439 = sub_100110D58((uint64_t)v50, (unint64_t)v47, &v440);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, a1, v337, "coreidvd: failure binding null encryptedTSID: %{public}s", v338, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_130:
          (*(void (**)(char *, uint64_t))(v434 + 8))(v421, v433);
          uint64_t v440 = 0;
          unint64_t v441 = 0xE000000000000000;
          _StringGuts.grow(_:)(48);
          swift_bridgeObjectRelease();
          uint64_t v440 = 0xD00000000000002ELL;
          unint64_t v441 = 0x8000000100657560;
          v371._uint64_t countAndFlagsBits = (uint64_t)v50;
          v371._object = v47;
          String.append(_:)(v371);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v436);
          sub_100007764((uint64_t *)&unk_1007225C0);
          unint64_t v372 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v373 = (*(unsigned __int8 *)(*(void *)v372 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v372 + 80);
          uint64_t v374 = swift_allocObject();
          *(_OWORD *)(v374 + 16) = xmmword_100610730;
          unint64_t v375 = v374 + v373;
          unint64_t v376 = v375 + v372[14];
          uint64_t v377 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v378 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v378 - 8) + 104))(v375, v377, v378);
          int v379 = sqlite3_errcode(v438);
          *(void *)(v376 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v376 = v379;
          sub_10015C504(v374);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
LABEL_36:
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
          swift_willThrow();
          return sqlite3_finalize(ppStmt);
        }
LABEL_129:

        swift_bridgeObjectRelease_n();
        goto LABEL_130;
      }
      goto LABEL_156;
    }
    if (*(void *)(v432 + v415[16] + 8))
    {
      os_log_type_t v339 = (void (__cdecl *)(void *))qword_100760860;
      uint64_t v340 = String.utf8CString.getter();
      LODWORD(v339) = sqlite3_bind_text(v131, 13, (const char *)(v340 + 32), -1, v339);
      swift_release();
      if (v339)
      {
        uint64_t result = (uint64_t)sqlite3_errmsg(v438);
        if (result)
        {
          uint64_t v341 = String.init(cString:)();
          unint64_t v343 = v342;
          defaultLogger()();
          swift_bridgeObjectRetain_n();
          uint64_t v344 = Logger.logObject.getter();
          os_log_type_t v345 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v344, v345))
          {
            unint64_t v346 = (uint8_t *)swift_slowAlloc();
            uint64_t v440 = swift_slowAlloc();
            *(_DWORD *)unint64_t v346 = 136446210;
            swift_bridgeObjectRetain();
            uint64_t v439 = sub_100110D58(v341, (unint64_t)v343, &v440);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v344, v345, "coreidvd: failure binding encryptedAGUID: %{public}s", v346, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v434 + 8))(v420, v433);
          uint64_t v440 = 0;
          unint64_t v441 = 0xE000000000000000;
          _StringGuts.grow(_:)(49);
          swift_bridgeObjectRelease();
          uint64_t v440 = 0xD00000000000002FLL;
          unint64_t v441 = 0x8000000100657590;
          v380._uint64_t countAndFlagsBits = v341;
          v380._object = v343;
          String.append(_:)(v380);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v436);
          sub_100007764((uint64_t *)&unk_1007225C0);
          uint64_t v381 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v382 = (*(unsigned __int8 *)(*(void *)v381 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v381 + 80);
          uint64_t v383 = swift_allocObject();
          *(_OWORD *)(v383 + 16) = xmmword_100610730;
          unint64_t v384 = v383 + v382;
          unint64_t v385 = v384 + v381[14];
          uint64_t v386 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v387 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v387 - 8) + 104))(v384, v386, v387);
          int v388 = sqlite3_errcode(v438);
          *(void *)(v385 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v385 = v388;
          sub_10015C504(v383);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_36;
        }
        goto LABEL_157;
      }
    }
    else if (sqlite3_bind_null(v131, 13))
    {
      uint64_t result = (uint64_t)sqlite3_errmsg(v438);
      if (result)
      {
        os_log_type_t v50 = (char *)String.init(cString:)();
        os_log_type_t v47 = v365;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v366 = static os_log_type_t.error.getter();
        if (os_log_type_enabled((os_log_t)v66, v366))
        {
          uint64_t v367 = (uint8_t *)swift_slowAlloc();
          uint64_t v440 = swift_slowAlloc();
          *(_DWORD *)uint64_t v367 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v439 = sub_100110D58((uint64_t)v50, (unint64_t)v47, &v440);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v66, v366, "coreidvd: failure binding null encryptedAGUID: %{public}s", v367, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_138:
          (*(void (**)(char *, uint64_t))(v434 + 8))(v419, v433);
          uint64_t v440 = 0;
          unint64_t v441 = 0xE000000000000000;
          _StringGuts.grow(_:)(49);
          swift_bridgeObjectRelease();
          uint64_t v440 = 0xD00000000000002FLL;
          unint64_t v441 = 0x8000000100657590;
          v395._uint64_t countAndFlagsBits = (uint64_t)v50;
          v395._object = v47;
          String.append(_:)(v395);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v436);
          sub_100007764((uint64_t *)&unk_1007225C0);
          uint64_t v396 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
          unint64_t v397 = (*(unsigned __int8 *)(*(void *)v396 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v396 + 80);
          uint64_t v398 = swift_allocObject();
          *(_OWORD *)(v398 + 16) = xmmword_100610730;
          unint64_t v399 = v398 + v397;
          unint64_t v400 = v399 + v396[14];
          uint64_t v401 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
          uint64_t v402 = type metadata accessor for DIPError.PropertyKey();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v402 - 8) + 104))(v399, v401, v402);
          int v403 = sqlite3_errcode(v438);
          *(void *)(v400 + 24) = &type metadata for Int32;
          *(_DWORD *)unint64_t v400 = v403;
          sub_10015C504(v398);
          type metadata accessor for DIPError();
          sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
          swift_allocError();
          goto LABEL_36;
        }
LABEL_137:

        swift_bridgeObjectRelease_n();
        goto LABEL_138;
      }
      goto LABEL_158;
    }
    if (sqlite3_step(v131) != 101)
    {
      uint64_t result = (uint64_t)sqlite3_errmsg(v438);
      if (result)
      {
        uint64_t v389 = String.init(cString:)();
        uint64_t v391 = v390;
        defaultLogger()();
        swift_bridgeObjectRetain_n();
        unint64_t v392 = Logger.logObject.getter();
        os_log_type_t v393 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v392, v393))
        {
          unint64_t v394 = (uint8_t *)swift_slowAlloc();
          uint64_t v440 = swift_slowAlloc();
          *(_DWORD *)unint64_t v394 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v439 = sub_100110D58(v389, (unint64_t)v391, &v440);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v392, v393, "coreidvd: failure inserting pregenerated assessment to sqlite: %{public}s", v394, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v434 + 8))(v418, v433);
        uint64_t v440 = 0;
        unint64_t v441 = 0xE000000000000000;
        _StringGuts.grow(_:)(61);
        v404._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
        v404._object = (void *)0x80000001006575C0;
        String.append(_:)(v404);
        v405._uint64_t countAndFlagsBits = v389;
        v405._object = v391;
        String.append(_:)(v405);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t))(v437 + 104))(v435, enum case for DIPError.Code.sqliteError(_:), v436);
        sub_100007764((uint64_t *)&unk_1007225C0);
        v406 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
        unint64_t v407 = (*(unsigned __int8 *)(*(void *)v406 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v406 + 80);
        uint64_t v408 = swift_allocObject();
        *(_OWORD *)(v408 + 16) = xmmword_100610730;
        unint64_t v409 = v408 + v407;
        unint64_t v410 = v409 + v406[14];
        uint64_t v411 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        uint64_t v412 = type metadata accessor for DIPError.PropertyKey();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v412 - 8) + 104))(v409, v411, v412);
        int v413 = sqlite3_errcode(v438);
        *(void *)(v410 + 24) = &type metadata for Int32;
        *(_DWORD *)unint64_t v410 = v413;
        sub_10015C504(v408);
        type metadata accessor for DIPError();
        sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        goto LABEL_36;
      }
      goto LABEL_159;
    }
    defaultLogger()();
    Swift::String v368 = Logger.logObject.getter();
    os_log_type_t v369 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v368, v369))
    {
      unint64_t v370 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v370 = 0;
      _os_log_impl((void *)&_mh_execute_header, v368, v369, "coredivd: Stored new pregenerated assessment", v370, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v434 + 8))(v417, v433);
    unint64_t v291 = ppStmt;
    return sqlite3_finalize(v291);
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
  return result;
}

const char *sub_10058B778(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v122 = a4;
  uint64_t v116 = type metadata accessor for Logger();
  uint64_t v117 = *(void *)(v116 - 8);
  uint64_t v5 = __chkstk_darwin(v116);
  uint64_t v7 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v111 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  Swift::String v113 = (char *)&v111 - v12;
  __chkstk_darwin(v11);
  uint64_t v112 = (char *)&v111 - v13;
  uint64_t v14 = (int *)type metadata accessor for DIPPregeneratedAssessment(0);
  uint64_t v121 = *((void *)v14 - 1);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v119 = type metadata accessor for String.Encoding();
  uint64_t v134 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v118 = (char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v139 = (uint64_t)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DIPError.Code();
  uint64_t v135 = *(void *)(v20 - 8);
  uint64_t v136 = v20;
  __chkstk_darwin(v20);
  os_log_type_t v137 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v22 = *(sqlite3 **)(a1 + 40);
  if (!v22)
  {
    sub_100569B60();
    uint64_t v22 = *(sqlite3 **)(a1 + 40);
    if (!v22)
    {
      (*(void (**)(char *, void, uint64_t))(v135 + 104))(v137, enum case for DIPError.Code.databaseInaccessible(_:), v136);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_16:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
  }
  if (!sqlite3_prepare_v3(v22, "SELECT workflow_id, created_at, assessment, training_data, assessment_guid, assessment_guid_seeds, training_guid, training_guid_seeds, training_signal_id, digest_index, bindings, encrypted_tsid, encrypted_aguid FROM dip_pregeneratedassessments WHERE workflow_id = ? ORDER BY created_at DESC", -1, 0, &ppStmt, 0))
  {
    uint64_t v31 = ppStmt;
    if (qword_10071F5C8 != -1) {
      swift_once();
    }
    uint64_t v32 = (void (__cdecl *)(void *))qword_100760860;
    uint64_t v33 = String.utf8CString.getter();
    LODWORD(v32) = sqlite3_bind_text(v31, 1, (const char *)(v33 + 32), -1, v32);
    swift_release();
    if (v32)
    {
      uint64_t result = sqlite3_errmsg(v22);
      if (!result) {
        goto LABEL_64;
      }
      uint64_t v34 = String.init(cString:)();
      unint64_t v36 = v35;
      defaultLogger()();
      swift_bridgeObjectRetain();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        v141[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v140 = sub_100110D58(v34, v36, v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "coreidvd: failure binding workflowID: %{public}s", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v117 + 8))(v10, v116);
      (*(void (**)(char *, void, uint64_t))(v135 + 104))(v137, enum case for DIPError.Code.internalError(_:), v136);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      return (const char *)sqlite3_finalize(ppStmt);
    }
    if (sqlite3_step(v31) == 100)
    {
      uint64_t v111 = (void (**)(char *, uint64_t))(v134 + 8);
      os_log_type_t v114 = (void (**)(char *, uint64_t, uint64_t))(v18 + 16);
      os_log_type_t v115 = (void (**)(uint64_t, uint64_t))(v18 + 8);
      do
      {
        if (!sqlite3_column_text(v31, 0))
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_59:
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_60:
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_61:
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_62:
          swift_bridgeObjectRelease();
          __break(1u);
        }
        uint64_t v53 = String.init(cString:)();
        uint64_t v55 = v54;
        sqlite3_column_double(v31, 1);
        Date.init(timeIntervalSinceReferenceDate:)();
        if (!sqlite3_column_text(v31, 2)) {
          goto LABEL_57;
        }
        uint64_t v56 = String.init(cString:)();
        uint64_t v58 = v57;
        if (sqlite3_column_text(v31, 3))
        {
          uint64_t v130 = String.init(cString:)();
          uint64_t v60 = v59;
        }
        else
        {
          uint64_t v130 = 0;
          uint64_t v60 = 0;
        }
        if (!sqlite3_column_text(v31, 4)) {
          goto LABEL_58;
        }
        uint64_t v129 = String.init(cString:)();
        os_log_type_t v62 = v61;
        if (!sqlite3_column_text(v31, 5)) {
          goto LABEL_59;
        }
        os_log_type_t v137 = v62;
        uint64_t v128 = String.init(cString:)();
        uint64_t v136 = v63;
        if (!sqlite3_column_text(v31, 6)) {
          goto LABEL_60;
        }
        uint64_t v127 = v56;
        uint64_t v64 = v53;
        uint64_t v135 = v58;
        uint64_t v126 = String.init(cString:)();
        uint64_t v134 = v65;
        if (!sqlite3_column_text(v31, 7)) {
          goto LABEL_61;
        }
        uint64_t v66 = String.init(cString:)();
        uint64_t v68 = v67;
        if (!sqlite3_column_text(v31, 8)) {
          goto LABEL_62;
        }
        uint64_t v132 = v60;
        uint64_t v133 = v55;
        uint64_t v125 = String.init(cString:)();
        uint64_t v131 = v69;
        uint64_t v124 = sqlite3_column_int(v31, 9);
        if (sqlite3_column_text(v31, 10)
          && (String.init(cString:)(),
              uint64_t v70 = v118,
              static String.Encoding.utf8.getter(),
              uint64_t v71 = String.data(using:allowLossyConversion:)(),
              unint64_t v73 = v72,
              swift_bridgeObjectRelease(),
              (*v111)(v70, v119),
              v73 >> 60 != 15))
        {
          type metadata accessor for JSONDecoder();
          swift_allocObject();
          JSONDecoder.init()();
          sub_10058EEB4();
          uint64_t v74 = v120;
          dispatch thunk of JSONDecoder.decode<A>(_:from:)();
          uint64_t v120 = v74;
          if (v74)
          {
            sub_10000C5E0(v71, v73);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            (*v115)(v139, v138);
            return (const char *)sqlite3_finalize(ppStmt);
          }
          sub_10000C5E0(v71, v73);
          swift_release();
          uint64_t v123 = v141[0];
        }
        else
        {
          uint64_t v123 = 0;
        }
        uint64_t v75 = ppStmt;
        if (sqlite3_column_text(ppStmt, 11))
        {
          uint64_t v76 = String.init(cString:)();
          uint64_t v78 = v77;
        }
        else
        {
          uint64_t v76 = 0;
          uint64_t v78 = 0;
        }
        if (sqlite3_column_text(v75, 12))
        {
          uint64_t v79 = String.init(cString:)();
          uint64_t v81 = v80;
        }
        else
        {
          uint64_t v79 = 0;
          uint64_t v81 = 0;
        }
        (*v114)((char *)v16 + v14[5], v139, v138);
        uint64_t v82 = (int)v124;
        uint64_t v83 = v133;
        *uint64_t v16 = v64;
        v16[1] = v83;
        uint64_t v84 = (uint64_t *)((char *)v16 + v14[6]);
        uint64_t v85 = v135;
        *uint64_t v84 = v127;
        v84[1] = v85;
        int v86 = (uint64_t *)((char *)v16 + v14[7]);
        uint64_t v87 = v132;
        uint64_t *v86 = v130;
        v86[1] = v87;
        uint64_t v88 = (uint64_t *)((char *)v16 + v14[8]);
        uint64_t v89 = v137;
        *uint64_t v88 = v129;
        v88[1] = (uint64_t)v89;
        double v90 = (uint64_t *)((char *)v16 + v14[9]);
        uint64_t v91 = v136;
        *double v90 = v128;
        v90[1] = v91;
        uint64_t v92 = (uint64_t *)((char *)v16 + v14[10]);
        uint64_t v93 = v134;
        *uint64_t v92 = v126;
        v92[1] = v93;
        unint64_t v94 = (uint64_t *)((char *)v16 + v14[11]);
        uint64_t *v94 = v66;
        v94[1] = v68;
        os_log_type_t v95 = (uint64_t *)((char *)v16 + v14[12]);
        uint64_t v96 = v131;
        *os_log_type_t v95 = v125;
        v95[1] = v96;
        *(uint64_t *)((char *)v16 + v14[13]) = v82;
        *(uint64_t *)((char *)v16 + v14[14]) = v123;
        uint64_t v97 = (uint64_t *)((char *)v16 + v14[15]);
        *uint64_t v97 = v76;
        v97[1] = v78;
        Swift::String v98 = (uint64_t *)((char *)v16 + v14[16]);
        *Swift::String v98 = v79;
        v98[1] = v81;
        uint64_t v99 = v122;
        unint64_t v100 = *v122;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v99 = v100;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v100 = sub_100110D24(0, *(void *)(v100 + 16) + 1, 1, v100);
          unint64_t *v122 = v100;
        }
        unint64_t v103 = *(void *)(v100 + 16);
        unint64_t v102 = *(void *)(v100 + 24);
        if (v103 >= v102 >> 1)
        {
          unint64_t v100 = sub_100110D24(v102 > 1, v103 + 1, 1, v100);
          unint64_t *v122 = v100;
        }
        *(void *)(v100 + 16) = v103 + 1;
        sub_10058EE4C((uint64_t)v16, v100+ ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80))+ *(void *)(v121 + 72) * v103, type metadata accessor for DIPPregeneratedAssessment);
        (*v115)(v139, v138);
        uint64_t v31 = ppStmt;
      }
      while (sqlite3_step(ppStmt) == 100);
    }
    if (*(void *)(*v122 + 16))
    {
      unint64_t v104 = v113;
      defaultLogger()();
      unint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v105, v106))
      {
        uint64_t v107 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v107 = 0;
        int v108 = "found pre-generated assessments";
LABEL_52:
        _os_log_impl((void *)&_mh_execute_header, v105, v106, v108, v107, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      unint64_t v104 = v112;
      defaultLogger()();
      unint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v105, v106))
      {
        uint64_t v107 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v107 = 0;
        int v108 = "no pre-generated assessment was found";
        goto LABEL_52;
      }
    }
    uint64_t v109 = v117;
    uint64_t v110 = v116;

    (*(void (**)(char *, uint64_t))(v109 + 8))(v104, v110);
    return (const char *)sqlite3_finalize(ppStmt);
  }
  uint64_t result = sqlite3_errmsg(v22);
  if (result)
  {
    uint64_t v24 = String.init(cString:)();
    uint64_t v26 = v25;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v139 = v24;
      v141[0] = v30;
      *(_DWORD *)uint64_t v29 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v140 = sub_100110D58(v139, (unint64_t)v26, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "coreidvd: failed to prepare select statement: %{public}s", v29, 0xCu);
      swift_arrayDestroy();
      uint64_t v24 = v139;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v117 + 8))(v7, v116);
    uint64_t v40 = v136;
    uint64_t v41 = v137;
    uint64_t v42 = v135;
    v141[0] = 0;
    v141[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(69);
    v43._uint64_t countAndFlagsBits = 0xD000000000000043;
    v43._object = (void *)0x8000000100658520;
    String.append(_:)(v43);
    v44._uint64_t countAndFlagsBits = v24;
    v44._object = v26;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v42 + 104))(v41, enum case for DIPError.Code.sqliteError(_:), v40);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v45 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v46 = (*(unsigned __int8 *)(*(void *)v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v45 + 80);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_100610730;
    unint64_t v48 = v47 + v46;
    unint64_t v49 = v48 + v45[14];
    uint64_t v50 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v51 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 104))(v48, v50, v51);
    int v52 = sqlite3_errcode(v22);
    *(void *)(v49 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v49 = v52;
    sub_10015C504(v47);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_16;
  }
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

const char *sub_10058C968(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v106 = a4;
  uint64_t v107 = a2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v108 = v6;
  uint64_t v109 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v106 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v106 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v106 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v106 - v20;
  uint64_t v110 = type metadata accessor for DIPError.Code();
  uint64_t v112 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v111 = (char *)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v23 = *(sqlite3 **)(a1 + 40);
  if (!v23)
  {
    sub_100569B60();
    uint64_t v23 = *(sqlite3 **)(a1 + 40);
    if (!v23)
    {
      (*(void (**)(char *, void, uint64_t))(v112 + 104))(v111, enum case for DIPError.Code.databaseInaccessible(_:), v110);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_16:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
  }
  int v24 = sqlite3_prepare_v3(v23, "DELETE FROM dip_pregeneratedassessments WHERE workflow_id = ? AND created_at < ?", -1, 0, &ppStmt, 0);
  Swift::String v113 = v23;
  if (v24)
  {
    uint64_t result = sqlite3_errmsg(v23);
    if (result)
    {
      uint64_t v26 = String.init(cString:)();
      os_log_type_t v28 = v27;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v115 = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v114 = sub_100110D58(v26, (unint64_t)v28, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "coreidvd: failed to prepare delete pre-generated assessments statement %{public}s", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v109 + 8))(v21, v108);
      uint64_t v41 = v111;
      uint64_t v115 = 0;
      unint64_t v116 = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v42._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
      v42._object = (void *)0x8000000100657150;
      String.append(_:)(v42);
      v43._uint64_t countAndFlagsBits = v26;
      v43._object = v28;
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v112 + 104))(v41, enum case for DIPError.Code.sqliteError(_:), v110);
      sub_100007764((uint64_t *)&unk_1007225C0);
      Swift::String v44 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v45 = (*(unsigned __int8 *)(*(void *)v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v44 + 80);
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_100610730;
      unint64_t v47 = v46 + v45;
      unint64_t v48 = v47 + v44[14];
      uint64_t v49 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v50 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 104))(v47, v49, v50);
      int v51 = sqlite3_errcode(v113);
      *(void *)(v48 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v48 = v51;
      sub_10015C504(v46);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v32 = ppStmt;
  if (qword_10071F5C8 != -1) {
    swift_once();
  }
  uint64_t v33 = (void (__cdecl *)(void *))qword_100760860;
  uint64_t v34 = String.utf8CString.getter();
  LODWORD(v33) = sqlite3_bind_text(v32, 1, (const char *)(v34 + 32), -1, v33);
  swift_release();
  if (v33)
  {
    uint64_t result = sqlite3_errmsg(v113);
    if (!result)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v35 = String.init(cString:)();
    uint64_t v37 = v36;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    os_log_type_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v115 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v114 = sub_100110D58(v35, (unint64_t)v37, &v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "coreidvd: failure binding workflowID: %{public}s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v109 + 8))(v19, v108);
    uint64_t v61 = v110;
    os_log_type_t v62 = v111;
    uint64_t v115 = 0;
    unint64_t v116 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    uint64_t v115 = 0xD00000000000002BLL;
    unint64_t v116 = 0x8000000100657190;
    v63._uint64_t countAndFlagsBits = v35;
    v63._object = v37;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v112 + 104))(v62, enum case for DIPError.Code.sqliteError(_:), v61);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v64 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v65 = (*(unsigned __int8 *)(*(void *)v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v64 + 80);
    uint64_t v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_100610730;
    unint64_t v67 = v66 + v65;
    unint64_t v68 = v67 + v64[14];
    uint64_t v69 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v70 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 104))(v67, v69, v70);
    int v71 = sqlite3_errcode(v113);
    *(void *)(v68 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v68 = v71;
    sub_10015C504(v66);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_35;
  }
  Date.timeIntervalSinceReferenceDate.getter();
  int v53 = sqlite3_bind_double(v32, 2, v52);
  uint64_t v54 = v113;
  if (v53)
  {
    uint64_t result = sqlite3_errmsg(v113);
    if (!result)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v55 = String.init(cString:)();
    uint64_t v57 = v56;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v115 = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v114 = sub_100110D58(v55, (unint64_t)v57, &v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "coreidvd: failure binding createdBefore: %{public}s", v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v109 + 8))(v16, v108);
    uint64_t v76 = v110;
    uint64_t v77 = v111;
    uint64_t v78 = v112;
    uint64_t v115 = 0;
    unint64_t v116 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    uint64_t v115 = 0xD00000000000002ELL;
    unint64_t v116 = 0x80000001006571C0;
    v79._uint64_t countAndFlagsBits = v55;
    v79._object = v57;
    String.append(_:)(v79);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v78 + 104))(v77, enum case for DIPError.Code.sqliteError(_:), v76);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v80 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v81 = (*(unsigned __int8 *)(*(void *)v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v80 + 80);
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_100610730;
    unint64_t v83 = v82 + v81;
    unint64_t v84 = v83 + v80[14];
    uint64_t v85 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v86 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 104))(v83, v85, v86);
    int v87 = sqlite3_errcode(v113);
    *(void *)(v84 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v84 = v87;
    sub_10015C504(v82);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_35;
  }
  if (sqlite3_step(v32) == 101)
  {
    defaultLogger()();
    unint64_t v72 = a3;
    swift_bridgeObjectRetain_n();
    unint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      uint64_t v115 = swift_slowAlloc();
      *(_DWORD *)uint64_t v75 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v114 = sub_100110D58(v107, v72, &v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "coreidvd: deleted old pre-generated assessments for workflow %s", v75, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v109 + 8))(v10, v108);
    return (const char *)sqlite3_finalize(ppStmt);
  }
  uint64_t result = sqlite3_errmsg(v54);
  if (result)
  {
    uint64_t v88 = String.init(cString:)();
    double v90 = v89;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)swift_slowAlloc();
      uint64_t v115 = swift_slowAlloc();
      *(_DWORD *)uint64_t v93 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v114 = sub_100110D58(v88, (unint64_t)v90, &v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "coreidvd: failure deleting pre-generated assessments: %{public}s", v93, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v109 + 8))(v13, v108);
    uint64_t v94 = v110;
    os_log_type_t v95 = v111;
    uint64_t v96 = v112;
    uint64_t v115 = 0;
    unint64_t v116 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    uint64_t v115 = 0xD000000000000022;
    unint64_t v116 = 0x80000001006571F0;
    v97._uint64_t countAndFlagsBits = v88;
    v97._object = v90;
    String.append(_:)(v97);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v96 + 104))(v95, enum case for DIPError.Code.sqliteError(_:), v94);
    sub_100007764((uint64_t *)&unk_1007225C0);
    Swift::String v98 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v99 = (*(unsigned __int8 *)(*(void *)v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v98 + 80);
    uint64_t v100 = swift_allocObject();
    *(_OWORD *)(v100 + 16) = xmmword_100610730;
    unint64_t v101 = v100 + v99;
    unint64_t v102 = v101 + v98[14];
    uint64_t v103 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v104 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 104))(v101, v103, v104);
    int v105 = sqlite3_errcode(v113);
    *(void *)(v102 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v102 = v105;
    sub_10015C504(v100);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_35:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (const char *)sqlite3_finalize(ppStmt);
  }
LABEL_40:
  __break(1u);
  return result;
}

const char *sub_10058DC60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v82 = v2;
  uint64_t v83 = v3;
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v80 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v80 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v80 - v13;
  uint64_t v15 = type metadata accessor for DIPError.Code();
  uint64_t v84 = *(void *)(v15 - 8);
  uint64_t v85 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppStmt = 0;
  swift_beginAccess();
  uint64_t v18 = *(sqlite3 **)(a1 + 40);
  if (!v18)
  {
    sub_100569B60();
    uint64_t v18 = *(sqlite3 **)(a1 + 40);
    if (!v18)
    {
      (*(void (**)(char *, void, uint64_t))(v84 + 104))(v17, enum case for DIPError.Code.databaseInaccessible(_:), v85);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
LABEL_14:
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      return (const char *)swift_willThrow();
    }
  }
  int v19 = sqlite3_prepare_v3(v18, "DELETE FROM dip_pregeneratedassessments WHERE created_at < ?", -1, 0, &ppStmt, 0);
  unint64_t v81 = v18;
  if (v19)
  {
    uint64_t result = sqlite3_errmsg(v18);
    if (result)
    {
      uint64_t v21 = String.init(cString:)();
      uint64_t v23 = v22;
      defaultLogger()();
      swift_bridgeObjectRetain_n();
      int v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v80 = v17;
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v87 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v86 = sub_100110D58(v21, (unint64_t)v23, &v87);
        uint64_t v17 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "coreidvd: failed to prepare delete pre-generated assessments statement %{public}s", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v83 + 8))(v14, v82);
      uint64_t v37 = v84;
      uint64_t v36 = v85;
      uint64_t v87 = 0;
      unint64_t v88 = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v38._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
      v38._object = (void *)0x8000000100657150;
      String.append(_:)(v38);
      v39._uint64_t countAndFlagsBits = v21;
      v39._object = v23;
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v37 + 104))(v17, enum case for DIPError.Code.sqliteError(_:), v36);
      sub_100007764((uint64_t *)&unk_1007225C0);
      uint64_t v40 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
      unint64_t v41 = (*(unsigned __int8 *)(*(void *)v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v40 + 80);
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_100610730;
      unint64_t v43 = v42 + v41;
      unint64_t v44 = v43 + v40[14];
      uint64_t v45 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      uint64_t v46 = type metadata accessor for DIPError.PropertyKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 104))(v43, v45, v46);
      int v47 = sqlite3_errcode(v81);
      *(void *)(v44 + 24) = &type metadata for Int32;
      *(_DWORD *)unint64_t v44 = v47;
      sub_10015C504(v42);
      type metadata accessor for DIPError();
      sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_29;
  }
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v27 = ppStmt;
  if (sqlite3_bind_double(ppStmt, 1, v28))
  {
    uint64_t result = sqlite3_errmsg(v18);
    if (!result)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v29 = String.init(cString:)();
    uint64_t v31 = v30;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v80 = v17;
      uint64_t v87 = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v86 = sub_100110D58(v29, (unint64_t)v31, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "coreidvd: failure binding createdBefore: %{public}s", v34, 0xCu);
      swift_arrayDestroy();
      uint64_t v17 = v80;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v83 + 8))(v12, v82);
    uint64_t v52 = v84;
    uint64_t v51 = v85;
    uint64_t v87 = 0;
    unint64_t v88 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    uint64_t v87 = 0xD00000000000002ELL;
    unint64_t v88 = 0x80000001006571C0;
    v53._uint64_t countAndFlagsBits = v29;
    v53._object = v31;
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v17, enum case for DIPError.Code.sqliteError(_:), v51);
    sub_100007764((uint64_t *)&unk_1007225C0);
    uint64_t v54 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v55 = (*(unsigned __int8 *)(*(void *)v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v54 + 80);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_100610730;
    unint64_t v57 = v56 + v55;
    unint64_t v58 = v57 + v54[14];
    uint64_t v59 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v60 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 104))(v57, v59, v60);
    int v61 = sqlite3_errcode(v81);
    *(void *)(v58 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v58 = v61;
    sub_10015C504(v56);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    goto LABEL_26;
  }
  if (sqlite3_step(v27) == 101)
  {
    defaultLogger()();
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "coreidvd: deleted old pre-generated assessments for all workflows", v50, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v83 + 8))(v6, v82);
    return (const char *)sqlite3_finalize(ppStmt);
  }
  uint64_t result = sqlite3_errmsg(v18);
  if (result)
  {
    uint64_t v62 = String.init(cString:)();
    uint64_t v64 = v63;
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      unint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      uint64_t v80 = v17;
      uint64_t v87 = v68;
      *(_DWORD *)unint64_t v67 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v86 = sub_100110D58(v62, (unint64_t)v64, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "coreidvd: failure deleting pre-generated assessments: %{public}s", v67, 0xCu);
      swift_arrayDestroy();
      uint64_t v17 = v80;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v83 + 8))(v9, v82);
    uint64_t v70 = v84;
    uint64_t v69 = v85;
    uint64_t v87 = 0;
    unint64_t v88 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    uint64_t v87 = 0xD000000000000022;
    unint64_t v88 = 0x80000001006571F0;
    v71._uint64_t countAndFlagsBits = v62;
    v71._object = v64;
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v70 + 104))(v17, enum case for DIPError.Code.sqliteError(_:), v69);
    sub_100007764((uint64_t *)&unk_1007225C0);
    unint64_t v72 = (int *)(sub_100007764((uint64_t *)&unk_100723460) - 8);
    unint64_t v73 = (*(unsigned __int8 *)(*(void *)v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v72 + 80);
    uint64_t v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = xmmword_100610730;
    unint64_t v75 = v74 + v73;
    unint64_t v76 = v75 + v72[14];
    uint64_t v77 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    uint64_t v78 = type metadata accessor for DIPError.PropertyKey();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 104))(v75, v77, v78);
    int v79 = sqlite3_errcode(v81);
    *(void *)(v76 + 24) = &type metadata for Int32;
    *(_DWORD *)unint64_t v76 = v79;
    sub_10015C504(v74);
    type metadata accessor for DIPError();
    sub_10058EE04((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
LABEL_26:
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    return (const char *)sqlite3_finalize(ppStmt);
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10058EAD0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

const char *sub_10058EB10()
{
  return sub_100577188(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(char ***)(v0 + 40));
}

uint64_t sub_10058EB1C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10058EB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10058EB3C()
{
  return swift_release();
}

void *sub_10058EB44()
{
  return sub_10056F034(*(void *)(v0 + 16), *(sqlite3_stmt ***)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(char ***)(v0 + 64));
}

sqlite3 *sub_10058EB6C()
{
  return sub_100569AB8(v0);
}

uint64_t sub_10058EB74()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10058EB84()
{
  unint64_t result = qword_100733200;
  if (!qword_100733200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100733200);
  }
  return result;
}

uint64_t sub_10058EBD8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10058EC38()
{
  unint64_t result = qword_100733210;
  if (!qword_100733210)
  {
    sub_100019364(&qword_100733208);
    sub_10058EE04(&qword_100733218, (void (*)(uint64_t))type metadata accessor for VerifiedEncryptedDataWrapper);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100733210);
  }
  return result;
}

unint64_t sub_10058ECE4()
{
  unint64_t result = qword_100733228;
  if (!qword_100733228)
  {
    sub_100019364(&qword_100733220);
    sub_10058ED58();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100733228);
  }
  return result;
}

unint64_t sub_10058ED58()
{
  unint64_t result = qword_100733230;
  if (!qword_100733230)
  {
    sub_100019364(&qword_100733208);
    sub_10058EE04(&qword_100733238, (void (*)(uint64_t))type metadata accessor for VerifiedEncryptedDataWrapper);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100733230);
  }
  return result;
}

uint64_t sub_10058EE04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10058EE4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10058EEB4()
{
  unint64_t result = qword_100733240;
  if (!qword_100733240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100733240);
  }
  return result;
}

void sub_10058EF10(uint64_t a1, int a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = self;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 insertNewObjectForEntityForName:v12 inManagedObjectContext:*(void *)(a1 + 16)];

  type metadata accessor for StoredProofingBiomeData();
  swift_dynamicCastClassUnconditional();
  Date.init()();
  StoredProofingBiomeData.update(proofingSessionID:credentialIdentifier:optInDate:optInStatus:)(0xD000000000000015, 0x80000001006588D0, 0xD000000000000018, 0x80000001006588F0, (uint64_t)v10, a2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v14 = v22;
  sub_1000FFAB4();
  if (v14)
  {
  }
  else
  {
    uint64_t v15 = v20;
    uint64_t v16 = v21;
    defaultLogger()();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      int v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "The biome data has been updated successfully", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v16);
  }
}

uint64_t sub_10058F1E0(char a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  type metadata accessor for IdentityProofingDataContext();
  swift_allocObject();
  sub_1000FF820();
  uint64_t v5 = v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(unsigned char *)(v6 + 24) = a1 & 1;
  swift_retain();
  sub_1000FFE3C((uint64_t)sub_10058F55C, v6);
  swift_release();

  return swift_release();
}

uint64_t sub_10058F524()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_10058F55C()
{
  sub_10058EF10(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_10058F57C(uint64_t a1, unint64_t a2)
{
  uint64_t v119 = a1;
  uint64_t v117 = type metadata accessor for Logger();
  uint64_t v118 = *(void *)(v117 - 8);
  uint64_t v4 = __chkstk_darwin(v117);
  uint64_t v6 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v107 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  NSString v12 = (char *)&v107 - v11;
  __chkstk_darwin(v10);
  uint64_t v115 = (char *)&v107 - v13;
  uint64_t v14 = sub_100007764(&qword_100720A68);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v25 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v25 = v24 & 0xFFFFFFFFFFFFLL;
  }
  if (v25)
  {
    uint64_t v111 = v24;
    uint64_t v112 = (void *)v23;
    Swift::String v113 = (void *)a2;
    uint64_t v114 = (char *)&v107 - v22;
    self;
    uint64_t v26 = swift_dynamicCastObjCClass();
    if (v26)
    {
      uint64_t v27 = (void *)v26;
      double v28 = v2;
      id v29 = [v27 URL];
      if (v29)
      {
        os_log_type_t v30 = v29;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
        v31(v16, v21, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
        {
          uint64_t v107 = v28;
          uint64_t v108 = v18;
          uint64_t v109 = v17;
          v31(v114, v16, v17);
          id v110 = v27;
          id v32 = [v27 allHeaderFields];
          os_log_type_t v33 = &type metadata for AnyHashable;
          uint64_t v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v35 = *(void *)(v34 + 64);
          uint64_t v122 = v34 + 64;
          uint64_t v36 = 1 << *(unsigned char *)(v34 + 32);
          uint64_t v37 = -1;
          if (v36 < 64) {
            uint64_t v37 = ~(-1 << v36);
          }
          unint64_t v38 = v37 & v35;
          int64_t v123 = (unint64_t)(v36 + 63) >> 6;
          Swift::String v39 = (char *)v134 + 8;
          uint64_t v125 = (uint64_t)v131 + 8;
          swift_bridgeObjectRetain();
          int64_t v40 = 0;
          unint64_t v41 = (NSString *)&_swiftEmptyDictionarySingleton;
          uint64_t v42 = v119;
          uint64_t v116 = v34;
          uint64_t v121 = (char *)v134 + 8;
          while (1)
          {
            if (v38)
            {
              uint64_t v43 = v42;
              unint64_t v44 = __clz(__rbit64(v38));
              v38 &= v38 - 1;
              unint64_t v45 = v44 | (v40 << 6);
            }
            else
            {
              int64_t v46 = v40 + 1;
              if (__OFADD__(v40, 1))
              {
                __break(1u);
LABEL_67:
                __break(1u);
LABEL_68:
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                return result;
              }
              if (v46 >= v123) {
                goto LABEL_59;
              }
              unint64_t v47 = *(void *)(v122 + 8 * v46);
              ++v40;
              if (!v47)
              {
                int64_t v40 = v46 + 1;
                if (v46 + 1 >= v123) {
                  goto LABEL_59;
                }
                unint64_t v47 = *(void *)(v122 + 8 * v40);
                if (!v47)
                {
                  int64_t v40 = v46 + 2;
                  if (v46 + 2 >= v123) {
                    goto LABEL_59;
                  }
                  unint64_t v47 = *(void *)(v122 + 8 * v40);
                  if (!v47)
                  {
                    int64_t v40 = v46 + 3;
                    if (v46 + 3 >= v123) {
                      goto LABEL_59;
                    }
                    unint64_t v47 = *(void *)(v122 + 8 * v40);
                    if (!v47)
                    {
                      int64_t v48 = v46 + 4;
                      if (v48 >= v123)
                      {
LABEL_59:
                        swift_release();
                        swift_bridgeObjectRelease();
                        unint64_t v88 = v113;
                        swift_bridgeObjectRetain();
                        uint64_t v89 = v112;
                        swift_bridgeObjectRetain();
                        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        v133._urlString = v41;
                        uint64_t v91 = v111;
                        sub_100562120(v111, (uint64_t)v89, v42, (uint64_t)v88, isUniquelyReferenced_nonNull_native);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        id v92 = [v110 statusCode];
                        id v93 = objc_allocWithZone((Class)NSHTTPURLResponse);
                        URL._bridgeToObjectiveC()(&v133);
                        os_log_type_t v95 = v94;
                        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                        swift_bridgeObjectRelease();
                        id v86 = [v93 initWithURL:v95 statusCode:v92 HTTPVersion:0 headerFields:isa];

                        if (v86)
                        {
                          v133._urlString = 0;
                          v133._baseURL = (NSURL *)0xE000000000000000;
                          _StringGuts.grow(_:)(41);
                          swift_bridgeObjectRelease();
                          v133._urlString = (NSString *)0xD00000000000001ELL;
                          v133._baseURL = (NSURL *)0x8000000100658970;
                          v97._uint64_t countAndFlagsBits = v42;
                          v97._object = v88;
                          String.append(_:)(v97);
                          v98._uint64_t countAndFlagsBits = 0x206874697720;
                          v98._object = (void *)0xE600000000000000;
                          String.append(_:)(v98);
                          v99._uint64_t countAndFlagsBits = v91;
                          v99._object = v89;
                          String.append(_:)(v99);
                          v100._uint64_t countAndFlagsBits = 46;
                          v100._object = (void *)0xE100000000000000;
                          String.append(_:)(v100);
                          urlString = v133._urlString;
                          baseURL = v133._baseURL;
                        }
                        else
                        {
                          urlString = (NSString *)0xD00000000000005BLL;
                          baseURL = (NSURL *)0x8000000100658910;
                        }
                        uint64_t v103 = v115;
                        defaultLogger()();
                        swift_bridgeObjectRetain();
                        uint64_t v104 = Logger.logObject.getter();
                        os_log_type_t v105 = static os_log_type_t.debug.getter();
                        if (os_log_type_enabled(v104, v105))
                        {
                          uint64_t v106 = (uint8_t *)swift_slowAlloc();
                          v133._urlString = (NSString *)swift_slowAlloc();
                          *(_DWORD *)uint64_t v106 = 136315138;
                          swift_bridgeObjectRetain();
                          *(void *)&v130[0] = sub_100110D58((uint64_t)urlString, (unint64_t)baseURL, (uint64_t *)&v133._urlString);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          swift_bridgeObjectRelease_n();
                          _os_log_impl((void *)&_mh_execute_header, v104, v105, "%s", v106, 0xCu);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          swift_slowDealloc();
                        }
                        else
                        {

                          swift_bridgeObjectRelease_n();
                        }

                        (*(void (**)(char *, uint64_t))(v118 + 8))(v103, v117);
                        (*(void (**)(char *, uint64_t))(v108 + 8))(v114, v109);
                        return (uint64_t)v86;
                      }
                      unint64_t v47 = *(void *)(v122 + 8 * v48);
                      if (!v47)
                      {
                        while (1)
                        {
                          int64_t v40 = v48 + 1;
                          if (__OFADD__(v48, 1)) {
                            goto LABEL_69;
                          }
                          if (v40 >= v123) {
                            goto LABEL_59;
                          }
                          unint64_t v47 = *(void *)(v122 + 8 * v40);
                          ++v48;
                          if (v47) {
                            goto LABEL_29;
                          }
                        }
                      }
                      int64_t v40 = v48;
                    }
                  }
                }
              }
LABEL_29:
              uint64_t v43 = v42;
              unint64_t v38 = (v47 - 1) & v47;
              unint64_t v45 = __clz(__rbit64(v47)) + (v40 << 6);
            }
            sub_10059256C(*(void *)(v34 + 48) + 40 * v45, (uint64_t)&v133._urlString);
            sub_10003BC28(*(void *)(v34 + 56) + 32 * v45, (uint64_t)v39);
            v131[0] = v134[0];
            v131[1] = v134[1];
            uint64_t v132 = v135;
            v130[0] = *(_OWORD *)&v133._urlString;
            v130[1] = *(_OWORD *)&v133._clients;
            sub_10059256C((uint64_t)v130, (uint64_t)v128);
            uint64_t v49 = v125;
            sub_10003BC28(v125, (uint64_t)v129);
            if (swift_dynamicCast())
            {
              int64_t v124 = v40;
              uint64_t v50 = v33;
              uint64_t v51 = v41;
              uint64_t v52 = v126;
              uint64_t v53 = v127;
              _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v129);
              sub_10059256C((uint64_t)v130, (uint64_t)v128);
              sub_10003BC28(v49, (uint64_t)v129);
              if (swift_dynamicCast())
              {
                uint64_t v54 = v126;
                uint64_t v55 = v127;
                sub_1001D90FC((uint64_t)v128);
                char v56 = swift_isUniquelyReferenced_nonNull_native();
                v128[0] = v51;
                unint64_t v57 = sub_100590548(v52, v53);
                uint64_t v59 = v51;
                unint64_t v60 = v57;
                NSString v61 = v59[2];
                BOOL v62 = (v58 & 1) == 0;
                uint64_t v63 = (uint64_t)v61 + v62;
                if (__OFADD__(v61, v62)) {
                  goto LABEL_67;
                }
                char v64 = v58;
                uint64_t v120 = v55;
                if ((uint64_t)v59[3] >= v63)
                {
                  int64_t v40 = v124;
                  if ((v56 & 1) == 0) {
                    sub_10016A364();
                  }
                  uint64_t v65 = v52;
                }
                else
                {
                  sub_100164294(v63, v56);
                  uint64_t v65 = v52;
                  unint64_t v66 = sub_100590548(v52, v53);
                  int64_t v40 = v124;
                  if ((v64 & 1) != (v67 & 1)) {
                    goto LABEL_70;
                  }
                  unint64_t v60 = v66;
                }
                unint64_t v41 = (NSString *)v128[0];
                if (v64)
                {
                  uint64_t v68 = (uint64_t *)(*(void *)(v128[0] + 56) + 16 * v60);
                  swift_bridgeObjectRelease();
                  uint64_t v69 = v120;
                  *uint64_t v68 = v54;
                  v68[1] = v69;
                }
                else
                {
                  *(void *)(v128[0] + 8 * (v60 >> 6) + 64) |= 1 << v60;
                  uint64_t v70 = (uint64_t *)((char *)v41[6] + 16 * v60);
                  *uint64_t v70 = v65;
                  v70[1] = v53;
                  Swift::String v71 = (uint64_t *)((char *)v41[7] + 16 * v60);
                  uint64_t v72 = v120;
                  *Swift::String v71 = v54;
                  v71[1] = v72;
                  unint64_t v73 = (char *)v41[2];
                  BOOL v74 = __OFADD__(v73, 1);
                  unint64_t v75 = v73 + 1;
                  if (v74) {
                    goto LABEL_68;
                  }
                  _OWORD v41[2] = v75;
                  swift_bridgeObjectRetain();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v42 = v119;
                os_log_type_t v33 = &type metadata for AnyHashable;
                uint64_t v34 = v116;
                Swift::String v39 = v121;
              }
              else
              {
                swift_bridgeObjectRelease();
                sub_1001D90FC((uint64_t)v128);
                Swift::String v39 = v121;
                uint64_t v42 = v43;
                unint64_t v41 = v51;
                os_log_type_t v33 = v50;
                int64_t v40 = v124;
              }
            }
            else
            {
              _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v129);
              uint64_t v42 = v43;
            }
            sub_10000C6CC((uint64_t)v130, &qword_100733258);
          }
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
      }
      sub_10000C6CC((uint64_t)v16, &qword_100720A68);
      defaultLogger()();
      uint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v84 = 0;
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Failed to override URLResponse Header: URLResponse doesn't have a valid URL. Aborting override", v84, 2u);
        swift_slowDealloc();
        uint64_t v85 = v28;
      }
      else
      {
        uint64_t v85 = v82;
        uint64_t v82 = v28;
      }

      (*(void (**)(char *, uint64_t))(v118 + 8))(v12, v117);
    }
    else
    {
      defaultLogger()();
      int v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v79, v80))
      {
        unint64_t v81 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v81 = 0;
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Failed to override URLResponse Header: URLResponse could not be downcasted to HTTPURLResponse.", v81, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v118 + 8))(v9, v117);
    }
  }
  else
  {
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    unint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      v133._urlString = (NSString *)swift_slowAlloc();
      *(_DWORD *)uint64_t v78 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v130[0] = sub_100110D58(v119, a2, (uint64_t *)&v133._urlString);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Failed to override URLResponse Header: '%s' override value is empty.", v78, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v118 + 8))(v6, v117);
  }
  return 0;
}

uint64_t static NSUserDefaults.globalString(forKey:)(uint64_t a1, uint64_t a2)
{
  id v4 = [self standardUserDefaults];
  id v5 = [v4 persistentDomainForName:NSGlobalDomain];

  if (!v5 || (uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(), v5, !v6))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    goto LABEL_12;
  }
  if (!*(void *)(v6 + 16))
  {
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_100590548(a1, a2);
  if ((v8 & 1) == 0)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_10003BC28(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_12:
    sub_10000C6CC((uint64_t)&v11, (uint64_t *)&unk_100727200);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v10;
  }
  return 0;
}

unint64_t sub_100590504(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100590F34(a1, v4);
}

unint64_t sub_100590548(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100590FFC(a1, a2, v4);
}

unint64_t sub_1005905C0(uint64_t a1)
{
  type metadata accessor for DIPError.PropertyKey();
  sub_100592740((unint64_t *)&qword_10071F7B8, (void (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10059177C(a1, v2, (uint64_t (*)(void))&type metadata accessor for DIPError.PropertyKey, &qword_10071F7C0, (void (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey, (uint64_t)&protocol conformance descriptor for DIPError.PropertyKey);
}

unint64_t sub_100590694(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1005910E0(a1, v4);
}

unint64_t sub_1005906D8(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_1005911EC(a1, v2);
}

unint64_t sub_10059071C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100591288(a1, v4, &qword_100726CC0);
}

unint64_t sub_10059076C(char a1)
{
  Hasher.init(_seed:)();
  sub_1001D9724(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10059139C(a1, v2);
}

unint64_t sub_1005907F4(uint64_t a1)
{
  type metadata accessor for IdentityKeyGenerationOption();
  sub_100592740(&qword_100733260, (void (*)(uint64_t))&type metadata accessor for IdentityKeyGenerationOption);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10059177C(a1, v2, (uint64_t (*)(void))&type metadata accessor for IdentityKeyGenerationOption, &qword_100733268, (void (*)(uint64_t))&type metadata accessor for IdentityKeyGenerationOption, (uint64_t)&protocol conformance descriptor for IdentityKeyGenerationOption);
}

unint64_t sub_1005908C8(uint64_t a1, unint64_t a2)
{
  Hasher.init(_seed:)();
  sub_10002CEB0(a1, a2);
  Data.hash(into:)();
  sub_10000C5F4(a1, a2);
  Swift::Int v4 = Hasher._finalize()();

  return sub_10059191C(a1, a2, v4);
}

unint64_t sub_100590958(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1005922FC(a1, v2);
}

unint64_t sub_100590A98(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_1005925C8(a1, v2);
}

unint64_t sub_100590B28(uint64_t a1)
{
  type metadata accessor for IdentityElement();
  sub_100592740(&qword_100729088, (void (*)(uint64_t))&type metadata accessor for IdentityElement);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10059177C(a1, v2, (uint64_t (*)(void))&type metadata accessor for IdentityElement, &qword_100733248, (void (*)(uint64_t))&type metadata accessor for IdentityElement, (uint64_t)&protocol conformance descriptor for IdentityElement);
}

unint64_t sub_100590BFC(uint64_t a1)
{
  type metadata accessor for MobileDocumentElement.Element();
  sub_100592740(&qword_100733280, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement.Element);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10059177C(a1, v2, (uint64_t (*)(void))&type metadata accessor for MobileDocumentElement.Element, &qword_100733288, (void (*)(uint64_t))&type metadata accessor for MobileDocumentElement.Element, (uint64_t)&protocol conformance descriptor for MobileDocumentElement.Element);
}

unint64_t sub_100590CD0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100591288(a1, v4, &qword_1007264E0);
}

unint64_t sub_100590D20(uint64_t a1)
{
  type metadata accessor for ECIESOption();
  sub_100592740(&qword_100733270, (void (*)(uint64_t))&type metadata accessor for ECIESOption);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10059177C(a1, v2, (uint64_t (*)(void))&type metadata accessor for ECIESOption, &qword_100733278, (void (*)(uint64_t))&type metadata accessor for ECIESOption, (uint64_t)&protocol conformance descriptor for ECIESOption);
}

unint64_t sub_100590DF4(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_1005911EC(a1, v2);
}

unint64_t sub_100590E60(uint64_t a1)
{
  type metadata accessor for IQCType();
  sub_100592740(&qword_100725898, (void (*)(uint64_t))&type metadata accessor for IQCType);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10059177C(a1, v2, (uint64_t (*)(void))&type metadata accessor for IQCType, &qword_100733250, (void (*)(uint64_t))&type metadata accessor for IQCType, (uint64_t)&protocol conformance descriptor for IQCType);
}

unint64_t sub_100590F34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10059256C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1001D90FC((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100590FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1005910E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for IdentityGesture();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1005911EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100591288(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_100025C28(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10059139C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEB0000000064657ALL;
      unint64_t v8 = 0x696C616974696E69;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x7465536E69676562;
          unint64_t v7 = 0xEA00000000007075;
          break;
        case 2:
          unint64_t v8 = 0xD000000000000011;
          unint64_t v7 = 0x8000000100629AB0;
          break;
        case 3:
          unint64_t v8 = 0x7465467075746573;
          unint64_t v7 = 0xEF73656E6F5A6863;
          break;
        case 4:
          unint64_t v8 = 0xD000000000000017;
          unint64_t v7 = 0x8000000100629AE0;
          break;
        case 5:
          unint64_t v7 = 0x8000000100629B00;
          unint64_t v8 = 0xD000000000000010;
          break;
        case 6:
          unint64_t v8 = 0xD000000000000018;
          unint64_t v7 = 0x8000000100629B20;
          break;
        case 7:
          unint64_t v8 = 0x6F5A6574656C6564;
          unint64_t v7 = 0xEB0000000073656ELL;
          break;
        case 8:
          unint64_t v8 = 0x6465686361747461;
          unint64_t v7 = 0xE800000000000000;
          break;
        case 9:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x6465686361746564;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xEB0000000064657ALL;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xEA00000000007075;
          if (v8 == 0x7465536E69676562) {
            goto LABEL_15;
          }
          goto LABEL_16;
        case 2:
          unint64_t v11 = 0xD000000000000011;
          uint64_t v12 = "";
          goto LABEL_25;
        case 3:
          unint64_t v9 = 0xEF73656E6F5A6863;
          if (v8 != 0x7465467075746573) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 4:
          unint64_t v11 = 0xD000000000000017;
          uint64_t v12 = "t";
LABEL_25:
          unint64_t v9 = (unint64_t)v12 | 0x8000000000000000;
          if (v8 != v11) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 5:
          unint64_t v9 = 0x8000000100629B00;
          if (v8 != 0xD000000000000010) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 6:
          unint64_t v9 = 0x8000000100629B20;
          if (v8 != 0xD000000000000018) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 7:
          unint64_t v9 = 0xEB0000000073656ELL;
          if (v8 != 0x6F5A6574656C6564) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 8:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x6465686361747461) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 9:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x6465686361746564) {
            goto LABEL_16;
          }
          goto LABEL_15;
        default:
          if (v8 != 0x696C616974696E69) {
            goto LABEL_16;
          }
LABEL_15:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_16:
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v10) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_10059177C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  unint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_100592740(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_10059191C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v86 = HIDWORD(a1) - (int)a1;
    uint64_t v87 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v85 = v11;
    unint64_t v88 = a2 >> 62;
    uint64_t v83 = v3 + 64;
    uint64_t v84 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v79 = (a1 >> 32) - (int)a1;
    unint64_t v89 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_10002CEB0(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_123;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v89)
      {
        case 1uLL:
          size_t v18 = v86;
          if (v85) {
            goto LABEL_124;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_125;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_120;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_120:
              sub_10000C5F4(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_126;
                }
                sub_10002CEB0(v14, v13);
                uint64_t v26 = __DataStorage._bytes.getter();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_128;
                  }
                  id v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  id v29 = 0;
                }
                __DataStorage._length.getter();
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_156;
                  }
                  int v39 = memcmp(v29, __s1, __n);
                  goto LABEL_102;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_137;
                  }
                  swift_retain();
                  unint64_t v47 = (char *)__DataStorage._bytes.getter();
                  if (v47)
                  {
                    uint64_t v48 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v48)) {
                      goto LABEL_144;
                    }
                    v47 += v84 - v48;
                  }
                  uint64_t v49 = __DataStorage._length.getter();
                  size_t v50 = v79;
                  if (v49 < v79) {
                    size_t v50 = v49;
                  }
                  if (!v29) {
                    goto LABEL_149;
                  }
                  if (!v47) {
                    goto LABEL_150;
                  }
                  int v39 = memcmp(v29, v47, v50);
                  sub_10000C5F4(a1, v8);
LABEL_102:
                  uint64_t v40 = v14;
                  unint64_t v41 = v13;
LABEL_103:
                  sub_10000C5F4(v40, v41);
                  goto LABEL_104;
                }
                uint64_t v69 = *(void *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = __DataStorage._bytes.getter();
                if (v70)
                {
                  uint64_t v71 = v70;
                  uint64_t v72 = __DataStorage._offset.getter();
                  if (__OFSUB__(v69, v72)) {
                    goto LABEL_143;
                  }
                  unint64_t v73 = (const void *)(v71 + v69 - v72);
                }
                else
                {
                  unint64_t v73 = 0;
                }
                if (__OFSUB__(v78, v69)) {
                  goto LABEL_138;
                }
                uint64_t v74 = __DataStorage._length.getter();
                if (v74 >= v78 - v69) {
                  size_t v75 = v78 - v69;
                }
                else {
                  size_t v75 = v74;
                }
                if (!v29) {
                  goto LABEL_157;
                }
                uint64_t v4 = v83;
                if (!v73) {
                  goto LABEL_158;
                }
                int v62 = memcmp(v29, v73, v75);
                swift_release();
                swift_release();
                sub_10000C5F4(v14, v13);
LABEL_117:
                sub_10000C5F4(v14, v13);
                unint64_t v8 = a2;
                uint64_t v10 = v87;
                if (!v62) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_127;
                  }
                  uint64_t v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v34 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v4 = v83;
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LODWORD(__s1[1]) = a2;
                  WORD2(__s1[1]) = WORD2(a2);
                  if (!v34) {
                    goto LABEL_153;
                  }
                  int v62 = memcmp(v34, __s1, __n);
                  swift_release();
LABEL_99:
                  swift_release();
                  goto LABEL_117;
                }
                if (v88 != 1)
                {
                  uint64_t v63 = *(void *)(a1 + 16);
                  uint64_t v77 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  char v64 = (char *)__DataStorage._bytes.getter();
                  if (v64)
                  {
                    uint64_t v65 = __DataStorage._offset.getter();
                    if (__OFSUB__(v63, v65)) {
                      goto LABEL_141;
                    }
                    v64 += v63 - v65;
                  }
                  BOOL v21 = __OFSUB__(v77, v63);
                  int64_t v66 = v77 - v63;
                  if (v21) {
                    goto LABEL_136;
                  }
                  uint64_t v67 = __DataStorage._length.getter();
                  if (v67 >= v66) {
                    size_t v68 = v66;
                  }
                  else {
                    size_t v68 = v67;
                  }
                  if (!v34) {
                    goto LABEL_154;
                  }
                  uint64_t v4 = v83;
                  if (!v64) {
                    goto LABEL_155;
                  }
                  int v62 = memcmp(v34, v64, v68);
                  swift_release();
                  swift_release();
                  swift_release();
                  goto LABEL_99;
                }
                if (v81 < v84) {
                  goto LABEL_131;
                }
                swift_retain();
                uint64_t v43 = (char *)__DataStorage._bytes.getter();
                if (v43)
                {
                  uint64_t v44 = __DataStorage._offset.getter();
                  if (__OFSUB__(v84, v44)) {
                    goto LABEL_142;
                  }
                  v43 += v84 - v44;
                }
                uint64_t v45 = __DataStorage._length.getter();
                size_t v46 = v79;
                if (v45 < v79) {
                  size_t v46 = v45;
                }
                if (!v34) {
                  goto LABEL_147;
                }
                if (!v43) {
                  goto LABEL_148;
                }
                int v39 = memcmp(v34, v43, v46);
                unint64_t v8 = a2;
                sub_10000C5F4(a1, a2);
                swift_release();
                swift_release();
LABEL_104:
                sub_10000C5F4(v14, v13);
                uint64_t v10 = v87;
                if (!v39) {
                  return v6;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v88) {
                  goto LABEL_45;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_130;
                  }
                  sub_10002CEB0(a1, v8);
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_146;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v36;
                  if (__OFSUB__(v84, v36)) {
                    goto LABEL_135;
                  }
LABEL_41:
                  uint64_t v37 = __DataStorage._length.getter();
                  if (v37 >= v79) {
                    size_t v38 = v79;
                  }
                  else {
                    size_t v38 = v37;
                  }
                  int v39 = memcmp(__s1, (const void *)(v23 + v25), v38);
                  uint64_t v40 = a1;
                  unint64_t v41 = v8;
                  goto LABEL_103;
                }
                uint64_t v57 = *(void *)(a1 + 16);
                uint64_t v58 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v59 = __DataStorage._offset.getter();
                  if (__OFSUB__(v57, v59)) {
                    goto LABEL_140;
                  }
                  v53 += v57 - v59;
                }
                BOOL v21 = __OFSUB__(v58, v57);
                int64_t v55 = v58 - v57;
                if (v21) {
                  goto LABEL_133;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_152;
                }
LABEL_82:
                if (v56 >= v55) {
                  size_t v60 = v55;
                }
                else {
                  size_t v60 = v56;
                }
                int v61 = memcmp(__s1, v53, v60);
                swift_release();
                swift_release();
                sub_10000C5F4(v14, v13);
                uint64_t v4 = v83;
                uint64_t v10 = v87;
                if (!v61) {
                  return v6;
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v88)
                {
LABEL_45:
                  __int16 __s2 = a1;
                  char v92 = BYTE2(a1);
                  char v93 = BYTE3(a1);
                  char v94 = v80;
                  char v95 = BYTE5(a1);
                  char v96 = BYTE6(a1);
                  char v97 = HIBYTE(a1);
                  __int16 v98 = v8;
                  char v99 = BYTE2(v8);
                  char v100 = BYTE3(v8);
                  char v101 = BYTE4(v8);
                  char v102 = BYTE5(v8);
                  int v42 = memcmp(__s1, &__s2, __n);
                  sub_10000C5F4(v14, v13);
                  if (!v42) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_129;
                  }
                  sub_10002CEB0(a1, v8);
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_146:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
                    JUMPOUT(0x1005922CCLL);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v24;
                  if (__OFSUB__(v84, v24)) {
                    goto LABEL_134;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_139;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_132;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_151;
                }
                goto LABEL_82;
            }
          }
          else
          {
LABEL_7:
            sub_10000C5F4(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

unint64_t sub_1005922FC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEF746E6F7246746ELL;
      uint64_t v8 = 0x656D75636F446469;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          uint64_t v9 = 0x6B636142746ELL;
          goto LABEL_8;
        case 2:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x6569666C6573;
          break;
        case 3:
          uint64_t v8 = 0x7373656E6576696CLL;
          unint64_t v7 = 0xED00006F65646956;
          break;
        case 4:
          uint64_t v8 = 0x7261696C69787561;
          uint64_t v9 = 0x6F6564695679;
LABEL_8:
          unint64_t v7 = v9 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          break;
        default:
          break;
      }
      uint64_t v10 = 0x656D75636F446469;
      unint64_t v11 = 0xEF746E6F7246746ELL;
      switch(v6)
      {
        case 1:
          uint64_t v12 = 0x6B636142746ELL;
          goto LABEL_17;
        case 2:
          unint64_t v11 = 0xE600000000000000;
          if (v8 != 0x6569666C6573) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 3:
          uint64_t v10 = 0x7373656E6576696CLL;
          unint64_t v11 = 0xED00006F65646956;
          goto LABEL_14;
        case 4:
          uint64_t v10 = 0x7261696C69787561;
          uint64_t v12 = 0x6F6564695679;
LABEL_17:
          unint64_t v11 = v12 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          if (v8 == v10) {
            goto LABEL_18;
          }
          goto LABEL_19;
        default:
LABEL_14:
          if (v8 != v10) {
            goto LABEL_19;
          }
LABEL_18:
          if (v7 == v11)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_19:
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v13) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

uint64_t sub_10059256C(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1005925C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_100592740(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100592788()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v18 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SecKeyRef.KeyClass();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = dispatch thunk of SESKeystore.getPublicKey(of:)();
  if (!v0)
  {
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    uint64_t v16 = v1;
    uint64_t v17 = v3;
    type metadata accessor for SecKey(0);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for SecKeyRef.KeyClass.public(_:), v4);
    uint64_t v12 = (void *)static SecKeyRef.makeECKey(from:keyClass:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_10000C5F4(v10, v11);
    uint64_t v13 = SecKeyRef.publicKeyData.getter();
    if (v14 >> 60 == 15)
    {
      (*(void (**)(char *, void, uint64_t))(v18 + 104))(v17, enum case for DIPError.Code.sesKeyPublicKeyError(_:), v16);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_10000C588();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
    else
    {
      uint64_t v4 = v13;
    }
  }
  return v4;
}

uint64_t sub_100592AA8()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v5 = __DataStorage.init(length:)();
  id v6 = sub_100592CE4(0x2000000000, v5 | 0x4000000000000000);
  sub_10000C5F4((uint64_t)v6, v7);
  swift_release();
  dispatch thunk of static DateProvider.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return SecCertificateIsValid();
}

id sub_100592CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v2 = type metadata accessor for SESKeystore.SignatureOutputFormat();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)LAContext) init];
  id result = [v13 externalizedContext];
  if (result)
  {
    unint64_t v7 = result;
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for SESKeystore.SignatureOutputFormat.raw(_:), v2);
    uint64_t v11 = dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_10000C5F4(v8, v10);

    return (id)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100592EA4()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_installationIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10000C5F4(*(void *)(v0 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob), *(void *)(v0 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob + 8));

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100592F80()
{
  return type metadata accessor for MobileDocumentReaderIdentityKey();
}

uint64_t type metadata accessor for MobileDocumentReaderIdentityKey()
{
  uint64_t result = qword_1007332D0;
  if (!qword_1007332D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100592FD4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005930A0(uint64_t *a1, uint64_t *a2)
{
  return sub_100593554(*a1, *a2);
}

uint64_t sub_1005930AC()
{
  return sub_10059368C();
}

uint64_t sub_1005930C4()
{
  uint64_t v2 = type metadata accessor for SecKeyRef.KeyClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(*v0 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keystore);
  uint64_t v7 = dispatch thunk of SESKeystore.getPublicKey(of:)();
  if (!v1)
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    type metadata accessor for SecKey(0);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for SecKeyRef.KeyClass.public(_:), v2);
    uint64_t v6 = static SecKeyRef.makeECKey(from:keyClass:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_10000C5F4(v9, v10);
  }
  return v6;
}

uint64_t sub_100593258()
{
  return sub_100592788();
}

id sub_10059327C(uint64_t a1, uint64_t a2)
{
  return sub_100592CE4(a1, a2);
}

void *sub_1005932A0()
{
  Swift::String_optional v0 = SecCertificateRef.base64EncodedString()();
  if (!v0.value._object) {
    return _swiftEmptyArrayStorage;
  }
  sub_100007764(&qword_100730CD0);
  uint64_t result = (void *)swift_allocObject();
  *((_OWORD *)result + 1) = xmmword_100610730;
  *((Swift::String_optional *)result + 2) = v0;
  return result;
}

uint64_t sub_100593320@<X0>(uint64_t a1@<X8>)
{
  return sub_1005934E4((unsigned int *)&enum case for HardwareAttestationType.SE(_:), (uint64_t (*)(void))&type metadata accessor for HardwareAttestationType, a1);
}

uint64_t sub_100593340()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderIdentityKey persisting is done outside of this method. This is a no-op.", v6, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100593484()
{
  return sub_100307568(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8), v0, 0, 0xF000000000000000);
}

uint64_t sub_1005934C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1005934E4(&enum case for JWSAlgorithm.ES256(_:), (uint64_t (*)(void))&type metadata accessor for JWSAlgorithm, a1);
}

uint64_t sub_1005934E4@<X0>(unsigned int *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a3, v4, v5);
}

uint64_t sub_100593554(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  if (v4 || (char v5 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((static UUID.== infix(_:_:)() & 1) != 0
      && (sub_100510850(*(void *)(a1 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob), *(void *)(a1 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob + 8), *(void *)(a2 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob), *(void *)(a2 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob + 8)) & 1) != 0)
    {
      Swift::String_optional v6 = SecCertificateRef.base64EncodedString()();
      Swift::String_optional v7 = SecCertificateRef.base64EncodedString()();
      if (v6.value._object)
      {
        if (v7.value._object)
        {
          if (v6.value._countAndFlagsBits == v7.value._countAndFlagsBits && v6.value._object == v7.value._object)
          {
            swift_bridgeObjectRelease();
            char v5 = 1;
          }
          else
          {
            char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          char v5 = 0;
        }
      }
      else
      {
        if (!v7.value._object)
        {
          char v5 = 1;
          return v5 & 1;
        }
        char v5 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      char v5 = 0;
    }
  }
  return v5 & 1;
}

uint64_t sub_10059368C()
{
  uint64_t v0 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v0);
  (*(void (**)(char *, void))(v2 + 104))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for DIPError.Code.unexpectedDaemonState(_:));
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError();
  sub_10000C588();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  return swift_willThrow();
}

uint64_t sub_100593800(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_100593844(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_1005938A8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void *sub_100593910()
{
  uint64_t v0 = type metadata accessor for IdentityBMUserProofingStreamWrapper();
  uint64_t v1 = swift_allocObject();
  id v2 = [(id)BiomeLibrary() WalletPaymentsCommerce];
  swift_unknownObjectRelease();
  id v3 = [v2 UserProofing];
  swift_unknownObjectRelease();
  id v4 = [v3 Result];
  swift_unknownObjectRelease();
  *(void *)(v1 + 16) = v4;
  type metadata accessor for BMUserProofingEventFactory();
  uint64_t v5 = swift_allocObject();
  id v6 = [objc_allocWithZone((Class)IdentityProofingBiomeDataDeletionManager) init];
  v17[3] = v0;
  v17[4] = &off_1006F8EA0;
  v17[0] = v1;
  type metadata accessor for IdentityProofingBiomeManager();
  Swift::String_optional v7 = (void *)swift_allocObject();
  uint64_t v8 = sub_1000279F4((uint64_t)v17, v0);
  __chkstk_darwin(v8);
  unint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = *v10;
  uint64_t v15 = v0;
  uint64_t v16 = &off_1006F8EA0;
  *(void *)&long long v14 = v12;
  v7[9] = 90;
  sub_10000C6B4(&v14, (uint64_t)(v7 + 2));
  v7[7] = v5;
  v7[8] = v6;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v17);
  return v7;
}

void *sub_100593AFC()
{
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v31 = *(void *)(v0 - 8);
  uint64_t v32 = v0;
  __chkstk_darwin(v0);
  uint64_t v30 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  sub_1000309D0();
  static DispatchQoS.unspecified.getter();
  v36[0] = _swiftEmptyArrayStorage;
  sub_1005A8CB0((unint64_t *)&qword_10071FF60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007764((uint64_t *)&unk_100726420);
  sub_100031134((unint64_t *)&qword_10071FF70, (uint64_t *)&unk_100726420);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  uint64_t v8 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_10071F4C0 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1007602F0;
  uint64_t v10 = type metadata accessor for IdentityProofingActionNotificationFlow();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  id v13 = v30;
  uint64_t v14 = v31;
  uint64_t v15 = v32;
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v30, enum case for DispatchQoS.QoSClass.default(_:), v32);
  swift_retain();
  uint64_t v16 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v15);
  uint64_t v17 = sub_1005EC0D0(0, v12, v16);
  type metadata accessor for IdentityProofingBackgroundActivityScheduler();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 3600;
  type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  uint64_t v19 = swift_allocObject();
  type metadata accessor for IdentityProofingWorkflowProvider();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  type metadata accessor for IdentityProofingUploadsHelper();
  uint64_t v21 = swift_allocObject();
  type metadata accessor for NetworkMonitor();
  *(void *)(v21 + 16) = static NetworkMonitor.shared.getter();
  *(void *)(v21 + 24) = v20;
  _OWORD v36[3] = v10;
  v36[4] = &off_1006FABE0;
  v36[0] = v11;
  type metadata accessor for IdentityProofingUpdateManager();
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v23 = sub_1000279F4((uint64_t)v36, v10);
  __chkstk_darwin(v23);
  uint64_t v25 = (uint64_t *)((char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = *v25;
  uint64_t v34 = v10;
  uint64_t v35 = &off_1006FABE0;
  *(void *)&long long v33 = v27;
  v22[2] = v8;
  v22[3] = v9;
  sub_10000C6B4(&v33, (uint64_t)(v22 + 4));
  v22[9] = v17;
  v22[10] = v18;
  v22[11] = v21;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v36);
  return v22;
}

uint64_t sub_10059400C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100007764((uint64_t *)&unk_100723450);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    id v8 = a2;
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    uint64_t v12 = *(uint64_t **)(*(void *)(v3 + 64) + 40);
    uint64_t *v12 = v9;
    v12[1] = v11;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1005940E0(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IdentityProofingPendingActionsWebService();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  id v7 = [objc_allocWithZone((Class)PKPaymentService) init];
  type metadata accessor for IdentityProofingConfigProvider();
  uint64_t v8 = swift_allocObject();
  type metadata accessor for IdentityProofingTextReplacementProvider();
  swift_allocObject();
  uint64_t v9 = IdentityProofingTextReplacementProvider.init()();
  type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  uint64_t v10 = swift_allocObject();
  type metadata accessor for IdentityProofingWorkflowProvider();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  type metadata accessor for IdentityProofingUserNotificationProvider();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = sub_1005EBED8((uint64_t)v7, (uint64_t)v22, v8, v9, v11, v12);
  uint64_t v14 = sub_1005E8390();
  type metadata accessor for IdentityProofingActionNotificationFlow();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  sub_1000309D0();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v2);
  uint64_t v16 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v17 = sub_1005EC0D0(0, v15, v16);
  uint64_t v18 = sub_1005E860C();
  if (qword_10071F580 != -1) {
    swift_once();
  }
  uint64_t v19 = (void *)qword_1007607E8;
  type metadata accessor for IdentityWatchProvisioningManagerFactory();
  uint64_t v20 = swift_allocObject();
  type metadata accessor for IdentityProofingPendingActionsFlow();
  swift_allocObject();
  return sub_100473B6C(a1, v6, v13, v14, 0, v17, (uint64_t)v18, v19, 0, v20);
}

char *sub_1005943B8()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR____TtC8coreidvd26IdentityManagementListener_watchSessionManager;
  id v6 = objc_allocWithZone((Class)type metadata accessor for IdentityWatchSessionManagementListener());
  id v7 = v0;
  *(void *)&v0[v5] = [v6 init];
  machServiceIdentityManagementUI.getter();
  id v8 = objc_allocWithZone((Class)NSXPCListener);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithMachServiceName:v9];

  *(void *)&v7[OBJC_IVAR____TtC8coreidvd26IdentityManagementListener_xpcListener] = v10;
  uint64_t v11 = (objc_class *)type metadata accessor for IdentityManagementListener();
  v19.receiver = v7;
  v19.super_class = v11;
  uint64_t v12 = (char *)[super init];
  uint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC8coreidvd26IdentityManagementListener_xpcListener];
  uint64_t v14 = v12;
  [v13 setDelegate:v14];
  [v13 resume];
  defaultLogger()();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Identity management listener is started", v17, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v14;
}

id sub_100594604()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Identity management listener is tearing down", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  NSString v9 = (objc_class *)type metadata accessor for IdentityManagementListener();
  v11.receiver = v1;
  v11.super_class = v9;
  return [super dealloc];
}

uint64_t sub_1005947D4(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  NSString v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  objc_super v11 = (char *)&v30 - v10;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v13 = (void *)Strong;
    defaultLogger()();
    id v14 = v13;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v32 = v5;
      uint64_t v34 = v18;
      *(_DWORD *)uint64_t v17 = 136315394;
      uint64_t v30 = v17 + 4;
      id v19 = v14;
      id v20 = [v19 description];
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = a2;
      unint64_t v23 = v22;

      uint64_t v33 = sub_100110D58(v21, v23, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 1024;
      LODWORD(v21) = [v19 processIdentifier];

      LODWORD(v33) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v15, v16, v31, (uint8_t *)v17, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v32);
    }

    uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    uint64_t v29 = v9;
  }
  else
  {
    defaultLogger()();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, a3, v27, 2u);
      swift_slowDealloc();
    }

    uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    uint64_t v29 = v11;
  }
  return v28(v29, v5);
}

uint64_t type metadata accessor for IdentityManagementListener()
{
  return self;
}

uint64_t sub_100594BB4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    *a3 = *a1;
  }
  else
  {
    uint64_t v40 = a1;
    unint64_t v41 = a3;
    uint64_t v45 = v3;
    id v39 = *(id *)(a2 + 72);
    uint64_t v38 = sub_1005940E0(3);
    type metadata accessor for IdentityProofingConfigProvider();
    uint64_t v37 = swift_allocObject();
    uint64_t v36 = sub_1005940E0(0);
    uint64_t v11 = swift_allocObject();
    type metadata accessor for IdentityProofingAttributeConfigHelper();
    swift_allocObject();
    uint64_t v12 = IdentityProofingAttributeConfigHelper.init()();
    type metadata accessor for IdentityProofingAssetsProvider();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    type metadata accessor for IdentityProofingAuthCodeUIProvider();
    id v14 = (void *)swift_allocObject();
    v14[5] = 0;
    v14[6] = 0;
    v14[2] = v36;
    v14[3] = v11;
    v14[4] = v13;
    type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
    uint64_t v15 = swift_allocObject();
    type metadata accessor for IdentityProofingWorkflowProvider();
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = v15;
    type metadata accessor for IdentityProofingLivenessConfigProvider();
    swift_allocObject();
    uint64_t v35 = sub_100466060();
    swift_allocObject();
    uint64_t v16 = IdentityProofingAttributeConfigHelper.init()();
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = v16;
    type metadata accessor for IdentityProofingTermsAndConditionsProvider();
    uint64_t v33 = swift_allocObject();
    uint64_t v17 = type metadata accessor for IdentityProofingActionNotificationFlow();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = 0;
    sub_1000309D0();
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
    uint64_t v32 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (qword_10071F5A8 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_100760858;
    uint64_t v31 = swift_allocObject();
    type metadata accessor for IdentityProofingCleanupProviderFactory();
    uint64_t v20 = swift_allocObject();
    type metadata accessor for IdentityProvisioningManager();
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v44 = 0;
    swift_allocObject();
    swift_retain();
    uint64_t v21 = sub_1004DEDFC((uint64_t)&v42);
    *((void *)&v43 + 1) = v17;
    uint64_t v44 = &off_1006FABE0;
    *(void *)&long long v42 = v18;
    type metadata accessor for IdentityProofingFlow();
    unint64_t v22 = (void *)swift_allocObject();
    uint64_t v23 = sub_1000279F4((uint64_t)&v42, v17);
    __chkstk_darwin(v23);
    uint64_t v25 = (uint64_t *)((char *)&v30 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v26 + 16))(v25);
    uint64_t v27 = *v25;
    swift_retain();
    uint64_t v28 = sub_1005A51BC(v38, v37, (uint64_t)v14, v36, v35, v34, v39, v33, v27, v32, v19, v31, v20, v21, v22);
    swift_release();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v42);
    swift_release();
    *uint64_t v40 = v28;
    *unint64_t v41 = v28;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_10059505C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = v0;
    uint64_t v7 = (uint8_t *)v6;
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    uint64_t v13 = sub_100110D58(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "error: identity management ui client init %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v12);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

uint64_t sub_100595290(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  return sub_1005A43A4(a1, a3);
}

uint64_t sub_10059531C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for DIPError();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v4[14] = v6;
  v4[15] = *(void *)(v6 - 8);
  v4[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[17] = v7;
  v4[18] = *(void *)(v7 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_1005954A8, 0, 0);
}

void sub_1005954A8()
{
  unint64_t v22 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting prepareForProofingDisplay", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[18];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[21] = v7;
  v0[22] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  v8._object = (void *)0x8000000100659440;
  v9._uint64_t countAndFlagsBits = 0x6664373163653865;
  v9._object = (void *)0xE800000000000000;
  v8._uint64_t countAndFlagsBits = 0xD000000000000022;
  logMilestone(tag:description:)(v9, v8);
  sub_1005A2760();
  uint64_t v10 = *(os_unfair_lock_s **)(v0[10] + 40);
  uint64_t v11 = v10 + 4;
  uint64_t v12 = v10 + 6;
  os_unfair_lock_lock(v10 + 6);
  sub_1005A3CAC(v11, &v21);
  os_unfair_lock_unlock(v12);
  uint64_t v13 = (void *)v0[7];
  uint64_t v14 = v21;
  v0[23] = v21;
  uint64_t v15 = *(void **)(v14 + 56);
  *(void *)(v14 + 56) = v13;
  id v16 = v13;

  uint64_t v17 = (void *)swift_task_alloc();
  v0[24] = v17;
  void *v17 = v0;
  v17[1] = sub_1005958D4;
  uint64_t v18 = v0[8];
  uint64_t v19 = v0[9];
  uint64_t v20 = v0[7];
  sub_100265554(v20, v18, v19);
}

uint64_t sub_1005958D4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 200) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100595A60, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_100595A60()
{
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  swift_errorRetain();
  sub_100505B68(v0 + 16);
  sub_10000C6CC(v0 + 16, &qword_1007284E8);
  uint64_t v4 = enum case for DIPError.Code.internalError(_:);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  v15(v1, enum case for DIPError.Code.internalError(_:), v3);
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  id v16 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  v15(*(void *)(v0 + 128), v4, *(void *)(v0 + 112));
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_allocError();
  Swift::String v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v9(v10, v6, v8);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v16(v5, v14);
  swift_errorRelease();
  swift_allocError();
  v9(v11, v6, v8);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100595F38(void *a1, uint64_t a2, uint64_t a3, void *aBlock, uint64_t a5)
{
  v5[2] = a1;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  id v9 = a1;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v5[5] = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_10046AAC4;
  return sub_10059531C((uint64_t)v9, a2, a3);
}

uint64_t sub_100596014(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v2[12] = v4;
  v2[13] = *(void *)(v4 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[15] = v5;
  v2[16] = *(void *)(v5 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_10059619C, 0, 0);
}

void sub_10059619C()
{
  uint64_t v18 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting prepareForProofingIdentity", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_1005A2760();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  uint64_t v7 = *(void *)(v0 + 64);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  uint64_t v8 = *(os_unfair_lock_s **)(v7 + 40);
  id v9 = v8 + 4;
  uint64_t v10 = v8 + 6;
  os_unfair_lock_lock(v8 + 6);
  sub_1005A3CAC(v9, &v17);
  os_unfair_lock_unlock(v10);
  uint64_t v11 = *(void **)(v17 + 56);
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = IdentityProofingConfiguration.country.getter();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  sub_100296FCC(*(void **)(v0 + 56), v13, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v16 = *(void (**)(void))(v0 + 8);
  v16();
}

uint64_t sub_100596758(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10049BC4C;
  return sub_100596014((uint64_t)v5);
}

uint64_t sub_1005969B8(void *a1, int a2, void *aBlock, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  id v9 = (uint64_t (*)(uint64_t))((char *)&dword_100733910 + dword_100733910);
  id v6 = a1;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v4[5] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_1004AD238;
  return v9((uint64_t)v6);
}

uint64_t sub_100596A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError();
  v4[14] = v6;
  v4[15] = *(void *)(v6 - 8);
  v4[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[17] = v7;
  v4[18] = *(void *)(v7 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_100596C1C, 0, 0);
}

void sub_100596C1C()
{
  uint64_t v17 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting provisionIdentity", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[18];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[21] = v7;
  v0[22] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v0 + 2, v0[5]);
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  uint64_t v8 = v0[10];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v9 = *(os_unfair_lock_s **)(v8 + 40);
  uint64_t v10 = v9 + 4;
  uint64_t v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  sub_1005A3CAC(v10, &v16);
  os_unfair_lock_unlock(v11);
  v0[23] = v16;
  id v12 = (void *)swift_task_alloc();
  v0[24] = v12;
  void *v12 = v0;
  v12[1] = sub_100597054;
  uint64_t v13 = v0[8];
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[7];
  sub_100505EB4(v15, v13, v14);
}

uint64_t sub_100597054()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1005971CC, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1005971CC()
{
  swift_release();
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[21];
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[16];
  uint64_t v10 = v0[17];
  uint64_t v4 = v0[14];
  uint64_t v3 = v0[15];
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for DIPError.Code.internalError(_:), v0[11]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1005975AC(int a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  v4[4] = v7;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[5] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100597690;
  return sub_100596A90(v6, v8, a2);
}

uint64_t sub_100597690()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v8 = *(uint64_t (**)(void))(v5 + 8);
  return v8();
}

uint64_t sub_100597834(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  int v30 = a3;
  uint64_t v29 = a2;
  uint64_t v33 = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v12 - 8);
  uint64_t v35 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = v14;
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Starting Proofing flow", v21, 2u);
    uint64_t v14 = v28;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v33;
  *(void *)(v22 + 16) = v7;
  *(void *)(v22 + 24) = v23;
  *(void *)(v22 + 32) = v29;
  *(unsigned char *)(v22 + 40) = v30 & 1;
  uint64_t v24 = v32;
  *(void *)(v22 + 48) = v31;
  *(void *)(v22 + 56) = v24;
  *(void *)(v22 + 64) = a6;
  aBlock[4] = sub_1005A8C80;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_100593800;
  aBlock[3] = &unk_100709060;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  id v26 = v23;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v37 = _swiftEmptyArrayStorage;
  sub_1005A8CB0((unint64_t *)&unk_1007223A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007764((uint64_t *)&unk_1007208F0);
  sub_100031134(&qword_1007223B0, (uint64_t *)&unk_1007208F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v35);
  return swift_release();
}

void sub_100597C50(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, void (*a6)(void *, uint64_t), uint64_t a7)
{
  uint64_t v9 = type metadata accessor for Logger();
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for DIPError();
  __chkstk_darwin(v11);
  sub_1005A2760();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v22, v22[3]);
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v22);
  uint64_t v12 = *(os_unfair_lock_s **)(a1 + 40);
  uint64_t v13 = v12 + 4;
  uint64_t v14 = v12 + 6;
  os_unfair_lock_lock(v12 + 6);
  sub_1005A3CAC(v13, v22);
  os_unfair_lock_unlock(v14);
  uint64_t v15 = *(void **)(v22[0] + 56);
  id v16 = v15;
  sub_1002439A4(v15, a2, a3, a4 & 1, a5, a6, a7);
  swift_release();
}

void sub_100598164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_100598418(void *a1, int a2, void *aBlock, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_1007338C8 + dword_1007338C8);
  id v6 = a1;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v4[5] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_10049BC4C;
  return v9();
}

uint64_t sub_1005984E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  void v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[15] = v8;
  v5[16] = *(void *)(v8 - 8);
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  return _swift_task_switch(sub_100598678, 0, 0);
}

uint64_t sub_100598678()
{
  id v26 = v0;
  defaultLogger()();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v22 = v0[15];
    uint64_t v23 = v0[18];
    unint64_t v3 = v0[7];
    uint64_t v20 = v0[6];
    uint64_t v21 = v0[16];
    unint64_t v4 = v0[5];
    uint64_t v5 = v0[4];
    uint64_t v6 = swift_slowAlloc();
    v25[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136380931;
    swift_bridgeObjectRetain();
    v0[2] = sub_100110D58(v5, v4, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2081;
    swift_bridgeObjectRetain();
    v0[3] = sub_100110D58(v20, v3, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Checking proofing status for %{private}s in %{private}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v7(v23, v22);
  }
  else
  {
    uint64_t v8 = v0[18];
    uint64_t v9 = v0[15];
    uint64_t v10 = v0[16];
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[19] = v7;
  sub_1005A2760();
  uint64_t v11 = *(os_unfair_lock_s **)(v0[8] + 40);
  uint64_t v12 = v11 + 4;
  uint64_t v13 = v11 + 6;
  os_unfair_lock_lock(v11 + 6);
  sub_1005A3CAC(v12, v25);
  os_unfair_lock_unlock(v13);
  v0[20] = *(void *)(v25[0] + 184);
  swift_retain();
  swift_release();
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100732570 + dword_100732570);
  uint64_t v14 = (void *)swift_task_alloc();
  v0[21] = v14;
  void *v14 = v0;
  v14[1] = sub_100598BD0;
  uint64_t v15 = v0[6];
  uint64_t v16 = v0[7];
  uint64_t v18 = v0[4];
  uint64_t v17 = v0[5];
  return v24(v18, v17, v15, v16);
}

uint64_t sub_100598BD0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 176) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100598D5C, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_100598D5C()
{
  swift_release();
  uint64_t v1 = v0[17];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[19];
  uint64_t v2 = v0[14];
  uint64_t v10 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.internalError(_:), v0[9]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100599148(int a1, int a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v4[4] = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  v4[5] = v9;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_100599244;
  return sub_1005984E8(v5, v7, v8, v10);
}

uint64_t sub_100599244(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v7)[2](v7, 0, v8);

    _Block_release(v7);
  }
  else
  {
    ((void (**)(void, void *, void))v7)[2](v7, a1, 0);
    _Block_release(v7);
  }
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_100599428()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_1005995B0, 0, 0);
}

void sub_1005995B0()
{
  uint64_t v13 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Checking if proofing flow is available", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[13] = v7;
  v0[14] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = *(os_unfair_lock_s **)(v0[2] + 40);
  uint64_t v9 = v8 + 4;
  uint64_t v10 = v8 + 6;
  os_unfair_lock_lock(v8 + 6);
  sub_1005A3CAC(v9, &v12);
  os_unfair_lock_unlock(v10);
  v0[15] = *(void *)(v12 + 184);
  swift_retain();
  swift_release();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[16] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1005999A0;
  sub_10053B020();
}

uint64_t sub_1005999A0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100599B2C, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_100599B2C()
{
  swift_release();
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[13];
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v10 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100599EF4(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1005AADAC;
  return sub_100599428();
}

uint64_t sub_100599F9C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[10] = v5;
  v2[11] = *(void *)(v5 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_10059A124, 0, 0);
}

uint64_t sub_10059A124()
{
  uint64_t v14 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Checking if a watch is paired to this device and if its preflight check is successful.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_1005A2760();
  uint64_t v7 = *(os_unfair_lock_s **)(v0[3] + 40);
  uint64_t v8 = v7 + 4;
  uint64_t v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_1005A3CAC(v8, &v13);
  os_unfair_lock_unlock(v9);
  v0[14] = v13;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[15] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10059A4A8;
  uint64_t v11 = v0[2];
  return sub_1005034CC(v11);
}

uint64_t sub_10059A4A8(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_10059A7BC(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v3[4] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10059A878;
  return sub_100599F9C(a1);
}

uint64_t sub_10059A878(char a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 24);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  swift_release();
  v3[2](v3, a1 & 1);
  _Block_release(v3);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_10059A9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  sub_100007764(&qword_10071FEE0);
  v4[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[14] = v7;
  v4[15] = *(void *)(v7 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return _swift_task_switch(sub_10059AB80, 0, 0);
}

uint64_t sub_10059AB80()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 134349056;
    v0[2] = IdentityBoundACLType.rawValue.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Setting global bound ACL %{public}ld", v3, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[15];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[18] = v7;
  v0[19] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[20] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10059AF50;
  uint64_t v9 = v0[4];
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[3];
  return sub_10052A388(v11, v9, v10);
}

uint64_t sub_10059AF50()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10059B19C;
  }
  else {
    os_log_type_t v2 = sub_10059B064;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10059B064()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[6];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = v2;
  swift_retain();
  sub_10014043C(v1, (uint64_t)&unk_100733698, (uint64_t)v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10059B19C()
{
  uint64_t v1 = v0[16];
  uint64_t v10 = v0[14];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[18];
  uint64_t v2 = v0[12];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.internalError(_:), v0[7]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10059B3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  uint64_t v5 = type metadata accessor for Logger();
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  return _swift_task_switch(sub_10059B4BC, 0, 0);
}

uint64_t sub_10059B4BC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  void *v1 = v0;
  v1[1] = sub_10059B560;
  return sub_10001BBB4();
}

uint64_t sub_10059B560(uint64_t a1)
{
  *(void *)(*(void *)v1 + 64) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10059B660, 0, 0);
}

uint64_t sub_10059B660()
{
  uint64_t v17 = v0;
  uint64_t v1 = *(void **)(v0 + 64);
  if (v1)
  {
    id v2 = [*(id *)(v0 + 64) deviceID];

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    defaultLogger()();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v10 = *(void *)(v0 + 48);
    uint64_t v11 = *(void *)(v0 + 32);
    if (v8)
    {
      uint64_t v15 = v3;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)(v0 + 16) = sub_100110D58(0xD00000000000001DLL, 0x8000000100659390, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s Watch Paired and a new GlobalAuthACL set, marking any prearmtrust for deletion", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v3 = v15;
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    }
    sub_1005EFCE0(v3, v5);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_10059B9FC(void *a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  id v7 = a1;
  swift_retain();
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v4[4] = v8;
  v4[5] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_10059BAE8;
  return sub_10059A9C4(v8, v10, a2);
}

uint64_t sub_10059BAE8()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  unint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 32);
  uint64_t v7 = *v1;
  swift_task_dealloc();
  swift_release();
  sub_10000C5F4(v6, v5);
  uint64_t v8 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_10059BCAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  void v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for DIPError.Code();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DIPError();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  return _swift_task_switch(sub_10059BE3C, 0, 0);
}

uint64_t sub_10059BE3C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Setting modified global bound ACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[14];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[17] = v7;
  v0[18] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[19] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10059C1CC;
  uint64_t v9 = v0[4];
  uint64_t v10 = v0[5];
  uint64_t v12 = v0[2];
  uint64_t v11 = v0[3];
  return sub_10052A87C(v12, v11, v9, v10);
}

uint64_t sub_10059C1CC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 160) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10059C340, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_10059C340()
{
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[17];
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[12];
  uint64_t v10 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for DIPError.Code.internalError(_:), v0[7]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10059C71C(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  id v7 = a1;
  id v8 = a2;
  swift_retain();
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  v4[4] = v9;
  v4[5] = v11;
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v4[6] = v12;
  v4[7] = v14;
  uint64_t v15 = (void *)swift_task_alloc();
  v4[8] = v15;
  *uint64_t v15 = v4;
  v15[1] = sub_10059C82C;
  return sub_10059BCAC(v9, v11, v12, v14);
}

uint64_t sub_10059C82C()
{
  uint64_t v2 = v0;
  uint64_t v4 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  uint64_t v5 = (void *)*v1;
  swift_task_dealloc();
  swift_release();
  unint64_t v6 = v3[5];
  uint64_t v7 = v3[4];
  sub_10000C5F4(v3[6], v3[7]);
  sub_10000C5F4(v7, v6);
  if (v2)
  {
    uint64_t v8 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v10 = (void *)v8;
  }
  else
  {
    type metadata accessor for UUID();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
    uint64_t v10 = isa;
  }
  uint64_t v11 = (void (**)(void, void, void))v4[3];
  ((void (**)(void, Class, uint64_t))v11)[2](v11, isa, v8);

  _Block_release(v11);
  uint64_t v12 = (uint64_t (*)(void))v5[1];
  return v12();
}

uint64_t sub_10059CA28()
{
  v1[17] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[21] = v3;
  v1[22] = *(void *)(v3 - 8);
  v1[23] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[24] = v4;
  v1[25] = *(void *)(v4 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  return _swift_task_switch(sub_10059CBB0, 0, 0);
}

uint64_t sub_10059CBB0()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Retrieving bio binding unbound ACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[25];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[28] = v7;
  v0[29] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = *(void **)(*(void *)(v0[17] + 56) + 16);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10059CF50;
  uint64_t v9 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10059400C;
  v0[13] = &unk_100708FF8;
  v0[14] = v9;
  [v8 bioBindingUnboundACL:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10059CF50()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    os_log_type_t v2 = sub_10059D0FC;
  }
  else {
    os_log_type_t v2 = sub_10059D060;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10059D060()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v2, v1);
}

uint64_t sub_10059D0FC()
{
  swift_willThrow();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[22];
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v3, v5);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void, unint64_t))v0[1];
  return v8(0, 0xF000000000000000);
}

uint64_t sub_10059D47C(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1005AADA8;
  return sub_10059CA28();
}

uint64_t sub_10059D524()
{
  v1[17] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[21] = v3;
  v1[22] = *(void *)(v3 - 8);
  v1[23] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[24] = v4;
  v1[25] = *(void *)(v4 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  return _swift_task_switch(sub_10059D6AC, 0, 0);
}

uint64_t sub_10059D6AC()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Retrieving passcode binding unbound ACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[25];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[28] = v7;
  v0[29] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = *(void **)(*(void *)(v0[17] + 56) + 16);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10059DA4C;
  uint64_t v9 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10059400C;
  v0[13] = &unk_100708FE0;
  v0[14] = v9;
  [v8 passcodeBindingUnboundACL:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10059DA4C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    os_log_type_t v2 = sub_10059DB5C;
  }
  else {
    os_log_type_t v2 = sub_1005AAD8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10059DB5C()
{
  swift_willThrow();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[22];
  (*(void (**)(void, void, void))(v0[19] + 104))(v0[20], enum case for DIPError.Code.internalError(_:), v0[18]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v3, v5);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void, unint64_t))v0[1];
  return v8(0, 0xF000000000000000);
}

uint64_t sub_10059DEDC(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1005AADA8;
  return sub_10059D524();
}

uint64_t sub_10059DF84()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_10059E10C, 0, 0);
}

uint64_t sub_10059E10C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Retrieving bound ACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[13] = v7;
  v0[14] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[15] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10059E444;
  return sub_10052A0A4();
}

uint64_t sub_10059E444(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(v6 + 128) = v2;
  swift_task_dealloc();
  if (v2)
  {
    return _swift_task_switch(sub_10059E5C8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v7(a1, a2);
  }
}

uint64_t sub_10059E5C8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[13];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v3, v5);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  swift_errorRelease();
  v1(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void, unint64_t))v0[1];
  return v8(0, 0xF000000000000000);
}

uint64_t sub_10059E940(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_10059E9E8;
  return sub_10059DF84();
}

uint64_t sub_10059E9E8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  swift_task_dealloc();
  swift_release();
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C5E0(a1, a2);
  }
  uint64_t v8 = *(void (***)(void, void))(v5 + 24);
  ((void (**)(void, Class))v8)[2](v8, isa);

  _Block_release(v8);
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_10059EB5C()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_10059ECE4, 0, 0);
}

uint64_t sub_10059ECE4()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Deleting deleteBoundACL", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_1005A2760();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[13] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10059F060;
  return sub_1005EDF5C();
}

uint64_t sub_10059F060()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10059F33C(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1004AD234;
  return sub_10059EB5C();
}

uint64_t sub_10059F3E4()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_10059F56C, 0, 0);
}

uint64_t sub_10059F56C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetching bio binding details", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[13] = v7;
  v0[14] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[15] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10059F8F0;
  return sub_10052ACAC();
}

uint64_t sub_10059F8F0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10059FA64, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_10059FA64()
{
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[13];
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v10 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10059FE24(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1005AADAC;
  return sub_10059F3E4();
}

uint64_t sub_10059FECC()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[11] = v3;
  v1[12] = *(void *)(v3 - 8);
  v1[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[14] = v4;
  v1[15] = *(void *)(v4 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  return _swift_task_switch(sub_1005A0054, 0, 0);
}

void sub_1005A0054()
{
  uint64_t v14 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting getLivenessConfig", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[15];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[18] = v7;
  v0[19] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v0 + 2, v0[5]);
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  uint64_t v8 = v0[7];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v9 = *(os_unfair_lock_s **)(v8 + 40);
  uint64_t v10 = v9 + 4;
  uint64_t v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  sub_1005A3CAC(v10, &v13);
  os_unfair_lock_unlock(v11);
  v0[20] = v13;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[21] = v12;
  void *v12 = v0;
  v12[1] = sub_1005A0480;
  sub_100503E94();
}

uint64_t sub_1005A0480(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 176) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1005A060C, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_1005A060C()
{
  swift_release();
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[18];
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v10 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for DIPError.Code.internalError(_:), v0[8]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1005A09D4(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1004A9078;
  return sub_10059FECC();
}

uint64_t sub_1005A0A7C(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 192) = a2;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v2;
  uint64_t v4 = type metadata accessor for DIPError.Code();
  *(void *)(v3 + 72) = v4;
  *(void *)(v3 + 80) = *(void *)(v4 - 8);
  *(void *)(v3 + 88) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DIPError();
  *(void *)(v3 + 96) = v5;
  *(void *)(v3 + 104) = *(void *)(v5 - 8);
  *(void *)(v3 + 112) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v3 + 120) = v6;
  *(void *)(v3 + 128) = *(void *)(v6 - 8);
  *(void *)(v3 + 136) = swift_task_alloc();
  *(void *)(v3 + 144) = swift_task_alloc();
  return _swift_task_switch(sub_1005A0C08, 0, 0);
}

void sub_1005A0C08()
{
  uint64_t v16 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Uploading liveness video", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 152) = v7;
  *(void *)(v0 + 160) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728((void *)(v0 + 16), *(void *)(v0 + 40));
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  uint64_t v8 = *(void *)(v0 + 64);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  uint64_t v9 = *(os_unfair_lock_s **)(v8 + 40);
  uint64_t v10 = v9 + 4;
  uint64_t v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  sub_1005A3CAC(v10, &v15);
  os_unfair_lock_unlock(v11);
  *(void *)(v0 + 168) = v15;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v12;
  void *v12 = v0;
  v12[1] = sub_1005A1040;
  char v13 = *(unsigned char *)(v0 + 192);
  uint64_t v14 = *(void *)(v0 + 56);
  sub_100504880(v14, v13);
}

uint64_t sub_1005A1040()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1005A11B8, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1005A11B8()
{
  swift_release();
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[19];
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[14];
  uint64_t v10 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for DIPError.Code.internalError(_:), v0[9]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1005A159C(void *a1, char a2, void *aBlock, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  id v7 = a1;
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v4[5] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1004AD23C;
  return sub_1005A0A7C((uint64_t)v7, a2);
}

uint64_t sub_1005A17FC(char a1, int a2, int a3, void *aBlock, uint64_t a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v9 = (uint64_t (*)(char))((char *)&dword_100733720 + dword_100733720);
  swift_retain();
  id v7 = (void *)swift_task_alloc();
  v5[4] = v7;
  *id v7 = v5;
  v7[1] = sub_10046B8F8;
  return v9(a1);
}

uint64_t sub_1005A18E4(int a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  uint64_t v5 = _Block_copy(aBlock);
  _Block_copy(v5);
  uint64_t v6 = swift_retain();
  a4(v6, v5);
  _Block_release(v5);
  _Block_release(v5);

  return swift_release();
}

uint64_t sub_1005A1958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for DIPError.Code();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DIPError();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[12] = v7;
  v4[13] = *(void *)(v7 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  return _swift_task_switch(sub_1005A1AE4, 0, 0);
}

void sub_1005A1AE4()
{
  uint64_t v16 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting clearDataAfterTerminalProofingState", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[13];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[16] = v7;
  v0[17] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = *(os_unfair_lock_s **)(v0[5] + 40);
  v0[18] = v8;
  uint64_t v9 = v8 + 4;
  uint64_t v10 = v8 + 6;
  os_unfair_lock_lock(v8 + 6);
  sub_1005A3CAC(v9, &v15);
  os_unfair_lock_unlock(v10);
  v0[19] = v15;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[20] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1005A1ECC;
  uint64_t v12 = v0[3];
  uint64_t v13 = v0[4];
  uint64_t v14 = v0[2];
  sub_1005057E0(v14, v12, v13);
}

uint64_t sub_1005A1ECC()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1005A20DC;
  }
  else
  {
    swift_release();
    os_log_type_t v2 = sub_1005A1FE8;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_1005A1FE8()
{
  uint64_t v1 = v0[21];
  os_log_type_t v2 = (os_unfair_lock_s *)v0[18];
  uint64_t v3 = v2 + 4;
  os_unfair_lock_lock(v2 + 6);
  sub_1005A3934(v3);
  uint64_t v4 = (os_unfair_lock_s *)v0[18];
  if (v1)
  {
    os_unfair_lock_unlock(v4 + 6);
  }
  else
  {
    os_unfair_lock_unlock(v4 + 6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (void (*)(void))v0[1];
    v5();
  }
}

uint64_t sub_1005A20DC()
{
  swift_release();
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[11];
  uint64_t v10 = v0[12];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1005A24BC(int a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  v4[4] = v7;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[5] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1005AADB0;
  return sub_1005A1958(v6, v8, a2);
}

uint64_t sub_1005A25A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Destroying IdentityManagementSessionProxy", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1005A272C()
{
  sub_1005A25A0();

  return swift_deallocClassInstance();
}

void sub_1005A2760()
{
  uint64_t v1 = type metadata accessor for DIPError.Code();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()();
  swift_retain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  int v10 = v9;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v11 = swift_slowAlloc();
    int v25 = v10;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v32 = v26;
    uint64_t v28 = v2;
    *(_DWORD *)uint64_t v12 = 136315138;
    v23[1] = v12 + 4;
    uint64_t v24 = v12;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v27 = v5;
    uint64_t v14 = v1;
    uint64_t v15 = v4;
    uint64_t v16 = (void *)Strong;
    uint64_t v31 = Strong;
    sub_100007764(&qword_10072F290);
    uint64_t v17 = Optional.debugDescription.getter();
    uint64_t v29 = v0;
    unint64_t v19 = v18;

    uint64_t v4 = v15;
    uint64_t v1 = v14;
    uint64_t v31 = sub_100110D58(v17, v19, &v32);
    uint64_t v2 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v25, "Checking connection %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v27);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  }
  uint64_t v20 = swift_unknownObjectWeakLoadStrong();
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    v22._uint64_t countAndFlagsBits = 0xD000000000000027;
    v22._object = (void *)0x8000000100659250;
    if (!NSXPCConnection.isEntitled(_:)(v22))
    {
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for DIPError();
      sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError();
    sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
  }
}

uint64_t sub_1005A2C94()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_1005A2E1C, 0, 0);
}

uint64_t sub_1005A2E1C()
{
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "globalAuthACLTemplateUUIDs", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];

  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[13] = v7;
  v0[14] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[15] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1005A31A0;
  return sub_1005EF290();
}

uint64_t sub_1005A31A0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1005A3314, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_1005A3314()
{
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[13];
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v10 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t type metadata accessor for IdentityManagementSessionProxy()
{
  return self;
}

uint64_t sub_1005A36F8(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_1005A37A0;
  return sub_1005A2C94();
}

uint64_t sub_1005A37A0()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v2)
  {
    uint64_t v5 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v7 = (void *)v5;
  }
  else
  {
    type metadata accessor for UUID();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    uint64_t v7 = isa;
  }
  uint64_t v8 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v8)[2](v8, isa, v5);

  _Block_release(v8);
  os_log_type_t v9 = *(uint64_t (**)(void))(v4 + 8);
  return v9();
}

uint64_t sub_1005A3934(void *a1)
{
  uint64_t result = swift_release();
  *a1 = 0;
  return result;
}

uint64_t sub_1005A3968(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100025D64;
  return v6();
}

uint64_t sub_1005A3A34(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100025D64;
  return v7();
}

uint64_t sub_1005A3B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000C6CC(a1, &qword_10071FEE0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1005A3CAC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100594BB4(a1, v2, a2);
}

void *sub_1005A3CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  uint64_t v52 = a7;
  uint64_t v53 = a8;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v55 = a14;
  uint64_t v50 = a13;
  uint64_t v51 = a6;
  uint64_t v47 = a12;
  uint64_t v45 = a3;
  uint64_t v46 = a9;
  uint64_t v44 = a10;
  uint64_t v54 = a15;
  uint64_t v19 = type metadata accessor for IdentityProofingIDType();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  Swift::String v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for IdentityBiometricStoreHelper();
  uint64_t v59 = &off_100708388;
  *(void *)&long long v57 = a16;
  a17[2] = 0;
  a17[4] = 0;
  type metadata accessor for IdentityProofingDatabaseProvider();
  a17[8] = swift_allocObject();
  uint64_t v23 = (char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_pdf417Data;
  uint64_t v24 = type metadata accessor for PDF417Data();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(void *)((char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_proofingDocuments) = 0;
  int v25 = (void *)((char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_phoneCredentialIdentifier);
  *int v25 = 0;
  v25[1] = 0;
  uint64_t v26 = (void *)((char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_workflowId);
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v27 = (void *)((char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_idType);
  (*(void (**)(char *, void, uint64_t))(v20 + 104))(v22, enum case for IdentityProofingIDType.generic(_:), v19);
  uint64_t v28 = IdentityProofingIDType.rawValue.getter();
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  uint64_t *v27 = v28;
  v27[1] = v30;
  uint64_t v31 = (void *)((char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_proofingSessionId);
  *uint64_t v31 = 0;
  v31[1] = 0;
  uint64_t v32 = (void *)((char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_watchCredentialIdentifier);
  *uint64_t v32 = 0;
  v32[1] = 0;
  uint64_t v33 = (char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_manualCheckInterval;
  *(void *)uint64_t v33 = 0;
  v33[8] = 1;
  uint64_t v34 = (void *)((char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_termsAndConditions);
  *uint64_t v34 = 0;
  v34[1] = 0;
  *(void *)((char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_comboProofingWatchFailure) = 0;
  uint64_t v35 = (void *)a17[4];
  a17[3] = a1;
  a17[4] = a2;

  uint64_t v36 = v48;
  a17[5] = v45;
  a17[6] = v36;
  a17[7] = v49;
  uint64_t v37 = v52;
  a17[11] = v51;
  a17[12] = v37;
  uint64_t v38 = v44;
  a17[13] = v53;
  a17[14] = v38;
  uint64_t v39 = v47;
  a17[15] = a11;
  a17[16] = v39;
  a17[9] = v46;
  a17[17] = v50;
  sub_10000C6B4(&v57, (uint64_t)v56);
  type metadata accessor for IdentityProofingCredentialProvider();
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = a11;
  sub_1005A61DC((uint64_t)v56, v40 + 24);
  a17[10] = v40;
  uint64_t v41 = v54;
  a17[18] = v55;
  *(void *)((char *)a17 + OBJC_IVAR____TtC8coreidvd30IdentityProofingRequestManager_biomeManager) = v41;
  swift_retain();
  return a17;
}

uint64_t sub_1005A3FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DIPError.Code();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DIPError();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.internalError(_:), v7);
    swift_errorRetain();
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRetain();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    uint64_t v22 = a1;
    uint64_t v15 = a2;
    uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
    v16(v17, v14, v11);
    defaultLogger()();
    DIPRecordError(_:message:log:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v23);
    swift_errorRelease();
    swift_allocError();
    v16(v18, v14, v11);
    uint64_t v19 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v19);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v21 = *(uint64_t (**)(uint64_t, void))(a2 + 16);
    return v21(a2, 0);
  }
}

uint64_t sub_1005A43A4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v21 = a2;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DIPError.Code();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DIPError();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return v21(0);
  }
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain();
  swift_retain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRetain();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  v19[1] = a1;
  uint64_t v14 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 16);
  v14(v15, v13, v10);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v20);
  swift_errorRelease();
  uint64_t v16 = swift_allocError();
  v14(v17, v13, v10);
  v21(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_errorRelease();
  swift_release();
  return swift_errorRelease();
}

uint64_t sub_1005A474C(void *a1, void *a2)
{
  uint64_t v3 = (void *)v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v2 + 16;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v2 + 24) = 1;
  sub_100007764(&qword_100733958);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 24) = 0;
  *(void *)(v13 + 16) = 0;
  *(void *)(v2 + 40) = v13;
  if (qword_10071F5A8 != -1) {
    swift_once();
  }
  *(void *)(v2 + 56) = qword_100760858;
  *(void *)(v2 + 80) = 0;
  unint64_t v14 = sub_1000309D0();
  uint64_t v15 = *(void (**)(void))(v10 + 104);
  unsigned int v36 = enum case for DispatchQoS.QoSClass.default(_:);
  uint64_t v35 = (void (*)(char *, void, uint64_t))v15;
  v15(v12);
  swift_retain();
  unint64_t v38 = v14;
  uint64_t v16 = static OS_dispatch_queue.global(qos:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v17 = v10 + 8;
  uint64_t v37 = v18;
  v18(v12, v9);
  v3[11] = v16;
  defaultLogger()();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    v34[1] = v17;
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Creating IdentityManagementSessionProxy", v21, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v41);
  swift_unknownObjectWeakAssign();
  uint64_t result = os_transaction_create();
  if (result)
  {
    v3[4] = result;
    v3[9] = a2;
    type metadata accessor for IdentityProofingActionNotificationFlow();
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = 0;
    v35(v12, v36, v9);
    id v24 = a2;
    uint64_t v25 = static OS_dispatch_queue.global(qos:)();
    v37(v12, v9);
    uint64_t v26 = sub_1005EC0D0(0, v23, v25);
    type metadata accessor for DIPACLCleanerUpper();
    uint64_t v27 = (void *)swift_allocObject();
    void v27[2] = qword_100760858;
    v27[3] = v24;
    v27[4] = v26;
    v3[8] = v27;
    if (a1)
    {
      aBlock[4] = sub_10059505C;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = sub_1005938A8;
      aBlock[3] = &unk_100709AB0;
      uint64_t v28 = _Block_copy(aBlock);
      swift_retain();
      id v29 = a1;
      id v30 = [v29 remoteObjectProxyWithErrorHandler:v28];
      _Block_release(v28);

      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100007764((uint64_t *)&unk_100733960);
      int v31 = swift_dynamicCast();
      uint64_t v32 = v42;
      if (!v31) {
        uint64_t v32 = 0;
      }
    }
    else
    {
      swift_retain();
      uint64_t v32 = 0;
    }
    v3[10] = v32;
    swift_unknownObjectRelease();
    id v33 = a1;
    v3[6] = sub_100444490(a1);
    swift_retain();
    sub_100443E84(0);
    swift_release();
    swift_retain();
    sub_100443E84(1);
    swift_release();
    return (uint64_t)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005A4C4C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    defaultLogger()();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "coreidvd (no description: -1): identity management connection received", v28, 2u);
      swift_slowDealloc();
    }

    id v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    id v30 = v8;
    goto LABEL_8;
  }
  uint64_t v13 = (void *)Strong;
  defaultLogger()();
  id v14 = v13;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  int v17 = v16;
  if (!os_log_type_enabled(v15, v16))
  {

    id v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    id v30 = v10;
LABEL_8:
    v29(v30, v4);
    goto LABEL_9;
  }
  uint64_t v18 = swift_slowAlloc();
  uint64_t v43 = (void **)swift_slowAlloc();
  aBlock = v43;
  *(_DWORD *)uint64_t v18 = 136315394;
  uint64_t v40 = v18 + 4;
  id v19 = v14;
  id v20 = [v19 description];
  uint64_t v44 = v2;
  id v21 = v20;
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v41 = v17;
  uint64_t v23 = v22;
  uint64_t v42 = v4;
  unint64_t v25 = v24;

  uint64_t v45 = sub_100110D58(v23, v25, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v18 + 12) = 1024;
  LODWORD(v21) = [v19 processIdentifier];

  LODWORD(v45) = v21;
  uint64_t v2 = v44;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v41, "coreidvd (%s:%d): identity management connection received", (uint8_t *)v18, 0x12u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v42);
LABEL_9:
  type metadata accessor for IdentityManagementDaemonToClientUIInterface();
  int v31 = (void *)static IdentityManagementDaemonToClientUIInterface.interface()();
  [a1 setRemoteObjectInterface:v31];

  type metadata accessor for IdentityManagementInterface();
  uint64_t v32 = (void *)static IdentityManagementInterface.interface()();
  [a1 setExportedInterface:v32];

  id v33 = *(void **)(v2 + OBJC_IVAR____TtC8coreidvd26IdentityManagementListener_watchSessionManager);
  type metadata accessor for IdentityManagementSessionProxy();
  swift_allocObject();
  id v34 = v33;
  id v35 = a1;
  uint64_t v36 = sub_1005A474C(a1, v34);

  [v35 setExportedObject:v36];
  swift_release();
  uint64_t v50 = sub_1005AAD34;
  uint64_t v51 = v11;
  aBlock = _NSConcreteStackBlock;
  uint64_t v47 = 1107296256;
  uint64_t v48 = sub_100593800;
  uint64_t v49 = &unk_100709A60;
  uint64_t v37 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v35 setInvalidationHandler:v37];
  _Block_release(v37);
  uint64_t v50 = sub_1005AAD60;
  uint64_t v51 = v11;
  aBlock = _NSConcreteStackBlock;
  uint64_t v47 = 1107296256;
  uint64_t v48 = sub_100593800;
  uint64_t v49 = &unk_100709A88;
  unint64_t v38 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v35 setInterruptionHandler:v38];
  _Block_release(v38);
  [v35 resume];
  swift_release();
  return 1;
}

void *sub_1005A51BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v157 = a8;
  uint64_t v155 = a6;
  uint64_t v163 = a4;
  uint64_t v161 = a3;
  uint64_t v158 = a14;
  uint64_t v156 = a13;
  uint64_t v164 = a12;
  uint64_t v142 = a11;
  int v159 = a10;
  p_Class isa = (void *)type metadata accessor for UUID();
  uint64_t v140 = (void (**)(void, void))*(p_isa - 1);
  __chkstk_darwin(p_isa);
  uint64_t v135 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v20 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v22 = (char *)&v131 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for IdentityProofingActionNotificationFlow();
  unint64_t v172 = &off_1006FABE0;
  uint64_t v146 = v171;
  uint64_t v170 = a9;
  a15[3] = 0;
  a15[4] = dispatch_group_create();
  a15[5] = dispatch_group_create();
  a15[7] = 0;
  uint64_t v154 = type metadata accessor for IdentityProofingDatabaseProvider();
  a15[23] = swift_allocObject();
  uint64_t v162 = a2;
  a15[12] = a2;
  a15[13] = a5;
  a15[6] = a7;
  uint64_t v160 = a1;
  a15[10] = a10;
  a15[11] = a1;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = 0;
  unint64_t v24 = (void *)sub_1000309D0();
  LODWORD(v152) = enum case for DispatchQoS.QoSClass.default(_:);
  uint64_t v25 = v20;
  int v151 = *(char **)(v20 + 104);
  id v153 = (id)(v20 + 104);
  uint64_t v26 = v145;
  ((void (*)(char *))v151)(v22);
  id v27 = a7;
  uint64_t v138 = (uint64_t)a7;
  id v133 = v27;
  swift_retain();
  swift_retain();
  uint64_t v143 = a5;
  swift_retain();
  int v159 = v159;
  id v144 = v22;
  id v134 = v24;
  uint64_t v28 = static OS_dispatch_queue.global(qos:)();
  id v29 = *(void (**)(id, uint64_t))(v25 + 8);
  uint64_t v149 = v25 + 8;
  int v150 = v29;
  v29(v22, v26);
  uint64_t v30 = v146;
  uint64_t v168 = v146;
  uint64_t v169 = &off_1006FABE0;
  uint64_t v167 = v23;
  uint64_t v139 = type metadata accessor for IdentityProofingCleanupProvider();
  int v31 = (void *)swift_allocObject();
  uint64_t v32 = sub_1000279F4((uint64_t)&v167, v30);
  uint64_t v147 = *(void *)(*(void *)(v30 - 8) + 64);
  __chkstk_darwin(v32);
  unint64_t v137 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v34 = (uint64_t *)((char *)&v131 - v137);
  uint64_t v136 = *(void (**)(char *))(v35 + 16);
  id v148 = (id)(v35 + 16);
  v136((char *)&v131 - v137);
  uint64_t v36 = *v34;
  v31[6] = v30;
  v31[7] = &off_1006FABE0;
  _OWORD v31[2] = a7;
  _OWORD v31[3] = v36;
  v31[8] = v28;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v167);
  a15[14] = v31;
  uint64_t v37 = (objc_class *)type metadata accessor for IdentitySelfHealer();
  unint64_t v38 = (char *)objc_allocWithZone(v37);
  uint64_t v39 = &v38[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
  *(void *)uint64_t v39 = 0;
  *((void *)v39 + 1) = 0;
  v166.receiver = v38;
  v166.super_class = v37;
  id v40 = [super init];
  int v41 = (void *)a15[3];
  a15[3] = v40;

  uint64_t v42 = (void *)a15[3];
  if (v42) {
    uint64_t v43 = &off_100708438;
  }
  else {
    uint64_t v43 = 0;
  }
  id v44 = v42;
  uint64_t v45 = v135;
  UUID.init()();
  UUID.uuidString.getter();
  ((void (**)(char *, void *))v140)[1](v45, p_isa);
  uint64_t v46 = sub_1002D3994((uint64_t)v42, (uint64_t)v43, 0, 0);

  swift_bridgeObjectRelease();
  a15[2] = v46;
  uint64_t v48 = v163;
  uint64_t v47 = v164;
  a15[8] = v163;
  a15[9] = v47;
  swift_retain();
  swift_retain();
  dispatch_group_t v49 = dispatch_group_create();
  id v50 = v144;
  ((void (*)(id, void, uint64_t))v151)(v144, v152, v26);
  uint64_t v51 = (void *)static OS_dispatch_queue.global(qos:)();
  v150(v50, v26);
  a15[15] = v156;
  a15[18] = v158;
  type metadata accessor for IdentityProofingWatchProvider();
  uint64_t v52 = swift_allocObject();
  id v53 = v133;
  *(void *)(v52 + 16) = v133;
  a15[17] = v52;
  uint64_t v54 = (void *)a15[2];
  uint64_t v55 = (void *)a15[4];
  uint64_t v56 = (void *)a15[5];
  uint64_t v135 = (char *)v53;
  swift_retain();
  swift_retain();
  id v57 = v54;
  uint64_t v58 = v49;
  id v59 = v51;
  id v60 = v55;
  id v61 = v56;
  int v62 = sub_100593AFC();
  type metadata accessor for IdentityProofingProducedAssetManager();
  swift_allocObject();
  uint64_t v63 = sub_100296360((uint64_t)v57, (uint64_t)v58, (uint64_t)v59, (uint64_t)v60, (uint64_t)v61, (uint64_t)v62);
  a15[22] = v63;
  char v64 = (void *)a15[2];
  type metadata accessor for IdentityProofingBiomeFedStatsUIConfigProvider();
  uint64_t v65 = (void *)swift_allocObject();
  v65[2] = &_swiftEmptySetSingleton;
  v65[3] = 0xD00000000000001FLL;
  v65[4] = 0x8000000100659280;
  v65[5] = 1852402547;
  v65[6] = 0xE400000000000000;
  v65[7] = 0x6E6F697369636564;
  v65[8] = 0xE800000000000000;
  type metadata accessor for IdentityProofingFetchedAssetManager();
  uint64_t v132 = (uint64_t *)swift_allocObject();
  uint64_t v66 = v162;
  swift_retain();
  uint64_t v67 = v159;
  id v133 = v67;
  swift_retain();
  size_t v68 = v58;
  id v69 = v59;
  id v70 = v64;
  uint64_t v71 = v157;
  swift_retain();
  swift_retain();
  p_Class isa = &v68->isa;
  uint64_t v140 = (void (**)(void, void))v69;
  uint64_t v72 = sub_1004F96AC((uint64_t)v70, v48, v71, v66, v63, (uint64_t)v68, (uint64_t)v69, (uint64_t)v67, (uint64_t)v65);
  a15[21] = v72;
  uint64_t v73 = a15[13];
  type metadata accessor for IdentityProofingAttributeConfigHelper();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v74 = IdentityProofingAttributeConfigHelper.init()();
  type metadata accessor for IdentityProofingAssetsProvider();
  uint64_t v75 = swift_allocObject();
  *(void *)(v75 + 16) = v74;
  type metadata accessor for IdentityProofingLivenessStepUpUIProvider();
  swift_allocObject();
  uint64_t v76 = v63;
  int v159 = sub_10024289C(v66, v73, v63, v72, v75);
  swift_release();
  sub_100030A10((uint64_t)&v170, (uint64_t)&v167);
  uint64_t v77 = sub_1000279F4((uint64_t)&v167, v168);
  uint64_t v132 = &v131;
  __chkstk_darwin(v77);
  uint64_t v79 = (uint64_t *)((char *)&v131 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v80 + 16))(v79);
  uint64_t v81 = *v79;
  uint64_t v82 = v146;
  v165[3] = v146;
  v165[4] = &off_1006FABE0;
  v165[0] = v81;
  type metadata accessor for IdentityProofingActionNotificationProvider();
  uint64_t v83 = (void *)swift_allocObject();
  uint64_t v84 = sub_1000279F4((uint64_t)v165, v82);
  __chkstk_darwin(v84);
  unint64_t v85 = v137;
  size_t v86 = (void (*)(uint64_t *))v136;
  v136((char *)&v131 - v137);
  uint64_t v87 = *(uint64_t *)((char *)&v131 - v85);
  v83[5] = v82;
  v83[6] = &off_1006FABE0;
  v83[2] = v87;
  uint64_t v88 = swift_allocObject();
  v83[8] = v76;
  v83[9] = v88;
  v83[7] = v72;
  swift_retain();
  swift_retain();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v165);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v167);
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = 0;
  id v90 = v144;
  uint64_t v91 = v145;
  ((void (*)(id, void, uint64_t))v151)(v144, v152, v145);
  uint64_t v92 = static OS_dispatch_queue.global(qos:)();
  v150(v90, v91);
  uint64_t v168 = v82;
  uint64_t v169 = &off_1006FABE0;
  uint64_t v167 = v89;
  char v93 = (void *)swift_allocObject();
  uint64_t v94 = sub_1000279F4((uint64_t)&v167, v82);
  __chkstk_darwin(v94);
  char v95 = (uint64_t *)((char *)&v131 - v85);
  v86(v95);
  uint64_t v96 = *v95;
  v93[6] = v82;
  v93[7] = &off_1006FABE0;
  v93[2] = v138;
  v93[3] = v96;
  v93[8] = v92;
  int v151 = v135;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v167);
  type metadata accessor for IdentityProofingCancellationProvider();
  uint64_t v97 = swift_allocObject();
  *(void *)(v97 + 16) = v93;
  *(void *)(v97 + 24) = v83;
  a15[16] = v97;
  uint64_t v98 = a15[14];
  uint64_t v99 = a15[21];
  uint64_t v100 = qword_10071F460;
  swift_retain();
  swift_retain();
  id v153 = v133;
  swift_retain();
  swift_retain();
  uint64_t v152 = v83;
  swift_retain();
  swift_retain();
  swift_retain();
  int v150 = (void (*)(id, uint64_t))v98;
  swift_retain();
  uint64_t v101 = v155;
  swift_retain();
  swift_retain();
  if (v100 != -1) {
    swift_once();
  }
  uint64_t v102 = qword_1007600E0;
  id v148 = (id)type metadata accessor for IdentityProofingBackgroundActivityScheduler();
  uint64_t v103 = swift_allocObject();
  *(void *)(v103 + 16) = 3600;
  uint64_t v147 = type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  uint64_t v104 = swift_allocObject();
  uint64_t v146 = type metadata accessor for IdentityProofingWorkflowProvider();
  uint64_t v105 = swift_allocObject();
  *(void *)(v105 + 16) = v104;
  uint64_t v145 = type metadata accessor for IdentityProofingUploadsHelper();
  uint64_t v106 = swift_allocObject();
  uint64_t v149 = type metadata accessor for NetworkMonitor();
  swift_retain();
  *(void *)(v106 + 16) = static NetworkMonitor.shared.getter();
  *(void *)(v106 + 24) = v105;
  type metadata accessor for PassManager();
  uint64_t v107 = swift_allocObject();
  uint64_t v108 = swift_allocObject();
  id v109 = [objc_allocWithZone((Class)PKPaymentService) init];
  type metadata accessor for IdentityPendingProvisioningManager();
  uint64_t v110 = swift_allocObject();
  *(void *)(v110 + 16) = v108;
  *(void *)(v110 + 24) = v109;
  type metadata accessor for IdentityProofingDisplayManager();
  swift_allocObject();
  *((void *)&v130 + 1) = v103;
  *(void *)&long long v130 = v102;
  a15[19] = sub_100265484(v160, v161, (uint64_t)v159, v163, v162, (uint64_t)v150, v101, (uint64_t)v153, v99, v130, v106, v107, v164, v110);
  uint64_t v111 = (void *)a15[3];
  id v144 = (id)a15[2];
  uint64_t v139 = (uint64_t)v111;
  uint64_t v112 = (void *)a15[6];
  uint64_t v113 = a15[13];
  uint64_t v114 = a15[14];
  unint64_t v137 = a15[16];
  uint64_t v138 = a15[12];
  type metadata accessor for IdentityProofingLivenessDataProvider();
  uint64_t v154 = swift_allocObject();
  *(void *)(v154 + 16) = v113;
  uint64_t v115 = a15[17];
  id v134 = (id)a15[10];
  uint64_t v135 = (char *)a15[21];
  uint64_t v136 = (void (*)(char *))a15[22];
  int v150 = (void (*)(id, uint64_t))swift_allocObject();
  *((void *)v150 + 2) = 3600;
  uint64_t v116 = swift_allocObject();
  uint64_t v117 = swift_allocObject();
  *(void *)(v117 + 16) = v116;
  uint64_t v118 = swift_allocObject();
  id v119 = v111;
  swift_retain();
  id v148 = v112;
  uint64_t v120 = v114;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v121 = v134;
  uint64_t v122 = (uint64_t)v135;
  swift_retain();
  uint64_t v123 = (uint64_t)v136;
  swift_retain();
  id v124 = v144;
  *(void *)(v118 + 16) = static NetworkMonitor.shared.getter();
  *(void *)(v118 + 24) = v117;
  uint64_t v125 = sub_100593910();
  type metadata accessor for IdentityProofingRequestManager();
  uint64_t v126 = (void *)swift_allocObject();
  uint64_t v127 = swift_retain();
  uint64_t v128 = sub_1005A3CC8((uint64_t)v124, v139, v138, (uint64_t)v148, v120, v137, v154, (uint64_t)v152, v115, (uint64_t)v121, v122, v123, (uint64_t)v150, v118, (uint64_t)v125, v127, v126);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)&v170);
  a15[20] = v128;
  return a15;
}

uint64_t sub_1005A61DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764((uint64_t *)&unk_100733680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005A6244()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1005A6284(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100025D64;
  return sub_10059B3FC(a1, v4, v5, v6);
}

void sub_1005A6338(uint64_t a1, char a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = type metadata accessor for Logger();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DIPError();
  __chkstk_darwin(v8);
  _Block_copy(a4);
  sub_1005A2760();
  uint64_t v9 = *(os_unfair_lock_s **)(a3 + 40);
  uint64_t v10 = v9 + 4;
  uint64_t v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  sub_1005A3CAC(v10, &v17);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = *(void *)(v17 + 176);
  uint64_t v13 = *(void **)(v17 + 56);
  _Block_copy(a4);
  id v14 = v13;
  swift_retain();
  sub_10029AEE0(v13, a2 & 1, a1, v12, a3, a4);
  _Block_release(a4);
  swift_release();

  _Block_release(a4);
}

void sub_1005A67A8(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t v2 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DIPError();
  uint64_t v17 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v20 - 8);
  uint64_t v5 = __chkstk_darwin(v20);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v15 - v6;
  defaultLogger()();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v16 = (void (*)(char *, uint64_t))v3;
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Starting fetchImageQualitySettings", v10, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, v20);
  sub_1005A2760();
  uint64_t v15 = v2;
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v21, v21[3]);
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v21);
  uint64_t v11 = *(os_unfair_lock_s **)(v19 + 40);
  uint64_t v12 = v11 + 4;
  uint64_t v13 = v11 + 6;
  os_unfair_lock_lock(v11 + 6);
  sub_1005A3CAC(v12, v21);
  os_unfair_lock_unlock(v13);
  id v14 = (void *)sub_1005045B0();
  swift_release();
  (*(void (**)(uint64_t, void *, void))(v18 + 16))(v18, v14, 0);
}

uint64_t sub_1005A6D00(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[10] = v5;
  v2[11] = *(void *)(v5 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_1005A6E88, 0, 0);
}

void sub_1005A6E88()
{
  uint64_t v15 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting fetchExtendedReviewDisplayInfo", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[14] = v7;
  v0[15] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = *(os_unfair_lock_s **)(v0[3] + 40);
  os_log_type_t v9 = v8 + 4;
  uint64_t v10 = v8 + 6;
  os_unfair_lock_lock(v8 + 6);
  sub_1005A3CAC(v9, &v14);
  os_unfair_lock_unlock(v10);
  v0[16] = v14;
  uint64_t v13 = (void (*)(uint64_t))((char *)&dword_100731638 + dword_100731638);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[17] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1005A727C;
  uint64_t v12 = v0[2];
  v13(v12);
}

uint64_t sub_1005A727C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1005A7408, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_1005A7408()
{
  swift_release();
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[14];
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  uint64_t v10 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  (*(void (**)(void, void, void))(v0[5] + 104))(v0[6], enum case for DIPError.Code.internalError(_:), v0[4]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

void sub_1005A7664(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DIPError();
  uint64_t v23 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - v9;
  defaultLogger()();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = v4;
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting to fetch Identity Proofing Terms and Conditions", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v10, v6);
  sub_1005A2760();
  uint64_t v24 = v6;
  uint64_t v22 = v7 + 8;
  uint64_t v18 = a2;
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v26, v26[3]);
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v26);
  uint64_t v14 = *(os_unfair_lock_s **)(v25 + 40);
  uint64_t v15 = v14 + 4;
  uint64_t v16 = v14 + 6;
  os_unfair_lock_lock(v14 + 6);
  sub_1005A3CAC(v15, v26);
  os_unfair_lock_unlock(v16);
  sub_1005043D8();
  swift_release();
  NSString v17 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, NSString, void))(v18 + 16))(v18, v17, 0);
  swift_bridgeObjectRelease();
}

void sub_1005A7BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v22 = a1;
  uint64_t v27 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v27);
  uint64_t v26 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DIPError();
  uint64_t v28 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v30 - 8);
  uint64_t v10 = __chkstk_darwin(v30);
  __chkstk_darwin(v10);
  os_log_type_t v12 = (char *)&v21 - v11;
  id v29 = a5;
  _Block_copy(a5);
  defaultLogger()();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting Proofing flow with authCode", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v25 = *(void (**)(char *, uint64_t))(v9 + 8);
  v25(v12, v30);
  sub_1005A2760();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v31, v31[3]);
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v31);
  uint64_t v16 = *(os_unfair_lock_s **)(a4 + 40);
  NSString v17 = v16 + 4;
  uint64_t v18 = v16 + 6;
  os_unfair_lock_lock(v16 + 6);
  sub_1005A3CAC(v17, v31);
  os_unfair_lock_unlock(v18);
  uint64_t v19 = *(void *)(v31[0] + 160);
  uint64_t v20 = v29;
  _Block_copy(v29);
  sub_10026170C(v22, v23, v24, v19, v20);
  _Block_release(v20);
  swift_release();
  _Block_release(v20);
}

uint64_t sub_1005A811C()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for DIPError();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DIPError.Code();
  v1[11] = v3;
  v1[12] = *(void *)(v3 - 8);
  v1[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[14] = v4;
  v1[15] = *(void *)(v4 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  return _swift_task_switch(sub_1005A82A4, 0, 0);
}

void sub_1005A82A4()
{
  uint64_t v18 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting Proofing cancellation flow", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[15];

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[18] = v7;
  v0[19] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  type metadata accessor for DIPAccountManager();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728(v0 + 2, v0[5]);
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)();
  uint64_t v8 = v0[7];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)(v0 + 2));
  uint64_t v9 = *(os_unfair_lock_s **)(v8 + 40);
  v0[20] = v9;
  uint64_t v10 = v9 + 4;
  uint64_t v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  sub_1005A3CAC(v10, &v17);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = v17;
  v0[21] = v17;
  uint64_t v13 = *(void **)(v12 + 56);
  v0[22] = v13;
  uint64_t v16 = (void (*)(uint64_t))((char *)&dword_100725BB8 + dword_100725BB8);
  id v14 = v13;
  uint64_t v15 = (void *)swift_task_alloc();
  v0[23] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1005A8700;
  v16((uint64_t)v13);
}

uint64_t sub_1005A8700()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1005A8914;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 176);
    swift_release();

    uint64_t v3 = sub_1005A8820;
  }
  return _swift_task_switch(v3, 0, 0);
}

void sub_1005A8820()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = (os_unfair_lock_s *)v0[20];
  uint64_t v3 = v2 + 4;
  os_unfair_lock_lock(v2 + 6);
  sub_1005A3934(v3);
  uint64_t v4 = (os_unfair_lock_s *)v0[20];
  if (v1)
  {
    os_unfair_lock_unlock(v4 + 6);
  }
  else
  {
    os_unfair_lock_unlock(v4 + 6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (void (*)(void))v0[1];
    v5();
  }
}

uint64_t sub_1005A8914()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);

  uint64_t v4 = enum case for DIPError.Code.internalError(_:);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_willThrow();
  swift_errorRelease();
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 64);
  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 96) + 104))(*(void *)(v0 + 104), v4, *(void *)(v0 + 88));
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  swift_allocError();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v9(v10, v6, v8);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v15(v5, v14);
  swift_errorRelease();
  swift_allocError();
  v9(v11, v6, v8);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1005A8C38()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_1005A8C80()
{
  sub_100597C50(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void (**)(void *, uint64_t))(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_1005A8C98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005A8CA8()
{
  return swift_release();
}

uint64_t sub_1005A8CB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005A8CFC()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1007336A0 + dword_1007336A0);
  return v5(v2, v3);
}

uint64_t sub_1005A8DB0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005A8DE8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000C494;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1007336D0 + dword_1007336D0);
  return v6(a1, v4);
}

uint64_t sub_1005A8EA4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (uint64_t (*)(int, uint64_t, void *, uint64_t))((char *)&dword_1007336E0 + dword_1007336E0);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1005A8F6C(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 144) = a1;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  *(void *)(v2 + 24) = v3;
  *(void *)(v2 + 32) = *(void *)(v3 - 8);
  *(void *)(v2 + 40) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DIPError();
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 56) = *(void *)(v4 - 8);
  *(void *)(v2 + 64) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v2 + 72) = v5;
  *(void *)(v2 + 80) = *(void *)(v5 - 8);
  *(void *)(v2 + 88) = swift_task_alloc();
  *(void *)(v2 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_1005A90F8, 0, 0);
}

void sub_1005A90F8()
{
  uint64_t v15 = v0;
  defaultLogger()();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting saveIdentityProofingBiomeDataSharingUserConsent", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 104) = v7;
  *(void *)(v0 + 112) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v4, v5);
  sub_1005A2760();
  uint64_t v8 = *(os_unfair_lock_s **)(*(void *)(v0 + 16) + 40);
  uint64_t v9 = v8 + 4;
  uint64_t v10 = v8 + 6;
  os_unfair_lock_lock(v8 + 6);
  sub_1005A3CAC(v9, &v14);
  os_unfair_lock_unlock(v10);
  *(void *)(v0 + 120) = v14;
  uint64_t v13 = (void (*)(char))((char *)&dword_100731630 + dword_100731630);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1005A94EC;
  char v12 = *(unsigned char *)(v0 + 144);
  v13(v12);
}

uint64_t sub_1005A94EC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1005A9664, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1005A9664()
{
  swift_release();
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[13];
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v10 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  (*(void (**)(void, void, void))(v0[4] + 104))(v0[5], enum case for DIPError.Code.internalError(_:), v0[3]);
  swift_errorRetain();
  sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
  sub_1005A8CB0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5(v6, v2, v4);
  defaultLogger()();
  DIPRecordError(_:message:log:)();
  v11(v1, v10);
  swift_errorRelease();
  swift_allocError();
  v5(v7, v2, v4);
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

void sub_1005A98C0(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for DIPError.Code();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DIPError();
  uint64_t v5 = *(void *)(v4 - 8);
  v20[3] = v4;
  v20[4] = v5;
  __chkstk_darwin(v4);
  v20[5] = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  v20[6] = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v20 - v11;
  defaultLogger()();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting fetchBiomeFedStatsUI", v15, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  sub_1005A2760();
  uint64_t v16 = *(os_unfair_lock_s **)(a1 + 40);
  uint64_t v17 = v16 + 4;
  uint64_t v18 = v16 + 6;
  os_unfair_lock_lock(v16 + 6);
  sub_1005A3CAC(v17, &v22);
  os_unfair_lock_unlock(v18);
  uint64_t v19 = (void *)sub_1004FE804();
  swift_release();
  (*(void (**)(uint64_t, void *, void))(v21 + 16))(v21, v19, 0);
}

uint64_t sub_1005A9DAC()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005A9DF4()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(void **)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100025D64;
  uint64_t v8 = (uint64_t (*)(char, int, int, void *, uint64_t))((char *)&dword_100733700 + dword_100733700);
  return v8(v2, v3, v4, v6, v5);
}

uint64_t sub_1005A9EC8()
{
  char v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (uint64_t (*)(void *, char, void *, uint64_t))((char *)&dword_100733728 + dword_100733728);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1005A9F98()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100733748 + dword_100733748);
  return v5(v2, v3);
}

uint64_t sub_1005AA050()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100733768 + dword_100733768);
  return v5(v2, v3);
}

uint64_t sub_1005AA108()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100733788 + dword_100733788);
  return v5(v2, v3);
}

uint64_t sub_1005AA1C0()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1007337A8 + dword_1007337A8);
  return v5(v2, v3);
}

uint64_t sub_1005AA278()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1007337C8 + dword_1007337C8);
  return v5(v2, v3);
}

uint64_t sub_1005AA330()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1007337E8 + dword_1007337E8);
  return v5(v2, v3);
}

uint64_t sub_1005AA3E8()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, uint64_t))((char *)&dword_100733808 + dword_100733808);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1005AA4B4()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (uint64_t (*)(void *, uint64_t, void *, uint64_t))((char *)&dword_100733828 + dword_100733828);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1005AA57C()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1005AA5BC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025D64;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&dword_100733848 + dword_100733848);
  return v6(v2, v3, v4);
}

uint64_t sub_1005AA67C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100025D64;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100733868 + dword_100733868);
  return v5(v2, v3);
}

uint64_t sub_1005AA734()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (uint64_t (*)(int, int, void *, uint64_t))((char *)&dword_100733888 + dword_100733888);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1005AA800()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (uint64_t (*)(void *, int, void *, uint64_t))((char *)&dword_1007338A8 + dword_1007338A8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1005AA8C8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005AA904()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (uint64_t (*)(int, uint64_t, void *, uint64_t))((char *)&dword_1007338D0 + dword_1007338D0);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1005AA9D0()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1005AAA18()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100025D64;
  uint64_t v7 = (uint64_t (*)(void *, int, void *, uint64_t))((char *)&dword_1007338F0 + dword_1007338F0);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1005AAAE0()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1005AAB28()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10000C494;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_100733918 + dword_100733918);
  return v6(v2, v3, v4);
}

uint64_t sub_1005AABE4()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005AAC2C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100025D64;
  uint64_t v8 = (uint64_t (*)(void *, uint64_t, uint64_t, void *, uint64_t))((char *)&dword_100733938 + dword_100733938);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_1005AACFC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005AAD34()
{
  return sub_1005947D4(v0, "coreidvd (%s:%d): identity management connection invalidated", "coreidvd (no description: -1): identity management connection invalidated");
}

uint64_t sub_1005AAD60()
{
  return sub_1005947D4(v0, "coreidvd (%s:%d): identity management connection interrupted", "coreidvd (no description: -1): identity management connection interrupted");
}

id sub_1005AADB4()
{
  id result = [*v0 externalizedContext];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1005AAE14(uint64_t a1)
{
  return sub_1005AAE38(a1);
}

id sub_1005AAE38(uint64_t a1)
{
  id v8 = 0;
  id v2 = [v1 evaluationMechanismsForPolicy:a1 error:&v8];
  id v3 = v8;
  if (v2)
  {
    uint64_t v4 = v2;
    id v5 = (id)static Set._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = v3;
  }
  else
  {
    id v5 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

id sub_1005AAF10(uint64_t a1, uint64_t a2)
{
  return sub_1005AAF34(a1, a2);
}

id sub_1005AAF34(uint64_t a1, uint64_t a2)
{
  id v9 = 0;
  id v3 = [v2 evaluationMechanismsForAccessControl:a1 operation:a2 error:&v9];
  id v4 = v9;
  if (v3)
  {
    id v5 = v3;
    id v6 = (id)static Set._unconditionallyBridgeFromObjectiveC(_:)();
    id v7 = v4;
  }
  else
  {
    id v6 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_1005AB010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 80) = a8;
  *(void *)(v9 + 88) = v8;
  *(unsigned char *)(v9 + 176) = v14;
  *(void *)(v9 + 64) = a6;
  *(void *)(v9 + 72) = a7;
  *(void *)(v9 + 48) = a4;
  *(void *)(v9 + 56) = a5;
  *(void *)(v9 + 32) = a2;
  *(void *)(v9 + 40) = a3;
  *(void *)(v9 + 24) = a1;
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v9 + 96) = v10;
  *(void *)(v9 + 104) = *(void *)(v10 - 8);
  *(void *)(v9 + 112) = swift_task_alloc();
  type metadata accessor for DIPSignpost.Config();
  *(void *)(v9 + 120) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DIPSignpost();
  *(void *)(v9 + 128) = v11;
  *(void *)(v9 + 136) = *(void *)(v11 - 8);
  *(void *)(v9 + 144) = swift_task_alloc();
  return _swift_task_switch(sub_1005AB174, 0, 0);
}

uint64_t sub_1005AB174()
{
  static DaemonSignposts.MobileDocumentReader.sessionTerminalRegistration.getter();
  DIPSignpost.init(_:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[19] = v1;
  void *v1 = v0;
  v1[1] = sub_1005AB240;
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[3];
  return sub_1005AB758(v9, v7, v8, v5, v6, v3, v4, v2);
}

uint64_t sub_1005AB240(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1005AB6A8;
  }
  else {
    uint64_t v4 = sub_1005AB354;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1005AB354()
{
  uint64_t v22 = v0;
  id v1 = [self standardUserDefaults];
  v2._object = (void *)0x8000000100659890;
  v2._uint64_t countAndFlagsBits = 0xD000000000000052;
  unint64_t v3 = (unint64_t)NSUserDefaults.internalStringArray(forKey:)(v2);

  if (v3)
  {
    swift_bridgeObjectRelease();
    defaultLogger()();
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v8 = v0[13];
    uint64_t v7 = v0[14];
    uint64_t v9 = v0[12];
    if (v6)
    {
      uint64_t v20 = v0[14];
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v11 = Array.description.getter();
      uint64_t v19 = v9;
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      v0[2] = sub_100110D58(v11, v13, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderAuthenticationCertificate fetchCertificate overriding server response with injected ceritifcate chain %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v20, v19);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    uint64_t v15 = v0[21];
    uint64_t v14 = decodeCertificateChain(fromBase64DER:)();
    swift_bridgeObjectRelease();
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    if (v15)
    {
      (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v16 = (uint64_t (*)(void))v0[1];
      return v16();
    }
  }
  else
  {
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    uint64_t v14 = v0[20];
  }
  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(uint64_t))v0[1];
  return v18(v14);
}

uint64_t sub_1005AB6A8()
{
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1005AB758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 2648) = v8;
  *(unsigned char *)(v9 + 585) = v22;
  *(void *)(v9 + 2640) = a8;
  *(void *)(v9 + 2632) = a7;
  *(void *)(v9 + 2624) = a6;
  *(void *)(v9 + 2616) = a5;
  *(void *)(v9 + 2608) = a4;
  *(void *)(v9 + 2600) = a3;
  *(void *)(v9 + 2592) = a2;
  *(void *)(v9 + 2584) = a1;
  sub_100007764(&qword_100726640);
  *(void *)(v9 + 2656) = swift_task_alloc();
  *(void *)(v9 + 2664) = swift_task_alloc();
  sub_100007764(&qword_100733A30);
  *(void *)(v9 + 2672) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for MobileDocumentReaderSession.Error.Code();
  *(void *)(v9 + 2680) = v10;
  *(void *)(v9 + 2688) = *(void *)(v10 - 8);
  *(void *)(v9 + 2696) = swift_task_alloc();
  *(void *)(v9 + 2704) = swift_task_alloc();
  *(void *)(v9 + 2712) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DIPError.Code();
  *(void *)(v9 + 2720) = v11;
  *(void *)(v9 + 2728) = *(void *)(v11 - 8);
  *(void *)(v9 + 2736) = swift_task_alloc();
  *(void *)(v9 + 2744) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Milestone();
  *(void *)(v9 + 2752) = v12;
  *(void *)(v9 + 2760) = *(void *)(v12 - 8);
  *(void *)(v9 + 2768) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for DIPError();
  *(void *)(v9 + 2776) = v13;
  *(void *)(v9 + 2784) = *(void *)(v13 - 8);
  *(void *)(v9 + 2792) = swift_task_alloc();
  *(void *)(v9 + 2800) = swift_task_alloc();
  *(void *)(v9 + 2808) = swift_task_alloc();
  *(void *)(v9 + 2816) = swift_task_alloc();
  *(void *)(v9 + 2824) = swift_task_alloc();
  uint64_t v14 = sub_100007764(&qword_100729B78);
  *(void *)(v9 + 2832) = v14;
  *(void *)(v9 + 2840) = *(void *)(v14 - 8);
  *(void *)(v9 + 2848) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for DeviceInformationProvider();
  *(void *)(v9 + 2856) = v15;
  *(void *)(v9 + 2864) = *(void *)(v15 - 8);
  *(void *)(v9 + 2872) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for UUID();
  *(void *)(v9 + 2880) = v16;
  *(void *)(v9 + 2888) = *(void *)(v16 - 8);
  *(void *)(v9 + 2896) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for MobileDocumentReaderEntitlementChecker();
  *(void *)(v9 + 2904) = v17;
  *(void *)(v9 + 2912) = *(void *)(v17 - 8);
  *(void *)(v9 + 2920) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for HardwareAttestationType();
  *(void *)(v9 + 2928) = v18;
  *(void *)(v9 + 2936) = *(void *)(v18 - 8);
  *(void *)(v9 + 2944) = swift_task_alloc();
  *(void *)(v9 + 2952) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for Logger();
  *(void *)(v9 + 2960) = v19;
  *(void *)(v9 + 2968) = *(void *)(v19 - 8);
  *(void *)(v9 + 2976) = swift_task_alloc();
  *(void *)(v9 + 2984) = swift_task_alloc();
  *(void *)(v9 + 2992) = swift_task_alloc();
  return _swift_task_switch(sub_1005ABC80, 0, 0);
}

uint64_t sub_1005ABC80()
{
  sub_1005AED04(*(unsigned char *)(v0 + 585));
  id v3 = [self standardUserDefaults];
  v4._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  v4._object = (void *)0x80000001006598F0;
  Swift::Bool v5 = NSUserDefaults.internalBool(forKey:)(v4);

  if (v5)
  {
    if (*(void *)(v0 + 2592))
    {
      defaultLogger()();
      BOOL v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "MobileDocumentReaderAuthenticationCertificateFetcher fetchCertificate disable register terminal call flag is enabled, returning hardcoded certificate.", v8, 2u);
        swift_slowDealloc();
      }
      uint64_t v9 = *(void *)(v0 + 2992);
      uint64_t v10 = *(void *)(v0 + 2968);
      uint64_t v11 = *(void *)(v0 + 2960);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
      sub_100007764(&qword_100730C60);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_100613E40;
      type metadata accessor for SecCertificate(0);
      sub_1000D5CC8();
      uint64_t v13 = (void *)static NSBundle.internalSettings.getter();
    }
    else
    {
      defaultLogger()();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "MobileDocumentReaderAuthenticationCertificateFetcher fetchCertificate disable register terminal call flag is enabled, returning hardcoded TOKENLESS certificate.", v25, 2u);
        swift_slowDealloc();
      }
      uint64_t v26 = *(void *)(v0 + 2984);
      uint64_t v27 = *(void *)(v0 + 2968);
      uint64_t v28 = *(void *)(v0 + 2960);

      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
      sub_100007764(&qword_100730C60);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_100613E40;
      type metadata accessor for SecCertificate(0);
      sub_1000D5CC8();
      uint64_t v13 = (void *)static NSBundle.internalSettings.getter();
    }
    uint64_t v29 = static SecCertificateRef.make(with:in:)();

    *(void *)(v12 + 32) = v29;
    specialized Array._endMutation()();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v30(v12);
  }
  uint64_t v14 = *(void *)(v0 + 2952);
  uint64_t v15 = *(void *)(v0 + 2944);
  uint64_t v16 = *(void *)(v0 + 2936);
  uint64_t v17 = *(void *)(v0 + 2928);
  uint64_t v18 = *(void **)(v0 + 2640);
  sub_10000C728(v18, v18[3]);
  dispatch thunk of IdentityKey.attestationType()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
  int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v15, v17);
  LODWORD(v14) = enum case for HardwareAttestationType.SE(_:);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  *(void *)(v0 + 3000) = v20;
  *(void *)(v0 + 3008) = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v20(v15, v17);
  if (v19 != v14)
  {
    uint64_t v21 = *(void *)(v0 + 2952);
    uint64_t v22 = *(void *)(v0 + 2928);
    (*(void (**)(void, void, void))(*(void *)(v0 + 2728) + 104))(*(void *)(v0 + 2744), enum case for DIPError.Code.documentReaderCertificateAttestationTypeInvalid(_:), *(void *)(v0 + 2720));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    v20(v21, v22);
LABEL_2:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  sub_10000C728(*(void **)(v0 + 2640), v18[3]);
  uint64_t v72 = v20;
  uint64_t v98 = dispatch thunk of IdentityKey.attestation(_:)();
  uint64_t v82 = *(void *)(v0 + 2920);
  uint64_t v105 = *(void *)(v0 + 2912);
  uint64_t v112 = *(void *)(v0 + 2904);
  uint64_t v87 = *(void *)(v0 + 2896);
  uint64_t v114 = *(void *)(v0 + 2888);
  uint64_t v90 = *(void *)(v0 + 2872);
  uint64_t v92 = *(void *)(v0 + 2864);
  uint64_t v94 = *(void *)(v0 + 2856);
  uint64_t v99 = *(void *)(v0 + 2880);
  uint64_t v101 = *(void *)(v0 + 2648);
  char v85 = *(unsigned char *)(v0 + 585);
  uint64_t v77 = *(void *)(v0 + 2624);
  uint64_t v79 = *(void *)(v0 + 2632);
  uint64_t v73 = *(void *)(v0 + 2608);
  unint64_t v75 = *(void *)(v0 + 2616);
  uint64_t v31 = *(void *)(v0 + 2600);
  uint64_t v32 = (int *)type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
  uint64_t v33 = (uint64_t *)(v31 + v32[5]);
  uint64_t v97 = *v33;
  *(void *)(v0 + 3016) = *v33;
  uint64_t v34 = v33[1];
  *(void *)(v0 + 3024) = v34;
  uint64_t v35 = (uint64_t *)(v31 + v32[6]);
  uint64_t v111 = *v35;
  *(void *)(v0 + 3032) = *v35;
  uint64_t v36 = v35[1];
  *(void *)(v0 + 3040) = v36;
  uint64_t v37 = (uint64_t *)(v31 + v32[8]);
  uint64_t v109 = *v37;
  *(void *)(v0 + 3048) = *v37;
  uint64_t v38 = v37[1];
  *(void *)(v0 + 3056) = v38;
  *(void *)(v0 + 2504) = type metadata accessor for BundleRecordFetcher();
  *(void *)(v0 + 2512) = &protocol witness table for BundleRecordFetcher;
  sub_10002C2D8((uint64_t *)(v0 + 2480));
  swift_bridgeObjectRetain();
  uint64_t v107 = v34;
  swift_bridgeObjectRetain();
  uint64_t v110 = v36;
  swift_bridgeObjectRetain();
  uint64_t v108 = v38;
  swift_bridgeObjectRetain();
  sub_100402504(v73, v75, v77, v79);
  BundleRecordFetcher.init()();
  MobileDocumentReaderEntitlementChecker.init(bundleRecordFetcher:)();
  uint64_t v39 = (audit_token_t *)AuditToken.wrapped.getter();
  Swift::Bool v40 = MobileDocumentReaderEntitlementChecker.checkDevelopmentFlagEntitlements(auditToken:)(v39);
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v82, v112);
  uint64_t v41 = v87;
  UUID.init()();
  uint64_t v113 = UUID.uuidString.getter();
  *(void *)(v0 + 3064) = v113;
  uint64_t v106 = v42;
  *(void *)(v0 + 3072) = v42;
  uint64_t v88 = *(void (**)(uint64_t, uint64_t))(v114 + 8);
  v88(v41, v99);
  *(unsigned char *)(v0 + 3176) = v85;
  *(_DWORD *)(v0 + 393) = *(_DWORD *)(v0 + 201);
  *(_DWORD *)(v0 + 396) = *(_DWORD *)(v0 + 204);
  *(unsigned char *)(v0 + 3184) = v40;
  sub_10000C728((void *)(v101 + 16), *(void *)(v101 + 40));
  type metadata accessor for DIPAccountManager();
  swift_bridgeObjectRetain();
  static DIPAccountManager.sharedInstance.getter();
  sub_10000C728((void *)(v0 + 2440), *(void *)(v0 + 2464));
  uint64_t v104 = dispatch thunk of DIPAccountManagerProtocol.appleAuthHeader(_:)();
  *(void *)(v0 + 3080) = v104;
  uint64_t v100 = v43;
  *(void *)(v0 + 3088) = v43;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 2440);
  DeviceInformationProvider.init()();
  uint64_t v102 = DeviceInformationProvider.uniqueDeviceID.getter();
  *(void *)(v0 + 3096) = v102;
  uint64_t v103 = v44;
  *(void *)(v0 + 3104) = v44;
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v90, v94);
  if (qword_10071F5F8 != -1) {
    swift_once();
  }
  uint64_t v45 = *(void *)(v0 + 2896);
  uint64_t v46 = *(void *)(v0 + 2880);
  uint64_t v91 = *(void *)(v0 + 2632);
  uint64_t v83 = *(void *)(v0 + 2624);
  uint64_t v78 = *(void *)(v0 + 2608);
  uint64_t v80 = *(void *)(v0 + 2616);
  uint64_t v74 = *(void *)(v0 + 2584);
  uint64_t v76 = *(void *)(v0 + 2592);
  uint64_t v48 = qword_1007608B8;
  uint64_t v47 = unk_1007608C0;
  *(void *)(v0 + 3112) = qword_1007608B8;
  *(void *)(v0 + 3120) = v47;
  swift_bridgeObjectRetain();
  sub_1000AAC30(0, 0);
  UUID.init()();
  uint64_t v49 = UUID.uuidString.getter();
  uint64_t v51 = v50;
  *(void *)(v0 + 3128) = v49;
  *(void *)(v0 + 3136) = v50;
  v88(v45, v46);
  swift_bridgeObjectRelease();
  char v52 = *(unsigned char *)(v0 + 3176);
  char v53 = *(unsigned char *)(v0 + 3184);
  uint64_t v115 = v49;
  *(void *)(v0 + 592) = v49;
  uint64_t v89 = v51;
  *(void *)(v0 + 600) = v51;
  *(void *)(v0 + 608) = v113;
  *(void *)(v0 + 616) = v106;
  *(void *)(v0 + 624) = v104;
  *(void *)(v0 + 632) = v100;
  *(void *)(v0 + 640) = v102;
  *(void *)(v0 + 648) = v103;
  uint64_t v96 = v47;
  *(void *)(v0 + 656) = v48;
  *(void *)(v0 + 664) = v47;
  *(void *)(v0 + 672) = v97;
  *(void *)(v0 + 680) = v107;
  *(void *)(v0 + 688) = v111;
  *(void *)(v0 + 696) = v110;
  *(void *)(v0 + 704) = v109;
  *(void *)(v0 + 712) = v108;
  *(void *)(v0 + 720) = v74;
  *(void *)(v0 + 728) = v76;
  *(unsigned char *)(v0 + 736) = v52;
  *(void *)(v0 + 744) = v78;
  *(void *)(v0 + 752) = v80;
  *(void *)(v0 + 760) = v83;
  *(void *)(v0 + 768) = v91;
  *(unsigned char *)(v0 + 776) = v53;
  long long v54 = *(_OWORD *)(v0 + 656);
  long long v55 = *(_OWORD *)(v0 + 672);
  long long v56 = *(_OWORD *)(v0 + 704);
  *(_OWORD *)(v0 + 2032) = *(_OWORD *)(v0 + 688);
  *(_OWORD *)(v0 + 2048) = v56;
  *(_OWORD *)(v0 + 2000) = v54;
  *(_OWORD *)(v0 + 2016) = v55;
  long long v57 = *(_OWORD *)(v0 + 592);
  long long v58 = *(_OWORD *)(v0 + 608);
  long long v59 = *(_OWORD *)(v0 + 640);
  *(_OWORD *)(v0 + 1968) = *(_OWORD *)(v0 + 624);
  *(_OWORD *)(v0 + 1984) = v59;
  *(_OWORD *)(v0 + 1936) = v57;
  *(_OWORD *)(v0 + 1952) = v58;
  long long v60 = *(_OWORD *)(v0 + 720);
  long long v61 = *(_OWORD *)(v0 + 736);
  long long v62 = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 2105) = *(_OWORD *)(v0 + 761);
  *(_OWORD *)(v0 + 2080) = v61;
  *(_OWORD *)(v0 + 2096) = v62;
  *(_OWORD *)(v0 + 2064) = v60;
  sub_100402544((void *)(v0 + 592));
  sub_1003FAE2C();
  sub_1003FAE80();
  JWSSignedJSON.init(payload:)();
  JWSSignedJSON.setCertificateChain(_:)((Swift::OpaquePointer)v98);
  if (v63)
  {
    uint64_t v93 = *(void *)(v0 + 2928);
    uint64_t v95 = *(void *)(v0 + 2952);
    uint64_t v64 = *(void *)(v0 + 2848);
    uint64_t v65 = *(void *)(v0 + 2840);
    uint64_t v66 = *(void *)(v0 + 2832);
    uint64_t v84 = *(void *)(v0 + 2624);
    uint64_t v86 = *(void *)(v0 + 2632);
    long long v81 = *(_OWORD *)(v0 + 2608);
    uint64_t v67 = *(void *)(v0 + 2592);
    uint64_t v68 = *(void *)(v0 + 2584);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
    *(void *)(v0 + 2128) = v115;
    *(void *)(v0 + 2136) = v89;
    *(void *)(v0 + 2144) = v113;
    *(void *)(v0 + 2152) = v106;
    *(void *)(v0 + 2160) = v104;
    *(void *)(v0 + 2168) = v100;
    *(void *)(v0 + 2176) = v102;
    *(void *)(v0 + 2184) = v103;
    *(void *)(v0 + 2192) = v48;
    *(void *)(v0 + 2200) = v96;
    *(void *)(v0 + 2208) = v97;
    *(void *)(v0 + 2216) = v107;
    *(void *)(v0 + 2224) = v111;
    *(void *)(v0 + 2232) = v110;
    *(void *)(v0 + 2240) = v109;
    *(void *)(v0 + 2248) = v108;
    *(void *)(v0 + 2256) = v68;
    *(void *)(v0 + 2264) = v67;
    *(unsigned char *)(v0 + 2272) = *(unsigned char *)(v0 + 3176);
    *(_DWORD *)(v0 + 2273) = *(_DWORD *)(v0 + 393);
    *(_DWORD *)(v0 + 2276) = *(_DWORD *)(v0 + 396);
    *(_OWORD *)(v0 + 2280) = v81;
    *(void *)(v0 + 2296) = v84;
    *(void *)(v0 + 2304) = v86;
    *(unsigned char *)(v0 + 2312) = *(unsigned char *)(v0 + 3184);
    sub_1002D3E90((void *)(v0 + 2128));
    v72(v95, v93);
    goto LABEL_2;
  }
  swift_bridgeObjectRelease();
  JWSSignedJSON.setKid(_:)();
  id v69 = (void *)swift_task_alloc();
  *(void *)(v0 + 3144) = v69;
  *id v69 = v0;
  v69[1] = sub_1005ACC80;
  uint64_t v70 = *(void *)(v0 + 2832);
  uint64_t v71 = *(void *)(v0 + 2640);
  return JWSSignedJSON.sign(_:)(v71, v70);
}

uint64_t sub_1005ACC80()
{
  *(void *)(*(void *)v1 + 3152) = v0;
  swift_task_dealloc();
  if (v0) {
    Swift::String v2 = sub_1005AE9CC;
  }
  else {
    Swift::String v2 = sub_1005ACD94;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005ACD94()
{
  sub_10000C728((void *)(v0[331] + 16), *(void *)(v0[331] + 40));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[395] = v1;
  void *v1 = v0;
  v1[1] = sub_1005ACE44;
  uint64_t v2 = v0[356];
  return sub_1002CA194((uint64_t)(v0 + 290), v2);
}

uint64_t sub_1005ACE44()
{
  *(void *)(*(void *)v1 + 3168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1005ADA7C;
  }
  else {
    uint64_t v2 = sub_1005ACF58;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005ACF58()
{
  uint64_t v1 = (_DWORD *)(v0 + 393);
  sub_100511764(v0 + 2432, v0 + 2536);
  sub_100135DC4(v0 + 2536);
  sub_1005AEFA4(v0 + 2320);
  sub_100511764(v0 + 2536, v0 + 2568);
  if (!*(void *)(v0 + 2568))
  {
    long long v72 = *(_OWORD *)(v0 + 3128);
    uint64_t v86 = (void *)(v0 + 784);
    long long v76 = *(_OWORD *)(v0 + 3112);
    long long v48 = *(_OWORD *)(v0 + 3064);
    long long v64 = *(_OWORD *)(v0 + 3048);
    long long v68 = *(_OWORD *)(v0 + 3096);
    long long v56 = *(_OWORD *)(v0 + 3032);
    long long v60 = *(_OWORD *)(v0 + 3080);
    long long v40 = *(_OWORD *)(v0 + 3016);
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v0 + 3000);
    uint64_t v81 = *(void *)(v0 + 2952);
    uint64_t v79 = *(void *)(v0 + 2928);
    uint64_t v11 = *(void *)(v0 + 2848);
    uint64_t v12 = *(void *)(v0 + 2840);
    uint64_t v13 = *(void *)(v0 + 2832);
    uint64_t v52 = *(void *)(v0 + 2632);
    uint64_t v44 = *(void *)(v0 + 2624);
    long long v38 = *(_OWORD *)(v0 + 2608);
    uint64_t v14 = *(void *)(v0 + 2592);
    uint64_t v15 = *(void *)(v0 + 2584);
    (*(void (**)(void, void, void))(*(void *)(v0 + 2728) + 104))(*(void *)(v0 + 2744), enum case for DIPError.Code.serverResponseInconsistent(_:), *(void *)(v0 + 2720));
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *(_OWORD *)(v0 + 784) = v72;
    *(_OWORD *)(v0 + 800) = v48;
    *(_OWORD *)(v0 + 816) = v60;
    *(_OWORD *)(v0 + 832) = v68;
    *(_OWORD *)(v0 + 848) = v76;
    *(_OWORD *)(v0 + 864) = v40;
    *(_OWORD *)(v0 + 880) = v56;
    *(_OWORD *)(v0 + 896) = v64;
    *(void *)(v0 + 912) = v15;
    *(void *)(v0 + 920) = v14;
    *(unsigned char *)(v0 + 928) = *(unsigned char *)(v0 + 3176);
    *(_DWORD *)(v0 + 929) = *v1;
    *(_DWORD *)(v0 + 932) = *(_DWORD *)(v0 + 396);
    *(_OWORD *)(v0 + 936) = v38;
    *(void *)(v0 + 952) = v44;
    *(void *)(v0 + 960) = v52;
    *(unsigned char *)(v0 + 968) = *(unsigned char *)(v0 + 3184);
    goto LABEL_5;
  }
  uint64_t v2 = *(void *)(v0 + 3168);
  uint64_t v3 = decodeCertificateChain(fromBase64DER:)();
  if (v2)
  {
    long long v71 = *(_OWORD *)(v0 + 3128);
    uint64_t v86 = (void *)(v0 + 400);
    long long v75 = *(_OWORD *)(v0 + 3112);
    long long v63 = *(_OWORD *)(v0 + 3048);
    long long v67 = *(_OWORD *)(v0 + 3096);
    long long v55 = *(_OWORD *)(v0 + 3032);
    long long v59 = *(_OWORD *)(v0 + 3080);
    long long v43 = *(_OWORD *)(v0 + 3016);
    long long v47 = *(_OWORD *)(v0 + 3064);
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v0 + 3000);
    uint64_t v81 = *(void *)(v0 + 2952);
    uint64_t v79 = *(void *)(v0 + 2928);
    uint64_t v4 = *(void *)(v0 + 2848);
    uint64_t v5 = *(void *)(v0 + 2840);
    uint64_t v6 = *(void *)(v0 + 2832);
    uint64_t v7 = *(void *)(v0 + 2632);
    uint64_t v8 = *(void *)(v0 + 2624);
    long long v51 = *(_OWORD *)(v0 + 2608);
    uint64_t v9 = *(void *)(v0 + 2592);
    uint64_t v10 = *(void *)(v0 + 2584);
    sub_10009F534(v0 + 2536);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    *(_OWORD *)(v0 + 400) = v71;
    *(_OWORD *)(v0 + 416) = v47;
    *(_OWORD *)(v0 + 432) = v59;
    *(_OWORD *)(v0 + 448) = v67;
    *(_OWORD *)(v0 + 464) = v75;
    *(_OWORD *)(v0 + 480) = v43;
    *(_OWORD *)(v0 + 496) = v55;
    *(_OWORD *)(v0 + 512) = v63;
    *(void *)(v0 + 528) = v10;
    *(void *)(v0 + 536) = v9;
    *(unsigned char *)(v0 + 544) = *(unsigned char *)(v0 + 3176);
    *(_DWORD *)(v0 + 545) = *(_DWORD *)(v0 + 393);
    *(_DWORD *)(v0 + 548) = *(_DWORD *)(v0 + 396);
    *(_OWORD *)(v0 + 552) = v51;
    *(void *)(v0 + 568) = v8;
    *(void *)(v0 + 576) = v7;
    *(unsigned char *)(v0 + 584) = *(unsigned char *)(v0 + 3184);
LABEL_5:
    sub_1002D3E90(v86);
    v83(v81, v79);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  unint64_t v18 = v3;
  sub_10009F534(v0 + 2536);
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v87 = v18;
  uint64_t v20 = (long long *)(v0 + 3128);
  if (!v19)
  {
    long long v74 = *v20;
    uint64_t v86 = (void *)(v0 + 1552);
    long long v78 = *(_OWORD *)(v0 + 3112);
    long long v50 = *(_OWORD *)(v0 + 3064);
    long long v66 = *(_OWORD *)(v0 + 3048);
    long long v70 = *(_OWORD *)(v0 + 3096);
    long long v58 = *(_OWORD *)(v0 + 3032);
    long long v62 = *(_OWORD *)(v0 + 3080);
    long long v42 = *(_OWORD *)(v0 + 3016);
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v0 + 3000);
    uint64_t v81 = *(void *)(v0 + 2952);
    uint64_t v79 = *(void *)(v0 + 2928);
    uint64_t v30 = *(void *)(v0 + 2848);
    uint64_t v31 = *(void *)(v0 + 2840);
    uint64_t v32 = *(void *)(v0 + 2832);
    uint64_t v33 = *(void *)(v0 + 2744);
    uint64_t v34 = *(void *)(v0 + 2728);
    uint64_t v35 = *(void *)(v0 + 2720);
    uint64_t v54 = *(void *)(v0 + 2632);
    uint64_t v46 = *(void *)(v0 + 2624);
    long long v39 = *(_OWORD *)(v0 + 2608);
    uint64_t v37 = *(void *)(v0 + 2592);
    uint64_t v36 = *(void *)(v0 + 2584);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v33, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v35);
    sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
    sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    *(_OWORD *)(v0 + 1552) = v74;
    *(_OWORD *)(v0 + 1568) = v50;
    *(_OWORD *)(v0 + 1584) = v62;
    *(_OWORD *)(v0 + 1600) = v70;
    *(_OWORD *)(v0 + 1616) = v78;
    *(_OWORD *)(v0 + 1632) = v42;
    *(_OWORD *)(v0 + 1648) = v58;
    *(_OWORD *)(v0 + 1664) = v66;
    *(void *)(v0 + 1680) = v36;
    *(void *)(v0 + 1688) = v37;
    *(unsigned char *)(v0 + 1696) = *(unsigned char *)(v0 + 3176);
    *(_DWORD *)(v0 + 1697) = *v1;
    *(_DWORD *)(v0 + 1700) = *(_DWORD *)(v0 + 396);
    *(_OWORD *)(v0 + 1704) = v39;
    *(void *)(v0 + 1720) = v46;
    *(void *)(v0 + 1728) = v54;
    *(unsigned char *)(v0 + 1736) = *(unsigned char *)(v0 + 3184);
    goto LABEL_5;
  }
  long long v77 = *v20;
  long long v80 = *(_OWORD *)(v0 + 3112);
  long long v65 = *(_OWORD *)(v0 + 3080);
  long long v69 = *(_OWORD *)(v0 + 3048);
  long long v73 = *(_OWORD *)(v0 + 3096);
  long long v53 = *(_OWORD *)(v0 + 3064);
  long long v57 = *(_OWORD *)(v0 + 3032);
  long long v45 = *(_OWORD *)(v0 + 3016);
  char v85 = *(void (**)(uint64_t, uint64_t))(v0 + 3000);
  uint64_t v82 = *(void *)(v0 + 2928);
  uint64_t v84 = *(void *)(v0 + 2952);
  uint64_t v21 = *(void *)(v0 + 2848);
  uint64_t v22 = *(void *)(v0 + 2840);
  uint64_t v23 = *(void *)(v0 + 2832);
  uint64_t v24 = *(void *)(v0 + 2768);
  uint64_t v25 = *(void *)(v0 + 2760);
  uint64_t v26 = *(void *)(v0 + 2752);
  uint64_t v61 = *(void *)(v0 + 2632);
  uint64_t v49 = *(void *)(v0 + 2624);
  long long v41 = *(_OWORD *)(v0 + 2608);
  uint64_t v27 = *(void *)(v0 + 2592);
  uint64_t v28 = *(void *)(v0 + 2584);
  static MobileDocumentReaderMilestone.prepareCertificateFetched.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  *(_OWORD *)(v0 + 208) = v77;
  *(_OWORD *)(v0 + 224) = v53;
  *(_OWORD *)(v0 + 240) = v65;
  *(_OWORD *)(v0 + 256) = v73;
  *(_OWORD *)(v0 + 272) = v80;
  *(_OWORD *)(v0 + 288) = v45;
  *(_OWORD *)(v0 + 304) = v57;
  *(_OWORD *)(v0 + 320) = v69;
  *(void *)(v0 + 336) = v28;
  *(void *)(v0 + 344) = v27;
  *(unsigned char *)(v0 + 352) = *(unsigned char *)(v0 + 3176);
  *(_DWORD *)(v0 + 353) = *v1;
  *(_DWORD *)(v0 + 356) = *(_DWORD *)(v0 + 396);
  *(_OWORD *)(v0 + 360) = v41;
  *(void *)(v0 + 376) = v49;
  *(void *)(v0 + 384) = v61;
  *(unsigned char *)(v0 + 392) = *(unsigned char *)(v0 + 3184);
  sub_1002D3E90((void *)(v0 + 208));
  v85(v84, v82);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v29(v87);
}

uint64_t sub_1005ADA7C()
{
  uint64_t v1 = (_DWORD *)(v0 + 393);
  *(void *)(v0 + 2576) = *(void *)(v0 + 3168);
  swift_errorRetain();
  sub_100007764((uint64_t *)&unk_100723450);
  if (!swift_dynamicCast()) {
    goto LABEL_7;
  }
  uint64_t v2 = *(void *)(v0 + 2816);
  uint64_t v129 = *(void *)(v0 + 2808);
  uint64_t v3 = *(void *)(v0 + 2784);
  uint64_t v125 = *(void *)(v0 + 2776);
  uint64_t v4 = *(void *)(v0 + 2744);
  uint64_t v5 = *(void *)(v0 + 2736);
  uint64_t v6 = *(void *)(v0 + 2728);
  uint64_t v7 = *(void *)(v0 + 2720);
  (*(void (**)(uint64_t, void))(v3 + 32))(v2, *(void *)(v0 + 2824));
  DIPError.code.getter();
  id v119 = *(void (**)(uint64_t, void, uint64_t))(v6 + 104);
  v119(v5, enum case for DIPError.Code.topekaTermsAndConditionsAcceptanceRequired(_:), v7);
  sub_1002A6EC0(&qword_100724410, (void (*)(uint64_t))&type metadata accessor for DIPError.Code);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v123 = *(void *)(v0 + 2544);
  uint64_t v8 = *(void *)(v0 + 2552);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v5, v7);
  uint64_t v116 = v9;
  v9(v4, v7);
  uint64_t v10 = v125;
  uint64_t v126 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v126(v129, v2, v10);
  uint64_t v11 = *(void *)(v0 + 2808);
  uint64_t v12 = *(void *)(v0 + 2784);
  uint64_t v13 = *(void *)(v0 + 2776);
  if (v123 != v8)
  {
    uint64_t v15 = *(void *)(v0 + 2744);
    uint64_t v16 = *(void *)(v0 + 2736);
    uint64_t v17 = *(void *)(v0 + 2720);
    DIPError.code.getter();
    v119(v16, enum case for DIPError.Code.topekaMobileDocumentReaderTermsAndConditionsAcceptanceRequired(_:), v17);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v18 = *(void *)(v0 + 2560);
    uint64_t v19 = *(void *)(v0 + 2528);
    v116(v16, v17);
    v116(v15, v17);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v14(v11, v13);
    if (v18 == v19) {
      goto LABEL_5;
    }
    v14(*(void *)(v0 + 2816), *(void *)(v0 + 2776));
    uint64_t v1 = (_DWORD *)(v0 + 393);
LABEL_7:
    uint64_t v27 = *(void *)(v0 + 3168);
    uint64_t v28 = *(void *)(v0 + 2784);
    uint64_t v29 = *(void *)(v0 + 2776);
    uint64_t v30 = *(void *)(v0 + 2664);
    uint64_t v31 = *(void *)(v0 + 2656);
    swift_errorRelease();
    *(void *)(v0 + 2520) = v27;
    swift_errorRetain();
    int v32 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v30, v32 ^ 1u, 1, v29);
    sub_1005AEF3C(v30, v31);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v31, 1, v29) == 1)
    {
      uint64_t v33 = *(void *)(v0 + 2672);
      uint64_t v34 = type metadata accessor for MobileDocumentReaderSession.Error();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
    }
    else
    {
      uint64_t v35 = *(void *)(v0 + 2800);
      uint64_t v36 = *(void *)(v0 + 2792);
      uint64_t v37 = *(void *)(v0 + 2784);
      uint64_t v38 = *(void *)(v0 + 2776);
      uint64_t v39 = *(void *)(v0 + 2672);
      (*(void (**)(uint64_t, void, uint64_t))(v37 + 32))(v35, *(void *)(v0 + 2656), v38);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v36, v35, v38);
      sub_1001449B8(v36, v39);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v38);
      uint64_t v34 = type metadata accessor for MobileDocumentReaderSession.Error();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v39, 0, 1, v34);
    }
    uint64_t v40 = *(void *)(v0 + 2672);
    sub_10000C6CC(*(void *)(v0 + 2664), &qword_100726640);
    type metadata accessor for MobileDocumentReaderSession.Error();
    uint64_t v41 = *(void *)(v34 - 8);
    int v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v40, 1, v34);
    uint64_t v43 = *(void *)(v0 + 2712);
    if (v42 == 1)
    {
      uint64_t v44 = *(void *)(v0 + 2688);
      uint64_t v45 = *(void *)(v0 + 2680);
      sub_10000C6CC(*(void *)(v0 + 2672), &qword_100733A30);
      uint64_t v46 = enum case for MobileDocumentReaderSession.Error.Code.unknown(_:);
      long long v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 104);
      v47(v43, enum case for MobileDocumentReaderSession.Error.Code.unknown(_:), v45);
    }
    else
    {
      uint64_t v48 = *(void *)(v0 + 2704);
      uint64_t v49 = *(void *)(v0 + 2688);
      uint64_t v50 = *(void *)(v0 + 2680);
      uint64_t v51 = *(void *)(v0 + 2672);
      MobileDocumentReaderSession.Error.code.getter();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v51, v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v43, v48, v50);
      uint64_t v46 = enum case for MobileDocumentReaderSession.Error.Code.unknown(_:);
      long long v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 104);
    }
    uint64_t v52 = *(void *)(v0 + 2696);
    uint64_t v53 = *(void *)(v0 + 2688);
    uint64_t v54 = *(void *)(v0 + 2680);
    v47(v52, v46, v54);
    char v55 = static MobileDocumentReaderSession.Error.Code.== infix(_:_:)();
    uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v89(v52, v54);
    uint64_t v99 = *(void *)(v0 + 3136);
    uint64_t v95 = *(void *)(v0 + 3128);
    uint64_t v118 = *(void *)(v0 + 3120);
    uint64_t v113 = *(void *)(v0 + 3112);
    uint64_t v109 = *(void *)(v0 + 3104);
    uint64_t v105 = *(void *)(v0 + 3096);
    uint64_t v101 = *(void *)(v0 + 3088);
    uint64_t v97 = *(void *)(v0 + 3080);
    uint64_t v91 = *(void *)(v0 + 3064);
    uint64_t v93 = *(void *)(v0 + 3072);
    uint64_t v121 = *(void *)(v0 + 3048);
    uint64_t v122 = *(void *)(v0 + 3056);
    uint64_t v115 = *(void *)(v0 + 3040);
    uint64_t v111 = *(void *)(v0 + 3032);
    uint64_t v107 = *(void *)(v0 + 3024);
    uint64_t v103 = *(void *)(v0 + 3016);
    id v124 = *(void (**)(uint64_t, uint64_t))(v0 + 3000);
    if (v55)
    {
      uint64_t v56 = *(void *)(v0 + 2976);
      uint64_t v127 = v1;
      uint64_t v57 = *(void *)(v0 + 2968);
      uint64_t v58 = *(void *)(v0 + 2960);
      uint64_t v85 = *(void *)(v0 + 2928);
      uint64_t v87 = *(void *)(v0 + 2952);
      uint64_t v59 = *(void *)(v0 + 2840);
      uint64_t v72 = *(void *)(v0 + 2832);
      uint64_t v73 = *(void *)(v0 + 2848);
      uint64_t v60 = *(void *)(v0 + 2744);
      uint64_t v61 = *(void *)(v0 + 2728);
      uint64_t v62 = *(void *)(v0 + 2720);
      uint64_t v70 = *(void *)(v0 + 2680);
      uint64_t v71 = *(void *)(v0 + 2712);
      uint64_t v83 = *(void *)(v0 + 2632);
      uint64_t v81 = *(void *)(v0 + 2624);
      long long v79 = *(_OWORD *)(v0 + 2608);
      uint64_t v75 = *(void *)(v0 + 2584);
      uint64_t v77 = *(void *)(v0 + 2592);
      defaultLogger()();
      DIPRecordError(_:message:log:)();
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
      (*(void (**)(uint64_t, void, uint64_t))(v61 + 104))(v60, enum case for DIPError.Code.unexpectedServerResponse(_:), v62);
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      v89(v71, v70);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v73, v72);
      *(void *)(v0 + 1168) = v95;
      *(void *)(v0 + 1176) = v99;
      *(void *)(v0 + 1184) = v91;
      *(void *)(v0 + 1192) = v93;
      *(void *)(v0 + 1200) = v97;
      *(void *)(v0 + 1208) = v101;
      *(void *)(v0 + 1216) = v105;
      *(void *)(v0 + 1224) = v109;
      *(void *)(v0 + 1232) = v113;
      *(void *)(v0 + 1240) = v118;
      *(void *)(v0 + 1248) = v103;
      *(void *)(v0 + 1256) = v107;
      *(void *)(v0 + 1264) = v111;
      *(void *)(v0 + 1272) = v115;
      *(void *)(v0 + 1280) = v121;
      *(void *)(v0 + 1288) = v122;
      *(void *)(v0 + 1296) = v75;
      *(void *)(v0 + 1304) = v77;
      *(unsigned char *)(v0 + 1312) = *(unsigned char *)(v0 + 3176);
      *(_DWORD *)(v0 + 1313) = *v127;
      *(_DWORD *)(v0 + 1316) = *(_DWORD *)((char *)v127 + 3);
      *(_OWORD *)(v0 + 1320) = v79;
      *(void *)(v0 + 1336) = v81;
      *(void *)(v0 + 1344) = v83;
      *(unsigned char *)(v0 + 1352) = *(unsigned char *)(v0 + 3184);
      sub_1002D3E90((void *)(v0 + 1168));
      uint64_t v64 = v85;
      uint64_t v63 = v87;
    }
    else
    {
      uint64_t v128 = *(void *)(v0 + 2952);
      uint64_t v88 = *(void *)(v0 + 2928);
      uint64_t v65 = *(void *)(v0 + 2840);
      uint64_t v74 = *(void *)(v0 + 2832);
      uint64_t v76 = *(void *)(v0 + 2848);
      uint64_t v66 = *(void *)(v0 + 2712);
      uint64_t v67 = *(void *)(v0 + 2680);
      uint64_t v84 = *(void *)(v0 + 2624);
      uint64_t v86 = *(void *)(v0 + 2632);
      long long v82 = *(_OWORD *)(v0 + 2608);
      uint64_t v78 = *(void *)(v0 + 2584);
      uint64_t v80 = *(void *)(v0 + 2592);
      (*(void (**)(void, void, void))(*(void *)(v0 + 2728) + 104))(*(void *)(v0 + 2744), enum case for DIPError.Code.internalError(_:), *(void *)(v0 + 2720));
      swift_errorRetain();
      sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
      sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
      swift_willThrow();
      swift_errorRelease();
      v89(v66, v67);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v76, v74);
      *(void *)(v0 + 1360) = v95;
      *(void *)(v0 + 1368) = v99;
      *(void *)(v0 + 1376) = v91;
      *(void *)(v0 + 1384) = v93;
      *(void *)(v0 + 1392) = v97;
      *(void *)(v0 + 1400) = v101;
      *(void *)(v0 + 1408) = v105;
      *(void *)(v0 + 1416) = v109;
      *(void *)(v0 + 1424) = v113;
      *(void *)(v0 + 1432) = v118;
      *(void *)(v0 + 1440) = v103;
      *(void *)(v0 + 1448) = v107;
      *(void *)(v0 + 1456) = v111;
      *(void *)(v0 + 1464) = v115;
      *(void *)(v0 + 1472) = v121;
      *(void *)(v0 + 1480) = v122;
      *(void *)(v0 + 1488) = v78;
      *(void *)(v0 + 1496) = v80;
      *(unsigned char *)(v0 + 1504) = *(unsigned char *)(v0 + 3176);
      *(_DWORD *)(v0 + 1505) = *v1;
      *(_DWORD *)(v0 + 1508) = *(_DWORD *)((char *)v1 + 3);
      *(_OWORD *)(v0 + 1512) = v82;
      *(void *)(v0 + 1528) = v84;
      *(void *)(v0 + 1536) = v86;
      *(unsigned char *)(v0 + 1544) = *(unsigned char *)(v0 + 3184);
      sub_1002D3E90((void *)(v0 + 1360));
      uint64_t v63 = v128;
      uint64_t v64 = v88;
    }
    v124(v63, v64);
    goto LABEL_17;
  }
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v14(*(void *)(v0 + 2808), *(void *)(v0 + 2776));
LABEL_5:
  long long v110 = *(_OWORD *)(v0 + 3128);
  long long v112 = *(_OWORD *)(v0 + 3112);
  long long v108 = *(_OWORD *)(v0 + 3096);
  long long v104 = *(_OWORD *)(v0 + 3080);
  long long v96 = *(_OWORD *)(v0 + 3064);
  long long v106 = *(_OWORD *)(v0 + 3048);
  long long v100 = *(_OWORD *)(v0 + 3032);
  long long v92 = *(_OWORD *)(v0 + 3016);
  uint64_t v120 = *(void (**)(uint64_t, uint64_t))(v0 + 3000);
  uint64_t v114 = *(void *)(v0 + 2928);
  uint64_t v117 = *(void *)(v0 + 2952);
  uint64_t v20 = *(void *)(v0 + 2848);
  uint64_t v21 = *(void *)(v0 + 2840);
  uint64_t v22 = *(void *)(v0 + 2832);
  uint64_t v23 = *(void *)(v0 + 2816);
  uint64_t v24 = *(void *)(v0 + 2776);
  uint64_t v102 = *(void *)(v0 + 2632);
  uint64_t v98 = *(void *)(v0 + 2624);
  long long v94 = *(_OWORD *)(v0 + 2608);
  uint64_t v90 = *(void *)(v0 + 2592);
  uint64_t v25 = *(void *)(v0 + 2584);
  swift_errorRelease();
  sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
  swift_allocError();
  v126(v26, v23, v24);
  swift_willThrow();
  v14(v23, v24);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  *(_OWORD *)(v0 + 976) = v110;
  *(_OWORD *)(v0 + 992) = v96;
  *(_OWORD *)(v0 + 1008) = v104;
  *(_OWORD *)(v0 + 1024) = v108;
  *(_OWORD *)(v0 + 1040) = v112;
  *(_OWORD *)(v0 + 1056) = v92;
  *(_OWORD *)(v0 + 1072) = v100;
  *(_OWORD *)(v0 + 1088) = v106;
  *(void *)(v0 + 1104) = v25;
  *(void *)(v0 + 1112) = v90;
  *(unsigned char *)(v0 + 1120) = *(unsigned char *)(v0 + 3176);
  *(_DWORD *)(v0 + 1121) = *(_DWORD *)(v0 + 393);
  *(_DWORD *)(v0 + 1124) = *(_DWORD *)(v0 + 396);
  *(_OWORD *)(v0 + 1128) = v94;
  *(void *)(v0 + 1144) = v98;
  *(void *)(v0 + 1152) = v102;
  *(unsigned char *)(v0 + 1160) = *(unsigned char *)(v0 + 3184);
  sub_1002D3E90((void *)(v0 + 976));
  v120(v117, v114);
  swift_errorRelease();
LABEL_17:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v68 = *(uint64_t (**)(void))(v0 + 8);
  return v68();
}

uint64_t sub_1005AE9CC()
{
  long long v17 = *(_OWORD *)(v0 + 3128);
  long long v18 = *(_OWORD *)(v0 + 3112);
  long long v16 = *(_OWORD *)(v0 + 3096);
  long long v14 = *(_OWORD *)(v0 + 3080);
  long long v15 = *(_OWORD *)(v0 + 3048);
  long long v12 = *(_OWORD *)(v0 + 3064);
  long long v13 = *(_OWORD *)(v0 + 3032);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 3000);
  uint64_t v2 = *(void *)(v0 + 2952);
  uint64_t v3 = *(void *)(v0 + 2928);
  uint64_t v4 = *(void *)(v0 + 2632);
  uint64_t v5 = *(void *)(v0 + 2624);
  long long v10 = *(_OWORD *)(v0 + 3016);
  long long v11 = *(_OWORD *)(v0 + 2608);
  uint64_t v6 = *(void *)(v0 + 2592);
  uint64_t v7 = *(void *)(v0 + 2584);
  (*(void (**)(void, void))(*(void *)(v0 + 2840) + 8))(*(void *)(v0 + 2848), *(void *)(v0 + 2832));
  *(_OWORD *)(v0 + 16) = v17;
  *(_OWORD *)(v0 + 32) = v12;
  *(_OWORD *)(v0 + 48) = v14;
  *(_OWORD *)(v0 + 64) = v16;
  *(_OWORD *)(v0 + 80) = v18;
  *(_OWORD *)(v0 + 96) = v10;
  *(_OWORD *)(v0 + 112) = v13;
  *(_OWORD *)(v0 + 128) = v15;
  *(void *)(v0 + 144) = v7;
  *(void *)(v0 + 152) = v6;
  *(unsigned char *)(v0 + 160) = *(unsigned char *)(v0 + 3176);
  *(_DWORD *)(v0 + 161) = *(_DWORD *)(v0 + 393);
  *(_DWORD *)(v0 + 164) = *(_DWORD *)(v0 + 396);
  *(_OWORD *)(v0 + 168) = v11;
  *(void *)(v0 + 184) = v5;
  *(void *)(v0 + 192) = v4;
  *(unsigned char *)(v0 + 200) = *(unsigned char *)(v0 + 3184);
  sub_1002D3E90((void *)(v0 + 16));
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1005AEC98()
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 56);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MobileDocumentReaderAuthenticationCertificateFetcher()
{
  return self;
}

void sub_1005AED04(char a1)
{
  uint64_t v2 = type metadata accessor for DIPError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (isInternalBuild()())
  {
    id v6 = [self standardUserDefaults];
    unint64_t v7 = 0x8000000100659BF0;
    unint64_t v8 = 0xD000000000000053;
    if (a1)
    {
      NSString v9 = String._bridgeToObjectiveC()();
      [v6 removeObjectForKey:v9];
    }
    else
    {
      Swift::Bool v10 = NSUserDefaults.internalBool(forKey:)(*(Swift::String *)&v8);

      if (v10)
      {
        (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.topekaTermsAndConditionsAcceptanceRequired(_:), v2);
        sub_1000073C4((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError();
        sub_1002A6EC0((unint64_t *)&qword_10071F6E0, (void (*)(uint64_t))&type metadata accessor for DIPError);
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)();
        swift_willThrow();
      }
    }
  }
}

uint64_t sub_1005AEF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007764(&qword_100726640);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005AEFA4(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1005AF038(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AuditToken();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    Swift::Bool v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *Swift::Bool v10 = *v11;
    v10[1] = v12;
    long long v13 = (uint64_t *)((char *)a1 + v9);
    long long v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    long long v17 = (char *)a1 + v16;
    long long v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for UUID();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    uint64_t v21 = a3[8];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1005AF1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1005AF288(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  Swift::Bool v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  long long v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v16, v17, v18);
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1005AF3A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005AF4EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1005AF5CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  uint64_t v21 = a3[8];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005AF6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005AF6F4);
}

uint64_t sub_1005AF6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AuditToken();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1005AF824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005AF838);
}

uint64_t sub_1005AF838(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AuditToken();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration()
{
  uint64_t result = qword_100733A90;
  if (!qword_100733A90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1005AF9B4()
{
  uint64_t result = type metadata accessor for AuditToken();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1005AFA88(char a1)
{
  unint64_t result = 0x6B6F547469647561;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0x6E6564496D616574;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1005AFB58(void *a1)
{
  uint64_t v3 = sub_100007764(&qword_100733B00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C728(a1, a1[3]);
  sub_1005B08F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for AuditToken();
  sub_1005B0A0C(&qword_100733B08, (void (*)(uint64_t))&type metadata accessor for AuditToken);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    type metadata accessor for UUID();
    sub_1005B0A0C(&qword_100733B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_1005AFDEC()
{
  return Hasher._finalize()();
}

uint64_t sub_1005AFF68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AuditToken();
  uint64_t v33 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v35 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100007764(&qword_100733AE0);
  uint64_t v32 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C728(a1, a1[3]);
  sub_1005B08F8();
  uint64_t v36 = v8;
  uint64_t v12 = (uint64_t)v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)a1);
  }
  uint64_t v13 = v4;
  uint64_t v29 = (int *)v9;
  uint64_t v38 = a1;
  uint64_t v14 = v33;
  uint64_t v15 = v34;
  char v43 = 0;
  sub_1005B0A0C(&qword_100733AF0, (void (*)(uint64_t))&type metadata accessor for AuditToken);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v35, v5);
  char v42 = 1;
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v29;
  uint64_t v18 = (uint64_t *)&v11[v29[5]];
  *uint64_t v18 = v16;
  v18[1] = v19;
  char v41 = 2;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v35 = 0;
  uint64_t v21 = (uint64_t *)&v11[v17[6]];
  *uint64_t v21 = v20;
  v21[1] = v22;
  char v40 = 3;
  sub_1005B0A0C(&qword_100733AF8, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v23 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v11[v17[7]], v13, v23);
  char v39 = 4;
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v37);
  uint64_t v27 = (uint64_t *)&v11[v17[8]];
  uint64_t *v27 = v24;
  v27[1] = v26;
  sub_1005B094C((uint64_t)v11, v30);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t)v38);
  return sub_1005B09B0((uint64_t)v11);
}

unint64_t sub_1005B04F0()
{
  return sub_1005AFA88(*v0);
}

uint64_t sub_1005B04F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1005B0D6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005B0520(uint64_t a1)
{
  unint64_t v2 = sub_1005B08F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005B055C(uint64_t a1)
{
  unint64_t v2 = sub_1005B08F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005B0598@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005AFF68(a1, a2);
}

uint64_t sub_1005B05B0(void *a1)
{
  return sub_1005AFB58(a1);
}

uint64_t sub_1005B05CC()
{
  type metadata accessor for AuditToken();
  sub_1005B0A0C(&qword_100733B18, (void (*)(uint64_t))&type metadata accessor for AuditToken);
  dispatch thunk of Hashable.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_1005B0A0C(&qword_100733B20, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1005B073C()
{
  return Hasher._finalize()();
}

uint64_t sub_1005B08B0()
{
  return sub_1005B0A0C(&qword_100733AD8, (void (*)(uint64_t))type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
}

unint64_t sub_1005B08F8()
{
  unint64_t result = qword_100733AE8;
  if (!qword_100733AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100733AE8);
  }
  return result;
}

uint64_t sub_1005B094C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005B09B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1005B0A0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005B0A54(uint64_t a1, uint64_t a2)
{
  if ((static AuditToken.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration();
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
  {
    uint64_t v12 = v4[6];
    uint64_t v13 = *(void *)(a1 + v12);
    uint64_t v14 = *(void *)(a1 + v12 + 8);
    uint64_t v15 = (void *)(a2 + v12);
    BOOL v16 = v13 == *v15 && v14 == v15[1];
    if (v16 || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v17 & 1) != 0))
    {
      if (static UUID.== infix(_:_:)())
      {
        uint64_t v18 = v4[8];
        uint64_t v19 = *(void *)(a1 + v18);
        uint64_t v20 = *(void *)(a1 + v18 + 8);
        uint64_t v21 = (void *)(a2 + v18);
        if (v19 == *v21 && v20 == v21[1]) {
          return 1;
        }
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MobileDocumentReaderCallingApplicationConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005B0C2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration.CodingKeys()
{
  return &type metadata for MobileDocumentReaderCallingApplicationConfiguration.CodingKeys;
}

unint64_t sub_1005B0C68()
{
  unint64_t result = qword_100733B28;
  if (!qword_100733B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100733B28);
  }
  return result;
}

unint64_t sub_1005B0CC0()
{
  unint64_t result = qword_100733B30;
  if (!qword_100733B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100733B30);
  }
  return result;
}

unint64_t sub_1005B0D18()
{
  unint64_t result = qword_100733B38;
  if (!qword_100733B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100733B38);
  }
  return result;
}

uint64_t sub_1005B0D6C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6B6F547469647561 && a2 == 0xEA00000000006E65;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010064A680 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010064A6A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100653F20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6564496D616574 && a2 == 0xEE00726569666974)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1005B0FA4(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    uint64_t v21 = v20 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v8;
    uint64_t v9 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v9;
    uint64_t v10 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v10;
    *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
    uint64_t v11 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = v11;
    uint64_t v12 = a2[16];
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v12;
    uint64_t v13 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v13;
    uint64_t v14 = a2[20];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = v14;
    uint64_t v15 = a2[21];
    uint64_t v16 = a2[22];
    *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
    uint64_t v17 = a3[18];
    __dst = (void *)(a1 + v17);
    unint64_t v248 = (char *)a2 + v17;
    *(void *)(a1 + 168) = v15;
    *(void *)(a1 + 176) = v16;
    uint64_t v18 = type metadata accessor for HardwareAttestationType();
    uint64_t v246 = *(void *)(v18 - 8);
    uint64_t v249 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v246 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v249(v248, 1, v18))
    {
      uint64_t v19 = sub_100007764(&qword_100722310);
      memcpy(__dst, v248, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v246 + 16))(__dst, v248, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v246 + 56))(__dst, 0, 1, v18);
    }
    uint64_t v22 = a3[20];
    *(void *)(a1 + a3[19]) = *(uint64_t *)((char *)a2 + a3[19]);
    *(void *)(a1 + v22) = *(uint64_t *)((char *)a2 + v22);
    uint64_t v23 = a3[21];
    uint64_t v24 = a3[22];
    uint64_t v25 = (void *)(a1 + v23);
    uint64_t v26 = (uint64_t *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    *(unsigned char *)(a1 + v24) = *((unsigned char *)a2 + v24);
    uint64_t v28 = a3[24];
    *(void *)(a1 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
    *(void *)(a1 + v28) = *(uint64_t *)((char *)a2 + v28);
    uint64_t v29 = a3[26];
    *(void *)(a1 + a3[25]) = *(uint64_t *)((char *)a2 + a3[25]);
    *(unsigned char *)(a1 + v29) = *((unsigned char *)a2 + v29);
    uint64_t v30 = a3[27];
    uint64_t v31 = a3[28];
    uint64_t v32 = a1 + v30;
    uint64_t v33 = (uint64_t)a2 + v30;
    *(void *)uint64_t v32 = *(void *)v33;
    *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
    *(void *)(a1 + v31) = *(uint64_t *)((char *)a2 + v31);
    uint64_t v34 = a3[30];
    *(void *)(a1 + a3[29]) = *(uint64_t *)((char *)a2 + a3[29]);
    *(void *)(a1 + v34) = *(uint64_t *)((char *)a2 + v34);
    uint64_t v35 = a3[31];
    uint64_t v36 = a3[32];
    uint64_t v37 = a1 + v35;
    uint64_t v38 = (uint64_t)a2 + v35;
    *(void *)uint64_t v37 = *(void *)v38;
    *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
    uint64_t v39 = a1 + v36;
    uint64_t v40 = (uint64_t)a2 + v36;
    *(void *)uint64_t v39 = *(void *)v40;
    *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
    uint64_t v41 = a3[33];
    uint64_t v42 = a3[34];
    uint64_t v43 = a1 + v41;
    uint64_t v44 = (uint64_t)a2 + v41;
    *(void *)uint64_t v43 = *(void *)v44;
    *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
    uint64_t v45 = a1 + v42;
    uint64_t v46 = (uint64_t)a2 + v42;
    *(void *)uint64_t v45 = *(void *)v46;
    *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
    uint64_t v47 = a3[35];
    uint64_t v48 = a3[36];
    uint64_t v49 = a1 + v47;
    uint64_t v50 = (uint64_t)a2 + v47;
    *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
    *(void *)uint64_t v49 = *(void *)v50;
    *(unsigned char *)(a1 + v48) = *((unsigned char *)a2 + v48);
    uint64_t v51 = a3[38];
    *(unsigned char *)(a1 + a3[37]) = *((unsigned char *)a2 + a3[37]);
    uint64_t v52 = a1 + v51;
    uint64_t v53 = (uint64_t *)((char *)a2 + v51);
    uint64_t v54 = *(uint64_t *)((char *)a2 + v51 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v54 == 1)
    {
      memcpy((void *)v52, v53, 0x1721uLL);
      uint64_t v21 = a1;
    }
    else
    {
      *(void *)uint64_t v52 = *v53;
      *(void *)(v52 + 8) = v54;
      char v55 = v53 + 2;
      uint64_t v56 = v53[104];
      swift_bridgeObjectRetain();
      uint64_t v57 = v52;
      if (v56 == 1)
      {
        memcpy((void *)(v52 + 16), v53 + 2, 0x340uLL);
        uint64_t v21 = a1;
      }
      else
      {
        if (*(void *)v55 == 1)
        {
          *(_OWORD *)(v52 + 16) = *v55;
          *(_OWORD *)(v52 + 25) = *(_OWORD *)((char *)v53 + 25);
        }
        else
        {
          *(void *)(v52 + 16) = *(void *)v55;
          *(unsigned char *)(v52 + 24) = *((unsigned char *)v53 + 24);
          *(void *)(v52 + 32) = v53[4];
          *(unsigned char *)(v52 + 40) = *((unsigned char *)v53 + 40);
          swift_bridgeObjectRetain();
        }
        uint64_t v58 = v53[6];
        uint64_t v21 = a1;
        if (v58 == 1)
        {
          *(_OWORD *)(v52 + 48) = *((_OWORD *)v53 + 3);
          *(_OWORD *)(v52 + 57) = *(_OWORD *)((char *)v53 + 57);
        }
        else
        {
          *(void *)(v52 + 48) = v58;
          *(unsigned char *)(v52 + 56) = *((unsigned char *)v53 + 56);
          *(void *)(v52 + 64) = v53[8];
          *(unsigned char *)(v52 + 72) = *((unsigned char *)v53 + 72);
          swift_bridgeObjectRetain();
        }
        uint64_t v59 = v53[10];
        if (v59 == 1)
        {
          *(_OWORD *)(v52 + 80) = *((_OWORD *)v53 + 5);
          *(_OWORD *)(v52 + 89) = *(_OWORD *)((char *)v53 + 89);
        }
        else
        {
          *(void *)(v52 + 80) = v59;
          *(unsigned char *)(v52 + 88) = *((unsigned char *)v53 + 88);
          *(void *)(v52 + 96) = v53[12];
          *(unsigned char *)(v52 + 104) = *((unsigned char *)v53 + 104);
          swift_bridgeObjectRetain();
        }
        uint64_t v60 = v53[14];
        if (v60 == 1)
        {
          *(_OWORD *)(v52 + 112) = *((_OWORD *)v53 + 7);
          *(_OWORD *)(v52 + 121) = *(_OWORD *)((char *)v53 + 121);
        }
        else
        {
          *(void *)(v52 + 112) = v60;
          *(unsigned char *)(v52 + 120) = *((unsigned char *)v53 + 120);
          *(void *)(v52 + 128) = v53[16];
          *(unsigned char *)(v52 + 136) = *((unsigned char *)v53 + 136);
          swift_bridgeObjectRetain();
        }
        uint64_t v61 = v53[18];
        if (v61 == 1)
        {
          *(_OWORD *)(v52 + 144) = *((_OWORD *)v53 + 9);
          *(_OWORD *)(v52 + 153) = *(_OWORD *)((char *)v53 + 153);
        }
        else
        {
          *(void *)(v52 + 144) = v61;
          *(unsigned char *)(v52 + 152) = *((unsigned char *)v53 + 152);
          *(void *)(v52 + 160) = v53[20];
          *(unsigned char *)(v52 + 168) = *((unsigned char *)v53 + 168);
          swift_bridgeObjectRetain();
        }
        uint64_t v62 = v53[22];
        if (v62 == 1)
        {
          *(_OWORD *)(v52 + 176) = *((_OWORD *)v53 + 11);
          *(_OWORD *)(v52 + 185) = *(_OWORD *)((char *)v53 + 185);
        }
        else
        {
          *(void *)(v52 + 176) = v62;
          *(unsigned char *)(v52 + 184) = *((unsigned char *)v53 + 184);
          *(void *)(v52 + 192) = v53[24];
          *(unsigned char *)(v52 + 200) = *((unsigned char *)v53 + 200);
          swift_bridgeObjectRetain();
        }
        uint64_t v63 = v53[26];
        if (v63 == 1)
        {
          *(_OWORD *)(v52 + 208) = *((_OWORD *)v53 + 13);
          *(_OWORD *)(v52 + 217) = *(_OWORD *)((char *)v53 + 217);
        }
        else
        {
          *(void *)(v52 + 208) = v63;
          *(unsigned char *)(v52 + 216) = *((unsigned char *)v53 + 216);
          *(void *)(v52 + 224) = v53[28];
          *(unsigned char *)(v52 + 232) = *((unsigned char *)v53 + 232);
          swift_bridgeObjectRetain();
        }
        uint64_t v64 = v53[30];
        if (v64 == 1)
        {
          *(_OWORD *)(v52 + 240) = *((_OWORD *)v53 + 15);
          *(_OWORD *)(v52 + 249) = *(_OWORD *)((char *)v53 + 249);
        }
        else
        {
          *(void *)(v52 + 240) = v64;
          *(unsigned char *)(v52 + 248) = *((unsigned char *)v53 + 248);
          *(void *)(v52 + 256) = v53[32];
          *(unsigned char *)(v52 + 264) = *((unsigned char *)v53 + 264);
          swift_bridgeObjectRetain();
        }
        uint64_t v65 = v53[34];
        if (v65 == 1)
        {
          *(_OWORD *)(v52 + 272) = *((_OWORD *)v53 + 17);
          *(_OWORD *)(v52 + 281) = *(_OWORD *)((char *)v53 + 281);
        }
        else
        {
          *(void *)(v52 + 272) = v65;
          *(unsigned char *)(v52 + 280) = *((unsigned char *)v53 + 280);
          *(void *)(v52 + 288) = v53[36];
          *(unsigned char *)(v52 + 296) = *((unsigned char *)v53 + 296);
          swift_bridgeObjectRetain();
        }
        uint64_t v66 = v53[38];
        if (v66 == 1)
        {
          *(_OWORD *)(v52 + 304) = *((_OWORD *)v53 + 19);
          *(_OWORD *)(v52 + 313) = *(_OWORD *)((char *)v53 + 313);
        }
        else
        {
          *(void *)(v52 + 304) = v66;
          *(unsigned char *)(v52 + 312) = *((unsigned char *)v53 + 312);
          *(void *)(v52 + 320) = v53[40];
          *(unsigned char *)(v52 + 328) = *((unsigned char *)v53 + 328);
          swift_bridgeObjectRetain();
        }
        uint64_t v67 = v53[42];
        if (v67 == 1)
        {
          *(_OWORD *)(v52 + 336) = *((_OWORD *)v53 + 21);
          *(_OWORD *)(v52 + 345) = *(_OWORD *)((char *)v53 + 345);
        }
        else
        {
          *(void *)(v52 + 336) = v67;
          *(unsigned char *)(v52 + 344) = *((unsigned char *)v53 + 344);
          *(void *)(v52 + 352) = v53[44];
          *(unsigned char *)(v52 + 360) = *((unsigned char *)v53 + 360);
          swift_bridgeObjectRetain();
        }
        uint64_t v68 = v53[46];
        if (v68 == 1)
        {
          *(_OWORD *)(v52 + 368) = *((_OWORD *)v53 + 23);
          *(_OWORD *)(v52 + 377) = *(_OWORD *)((char *)v53 + 377);
        }
        else
        {
          *(void *)(v52 + 368) = v68;
          *(unsigned char *)(v52 + 376) = *((unsigned char *)v53 + 376);
          *(void *)(v52 + 384) = v53[48];
          *(unsigned char *)(v52 + 392) = *((unsigned char *)v53 + 392);
          swift_bridgeObjectRetain();
        }
        uint64_t v69 = v53[50];
        if (v69 == 1)
        {
          *(_OWORD *)(v52 + 400) = *((_OWORD *)v53 + 25);
          *(_OWORD *)(v52 + 409) = *(_OWORD *)((char *)v53 + 409);
        }
        else
        {
          *(void *)(v52 + 400) = v69;
          *(unsigned char *)(v52 + 408) = *((unsigned char *)v53 + 408);
          *(void *)(v52 + 416) = v53[52];
          *(unsigned char *)(v52 + 424) = *((unsigned char *)v53 + 424);
          swift_bridgeObjectRetain();
        }
        uint64_t v70 = v53[54];
        if (v70 == 1)
        {
          *(_OWORD *)(v52 + 432) = *((_OWORD *)v53 + 27);
          *(_OWORD *)(v52 + 441) = *(_OWORD *)((char *)v53 + 441);
        }
        else
        {
          *(void *)(v52 + 432) = v70;
          *(unsigned char *)(v52 + 440) = *((unsigned char *)v53 + 440);
          *(void *)(v52 + 448) = v53[56];
          *(unsigned char *)(v52 + 456) = *((unsigned char *)v53 + 456);
          swift_bridgeObjectRetain();
        }
        uint64_t v71 = v53[58];
        if (v71 == 1)
        {
          *(_OWORD *)(v52 + 464) = *((_OWORD *)v53 + 29);
          *(_OWORD *)(v52 + 473) = *(_OWORD *)((char *)v53 + 473);
        }
        else
        {
          *(void *)(v52 + 464) = v71;
          *(unsigned char *)(v52 + 472) = *((unsigned char *)v53 + 472);
          *(void *)(v52 + 480) = v53[60];
          *(unsigned char *)(v52 + 488) = *((unsigned char *)v53 + 488);
          swift_bridgeObjectRetain();
        }
        uint64_t v72 = v53[62];
        if (v72 == 1)
        {
          *(_OWORD *)(v52 + 496) = *((_OWORD *)v53 + 31);
          *(_OWORD *)(v52 + 505) = *(_OWORD *)((char *)v53 + 505);
        }
        else
        {
          *(void *)(v52 + 496) = v72;
          *(unsigned char *)(v52 + 504) = *((unsigned char *)v53 + 504);
          *(void *)(v52 + 512) = v53[64];
          *(unsigned char *)(v52 + 520) = *((unsigned char *)v53 + 520);
          swift_bridgeObjectRetain();
        }
        uint64_t v73 = v53[66];
        if (v73 == 1)
        {
          *(_OWORD *)(v52 + 528) = *((_OWORD *)v53 + 33);
          *(_OWORD *)(v52 + 537) = *(_OWORD *)((char *)v53 + 537);
        }
        else
        {
          *(void *)(v52 + 528) = v73;
          *(unsigned char *)(v52 + 536) = *((unsigned char *)v53 + 536);
          *(void *)(v52 + 544) = v53[68];
          *(unsigned char *)(v52 + 552) = *((unsigned char *)v53 + 552);
          swift_bridgeObjectRetain();
        }
        uint64_t v74 = v53[70];
        if (v74 == 1)
        {
          *(_OWORD *)(v52 + 560) = *((_OWORD *)v53 + 35);
          *(_OWORD *)(v52 + 569) = *(_OWORD *)((char *)v53 + 569);
        }
        else
        {
          *(void *)(v52 + 560) = v74;
          *(unsigned char *)(v52 + 568) = *((unsigned char *)v53 + 568);
          *(void *)(v52 + 576) = v53[72];
          *(unsigned char *)(v52 + 584) = *((unsigned char *)v53 + 584);
          swift_bridgeObjectRetain();
        }
        uint64_t v75 = v53[74];
        if (v75 == 1)
        {
          *(_OWORD *)(v52 + 592) = *((_OWORD *)v53 + 37);
          *(_OWORD *)(v52 + 601) = *(_OWORD *)((char *)v53 + 601);
        }
        else
        {
          *(void *)(v52 + 592) = v75;
          *(unsigned char *)(v52 + 600) = *((unsigned char *)v53 + 600);
          *(void *)(v52 + 608) = v53[76];
          *(unsigned char *)(v52 + 616) = *((unsigned char *)v53 + 616);
          swift_bridgeObjectRetain();
        }
        uint64_t v76 = v53[78];
        if (v76 == 1)
        {
          *(_OWORD *)(v52 + 624) = *((_OWORD *)v53 + 39);
          *(_OWORD *)(v52 + 633) = *(_OWORD *)((char *)v53 + 633);
        }
        else
        {
          *(void *)(v52 + 624) = v76;
          *(unsigned char *)(v52 + 632) = *((unsigned char *)v53 + 632);
          *(void *)(v52 + 640) = v53[80];
          *(unsigned char *)(v52 + 648) = *((unsigned char *)v53 + 648);
          swift_bridgeObjectRetain();
        }
        uint64_t v77 = v53[82];
        if (v77 == 1)
        {
          *(_OWORD *)(v52 + 656) = *((_OWORD *)v53 + 41);
          *(_OWORD *)(v52 + 665) = *(_OWORD *)((char *)v53 + 665);
        }
        else
        {
          *(void *)(v52 + 656) = v77;
          *(unsigned char *)(v52 + 664) = *((unsigned char *)v53 + 664);
          *(void *)(v52 + 672) = v53[84];
          *(unsigned char *)(v52 + 680) = *((unsigned char *)v53 + 680);
          swift_bridgeObjectRetain();
        }
        uint64_t v78 = v53[86];
        if (v78 == 1)
        {
          *(_OWORD *)(v52 + 688) = *((_OWORD *)v53 + 43);
          *(_OWORD *)(v52 + 697) = *(_OWORD *)((char *)v53 + 697);
        }
        else
        {
          *(void *)(v52 + 688) = v78;
          *(unsigned char *)(v52 + 696) = *((unsigned char *)v53 + 696);
          *(void *)(v52 + 704) = v53[88];
          *(unsigned char *)(v52 + 712) = *((unsigned char *)v53 + 712);
          swift_bridgeObjectRetain();
        }
        uint64_t v79 = v53[90];
        if (v79 == 1)
        {
          *(_OWORD *)(v52 + 720) = *((_OWORD *)v53 + 45);
          *(_OWORD *)(v52 + 729) = *(_OWORD *)((char *)v53 + 729);
        }
        else
        {
          *(void *)(v52 + 720) = v79;
          *(unsigned char *)(v52 + 728) = *((unsigned char *)v53 + 728);
          *(void *)(v52 + 736) = v53[92];
          *(unsigned char *)(v52 + 744) = *((unsigned char *)v53 + 744);
          swift_bridgeObjectRetain();
        }
        uint64_t v80 = v53[94];
        if (v80 == 1)
        {
          *(_OWORD *)(v52 + 752) = *((_OWORD *)v53 + 47);
          *(_OWORD *)(v52 + 761) = *(_OWORD *)((char *)v53 + 761);
        }
        else
        {
          *(void *)(v52 + 752) = v80;
          *(unsigned char *)(v52 + 760) = *((unsigned char *)v53 + 760);
          *(void *)(v52 + 768) = v53[96];
          *(unsigned char *)(v52 + 776) = *((unsigned char *)v53 + 776);
          swift_bridgeObjectRetain();
        }
        *(_OWORD *)(v52 + 784) = *((_OWORD *)v53 + 49);
        *(unsigned char *)(v52 + 800) = *((unsigned char *)v53 + 800);
        *(unsigned char *)(v52 + 824) = *((unsigned char *)v53 + 824);
        *(_OWORD *)(v52 + 808) = *(_OWORD *)(v53 + 101);
        *(_DWORD *)(v52 + 825) = *(_DWORD *)((char *)v53 + 825);
        *(_WORD *)(v52 + 829) = *(_WORD *)((char *)v53 + 829);
        *(unsigned char *)(v52 + 831) = *((unsigned char *)v53 + 831);
        *(void *)(v52 + 832) = v56;
        *(void *)(v52 + 840) = v53[105];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v81 = (_OWORD *)(v52 + 848);
      long long v82 = v53 + 106;
      uint64_t v83 = v53[208];
      if (v83 == 1)
      {
        memcpy(v81, v82, 0x340uLL);
      }
      else
      {
        if (*(void *)v82 == 1)
        {
          _OWORD *v81 = *v82;
          *(_OWORD *)(v57 + 857) = *(_OWORD *)((char *)v53 + 857);
        }
        else
        {
          *(void *)(v57 + 848) = *(void *)v82;
          *(unsigned char *)(v57 + 856) = *((unsigned char *)v53 + 856);
          *(void *)(v57 + 864) = v53[108];
          *(unsigned char *)(v57 + 872) = *((unsigned char *)v53 + 872);
          swift_bridgeObjectRetain();
        }
        uint64_t v84 = v53[110];
        if (v84 == 1)
        {
          *(_OWORD *)(v57 + 880) = *((_OWORD *)v53 + 55);
          *(_OWORD *)(v57 + 889) = *(_OWORD *)((char *)v53 + 889);
        }
        else
        {
          *(void *)(v57 + 880) = v84;
          *(unsigned char *)(v57 + 888) = *((unsigned char *)v53 + 888);
          *(void *)(v57 + 896) = v53[112];
          *(unsigned char *)(v57 + 904) = *((unsigned char *)v53 + 904);
          swift_bridgeObjectRetain();
        }
        uint64_t v85 = v53[114];
        if (v85 == 1)
        {
          *(_OWORD *)(v57 + 912) = *((_OWORD *)v53 + 57);
          *(_OWORD *)(v57 + 921) = *(_OWORD *)((char *)v53 + 921);
        }
        else
        {
          *(void *)(v57 + 912) = v85;
          *(unsigned char *)(v57 + 920) = *((unsigned char *)v53 + 920);
          *(void *)(v57 + 928) = v53[116];
          *(unsigned char *)(v57 + 936) = *((unsigned char *)v53 + 936);
          swift_bridgeObjectRetain();
        }
        uint64_t v86 = v53[118];
        if (v86 == 1)
        {
          *(_OWORD *)(v57 + 944) = *((_OWORD *)v53 + 59);
          *(_OWORD *)(v57 + 953) = *(_OWORD *)((char *)v53 + 953);
        }
        else
        {
          *(void *)(v57 + 944) = v86;
          *(unsigned char *)(v57 + 952) = *((unsigned char *)v53 + 952);
          *(void *)(v57 + 960) = v53[120];
          *(unsigned char *)(v57 + 968) = *((unsigned char *)v53 + 968);
          swift_bridgeObjectRetain();
        }
        uint64_t v87 = v53[122];
        if (v87 == 1)
        {
          *(_OWORD *)(v57 + 976) = *((_OWORD *)v53 + 61);
          *(_OWORD *)(v57 + 985) = *(_OWORD *)((char *)v53 + 985);
        }
        else
        {
          *(void *)(v57 + 976) = v87;
          *(unsigned char *)(v57 + 984) = *((unsigned char *)v53 + 984);
          *(void *)(v57 + 992) = v53[124];
          *(unsigned char *)(v57 + 1000) = *((unsigned char *)v53 + 1000);
          swift_bridgeObjectRetain();
        }
        uint64_t v88 = v53[126];
        if (v88 == 1)
        {
          *(_OWORD *)(v57 + 1008) = *((_OWORD *)v53 + 63);
          *(_OWORD *)(v57 + 1017) = *(_OWORD *)((char *)v53 + 1017);
        }
        else
        {
          *(void *)(v57 + 1008) = v88;
          *(unsigned char *)(v57 + 1016) = *((unsigned char *)v53 + 1016);
          *(void *)(v57 + 1024) = v53[128];
          *(unsigned char *)(v57 + 1032) = *((unsigned char *)v53 + 1032);
          swift_bridgeObjectRetain();
        }
        uint64_t v89 = v53[130];
        if (v89 == 1)
        {
          *(_OWORD *)(v57 + 1040) = *((_OWORD *)v53 + 65);
          *(_OWORD *)(v57 + 1049) = *(_OWORD *)((char *)v53 + 1049);
        }
        else
        {
          *(void *)(v57 + 1040) = v89;
          *(unsigned char *)(v57 + 1048) = *((unsigned char *)v53 + 1048);
          *(void *)(v57 + 1056) = v53[132];
          *(unsigned char *)(v57 + 1064) = *((unsigned char *)v53 + 1064);
          swift_bridgeObjectRetain();
        }
        uint64_t v90 = v53[134];
        if (v90 == 1)
        {
          *(_OWORD *)(v57 + 1072) = *((_OWORD *)v53 + 67);
          *(_OWORD *)(v57 + 1081) = *(_OWORD *)((char *)v53 + 1081);
        }
        else
        {
          *(void *)(v57 + 1072) = v90;
          *(unsigned char *)(v57 + 1080) = *((unsigned char *)v53 + 1080);
          *(void *)(v57 + 1088) = v53[136];
          *(unsigned char *)(v57 + 1096) = *((unsigned char *)v53 + 1096);
          swift_bridgeObjectRetain();
        }
        uint64_t v91 = v53[138];
        if (v91 == 1)
        {
          *(_OWORD *)(v57 + 1104) = *((_OWORD *)v53 + 69);
          *(_OWORD *)(v57 + 1113) = *(_OWORD *)((char *)v53 + 1113);
        }
        else
        {
          *(void *)(v57 + 1104) = v91;
          *(unsigned char *)(v57 + 1112) = *((unsigned char *)v53 + 1112);
          *(void *)(v57 + 1120) = v53[140];
          *(unsigned char *)(v57 + 1128) = *((unsigned char *)v53 + 1128);
          swift_bridgeObjectRetain();
        }
        uint64_t v92 = v53[142];
        if (v92 == 1)
        {
          *(_OWORD *)(v57 + 1136) = *((_OWORD *)v53 + 71);
          *(_OWORD *)(v57 + 1145) = *(_OWORD *)((char *)v53 + 1145);
        }
        else
        {
          *(void *)(v57 + 1136) = v92;
          *(unsigned char *)(v57 + 1144) = *((unsigned char *)v53 + 1144);
          *(void *)(v57 + 1152) = v53[144];
          *(unsigned char *)(v57 + 1160) = *((unsigned char *)v53 + 1160);
          swift_bridgeObjectRetain();
        }
        uint64_t v93 = v53[146];
        if (v93 == 1)
        {
          *(_OWORD *)(v57 + 1168) = *((_OWORD *)v53 + 73);
          *(_OWORD *)(v57 + 1177) = *(_OWORD *)((char *)v53 + 1177);
        }
        else
        {
          *(void *)(v57 + 1168) = v93;
          *(unsigned char *)(v57 + 1176) = *((unsigned char *)v53 + 1176);
          *(void *)(v57 + 1184) = v53[148];
          *(unsigned char *)(v57 + 1192) = *((unsigned char *)v53 + 1192);
          swift_bridgeObjectRetain();
        }
        uint64_t v94 = v53[150];
        if (v94 == 1)
        {
          *(_OWORD *)(v57 + 1200) = *((_OWORD *)v53 + 75);
          *(_OWORD *)(v57 + 1209) = *(_OWORD *)((char *)v53 + 1209);
        }
        else
        {
          *(void *)(v57 + 1200) = v94;
          *(unsigned char *)(v57 + 1208) = *((unsigned char *)v53 + 1208);
          *(void *)(v57 + 1216) = v53[152];
          *(unsigned char *)(v57 + 1224) = *((unsigned char *)v53 + 1224);
          swift_bridgeObjectRetain();
        }
        uint64_t v95 = v53[154];
        if (v95 == 1)
        {
          *(_OWORD *)(v57 + 1232) = *((_OWORD *)v53 + 77);
          *(_OWORD *)(v57 + 1241) = *(_OWORD *)((char *)v53 + 1241);
        }
        else
        {
          *(void *)(v57 + 1232) = v95;
          *(unsigned char *)(v57 + 1240) = *((unsigned char *)v53 + 1240);
          *(void *)(v57 + 1248) = v53[156];
          *(unsigned char *)(v57 + 1256) = *((unsigned char *)v53 + 1256);
          swift_bridgeObjectRetain();
        }
        uint64_t v96 = v53[158];
        if (v96 == 1)
        {
          *(_OWORD *)(v57 + 1264) = *((_OWORD *)v53 + 79);
          *(_OWORD *)(v57 + 1273) = *(_OWORD *)((char *)v53 + 1273);
        }
        else
        {
          *(void *)(v57 + 1264) = v96;
          *(unsigned char *)(v57 + 1272) = *((unsigned char *)v53 + 1272);
          *(void *)(v57 + 1280) = v53[160];
          *(unsigned char *)(v57 + 1288) = *((unsigned char *)v53 + 1288);
          swift_bridgeObjectRetain();
        }
        uint64_t v97 = v53[162];
        if (v97 == 1)
        {
          *(_OWORD *)(v57 + 1296) = *((_OWORD *)v53 + 81);
          *(_OWORD *)(v57 + 1305) = *(_OWORD *)((char *)v53 + 1305);
        }
        else
        {
          *(void *)(v57 + 1296) = v97;
          *(unsigned char *)(v57 + 1304) = *((unsigned char *)v53 + 1304);
          *(void *)(v57 + 1312) = v53[164];
          *(unsigned char *)(v57 + 1320) = *((unsigned char *)v53 + 1320);
          swift_bridgeObjectRetain();
        }
        uint64_t v98 = v53[166];
        if (v98 == 1)
        {
          *(_OWORD *)(v57 + 1328) = *((_OWORD *)v53 + 83);
          *(_OWORD *)(v57 + 1337) = *(_OWORD *)((char *)v53 + 1337);
        }
        else
        {
          *(void *)(v57 + 1328) = v98;
          *(unsigned char *)(v57 + 1336) = *((unsigned char *)v53 + 1336);
          *(void *)(v57 + 1344) = v53[168];
          *(unsigned char *)(v57 + 1352) = *((unsigned char *)v53 + 1352);
          swift_bridgeObjectRetain();
        }
        uint64_t v99 = v53[170];
        if (v99 == 1)
        {
          *(_OWORD *)(v57 + 1360) = *((_OWORD *)v53 + 85);
          *(_OWORD *)(v57 + 1369) = *(_OWORD *)((char *)v53 + 1369);
        }
        else
        {
          *(void *)(v57 + 1360) = v99;
          *(unsigned char *)(v57 + 1368) = *((unsigned char *)v53 + 1368);
          *(void *)(v57 + 1376) = v53[172];
          *(unsigned char *)(v57 + 1384) = *((unsigned char *)v53 + 1384);
          swift_bridgeObjectRetain();
        }
        uint64_t v100 = v53[174];
        if (v100 == 1)
        {
          *(_OWORD *)(v57 + 1392) = *((_OWORD *)v53 + 87);
          *(_OWORD *)(v57 + 1401) = *(_OWORD *)((char *)v53 + 1401);
        }
        else
        {
          *(void *)(v57 + 1392) = v100;
          *(unsigned char *)(v57 + 1400) = *((unsigned char *)v53 + 1400);
          *(void *)(v57 + 1408) = v53[176];
          *(unsigned char *)(v57 + 1416) = *((unsigned char *)v53 + 1416);
          swift_bridgeObjectRetain();
        }
        uint64_t v101 = v53[178];
        if (v101 == 1)
        {
          *(_OWORD *)(v57 + 1424) = *((_OWORD *)v53 + 89);
          *(_OWORD *)(v57 + 1433) = *(_OWORD *)((char *)v53 + 1433);
        }
        else
        {
          *(void *)(v57 + 1424) = v101;
          *(unsigned char *)(v57 + 1432) = *((unsigned char *)v53 + 1432);
          *(void *)(v57 + 1440) = v53[180];
          *(unsigned char *)(v57 + 1448) = *((unsigned char *)v53 + 1448);
          swift_bridgeObjectRetain();
        }
        uint64_t v102 = v53[182];
        if (v102 == 1)
        {
          *(_OWORD *)(v57 + 1456) = *((_OWORD *)v53 + 91);
          *(_OWORD *)(v57 + 1465) = *(_OWORD *)((char *)v53 + 1465);
        }
        else
        {
          *(void *)(v57 + 1456) = v102;
          *(unsigned char *)(v57 + 1464) = *((unsigned char *)v53 + 1464);
          *(void *)(v57 + 1472) = v53[184];
          *(unsigned char *)(v57 + 1480) = *((unsigned char *)v53 + 1480);
          swift_bridgeObjectRetain();
        }
        uint64_t v103 = v53[186];
        if (v103 == 1)
        {
          *(_OWORD *)(v57 + 1488) = *((_OWORD *)v53 + 93);
          *(_OWORD *)(v57 + 1497) = *(_OWORD *)((char *)v53 + 1497);
        }
        else
        {
          *(void *)(v57 + 1488) = v103;
          *(unsigned char *)(v57 + 1496) = *((unsigned char *)v53 + 1496);
          *(void *)(v57 + 1504) = v53[188];
          *(unsigned char *)(v57 + 1512) = *((unsigned char *)v53 + 1512);
          swift_bridgeObjectRetain();
        }
        uint64_t v104 = v53[190];
        if (v104 == 1)
        {
          *(_OWORD *)(v57 + 1520) = *((_OWORD *)v53 + 95);
          *(_OWORD *)(v57 + 1529) = *(_OWORD *)((char *)v53 + 1529);
        }
        else
        {
          *(void *)(v57 + 1520) = v104;
          *(unsigned char *)(v57 + 1528) = *((unsigned char *)v53 + 1528);
          *(void *)(v57 + 1536) = v53[192];
          *(unsigned char *)(v57 + 1544) = *((unsigned char *)v53 + 1544);
          swift_bridgeObjectRetain();
        }
        uint64_t v105 = v53[194];
        if (v105 == 1)
        {
          *(_OWORD *)(v57 + 1552) = *((_OWORD *)v53 + 97);
          *(_OWORD *)(v57 + 1561) = *(_OWORD *)((char *)v53 + 1561);
        }
        else
        {
          *(void *)(v57 + 1552) = v105;
          *(unsigned char *)(v57 + 1560) = *((unsigned char *)v53 + 1560);
          *(void *)(v57 + 1568) = v53[196];
          *(unsigned char *)(v57 + 1576) = *((unsigned char *)v53 + 1576);
          swift_bridgeObjectRetain();
        }
        uint64_t v106 = v53[198];
        if (v106 == 1)
        {
          *(_OWORD *)(v57 + 1584) = *((_OWORD *)v53 + 99);
          *(_OWORD *)(v57 + 1593) = *(_OWORD *)((char *)v53 + 1593);
        }
        else
        {
          *(void *)(v57 + 1584) = v106;
          *(unsigned char *)(v57 + 1592) = *((unsigned char *)v53 + 1592);
          *(void *)(v57 + 1600) = v53[200];
          *(unsigned char *)(v57 + 1608) = *((unsigned char *)v53 + 1608);
          swift_bridgeObjectRetain();
        }
        *(_OWORD *)(v57 + 1616) = *((_OWORD *)v53 + 101);
        *(unsigned char *)(v57 + 1632) = *((unsigned char *)v53 + 1632);
        *(unsigned char *)(v57 + 1656) = *((unsigned char *)v53 + 1656);
        *(_OWORD *)(v57 + 1640) = *(_OWORD *)(v53 + 205);
        *(_DWORD *)(v57 + 1657) = *(_DWORD *)((char *)v53 + 1657);
        *(_WORD *)(v57 + 1661) = *(_WORD *)((char *)v53 + 1661);
        *(unsigned char *)(v57 + 1663) = *((unsigned char *)v53 + 1663);
        *(void *)(v57 + 1664) = v83;
        *(void *)(v57 + 1672) = v53[209];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v107 = (_OWORD *)(v57 + 1680);
      long long v108 = v53 + 210;
      uint64_t v109 = v53[312];
      if (v109 == 1)
      {
        memcpy(v107, v108, 0x340uLL);
      }
      else
      {
        if (*(void *)v108 == 1)
        {
          *uint64_t v107 = *v108;
          *(_OWORD *)(v57 + 1689) = *(_OWORD *)((char *)v53 + 1689);
        }
        else
        {
          *(void *)(v57 + 1680) = *(void *)v108;
          *(unsigned char *)(v57 + 1688) = *((unsigned char *)v53 + 1688);
          *(void *)(v57 + 1696) = v53[212];
          *(unsigned char *)(v57 + 1704) = *((unsigned char *)v53 + 1704);
          swift_bridgeObjectRetain();
        }
        uint64_t v110 = v53[214];
        if (v110 == 1)
        {
          *(_OWORD *)(v57 + 1712) = *((_OWORD *)v53 + 107);
          *(_OWORD *)(v57 + 1721) = *(_OWORD *)((char *)v53 + 1721);
        }
        else
        {
          *(void *)(v57 + 1712) = v110;
          *(unsigned char *)(v57 + 1720) = *((unsigned char *)v53 + 1720);
          *(void *)(v57 + 1728) = v53[216];
          *(unsigned char *)(v57 + 1736) = *((unsigned char *)v53 + 1736);
          swift_bridgeObjectRetain();
        }
        uint64_t v111 = v53[218];
        if (v111 == 1)
        {
          *(_OWORD *)(v57 + 1744) = *((_OWORD *)v53 + 109);
          *(_OWORD *)(v57 + 1753) = *(_OWORD *)((char *)v53 + 1753);
        }
        else
        {
          *(void *)(v57 + 1744) = v111;
          *(unsigned char *)(v57 + 1752) = *((unsigned char *)v53 + 1752);
          *(void *)(v57 + 1760) = v53[220];
          *(unsigned char *)(v57 + 1768) = *((unsigned char *)v53 + 1768);
          swift_bridgeObjectRetain();
        }
        uint64_t v112 = v53[222];
        if (v112 == 1)
        {
          *(_OWORD *)(v57 + 1776) = *((_OWORD *)v53 + 111);
          *(_OWORD *)(v57 + 1785) = *(_OWORD *)((char *)v53 + 1785);
        }
        else
        {
          *(void *)(v57 + 1776) = v112;
          *(unsigned char *)(v57 + 1784) = *((unsigned char *)v53 + 1784);
          *(void *)(v57 + 1792) = v53[224];
          *(unsigned char *)(v57 + 1800) = *((unsigned char *)v53 + 1800);
          swift_bridgeObjectRetain();
        }
        uint64_t v113 = v53[226];
        if (v113 == 1)
        {
          *(_OWORD *)(v57 + 1808) = *((_OWORD *)v53 + 113);
          *(_OWORD *)(v57 + 1817) = *(_OWORD *)((char *)v53 + 1817);
        }
        else
        {
          *(void *)(v57 + 1808) = v113;
          *(unsigned char *)(v57 + 1816) = *((unsigned char *)v53 + 1816);
          *(void *)(v57 + 1824) = v53[228];
          *(unsigned char *)(v57 + 1832) = *((unsigned char *)v53 + 1832);
          swift_bridgeObjectRetain();
        }
        uint64_t v114 = v53[230];
        if (v114 == 1)
        {
          *(_OWORD *)(v57 + 1840) = *((_OWORD *)v53 + 115);
          *(_OWORD *)(v57 + 1849) = *(_OWORD *)((char *)v53 + 1849);
        }
        else
        {
          *(void *)(v57 + 1840) = v114;
          *(unsigned char *)(v57 + 1848) = *((unsigned char *)v53 + 1848);
          *(void *)(v57 + 1856) = v53[232];
          *(unsigned char *)(v57 + 1864) = *((unsigned char *)v53 + 1864);
          swift_bridgeObjectRetain();
        }
        uint64_t v115 = v53[234];
        if (v115 == 1)
        {
          *(_OWORD *)(v57 + 1872) = *((_OWORD *)v53 + 117);
          *(_OWORD *)(v57 + 1881) = *(_OWORD *)((char *)v53 + 1881);
        }
        else
        {
          *(void *)(v57 + 1872) = v115;
          *(unsigned char *)(v57 + 1880) = *((unsigned char *)v53 + 1880);
          *(void *)(v57 + 1888) = v53[236];
          *(unsigned char *)(v57 + 1896) = *((unsigned char *)v53 + 1896);
          swift_bridgeObjectRetain();
        }
        uint64_t v116 = v53[238];
        if (v116 == 1)
        {
          *(_OWORD *)(v57 + 1904) = *((_OWORD *)v53 + 119);
          *(_OWORD *)(v57 + 1913) = *(_OWORD *)((char *)v53 + 1913);
        }
        else
        {
          *(void *)(v57 + 1904) = v116;
          *(unsigned char *)(v57 + 1912) = *((unsigned char *)v53 + 1912);
          *(void *)(v57 + 1920) = v53[240];
          *(unsigned char *)(v57 + 1928) = *((unsigned char *)v53 + 1928);
          swift_bridgeObjectRetain();
        }
        uint64_t v117 = v53[242];
        if (v117 == 1)
        {
          *(_OWORD *)(v57 + 1936) = *((_OWORD *)v53 + 121);
          *(_OWORD *)(v57 + 1945) = *(_OWORD *)((char *)v53 + 1945);
        }
        else
        {
          *(void *)(v57 + 1936) = v117;
          *(unsigned char *)(v57 + 1944) = *((unsigned char *)v53 + 1944);
          *(void *)(v57 + 1952) = v53[244];
          *(unsigned char *)(v57 + 1960) = *((unsigned char *)v53 + 1960);
          swift_bridgeObjectRetain();
        }
        uint64_t v118 = v53[246];
        if (v118 == 1)
        {
          *(_OWORD *)(v57 + 1968) = *((_OWORD *)v53 + 123);
          *(_OWORD *)(v57 + 1977) = *(_OWORD *)((char *)v53 + 1977);
        }
        else
        {
          *(void *)(v57 + 1968) = v118;
          *(unsigned char *)(v57 + 1976) = *((unsigned char *)v53 + 1976);
          *(void *)(v57 + 1984) = v53[248];
          *(unsigned char *)(v57 + 1992) = *((unsigned char *)v53 + 1992);
          swift_bridgeObjectRetain();
        }
        uint64_t v119 = v53[250];
        if (v119 == 1)
        {
          *(_OWORD *)(v57 + 2000) = *((_OWORD *)v53 + 125);
          *(_OWORD *)(v57 + 2009) = *(_OWORD *)((char *)v53 + 2009);
        }
        else
        {
          *(void *)(v57 + 2000) = v119;
          *(unsigned char *)(v57 + 2008) = *((unsigned char *)v53 + 2008);
          *(void *)(v57 + 2016) = v53[252];
          *(unsigned char *)(v57 + 2024) = *((unsigned char *)v53 + 2024);
          swift_bridgeObjectRetain();
        }
        uint64_t v120 = v53[254];
        if (v120 == 1)
        {
          *(_OWORD *)(v57 + 2032) = *((_OWORD *)v53 + 127);
          *(_OWORD *)(v57 + 2041) = *(_OWORD *)((char *)v53 + 2041);
        }
        else
        {
          *(void *)(v57 + 2032) = v120;
          *(unsigned char *)(v57 + 2040) = *((unsigned char *)v53 + 2040);
          *(void *)(v57 + 2048) = v53[256];
          *(unsigned char *)(v57 + 2056) = *((unsigned char *)v53 + 2056);
          swift_bridgeObjectRetain();
        }
        uint64_t v121 = v53[258];
        if (v121 == 1)
        {
          *(_OWORD *)(v57 + 2064) = *((_OWORD *)v53 + 129);
          *(_OWORD *)(v57 + 2073) = *(_OWORD *)((char *)v53 + 2073);
        }
        else
        {
          *(void *)(v57 + 2064) = v121;
          *(unsigned char *)(v57 + 2072) = *((unsigned char *)v53 + 2072);
          *(void *)(v57 + 2080) = v53[260];
          *(unsigned char *)(v57 + 2088) = *((unsigned char *)v53 + 2088);
          swift_bridgeObjectRetain();
        }
        uint64_t v122 = v53[262];
        if (v122 == 1)
        {
          *(_OWORD *)(v57 + 2096) = *((_OWORD *)v53 + 131);
          *(_OWORD *)(v57 + 2105) = *(_OWORD *)((char *)v53 + 2105);
        }
        else
        {
          *(void *)(v57 + 2096) = v122;
          *(unsigned char *)(v57 + 2104) = *((unsigned char *)v53 + 2104);
          *(void *)(v57 + 2112) = v53[264];
          *(unsigned char *)(v57 + 2120) = *((unsigned char *)v53 + 2120);
          swift_bridgeObjectRetain();
        }
        uint64_t v123 = v53[266];
        if (v123 == 1)
        {
          *(_OWORD *)(v57 + 2128) = *((_OWORD *)v53 + 133);
          *(_OWORD *)(v57 + 2137) = *(_OWORD *)((char *)v53 + 2137);
        }
        else
        {
          *(void *)(v57 + 2128) = v123;
          *(unsigned char *)(v57 + 2136) = *((unsigned char *)v53 + 2136);
          *(void *)(v57 + 2144) = v53[268];
          *(unsigned char *)(v57 + 2152) = *((unsigned char *)v53 + 2152);
          swift_bridgeObjectRetain();
        }
        uint64_t v124 = v53[270];
        if (v124 == 1)
        {
          *(_OWORD *)(v57 + 2160) = *((_OWORD *)v53 + 135);
          *(_OWORD *)(v57 + 2169) = *(_OWORD *)((char *)v53 + 2169);
        }
        else
        {
          *(void *)(v57 + 2160) = v124;
          *(unsigned char *)(v57 + 2168) = *((unsigned char *)v53 + 2168);
          *(void *)(v57 + 2176) = v53[272];
          *(unsigned char *)(v57 + 2184) = *((unsigned char *)v53 + 2184);
          swift_bridgeObjectRetain();
        }
        uint64_t v125 = v53[274];
        if (v125 == 1)
        {
          *(_OWORD *)(v57 + 2192) = *((_OWORD *)v53 + 137);
          *(_OWORD *)(v57 + 2201) = *(_OWORD *)((char *)v53 + 2201);
        }
        else
        {
          *(void *)(v57 + 2192) = v125;
          *(unsigned char *)(v57 + 2200) = *((unsigned char *)v53 + 2200);
          *(void *)(v57 + 2208) = v53[276];
          *(unsigned char *)(v57 + 2216) = *((unsigned char *)v53 + 2216);
          swift_bridgeObjectRetain();
        }
        uint64_t v126 = v53[278];
        if (v126 == 1)
        {
          *(_OWORD *)(v57 + 2224) = *((_OWORD *)v53 + 139);
          *(_OWORD *)(v57 + 2233) = *(_OWORD *)((char *)v53 + 2233);
        }
        else
        {
          *(void *)(v57 + 2224) = v126;
          *(unsigned char *)(v57 + 2232) = *((unsigned char *)v53 + 2232);
          *(void *)(v57 + 2240) = v53[280];
          *(unsigned char *)(v57 + 2248) = *((unsigned char *)v53 + 2248);
          swift_bridgeObjectRetain();
        }
        uint64_t v127 = v53[282];
        if (v127 == 1)
        {
          *(_OWORD *)(v57 + 2256) = *((_OWORD *)v53 + 141);
          *(_OWORD *)(v57 + 2265) = *(_OWORD *)((char *)v53 + 2265);
        }
        else
        {
          *(void *)(v57 + 2256) = v127;
          *(unsigned char *)(v57 + 2264) = *((unsigned char *)v53 + 2264);
          *(void *)(v57 + 2272) = v53[284];
          *(unsigned char *)(v57 + 2280) = *((unsigned char *)v53 + 2280);
          swift_bridgeObjectRetain();
        }
        uint64_t v128 = v53[286];
        if (v128 == 1)
        {
          *(_OWORD *)(v57 + 2288) = *((_OWORD *)v53 + 143);
          *(_OWORD *)(v57 + 2297) = *(_OWORD *)((char *)v53 + 2297);
        }
        else
        {
          *(void *)(v57 + 2288) = v128;
          *(unsigned char *)(v57 + 2296) = *((unsigned char *)v53 + 2296);
          *(void *)(v57 + 2304) = v53[288];
          *(unsigned char *)(v57 + 2312) = *((unsigned char *)v53 + 2312);
          swift_bridgeObjectRetain();
        }
        uint64_t v129 = v53[290];
        if (v129 == 1)
        {
          *(_OWORD *)(v57 + 2320) = *((_OWORD *)v53 + 145);
          *(_OWORD *)(v57 + 2329) = *(_OWORD *)((char *)v53 + 2329);
        }
        else
        {
          *(void *)(v57 + 2320) = v129;
          *(unsigned char *)(v57 + 2328) = *((unsigned char *)v53 + 2328);
          *(void *)(v57 + 2336) = v53[292];
          *(unsigned char *)(v57 + 2344) = *((unsigned char *)v53 + 2344);
          swift_bridgeObjectRetain();
        }
        uint64_t v130 = v53[294];
        if (v130 == 1)
        {
          *(_OWORD *)(v57 + 2352) = *((_OWORD *)v53 + 147);
          *(_OWORD *)(v57 + 2361) = *(_OWORD *)((char *)v53 + 2361);
        }
        else
        {
          *(void *)(v57 + 2352) = v130;
          *(unsigned char *)(v57 + 2360) = *((unsigned char *)v53 + 2360);
          *(void *)(v57 + 2368) = v53[296];
          *(unsigned char *)(v57 + 2376) = *((unsigned char *)v53 + 2376);
          swift_bridgeObjectRetain();
        }
        uint64_t v131 = v53[298];
        if (v131 == 1)
        {
          *(_OWORD *)(v57 + 2384) = *((_OWORD *)v53 + 149);
          *(_OWORD *)(v57 + 2393) = *(_OWORD *)((char *)v53 + 2393);
        }
        else
        {
          *(void *)(v57 + 2384) = v131;
          *(unsigned char *)(v57 + 2392) = *((unsigned char *)v53 + 2392);
          *(void *)(v57 + 2400) = v53[300];
          *(unsigned char *)(v57 + 2408) = *((unsigned char *)v53 + 2408);
          swift_bridgeObjectRetain();
        }
        uint64_t v132 = v53[302];
        if (v132 == 1)
        {
          *(_OWORD *)(v57 + 2416) = *((_OWORD *)v53 + 151);
          *(_OWORD *)(v57 + 2425) = *(_OWORD *)((char *)v53 + 2425);
        }
        else
        {
          *(void *)(v57 + 2416) = v132;
          *(unsigned char *)(v57 + 2424) = *((unsigned char *)v53 + 2424);
          *(void *)(v57 + 2432) = v53[304];
          *(unsigned char *)(v57 + 2440) = *((unsigned char *)v53 + 2440);
          swift_bridgeObjectRetain();
        }
        *(_OWORD *)(v57 + 2448) = *((_OWORD *)v53 + 153);
        *(unsigned char *)(v57 + 2464) = *((unsigned char *)v53 + 2464);
        *(unsigned char *)(v57 + 2488) = *((unsigned char *)v53 + 2488);
        *(_OWORD *)(v57 + 2472) = *(_OWORD *)(v53 + 309);
        *(_DWORD *)(v57 + 2489) = *(_DWORD *)((char *)v53 + 2489);
        *(_WORD *)(v57 + 2493) = *(_WORD *)((char *)v53 + 2493);
        *(unsigned char *)(v57 + 2495) = *((unsigned char *)v53 + 2495);
        *(void *)(v57 + 2496) = v109;
        *(void *)(v57 + 2504) = v53[313];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      id v133 = (_OWORD *)(v57 + 2512);
      id v134 = v53 + 314;
      uint64_t v135 = v53[416];
      if (v135 == 1)
      {
        memcpy(v133, v134, 0x340uLL);
      }
      else
      {
        if (*(void *)v134 == 1)
        {
          _OWORD *v133 = *v134;
          *(_OWORD *)(v57 + 2521) = *(_OWORD *)((char *)v53 + 2521);
        }
        else
        {
          *(void *)(v57 + 2512) = *(void *)v134;
          *(unsigned char *)(v57 + 2520) = *((unsigned char *)v53 + 2520);
          *(void *)(v57 + 2528) = v53[316];
          *(unsigned char *)(v57 + 2536) = *((unsigned char *)v53 + 2536);
          swift_bridgeObjectRetain();
        }
        uint64_t v136 = v53[318];
        if (v136 == 1)
        {
          *(_OWORD *)(v57 + 2544) = *((_OWORD *)v53 + 159);
          *(_OWORD *)(v57 + 2553) = *(_OWORD *)((char *)v53 + 2553);
        }
        else
        {
          *(void *)(v57 + 2544) = v136;
          *(unsigned char *)(v57 + 2552) = *((unsigned char *)v53 + 2552);
          *(void *)(v57 + 2560) = v53[320];
          *(unsigned char *)(v57 + 2568) = *((unsigned char *)v53 + 2568);
          swift_bridgeObjectRetain();
        }
        uint64_t v137 = v53[322];
        if (v137 == 1)
        {
          *(_OWORD *)(v57 + 2576) = *((_OWORD *)v53 + 161);
          *(_OWORD *)(v57 + 2585) = *(_OWORD *)((char *)v53 + 2585);
        }
        else
        {
          *(void *)(v57 + 2576) = v137;
          *(unsigned char *)(v57 + 2584) = *((unsigned char *)v53 + 2584);
          *(void *)(v57 + 2592) = v53[324];
          *(unsigned char *)(v57 + 2600) = *((unsigned char *)v53 + 2600);
          swift_bridgeObjectRetain();
        }
        uint64_t v138 = v53[326];
        if (v138 == 1)
        {
          *(_OWORD *)(v57 + 2608) = *((_OWORD *)v53 + 163);
          *(_OWORD *)(v57 + 2617) = *(_OWORD *)((char *)v53 + 2617);
        }
        else
        {
          *(void *)(v57 + 2608) = v138;
          *(unsigned char *)(v57 + 2616) = *((unsigned char *)v53 + 2616);
          *(void *)(v57 + 2624) = v53[328];
          *(unsigned char *)(v57 + 2632) = *((unsigned char *)v53 + 2632);
          swift_bridgeObjectRetain();
        }
        uint64_t v139 = v53[330];
        if (v139 == 1)
        {
          *(_OWORD *)(v57 + 2640) = *((_OWORD *)v53 + 165);
          *(_OWORD *)(v57 + 2649) = *(_OWORD *)((char *)v53 + 2649);
        }
        else
        {
          *(void *)(v57 + 2640) = v139;
          *(unsigned char *)(v57 + 2648) = *((unsigned char *)v53 + 2648);
          *(void *)(v57 + 2656) = v53[332];
          *(unsigned char *)(v57 + 2664) = *((unsigned char *)v53 + 2664);
          swift_bridgeObjectRetain();
        }
        uint64_t v140 = v53[334];
        if (v140 == 1)
        {
          *(_OWORD *)(v57 + 2672) = *((_OWORD *)v53 + 167);
          *(_OWORD *)(v57 + 2681) = *(_OWORD *)((char *)v53 + 2681);
        }
        else
        {
          *(void *)(v57 + 2672) = v140;
          *(unsigned char *)(v57 + 2680) = *((unsigned char *)v53 + 2680);
          *(void *)(v57 + 2688) = v53[336];
          *(unsigned char *)(v57 + 2696) = *((unsigned char *)v53 + 2696);
          swift_bridgeObjectRetain();
        }
        uint64_t v141 = v53[338];
        if (v141 == 1)
        {
          *(_OWORD *)(v57 + 2704) = *((_OWORD *)v53 + 169);
          *(_OWORD *)(v57 + 2713) = *(_OWORD *)((char *)v53 + 2713);
        }
        else
        {
          *(void *)(v57 + 2704) = v141;
          *(unsigned char *)(v57 + 2712) = *((unsigned char *)v53 + 2712);
          *(void *)(v57 + 2720) = v53[340];
          *(unsigned char *)(v57 + 2728) = *((unsigned char *)v53 + 2728);
          swift_bridgeObjectRetain();
        }
        uint64_t v142 = v53[342];
        if (v142 == 1)
        {
          *(_OWORD *)(v57 + 2736) = *((_OWORD *)v53 + 171);
          *(_OWORD *)(v57 + 2745) = *(_OWORD *)((char *)v53 + 2745);
        }
        else
        {
          *(void *)(v57 + 2736) = v142;
          *(unsigned char *)(v57 + 2744) = *((unsigned char *)v53 + 2744);
          *(void *)(v57 + 2752) = v53[344];
          *(unsigned char *)(v57 + 2760) = *((unsigned char *)v53 + 2760);
          swift_bridgeObjectRetain();
        }
        uint64_t v143 = v53[346];
        if (v143 == 1)
        {
          *(_OWORD *)(v57 + 2768) = *((_OWORD *)v53 + 173);
          *(_OWORD *)(v57 + 2777) = *(_OWORD *)((char *)v53 + 2777);
        }
        else
        {
          *(void *)(v57 + 2768) = v143;
          *(unsigned char *)(v57 + 2776) = *((unsigned char *)v53 + 2776);
          *(void *)(v57 + 2784) = v53[348];
          *(unsigned char *)(v57 + 2792) = *((unsigned char *)v53 + 2792);
          swift_bridgeObjectRetain();
        }
        uint64_t v144 = v53[350];
        if (v144 == 1)
        {
          *(_OWORD *)(v57 + 2800) = *((_OWORD *)v53 + 175);
          *(_OWORD *)(v57 + 2809) = *(_OWORD *)((char *)v53 + 2809);
        }
        else
        {
          *(void *)(v57 + 2800) = v144;
          *(unsigned char *)(v57 + 2808) = *((unsigned char *)v53 + 2808);
          *(void *)(v57 + 2816) = v53[352];
          *(unsigned char *)(v57 + 2824) = *((unsigned char *)v53 + 2824);
          swift_bridgeObjectRetain();
        }
        uint64_t v145 = v53[354];
        if (v145 == 1)
        {
          *(_OWORD *)(v57 + 2832) = *((_OWORD *)v53 + 177);
          *(_OWORD *)(v57 + 2841) = *(_OWORD *)((char *)v53 + 2841);
        }
        else
        {
          *(void *)(v57 + 2832) = v145;
          *(unsigned char *)(v57 + 2840) = *((unsigned char *)v53 + 2840);
          *(void *)(v57 + 2848) = v53[356];
          *(unsigned char *)(v57 + 2856) = *((unsigned char *)v53 + 2856);
          swift_bridgeObjectRetain();
        }
        uint64_t v146 = v53[358];
        if (v146 == 1)
        {
          *(_OWORD *)(v57 + 2864) = *((_OWORD *)v53 + 179);
          *(_OWORD *)(v57 + 2873) = *(_OWORD *)((char *)v53 + 2873);
        }
        else
        {
          *(void *)(v57 + 2864) = v146;
          *(unsigned char *)(v57 + 2872) = *((unsigned char *)v53 + 2872);
          *(void *)(v57 + 2880) = v53[360];
          *(unsigned char *)(v57 + 2888) = *((unsigned char *)v53 + 2888);
          swift_bridgeObjectRetain();
        }
        uint64_t v147 = v53[362];
        if (v147 == 1)
        {
          *(_OWORD *)(v57 + 2896) = *((_OWORD *)v53 + 181);
          *(_OWORD *)(v57 + 2905) = *(_OWORD *)((char *)v53 + 2905);
        }
        else
        {
          *(void *)(v57 + 2896) = v147;
          *(unsigned char *)(v57 + 2904) = *((unsigned char *)v53 + 2904);
          *(void *)(v57 + 2912) = v53[364];
          *(unsigned char *)(v57 + 2920) = *((unsigned char *)v53 + 2920);
          swift_bridgeObjectRetain();
        }
        uint64_t v148 = v53[366];
        if (v148 == 1)
        {
          *(_OWORD *)(v57 + 2928) = *((_OWORD *)v53 + 183);
          *(_OWORD *)(v57 + 2937) = *(_OWORD *)((char *)v53 + 2937);
        }
        else
        {
          *(void *)(v57 + 2928) = v148;
          *(unsigned char *)(v57 + 2936) = *((unsigned char *)v53 + 2936);
          *(void *)(v57 + 2944) = v53[368];
          *(unsigned char *)(v57 + 2952) = *((unsigned char *)v53 + 2952);
          swift_bridgeObjectRetain();
        }
        uint64_t v149 = v53[370];
        if (v149 == 1)
        {
          *(_OWORD *)(v57 + 2960) = *((_OWORD *)v53 + 185);
          *(_OWORD *)(v57 + 2969) = *(_OWORD *)((char *)v53 + 2969);
        }
        else
        {
          *(void *)(v57 + 2960) = v149;
          *(unsigned char *)(v57 + 2968) = *((unsigned char *)v53 + 2968);
          *(void *)(v57 + 2976) = v53[372];
          *(unsigned char *)(v57 + 2984) = *((unsigned char *)v53 + 2984);
          swift_bridgeObjectRetain();
        }
        uint64_t v150 = v53[374];
        if (v150 == 1)
        {
          *(_OWORD *)(v57 + 2992) = *((_OWORD *)v53 + 187);
          *(_OWORD *)(v57 + 3001) = *(_OWORD *)((char *)v53 + 3001);
        }
        else
        {
          *(void *)(v57 + 2992) = v150;
          *(unsigned char *)(v57 + 3000) = *((unsigned char *)v53 + 3000);
          *(void *)(v57 + 3008) = v53[376];
          *(unsigned char *)(v57 + 3016) = *((unsigned char *)v53 + 3016);
          swift_bridgeObjectRetain();
        }
        uint64_t v151 = v53[378];
        if (v151 == 1)
        {
          *(_OWORD *)(v57 + 3024) = *((_OWORD *)v53 + 189);
          *(_OWORD *)(v57 + 3033) = *(_OWORD *)((char *)v53 + 3033);
        }
        else
        {
          *(void *)(v57 + 3024) = v151;
          *(unsigned char *)(v57 + 3032) = *((unsigned char *)v53 + 3032);
          *(void *)(v57 + 3040) = v53[380];
          *(unsigned char *)(v57 + 3048) = *((unsigned char *)v53 + 3048);
          swift_bridgeObjectRetain();
        }
        uint64_t v152 = v53[382];
        if (v152 == 1)
        {
          *(_OWORD *)(v57 + 3056) = *((_OWORD *)v53 + 191);
          *(_OWORD *)(v57 + 3065) = *(_OWORD *)((char *)v53 + 3065);
        }
        else
        {
          *(void *)(v57 + 3056) = v152;
          *(unsigned char *)(v57 + 3064) = *((unsigned char *)v53 + 3064);
          *(void *)(v57 + 3072) = v53[384];
          *(unsigned char *)(v57 + 3080) = *((unsigned char *)v53 + 3080);
          swift_bridgeObjectRetain();
        }
        uint64_t v153 = v53[386];
        if (v153 == 1)
        {
          *(_OWORD *)(v57 + 3088) = *((_OWORD *)v53 + 193);
          *(_OWORD *)(v57 + 3097) = *(_OWORD *)((char *)v53 + 3097);
        }
        else
        {
          *(void *)(v57 + 3088) = v153;
          *(unsigned char *)(v57 + 3096) = *((unsigned char *)v53 + 3096);
          *(void *)(v57 + 3104) = v53[388];
          *(unsigned char *)(v57 + 3112) = *((unsigned char *)v53 + 3112);
          swift_bridgeObjectRetain();
        }
        uint64_t v154 = v53[390];
        if (v154 == 1)
        {
          *(_OWORD *)(v57 + 3120) = *((_OWORD *)v53 + 195);
          *(_OWORD *)(v57 + 3129) = *(_OWORD *)((char *)v53 + 3129);
        }
        else
        {
          *(void *)(v57 + 3120) = v154;
          *(unsigned char *)(v57 + 3128) = *((unsigned char *)v53 + 3128);
          *(void *)(v57 + 3136) = v53[392];
          *(unsigned char *)(v57 + 3144) = *((unsigned char *)v53 + 3144);
          swift_bridgeObjectRetain();
        }
        uint64_t v155 = v53[394];
        if (v155 == 1)
        {
          *(_OWORD *)(v57 + 3152) = *((_OWORD *)v53 + 197);
          *(_OWORD *)(v57 + 3161) = *(_OWORD *)((char *)v53 + 3161);
        }
        else
        {
          *(void *)(v57 + 3152) = v155;
          *(unsigned char *)(v57 + 3160) = *((unsigned char *)v53 + 3160);
          *(void *)(v57 + 3168) = v53[396];
          *(unsigned char *)(v57 + 3176) = *((unsigned char *)v53 + 3176);
          swift_bridgeObjectRetain();
        }
        uint64_t v156 = v53[398];
        if (v156 == 1)
        {
          *(_OWORD *)(v57 + 3184) = *((_OWORD *)v53 + 199);
          *(_OWORD *)(v57 + 3193) = *(_OWORD *)((char *)v53 + 3193);
        }
        else
        {
          *(void *)(v57 + 3184) = v156;
          *(unsigned char *)(v57 + 3192) = *((unsigned char *)v53 + 3192);
          *(void *)(v57 + 3200) = v53[400];
          *(unsigned char *)(v57 + 3208) = *((unsigned char *)v53 + 3208);
          swift_bridgeObjectRetain();
        }
        uint64_t v157 = v53[402];
        if (v157 == 1)
        {
          *(_OWORD *)(v57 + 3216) = *((_OWORD *)v53 + 201);
          *(_OWORD *)(v57 + 3225) = *(_OWORD *)((char *)v53 + 3225);
        }
        else
        {
          *(void *)(v57 + 3216) = v157;
          *(unsigned char *)(v57 + 3224) = *((unsigned char *)v53 + 3224);
          *(void *)(v57 + 3232) = v53[404];
          *(unsigned char *)(v57 + 3240) = *((unsigned char *)v53 + 3240);
          swift_bridgeObjectRetain();
        }
        uint64_t v158 = v53[406];
        if (v158 == 1)
        {
          *(_OWORD *)(v57 + 3248) = *((_OWORD *)v53 + 203);
          *(_OWORD *)(v57 + 3257) = *(_OWORD *)((char *)v53 + 3257);
        }
        else
        {
          *(void *)(v57 + 3248) = v158;
          *(unsigned char *)(v57 + 3256) = *((unsigned char *)v53 + 3256);
          *(void *)(v57 + 3264) = v53[408];
          *(unsigned char *)(v57 + 3272) = *((unsigned char *)v53 + 3272);
          swift_bridgeObjectRetain();
        }
        *(_OWORD *)(v57 + 3280) = *((_OWORD *)v53 + 205);
        *(unsigned char *)(v57 + 3296) = *((unsigned char *)v53 + 3296);
        *(unsigned char *)(v57 + 3320) = *((unsigned char *)v53 + 3320);
        *(_OWORD *)(v57 + 3304) = *(_OWORD *)(v53 + 413);
        *(_DWORD *)(v57 + 3321) = *(_DWORD *)((char *)v53 + 3321);
        *(_WORD *)(v57 + 3325) = *(_WORD *)((char *)v53 + 3325);
        *(unsigned char *)(v57 + 3327) = *((unsigned char *)v53 + 3327);
        *(void *)(v57 + 3328) = v135;
        *(void *)(v57 + 3336) = v53[417];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      int v159 = (_OWORD *)(v57 + 3344);
      uint64_t v160 = v53 + 418;
      uint64_t v161 = v53[520];
      if (v161 == 1)
      {
        memcpy(v159, v160, 0x340uLL);
      }
      else
      {
        if (*(void *)v160 == 1)
        {
          *int v159 = *v160;
          *(_OWORD *)(v57 + 3353) = *(_OWORD *)((char *)v53 + 3353);
        }
        else
        {
          *(void *)(v57 + 3344) = *(void *)v160;
          *(unsigned char *)(v57 + 3352) = *((unsigned char *)v53 + 3352);
          *(void *)(v57 + 3360) = v53[420];
          *(unsigned char *)(v57 + 3368) = *((unsigned char *)v53 + 3368);
          swift_bridgeObjectRetain();
        }
        uint64_t v162 = v53[422];
        if (v162 == 1)
        {
          *(_OWORD *)(v57 + 3376) = *((_OWORD *)v53 + 211);
          *(_OWORD *)(v57 + 3385) = *(_OWORD *)((char *)v53 + 3385);
        }
        else
        {
          *(void *)(v57 + 3376) = v162;
          *(unsigned char *)(v57 + 3384) = *((unsigned char *)v53 + 3384);
          *(void *)(v57 + 3392) = v53[424];
          *(unsigned char *)(v57 + 3400) = *((unsigned char *)v53 + 3400);
          swift_bridgeObjectRetain();
        }
        uint64_t v163 = v53[426];
        if (v163 == 1)
        {
          *(_OWORD *)(v57 + 3408) = *((_OWORD *)v53 + 213);
          *(_OWORD *)(v57 + 3417) = *(_OWORD *)((char *)v53 + 3417);
        }
        else
        {
          *(void *)(v57 + 3408) = v163;
          *(unsigned char *)(v57 + 3416) = *((unsigned char *)v53 + 3416);
          *(void *)(v57 + 3424) = v53[428];
          *(unsigned char *)(v57 + 3432) = *((unsigned char *)v53 + 3432);
          swift_bridgeObjectRetain();
        }
        uint64_t v164 = v53[430];
        if (v164 == 1)
        {
          *(_OWORD *)(v57 + 3440) = *((_OWORD *)v53 + 215);
          *(_OWORD *)(v57 + 3449) = *(_OWORD *)((char *)v53 + 3449);
        }
        else
        {
          *(void *)(v57 + 3440) = v164;
          *(unsigned char *)(v57 + 3448) = *((unsigned char *)v53 + 3448);
          *(void *)(v57 + 3456) = v53[432];
          *(unsigned char *)(v57 + 3464) = *((unsigned char *)v53 + 3464);
          swift_bridgeObjectRetain();
        }
        uint64_t v165 = v53[434];
        if (v165 == 1)
        {
          *(_OWORD *)(v57 + 3472) = *((_OWORD *)v53 + 217);
          *(_OWORD *)(v57 + 3481) = *(_OWORD *)((char *)v53 + 3481);
        }
        else
        {
          *(void *)(v57 + 3472) = v165;
          *(unsigned char *)(v57 + 3480) = *((unsigned char *)v53 + 3480);
          *(void *)(v57 + 3488) = v53[436];
          *(unsigned char *)(v57 + 3496) = *((unsigned char *)v53 + 3496);
          swift_bridgeObjectRetain();
        }
        uint64_t v166 = v53[438];
        if (v166 == 1)
        {
          *(_OWORD *)(v57 + 3504) = *((_OWORD *)v53 + 219);
          *(_OWORD *)(v57 + 3513) = *(_OWORD *)((char *)v53 + 3513);
        }
        else
        {
          *(void *)(v57 + 3504) = v166;
          *(unsigned char *)(v57 + 3512) = *((unsigned char *)v53 + 3512);
          *(void *)(v57 + 3520) = v53[440];
          *(unsigned char *)(v57 + 3528) = *((unsigned char *)v53 + 3528);
          swift_bridgeObjectRetain();
        }
        uint64_t v167 = v53[442];
        if (v167 == 1)
        {
          *(_OWORD *)(v57 + 3536) = *((_OWORD *)v53 + 221);
          *(_OWORD *)(v57 + 3545) = *(_OWORD *)((char *)v53 + 3545);
        }
        else
        {
          *(void *)(v57 + 3536) = v167;
          *(unsigned char *)(v57 + 3544) = *((unsigned char *)v53 + 3544);
          *(void *)(v57 + 3552) = v53[444];
          *(unsigned char *)(v57 + 3560) = *((unsigned char *)v53 + 3560);
          swift_bridgeObjectRetain();
        }
        uint64_t v168 = v53[446];
        if (v168 == 1)
        {
          *(_OWORD *)(v57 + 3568) = *((_OWORD *)v53 + 223);
          *(_OWORD *)(v57 + 3577) = *(_OWORD *)((char *)v53 + 3577);
        }
        else
        {
          *(void *)(v57 + 3568) = v168;
          *(unsigned char *)(v57 + 3576) = *((unsigned char *)v53 + 3576);
          *(void *)(v57 + 3584) = v53[448];
          *(unsigned char *)(v57 + 3592) = *((unsigned char *)v53 + 3592);
          swift_bridgeObjectRetain();
        }
        uint64_t v169 = v53[450];
        if (v169 == 1)
        {
          *(_OWORD *)(v57 + 3600) = *((_OWORD *)v53 + 225);
          *(_OWORD *)(v57 + 3609) = *(_OWORD *)((char *)v53 + 3609);
        }
        else
        {
          *(void *)(v57 + 3600) = v169;
          *(unsigned char *)(v57 + 3608) = *((unsigned char *)v53 + 3608);
          *(void *)(v57 + 3616) = v53[452];
          *(unsigned char *)(v57 + 3624) = *((unsigned char *)v53 + 3624);
          swift_bridgeObjectRetain();
        }
        uint64_t v170 = v53[454];
        if (v170 == 1)
        {
          *(_OWORD *)(v57 + 3632) = *((_OWORD *)v53 + 227);
          *(_OWORD *)(v57 + 3641) = *(_OWORD *)((char *)v53 + 3641);
        }
        else
        {
          *(void *)(v57 + 3632) = v170;
          *(unsigned char *)(v57 + 3640) = *((unsigned char *)v53 + 3640);
          *(void *)(v57 + 3648) = v53[456];
          *(unsigned char *)(v57 + 3656) = *((unsigned char *)v53 + 3656);
          swift_bridgeObjectRetain();
        }
        uint64_t v171 = v53[458];
        if (v171 == 1)
        {
          *(_OWORD *)(v57 + 3664) = *((_OWORD *)v53 + 229);
          *(_OWORD *)(v57 + 3673) = *(_OWORD *)((char *)v53 + 3673);
        }
        else
        {
          *(void *)(v57 + 3664) = v171;
          *(unsigned char *)(v57 + 3672) = *((unsigned char *)v53 + 3672);
          *(void *)(v57 + 3680) = v53[460];
          *(unsigned char *)(v57 + 3688) = *((unsigned char *)v53 + 3688);
          swift_bridgeObjectRetain();
        }
        uint64_t v172 = v53[462];
        if (v172 == 1)
        {
          *(_OWORD *)(v57 + 3696) = *((_OWORD *)v53 + 231);
          *(_OWORD *)(v57 + 3705) = *(_OWORD *)((char *)v53 + 3705);
        }
        else
        {
          *(void *)(v57 + 3696) = v172;
          *(unsigned char *)(v57 + 3704) = *((unsigned char *)v53 + 3704);
          *(void *)(v57 + 3712) = v53[464];
          *(unsigned char *)(v57 + 3720) = *((unsigned char *)v53 + 3720);
          swift_bridgeObjectRetain();
        }
        uint64_t v173 = v53[466];
        if (v173 == 1)
        {
          *(_OWORD *)(v57 + 3728) = *((_OWORD *)v53 + 233);
          *(_OWORD *)(v57 + 3737) = *(_OWORD *)((char *)v53 + 3737);
        }
        else
        {
          *(void *)(v57 + 3728) = v173;
          *(unsigned char *)(v57 + 3736) = *((unsigned char *)v53 + 3736);
          *(void *)(v57 + 3744) = v53[468];
          *(unsigned char *)(v57 + 3752) = *((unsigned char *)v53 + 3752);
          swift_bridgeObjectRetain();
        }
        uint64_t v174 = v53[470];
        if (v174 == 1)
        {
          *(_OWORD *)(v57 + 3760) = *((_OWORD *)v53 + 235);
          *(_OWORD *)(v57 + 3769) = *(_OWORD *)((char *)v53 + 3769);
        }
        else
        {
          *(void *)(v57 + 3760) = v174;
          *(unsigned char *)(v57 + 3768) = *((unsigned char *)v53 + 3768);
          *(void *)(v57 + 3776) = v53[472];
          *(unsigned char *)(v57 + 3784) = *((unsigned char *)v53 + 3784);
          swift_bridgeObjectRetain();
        }
        uint64_t v175 = v53[474];
        if (v175 == 1)
        {
          *(_OWORD *)(v57 + 3792) = *((_OWORD *)v53 + 237);
          *(_OWORD *)(v57 + 3801) = *(_OWORD *)((char *)v53 + 3801);
        }
        else
        {
          *(void *)(v57 + 3792) = v175;
          *(unsigned char *)(v57 + 3800) = *((unsigned char *)v53 + 3800);
          *(void *)(v57 + 3808) = v53[476];
          *(unsigned char *)(v57 + 3816) = *((unsigned char *)v53 + 3816);
          swift_bridgeObjectRetain();
        }
        uint64_t v176 = v53[478];
        if (v176 == 1)
        {
          *(_OWORD *)(v57 + 3824) = *((_OWORD *)v53 + 239);
          *(_OWORD *)(v57 + 3833) = *(_OWORD *)((char *)v53 + 3833);
        }
        else
        {
          *(void *)(v57 + 3824) = v176;
          *(unsigned char *)(v57 + 3832) = *((unsigned char *)v53 + 3832);
          *(void *)(v57 + 3840) = v53[480];
          *(unsigned char *)(v57 + 3848) = *((unsigned char *)v53 + 3848);
          swift_bridgeObjectRetain();
        }
        uint64_t v177 = v53[482];
        if (v177 == 1)
        {
          *(_OWORD *)(v57 + 3856) = *((_OWORD *)v53 + 241);
          *(_OWORD *)(v57 + 3865) = *(_OWORD *)((char *)v53 + 3865);
        }
        else
        {
          *(void *)(v57 + 3856) = v177;
          *(unsigned char *)(v57 + 3864) = *((unsigned char *)v53 + 3864);
          *(void *)(v57 + 3872) = v53[484];
          *(unsigned char *)(v57 + 3880) = *((unsigned char *)v53 + 3880);
          swift_bridgeObjectRetain();
        }
        uint64_t v178 = v53[486];
        if (v178 == 1)
        {
          *(_OWORD *)(v57 + 3888) = *((_OWORD *)v53 + 243);
          *(_OWORD *)(v57 + 3897) = *(_OWORD *)((char *)v53 + 3897);
        }
        else
        {
          *(void *)(v57 + 3888) = v178;
          *(unsigned char *)(v57 + 3896) = *((unsigned char *)v53 + 3896);
          *(void *)(v57 + 3904) = v53[488];
          *(unsigned char *)(v57 + 3912) = *((unsigned char *)v53 + 3912);
          swift_bridgeObjectRetain();
        }
        uint64_t v179 = v53[490];
        if (v179 == 1)
        {
          *(_OWORD *)(v57 + 3920) = *((_OWORD *)v53 + 245);
          *(_OWORD *)(v57 + 3929) = *(_OWORD *)((char *)v53 + 3929);
        }
        else
        {
          *(void *)(v57 + 3920) = v179;
          *(unsigned char *)(v57 + 3928) = *((unsigned char *)v53 + 3928);
          *(void *)(v57 + 3936) = v53[492];
          *(unsigned char *)(v57 + 3944) = *((unsigned char *)v53 + 3944);
          swift_bridgeObjectRetain();
        }
        uint64_t v180 = v53[494];
        if (v180 == 1)
        {
          *(_OWORD *)(v57 + 3952) = *((_OWORD *)v53 + 247);
          *(_OWORD *)(v57 + 3961) = *(_OWORD *)((char *)v53 + 3961);
        }
        else
        {
          *(void *)(v57 + 3952) = v180;
          *(unsigned char *)(v57 + 3960) = *((unsigned char *)v53 + 3960);
          *(void *)(v57 + 3968) = v53[496];
          *(unsigned char *)(v57 + 3976) = *((unsigned char *)v53 + 3976);
          swift_bridgeObjectRetain();
        }
        uint64_t v181 = v53[498];
        if (v181 == 1)
        {
          *(_OWORD *)(v57 + 3984) = *((_OWORD *)v53 + 249);
          *(_OWORD *)(v57 + 3993) = *(_OWORD *)((char *)v53 + 3993);
        }
        else
        {
          *(void *)(v57 + 3984) = v181;
          *(unsigned char *)(v57 + 3992) = *((unsigned char *)v53 + 3992);
          *(void *)(v57 + 4000) = v53[500];
          *(unsigned char *)(v57 + 4008) = *((unsigned char *)v53 + 4008);
          swift_bridgeObjectRetain();
        }
        uint64_t v182 = v53[502];
        if (v182 == 1)
        {
          *(_OWORD *)(v57 + 4016) = *((_OWORD *)v53 + 251);
          *(_OWORD *)(v57 + 4025) = *(_OWORD *)((char *)v53 + 4025);
        }
        else
        {
          *(void *)(v57 + 4016) = v182;
          *(unsigned char *)(v57 + 4024) = *((unsigned char *)v53 + 4024);
          *(void *)(v57 + 4032) = v53[504];
          *(unsigned char *)(v57 + 4040) = *((unsigned char *)v53 + 4040);
          swift_bridgeObjectRetain();
        }
        uint64_t v183 = v53[506];
        if (v183 == 1)
        {
          *(_OWORD *)(v57 + 4048) = *((_OWORD *)v53 + 253);
          *(_OWORD *)(v57 + 4057) = *(_OWORD *)((char *)v53 + 4057);
        }
        else
        {
          *(void *)(v57 + 4048) = v183;
          *(unsigned char *)(v57 + 4056) = *((unsigned char *)v53 + 4056);
          *(void *)(v57 + 4064) = v53[508];
          *(unsigned char *)(v57 + 4072) = *((unsigned char *)v53 + 4072);
          swift_bridgeObjectRetain();
        }
        uint64_t v184 = v53[510];
        if (v184 == 1)
        {
          *(_OWORD *)(v57 + 4080) = *((_OWORD *)v53 + 255);
          *(_OWORD *)(v57 + 4089) = *(_OWORD *)((char *)v53 + 4089);
        }
        else
        {
          *(void *)(v57 + 4080) = v184;
          *(unsigned char *)(v57 + 4088) = *((unsigned char *)v53 + 4088);
          *(unsigned char *)(v57 + 4104) = *((unsigned char *)v53 + 4104);
          *(void *)(v57 + 4096) = v53[512];
          swift_bridgeObjectRetain();
        }
        *(_OWORD *)(v57 + 4112) = *((_OWORD *)v53 + 257);
        *(unsigned char *)(v57 + 4128) = *((unsigned char *)v53 + 4128);
        *(_OWORD *)(v57 + 4136) = *(_OWORD *)(v53 + 517);
        *(unsigned char *)(v57 + 4152) = *((unsigned char *)v53 + 4152);
        *(_DWORD *)(v57 + 4153) = *(_DWORD *)((char *)v53 + 4153);
        *(_WORD *)(v57 + 4157) = *(_WORD *)((char *)v53 + 4157);
        *(unsigned char *)(v57 + 4159) = *((unsigned char *)v53 + 4159);
        *(void *)(v57 + 4160) = v161;
        *(void *)(v57 + 4168) = v53[521];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      os_log_type_t v185 = (_OWORD *)(v57 + 4176);
      os_log_type_t v186 = v53 + 522;
      uint64_t v187 = v53[624];
      if (v187 == 1)
      {
        memcpy(v185, v186, 0x340uLL);
      }
      else
      {
        if (*(void *)v186 == 1)
        {
          *os_log_type_t v185 = *v186;
          *(_OWORD *)(v57 + 4185) = *(_OWORD *)((char *)v53 + 4185);
        }
        else
        {
          *(void *)(v57 + 4176) = *(void *)v186;
          *(unsigned char *)(v57 + 4184) = *((unsigned char *)v53 + 4184);
          *(void *)(v57 + 4192) = v53[524];
          *(unsigned char *)(v57 + 4200) = *((unsigned char *)v53 + 4200);
          swift_bridgeObjectRetain();
        }
        uint64_t v188 = v53[526];
        if (v188 == 1)
        {
          *(_OWORD *)(v57 + 4208) = *((_OWORD *)v53 + 263);
          *(_OWORD *)(v57 + 4217) = *(_OWORD *)((char *)v53 + 4217);
        }
        else
        {
          *(void *)(v57 + 4208) = v188;
          *(unsigned char *)(v57 + 4216) = *((unsigned char *)v53 + 4216);
          *(void *)(v57 + 4224) = v53[528];
          *(unsigned char *)(v57 + 4232) = *((unsigned char *)v53 + 4232);
          swift_bridgeObjectRetain();
        }
        uint64_t v189 = v53[530];
        if (v189 == 1)
        {
          *(_OWORD *)(v57 + 4240) = *((_OWORD *)v53 + 265);
          *(_OWORD *)(v57 + 4249) = *(_OWORD *)((char *)v53 + 4249);
        }
        else
        {
          *(void *)(v57 + 4240) = v189;
          *(unsigned char *)(v57 + 4248) = *((unsigned char *)v53 + 4248);
          *(void *)(v57 + 4256) = v53[532];
          *(unsigned char *)(v57 + 4264) = *((unsigned char *)v53 + 4264);
          swift_bridgeObjectRetain();
        }
        uint64_t v190 = v53[534];
        if (v190 == 1)
        {
          *(_OWORD *)(v57 + 4272) = *((_OWORD *)v53 + 267);
          *(_OWORD *)(v57 + 4281) = *(_OWORD *)((char *)v53 + 4281);
        }
        else
        {
          *(void *)(v57 + 4272) = v190;
          *(unsigned char *)(v57 + 4280) = *((unsigned char *)v53 + 4280);
          *(void *)(v57 + 4288) = v53[536];
          *(unsigned char *)(v57 + 4296) = *((unsigned char *)v53 + 4296);
          swift_bridgeObjectRetain();
        }
        uint64_t v191 = v53[538];
        if (v191 == 1)
        {
          *(_OWORD *)(v57 + 4304) = *((_OWORD *)v53 + 269);
          *(_OWORD *)(v57 + 4313) = *(_OWORD *)((char *)v53 + 4313);
        }
        else
        {
          *(void *)(v57 + 4304) = v191;
          *(unsigned char *)(v57 + 4312) = *((unsigned char *)v53 + 4312);
          *(void *)(v57 + 4320) = v53[540];
          *(unsigned char *)(v57 + 4328) = *((unsigned char *)v53 + 4328);
          swift_bridgeObjectRetain();
        }
        uint64_t v192 = v53[542];
        if (v192 == 1)
        {
          *(_OWORD *)(v57 + 4336) = *((_OWORD *)v53 + 271);
          *(_OWORD *)(v57 + 4345) = *(_OWORD *)((char *)v53 + 4345);
        }
        else
        {
          *(void *)(v57 + 4336) = v192;
          *(unsigned char *)(v57 + 4344) = *((unsigned char *)v53 + 4344);
          *(void *)(v57 + 4352) = v53[544];
          *(unsigned char *)(v57 + 4360) = *((unsigned char *)v53 + 4360);
          swift_bridgeObjectRetain();
        }
        uint64_t v193 = v53[546];
        if (v193 == 1)
        {
          *(_OWORD *)(v57 + 4368) = *((_OWORD *)v53 + 273);
          *(_OWORD *)(v57 + 4377) = *(_OWORD *)((char *)v53 + 4377);
        }
        else
        {
          *(void *)(v57 + 4368) = v193;
          *(unsigned char *)(v57 + 4376) = *((unsigned char *)v53 + 4376);
          *(void *)(v57 + 4384) = v53[548];
          *(unsigned char *)(v57 + 4392) = *((unsigned char *)v53 + 4392);
          swift_bridgeObjectRetain();
        }
        uint64_t v194 = v53[550];
        if (v194 == 1)
        {
          *(_OWORD *)(v57 + 4400) = *((_OWORD *)v53 + 275);
          *(_OWORD *)(v57 + 4409) = *(_OWORD *)((char *)v53 + 4409);
        }
        else
        {
          *(void *)(v57 + 4400) = v194;
          *(unsigned char *)(v57 + 4408) = *((unsigned char *)v53 + 4408);
          *(void *)(v57 + 4416) = v53[552];
          *(unsigned char *)(v57 + 4424) = *((unsigned char *)v53 + 4424);
          swift_bridgeObjectRetain();
        }
        uint64_t v195 = v53[554];
        if (v195 == 1)
        {
          *(_OWORD *)(v57 + 4432) = *((_OWORD *)v53 + 277);
          *(_OWORD *)(v57 + 4441) = *(_OWORD *)((char *)v53 + 4441);
        }
        else
        {
          *(void *)(v57 + 4432) = v195;
          *(unsigned char *)(v57 + 4440) = *((unsigned char *)v53 + 4440);
          *(void *)(v57 + 4448) = v53[556];
          *(unsigned char *)(v57 + 4456) = *((unsigned char *)v53 + 4456);
          swift_bridgeObjectRetain();
        }
        uint64_t v196 = v53[558];
        if (v196 == 1)
        {
          *(_OWORD *)(v57 + 4464) = *((_OWORD *)v53 + 279);
          *(_OWORD *)(v57 + 4473) = *(_OWORD *)((char *)v53 + 4473);
        }
        else
        {
          *(void *)(v57 + 4464) = v196;
          *(unsigned char *)(v57 + 4472) = *((unsigned char *)v53 + 4472);
          *(void *)(v57 + 4480) = v53[560];
          *(unsigned char *)(v57 + 4488) = *((unsigned char *)v53 + 4488);
          swift_bridgeObjectRetain();
        }
        uint64_t v197 = v53[562];
        if (v197 == 1)
        {
          *(_OWORD *)(v57 + 4496) = *((_OWORD *)v53 + 281);
          *(_OWORD *)(v57 + 4505) = *(_OWORD *)((char *)v53 + 4505);
        }
        else
        {
          *(void *)(v57 + 4496) = v197;
          *(unsigned char *)(v57 + 4504) = *((unsigned char *)v53 + 4504);
          *(void *)(v57 + 4512) = v53[564];
          *(unsigned char *)(v57 + 4520) = *((unsigned char *)v53 + 4520);
          swift_bridgeObjectRetain();
        }
        uint64_t v198 = v53[566];
        if (v198 == 1)
        {
          *(_OWORD *)(v57 + 4528) = *((_OWORD *)v53 + 283);
          *(_OWORD *)(v57 + 4537) = *(_OWORD *)((char *)v53 + 4537);
        }
        else
        {
          *(void *)(v57 + 4528) = v198;
          *(unsigned char *)(v57 + 4536) = *((unsigned char *)v53 + 4536);
          *(void *)(v57 + 4544) = v53[568];
          *(unsigned char *)(v57 + 4552) = *((unsigned char *)v53 + 4552);
          swift_bridgeObjectRetain();
        }
        uint64_t v199 = v53[570];
        if (v199 == 1)
        {
          *(_OWORD *)(v57 + 4560) = *((_OWORD *)v53 + 285);
          *(_OWORD *)(v57 + 4569) = *(_OWORD *)((char *)v53 + 4569);
        }
        else
        {
          *(void *)(v57 + 4560) = v199;
          *(unsigned char *)(v57 + 4568) = *((unsigned char *)v53 + 4568);
          *(void *)(v57 + 4576) = v53[572];
          *(unsigned char *)(v57 + 4584) = *((unsigned char *)v53 + 4584);
          swift_bridgeObjectRetain();
        }
        uint64_t v200 = v53[574];
        if (v200 == 1)
        {
          *(_OWORD *)(v57 + 4592) = *((_OWORD *)v53 + 287);
          *(_OWORD *)(v57 + 4601) = *(_OWORD *)((char *)v53 + 4601);
        }
        else
        {
          *(void *)(v57 + 4592) = v200;
          *(unsigned char *)(v57 + 4600) = *((unsigned char *)v53 + 4600);
          *(void *)(v57 + 4608) = v53[576];
          *(unsigned char *)(v57 + 4616) = *((unsigned char *)v53 + 4616);
          swift_bridgeObjectRetain();
        }
        uint64_t v201 = v53[578];
        if (v201 == 1)
        {
          *(_OWORD *)(v57 + 4624) = *((_OWORD *)v53 + 289);
          *(_OWORD *)(v57 + 4633) = *(_OWORD *)((char *)v53 + 4633);
        }
        else
        {
          *(void *)(v57 + 4624) = v201;
          *(unsigned char *)(v57 + 4632) = *((unsigned char *)v53 + 4632);
          *(void *)(v57 + 4640) = v53[580];
          *(unsigned char *)(v57 + 4648) = *((unsigned char *)v53 + 4648);
          swift_bridgeObjectRetain();
        }
        uint64_t v202 = v53[582];
        if (v202 == 1)
        {
          *(_OWORD *)(v57 + 4656) = *((_OWORD *)v53 + 291);
          *(_OWORD *)(v57 + 4665) = *(_OWORD *)((char *)v53 + 4665);
        }
        else
        {
          *(void *)(v57 + 4656) = v202;
          *(unsigned char *)(v57 + 4664) = *((unsigned char *)v53 + 4664);
          *(void *)(v57 + 4672) = v53[584];
          *(unsigned char *)(v57 + 4680) = *((unsigned char *)v53 + 4680);
          swift_bridgeObjectRetain();
        }
        uint64_t v203 = v53[586];
        if (v203 == 1)
        {
          *(_OWORD *)(v57 + 4688) = *((_OWORD *)v53 + 293);
          *(_OWORD *)(v57 + 4697) = *(_OWORD *)((char *)v53 + 4697);
        }
        else
        {
          *(void *)(v57 + 4688) = v203;
          *(unsigned char *)(v57 + 4696) = *((unsigned char *)v53 + 4696);
          *(void *)(v57 + 4704) = v53[588];
          *(unsigned char *)(v57 + 4712) = *((unsigned char *)v53 + 4712);
          swift_bridgeObjectRetain();
        }
        uint64_t v204 = v53[590];
        if (v204 == 1)
        {
          *(_OWORD *)(v57 + 4720) = *((_OWORD *)v53 + 295);
          *(_OWORD *)(v57 + 4729) = *(_OWORD *)((char *)v53 + 4729);
        }
        else
        {
          *(void *)(v57 + 4720) = v204;
          *(unsigned char *)(v57 + 4728) = *((unsigned char *)v53 + 4728);
          *(void *)(v57 + 4736) = v53[592];
          *(unsigned char *)(v57 + 4744) = *((unsigned char *)v53 + 4744);
          swift_bridgeObjectRetain();
        }
        uint64_t v205 = v53[594];
        if (v205 == 1)
        {
          *(_OWORD *)(v57 + 4752) = *((_OWORD *)v53 + 297);
          *(_OWORD *)(v57 + 4761) = *(_OWORD *)((char *)v53 + 4761);
        }
        else
        {
          *(void *)(v57 + 4752) = v205;
          *(unsigned char *)(v57 + 4760) = *((unsigned char *)v53 + 4760);
          *(void *)(v57 + 4768) = v53[596];
          *(unsigned char *)(v57 + 4776) = *((unsigned char *)v53 + 4776);
          swift_bridgeObjectRetain();
        }
        uint64_t v206 = v53[598];
        if (v206 == 1)
        {
          *(_OWORD *)(v57 + 4784) = *((_OWORD *)v53 + 299);
          *(_OWORD *)(v57 + 4793) = *(_OWORD *)((char *)v53 + 4793);
        }
        else
        {
          *(void *)(v57 + 4784) = v206;
          *(unsigned char *)(v57 + 4792) = *((unsigned char *)v53 + 4792);
          *(void *)(v57 + 4800) = v53[600];
          *(unsigned char *)(v57 + 4808) = *((unsigned char *)v53 + 4808);
          swift_bridgeObjectRetain();
        }
        uint64_t v207 = v53[602];
        if (v207 == 1)
        {
          *(_OWORD *)(v57 + 4816) = *((_OWORD *)v53 + 301);
          *(_OWORD *)(v57 + 4825) = *(_OWORD *)((char *)v53 + 4825);
        }
        else
        {
          *(void *)(v57 + 4816) = v207;
          *(unsigned char *)(v57 + 4824) = *((unsigned char *)v53 + 4824);
          *(void *)(v57 + 4832) = v53[604];
          *(unsigned char *)(v57 + 4840) = *((unsigned char *)v53 + 4840);
          swift_bridgeObjectRetain();
        }
        uint64_t v208 = v53[606];
        if (v208 == 1)
        {
          *(_OWORD *)(v57 + 4848) = *((_OWORD *)v53 + 303);
          *(_OWORD *)(v57 + 4857) = *(_OWORD *)((char *)v53 + 4857);
        }
        else
        {
          *(void *)(v57 + 4848) = v208;
          *(unsigned char *)(v57 + 4856) = *((unsigned char *)v53 + 4856);
          *(void *)(v57 + 4864) = v53[608];
          *(unsigned char *)(v57 + 4872) = *((unsigned char *)v53 + 4872);
          swift_bridgeObjectRetain();
        }
        uint64_t v209 = v53[610];
        if (v209 == 1)
        {
          *(_OWORD *)(v57 + 4880) = *((_OWORD *)v53 + 305);
          *(_OWORD *)(v57 + 4889) = *(_OWORD *)((char *)v53 + 4889);
        }
        else
        {
          *(void *)(v57 + 4880) = v209;
          *(unsigned char *)(v57 + 4888) = *((unsigned char *)v53 + 4888);
          *(void *)(v57 + 4896) = v53[612];
          *(unsigned char *)(v57 + 4904) = *((unsigned char *)v53 + 4904);
          swift_bridgeObjectRetain();
        }
        uint64_t v210 = v53[614];
        if (v210 == 1)
        {
          *(_OWORD *)(v57 + 4912) = *((_OWORD *)v53 + 307);
          *(_OWORD *)(v57 + 4921) = *(_OWORD *)((char *)v53 + 4921);
        }
        else
        {
          *(void *)(v57 + 4912) = v210;
          *(unsigned char *)(v57 + 4920) = *((unsigned char *)v53 + 4920);
          *(void *)(v57 + 4928) = v53[616];
          *(unsigned char *)(v57 + 4936) = *((unsigned char *)v53 + 4936);
          swift_bridgeObjectRetain();
        }
        *(_OWORD *)(v57 + 4944) = *((_OWORD *)v53 + 309);
        *(unsigned char *)(v57 + 4960) = *((unsigned char *)v53 + 4960);
        *(_OWORD *)(v57 + 4968) = *(_OWORD *)(v53 + 621);
        *(unsigned char *)(v57 + 4984) = *((unsigned char *)v53 + 4984);
        *(_DWORD *)(v57 + 4985) = *(_DWORD *)((char *)v53 + 4985);
        *(_WORD *)(v57 + 4989) = *(_WORD *)((char *)v53 + 4989);
        *(unsigned char *)(v57 + 4991) = *((unsigned char *)v53 + 4991);
        *(void *)(v57 + 4992) = v187;
        *(void *)(v57 + 5000) = v53[625];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v211 = (_OWORD *)(v57 + 5008);
      uint64_t v212 = v53 + 626;
      uint64_t v213 = v53[728];
      if (v213 == 1)
      {
        memcpy(v211, v212, 0x340uLL);
      }
      else
      {
        if (*(void *)v212 == 1)
        {
          *uint64_t v211 = *v212;
          *(_OWORD *)(v57 + 5017) = *(_OWORD *)((char *)v53 + 5017);
        }
        else
        {
          *(void *)(v57 + 5008) = *(void *)v212;
          *(unsigned char *)(v57 + 5016) = *((unsigned char *)v53 + 5016);
          *(void *)(v57 + 5024) = v53[628];
          *(unsigned char *)(v57 + 5032) = *((unsigned char *)v53 + 5032);
          swift_bridgeObjectRetain();
        }
        uint64_t v214 = v53[630];
        if (v214 == 1)
        {
          *(_OWORD *)(v57 + 5040) = *((_OWORD *)v53 + 315);
          *(_OWORD *)(v57 + 5049) = *(_OWORD *)((char *)v53 + 5049);
        }
        else
        {
          *(void *)(v57 + 5040) = v214;
          *(unsigned char *)(v57 + 5048) = *((unsigned char *)v53 + 5048);
          *(void *)(v57 + 5056) = v53[632];
          *(unsigned char *)(v57 + 5064) = *((unsigned char *)v53 + 5064);
          swift_bridgeObjectRetain();
        }
        uint64_t v215 = v53[634];
        if (v215 == 1)
        {
          *(_OWORD *)(v57 + 5072) = *((_OWORD *)v53 + 317);
          *(_OWORD *)(v57 + 5081) = *(_OWORD *)((char *)v53 + 5081);
        }
        else
        {
          *(void *)(v57 + 5072) = v215;
          *(unsigned char *)(v57 + 5080) = *((unsigned char *)v53 + 5080);
          *(void *)(v57 + 5088) = v53[636];
          *(unsigned char *)(v57 + 5096) = *((unsigned char *)v53 + 5096);
          swift_bridgeObjectRetain();
        }
        uint64_t v216 = v53[638];
        if (v216 == 1)
        {
          *(_OWORD *)(v57 + 5104) = *((_OWORD *)v53 + 319);
          *(_OWORD *)(v57 + 5113) = *(_OWORD *)((char *)v53 + 5113);
        }
        else
        {
          *(void *)(v57 + 5104) = v216;
          *(unsigned char *)(v57 + 5112) = *((unsigned char *)v53 + 5112);
          *(void *)(v57 + 5120) = v53[640];
          *(unsigned char *)(v57 + 5128) = *((unsigned char *)v53 + 5128);
          swift_bridgeObjectRetain();
        }
        uint64_t v217 = v53[642];
        if (v217 == 1)
        {
          *(_OWORD *)(v57 + 5136) = *((_OWORD *)v53 + 321);
          *(_OWORD *)(v57 + 5145) = *(_OWORD *)((char *)v53 + 5145);
        }
        else
        {
          *(void *)(v57 + 5136) = v217;
          *(unsigned char *)(v57 + 5144) = *((unsigned char *)v53 + 5144);
          *(void *)(v57 + 5152) = v53[644];
          *(unsigned char *)(v57 + 5160) = *((unsigned char *)v53 + 5160);
          swift_bridgeObjectRetain();
        }
        uint64_t v218 = v53[646];
        if (v218 == 1)
        {
          *(_OWORD *)(v57 + 5168) = *((_OWORD *)v53 + 323);
          *(_OWORD *)(v57 + 5177) = *(_OWORD *)((char *)v53 + 5177);
        }
        else
        {
          *(void *)(v57 + 5168) = v218;
          *(unsigned char *)(v57 + 5176) = *((unsigned char *)v53 + 5176);
          *(void *)(v57 + 5184) = v53[648];
          *(unsigned char *)(v57 + 5192) = *((unsigned char *)v53 + 5192);
          swift_bridgeObjectRetain();
        }
        uint64_t v219 = v53[650];
        if (v219 == 1)
        {
          *(_OWORD *)(v57 + 5200) = *((_OWORD *)v53 + 325);
          *(_OWORD *)(v57 + 5209) = *(_OWORD *)((char *)v53 + 5209);
        }
        else
        {
          *(void *)(v57 + 5200) = v219;
          *(unsigned char *)(v57 + 5208) = *((unsigned char *)v53 + 5208);
          *(void *)(v57 + 5216) = v53[652];
          *(unsigned char *)(v57 + 5224) = *((unsigned char *)v53 + 5224);
          swift_bridgeObjectRetain();
        }
        uint64_t v220 = v53[654];
        if (v220 == 1)
        {
          *(_OWORD *)(v57 + 5232) = *((_OWORD *)v53 + 327);
          *(_OWORD *)(v57 + 5241) = *(_OWORD *)((char *)v53 + 5241);
        }
        else
        {
          *(void *)(v57 + 5232) = v220;
          *(unsigned char *)(v57 + 5240) = *((unsigned char *)v53 + 5240);
          *(void *)(v57 + 5248) = v53[656];
          *(unsigned char *)(v57 + 5256) = *((unsigned char *)v53 + 5256);
          swift_bridgeObjectRetain();
        }
        uint64_t v221 = v53[658];
        if (v221 == 1)
        {
          *(_OWORD *)(v57 + 5264) = *((_OWORD *)v53 + 329);
          *(_OWORD *)(v57 + 5273) = *(_OWORD *)((char *)v53 + 5273);
        }
        else
        {
          *(void *)(v57 + 5264) = v221;
          *(unsigned char *)(v57 + 5272) = *((unsigned char *)v53 + 5272);
          *(void *)(v57 + 5280) = v53[660];
          *(unsigned char *)(v57 + 5288) = *((unsigned char *)v53 + 5288);
          swift_bridgeObjectRetain();
        }
        uint64_t v222 = v53[662];
        if (v222 == 1)
        {
          *(_OWORD *)(v57 + 5296) = *((_OWORD *)v53 + 331);
          *(_OWORD *)(v57 + 5305) = *(_OWORD *)((char *)v53 + 5305);
        }
        else
        {
          *(void *)(v57 + 5296) = v222;
          *(unsigned char *)(v57 + 5304) = *((unsigned char *)v53 + 5304);
          *(void *)(v57 + 5312) = v53[664];
          *(unsigned char *)(v57 + 5320) = *((unsigned char *)v53 + 5320);
          swift_bridgeObjectRetain();
        }
        uint64_t v223 = v53[666];
        if (v223 == 1)
        {
          *(_OWORD *)(v57 + 5328) = *((_OWORD *)v53 + 333);
          *(_OWORD *)(v57 + 5337) = *(_OWORD *)((char *)v53 + 5337);
        }
        else
        {
          *(void *)(v57 + 5328) = v223;
          *(unsigned char *)(v57 + 5336) = *((unsigned char *)v53 + 5336);
          *(void *)(v57 + 5344) = v53[668];
          *(unsigned char *)(v57 + 5352) = *((unsigned char *)v53 + 5352);
          swift_bridgeObjectRetain();
        }
        uint64_t v224 = v53[670];
        if (v224 == 1)
        {
          *(_OWORD *)(v57 + 5360) = *((_OWORD *)v53 + 335);
          *(_OWORD *)(v57 + 5369) = *(_OWORD *)((char *)v53 + 5369);
        }
        else
        {
          *(void *)(v57 + 5360) = v224;
          *(unsigned char *)(v57 + 5368) = *((unsigned char *)v53 + 5368);
          *(void *)(v57 + 5376) = v53[672];
          *(unsigned char *)(v57 + 5384) = *((unsigned char *)v53 + 5384);
          swift_bridgeObjectRetain();
        }
        uint64_t v225 = v53[674];
        if (v225 == 1)
        {
          *(_OWORD *)(v57 + 5392) = *((_OWORD *)v53 + 337);
          *(_OWORD *)(v57 + 5401) = *(_OWORD *)((char *)v53 + 5401);
        }
        else
        {
          *(void *)(v57 + 5392) = v225;
          *(unsigned char *)(v57 + 5400) = *((unsigned char *)v53 + 5400);
          *(void *)(v57 + 5408) = v53[676];
          *(unsigned char *)(v57 + 5416) = *((unsigned char *)v53 + 5416);
          swift_bridgeObjectRetain();
        }
        uint64_t v226 = v53[678];
        if (v226 == 1)
        {
          *(_OWORD *)(v57 + 5424) = *((_OWORD *)v53 + 339);
          *(_OWORD *)(v57 + 5433) = *(_OWORD *)((char *)v53 + 5433);
        }
        else
        {
          *(void *)(v57 + 5424) = v226;
          *(unsigned char *)(v57 + 5432) = *((unsigned char *)v53 + 5432);
          *(void *)(v57 + 5440) = v53[680];
          *(unsigned char *)(v57 + 5448) = *((unsigned char *)v53 + 5448);
          swift_bridgeObjectRetain();
        }
        uint64_t v227 = v53[682];
        if (v227 == 1)
        {
          *(_OWORD *)(v57 + 5456) = *((_OWORD *)v53 + 341);
          *(_OWORD *)(v57 + 5465) = *(_OWORD *)((char *)v53 + 5465);
        }
        else
        {
          *(void *)(v57 + 5456) = v227;
          *(unsigned char *)(v57 + 5464) = *((unsigned char *)v53 + 5464);
          *(void *)(v57 + 5472) = v53[684];
          *(unsigned char *)(v57 + 5480) = *((unsigned char *)v53 + 5480);
          swift_bridgeObjectRetain();
        }
        uint64_t v228 = v53[686];
        if (v228 == 1)
        {
          *(_OWORD *)(v57 + 5488) = *((_OWORD *)v53 + 343);
          *(_OWORD *)(v57 + 5497) = *(_OWORD *)((char *)v53 + 5497);
        }
        else
        {
          *(void *)(v57 + 5488) = v228;
          *(unsigned char *)(v57 + 5496) = *((unsigned char *)v53 + 5496);
          *(void *)(v57 + 5504) = v53[688];
          *(unsigned char *)(v57 + 5512) = *((unsigned char *)v53 + 5512);
          swift_bridgeObjectRetain();
        }
        uint64_t v229 = v53[690];
        if (v229 == 1)
        {
          *(_OWORD *)(v57 + 5520) = *((_OWORD *)v53 + 345);
          *(_OWORD *)(v57 + 5529) = *(_OWORD *)((char *)v53 + 5529);
        }
        else
        {
          *(void *)(v57 + 5520) = v229;
          *(unsigned char *)(v57 + 5528) = *((unsigned char *)v53 + 5528);
          *(void *)(v57 + 5536) = v53[692];
          *(unsigned char *)(v57 + 5544) = *((unsigned char *)v53 + 5544);
          swift_bridgeObjectRetain();
        }
        uint64_t v230 = v53[694];
        if (v230 == 1)
        {
          *(_OWORD *)(v57 + 5552) = *((_OWORD *)v53 + 347);
          *(_OWORD *)(v57 + 5561) = *(_OWORD *)((char *)v53 + 5561);
        }
        else
        {
          *(void *)(v57 + 5552) = v230;
          *(unsigned char *)(v57 + 5560) = *((unsigned char *)v53 + 5560);
          *(void *)(v57 + 5568) = v53[696];
          *(unsigned char *)(v57 + 5576) = *((unsigned char *)v53 + 5576);
          swift_bridgeObjectRetain();
        }
        uint64_t v231 = v53[698];
        if (v231 == 1)
        {
          *(_OWORD *)(v57 + 5584) = *((_OWORD *)v53 + 349);
          *(_OWORD *)(v57 + 5593) = *(_OWORD *)((char *)v53 + 5593);
        }
        else
        {
          *(void *)(v57 + 5584) = v231;
          *(unsigned char *)(v57 + 5592) = *((unsigned char *)v53 + 5592);
          *(void *)(v57 + 5600) = v53[700];
          *(unsigned char *)(v57 + 5608) = *((unsigned char *)v53 + 5608);
          swift_bridgeObjectRetain();
        }
        uint64_t v232 = v53[702];
        if (v232 == 1)
        {
          *(_OWORD *)(v57 + 5616) = *((_OWORD *)v53 + 351);
          *(_OWORD *)(v57 + 5625) = *(_OWORD *)((char *)v53 + 5625);
        }
        else
        {
          *(void *)(v57 + 5616) = v232;
          *(unsigned char *)(v57 + 5624) = *((unsigned char *)v53 + 5624);
          *(void *)(v57 + 5632) = v53[704];
          *(unsigned char *)(v57 + 5640) = *((unsigned char *)v53 + 5640);
          swift_bridgeObjectRetain();
        }
        uint64_t v233 = v53[706];
        if (v233 == 1)
        {
          *(_OWORD *)(v57 + 5648) = *((_OWORD *)v53 + 353);
          *(_OWORD *)(v57 + 5657) = *(_OWORD *)((char *)v53 + 5657);
        }
        else
        {
          *(void *)(v57 + 5648) = v233;
          *(unsigned char *)(v57 + 5656) = *((unsigned char *)v53 + 5656);
          *(void *)(v57 + 5664) = v53[708];
          *(unsigned char *)(v57 + 5672) = *((unsigned char *)v53 + 5672);
          swift_bridgeObjectRetain();
        }
        uint64_t v234 = v53[710];
        if (v234 == 1)
        {
          *(_OWORD *)(v57 + 5680) = *((_OWORD *)v53 + 355);
          *(_OWORD *)(v57 + 5689) = *(_OWORD *)((char *)v53 + 5689);
        }
        else
        {
          *(void *)(v57 + 5680) = v234;
          *(unsigned char *)(v57 + 5688) = *((unsigned char *)v53 + 5688);
          *(void *)(v57 + 5696) = v53[712];
          *(unsigned char *)(v57 + 5704) = *((unsigned char *)v53 + 5704);
          swift_bridgeObjectRetain();
        }
        uint64_t v235 = v53[714];
        if (v235 == 1)
        {
          *(_OWORD *)(v57 + 5712) = *((_OWORD *)v53 + 357);
          *(_OWORD *)(v57 + 5721) = *(_OWORD *)((char *)v53 + 5721);
        }
        else
        {
          *(void *)(v57 + 5712) = v235;
          *(unsigned char *)(v57 + 5720) = *((unsigned char *)v53 + 5720);
          *(void *)(v57 + 5728) = v53[716];
          *(unsigned char *)(v57 + 5736) = *((unsigned char *)v53 + 5736);
          swift_bridgeObjectRetain();
        }
        uint64_t v236 = v53[718];
        if (v236 == 1)
        {
          *(_OWORD *)(v57 + 5744) = *((_OWORD *)v53 + 359);
          *(_OWORD *)(v57 + 5753) = *(_OWORD *)((char *)v53 + 5753);
        }
        else
        {
          *(void *)(v57 + 5744) = v236;
          *(unsigned char *)(v57 + 5752) = *((unsigned char *)v53 + 5752);
          *(void *)(v57 + 5760) = v53[720];
          *(unsigned char *)(v57 + 5768) = *((unsigned char *)v53 + 5768);
          swift_bridgeObjectRetain();
        }
        *(_OWORD *)(v57 + 5776) = *((_OWORD *)v53 + 361);
        *(unsigned char *)(v57 + 5792) = *((unsigned char *)v53 + 5792);
        *(_OWORD *)(v57 + 5800) = *(_OWORD *)(v53 + 725);
        *(unsigned char *)(v57 + 5816) = *((unsigned char *)v53 + 5816);
        *(_DWORD *)(v57 + 5817) = *(_DWORD *)((char *)v53 + 5817);
        *(_WORD *)(v57 + 5821) = *(_WORD *)((char *)v53 + 5821);
        *(unsigned char *)(v57 + 5823) = *((unsigned char *)v53 + 5823);
        *(void *)(v57 + 5824) = v213;
        *(void *)(v57 + 5832) = v53[729];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      *(void *)(v57 + 5840) = v53[730];
      *(_DWORD *)(v57 + 5848) = *((_DWORD *)v53 + 1462);
      *(unsigned char *)(v57 + 5852) = *((unsigned char *)v53 + 5852);
      *(void *)(v57 + 5856) = v53[732];
      *(unsigned char *)(v57 + 5864) = *((unsigned char *)v53 + 5864);
      *(void *)(v57 + 5872) = v53[734];
      *(unsigned char *)(v57 + 5880) = *((unsigned char *)v53 + 5880);
      *(void *)(v57 + 5888) = v53[736];
      *(unsigned char *)(v57 + 5896) = *((unsigned char *)v53 + 5896);
      *(unsigned char *)(v57 + 5912) = *((unsigned char *)v53 + 5912);
      *(void *)(v57 + 5904) = v53[738];
      *(unsigned char *)(v57 + 5920) = *((unsigned char *)v53 + 5920);
      *(_DWORD *)(v57 + 5916) = *((_DWORD *)v53 + 1479);
      swift_bridgeObjectRetain();
    }
    uint64_t v237 = a3[40];
    *(void *)(v21 + a3[39]) = *(uint64_t *)((char *)a2 + a3[39]);
    os_log_type_t v238 = (void *)(v21 + v237);
    Swift::String v239 = (uint64_t *)((char *)a2 + v237);
    uint64_t v240 = v239[1];
    void *v238 = *v239;
    v238[1] = v240;
    uint64_t v241 = a3[41];
    uint64_t v242 = (void *)(v21 + v241);
    Swift::String v243 = (uint64_t *)((char *)a2 + v241);
    uint64_t v244 = v243[1];
    void *v242 = *v243;
    v242[1] = v244;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v21;
}